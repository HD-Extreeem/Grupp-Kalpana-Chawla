
TWITest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000486c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008486c  0008486c  0000c86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ac  20070000  00084874  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002a8  200709b0  00085228  000109b0  2**3
                  ALLOC
  4 .stack        00002000  20070c58  000854d0  000109b0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109ac  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109d5  2**0
                  CONTENTS, READONLY
  7 .debug_info   00010ad0  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b48  00000000  00000000  00021500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007c66  00000000  00000000  00025048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ea8  00000000  00000000  0002ccae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ca8  00000000  00000000  0002db56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001892b  00000000  00000000  0002e7fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011014  00000000  00000000  00047129  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00065305  00000000  00000000  0005813d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002998  00000000  00000000  000bd444  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072c58 	.word	0x20072c58
   80004:	00081281 	.word	0x00081281
   80008:	0008127d 	.word	0x0008127d
   8000c:	0008127d 	.word	0x0008127d
   80010:	0008127d 	.word	0x0008127d
   80014:	0008127d 	.word	0x0008127d
   80018:	0008127d 	.word	0x0008127d
	...
   8002c:	0008127d 	.word	0x0008127d
   80030:	0008127d 	.word	0x0008127d
   80034:	00000000 	.word	0x00000000
   80038:	000804d1 	.word	0x000804d1
   8003c:	0008019d 	.word	0x0008019d
   80040:	0008127d 	.word	0x0008127d
   80044:	0008127d 	.word	0x0008127d
   80048:	0008127d 	.word	0x0008127d
   8004c:	0008127d 	.word	0x0008127d
   80050:	0008127d 	.word	0x0008127d
   80054:	0008127d 	.word	0x0008127d
   80058:	0008127d 	.word	0x0008127d
   8005c:	0008127d 	.word	0x0008127d
   80060:	0008127d 	.word	0x0008127d
   80064:	0008127d 	.word	0x0008127d
   80068:	00000000 	.word	0x00000000
   8006c:	00081065 	.word	0x00081065
   80070:	00081079 	.word	0x00081079
   80074:	0008108d 	.word	0x0008108d
   80078:	000810a1 	.word	0x000810a1
	...
   80084:	0008149d 	.word	0x0008149d
   80088:	0008127d 	.word	0x0008127d
   8008c:	0008127d 	.word	0x0008127d
   80090:	0008127d 	.word	0x0008127d
   80094:	0008127d 	.word	0x0008127d
   80098:	0008127d 	.word	0x0008127d
   8009c:	0008127d 	.word	0x0008127d
   800a0:	0008127d 	.word	0x0008127d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008127d 	.word	0x0008127d
   800ac:	0008127d 	.word	0x0008127d
   800b0:	0008127d 	.word	0x0008127d
   800b4:	0008127d 	.word	0x0008127d
   800b8:	0008127d 	.word	0x0008127d
   800bc:	0008127d 	.word	0x0008127d
   800c0:	0008127d 	.word	0x0008127d
   800c4:	0008127d 	.word	0x0008127d
   800c8:	0008127d 	.word	0x0008127d
   800cc:	0008127d 	.word	0x0008127d
   800d0:	0008127d 	.word	0x0008127d
   800d4:	0008127d 	.word	0x0008127d
   800d8:	0008127d 	.word	0x0008127d
   800dc:	0008127d 	.word	0x0008127d
   800e0:	0008127d 	.word	0x0008127d
   800e4:	0008127d 	.word	0x0008127d
   800e8:	0008127d 	.word	0x0008127d
   800ec:	0008127d 	.word	0x0008127d
   800f0:	0008127d 	.word	0x0008127d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709b0 	.word	0x200709b0
   80110:	00000000 	.word	0x00000000
   80114:	00084874 	.word	0x00084874

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084874 	.word	0x00084874
   8013c:	200709b4 	.word	0x200709b4
   80140:	00084874 	.word	0x00084874
   80144:	00000000 	.word	0x00000000

00080148 <pio_conf_pin_to_peripheral>:
}

uint8_t pio_conf_pin_to_peripheral(pio_reg_t *port, uint32_t periph,
		uint8_t pin_number) {
	// Disable interrupts on the pin
	port->PIO_IDR |= (0x1U << pin_number);
   80148:	2301      	movs	r3, #1
   8014a:	fa03 f202 	lsl.w	r2, r3, r2
   8014e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   80150:	4313      	orrs	r3, r2
   80152:	6443      	str	r3, [r0, #68]	; 0x44

	// The pin will be set to peripheral B
	if (periph == PIO_PERIPH_B) { // 0 is peripheral A and 1 is B
   80154:	2901      	cmp	r1, #1
   80156:	d103      	bne.n	80160 <pio_conf_pin_to_peripheral+0x18>
		// Set to peripheral B
		port->PIO_ABSR |= (0x1U << pin_number);
   80158:	6f03      	ldr	r3, [r0, #112]	; 0x70
   8015a:	4313      	orrs	r3, r2
   8015c:	6703      	str	r3, [r0, #112]	; 0x70
   8015e:	e004      	b.n	8016a <pio_conf_pin_to_peripheral+0x22>
	} else if (periph == PIO_PERIPH_A) {
   80160:	b919      	cbnz	r1, 8016a <pio_conf_pin_to_peripheral+0x22>
		// Clear for peripheral A
		port->PIO_ABSR &= ~(0x1U << pin_number);
   80162:	6f03      	ldr	r3, [r0, #112]	; 0x70
   80164:	ea23 0302 	bic.w	r3, r3, r2
   80168:	6703      	str	r3, [r0, #112]	; 0x70
	}
	// The pin will be set in peripheral mode (not controllable by PIO)
	port->PIO_PDR |= (0x1U << pin_number);
   8016a:	6843      	ldr	r3, [r0, #4]
   8016c:	431a      	orrs	r2, r3
   8016e:	6042      	str	r2, [r0, #4]
	return 1;
}
   80170:	2001      	movs	r0, #1
   80172:	4770      	bx	lr

00080174 <pmc_enable_peripheral_clock>:
/*
 * These registers can only be written if the WPEN bit is cleared in
 * “PMC Write Protect Mode Register”.
 */
void pmc_enable_peripheral_clock(uint32_t id) {
	if (id <= REG_0_ID_MAX) {
   80174:	281f      	cmp	r0, #31
   80176:	d805      	bhi.n	80184 <pmc_enable_peripheral_clock+0x10>
		PMC->PMC_PCER0 = REG_0_BIT_MASK(id);
   80178:	2301      	movs	r3, #1
   8017a:	fa03 f000 	lsl.w	r0, r3, r0
   8017e:	4b06      	ldr	r3, [pc, #24]	; (80198 <pmc_enable_peripheral_clock+0x24>)
   80180:	6118      	str	r0, [r3, #16]
   80182:	4770      	bx	lr
	} else if (id <= ID_MAX) {
   80184:	282c      	cmp	r0, #44	; 0x2c
   80186:	d806      	bhi.n	80196 <pmc_enable_peripheral_clock+0x22>
		PMC->PMC_PCER1 = REG_1_BIT_MASK(id);
   80188:	3820      	subs	r0, #32
   8018a:	2301      	movs	r3, #1
   8018c:	fa03 f000 	lsl.w	r0, r3, r0
   80190:	4b01      	ldr	r3, [pc, #4]	; (80198 <pmc_enable_peripheral_clock+0x24>)
   80192:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   80196:	4770      	bx	lr
   80198:	400e0600 	.word	0x400e0600

0008019c <SysTick_Handler>:
 * @details    This is system tick interrupt headler.		 
 * @note       CoOS may schedule when exiting this ISR. 
 *******************************************************************************
 */ 
void SysTick_Handler(void)
{
   8019c:	b508      	push	{r3, lr}
    OSSchedLock++;                  /* Lock scheduler.                        */
   8019e:	4b16      	ldr	r3, [pc, #88]	; (801f8 <SysTick_Handler+0x5c>)
   801a0:	781a      	ldrb	r2, [r3, #0]
   801a2:	3201      	adds	r2, #1
   801a4:	b2d2      	uxtb	r2, r2
   801a6:	701a      	strb	r2, [r3, #0]
    OSTickCnt++;                    /* Increment systerm time.                */
   801a8:	4914      	ldr	r1, [pc, #80]	; (801fc <SysTick_Handler+0x60>)
   801aa:	e9d1 2300 	ldrd	r2, r3, [r1]
   801ae:	3201      	adds	r2, #1
   801b0:	f143 0300 	adc.w	r3, r3, #0
   801b4:	e9c1 2300 	strd	r2, r3, [r1]
#if CFG_TASK_WAITTING_EN >0    
    if(DlyList != NULL)             /* Have task in delay list?               */
   801b8:	4b11      	ldr	r3, [pc, #68]	; (80200 <SysTick_Handler+0x64>)
   801ba:	681b      	ldr	r3, [r3, #0]
   801bc:	b14b      	cbz	r3, 801d2 <SysTick_Handler+0x36>
    {
        if(DlyList->delayTick > 1)  /* Delay time > 1?                        */
   801be:	6a1a      	ldr	r2, [r3, #32]
   801c0:	2a01      	cmp	r2, #1
   801c2:	d902      	bls.n	801ca <SysTick_Handler+0x2e>
        {
			DlyList->delayTick--;   /* Decrease delay time of the list head.  */         
   801c4:	3a01      	subs	r2, #1
   801c6:	621a      	str	r2, [r3, #32]
   801c8:	e003      	b.n	801d2 <SysTick_Handler+0x36>
        }
		else
		{
			DlyList->delayTick = 0;
   801ca:	2200      	movs	r2, #0
   801cc:	621a      	str	r2, [r3, #32]
			isr_TimeDispose();       /* Call hander for delay time list        */
   801ce:	4b0d      	ldr	r3, [pc, #52]	; (80204 <SysTick_Handler+0x68>)
   801d0:	4798      	blx	r3
		}
    }
#endif
    
#if CFG_TMR_EN > 0	
    if(TmrList != NULL)             /* Have timer in working?                 */
   801d2:	4b0d      	ldr	r3, [pc, #52]	; (80208 <SysTick_Handler+0x6c>)
   801d4:	681b      	ldr	r3, [r3, #0]
   801d6:	b14b      	cbz	r3, 801ec <SysTick_Handler+0x50>
    {
        if(TmrList->tmrCnt > 1)     /* Timer time > 1?                        */
   801d8:	685a      	ldr	r2, [r3, #4]
   801da:	2a01      	cmp	r2, #1
   801dc:	d902      	bls.n	801e4 <SysTick_Handler+0x48>
        {
			TmrList->tmrCnt--;      /* Decrease timer time of the list head.  */        
   801de:	3a01      	subs	r2, #1
   801e0:	605a      	str	r2, [r3, #4]
   801e2:	e003      	b.n	801ec <SysTick_Handler+0x50>
        }
		else
		{
			TmrList->tmrCnt = 0;
   801e4:	2200      	movs	r2, #0
   801e6:	605a      	str	r2, [r3, #4]
			isr_TmrDispose();         /* Call hander for timer list             */
   801e8:	4b08      	ldr	r3, [pc, #32]	; (8020c <SysTick_Handler+0x70>)
   801ea:	4798      	blx	r3
		}
    }	
#endif
	TaskSchedReq = TRUE;
   801ec:	2201      	movs	r2, #1
   801ee:	4b08      	ldr	r3, [pc, #32]	; (80210 <SysTick_Handler+0x74>)
   801f0:	701a      	strb	r2, [r3, #0]
    OsSchedUnlock();
   801f2:	4b08      	ldr	r3, [pc, #32]	; (80214 <SysTick_Handler+0x78>)
   801f4:	4798      	blx	r3
   801f6:	bd08      	pop	{r3, pc}
   801f8:	200709d9 	.word	0x200709d9
   801fc:	200709d0 	.word	0x200709d0
   80200:	20070ac8 	.word	0x20070ac8
   80204:	00080955 	.word	0x00080955
   80208:	20070afc 	.word	0x20070afc
   8020c:	00080b15 	.word	0x00080b15
   80210:	200709da 	.word	0x200709da
   80214:	00080219 	.word	0x00080219

00080218 <OsSchedUnlock>:
 *
 * @note 
 *******************************************************************************
 */
void OsSchedUnlock(void)
{
   80218:	b508      	push	{r3, lr}
    if(OSSchedLock == 1)                /* Is OSSchedLock == 0?               */
   8021a:	4b0e      	ldr	r3, [pc, #56]	; (80254 <OsSchedUnlock+0x3c>)
   8021c:	781b      	ldrb	r3, [r3, #0]
   8021e:	b2db      	uxtb	r3, r3
   80220:	2b01      	cmp	r3, #1
   80222:	d110      	bne.n	80246 <OsSchedUnlock+0x2e>
    {
#if CFG_TASK_WAITTING_EN > 0
        if(IsrReq == TRUE)
   80224:	4b0c      	ldr	r3, [pc, #48]	; (80258 <OsSchedUnlock+0x40>)
   80226:	781b      	ldrb	r3, [r3, #0]
   80228:	2b01      	cmp	r3, #1
   8022a:	d101      	bne.n	80230 <OsSchedUnlock+0x18>
        {
            RespondSRQ();               /* Respond service request            */	
   8022c:	4b0b      	ldr	r3, [pc, #44]	; (8025c <OsSchedUnlock+0x44>)
   8022e:	4798      	blx	r3
        }
#endif
        /* Judge task state change or higher PRI task coming in               */
        if(TaskSchedReq == TRUE)
   80230:	4b0b      	ldr	r3, [pc, #44]	; (80260 <OsSchedUnlock+0x48>)
   80232:	781b      	ldrb	r3, [r3, #0]
   80234:	b2db      	uxtb	r3, r3
   80236:	2b01      	cmp	r3, #1
   80238:	d101      	bne.n	8023e <OsSchedUnlock+0x26>
        {
            Schedule();                 /* Call task schedule                 */
   8023a:	4b0a      	ldr	r3, [pc, #40]	; (80264 <OsSchedUnlock+0x4c>)
   8023c:	4798      	blx	r3
        }
		OSSchedLock = 0;
   8023e:	2200      	movs	r2, #0
   80240:	4b04      	ldr	r3, [pc, #16]	; (80254 <OsSchedUnlock+0x3c>)
   80242:	701a      	strb	r2, [r3, #0]
   80244:	bd08      	pop	{r3, pc}
    }
	else
	{
		OSSchedLock--; 	
   80246:	4b03      	ldr	r3, [pc, #12]	; (80254 <OsSchedUnlock+0x3c>)
   80248:	781a      	ldrb	r2, [r3, #0]
   8024a:	3a01      	subs	r2, #1
   8024c:	b2d2      	uxtb	r2, r2
   8024e:	701a      	strb	r2, [r3, #0]
   80250:	bd08      	pop	{r3, pc}
   80252:	bf00      	nop
   80254:	200709d9 	.word	0x200709d9
   80258:	20070a90 	.word	0x20070a90
   8025c:	000805cd 	.word	0x000805cd
   80260:	200709da 	.word	0x200709da
   80264:	000807a1 	.word	0x000807a1

00080268 <EventTaskToRdy>:
 * @details    This function is called to remove a task from event wait list,and	 
 *             then insert it into the READY list.
 *******************************************************************************
 */
void EventTaskToRdy(P_ECB pecb)
{
   80268:	b538      	push	{r3, r4, r5, lr}
   8026a:	4605      	mov	r5, r0
    P_OSTCB ptcb;
#if CFG_QUEUE_EN >0
    P_QCB   pqcb;
#endif
    ptcb = pecb->eventTCBList;
   8026c:	68c4      	ldr	r4, [r0, #12]
    if(ptcb == NULL)
   8026e:	2c00      	cmp	r4, #0
   80270:	d041      	beq.n	802f6 <EventTaskToRdy+0x8e>
        return;
    
    pecb->eventTCBList = ptcb->waitNext;/* Get first task in event waiting list*/
   80272:	6963      	ldr	r3, [r4, #20]
   80274:	60c3      	str	r3, [r0, #12]
    if(pecb->eventTCBList != NULL)      /* Is no item in event waiting list?  */
   80276:	b10b      	cbz	r3, 8027c <EventTaskToRdy+0x14>
    {
        pecb->eventTCBList->waitPrev = NULL; /* No,clear link for first item  */
   80278:	2200      	movs	r2, #0
   8027a:	619a      	str	r2, [r3, #24]
    }
    
    ptcb->waitNext = NULL;                /* Clear event waiting link for task*/
   8027c:	2300      	movs	r3, #0
   8027e:	6163      	str	r3, [r4, #20]
    ptcb->eventID  = INVALID_ID;          /* Sign that not to use.            */
   80280:	23ff      	movs	r3, #255	; 0xff
   80282:	7223      	strb	r3, [r4, #8]
    
    if(ptcb->delayTick != INVALID_VALUE)  /* Is task in delay list?           */		         
   80284:	6a23      	ldr	r3, [r4, #32]
   80286:	f1b3 3fff 	cmp.w	r3, #4294967295
   8028a:	d002      	beq.n	80292 <EventTaskToRdy+0x2a>
    {
        RemoveDelayList(ptcb);            /* Yes,remove task from DELAY list  */
   8028c:	4620      	mov	r0, r4
   8028e:	4b1a      	ldr	r3, [pc, #104]	; (802f8 <EventTaskToRdy+0x90>)
   80290:	4798      	blx	r3
    }
    if(pecb->eventType == EVENT_TYPE_MBOX)/* Is it a mailbox event?           */
   80292:	796b      	ldrb	r3, [r5, #5]
   80294:	2b02      	cmp	r3, #2
   80296:	d107      	bne.n	802a8 <EventTaskToRdy+0x40>
    {
        ptcb->pmail    = pecb->eventPtr;  /* Yes,send mail to task            */
   80298:	682b      	ldr	r3, [r5, #0]
   8029a:	6123      	str	r3, [r4, #16]
        pecb->eventPtr = NULL;            /* Clear event sign                 */
   8029c:	2300      	movs	r3, #0
   8029e:	602b      	str	r3, [r5, #0]
        pecb->eventCounter--;
   802a0:	892b      	ldrh	r3, [r5, #8]
   802a2:	3b01      	subs	r3, #1
   802a4:	812b      	strh	r3, [r5, #8]
   802a6:	e01c      	b.n	802e2 <EventTaskToRdy+0x7a>
    }
#if CFG_QUEUE_EN >0
    else if(pecb->eventType == EVENT_TYPE_QUEUE)  /* Is it a queue event?     */
   802a8:	2b03      	cmp	r3, #3
   802aa:	d112      	bne.n	802d2 <EventTaskToRdy+0x6a>
    {										   
        pqcb        = (P_QCB)pecb->eventPtr;      /* Yes,get queue pointer    */
   802ac:	682b      	ldr	r3, [r5, #0]
        ptcb->pmail = *(pqcb->qStart + pqcb->head);   /* Send mail to task    */
   802ae:	8919      	ldrh	r1, [r3, #8]
   802b0:	681a      	ldr	r2, [r3, #0]
   802b2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   802b6:	6122      	str	r2, [r4, #16]
        pqcb->head++;                             /* Clear event sign         */
   802b8:	891a      	ldrh	r2, [r3, #8]
   802ba:	3201      	adds	r2, #1
   802bc:	b292      	uxth	r2, r2
   802be:	811a      	strh	r2, [r3, #8]
        pqcb->qSize--;
   802c0:	89d9      	ldrh	r1, [r3, #14]
   802c2:	3901      	subs	r1, #1
   802c4:	81d9      	strh	r1, [r3, #14]
        if(pqcb->head == pqcb->qMaxSize)
   802c6:	8999      	ldrh	r1, [r3, #12]
   802c8:	4291      	cmp	r1, r2
   802ca:	d10a      	bne.n	802e2 <EventTaskToRdy+0x7a>
        {
            pqcb->head = 0;	
   802cc:	2200      	movs	r2, #0
   802ce:	811a      	strh	r2, [r3, #8]
   802d0:	e007      	b.n	802e2 <EventTaskToRdy+0x7a>
        }
    }
#endif

#if CFG_MAILBOX_EN >0
    else if(pecb->eventType == EVENT_TYPE_SEM)/* Is it a semaphore event?     */
   802d2:	2b01      	cmp	r3, #1
   802d4:	d105      	bne.n	802e2 <EventTaskToRdy+0x7a>
    {
        pecb->eventCounter--;                 /* Yes,clear event sign         */
   802d6:	892b      	ldrh	r3, [r5, #8]
   802d8:	3b01      	subs	r3, #1
   802da:	812b      	strh	r3, [r5, #8]
        ptcb->pmail = (void*)0xffffffff;      /* Indicate task woke by event  */
   802dc:	f04f 33ff 	mov.w	r3, #4294967295
   802e0:	6123      	str	r3, [r4, #16]
    }
#endif
	if(ptcb == TCBRunning)
   802e2:	4b06      	ldr	r3, [pc, #24]	; (802fc <EventTaskToRdy+0x94>)
   802e4:	681b      	ldr	r3, [r3, #0]
   802e6:	429c      	cmp	r4, r3
   802e8:	d102      	bne.n	802f0 <EventTaskToRdy+0x88>
	{
		ptcb->state = TASK_RUNNING;
   802ea:	2301      	movs	r3, #1
   802ec:	7163      	strb	r3, [r4, #5]
   802ee:	bd38      	pop	{r3, r4, r5, pc}
	} 
	else
	{
		InsertToTCBRdyList(ptcb);            /* Insert task into ready list  */
   802f0:	4620      	mov	r0, r4
   802f2:	4b03      	ldr	r3, [pc, #12]	; (80300 <EventTaskToRdy+0x98>)
   802f4:	4798      	blx	r3
   802f6:	bd38      	pop	{r3, r4, r5, pc}
   802f8:	000808a9 	.word	0x000808a9
   802fc:	20070ab4 	.word	0x20070ab4
   80300:	000806b1 	.word	0x000806b1

00080304 <RemoveEventWaittingList>:
 *******************************************************************************
 */
void RemoveEventWaittingList(P_OSTCB ptcb)
{
    P_ECB pecb;
    pecb = &EventTbl[ptcb->eventID];    /* Get event control block            */
   80304:	7a02      	ldrb	r2, [r0, #8]
   80306:	4b10      	ldr	r3, [pc, #64]	; (80348 <RemoveEventWaittingList+0x44>)
   80308:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    
    /* Is there only one item in event waiting list?                          */
    if((ptcb->waitNext == NULL) && (ptcb->waitPrev == NULL))
   8030c:	6943      	ldr	r3, [r0, #20]
   8030e:	b9bb      	cbnz	r3, 80340 <RemoveEventWaittingList+0x3c>
   80310:	6983      	ldr	r3, [r0, #24]
   80312:	b98b      	cbnz	r3, 80338 <RemoveEventWaittingList+0x34>
    {
        pecb->eventTCBList = NULL;      /* Yes,set event waiting list as NULL */
   80314:	60d3      	str	r3, [r2, #12]
   80316:	e00c      	b.n	80332 <RemoveEventWaittingList+0x2e>
    }
    else if(ptcb->waitPrev == NULL)/* Is the first item in event waiting list?*/
    {
        /* Yes,remove task from list,and reset event waiting list             */
        ptcb->waitNext->waitPrev = NULL;
   80318:	2100      	movs	r1, #0
   8031a:	6199      	str	r1, [r3, #24]
		pecb->eventTCBList = ptcb->waitNext;	
   8031c:	6943      	ldr	r3, [r0, #20]
   8031e:	60d3      	str	r3, [r2, #12]
        ptcb->waitNext = NULL;		
   80320:	6141      	str	r1, [r0, #20]
   80322:	e006      	b.n	80332 <RemoveEventWaittingList+0x2e>
        ptcb->waitPrev->waitNext = NULL;  /* Yes,remove task form list        */
        ptcb->waitPrev = NULL;
    }
    else                                  /* No, remove task from list        */
    {										
        ptcb->waitPrev->waitNext = ptcb->waitNext;
   80324:	614b      	str	r3, [r1, #20]
        ptcb->waitNext->waitPrev = ptcb->waitPrev;
   80326:	6943      	ldr	r3, [r0, #20]
   80328:	6982      	ldr	r2, [r0, #24]
   8032a:	619a      	str	r2, [r3, #24]
        ptcb->waitPrev = NULL;
   8032c:	2300      	movs	r3, #0
   8032e:	6183      	str	r3, [r0, #24]
        ptcb->waitNext = NULL;		
   80330:	6143      	str	r3, [r0, #20]
    }
    ptcb->eventID  = INVALID_ID;          /* Sign that not to use.            */
   80332:	23ff      	movs	r3, #255	; 0xff
   80334:	7203      	strb	r3, [r0, #8]
   80336:	4770      	bx	lr
		pecb->eventTCBList = ptcb->waitNext;	
        ptcb->waitNext = NULL;		
    }
    else if(ptcb->waitNext == NULL)/* Is the last item in event waiting list? */
    {
        ptcb->waitPrev->waitNext = NULL;  /* Yes,remove task form list        */
   80338:	2200      	movs	r2, #0
   8033a:	615a      	str	r2, [r3, #20]
        ptcb->waitPrev = NULL;
   8033c:	6182      	str	r2, [r0, #24]
   8033e:	e7f8      	b.n	80332 <RemoveEventWaittingList+0x2e>
    /* Is there only one item in event waiting list?                          */
    if((ptcb->waitNext == NULL) && (ptcb->waitPrev == NULL))
    {
        pecb->eventTCBList = NULL;      /* Yes,set event waiting list as NULL */
    }
    else if(ptcb->waitPrev == NULL)/* Is the first item in event waiting list?*/
   80340:	6981      	ldr	r1, [r0, #24]
   80342:	2900      	cmp	r1, #0
   80344:	d1ee      	bne.n	80324 <RemoveEventWaittingList+0x20>
   80346:	e7e7      	b.n	80318 <RemoveEventWaittingList+0x14>
   80348:	200709dc 	.word	0x200709dc

0008034c <RemoveLinkNode>:
 *******************************************************************************
 */
void RemoveLinkNode(P_FLAG_NODE pnode)
{
    /* If only one NODE in the list*/
    if((pnode->nextNode == NULL) && (pnode->prevNode == NULL)) 
   8034c:	6803      	ldr	r3, [r0, #0]
   8034e:	b963      	cbnz	r3, 8036a <RemoveLinkNode+0x1e>
   80350:	6843      	ldr	r3, [r0, #4]
   80352:	b923      	cbnz	r3, 8035e <RemoveLinkNode+0x12>
    {
        FlagCrl.headNode = NULL;
   80354:	4b0d      	ldr	r3, [pc, #52]	; (8038c <RemoveLinkNode+0x40>)
   80356:	2200      	movs	r2, #0
   80358:	60da      	str	r2, [r3, #12]
        FlagCrl.tailNode = NULL;
   8035a:	611a      	str	r2, [r3, #16]
   8035c:	e011      	b.n	80382 <RemoveLinkNode+0x36>
    }
    else if(pnode->nextNode == NULL)      /* If the NODE is tail              */
    {
        FlagCrl.tailNode          = pnode->prevNode;
   8035e:	4a0b      	ldr	r2, [pc, #44]	; (8038c <RemoveLinkNode+0x40>)
   80360:	6113      	str	r3, [r2, #16]
        pnode->prevNode->nextNode = NULL;
   80362:	6843      	ldr	r3, [r0, #4]
   80364:	2200      	movs	r2, #0
   80366:	601a      	str	r2, [r3, #0]
   80368:	e00b      	b.n	80382 <RemoveLinkNode+0x36>
    }
    else if(pnode->prevNode == NULL)      /* If the NODE is head              */
   8036a:	6842      	ldr	r2, [r0, #4]
   8036c:	b92a      	cbnz	r2, 8037a <RemoveLinkNode+0x2e>
    {
        FlagCrl.headNode          = pnode->nextNode;
   8036e:	4a07      	ldr	r2, [pc, #28]	; (8038c <RemoveLinkNode+0x40>)
   80370:	60d3      	str	r3, [r2, #12]
        pnode->nextNode->prevNode = NULL;	
   80372:	6803      	ldr	r3, [r0, #0]
   80374:	2200      	movs	r2, #0
   80376:	605a      	str	r2, [r3, #4]
   80378:	e003      	b.n	80382 <RemoveLinkNode+0x36>
    }
    else                                  /* The NODE is in the middle        */
    {
        pnode->nextNode->prevNode = pnode->prevNode;
   8037a:	605a      	str	r2, [r3, #4]
        pnode->prevNode->nextNode = pnode->nextNode;
   8037c:	6843      	ldr	r3, [r0, #4]
   8037e:	6802      	ldr	r2, [r0, #0]
   80380:	601a      	str	r2, [r3, #0]
    }
    pnode->waitTask->pnode = NULL;
   80382:	68c3      	ldr	r3, [r0, #12]
   80384:	2200      	movs	r2, #0
   80386:	61da      	str	r2, [r3, #28]
   80388:	4770      	bx	lr
   8038a:	bf00      	nop
   8038c:	20070a7c 	.word	0x20070a7c

00080390 <RemoveFromLink>:
 * @details   This function is called to remove a flag node from the wait list.			 
 * @note 
 *******************************************************************************
 */
static P_FLAG_NODE RemoveFromLink(P_FLAG_NODE pnode)
{
   80390:	b538      	push	{r3, r4, r5, lr}
   80392:	4605      	mov	r5, r0
    P_OSTCB ptcb;
    
    RemoveLinkNode(pnode);            /* Remove the flag node from wait list. */			 
   80394:	4b0c      	ldr	r3, [pc, #48]	; (803c8 <RemoveFromLink+0x38>)
   80396:	4798      	blx	r3
    ptcb = pnode->waitTask;
   80398:	68ec      	ldr	r4, [r5, #12]
    
    /* The task in the delay list */
    if(ptcb->delayTick != INVALID_VALUE)/* If the task is in tick delay list  */			         
   8039a:	6a23      	ldr	r3, [r4, #32]
   8039c:	f1b3 3fff 	cmp.w	r3, #4294967295
   803a0:	d002      	beq.n	803a8 <RemoveFromLink+0x18>
    {
        RemoveDelayList(ptcb);        /* Remove the task from tick delay list */	
   803a2:	4620      	mov	r0, r4
   803a4:	4b09      	ldr	r3, [pc, #36]	; (803cc <RemoveFromLink+0x3c>)
   803a6:	4798      	blx	r3
    }
	
	ptcb->pnode = (void*)0xffffffff;
   803a8:	f04f 33ff 	mov.w	r3, #4294967295
   803ac:	61e3      	str	r3, [r4, #28]

	if(ptcb == TCBRunning)
   803ae:	4b08      	ldr	r3, [pc, #32]	; (803d0 <RemoveFromLink+0x40>)
   803b0:	681b      	ldr	r3, [r3, #0]
   803b2:	429c      	cmp	r4, r3
   803b4:	d102      	bne.n	803bc <RemoveFromLink+0x2c>
	{
		ptcb->state = TASK_RUNNING;
   803b6:	2301      	movs	r3, #1
   803b8:	7163      	strb	r3, [r4, #5]
   803ba:	e002      	b.n	803c2 <RemoveFromLink+0x32>
	} 
	else
	{
		InsertToTCBRdyList(ptcb);         /* Insert the task to ready list        */	
   803bc:	4620      	mov	r0, r4
   803be:	4b05      	ldr	r3, [pc, #20]	; (803d4 <RemoveFromLink+0x44>)
   803c0:	4798      	blx	r3
	}   
    return (pnode->nextNode);	
}
   803c2:	6828      	ldr	r0, [r5, #0]
   803c4:	bd38      	pop	{r3, r4, r5, pc}
   803c6:	bf00      	nop
   803c8:	0008034d 	.word	0x0008034d
   803cc:	000808a9 	.word	0x000808a9
   803d0:	20070ab4 	.word	0x20070ab4
   803d4:	000806b1 	.word	0x000806b1

000803d8 <CoSetFlag>:
 * @details    This function is called to set a flag. 
 * @note 
 *******************************************************************************
 */
StatusType CoSetFlag(OS_FlagID id)
{
   803d8:	b570      	push	{r4, r5, r6, lr}
    P_FLAG_NODE pnode;
    P_FCB pfcb;
    pfcb  = &FlagCrl;
    
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= FLAG_MAX_NUM)              /* Flag is valid or not               */							
   803da:	281f      	cmp	r0, #31
   803dc:	d831      	bhi.n	80442 <CoSetFlag+0x6a>
    {
        return E_INVALID_ID;            /* Invalid flag id                    */      	
    }
    if((pfcb->flagActive&(1u<<id)) == 0)
   803de:	2501      	movs	r5, #1
   803e0:	4085      	lsls	r5, r0
   803e2:	4b1b      	ldr	r3, [pc, #108]	; (80450 <CoSetFlag+0x78>)
   803e4:	689b      	ldr	r3, [r3, #8]
   803e6:	421d      	tst	r5, r3
   803e8:	d02d      	beq.n	80446 <CoSetFlag+0x6e>
    {
        return E_INVALID_ID;            /* Flag is not exist                  */
    }
#endif
    
    if((pfcb->flagRdy&(1u<<id)) != 0)    /* Flag had already been set          */
   803ea:	4b19      	ldr	r3, [pc, #100]	; (80450 <CoSetFlag+0x78>)
   803ec:	681b      	ldr	r3, [r3, #0]
   803ee:	421d      	tst	r5, r3
   803f0:	d12b      	bne.n	8044a <CoSetFlag+0x72>
    {
    	return E_OK;
    }
    
    pfcb->flagRdy |= (1u<<id);           /* Update the flags ready list        */
   803f2:	4a17      	ldr	r2, [pc, #92]	; (80450 <CoSetFlag+0x78>)
   803f4:	432b      	orrs	r3, r5
   803f6:	6013      	str	r3, [r2, #0]
    
    OsSchedLock();
   803f8:	4b16      	ldr	r3, [pc, #88]	; (80454 <CoSetFlag+0x7c>)
   803fa:	7819      	ldrb	r1, [r3, #0]
   803fc:	3101      	adds	r1, #1
   803fe:	b2c9      	uxtb	r1, r1
   80400:	7019      	strb	r1, [r3, #0]
    pnode = pfcb->headNode;	  		
   80402:	68d0      	ldr	r0, [r2, #12]
    while(pnode != NULL)
   80404:	b1c8      	cbz	r0, 8043a <CoSetFlag+0x62>
                continue;	
            }	
      	}
        else                           /* Extract only the bits we want       */	
      	{
            if( (pnode->waitFlags & pfcb->flagRdy) != 0)
   80406:	4614      	mov	r4, r2
            {
                /* Remove the flag node from the wait list                    */
                pnode = RemoveFromLink(pnode);	 	
   80408:	4e13      	ldr	r6, [pc, #76]	; (80458 <CoSetFlag+0x80>)
    
    OsSchedLock();
    pnode = pfcb->headNode;	  		
    while(pnode != NULL)
    {
        if(pnode->waitType == OPT_WAIT_ALL)   /* Extract all the bits we want */
   8040a:	7c03      	ldrb	r3, [r0, #16]
   8040c:	b94b      	cbnz	r3, 80422 <CoSetFlag+0x4a>
      	{			
            if((pnode->waitFlags&pfcb->flagRdy) == pnode->waitFlags)
   8040e:	6883      	ldr	r3, [r0, #8]
   80410:	6822      	ldr	r2, [r4, #0]
   80412:	401a      	ands	r2, r3
   80414:	4293      	cmp	r3, r2
   80416:	d10d      	bne.n	80434 <CoSetFlag+0x5c>
            {
               /* Remove the flag node from the wait list                    */
                pnode = RemoveFromLink(pnode);		
   80418:	47b0      	blx	r6
                if((pfcb->resetOpt&(1u<<id)) != 0)/* If the flags is auto-reset*/
   8041a:	6863      	ldr	r3, [r4, #4]
   8041c:	421d      	tst	r5, r3
   8041e:	d10c      	bne.n	8043a <CoSetFlag+0x62>
   80420:	e009      	b.n	80436 <CoSetFlag+0x5e>
                continue;	
            }	
      	}
        else                           /* Extract only the bits we want       */	
      	{
            if( (pnode->waitFlags & pfcb->flagRdy) != 0)
   80422:	6822      	ldr	r2, [r4, #0]
   80424:	6883      	ldr	r3, [r0, #8]
   80426:	421a      	tst	r2, r3
   80428:	d004      	beq.n	80434 <CoSetFlag+0x5c>
            {
                /* Remove the flag node from the wait list                    */
                pnode = RemoveFromLink(pnode);	 	
   8042a:	47b0      	blx	r6
                if((pfcb->resetOpt&(1u<<id)) != 0)
   8042c:	6863      	ldr	r3, [r4, #4]
   8042e:	421d      	tst	r5, r3
   80430:	d103      	bne.n	8043a <CoSetFlag+0x62>
   80432:	e000      	b.n	80436 <CoSetFlag+0x5e>
                    break;              /* The flags is auto-reset            */	
                }
                continue;
            }	
      	}
      	pnode = pnode->nextNode;					
   80434:	6800      	ldr	r0, [r0, #0]
    
    pfcb->flagRdy |= (1u<<id);           /* Update the flags ready list        */
    
    OsSchedLock();
    pnode = pfcb->headNode;	  		
    while(pnode != NULL)
   80436:	2800      	cmp	r0, #0
   80438:	d1e7      	bne.n	8040a <CoSetFlag+0x32>
                continue;
            }	
      	}
      	pnode = pnode->nextNode;					
    }
    OsSchedUnlock();
   8043a:	4b08      	ldr	r3, [pc, #32]	; (8045c <CoSetFlag+0x84>)
   8043c:	4798      	blx	r3
    return E_OK;
   8043e:	2000      	movs	r0, #0
   80440:	bd70      	pop	{r4, r5, r6, pc}
    pfcb  = &FlagCrl;
    
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= FLAG_MAX_NUM)              /* Flag is valid or not               */							
    {
        return E_INVALID_ID;            /* Invalid flag id                    */      	
   80442:	2001      	movs	r0, #1
   80444:	bd70      	pop	{r4, r5, r6, pc}
    }
    if((pfcb->flagActive&(1u<<id)) == 0)
    {
        return E_INVALID_ID;            /* Flag is not exist                  */
   80446:	2001      	movs	r0, #1
   80448:	bd70      	pop	{r4, r5, r6, pc}
    }
#endif
    
    if((pfcb->flagRdy&(1u<<id)) != 0)    /* Flag had already been set          */
    {
    	return E_OK;
   8044a:	2000      	movs	r0, #0
      	}
      	pnode = pnode->nextNode;					
    }
    OsSchedUnlock();
    return E_OK;
}
   8044c:	bd70      	pop	{r4, r5, r6, pc}
   8044e:	bf00      	nop
   80450:	20070a7c 	.word	0x20070a7c
   80454:	200709d9 	.word	0x200709d9
   80458:	00080391 	.word	0x00080391
   8045c:	00080219 	.word	0x00080219

00080460 <CoStkOverflowHook>:
 * @par Description
 * @details    This function is a hook for stack overflow.	 
 *******************************************************************************
 */
void CoStkOverflowHook(OS_TID taskID)
{
   80460:	e7fe      	b.n	80460 <CoStkOverflowHook>
   80462:	bf00      	nop

00080464 <CoPostMail>:
 * @details    This function is called to post a mail. 
 * @note 
 *******************************************************************************
 */
StatusType CoPostMail(OS_EventID id,void* pmail)
{
   80464:	b538      	push	{r3, r4, r5, lr}
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                
   80466:	2809      	cmp	r0, #9
   80468:	d816      	bhi.n	80498 <CoPostMail+0x34>
    {
        return E_INVALID_ID;            /* Invalid id,return error            */
    }
#endif

    pecb = &EventTbl[id];
   8046a:	0100      	lsls	r0, r0, #4
   8046c:	4a0d      	ldr	r2, [pc, #52]	; (804a4 <CoPostMail+0x40>)
   8046e:	1883      	adds	r3, r0, r2
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_MBOX)/* Validate event control block type*/
   80470:	795c      	ldrb	r4, [r3, #5]
   80472:	2c02      	cmp	r4, #2
   80474:	d112      	bne.n	8049c <CoPostMail+0x38>
    {
        return E_INVALID_ID;              /* Event is not mailbox,return error*/
    }
#endif

    if(pecb->eventCounter == 0)   /* If mailbox doesn't already have a message*/	
   80476:	891c      	ldrh	r4, [r3, #8]
   80478:	b994      	cbnz	r4, 804a0 <CoPostMail+0x3c>
    {
        OsSchedLock();
   8047a:	4c0b      	ldr	r4, [pc, #44]	; (804a8 <CoPostMail+0x44>)
   8047c:	7825      	ldrb	r5, [r4, #0]
   8047e:	3501      	adds	r5, #1
   80480:	b2ed      	uxtb	r5, r5
   80482:	7025      	strb	r5, [r4, #0]
        pecb->eventPtr     = pmail;       /* Place message in mailbox         */
   80484:	5081      	str	r1, [r0, r2]
        pecb->eventCounter = 1;
   80486:	2201      	movs	r2, #1
   80488:	811a      	strh	r2, [r3, #8]
        EventTaskToRdy(pecb);             /* Check waiting list               */
   8048a:	4618      	mov	r0, r3
   8048c:	4b07      	ldr	r3, [pc, #28]	; (804ac <CoPostMail+0x48>)
   8048e:	4798      	blx	r3
        OsSchedUnlock();
   80490:	4b07      	ldr	r3, [pc, #28]	; (804b0 <CoPostMail+0x4c>)
   80492:	4798      	blx	r3
        return E_OK;	
   80494:	2000      	movs	r0, #0
   80496:	bd38      	pop	{r3, r4, r5, pc}
{
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                
    {
        return E_INVALID_ID;            /* Invalid id,return error            */
   80498:	2001      	movs	r0, #1
   8049a:	bd38      	pop	{r3, r4, r5, pc}

    pecb = &EventTbl[id];
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_MBOX)/* Validate event control block type*/
    {
        return E_INVALID_ID;              /* Event is not mailbox,return error*/
   8049c:	2001      	movs	r0, #1
   8049e:	bd38      	pop	{r3, r4, r5, pc}
        OsSchedUnlock();
        return E_OK;	
    }
    else                          /* If there is already a message in mailbox */              
    {
        return E_MBOX_FULL;       /* Mailbox is full,and return "E_MBOX_FULL" */
   804a0:	2007      	movs	r0, #7
    }
}
   804a2:	bd38      	pop	{r3, r4, r5, pc}
   804a4:	200709dc 	.word	0x200709dc
   804a8:	200709d9 	.word	0x200709d9
   804ac:	00080269 	.word	0x00080269
   804b0:	00080219 	.word	0x00080219

000804b4 <IRQ_ENABLE_RESTORE>:
 * @details    This function is called to ENABLE Interrupt.
 ******************************************************************************
 */
void IRQ_ENABLE_RESTORE(void)
{ 
  __asm volatile 
   804b4:	b662      	cpsie	i
   804b6:	4770      	bx	lr

000804b8 <IRQ_DISABLE_SAVE>:
 * @details    This function is called to close Interrupt.
 ******************************************************************************
 */
void IRQ_DISABLE_SAVE(void)
{  
  __asm volatile 
   804b8:	b672      	cpsid	i
   804ba:	4770      	bx	lr

000804bc <SwitchContext>:
 *              Switch Context for task change
 ******************************************************************************
 */
void SwitchContext(void)
{
  __asm volatile
   804bc:	4b02      	ldr	r3, [pc, #8]	; (804c8 <SwitchContext+0xc>)
   804be:	681b      	ldr	r3, [r3, #0]
   804c0:	4a02      	ldr	r2, [pc, #8]	; (804cc <SwitchContext+0x10>)
   804c2:	6811      	ldr	r1, [r2, #0]
   804c4:	6019      	str	r1, [r3, #0]
   804c6:	4770      	bx	lr
   804c8:	2007013c 	.word	0x2007013c
   804cc:	20070138 	.word	0x20070138

000804d0 <PendSV_Handler>:

#if CFG_CHIP_TYPE == 1
void PendSV_Handler(void)
{
////////debug block /////////////////////////
  __asm volatile
   804d0:	4b0b      	ldr	r3, [pc, #44]	; (80500 <exitPendSV+0xc>)
   804d2:	6819      	ldr	r1, [r3, #0]
   804d4:	4a0b      	ldr	r2, [pc, #44]	; (80504 <exitPendSV+0x10>)
   804d6:	6812      	ldr	r2, [r2, #0]
   804d8:	4291      	cmp	r1, r2
   804da:	f000 800b 	beq.w	804f4 <exitPendSV>
   804de:	f3ef 8009 	mrs	r0, PSP
   804e2:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   804e6:	6008      	str	r0, [r1, #0]
   804e8:	601a      	str	r2, [r3, #0]
   804ea:	6810      	ldr	r0, [r2, #0]
   804ec:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   804f0:	f380 8809 	msr	PSP, r0

000804f4 <exitPendSV>:
   804f4:	4b04      	ldr	r3, [pc, #16]	; (80508 <exitPendSV+0x14>)
   804f6:	2000      	movs	r0, #0
   804f8:	7018      	strb	r0, [r3, #0]
   804fa:	f04e 0e04 	orr.w	lr, lr, #4
   804fe:	4770      	bx	lr
   80500:	20070ab4 	.word	0x20070ab4
   80504:	20070ab8 	.word	0x20070ab8
   80508:	200709d9 	.word	0x200709d9

0008050c <CoPostQueueMail>:
 * @details    This function is called to post a mail to queue.
 * @note 
 *******************************************************************************
 */
StatusType CoPostQueueMail(OS_EventID id,void* pmail)
{	
   8050c:	b510      	push	{r4, lr}
    P_ECB pecb;
    P_QCB pqcb;
#if CFG_PAR_CHECKOUT_EN >0                     
    if(id >= CFG_MAX_EVENT)	
   8050e:	2809      	cmp	r0, #9
   80510:	d825      	bhi.n	8055e <CoPostQueueMail+0x52>
    {
        return E_INVALID_ID;          
    }
#endif

    pecb = &EventTbl[id];
   80512:	0102      	lsls	r2, r0, #4
   80514:	4b15      	ldr	r3, [pc, #84]	; (8056c <CoPostQueueMail+0x60>)
   80516:	18d0      	adds	r0, r2, r3
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_QUEUE)   
   80518:	7944      	ldrb	r4, [r0, #5]
   8051a:	2c03      	cmp	r4, #3
   8051c:	d121      	bne.n	80562 <CoPostQueueMail+0x56>
    {
        return E_INVALID_ID;            /* The event type isn't queue,return  */	
    }	
#endif
    pqcb = (P_QCB)pecb->eventPtr;	
   8051e:	58d3      	ldr	r3, [r2, r3]
    if(pqcb->qSize == pqcb->qMaxSize)   /* If queue is full                   */
   80520:	89dc      	ldrh	r4, [r3, #14]
   80522:	899a      	ldrh	r2, [r3, #12]
   80524:	4294      	cmp	r4, r2
   80526:	d01e      	beq.n	80566 <CoPostQueueMail+0x5a>
    {
        return E_QUEUE_FULL;
    }
    else                                /* If queue is not full               */
    {
        OsSchedLock();
   80528:	4a11      	ldr	r2, [pc, #68]	; (80570 <CoPostQueueMail+0x64>)
   8052a:	7814      	ldrb	r4, [r2, #0]
   8052c:	3401      	adds	r4, #1
   8052e:	b2e4      	uxtb	r4, r4
   80530:	7014      	strb	r4, [r2, #0]
        *(pqcb->qStart + pqcb->tail) = pmail;   /* Insert message into queue  */
   80532:	895c      	ldrh	r4, [r3, #10]
   80534:	681a      	ldr	r2, [r3, #0]
   80536:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
        pqcb->tail++;                           /* Update queue tail          */
   8053a:	895a      	ldrh	r2, [r3, #10]
   8053c:	3201      	adds	r2, #1
   8053e:	b292      	uxth	r2, r2
   80540:	815a      	strh	r2, [r3, #10]
        pqcb->qSize++;          /* Update the number of messages in the queue */
   80542:	89d9      	ldrh	r1, [r3, #14]
   80544:	3101      	adds	r1, #1
   80546:	81d9      	strh	r1, [r3, #14]
        if(pqcb->tail == pqcb->qMaxSize)        /* Check queue tail           */   
   80548:	8999      	ldrh	r1, [r3, #12]
   8054a:	4291      	cmp	r1, r2
        {
            pqcb->tail = 0;	
   8054c:	bf04      	itt	eq
   8054e:	2200      	moveq	r2, #0
   80550:	815a      	strheq	r2, [r3, #10]
        }
        EventTaskToRdy(pecb);           /* Check the event waiting list       */
   80552:	4b08      	ldr	r3, [pc, #32]	; (80574 <CoPostQueueMail+0x68>)
   80554:	4798      	blx	r3
        OsSchedUnlock();
   80556:	4b08      	ldr	r3, [pc, #32]	; (80578 <CoPostQueueMail+0x6c>)
   80558:	4798      	blx	r3
        return E_OK;
   8055a:	2000      	movs	r0, #0
   8055c:	bd10      	pop	{r4, pc}
    P_ECB pecb;
    P_QCB pqcb;
#if CFG_PAR_CHECKOUT_EN >0                     
    if(id >= CFG_MAX_EVENT)	
    {
        return E_INVALID_ID;          
   8055e:	2001      	movs	r0, #1
   80560:	bd10      	pop	{r4, pc}

    pecb = &EventTbl[id];
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_QUEUE)   
    {
        return E_INVALID_ID;            /* The event type isn't queue,return  */	
   80562:	2001      	movs	r0, #1
   80564:	bd10      	pop	{r4, pc}
    }	
#endif
    pqcb = (P_QCB)pecb->eventPtr;	
    if(pqcb->qSize == pqcb->qMaxSize)   /* If queue is full                   */
    {
        return E_QUEUE_FULL;
   80566:	2008      	movs	r0, #8
        }
        EventTaskToRdy(pecb);           /* Check the event waiting list       */
        OsSchedUnlock();
        return E_OK;
    }
}
   80568:	bd10      	pop	{r4, pc}
   8056a:	bf00      	nop
   8056c:	200709dc 	.word	0x200709dc
   80570:	200709d9 	.word	0x200709d9
   80574:	00080269 	.word	0x00080269
   80578:	00080219 	.word	0x00080219

0008057c <CoPostSem>:
 *
 * @note 
 *******************************************************************************
 */
StatusType CoPostSem(OS_EventID id)
{
   8057c:	b508      	push	{r3, lr}
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                  
   8057e:	2809      	cmp	r0, #9
   80580:	d816      	bhi.n	805b0 <CoPostSem+0x34>
    {
        return E_INVALID_ID;
    }
#endif

    pecb = &EventTbl[id];
   80582:	4b0e      	ldr	r3, [pc, #56]	; (805bc <CoPostSem+0x40>)
   80584:	eb03 1000 	add.w	r0, r3, r0, lsl #4
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_SEM) /* Invalid event control block type */
   80588:	7943      	ldrb	r3, [r0, #5]
   8058a:	2b01      	cmp	r3, #1
   8058c:	d112      	bne.n	805b4 <CoPostSem+0x38>
        return E_INVALID_ID;	
    }
#endif

    /* Make sure semaphore will not overflow */
    if(pecb->eventCounter == pecb->initialEventCounter) 
   8058e:	8903      	ldrh	r3, [r0, #8]
   80590:	8942      	ldrh	r2, [r0, #10]
   80592:	429a      	cmp	r2, r3
   80594:	d010      	beq.n	805b8 <CoPostSem+0x3c>
    {
        return E_SEM_FULL;    /* The counter of Semaphore reach the max number*/
    }
    OsSchedLock();
   80596:	4a0a      	ldr	r2, [pc, #40]	; (805c0 <CoPostSem+0x44>)
   80598:	7811      	ldrb	r1, [r2, #0]
   8059a:	3101      	adds	r1, #1
   8059c:	b2c9      	uxtb	r1, r1
   8059e:	7011      	strb	r1, [r2, #0]
    pecb->eventCounter++;     /* Increment semaphore count to register event  */
   805a0:	3301      	adds	r3, #1
   805a2:	8103      	strh	r3, [r0, #8]
    EventTaskToRdy(pecb);     /* Check semaphore event waiting list           */
   805a4:	4b07      	ldr	r3, [pc, #28]	; (805c4 <CoPostSem+0x48>)
   805a6:	4798      	blx	r3
    OsSchedUnlock();
   805a8:	4b07      	ldr	r3, [pc, #28]	; (805c8 <CoPostSem+0x4c>)
   805aa:	4798      	blx	r3
    return E_OK;
   805ac:	2000      	movs	r0, #0
   805ae:	bd08      	pop	{r3, pc}
{
    P_ECB pecb;
#if CFG_PAR_CHECKOUT_EN >0
    if(id >= CFG_MAX_EVENT)	                  
    {
        return E_INVALID_ID;
   805b0:	2001      	movs	r0, #1
   805b2:	bd08      	pop	{r3, pc}

    pecb = &EventTbl[id];
#if CFG_PAR_CHECKOUT_EN >0
    if(pecb->eventType != EVENT_TYPE_SEM) /* Invalid event control block type */
    {
        return E_INVALID_ID;	
   805b4:	2001      	movs	r0, #1
   805b6:	bd08      	pop	{r3, pc}
#endif

    /* Make sure semaphore will not overflow */
    if(pecb->eventCounter == pecb->initialEventCounter) 
    {
        return E_SEM_FULL;    /* The counter of Semaphore reach the max number*/
   805b8:	2006      	movs	r0, #6
    pecb->eventCounter++;     /* Increment semaphore count to register event  */
    EventTaskToRdy(pecb);     /* Check semaphore event waiting list           */
    OsSchedUnlock();
    return E_OK;
		
}
   805ba:	bd08      	pop	{r3, pc}
   805bc:	200709dc 	.word	0x200709dc
   805c0:	200709d9 	.word	0x200709d9
   805c4:	00080269 	.word	0x00080269
   805c8:	00080219 	.word	0x00080219

000805cc <RespondSRQ>:
 *             request queue.
 * @note 
 *******************************************************************************
 */
void RespondSRQ(void)
{
   805cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    SQC cell;

#endif

#if (CFG_TASK_WAITTING_EN > 0)
    if(TimeReq == TRUE)                 /* Time delay request?                */
   805d0:	4b2a      	ldr	r3, [pc, #168]	; (8067c <RespondSRQ+0xb0>)
   805d2:	781b      	ldrb	r3, [r3, #0]
   805d4:	2b01      	cmp	r3, #1
   805d6:	d104      	bne.n	805e2 <RespondSRQ+0x16>
    {
        TimeDispose();                  /* Yes,call handler                   */
   805d8:	4b29      	ldr	r3, [pc, #164]	; (80680 <RespondSRQ+0xb4>)
   805da:	4798      	blx	r3
        TimeReq = FALSE;                /* Reset time delay request false     */
   805dc:	2200      	movs	r2, #0
   805de:	4b27      	ldr	r3, [pc, #156]	; (8067c <RespondSRQ+0xb0>)
   805e0:	701a      	strb	r2, [r3, #0]
    }
#endif
#if CFG_TMR_EN  > 0
    if(TimerReq == TRUE)                /* Timer request?                     */
   805e2:	4b28      	ldr	r3, [pc, #160]	; (80684 <RespondSRQ+0xb8>)
   805e4:	781b      	ldrb	r3, [r3, #0]
   805e6:	2b01      	cmp	r3, #1
   805e8:	d104      	bne.n	805f4 <RespondSRQ+0x28>
    {
        TmrDispose();                   /* Yes,call handler                   */
   805ea:	4b27      	ldr	r3, [pc, #156]	; (80688 <RespondSRQ+0xbc>)
   805ec:	4798      	blx	r3
        TimerReq = FALSE;               /* Reset timer request false          */
   805ee:	2200      	movs	r2, #0
   805f0:	4b24      	ldr	r3, [pc, #144]	; (80684 <RespondSRQ+0xb8>)
   805f2:	701a      	strb	r2, [r3, #0]
    }
#endif

#if CFG_MAX_SERVICE_REQUEST > 0

    while (ServiceReq.cnt != 0)
   805f4:	4c25      	ldr	r4, [pc, #148]	; (8068c <RespondSRQ+0xc0>)
    {
        IRQ_DISABLE_SAVE ();            /* need to protect the following      */
   805f6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 806a4 <RespondSRQ+0xd8>
        cell = ServiceReq.cell[ServiceReq.head];  /* extract one cell         */
        /* move head (pop)          */
        ServiceReq.head = ((U8)(ServiceReq.head + 1)) % ((U8)CFG_MAX_SERVICE_REQUEST);
   805fa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 806ac <RespondSRQ+0xe0>
        ServiceReq.cnt--;
        IRQ_ENABLE_RESTORE ();          /* now use the cell copy              */
   805fe:	4f24      	ldr	r7, [pc, #144]	; (80690 <RespondSRQ+0xc4>)
   80600:	e02d      	b.n	8065e <RespondSRQ+0x92>

#if CFG_MAX_SERVICE_REQUEST > 0

    while (ServiceReq.cnt != 0)
    {
        IRQ_DISABLE_SAVE ();            /* need to protect the following      */
   80602:	47c8      	blx	r9
        cell = ServiceReq.cell[ServiceReq.head];  /* extract one cell         */
   80604:	7862      	ldrb	r2, [r4, #1]
   80606:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
   8060a:	f891 a004 	ldrb.w	sl, [r1, #4]
   8060e:	794d      	ldrb	r5, [r1, #5]
   80610:	688e      	ldr	r6, [r1, #8]
        /* move head (pop)          */
        ServiceReq.head = ((U8)(ServiceReq.head + 1)) % ((U8)CFG_MAX_SERVICE_REQUEST);
   80612:	3201      	adds	r2, #1
   80614:	b2d2      	uxtb	r2, r2
   80616:	fba8 1302 	umull	r1, r3, r8, r2
   8061a:	085b      	lsrs	r3, r3, #1
   8061c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   80620:	1ad2      	subs	r2, r2, r3
   80622:	7062      	strb	r2, [r4, #1]
        ServiceReq.cnt--;
   80624:	7823      	ldrb	r3, [r4, #0]
   80626:	3b01      	subs	r3, #1
   80628:	7023      	strb	r3, [r4, #0]
        IRQ_ENABLE_RESTORE ();          /* now use the cell copy              */
   8062a:	47b8      	blx	r7

        switch(cell.type)               /* Judge service request type         */
   8062c:	f10a 33ff 	add.w	r3, sl, #4294967295
   80630:	2b03      	cmp	r3, #3
   80632:	d814      	bhi.n	8065e <RespondSRQ+0x92>
   80634:	e8df f003 	tbb	[pc, r3]
   80638:	0f0b0602 	.word	0x0f0b0602
        {
#if CFG_SEM_EN > 0
        case SEM_REQ:                   /* Semaphore post request,call handler*/
            CoPostSem(cell.id);
   8063c:	4628      	mov	r0, r5
   8063e:	4b15      	ldr	r3, [pc, #84]	; (80694 <RespondSRQ+0xc8>)
   80640:	4798      	blx	r3
            break;
   80642:	e00c      	b.n	8065e <RespondSRQ+0x92>
#endif
#if CFG_MAILBOX_EN > 0
        case MBOX_REQ:                  /* Mailbox post request,call handler  */
            CoPostMail(cell.id, cell.arg);
   80644:	4628      	mov	r0, r5
   80646:	4631      	mov	r1, r6
   80648:	4b13      	ldr	r3, [pc, #76]	; (80698 <RespondSRQ+0xcc>)
   8064a:	4798      	blx	r3
            break;
   8064c:	e007      	b.n	8065e <RespondSRQ+0x92>
#endif
#if CFG_FLAG_EN > 0
        case FLAG_REQ:                  /* Flag set request,call handler      */
            CoSetFlag(cell.id);
   8064e:	4628      	mov	r0, r5
   80650:	4b12      	ldr	r3, [pc, #72]	; (8069c <RespondSRQ+0xd0>)
   80652:	4798      	blx	r3
            break;
   80654:	e003      	b.n	8065e <RespondSRQ+0x92>
#endif
#if CFG_QUEUE_EN > 0
        case QUEUE_REQ:                 /* Queue post request,call handler    */
            CoPostQueueMail(cell.id, cell.arg);
   80656:	4628      	mov	r0, r5
   80658:	4631      	mov	r1, r6
   8065a:	4b11      	ldr	r3, [pc, #68]	; (806a0 <RespondSRQ+0xd4>)
   8065c:	4798      	blx	r3
    }
#endif

#if CFG_MAX_SERVICE_REQUEST > 0

    while (ServiceReq.cnt != 0)
   8065e:	7823      	ldrb	r3, [r4, #0]
   80660:	2b00      	cmp	r3, #0
   80662:	d1ce      	bne.n	80602 <RespondSRQ+0x36>
        default:                        /* Others,break                       */
            break;
        }
    }
#endif
    IRQ_DISABLE_SAVE ();                /* need to protect the following      */
   80664:	4b0f      	ldr	r3, [pc, #60]	; (806a4 <RespondSRQ+0xd8>)
   80666:	4798      	blx	r3

    if (ServiceReq.cnt == 0)            /* another item in the queue already? */
   80668:	4b08      	ldr	r3, [pc, #32]	; (8068c <RespondSRQ+0xc0>)
   8066a:	781b      	ldrb	r3, [r3, #0]
   8066c:	b913      	cbnz	r3, 80674 <RespondSRQ+0xa8>
    {
        IsrReq = FALSE;                 /* queue still empty here             */
   8066e:	2200      	movs	r2, #0
   80670:	4b0d      	ldr	r3, [pc, #52]	; (806a8 <RespondSRQ+0xdc>)
   80672:	701a      	strb	r2, [r3, #0]
    }
    IRQ_ENABLE_RESTORE ();              /* now it is done and return          */
   80674:	4b06      	ldr	r3, [pc, #24]	; (80690 <RespondSRQ+0xc4>)
   80676:	4798      	blx	r3
   80678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8067c:	20070ab0 	.word	0x20070ab0
   80680:	000808fd 	.word	0x000808fd
   80684:	20070ab1 	.word	0x20070ab1
   80688:	00080ac5 	.word	0x00080ac5
   8068c:	20070a94 	.word	0x20070a94
   80690:	000804b5 	.word	0x000804b5
   80694:	0008057d 	.word	0x0008057d
   80698:	00080465 	.word	0x00080465
   8069c:	000803d9 	.word	0x000803d9
   806a0:	0008050d 	.word	0x0008050d
   806a4:	000804b9 	.word	0x000804b9
   806a8:	20070a90 	.word	0x20070a90
   806ac:	aaaaaaab 	.word	0xaaaaaaab

000806b0 <InsertToTCBRdyList>:
 * @par Description
 * @details   This function is called to insert a task to the READY list. 
 *******************************************************************************
 */
void InsertToTCBRdyList(P_OSTCB tcbInsert)
{
   806b0:	b470      	push	{r4, r5, r6}
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
	U8  seqNum;
	U8  RdyTaskSeqNum;
#endif
    
    prio = tcbInsert->prio;             /* Get PRI of inserted task           */
   806b2:	7906      	ldrb	r6, [r0, #4]
    tcbInsert->state     = TASK_READY;  /* Set task as TASK_READY             */
   806b4:	2300      	movs	r3, #0
   806b6:	7143      	strb	r3, [r0, #5]

#if CFG_ROBIN_EN >0
	ptcb = TCBRunning;
   806b8:	4b24      	ldr	r3, [pc, #144]	; (8074c <InsertToTCBRdyList+0x9c>)
   806ba:	6819      	ldr	r1, [r3, #0]
    /* Set schedule time for the same PRI task as TCBRunning.                 */
    if(prio == ptcb->prio)  /* Is PRI of inserted task equal to running task? */
   806bc:	790b      	ldrb	r3, [r1, #4]
   806be:	42b3      	cmp	r3, r6
   806c0:	d113      	bne.n	806ea <InsertToTCBRdyList+0x3a>
    {
        if(ptcb != tcbInsert) /* Yes,is inserted task equal to running task?  */
   806c2:	4281      	cmp	r1, r0
   806c4:	d011      	beq.n	806ea <InsertToTCBRdyList+0x3a>
        {
            if(ptcb != NULL)            /* No,TCBRunning == NULL?             */
   806c6:	b181      	cbz	r1, 806ea <InsertToTCBRdyList+0x3a>
            {                           /* N0,OSCheckTime < OSTickCnt?        */
                if(OSCheckTime < OSTickCnt)	 
   806c8:	4b21      	ldr	r3, [pc, #132]	; (80750 <InsertToTCBRdyList+0xa0>)
   806ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   806ce:	4c21      	ldr	r4, [pc, #132]	; (80754 <InsertToTCBRdyList+0xa4>)
   806d0:	cc30      	ldmia	r4, {r4, r5}
   806d2:	429d      	cmp	r5, r3
   806d4:	bf08      	it	eq
   806d6:	4294      	cmpeq	r4, r2
   806d8:	d207      	bcs.n	806ea <InsertToTCBRdyList+0x3a>
                {                       /* Yes,set OSCheckTime for task robin */
                    OSCheckTime = OSTickCnt + ptcb->timeSlice;	
   806da:	894c      	ldrh	r4, [r1, #10]
   806dc:	2500      	movs	r5, #0
   806de:	1912      	adds	r2, r2, r4
   806e0:	eb43 0305 	adc.w	r3, r3, r5
   806e4:	491b      	ldr	r1, [pc, #108]	; (80754 <InsertToTCBRdyList+0xa4>)
   806e6:	e9c1 2300 	strd	r2, r3, [r1]
	    ptcbNext->TCBprev  = tcbInsert;
	}


#else
    ptcb = TCBRdy;
   806ea:	4b1b      	ldr	r3, [pc, #108]	; (80758 <InsertToTCBRdyList+0xa8>)
   806ec:	6819      	ldr	r1, [r3, #0]
    if (ptcb == NULL)                   /* Is ready list NULL?                */
   806ee:	b929      	cbnz	r1, 806fc <InsertToTCBRdyList+0x4c>
    {
        TaskSchedReq = TRUE;
   806f0:	2201      	movs	r2, #1
   806f2:	4b1a      	ldr	r3, [pc, #104]	; (8075c <InsertToTCBRdyList+0xac>)
   806f4:	701a      	strb	r2, [r3, #0]
        TCBRdy = tcbInsert;         /* Yse,set tcbInsert as head item of list */
   806f6:	4b18      	ldr	r3, [pc, #96]	; (80758 <InsertToTCBRdyList+0xa8>)
   806f8:	6018      	str	r0, [r3, #0]
   806fa:	e024      	b.n	80746 <InsertToTCBRdyList+0x96>
    }
    else if (prio < ptcb->prio)/* Is PRI of inserted task higher than TCBRdy? */
   806fc:	790b      	ldrb	r3, [r1, #4]
   806fe:	42b3      	cmp	r3, r6
   80700:	d907      	bls.n	80712 <InsertToTCBRdyList+0x62>
    {
        TaskSchedReq = TRUE;
   80702:	2201      	movs	r2, #1
   80704:	4b15      	ldr	r3, [pc, #84]	; (8075c <InsertToTCBRdyList+0xac>)
   80706:	701a      	strb	r2, [r3, #0]
        tcbInsert->TCBnext = ptcb;  /* Yes,set tcbInsert as head item of list */
   80708:	6241      	str	r1, [r0, #36]	; 0x24
        ptcb->TCBprev  = tcbInsert;
   8070a:	6288      	str	r0, [r1, #40]	; 0x28
        TCBRdy         = tcbInsert;
   8070c:	4b12      	ldr	r3, [pc, #72]	; (80758 <InsertToTCBRdyList+0xa8>)
   8070e:	6018      	str	r0, [r3, #0]
   80710:	e019      	b.n	80746 <InsertToTCBRdyList+0x96>
    }
    else                                /* No,find correct place              */
    {								    
        ptcbNext = ptcb->TCBnext;       /* Get next item                      */
   80712:	6a4a      	ldr	r2, [r1, #36]	; 0x24
        while(ptcbNext != NULL)         /* Is last item in ready list?        */
   80714:	b192      	cbz	r2, 8073c <InsertToTCBRdyList+0x8c>
        {                               /* No,find correct place              */
            if(prio < ptcbNext->prio)   /* Is correct place?                  */
   80716:	7913      	ldrb	r3, [r2, #4]
   80718:	42b3      	cmp	r3, r6
   8071a:	d904      	bls.n	80726 <InsertToTCBRdyList+0x76>
   8071c:	e007      	b.n	8072e <InsertToTCBRdyList+0x7e>
   8071e:	7919      	ldrb	r1, [r3, #4]
   80720:	42b1      	cmp	r1, r6
   80722:	d806      	bhi.n	80732 <InsertToTCBRdyList+0x82>
                break;                  /* Yes,break circulation              */
            ptcb     = ptcbNext;        /* Save current item                  */
            ptcbNext = ptcbNext->TCBnext; /* Get next item                    */
   80724:	461a      	mov	r2, r3
   80726:	6a53      	ldr	r3, [r2, #36]	; 0x24
        TCBRdy         = tcbInsert;
    }
    else                                /* No,find correct place              */
    {								    
        ptcbNext = ptcb->TCBnext;       /* Get next item                      */
        while(ptcbNext != NULL)         /* Is last item in ready list?        */
   80728:	2b00      	cmp	r3, #0
   8072a:	d1f8      	bne.n	8071e <InsertToTCBRdyList+0x6e>
   8072c:	e008      	b.n	80740 <InsertToTCBRdyList+0x90>
        ptcb->TCBprev  = tcbInsert;
        TCBRdy         = tcbInsert;
    }
    else                                /* No,find correct place              */
    {								    
        ptcbNext = ptcb->TCBnext;       /* Get next item                      */
   8072e:	4613      	mov	r3, r2
	    ptcbNext->TCBprev  = tcbInsert;
	}


#else
    ptcb = TCBRdy;
   80730:	460a      	mov	r2, r1
            if(prio < ptcbNext->prio)   /* Is correct place?                  */
                break;                  /* Yes,break circulation              */
            ptcb     = ptcbNext;        /* Save current item                  */
            ptcbNext = ptcbNext->TCBnext; /* Get next item                    */
        }
        tcbInsert->TCBnext = ptcbNext;  /* Set link for list                  */
   80732:	6243      	str	r3, [r0, #36]	; 0x24
        ptcb->TCBnext      = tcbInsert;
   80734:	6250      	str	r0, [r2, #36]	; 0x24
        tcbInsert->TCBprev = ptcb;
   80736:	6282      	str	r2, [r0, #40]	; 0x28
        if(ptcbNext != NULL)
        {
            ptcbNext->TCBprev  = tcbInsert;
   80738:	6298      	str	r0, [r3, #40]	; 0x28
   8073a:	e004      	b.n	80746 <InsertToTCBRdyList+0x96>
        ptcb->TCBprev  = tcbInsert;
        TCBRdy         = tcbInsert;
    }
    else                                /* No,find correct place              */
    {								    
        ptcbNext = ptcb->TCBnext;       /* Get next item                      */
   8073c:	4613      	mov	r3, r2
	    ptcbNext->TCBprev  = tcbInsert;
	}


#else
    ptcb = TCBRdy;
   8073e:	460a      	mov	r2, r1
            if(prio < ptcbNext->prio)   /* Is correct place?                  */
                break;                  /* Yes,break circulation              */
            ptcb     = ptcbNext;        /* Save current item                  */
            ptcbNext = ptcbNext->TCBnext; /* Get next item                    */
        }
        tcbInsert->TCBnext = ptcbNext;  /* Set link for list                  */
   80740:	6243      	str	r3, [r0, #36]	; 0x24
        ptcb->TCBnext      = tcbInsert;
   80742:	6250      	str	r0, [r2, #36]	; 0x24
        tcbInsert->TCBprev = ptcb;
   80744:	6282      	str	r2, [r0, #40]	; 0x28
        {
            ptcbNext->TCBprev  = tcbInsert;
        }		
    }
#endif
}
   80746:	bc70      	pop	{r4, r5, r6}
   80748:	4770      	bx	lr
   8074a:	bf00      	nop
   8074c:	20070ab4 	.word	0x20070ab4
   80750:	200709d0 	.word	0x200709d0
   80754:	20070ac0 	.word	0x20070ac0
   80758:	20070abc 	.word	0x20070abc
   8075c:	200709da 	.word	0x200709da

00080760 <RemoveFromTCBRdyList>:
	prio = ptcb->prio;
	GetPriSeqNum(prio,&seqNum);
#endif

    /* Is there only one item in READY list?                                  */
    if((ptcb->TCBnext == NULL) && (ptcb->TCBprev == NULL) )
   80760:	6a43      	ldr	r3, [r0, #36]	; 0x24
   80762:	b9bb      	cbnz	r3, 80794 <RemoveFromTCBRdyList+0x34>
   80764:	6a83      	ldr	r3, [r0, #40]	; 0x28
   80766:	b98b      	cbnz	r3, 8078c <RemoveFromTCBRdyList+0x2c>
    {
        TCBRdy = NULL;                  /* Yes,set READY list as NULL         */
   80768:	2200      	movs	r2, #0
   8076a:	4b0c      	ldr	r3, [pc, #48]	; (8079c <RemoveFromTCBRdyList+0x3c>)
   8076c:	601a      	str	r2, [r3, #0]
   8076e:	4770      	bx	lr
#endif
    }
    else if(ptcb->TCBprev == NULL)      /* Is the first item in READY list?   */
    {   
	    /* Yes,remove task from the list,and reset the head of READY list     */
        TCBRdy = ptcb->TCBnext;		    
   80770:	4a0a      	ldr	r2, [pc, #40]	; (8079c <RemoveFromTCBRdyList+0x3c>)
   80772:	6013      	str	r3, [r2, #0]
        ptcb->TCBnext   = NULL;
   80774:	2200      	movs	r2, #0
   80776:	6242      	str	r2, [r0, #36]	; 0x24
        TCBRdy->TCBprev = NULL;
   80778:	629a      	str	r2, [r3, #40]	; 0x28
   8077a:	4770      	bx	lr
		if((ptcb->TCBprev->prio != prio) && (ptcb->TCBnext->prio != prio))
			isChange = TRUE;
		else if((ptcb->TCBprev->prio == prio) && (ptcb->TCBnext->prio != prio))
			RdyTaskPri[seqNum] = ptcb->TCBprev->taskID;
#endif								
        ptcb->TCBprev->TCBnext = ptcb->TCBnext;
   8077c:	6253      	str	r3, [r2, #36]	; 0x24
        ptcb->TCBnext->TCBprev = ptcb->TCBprev;
   8077e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   80780:	6a82      	ldr	r2, [r0, #40]	; 0x28
   80782:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext = NULL;
   80784:	2300      	movs	r3, #0
   80786:	6243      	str	r3, [r0, #36]	; 0x24
        ptcb->TCBprev = NULL;
   80788:	6283      	str	r3, [r0, #40]	; 0x28
   8078a:	4770      	bx	lr
		if(ptcb->TCBprev->prio != prio)
			isChange = TRUE;
		else 
			RdyTaskPri[seqNum] = ptcb->TCBprev->taskID;
#endif
        ptcb->TCBprev->TCBnext = NULL;  
   8078c:	2200      	movs	r2, #0
   8078e:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev          = NULL;
   80790:	6282      	str	r2, [r0, #40]	; 0x28
   80792:	4770      	bx	lr
        TCBRdy = NULL;                  /* Yes,set READY list as NULL         */
#if CFG_ORDER_LIST_SCHEDULE_EN ==0
		isChange = TRUE;
#endif
    }
    else if(ptcb->TCBprev == NULL)      /* Is the first item in READY list?   */
   80794:	6a82      	ldr	r2, [r0, #40]	; 0x28
   80796:	2a00      	cmp	r2, #0
   80798:	d1f0      	bne.n	8077c <RemoveFromTCBRdyList+0x1c>
   8079a:	e7e9      	b.n	80770 <RemoveFromTCBRdyList+0x10>
   8079c:	20070abc 	.word	0x20070abc

000807a0 <Schedule>:
 * @details    This function is called by every where need to switch context,
 *             It is schedule function of OS kernel.
 *******************************************************************************
 */
void Schedule(void)
{
   807a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    U8  RunPrio,RdyPrio;
    P_OSTCB pRdyTcb,pCurTcb;
   
	
    pCurTcb = TCBRunning;    
   807a2:	4b34      	ldr	r3, [pc, #208]	; (80874 <Schedule+0xd4>)
   807a4:	681e      	ldr	r6, [r3, #0]
    pRdyTcb = TCBRdy;
   807a6:	4b34      	ldr	r3, [pc, #208]	; (80878 <Schedule+0xd8>)
   807a8:	681f      	ldr	r7, [r3, #0]

	if((pRdyTcb==NULL) || (pCurTcb != TCBNext) || (OSSchedLock >1) || (OSIntNesting >0))
   807aa:	2f00      	cmp	r7, #0
   807ac:	d060      	beq.n	80870 <Schedule+0xd0>
   807ae:	4b33      	ldr	r3, [pc, #204]	; (8087c <Schedule+0xdc>)
   807b0:	681b      	ldr	r3, [r3, #0]
   807b2:	429e      	cmp	r6, r3
   807b4:	d15c      	bne.n	80870 <Schedule+0xd0>
   807b6:	4b32      	ldr	r3, [pc, #200]	; (80880 <Schedule+0xe0>)
   807b8:	781b      	ldrb	r3, [r3, #0]
   807ba:	b2db      	uxtb	r3, r3
   807bc:	2b01      	cmp	r3, #1
   807be:	d857      	bhi.n	80870 <Schedule+0xd0>
   807c0:	4b30      	ldr	r3, [pc, #192]	; (80884 <Schedule+0xe4>)
   807c2:	781b      	ldrb	r3, [r3, #0]
   807c4:	f013 0fff 	tst.w	r3, #255	; 0xff
   807c8:	d152      	bne.n	80870 <Schedule+0xd0>
	{
		return;
	}
    
	TaskSchedReq = FALSE;
   807ca:	2200      	movs	r2, #0
   807cc:	4b2e      	ldr	r3, [pc, #184]	; (80888 <Schedule+0xe8>)
   807ce:	701a      	strb	r2, [r3, #0]
    RunPrio = pCurTcb->prio;
   807d0:	7931      	ldrb	r1, [r6, #4]
    RdyPrio = pRdyTcb->prio;
   807d2:	793a      	ldrb	r2, [r7, #4]

	/* Is Running task status was changed? */
    if(pCurTcb->state != TASK_RUNNING)	
   807d4:	7973      	ldrb	r3, [r6, #5]
   807d6:	2b01      	cmp	r3, #1
   807d8:	d007      	beq.n	807ea <Schedule+0x4a>
    {
        TCBNext        = pRdyTcb;   /* Yes,set TCBNext and reorder READY list */
   807da:	4b28      	ldr	r3, [pc, #160]	; (8087c <Schedule+0xdc>)
   807dc:	601f      	str	r7, [r3, #0]
        pRdyTcb->state = TASK_RUNNING;
   807de:	2301      	movs	r3, #1
   807e0:	717b      	strb	r3, [r7, #5]
        RemoveFromTCBRdyList(pRdyTcb);
   807e2:	4638      	mov	r0, r7
   807e4:	4b29      	ldr	r3, [pc, #164]	; (8088c <Schedule+0xec>)
   807e6:	4798      	blx	r3
   807e8:	e022      	b.n	80830 <Schedule+0x90>
    }

    else if(RdyPrio < RunPrio )     /* Is higher PRI task coming in?          */
   807ea:	4291      	cmp	r1, r2
   807ec:	d90a      	bls.n	80804 <Schedule+0x64>
    {
        TCBNext        = pRdyTcb;   /* Yes,set TCBNext and reorder READY list */
   807ee:	4b23      	ldr	r3, [pc, #140]	; (8087c <Schedule+0xdc>)
   807f0:	601f      	str	r7, [r3, #0]
        InsertToTCBRdyList(pCurTcb);
   807f2:	4630      	mov	r0, r6
   807f4:	4b26      	ldr	r3, [pc, #152]	; (80890 <Schedule+0xf0>)
   807f6:	4798      	blx	r3
		RemoveFromTCBRdyList(pRdyTcb);
   807f8:	4638      	mov	r0, r7
   807fa:	4b24      	ldr	r3, [pc, #144]	; (8088c <Schedule+0xec>)
   807fc:	4798      	blx	r3
        pRdyTcb->state = TASK_RUNNING;
   807fe:	2301      	movs	r3, #1
   80800:	717b      	strb	r3, [r7, #5]
   80802:	e015      	b.n	80830 <Schedule+0x90>
    }
    
#if CFG_ROBIN_EN >0                 /* Is time for robinning                  */                            
    else if((RunPrio == RdyPrio) && (OSCheckTime == OSTickCnt))
   80804:	4291      	cmp	r1, r2
   80806:	d133      	bne.n	80870 <Schedule+0xd0>
   80808:	4b22      	ldr	r3, [pc, #136]	; (80894 <Schedule+0xf4>)
   8080a:	e9d3 4500 	ldrd	r4, r5, [r3]
   8080e:	4b22      	ldr	r3, [pc, #136]	; (80898 <Schedule+0xf8>)
   80810:	e9d3 2300 	ldrd	r2, r3, [r3]
   80814:	429d      	cmp	r5, r3
   80816:	bf08      	it	eq
   80818:	4294      	cmpeq	r4, r2
   8081a:	d129      	bne.n	80870 <Schedule+0xd0>
    {
        TCBNext        = pRdyTcb;   /* Yes,set TCBNext and reorder READY list */
   8081c:	4b17      	ldr	r3, [pc, #92]	; (8087c <Schedule+0xdc>)
   8081e:	601f      	str	r7, [r3, #0]
        InsertToTCBRdyList(pCurTcb);
   80820:	4630      	mov	r0, r6
   80822:	4b1b      	ldr	r3, [pc, #108]	; (80890 <Schedule+0xf0>)
   80824:	4798      	blx	r3
		RemoveFromTCBRdyList(pRdyTcb);
   80826:	4638      	mov	r0, r7
   80828:	4b18      	ldr	r3, [pc, #96]	; (8088c <Schedule+0xec>)
   8082a:	4798      	blx	r3
        pRdyTcb->state = TASK_RUNNING;
   8082c:	2301      	movs	r3, #1
   8082e:	717b      	strb	r3, [r7, #5]
    {								    
        return;	
    }
    
#if CFG_ROBIN_EN >0
    if(TCBNext->prio == TCBRdy->prio)  /* Reset OSCheckTime for task robinnig */
   80830:	4b12      	ldr	r3, [pc, #72]	; (8087c <Schedule+0xdc>)
   80832:	681b      	ldr	r3, [r3, #0]
   80834:	4a10      	ldr	r2, [pc, #64]	; (80878 <Schedule+0xd8>)
   80836:	6812      	ldr	r2, [r2, #0]
   80838:	7919      	ldrb	r1, [r3, #4]
   8083a:	7912      	ldrb	r2, [r2, #4]
   8083c:	4291      	cmp	r1, r2
   8083e:	d10a      	bne.n	80856 <Schedule+0xb6>
        OSCheckTime = OSTickCnt + TCBNext->timeSlice;
   80840:	895c      	ldrh	r4, [r3, #10]
   80842:	2500      	movs	r5, #0
   80844:	4b14      	ldr	r3, [pc, #80]	; (80898 <Schedule+0xf8>)
   80846:	e9d3 2300 	ldrd	r2, r3, [r3]
   8084a:	1912      	adds	r2, r2, r4
   8084c:	eb43 0305 	adc.w	r3, r3, r5
   80850:	4910      	ldr	r1, [pc, #64]	; (80894 <Schedule+0xf4>)
   80852:	e9c1 2300 	strd	r2, r3, [r1]
#endif
    
  
#if CFG_STK_CHECKOUT_EN > 0                       /* Is stack overflow?       */
    if((pCurTcb->stkPtr < pCurTcb->stack)||(*(U32*)(pCurTcb->stack) != MAGIC_WORD))       
   80856:	68f3      	ldr	r3, [r6, #12]
   80858:	6832      	ldr	r2, [r6, #0]
   8085a:	429a      	cmp	r2, r3
   8085c:	d303      	bcc.n	80866 <Schedule+0xc6>
   8085e:	681a      	ldr	r2, [r3, #0]
   80860:	4b0e      	ldr	r3, [pc, #56]	; (8089c <Schedule+0xfc>)
   80862:	429a      	cmp	r2, r3
   80864:	d002      	beq.n	8086c <Schedule+0xcc>
    {									
        CoStkOverflowHook(pCurTcb->taskID);       /* Yes,call handler         */		
   80866:	79b0      	ldrb	r0, [r6, #6]
   80868:	4b0d      	ldr	r3, [pc, #52]	; (808a0 <Schedule+0x100>)
   8086a:	4798      	blx	r3
    }   
#endif
 	
    SwitchContext();                              /* Call task context switch */
   8086c:	4b0d      	ldr	r3, [pc, #52]	; (808a4 <Schedule+0x104>)
   8086e:	4798      	blx	r3
   80870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80872:	bf00      	nop
   80874:	20070ab4 	.word	0x20070ab4
   80878:	20070abc 	.word	0x20070abc
   8087c:	20070ab8 	.word	0x20070ab8
   80880:	200709d9 	.word	0x200709d9
   80884:	200709d8 	.word	0x200709d8
   80888:	200709da 	.word	0x200709da
   8088c:	00080761 	.word	0x00080761
   80890:	000806b1 	.word	0x000806b1
   80894:	20070ac0 	.word	0x20070ac0
   80898:	200709d0 	.word	0x200709d0
   8089c:	5a5aa5a5 	.word	0x5a5aa5a5
   808a0:	00080461 	.word	0x00080461
   808a4:	000804bd 	.word	0x000804bd

000808a8 <RemoveDelayList>:
 */
void RemoveDelayList(P_OSTCB ptcb)
{
    
    /* Is there only one item in the DELAY list?   */
    if((ptcb->TCBprev == NULL) && ( ptcb->TCBnext == NULL))
   808a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   808aa:	b983      	cbnz	r3, 808ce <RemoveDelayList+0x26>
   808ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
   808ae:	b91b      	cbnz	r3, 808b8 <RemoveDelayList+0x10>
    {
        DlyList = NULL;	                /* Yes,set DELAY list as NULL         */
   808b0:	2200      	movs	r2, #0
   808b2:	4b11      	ldr	r3, [pc, #68]	; (808f8 <RemoveDelayList+0x50>)
   808b4:	601a      	str	r2, [r3, #0]
   808b6:	e01b      	b.n	808f0 <RemoveDelayList+0x48>
    }
    else if(ptcb->TCBprev == NULL)      /* Is the first item in DELAY list?   */
    {   
	    /* Yes,remove task from the DELAY list,and reset the list             */
        DlyList	                  = ptcb->TCBnext;
   808b8:	4a0f      	ldr	r2, [pc, #60]	; (808f8 <RemoveDelayList+0x50>)
   808ba:	6013      	str	r3, [r2, #0]
        ptcb->TCBnext->delayTick += ptcb->delayTick;
   808bc:	6a19      	ldr	r1, [r3, #32]
   808be:	6a02      	ldr	r2, [r0, #32]
   808c0:	440a      	add	r2, r1
   808c2:	621a      	str	r2, [r3, #32]
        ptcb->TCBnext->TCBprev    = NULL;	
   808c4:	6a42      	ldr	r2, [r0, #36]	; 0x24
   808c6:	2300      	movs	r3, #0
   808c8:	6293      	str	r3, [r2, #40]	; 0x28
        ptcb->TCBnext             = NULL;
   808ca:	6243      	str	r3, [r0, #36]	; 0x24
   808cc:	e010      	b.n	808f0 <RemoveDelayList+0x48>
        
    }
    else if(ptcb->TCBnext == NULL)      /* Is the last item in DELAY list?    */
   808ce:	6a42      	ldr	r2, [r0, #36]	; 0x24
   808d0:	b912      	cbnz	r2, 808d8 <RemoveDelayList+0x30>
    {									
        ptcb->TCBprev->TCBnext = NULL;  /* Yes,remove task form DELAY list    */
   808d2:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBprev          = NULL;	
   808d4:	6282      	str	r2, [r0, #40]	; 0x28
   808d6:	e00b      	b.n	808f0 <RemoveDelayList+0x48>
    }
    else                                /* No, remove task from DELAY list    */
    {									
        ptcb->TCBprev->TCBnext    = ptcb->TCBnext;	
   808d8:	625a      	str	r2, [r3, #36]	; 0x24
        ptcb->TCBnext->TCBprev    = ptcb->TCBprev;	
   808da:	6a43      	ldr	r3, [r0, #36]	; 0x24
   808dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
   808de:	629a      	str	r2, [r3, #40]	; 0x28
        ptcb->TCBnext->delayTick += ptcb->delayTick;
   808e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   808e2:	6a19      	ldr	r1, [r3, #32]
   808e4:	6a02      	ldr	r2, [r0, #32]
   808e6:	440a      	add	r2, r1
   808e8:	621a      	str	r2, [r3, #32]
        ptcb->TCBnext     	      = NULL;
   808ea:	2300      	movs	r3, #0
   808ec:	6243      	str	r3, [r0, #36]	; 0x24
        ptcb->TCBprev             = NULL;
   808ee:	6283      	str	r3, [r0, #40]	; 0x28
    }
    ptcb->delayTick = INVALID_VALUE;  /* Set task delay tick value as invalid */		
   808f0:	f04f 33ff 	mov.w	r3, #4294967295
   808f4:	6203      	str	r3, [r0, #32]
   808f6:	4770      	bx	lr
   808f8:	20070ac8 	.word	0x20070ac8

000808fc <TimeDispose>:
 * @par Description
 * @details    This function is called to dispose time delay of all task.  
 *******************************************************************************
 */
void TimeDispose(void)
{  
   808fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    P_OSTCB	dlyList;
    
    dlyList = DlyList;                  /* Get first item of DELAY list       */
   808fe:	4b11      	ldr	r3, [pc, #68]	; (80944 <TimeDispose+0x48>)
   80900:	681c      	ldr	r4, [r3, #0]
    while((dlyList != NULL) && (dlyList->delayTick == 0) )
   80902:	b1ec      	cbz	r4, 80940 <TimeDispose+0x44>
   80904:	6a23      	ldr	r3, [r4, #32]
   80906:	b9db      	cbnz	r3, 80940 <TimeDispose+0x44>
    {	
    
#if CFG_EVENT_EN > 0
        if(dlyList->eventID != INVALID_ID) /* Is task in event waiting list?  */
        {								   
            RemoveEventWaittingList(dlyList); /* Yes,remove task from list    */	
   80908:	4f0f      	ldr	r7, [pc, #60]	; (80948 <TimeDispose+0x4c>)
#endif

#if CFG_FLAG_EN  > 0
        if(dlyList->pnode != NULL)          /* Is task in flag waiting list?  */
        {
            RemoveLinkNode(dlyList->pnode); /* Yes,remove task from list      */	
   8090a:	4e10      	ldr	r6, [pc, #64]	; (8094c <TimeDispose+0x50>)
        }
#endif
        dlyList->delayTick = INVALID_VALUE; /* Set delay tick value as invalid*/
        DlyList = dlyList->TCBnext; /* Get next item as the head of DELAY list*/
   8090c:	4d0d      	ldr	r5, [pc, #52]	; (80944 <TimeDispose+0x48>)
    dlyList = DlyList;                  /* Get first item of DELAY list       */
    while((dlyList != NULL) && (dlyList->delayTick == 0) )
    {	
    
#if CFG_EVENT_EN > 0
        if(dlyList->eventID != INVALID_ID) /* Is task in event waiting list?  */
   8090e:	7a23      	ldrb	r3, [r4, #8]
   80910:	2bff      	cmp	r3, #255	; 0xff
   80912:	d001      	beq.n	80918 <TimeDispose+0x1c>
        {								   
            RemoveEventWaittingList(dlyList); /* Yes,remove task from list    */	
   80914:	4620      	mov	r0, r4
   80916:	47b8      	blx	r7
        }
#endif

#if CFG_FLAG_EN  > 0
        if(dlyList->pnode != NULL)          /* Is task in flag waiting list?  */
   80918:	69e0      	ldr	r0, [r4, #28]
   8091a:	b100      	cbz	r0, 8091e <TimeDispose+0x22>
        {
            RemoveLinkNode(dlyList->pnode); /* Yes,remove task from list      */	
   8091c:	47b0      	blx	r6
        }
#endif
        dlyList->delayTick = INVALID_VALUE; /* Set delay tick value as invalid*/
   8091e:	f04f 33ff 	mov.w	r3, #4294967295
   80922:	6223      	str	r3, [r4, #32]
        DlyList = dlyList->TCBnext; /* Get next item as the head of DELAY list*/
   80924:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80926:	602b      	str	r3, [r5, #0]
        dlyList->TCBnext   = NULL;		   
   80928:	2300      	movs	r3, #0
   8092a:	6263      	str	r3, [r4, #36]	; 0x24

		InsertToTCBRdyList(dlyList);        /* Insert task into READY list    */
   8092c:	4620      	mov	r0, r4
   8092e:	4b08      	ldr	r3, [pc, #32]	; (80950 <TimeDispose+0x54>)
   80930:	4798      	blx	r3
        
        dlyList = DlyList;                /* Get the first item of DELAY list */
   80932:	682c      	ldr	r4, [r5, #0]
        if(dlyList != NULL)                 /* Is DELAY list as NULL?         */
   80934:	b124      	cbz	r4, 80940 <TimeDispose+0x44>
        {
            dlyList->TCBprev = NULL;        /* No,initialize the first item   */
   80936:	2300      	movs	r3, #0
   80938:	62a3      	str	r3, [r4, #40]	; 0x28
void TimeDispose(void)
{  
    P_OSTCB	dlyList;
    
    dlyList = DlyList;                  /* Get first item of DELAY list       */
    while((dlyList != NULL) && (dlyList->delayTick == 0) )
   8093a:	6a23      	ldr	r3, [r4, #32]
   8093c:	2b00      	cmp	r3, #0
   8093e:	d0e6      	beq.n	8090e <TimeDispose+0x12>
   80940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80942:	bf00      	nop
   80944:	20070ac8 	.word	0x20070ac8
   80948:	00080305 	.word	0x00080305
   8094c:	0008034d 	.word	0x0008034d
   80950:	000806b1 	.word	0x000806b1

00080954 <isr_TimeDispose>:
 * @details    This function is called in systick interrupt to dispose time delay   
 *             of all task.
 *******************************************************************************
 */
void isr_TimeDispose(void)
{
   80954:	b508      	push	{r3, lr}
    if(OSSchedLock > 1)                 /* Is schedule lock?                  */
   80956:	4b07      	ldr	r3, [pc, #28]	; (80974 <isr_TimeDispose+0x20>)
   80958:	781b      	ldrb	r3, [r3, #0]
   8095a:	b2db      	uxtb	r3, r3
   8095c:	2b01      	cmp	r3, #1
   8095e:	d905      	bls.n	8096c <isr_TimeDispose+0x18>
    {
        IsrReq = TRUE;
   80960:	2301      	movs	r3, #1
   80962:	4a05      	ldr	r2, [pc, #20]	; (80978 <isr_TimeDispose+0x24>)
   80964:	7013      	strb	r3, [r2, #0]
        TimeReq = TRUE;                 /* Yes,set time request true          */
   80966:	4a05      	ldr	r2, [pc, #20]	; (8097c <isr_TimeDispose+0x28>)
   80968:	7013      	strb	r3, [r2, #0]
   8096a:	bd08      	pop	{r3, pc}
    }
    else
    {
        TimeDispose();                  /* No,call handler                    */
   8096c:	4b04      	ldr	r3, [pc, #16]	; (80980 <isr_TimeDispose+0x2c>)
   8096e:	4798      	blx	r3
   80970:	bd08      	pop	{r3, pc}
   80972:	bf00      	nop
   80974:	200709d9 	.word	0x200709d9
   80978:	20070a90 	.word	0x20070a90
   8097c:	20070ab0 	.word	0x20070ab0
   80980:	000808fd 	.word	0x000808fd

00080984 <InsertTmrList>:
 * @par Description
 * @details    This function is called to insert a timer into the timer list.  
 *******************************************************************************
 */
static void InsertTmrList(OS_TCID tmrID)
{
   80984:	b538      	push	{r3, r4, r5, lr}
    P_TmrCtrl pTmr;
    S32 deltaTicks;
    U32 tmrCnt;
    tmrCnt = TmrTbl[tmrID].tmrCnt;      /* Get timer time                     */
   80986:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   8098a:	4b2d      	ldr	r3, [pc, #180]	; (80a40 <InsertTmrList+0xbc>)
   8098c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   80990:	685b      	ldr	r3, [r3, #4]
    
    if(tmrCnt == 0)                     /* Is timer time==0?                  */
   80992:	2b00      	cmp	r3, #0
   80994:	d052      	beq.n	80a3c <InsertTmrList+0xb8>
    {
        return;                         /* Do nothing,return                  */
    }
    
    OsSchedLock();                      /* Lock schedule                      */
   80996:	4a2b      	ldr	r2, [pc, #172]	; (80a44 <InsertTmrList+0xc0>)
   80998:	7811      	ldrb	r1, [r2, #0]
   8099a:	3101      	adds	r1, #1
   8099c:	b2c9      	uxtb	r1, r1
   8099e:	7011      	strb	r1, [r2, #0]
    if(TmrList == NULL)                 /* Is no item in timer list?          */
   809a0:	4a29      	ldr	r2, [pc, #164]	; (80a48 <InsertTmrList+0xc4>)
   809a2:	6814      	ldr	r4, [r2, #0]
   809a4:	b93c      	cbnz	r4, 809b6 <InsertTmrList+0x32>
    {
        TmrList = &TmrTbl[tmrID];       /* Yes,set this as first item         */
   809a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   809aa:	4b25      	ldr	r3, [pc, #148]	; (80a40 <InsertTmrList+0xbc>)
   809ac:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   809b0:	4b25      	ldr	r3, [pc, #148]	; (80a48 <InsertTmrList+0xc4>)
   809b2:	601a      	str	r2, [r3, #0]
   809b4:	e040      	b.n	80a38 <InsertTmrList+0xb4>
      	deltaTicks = (S32) tmrCnt;            /* Get timer tick                     */
      	
      	/* find correct place */
      	while(pTmr != NULL)
      	{				    
            deltaTicks -= (S32) (pTmr->tmrCnt); /* Get ticks with previous item       */
   809b6:	6862      	ldr	r2, [r4, #4]
            if(deltaTicks < 0)          /* Is delta ticks<0?                  */  
   809b8:	1a9b      	subs	r3, r3, r2
    {
        TmrList = &TmrTbl[tmrID];       /* Yes,set this as first item         */
    }
    else                  /* No,find correct place ,and insert inserted timer */
    {								    
      	pTmr       = TmrList; 
   809ba:	bf58      	it	pl
   809bc:	4621      	movpl	r1, r4
      	
      	/* find correct place */
      	while(pTmr != NULL)
      	{				    
            deltaTicks -= (S32) (pTmr->tmrCnt); /* Get ticks with previous item       */
            if(deltaTicks < 0)          /* Is delta ticks<0?                  */  
   809be:	d52a      	bpl.n	80a16 <InsertTmrList+0x92>
   809c0:	e004      	b.n	809cc <InsertTmrList+0x48>
      	deltaTicks = (S32) tmrCnt;            /* Get timer tick                     */
      	
      	/* find correct place */
      	while(pTmr != NULL)
      	{				    
            deltaTicks -= (S32) (pTmr->tmrCnt); /* Get ticks with previous item       */
   809c2:	6851      	ldr	r1, [r2, #4]
            if(deltaTicks < 0)          /* Is delta ticks<0?                  */  
   809c4:	1a5b      	subs	r3, r3, r1
   809c6:	d402      	bmi.n	809ce <InsertTmrList+0x4a>
   809c8:	4611      	mov	r1, r2
   809ca:	e024      	b.n	80a16 <InsertTmrList+0x92>
    {
        TmrList = &TmrTbl[tmrID];       /* Yes,set this as first item         */
    }
    else                  /* No,find correct place ,and insert inserted timer */
    {								    
      	pTmr       = TmrList; 
   809cc:	4622      	mov	r2, r4
      	{				    
            deltaTicks -= (S32) (pTmr->tmrCnt); /* Get ticks with previous item       */
            if(deltaTicks < 0)          /* Is delta ticks<0?                  */  
            {	
                /* Yes,get correct place */
                if(pTmr->tmrPrev!= NULL)/* Is head item of timer list?        */
   809ce:	6955      	ldr	r5, [r2, #20]
   809d0:	b155      	cbz	r5, 809e8 <InsertTmrList+0x64>
                {	
                    /* No,insert into */
                    pTmr->tmrPrev->tmrNext = &TmrTbl[tmrID]; 
   809d2:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   809d6:	4c1a      	ldr	r4, [pc, #104]	; (80a40 <InsertTmrList+0xbc>)
   809d8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   809dc:	6129      	str	r1, [r5, #16]
                    TmrTbl[tmrID].tmrPrev  = pTmr->tmrPrev;
   809de:	6954      	ldr	r4, [r2, #20]
   809e0:	614c      	str	r4, [r1, #20]
                    TmrTbl[tmrID].tmrNext  = pTmr;
   809e2:	610a      	str	r2, [r1, #16]
                    pTmr->tmrPrev          = &TmrTbl[tmrID];
   809e4:	6151      	str	r1, [r2, #20]
   809e6:	e008      	b.n	809fa <InsertTmrList+0x76>
                }
                else                    /* Yes,set task as first item         */ 	
                {
                    TmrTbl[tmrID].tmrNext = TmrList;
   809e8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   809ec:	4914      	ldr	r1, [pc, #80]	; (80a40 <InsertTmrList+0xbc>)
   809ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   809f2:	6114      	str	r4, [r2, #16]
                    TmrList->tmrPrev      = &TmrTbl[tmrID];
   809f4:	6162      	str	r2, [r4, #20]
                    TmrList               = &TmrTbl[tmrID];
   809f6:	4914      	ldr	r1, [pc, #80]	; (80a48 <InsertTmrList+0xc4>)
   809f8:	600a      	str	r2, [r1, #0]
                }
                TmrTbl[tmrID].tmrCnt            = (U32)((S32)(TmrTbl[tmrID].tmrNext->tmrCnt) + deltaTicks);
   809fa:	4a11      	ldr	r2, [pc, #68]	; (80a40 <InsertTmrList+0xbc>)
   809fc:	0041      	lsls	r1, r0, #1
   809fe:	180c      	adds	r4, r1, r0
   80a00:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   80a04:	6925      	ldr	r5, [r4, #16]
   80a06:	686d      	ldr	r5, [r5, #4]
   80a08:	442b      	add	r3, r5
   80a0a:	6063      	str	r3, [r4, #4]
                TmrTbl[tmrID].tmrNext->tmrCnt  -= TmrTbl[tmrID].tmrCnt; 
   80a0c:	6922      	ldr	r2, [r4, #16]
   80a0e:	6851      	ldr	r1, [r2, #4]
   80a10:	1acb      	subs	r3, r1, r3
   80a12:	6053      	str	r3, [r2, #4]
                break;	
   80a14:	e010      	b.n	80a38 <InsertTmrList+0xb4>
            }
            /* Is last item in list? */									
            else if ((deltaTicks >= 0) && (pTmr->tmrNext == NULL))
   80a16:	2b00      	cmp	r3, #0
   80a18:	db0b      	blt.n	80a32 <InsertTmrList+0xae>
   80a1a:	690a      	ldr	r2, [r1, #16]
   80a1c:	2a00      	cmp	r2, #0
   80a1e:	d1d0      	bne.n	809c2 <InsertTmrList+0x3e>
            {	
                /* Yes,insert into */
                TmrTbl[tmrID].tmrPrev = pTmr;
   80a20:	4a07      	ldr	r2, [pc, #28]	; (80a40 <InsertTmrList+0xbc>)
   80a22:	0044      	lsls	r4, r0, #1
   80a24:	1825      	adds	r5, r4, r0
   80a26:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   80a2a:	6169      	str	r1, [r5, #20]
                pTmr->tmrNext         = &TmrTbl[tmrID];	
   80a2c:	610d      	str	r5, [r1, #16]
                TmrTbl[tmrID].tmrCnt  = (U32) deltaTicks;
   80a2e:	606b      	str	r3, [r5, #4]
                break;	
   80a30:	e002      	b.n	80a38 <InsertTmrList+0xb4>
            }
            pTmr = pTmr->tmrNext;       /* Get the next item in timer list    */	
   80a32:	690a      	ldr	r2, [r1, #16]
    {								    
      	pTmr       = TmrList; 
      	deltaTicks = (S32) tmrCnt;            /* Get timer tick                     */
      	
      	/* find correct place */
      	while(pTmr != NULL)
   80a34:	2a00      	cmp	r2, #0
   80a36:	d1c4      	bne.n	809c2 <InsertTmrList+0x3e>
                break;	
            }
            pTmr = pTmr->tmrNext;       /* Get the next item in timer list    */	
      	}
    }
    OsSchedUnlock();                    /* Unlock schedule                    */
   80a38:	4b04      	ldr	r3, [pc, #16]	; (80a4c <InsertTmrList+0xc8>)
   80a3a:	4798      	blx	r3
   80a3c:	bd38      	pop	{r3, r4, r5, pc}
   80a3e:	bf00      	nop
   80a40:	20070acc 	.word	0x20070acc
   80a44:	200709d9 	.word	0x200709d9
   80a48:	20070afc 	.word	0x20070afc
   80a4c:	00080219 	.word	0x00080219

00080a50 <RemoveTmrList>:
 * @par Description
 * @details    This function is called to remove a timer from the timer list. 
 *******************************************************************************
 */
static void RemoveTmrList(OS_TCID tmrID)
{
   80a50:	b510      	push	{r4, lr}
    P_TmrCtrl pTmr;
    
    pTmr = &TmrTbl[tmrID];
   80a52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   80a56:	4b17      	ldr	r3, [pc, #92]	; (80ab4 <RemoveTmrList+0x64>)
   80a58:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    
    OsSchedLock();                      /* Lock schedule                      */
   80a5c:	4b16      	ldr	r3, [pc, #88]	; (80ab8 <RemoveTmrList+0x68>)
   80a5e:	781a      	ldrb	r2, [r3, #0]
   80a60:	3201      	adds	r2, #1
   80a62:	b2d2      	uxtb	r2, r2
   80a64:	701a      	strb	r2, [r3, #0]
    
    /* Is there only one item in timer list?                                  */
    if((pTmr->tmrPrev == NULL) && (pTmr->tmrNext == NULL))
   80a66:	6943      	ldr	r3, [r0, #20]
   80a68:	b983      	cbnz	r3, 80a8c <RemoveTmrList+0x3c>
   80a6a:	6903      	ldr	r3, [r0, #16]
   80a6c:	b91b      	cbnz	r3, 80a76 <RemoveTmrList+0x26>
    {		
        TmrList = NULL;                 /* Yes,set timer list as NULL         */ 	
   80a6e:	2200      	movs	r2, #0
   80a70:	4b12      	ldr	r3, [pc, #72]	; (80abc <RemoveTmrList+0x6c>)
   80a72:	601a      	str	r2, [r3, #0]
   80a74:	e01b      	b.n	80aae <RemoveTmrList+0x5e>
    }
    else if(pTmr->tmrPrev == NULL)      /* Is the first item in timer list?   */
    {   /* Yes,remove timer from list,and reset timer list                    */
        TmrList  = pTmr->tmrNext;
   80a76:	4a11      	ldr	r2, [pc, #68]	; (80abc <RemoveTmrList+0x6c>)
   80a78:	6013      	str	r3, [r2, #0]
        TmrList->tmrPrev = NULL;
   80a7a:	2200      	movs	r2, #0
   80a7c:	615a      	str	r2, [r3, #20]
        pTmr->tmrNext->tmrCnt += pTmr->tmrCnt;
   80a7e:	6903      	ldr	r3, [r0, #16]
   80a80:	685c      	ldr	r4, [r3, #4]
   80a82:	6841      	ldr	r1, [r0, #4]
   80a84:	4421      	add	r1, r4
   80a86:	6059      	str	r1, [r3, #4]
        pTmr->tmrNext    = NULL;  
   80a88:	6102      	str	r2, [r0, #16]
   80a8a:	e010      	b.n	80aae <RemoveTmrList+0x5e>
    }
    else if(pTmr->tmrNext == NULL)      /* Is the last item in timer list?    */
   80a8c:	6902      	ldr	r2, [r0, #16]
   80a8e:	b912      	cbnz	r2, 80a96 <RemoveTmrList+0x46>
    {
        /* Yes,remove timer form list */
        pTmr->tmrPrev->tmrNext = NULL;	
   80a90:	611a      	str	r2, [r3, #16]
        pTmr->tmrPrev = NULL;
   80a92:	6142      	str	r2, [r0, #20]
   80a94:	e00b      	b.n	80aae <RemoveTmrList+0x5e>
    }
    else                                /* No, remove timer from list         */
    {
        pTmr->tmrPrev->tmrNext  =  pTmr->tmrNext;
   80a96:	611a      	str	r2, [r3, #16]
        pTmr->tmrNext->tmrPrev  =  pTmr->tmrPrev;
   80a98:	6903      	ldr	r3, [r0, #16]
   80a9a:	6942      	ldr	r2, [r0, #20]
   80a9c:	615a      	str	r2, [r3, #20]
        pTmr->tmrNext->tmrCnt  += pTmr->tmrCnt;
   80a9e:	6903      	ldr	r3, [r0, #16]
   80aa0:	6859      	ldr	r1, [r3, #4]
   80aa2:	6842      	ldr	r2, [r0, #4]
   80aa4:	440a      	add	r2, r1
   80aa6:	605a      	str	r2, [r3, #4]
        pTmr->tmrNext = NULL;
   80aa8:	2300      	movs	r3, #0
   80aaa:	6103      	str	r3, [r0, #16]
        pTmr->tmrPrev = NULL;
   80aac:	6143      	str	r3, [r0, #20]
    }
    OsSchedUnlock();                    /* Unlock schedule                    */
   80aae:	4b04      	ldr	r3, [pc, #16]	; (80ac0 <RemoveTmrList+0x70>)
   80ab0:	4798      	blx	r3
   80ab2:	bd10      	pop	{r4, pc}
   80ab4:	20070acc 	.word	0x20070acc
   80ab8:	200709d9 	.word	0x200709d9
   80abc:	20070afc 	.word	0x20070afc
   80ac0:	00080219 	.word	0x00080219

00080ac4 <TmrDispose>:
 * @par Description
 * @details    This function is called to dispose timer counter.
 *******************************************************************************
 */
void TmrDispose(void)
{
   80ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    P_TmrCtrl	pTmr;
    
    pTmr = TmrList;                     /* Get first item of timer list       */
   80ac6:	4b10      	ldr	r3, [pc, #64]	; (80b08 <TmrDispose+0x44>)
   80ac8:	681c      	ldr	r4, [r3, #0]
    while((pTmr != NULL) && (pTmr->tmrCnt == 0) )
   80aca:	b1e4      	cbz	r4, 80b06 <TmrDispose+0x42>
   80acc:	6863      	ldr	r3, [r4, #4]
   80ace:	b9d3      	cbnz	r3, 80b06 <TmrDispose+0x42>
            (pTmr->tmrCallBack)();          /* Call timer callback function   */
        }
        else if(pTmr->tmrType == TMR_TYPE_PERIODIC)   /* Is a periodic timer? */
        {
            /* Yes,remove this timer from timer list                          */
            RemoveTmrList(pTmr->tmrID); 
   80ad0:	4e0e      	ldr	r6, [pc, #56]	; (80b0c <TmrDispose+0x48>)
            pTmr->tmrCnt = pTmr->tmrReload;   /* Reset timer tick             */
            InsertTmrList(pTmr->tmrID);       /* Insert timer into timer list */
   80ad2:	4f0f      	ldr	r7, [pc, #60]	; (80b10 <TmrDispose+0x4c>)
            (pTmr->tmrCallBack)();            /* Call timer callback function */
        }
        pTmr = TmrList;	                      /* Get first item of timer list */
   80ad4:	4d0c      	ldr	r5, [pc, #48]	; (80b08 <TmrDispose+0x44>)
    P_TmrCtrl	pTmr;
    
    pTmr = TmrList;                     /* Get first item of timer list       */
    while((pTmr != NULL) && (pTmr->tmrCnt == 0) )
    {	
        if(pTmr->tmrType == TMR_TYPE_ONE_SHOT)    /* Is a One-shot timer?     */
   80ad6:	7863      	ldrb	r3, [r4, #1]
   80ad8:	b933      	cbnz	r3, 80ae8 <TmrDispose+0x24>
        {
            /* Yes,remove this timer from timer list                          */
            RemoveTmrList(pTmr->tmrID);
   80ada:	7820      	ldrb	r0, [r4, #0]
   80adc:	47b0      	blx	r6
            
            /* Set timer status as TMR_STATE_STOPPED                          */
            pTmr->tmrState = TMR_STATE_STOPPED;
   80ade:	2301      	movs	r3, #1
   80ae0:	70a3      	strb	r3, [r4, #2]
            (pTmr->tmrCallBack)();          /* Call timer callback function   */
   80ae2:	68e3      	ldr	r3, [r4, #12]
   80ae4:	4798      	blx	r3
   80ae6:	e009      	b.n	80afc <TmrDispose+0x38>
        }
        else if(pTmr->tmrType == TMR_TYPE_PERIODIC)   /* Is a periodic timer? */
   80ae8:	2b01      	cmp	r3, #1
   80aea:	d107      	bne.n	80afc <TmrDispose+0x38>
        {
            /* Yes,remove this timer from timer list                          */
            RemoveTmrList(pTmr->tmrID); 
   80aec:	7820      	ldrb	r0, [r4, #0]
   80aee:	47b0      	blx	r6
            pTmr->tmrCnt = pTmr->tmrReload;   /* Reset timer tick             */
   80af0:	68a3      	ldr	r3, [r4, #8]
   80af2:	6063      	str	r3, [r4, #4]
            InsertTmrList(pTmr->tmrID);       /* Insert timer into timer list */
   80af4:	7820      	ldrb	r0, [r4, #0]
   80af6:	47b8      	blx	r7
            (pTmr->tmrCallBack)();            /* Call timer callback function */
   80af8:	68e3      	ldr	r3, [r4, #12]
   80afa:	4798      	blx	r3
        }
        pTmr = TmrList;	                      /* Get first item of timer list */
   80afc:	682c      	ldr	r4, [r5, #0]
void TmrDispose(void)
{
    P_TmrCtrl	pTmr;
    
    pTmr = TmrList;                     /* Get first item of timer list       */
    while((pTmr != NULL) && (pTmr->tmrCnt == 0) )
   80afe:	b114      	cbz	r4, 80b06 <TmrDispose+0x42>
   80b00:	6863      	ldr	r3, [r4, #4]
   80b02:	2b00      	cmp	r3, #0
   80b04:	d0e7      	beq.n	80ad6 <TmrDispose+0x12>
   80b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b08:	20070afc 	.word	0x20070afc
   80b0c:	00080a51 	.word	0x00080a51
   80b10:	00080985 	.word	0x00080985

00080b14 <isr_TmrDispose>:
 * @par Description
 * @details    This function is called to dispose timer counter.
 *******************************************************************************
 */
void isr_TmrDispose(void)
{
   80b14:	b508      	push	{r3, lr}
    if(OSSchedLock > 1)                 /* Is schedule lock?                  */
   80b16:	4b07      	ldr	r3, [pc, #28]	; (80b34 <isr_TmrDispose+0x20>)
   80b18:	781b      	ldrb	r3, [r3, #0]
   80b1a:	b2db      	uxtb	r3, r3
   80b1c:	2b01      	cmp	r3, #1
   80b1e:	d905      	bls.n	80b2c <isr_TmrDispose+0x18>
    {
        IsrReq = TRUE;
   80b20:	2301      	movs	r3, #1
   80b22:	4a05      	ldr	r2, [pc, #20]	; (80b38 <isr_TmrDispose+0x24>)
   80b24:	7013      	strb	r3, [r2, #0]
        TimerReq  = TRUE;               /* Yes,set timer request true         */
   80b26:	4a05      	ldr	r2, [pc, #20]	; (80b3c <isr_TmrDispose+0x28>)
   80b28:	7013      	strb	r3, [r2, #0]
   80b2a:	bd08      	pop	{r3, pc}
    }
    else
    {
        TmrDispose();                   /* No,call handler                    */
   80b2c:	4b04      	ldr	r3, [pc, #16]	; (80b40 <isr_TmrDispose+0x2c>)
   80b2e:	4798      	blx	r3
   80b30:	bd08      	pop	{r3, pc}
   80b32:	bf00      	nop
   80b34:	200709d9 	.word	0x200709d9
   80b38:	20070a90 	.word	0x20070a90
   80b3c:	20070ab1 	.word	0x20070ab1
   80b40:	00080ac5 	.word	0x00080ac5

00080b44 <twi_set_device_address>:
#include "twi.h"

void twi_set_device_address(twi_reg_t *twi, uint32_t dadr, uint32_t iadrsz) {
	twi->TWI_MMR = 0;
	// set device address of slave
	twi->TWI_MMR = 	TWI_MMR_DADR(dadr) |
   80b44:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	// specify size of the slave's internal addresses
					TWI_MMR_IADRSZ(iadrsz);
   80b48:	f002 0203 	and.w	r2, r2, #3
   80b4c:	0212      	lsls	r2, r2, #8
#include "twi.h"

void twi_set_device_address(twi_reg_t *twi, uint32_t dadr, uint32_t iadrsz) {
	twi->TWI_MMR = 0;
	// set device address of slave
	twi->TWI_MMR = 	TWI_MMR_DADR(dadr) |
   80b4e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   80b52:	6041      	str	r1, [r0, #4]
   80b54:	4770      	bx	lr
   80b56:	bf00      	nop

00080b58 <twi_set_internal_address>:
					TWI_MMR_IADRSZ(iadrsz);
}

void twi_set_internal_address(twi_reg_t *twi, uint32_t iadr) {
	twi->TWI_IADR = 0;
	twi->TWI_IADR = TWI_IADR(iadr);
   80b58:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   80b5c:	60c1      	str	r1, [r0, #12]
   80b5e:	4770      	bx	lr

00080b60 <twi_set_clock>:
}

uint8_t twi_set_clock(twi_reg_t *twi, uint32_t bus_speed, uint32_t mck) {
   80b60:	b410      	push	{r4}
	/*
	 * Invalid parameters?
	 * 	- desired bus speed to high?
	 * 	- Master Clock to small in relation to Bus Speed?
	 */
	if ((bus_speed > TWI_FAST_MODE_SPEED) ||
   80b62:	4b12      	ldr	r3, [pc, #72]	; (80bac <twi_set_clock+0x4c>)
   80b64:	4299      	cmp	r1, r3
   80b66:	d819      	bhi.n	80b9c <twi_set_clock+0x3c>
	twi->TWI_IADR = 0;
	twi->TWI_IADR = TWI_IADR(iadr);
}

uint8_t twi_set_clock(twi_reg_t *twi, uint32_t bus_speed, uint32_t mck) {
	uint32_t freq_ratio = TWI_CWGR_FREQ_RATIO(bus_speed, mck);
   80b68:	0852      	lsrs	r2, r2, #1
   80b6a:	fbb2 f1f1 	udiv	r1, r2, r1
	/*
	 * Invalid parameters?
	 * 	- desired bus speed to high?
	 * 	- Master Clock to small in relation to Bus Speed?
	 */
	if ((bus_speed > TWI_FAST_MODE_SPEED) ||
   80b6e:	2903      	cmp	r1, #3
   80b70:	d916      	bls.n	80ba0 <twi_set_clock+0x40>
   80b72:	2300      	movs	r3, #0
	 * Calculate Clock Low Divider, which must fit within 8 bits.
	 * If the value doesn't fit, then the Clock Divider is increased.
	 * Important! Clock Divider can't be larger than 3 bits!
	 */
	while (1) {
		cldiv = (freq_ratio - TWI_CWGR_MIN_FREQ_RATIO) >> ckdiv;
   80b74:	3904      	subs	r1, #4
   80b76:	fa21 f403 	lsr.w	r4, r1, r3
		// does Clock Low Divider fit within 8 bits?
		if (cldiv <= TWI_CWGR_CLDIV_MAX_VALUE) {
   80b7a:	2cff      	cmp	r4, #255	; 0xff
   80b7c:	d903      	bls.n	80b86 <twi_set_clock+0x26>
			break;		// cancel further calculation!
		}

		ckdiv++;
   80b7e:	3301      	adds	r3, #1
		// Clock Divider to large? (invalid parameters)
		if (ckdiv > TWI_CWGR_CKDIV_MAX_VALUE) {
   80b80:	2b08      	cmp	r3, #8
   80b82:	d1f8      	bne.n	80b76 <twi_set_clock+0x16>
   80b84:	e00e      	b.n	80ba4 <twi_set_clock+0x44>
			return 1;	// indicate "failure" !
		}
	}

	// Set clock waveform generator register
	twi->TWI_CWGR = TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(cldiv) |
   80b86:	0222      	lsls	r2, r4, #8
   80b88:	b292      	uxth	r2, r2
					TWI_CWGR_CKDIV(ckdiv);
   80b8a:	f003 0307 	and.w	r3, r3, #7
			return 1;	// indicate "failure" !
		}
	}

	// Set clock waveform generator register
	twi->TWI_CWGR = TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(cldiv) |
   80b8e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   80b92:	b2e4      	uxtb	r4, r4
   80b94:	431c      	orrs	r4, r3
   80b96:	6104      	str	r4, [r0, #16]
					TWI_CWGR_CKDIV(ckdiv);

	// indicate "success" !
	return 0;
   80b98:	2000      	movs	r0, #0
   80b9a:	e004      	b.n	80ba6 <twi_set_clock+0x46>
	 * 	- desired bus speed to high?
	 * 	- Master Clock to small in relation to Bus Speed?
	 */
	if ((bus_speed > TWI_FAST_MODE_SPEED) ||
		(freq_ratio < TWI_CWGR_MIN_FREQ_RATIO)) {
		return 1;	// indicate "failure" !
   80b9c:	2001      	movs	r0, #1
   80b9e:	e002      	b.n	80ba6 <twi_set_clock+0x46>
   80ba0:	2001      	movs	r0, #1
   80ba2:	e000      	b.n	80ba6 <twi_set_clock+0x46>
		}

		ckdiv++;
		// Clock Divider to large? (invalid parameters)
		if (ckdiv > TWI_CWGR_CKDIV_MAX_VALUE) {
			return 1;	// indicate "failure" !
   80ba4:	2001      	movs	r0, #1
	twi->TWI_CWGR = TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(cldiv) |
					TWI_CWGR_CKDIV(ckdiv);

	// indicate "success" !
	return 0;
}
   80ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
   80baa:	4770      	bx	lr
   80bac:	00061a80 	.word	0x00061a80

00080bb0 <twi_init_master>:

void twi_init_master(twi_reg_t *twi) {
	// disable Slave Mode
	twi->TWI_CR = TWI_CR_SVDIS;
	// enable Master Mode
	twi->TWI_CR = TWI_CR_MSEN;
   80bb0:	2304      	movs	r3, #4
   80bb2:	6003      	str	r3, [r0, #0]
   80bb4:	4770      	bx	lr
   80bb6:	bf00      	nop

00080bb8 <twi_init_slave>:
}

void twi_init_slave(twi_reg_t *twi, uint8_t slave_address) {
	twi->TWI_SMR = 0;
	// set Slave Address
	twi->TWI_SMR = TWI_SMR_SADR(slave_address);
   80bb8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   80bbc:	0409      	lsls	r1, r1, #16
   80bbe:	6081      	str	r1, [r0, #8]
	// disable Master Mode
	twi->TWI_CR = TWI_CR_MSDIS;
	// enable Slave Mode
	twi->TWI_CR = TWI_CR_SVEN;
   80bc0:	2310      	movs	r3, #16
   80bc2:	6003      	str	r3, [r0, #0]
   80bc4:	4770      	bx	lr
   80bc6:	bf00      	nop

00080bc8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80bc8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80bca:	480e      	ldr	r0, [pc, #56]	; (80c04 <sysclk_init+0x3c>)
   80bcc:	4b0e      	ldr	r3, [pc, #56]	; (80c08 <sysclk_init+0x40>)
   80bce:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80bd0:	2000      	movs	r0, #0
   80bd2:	213e      	movs	r1, #62	; 0x3e
   80bd4:	4b0d      	ldr	r3, [pc, #52]	; (80c0c <sysclk_init+0x44>)
   80bd6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80bd8:	4c0d      	ldr	r4, [pc, #52]	; (80c10 <sysclk_init+0x48>)
   80bda:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80bdc:	2800      	cmp	r0, #0
   80bde:	d0fc      	beq.n	80bda <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80be0:	4b0c      	ldr	r3, [pc, #48]	; (80c14 <sysclk_init+0x4c>)
   80be2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80be4:	4a0c      	ldr	r2, [pc, #48]	; (80c18 <sysclk_init+0x50>)
   80be6:	4b0d      	ldr	r3, [pc, #52]	; (80c1c <sysclk_init+0x54>)
   80be8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80bea:	4c0d      	ldr	r4, [pc, #52]	; (80c20 <sysclk_init+0x58>)
   80bec:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80bee:	2800      	cmp	r0, #0
   80bf0:	d0fc      	beq.n	80bec <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80bf2:	2010      	movs	r0, #16
   80bf4:	4b0b      	ldr	r3, [pc, #44]	; (80c24 <sysclk_init+0x5c>)
   80bf6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80bf8:	4b0b      	ldr	r3, [pc, #44]	; (80c28 <sysclk_init+0x60>)
   80bfa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80bfc:	4801      	ldr	r0, [pc, #4]	; (80c04 <sysclk_init+0x3c>)
   80bfe:	4b02      	ldr	r3, [pc, #8]	; (80c08 <sysclk_init+0x40>)
   80c00:	4798      	blx	r3
   80c02:	bd10      	pop	{r4, pc}
   80c04:	0501bd00 	.word	0x0501bd00
   80c08:	200700b1 	.word	0x200700b1
   80c0c:	00081119 	.word	0x00081119
   80c10:	0008116d 	.word	0x0008116d
   80c14:	0008117d 	.word	0x0008117d
   80c18:	200d3f01 	.word	0x200d3f01
   80c1c:	400e0600 	.word	0x400e0600
   80c20:	0008118d 	.word	0x0008118d
   80c24:	000810b5 	.word	0x000810b5
   80c28:	00081331 	.word	0x00081331

00080c2c <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c30:	b083      	sub	sp, #12
   80c32:	4605      	mov	r5, r0
	while (len) {
   80c34:	4690      	mov	r8, r2
   80c36:	2a00      	cmp	r2, #0
   80c38:	d047      	beq.n	80cca <usart_serial_read_packet+0x9e>
   80c3a:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80c3c:	4f25      	ldr	r7, [pc, #148]	; (80cd4 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80c3e:	4c26      	ldr	r4, [pc, #152]	; (80cd8 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80c40:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80cec <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80c44:	f8df b094 	ldr.w	fp, [pc, #148]	; 80cdc <usart_serial_read_packet+0xb0>
   80c48:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80c4c:	2300      	movs	r3, #0
   80c4e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80c50:	4b22      	ldr	r3, [pc, #136]	; (80cdc <usart_serial_read_packet+0xb0>)
   80c52:	429d      	cmp	r5, r3
   80c54:	d106      	bne.n	80c64 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80c56:	4658      	mov	r0, fp
   80c58:	4649      	mov	r1, r9
   80c5a:	4b21      	ldr	r3, [pc, #132]	; (80ce0 <usart_serial_read_packet+0xb4>)
   80c5c:	4798      	blx	r3
   80c5e:	2800      	cmp	r0, #0
   80c60:	d1f9      	bne.n	80c56 <usart_serial_read_packet+0x2a>
   80c62:	e019      	b.n	80c98 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80c64:	4b1f      	ldr	r3, [pc, #124]	; (80ce4 <usart_serial_read_packet+0xb8>)
   80c66:	429d      	cmp	r5, r3
   80c68:	d109      	bne.n	80c7e <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80c6a:	4699      	mov	r9, r3
   80c6c:	4648      	mov	r0, r9
   80c6e:	a901      	add	r1, sp, #4
   80c70:	47a0      	blx	r4
   80c72:	2800      	cmp	r0, #0
   80c74:	d1fa      	bne.n	80c6c <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80c76:	9b01      	ldr	r3, [sp, #4]
   80c78:	f806 3c01 	strb.w	r3, [r6, #-1]
   80c7c:	e017      	b.n	80cae <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80c7e:	4b1a      	ldr	r3, [pc, #104]	; (80ce8 <usart_serial_read_packet+0xbc>)
   80c80:	429d      	cmp	r5, r3
   80c82:	d109      	bne.n	80c98 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80c84:	4699      	mov	r9, r3
   80c86:	4648      	mov	r0, r9
   80c88:	a901      	add	r1, sp, #4
   80c8a:	47a0      	blx	r4
   80c8c:	2800      	cmp	r0, #0
   80c8e:	d1fa      	bne.n	80c86 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80c90:	9b01      	ldr	r3, [sp, #4]
   80c92:	f806 3c01 	strb.w	r3, [r6, #-1]
   80c96:	e014      	b.n	80cc2 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80c98:	4555      	cmp	r5, sl
   80c9a:	d108      	bne.n	80cae <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80c9c:	4650      	mov	r0, sl
   80c9e:	a901      	add	r1, sp, #4
   80ca0:	47a0      	blx	r4
   80ca2:	2800      	cmp	r0, #0
   80ca4:	d1fa      	bne.n	80c9c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80ca6:	9b01      	ldr	r3, [sp, #4]
   80ca8:	f806 3c01 	strb.w	r3, [r6, #-1]
   80cac:	e009      	b.n	80cc2 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80cae:	42bd      	cmp	r5, r7
   80cb0:	d107      	bne.n	80cc2 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80cb2:	4638      	mov	r0, r7
   80cb4:	a901      	add	r1, sp, #4
   80cb6:	47a0      	blx	r4
   80cb8:	2800      	cmp	r0, #0
   80cba:	d1fa      	bne.n	80cb2 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80cbc:	9b01      	ldr	r3, [sp, #4]
   80cbe:	f806 3c01 	strb.w	r3, [r6, #-1]
   80cc2:	3601      	adds	r6, #1
   80cc4:	f1b8 0801 	subs.w	r8, r8, #1
   80cc8:	d1be      	bne.n	80c48 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80cca:	2000      	movs	r0, #0
   80ccc:	b003      	add	sp, #12
   80cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80cd2:	bf00      	nop
   80cd4:	400a4000 	.word	0x400a4000
   80cd8:	00081265 	.word	0x00081265
   80cdc:	400e0800 	.word	0x400e0800
   80ce0:	0008123d 	.word	0x0008123d
   80ce4:	40098000 	.word	0x40098000
   80ce8:	4009c000 	.word	0x4009c000
   80cec:	400a0000 	.word	0x400a0000

00080cf0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80cf4:	460c      	mov	r4, r1
   80cf6:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80cf8:	b960      	cbnz	r0, 80d14 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80cfa:	2a00      	cmp	r2, #0
   80cfc:	dd0e      	ble.n	80d1c <_read+0x2c>
   80cfe:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80d00:	4e09      	ldr	r6, [pc, #36]	; (80d28 <_read+0x38>)
   80d02:	4d0a      	ldr	r5, [pc, #40]	; (80d2c <_read+0x3c>)
   80d04:	6830      	ldr	r0, [r6, #0]
   80d06:	4621      	mov	r1, r4
   80d08:	682b      	ldr	r3, [r5, #0]
   80d0a:	4798      	blx	r3
		ptr++;
   80d0c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80d0e:	42bc      	cmp	r4, r7
   80d10:	d1f8      	bne.n	80d04 <_read+0x14>
   80d12:	e006      	b.n	80d22 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80d14:	f04f 30ff 	mov.w	r0, #4294967295
   80d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80d1c:	2000      	movs	r0, #0
   80d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80d22:	4640      	mov	r0, r8
	}
	return nChars;
}
   80d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d28:	20070c50 	.word	0x20070c50
   80d2c:	20070c48 	.word	0x20070c48

00080d30 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d34:	460e      	mov	r6, r1
   80d36:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80d38:	3801      	subs	r0, #1
   80d3a:	2802      	cmp	r0, #2
   80d3c:	d80f      	bhi.n	80d5e <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80d3e:	b192      	cbz	r2, 80d66 <_write+0x36>
   80d40:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80d42:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80d80 <_write+0x50>
   80d46:	4f0d      	ldr	r7, [pc, #52]	; (80d7c <_write+0x4c>)
   80d48:	f8d8 0000 	ldr.w	r0, [r8]
   80d4c:	5d31      	ldrb	r1, [r6, r4]
   80d4e:	683b      	ldr	r3, [r7, #0]
   80d50:	4798      	blx	r3
   80d52:	2800      	cmp	r0, #0
   80d54:	db0a      	blt.n	80d6c <_write+0x3c>
			return -1;
		}
		++nChars;
   80d56:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80d58:	42a5      	cmp	r5, r4
   80d5a:	d1f5      	bne.n	80d48 <_write+0x18>
   80d5c:	e00a      	b.n	80d74 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80d5e:	f04f 30ff 	mov.w	r0, #4294967295
   80d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80d66:	2000      	movs	r0, #0
   80d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80d6c:	f04f 30ff 	mov.w	r0, #4294967295
   80d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80d74:	4620      	mov	r0, r4
	}
	return nChars;
}
   80d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d7a:	bf00      	nop
   80d7c:	20070c4c 	.word	0x20070c4c
   80d80:	20070c50 	.word	0x20070c50

00080d84 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80d84:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80d86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80d8a:	4b12      	ldr	r3, [pc, #72]	; (80dd4 <board_init+0x50>)
   80d8c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80d8e:	200b      	movs	r0, #11
   80d90:	4c11      	ldr	r4, [pc, #68]	; (80dd8 <board_init+0x54>)
   80d92:	47a0      	blx	r4
   80d94:	200c      	movs	r0, #12
   80d96:	47a0      	blx	r4
   80d98:	200d      	movs	r0, #13
   80d9a:	47a0      	blx	r4
   80d9c:	200e      	movs	r0, #14
   80d9e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80da0:	203b      	movs	r0, #59	; 0x3b
   80da2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80da6:	4c0d      	ldr	r4, [pc, #52]	; (80ddc <board_init+0x58>)
   80da8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80daa:	2055      	movs	r0, #85	; 0x55
   80dac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80db0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80db2:	2056      	movs	r0, #86	; 0x56
   80db4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80db8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80dba:	2068      	movs	r0, #104	; 0x68
   80dbc:	4908      	ldr	r1, [pc, #32]	; (80de0 <board_init+0x5c>)
   80dbe:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80dc0:	205c      	movs	r0, #92	; 0x5c
   80dc2:	4908      	ldr	r1, [pc, #32]	; (80de4 <board_init+0x60>)
   80dc4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80dc6:	4808      	ldr	r0, [pc, #32]	; (80de8 <board_init+0x64>)
   80dc8:	f44f 7140 	mov.w	r1, #768	; 0x300
   80dcc:	4a07      	ldr	r2, [pc, #28]	; (80dec <board_init+0x68>)
   80dce:	4b08      	ldr	r3, [pc, #32]	; (80df0 <board_init+0x6c>)
   80dd0:	4798      	blx	r3
   80dd2:	bd10      	pop	{r4, pc}
   80dd4:	400e1a50 	.word	0x400e1a50
   80dd8:	0008119d 	.word	0x0008119d
   80ddc:	00080e99 	.word	0x00080e99
   80de0:	28000079 	.word	0x28000079
   80de4:	28000001 	.word	0x28000001
   80de8:	400e0e00 	.word	0x400e0e00
   80dec:	08000001 	.word	0x08000001
   80df0:	00080f6d 	.word	0x00080f6d

00080df4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80df4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80df6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80dfa:	d016      	beq.n	80e2a <pio_set_peripheral+0x36>
   80dfc:	d804      	bhi.n	80e08 <pio_set_peripheral+0x14>
   80dfe:	b1c1      	cbz	r1, 80e32 <pio_set_peripheral+0x3e>
   80e00:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80e04:	d00a      	beq.n	80e1c <pio_set_peripheral+0x28>
   80e06:	e013      	b.n	80e30 <pio_set_peripheral+0x3c>
   80e08:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80e0c:	d011      	beq.n	80e32 <pio_set_peripheral+0x3e>
   80e0e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80e12:	d00e      	beq.n	80e32 <pio_set_peripheral+0x3e>
   80e14:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80e18:	d10a      	bne.n	80e30 <pio_set_peripheral+0x3c>
   80e1a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80e1c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80e1e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80e20:	400b      	ands	r3, r1
   80e22:	ea23 0302 	bic.w	r3, r3, r2
   80e26:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80e28:	e002      	b.n	80e30 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80e2a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80e2c:	4313      	orrs	r3, r2
   80e2e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80e30:	6042      	str	r2, [r0, #4]
   80e32:	4770      	bx	lr

00080e34 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80e34:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80e36:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80e3a:	bf14      	ite	ne
   80e3c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80e3e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80e40:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80e44:	bf14      	ite	ne
   80e46:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80e48:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80e4a:	f012 0f02 	tst.w	r2, #2
   80e4e:	d002      	beq.n	80e56 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80e50:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80e54:	e004      	b.n	80e60 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80e56:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80e5a:	bf18      	it	ne
   80e5c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80e60:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80e62:	6001      	str	r1, [r0, #0]
   80e64:	4770      	bx	lr
   80e66:	bf00      	nop

00080e68 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80e68:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80e6a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80e6c:	9c01      	ldr	r4, [sp, #4]
   80e6e:	b10c      	cbz	r4, 80e74 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80e70:	6641      	str	r1, [r0, #100]	; 0x64
   80e72:	e000      	b.n	80e76 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80e74:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80e76:	b10b      	cbz	r3, 80e7c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80e78:	6501      	str	r1, [r0, #80]	; 0x50
   80e7a:	e000      	b.n	80e7e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80e7c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80e7e:	b10a      	cbz	r2, 80e84 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80e80:	6301      	str	r1, [r0, #48]	; 0x30
   80e82:	e000      	b.n	80e86 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80e84:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80e86:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80e88:	6001      	str	r1, [r0, #0]
}
   80e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
   80e8e:	4770      	bx	lr

00080e90 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80e90:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80e92:	4770      	bx	lr

00080e94 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80e94:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80e96:	4770      	bx	lr

00080e98 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80e98:	b570      	push	{r4, r5, r6, lr}
   80e9a:	b082      	sub	sp, #8
   80e9c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e9e:	0944      	lsrs	r4, r0, #5
   80ea0:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80ea4:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80ea8:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80eaa:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80eae:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80eb2:	d030      	beq.n	80f16 <pio_configure_pin+0x7e>
   80eb4:	d806      	bhi.n	80ec4 <pio_configure_pin+0x2c>
   80eb6:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80eba:	d00a      	beq.n	80ed2 <pio_configure_pin+0x3a>
   80ebc:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80ec0:	d018      	beq.n	80ef4 <pio_configure_pin+0x5c>
   80ec2:	e049      	b.n	80f58 <pio_configure_pin+0xc0>
   80ec4:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80ec8:	d030      	beq.n	80f2c <pio_configure_pin+0x94>
   80eca:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80ece:	d02d      	beq.n	80f2c <pio_configure_pin+0x94>
   80ed0:	e042      	b.n	80f58 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80ed2:	f000 001f 	and.w	r0, r0, #31
   80ed6:	2401      	movs	r4, #1
   80ed8:	4084      	lsls	r4, r0
   80eda:	4630      	mov	r0, r6
   80edc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ee0:	4622      	mov	r2, r4
   80ee2:	4b1f      	ldr	r3, [pc, #124]	; (80f60 <pio_configure_pin+0xc8>)
   80ee4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ee6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80eea:	bf14      	ite	ne
   80eec:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80eee:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80ef0:	2001      	movs	r0, #1
   80ef2:	e032      	b.n	80f5a <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80ef4:	f000 001f 	and.w	r0, r0, #31
   80ef8:	2401      	movs	r4, #1
   80efa:	4084      	lsls	r4, r0
   80efc:	4630      	mov	r0, r6
   80efe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f02:	4622      	mov	r2, r4
   80f04:	4b16      	ldr	r3, [pc, #88]	; (80f60 <pio_configure_pin+0xc8>)
   80f06:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80f08:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80f0c:	bf14      	ite	ne
   80f0e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80f10:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80f12:	2001      	movs	r0, #1
   80f14:	e021      	b.n	80f5a <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80f16:	f000 011f 	and.w	r1, r0, #31
   80f1a:	2401      	movs	r4, #1
   80f1c:	4630      	mov	r0, r6
   80f1e:	fa04 f101 	lsl.w	r1, r4, r1
   80f22:	462a      	mov	r2, r5
   80f24:	4b0f      	ldr	r3, [pc, #60]	; (80f64 <pio_configure_pin+0xcc>)
   80f26:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80f28:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80f2a:	e016      	b.n	80f5a <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80f2c:	f000 011f 	and.w	r1, r0, #31
   80f30:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80f32:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80f36:	ea05 0304 	and.w	r3, r5, r4
   80f3a:	9300      	str	r3, [sp, #0]
   80f3c:	4630      	mov	r0, r6
   80f3e:	fa04 f101 	lsl.w	r1, r4, r1
   80f42:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80f46:	bf14      	ite	ne
   80f48:	2200      	movne	r2, #0
   80f4a:	2201      	moveq	r2, #1
   80f4c:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80f50:	4d05      	ldr	r5, [pc, #20]	; (80f68 <pio_configure_pin+0xd0>)
   80f52:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80f54:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80f56:	e000      	b.n	80f5a <pio_configure_pin+0xc2>

	default:
		return 0;
   80f58:	2000      	movs	r0, #0
	}

	return 1;
}
   80f5a:	b002      	add	sp, #8
   80f5c:	bd70      	pop	{r4, r5, r6, pc}
   80f5e:	bf00      	nop
   80f60:	00080df5 	.word	0x00080df5
   80f64:	00080e35 	.word	0x00080e35
   80f68:	00080e69 	.word	0x00080e69

00080f6c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   80f6e:	b083      	sub	sp, #12
   80f70:	4607      	mov	r7, r0
   80f72:	460e      	mov	r6, r1
   80f74:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80f76:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80f7a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80f7e:	d026      	beq.n	80fce <pio_configure_pin_group+0x62>
   80f80:	d806      	bhi.n	80f90 <pio_configure_pin_group+0x24>
   80f82:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80f86:	d00a      	beq.n	80f9e <pio_configure_pin_group+0x32>
   80f88:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80f8c:	d013      	beq.n	80fb6 <pio_configure_pin_group+0x4a>
   80f8e:	e034      	b.n	80ffa <pio_configure_pin_group+0x8e>
   80f90:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80f94:	d01f      	beq.n	80fd6 <pio_configure_pin_group+0x6a>
   80f96:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80f9a:	d01c      	beq.n	80fd6 <pio_configure_pin_group+0x6a>
   80f9c:	e02d      	b.n	80ffa <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80f9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80fa2:	4632      	mov	r2, r6
   80fa4:	4b16      	ldr	r3, [pc, #88]	; (81000 <pio_configure_pin_group+0x94>)
   80fa6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80fa8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80fac:	bf14      	ite	ne
   80fae:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80fb0:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80fb2:	2001      	movs	r0, #1
   80fb4:	e022      	b.n	80ffc <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80fb6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80fba:	4632      	mov	r2, r6
   80fbc:	4b10      	ldr	r3, [pc, #64]	; (81000 <pio_configure_pin_group+0x94>)
   80fbe:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80fc0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80fc4:	bf14      	ite	ne
   80fc6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80fc8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80fca:	2001      	movs	r0, #1
   80fcc:	e016      	b.n	80ffc <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80fce:	4b0d      	ldr	r3, [pc, #52]	; (81004 <pio_configure_pin_group+0x98>)
   80fd0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80fd2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80fd4:	e012      	b.n	80ffc <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80fd6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80fda:	f005 0301 	and.w	r3, r5, #1
   80fde:	9300      	str	r3, [sp, #0]
   80fe0:	4638      	mov	r0, r7
   80fe2:	4631      	mov	r1, r6
   80fe4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80fe8:	bf14      	ite	ne
   80fea:	2200      	movne	r2, #0
   80fec:	2201      	moveq	r2, #1
   80fee:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80ff2:	4c05      	ldr	r4, [pc, #20]	; (81008 <pio_configure_pin_group+0x9c>)
   80ff4:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80ff6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80ff8:	e000      	b.n	80ffc <pio_configure_pin_group+0x90>

	default:
		return 0;
   80ffa:	2000      	movs	r0, #0
	}

	return 1;
}
   80ffc:	b003      	add	sp, #12
   80ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81000:	00080df5 	.word	0x00080df5
   81004:	00080e35 	.word	0x00080e35
   81008:	00080e69 	.word	0x00080e69

0008100c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8100c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81010:	4604      	mov	r4, r0
   81012:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81014:	4b10      	ldr	r3, [pc, #64]	; (81058 <pio_handler_process+0x4c>)
   81016:	4798      	blx	r3
   81018:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8101a:	4620      	mov	r0, r4
   8101c:	4b0f      	ldr	r3, [pc, #60]	; (8105c <pio_handler_process+0x50>)
   8101e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81020:	4005      	ands	r5, r0
   81022:	d017      	beq.n	81054 <pio_handler_process+0x48>
   81024:	4f0e      	ldr	r7, [pc, #56]	; (81060 <pio_handler_process+0x54>)
   81026:	f107 040c 	add.w	r4, r7, #12
   8102a:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8102c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81030:	42b3      	cmp	r3, r6
   81032:	d10a      	bne.n	8104a <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81034:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81038:	4229      	tst	r1, r5
   8103a:	d006      	beq.n	8104a <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8103c:	6823      	ldr	r3, [r4, #0]
   8103e:	4630      	mov	r0, r6
   81040:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81042:	f854 3c08 	ldr.w	r3, [r4, #-8]
   81046:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8104a:	42bc      	cmp	r4, r7
   8104c:	d002      	beq.n	81054 <pio_handler_process+0x48>
   8104e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81050:	2d00      	cmp	r5, #0
   81052:	d1eb      	bne.n	8102c <pio_handler_process+0x20>
   81054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81058:	00080e91 	.word	0x00080e91
   8105c:	00080e95 	.word	0x00080e95
   81060:	20070b00 	.word	0x20070b00

00081064 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81064:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81066:	4802      	ldr	r0, [pc, #8]	; (81070 <PIOA_Handler+0xc>)
   81068:	210b      	movs	r1, #11
   8106a:	4b02      	ldr	r3, [pc, #8]	; (81074 <PIOA_Handler+0x10>)
   8106c:	4798      	blx	r3
   8106e:	bd08      	pop	{r3, pc}
   81070:	400e0e00 	.word	0x400e0e00
   81074:	0008100d 	.word	0x0008100d

00081078 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81078:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8107a:	4802      	ldr	r0, [pc, #8]	; (81084 <PIOB_Handler+0xc>)
   8107c:	210c      	movs	r1, #12
   8107e:	4b02      	ldr	r3, [pc, #8]	; (81088 <PIOB_Handler+0x10>)
   81080:	4798      	blx	r3
   81082:	bd08      	pop	{r3, pc}
   81084:	400e1000 	.word	0x400e1000
   81088:	0008100d 	.word	0x0008100d

0008108c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8108c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8108e:	4802      	ldr	r0, [pc, #8]	; (81098 <PIOC_Handler+0xc>)
   81090:	210d      	movs	r1, #13
   81092:	4b02      	ldr	r3, [pc, #8]	; (8109c <PIOC_Handler+0x10>)
   81094:	4798      	blx	r3
   81096:	bd08      	pop	{r3, pc}
   81098:	400e1200 	.word	0x400e1200
   8109c:	0008100d 	.word	0x0008100d

000810a0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   810a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   810a2:	4802      	ldr	r0, [pc, #8]	; (810ac <PIOD_Handler+0xc>)
   810a4:	210e      	movs	r1, #14
   810a6:	4b02      	ldr	r3, [pc, #8]	; (810b0 <PIOD_Handler+0x10>)
   810a8:	4798      	blx	r3
   810aa:	bd08      	pop	{r3, pc}
   810ac:	400e1400 	.word	0x400e1400
   810b0:	0008100d 	.word	0x0008100d

000810b4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   810b4:	4b17      	ldr	r3, [pc, #92]	; (81114 <pmc_switch_mck_to_pllack+0x60>)
   810b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   810b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   810bc:	4310      	orrs	r0, r2
   810be:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   810c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   810c2:	f013 0f08 	tst.w	r3, #8
   810c6:	d109      	bne.n	810dc <pmc_switch_mck_to_pllack+0x28>
   810c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   810cc:	4911      	ldr	r1, [pc, #68]	; (81114 <pmc_switch_mck_to_pllack+0x60>)
   810ce:	e001      	b.n	810d4 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   810d0:	3b01      	subs	r3, #1
   810d2:	d019      	beq.n	81108 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   810d4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   810d6:	f012 0f08 	tst.w	r2, #8
   810da:	d0f9      	beq.n	810d0 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   810dc:	4b0d      	ldr	r3, [pc, #52]	; (81114 <pmc_switch_mck_to_pllack+0x60>)
   810de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   810e0:	f022 0203 	bic.w	r2, r2, #3
   810e4:	f042 0202 	orr.w	r2, r2, #2
   810e8:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   810ea:	6e98      	ldr	r0, [r3, #104]	; 0x68
   810ec:	f010 0008 	ands.w	r0, r0, #8
   810f0:	d10c      	bne.n	8110c <pmc_switch_mck_to_pllack+0x58>
   810f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   810f6:	4907      	ldr	r1, [pc, #28]	; (81114 <pmc_switch_mck_to_pllack+0x60>)
   810f8:	e001      	b.n	810fe <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   810fa:	3b01      	subs	r3, #1
   810fc:	d008      	beq.n	81110 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   810fe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81100:	f012 0f08 	tst.w	r2, #8
   81104:	d0f9      	beq.n	810fa <pmc_switch_mck_to_pllack+0x46>
   81106:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81108:	2001      	movs	r0, #1
   8110a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8110c:	2000      	movs	r0, #0
   8110e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81110:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81112:	4770      	bx	lr
   81114:	400e0600 	.word	0x400e0600

00081118 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81118:	b138      	cbz	r0, 8112a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8111a:	4911      	ldr	r1, [pc, #68]	; (81160 <pmc_switch_mainck_to_xtal+0x48>)
   8111c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8111e:	4a11      	ldr	r2, [pc, #68]	; (81164 <pmc_switch_mainck_to_xtal+0x4c>)
   81120:	401a      	ands	r2, r3
   81122:	4b11      	ldr	r3, [pc, #68]	; (81168 <pmc_switch_mainck_to_xtal+0x50>)
   81124:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81126:	620b      	str	r3, [r1, #32]
   81128:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8112a:	4a0d      	ldr	r2, [pc, #52]	; (81160 <pmc_switch_mainck_to_xtal+0x48>)
   8112c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8112e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81132:	f023 0303 	bic.w	r3, r3, #3
   81136:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8113a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8113e:	0209      	lsls	r1, r1, #8
   81140:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81142:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81144:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81146:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81148:	f013 0f01 	tst.w	r3, #1
   8114c:	d0fb      	beq.n	81146 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8114e:	4a04      	ldr	r2, [pc, #16]	; (81160 <pmc_switch_mainck_to_xtal+0x48>)
   81150:	6a13      	ldr	r3, [r2, #32]
   81152:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8115a:	6213      	str	r3, [r2, #32]
   8115c:	4770      	bx	lr
   8115e:	bf00      	nop
   81160:	400e0600 	.word	0x400e0600
   81164:	fec8fffc 	.word	0xfec8fffc
   81168:	01370002 	.word	0x01370002

0008116c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8116c:	4b02      	ldr	r3, [pc, #8]	; (81178 <pmc_osc_is_ready_mainck+0xc>)
   8116e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81170:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81174:	4770      	bx	lr
   81176:	bf00      	nop
   81178:	400e0600 	.word	0x400e0600

0008117c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8117c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81180:	4b01      	ldr	r3, [pc, #4]	; (81188 <pmc_disable_pllack+0xc>)
   81182:	629a      	str	r2, [r3, #40]	; 0x28
   81184:	4770      	bx	lr
   81186:	bf00      	nop
   81188:	400e0600 	.word	0x400e0600

0008118c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8118c:	4b02      	ldr	r3, [pc, #8]	; (81198 <pmc_is_locked_pllack+0xc>)
   8118e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81190:	f000 0002 	and.w	r0, r0, #2
   81194:	4770      	bx	lr
   81196:	bf00      	nop
   81198:	400e0600 	.word	0x400e0600

0008119c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8119c:	282c      	cmp	r0, #44	; 0x2c
   8119e:	d820      	bhi.n	811e2 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   811a0:	281f      	cmp	r0, #31
   811a2:	d80d      	bhi.n	811c0 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   811a4:	4b12      	ldr	r3, [pc, #72]	; (811f0 <pmc_enable_periph_clk+0x54>)
   811a6:	699a      	ldr	r2, [r3, #24]
   811a8:	2301      	movs	r3, #1
   811aa:	4083      	lsls	r3, r0
   811ac:	401a      	ands	r2, r3
   811ae:	4293      	cmp	r3, r2
   811b0:	d019      	beq.n	811e6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   811b2:	2301      	movs	r3, #1
   811b4:	fa03 f000 	lsl.w	r0, r3, r0
   811b8:	4b0d      	ldr	r3, [pc, #52]	; (811f0 <pmc_enable_periph_clk+0x54>)
   811ba:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   811bc:	2000      	movs	r0, #0
   811be:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   811c0:	4b0b      	ldr	r3, [pc, #44]	; (811f0 <pmc_enable_periph_clk+0x54>)
   811c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   811c6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   811c8:	2301      	movs	r3, #1
   811ca:	4083      	lsls	r3, r0
   811cc:	401a      	ands	r2, r3
   811ce:	4293      	cmp	r3, r2
   811d0:	d00b      	beq.n	811ea <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   811d2:	2301      	movs	r3, #1
   811d4:	fa03 f000 	lsl.w	r0, r3, r0
   811d8:	4b05      	ldr	r3, [pc, #20]	; (811f0 <pmc_enable_periph_clk+0x54>)
   811da:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   811de:	2000      	movs	r0, #0
   811e0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   811e2:	2001      	movs	r0, #1
   811e4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   811e6:	2000      	movs	r0, #0
   811e8:	4770      	bx	lr
   811ea:	2000      	movs	r0, #0
}
   811ec:	4770      	bx	lr
   811ee:	bf00      	nop
   811f0:	400e0600 	.word	0x400e0600

000811f4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   811f4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   811f6:	23ac      	movs	r3, #172	; 0xac
   811f8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   811fa:	680a      	ldr	r2, [r1, #0]
   811fc:	684b      	ldr	r3, [r1, #4]
   811fe:	fbb2 f3f3 	udiv	r3, r2, r3
   81202:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81204:	1e5c      	subs	r4, r3, #1
   81206:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8120a:	4294      	cmp	r4, r2
   8120c:	d80a      	bhi.n	81224 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8120e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81210:	688b      	ldr	r3, [r1, #8]
   81212:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81214:	f240 2302 	movw	r3, #514	; 0x202
   81218:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8121c:	2350      	movs	r3, #80	; 0x50
   8121e:	6003      	str	r3, [r0, #0]

	return 0;
   81220:	2000      	movs	r0, #0
   81222:	e000      	b.n	81226 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81224:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81226:	f85d 4b04 	ldr.w	r4, [sp], #4
   8122a:	4770      	bx	lr

0008122c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8122c:	6943      	ldr	r3, [r0, #20]
   8122e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81232:	bf1a      	itte	ne
   81234:	61c1      	strne	r1, [r0, #28]
	return 0;
   81236:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81238:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8123a:	4770      	bx	lr

0008123c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8123c:	6943      	ldr	r3, [r0, #20]
   8123e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81242:	bf1d      	ittte	ne
   81244:	6983      	ldrne	r3, [r0, #24]
   81246:	700b      	strbne	r3, [r1, #0]
	return 0;
   81248:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8124a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8124c:	4770      	bx	lr
   8124e:	bf00      	nop

00081250 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81250:	6943      	ldr	r3, [r0, #20]
   81252:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81256:	bf1d      	ittte	ne
   81258:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8125c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8125e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   81260:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   81262:	4770      	bx	lr

00081264 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81264:	6943      	ldr	r3, [r0, #20]
   81266:	f013 0f01 	tst.w	r3, #1
   8126a:	d005      	beq.n	81278 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8126c:	6983      	ldr	r3, [r0, #24]
   8126e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81272:	600b      	str	r3, [r1, #0]

	return 0;
   81274:	2000      	movs	r0, #0
   81276:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   81278:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8127a:	4770      	bx	lr

0008127c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8127c:	e7fe      	b.n	8127c <Dummy_Handler>
   8127e:	bf00      	nop

00081280 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81280:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81282:	4b1e      	ldr	r3, [pc, #120]	; (812fc <Reset_Handler+0x7c>)
   81284:	4a1e      	ldr	r2, [pc, #120]	; (81300 <Reset_Handler+0x80>)
   81286:	429a      	cmp	r2, r3
   81288:	d003      	beq.n	81292 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8128a:	4b1e      	ldr	r3, [pc, #120]	; (81304 <Reset_Handler+0x84>)
   8128c:	4a1b      	ldr	r2, [pc, #108]	; (812fc <Reset_Handler+0x7c>)
   8128e:	429a      	cmp	r2, r3
   81290:	d304      	bcc.n	8129c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81292:	4b1d      	ldr	r3, [pc, #116]	; (81308 <Reset_Handler+0x88>)
   81294:	4a1d      	ldr	r2, [pc, #116]	; (8130c <Reset_Handler+0x8c>)
   81296:	429a      	cmp	r2, r3
   81298:	d30f      	bcc.n	812ba <Reset_Handler+0x3a>
   8129a:	e01a      	b.n	812d2 <Reset_Handler+0x52>
   8129c:	4b1c      	ldr	r3, [pc, #112]	; (81310 <Reset_Handler+0x90>)
   8129e:	4c1d      	ldr	r4, [pc, #116]	; (81314 <Reset_Handler+0x94>)
   812a0:	1ae4      	subs	r4, r4, r3
   812a2:	f024 0403 	bic.w	r4, r4, #3
   812a6:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   812a8:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   812aa:	4814      	ldr	r0, [pc, #80]	; (812fc <Reset_Handler+0x7c>)
   812ac:	4914      	ldr	r1, [pc, #80]	; (81300 <Reset_Handler+0x80>)
   812ae:	585a      	ldr	r2, [r3, r1]
   812b0:	501a      	str	r2, [r3, r0]
   812b2:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   812b4:	42a3      	cmp	r3, r4
   812b6:	d1fa      	bne.n	812ae <Reset_Handler+0x2e>
   812b8:	e7eb      	b.n	81292 <Reset_Handler+0x12>
   812ba:	4b17      	ldr	r3, [pc, #92]	; (81318 <Reset_Handler+0x98>)
   812bc:	4917      	ldr	r1, [pc, #92]	; (8131c <Reset_Handler+0x9c>)
   812be:	1ac9      	subs	r1, r1, r3
   812c0:	f021 0103 	bic.w	r1, r1, #3
   812c4:	1d1a      	adds	r2, r3, #4
   812c6:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   812c8:	2200      	movs	r2, #0
   812ca:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   812ce:	428b      	cmp	r3, r1
   812d0:	d1fb      	bne.n	812ca <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   812d2:	4a13      	ldr	r2, [pc, #76]	; (81320 <Reset_Handler+0xa0>)
   812d4:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   812d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   812dc:	4911      	ldr	r1, [pc, #68]	; (81324 <Reset_Handler+0xa4>)
   812de:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   812e0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   812e4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   812e8:	d203      	bcs.n	812f2 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   812ea:	688a      	ldr	r2, [r1, #8]
   812ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   812f0:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   812f2:	4b0d      	ldr	r3, [pc, #52]	; (81328 <Reset_Handler+0xa8>)
   812f4:	4798      	blx	r3

	/* Branch to main function */
	main();
   812f6:	4b0d      	ldr	r3, [pc, #52]	; (8132c <Reset_Handler+0xac>)
   812f8:	4798      	blx	r3
   812fa:	e7fe      	b.n	812fa <Reset_Handler+0x7a>
   812fc:	20070000 	.word	0x20070000
   81300:	00084874 	.word	0x00084874
   81304:	200709ac 	.word	0x200709ac
   81308:	20070c58 	.word	0x20070c58
   8130c:	200709b0 	.word	0x200709b0
   81310:	20070004 	.word	0x20070004
   81314:	200709af 	.word	0x200709af
   81318:	200709ac 	.word	0x200709ac
   8131c:	20070c53 	.word	0x20070c53
   81320:	00080000 	.word	0x00080000
   81324:	e000ed00 	.word	0xe000ed00
   81328:	00081805 	.word	0x00081805
   8132c:	000816cd 	.word	0x000816cd

00081330 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81330:	4b3e      	ldr	r3, [pc, #248]	; (8142c <SystemCoreClockUpdate+0xfc>)
   81332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81334:	f003 0303 	and.w	r3, r3, #3
   81338:	2b03      	cmp	r3, #3
   8133a:	d85f      	bhi.n	813fc <SystemCoreClockUpdate+0xcc>
   8133c:	e8df f003 	tbb	[pc, r3]
   81340:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81344:	4b3a      	ldr	r3, [pc, #232]	; (81430 <SystemCoreClockUpdate+0x100>)
   81346:	695b      	ldr	r3, [r3, #20]
   81348:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8134c:	bf14      	ite	ne
   8134e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81352:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81356:	4b37      	ldr	r3, [pc, #220]	; (81434 <SystemCoreClockUpdate+0x104>)
   81358:	601a      	str	r2, [r3, #0]
   8135a:	e04f      	b.n	813fc <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8135c:	4b33      	ldr	r3, [pc, #204]	; (8142c <SystemCoreClockUpdate+0xfc>)
   8135e:	6a1b      	ldr	r3, [r3, #32]
   81360:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81364:	d003      	beq.n	8136e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81366:	4a34      	ldr	r2, [pc, #208]	; (81438 <SystemCoreClockUpdate+0x108>)
   81368:	4b32      	ldr	r3, [pc, #200]	; (81434 <SystemCoreClockUpdate+0x104>)
   8136a:	601a      	str	r2, [r3, #0]
   8136c:	e046      	b.n	813fc <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8136e:	4a33      	ldr	r2, [pc, #204]	; (8143c <SystemCoreClockUpdate+0x10c>)
   81370:	4b30      	ldr	r3, [pc, #192]	; (81434 <SystemCoreClockUpdate+0x104>)
   81372:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81374:	4b2d      	ldr	r3, [pc, #180]	; (8142c <SystemCoreClockUpdate+0xfc>)
   81376:	6a1b      	ldr	r3, [r3, #32]
   81378:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8137c:	2b10      	cmp	r3, #16
   8137e:	d002      	beq.n	81386 <SystemCoreClockUpdate+0x56>
   81380:	2b20      	cmp	r3, #32
   81382:	d004      	beq.n	8138e <SystemCoreClockUpdate+0x5e>
   81384:	e03a      	b.n	813fc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81386:	4a2e      	ldr	r2, [pc, #184]	; (81440 <SystemCoreClockUpdate+0x110>)
   81388:	4b2a      	ldr	r3, [pc, #168]	; (81434 <SystemCoreClockUpdate+0x104>)
   8138a:	601a      	str	r2, [r3, #0]
				break;
   8138c:	e036      	b.n	813fc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8138e:	4a2a      	ldr	r2, [pc, #168]	; (81438 <SystemCoreClockUpdate+0x108>)
   81390:	4b28      	ldr	r3, [pc, #160]	; (81434 <SystemCoreClockUpdate+0x104>)
   81392:	601a      	str	r2, [r3, #0]
				break;
   81394:	e032      	b.n	813fc <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81396:	4b25      	ldr	r3, [pc, #148]	; (8142c <SystemCoreClockUpdate+0xfc>)
   81398:	6a1b      	ldr	r3, [r3, #32]
   8139a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8139e:	d003      	beq.n	813a8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   813a0:	4a25      	ldr	r2, [pc, #148]	; (81438 <SystemCoreClockUpdate+0x108>)
   813a2:	4b24      	ldr	r3, [pc, #144]	; (81434 <SystemCoreClockUpdate+0x104>)
   813a4:	601a      	str	r2, [r3, #0]
   813a6:	e012      	b.n	813ce <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   813a8:	4a24      	ldr	r2, [pc, #144]	; (8143c <SystemCoreClockUpdate+0x10c>)
   813aa:	4b22      	ldr	r3, [pc, #136]	; (81434 <SystemCoreClockUpdate+0x104>)
   813ac:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   813ae:	4b1f      	ldr	r3, [pc, #124]	; (8142c <SystemCoreClockUpdate+0xfc>)
   813b0:	6a1b      	ldr	r3, [r3, #32]
   813b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   813b6:	2b10      	cmp	r3, #16
   813b8:	d002      	beq.n	813c0 <SystemCoreClockUpdate+0x90>
   813ba:	2b20      	cmp	r3, #32
   813bc:	d004      	beq.n	813c8 <SystemCoreClockUpdate+0x98>
   813be:	e006      	b.n	813ce <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   813c0:	4a1f      	ldr	r2, [pc, #124]	; (81440 <SystemCoreClockUpdate+0x110>)
   813c2:	4b1c      	ldr	r3, [pc, #112]	; (81434 <SystemCoreClockUpdate+0x104>)
   813c4:	601a      	str	r2, [r3, #0]
				break;
   813c6:	e002      	b.n	813ce <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   813c8:	4a1b      	ldr	r2, [pc, #108]	; (81438 <SystemCoreClockUpdate+0x108>)
   813ca:	4b1a      	ldr	r3, [pc, #104]	; (81434 <SystemCoreClockUpdate+0x104>)
   813cc:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   813ce:	4b17      	ldr	r3, [pc, #92]	; (8142c <SystemCoreClockUpdate+0xfc>)
   813d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   813d2:	f003 0303 	and.w	r3, r3, #3
   813d6:	2b02      	cmp	r3, #2
   813d8:	d10d      	bne.n	813f6 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   813da:	4b14      	ldr	r3, [pc, #80]	; (8142c <SystemCoreClockUpdate+0xfc>)
   813dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   813de:	6a99      	ldr	r1, [r3, #40]	; 0x28
   813e0:	4b14      	ldr	r3, [pc, #80]	; (81434 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   813e2:	f3c0 400a 	ubfx	r0, r0, #16, #11
   813e6:	681a      	ldr	r2, [r3, #0]
   813e8:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   813ec:	b2c9      	uxtb	r1, r1
   813ee:	fbb2 f2f1 	udiv	r2, r2, r1
   813f2:	601a      	str	r2, [r3, #0]
   813f4:	e002      	b.n	813fc <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   813f6:	4a13      	ldr	r2, [pc, #76]	; (81444 <SystemCoreClockUpdate+0x114>)
   813f8:	4b0e      	ldr	r3, [pc, #56]	; (81434 <SystemCoreClockUpdate+0x104>)
   813fa:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   813fc:	4b0b      	ldr	r3, [pc, #44]	; (8142c <SystemCoreClockUpdate+0xfc>)
   813fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81400:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81404:	2b70      	cmp	r3, #112	; 0x70
   81406:	d107      	bne.n	81418 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81408:	4b0a      	ldr	r3, [pc, #40]	; (81434 <SystemCoreClockUpdate+0x104>)
   8140a:	681a      	ldr	r2, [r3, #0]
   8140c:	490e      	ldr	r1, [pc, #56]	; (81448 <SystemCoreClockUpdate+0x118>)
   8140e:	fba1 0202 	umull	r0, r2, r1, r2
   81412:	0852      	lsrs	r2, r2, #1
   81414:	601a      	str	r2, [r3, #0]
   81416:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81418:	4b04      	ldr	r3, [pc, #16]	; (8142c <SystemCoreClockUpdate+0xfc>)
   8141a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   8141c:	4b05      	ldr	r3, [pc, #20]	; (81434 <SystemCoreClockUpdate+0x104>)
   8141e:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81422:	681a      	ldr	r2, [r3, #0]
   81424:	40ca      	lsrs	r2, r1
   81426:	601a      	str	r2, [r3, #0]
   81428:	4770      	bx	lr
   8142a:	bf00      	nop
   8142c:	400e0600 	.word	0x400e0600
   81430:	400e1a10 	.word	0x400e1a10
   81434:	20070144 	.word	0x20070144
   81438:	00b71b00 	.word	0x00b71b00
   8143c:	003d0900 	.word	0x003d0900
   81440:	007a1200 	.word	0x007a1200
   81444:	0e4e1c00 	.word	0x0e4e1c00
   81448:	aaaaaaab 	.word	0xaaaaaaab

0008144c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8144c:	4b09      	ldr	r3, [pc, #36]	; (81474 <_sbrk+0x28>)
   8144e:	681b      	ldr	r3, [r3, #0]
   81450:	b913      	cbnz	r3, 81458 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81452:	4a09      	ldr	r2, [pc, #36]	; (81478 <_sbrk+0x2c>)
   81454:	4b07      	ldr	r3, [pc, #28]	; (81474 <_sbrk+0x28>)
   81456:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81458:	4b06      	ldr	r3, [pc, #24]	; (81474 <_sbrk+0x28>)
   8145a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8145c:	181a      	adds	r2, r3, r0
   8145e:	4907      	ldr	r1, [pc, #28]	; (8147c <_sbrk+0x30>)
   81460:	4291      	cmp	r1, r2
   81462:	db04      	blt.n	8146e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81464:	4610      	mov	r0, r2
   81466:	4a03      	ldr	r2, [pc, #12]	; (81474 <_sbrk+0x28>)
   81468:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8146a:	4618      	mov	r0, r3
   8146c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   8146e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81472:	4770      	bx	lr
   81474:	20070b70 	.word	0x20070b70
   81478:	20072c58 	.word	0x20072c58
   8147c:	20087ffc 	.word	0x20087ffc

00081480 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81480:	f04f 30ff 	mov.w	r0, #4294967295
   81484:	4770      	bx	lr
   81486:	bf00      	nop

00081488 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8148c:	604b      	str	r3, [r1, #4]

	return 0;
}
   8148e:	2000      	movs	r0, #0
   81490:	4770      	bx	lr
   81492:	bf00      	nop

00081494 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81494:	2001      	movs	r0, #1
   81496:	4770      	bx	lr

00081498 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81498:	2000      	movs	r0, #0
   8149a:	4770      	bx	lr

0008149c <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   8149c:	b500      	push	{lr}
   8149e:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   814a0:	4811      	ldr	r0, [pc, #68]	; (814e8 <USART0_Handler+0x4c>)
   814a2:	f10d 0107 	add.w	r1, sp, #7
   814a6:	2201      	movs	r2, #1
   814a8:	4b10      	ldr	r3, [pc, #64]	; (814ec <USART0_Handler+0x50>)
   814aa:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   814ac:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   814ae:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   814b2:	2200      	movs	r2, #0
   814b4:	4b0e      	ldr	r3, [pc, #56]	; (814f0 <USART0_Handler+0x54>)
   814b6:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   814b8:	4b0e      	ldr	r3, [pc, #56]	; (814f4 <USART0_Handler+0x58>)
   814ba:	781b      	ldrb	r3, [r3, #0]
   814bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   814c0:	4a0d      	ldr	r2, [pc, #52]	; (814f8 <USART0_Handler+0x5c>)
   814c2:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   814c4:	2b9b      	cmp	r3, #155	; 0x9b
   814c6:	d103      	bne.n	814d0 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   814c8:	2200      	movs	r2, #0
   814ca:	4b0a      	ldr	r3, [pc, #40]	; (814f4 <USART0_Handler+0x58>)
   814cc:	701a      	strb	r2, [r3, #0]
   814ce:	e002      	b.n	814d6 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   814d0:	3301      	adds	r3, #1
   814d2:	4a08      	ldr	r2, [pc, #32]	; (814f4 <USART0_Handler+0x58>)
   814d4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   814d6:	2201      	movs	r2, #1
   814d8:	4b05      	ldr	r3, [pc, #20]	; (814f0 <USART0_Handler+0x54>)
   814da:	701a      	strb	r2, [r3, #0]
   814dc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   814e0:	b662      	cpsie	i
}
   814e2:	b003      	add	sp, #12
   814e4:	f85d fb04 	ldr.w	pc, [sp], #4
   814e8:	40098000 	.word	0x40098000
   814ec:	00080c2d 	.word	0x00080c2d
   814f0:	20070140 	.word	0x20070140
   814f4:	20070c10 	.word	0x20070c10
   814f8:	20070b74 	.word	0x20070b74

000814fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   814fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   814fe:	b083      	sub	sp, #12
   81500:	4604      	mov	r4, r0
   81502:	460d      	mov	r5, r1
	uint32_t val = 0;
   81504:	2300      	movs	r3, #0
   81506:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81508:	4b1f      	ldr	r3, [pc, #124]	; (81588 <usart_serial_getchar+0x8c>)
   8150a:	4298      	cmp	r0, r3
   8150c:	d107      	bne.n	8151e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8150e:	461f      	mov	r7, r3
   81510:	4e1e      	ldr	r6, [pc, #120]	; (8158c <usart_serial_getchar+0x90>)
   81512:	4638      	mov	r0, r7
   81514:	4629      	mov	r1, r5
   81516:	47b0      	blx	r6
   81518:	2800      	cmp	r0, #0
   8151a:	d1fa      	bne.n	81512 <usart_serial_getchar+0x16>
   8151c:	e019      	b.n	81552 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8151e:	4b1c      	ldr	r3, [pc, #112]	; (81590 <usart_serial_getchar+0x94>)
   81520:	4298      	cmp	r0, r3
   81522:	d109      	bne.n	81538 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   81524:	461f      	mov	r7, r3
   81526:	4e1b      	ldr	r6, [pc, #108]	; (81594 <usart_serial_getchar+0x98>)
   81528:	4638      	mov	r0, r7
   8152a:	a901      	add	r1, sp, #4
   8152c:	47b0      	blx	r6
   8152e:	2800      	cmp	r0, #0
   81530:	d1fa      	bne.n	81528 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   81532:	9b01      	ldr	r3, [sp, #4]
   81534:	702b      	strb	r3, [r5, #0]
   81536:	e019      	b.n	8156c <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81538:	4b17      	ldr	r3, [pc, #92]	; (81598 <usart_serial_getchar+0x9c>)
   8153a:	4298      	cmp	r0, r3
   8153c:	d109      	bne.n	81552 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8153e:	461e      	mov	r6, r3
   81540:	4c14      	ldr	r4, [pc, #80]	; (81594 <usart_serial_getchar+0x98>)
   81542:	4630      	mov	r0, r6
   81544:	a901      	add	r1, sp, #4
   81546:	47a0      	blx	r4
   81548:	2800      	cmp	r0, #0
   8154a:	d1fa      	bne.n	81542 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   8154c:	9b01      	ldr	r3, [sp, #4]
   8154e:	702b      	strb	r3, [r5, #0]
   81550:	e018      	b.n	81584 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81552:	4b12      	ldr	r3, [pc, #72]	; (8159c <usart_serial_getchar+0xa0>)
   81554:	429c      	cmp	r4, r3
   81556:	d109      	bne.n	8156c <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   81558:	461e      	mov	r6, r3
   8155a:	4c0e      	ldr	r4, [pc, #56]	; (81594 <usart_serial_getchar+0x98>)
   8155c:	4630      	mov	r0, r6
   8155e:	a901      	add	r1, sp, #4
   81560:	47a0      	blx	r4
   81562:	2800      	cmp	r0, #0
   81564:	d1fa      	bne.n	8155c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   81566:	9b01      	ldr	r3, [sp, #4]
   81568:	702b      	strb	r3, [r5, #0]
   8156a:	e00b      	b.n	81584 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8156c:	4b0c      	ldr	r3, [pc, #48]	; (815a0 <usart_serial_getchar+0xa4>)
   8156e:	429c      	cmp	r4, r3
   81570:	d108      	bne.n	81584 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   81572:	461e      	mov	r6, r3
   81574:	4c07      	ldr	r4, [pc, #28]	; (81594 <usart_serial_getchar+0x98>)
   81576:	4630      	mov	r0, r6
   81578:	a901      	add	r1, sp, #4
   8157a:	47a0      	blx	r4
   8157c:	2800      	cmp	r0, #0
   8157e:	d1fa      	bne.n	81576 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81580:	9b01      	ldr	r3, [sp, #4]
   81582:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81584:	b003      	add	sp, #12
   81586:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81588:	400e0800 	.word	0x400e0800
   8158c:	0008123d 	.word	0x0008123d
   81590:	40098000 	.word	0x40098000
   81594:	00081265 	.word	0x00081265
   81598:	4009c000 	.word	0x4009c000
   8159c:	400a0000 	.word	0x400a0000
   815a0:	400a4000 	.word	0x400a4000

000815a4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   815a4:	b570      	push	{r4, r5, r6, lr}
   815a6:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   815a8:	4b21      	ldr	r3, [pc, #132]	; (81630 <usart_serial_putchar+0x8c>)
   815aa:	4298      	cmp	r0, r3
   815ac:	d107      	bne.n	815be <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   815ae:	461e      	mov	r6, r3
   815b0:	4d20      	ldr	r5, [pc, #128]	; (81634 <usart_serial_putchar+0x90>)
   815b2:	4630      	mov	r0, r6
   815b4:	4621      	mov	r1, r4
   815b6:	47a8      	blx	r5
   815b8:	2800      	cmp	r0, #0
   815ba:	d1fa      	bne.n	815b2 <usart_serial_putchar+0xe>
   815bc:	e02b      	b.n	81616 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   815be:	4b1e      	ldr	r3, [pc, #120]	; (81638 <usart_serial_putchar+0x94>)
   815c0:	4298      	cmp	r0, r3
   815c2:	d107      	bne.n	815d4 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   815c4:	461e      	mov	r6, r3
   815c6:	4d1d      	ldr	r5, [pc, #116]	; (8163c <usart_serial_putchar+0x98>)
   815c8:	4630      	mov	r0, r6
   815ca:	4621      	mov	r1, r4
   815cc:	47a8      	blx	r5
   815ce:	2800      	cmp	r0, #0
   815d0:	d1fa      	bne.n	815c8 <usart_serial_putchar+0x24>
   815d2:	e022      	b.n	8161a <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   815d4:	4b1a      	ldr	r3, [pc, #104]	; (81640 <usart_serial_putchar+0x9c>)
   815d6:	4298      	cmp	r0, r3
   815d8:	d107      	bne.n	815ea <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   815da:	461e      	mov	r6, r3
   815dc:	4d17      	ldr	r5, [pc, #92]	; (8163c <usart_serial_putchar+0x98>)
   815de:	4630      	mov	r0, r6
   815e0:	4621      	mov	r1, r4
   815e2:	47a8      	blx	r5
   815e4:	2800      	cmp	r0, #0
   815e6:	d1fa      	bne.n	815de <usart_serial_putchar+0x3a>
   815e8:	e019      	b.n	8161e <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   815ea:	4b16      	ldr	r3, [pc, #88]	; (81644 <usart_serial_putchar+0xa0>)
   815ec:	4298      	cmp	r0, r3
   815ee:	d107      	bne.n	81600 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   815f0:	461e      	mov	r6, r3
   815f2:	4d12      	ldr	r5, [pc, #72]	; (8163c <usart_serial_putchar+0x98>)
   815f4:	4630      	mov	r0, r6
   815f6:	4621      	mov	r1, r4
   815f8:	47a8      	blx	r5
   815fa:	2800      	cmp	r0, #0
   815fc:	d1fa      	bne.n	815f4 <usart_serial_putchar+0x50>
   815fe:	e010      	b.n	81622 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81600:	4b11      	ldr	r3, [pc, #68]	; (81648 <usart_serial_putchar+0xa4>)
   81602:	4298      	cmp	r0, r3
   81604:	d10f      	bne.n	81626 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   81606:	461e      	mov	r6, r3
   81608:	4d0c      	ldr	r5, [pc, #48]	; (8163c <usart_serial_putchar+0x98>)
   8160a:	4630      	mov	r0, r6
   8160c:	4621      	mov	r1, r4
   8160e:	47a8      	blx	r5
   81610:	2800      	cmp	r0, #0
   81612:	d1fa      	bne.n	8160a <usart_serial_putchar+0x66>
   81614:	e009      	b.n	8162a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   81616:	2001      	movs	r0, #1
   81618:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8161a:	2001      	movs	r0, #1
   8161c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8161e:	2001      	movs	r0, #1
   81620:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81622:	2001      	movs	r0, #1
   81624:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81626:	2000      	movs	r0, #0
   81628:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8162a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8162c:	bd70      	pop	{r4, r5, r6, pc}
   8162e:	bf00      	nop
   81630:	400e0800 	.word	0x400e0800
   81634:	0008122d 	.word	0x0008122d
   81638:	40098000 	.word	0x40098000
   8163c:	00081251 	.word	0x00081251
   81640:	4009c000 	.word	0x4009c000
   81644:	400a0000 	.word	0x400a0000
   81648:	400a4000 	.word	0x400a4000

0008164c <configure_console>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   8164c:	b530      	push	{r4, r5, lr}
   8164e:	b085      	sub	sp, #20
   81650:	2008      	movs	r0, #8
   81652:	4d13      	ldr	r5, [pc, #76]	; (816a0 <configure_console+0x54>)
   81654:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   81656:	4c13      	ldr	r4, [pc, #76]	; (816a4 <configure_console+0x58>)
   81658:	4b13      	ldr	r3, [pc, #76]	; (816a8 <configure_console+0x5c>)
   8165a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8165c:	4a13      	ldr	r2, [pc, #76]	; (816ac <configure_console+0x60>)
   8165e:	4b14      	ldr	r3, [pc, #80]	; (816b0 <configure_console+0x64>)
   81660:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81662:	4a14      	ldr	r2, [pc, #80]	; (816b4 <configure_console+0x68>)
   81664:	4b14      	ldr	r3, [pc, #80]	; (816b8 <configure_console+0x6c>)
   81666:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81668:	4b14      	ldr	r3, [pc, #80]	; (816bc <configure_console+0x70>)
   8166a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8166c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81670:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81672:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81676:	9303      	str	r3, [sp, #12]
   81678:	2008      	movs	r0, #8
   8167a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8167c:	4620      	mov	r0, r4
   8167e:	a901      	add	r1, sp, #4
   81680:	4b0f      	ldr	r3, [pc, #60]	; (816c0 <configure_console+0x74>)
   81682:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81684:	4d0f      	ldr	r5, [pc, #60]	; (816c4 <configure_console+0x78>)
   81686:	682b      	ldr	r3, [r5, #0]
   81688:	6898      	ldr	r0, [r3, #8]
   8168a:	2100      	movs	r1, #0
   8168c:	4c0e      	ldr	r4, [pc, #56]	; (816c8 <configure_console+0x7c>)
   8168e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81690:	682b      	ldr	r3, [r5, #0]
   81692:	6858      	ldr	r0, [r3, #4]
   81694:	2100      	movs	r1, #0
   81696:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   81698:	2000      	movs	r0, #0
   8169a:	b005      	add	sp, #20
   8169c:	bd30      	pop	{r4, r5, pc}
   8169e:	bf00      	nop
   816a0:	0008119d 	.word	0x0008119d
   816a4:	400e0800 	.word	0x400e0800
   816a8:	20070c50 	.word	0x20070c50
   816ac:	000815a5 	.word	0x000815a5
   816b0:	20070c4c 	.word	0x20070c4c
   816b4:	000814fd 	.word	0x000814fd
   816b8:	20070c48 	.word	0x20070c48
   816bc:	0501bd00 	.word	0x0501bd00
   816c0:	000811f5 	.word	0x000811f5
   816c4:	20070570 	.word	0x20070570
   816c8:	00081911 	.word	0x00081911

000816cc <main>:
#include "test/test_twi.h"

static void twi_init(void);

int main(void)
{
   816cc:	b570      	push	{r4, r5, r6, lr}
	sysclk_init();
   816ce:	4b34      	ldr	r3, [pc, #208]	; (817a0 <main+0xd4>)
   816d0:	4798      	blx	r3
	board_init();
   816d2:	4b34      	ldr	r3, [pc, #208]	; (817a4 <main+0xd8>)
   816d4:	4798      	blx	r3
	
	configure_console();
   816d6:	4b34      	ldr	r3, [pc, #208]	; (817a8 <main+0xdc>)
   816d8:	4798      	blx	r3
	}
	delay_ms(500);
}

static void twi_init(void){
	pmc_enable_peripheral_clock(ID_TWI0);
   816da:	2016      	movs	r0, #22
   816dc:	4d33      	ldr	r5, [pc, #204]	; (817ac <main+0xe0>)
   816de:	47a8      	blx	r5
	pio_conf_pin_to_peripheral(PIOA, PIO_PERIPH_A, 17);	// SDA
   816e0:	4e33      	ldr	r6, [pc, #204]	; (817b0 <main+0xe4>)
   816e2:	4630      	mov	r0, r6
   816e4:	2100      	movs	r1, #0
   816e6:	2211      	movs	r2, #17
   816e8:	4c32      	ldr	r4, [pc, #200]	; (817b4 <main+0xe8>)
   816ea:	47a0      	blx	r4
	pio_conf_pin_to_peripheral(PIOA, PIO_PERIPH_A, 18);	// SCL
   816ec:	4630      	mov	r0, r6
   816ee:	2100      	movs	r1, #0
   816f0:	2212      	movs	r2, #18
   816f2:	47a0      	blx	r4

	pmc_enable_peripheral_clock(ID_TWI1);
   816f4:	2017      	movs	r0, #23
   816f6:	47a8      	blx	r5
	pio_conf_pin_to_peripheral(PIOB, PIO_PERIPH_A, 12);	// SDA (pin 20)
   816f8:	4d2f      	ldr	r5, [pc, #188]	; (817b8 <main+0xec>)
   816fa:	4628      	mov	r0, r5
   816fc:	2100      	movs	r1, #0
   816fe:	220c      	movs	r2, #12
   81700:	47a0      	blx	r4
	pio_conf_pin_to_peripheral(PIOB, PIO_PERIPH_A, 13);	// SCL (pin 21)
   81702:	4628      	mov	r0, r5
   81704:	2100      	movs	r1, #0
   81706:	220d      	movs	r2, #13
   81708:	47a0      	blx	r4
	twi_init();

	/*
	* initialize TWI Slave
	*/
	twi_init_slave(TWI1, slave_address);
   8170a:	f5a5 25a2 	sub.w	r5, r5, #331776	; 0x51000
   8170e:	4628      	mov	r0, r5
   81710:	2164      	movs	r1, #100	; 0x64
   81712:	4b2a      	ldr	r3, [pc, #168]	; (817bc <main+0xf0>)
   81714:	4798      	blx	r3
	printf("Slave initialized\r\n");
   81716:	482a      	ldr	r0, [pc, #168]	; (817c0 <main+0xf4>)
   81718:	4b2a      	ldr	r3, [pc, #168]	; (817c4 <main+0xf8>)
   8171a:	4798      	blx	r3
	
	/*
	* initialize TWI Master
	*/
	twi_set_clock(TWI0, TWI_FAST_MODE_SPEED, 84000000);
   8171c:	4c2a      	ldr	r4, [pc, #168]	; (817c8 <main+0xfc>)
   8171e:	4620      	mov	r0, r4
   81720:	492a      	ldr	r1, [pc, #168]	; (817cc <main+0x100>)
   81722:	4a2b      	ldr	r2, [pc, #172]	; (817d0 <main+0x104>)
   81724:	4b2b      	ldr	r3, [pc, #172]	; (817d4 <main+0x108>)
   81726:	4798      	blx	r3
	twi_set_device_address(TWI0, slave_address, 0);
   81728:	4620      	mov	r0, r4
   8172a:	2164      	movs	r1, #100	; 0x64
   8172c:	2200      	movs	r2, #0
   8172e:	4b2a      	ldr	r3, [pc, #168]	; (817d8 <main+0x10c>)
   81730:	4798      	blx	r3
	twi_set_internal_address(TWI0, 0);
   81732:	4620      	mov	r0, r4
   81734:	2100      	movs	r1, #0
   81736:	4b29      	ldr	r3, [pc, #164]	; (817dc <main+0x110>)
   81738:	4798      	blx	r3
	twi_init_master(TWI0);
   8173a:	4620      	mov	r0, r4
   8173c:	4b28      	ldr	r3, [pc, #160]	; (817e0 <main+0x114>)
   8173e:	4798      	blx	r3
	// If the slave address on the TWI line matches this slave device
	result = 0;
	for (i = 0; (i < 100 && result == 0); i++) {
		result = TWI1->TWI_SR & TWI_SR_SVACC;
   81740:	69e9      	ldr	r1, [r5, #28]
   81742:	f001 0110 	and.w	r1, r1, #16
   81746:	2363      	movs	r3, #99	; 0x63
   81748:	e001      	b.n	8174e <main+0x82>
	twi_set_device_address(TWI0, slave_address, 0);
	twi_set_internal_address(TWI0, 0);
	twi_init_master(TWI0);
	// If the slave address on the TWI line matches this slave device
	result = 0;
	for (i = 0; (i < 100 && result == 0); i++) {
   8174a:	3b01      	subs	r3, #1
   8174c:	d001      	beq.n	81752 <main+0x86>
   8174e:	2900      	cmp	r1, #0
   81750:	d0fb      	beq.n	8174a <main+0x7e>
		result = TWI1->TWI_SR & TWI_SR_SVACC;
	}
	printf("Result: %d\r\n", result);
   81752:	4824      	ldr	r0, [pc, #144]	; (817e4 <main+0x118>)
   81754:	4c1b      	ldr	r4, [pc, #108]	; (817c4 <main+0xf8>)
   81756:	47a0      	blx	r4
	data_out = 65;
	//twi_write_master(TWI0,65, 1);
	// set Master Write Direction
	TWI0->TWI_MMR |= TWI_MMR_MASTER_WRITE;
	// write data to slave
	TWI0->TWI_THR = data_out;
   81758:	2141      	movs	r1, #65	; 0x41
   8175a:	4b1b      	ldr	r3, [pc, #108]	; (817c8 <main+0xfc>)
   8175c:	6319      	str	r1, [r3, #48]	; 0x30
	printf("Sent: %d\r\n", data_out);
   8175e:	4822      	ldr	r0, [pc, #136]	; (817e8 <main+0x11c>)
   81760:	47a0      	blx	r4
	
	/*
	* read data from master
	*/
	status = TWI1->TWI_SR;
   81762:	4b22      	ldr	r3, [pc, #136]	; (817ec <main+0x120>)
   81764:	69dd      	ldr	r5, [r3, #28]
	printf("Status: %d\r\n", status);
   81766:	4822      	ldr	r0, [pc, #136]	; (817f0 <main+0x124>)
   81768:	4629      	mov	r1, r5
   8176a:	47a0      	blx	r4
	delay_ms(500);
   8176c:	4821      	ldr	r0, [pc, #132]	; (817f4 <main+0x128>)
   8176e:	4b22      	ldr	r3, [pc, #136]	; (817f8 <main+0x12c>)
   81770:	4798      	blx	r3
	printf("Now?\r\n");
   81772:	4822      	ldr	r0, [pc, #136]	; (817fc <main+0x130>)
   81774:	47a0      	blx	r4
	// If the slave address on the TWI line matches this slave device
	if (status & TWI_SR_SVACC) {
   81776:	f015 0f10 	tst.w	r5, #16
   8177a:	d00b      	beq.n	81794 <main+0xc8>
		printf("Status: %d\r\n", status);
   8177c:	481c      	ldr	r0, [pc, #112]	; (817f0 <main+0x124>)
   8177e:	4629      	mov	r1, r5
   81780:	47a0      	blx	r4
		if ((status & TWI_SR_SVREAD) && (status & TWI_SR_RXRDY)) {
   81782:	f005 050a 	and.w	r5, r5, #10
   81786:	2d0a      	cmp	r5, #10
   81788:	d104      	bne.n	81794 <main+0xc8>
			// read character
			data_in = (uint8_t) TWI1->TWI_RHR;
			printf("Received: %d\r\n", data_in);
   8178a:	481d      	ldr	r0, [pc, #116]	; (81800 <main+0x134>)
   8178c:	4b17      	ldr	r3, [pc, #92]	; (817ec <main+0x120>)
   8178e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
   81792:	47a0      	blx	r4
		}
	}
	delay_ms(500);
   81794:	4817      	ldr	r0, [pc, #92]	; (817f4 <main+0x128>)
   81796:	4b18      	ldr	r3, [pc, #96]	; (817f8 <main+0x12c>)
   81798:	4798      	blx	r3
}
   8179a:	2000      	movs	r0, #0
   8179c:	bd70      	pop	{r4, r5, r6, pc}
   8179e:	bf00      	nop
   817a0:	00080bc9 	.word	0x00080bc9
   817a4:	00080d85 	.word	0x00080d85
   817a8:	0008164d 	.word	0x0008164d
   817ac:	00080175 	.word	0x00080175
   817b0:	400e0e00 	.word	0x400e0e00
   817b4:	00080149 	.word	0x00080149
   817b8:	400e1000 	.word	0x400e1000
   817bc:	00080bb9 	.word	0x00080bb9
   817c0:	00084798 	.word	0x00084798
   817c4:	00081855 	.word	0x00081855
   817c8:	4008c000 	.word	0x4008c000
   817cc:	00061a80 	.word	0x00061a80
   817d0:	0501bd00 	.word	0x0501bd00
   817d4:	00080b61 	.word	0x00080b61
   817d8:	00080b45 	.word	0x00080b45
   817dc:	00080b59 	.word	0x00080b59
   817e0:	00080bb1 	.word	0x00080bb1
   817e4:	000847ac 	.word	0x000847ac
   817e8:	000847bc 	.word	0x000847bc
   817ec:	40090000 	.word	0x40090000
   817f0:	000847c8 	.word	0x000847c8
   817f4:	002dc6c0 	.word	0x002dc6c0
   817f8:	20070001 	.word	0x20070001
   817fc:	000847d8 	.word	0x000847d8
   81800:	000847e0 	.word	0x000847e0

00081804 <__libc_init_array>:
   81804:	b570      	push	{r4, r5, r6, lr}
   81806:	4e0f      	ldr	r6, [pc, #60]	; (81844 <__libc_init_array+0x40>)
   81808:	4d0f      	ldr	r5, [pc, #60]	; (81848 <__libc_init_array+0x44>)
   8180a:	1b76      	subs	r6, r6, r5
   8180c:	10b6      	asrs	r6, r6, #2
   8180e:	d007      	beq.n	81820 <__libc_init_array+0x1c>
   81810:	3d04      	subs	r5, #4
   81812:	2400      	movs	r4, #0
   81814:	3401      	adds	r4, #1
   81816:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8181a:	4798      	blx	r3
   8181c:	42a6      	cmp	r6, r4
   8181e:	d1f9      	bne.n	81814 <__libc_init_array+0x10>
   81820:	4e0a      	ldr	r6, [pc, #40]	; (8184c <__libc_init_array+0x48>)
   81822:	4d0b      	ldr	r5, [pc, #44]	; (81850 <__libc_init_array+0x4c>)
   81824:	f003 f810 	bl	84848 <_init>
   81828:	1b76      	subs	r6, r6, r5
   8182a:	10b6      	asrs	r6, r6, #2
   8182c:	d008      	beq.n	81840 <__libc_init_array+0x3c>
   8182e:	3d04      	subs	r5, #4
   81830:	2400      	movs	r4, #0
   81832:	3401      	adds	r4, #1
   81834:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81838:	4798      	blx	r3
   8183a:	42a6      	cmp	r6, r4
   8183c:	d1f9      	bne.n	81832 <__libc_init_array+0x2e>
   8183e:	bd70      	pop	{r4, r5, r6, pc}
   81840:	bd70      	pop	{r4, r5, r6, pc}
   81842:	bf00      	nop
   81844:	00084854 	.word	0x00084854
   81848:	00084854 	.word	0x00084854
   8184c:	0008485c 	.word	0x0008485c
   81850:	00084854 	.word	0x00084854

00081854 <iprintf>:
   81854:	b40f      	push	{r0, r1, r2, r3}
   81856:	b510      	push	{r4, lr}
   81858:	4b07      	ldr	r3, [pc, #28]	; (81878 <iprintf+0x24>)
   8185a:	b082      	sub	sp, #8
   8185c:	ac04      	add	r4, sp, #16
   8185e:	f854 2b04 	ldr.w	r2, [r4], #4
   81862:	6818      	ldr	r0, [r3, #0]
   81864:	4623      	mov	r3, r4
   81866:	6881      	ldr	r1, [r0, #8]
   81868:	9401      	str	r4, [sp, #4]
   8186a:	f000 f915 	bl	81a98 <_vfiprintf_r>
   8186e:	b002      	add	sp, #8
   81870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81874:	b004      	add	sp, #16
   81876:	4770      	bx	lr
   81878:	20070570 	.word	0x20070570

0008187c <memset>:
   8187c:	b4f0      	push	{r4, r5, r6, r7}
   8187e:	0784      	lsls	r4, r0, #30
   81880:	d043      	beq.n	8190a <memset+0x8e>
   81882:	1e54      	subs	r4, r2, #1
   81884:	2a00      	cmp	r2, #0
   81886:	d03e      	beq.n	81906 <memset+0x8a>
   81888:	b2cd      	uxtb	r5, r1
   8188a:	4603      	mov	r3, r0
   8188c:	e003      	b.n	81896 <memset+0x1a>
   8188e:	1e62      	subs	r2, r4, #1
   81890:	2c00      	cmp	r4, #0
   81892:	d038      	beq.n	81906 <memset+0x8a>
   81894:	4614      	mov	r4, r2
   81896:	f803 5b01 	strb.w	r5, [r3], #1
   8189a:	079a      	lsls	r2, r3, #30
   8189c:	d1f7      	bne.n	8188e <memset+0x12>
   8189e:	2c03      	cmp	r4, #3
   818a0:	d92a      	bls.n	818f8 <memset+0x7c>
   818a2:	b2cd      	uxtb	r5, r1
   818a4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   818a8:	2c0f      	cmp	r4, #15
   818aa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   818ae:	d915      	bls.n	818dc <memset+0x60>
   818b0:	f1a4 0710 	sub.w	r7, r4, #16
   818b4:	093f      	lsrs	r7, r7, #4
   818b6:	f103 0610 	add.w	r6, r3, #16
   818ba:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   818be:	461a      	mov	r2, r3
   818c0:	6015      	str	r5, [r2, #0]
   818c2:	6055      	str	r5, [r2, #4]
   818c4:	6095      	str	r5, [r2, #8]
   818c6:	60d5      	str	r5, [r2, #12]
   818c8:	3210      	adds	r2, #16
   818ca:	42b2      	cmp	r2, r6
   818cc:	d1f8      	bne.n	818c0 <memset+0x44>
   818ce:	f004 040f 	and.w	r4, r4, #15
   818d2:	3701      	adds	r7, #1
   818d4:	2c03      	cmp	r4, #3
   818d6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   818da:	d90d      	bls.n	818f8 <memset+0x7c>
   818dc:	461e      	mov	r6, r3
   818de:	4622      	mov	r2, r4
   818e0:	3a04      	subs	r2, #4
   818e2:	2a03      	cmp	r2, #3
   818e4:	f846 5b04 	str.w	r5, [r6], #4
   818e8:	d8fa      	bhi.n	818e0 <memset+0x64>
   818ea:	1f22      	subs	r2, r4, #4
   818ec:	f022 0203 	bic.w	r2, r2, #3
   818f0:	3204      	adds	r2, #4
   818f2:	4413      	add	r3, r2
   818f4:	f004 0403 	and.w	r4, r4, #3
   818f8:	b12c      	cbz	r4, 81906 <memset+0x8a>
   818fa:	b2c9      	uxtb	r1, r1
   818fc:	441c      	add	r4, r3
   818fe:	f803 1b01 	strb.w	r1, [r3], #1
   81902:	42a3      	cmp	r3, r4
   81904:	d1fb      	bne.n	818fe <memset+0x82>
   81906:	bcf0      	pop	{r4, r5, r6, r7}
   81908:	4770      	bx	lr
   8190a:	4614      	mov	r4, r2
   8190c:	4603      	mov	r3, r0
   8190e:	e7c6      	b.n	8189e <memset+0x22>

00081910 <setbuf>:
   81910:	2900      	cmp	r1, #0
   81912:	bf0c      	ite	eq
   81914:	2202      	moveq	r2, #2
   81916:	2200      	movne	r2, #0
   81918:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8191c:	f000 b800 	b.w	81920 <setvbuf>

00081920 <setvbuf>:
   81920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81924:	4d3c      	ldr	r5, [pc, #240]	; (81a18 <setvbuf+0xf8>)
   81926:	4604      	mov	r4, r0
   81928:	682d      	ldr	r5, [r5, #0]
   8192a:	4688      	mov	r8, r1
   8192c:	4616      	mov	r6, r2
   8192e:	461f      	mov	r7, r3
   81930:	b115      	cbz	r5, 81938 <setvbuf+0x18>
   81932:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81934:	2b00      	cmp	r3, #0
   81936:	d04f      	beq.n	819d8 <setvbuf+0xb8>
   81938:	2e02      	cmp	r6, #2
   8193a:	d830      	bhi.n	8199e <setvbuf+0x7e>
   8193c:	2f00      	cmp	r7, #0
   8193e:	db2e      	blt.n	8199e <setvbuf+0x7e>
   81940:	4628      	mov	r0, r5
   81942:	4621      	mov	r1, r4
   81944:	f001 f826 	bl	82994 <_fflush_r>
   81948:	89a3      	ldrh	r3, [r4, #12]
   8194a:	2200      	movs	r2, #0
   8194c:	6062      	str	r2, [r4, #4]
   8194e:	61a2      	str	r2, [r4, #24]
   81950:	061a      	lsls	r2, r3, #24
   81952:	d428      	bmi.n	819a6 <setvbuf+0x86>
   81954:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81958:	b29b      	uxth	r3, r3
   8195a:	2e02      	cmp	r6, #2
   8195c:	81a3      	strh	r3, [r4, #12]
   8195e:	d02d      	beq.n	819bc <setvbuf+0x9c>
   81960:	f1b8 0f00 	cmp.w	r8, #0
   81964:	d03c      	beq.n	819e0 <setvbuf+0xc0>
   81966:	2e01      	cmp	r6, #1
   81968:	d013      	beq.n	81992 <setvbuf+0x72>
   8196a:	b29b      	uxth	r3, r3
   8196c:	f003 0008 	and.w	r0, r3, #8
   81970:	4a2a      	ldr	r2, [pc, #168]	; (81a1c <setvbuf+0xfc>)
   81972:	b280      	uxth	r0, r0
   81974:	63ea      	str	r2, [r5, #60]	; 0x3c
   81976:	f8c4 8000 	str.w	r8, [r4]
   8197a:	f8c4 8010 	str.w	r8, [r4, #16]
   8197e:	6167      	str	r7, [r4, #20]
   81980:	b178      	cbz	r0, 819a2 <setvbuf+0x82>
   81982:	f013 0f03 	tst.w	r3, #3
   81986:	bf18      	it	ne
   81988:	2700      	movne	r7, #0
   8198a:	60a7      	str	r7, [r4, #8]
   8198c:	2000      	movs	r0, #0
   8198e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81992:	f043 0301 	orr.w	r3, r3, #1
   81996:	427a      	negs	r2, r7
   81998:	81a3      	strh	r3, [r4, #12]
   8199a:	61a2      	str	r2, [r4, #24]
   8199c:	e7e5      	b.n	8196a <setvbuf+0x4a>
   8199e:	f04f 30ff 	mov.w	r0, #4294967295
   819a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   819a6:	4628      	mov	r0, r5
   819a8:	6921      	ldr	r1, [r4, #16]
   819aa:	f001 f953 	bl	82c54 <_free_r>
   819ae:	89a3      	ldrh	r3, [r4, #12]
   819b0:	2e02      	cmp	r6, #2
   819b2:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   819b6:	b29b      	uxth	r3, r3
   819b8:	81a3      	strh	r3, [r4, #12]
   819ba:	d1d1      	bne.n	81960 <setvbuf+0x40>
   819bc:	2000      	movs	r0, #0
   819be:	f104 0243 	add.w	r2, r4, #67	; 0x43
   819c2:	f043 0302 	orr.w	r3, r3, #2
   819c6:	2500      	movs	r5, #0
   819c8:	2101      	movs	r1, #1
   819ca:	81a3      	strh	r3, [r4, #12]
   819cc:	60a5      	str	r5, [r4, #8]
   819ce:	6022      	str	r2, [r4, #0]
   819d0:	6122      	str	r2, [r4, #16]
   819d2:	6161      	str	r1, [r4, #20]
   819d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   819d8:	4628      	mov	r0, r5
   819da:	f000 fff7 	bl	829cc <__sinit>
   819de:	e7ab      	b.n	81938 <setvbuf+0x18>
   819e0:	2f00      	cmp	r7, #0
   819e2:	bf08      	it	eq
   819e4:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   819e8:	4638      	mov	r0, r7
   819ea:	f001 fc29 	bl	83240 <malloc>
   819ee:	4680      	mov	r8, r0
   819f0:	b128      	cbz	r0, 819fe <setvbuf+0xde>
   819f2:	89a3      	ldrh	r3, [r4, #12]
   819f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   819f8:	b29b      	uxth	r3, r3
   819fa:	81a3      	strh	r3, [r4, #12]
   819fc:	e7b3      	b.n	81966 <setvbuf+0x46>
   819fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81a02:	f001 fc1d 	bl	83240 <malloc>
   81a06:	4680      	mov	r8, r0
   81a08:	b918      	cbnz	r0, 81a12 <setvbuf+0xf2>
   81a0a:	89a3      	ldrh	r3, [r4, #12]
   81a0c:	f04f 30ff 	mov.w	r0, #4294967295
   81a10:	e7d5      	b.n	819be <setvbuf+0x9e>
   81a12:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81a16:	e7ec      	b.n	819f2 <setvbuf+0xd2>
   81a18:	20070570 	.word	0x20070570
   81a1c:	000829c1 	.word	0x000829c1

00081a20 <__sprint_r.part.0>:
   81a20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81a26:	049c      	lsls	r4, r3, #18
   81a28:	460e      	mov	r6, r1
   81a2a:	4680      	mov	r8, r0
   81a2c:	4691      	mov	r9, r2
   81a2e:	d52a      	bpl.n	81a86 <__sprint_r.part.0+0x66>
   81a30:	6893      	ldr	r3, [r2, #8]
   81a32:	6812      	ldr	r2, [r2, #0]
   81a34:	f102 0a08 	add.w	sl, r2, #8
   81a38:	b31b      	cbz	r3, 81a82 <__sprint_r.part.0+0x62>
   81a3a:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81a3e:	08bf      	lsrs	r7, r7, #2
   81a40:	d017      	beq.n	81a72 <__sprint_r.part.0+0x52>
   81a42:	3d04      	subs	r5, #4
   81a44:	2400      	movs	r4, #0
   81a46:	e001      	b.n	81a4c <__sprint_r.part.0+0x2c>
   81a48:	42a7      	cmp	r7, r4
   81a4a:	d010      	beq.n	81a6e <__sprint_r.part.0+0x4e>
   81a4c:	4640      	mov	r0, r8
   81a4e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81a52:	4632      	mov	r2, r6
   81a54:	f001 f850 	bl	82af8 <_fputwc_r>
   81a58:	1c43      	adds	r3, r0, #1
   81a5a:	f104 0401 	add.w	r4, r4, #1
   81a5e:	d1f3      	bne.n	81a48 <__sprint_r.part.0+0x28>
   81a60:	2300      	movs	r3, #0
   81a62:	f8c9 3008 	str.w	r3, [r9, #8]
   81a66:	f8c9 3004 	str.w	r3, [r9, #4]
   81a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81a6e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81a72:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81a76:	f8c9 3008 	str.w	r3, [r9, #8]
   81a7a:	f10a 0a08 	add.w	sl, sl, #8
   81a7e:	2b00      	cmp	r3, #0
   81a80:	d1db      	bne.n	81a3a <__sprint_r.part.0+0x1a>
   81a82:	2000      	movs	r0, #0
   81a84:	e7ec      	b.n	81a60 <__sprint_r.part.0+0x40>
   81a86:	f001 f9b1 	bl	82dec <__sfvwrite_r>
   81a8a:	2300      	movs	r3, #0
   81a8c:	f8c9 3008 	str.w	r3, [r9, #8]
   81a90:	f8c9 3004 	str.w	r3, [r9, #4]
   81a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081a98 <_vfiprintf_r>:
   81a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a9c:	b0b1      	sub	sp, #196	; 0xc4
   81a9e:	461c      	mov	r4, r3
   81aa0:	9102      	str	r1, [sp, #8]
   81aa2:	4690      	mov	r8, r2
   81aa4:	9308      	str	r3, [sp, #32]
   81aa6:	9006      	str	r0, [sp, #24]
   81aa8:	b118      	cbz	r0, 81ab2 <_vfiprintf_r+0x1a>
   81aaa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81aac:	2b00      	cmp	r3, #0
   81aae:	f000 80e8 	beq.w	81c82 <_vfiprintf_r+0x1ea>
   81ab2:	9d02      	ldr	r5, [sp, #8]
   81ab4:	89ab      	ldrh	r3, [r5, #12]
   81ab6:	b29a      	uxth	r2, r3
   81ab8:	0490      	lsls	r0, r2, #18
   81aba:	d407      	bmi.n	81acc <_vfiprintf_r+0x34>
   81abc:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81ac2:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81ac6:	81ab      	strh	r3, [r5, #12]
   81ac8:	b29a      	uxth	r2, r3
   81aca:	6669      	str	r1, [r5, #100]	; 0x64
   81acc:	0711      	lsls	r1, r2, #28
   81ace:	f140 80b7 	bpl.w	81c40 <_vfiprintf_r+0x1a8>
   81ad2:	f8dd b008 	ldr.w	fp, [sp, #8]
   81ad6:	f8db 3010 	ldr.w	r3, [fp, #16]
   81ada:	2b00      	cmp	r3, #0
   81adc:	f000 80b0 	beq.w	81c40 <_vfiprintf_r+0x1a8>
   81ae0:	f002 021a 	and.w	r2, r2, #26
   81ae4:	2a0a      	cmp	r2, #10
   81ae6:	f000 80b7 	beq.w	81c58 <_vfiprintf_r+0x1c0>
   81aea:	2300      	movs	r3, #0
   81aec:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81af0:	930a      	str	r3, [sp, #40]	; 0x28
   81af2:	9315      	str	r3, [sp, #84]	; 0x54
   81af4:	9314      	str	r3, [sp, #80]	; 0x50
   81af6:	9309      	str	r3, [sp, #36]	; 0x24
   81af8:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81afc:	464e      	mov	r6, r9
   81afe:	f898 3000 	ldrb.w	r3, [r8]
   81b02:	2b00      	cmp	r3, #0
   81b04:	f000 84c8 	beq.w	82498 <_vfiprintf_r+0xa00>
   81b08:	2b25      	cmp	r3, #37	; 0x25
   81b0a:	f000 84c5 	beq.w	82498 <_vfiprintf_r+0xa00>
   81b0e:	f108 0201 	add.w	r2, r8, #1
   81b12:	e001      	b.n	81b18 <_vfiprintf_r+0x80>
   81b14:	2b25      	cmp	r3, #37	; 0x25
   81b16:	d004      	beq.n	81b22 <_vfiprintf_r+0x8a>
   81b18:	7813      	ldrb	r3, [r2, #0]
   81b1a:	4614      	mov	r4, r2
   81b1c:	3201      	adds	r2, #1
   81b1e:	2b00      	cmp	r3, #0
   81b20:	d1f8      	bne.n	81b14 <_vfiprintf_r+0x7c>
   81b22:	ebc8 0504 	rsb	r5, r8, r4
   81b26:	b195      	cbz	r5, 81b4e <_vfiprintf_r+0xb6>
   81b28:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b2c:	3301      	adds	r3, #1
   81b2e:	442a      	add	r2, r5
   81b30:	2b07      	cmp	r3, #7
   81b32:	f8c6 8000 	str.w	r8, [r6]
   81b36:	6075      	str	r5, [r6, #4]
   81b38:	9215      	str	r2, [sp, #84]	; 0x54
   81b3a:	9314      	str	r3, [sp, #80]	; 0x50
   81b3c:	dd7b      	ble.n	81c36 <_vfiprintf_r+0x19e>
   81b3e:	2a00      	cmp	r2, #0
   81b40:	f040 84d5 	bne.w	824ee <_vfiprintf_r+0xa56>
   81b44:	9809      	ldr	r0, [sp, #36]	; 0x24
   81b46:	9214      	str	r2, [sp, #80]	; 0x50
   81b48:	4428      	add	r0, r5
   81b4a:	464e      	mov	r6, r9
   81b4c:	9009      	str	r0, [sp, #36]	; 0x24
   81b4e:	7823      	ldrb	r3, [r4, #0]
   81b50:	2b00      	cmp	r3, #0
   81b52:	f000 83ed 	beq.w	82330 <_vfiprintf_r+0x898>
   81b56:	2100      	movs	r1, #0
   81b58:	f04f 0200 	mov.w	r2, #0
   81b5c:	f04f 3cff 	mov.w	ip, #4294967295
   81b60:	7863      	ldrb	r3, [r4, #1]
   81b62:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   81b66:	9104      	str	r1, [sp, #16]
   81b68:	468a      	mov	sl, r1
   81b6a:	f104 0801 	add.w	r8, r4, #1
   81b6e:	4608      	mov	r0, r1
   81b70:	4665      	mov	r5, ip
   81b72:	f108 0801 	add.w	r8, r8, #1
   81b76:	f1a3 0220 	sub.w	r2, r3, #32
   81b7a:	2a58      	cmp	r2, #88	; 0x58
   81b7c:	f200 82d9 	bhi.w	82132 <_vfiprintf_r+0x69a>
   81b80:	e8df f012 	tbh	[pc, r2, lsl #1]
   81b84:	02d702cb 	.word	0x02d702cb
   81b88:	02d202d7 	.word	0x02d202d7
   81b8c:	02d702d7 	.word	0x02d702d7
   81b90:	02d702d7 	.word	0x02d702d7
   81b94:	02d702d7 	.word	0x02d702d7
   81b98:	028f0282 	.word	0x028f0282
   81b9c:	008402d7 	.word	0x008402d7
   81ba0:	02d70293 	.word	0x02d70293
   81ba4:	0196012b 	.word	0x0196012b
   81ba8:	01960196 	.word	0x01960196
   81bac:	01960196 	.word	0x01960196
   81bb0:	01960196 	.word	0x01960196
   81bb4:	01960196 	.word	0x01960196
   81bb8:	02d702d7 	.word	0x02d702d7
   81bbc:	02d702d7 	.word	0x02d702d7
   81bc0:	02d702d7 	.word	0x02d702d7
   81bc4:	02d702d7 	.word	0x02d702d7
   81bc8:	02d702d7 	.word	0x02d702d7
   81bcc:	02d70130 	.word	0x02d70130
   81bd0:	02d702d7 	.word	0x02d702d7
   81bd4:	02d702d7 	.word	0x02d702d7
   81bd8:	02d702d7 	.word	0x02d702d7
   81bdc:	02d702d7 	.word	0x02d702d7
   81be0:	017b02d7 	.word	0x017b02d7
   81be4:	02d702d7 	.word	0x02d702d7
   81be8:	02d702d7 	.word	0x02d702d7
   81bec:	01a402d7 	.word	0x01a402d7
   81bf0:	02d702d7 	.word	0x02d702d7
   81bf4:	02d701bf 	.word	0x02d701bf
   81bf8:	02d702d7 	.word	0x02d702d7
   81bfc:	02d702d7 	.word	0x02d702d7
   81c00:	02d702d7 	.word	0x02d702d7
   81c04:	02d702d7 	.word	0x02d702d7
   81c08:	01e402d7 	.word	0x01e402d7
   81c0c:	02d701fa 	.word	0x02d701fa
   81c10:	02d702d7 	.word	0x02d702d7
   81c14:	01fa0216 	.word	0x01fa0216
   81c18:	02d702d7 	.word	0x02d702d7
   81c1c:	02d7021b 	.word	0x02d7021b
   81c20:	00890228 	.word	0x00890228
   81c24:	027d0266 	.word	0x027d0266
   81c28:	023a02d7 	.word	0x023a02d7
   81c2c:	011902d7 	.word	0x011902d7
   81c30:	02d702d7 	.word	0x02d702d7
   81c34:	02af      	.short	0x02af
   81c36:	3608      	adds	r6, #8
   81c38:	9809      	ldr	r0, [sp, #36]	; 0x24
   81c3a:	4428      	add	r0, r5
   81c3c:	9009      	str	r0, [sp, #36]	; 0x24
   81c3e:	e786      	b.n	81b4e <_vfiprintf_r+0xb6>
   81c40:	9806      	ldr	r0, [sp, #24]
   81c42:	9902      	ldr	r1, [sp, #8]
   81c44:	f000 fd90 	bl	82768 <__swsetup_r>
   81c48:	b9b0      	cbnz	r0, 81c78 <_vfiprintf_r+0x1e0>
   81c4a:	9d02      	ldr	r5, [sp, #8]
   81c4c:	89aa      	ldrh	r2, [r5, #12]
   81c4e:	f002 021a 	and.w	r2, r2, #26
   81c52:	2a0a      	cmp	r2, #10
   81c54:	f47f af49 	bne.w	81aea <_vfiprintf_r+0x52>
   81c58:	f8dd b008 	ldr.w	fp, [sp, #8]
   81c5c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81c60:	2b00      	cmp	r3, #0
   81c62:	f6ff af42 	blt.w	81aea <_vfiprintf_r+0x52>
   81c66:	9806      	ldr	r0, [sp, #24]
   81c68:	4659      	mov	r1, fp
   81c6a:	4642      	mov	r2, r8
   81c6c:	4623      	mov	r3, r4
   81c6e:	f000 fd3d 	bl	826ec <__sbprintf>
   81c72:	b031      	add	sp, #196	; 0xc4
   81c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c78:	f04f 30ff 	mov.w	r0, #4294967295
   81c7c:	b031      	add	sp, #196	; 0xc4
   81c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c82:	f000 fea3 	bl	829cc <__sinit>
   81c86:	e714      	b.n	81ab2 <_vfiprintf_r+0x1a>
   81c88:	4240      	negs	r0, r0
   81c8a:	9308      	str	r3, [sp, #32]
   81c8c:	f04a 0a04 	orr.w	sl, sl, #4
   81c90:	f898 3000 	ldrb.w	r3, [r8]
   81c94:	e76d      	b.n	81b72 <_vfiprintf_r+0xda>
   81c96:	f01a 0320 	ands.w	r3, sl, #32
   81c9a:	9004      	str	r0, [sp, #16]
   81c9c:	46ac      	mov	ip, r5
   81c9e:	f000 80f4 	beq.w	81e8a <_vfiprintf_r+0x3f2>
   81ca2:	f8dd b020 	ldr.w	fp, [sp, #32]
   81ca6:	f10b 0307 	add.w	r3, fp, #7
   81caa:	f023 0307 	bic.w	r3, r3, #7
   81cae:	f103 0408 	add.w	r4, r3, #8
   81cb2:	9408      	str	r4, [sp, #32]
   81cb4:	e9d3 4500 	ldrd	r4, r5, [r3]
   81cb8:	2300      	movs	r3, #0
   81cba:	f04f 0000 	mov.w	r0, #0
   81cbe:	2100      	movs	r1, #0
   81cc0:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   81cc4:	f8cd c014 	str.w	ip, [sp, #20]
   81cc8:	9107      	str	r1, [sp, #28]
   81cca:	f1bc 0f00 	cmp.w	ip, #0
   81cce:	bfa8      	it	ge
   81cd0:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81cd4:	ea54 0205 	orrs.w	r2, r4, r5
   81cd8:	f040 80ad 	bne.w	81e36 <_vfiprintf_r+0x39e>
   81cdc:	f1bc 0f00 	cmp.w	ip, #0
   81ce0:	f040 80a9 	bne.w	81e36 <_vfiprintf_r+0x39e>
   81ce4:	2b00      	cmp	r3, #0
   81ce6:	f040 83c0 	bne.w	8246a <_vfiprintf_r+0x9d2>
   81cea:	f01a 0f01 	tst.w	sl, #1
   81cee:	f000 83bc 	beq.w	8246a <_vfiprintf_r+0x9d2>
   81cf2:	2330      	movs	r3, #48	; 0x30
   81cf4:	af30      	add	r7, sp, #192	; 0xc0
   81cf6:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81cfa:	ebc7 0409 	rsb	r4, r7, r9
   81cfe:	9405      	str	r4, [sp, #20]
   81d00:	f8dd b014 	ldr.w	fp, [sp, #20]
   81d04:	9c07      	ldr	r4, [sp, #28]
   81d06:	45e3      	cmp	fp, ip
   81d08:	bfb8      	it	lt
   81d0a:	46e3      	movlt	fp, ip
   81d0c:	f8cd b00c 	str.w	fp, [sp, #12]
   81d10:	b11c      	cbz	r4, 81d1a <_vfiprintf_r+0x282>
   81d12:	f10b 0b01 	add.w	fp, fp, #1
   81d16:	f8cd b00c 	str.w	fp, [sp, #12]
   81d1a:	f01a 0502 	ands.w	r5, sl, #2
   81d1e:	9507      	str	r5, [sp, #28]
   81d20:	d005      	beq.n	81d2e <_vfiprintf_r+0x296>
   81d22:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81d26:	f10b 0b02 	add.w	fp, fp, #2
   81d2a:	f8cd b00c 	str.w	fp, [sp, #12]
   81d2e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81d32:	930b      	str	r3, [sp, #44]	; 0x2c
   81d34:	f040 821b 	bne.w	8216e <_vfiprintf_r+0x6d6>
   81d38:	9d04      	ldr	r5, [sp, #16]
   81d3a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81d3e:	ebcb 0405 	rsb	r4, fp, r5
   81d42:	2c00      	cmp	r4, #0
   81d44:	f340 8213 	ble.w	8216e <_vfiprintf_r+0x6d6>
   81d48:	2c10      	cmp	r4, #16
   81d4a:	f340 8489 	ble.w	82660 <_vfiprintf_r+0xbc8>
   81d4e:	4dbe      	ldr	r5, [pc, #760]	; (82048 <_vfiprintf_r+0x5b0>)
   81d50:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d52:	462b      	mov	r3, r5
   81d54:	9814      	ldr	r0, [sp, #80]	; 0x50
   81d56:	4625      	mov	r5, r4
   81d58:	f04f 0b10 	mov.w	fp, #16
   81d5c:	4664      	mov	r4, ip
   81d5e:	46b4      	mov	ip, r6
   81d60:	461e      	mov	r6, r3
   81d62:	e006      	b.n	81d72 <_vfiprintf_r+0x2da>
   81d64:	1c83      	adds	r3, r0, #2
   81d66:	f10c 0c08 	add.w	ip, ip, #8
   81d6a:	4608      	mov	r0, r1
   81d6c:	3d10      	subs	r5, #16
   81d6e:	2d10      	cmp	r5, #16
   81d70:	dd11      	ble.n	81d96 <_vfiprintf_r+0x2fe>
   81d72:	1c41      	adds	r1, r0, #1
   81d74:	3210      	adds	r2, #16
   81d76:	2907      	cmp	r1, #7
   81d78:	9215      	str	r2, [sp, #84]	; 0x54
   81d7a:	e88c 0840 	stmia.w	ip, {r6, fp}
   81d7e:	9114      	str	r1, [sp, #80]	; 0x50
   81d80:	ddf0      	ble.n	81d64 <_vfiprintf_r+0x2cc>
   81d82:	2a00      	cmp	r2, #0
   81d84:	f040 81e6 	bne.w	82154 <_vfiprintf_r+0x6bc>
   81d88:	3d10      	subs	r5, #16
   81d8a:	2d10      	cmp	r5, #16
   81d8c:	f04f 0301 	mov.w	r3, #1
   81d90:	4610      	mov	r0, r2
   81d92:	46cc      	mov	ip, r9
   81d94:	dced      	bgt.n	81d72 <_vfiprintf_r+0x2da>
   81d96:	4631      	mov	r1, r6
   81d98:	4666      	mov	r6, ip
   81d9a:	46a4      	mov	ip, r4
   81d9c:	462c      	mov	r4, r5
   81d9e:	460d      	mov	r5, r1
   81da0:	4422      	add	r2, r4
   81da2:	2b07      	cmp	r3, #7
   81da4:	9215      	str	r2, [sp, #84]	; 0x54
   81da6:	6035      	str	r5, [r6, #0]
   81da8:	6074      	str	r4, [r6, #4]
   81daa:	9314      	str	r3, [sp, #80]	; 0x50
   81dac:	f300 836d 	bgt.w	8248a <_vfiprintf_r+0x9f2>
   81db0:	3608      	adds	r6, #8
   81db2:	1c59      	adds	r1, r3, #1
   81db4:	e1de      	b.n	82174 <_vfiprintf_r+0x6dc>
   81db6:	f01a 0f20 	tst.w	sl, #32
   81dba:	9004      	str	r0, [sp, #16]
   81dbc:	46ac      	mov	ip, r5
   81dbe:	f000 808d 	beq.w	81edc <_vfiprintf_r+0x444>
   81dc2:	9d08      	ldr	r5, [sp, #32]
   81dc4:	1deb      	adds	r3, r5, #7
   81dc6:	f023 0307 	bic.w	r3, r3, #7
   81dca:	f103 0b08 	add.w	fp, r3, #8
   81dce:	e9d3 4500 	ldrd	r4, r5, [r3]
   81dd2:	f8cd b020 	str.w	fp, [sp, #32]
   81dd6:	2301      	movs	r3, #1
   81dd8:	e76f      	b.n	81cba <_vfiprintf_r+0x222>
   81dda:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81dde:	f898 3000 	ldrb.w	r3, [r8]
   81de2:	e6c6      	b.n	81b72 <_vfiprintf_r+0xda>
   81de4:	f04a 0a10 	orr.w	sl, sl, #16
   81de8:	f01a 0f20 	tst.w	sl, #32
   81dec:	9004      	str	r0, [sp, #16]
   81dee:	46ac      	mov	ip, r5
   81df0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81df4:	f000 80c8 	beq.w	81f88 <_vfiprintf_r+0x4f0>
   81df8:	9c08      	ldr	r4, [sp, #32]
   81dfa:	1de1      	adds	r1, r4, #7
   81dfc:	f021 0107 	bic.w	r1, r1, #7
   81e00:	e9d1 2300 	ldrd	r2, r3, [r1]
   81e04:	3108      	adds	r1, #8
   81e06:	9108      	str	r1, [sp, #32]
   81e08:	4614      	mov	r4, r2
   81e0a:	461d      	mov	r5, r3
   81e0c:	2a00      	cmp	r2, #0
   81e0e:	f173 0b00 	sbcs.w	fp, r3, #0
   81e12:	f2c0 83ce 	blt.w	825b2 <_vfiprintf_r+0xb1a>
   81e16:	f1bc 0f00 	cmp.w	ip, #0
   81e1a:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81e1e:	bfa8      	it	ge
   81e20:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81e24:	ea54 0205 	orrs.w	r2, r4, r5
   81e28:	9007      	str	r0, [sp, #28]
   81e2a:	f8cd c014 	str.w	ip, [sp, #20]
   81e2e:	f04f 0301 	mov.w	r3, #1
   81e32:	f43f af53 	beq.w	81cdc <_vfiprintf_r+0x244>
   81e36:	2b01      	cmp	r3, #1
   81e38:	f000 8319 	beq.w	8246e <_vfiprintf_r+0x9d6>
   81e3c:	2b02      	cmp	r3, #2
   81e3e:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81e42:	f040 824c 	bne.w	822de <_vfiprintf_r+0x846>
   81e46:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81e4a:	4619      	mov	r1, r3
   81e4c:	f004 000f 	and.w	r0, r4, #15
   81e50:	0922      	lsrs	r2, r4, #4
   81e52:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81e56:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81e5a:	092b      	lsrs	r3, r5, #4
   81e5c:	7008      	strb	r0, [r1, #0]
   81e5e:	ea52 0003 	orrs.w	r0, r2, r3
   81e62:	460f      	mov	r7, r1
   81e64:	4614      	mov	r4, r2
   81e66:	461d      	mov	r5, r3
   81e68:	f101 31ff 	add.w	r1, r1, #4294967295
   81e6c:	d1ee      	bne.n	81e4c <_vfiprintf_r+0x3b4>
   81e6e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81e72:	ebc7 0309 	rsb	r3, r7, r9
   81e76:	9305      	str	r3, [sp, #20]
   81e78:	e742      	b.n	81d00 <_vfiprintf_r+0x268>
   81e7a:	f04a 0a10 	orr.w	sl, sl, #16
   81e7e:	f01a 0320 	ands.w	r3, sl, #32
   81e82:	9004      	str	r0, [sp, #16]
   81e84:	46ac      	mov	ip, r5
   81e86:	f47f af0c 	bne.w	81ca2 <_vfiprintf_r+0x20a>
   81e8a:	f01a 0210 	ands.w	r2, sl, #16
   81e8e:	f040 8311 	bne.w	824b4 <_vfiprintf_r+0xa1c>
   81e92:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   81e96:	f000 830d 	beq.w	824b4 <_vfiprintf_r+0xa1c>
   81e9a:	f8dd b020 	ldr.w	fp, [sp, #32]
   81e9e:	4613      	mov	r3, r2
   81ea0:	f8bb 4000 	ldrh.w	r4, [fp]
   81ea4:	f10b 0b04 	add.w	fp, fp, #4
   81ea8:	2500      	movs	r5, #0
   81eaa:	f8cd b020 	str.w	fp, [sp, #32]
   81eae:	e704      	b.n	81cba <_vfiprintf_r+0x222>
   81eb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81eb4:	2000      	movs	r0, #0
   81eb6:	f818 3b01 	ldrb.w	r3, [r8], #1
   81eba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81ebe:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81ec2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81ec6:	2a09      	cmp	r2, #9
   81ec8:	d9f5      	bls.n	81eb6 <_vfiprintf_r+0x41e>
   81eca:	e654      	b.n	81b76 <_vfiprintf_r+0xde>
   81ecc:	f04a 0a10 	orr.w	sl, sl, #16
   81ed0:	f01a 0f20 	tst.w	sl, #32
   81ed4:	9004      	str	r0, [sp, #16]
   81ed6:	46ac      	mov	ip, r5
   81ed8:	f47f af73 	bne.w	81dc2 <_vfiprintf_r+0x32a>
   81edc:	f01a 0f10 	tst.w	sl, #16
   81ee0:	f040 82ef 	bne.w	824c2 <_vfiprintf_r+0xa2a>
   81ee4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81ee8:	f000 82eb 	beq.w	824c2 <_vfiprintf_r+0xa2a>
   81eec:	f8dd b020 	ldr.w	fp, [sp, #32]
   81ef0:	2500      	movs	r5, #0
   81ef2:	f8bb 4000 	ldrh.w	r4, [fp]
   81ef6:	f10b 0b04 	add.w	fp, fp, #4
   81efa:	2301      	movs	r3, #1
   81efc:	f8cd b020 	str.w	fp, [sp, #32]
   81f00:	e6db      	b.n	81cba <_vfiprintf_r+0x222>
   81f02:	46ac      	mov	ip, r5
   81f04:	4d51      	ldr	r5, [pc, #324]	; (8204c <_vfiprintf_r+0x5b4>)
   81f06:	f01a 0f20 	tst.w	sl, #32
   81f0a:	9004      	str	r0, [sp, #16]
   81f0c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81f10:	950a      	str	r5, [sp, #40]	; 0x28
   81f12:	f000 80f0 	beq.w	820f6 <_vfiprintf_r+0x65e>
   81f16:	9d08      	ldr	r5, [sp, #32]
   81f18:	1dea      	adds	r2, r5, #7
   81f1a:	f022 0207 	bic.w	r2, r2, #7
   81f1e:	f102 0b08 	add.w	fp, r2, #8
   81f22:	f8cd b020 	str.w	fp, [sp, #32]
   81f26:	e9d2 4500 	ldrd	r4, r5, [r2]
   81f2a:	f01a 0f01 	tst.w	sl, #1
   81f2e:	f000 82aa 	beq.w	82486 <_vfiprintf_r+0x9ee>
   81f32:	ea54 0b05 	orrs.w	fp, r4, r5
   81f36:	f000 82a6 	beq.w	82486 <_vfiprintf_r+0x9ee>
   81f3a:	2230      	movs	r2, #48	; 0x30
   81f3c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81f40:	f04a 0a02 	orr.w	sl, sl, #2
   81f44:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81f48:	2302      	movs	r3, #2
   81f4a:	e6b6      	b.n	81cba <_vfiprintf_r+0x222>
   81f4c:	9b08      	ldr	r3, [sp, #32]
   81f4e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81f52:	681b      	ldr	r3, [r3, #0]
   81f54:	2401      	movs	r4, #1
   81f56:	f04f 0500 	mov.w	r5, #0
   81f5a:	f10b 0b04 	add.w	fp, fp, #4
   81f5e:	9004      	str	r0, [sp, #16]
   81f60:	9403      	str	r4, [sp, #12]
   81f62:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81f66:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81f6a:	f8cd b020 	str.w	fp, [sp, #32]
   81f6e:	9405      	str	r4, [sp, #20]
   81f70:	af16      	add	r7, sp, #88	; 0x58
   81f72:	f04f 0c00 	mov.w	ip, #0
   81f76:	e6d0      	b.n	81d1a <_vfiprintf_r+0x282>
   81f78:	f01a 0f20 	tst.w	sl, #32
   81f7c:	9004      	str	r0, [sp, #16]
   81f7e:	46ac      	mov	ip, r5
   81f80:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81f84:	f47f af38 	bne.w	81df8 <_vfiprintf_r+0x360>
   81f88:	f01a 0f10 	tst.w	sl, #16
   81f8c:	f040 82a7 	bne.w	824de <_vfiprintf_r+0xa46>
   81f90:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81f94:	f000 82a3 	beq.w	824de <_vfiprintf_r+0xa46>
   81f98:	f8dd b020 	ldr.w	fp, [sp, #32]
   81f9c:	f9bb 4000 	ldrsh.w	r4, [fp]
   81fa0:	f10b 0b04 	add.w	fp, fp, #4
   81fa4:	17e5      	asrs	r5, r4, #31
   81fa6:	4622      	mov	r2, r4
   81fa8:	462b      	mov	r3, r5
   81faa:	f8cd b020 	str.w	fp, [sp, #32]
   81fae:	e72d      	b.n	81e0c <_vfiprintf_r+0x374>
   81fb0:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81fb4:	f898 3000 	ldrb.w	r3, [r8]
   81fb8:	e5db      	b.n	81b72 <_vfiprintf_r+0xda>
   81fba:	f898 3000 	ldrb.w	r3, [r8]
   81fbe:	4642      	mov	r2, r8
   81fc0:	2b6c      	cmp	r3, #108	; 0x6c
   81fc2:	bf03      	ittte	eq
   81fc4:	f108 0801 	addeq.w	r8, r8, #1
   81fc8:	f04a 0a20 	orreq.w	sl, sl, #32
   81fcc:	7853      	ldrbeq	r3, [r2, #1]
   81fce:	f04a 0a10 	orrne.w	sl, sl, #16
   81fd2:	e5ce      	b.n	81b72 <_vfiprintf_r+0xda>
   81fd4:	f01a 0f20 	tst.w	sl, #32
   81fd8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81fdc:	f000 82f7 	beq.w	825ce <_vfiprintf_r+0xb36>
   81fe0:	9c08      	ldr	r4, [sp, #32]
   81fe2:	6821      	ldr	r1, [r4, #0]
   81fe4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81fe6:	17e5      	asrs	r5, r4, #31
   81fe8:	462b      	mov	r3, r5
   81fea:	9d08      	ldr	r5, [sp, #32]
   81fec:	4622      	mov	r2, r4
   81fee:	3504      	adds	r5, #4
   81ff0:	9508      	str	r5, [sp, #32]
   81ff2:	e9c1 2300 	strd	r2, r3, [r1]
   81ff6:	e582      	b.n	81afe <_vfiprintf_r+0x66>
   81ff8:	9c08      	ldr	r4, [sp, #32]
   81ffa:	46ac      	mov	ip, r5
   81ffc:	6827      	ldr	r7, [r4, #0]
   81ffe:	f04f 0500 	mov.w	r5, #0
   82002:	9004      	str	r0, [sp, #16]
   82004:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82008:	3404      	adds	r4, #4
   8200a:	2f00      	cmp	r7, #0
   8200c:	f000 8332 	beq.w	82674 <_vfiprintf_r+0xbdc>
   82010:	f1bc 0f00 	cmp.w	ip, #0
   82014:	4638      	mov	r0, r7
   82016:	f2c0 8307 	blt.w	82628 <_vfiprintf_r+0xb90>
   8201a:	4662      	mov	r2, ip
   8201c:	2100      	movs	r1, #0
   8201e:	f8cd c004 	str.w	ip, [sp, #4]
   82022:	f001 fbb1 	bl	83788 <memchr>
   82026:	f8dd c004 	ldr.w	ip, [sp, #4]
   8202a:	2800      	cmp	r0, #0
   8202c:	f000 833a 	beq.w	826a4 <_vfiprintf_r+0xc0c>
   82030:	1bc0      	subs	r0, r0, r7
   82032:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82036:	4560      	cmp	r0, ip
   82038:	bfa8      	it	ge
   8203a:	4660      	movge	r0, ip
   8203c:	9005      	str	r0, [sp, #20]
   8203e:	9408      	str	r4, [sp, #32]
   82040:	9507      	str	r5, [sp, #28]
   82042:	f04f 0c00 	mov.w	ip, #0
   82046:	e65b      	b.n	81d00 <_vfiprintf_r+0x268>
   82048:	00084838 	.word	0x00084838
   8204c:	000847f8 	.word	0x000847f8
   82050:	9b08      	ldr	r3, [sp, #32]
   82052:	f8dd b020 	ldr.w	fp, [sp, #32]
   82056:	9004      	str	r0, [sp, #16]
   82058:	48b2      	ldr	r0, [pc, #712]	; (82324 <_vfiprintf_r+0x88c>)
   8205a:	681c      	ldr	r4, [r3, #0]
   8205c:	2230      	movs	r2, #48	; 0x30
   8205e:	2378      	movs	r3, #120	; 0x78
   82060:	f10b 0b04 	add.w	fp, fp, #4
   82064:	46ac      	mov	ip, r5
   82066:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8206a:	f04a 0a02 	orr.w	sl, sl, #2
   8206e:	f8cd b020 	str.w	fp, [sp, #32]
   82072:	2500      	movs	r5, #0
   82074:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82078:	900a      	str	r0, [sp, #40]	; 0x28
   8207a:	2302      	movs	r3, #2
   8207c:	e61d      	b.n	81cba <_vfiprintf_r+0x222>
   8207e:	f04a 0a20 	orr.w	sl, sl, #32
   82082:	f898 3000 	ldrb.w	r3, [r8]
   82086:	e574      	b.n	81b72 <_vfiprintf_r+0xda>
   82088:	f8dd b020 	ldr.w	fp, [sp, #32]
   8208c:	f8db 0000 	ldr.w	r0, [fp]
   82090:	f10b 0304 	add.w	r3, fp, #4
   82094:	2800      	cmp	r0, #0
   82096:	f6ff adf7 	blt.w	81c88 <_vfiprintf_r+0x1f0>
   8209a:	9308      	str	r3, [sp, #32]
   8209c:	f898 3000 	ldrb.w	r3, [r8]
   820a0:	e567      	b.n	81b72 <_vfiprintf_r+0xda>
   820a2:	f898 3000 	ldrb.w	r3, [r8]
   820a6:	212b      	movs	r1, #43	; 0x2b
   820a8:	e563      	b.n	81b72 <_vfiprintf_r+0xda>
   820aa:	f898 3000 	ldrb.w	r3, [r8]
   820ae:	f108 0401 	add.w	r4, r8, #1
   820b2:	2b2a      	cmp	r3, #42	; 0x2a
   820b4:	f000 8305 	beq.w	826c2 <_vfiprintf_r+0xc2a>
   820b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   820bc:	2a09      	cmp	r2, #9
   820be:	bf98      	it	ls
   820c0:	2500      	movls	r5, #0
   820c2:	f200 82fa 	bhi.w	826ba <_vfiprintf_r+0xc22>
   820c6:	f814 3b01 	ldrb.w	r3, [r4], #1
   820ca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   820ce:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   820d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   820d6:	2a09      	cmp	r2, #9
   820d8:	d9f5      	bls.n	820c6 <_vfiprintf_r+0x62e>
   820da:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   820de:	46a0      	mov	r8, r4
   820e0:	e549      	b.n	81b76 <_vfiprintf_r+0xde>
   820e2:	4c90      	ldr	r4, [pc, #576]	; (82324 <_vfiprintf_r+0x88c>)
   820e4:	f01a 0f20 	tst.w	sl, #32
   820e8:	9004      	str	r0, [sp, #16]
   820ea:	46ac      	mov	ip, r5
   820ec:	940a      	str	r4, [sp, #40]	; 0x28
   820ee:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   820f2:	f47f af10 	bne.w	81f16 <_vfiprintf_r+0x47e>
   820f6:	f01a 0f10 	tst.w	sl, #16
   820fa:	f040 81ea 	bne.w	824d2 <_vfiprintf_r+0xa3a>
   820fe:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82102:	f000 81e6 	beq.w	824d2 <_vfiprintf_r+0xa3a>
   82106:	f8dd b020 	ldr.w	fp, [sp, #32]
   8210a:	2500      	movs	r5, #0
   8210c:	f8bb 4000 	ldrh.w	r4, [fp]
   82110:	f10b 0b04 	add.w	fp, fp, #4
   82114:	f8cd b020 	str.w	fp, [sp, #32]
   82118:	e707      	b.n	81f2a <_vfiprintf_r+0x492>
   8211a:	f898 3000 	ldrb.w	r3, [r8]
   8211e:	2900      	cmp	r1, #0
   82120:	f47f ad27 	bne.w	81b72 <_vfiprintf_r+0xda>
   82124:	2120      	movs	r1, #32
   82126:	e524      	b.n	81b72 <_vfiprintf_r+0xda>
   82128:	f04a 0a01 	orr.w	sl, sl, #1
   8212c:	f898 3000 	ldrb.w	r3, [r8]
   82130:	e51f      	b.n	81b72 <_vfiprintf_r+0xda>
   82132:	9004      	str	r0, [sp, #16]
   82134:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82138:	2b00      	cmp	r3, #0
   8213a:	f000 80f9 	beq.w	82330 <_vfiprintf_r+0x898>
   8213e:	2501      	movs	r5, #1
   82140:	f04f 0b00 	mov.w	fp, #0
   82144:	9503      	str	r5, [sp, #12]
   82146:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8214a:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   8214e:	9505      	str	r5, [sp, #20]
   82150:	af16      	add	r7, sp, #88	; 0x58
   82152:	e70e      	b.n	81f72 <_vfiprintf_r+0x4da>
   82154:	9806      	ldr	r0, [sp, #24]
   82156:	9902      	ldr	r1, [sp, #8]
   82158:	aa13      	add	r2, sp, #76	; 0x4c
   8215a:	f7ff fc61 	bl	81a20 <__sprint_r.part.0>
   8215e:	2800      	cmp	r0, #0
   82160:	f040 80ed 	bne.w	8233e <_vfiprintf_r+0x8a6>
   82164:	9814      	ldr	r0, [sp, #80]	; 0x50
   82166:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82168:	1c43      	adds	r3, r0, #1
   8216a:	46cc      	mov	ip, r9
   8216c:	e5fe      	b.n	81d6c <_vfiprintf_r+0x2d4>
   8216e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82170:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82172:	1c59      	adds	r1, r3, #1
   82174:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   82178:	b168      	cbz	r0, 82196 <_vfiprintf_r+0x6fe>
   8217a:	3201      	adds	r2, #1
   8217c:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   82180:	2301      	movs	r3, #1
   82182:	2907      	cmp	r1, #7
   82184:	9215      	str	r2, [sp, #84]	; 0x54
   82186:	9114      	str	r1, [sp, #80]	; 0x50
   82188:	e886 0009 	stmia.w	r6, {r0, r3}
   8218c:	f300 8160 	bgt.w	82450 <_vfiprintf_r+0x9b8>
   82190:	460b      	mov	r3, r1
   82192:	3608      	adds	r6, #8
   82194:	3101      	adds	r1, #1
   82196:	9c07      	ldr	r4, [sp, #28]
   82198:	b164      	cbz	r4, 821b4 <_vfiprintf_r+0x71c>
   8219a:	3202      	adds	r2, #2
   8219c:	a812      	add	r0, sp, #72	; 0x48
   8219e:	2302      	movs	r3, #2
   821a0:	2907      	cmp	r1, #7
   821a2:	9215      	str	r2, [sp, #84]	; 0x54
   821a4:	9114      	str	r1, [sp, #80]	; 0x50
   821a6:	e886 0009 	stmia.w	r6, {r0, r3}
   821aa:	f300 8157 	bgt.w	8245c <_vfiprintf_r+0x9c4>
   821ae:	460b      	mov	r3, r1
   821b0:	3608      	adds	r6, #8
   821b2:	3101      	adds	r1, #1
   821b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   821b6:	2d80      	cmp	r5, #128	; 0x80
   821b8:	f000 8101 	beq.w	823be <_vfiprintf_r+0x926>
   821bc:	9d05      	ldr	r5, [sp, #20]
   821be:	ebc5 040c 	rsb	r4, r5, ip
   821c2:	2c00      	cmp	r4, #0
   821c4:	dd2f      	ble.n	82226 <_vfiprintf_r+0x78e>
   821c6:	2c10      	cmp	r4, #16
   821c8:	4d57      	ldr	r5, [pc, #348]	; (82328 <_vfiprintf_r+0x890>)
   821ca:	dd22      	ble.n	82212 <_vfiprintf_r+0x77a>
   821cc:	4630      	mov	r0, r6
   821ce:	f04f 0b10 	mov.w	fp, #16
   821d2:	462e      	mov	r6, r5
   821d4:	4625      	mov	r5, r4
   821d6:	9c06      	ldr	r4, [sp, #24]
   821d8:	e006      	b.n	821e8 <_vfiprintf_r+0x750>
   821da:	f103 0c02 	add.w	ip, r3, #2
   821de:	3008      	adds	r0, #8
   821e0:	460b      	mov	r3, r1
   821e2:	3d10      	subs	r5, #16
   821e4:	2d10      	cmp	r5, #16
   821e6:	dd10      	ble.n	8220a <_vfiprintf_r+0x772>
   821e8:	1c59      	adds	r1, r3, #1
   821ea:	3210      	adds	r2, #16
   821ec:	2907      	cmp	r1, #7
   821ee:	9215      	str	r2, [sp, #84]	; 0x54
   821f0:	e880 0840 	stmia.w	r0, {r6, fp}
   821f4:	9114      	str	r1, [sp, #80]	; 0x50
   821f6:	ddf0      	ble.n	821da <_vfiprintf_r+0x742>
   821f8:	2a00      	cmp	r2, #0
   821fa:	d163      	bne.n	822c4 <_vfiprintf_r+0x82c>
   821fc:	3d10      	subs	r5, #16
   821fe:	2d10      	cmp	r5, #16
   82200:	f04f 0c01 	mov.w	ip, #1
   82204:	4613      	mov	r3, r2
   82206:	4648      	mov	r0, r9
   82208:	dcee      	bgt.n	821e8 <_vfiprintf_r+0x750>
   8220a:	462c      	mov	r4, r5
   8220c:	4661      	mov	r1, ip
   8220e:	4635      	mov	r5, r6
   82210:	4606      	mov	r6, r0
   82212:	4422      	add	r2, r4
   82214:	2907      	cmp	r1, #7
   82216:	9215      	str	r2, [sp, #84]	; 0x54
   82218:	6035      	str	r5, [r6, #0]
   8221a:	6074      	str	r4, [r6, #4]
   8221c:	9114      	str	r1, [sp, #80]	; 0x50
   8221e:	f300 80c1 	bgt.w	823a4 <_vfiprintf_r+0x90c>
   82222:	3608      	adds	r6, #8
   82224:	3101      	adds	r1, #1
   82226:	9d05      	ldr	r5, [sp, #20]
   82228:	2907      	cmp	r1, #7
   8222a:	442a      	add	r2, r5
   8222c:	9215      	str	r2, [sp, #84]	; 0x54
   8222e:	6037      	str	r7, [r6, #0]
   82230:	6075      	str	r5, [r6, #4]
   82232:	9114      	str	r1, [sp, #80]	; 0x50
   82234:	f340 80c1 	ble.w	823ba <_vfiprintf_r+0x922>
   82238:	2a00      	cmp	r2, #0
   8223a:	f040 8130 	bne.w	8249e <_vfiprintf_r+0xa06>
   8223e:	9214      	str	r2, [sp, #80]	; 0x50
   82240:	464e      	mov	r6, r9
   82242:	f01a 0f04 	tst.w	sl, #4
   82246:	f000 808b 	beq.w	82360 <_vfiprintf_r+0x8c8>
   8224a:	9d04      	ldr	r5, [sp, #16]
   8224c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82250:	ebcb 0405 	rsb	r4, fp, r5
   82254:	2c00      	cmp	r4, #0
   82256:	f340 8083 	ble.w	82360 <_vfiprintf_r+0x8c8>
   8225a:	2c10      	cmp	r4, #16
   8225c:	f340 821e 	ble.w	8269c <_vfiprintf_r+0xc04>
   82260:	9914      	ldr	r1, [sp, #80]	; 0x50
   82262:	4d32      	ldr	r5, [pc, #200]	; (8232c <_vfiprintf_r+0x894>)
   82264:	2710      	movs	r7, #16
   82266:	f8dd a018 	ldr.w	sl, [sp, #24]
   8226a:	f8dd b008 	ldr.w	fp, [sp, #8]
   8226e:	e005      	b.n	8227c <_vfiprintf_r+0x7e4>
   82270:	1c88      	adds	r0, r1, #2
   82272:	3608      	adds	r6, #8
   82274:	4619      	mov	r1, r3
   82276:	3c10      	subs	r4, #16
   82278:	2c10      	cmp	r4, #16
   8227a:	dd10      	ble.n	8229e <_vfiprintf_r+0x806>
   8227c:	1c4b      	adds	r3, r1, #1
   8227e:	3210      	adds	r2, #16
   82280:	2b07      	cmp	r3, #7
   82282:	9215      	str	r2, [sp, #84]	; 0x54
   82284:	e886 00a0 	stmia.w	r6, {r5, r7}
   82288:	9314      	str	r3, [sp, #80]	; 0x50
   8228a:	ddf1      	ble.n	82270 <_vfiprintf_r+0x7d8>
   8228c:	2a00      	cmp	r2, #0
   8228e:	d17d      	bne.n	8238c <_vfiprintf_r+0x8f4>
   82290:	3c10      	subs	r4, #16
   82292:	2c10      	cmp	r4, #16
   82294:	f04f 0001 	mov.w	r0, #1
   82298:	4611      	mov	r1, r2
   8229a:	464e      	mov	r6, r9
   8229c:	dcee      	bgt.n	8227c <_vfiprintf_r+0x7e4>
   8229e:	4422      	add	r2, r4
   822a0:	2807      	cmp	r0, #7
   822a2:	9215      	str	r2, [sp, #84]	; 0x54
   822a4:	6035      	str	r5, [r6, #0]
   822a6:	6074      	str	r4, [r6, #4]
   822a8:	9014      	str	r0, [sp, #80]	; 0x50
   822aa:	dd59      	ble.n	82360 <_vfiprintf_r+0x8c8>
   822ac:	2a00      	cmp	r2, #0
   822ae:	d14f      	bne.n	82350 <_vfiprintf_r+0x8b8>
   822b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   822b2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   822b6:	9d04      	ldr	r5, [sp, #16]
   822b8:	45ab      	cmp	fp, r5
   822ba:	bfac      	ite	ge
   822bc:	445c      	addge	r4, fp
   822be:	1964      	addlt	r4, r4, r5
   822c0:	9409      	str	r4, [sp, #36]	; 0x24
   822c2:	e05e      	b.n	82382 <_vfiprintf_r+0x8ea>
   822c4:	4620      	mov	r0, r4
   822c6:	9902      	ldr	r1, [sp, #8]
   822c8:	aa13      	add	r2, sp, #76	; 0x4c
   822ca:	f7ff fba9 	bl	81a20 <__sprint_r.part.0>
   822ce:	2800      	cmp	r0, #0
   822d0:	d135      	bne.n	8233e <_vfiprintf_r+0x8a6>
   822d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   822d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   822d6:	f103 0c01 	add.w	ip, r3, #1
   822da:	4648      	mov	r0, r9
   822dc:	e781      	b.n	821e2 <_vfiprintf_r+0x74a>
   822de:	08e0      	lsrs	r0, r4, #3
   822e0:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   822e4:	f004 0207 	and.w	r2, r4, #7
   822e8:	08e9      	lsrs	r1, r5, #3
   822ea:	3230      	adds	r2, #48	; 0x30
   822ec:	ea50 0b01 	orrs.w	fp, r0, r1
   822f0:	461f      	mov	r7, r3
   822f2:	701a      	strb	r2, [r3, #0]
   822f4:	4604      	mov	r4, r0
   822f6:	460d      	mov	r5, r1
   822f8:	f103 33ff 	add.w	r3, r3, #4294967295
   822fc:	d1ef      	bne.n	822de <_vfiprintf_r+0x846>
   822fe:	f01a 0f01 	tst.w	sl, #1
   82302:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   82306:	4639      	mov	r1, r7
   82308:	f000 80b9 	beq.w	8247e <_vfiprintf_r+0x9e6>
   8230c:	2a30      	cmp	r2, #48	; 0x30
   8230e:	f43f acf4 	beq.w	81cfa <_vfiprintf_r+0x262>
   82312:	461f      	mov	r7, r3
   82314:	ebc7 0509 	rsb	r5, r7, r9
   82318:	2330      	movs	r3, #48	; 0x30
   8231a:	9505      	str	r5, [sp, #20]
   8231c:	f801 3c01 	strb.w	r3, [r1, #-1]
   82320:	e4ee      	b.n	81d00 <_vfiprintf_r+0x268>
   82322:	bf00      	nop
   82324:	0008480c 	.word	0x0008480c
   82328:	00084828 	.word	0x00084828
   8232c:	00084838 	.word	0x00084838
   82330:	9b15      	ldr	r3, [sp, #84]	; 0x54
   82332:	b123      	cbz	r3, 8233e <_vfiprintf_r+0x8a6>
   82334:	9806      	ldr	r0, [sp, #24]
   82336:	9902      	ldr	r1, [sp, #8]
   82338:	aa13      	add	r2, sp, #76	; 0x4c
   8233a:	f7ff fb71 	bl	81a20 <__sprint_r.part.0>
   8233e:	9c02      	ldr	r4, [sp, #8]
   82340:	89a3      	ldrh	r3, [r4, #12]
   82342:	065b      	lsls	r3, r3, #25
   82344:	f53f ac98 	bmi.w	81c78 <_vfiprintf_r+0x1e0>
   82348:	9809      	ldr	r0, [sp, #36]	; 0x24
   8234a:	b031      	add	sp, #196	; 0xc4
   8234c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82350:	9806      	ldr	r0, [sp, #24]
   82352:	9902      	ldr	r1, [sp, #8]
   82354:	aa13      	add	r2, sp, #76	; 0x4c
   82356:	f7ff fb63 	bl	81a20 <__sprint_r.part.0>
   8235a:	2800      	cmp	r0, #0
   8235c:	d1ef      	bne.n	8233e <_vfiprintf_r+0x8a6>
   8235e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82360:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82362:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82366:	9d04      	ldr	r5, [sp, #16]
   82368:	45ab      	cmp	fp, r5
   8236a:	bfac      	ite	ge
   8236c:	445c      	addge	r4, fp
   8236e:	1964      	addlt	r4, r4, r5
   82370:	9409      	str	r4, [sp, #36]	; 0x24
   82372:	b132      	cbz	r2, 82382 <_vfiprintf_r+0x8ea>
   82374:	9806      	ldr	r0, [sp, #24]
   82376:	9902      	ldr	r1, [sp, #8]
   82378:	aa13      	add	r2, sp, #76	; 0x4c
   8237a:	f7ff fb51 	bl	81a20 <__sprint_r.part.0>
   8237e:	2800      	cmp	r0, #0
   82380:	d1dd      	bne.n	8233e <_vfiprintf_r+0x8a6>
   82382:	2000      	movs	r0, #0
   82384:	9014      	str	r0, [sp, #80]	; 0x50
   82386:	464e      	mov	r6, r9
   82388:	f7ff bbb9 	b.w	81afe <_vfiprintf_r+0x66>
   8238c:	4650      	mov	r0, sl
   8238e:	4659      	mov	r1, fp
   82390:	aa13      	add	r2, sp, #76	; 0x4c
   82392:	f7ff fb45 	bl	81a20 <__sprint_r.part.0>
   82396:	2800      	cmp	r0, #0
   82398:	d1d1      	bne.n	8233e <_vfiprintf_r+0x8a6>
   8239a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8239c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8239e:	1c48      	adds	r0, r1, #1
   823a0:	464e      	mov	r6, r9
   823a2:	e768      	b.n	82276 <_vfiprintf_r+0x7de>
   823a4:	2a00      	cmp	r2, #0
   823a6:	f040 80f7 	bne.w	82598 <_vfiprintf_r+0xb00>
   823aa:	9c05      	ldr	r4, [sp, #20]
   823ac:	2301      	movs	r3, #1
   823ae:	9720      	str	r7, [sp, #128]	; 0x80
   823b0:	9421      	str	r4, [sp, #132]	; 0x84
   823b2:	9415      	str	r4, [sp, #84]	; 0x54
   823b4:	4622      	mov	r2, r4
   823b6:	9314      	str	r3, [sp, #80]	; 0x50
   823b8:	464e      	mov	r6, r9
   823ba:	3608      	adds	r6, #8
   823bc:	e741      	b.n	82242 <_vfiprintf_r+0x7aa>
   823be:	9d04      	ldr	r5, [sp, #16]
   823c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   823c4:	ebcb 0405 	rsb	r4, fp, r5
   823c8:	2c00      	cmp	r4, #0
   823ca:	f77f aef7 	ble.w	821bc <_vfiprintf_r+0x724>
   823ce:	2c10      	cmp	r4, #16
   823d0:	4da6      	ldr	r5, [pc, #664]	; (8266c <_vfiprintf_r+0xbd4>)
   823d2:	f340 8170 	ble.w	826b6 <_vfiprintf_r+0xc1e>
   823d6:	4629      	mov	r1, r5
   823d8:	f04f 0b10 	mov.w	fp, #16
   823dc:	4625      	mov	r5, r4
   823de:	4664      	mov	r4, ip
   823e0:	46b4      	mov	ip, r6
   823e2:	460e      	mov	r6, r1
   823e4:	e006      	b.n	823f4 <_vfiprintf_r+0x95c>
   823e6:	1c98      	adds	r0, r3, #2
   823e8:	f10c 0c08 	add.w	ip, ip, #8
   823ec:	460b      	mov	r3, r1
   823ee:	3d10      	subs	r5, #16
   823f0:	2d10      	cmp	r5, #16
   823f2:	dd0f      	ble.n	82414 <_vfiprintf_r+0x97c>
   823f4:	1c59      	adds	r1, r3, #1
   823f6:	3210      	adds	r2, #16
   823f8:	2907      	cmp	r1, #7
   823fa:	9215      	str	r2, [sp, #84]	; 0x54
   823fc:	e88c 0840 	stmia.w	ip, {r6, fp}
   82400:	9114      	str	r1, [sp, #80]	; 0x50
   82402:	ddf0      	ble.n	823e6 <_vfiprintf_r+0x94e>
   82404:	b9ba      	cbnz	r2, 82436 <_vfiprintf_r+0x99e>
   82406:	3d10      	subs	r5, #16
   82408:	2d10      	cmp	r5, #16
   8240a:	f04f 0001 	mov.w	r0, #1
   8240e:	4613      	mov	r3, r2
   82410:	46cc      	mov	ip, r9
   82412:	dcef      	bgt.n	823f4 <_vfiprintf_r+0x95c>
   82414:	4633      	mov	r3, r6
   82416:	4666      	mov	r6, ip
   82418:	46a4      	mov	ip, r4
   8241a:	462c      	mov	r4, r5
   8241c:	461d      	mov	r5, r3
   8241e:	4422      	add	r2, r4
   82420:	2807      	cmp	r0, #7
   82422:	9215      	str	r2, [sp, #84]	; 0x54
   82424:	6035      	str	r5, [r6, #0]
   82426:	6074      	str	r4, [r6, #4]
   82428:	9014      	str	r0, [sp, #80]	; 0x50
   8242a:	f300 80af 	bgt.w	8258c <_vfiprintf_r+0xaf4>
   8242e:	3608      	adds	r6, #8
   82430:	1c41      	adds	r1, r0, #1
   82432:	4603      	mov	r3, r0
   82434:	e6c2      	b.n	821bc <_vfiprintf_r+0x724>
   82436:	9806      	ldr	r0, [sp, #24]
   82438:	9902      	ldr	r1, [sp, #8]
   8243a:	aa13      	add	r2, sp, #76	; 0x4c
   8243c:	f7ff faf0 	bl	81a20 <__sprint_r.part.0>
   82440:	2800      	cmp	r0, #0
   82442:	f47f af7c 	bne.w	8233e <_vfiprintf_r+0x8a6>
   82446:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82448:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8244a:	1c58      	adds	r0, r3, #1
   8244c:	46cc      	mov	ip, r9
   8244e:	e7ce      	b.n	823ee <_vfiprintf_r+0x956>
   82450:	2a00      	cmp	r2, #0
   82452:	d179      	bne.n	82548 <_vfiprintf_r+0xab0>
   82454:	4619      	mov	r1, r3
   82456:	464e      	mov	r6, r9
   82458:	4613      	mov	r3, r2
   8245a:	e69c      	b.n	82196 <_vfiprintf_r+0x6fe>
   8245c:	2a00      	cmp	r2, #0
   8245e:	f040 8084 	bne.w	8256a <_vfiprintf_r+0xad2>
   82462:	2101      	movs	r1, #1
   82464:	4613      	mov	r3, r2
   82466:	464e      	mov	r6, r9
   82468:	e6a4      	b.n	821b4 <_vfiprintf_r+0x71c>
   8246a:	464f      	mov	r7, r9
   8246c:	e448      	b.n	81d00 <_vfiprintf_r+0x268>
   8246e:	2d00      	cmp	r5, #0
   82470:	bf08      	it	eq
   82472:	2c0a      	cmpeq	r4, #10
   82474:	d246      	bcs.n	82504 <_vfiprintf_r+0xa6c>
   82476:	3430      	adds	r4, #48	; 0x30
   82478:	af30      	add	r7, sp, #192	; 0xc0
   8247a:	f807 4d41 	strb.w	r4, [r7, #-65]!
   8247e:	ebc7 0309 	rsb	r3, r7, r9
   82482:	9305      	str	r3, [sp, #20]
   82484:	e43c      	b.n	81d00 <_vfiprintf_r+0x268>
   82486:	2302      	movs	r3, #2
   82488:	e417      	b.n	81cba <_vfiprintf_r+0x222>
   8248a:	2a00      	cmp	r2, #0
   8248c:	f040 80af 	bne.w	825ee <_vfiprintf_r+0xb56>
   82490:	4613      	mov	r3, r2
   82492:	2101      	movs	r1, #1
   82494:	464e      	mov	r6, r9
   82496:	e66d      	b.n	82174 <_vfiprintf_r+0x6dc>
   82498:	4644      	mov	r4, r8
   8249a:	f7ff bb58 	b.w	81b4e <_vfiprintf_r+0xb6>
   8249e:	9806      	ldr	r0, [sp, #24]
   824a0:	9902      	ldr	r1, [sp, #8]
   824a2:	aa13      	add	r2, sp, #76	; 0x4c
   824a4:	f7ff fabc 	bl	81a20 <__sprint_r.part.0>
   824a8:	2800      	cmp	r0, #0
   824aa:	f47f af48 	bne.w	8233e <_vfiprintf_r+0x8a6>
   824ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
   824b0:	464e      	mov	r6, r9
   824b2:	e6c6      	b.n	82242 <_vfiprintf_r+0x7aa>
   824b4:	9d08      	ldr	r5, [sp, #32]
   824b6:	682c      	ldr	r4, [r5, #0]
   824b8:	3504      	adds	r5, #4
   824ba:	9508      	str	r5, [sp, #32]
   824bc:	2500      	movs	r5, #0
   824be:	f7ff bbfc 	b.w	81cba <_vfiprintf_r+0x222>
   824c2:	9d08      	ldr	r5, [sp, #32]
   824c4:	2301      	movs	r3, #1
   824c6:	682c      	ldr	r4, [r5, #0]
   824c8:	3504      	adds	r5, #4
   824ca:	9508      	str	r5, [sp, #32]
   824cc:	2500      	movs	r5, #0
   824ce:	f7ff bbf4 	b.w	81cba <_vfiprintf_r+0x222>
   824d2:	9d08      	ldr	r5, [sp, #32]
   824d4:	682c      	ldr	r4, [r5, #0]
   824d6:	3504      	adds	r5, #4
   824d8:	9508      	str	r5, [sp, #32]
   824da:	2500      	movs	r5, #0
   824dc:	e525      	b.n	81f2a <_vfiprintf_r+0x492>
   824de:	9d08      	ldr	r5, [sp, #32]
   824e0:	682c      	ldr	r4, [r5, #0]
   824e2:	3504      	adds	r5, #4
   824e4:	9508      	str	r5, [sp, #32]
   824e6:	17e5      	asrs	r5, r4, #31
   824e8:	4622      	mov	r2, r4
   824ea:	462b      	mov	r3, r5
   824ec:	e48e      	b.n	81e0c <_vfiprintf_r+0x374>
   824ee:	9806      	ldr	r0, [sp, #24]
   824f0:	9902      	ldr	r1, [sp, #8]
   824f2:	aa13      	add	r2, sp, #76	; 0x4c
   824f4:	f7ff fa94 	bl	81a20 <__sprint_r.part.0>
   824f8:	2800      	cmp	r0, #0
   824fa:	f47f af20 	bne.w	8233e <_vfiprintf_r+0x8a6>
   824fe:	464e      	mov	r6, r9
   82500:	f7ff bb9a 	b.w	81c38 <_vfiprintf_r+0x1a0>
   82504:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   82508:	9603      	str	r6, [sp, #12]
   8250a:	465e      	mov	r6, fp
   8250c:	46e3      	mov	fp, ip
   8250e:	4620      	mov	r0, r4
   82510:	4629      	mov	r1, r5
   82512:	220a      	movs	r2, #10
   82514:	2300      	movs	r3, #0
   82516:	f001 fe5f 	bl	841d8 <__aeabi_uldivmod>
   8251a:	3230      	adds	r2, #48	; 0x30
   8251c:	7032      	strb	r2, [r6, #0]
   8251e:	4620      	mov	r0, r4
   82520:	4629      	mov	r1, r5
   82522:	220a      	movs	r2, #10
   82524:	2300      	movs	r3, #0
   82526:	f001 fe57 	bl	841d8 <__aeabi_uldivmod>
   8252a:	4604      	mov	r4, r0
   8252c:	460d      	mov	r5, r1
   8252e:	ea54 0005 	orrs.w	r0, r4, r5
   82532:	4637      	mov	r7, r6
   82534:	f106 36ff 	add.w	r6, r6, #4294967295
   82538:	d1e9      	bne.n	8250e <_vfiprintf_r+0xa76>
   8253a:	ebc7 0309 	rsb	r3, r7, r9
   8253e:	46dc      	mov	ip, fp
   82540:	9e03      	ldr	r6, [sp, #12]
   82542:	9305      	str	r3, [sp, #20]
   82544:	f7ff bbdc 	b.w	81d00 <_vfiprintf_r+0x268>
   82548:	9806      	ldr	r0, [sp, #24]
   8254a:	9902      	ldr	r1, [sp, #8]
   8254c:	aa13      	add	r2, sp, #76	; 0x4c
   8254e:	f8cd c004 	str.w	ip, [sp, #4]
   82552:	f7ff fa65 	bl	81a20 <__sprint_r.part.0>
   82556:	f8dd c004 	ldr.w	ip, [sp, #4]
   8255a:	2800      	cmp	r0, #0
   8255c:	f47f aeef 	bne.w	8233e <_vfiprintf_r+0x8a6>
   82560:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82562:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82564:	1c59      	adds	r1, r3, #1
   82566:	464e      	mov	r6, r9
   82568:	e615      	b.n	82196 <_vfiprintf_r+0x6fe>
   8256a:	9806      	ldr	r0, [sp, #24]
   8256c:	9902      	ldr	r1, [sp, #8]
   8256e:	aa13      	add	r2, sp, #76	; 0x4c
   82570:	f8cd c004 	str.w	ip, [sp, #4]
   82574:	f7ff fa54 	bl	81a20 <__sprint_r.part.0>
   82578:	f8dd c004 	ldr.w	ip, [sp, #4]
   8257c:	2800      	cmp	r0, #0
   8257e:	f47f aede 	bne.w	8233e <_vfiprintf_r+0x8a6>
   82582:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82584:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82586:	1c59      	adds	r1, r3, #1
   82588:	464e      	mov	r6, r9
   8258a:	e613      	b.n	821b4 <_vfiprintf_r+0x71c>
   8258c:	2a00      	cmp	r2, #0
   8258e:	d156      	bne.n	8263e <_vfiprintf_r+0xba6>
   82590:	2101      	movs	r1, #1
   82592:	4613      	mov	r3, r2
   82594:	464e      	mov	r6, r9
   82596:	e611      	b.n	821bc <_vfiprintf_r+0x724>
   82598:	9806      	ldr	r0, [sp, #24]
   8259a:	9902      	ldr	r1, [sp, #8]
   8259c:	aa13      	add	r2, sp, #76	; 0x4c
   8259e:	f7ff fa3f 	bl	81a20 <__sprint_r.part.0>
   825a2:	2800      	cmp	r0, #0
   825a4:	f47f aecb 	bne.w	8233e <_vfiprintf_r+0x8a6>
   825a8:	9914      	ldr	r1, [sp, #80]	; 0x50
   825aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
   825ac:	3101      	adds	r1, #1
   825ae:	464e      	mov	r6, r9
   825b0:	e639      	b.n	82226 <_vfiprintf_r+0x78e>
   825b2:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   825b6:	4264      	negs	r4, r4
   825b8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   825bc:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   825c0:	f8cd b01c 	str.w	fp, [sp, #28]
   825c4:	f8cd c014 	str.w	ip, [sp, #20]
   825c8:	2301      	movs	r3, #1
   825ca:	f7ff bb7e 	b.w	81cca <_vfiprintf_r+0x232>
   825ce:	f01a 0f10 	tst.w	sl, #16
   825d2:	d11d      	bne.n	82610 <_vfiprintf_r+0xb78>
   825d4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   825d8:	d058      	beq.n	8268c <_vfiprintf_r+0xbf4>
   825da:	9d08      	ldr	r5, [sp, #32]
   825dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   825e0:	682b      	ldr	r3, [r5, #0]
   825e2:	3504      	adds	r5, #4
   825e4:	9508      	str	r5, [sp, #32]
   825e6:	f8a3 b000 	strh.w	fp, [r3]
   825ea:	f7ff ba88 	b.w	81afe <_vfiprintf_r+0x66>
   825ee:	9806      	ldr	r0, [sp, #24]
   825f0:	9902      	ldr	r1, [sp, #8]
   825f2:	aa13      	add	r2, sp, #76	; 0x4c
   825f4:	f8cd c004 	str.w	ip, [sp, #4]
   825f8:	f7ff fa12 	bl	81a20 <__sprint_r.part.0>
   825fc:	f8dd c004 	ldr.w	ip, [sp, #4]
   82600:	2800      	cmp	r0, #0
   82602:	f47f ae9c 	bne.w	8233e <_vfiprintf_r+0x8a6>
   82606:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82608:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8260a:	1c59      	adds	r1, r3, #1
   8260c:	464e      	mov	r6, r9
   8260e:	e5b1      	b.n	82174 <_vfiprintf_r+0x6dc>
   82610:	f8dd b020 	ldr.w	fp, [sp, #32]
   82614:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82616:	f8db 3000 	ldr.w	r3, [fp]
   8261a:	f10b 0b04 	add.w	fp, fp, #4
   8261e:	f8cd b020 	str.w	fp, [sp, #32]
   82622:	601c      	str	r4, [r3, #0]
   82624:	f7ff ba6b 	b.w	81afe <_vfiprintf_r+0x66>
   82628:	9408      	str	r4, [sp, #32]
   8262a:	f001 fc0b 	bl	83e44 <strlen>
   8262e:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   82632:	9005      	str	r0, [sp, #20]
   82634:	9407      	str	r4, [sp, #28]
   82636:	f04f 0c00 	mov.w	ip, #0
   8263a:	f7ff bb61 	b.w	81d00 <_vfiprintf_r+0x268>
   8263e:	9806      	ldr	r0, [sp, #24]
   82640:	9902      	ldr	r1, [sp, #8]
   82642:	aa13      	add	r2, sp, #76	; 0x4c
   82644:	f8cd c004 	str.w	ip, [sp, #4]
   82648:	f7ff f9ea 	bl	81a20 <__sprint_r.part.0>
   8264c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82650:	2800      	cmp	r0, #0
   82652:	f47f ae74 	bne.w	8233e <_vfiprintf_r+0x8a6>
   82656:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82658:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8265a:	1c59      	adds	r1, r3, #1
   8265c:	464e      	mov	r6, r9
   8265e:	e5ad      	b.n	821bc <_vfiprintf_r+0x724>
   82660:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82662:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82664:	3301      	adds	r3, #1
   82666:	4d02      	ldr	r5, [pc, #8]	; (82670 <_vfiprintf_r+0xbd8>)
   82668:	f7ff bb9a 	b.w	81da0 <_vfiprintf_r+0x308>
   8266c:	00084828 	.word	0x00084828
   82670:	00084838 	.word	0x00084838
   82674:	f1bc 0f06 	cmp.w	ip, #6
   82678:	bf34      	ite	cc
   8267a:	4663      	movcc	r3, ip
   8267c:	2306      	movcs	r3, #6
   8267e:	9408      	str	r4, [sp, #32]
   82680:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82684:	9305      	str	r3, [sp, #20]
   82686:	9403      	str	r4, [sp, #12]
   82688:	4f16      	ldr	r7, [pc, #88]	; (826e4 <_vfiprintf_r+0xc4c>)
   8268a:	e472      	b.n	81f72 <_vfiprintf_r+0x4da>
   8268c:	9c08      	ldr	r4, [sp, #32]
   8268e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82690:	6823      	ldr	r3, [r4, #0]
   82692:	3404      	adds	r4, #4
   82694:	9408      	str	r4, [sp, #32]
   82696:	601d      	str	r5, [r3, #0]
   82698:	f7ff ba31 	b.w	81afe <_vfiprintf_r+0x66>
   8269c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8269e:	4d12      	ldr	r5, [pc, #72]	; (826e8 <_vfiprintf_r+0xc50>)
   826a0:	3001      	adds	r0, #1
   826a2:	e5fc      	b.n	8229e <_vfiprintf_r+0x806>
   826a4:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   826a8:	f8cd c014 	str.w	ip, [sp, #20]
   826ac:	9507      	str	r5, [sp, #28]
   826ae:	9408      	str	r4, [sp, #32]
   826b0:	4684      	mov	ip, r0
   826b2:	f7ff bb25 	b.w	81d00 <_vfiprintf_r+0x268>
   826b6:	4608      	mov	r0, r1
   826b8:	e6b1      	b.n	8241e <_vfiprintf_r+0x986>
   826ba:	46a0      	mov	r8, r4
   826bc:	2500      	movs	r5, #0
   826be:	f7ff ba5a 	b.w	81b76 <_vfiprintf_r+0xde>
   826c2:	f8dd b020 	ldr.w	fp, [sp, #32]
   826c6:	f898 3001 	ldrb.w	r3, [r8, #1]
   826ca:	f8db 5000 	ldr.w	r5, [fp]
   826ce:	f10b 0204 	add.w	r2, fp, #4
   826d2:	2d00      	cmp	r5, #0
   826d4:	9208      	str	r2, [sp, #32]
   826d6:	46a0      	mov	r8, r4
   826d8:	f6bf aa4b 	bge.w	81b72 <_vfiprintf_r+0xda>
   826dc:	f04f 35ff 	mov.w	r5, #4294967295
   826e0:	f7ff ba47 	b.w	81b72 <_vfiprintf_r+0xda>
   826e4:	00084820 	.word	0x00084820
   826e8:	00084838 	.word	0x00084838

000826ec <__sbprintf>:
   826ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   826f0:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   826f2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   826f6:	4688      	mov	r8, r1
   826f8:	9719      	str	r7, [sp, #100]	; 0x64
   826fa:	f8d8 701c 	ldr.w	r7, [r8, #28]
   826fe:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   82702:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   82706:	9707      	str	r7, [sp, #28]
   82708:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   8270c:	ac1a      	add	r4, sp, #104	; 0x68
   8270e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82712:	f02a 0a02 	bic.w	sl, sl, #2
   82716:	2600      	movs	r6, #0
   82718:	4669      	mov	r1, sp
   8271a:	9400      	str	r4, [sp, #0]
   8271c:	9404      	str	r4, [sp, #16]
   8271e:	9502      	str	r5, [sp, #8]
   82720:	9505      	str	r5, [sp, #20]
   82722:	f8ad a00c 	strh.w	sl, [sp, #12]
   82726:	f8ad 900e 	strh.w	r9, [sp, #14]
   8272a:	9709      	str	r7, [sp, #36]	; 0x24
   8272c:	9606      	str	r6, [sp, #24]
   8272e:	4605      	mov	r5, r0
   82730:	f7ff f9b2 	bl	81a98 <_vfiprintf_r>
   82734:	1e04      	subs	r4, r0, #0
   82736:	db07      	blt.n	82748 <__sbprintf+0x5c>
   82738:	4628      	mov	r0, r5
   8273a:	4669      	mov	r1, sp
   8273c:	f000 f92a 	bl	82994 <_fflush_r>
   82740:	42b0      	cmp	r0, r6
   82742:	bf18      	it	ne
   82744:	f04f 34ff 	movne.w	r4, #4294967295
   82748:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8274c:	065b      	lsls	r3, r3, #25
   8274e:	d505      	bpl.n	8275c <__sbprintf+0x70>
   82750:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82758:	f8a8 300c 	strh.w	r3, [r8, #12]
   8275c:	4620      	mov	r0, r4
   8275e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82766:	bf00      	nop

00082768 <__swsetup_r>:
   82768:	4b2f      	ldr	r3, [pc, #188]	; (82828 <__swsetup_r+0xc0>)
   8276a:	b570      	push	{r4, r5, r6, lr}
   8276c:	4606      	mov	r6, r0
   8276e:	6818      	ldr	r0, [r3, #0]
   82770:	460c      	mov	r4, r1
   82772:	b110      	cbz	r0, 8277a <__swsetup_r+0x12>
   82774:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82776:	2a00      	cmp	r2, #0
   82778:	d036      	beq.n	827e8 <__swsetup_r+0x80>
   8277a:	89a5      	ldrh	r5, [r4, #12]
   8277c:	b2ab      	uxth	r3, r5
   8277e:	0719      	lsls	r1, r3, #28
   82780:	d50c      	bpl.n	8279c <__swsetup_r+0x34>
   82782:	6922      	ldr	r2, [r4, #16]
   82784:	b1aa      	cbz	r2, 827b2 <__swsetup_r+0x4a>
   82786:	f013 0101 	ands.w	r1, r3, #1
   8278a:	d01e      	beq.n	827ca <__swsetup_r+0x62>
   8278c:	6963      	ldr	r3, [r4, #20]
   8278e:	2100      	movs	r1, #0
   82790:	425b      	negs	r3, r3
   82792:	61a3      	str	r3, [r4, #24]
   82794:	60a1      	str	r1, [r4, #8]
   82796:	b1f2      	cbz	r2, 827d6 <__swsetup_r+0x6e>
   82798:	2000      	movs	r0, #0
   8279a:	bd70      	pop	{r4, r5, r6, pc}
   8279c:	06da      	lsls	r2, r3, #27
   8279e:	d53a      	bpl.n	82816 <__swsetup_r+0xae>
   827a0:	075b      	lsls	r3, r3, #29
   827a2:	d424      	bmi.n	827ee <__swsetup_r+0x86>
   827a4:	6922      	ldr	r2, [r4, #16]
   827a6:	f045 0308 	orr.w	r3, r5, #8
   827aa:	81a3      	strh	r3, [r4, #12]
   827ac:	b29b      	uxth	r3, r3
   827ae:	2a00      	cmp	r2, #0
   827b0:	d1e9      	bne.n	82786 <__swsetup_r+0x1e>
   827b2:	f403 7120 	and.w	r1, r3, #640	; 0x280
   827b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   827ba:	d0e4      	beq.n	82786 <__swsetup_r+0x1e>
   827bc:	4630      	mov	r0, r6
   827be:	4621      	mov	r1, r4
   827c0:	f000 fcce 	bl	83160 <__smakebuf_r>
   827c4:	89a3      	ldrh	r3, [r4, #12]
   827c6:	6922      	ldr	r2, [r4, #16]
   827c8:	e7dd      	b.n	82786 <__swsetup_r+0x1e>
   827ca:	0798      	lsls	r0, r3, #30
   827cc:	bf58      	it	pl
   827ce:	6961      	ldrpl	r1, [r4, #20]
   827d0:	60a1      	str	r1, [r4, #8]
   827d2:	2a00      	cmp	r2, #0
   827d4:	d1e0      	bne.n	82798 <__swsetup_r+0x30>
   827d6:	89a3      	ldrh	r3, [r4, #12]
   827d8:	061a      	lsls	r2, r3, #24
   827da:	d5dd      	bpl.n	82798 <__swsetup_r+0x30>
   827dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   827e0:	81a3      	strh	r3, [r4, #12]
   827e2:	f04f 30ff 	mov.w	r0, #4294967295
   827e6:	bd70      	pop	{r4, r5, r6, pc}
   827e8:	f000 f8f0 	bl	829cc <__sinit>
   827ec:	e7c5      	b.n	8277a <__swsetup_r+0x12>
   827ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
   827f0:	b149      	cbz	r1, 82806 <__swsetup_r+0x9e>
   827f2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   827f6:	4299      	cmp	r1, r3
   827f8:	d003      	beq.n	82802 <__swsetup_r+0x9a>
   827fa:	4630      	mov	r0, r6
   827fc:	f000 fa2a 	bl	82c54 <_free_r>
   82800:	89a5      	ldrh	r5, [r4, #12]
   82802:	2300      	movs	r3, #0
   82804:	6323      	str	r3, [r4, #48]	; 0x30
   82806:	6922      	ldr	r2, [r4, #16]
   82808:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   8280c:	2100      	movs	r1, #0
   8280e:	b2ad      	uxth	r5, r5
   82810:	6022      	str	r2, [r4, #0]
   82812:	6061      	str	r1, [r4, #4]
   82814:	e7c7      	b.n	827a6 <__swsetup_r+0x3e>
   82816:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8281a:	2309      	movs	r3, #9
   8281c:	6033      	str	r3, [r6, #0]
   8281e:	f04f 30ff 	mov.w	r0, #4294967295
   82822:	81a5      	strh	r5, [r4, #12]
   82824:	bd70      	pop	{r4, r5, r6, pc}
   82826:	bf00      	nop
   82828:	20070570 	.word	0x20070570

0008282c <register_fini>:
   8282c:	4b02      	ldr	r3, [pc, #8]	; (82838 <register_fini+0xc>)
   8282e:	b113      	cbz	r3, 82836 <register_fini+0xa>
   82830:	4802      	ldr	r0, [pc, #8]	; (8283c <register_fini+0x10>)
   82832:	f000 b805 	b.w	82840 <atexit>
   82836:	4770      	bx	lr
   82838:	00000000 	.word	0x00000000
   8283c:	00082ac9 	.word	0x00082ac9

00082840 <atexit>:
   82840:	4601      	mov	r1, r0
   82842:	2000      	movs	r0, #0
   82844:	4602      	mov	r2, r0
   82846:	4603      	mov	r3, r0
   82848:	f001 bbca 	b.w	83fe0 <__register_exitproc>

0008284c <__sflush_r>:
   8284c:	898b      	ldrh	r3, [r1, #12]
   8284e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82852:	b29a      	uxth	r2, r3
   82854:	460d      	mov	r5, r1
   82856:	0711      	lsls	r1, r2, #28
   82858:	4680      	mov	r8, r0
   8285a:	d43c      	bmi.n	828d6 <__sflush_r+0x8a>
   8285c:	686a      	ldr	r2, [r5, #4]
   8285e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82862:	2a00      	cmp	r2, #0
   82864:	81ab      	strh	r3, [r5, #12]
   82866:	dd59      	ble.n	8291c <__sflush_r+0xd0>
   82868:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8286a:	2c00      	cmp	r4, #0
   8286c:	d04b      	beq.n	82906 <__sflush_r+0xba>
   8286e:	b29b      	uxth	r3, r3
   82870:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82874:	2100      	movs	r1, #0
   82876:	b292      	uxth	r2, r2
   82878:	f8d8 6000 	ldr.w	r6, [r8]
   8287c:	f8c8 1000 	str.w	r1, [r8]
   82880:	2a00      	cmp	r2, #0
   82882:	d04f      	beq.n	82924 <__sflush_r+0xd8>
   82884:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82886:	075f      	lsls	r7, r3, #29
   82888:	d505      	bpl.n	82896 <__sflush_r+0x4a>
   8288a:	6869      	ldr	r1, [r5, #4]
   8288c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8288e:	1a52      	subs	r2, r2, r1
   82890:	b10b      	cbz	r3, 82896 <__sflush_r+0x4a>
   82892:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82894:	1ad2      	subs	r2, r2, r3
   82896:	4640      	mov	r0, r8
   82898:	69e9      	ldr	r1, [r5, #28]
   8289a:	2300      	movs	r3, #0
   8289c:	47a0      	blx	r4
   8289e:	1c44      	adds	r4, r0, #1
   828a0:	d04a      	beq.n	82938 <__sflush_r+0xec>
   828a2:	89ab      	ldrh	r3, [r5, #12]
   828a4:	692a      	ldr	r2, [r5, #16]
   828a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   828aa:	b29b      	uxth	r3, r3
   828ac:	2100      	movs	r1, #0
   828ae:	602a      	str	r2, [r5, #0]
   828b0:	04da      	lsls	r2, r3, #19
   828b2:	81ab      	strh	r3, [r5, #12]
   828b4:	6069      	str	r1, [r5, #4]
   828b6:	d44c      	bmi.n	82952 <__sflush_r+0x106>
   828b8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   828ba:	f8c8 6000 	str.w	r6, [r8]
   828be:	b311      	cbz	r1, 82906 <__sflush_r+0xba>
   828c0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   828c4:	4299      	cmp	r1, r3
   828c6:	d002      	beq.n	828ce <__sflush_r+0x82>
   828c8:	4640      	mov	r0, r8
   828ca:	f000 f9c3 	bl	82c54 <_free_r>
   828ce:	2000      	movs	r0, #0
   828d0:	6328      	str	r0, [r5, #48]	; 0x30
   828d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828d6:	692e      	ldr	r6, [r5, #16]
   828d8:	b1ae      	cbz	r6, 82906 <__sflush_r+0xba>
   828da:	0791      	lsls	r1, r2, #30
   828dc:	682c      	ldr	r4, [r5, #0]
   828de:	bf0c      	ite	eq
   828e0:	696b      	ldreq	r3, [r5, #20]
   828e2:	2300      	movne	r3, #0
   828e4:	602e      	str	r6, [r5, #0]
   828e6:	1ba4      	subs	r4, r4, r6
   828e8:	60ab      	str	r3, [r5, #8]
   828ea:	e00a      	b.n	82902 <__sflush_r+0xb6>
   828ec:	4632      	mov	r2, r6
   828ee:	4623      	mov	r3, r4
   828f0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   828f2:	4640      	mov	r0, r8
   828f4:	69e9      	ldr	r1, [r5, #28]
   828f6:	47b8      	blx	r7
   828f8:	2800      	cmp	r0, #0
   828fa:	ebc0 0404 	rsb	r4, r0, r4
   828fe:	4406      	add	r6, r0
   82900:	dd04      	ble.n	8290c <__sflush_r+0xc0>
   82902:	2c00      	cmp	r4, #0
   82904:	dcf2      	bgt.n	828ec <__sflush_r+0xa0>
   82906:	2000      	movs	r0, #0
   82908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8290c:	89ab      	ldrh	r3, [r5, #12]
   8290e:	f04f 30ff 	mov.w	r0, #4294967295
   82912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82916:	81ab      	strh	r3, [r5, #12]
   82918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8291c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8291e:	2a00      	cmp	r2, #0
   82920:	dca2      	bgt.n	82868 <__sflush_r+0x1c>
   82922:	e7f0      	b.n	82906 <__sflush_r+0xba>
   82924:	2301      	movs	r3, #1
   82926:	4640      	mov	r0, r8
   82928:	69e9      	ldr	r1, [r5, #28]
   8292a:	47a0      	blx	r4
   8292c:	1c43      	adds	r3, r0, #1
   8292e:	4602      	mov	r2, r0
   82930:	d01e      	beq.n	82970 <__sflush_r+0x124>
   82932:	89ab      	ldrh	r3, [r5, #12]
   82934:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82936:	e7a6      	b.n	82886 <__sflush_r+0x3a>
   82938:	f8d8 3000 	ldr.w	r3, [r8]
   8293c:	b95b      	cbnz	r3, 82956 <__sflush_r+0x10a>
   8293e:	89aa      	ldrh	r2, [r5, #12]
   82940:	6929      	ldr	r1, [r5, #16]
   82942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82946:	b292      	uxth	r2, r2
   82948:	606b      	str	r3, [r5, #4]
   8294a:	04d3      	lsls	r3, r2, #19
   8294c:	81aa      	strh	r2, [r5, #12]
   8294e:	6029      	str	r1, [r5, #0]
   82950:	d5b2      	bpl.n	828b8 <__sflush_r+0x6c>
   82952:	6528      	str	r0, [r5, #80]	; 0x50
   82954:	e7b0      	b.n	828b8 <__sflush_r+0x6c>
   82956:	2b1d      	cmp	r3, #29
   82958:	d001      	beq.n	8295e <__sflush_r+0x112>
   8295a:	2b16      	cmp	r3, #22
   8295c:	d113      	bne.n	82986 <__sflush_r+0x13a>
   8295e:	89a9      	ldrh	r1, [r5, #12]
   82960:	692b      	ldr	r3, [r5, #16]
   82962:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82966:	2200      	movs	r2, #0
   82968:	81a9      	strh	r1, [r5, #12]
   8296a:	602b      	str	r3, [r5, #0]
   8296c:	606a      	str	r2, [r5, #4]
   8296e:	e7a3      	b.n	828b8 <__sflush_r+0x6c>
   82970:	f8d8 3000 	ldr.w	r3, [r8]
   82974:	2b00      	cmp	r3, #0
   82976:	d0dc      	beq.n	82932 <__sflush_r+0xe6>
   82978:	2b1d      	cmp	r3, #29
   8297a:	d001      	beq.n	82980 <__sflush_r+0x134>
   8297c:	2b16      	cmp	r3, #22
   8297e:	d1c5      	bne.n	8290c <__sflush_r+0xc0>
   82980:	f8c8 6000 	str.w	r6, [r8]
   82984:	e7bf      	b.n	82906 <__sflush_r+0xba>
   82986:	89ab      	ldrh	r3, [r5, #12]
   82988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8298c:	81ab      	strh	r3, [r5, #12]
   8298e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82992:	bf00      	nop

00082994 <_fflush_r>:
   82994:	b510      	push	{r4, lr}
   82996:	4604      	mov	r4, r0
   82998:	b082      	sub	sp, #8
   8299a:	b108      	cbz	r0, 829a0 <_fflush_r+0xc>
   8299c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8299e:	b153      	cbz	r3, 829b6 <_fflush_r+0x22>
   829a0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   829a4:	b908      	cbnz	r0, 829aa <_fflush_r+0x16>
   829a6:	b002      	add	sp, #8
   829a8:	bd10      	pop	{r4, pc}
   829aa:	4620      	mov	r0, r4
   829ac:	b002      	add	sp, #8
   829ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   829b2:	f7ff bf4b 	b.w	8284c <__sflush_r>
   829b6:	9101      	str	r1, [sp, #4]
   829b8:	f000 f808 	bl	829cc <__sinit>
   829bc:	9901      	ldr	r1, [sp, #4]
   829be:	e7ef      	b.n	829a0 <_fflush_r+0xc>

000829c0 <_cleanup_r>:
   829c0:	4901      	ldr	r1, [pc, #4]	; (829c8 <_cleanup_r+0x8>)
   829c2:	f000 bb9f 	b.w	83104 <_fwalk>
   829c6:	bf00      	nop
   829c8:	0008412d 	.word	0x0008412d

000829cc <__sinit>:
   829cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   829d0:	6b84      	ldr	r4, [r0, #56]	; 0x38
   829d2:	b083      	sub	sp, #12
   829d4:	4607      	mov	r7, r0
   829d6:	2c00      	cmp	r4, #0
   829d8:	d165      	bne.n	82aa6 <__sinit+0xda>
   829da:	687d      	ldr	r5, [r7, #4]
   829dc:	4833      	ldr	r0, [pc, #204]	; (82aac <__sinit+0xe0>)
   829de:	2304      	movs	r3, #4
   829e0:	2103      	movs	r1, #3
   829e2:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   829e6:	63f8      	str	r0, [r7, #60]	; 0x3c
   829e8:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   829ec:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   829f0:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   829f4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   829f8:	81ab      	strh	r3, [r5, #12]
   829fa:	602c      	str	r4, [r5, #0]
   829fc:	606c      	str	r4, [r5, #4]
   829fe:	60ac      	str	r4, [r5, #8]
   82a00:	666c      	str	r4, [r5, #100]	; 0x64
   82a02:	81ec      	strh	r4, [r5, #14]
   82a04:	612c      	str	r4, [r5, #16]
   82a06:	616c      	str	r4, [r5, #20]
   82a08:	61ac      	str	r4, [r5, #24]
   82a0a:	4621      	mov	r1, r4
   82a0c:	2208      	movs	r2, #8
   82a0e:	f7fe ff35 	bl	8187c <memset>
   82a12:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82ab0 <__sinit+0xe4>
   82a16:	68be      	ldr	r6, [r7, #8]
   82a18:	f8df a098 	ldr.w	sl, [pc, #152]	; 82ab4 <__sinit+0xe8>
   82a1c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82ab8 <__sinit+0xec>
   82a20:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82abc <__sinit+0xf0>
   82a24:	2301      	movs	r3, #1
   82a26:	2209      	movs	r2, #9
   82a28:	61ed      	str	r5, [r5, #28]
   82a2a:	f8c5 b020 	str.w	fp, [r5, #32]
   82a2e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82a32:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82a36:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82a3a:	4621      	mov	r1, r4
   82a3c:	81f3      	strh	r3, [r6, #14]
   82a3e:	81b2      	strh	r2, [r6, #12]
   82a40:	6034      	str	r4, [r6, #0]
   82a42:	6074      	str	r4, [r6, #4]
   82a44:	60b4      	str	r4, [r6, #8]
   82a46:	6674      	str	r4, [r6, #100]	; 0x64
   82a48:	6134      	str	r4, [r6, #16]
   82a4a:	6174      	str	r4, [r6, #20]
   82a4c:	61b4      	str	r4, [r6, #24]
   82a4e:	2208      	movs	r2, #8
   82a50:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82a54:	9301      	str	r3, [sp, #4]
   82a56:	f7fe ff11 	bl	8187c <memset>
   82a5a:	68fd      	ldr	r5, [r7, #12]
   82a5c:	2012      	movs	r0, #18
   82a5e:	2202      	movs	r2, #2
   82a60:	61f6      	str	r6, [r6, #28]
   82a62:	f8c6 b020 	str.w	fp, [r6, #32]
   82a66:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82a6a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82a6e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82a72:	4621      	mov	r1, r4
   82a74:	81a8      	strh	r0, [r5, #12]
   82a76:	81ea      	strh	r2, [r5, #14]
   82a78:	602c      	str	r4, [r5, #0]
   82a7a:	606c      	str	r4, [r5, #4]
   82a7c:	60ac      	str	r4, [r5, #8]
   82a7e:	666c      	str	r4, [r5, #100]	; 0x64
   82a80:	612c      	str	r4, [r5, #16]
   82a82:	616c      	str	r4, [r5, #20]
   82a84:	61ac      	str	r4, [r5, #24]
   82a86:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82a8a:	2208      	movs	r2, #8
   82a8c:	f7fe fef6 	bl	8187c <memset>
   82a90:	9b01      	ldr	r3, [sp, #4]
   82a92:	61ed      	str	r5, [r5, #28]
   82a94:	f8c5 b020 	str.w	fp, [r5, #32]
   82a98:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82a9c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82aa0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   82aa6:	b003      	add	sp, #12
   82aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82aac:	000829c1 	.word	0x000829c1
   82ab0:	00083dc1 	.word	0x00083dc1
   82ab4:	00083de5 	.word	0x00083de5
   82ab8:	00083e1d 	.word	0x00083e1d
   82abc:	00083e3d 	.word	0x00083e3d

00082ac0 <__sfp_lock_acquire>:
   82ac0:	4770      	bx	lr
   82ac2:	bf00      	nop

00082ac4 <__sfp_lock_release>:
   82ac4:	4770      	bx	lr
   82ac6:	bf00      	nop

00082ac8 <__libc_fini_array>:
   82ac8:	b538      	push	{r3, r4, r5, lr}
   82aca:	4d09      	ldr	r5, [pc, #36]	; (82af0 <__libc_fini_array+0x28>)
   82acc:	4c09      	ldr	r4, [pc, #36]	; (82af4 <__libc_fini_array+0x2c>)
   82ace:	1b64      	subs	r4, r4, r5
   82ad0:	10a4      	asrs	r4, r4, #2
   82ad2:	bf18      	it	ne
   82ad4:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82ad8:	d005      	beq.n	82ae6 <__libc_fini_array+0x1e>
   82ada:	3c01      	subs	r4, #1
   82adc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82ae0:	4798      	blx	r3
   82ae2:	2c00      	cmp	r4, #0
   82ae4:	d1f9      	bne.n	82ada <__libc_fini_array+0x12>
   82ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82aea:	f001 beb7 	b.w	8485c <_fini>
   82aee:	bf00      	nop
   82af0:	00084868 	.word	0x00084868
   82af4:	0008486c 	.word	0x0008486c

00082af8 <_fputwc_r>:
   82af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82afc:	8993      	ldrh	r3, [r2, #12]
   82afe:	460f      	mov	r7, r1
   82b00:	0499      	lsls	r1, r3, #18
   82b02:	b082      	sub	sp, #8
   82b04:	4614      	mov	r4, r2
   82b06:	4680      	mov	r8, r0
   82b08:	d406      	bmi.n	82b18 <_fputwc_r+0x20>
   82b0a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82b0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82b14:	81a3      	strh	r3, [r4, #12]
   82b16:	6662      	str	r2, [r4, #100]	; 0x64
   82b18:	f000 fb1c 	bl	83154 <__locale_mb_cur_max>
   82b1c:	2801      	cmp	r0, #1
   82b1e:	d03e      	beq.n	82b9e <_fputwc_r+0xa6>
   82b20:	463a      	mov	r2, r7
   82b22:	4640      	mov	r0, r8
   82b24:	a901      	add	r1, sp, #4
   82b26:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82b2a:	f001 fa0f 	bl	83f4c <_wcrtomb_r>
   82b2e:	1c42      	adds	r2, r0, #1
   82b30:	4606      	mov	r6, r0
   82b32:	d02d      	beq.n	82b90 <_fputwc_r+0x98>
   82b34:	2800      	cmp	r0, #0
   82b36:	d03a      	beq.n	82bae <_fputwc_r+0xb6>
   82b38:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82b3c:	2500      	movs	r5, #0
   82b3e:	e009      	b.n	82b54 <_fputwc_r+0x5c>
   82b40:	6823      	ldr	r3, [r4, #0]
   82b42:	7019      	strb	r1, [r3, #0]
   82b44:	6823      	ldr	r3, [r4, #0]
   82b46:	3301      	adds	r3, #1
   82b48:	6023      	str	r3, [r4, #0]
   82b4a:	3501      	adds	r5, #1
   82b4c:	42b5      	cmp	r5, r6
   82b4e:	d22e      	bcs.n	82bae <_fputwc_r+0xb6>
   82b50:	ab01      	add	r3, sp, #4
   82b52:	5ce9      	ldrb	r1, [r5, r3]
   82b54:	68a3      	ldr	r3, [r4, #8]
   82b56:	3b01      	subs	r3, #1
   82b58:	2b00      	cmp	r3, #0
   82b5a:	60a3      	str	r3, [r4, #8]
   82b5c:	daf0      	bge.n	82b40 <_fputwc_r+0x48>
   82b5e:	69a2      	ldr	r2, [r4, #24]
   82b60:	4293      	cmp	r3, r2
   82b62:	db06      	blt.n	82b72 <_fputwc_r+0x7a>
   82b64:	6823      	ldr	r3, [r4, #0]
   82b66:	7019      	strb	r1, [r3, #0]
   82b68:	6823      	ldr	r3, [r4, #0]
   82b6a:	7819      	ldrb	r1, [r3, #0]
   82b6c:	3301      	adds	r3, #1
   82b6e:	290a      	cmp	r1, #10
   82b70:	d1ea      	bne.n	82b48 <_fputwc_r+0x50>
   82b72:	4640      	mov	r0, r8
   82b74:	4622      	mov	r2, r4
   82b76:	f001 f995 	bl	83ea4 <__swbuf_r>
   82b7a:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82b7e:	4258      	negs	r0, r3
   82b80:	4158      	adcs	r0, r3
   82b82:	2800      	cmp	r0, #0
   82b84:	d0e1      	beq.n	82b4a <_fputwc_r+0x52>
   82b86:	f04f 30ff 	mov.w	r0, #4294967295
   82b8a:	b002      	add	sp, #8
   82b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b90:	89a3      	ldrh	r3, [r4, #12]
   82b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82b96:	81a3      	strh	r3, [r4, #12]
   82b98:	b002      	add	sp, #8
   82b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b9e:	1e7b      	subs	r3, r7, #1
   82ba0:	2bfe      	cmp	r3, #254	; 0xfe
   82ba2:	d8bd      	bhi.n	82b20 <_fputwc_r+0x28>
   82ba4:	b2f9      	uxtb	r1, r7
   82ba6:	4606      	mov	r6, r0
   82ba8:	f88d 1004 	strb.w	r1, [sp, #4]
   82bac:	e7c6      	b.n	82b3c <_fputwc_r+0x44>
   82bae:	4638      	mov	r0, r7
   82bb0:	b002      	add	sp, #8
   82bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82bb6:	bf00      	nop

00082bb8 <_malloc_trim_r>:
   82bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82bba:	4d23      	ldr	r5, [pc, #140]	; (82c48 <_malloc_trim_r+0x90>)
   82bbc:	460f      	mov	r7, r1
   82bbe:	4604      	mov	r4, r0
   82bc0:	f000 ff08 	bl	839d4 <__malloc_lock>
   82bc4:	68ab      	ldr	r3, [r5, #8]
   82bc6:	685e      	ldr	r6, [r3, #4]
   82bc8:	f026 0603 	bic.w	r6, r6, #3
   82bcc:	1bf1      	subs	r1, r6, r7
   82bce:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82bd2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82bd6:	f021 010f 	bic.w	r1, r1, #15
   82bda:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82bde:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82be2:	db07      	blt.n	82bf4 <_malloc_trim_r+0x3c>
   82be4:	4620      	mov	r0, r4
   82be6:	2100      	movs	r1, #0
   82be8:	f001 f8d8 	bl	83d9c <_sbrk_r>
   82bec:	68ab      	ldr	r3, [r5, #8]
   82bee:	4433      	add	r3, r6
   82bf0:	4298      	cmp	r0, r3
   82bf2:	d004      	beq.n	82bfe <_malloc_trim_r+0x46>
   82bf4:	4620      	mov	r0, r4
   82bf6:	f000 feef 	bl	839d8 <__malloc_unlock>
   82bfa:	2000      	movs	r0, #0
   82bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bfe:	4620      	mov	r0, r4
   82c00:	4279      	negs	r1, r7
   82c02:	f001 f8cb 	bl	83d9c <_sbrk_r>
   82c06:	3001      	adds	r0, #1
   82c08:	d00d      	beq.n	82c26 <_malloc_trim_r+0x6e>
   82c0a:	4b10      	ldr	r3, [pc, #64]	; (82c4c <_malloc_trim_r+0x94>)
   82c0c:	68aa      	ldr	r2, [r5, #8]
   82c0e:	6819      	ldr	r1, [r3, #0]
   82c10:	1bf6      	subs	r6, r6, r7
   82c12:	f046 0601 	orr.w	r6, r6, #1
   82c16:	4620      	mov	r0, r4
   82c18:	1bc9      	subs	r1, r1, r7
   82c1a:	6056      	str	r6, [r2, #4]
   82c1c:	6019      	str	r1, [r3, #0]
   82c1e:	f000 fedb 	bl	839d8 <__malloc_unlock>
   82c22:	2001      	movs	r0, #1
   82c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c26:	4620      	mov	r0, r4
   82c28:	2100      	movs	r1, #0
   82c2a:	f001 f8b7 	bl	83d9c <_sbrk_r>
   82c2e:	68ab      	ldr	r3, [r5, #8]
   82c30:	1ac2      	subs	r2, r0, r3
   82c32:	2a0f      	cmp	r2, #15
   82c34:	ddde      	ble.n	82bf4 <_malloc_trim_r+0x3c>
   82c36:	4d06      	ldr	r5, [pc, #24]	; (82c50 <_malloc_trim_r+0x98>)
   82c38:	4904      	ldr	r1, [pc, #16]	; (82c4c <_malloc_trim_r+0x94>)
   82c3a:	682d      	ldr	r5, [r5, #0]
   82c3c:	f042 0201 	orr.w	r2, r2, #1
   82c40:	1b40      	subs	r0, r0, r5
   82c42:	605a      	str	r2, [r3, #4]
   82c44:	6008      	str	r0, [r1, #0]
   82c46:	e7d5      	b.n	82bf4 <_malloc_trim_r+0x3c>
   82c48:	20070598 	.word	0x20070598
   82c4c:	20070c20 	.word	0x20070c20
   82c50:	200709a4 	.word	0x200709a4

00082c54 <_free_r>:
   82c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82c58:	460d      	mov	r5, r1
   82c5a:	4606      	mov	r6, r0
   82c5c:	2900      	cmp	r1, #0
   82c5e:	d055      	beq.n	82d0c <_free_r+0xb8>
   82c60:	f000 feb8 	bl	839d4 <__malloc_lock>
   82c64:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82c68:	f8df c170 	ldr.w	ip, [pc, #368]	; 82ddc <_free_r+0x188>
   82c6c:	f1a5 0408 	sub.w	r4, r5, #8
   82c70:	f021 0301 	bic.w	r3, r1, #1
   82c74:	18e2      	adds	r2, r4, r3
   82c76:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82c7a:	6857      	ldr	r7, [r2, #4]
   82c7c:	4290      	cmp	r0, r2
   82c7e:	f027 0703 	bic.w	r7, r7, #3
   82c82:	d068      	beq.n	82d56 <_free_r+0x102>
   82c84:	f011 0101 	ands.w	r1, r1, #1
   82c88:	6057      	str	r7, [r2, #4]
   82c8a:	d032      	beq.n	82cf2 <_free_r+0x9e>
   82c8c:	2100      	movs	r1, #0
   82c8e:	19d0      	adds	r0, r2, r7
   82c90:	6840      	ldr	r0, [r0, #4]
   82c92:	07c0      	lsls	r0, r0, #31
   82c94:	d406      	bmi.n	82ca4 <_free_r+0x50>
   82c96:	443b      	add	r3, r7
   82c98:	6890      	ldr	r0, [r2, #8]
   82c9a:	2900      	cmp	r1, #0
   82c9c:	d04d      	beq.n	82d3a <_free_r+0xe6>
   82c9e:	68d2      	ldr	r2, [r2, #12]
   82ca0:	60c2      	str	r2, [r0, #12]
   82ca2:	6090      	str	r0, [r2, #8]
   82ca4:	f043 0201 	orr.w	r2, r3, #1
   82ca8:	6062      	str	r2, [r4, #4]
   82caa:	50e3      	str	r3, [r4, r3]
   82cac:	b9e1      	cbnz	r1, 82ce8 <_free_r+0x94>
   82cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82cb2:	d32d      	bcc.n	82d10 <_free_r+0xbc>
   82cb4:	0a5a      	lsrs	r2, r3, #9
   82cb6:	2a04      	cmp	r2, #4
   82cb8:	d869      	bhi.n	82d8e <_free_r+0x13a>
   82cba:	0998      	lsrs	r0, r3, #6
   82cbc:	3038      	adds	r0, #56	; 0x38
   82cbe:	0041      	lsls	r1, r0, #1
   82cc0:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82cc4:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82cc8:	4944      	ldr	r1, [pc, #272]	; (82ddc <_free_r+0x188>)
   82cca:	4562      	cmp	r2, ip
   82ccc:	d065      	beq.n	82d9a <_free_r+0x146>
   82cce:	6851      	ldr	r1, [r2, #4]
   82cd0:	f021 0103 	bic.w	r1, r1, #3
   82cd4:	428b      	cmp	r3, r1
   82cd6:	d202      	bcs.n	82cde <_free_r+0x8a>
   82cd8:	6892      	ldr	r2, [r2, #8]
   82cda:	4594      	cmp	ip, r2
   82cdc:	d1f7      	bne.n	82cce <_free_r+0x7a>
   82cde:	68d3      	ldr	r3, [r2, #12]
   82ce0:	60e3      	str	r3, [r4, #12]
   82ce2:	60a2      	str	r2, [r4, #8]
   82ce4:	609c      	str	r4, [r3, #8]
   82ce6:	60d4      	str	r4, [r2, #12]
   82ce8:	4630      	mov	r0, r6
   82cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82cee:	f000 be73 	b.w	839d8 <__malloc_unlock>
   82cf2:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82cf6:	f10c 0808 	add.w	r8, ip, #8
   82cfa:	1b64      	subs	r4, r4, r5
   82cfc:	68a0      	ldr	r0, [r4, #8]
   82cfe:	442b      	add	r3, r5
   82d00:	4540      	cmp	r0, r8
   82d02:	d042      	beq.n	82d8a <_free_r+0x136>
   82d04:	68e5      	ldr	r5, [r4, #12]
   82d06:	60c5      	str	r5, [r0, #12]
   82d08:	60a8      	str	r0, [r5, #8]
   82d0a:	e7c0      	b.n	82c8e <_free_r+0x3a>
   82d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d10:	08db      	lsrs	r3, r3, #3
   82d12:	109a      	asrs	r2, r3, #2
   82d14:	2001      	movs	r0, #1
   82d16:	4090      	lsls	r0, r2
   82d18:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82d1c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82d20:	689a      	ldr	r2, [r3, #8]
   82d22:	4301      	orrs	r1, r0
   82d24:	60a2      	str	r2, [r4, #8]
   82d26:	60e3      	str	r3, [r4, #12]
   82d28:	f8cc 1004 	str.w	r1, [ip, #4]
   82d2c:	4630      	mov	r0, r6
   82d2e:	609c      	str	r4, [r3, #8]
   82d30:	60d4      	str	r4, [r2, #12]
   82d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82d36:	f000 be4f 	b.w	839d8 <__malloc_unlock>
   82d3a:	4d29      	ldr	r5, [pc, #164]	; (82de0 <_free_r+0x18c>)
   82d3c:	42a8      	cmp	r0, r5
   82d3e:	d1ae      	bne.n	82c9e <_free_r+0x4a>
   82d40:	f043 0201 	orr.w	r2, r3, #1
   82d44:	f8cc 4014 	str.w	r4, [ip, #20]
   82d48:	f8cc 4010 	str.w	r4, [ip, #16]
   82d4c:	60e0      	str	r0, [r4, #12]
   82d4e:	60a0      	str	r0, [r4, #8]
   82d50:	6062      	str	r2, [r4, #4]
   82d52:	50e3      	str	r3, [r4, r3]
   82d54:	e7c8      	b.n	82ce8 <_free_r+0x94>
   82d56:	441f      	add	r7, r3
   82d58:	07cb      	lsls	r3, r1, #31
   82d5a:	d407      	bmi.n	82d6c <_free_r+0x118>
   82d5c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82d60:	1a64      	subs	r4, r4, r1
   82d62:	68e3      	ldr	r3, [r4, #12]
   82d64:	68a2      	ldr	r2, [r4, #8]
   82d66:	440f      	add	r7, r1
   82d68:	60d3      	str	r3, [r2, #12]
   82d6a:	609a      	str	r2, [r3, #8]
   82d6c:	4b1d      	ldr	r3, [pc, #116]	; (82de4 <_free_r+0x190>)
   82d6e:	f047 0201 	orr.w	r2, r7, #1
   82d72:	681b      	ldr	r3, [r3, #0]
   82d74:	6062      	str	r2, [r4, #4]
   82d76:	429f      	cmp	r7, r3
   82d78:	f8cc 4008 	str.w	r4, [ip, #8]
   82d7c:	d3b4      	bcc.n	82ce8 <_free_r+0x94>
   82d7e:	4b1a      	ldr	r3, [pc, #104]	; (82de8 <_free_r+0x194>)
   82d80:	4630      	mov	r0, r6
   82d82:	6819      	ldr	r1, [r3, #0]
   82d84:	f7ff ff18 	bl	82bb8 <_malloc_trim_r>
   82d88:	e7ae      	b.n	82ce8 <_free_r+0x94>
   82d8a:	2101      	movs	r1, #1
   82d8c:	e77f      	b.n	82c8e <_free_r+0x3a>
   82d8e:	2a14      	cmp	r2, #20
   82d90:	d80b      	bhi.n	82daa <_free_r+0x156>
   82d92:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82d96:	0041      	lsls	r1, r0, #1
   82d98:	e792      	b.n	82cc0 <_free_r+0x6c>
   82d9a:	1080      	asrs	r0, r0, #2
   82d9c:	2501      	movs	r5, #1
   82d9e:	4085      	lsls	r5, r0
   82da0:	6848      	ldr	r0, [r1, #4]
   82da2:	4613      	mov	r3, r2
   82da4:	4328      	orrs	r0, r5
   82da6:	6048      	str	r0, [r1, #4]
   82da8:	e79a      	b.n	82ce0 <_free_r+0x8c>
   82daa:	2a54      	cmp	r2, #84	; 0x54
   82dac:	d803      	bhi.n	82db6 <_free_r+0x162>
   82dae:	0b18      	lsrs	r0, r3, #12
   82db0:	306e      	adds	r0, #110	; 0x6e
   82db2:	0041      	lsls	r1, r0, #1
   82db4:	e784      	b.n	82cc0 <_free_r+0x6c>
   82db6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82dba:	d803      	bhi.n	82dc4 <_free_r+0x170>
   82dbc:	0bd8      	lsrs	r0, r3, #15
   82dbe:	3077      	adds	r0, #119	; 0x77
   82dc0:	0041      	lsls	r1, r0, #1
   82dc2:	e77d      	b.n	82cc0 <_free_r+0x6c>
   82dc4:	f240 5154 	movw	r1, #1364	; 0x554
   82dc8:	428a      	cmp	r2, r1
   82dca:	d803      	bhi.n	82dd4 <_free_r+0x180>
   82dcc:	0c98      	lsrs	r0, r3, #18
   82dce:	307c      	adds	r0, #124	; 0x7c
   82dd0:	0041      	lsls	r1, r0, #1
   82dd2:	e775      	b.n	82cc0 <_free_r+0x6c>
   82dd4:	21fc      	movs	r1, #252	; 0xfc
   82dd6:	207e      	movs	r0, #126	; 0x7e
   82dd8:	e772      	b.n	82cc0 <_free_r+0x6c>
   82dda:	bf00      	nop
   82ddc:	20070598 	.word	0x20070598
   82de0:	200705a0 	.word	0x200705a0
   82de4:	200709a0 	.word	0x200709a0
   82de8:	20070c1c 	.word	0x20070c1c

00082dec <__sfvwrite_r>:
   82dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82df0:	6893      	ldr	r3, [r2, #8]
   82df2:	b083      	sub	sp, #12
   82df4:	4616      	mov	r6, r2
   82df6:	4681      	mov	r9, r0
   82df8:	460c      	mov	r4, r1
   82dfa:	b32b      	cbz	r3, 82e48 <__sfvwrite_r+0x5c>
   82dfc:	898b      	ldrh	r3, [r1, #12]
   82dfe:	0719      	lsls	r1, r3, #28
   82e00:	d526      	bpl.n	82e50 <__sfvwrite_r+0x64>
   82e02:	6922      	ldr	r2, [r4, #16]
   82e04:	b322      	cbz	r2, 82e50 <__sfvwrite_r+0x64>
   82e06:	f003 0202 	and.w	r2, r3, #2
   82e0a:	b292      	uxth	r2, r2
   82e0c:	6835      	ldr	r5, [r6, #0]
   82e0e:	2a00      	cmp	r2, #0
   82e10:	d02c      	beq.n	82e6c <__sfvwrite_r+0x80>
   82e12:	f04f 0a00 	mov.w	sl, #0
   82e16:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 83100 <__sfvwrite_r+0x314>
   82e1a:	46d0      	mov	r8, sl
   82e1c:	45d8      	cmp	r8, fp
   82e1e:	bf34      	ite	cc
   82e20:	4643      	movcc	r3, r8
   82e22:	465b      	movcs	r3, fp
   82e24:	4652      	mov	r2, sl
   82e26:	4648      	mov	r0, r9
   82e28:	f1b8 0f00 	cmp.w	r8, #0
   82e2c:	d04f      	beq.n	82ece <__sfvwrite_r+0xe2>
   82e2e:	69e1      	ldr	r1, [r4, #28]
   82e30:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82e32:	47b8      	blx	r7
   82e34:	2800      	cmp	r0, #0
   82e36:	dd56      	ble.n	82ee6 <__sfvwrite_r+0xfa>
   82e38:	68b3      	ldr	r3, [r6, #8]
   82e3a:	4482      	add	sl, r0
   82e3c:	1a1b      	subs	r3, r3, r0
   82e3e:	ebc0 0808 	rsb	r8, r0, r8
   82e42:	60b3      	str	r3, [r6, #8]
   82e44:	2b00      	cmp	r3, #0
   82e46:	d1e9      	bne.n	82e1c <__sfvwrite_r+0x30>
   82e48:	2000      	movs	r0, #0
   82e4a:	b003      	add	sp, #12
   82e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e50:	4648      	mov	r0, r9
   82e52:	4621      	mov	r1, r4
   82e54:	f7ff fc88 	bl	82768 <__swsetup_r>
   82e58:	2800      	cmp	r0, #0
   82e5a:	f040 8148 	bne.w	830ee <__sfvwrite_r+0x302>
   82e5e:	89a3      	ldrh	r3, [r4, #12]
   82e60:	6835      	ldr	r5, [r6, #0]
   82e62:	f003 0202 	and.w	r2, r3, #2
   82e66:	b292      	uxth	r2, r2
   82e68:	2a00      	cmp	r2, #0
   82e6a:	d1d2      	bne.n	82e12 <__sfvwrite_r+0x26>
   82e6c:	f013 0a01 	ands.w	sl, r3, #1
   82e70:	d142      	bne.n	82ef8 <__sfvwrite_r+0x10c>
   82e72:	46d0      	mov	r8, sl
   82e74:	f1b8 0f00 	cmp.w	r8, #0
   82e78:	d023      	beq.n	82ec2 <__sfvwrite_r+0xd6>
   82e7a:	059a      	lsls	r2, r3, #22
   82e7c:	68a7      	ldr	r7, [r4, #8]
   82e7e:	d576      	bpl.n	82f6e <__sfvwrite_r+0x182>
   82e80:	45b8      	cmp	r8, r7
   82e82:	f0c0 80a4 	bcc.w	82fce <__sfvwrite_r+0x1e2>
   82e86:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82e8a:	f040 80b2 	bne.w	82ff2 <__sfvwrite_r+0x206>
   82e8e:	6820      	ldr	r0, [r4, #0]
   82e90:	46bb      	mov	fp, r7
   82e92:	4651      	mov	r1, sl
   82e94:	465a      	mov	r2, fp
   82e96:	f000 fd37 	bl	83908 <memmove>
   82e9a:	68a2      	ldr	r2, [r4, #8]
   82e9c:	6821      	ldr	r1, [r4, #0]
   82e9e:	1bd2      	subs	r2, r2, r7
   82ea0:	eb01 030b 	add.w	r3, r1, fp
   82ea4:	60a2      	str	r2, [r4, #8]
   82ea6:	6023      	str	r3, [r4, #0]
   82ea8:	4642      	mov	r2, r8
   82eaa:	68b3      	ldr	r3, [r6, #8]
   82eac:	4492      	add	sl, r2
   82eae:	1a9b      	subs	r3, r3, r2
   82eb0:	ebc2 0808 	rsb	r8, r2, r8
   82eb4:	60b3      	str	r3, [r6, #8]
   82eb6:	2b00      	cmp	r3, #0
   82eb8:	d0c6      	beq.n	82e48 <__sfvwrite_r+0x5c>
   82eba:	89a3      	ldrh	r3, [r4, #12]
   82ebc:	f1b8 0f00 	cmp.w	r8, #0
   82ec0:	d1db      	bne.n	82e7a <__sfvwrite_r+0x8e>
   82ec2:	f8d5 a000 	ldr.w	sl, [r5]
   82ec6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82eca:	3508      	adds	r5, #8
   82ecc:	e7d2      	b.n	82e74 <__sfvwrite_r+0x88>
   82ece:	f8d5 a000 	ldr.w	sl, [r5]
   82ed2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82ed6:	3508      	adds	r5, #8
   82ed8:	e7a0      	b.n	82e1c <__sfvwrite_r+0x30>
   82eda:	4648      	mov	r0, r9
   82edc:	4621      	mov	r1, r4
   82ede:	f7ff fd59 	bl	82994 <_fflush_r>
   82ee2:	2800      	cmp	r0, #0
   82ee4:	d059      	beq.n	82f9a <__sfvwrite_r+0x1ae>
   82ee6:	89a3      	ldrh	r3, [r4, #12]
   82ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82eec:	f04f 30ff 	mov.w	r0, #4294967295
   82ef0:	81a3      	strh	r3, [r4, #12]
   82ef2:	b003      	add	sp, #12
   82ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ef8:	4692      	mov	sl, r2
   82efa:	9201      	str	r2, [sp, #4]
   82efc:	4693      	mov	fp, r2
   82efe:	4690      	mov	r8, r2
   82f00:	f1b8 0f00 	cmp.w	r8, #0
   82f04:	d02b      	beq.n	82f5e <__sfvwrite_r+0x172>
   82f06:	9f01      	ldr	r7, [sp, #4]
   82f08:	2f00      	cmp	r7, #0
   82f0a:	d064      	beq.n	82fd6 <__sfvwrite_r+0x1ea>
   82f0c:	6820      	ldr	r0, [r4, #0]
   82f0e:	6921      	ldr	r1, [r4, #16]
   82f10:	45c2      	cmp	sl, r8
   82f12:	bf34      	ite	cc
   82f14:	4653      	movcc	r3, sl
   82f16:	4643      	movcs	r3, r8
   82f18:	4288      	cmp	r0, r1
   82f1a:	461f      	mov	r7, r3
   82f1c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82f20:	6962      	ldr	r2, [r4, #20]
   82f22:	d903      	bls.n	82f2c <__sfvwrite_r+0x140>
   82f24:	4494      	add	ip, r2
   82f26:	4563      	cmp	r3, ip
   82f28:	f300 80ae 	bgt.w	83088 <__sfvwrite_r+0x29c>
   82f2c:	4293      	cmp	r3, r2
   82f2e:	db36      	blt.n	82f9e <__sfvwrite_r+0x1b2>
   82f30:	4613      	mov	r3, r2
   82f32:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82f34:	4648      	mov	r0, r9
   82f36:	69e1      	ldr	r1, [r4, #28]
   82f38:	465a      	mov	r2, fp
   82f3a:	47b8      	blx	r7
   82f3c:	1e07      	subs	r7, r0, #0
   82f3e:	ddd2      	ble.n	82ee6 <__sfvwrite_r+0xfa>
   82f40:	ebba 0a07 	subs.w	sl, sl, r7
   82f44:	d03a      	beq.n	82fbc <__sfvwrite_r+0x1d0>
   82f46:	68b3      	ldr	r3, [r6, #8]
   82f48:	44bb      	add	fp, r7
   82f4a:	1bdb      	subs	r3, r3, r7
   82f4c:	ebc7 0808 	rsb	r8, r7, r8
   82f50:	60b3      	str	r3, [r6, #8]
   82f52:	2b00      	cmp	r3, #0
   82f54:	f43f af78 	beq.w	82e48 <__sfvwrite_r+0x5c>
   82f58:	f1b8 0f00 	cmp.w	r8, #0
   82f5c:	d1d3      	bne.n	82f06 <__sfvwrite_r+0x11a>
   82f5e:	2700      	movs	r7, #0
   82f60:	f8d5 b000 	ldr.w	fp, [r5]
   82f64:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82f68:	9701      	str	r7, [sp, #4]
   82f6a:	3508      	adds	r5, #8
   82f6c:	e7c8      	b.n	82f00 <__sfvwrite_r+0x114>
   82f6e:	6820      	ldr	r0, [r4, #0]
   82f70:	6923      	ldr	r3, [r4, #16]
   82f72:	4298      	cmp	r0, r3
   82f74:	d802      	bhi.n	82f7c <__sfvwrite_r+0x190>
   82f76:	6963      	ldr	r3, [r4, #20]
   82f78:	4598      	cmp	r8, r3
   82f7a:	d272      	bcs.n	83062 <__sfvwrite_r+0x276>
   82f7c:	45b8      	cmp	r8, r7
   82f7e:	bf38      	it	cc
   82f80:	4647      	movcc	r7, r8
   82f82:	463a      	mov	r2, r7
   82f84:	4651      	mov	r1, sl
   82f86:	f000 fcbf 	bl	83908 <memmove>
   82f8a:	68a3      	ldr	r3, [r4, #8]
   82f8c:	6822      	ldr	r2, [r4, #0]
   82f8e:	1bdb      	subs	r3, r3, r7
   82f90:	443a      	add	r2, r7
   82f92:	60a3      	str	r3, [r4, #8]
   82f94:	6022      	str	r2, [r4, #0]
   82f96:	2b00      	cmp	r3, #0
   82f98:	d09f      	beq.n	82eda <__sfvwrite_r+0xee>
   82f9a:	463a      	mov	r2, r7
   82f9c:	e785      	b.n	82eaa <__sfvwrite_r+0xbe>
   82f9e:	461a      	mov	r2, r3
   82fa0:	4659      	mov	r1, fp
   82fa2:	9300      	str	r3, [sp, #0]
   82fa4:	f000 fcb0 	bl	83908 <memmove>
   82fa8:	9b00      	ldr	r3, [sp, #0]
   82faa:	68a1      	ldr	r1, [r4, #8]
   82fac:	6822      	ldr	r2, [r4, #0]
   82fae:	1ac9      	subs	r1, r1, r3
   82fb0:	ebba 0a07 	subs.w	sl, sl, r7
   82fb4:	4413      	add	r3, r2
   82fb6:	60a1      	str	r1, [r4, #8]
   82fb8:	6023      	str	r3, [r4, #0]
   82fba:	d1c4      	bne.n	82f46 <__sfvwrite_r+0x15a>
   82fbc:	4648      	mov	r0, r9
   82fbe:	4621      	mov	r1, r4
   82fc0:	f7ff fce8 	bl	82994 <_fflush_r>
   82fc4:	2800      	cmp	r0, #0
   82fc6:	d18e      	bne.n	82ee6 <__sfvwrite_r+0xfa>
   82fc8:	f8cd a004 	str.w	sl, [sp, #4]
   82fcc:	e7bb      	b.n	82f46 <__sfvwrite_r+0x15a>
   82fce:	6820      	ldr	r0, [r4, #0]
   82fd0:	4647      	mov	r7, r8
   82fd2:	46c3      	mov	fp, r8
   82fd4:	e75d      	b.n	82e92 <__sfvwrite_r+0xa6>
   82fd6:	4658      	mov	r0, fp
   82fd8:	210a      	movs	r1, #10
   82fda:	4642      	mov	r2, r8
   82fdc:	f000 fbd4 	bl	83788 <memchr>
   82fe0:	2800      	cmp	r0, #0
   82fe2:	d07f      	beq.n	830e4 <__sfvwrite_r+0x2f8>
   82fe4:	f100 0a01 	add.w	sl, r0, #1
   82fe8:	2701      	movs	r7, #1
   82fea:	ebcb 0a0a 	rsb	sl, fp, sl
   82fee:	9701      	str	r7, [sp, #4]
   82ff0:	e78c      	b.n	82f0c <__sfvwrite_r+0x120>
   82ff2:	6822      	ldr	r2, [r4, #0]
   82ff4:	6921      	ldr	r1, [r4, #16]
   82ff6:	6967      	ldr	r7, [r4, #20]
   82ff8:	ebc1 0c02 	rsb	ip, r1, r2
   82ffc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   83000:	f10c 0201 	add.w	r2, ip, #1
   83004:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   83008:	4442      	add	r2, r8
   8300a:	107f      	asrs	r7, r7, #1
   8300c:	4297      	cmp	r7, r2
   8300e:	bf34      	ite	cc
   83010:	4617      	movcc	r7, r2
   83012:	463a      	movcs	r2, r7
   83014:	055b      	lsls	r3, r3, #21
   83016:	d54f      	bpl.n	830b8 <__sfvwrite_r+0x2cc>
   83018:	4611      	mov	r1, r2
   8301a:	4648      	mov	r0, r9
   8301c:	f8cd c000 	str.w	ip, [sp]
   83020:	f000 f916 	bl	83250 <_malloc_r>
   83024:	f8dd c000 	ldr.w	ip, [sp]
   83028:	4683      	mov	fp, r0
   8302a:	2800      	cmp	r0, #0
   8302c:	d062      	beq.n	830f4 <__sfvwrite_r+0x308>
   8302e:	4662      	mov	r2, ip
   83030:	6921      	ldr	r1, [r4, #16]
   83032:	f8cd c000 	str.w	ip, [sp]
   83036:	f000 fbf1 	bl	8381c <memcpy>
   8303a:	89a2      	ldrh	r2, [r4, #12]
   8303c:	f8dd c000 	ldr.w	ip, [sp]
   83040:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83044:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83048:	81a2      	strh	r2, [r4, #12]
   8304a:	eb0b 000c 	add.w	r0, fp, ip
   8304e:	ebcc 0207 	rsb	r2, ip, r7
   83052:	f8c4 b010 	str.w	fp, [r4, #16]
   83056:	6167      	str	r7, [r4, #20]
   83058:	6020      	str	r0, [r4, #0]
   8305a:	60a2      	str	r2, [r4, #8]
   8305c:	4647      	mov	r7, r8
   8305e:	46c3      	mov	fp, r8
   83060:	e717      	b.n	82e92 <__sfvwrite_r+0xa6>
   83062:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83066:	4590      	cmp	r8, r2
   83068:	bf38      	it	cc
   8306a:	4642      	movcc	r2, r8
   8306c:	fb92 f2f3 	sdiv	r2, r2, r3
   83070:	fb02 f303 	mul.w	r3, r2, r3
   83074:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83076:	4648      	mov	r0, r9
   83078:	69e1      	ldr	r1, [r4, #28]
   8307a:	4652      	mov	r2, sl
   8307c:	47b8      	blx	r7
   8307e:	2800      	cmp	r0, #0
   83080:	f77f af31 	ble.w	82ee6 <__sfvwrite_r+0xfa>
   83084:	4602      	mov	r2, r0
   83086:	e710      	b.n	82eaa <__sfvwrite_r+0xbe>
   83088:	4662      	mov	r2, ip
   8308a:	4659      	mov	r1, fp
   8308c:	f8cd c000 	str.w	ip, [sp]
   83090:	f000 fc3a 	bl	83908 <memmove>
   83094:	f8dd c000 	ldr.w	ip, [sp]
   83098:	6823      	ldr	r3, [r4, #0]
   8309a:	4648      	mov	r0, r9
   8309c:	4463      	add	r3, ip
   8309e:	6023      	str	r3, [r4, #0]
   830a0:	4621      	mov	r1, r4
   830a2:	f8cd c000 	str.w	ip, [sp]
   830a6:	f7ff fc75 	bl	82994 <_fflush_r>
   830aa:	f8dd c000 	ldr.w	ip, [sp]
   830ae:	2800      	cmp	r0, #0
   830b0:	f47f af19 	bne.w	82ee6 <__sfvwrite_r+0xfa>
   830b4:	4667      	mov	r7, ip
   830b6:	e743      	b.n	82f40 <__sfvwrite_r+0x154>
   830b8:	4648      	mov	r0, r9
   830ba:	f8cd c000 	str.w	ip, [sp]
   830be:	f000 fc8d 	bl	839dc <_realloc_r>
   830c2:	f8dd c000 	ldr.w	ip, [sp]
   830c6:	4683      	mov	fp, r0
   830c8:	2800      	cmp	r0, #0
   830ca:	d1be      	bne.n	8304a <__sfvwrite_r+0x25e>
   830cc:	4648      	mov	r0, r9
   830ce:	6921      	ldr	r1, [r4, #16]
   830d0:	f7ff fdc0 	bl	82c54 <_free_r>
   830d4:	89a3      	ldrh	r3, [r4, #12]
   830d6:	220c      	movs	r2, #12
   830d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   830dc:	b29b      	uxth	r3, r3
   830de:	f8c9 2000 	str.w	r2, [r9]
   830e2:	e701      	b.n	82ee8 <__sfvwrite_r+0xfc>
   830e4:	2701      	movs	r7, #1
   830e6:	f108 0a01 	add.w	sl, r8, #1
   830ea:	9701      	str	r7, [sp, #4]
   830ec:	e70e      	b.n	82f0c <__sfvwrite_r+0x120>
   830ee:	f04f 30ff 	mov.w	r0, #4294967295
   830f2:	e6aa      	b.n	82e4a <__sfvwrite_r+0x5e>
   830f4:	230c      	movs	r3, #12
   830f6:	f8c9 3000 	str.w	r3, [r9]
   830fa:	89a3      	ldrh	r3, [r4, #12]
   830fc:	e6f4      	b.n	82ee8 <__sfvwrite_r+0xfc>
   830fe:	bf00      	nop
   83100:	7ffffc00 	.word	0x7ffffc00

00083104 <_fwalk>:
   83104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83108:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   8310c:	4688      	mov	r8, r1
   8310e:	d019      	beq.n	83144 <_fwalk+0x40>
   83110:	2600      	movs	r6, #0
   83112:	687d      	ldr	r5, [r7, #4]
   83114:	68bc      	ldr	r4, [r7, #8]
   83116:	3d01      	subs	r5, #1
   83118:	d40e      	bmi.n	83138 <_fwalk+0x34>
   8311a:	89a3      	ldrh	r3, [r4, #12]
   8311c:	3d01      	subs	r5, #1
   8311e:	2b01      	cmp	r3, #1
   83120:	d906      	bls.n	83130 <_fwalk+0x2c>
   83122:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83126:	4620      	mov	r0, r4
   83128:	3301      	adds	r3, #1
   8312a:	d001      	beq.n	83130 <_fwalk+0x2c>
   8312c:	47c0      	blx	r8
   8312e:	4306      	orrs	r6, r0
   83130:	1c6b      	adds	r3, r5, #1
   83132:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83136:	d1f0      	bne.n	8311a <_fwalk+0x16>
   83138:	683f      	ldr	r7, [r7, #0]
   8313a:	2f00      	cmp	r7, #0
   8313c:	d1e9      	bne.n	83112 <_fwalk+0xe>
   8313e:	4630      	mov	r0, r6
   83140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83144:	463e      	mov	r6, r7
   83146:	4630      	mov	r0, r6
   83148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008314c <__locale_charset>:
   8314c:	4800      	ldr	r0, [pc, #0]	; (83150 <__locale_charset+0x4>)
   8314e:	4770      	bx	lr
   83150:	20070574 	.word	0x20070574

00083154 <__locale_mb_cur_max>:
   83154:	4b01      	ldr	r3, [pc, #4]	; (8315c <__locale_mb_cur_max+0x8>)
   83156:	6818      	ldr	r0, [r3, #0]
   83158:	4770      	bx	lr
   8315a:	bf00      	nop
   8315c:	20070594 	.word	0x20070594

00083160 <__smakebuf_r>:
   83160:	b5f0      	push	{r4, r5, r6, r7, lr}
   83162:	898b      	ldrh	r3, [r1, #12]
   83164:	b091      	sub	sp, #68	; 0x44
   83166:	b29a      	uxth	r2, r3
   83168:	0796      	lsls	r6, r2, #30
   8316a:	460c      	mov	r4, r1
   8316c:	4605      	mov	r5, r0
   8316e:	d437      	bmi.n	831e0 <__smakebuf_r+0x80>
   83170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83174:	2900      	cmp	r1, #0
   83176:	db17      	blt.n	831a8 <__smakebuf_r+0x48>
   83178:	aa01      	add	r2, sp, #4
   8317a:	f000 ffdf 	bl	8413c <_fstat_r>
   8317e:	2800      	cmp	r0, #0
   83180:	db10      	blt.n	831a4 <__smakebuf_r+0x44>
   83182:	9b02      	ldr	r3, [sp, #8]
   83184:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   83188:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   8318c:	424f      	negs	r7, r1
   8318e:	414f      	adcs	r7, r1
   83190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   83194:	d02c      	beq.n	831f0 <__smakebuf_r+0x90>
   83196:	89a3      	ldrh	r3, [r4, #12]
   83198:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8319c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   831a0:	81a3      	strh	r3, [r4, #12]
   831a2:	e00b      	b.n	831bc <__smakebuf_r+0x5c>
   831a4:	89a3      	ldrh	r3, [r4, #12]
   831a6:	b29a      	uxth	r2, r3
   831a8:	f012 0f80 	tst.w	r2, #128	; 0x80
   831ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   831b0:	81a3      	strh	r3, [r4, #12]
   831b2:	bf14      	ite	ne
   831b4:	2640      	movne	r6, #64	; 0x40
   831b6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   831ba:	2700      	movs	r7, #0
   831bc:	4628      	mov	r0, r5
   831be:	4631      	mov	r1, r6
   831c0:	f000 f846 	bl	83250 <_malloc_r>
   831c4:	89a3      	ldrh	r3, [r4, #12]
   831c6:	2800      	cmp	r0, #0
   831c8:	d029      	beq.n	8321e <__smakebuf_r+0xbe>
   831ca:	4a1b      	ldr	r2, [pc, #108]	; (83238 <__smakebuf_r+0xd8>)
   831cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   831d0:	63ea      	str	r2, [r5, #60]	; 0x3c
   831d2:	81a3      	strh	r3, [r4, #12]
   831d4:	6020      	str	r0, [r4, #0]
   831d6:	6120      	str	r0, [r4, #16]
   831d8:	6166      	str	r6, [r4, #20]
   831da:	b9a7      	cbnz	r7, 83206 <__smakebuf_r+0xa6>
   831dc:	b011      	add	sp, #68	; 0x44
   831de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   831e0:	f101 0343 	add.w	r3, r1, #67	; 0x43
   831e4:	2201      	movs	r2, #1
   831e6:	600b      	str	r3, [r1, #0]
   831e8:	610b      	str	r3, [r1, #16]
   831ea:	614a      	str	r2, [r1, #20]
   831ec:	b011      	add	sp, #68	; 0x44
   831ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   831f0:	4a12      	ldr	r2, [pc, #72]	; (8323c <__smakebuf_r+0xdc>)
   831f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   831f4:	4293      	cmp	r3, r2
   831f6:	d1ce      	bne.n	83196 <__smakebuf_r+0x36>
   831f8:	89a3      	ldrh	r3, [r4, #12]
   831fa:	f44f 6680 	mov.w	r6, #1024	; 0x400
   831fe:	4333      	orrs	r3, r6
   83200:	81a3      	strh	r3, [r4, #12]
   83202:	64e6      	str	r6, [r4, #76]	; 0x4c
   83204:	e7da      	b.n	831bc <__smakebuf_r+0x5c>
   83206:	4628      	mov	r0, r5
   83208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8320c:	f000 ffaa 	bl	84164 <_isatty_r>
   83210:	2800      	cmp	r0, #0
   83212:	d0e3      	beq.n	831dc <__smakebuf_r+0x7c>
   83214:	89a3      	ldrh	r3, [r4, #12]
   83216:	f043 0301 	orr.w	r3, r3, #1
   8321a:	81a3      	strh	r3, [r4, #12]
   8321c:	e7de      	b.n	831dc <__smakebuf_r+0x7c>
   8321e:	059a      	lsls	r2, r3, #22
   83220:	d4dc      	bmi.n	831dc <__smakebuf_r+0x7c>
   83222:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83226:	f043 0302 	orr.w	r3, r3, #2
   8322a:	2101      	movs	r1, #1
   8322c:	81a3      	strh	r3, [r4, #12]
   8322e:	6022      	str	r2, [r4, #0]
   83230:	6122      	str	r2, [r4, #16]
   83232:	6161      	str	r1, [r4, #20]
   83234:	e7d2      	b.n	831dc <__smakebuf_r+0x7c>
   83236:	bf00      	nop
   83238:	000829c1 	.word	0x000829c1
   8323c:	00083e1d 	.word	0x00083e1d

00083240 <malloc>:
   83240:	4b02      	ldr	r3, [pc, #8]	; (8324c <malloc+0xc>)
   83242:	4601      	mov	r1, r0
   83244:	6818      	ldr	r0, [r3, #0]
   83246:	f000 b803 	b.w	83250 <_malloc_r>
   8324a:	bf00      	nop
   8324c:	20070570 	.word	0x20070570

00083250 <_malloc_r>:
   83250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83254:	f101 050b 	add.w	r5, r1, #11
   83258:	2d16      	cmp	r5, #22
   8325a:	b083      	sub	sp, #12
   8325c:	4606      	mov	r6, r0
   8325e:	d927      	bls.n	832b0 <_malloc_r+0x60>
   83260:	f035 0507 	bics.w	r5, r5, #7
   83264:	d427      	bmi.n	832b6 <_malloc_r+0x66>
   83266:	42a9      	cmp	r1, r5
   83268:	d825      	bhi.n	832b6 <_malloc_r+0x66>
   8326a:	4630      	mov	r0, r6
   8326c:	f000 fbb2 	bl	839d4 <__malloc_lock>
   83270:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   83274:	d226      	bcs.n	832c4 <_malloc_r+0x74>
   83276:	4fc1      	ldr	r7, [pc, #772]	; (8357c <_malloc_r+0x32c>)
   83278:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   8327c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   83280:	68dc      	ldr	r4, [r3, #12]
   83282:	429c      	cmp	r4, r3
   83284:	f000 81d2 	beq.w	8362c <_malloc_r+0x3dc>
   83288:	6863      	ldr	r3, [r4, #4]
   8328a:	68e2      	ldr	r2, [r4, #12]
   8328c:	f023 0303 	bic.w	r3, r3, #3
   83290:	4423      	add	r3, r4
   83292:	6858      	ldr	r0, [r3, #4]
   83294:	68a1      	ldr	r1, [r4, #8]
   83296:	f040 0501 	orr.w	r5, r0, #1
   8329a:	60ca      	str	r2, [r1, #12]
   8329c:	4630      	mov	r0, r6
   8329e:	6091      	str	r1, [r2, #8]
   832a0:	605d      	str	r5, [r3, #4]
   832a2:	f000 fb99 	bl	839d8 <__malloc_unlock>
   832a6:	3408      	adds	r4, #8
   832a8:	4620      	mov	r0, r4
   832aa:	b003      	add	sp, #12
   832ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832b0:	2510      	movs	r5, #16
   832b2:	42a9      	cmp	r1, r5
   832b4:	d9d9      	bls.n	8326a <_malloc_r+0x1a>
   832b6:	2400      	movs	r4, #0
   832b8:	230c      	movs	r3, #12
   832ba:	4620      	mov	r0, r4
   832bc:	6033      	str	r3, [r6, #0]
   832be:	b003      	add	sp, #12
   832c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832c4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   832c8:	f000 8089 	beq.w	833de <_malloc_r+0x18e>
   832cc:	f1bc 0f04 	cmp.w	ip, #4
   832d0:	f200 8160 	bhi.w	83594 <_malloc_r+0x344>
   832d4:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   832d8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   832dc:	ea4f 014c 	mov.w	r1, ip, lsl #1
   832e0:	4fa6      	ldr	r7, [pc, #664]	; (8357c <_malloc_r+0x32c>)
   832e2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   832e6:	68cc      	ldr	r4, [r1, #12]
   832e8:	42a1      	cmp	r1, r4
   832ea:	d105      	bne.n	832f8 <_malloc_r+0xa8>
   832ec:	e00c      	b.n	83308 <_malloc_r+0xb8>
   832ee:	2b00      	cmp	r3, #0
   832f0:	da79      	bge.n	833e6 <_malloc_r+0x196>
   832f2:	68e4      	ldr	r4, [r4, #12]
   832f4:	42a1      	cmp	r1, r4
   832f6:	d007      	beq.n	83308 <_malloc_r+0xb8>
   832f8:	6862      	ldr	r2, [r4, #4]
   832fa:	f022 0203 	bic.w	r2, r2, #3
   832fe:	1b53      	subs	r3, r2, r5
   83300:	2b0f      	cmp	r3, #15
   83302:	ddf4      	ble.n	832ee <_malloc_r+0x9e>
   83304:	f10c 3cff 	add.w	ip, ip, #4294967295
   83308:	f10c 0c01 	add.w	ip, ip, #1
   8330c:	4b9b      	ldr	r3, [pc, #620]	; (8357c <_malloc_r+0x32c>)
   8330e:	693c      	ldr	r4, [r7, #16]
   83310:	f103 0e08 	add.w	lr, r3, #8
   83314:	4574      	cmp	r4, lr
   83316:	f000 817e 	beq.w	83616 <_malloc_r+0x3c6>
   8331a:	6861      	ldr	r1, [r4, #4]
   8331c:	f021 0103 	bic.w	r1, r1, #3
   83320:	1b4a      	subs	r2, r1, r5
   83322:	2a0f      	cmp	r2, #15
   83324:	f300 8164 	bgt.w	835f0 <_malloc_r+0x3a0>
   83328:	2a00      	cmp	r2, #0
   8332a:	f8c3 e014 	str.w	lr, [r3, #20]
   8332e:	f8c3 e010 	str.w	lr, [r3, #16]
   83332:	da69      	bge.n	83408 <_malloc_r+0x1b8>
   83334:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   83338:	f080 813a 	bcs.w	835b0 <_malloc_r+0x360>
   8333c:	08c9      	lsrs	r1, r1, #3
   8333e:	108a      	asrs	r2, r1, #2
   83340:	f04f 0801 	mov.w	r8, #1
   83344:	fa08 f802 	lsl.w	r8, r8, r2
   83348:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   8334c:	685a      	ldr	r2, [r3, #4]
   8334e:	6888      	ldr	r0, [r1, #8]
   83350:	ea48 0202 	orr.w	r2, r8, r2
   83354:	60a0      	str	r0, [r4, #8]
   83356:	60e1      	str	r1, [r4, #12]
   83358:	605a      	str	r2, [r3, #4]
   8335a:	608c      	str	r4, [r1, #8]
   8335c:	60c4      	str	r4, [r0, #12]
   8335e:	ea4f 03ac 	mov.w	r3, ip, asr #2
   83362:	2001      	movs	r0, #1
   83364:	4098      	lsls	r0, r3
   83366:	4290      	cmp	r0, r2
   83368:	d85b      	bhi.n	83422 <_malloc_r+0x1d2>
   8336a:	4202      	tst	r2, r0
   8336c:	d106      	bne.n	8337c <_malloc_r+0x12c>
   8336e:	f02c 0c03 	bic.w	ip, ip, #3
   83372:	0040      	lsls	r0, r0, #1
   83374:	4202      	tst	r2, r0
   83376:	f10c 0c04 	add.w	ip, ip, #4
   8337a:	d0fa      	beq.n	83372 <_malloc_r+0x122>
   8337c:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   83380:	4644      	mov	r4, r8
   83382:	46e1      	mov	r9, ip
   83384:	68e3      	ldr	r3, [r4, #12]
   83386:	429c      	cmp	r4, r3
   83388:	d107      	bne.n	8339a <_malloc_r+0x14a>
   8338a:	e146      	b.n	8361a <_malloc_r+0x3ca>
   8338c:	2a00      	cmp	r2, #0
   8338e:	f280 8157 	bge.w	83640 <_malloc_r+0x3f0>
   83392:	68db      	ldr	r3, [r3, #12]
   83394:	429c      	cmp	r4, r3
   83396:	f000 8140 	beq.w	8361a <_malloc_r+0x3ca>
   8339a:	6859      	ldr	r1, [r3, #4]
   8339c:	f021 0103 	bic.w	r1, r1, #3
   833a0:	1b4a      	subs	r2, r1, r5
   833a2:	2a0f      	cmp	r2, #15
   833a4:	ddf2      	ble.n	8338c <_malloc_r+0x13c>
   833a6:	461c      	mov	r4, r3
   833a8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   833ac:	68d9      	ldr	r1, [r3, #12]
   833ae:	f045 0901 	orr.w	r9, r5, #1
   833b2:	f042 0801 	orr.w	r8, r2, #1
   833b6:	441d      	add	r5, r3
   833b8:	f8c3 9004 	str.w	r9, [r3, #4]
   833bc:	4630      	mov	r0, r6
   833be:	f8cc 100c 	str.w	r1, [ip, #12]
   833c2:	f8c1 c008 	str.w	ip, [r1, #8]
   833c6:	617d      	str	r5, [r7, #20]
   833c8:	613d      	str	r5, [r7, #16]
   833ca:	f8c5 e00c 	str.w	lr, [r5, #12]
   833ce:	f8c5 e008 	str.w	lr, [r5, #8]
   833d2:	f8c5 8004 	str.w	r8, [r5, #4]
   833d6:	50aa      	str	r2, [r5, r2]
   833d8:	f000 fafe 	bl	839d8 <__malloc_unlock>
   833dc:	e764      	b.n	832a8 <_malloc_r+0x58>
   833de:	217e      	movs	r1, #126	; 0x7e
   833e0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   833e4:	e77c      	b.n	832e0 <_malloc_r+0x90>
   833e6:	4422      	add	r2, r4
   833e8:	6850      	ldr	r0, [r2, #4]
   833ea:	68e3      	ldr	r3, [r4, #12]
   833ec:	68a1      	ldr	r1, [r4, #8]
   833ee:	f040 0501 	orr.w	r5, r0, #1
   833f2:	60cb      	str	r3, [r1, #12]
   833f4:	4630      	mov	r0, r6
   833f6:	6099      	str	r1, [r3, #8]
   833f8:	6055      	str	r5, [r2, #4]
   833fa:	f000 faed 	bl	839d8 <__malloc_unlock>
   833fe:	3408      	adds	r4, #8
   83400:	4620      	mov	r0, r4
   83402:	b003      	add	sp, #12
   83404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83408:	4421      	add	r1, r4
   8340a:	684b      	ldr	r3, [r1, #4]
   8340c:	4630      	mov	r0, r6
   8340e:	f043 0301 	orr.w	r3, r3, #1
   83412:	604b      	str	r3, [r1, #4]
   83414:	f000 fae0 	bl	839d8 <__malloc_unlock>
   83418:	3408      	adds	r4, #8
   8341a:	4620      	mov	r0, r4
   8341c:	b003      	add	sp, #12
   8341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83422:	68bc      	ldr	r4, [r7, #8]
   83424:	6863      	ldr	r3, [r4, #4]
   83426:	f023 0903 	bic.w	r9, r3, #3
   8342a:	45a9      	cmp	r9, r5
   8342c:	d304      	bcc.n	83438 <_malloc_r+0x1e8>
   8342e:	ebc5 0309 	rsb	r3, r5, r9
   83432:	2b0f      	cmp	r3, #15
   83434:	f300 8091 	bgt.w	8355a <_malloc_r+0x30a>
   83438:	4b51      	ldr	r3, [pc, #324]	; (83580 <_malloc_r+0x330>)
   8343a:	4a52      	ldr	r2, [pc, #328]	; (83584 <_malloc_r+0x334>)
   8343c:	6819      	ldr	r1, [r3, #0]
   8343e:	6813      	ldr	r3, [r2, #0]
   83440:	eb05 0a01 	add.w	sl, r5, r1
   83444:	3301      	adds	r3, #1
   83446:	eb04 0b09 	add.w	fp, r4, r9
   8344a:	f000 8161 	beq.w	83710 <_malloc_r+0x4c0>
   8344e:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   83452:	f10a 0a0f 	add.w	sl, sl, #15
   83456:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8345a:	f02a 0a0f 	bic.w	sl, sl, #15
   8345e:	4630      	mov	r0, r6
   83460:	4651      	mov	r1, sl
   83462:	9201      	str	r2, [sp, #4]
   83464:	f000 fc9a 	bl	83d9c <_sbrk_r>
   83468:	f1b0 3fff 	cmp.w	r0, #4294967295
   8346c:	4680      	mov	r8, r0
   8346e:	9a01      	ldr	r2, [sp, #4]
   83470:	f000 8101 	beq.w	83676 <_malloc_r+0x426>
   83474:	4583      	cmp	fp, r0
   83476:	f200 80fb 	bhi.w	83670 <_malloc_r+0x420>
   8347a:	f8df c114 	ldr.w	ip, [pc, #276]	; 83590 <_malloc_r+0x340>
   8347e:	45c3      	cmp	fp, r8
   83480:	f8dc 3000 	ldr.w	r3, [ip]
   83484:	4453      	add	r3, sl
   83486:	f8cc 3000 	str.w	r3, [ip]
   8348a:	f000 814a 	beq.w	83722 <_malloc_r+0x4d2>
   8348e:	6812      	ldr	r2, [r2, #0]
   83490:	493c      	ldr	r1, [pc, #240]	; (83584 <_malloc_r+0x334>)
   83492:	3201      	adds	r2, #1
   83494:	bf1b      	ittet	ne
   83496:	ebcb 0b08 	rsbne	fp, fp, r8
   8349a:	445b      	addne	r3, fp
   8349c:	f8c1 8000 	streq.w	r8, [r1]
   834a0:	f8cc 3000 	strne.w	r3, [ip]
   834a4:	f018 0307 	ands.w	r3, r8, #7
   834a8:	f000 8114 	beq.w	836d4 <_malloc_r+0x484>
   834ac:	f1c3 0208 	rsb	r2, r3, #8
   834b0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   834b4:	4490      	add	r8, r2
   834b6:	3308      	adds	r3, #8
   834b8:	44c2      	add	sl, r8
   834ba:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   834be:	ebca 0a03 	rsb	sl, sl, r3
   834c2:	4651      	mov	r1, sl
   834c4:	4630      	mov	r0, r6
   834c6:	f8cd c004 	str.w	ip, [sp, #4]
   834ca:	f000 fc67 	bl	83d9c <_sbrk_r>
   834ce:	1c43      	adds	r3, r0, #1
   834d0:	f8dd c004 	ldr.w	ip, [sp, #4]
   834d4:	f000 8135 	beq.w	83742 <_malloc_r+0x4f2>
   834d8:	ebc8 0200 	rsb	r2, r8, r0
   834dc:	4452      	add	r2, sl
   834de:	f042 0201 	orr.w	r2, r2, #1
   834e2:	f8dc 3000 	ldr.w	r3, [ip]
   834e6:	42bc      	cmp	r4, r7
   834e8:	4453      	add	r3, sl
   834ea:	f8c7 8008 	str.w	r8, [r7, #8]
   834ee:	f8cc 3000 	str.w	r3, [ip]
   834f2:	f8c8 2004 	str.w	r2, [r8, #4]
   834f6:	f8df a098 	ldr.w	sl, [pc, #152]	; 83590 <_malloc_r+0x340>
   834fa:	d015      	beq.n	83528 <_malloc_r+0x2d8>
   834fc:	f1b9 0f0f 	cmp.w	r9, #15
   83500:	f240 80eb 	bls.w	836da <_malloc_r+0x48a>
   83504:	6861      	ldr	r1, [r4, #4]
   83506:	f1a9 020c 	sub.w	r2, r9, #12
   8350a:	f022 0207 	bic.w	r2, r2, #7
   8350e:	f001 0101 	and.w	r1, r1, #1
   83512:	ea42 0e01 	orr.w	lr, r2, r1
   83516:	2005      	movs	r0, #5
   83518:	18a1      	adds	r1, r4, r2
   8351a:	2a0f      	cmp	r2, #15
   8351c:	f8c4 e004 	str.w	lr, [r4, #4]
   83520:	6048      	str	r0, [r1, #4]
   83522:	6088      	str	r0, [r1, #8]
   83524:	f200 8111 	bhi.w	8374a <_malloc_r+0x4fa>
   83528:	4a17      	ldr	r2, [pc, #92]	; (83588 <_malloc_r+0x338>)
   8352a:	68bc      	ldr	r4, [r7, #8]
   8352c:	6811      	ldr	r1, [r2, #0]
   8352e:	428b      	cmp	r3, r1
   83530:	bf88      	it	hi
   83532:	6013      	strhi	r3, [r2, #0]
   83534:	4a15      	ldr	r2, [pc, #84]	; (8358c <_malloc_r+0x33c>)
   83536:	6811      	ldr	r1, [r2, #0]
   83538:	428b      	cmp	r3, r1
   8353a:	bf88      	it	hi
   8353c:	6013      	strhi	r3, [r2, #0]
   8353e:	6862      	ldr	r2, [r4, #4]
   83540:	f022 0203 	bic.w	r2, r2, #3
   83544:	4295      	cmp	r5, r2
   83546:	ebc5 0302 	rsb	r3, r5, r2
   8354a:	d801      	bhi.n	83550 <_malloc_r+0x300>
   8354c:	2b0f      	cmp	r3, #15
   8354e:	dc04      	bgt.n	8355a <_malloc_r+0x30a>
   83550:	4630      	mov	r0, r6
   83552:	f000 fa41 	bl	839d8 <__malloc_unlock>
   83556:	2400      	movs	r4, #0
   83558:	e6a6      	b.n	832a8 <_malloc_r+0x58>
   8355a:	f045 0201 	orr.w	r2, r5, #1
   8355e:	f043 0301 	orr.w	r3, r3, #1
   83562:	4425      	add	r5, r4
   83564:	6062      	str	r2, [r4, #4]
   83566:	4630      	mov	r0, r6
   83568:	60bd      	str	r5, [r7, #8]
   8356a:	606b      	str	r3, [r5, #4]
   8356c:	f000 fa34 	bl	839d8 <__malloc_unlock>
   83570:	3408      	adds	r4, #8
   83572:	4620      	mov	r0, r4
   83574:	b003      	add	sp, #12
   83576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8357a:	bf00      	nop
   8357c:	20070598 	.word	0x20070598
   83580:	20070c1c 	.word	0x20070c1c
   83584:	200709a4 	.word	0x200709a4
   83588:	20070c18 	.word	0x20070c18
   8358c:	20070c14 	.word	0x20070c14
   83590:	20070c20 	.word	0x20070c20
   83594:	f1bc 0f14 	cmp.w	ip, #20
   83598:	d961      	bls.n	8365e <_malloc_r+0x40e>
   8359a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   8359e:	f200 808f 	bhi.w	836c0 <_malloc_r+0x470>
   835a2:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   835a6:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   835aa:	ea4f 014c 	mov.w	r1, ip, lsl #1
   835ae:	e697      	b.n	832e0 <_malloc_r+0x90>
   835b0:	0a4b      	lsrs	r3, r1, #9
   835b2:	2b04      	cmp	r3, #4
   835b4:	d958      	bls.n	83668 <_malloc_r+0x418>
   835b6:	2b14      	cmp	r3, #20
   835b8:	f200 80ad 	bhi.w	83716 <_malloc_r+0x4c6>
   835bc:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   835c0:	0050      	lsls	r0, r2, #1
   835c2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   835c6:	6883      	ldr	r3, [r0, #8]
   835c8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83784 <_malloc_r+0x534>
   835cc:	4283      	cmp	r3, r0
   835ce:	f000 808a 	beq.w	836e6 <_malloc_r+0x496>
   835d2:	685a      	ldr	r2, [r3, #4]
   835d4:	f022 0203 	bic.w	r2, r2, #3
   835d8:	4291      	cmp	r1, r2
   835da:	d202      	bcs.n	835e2 <_malloc_r+0x392>
   835dc:	689b      	ldr	r3, [r3, #8]
   835de:	4298      	cmp	r0, r3
   835e0:	d1f7      	bne.n	835d2 <_malloc_r+0x382>
   835e2:	68d9      	ldr	r1, [r3, #12]
   835e4:	687a      	ldr	r2, [r7, #4]
   835e6:	60e1      	str	r1, [r4, #12]
   835e8:	60a3      	str	r3, [r4, #8]
   835ea:	608c      	str	r4, [r1, #8]
   835ec:	60dc      	str	r4, [r3, #12]
   835ee:	e6b6      	b.n	8335e <_malloc_r+0x10e>
   835f0:	f045 0701 	orr.w	r7, r5, #1
   835f4:	f042 0101 	orr.w	r1, r2, #1
   835f8:	4425      	add	r5, r4
   835fa:	6067      	str	r7, [r4, #4]
   835fc:	4630      	mov	r0, r6
   835fe:	615d      	str	r5, [r3, #20]
   83600:	611d      	str	r5, [r3, #16]
   83602:	f8c5 e00c 	str.w	lr, [r5, #12]
   83606:	f8c5 e008 	str.w	lr, [r5, #8]
   8360a:	6069      	str	r1, [r5, #4]
   8360c:	50aa      	str	r2, [r5, r2]
   8360e:	3408      	adds	r4, #8
   83610:	f000 f9e2 	bl	839d8 <__malloc_unlock>
   83614:	e648      	b.n	832a8 <_malloc_r+0x58>
   83616:	685a      	ldr	r2, [r3, #4]
   83618:	e6a1      	b.n	8335e <_malloc_r+0x10e>
   8361a:	f109 0901 	add.w	r9, r9, #1
   8361e:	f019 0f03 	tst.w	r9, #3
   83622:	f104 0408 	add.w	r4, r4, #8
   83626:	f47f aead 	bne.w	83384 <_malloc_r+0x134>
   8362a:	e02d      	b.n	83688 <_malloc_r+0x438>
   8362c:	f104 0308 	add.w	r3, r4, #8
   83630:	6964      	ldr	r4, [r4, #20]
   83632:	42a3      	cmp	r3, r4
   83634:	bf08      	it	eq
   83636:	f10c 0c02 	addeq.w	ip, ip, #2
   8363a:	f43f ae67 	beq.w	8330c <_malloc_r+0xbc>
   8363e:	e623      	b.n	83288 <_malloc_r+0x38>
   83640:	4419      	add	r1, r3
   83642:	6848      	ldr	r0, [r1, #4]
   83644:	461c      	mov	r4, r3
   83646:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8364a:	68db      	ldr	r3, [r3, #12]
   8364c:	f040 0501 	orr.w	r5, r0, #1
   83650:	604d      	str	r5, [r1, #4]
   83652:	4630      	mov	r0, r6
   83654:	60d3      	str	r3, [r2, #12]
   83656:	609a      	str	r2, [r3, #8]
   83658:	f000 f9be 	bl	839d8 <__malloc_unlock>
   8365c:	e624      	b.n	832a8 <_malloc_r+0x58>
   8365e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83662:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83666:	e63b      	b.n	832e0 <_malloc_r+0x90>
   83668:	098a      	lsrs	r2, r1, #6
   8366a:	3238      	adds	r2, #56	; 0x38
   8366c:	0050      	lsls	r0, r2, #1
   8366e:	e7a8      	b.n	835c2 <_malloc_r+0x372>
   83670:	42bc      	cmp	r4, r7
   83672:	f43f af02 	beq.w	8347a <_malloc_r+0x22a>
   83676:	68bc      	ldr	r4, [r7, #8]
   83678:	6862      	ldr	r2, [r4, #4]
   8367a:	f022 0203 	bic.w	r2, r2, #3
   8367e:	e761      	b.n	83544 <_malloc_r+0x2f4>
   83680:	f8d8 8000 	ldr.w	r8, [r8]
   83684:	4598      	cmp	r8, r3
   83686:	d17a      	bne.n	8377e <_malloc_r+0x52e>
   83688:	f01c 0f03 	tst.w	ip, #3
   8368c:	f1a8 0308 	sub.w	r3, r8, #8
   83690:	f10c 3cff 	add.w	ip, ip, #4294967295
   83694:	d1f4      	bne.n	83680 <_malloc_r+0x430>
   83696:	687b      	ldr	r3, [r7, #4]
   83698:	ea23 0300 	bic.w	r3, r3, r0
   8369c:	607b      	str	r3, [r7, #4]
   8369e:	0040      	lsls	r0, r0, #1
   836a0:	4298      	cmp	r0, r3
   836a2:	f63f aebe 	bhi.w	83422 <_malloc_r+0x1d2>
   836a6:	2800      	cmp	r0, #0
   836a8:	f43f aebb 	beq.w	83422 <_malloc_r+0x1d2>
   836ac:	4203      	tst	r3, r0
   836ae:	46cc      	mov	ip, r9
   836b0:	f47f ae64 	bne.w	8337c <_malloc_r+0x12c>
   836b4:	0040      	lsls	r0, r0, #1
   836b6:	4203      	tst	r3, r0
   836b8:	f10c 0c04 	add.w	ip, ip, #4
   836bc:	d0fa      	beq.n	836b4 <_malloc_r+0x464>
   836be:	e65d      	b.n	8337c <_malloc_r+0x12c>
   836c0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   836c4:	d819      	bhi.n	836fa <_malloc_r+0x4aa>
   836c6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   836ca:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   836ce:	ea4f 014c 	mov.w	r1, ip, lsl #1
   836d2:	e605      	b.n	832e0 <_malloc_r+0x90>
   836d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   836d8:	e6ee      	b.n	834b8 <_malloc_r+0x268>
   836da:	2301      	movs	r3, #1
   836dc:	f8c8 3004 	str.w	r3, [r8, #4]
   836e0:	4644      	mov	r4, r8
   836e2:	2200      	movs	r2, #0
   836e4:	e72e      	b.n	83544 <_malloc_r+0x2f4>
   836e6:	1092      	asrs	r2, r2, #2
   836e8:	2001      	movs	r0, #1
   836ea:	4090      	lsls	r0, r2
   836ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
   836f0:	4619      	mov	r1, r3
   836f2:	4302      	orrs	r2, r0
   836f4:	f8c8 2004 	str.w	r2, [r8, #4]
   836f8:	e775      	b.n	835e6 <_malloc_r+0x396>
   836fa:	f240 5354 	movw	r3, #1364	; 0x554
   836fe:	459c      	cmp	ip, r3
   83700:	d81b      	bhi.n	8373a <_malloc_r+0x4ea>
   83702:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   83706:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8370a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8370e:	e5e7      	b.n	832e0 <_malloc_r+0x90>
   83710:	f10a 0a10 	add.w	sl, sl, #16
   83714:	e6a3      	b.n	8345e <_malloc_r+0x20e>
   83716:	2b54      	cmp	r3, #84	; 0x54
   83718:	d81f      	bhi.n	8375a <_malloc_r+0x50a>
   8371a:	0b0a      	lsrs	r2, r1, #12
   8371c:	326e      	adds	r2, #110	; 0x6e
   8371e:	0050      	lsls	r0, r2, #1
   83720:	e74f      	b.n	835c2 <_malloc_r+0x372>
   83722:	f3cb 010b 	ubfx	r1, fp, #0, #12
   83726:	2900      	cmp	r1, #0
   83728:	f47f aeb1 	bne.w	8348e <_malloc_r+0x23e>
   8372c:	eb0a 0109 	add.w	r1, sl, r9
   83730:	68ba      	ldr	r2, [r7, #8]
   83732:	f041 0101 	orr.w	r1, r1, #1
   83736:	6051      	str	r1, [r2, #4]
   83738:	e6f6      	b.n	83528 <_malloc_r+0x2d8>
   8373a:	21fc      	movs	r1, #252	; 0xfc
   8373c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83740:	e5ce      	b.n	832e0 <_malloc_r+0x90>
   83742:	2201      	movs	r2, #1
   83744:	f04f 0a00 	mov.w	sl, #0
   83748:	e6cb      	b.n	834e2 <_malloc_r+0x292>
   8374a:	f104 0108 	add.w	r1, r4, #8
   8374e:	4630      	mov	r0, r6
   83750:	f7ff fa80 	bl	82c54 <_free_r>
   83754:	f8da 3000 	ldr.w	r3, [sl]
   83758:	e6e6      	b.n	83528 <_malloc_r+0x2d8>
   8375a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8375e:	d803      	bhi.n	83768 <_malloc_r+0x518>
   83760:	0bca      	lsrs	r2, r1, #15
   83762:	3277      	adds	r2, #119	; 0x77
   83764:	0050      	lsls	r0, r2, #1
   83766:	e72c      	b.n	835c2 <_malloc_r+0x372>
   83768:	f240 5254 	movw	r2, #1364	; 0x554
   8376c:	4293      	cmp	r3, r2
   8376e:	d803      	bhi.n	83778 <_malloc_r+0x528>
   83770:	0c8a      	lsrs	r2, r1, #18
   83772:	327c      	adds	r2, #124	; 0x7c
   83774:	0050      	lsls	r0, r2, #1
   83776:	e724      	b.n	835c2 <_malloc_r+0x372>
   83778:	20fc      	movs	r0, #252	; 0xfc
   8377a:	227e      	movs	r2, #126	; 0x7e
   8377c:	e721      	b.n	835c2 <_malloc_r+0x372>
   8377e:	687b      	ldr	r3, [r7, #4]
   83780:	e78d      	b.n	8369e <_malloc_r+0x44e>
   83782:	bf00      	nop
   83784:	20070598 	.word	0x20070598

00083788 <memchr>:
   83788:	0783      	lsls	r3, r0, #30
   8378a:	b470      	push	{r4, r5, r6}
   8378c:	b2c9      	uxtb	r1, r1
   8378e:	d040      	beq.n	83812 <memchr+0x8a>
   83790:	1e54      	subs	r4, r2, #1
   83792:	b32a      	cbz	r2, 837e0 <memchr+0x58>
   83794:	7803      	ldrb	r3, [r0, #0]
   83796:	428b      	cmp	r3, r1
   83798:	d023      	beq.n	837e2 <memchr+0x5a>
   8379a:	1c43      	adds	r3, r0, #1
   8379c:	e004      	b.n	837a8 <memchr+0x20>
   8379e:	b1fc      	cbz	r4, 837e0 <memchr+0x58>
   837a0:	7805      	ldrb	r5, [r0, #0]
   837a2:	4614      	mov	r4, r2
   837a4:	428d      	cmp	r5, r1
   837a6:	d01c      	beq.n	837e2 <memchr+0x5a>
   837a8:	f013 0f03 	tst.w	r3, #3
   837ac:	4618      	mov	r0, r3
   837ae:	f104 32ff 	add.w	r2, r4, #4294967295
   837b2:	f103 0301 	add.w	r3, r3, #1
   837b6:	d1f2      	bne.n	8379e <memchr+0x16>
   837b8:	2c03      	cmp	r4, #3
   837ba:	d814      	bhi.n	837e6 <memchr+0x5e>
   837bc:	1e65      	subs	r5, r4, #1
   837be:	b354      	cbz	r4, 83816 <memchr+0x8e>
   837c0:	7803      	ldrb	r3, [r0, #0]
   837c2:	428b      	cmp	r3, r1
   837c4:	d00d      	beq.n	837e2 <memchr+0x5a>
   837c6:	1c42      	adds	r2, r0, #1
   837c8:	2300      	movs	r3, #0
   837ca:	e002      	b.n	837d2 <memchr+0x4a>
   837cc:	7804      	ldrb	r4, [r0, #0]
   837ce:	428c      	cmp	r4, r1
   837d0:	d007      	beq.n	837e2 <memchr+0x5a>
   837d2:	42ab      	cmp	r3, r5
   837d4:	4610      	mov	r0, r2
   837d6:	f103 0301 	add.w	r3, r3, #1
   837da:	f102 0201 	add.w	r2, r2, #1
   837de:	d1f5      	bne.n	837cc <memchr+0x44>
   837e0:	2000      	movs	r0, #0
   837e2:	bc70      	pop	{r4, r5, r6}
   837e4:	4770      	bx	lr
   837e6:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   837ea:	4603      	mov	r3, r0
   837ec:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   837f0:	681a      	ldr	r2, [r3, #0]
   837f2:	4618      	mov	r0, r3
   837f4:	4072      	eors	r2, r6
   837f6:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   837fa:	ea25 0202 	bic.w	r2, r5, r2
   837fe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   83802:	f103 0304 	add.w	r3, r3, #4
   83806:	d1d9      	bne.n	837bc <memchr+0x34>
   83808:	3c04      	subs	r4, #4
   8380a:	2c03      	cmp	r4, #3
   8380c:	4618      	mov	r0, r3
   8380e:	d8ef      	bhi.n	837f0 <memchr+0x68>
   83810:	e7d4      	b.n	837bc <memchr+0x34>
   83812:	4614      	mov	r4, r2
   83814:	e7d0      	b.n	837b8 <memchr+0x30>
   83816:	4620      	mov	r0, r4
   83818:	e7e3      	b.n	837e2 <memchr+0x5a>
   8381a:	bf00      	nop

0008381c <memcpy>:
   8381c:	4684      	mov	ip, r0
   8381e:	ea41 0300 	orr.w	r3, r1, r0
   83822:	f013 0303 	ands.w	r3, r3, #3
   83826:	d149      	bne.n	838bc <memcpy+0xa0>
   83828:	3a40      	subs	r2, #64	; 0x40
   8382a:	d323      	bcc.n	83874 <memcpy+0x58>
   8382c:	680b      	ldr	r3, [r1, #0]
   8382e:	6003      	str	r3, [r0, #0]
   83830:	684b      	ldr	r3, [r1, #4]
   83832:	6043      	str	r3, [r0, #4]
   83834:	688b      	ldr	r3, [r1, #8]
   83836:	6083      	str	r3, [r0, #8]
   83838:	68cb      	ldr	r3, [r1, #12]
   8383a:	60c3      	str	r3, [r0, #12]
   8383c:	690b      	ldr	r3, [r1, #16]
   8383e:	6103      	str	r3, [r0, #16]
   83840:	694b      	ldr	r3, [r1, #20]
   83842:	6143      	str	r3, [r0, #20]
   83844:	698b      	ldr	r3, [r1, #24]
   83846:	6183      	str	r3, [r0, #24]
   83848:	69cb      	ldr	r3, [r1, #28]
   8384a:	61c3      	str	r3, [r0, #28]
   8384c:	6a0b      	ldr	r3, [r1, #32]
   8384e:	6203      	str	r3, [r0, #32]
   83850:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83852:	6243      	str	r3, [r0, #36]	; 0x24
   83854:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83856:	6283      	str	r3, [r0, #40]	; 0x28
   83858:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8385a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8385c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8385e:	6303      	str	r3, [r0, #48]	; 0x30
   83860:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83862:	6343      	str	r3, [r0, #52]	; 0x34
   83864:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83866:	6383      	str	r3, [r0, #56]	; 0x38
   83868:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8386a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8386c:	3040      	adds	r0, #64	; 0x40
   8386e:	3140      	adds	r1, #64	; 0x40
   83870:	3a40      	subs	r2, #64	; 0x40
   83872:	d2db      	bcs.n	8382c <memcpy+0x10>
   83874:	3230      	adds	r2, #48	; 0x30
   83876:	d30b      	bcc.n	83890 <memcpy+0x74>
   83878:	680b      	ldr	r3, [r1, #0]
   8387a:	6003      	str	r3, [r0, #0]
   8387c:	684b      	ldr	r3, [r1, #4]
   8387e:	6043      	str	r3, [r0, #4]
   83880:	688b      	ldr	r3, [r1, #8]
   83882:	6083      	str	r3, [r0, #8]
   83884:	68cb      	ldr	r3, [r1, #12]
   83886:	60c3      	str	r3, [r0, #12]
   83888:	3010      	adds	r0, #16
   8388a:	3110      	adds	r1, #16
   8388c:	3a10      	subs	r2, #16
   8388e:	d2f3      	bcs.n	83878 <memcpy+0x5c>
   83890:	320c      	adds	r2, #12
   83892:	d305      	bcc.n	838a0 <memcpy+0x84>
   83894:	f851 3b04 	ldr.w	r3, [r1], #4
   83898:	f840 3b04 	str.w	r3, [r0], #4
   8389c:	3a04      	subs	r2, #4
   8389e:	d2f9      	bcs.n	83894 <memcpy+0x78>
   838a0:	3204      	adds	r2, #4
   838a2:	d008      	beq.n	838b6 <memcpy+0x9a>
   838a4:	07d2      	lsls	r2, r2, #31
   838a6:	bf1c      	itt	ne
   838a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   838ac:	f800 3b01 	strbne.w	r3, [r0], #1
   838b0:	d301      	bcc.n	838b6 <memcpy+0x9a>
   838b2:	880b      	ldrh	r3, [r1, #0]
   838b4:	8003      	strh	r3, [r0, #0]
   838b6:	4660      	mov	r0, ip
   838b8:	4770      	bx	lr
   838ba:	bf00      	nop
   838bc:	2a08      	cmp	r2, #8
   838be:	d313      	bcc.n	838e8 <memcpy+0xcc>
   838c0:	078b      	lsls	r3, r1, #30
   838c2:	d0b1      	beq.n	83828 <memcpy+0xc>
   838c4:	f010 0303 	ands.w	r3, r0, #3
   838c8:	d0ae      	beq.n	83828 <memcpy+0xc>
   838ca:	f1c3 0304 	rsb	r3, r3, #4
   838ce:	1ad2      	subs	r2, r2, r3
   838d0:	07db      	lsls	r3, r3, #31
   838d2:	bf1c      	itt	ne
   838d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   838d8:	f800 3b01 	strbne.w	r3, [r0], #1
   838dc:	d3a4      	bcc.n	83828 <memcpy+0xc>
   838de:	f831 3b02 	ldrh.w	r3, [r1], #2
   838e2:	f820 3b02 	strh.w	r3, [r0], #2
   838e6:	e79f      	b.n	83828 <memcpy+0xc>
   838e8:	3a04      	subs	r2, #4
   838ea:	d3d9      	bcc.n	838a0 <memcpy+0x84>
   838ec:	3a01      	subs	r2, #1
   838ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   838f2:	f800 3b01 	strb.w	r3, [r0], #1
   838f6:	d2f9      	bcs.n	838ec <memcpy+0xd0>
   838f8:	780b      	ldrb	r3, [r1, #0]
   838fa:	7003      	strb	r3, [r0, #0]
   838fc:	784b      	ldrb	r3, [r1, #1]
   838fe:	7043      	strb	r3, [r0, #1]
   83900:	788b      	ldrb	r3, [r1, #2]
   83902:	7083      	strb	r3, [r0, #2]
   83904:	4660      	mov	r0, ip
   83906:	4770      	bx	lr

00083908 <memmove>:
   83908:	4288      	cmp	r0, r1
   8390a:	b4f0      	push	{r4, r5, r6, r7}
   8390c:	d910      	bls.n	83930 <memmove+0x28>
   8390e:	188c      	adds	r4, r1, r2
   83910:	42a0      	cmp	r0, r4
   83912:	d20d      	bcs.n	83930 <memmove+0x28>
   83914:	1885      	adds	r5, r0, r2
   83916:	1e53      	subs	r3, r2, #1
   83918:	b142      	cbz	r2, 8392c <memmove+0x24>
   8391a:	4621      	mov	r1, r4
   8391c:	462a      	mov	r2, r5
   8391e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83922:	3b01      	subs	r3, #1
   83924:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83928:	1c5c      	adds	r4, r3, #1
   8392a:	d1f8      	bne.n	8391e <memmove+0x16>
   8392c:	bcf0      	pop	{r4, r5, r6, r7}
   8392e:	4770      	bx	lr
   83930:	2a0f      	cmp	r2, #15
   83932:	d944      	bls.n	839be <memmove+0xb6>
   83934:	ea40 0301 	orr.w	r3, r0, r1
   83938:	079b      	lsls	r3, r3, #30
   8393a:	d144      	bne.n	839c6 <memmove+0xbe>
   8393c:	f1a2 0710 	sub.w	r7, r2, #16
   83940:	093f      	lsrs	r7, r7, #4
   83942:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   83946:	3610      	adds	r6, #16
   83948:	460c      	mov	r4, r1
   8394a:	4603      	mov	r3, r0
   8394c:	6825      	ldr	r5, [r4, #0]
   8394e:	3310      	adds	r3, #16
   83950:	f843 5c10 	str.w	r5, [r3, #-16]
   83954:	6865      	ldr	r5, [r4, #4]
   83956:	3410      	adds	r4, #16
   83958:	f843 5c0c 	str.w	r5, [r3, #-12]
   8395c:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83960:	f843 5c08 	str.w	r5, [r3, #-8]
   83964:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83968:	f843 5c04 	str.w	r5, [r3, #-4]
   8396c:	42b3      	cmp	r3, r6
   8396e:	d1ed      	bne.n	8394c <memmove+0x44>
   83970:	1c7b      	adds	r3, r7, #1
   83972:	f002 0c0f 	and.w	ip, r2, #15
   83976:	011b      	lsls	r3, r3, #4
   83978:	f1bc 0f03 	cmp.w	ip, #3
   8397c:	4419      	add	r1, r3
   8397e:	4403      	add	r3, r0
   83980:	d923      	bls.n	839ca <memmove+0xc2>
   83982:	460e      	mov	r6, r1
   83984:	461d      	mov	r5, r3
   83986:	4664      	mov	r4, ip
   83988:	f856 7b04 	ldr.w	r7, [r6], #4
   8398c:	3c04      	subs	r4, #4
   8398e:	2c03      	cmp	r4, #3
   83990:	f845 7b04 	str.w	r7, [r5], #4
   83994:	d8f8      	bhi.n	83988 <memmove+0x80>
   83996:	f1ac 0404 	sub.w	r4, ip, #4
   8399a:	f024 0403 	bic.w	r4, r4, #3
   8399e:	3404      	adds	r4, #4
   839a0:	f002 0203 	and.w	r2, r2, #3
   839a4:	4423      	add	r3, r4
   839a6:	4421      	add	r1, r4
   839a8:	2a00      	cmp	r2, #0
   839aa:	d0bf      	beq.n	8392c <memmove+0x24>
   839ac:	441a      	add	r2, r3
   839ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   839b2:	f803 4b01 	strb.w	r4, [r3], #1
   839b6:	4293      	cmp	r3, r2
   839b8:	d1f9      	bne.n	839ae <memmove+0xa6>
   839ba:	bcf0      	pop	{r4, r5, r6, r7}
   839bc:	4770      	bx	lr
   839be:	4603      	mov	r3, r0
   839c0:	2a00      	cmp	r2, #0
   839c2:	d1f3      	bne.n	839ac <memmove+0xa4>
   839c4:	e7b2      	b.n	8392c <memmove+0x24>
   839c6:	4603      	mov	r3, r0
   839c8:	e7f0      	b.n	839ac <memmove+0xa4>
   839ca:	4662      	mov	r2, ip
   839cc:	2a00      	cmp	r2, #0
   839ce:	d1ed      	bne.n	839ac <memmove+0xa4>
   839d0:	e7ac      	b.n	8392c <memmove+0x24>
   839d2:	bf00      	nop

000839d4 <__malloc_lock>:
   839d4:	4770      	bx	lr
   839d6:	bf00      	nop

000839d8 <__malloc_unlock>:
   839d8:	4770      	bx	lr
   839da:	bf00      	nop

000839dc <_realloc_r>:
   839dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   839e0:	460c      	mov	r4, r1
   839e2:	b083      	sub	sp, #12
   839e4:	4690      	mov	r8, r2
   839e6:	4681      	mov	r9, r0
   839e8:	2900      	cmp	r1, #0
   839ea:	f000 80ba 	beq.w	83b62 <_realloc_r+0x186>
   839ee:	f7ff fff1 	bl	839d4 <__malloc_lock>
   839f2:	f108 060b 	add.w	r6, r8, #11
   839f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   839fa:	2e16      	cmp	r6, #22
   839fc:	f023 0503 	bic.w	r5, r3, #3
   83a00:	f1a4 0708 	sub.w	r7, r4, #8
   83a04:	d84b      	bhi.n	83a9e <_realloc_r+0xc2>
   83a06:	2110      	movs	r1, #16
   83a08:	460e      	mov	r6, r1
   83a0a:	45b0      	cmp	r8, r6
   83a0c:	d84c      	bhi.n	83aa8 <_realloc_r+0xcc>
   83a0e:	428d      	cmp	r5, r1
   83a10:	da51      	bge.n	83ab6 <_realloc_r+0xda>
   83a12:	f8df b384 	ldr.w	fp, [pc, #900]	; 83d98 <_realloc_r+0x3bc>
   83a16:	1978      	adds	r0, r7, r5
   83a18:	f8db e008 	ldr.w	lr, [fp, #8]
   83a1c:	4586      	cmp	lr, r0
   83a1e:	f000 80a6 	beq.w	83b6e <_realloc_r+0x192>
   83a22:	6842      	ldr	r2, [r0, #4]
   83a24:	f022 0c01 	bic.w	ip, r2, #1
   83a28:	4484      	add	ip, r0
   83a2a:	f8dc c004 	ldr.w	ip, [ip, #4]
   83a2e:	f01c 0f01 	tst.w	ip, #1
   83a32:	d054      	beq.n	83ade <_realloc_r+0x102>
   83a34:	2200      	movs	r2, #0
   83a36:	4610      	mov	r0, r2
   83a38:	07db      	lsls	r3, r3, #31
   83a3a:	d46f      	bmi.n	83b1c <_realloc_r+0x140>
   83a3c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83a40:	ebc3 0a07 	rsb	sl, r3, r7
   83a44:	f8da 3004 	ldr.w	r3, [sl, #4]
   83a48:	f023 0303 	bic.w	r3, r3, #3
   83a4c:	442b      	add	r3, r5
   83a4e:	2800      	cmp	r0, #0
   83a50:	d062      	beq.n	83b18 <_realloc_r+0x13c>
   83a52:	4570      	cmp	r0, lr
   83a54:	f000 80e9 	beq.w	83c2a <_realloc_r+0x24e>
   83a58:	eb02 0e03 	add.w	lr, r2, r3
   83a5c:	458e      	cmp	lr, r1
   83a5e:	db5b      	blt.n	83b18 <_realloc_r+0x13c>
   83a60:	68c3      	ldr	r3, [r0, #12]
   83a62:	6882      	ldr	r2, [r0, #8]
   83a64:	46d0      	mov	r8, sl
   83a66:	60d3      	str	r3, [r2, #12]
   83a68:	609a      	str	r2, [r3, #8]
   83a6a:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83a6e:	f8da 300c 	ldr.w	r3, [sl, #12]
   83a72:	1f2a      	subs	r2, r5, #4
   83a74:	2a24      	cmp	r2, #36	; 0x24
   83a76:	60cb      	str	r3, [r1, #12]
   83a78:	6099      	str	r1, [r3, #8]
   83a7a:	f200 8123 	bhi.w	83cc4 <_realloc_r+0x2e8>
   83a7e:	2a13      	cmp	r2, #19
   83a80:	f240 80b0 	bls.w	83be4 <_realloc_r+0x208>
   83a84:	6823      	ldr	r3, [r4, #0]
   83a86:	2a1b      	cmp	r2, #27
   83a88:	f8ca 3008 	str.w	r3, [sl, #8]
   83a8c:	6863      	ldr	r3, [r4, #4]
   83a8e:	f8ca 300c 	str.w	r3, [sl, #12]
   83a92:	f200 812b 	bhi.w	83cec <_realloc_r+0x310>
   83a96:	3408      	adds	r4, #8
   83a98:	f10a 0310 	add.w	r3, sl, #16
   83a9c:	e0a3      	b.n	83be6 <_realloc_r+0x20a>
   83a9e:	f026 0607 	bic.w	r6, r6, #7
   83aa2:	2e00      	cmp	r6, #0
   83aa4:	4631      	mov	r1, r6
   83aa6:	dab0      	bge.n	83a0a <_realloc_r+0x2e>
   83aa8:	230c      	movs	r3, #12
   83aaa:	2000      	movs	r0, #0
   83aac:	f8c9 3000 	str.w	r3, [r9]
   83ab0:	b003      	add	sp, #12
   83ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ab6:	46a0      	mov	r8, r4
   83ab8:	1baa      	subs	r2, r5, r6
   83aba:	2a0f      	cmp	r2, #15
   83abc:	f003 0301 	and.w	r3, r3, #1
   83ac0:	d81a      	bhi.n	83af8 <_realloc_r+0x11c>
   83ac2:	432b      	orrs	r3, r5
   83ac4:	607b      	str	r3, [r7, #4]
   83ac6:	443d      	add	r5, r7
   83ac8:	686b      	ldr	r3, [r5, #4]
   83aca:	f043 0301 	orr.w	r3, r3, #1
   83ace:	606b      	str	r3, [r5, #4]
   83ad0:	4648      	mov	r0, r9
   83ad2:	f7ff ff81 	bl	839d8 <__malloc_unlock>
   83ad6:	4640      	mov	r0, r8
   83ad8:	b003      	add	sp, #12
   83ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ade:	f022 0203 	bic.w	r2, r2, #3
   83ae2:	eb02 0c05 	add.w	ip, r2, r5
   83ae6:	458c      	cmp	ip, r1
   83ae8:	dba6      	blt.n	83a38 <_realloc_r+0x5c>
   83aea:	68c2      	ldr	r2, [r0, #12]
   83aec:	6881      	ldr	r1, [r0, #8]
   83aee:	46a0      	mov	r8, r4
   83af0:	60ca      	str	r2, [r1, #12]
   83af2:	4665      	mov	r5, ip
   83af4:	6091      	str	r1, [r2, #8]
   83af6:	e7df      	b.n	83ab8 <_realloc_r+0xdc>
   83af8:	19b9      	adds	r1, r7, r6
   83afa:	4333      	orrs	r3, r6
   83afc:	f042 0001 	orr.w	r0, r2, #1
   83b00:	607b      	str	r3, [r7, #4]
   83b02:	440a      	add	r2, r1
   83b04:	6048      	str	r0, [r1, #4]
   83b06:	6853      	ldr	r3, [r2, #4]
   83b08:	3108      	adds	r1, #8
   83b0a:	f043 0301 	orr.w	r3, r3, #1
   83b0e:	6053      	str	r3, [r2, #4]
   83b10:	4648      	mov	r0, r9
   83b12:	f7ff f89f 	bl	82c54 <_free_r>
   83b16:	e7db      	b.n	83ad0 <_realloc_r+0xf4>
   83b18:	428b      	cmp	r3, r1
   83b1a:	da33      	bge.n	83b84 <_realloc_r+0x1a8>
   83b1c:	4641      	mov	r1, r8
   83b1e:	4648      	mov	r0, r9
   83b20:	f7ff fb96 	bl	83250 <_malloc_r>
   83b24:	4680      	mov	r8, r0
   83b26:	2800      	cmp	r0, #0
   83b28:	d0d2      	beq.n	83ad0 <_realloc_r+0xf4>
   83b2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83b2e:	f1a0 0108 	sub.w	r1, r0, #8
   83b32:	f023 0201 	bic.w	r2, r3, #1
   83b36:	443a      	add	r2, r7
   83b38:	4291      	cmp	r1, r2
   83b3a:	f000 80bc 	beq.w	83cb6 <_realloc_r+0x2da>
   83b3e:	1f2a      	subs	r2, r5, #4
   83b40:	2a24      	cmp	r2, #36	; 0x24
   83b42:	d86e      	bhi.n	83c22 <_realloc_r+0x246>
   83b44:	2a13      	cmp	r2, #19
   83b46:	d842      	bhi.n	83bce <_realloc_r+0x1f2>
   83b48:	4603      	mov	r3, r0
   83b4a:	4622      	mov	r2, r4
   83b4c:	6811      	ldr	r1, [r2, #0]
   83b4e:	6019      	str	r1, [r3, #0]
   83b50:	6851      	ldr	r1, [r2, #4]
   83b52:	6059      	str	r1, [r3, #4]
   83b54:	6892      	ldr	r2, [r2, #8]
   83b56:	609a      	str	r2, [r3, #8]
   83b58:	4621      	mov	r1, r4
   83b5a:	4648      	mov	r0, r9
   83b5c:	f7ff f87a 	bl	82c54 <_free_r>
   83b60:	e7b6      	b.n	83ad0 <_realloc_r+0xf4>
   83b62:	4611      	mov	r1, r2
   83b64:	b003      	add	sp, #12
   83b66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83b6a:	f7ff bb71 	b.w	83250 <_malloc_r>
   83b6e:	f8de 2004 	ldr.w	r2, [lr, #4]
   83b72:	f106 0c10 	add.w	ip, r6, #16
   83b76:	f022 0203 	bic.w	r2, r2, #3
   83b7a:	1950      	adds	r0, r2, r5
   83b7c:	4560      	cmp	r0, ip
   83b7e:	da3d      	bge.n	83bfc <_realloc_r+0x220>
   83b80:	4670      	mov	r0, lr
   83b82:	e759      	b.n	83a38 <_realloc_r+0x5c>
   83b84:	46d0      	mov	r8, sl
   83b86:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83b8a:	f8da 100c 	ldr.w	r1, [sl, #12]
   83b8e:	1f2a      	subs	r2, r5, #4
   83b90:	2a24      	cmp	r2, #36	; 0x24
   83b92:	60c1      	str	r1, [r0, #12]
   83b94:	6088      	str	r0, [r1, #8]
   83b96:	f200 80a0 	bhi.w	83cda <_realloc_r+0x2fe>
   83b9a:	2a13      	cmp	r2, #19
   83b9c:	f240 809b 	bls.w	83cd6 <_realloc_r+0x2fa>
   83ba0:	6821      	ldr	r1, [r4, #0]
   83ba2:	2a1b      	cmp	r2, #27
   83ba4:	f8ca 1008 	str.w	r1, [sl, #8]
   83ba8:	6861      	ldr	r1, [r4, #4]
   83baa:	f8ca 100c 	str.w	r1, [sl, #12]
   83bae:	f200 80b2 	bhi.w	83d16 <_realloc_r+0x33a>
   83bb2:	3408      	adds	r4, #8
   83bb4:	f10a 0210 	add.w	r2, sl, #16
   83bb8:	6821      	ldr	r1, [r4, #0]
   83bba:	461d      	mov	r5, r3
   83bbc:	6011      	str	r1, [r2, #0]
   83bbe:	6861      	ldr	r1, [r4, #4]
   83bc0:	4657      	mov	r7, sl
   83bc2:	6051      	str	r1, [r2, #4]
   83bc4:	68a3      	ldr	r3, [r4, #8]
   83bc6:	6093      	str	r3, [r2, #8]
   83bc8:	f8da 3004 	ldr.w	r3, [sl, #4]
   83bcc:	e774      	b.n	83ab8 <_realloc_r+0xdc>
   83bce:	6823      	ldr	r3, [r4, #0]
   83bd0:	2a1b      	cmp	r2, #27
   83bd2:	6003      	str	r3, [r0, #0]
   83bd4:	6863      	ldr	r3, [r4, #4]
   83bd6:	6043      	str	r3, [r0, #4]
   83bd8:	d862      	bhi.n	83ca0 <_realloc_r+0x2c4>
   83bda:	f100 0308 	add.w	r3, r0, #8
   83bde:	f104 0208 	add.w	r2, r4, #8
   83be2:	e7b3      	b.n	83b4c <_realloc_r+0x170>
   83be4:	4643      	mov	r3, r8
   83be6:	6822      	ldr	r2, [r4, #0]
   83be8:	4675      	mov	r5, lr
   83bea:	601a      	str	r2, [r3, #0]
   83bec:	6862      	ldr	r2, [r4, #4]
   83bee:	4657      	mov	r7, sl
   83bf0:	605a      	str	r2, [r3, #4]
   83bf2:	68a2      	ldr	r2, [r4, #8]
   83bf4:	609a      	str	r2, [r3, #8]
   83bf6:	f8da 3004 	ldr.w	r3, [sl, #4]
   83bfa:	e75d      	b.n	83ab8 <_realloc_r+0xdc>
   83bfc:	1b83      	subs	r3, r0, r6
   83bfe:	4437      	add	r7, r6
   83c00:	f043 0301 	orr.w	r3, r3, #1
   83c04:	f8cb 7008 	str.w	r7, [fp, #8]
   83c08:	607b      	str	r3, [r7, #4]
   83c0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83c0e:	4648      	mov	r0, r9
   83c10:	f003 0301 	and.w	r3, r3, #1
   83c14:	431e      	orrs	r6, r3
   83c16:	f844 6c04 	str.w	r6, [r4, #-4]
   83c1a:	f7ff fedd 	bl	839d8 <__malloc_unlock>
   83c1e:	4620      	mov	r0, r4
   83c20:	e75a      	b.n	83ad8 <_realloc_r+0xfc>
   83c22:	4621      	mov	r1, r4
   83c24:	f7ff fe70 	bl	83908 <memmove>
   83c28:	e796      	b.n	83b58 <_realloc_r+0x17c>
   83c2a:	eb02 0c03 	add.w	ip, r2, r3
   83c2e:	f106 0210 	add.w	r2, r6, #16
   83c32:	4594      	cmp	ip, r2
   83c34:	f6ff af70 	blt.w	83b18 <_realloc_r+0x13c>
   83c38:	4657      	mov	r7, sl
   83c3a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83c3e:	f8da 300c 	ldr.w	r3, [sl, #12]
   83c42:	1f2a      	subs	r2, r5, #4
   83c44:	2a24      	cmp	r2, #36	; 0x24
   83c46:	60cb      	str	r3, [r1, #12]
   83c48:	6099      	str	r1, [r3, #8]
   83c4a:	f200 8086 	bhi.w	83d5a <_realloc_r+0x37e>
   83c4e:	2a13      	cmp	r2, #19
   83c50:	d977      	bls.n	83d42 <_realloc_r+0x366>
   83c52:	6823      	ldr	r3, [r4, #0]
   83c54:	2a1b      	cmp	r2, #27
   83c56:	f8ca 3008 	str.w	r3, [sl, #8]
   83c5a:	6863      	ldr	r3, [r4, #4]
   83c5c:	f8ca 300c 	str.w	r3, [sl, #12]
   83c60:	f200 8084 	bhi.w	83d6c <_realloc_r+0x390>
   83c64:	3408      	adds	r4, #8
   83c66:	f10a 0310 	add.w	r3, sl, #16
   83c6a:	6822      	ldr	r2, [r4, #0]
   83c6c:	601a      	str	r2, [r3, #0]
   83c6e:	6862      	ldr	r2, [r4, #4]
   83c70:	605a      	str	r2, [r3, #4]
   83c72:	68a2      	ldr	r2, [r4, #8]
   83c74:	609a      	str	r2, [r3, #8]
   83c76:	ebc6 020c 	rsb	r2, r6, ip
   83c7a:	eb0a 0306 	add.w	r3, sl, r6
   83c7e:	f042 0201 	orr.w	r2, r2, #1
   83c82:	f8cb 3008 	str.w	r3, [fp, #8]
   83c86:	605a      	str	r2, [r3, #4]
   83c88:	f8da 3004 	ldr.w	r3, [sl, #4]
   83c8c:	4648      	mov	r0, r9
   83c8e:	f003 0301 	and.w	r3, r3, #1
   83c92:	431e      	orrs	r6, r3
   83c94:	f8ca 6004 	str.w	r6, [sl, #4]
   83c98:	f7ff fe9e 	bl	839d8 <__malloc_unlock>
   83c9c:	4638      	mov	r0, r7
   83c9e:	e71b      	b.n	83ad8 <_realloc_r+0xfc>
   83ca0:	68a3      	ldr	r3, [r4, #8]
   83ca2:	2a24      	cmp	r2, #36	; 0x24
   83ca4:	6083      	str	r3, [r0, #8]
   83ca6:	68e3      	ldr	r3, [r4, #12]
   83ca8:	60c3      	str	r3, [r0, #12]
   83caa:	d02b      	beq.n	83d04 <_realloc_r+0x328>
   83cac:	f100 0310 	add.w	r3, r0, #16
   83cb0:	f104 0210 	add.w	r2, r4, #16
   83cb4:	e74a      	b.n	83b4c <_realloc_r+0x170>
   83cb6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83cba:	46a0      	mov	r8, r4
   83cbc:	f022 0203 	bic.w	r2, r2, #3
   83cc0:	4415      	add	r5, r2
   83cc2:	e6f9      	b.n	83ab8 <_realloc_r+0xdc>
   83cc4:	4621      	mov	r1, r4
   83cc6:	4640      	mov	r0, r8
   83cc8:	4675      	mov	r5, lr
   83cca:	4657      	mov	r7, sl
   83ccc:	f7ff fe1c 	bl	83908 <memmove>
   83cd0:	f8da 3004 	ldr.w	r3, [sl, #4]
   83cd4:	e6f0      	b.n	83ab8 <_realloc_r+0xdc>
   83cd6:	4642      	mov	r2, r8
   83cd8:	e76e      	b.n	83bb8 <_realloc_r+0x1dc>
   83cda:	4621      	mov	r1, r4
   83cdc:	4640      	mov	r0, r8
   83cde:	461d      	mov	r5, r3
   83ce0:	4657      	mov	r7, sl
   83ce2:	f7ff fe11 	bl	83908 <memmove>
   83ce6:	f8da 3004 	ldr.w	r3, [sl, #4]
   83cea:	e6e5      	b.n	83ab8 <_realloc_r+0xdc>
   83cec:	68a3      	ldr	r3, [r4, #8]
   83cee:	2a24      	cmp	r2, #36	; 0x24
   83cf0:	f8ca 3010 	str.w	r3, [sl, #16]
   83cf4:	68e3      	ldr	r3, [r4, #12]
   83cf6:	f8ca 3014 	str.w	r3, [sl, #20]
   83cfa:	d018      	beq.n	83d2e <_realloc_r+0x352>
   83cfc:	3410      	adds	r4, #16
   83cfe:	f10a 0318 	add.w	r3, sl, #24
   83d02:	e770      	b.n	83be6 <_realloc_r+0x20a>
   83d04:	6922      	ldr	r2, [r4, #16]
   83d06:	f100 0318 	add.w	r3, r0, #24
   83d0a:	6102      	str	r2, [r0, #16]
   83d0c:	6961      	ldr	r1, [r4, #20]
   83d0e:	f104 0218 	add.w	r2, r4, #24
   83d12:	6141      	str	r1, [r0, #20]
   83d14:	e71a      	b.n	83b4c <_realloc_r+0x170>
   83d16:	68a1      	ldr	r1, [r4, #8]
   83d18:	2a24      	cmp	r2, #36	; 0x24
   83d1a:	f8ca 1010 	str.w	r1, [sl, #16]
   83d1e:	68e1      	ldr	r1, [r4, #12]
   83d20:	f8ca 1014 	str.w	r1, [sl, #20]
   83d24:	d00f      	beq.n	83d46 <_realloc_r+0x36a>
   83d26:	3410      	adds	r4, #16
   83d28:	f10a 0218 	add.w	r2, sl, #24
   83d2c:	e744      	b.n	83bb8 <_realloc_r+0x1dc>
   83d2e:	6922      	ldr	r2, [r4, #16]
   83d30:	f10a 0320 	add.w	r3, sl, #32
   83d34:	f8ca 2018 	str.w	r2, [sl, #24]
   83d38:	6962      	ldr	r2, [r4, #20]
   83d3a:	3418      	adds	r4, #24
   83d3c:	f8ca 201c 	str.w	r2, [sl, #28]
   83d40:	e751      	b.n	83be6 <_realloc_r+0x20a>
   83d42:	463b      	mov	r3, r7
   83d44:	e791      	b.n	83c6a <_realloc_r+0x28e>
   83d46:	6921      	ldr	r1, [r4, #16]
   83d48:	f10a 0220 	add.w	r2, sl, #32
   83d4c:	f8ca 1018 	str.w	r1, [sl, #24]
   83d50:	6961      	ldr	r1, [r4, #20]
   83d52:	3418      	adds	r4, #24
   83d54:	f8ca 101c 	str.w	r1, [sl, #28]
   83d58:	e72e      	b.n	83bb8 <_realloc_r+0x1dc>
   83d5a:	4621      	mov	r1, r4
   83d5c:	4638      	mov	r0, r7
   83d5e:	f8cd c004 	str.w	ip, [sp, #4]
   83d62:	f7ff fdd1 	bl	83908 <memmove>
   83d66:	f8dd c004 	ldr.w	ip, [sp, #4]
   83d6a:	e784      	b.n	83c76 <_realloc_r+0x29a>
   83d6c:	68a3      	ldr	r3, [r4, #8]
   83d6e:	2a24      	cmp	r2, #36	; 0x24
   83d70:	f8ca 3010 	str.w	r3, [sl, #16]
   83d74:	68e3      	ldr	r3, [r4, #12]
   83d76:	f8ca 3014 	str.w	r3, [sl, #20]
   83d7a:	d003      	beq.n	83d84 <_realloc_r+0x3a8>
   83d7c:	3410      	adds	r4, #16
   83d7e:	f10a 0318 	add.w	r3, sl, #24
   83d82:	e772      	b.n	83c6a <_realloc_r+0x28e>
   83d84:	6922      	ldr	r2, [r4, #16]
   83d86:	f10a 0320 	add.w	r3, sl, #32
   83d8a:	f8ca 2018 	str.w	r2, [sl, #24]
   83d8e:	6962      	ldr	r2, [r4, #20]
   83d90:	3418      	adds	r4, #24
   83d92:	f8ca 201c 	str.w	r2, [sl, #28]
   83d96:	e768      	b.n	83c6a <_realloc_r+0x28e>
   83d98:	20070598 	.word	0x20070598

00083d9c <_sbrk_r>:
   83d9c:	b538      	push	{r3, r4, r5, lr}
   83d9e:	4c07      	ldr	r4, [pc, #28]	; (83dbc <_sbrk_r+0x20>)
   83da0:	2300      	movs	r3, #0
   83da2:	4605      	mov	r5, r0
   83da4:	4608      	mov	r0, r1
   83da6:	6023      	str	r3, [r4, #0]
   83da8:	f7fd fb50 	bl	8144c <_sbrk>
   83dac:	1c43      	adds	r3, r0, #1
   83dae:	d000      	beq.n	83db2 <_sbrk_r+0x16>
   83db0:	bd38      	pop	{r3, r4, r5, pc}
   83db2:	6823      	ldr	r3, [r4, #0]
   83db4:	2b00      	cmp	r3, #0
   83db6:	d0fb      	beq.n	83db0 <_sbrk_r+0x14>
   83db8:	602b      	str	r3, [r5, #0]
   83dba:	bd38      	pop	{r3, r4, r5, pc}
   83dbc:	20070c54 	.word	0x20070c54

00083dc0 <__sread>:
   83dc0:	b510      	push	{r4, lr}
   83dc2:	460c      	mov	r4, r1
   83dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83dc8:	f000 f9f2 	bl	841b0 <_read_r>
   83dcc:	2800      	cmp	r0, #0
   83dce:	db03      	blt.n	83dd8 <__sread+0x18>
   83dd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83dd2:	4403      	add	r3, r0
   83dd4:	6523      	str	r3, [r4, #80]	; 0x50
   83dd6:	bd10      	pop	{r4, pc}
   83dd8:	89a3      	ldrh	r3, [r4, #12]
   83dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83dde:	81a3      	strh	r3, [r4, #12]
   83de0:	bd10      	pop	{r4, pc}
   83de2:	bf00      	nop

00083de4 <__swrite>:
   83de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83de8:	460c      	mov	r4, r1
   83dea:	8989      	ldrh	r1, [r1, #12]
   83dec:	461d      	mov	r5, r3
   83dee:	05cb      	lsls	r3, r1, #23
   83df0:	4616      	mov	r6, r2
   83df2:	4607      	mov	r7, r0
   83df4:	d506      	bpl.n	83e04 <__swrite+0x20>
   83df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83dfa:	2200      	movs	r2, #0
   83dfc:	2302      	movs	r3, #2
   83dfe:	f000 f9c3 	bl	84188 <_lseek_r>
   83e02:	89a1      	ldrh	r1, [r4, #12]
   83e04:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83e08:	81a1      	strh	r1, [r4, #12]
   83e0a:	4638      	mov	r0, r7
   83e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83e10:	4632      	mov	r2, r6
   83e12:	462b      	mov	r3, r5
   83e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83e18:	f000 b8ce 	b.w	83fb8 <_write_r>

00083e1c <__sseek>:
   83e1c:	b510      	push	{r4, lr}
   83e1e:	460c      	mov	r4, r1
   83e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83e24:	f000 f9b0 	bl	84188 <_lseek_r>
   83e28:	89a3      	ldrh	r3, [r4, #12]
   83e2a:	1c42      	adds	r2, r0, #1
   83e2c:	bf0e      	itee	eq
   83e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83e36:	6520      	strne	r0, [r4, #80]	; 0x50
   83e38:	81a3      	strh	r3, [r4, #12]
   83e3a:	bd10      	pop	{r4, pc}

00083e3c <__sclose>:
   83e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83e40:	f000 b922 	b.w	84088 <_close_r>

00083e44 <strlen>:
   83e44:	f020 0103 	bic.w	r1, r0, #3
   83e48:	f010 0003 	ands.w	r0, r0, #3
   83e4c:	f1c0 0000 	rsb	r0, r0, #0
   83e50:	f851 3b04 	ldr.w	r3, [r1], #4
   83e54:	f100 0c04 	add.w	ip, r0, #4
   83e58:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83e5c:	f06f 0200 	mvn.w	r2, #0
   83e60:	bf1c      	itt	ne
   83e62:	fa22 f20c 	lsrne.w	r2, r2, ip
   83e66:	4313      	orrne	r3, r2
   83e68:	f04f 0c01 	mov.w	ip, #1
   83e6c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83e70:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83e74:	eba3 020c 	sub.w	r2, r3, ip
   83e78:	ea22 0203 	bic.w	r2, r2, r3
   83e7c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83e80:	bf04      	itt	eq
   83e82:	f851 3b04 	ldreq.w	r3, [r1], #4
   83e86:	3004      	addeq	r0, #4
   83e88:	d0f4      	beq.n	83e74 <strlen+0x30>
   83e8a:	f013 0fff 	tst.w	r3, #255	; 0xff
   83e8e:	bf1f      	itttt	ne
   83e90:	3001      	addne	r0, #1
   83e92:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   83e96:	3001      	addne	r0, #1
   83e98:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   83e9c:	bf18      	it	ne
   83e9e:	3001      	addne	r0, #1
   83ea0:	4770      	bx	lr
   83ea2:	bf00      	nop

00083ea4 <__swbuf_r>:
   83ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83ea6:	460d      	mov	r5, r1
   83ea8:	4614      	mov	r4, r2
   83eaa:	4607      	mov	r7, r0
   83eac:	b110      	cbz	r0, 83eb4 <__swbuf_r+0x10>
   83eae:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83eb0:	2b00      	cmp	r3, #0
   83eb2:	d048      	beq.n	83f46 <__swbuf_r+0xa2>
   83eb4:	89a2      	ldrh	r2, [r4, #12]
   83eb6:	69a0      	ldr	r0, [r4, #24]
   83eb8:	b293      	uxth	r3, r2
   83eba:	60a0      	str	r0, [r4, #8]
   83ebc:	0718      	lsls	r0, r3, #28
   83ebe:	d538      	bpl.n	83f32 <__swbuf_r+0x8e>
   83ec0:	6926      	ldr	r6, [r4, #16]
   83ec2:	2e00      	cmp	r6, #0
   83ec4:	d035      	beq.n	83f32 <__swbuf_r+0x8e>
   83ec6:	0499      	lsls	r1, r3, #18
   83ec8:	b2ed      	uxtb	r5, r5
   83eca:	d515      	bpl.n	83ef8 <__swbuf_r+0x54>
   83ecc:	6823      	ldr	r3, [r4, #0]
   83ece:	6962      	ldr	r2, [r4, #20]
   83ed0:	1b9e      	subs	r6, r3, r6
   83ed2:	4296      	cmp	r6, r2
   83ed4:	da1c      	bge.n	83f10 <__swbuf_r+0x6c>
   83ed6:	3601      	adds	r6, #1
   83ed8:	68a2      	ldr	r2, [r4, #8]
   83eda:	1c59      	adds	r1, r3, #1
   83edc:	3a01      	subs	r2, #1
   83ede:	60a2      	str	r2, [r4, #8]
   83ee0:	6021      	str	r1, [r4, #0]
   83ee2:	701d      	strb	r5, [r3, #0]
   83ee4:	6963      	ldr	r3, [r4, #20]
   83ee6:	42b3      	cmp	r3, r6
   83ee8:	d01a      	beq.n	83f20 <__swbuf_r+0x7c>
   83eea:	89a3      	ldrh	r3, [r4, #12]
   83eec:	07db      	lsls	r3, r3, #31
   83eee:	d501      	bpl.n	83ef4 <__swbuf_r+0x50>
   83ef0:	2d0a      	cmp	r5, #10
   83ef2:	d015      	beq.n	83f20 <__swbuf_r+0x7c>
   83ef4:	4628      	mov	r0, r5
   83ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ef8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83efa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83f02:	6663      	str	r3, [r4, #100]	; 0x64
   83f04:	6823      	ldr	r3, [r4, #0]
   83f06:	81a2      	strh	r2, [r4, #12]
   83f08:	6962      	ldr	r2, [r4, #20]
   83f0a:	1b9e      	subs	r6, r3, r6
   83f0c:	4296      	cmp	r6, r2
   83f0e:	dbe2      	blt.n	83ed6 <__swbuf_r+0x32>
   83f10:	4638      	mov	r0, r7
   83f12:	4621      	mov	r1, r4
   83f14:	f7fe fd3e 	bl	82994 <_fflush_r>
   83f18:	b940      	cbnz	r0, 83f2c <__swbuf_r+0x88>
   83f1a:	6823      	ldr	r3, [r4, #0]
   83f1c:	2601      	movs	r6, #1
   83f1e:	e7db      	b.n	83ed8 <__swbuf_r+0x34>
   83f20:	4638      	mov	r0, r7
   83f22:	4621      	mov	r1, r4
   83f24:	f7fe fd36 	bl	82994 <_fflush_r>
   83f28:	2800      	cmp	r0, #0
   83f2a:	d0e3      	beq.n	83ef4 <__swbuf_r+0x50>
   83f2c:	f04f 30ff 	mov.w	r0, #4294967295
   83f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f32:	4638      	mov	r0, r7
   83f34:	4621      	mov	r1, r4
   83f36:	f7fe fc17 	bl	82768 <__swsetup_r>
   83f3a:	2800      	cmp	r0, #0
   83f3c:	d1f6      	bne.n	83f2c <__swbuf_r+0x88>
   83f3e:	89a2      	ldrh	r2, [r4, #12]
   83f40:	6926      	ldr	r6, [r4, #16]
   83f42:	b293      	uxth	r3, r2
   83f44:	e7bf      	b.n	83ec6 <__swbuf_r+0x22>
   83f46:	f7fe fd41 	bl	829cc <__sinit>
   83f4a:	e7b3      	b.n	83eb4 <__swbuf_r+0x10>

00083f4c <_wcrtomb_r>:
   83f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83f50:	461e      	mov	r6, r3
   83f52:	b086      	sub	sp, #24
   83f54:	460c      	mov	r4, r1
   83f56:	4605      	mov	r5, r0
   83f58:	4617      	mov	r7, r2
   83f5a:	4b0f      	ldr	r3, [pc, #60]	; (83f98 <_wcrtomb_r+0x4c>)
   83f5c:	b191      	cbz	r1, 83f84 <_wcrtomb_r+0x38>
   83f5e:	f8d3 8000 	ldr.w	r8, [r3]
   83f62:	f7ff f8f3 	bl	8314c <__locale_charset>
   83f66:	9600      	str	r6, [sp, #0]
   83f68:	4603      	mov	r3, r0
   83f6a:	4621      	mov	r1, r4
   83f6c:	463a      	mov	r2, r7
   83f6e:	4628      	mov	r0, r5
   83f70:	47c0      	blx	r8
   83f72:	1c43      	adds	r3, r0, #1
   83f74:	d103      	bne.n	83f7e <_wcrtomb_r+0x32>
   83f76:	2200      	movs	r2, #0
   83f78:	238a      	movs	r3, #138	; 0x8a
   83f7a:	6032      	str	r2, [r6, #0]
   83f7c:	602b      	str	r3, [r5, #0]
   83f7e:	b006      	add	sp, #24
   83f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f84:	681f      	ldr	r7, [r3, #0]
   83f86:	f7ff f8e1 	bl	8314c <__locale_charset>
   83f8a:	9600      	str	r6, [sp, #0]
   83f8c:	4603      	mov	r3, r0
   83f8e:	4622      	mov	r2, r4
   83f90:	4628      	mov	r0, r5
   83f92:	a903      	add	r1, sp, #12
   83f94:	47b8      	blx	r7
   83f96:	e7ec      	b.n	83f72 <_wcrtomb_r+0x26>
   83f98:	200709a8 	.word	0x200709a8

00083f9c <__ascii_wctomb>:
   83f9c:	b121      	cbz	r1, 83fa8 <__ascii_wctomb+0xc>
   83f9e:	2aff      	cmp	r2, #255	; 0xff
   83fa0:	d804      	bhi.n	83fac <__ascii_wctomb+0x10>
   83fa2:	700a      	strb	r2, [r1, #0]
   83fa4:	2001      	movs	r0, #1
   83fa6:	4770      	bx	lr
   83fa8:	4608      	mov	r0, r1
   83faa:	4770      	bx	lr
   83fac:	238a      	movs	r3, #138	; 0x8a
   83fae:	6003      	str	r3, [r0, #0]
   83fb0:	f04f 30ff 	mov.w	r0, #4294967295
   83fb4:	4770      	bx	lr
   83fb6:	bf00      	nop

00083fb8 <_write_r>:
   83fb8:	b570      	push	{r4, r5, r6, lr}
   83fba:	4c08      	ldr	r4, [pc, #32]	; (83fdc <_write_r+0x24>)
   83fbc:	4606      	mov	r6, r0
   83fbe:	2500      	movs	r5, #0
   83fc0:	4608      	mov	r0, r1
   83fc2:	4611      	mov	r1, r2
   83fc4:	461a      	mov	r2, r3
   83fc6:	6025      	str	r5, [r4, #0]
   83fc8:	f7fc feb2 	bl	80d30 <_write>
   83fcc:	1c43      	adds	r3, r0, #1
   83fce:	d000      	beq.n	83fd2 <_write_r+0x1a>
   83fd0:	bd70      	pop	{r4, r5, r6, pc}
   83fd2:	6823      	ldr	r3, [r4, #0]
   83fd4:	2b00      	cmp	r3, #0
   83fd6:	d0fb      	beq.n	83fd0 <_write_r+0x18>
   83fd8:	6033      	str	r3, [r6, #0]
   83fda:	bd70      	pop	{r4, r5, r6, pc}
   83fdc:	20070c54 	.word	0x20070c54

00083fe0 <__register_exitproc>:
   83fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   83fe2:	4c27      	ldr	r4, [pc, #156]	; (84080 <__register_exitproc+0xa0>)
   83fe4:	b085      	sub	sp, #20
   83fe6:	6826      	ldr	r6, [r4, #0]
   83fe8:	4607      	mov	r7, r0
   83fea:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83fee:	2c00      	cmp	r4, #0
   83ff0:	d040      	beq.n	84074 <__register_exitproc+0x94>
   83ff2:	6865      	ldr	r5, [r4, #4]
   83ff4:	2d1f      	cmp	r5, #31
   83ff6:	dd1e      	ble.n	84036 <__register_exitproc+0x56>
   83ff8:	4822      	ldr	r0, [pc, #136]	; (84084 <__register_exitproc+0xa4>)
   83ffa:	b918      	cbnz	r0, 84004 <__register_exitproc+0x24>
   83ffc:	f04f 30ff 	mov.w	r0, #4294967295
   84000:	b005      	add	sp, #20
   84002:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84004:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84008:	9103      	str	r1, [sp, #12]
   8400a:	9202      	str	r2, [sp, #8]
   8400c:	9301      	str	r3, [sp, #4]
   8400e:	f7ff f917 	bl	83240 <malloc>
   84012:	9903      	ldr	r1, [sp, #12]
   84014:	4604      	mov	r4, r0
   84016:	9a02      	ldr	r2, [sp, #8]
   84018:	9b01      	ldr	r3, [sp, #4]
   8401a:	2800      	cmp	r0, #0
   8401c:	d0ee      	beq.n	83ffc <__register_exitproc+0x1c>
   8401e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   84022:	2000      	movs	r0, #0
   84024:	6025      	str	r5, [r4, #0]
   84026:	6060      	str	r0, [r4, #4]
   84028:	4605      	mov	r5, r0
   8402a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8402e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   84032:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   84036:	b93f      	cbnz	r7, 84048 <__register_exitproc+0x68>
   84038:	1c6b      	adds	r3, r5, #1
   8403a:	2000      	movs	r0, #0
   8403c:	3502      	adds	r5, #2
   8403e:	6063      	str	r3, [r4, #4]
   84040:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   84044:	b005      	add	sp, #20
   84046:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84048:	2601      	movs	r6, #1
   8404a:	40ae      	lsls	r6, r5
   8404c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84050:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   84054:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   84058:	2f02      	cmp	r7, #2
   8405a:	ea42 0206 	orr.w	r2, r2, r6
   8405e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   84062:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   84066:	d1e7      	bne.n	84038 <__register_exitproc+0x58>
   84068:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8406c:	431e      	orrs	r6, r3
   8406e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   84072:	e7e1      	b.n	84038 <__register_exitproc+0x58>
   84074:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   84078:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8407c:	e7b9      	b.n	83ff2 <__register_exitproc+0x12>
   8407e:	bf00      	nop
   84080:	000847f4 	.word	0x000847f4
   84084:	00083241 	.word	0x00083241

00084088 <_close_r>:
   84088:	b538      	push	{r3, r4, r5, lr}
   8408a:	4c07      	ldr	r4, [pc, #28]	; (840a8 <_close_r+0x20>)
   8408c:	2300      	movs	r3, #0
   8408e:	4605      	mov	r5, r0
   84090:	4608      	mov	r0, r1
   84092:	6023      	str	r3, [r4, #0]
   84094:	f7fd f9f4 	bl	81480 <_close>
   84098:	1c43      	adds	r3, r0, #1
   8409a:	d000      	beq.n	8409e <_close_r+0x16>
   8409c:	bd38      	pop	{r3, r4, r5, pc}
   8409e:	6823      	ldr	r3, [r4, #0]
   840a0:	2b00      	cmp	r3, #0
   840a2:	d0fb      	beq.n	8409c <_close_r+0x14>
   840a4:	602b      	str	r3, [r5, #0]
   840a6:	bd38      	pop	{r3, r4, r5, pc}
   840a8:	20070c54 	.word	0x20070c54

000840ac <_fclose_r>:
   840ac:	b570      	push	{r4, r5, r6, lr}
   840ae:	460c      	mov	r4, r1
   840b0:	4605      	mov	r5, r0
   840b2:	b131      	cbz	r1, 840c2 <_fclose_r+0x16>
   840b4:	b110      	cbz	r0, 840bc <_fclose_r+0x10>
   840b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   840b8:	2b00      	cmp	r3, #0
   840ba:	d02f      	beq.n	8411c <_fclose_r+0x70>
   840bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   840c0:	b90b      	cbnz	r3, 840c6 <_fclose_r+0x1a>
   840c2:	2000      	movs	r0, #0
   840c4:	bd70      	pop	{r4, r5, r6, pc}
   840c6:	4628      	mov	r0, r5
   840c8:	4621      	mov	r1, r4
   840ca:	f7fe fc63 	bl	82994 <_fflush_r>
   840ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   840d0:	4606      	mov	r6, r0
   840d2:	b133      	cbz	r3, 840e2 <_fclose_r+0x36>
   840d4:	4628      	mov	r0, r5
   840d6:	69e1      	ldr	r1, [r4, #28]
   840d8:	4798      	blx	r3
   840da:	2800      	cmp	r0, #0
   840dc:	bfb8      	it	lt
   840de:	f04f 36ff 	movlt.w	r6, #4294967295
   840e2:	89a3      	ldrh	r3, [r4, #12]
   840e4:	061b      	lsls	r3, r3, #24
   840e6:	d41c      	bmi.n	84122 <_fclose_r+0x76>
   840e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   840ea:	b141      	cbz	r1, 840fe <_fclose_r+0x52>
   840ec:	f104 0340 	add.w	r3, r4, #64	; 0x40
   840f0:	4299      	cmp	r1, r3
   840f2:	d002      	beq.n	840fa <_fclose_r+0x4e>
   840f4:	4628      	mov	r0, r5
   840f6:	f7fe fdad 	bl	82c54 <_free_r>
   840fa:	2300      	movs	r3, #0
   840fc:	6323      	str	r3, [r4, #48]	; 0x30
   840fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84100:	b121      	cbz	r1, 8410c <_fclose_r+0x60>
   84102:	4628      	mov	r0, r5
   84104:	f7fe fda6 	bl	82c54 <_free_r>
   84108:	2300      	movs	r3, #0
   8410a:	6463      	str	r3, [r4, #68]	; 0x44
   8410c:	f7fe fcd8 	bl	82ac0 <__sfp_lock_acquire>
   84110:	2300      	movs	r3, #0
   84112:	81a3      	strh	r3, [r4, #12]
   84114:	f7fe fcd6 	bl	82ac4 <__sfp_lock_release>
   84118:	4630      	mov	r0, r6
   8411a:	bd70      	pop	{r4, r5, r6, pc}
   8411c:	f7fe fc56 	bl	829cc <__sinit>
   84120:	e7cc      	b.n	840bc <_fclose_r+0x10>
   84122:	4628      	mov	r0, r5
   84124:	6921      	ldr	r1, [r4, #16]
   84126:	f7fe fd95 	bl	82c54 <_free_r>
   8412a:	e7dd      	b.n	840e8 <_fclose_r+0x3c>

0008412c <fclose>:
   8412c:	4b02      	ldr	r3, [pc, #8]	; (84138 <fclose+0xc>)
   8412e:	4601      	mov	r1, r0
   84130:	6818      	ldr	r0, [r3, #0]
   84132:	f7ff bfbb 	b.w	840ac <_fclose_r>
   84136:	bf00      	nop
   84138:	20070570 	.word	0x20070570

0008413c <_fstat_r>:
   8413c:	b538      	push	{r3, r4, r5, lr}
   8413e:	4c08      	ldr	r4, [pc, #32]	; (84160 <_fstat_r+0x24>)
   84140:	2300      	movs	r3, #0
   84142:	4605      	mov	r5, r0
   84144:	4608      	mov	r0, r1
   84146:	4611      	mov	r1, r2
   84148:	6023      	str	r3, [r4, #0]
   8414a:	f7fd f99d 	bl	81488 <_fstat>
   8414e:	1c43      	adds	r3, r0, #1
   84150:	d000      	beq.n	84154 <_fstat_r+0x18>
   84152:	bd38      	pop	{r3, r4, r5, pc}
   84154:	6823      	ldr	r3, [r4, #0]
   84156:	2b00      	cmp	r3, #0
   84158:	d0fb      	beq.n	84152 <_fstat_r+0x16>
   8415a:	602b      	str	r3, [r5, #0]
   8415c:	bd38      	pop	{r3, r4, r5, pc}
   8415e:	bf00      	nop
   84160:	20070c54 	.word	0x20070c54

00084164 <_isatty_r>:
   84164:	b538      	push	{r3, r4, r5, lr}
   84166:	4c07      	ldr	r4, [pc, #28]	; (84184 <_isatty_r+0x20>)
   84168:	2300      	movs	r3, #0
   8416a:	4605      	mov	r5, r0
   8416c:	4608      	mov	r0, r1
   8416e:	6023      	str	r3, [r4, #0]
   84170:	f7fd f990 	bl	81494 <_isatty>
   84174:	1c43      	adds	r3, r0, #1
   84176:	d000      	beq.n	8417a <_isatty_r+0x16>
   84178:	bd38      	pop	{r3, r4, r5, pc}
   8417a:	6823      	ldr	r3, [r4, #0]
   8417c:	2b00      	cmp	r3, #0
   8417e:	d0fb      	beq.n	84178 <_isatty_r+0x14>
   84180:	602b      	str	r3, [r5, #0]
   84182:	bd38      	pop	{r3, r4, r5, pc}
   84184:	20070c54 	.word	0x20070c54

00084188 <_lseek_r>:
   84188:	b570      	push	{r4, r5, r6, lr}
   8418a:	4c08      	ldr	r4, [pc, #32]	; (841ac <_lseek_r+0x24>)
   8418c:	4606      	mov	r6, r0
   8418e:	2500      	movs	r5, #0
   84190:	4608      	mov	r0, r1
   84192:	4611      	mov	r1, r2
   84194:	461a      	mov	r2, r3
   84196:	6025      	str	r5, [r4, #0]
   84198:	f7fd f97e 	bl	81498 <_lseek>
   8419c:	1c43      	adds	r3, r0, #1
   8419e:	d000      	beq.n	841a2 <_lseek_r+0x1a>
   841a0:	bd70      	pop	{r4, r5, r6, pc}
   841a2:	6823      	ldr	r3, [r4, #0]
   841a4:	2b00      	cmp	r3, #0
   841a6:	d0fb      	beq.n	841a0 <_lseek_r+0x18>
   841a8:	6033      	str	r3, [r6, #0]
   841aa:	bd70      	pop	{r4, r5, r6, pc}
   841ac:	20070c54 	.word	0x20070c54

000841b0 <_read_r>:
   841b0:	b570      	push	{r4, r5, r6, lr}
   841b2:	4c08      	ldr	r4, [pc, #32]	; (841d4 <_read_r+0x24>)
   841b4:	4606      	mov	r6, r0
   841b6:	2500      	movs	r5, #0
   841b8:	4608      	mov	r0, r1
   841ba:	4611      	mov	r1, r2
   841bc:	461a      	mov	r2, r3
   841be:	6025      	str	r5, [r4, #0]
   841c0:	f7fc fd96 	bl	80cf0 <_read>
   841c4:	1c43      	adds	r3, r0, #1
   841c6:	d000      	beq.n	841ca <_read_r+0x1a>
   841c8:	bd70      	pop	{r4, r5, r6, pc}
   841ca:	6823      	ldr	r3, [r4, #0]
   841cc:	2b00      	cmp	r3, #0
   841ce:	d0fb      	beq.n	841c8 <_read_r+0x18>
   841d0:	6033      	str	r3, [r6, #0]
   841d2:	bd70      	pop	{r4, r5, r6, pc}
   841d4:	20070c54 	.word	0x20070c54

000841d8 <__aeabi_uldivmod>:
   841d8:	b94b      	cbnz	r3, 841ee <__aeabi_uldivmod+0x16>
   841da:	b942      	cbnz	r2, 841ee <__aeabi_uldivmod+0x16>
   841dc:	2900      	cmp	r1, #0
   841de:	bf08      	it	eq
   841e0:	2800      	cmpeq	r0, #0
   841e2:	d002      	beq.n	841ea <__aeabi_uldivmod+0x12>
   841e4:	f04f 31ff 	mov.w	r1, #4294967295
   841e8:	4608      	mov	r0, r1
   841ea:	f000 b83b 	b.w	84264 <__aeabi_idiv0>
   841ee:	b082      	sub	sp, #8
   841f0:	46ec      	mov	ip, sp
   841f2:	e92d 5000 	stmdb	sp!, {ip, lr}
   841f6:	f000 f81d 	bl	84234 <__gnu_uldivmod_helper>
   841fa:	f8dd e004 	ldr.w	lr, [sp, #4]
   841fe:	b002      	add	sp, #8
   84200:	bc0c      	pop	{r2, r3}
   84202:	4770      	bx	lr

00084204 <__gnu_ldivmod_helper>:
   84204:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84208:	9e08      	ldr	r6, [sp, #32]
   8420a:	4614      	mov	r4, r2
   8420c:	461d      	mov	r5, r3
   8420e:	4680      	mov	r8, r0
   84210:	4689      	mov	r9, r1
   84212:	f000 f829 	bl	84268 <__divdi3>
   84216:	fb04 f301 	mul.w	r3, r4, r1
   8421a:	fba4 ab00 	umull	sl, fp, r4, r0
   8421e:	fb00 3205 	mla	r2, r0, r5, r3
   84222:	4493      	add	fp, r2
   84224:	ebb8 080a 	subs.w	r8, r8, sl
   84228:	eb69 090b 	sbc.w	r9, r9, fp
   8422c:	e9c6 8900 	strd	r8, r9, [r6]
   84230:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084234 <__gnu_uldivmod_helper>:
   84234:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84238:	9e08      	ldr	r6, [sp, #32]
   8423a:	4614      	mov	r4, r2
   8423c:	461d      	mov	r5, r3
   8423e:	4680      	mov	r8, r0
   84240:	4689      	mov	r9, r1
   84242:	f000 f961 	bl	84508 <__udivdi3>
   84246:	fb00 f505 	mul.w	r5, r0, r5
   8424a:	fba0 ab04 	umull	sl, fp, r0, r4
   8424e:	fb04 5401 	mla	r4, r4, r1, r5
   84252:	44a3      	add	fp, r4
   84254:	ebb8 080a 	subs.w	r8, r8, sl
   84258:	eb69 090b 	sbc.w	r9, r9, fp
   8425c:	e9c6 8900 	strd	r8, r9, [r6]
   84260:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084264 <__aeabi_idiv0>:
   84264:	4770      	bx	lr
   84266:	bf00      	nop

00084268 <__divdi3>:
   84268:	2900      	cmp	r1, #0
   8426a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8426e:	f2c0 80a1 	blt.w	843b4 <__divdi3+0x14c>
   84272:	2400      	movs	r4, #0
   84274:	2b00      	cmp	r3, #0
   84276:	f2c0 8098 	blt.w	843aa <__divdi3+0x142>
   8427a:	4615      	mov	r5, r2
   8427c:	4606      	mov	r6, r0
   8427e:	460f      	mov	r7, r1
   84280:	2b00      	cmp	r3, #0
   84282:	d13f      	bne.n	84304 <__divdi3+0x9c>
   84284:	428a      	cmp	r2, r1
   84286:	d958      	bls.n	8433a <__divdi3+0xd2>
   84288:	fab2 f382 	clz	r3, r2
   8428c:	b14b      	cbz	r3, 842a2 <__divdi3+0x3a>
   8428e:	f1c3 0220 	rsb	r2, r3, #32
   84292:	fa01 f703 	lsl.w	r7, r1, r3
   84296:	fa20 f202 	lsr.w	r2, r0, r2
   8429a:	409d      	lsls	r5, r3
   8429c:	fa00 f603 	lsl.w	r6, r0, r3
   842a0:	4317      	orrs	r7, r2
   842a2:	0c29      	lsrs	r1, r5, #16
   842a4:	fbb7 f2f1 	udiv	r2, r7, r1
   842a8:	fb01 7712 	mls	r7, r1, r2, r7
   842ac:	b2a8      	uxth	r0, r5
   842ae:	fb00 f302 	mul.w	r3, r0, r2
   842b2:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   842b6:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   842ba:	42bb      	cmp	r3, r7
   842bc:	d909      	bls.n	842d2 <__divdi3+0x6a>
   842be:	197f      	adds	r7, r7, r5
   842c0:	f102 3cff 	add.w	ip, r2, #4294967295
   842c4:	f080 8105 	bcs.w	844d2 <__divdi3+0x26a>
   842c8:	42bb      	cmp	r3, r7
   842ca:	f240 8102 	bls.w	844d2 <__divdi3+0x26a>
   842ce:	3a02      	subs	r2, #2
   842d0:	442f      	add	r7, r5
   842d2:	1aff      	subs	r7, r7, r3
   842d4:	fbb7 f3f1 	udiv	r3, r7, r1
   842d8:	fb01 7113 	mls	r1, r1, r3, r7
   842dc:	fb00 f003 	mul.w	r0, r0, r3
   842e0:	b2b6      	uxth	r6, r6
   842e2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   842e6:	4288      	cmp	r0, r1
   842e8:	d908      	bls.n	842fc <__divdi3+0x94>
   842ea:	1949      	adds	r1, r1, r5
   842ec:	f103 37ff 	add.w	r7, r3, #4294967295
   842f0:	f080 80f1 	bcs.w	844d6 <__divdi3+0x26e>
   842f4:	4288      	cmp	r0, r1
   842f6:	f240 80ee 	bls.w	844d6 <__divdi3+0x26e>
   842fa:	3b02      	subs	r3, #2
   842fc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84300:	2300      	movs	r3, #0
   84302:	e003      	b.n	8430c <__divdi3+0xa4>
   84304:	428b      	cmp	r3, r1
   84306:	d90a      	bls.n	8431e <__divdi3+0xb6>
   84308:	2300      	movs	r3, #0
   8430a:	461a      	mov	r2, r3
   8430c:	4610      	mov	r0, r2
   8430e:	4619      	mov	r1, r3
   84310:	b114      	cbz	r4, 84318 <__divdi3+0xb0>
   84312:	4240      	negs	r0, r0
   84314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84318:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8431c:	4770      	bx	lr
   8431e:	fab3 f883 	clz	r8, r3
   84322:	f1b8 0f00 	cmp.w	r8, #0
   84326:	f040 8088 	bne.w	8443a <__divdi3+0x1d2>
   8432a:	428b      	cmp	r3, r1
   8432c:	d302      	bcc.n	84334 <__divdi3+0xcc>
   8432e:	4282      	cmp	r2, r0
   84330:	f200 80e2 	bhi.w	844f8 <__divdi3+0x290>
   84334:	2300      	movs	r3, #0
   84336:	2201      	movs	r2, #1
   84338:	e7e8      	b.n	8430c <__divdi3+0xa4>
   8433a:	b912      	cbnz	r2, 84342 <__divdi3+0xda>
   8433c:	2301      	movs	r3, #1
   8433e:	fbb3 f5f2 	udiv	r5, r3, r2
   84342:	fab5 f285 	clz	r2, r5
   84346:	2a00      	cmp	r2, #0
   84348:	d13a      	bne.n	843c0 <__divdi3+0x158>
   8434a:	1b7f      	subs	r7, r7, r5
   8434c:	0c28      	lsrs	r0, r5, #16
   8434e:	fa1f fc85 	uxth.w	ip, r5
   84352:	2301      	movs	r3, #1
   84354:	fbb7 f1f0 	udiv	r1, r7, r0
   84358:	fb00 7711 	mls	r7, r0, r1, r7
   8435c:	fb0c f201 	mul.w	r2, ip, r1
   84360:	ea4f 4816 	mov.w	r8, r6, lsr #16
   84364:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   84368:	42ba      	cmp	r2, r7
   8436a:	d907      	bls.n	8437c <__divdi3+0x114>
   8436c:	197f      	adds	r7, r7, r5
   8436e:	f101 38ff 	add.w	r8, r1, #4294967295
   84372:	d202      	bcs.n	8437a <__divdi3+0x112>
   84374:	42ba      	cmp	r2, r7
   84376:	f200 80c4 	bhi.w	84502 <__divdi3+0x29a>
   8437a:	4641      	mov	r1, r8
   8437c:	1abf      	subs	r7, r7, r2
   8437e:	fbb7 f2f0 	udiv	r2, r7, r0
   84382:	fb00 7012 	mls	r0, r0, r2, r7
   84386:	fb0c fc02 	mul.w	ip, ip, r2
   8438a:	b2b6      	uxth	r6, r6
   8438c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   84390:	4584      	cmp	ip, r0
   84392:	d907      	bls.n	843a4 <__divdi3+0x13c>
   84394:	1940      	adds	r0, r0, r5
   84396:	f102 37ff 	add.w	r7, r2, #4294967295
   8439a:	d202      	bcs.n	843a2 <__divdi3+0x13a>
   8439c:	4584      	cmp	ip, r0
   8439e:	f200 80ae 	bhi.w	844fe <__divdi3+0x296>
   843a2:	463a      	mov	r2, r7
   843a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   843a8:	e7b0      	b.n	8430c <__divdi3+0xa4>
   843aa:	43e4      	mvns	r4, r4
   843ac:	4252      	negs	r2, r2
   843ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   843b2:	e762      	b.n	8427a <__divdi3+0x12>
   843b4:	4240      	negs	r0, r0
   843b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   843ba:	f04f 34ff 	mov.w	r4, #4294967295
   843be:	e759      	b.n	84274 <__divdi3+0xc>
   843c0:	4095      	lsls	r5, r2
   843c2:	f1c2 0920 	rsb	r9, r2, #32
   843c6:	fa27 f109 	lsr.w	r1, r7, r9
   843ca:	fa26 f909 	lsr.w	r9, r6, r9
   843ce:	4097      	lsls	r7, r2
   843d0:	0c28      	lsrs	r0, r5, #16
   843d2:	fbb1 f8f0 	udiv	r8, r1, r0
   843d6:	fb00 1118 	mls	r1, r0, r8, r1
   843da:	fa1f fc85 	uxth.w	ip, r5
   843de:	fb0c f308 	mul.w	r3, ip, r8
   843e2:	ea49 0907 	orr.w	r9, r9, r7
   843e6:	ea4f 4719 	mov.w	r7, r9, lsr #16
   843ea:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   843ee:	428b      	cmp	r3, r1
   843f0:	fa06 f602 	lsl.w	r6, r6, r2
   843f4:	d908      	bls.n	84408 <__divdi3+0x1a0>
   843f6:	1949      	adds	r1, r1, r5
   843f8:	f108 32ff 	add.w	r2, r8, #4294967295
   843fc:	d27a      	bcs.n	844f4 <__divdi3+0x28c>
   843fe:	428b      	cmp	r3, r1
   84400:	d978      	bls.n	844f4 <__divdi3+0x28c>
   84402:	f1a8 0802 	sub.w	r8, r8, #2
   84406:	4429      	add	r1, r5
   84408:	1ac9      	subs	r1, r1, r3
   8440a:	fbb1 f3f0 	udiv	r3, r1, r0
   8440e:	fb00 1713 	mls	r7, r0, r3, r1
   84412:	fb0c f203 	mul.w	r2, ip, r3
   84416:	fa1f f989 	uxth.w	r9, r9
   8441a:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   8441e:	42ba      	cmp	r2, r7
   84420:	d907      	bls.n	84432 <__divdi3+0x1ca>
   84422:	197f      	adds	r7, r7, r5
   84424:	f103 31ff 	add.w	r1, r3, #4294967295
   84428:	d260      	bcs.n	844ec <__divdi3+0x284>
   8442a:	42ba      	cmp	r2, r7
   8442c:	d95e      	bls.n	844ec <__divdi3+0x284>
   8442e:	3b02      	subs	r3, #2
   84430:	442f      	add	r7, r5
   84432:	1abf      	subs	r7, r7, r2
   84434:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84438:	e78c      	b.n	84354 <__divdi3+0xec>
   8443a:	f1c8 0220 	rsb	r2, r8, #32
   8443e:	fa25 f102 	lsr.w	r1, r5, r2
   84442:	fa03 fc08 	lsl.w	ip, r3, r8
   84446:	fa27 f302 	lsr.w	r3, r7, r2
   8444a:	fa20 f202 	lsr.w	r2, r0, r2
   8444e:	fa07 f708 	lsl.w	r7, r7, r8
   84452:	ea41 0c0c 	orr.w	ip, r1, ip
   84456:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8445a:	fbb3 f1f9 	udiv	r1, r3, r9
   8445e:	fb09 3311 	mls	r3, r9, r1, r3
   84462:	fa1f fa8c 	uxth.w	sl, ip
   84466:	fb0a fb01 	mul.w	fp, sl, r1
   8446a:	4317      	orrs	r7, r2
   8446c:	0c3a      	lsrs	r2, r7, #16
   8446e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   84472:	459b      	cmp	fp, r3
   84474:	fa05 f008 	lsl.w	r0, r5, r8
   84478:	d908      	bls.n	8448c <__divdi3+0x224>
   8447a:	eb13 030c 	adds.w	r3, r3, ip
   8447e:	f101 32ff 	add.w	r2, r1, #4294967295
   84482:	d235      	bcs.n	844f0 <__divdi3+0x288>
   84484:	459b      	cmp	fp, r3
   84486:	d933      	bls.n	844f0 <__divdi3+0x288>
   84488:	3902      	subs	r1, #2
   8448a:	4463      	add	r3, ip
   8448c:	ebcb 0303 	rsb	r3, fp, r3
   84490:	fbb3 f2f9 	udiv	r2, r3, r9
   84494:	fb09 3312 	mls	r3, r9, r2, r3
   84498:	fb0a fa02 	mul.w	sl, sl, r2
   8449c:	b2bf      	uxth	r7, r7
   8449e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   844a2:	45ba      	cmp	sl, r7
   844a4:	d908      	bls.n	844b8 <__divdi3+0x250>
   844a6:	eb17 070c 	adds.w	r7, r7, ip
   844aa:	f102 33ff 	add.w	r3, r2, #4294967295
   844ae:	d21b      	bcs.n	844e8 <__divdi3+0x280>
   844b0:	45ba      	cmp	sl, r7
   844b2:	d919      	bls.n	844e8 <__divdi3+0x280>
   844b4:	3a02      	subs	r2, #2
   844b6:	4467      	add	r7, ip
   844b8:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   844bc:	fba5 0100 	umull	r0, r1, r5, r0
   844c0:	ebca 0707 	rsb	r7, sl, r7
   844c4:	428f      	cmp	r7, r1
   844c6:	f04f 0300 	mov.w	r3, #0
   844ca:	d30a      	bcc.n	844e2 <__divdi3+0x27a>
   844cc:	d005      	beq.n	844da <__divdi3+0x272>
   844ce:	462a      	mov	r2, r5
   844d0:	e71c      	b.n	8430c <__divdi3+0xa4>
   844d2:	4662      	mov	r2, ip
   844d4:	e6fd      	b.n	842d2 <__divdi3+0x6a>
   844d6:	463b      	mov	r3, r7
   844d8:	e710      	b.n	842fc <__divdi3+0x94>
   844da:	fa06 f608 	lsl.w	r6, r6, r8
   844de:	4286      	cmp	r6, r0
   844e0:	d2f5      	bcs.n	844ce <__divdi3+0x266>
   844e2:	1e6a      	subs	r2, r5, #1
   844e4:	2300      	movs	r3, #0
   844e6:	e711      	b.n	8430c <__divdi3+0xa4>
   844e8:	461a      	mov	r2, r3
   844ea:	e7e5      	b.n	844b8 <__divdi3+0x250>
   844ec:	460b      	mov	r3, r1
   844ee:	e7a0      	b.n	84432 <__divdi3+0x1ca>
   844f0:	4611      	mov	r1, r2
   844f2:	e7cb      	b.n	8448c <__divdi3+0x224>
   844f4:	4690      	mov	r8, r2
   844f6:	e787      	b.n	84408 <__divdi3+0x1a0>
   844f8:	4643      	mov	r3, r8
   844fa:	4642      	mov	r2, r8
   844fc:	e706      	b.n	8430c <__divdi3+0xa4>
   844fe:	3a02      	subs	r2, #2
   84500:	e750      	b.n	843a4 <__divdi3+0x13c>
   84502:	3902      	subs	r1, #2
   84504:	442f      	add	r7, r5
   84506:	e739      	b.n	8437c <__divdi3+0x114>

00084508 <__udivdi3>:
   84508:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8450c:	4614      	mov	r4, r2
   8450e:	4605      	mov	r5, r0
   84510:	460e      	mov	r6, r1
   84512:	2b00      	cmp	r3, #0
   84514:	d143      	bne.n	8459e <__udivdi3+0x96>
   84516:	428a      	cmp	r2, r1
   84518:	d953      	bls.n	845c2 <__udivdi3+0xba>
   8451a:	fab2 f782 	clz	r7, r2
   8451e:	b157      	cbz	r7, 84536 <__udivdi3+0x2e>
   84520:	f1c7 0620 	rsb	r6, r7, #32
   84524:	fa20 f606 	lsr.w	r6, r0, r6
   84528:	fa01 f307 	lsl.w	r3, r1, r7
   8452c:	fa02 f407 	lsl.w	r4, r2, r7
   84530:	fa00 f507 	lsl.w	r5, r0, r7
   84534:	431e      	orrs	r6, r3
   84536:	0c21      	lsrs	r1, r4, #16
   84538:	fbb6 f2f1 	udiv	r2, r6, r1
   8453c:	fb01 6612 	mls	r6, r1, r2, r6
   84540:	b2a0      	uxth	r0, r4
   84542:	fb00 f302 	mul.w	r3, r0, r2
   84546:	0c2f      	lsrs	r7, r5, #16
   84548:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8454c:	42b3      	cmp	r3, r6
   8454e:	d909      	bls.n	84564 <__udivdi3+0x5c>
   84550:	1936      	adds	r6, r6, r4
   84552:	f102 37ff 	add.w	r7, r2, #4294967295
   84556:	f080 80fd 	bcs.w	84754 <__udivdi3+0x24c>
   8455a:	42b3      	cmp	r3, r6
   8455c:	f240 80fa 	bls.w	84754 <__udivdi3+0x24c>
   84560:	3a02      	subs	r2, #2
   84562:	4426      	add	r6, r4
   84564:	1af6      	subs	r6, r6, r3
   84566:	fbb6 f3f1 	udiv	r3, r6, r1
   8456a:	fb01 6113 	mls	r1, r1, r3, r6
   8456e:	fb00 f003 	mul.w	r0, r0, r3
   84572:	b2ad      	uxth	r5, r5
   84574:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   84578:	4288      	cmp	r0, r1
   8457a:	d908      	bls.n	8458e <__udivdi3+0x86>
   8457c:	1909      	adds	r1, r1, r4
   8457e:	f103 36ff 	add.w	r6, r3, #4294967295
   84582:	f080 80e9 	bcs.w	84758 <__udivdi3+0x250>
   84586:	4288      	cmp	r0, r1
   84588:	f240 80e6 	bls.w	84758 <__udivdi3+0x250>
   8458c:	3b02      	subs	r3, #2
   8458e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84592:	2300      	movs	r3, #0
   84594:	4610      	mov	r0, r2
   84596:	4619      	mov	r1, r3
   84598:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8459c:	4770      	bx	lr
   8459e:	428b      	cmp	r3, r1
   845a0:	d84c      	bhi.n	8463c <__udivdi3+0x134>
   845a2:	fab3 f683 	clz	r6, r3
   845a6:	2e00      	cmp	r6, #0
   845a8:	d14f      	bne.n	8464a <__udivdi3+0x142>
   845aa:	428b      	cmp	r3, r1
   845ac:	d302      	bcc.n	845b4 <__udivdi3+0xac>
   845ae:	4282      	cmp	r2, r0
   845b0:	f200 80dd 	bhi.w	8476e <__udivdi3+0x266>
   845b4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   845b8:	2300      	movs	r3, #0
   845ba:	2201      	movs	r2, #1
   845bc:	4610      	mov	r0, r2
   845be:	4619      	mov	r1, r3
   845c0:	4770      	bx	lr
   845c2:	b912      	cbnz	r2, 845ca <__udivdi3+0xc2>
   845c4:	2401      	movs	r4, #1
   845c6:	fbb4 f4f2 	udiv	r4, r4, r2
   845ca:	fab4 f284 	clz	r2, r4
   845ce:	2a00      	cmp	r2, #0
   845d0:	f040 8082 	bne.w	846d8 <__udivdi3+0x1d0>
   845d4:	1b09      	subs	r1, r1, r4
   845d6:	0c26      	lsrs	r6, r4, #16
   845d8:	b2a7      	uxth	r7, r4
   845da:	2301      	movs	r3, #1
   845dc:	fbb1 f0f6 	udiv	r0, r1, r6
   845e0:	fb06 1110 	mls	r1, r6, r0, r1
   845e4:	fb07 f200 	mul.w	r2, r7, r0
   845e8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   845ec:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   845f0:	428a      	cmp	r2, r1
   845f2:	d907      	bls.n	84604 <__udivdi3+0xfc>
   845f4:	1909      	adds	r1, r1, r4
   845f6:	f100 3cff 	add.w	ip, r0, #4294967295
   845fa:	d202      	bcs.n	84602 <__udivdi3+0xfa>
   845fc:	428a      	cmp	r2, r1
   845fe:	f200 80c8 	bhi.w	84792 <__udivdi3+0x28a>
   84602:	4660      	mov	r0, ip
   84604:	1a89      	subs	r1, r1, r2
   84606:	fbb1 f2f6 	udiv	r2, r1, r6
   8460a:	fb06 1112 	mls	r1, r6, r2, r1
   8460e:	fb07 f702 	mul.w	r7, r7, r2
   84612:	b2ad      	uxth	r5, r5
   84614:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   84618:	42af      	cmp	r7, r5
   8461a:	d908      	bls.n	8462e <__udivdi3+0x126>
   8461c:	192c      	adds	r4, r5, r4
   8461e:	f102 31ff 	add.w	r1, r2, #4294967295
   84622:	f080 809b 	bcs.w	8475c <__udivdi3+0x254>
   84626:	42a7      	cmp	r7, r4
   84628:	f240 8098 	bls.w	8475c <__udivdi3+0x254>
   8462c:	3a02      	subs	r2, #2
   8462e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   84632:	4610      	mov	r0, r2
   84634:	4619      	mov	r1, r3
   84636:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8463a:	4770      	bx	lr
   8463c:	2300      	movs	r3, #0
   8463e:	461a      	mov	r2, r3
   84640:	4610      	mov	r0, r2
   84642:	4619      	mov	r1, r3
   84644:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84648:	4770      	bx	lr
   8464a:	f1c6 0520 	rsb	r5, r6, #32
   8464e:	fa22 f705 	lsr.w	r7, r2, r5
   84652:	fa03 f406 	lsl.w	r4, r3, r6
   84656:	fa21 f305 	lsr.w	r3, r1, r5
   8465a:	fa01 fb06 	lsl.w	fp, r1, r6
   8465e:	fa20 f505 	lsr.w	r5, r0, r5
   84662:	433c      	orrs	r4, r7
   84664:	ea4f 4814 	mov.w	r8, r4, lsr #16
   84668:	fbb3 fcf8 	udiv	ip, r3, r8
   8466c:	fb08 331c 	mls	r3, r8, ip, r3
   84670:	fa1f f984 	uxth.w	r9, r4
   84674:	fb09 fa0c 	mul.w	sl, r9, ip
   84678:	ea45 0b0b 	orr.w	fp, r5, fp
   8467c:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84680:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   84684:	459a      	cmp	sl, r3
   84686:	fa02 f206 	lsl.w	r2, r2, r6
   8468a:	d904      	bls.n	84696 <__udivdi3+0x18e>
   8468c:	191b      	adds	r3, r3, r4
   8468e:	f10c 35ff 	add.w	r5, ip, #4294967295
   84692:	d36f      	bcc.n	84774 <__udivdi3+0x26c>
   84694:	46ac      	mov	ip, r5
   84696:	ebca 0303 	rsb	r3, sl, r3
   8469a:	fbb3 f5f8 	udiv	r5, r3, r8
   8469e:	fb08 3315 	mls	r3, r8, r5, r3
   846a2:	fb09 f905 	mul.w	r9, r9, r5
   846a6:	fa1f fb8b 	uxth.w	fp, fp
   846aa:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   846ae:	45b9      	cmp	r9, r7
   846b0:	d904      	bls.n	846bc <__udivdi3+0x1b4>
   846b2:	193f      	adds	r7, r7, r4
   846b4:	f105 33ff 	add.w	r3, r5, #4294967295
   846b8:	d362      	bcc.n	84780 <__udivdi3+0x278>
   846ba:	461d      	mov	r5, r3
   846bc:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   846c0:	fbac 2302 	umull	r2, r3, ip, r2
   846c4:	ebc9 0707 	rsb	r7, r9, r7
   846c8:	429f      	cmp	r7, r3
   846ca:	f04f 0500 	mov.w	r5, #0
   846ce:	d34a      	bcc.n	84766 <__udivdi3+0x25e>
   846d0:	d046      	beq.n	84760 <__udivdi3+0x258>
   846d2:	4662      	mov	r2, ip
   846d4:	462b      	mov	r3, r5
   846d6:	e75d      	b.n	84594 <__udivdi3+0x8c>
   846d8:	4094      	lsls	r4, r2
   846da:	f1c2 0920 	rsb	r9, r2, #32
   846de:	fa21 fc09 	lsr.w	ip, r1, r9
   846e2:	4091      	lsls	r1, r2
   846e4:	fa20 f909 	lsr.w	r9, r0, r9
   846e8:	0c26      	lsrs	r6, r4, #16
   846ea:	fbbc f8f6 	udiv	r8, ip, r6
   846ee:	fb06 cc18 	mls	ip, r6, r8, ip
   846f2:	b2a7      	uxth	r7, r4
   846f4:	fb07 f308 	mul.w	r3, r7, r8
   846f8:	ea49 0901 	orr.w	r9, r9, r1
   846fc:	ea4f 4119 	mov.w	r1, r9, lsr #16
   84700:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   84704:	4563      	cmp	r3, ip
   84706:	fa00 f502 	lsl.w	r5, r0, r2
   8470a:	d909      	bls.n	84720 <__udivdi3+0x218>
   8470c:	eb1c 0c04 	adds.w	ip, ip, r4
   84710:	f108 32ff 	add.w	r2, r8, #4294967295
   84714:	d23b      	bcs.n	8478e <__udivdi3+0x286>
   84716:	4563      	cmp	r3, ip
   84718:	d939      	bls.n	8478e <__udivdi3+0x286>
   8471a:	f1a8 0802 	sub.w	r8, r8, #2
   8471e:	44a4      	add	ip, r4
   84720:	ebc3 0c0c 	rsb	ip, r3, ip
   84724:	fbbc f3f6 	udiv	r3, ip, r6
   84728:	fb06 c113 	mls	r1, r6, r3, ip
   8472c:	fb07 f203 	mul.w	r2, r7, r3
   84730:	fa1f f989 	uxth.w	r9, r9
   84734:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   84738:	428a      	cmp	r2, r1
   8473a:	d907      	bls.n	8474c <__udivdi3+0x244>
   8473c:	1909      	adds	r1, r1, r4
   8473e:	f103 30ff 	add.w	r0, r3, #4294967295
   84742:	d222      	bcs.n	8478a <__udivdi3+0x282>
   84744:	428a      	cmp	r2, r1
   84746:	d920      	bls.n	8478a <__udivdi3+0x282>
   84748:	3b02      	subs	r3, #2
   8474a:	4421      	add	r1, r4
   8474c:	1a89      	subs	r1, r1, r2
   8474e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84752:	e743      	b.n	845dc <__udivdi3+0xd4>
   84754:	463a      	mov	r2, r7
   84756:	e705      	b.n	84564 <__udivdi3+0x5c>
   84758:	4633      	mov	r3, r6
   8475a:	e718      	b.n	8458e <__udivdi3+0x86>
   8475c:	460a      	mov	r2, r1
   8475e:	e766      	b.n	8462e <__udivdi3+0x126>
   84760:	40b0      	lsls	r0, r6
   84762:	4290      	cmp	r0, r2
   84764:	d2b5      	bcs.n	846d2 <__udivdi3+0x1ca>
   84766:	f10c 32ff 	add.w	r2, ip, #4294967295
   8476a:	2300      	movs	r3, #0
   8476c:	e712      	b.n	84594 <__udivdi3+0x8c>
   8476e:	4633      	mov	r3, r6
   84770:	4632      	mov	r2, r6
   84772:	e70f      	b.n	84594 <__udivdi3+0x8c>
   84774:	459a      	cmp	sl, r3
   84776:	d98d      	bls.n	84694 <__udivdi3+0x18c>
   84778:	f1ac 0c02 	sub.w	ip, ip, #2
   8477c:	4423      	add	r3, r4
   8477e:	e78a      	b.n	84696 <__udivdi3+0x18e>
   84780:	45b9      	cmp	r9, r7
   84782:	d99a      	bls.n	846ba <__udivdi3+0x1b2>
   84784:	3d02      	subs	r5, #2
   84786:	4427      	add	r7, r4
   84788:	e798      	b.n	846bc <__udivdi3+0x1b4>
   8478a:	4603      	mov	r3, r0
   8478c:	e7de      	b.n	8474c <__udivdi3+0x244>
   8478e:	4690      	mov	r8, r2
   84790:	e7c6      	b.n	84720 <__udivdi3+0x218>
   84792:	3802      	subs	r0, #2
   84794:	4421      	add	r1, r4
   84796:	e735      	b.n	84604 <__udivdi3+0xfc>
   84798:	76616c53 	.word	0x76616c53
   8479c:	6e692065 	.word	0x6e692065
   847a0:	61697469 	.word	0x61697469
   847a4:	657a696c 	.word	0x657a696c
   847a8:	000a0d64 	.word	0x000a0d64
   847ac:	75736552 	.word	0x75736552
   847b0:	203a746c 	.word	0x203a746c
   847b4:	0a0d6425 	.word	0x0a0d6425
   847b8:	00000000 	.word	0x00000000
   847bc:	746e6553 	.word	0x746e6553
   847c0:	6425203a 	.word	0x6425203a
   847c4:	00000a0d 	.word	0x00000a0d
   847c8:	74617453 	.word	0x74617453
   847cc:	203a7375 	.word	0x203a7375
   847d0:	0a0d6425 	.word	0x0a0d6425
   847d4:	00000000 	.word	0x00000000
   847d8:	3f776f4e 	.word	0x3f776f4e
   847dc:	00000a0d 	.word	0x00000a0d
   847e0:	65636552 	.word	0x65636552
   847e4:	64657669 	.word	0x64657669
   847e8:	6425203a 	.word	0x6425203a
   847ec:	00000a0d 	.word	0x00000a0d
   847f0:	00000043 	.word	0x00000043

000847f4 <_global_impure_ptr>:
   847f4:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   84804:	46454443 00000000 33323130 37363534     CDEF....01234567
   84814:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84824:	0000296c                                l)..

00084828 <zeroes.6721>:
   84828:	30303030 30303030 30303030 30303030     0000000000000000

00084838 <blanks.6720>:
   84838:	20202020 20202020 20202020 20202020                     

00084848 <_init>:
   84848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8484a:	bf00      	nop
   8484c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8484e:	bc08      	pop	{r3}
   84850:	469e      	mov	lr, r3
   84852:	4770      	bx	lr

00084854 <__init_array_start>:
   84854:	0008282d 	.word	0x0008282d

00084858 <__frame_dummy_init_array_entry>:
   84858:	00080119                                ....

0008485c <_fini>:
   8485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8485e:	bf00      	nop
   84860:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84862:	bc08      	pop	{r3}
   84864:	469e      	mov	lr, r3
   84866:	4770      	bx	lr

00084868 <__fini_array_start>:
   84868:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070144 	.word	0x20070144

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <NVIC_PENDSVSET>:
20070138:	10000000                                ....

2007013c <NVIC_INT_CTRL>:
2007013c:	e000ed04                                ....

20070140 <g_interrupt_enabled>:
20070140:	00000001                                ....

20070144 <SystemCoreClock>:
20070144:	003d0900                                ..=.

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	000847f0 00000000 00000000 00000000     .G..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <lc_ctype_charset>:
20070574:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070594 <__mb_cur_max>:
20070594:	00000001                                ....

20070598 <__malloc_av_>:
	...
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 

200709a0 <__malloc_trim_threshold>:
200709a0:	00020000                                ....

200709a4 <__malloc_sbrk_base>:
200709a4:	ffffffff                                ....

200709a8 <__wctomb>:
200709a8:	00083f9d                                .?..
