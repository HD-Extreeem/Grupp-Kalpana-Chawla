
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000908  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000558  20070000  00080908  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000090  20070558  00080e60  00010558  2**2
                  ALLOC
  3 .stack        00002000  200705e8  00080ef0  00010558  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010581  2**0
                  CONTENTS, READONLY
  6 .debug_info   00004f04  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e0e  00000000  00000000  000154e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001e03  00000000  00000000  000162ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000480  00000000  00000000  000180f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003f0  00000000  00000000  00018571  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001496b  00000000  00000000  00018961  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000073be  00000000  00000000  0002d2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005e4c7  00000000  00000000  0003468a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000009d8  00000000  00000000  00092b54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725e8 	.word	0x200725e8
   80004:	000806e5 	.word	0x000806e5
   80008:	000806e1 	.word	0x000806e1
   8000c:	000806e1 	.word	0x000806e1
   80010:	000806e1 	.word	0x000806e1
   80014:	000806e1 	.word	0x000806e1
   80018:	000806e1 	.word	0x000806e1
	...
   8002c:	000806e1 	.word	0x000806e1
   80030:	000806e1 	.word	0x000806e1
   80034:	00000000 	.word	0x00000000
   80038:	000806e1 	.word	0x000806e1
   8003c:	000806e1 	.word	0x000806e1
   80040:	000806e1 	.word	0x000806e1
   80044:	000806e1 	.word	0x000806e1
   80048:	000806e1 	.word	0x000806e1
   8004c:	000806e1 	.word	0x000806e1
   80050:	000806e1 	.word	0x000806e1
   80054:	000806e1 	.word	0x000806e1
   80058:	000806e1 	.word	0x000806e1
   8005c:	000806e1 	.word	0x000806e1
   80060:	000806e1 	.word	0x000806e1
   80064:	000806e1 	.word	0x000806e1
   80068:	00000000 	.word	0x00000000
   8006c:	00080639 	.word	0x00080639
   80070:	0008064d 	.word	0x0008064d
   80074:	00080661 	.word	0x00080661
   80078:	00080675 	.word	0x00080675
	...
   80084:	000806e1 	.word	0x000806e1
   80088:	000806e1 	.word	0x000806e1
   8008c:	000806e1 	.word	0x000806e1
   80090:	000806e1 	.word	0x000806e1
   80094:	000806e1 	.word	0x000806e1
   80098:	000806e1 	.word	0x000806e1
   8009c:	000806e1 	.word	0x000806e1
   800a0:	000806e1 	.word	0x000806e1
   800a4:	00000000 	.word	0x00000000
   800a8:	000806e1 	.word	0x000806e1
   800ac:	000806e1 	.word	0x000806e1
   800b0:	000806e1 	.word	0x000806e1
   800b4:	000806e1 	.word	0x000806e1
   800b8:	000806e1 	.word	0x000806e1
   800bc:	000806e1 	.word	0x000806e1
   800c0:	000806e1 	.word	0x000806e1
   800c4:	000806e1 	.word	0x000806e1
   800c8:	000806e1 	.word	0x000806e1
   800cc:	000806e1 	.word	0x000806e1
   800d0:	000806e1 	.word	0x000806e1
   800d4:	000806e1 	.word	0x000806e1
   800d8:	000806e1 	.word	0x000806e1
   800dc:	000806e1 	.word	0x000806e1
   800e0:	000806e1 	.word	0x000806e1
   800e4:	000806e1 	.word	0x000806e1
   800e8:	000806e1 	.word	0x000806e1
   800ec:	000806e1 	.word	0x000806e1
   800f0:	000806e1 	.word	0x000806e1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070558 	.word	0x20070558
   80110:	00000000 	.word	0x00000000
   80114:	00080908 	.word	0x00080908

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00080908 	.word	0x00080908
   8013c:	2007055c 	.word	0x2007055c
   80140:	00080908 	.word	0x00080908
   80144:	00000000 	.word	0x00000000

00080148 <main>:
#include "asf.h"
#include "PwmFunctions.h"
#include "InterruptStepCounter.h"

int main(void)
{
   80148:	b508      	push	{r3, lr}
	/* Initialize the SAM system */
	SystemInit();
   8014a:	4b04      	ldr	r3, [pc, #16]	; (8015c <main+0x14>)
   8014c:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   8014e:	4b04      	ldr	r3, [pc, #16]	; (80160 <main+0x18>)
   80150:	4798      	blx	r3
	
	configInterrupts();
   80152:	4b04      	ldr	r3, [pc, #16]	; (80164 <main+0x1c>)
   80154:	4798      	blx	r3
		}
		pwm_pin_21(1500);
		pwm_pin_22(1500);
	}
	*/
   80156:	2000      	movs	r0, #0
   80158:	bd08      	pop	{r3, pc}
   8015a:	bf00      	nop
   8015c:	20070001 	.word	0x20070001
   80160:	000802b5 	.word	0x000802b5
   80164:	000801f9 	.word	0x000801f9

00080168 <pin12_edge_handler>:
 *  Author: Yurdaer Dalkic
 */ 
#include <asf.h>
#include "InterruptStepCounter.h"

void pin12_edge_handler(const uint32_t id, const uint32_t index){
   80168:	b508      	push	{r3, lr}
	if ((id==ID_PIOC) && (index==PIO_PC12)){
   8016a:	280d      	cmp	r0, #13
   8016c:	d115      	bne.n	8019a <pin12_edge_handler+0x32>
   8016e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   80172:	d112      	bne.n	8019a <pin12_edge_handler+0x32>
		  if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12))
   80174:	4809      	ldr	r0, [pc, #36]	; (8019c <pin12_edge_handler+0x34>)
   80176:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8017a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8017e:	4b08      	ldr	r3, [pc, #32]	; (801a0 <pin12_edge_handler+0x38>)
   80180:	4798      	blx	r3
   80182:	b128      	cbz	r0, 80190 <pin12_edge_handler+0x28>
		  pio_clear(PIOB, PIO_PB27);
   80184:	4807      	ldr	r0, [pc, #28]	; (801a4 <pin12_edge_handler+0x3c>)
   80186:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8018a:	4b07      	ldr	r3, [pc, #28]	; (801a8 <pin12_edge_handler+0x40>)
   8018c:	4798      	blx	r3
   8018e:	bd08      	pop	{r3, pc}
		  else
		  pio_set(PIOB, PIO_PB27);
   80190:	4804      	ldr	r0, [pc, #16]	; (801a4 <pin12_edge_handler+0x3c>)
   80192:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80196:	4b05      	ldr	r3, [pc, #20]	; (801ac <pin12_edge_handler+0x44>)
   80198:	4798      	blx	r3
   8019a:	bd08      	pop	{r3, pc}
   8019c:	400e1200 	.word	0x400e1200
   801a0:	0008033d 	.word	0x0008033d
   801a4:	400e1000 	.word	0x400e1000
   801a8:	00080339 	.word	0x00080339
   801ac:	00080335 	.word	0x00080335

000801b0 <pin14_edge_handler>:
	}
}
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   801b0:	b508      	push	{r3, lr}
		if ((id==ID_PIOB) && (index==PIO_PB14)){
   801b2:	280c      	cmp	r0, #12
   801b4:	d115      	bne.n	801e2 <pin14_edge_handler+0x32>
   801b6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   801ba:	d112      	bne.n	801e2 <pin14_edge_handler+0x32>
			if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14))
   801bc:	4809      	ldr	r0, [pc, #36]	; (801e4 <pin14_edge_handler+0x34>)
   801be:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   801c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   801c6:	4b08      	ldr	r3, [pc, #32]	; (801e8 <pin14_edge_handler+0x38>)
   801c8:	4798      	blx	r3
   801ca:	b128      	cbz	r0, 801d8 <pin14_edge_handler+0x28>
			pio_clear(PIOD, PIO_PD8);
   801cc:	4807      	ldr	r0, [pc, #28]	; (801ec <pin14_edge_handler+0x3c>)
   801ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   801d2:	4b07      	ldr	r3, [pc, #28]	; (801f0 <pin14_edge_handler+0x40>)
   801d4:	4798      	blx	r3
   801d6:	bd08      	pop	{r3, pc}
			else
			pio_set(PIOD, PIO_PD8);
   801d8:	4804      	ldr	r0, [pc, #16]	; (801ec <pin14_edge_handler+0x3c>)
   801da:	f44f 7180 	mov.w	r1, #256	; 0x100
   801de:	4b05      	ldr	r3, [pc, #20]	; (801f4 <pin14_edge_handler+0x44>)
   801e0:	4798      	blx	r3
   801e2:	bd08      	pop	{r3, pc}
   801e4:	400e1000 	.word	0x400e1000
   801e8:	0008033d 	.word	0x0008033d
   801ec:	400e1400 	.word	0x400e1400
   801f0:	00080339 	.word	0x00080339
   801f4:	00080335 	.word	0x00080335

000801f8 <configInterrupts>:
		}
}


void configInterrupts(void){
   801f8:	b570      	push	{r4, r5, r6, lr}
   801fa:	b082      	sub	sp, #8
	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   801fc:	200c      	movs	r0, #12
   801fe:	4c22      	ldr	r4, [pc, #136]	; (80288 <configInterrupts+0x90>)
   80200:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);
   80202:	200d      	movs	r0, #13
   80204:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   80206:	4d21      	ldr	r5, [pc, #132]	; (8028c <configInterrupts+0x94>)
   80208:	4628      	mov	r0, r5
   8020a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8020e:	2201      	movs	r2, #1
   80210:	4e1f      	ldr	r6, [pc, #124]	; (80290 <configInterrupts+0x98>)
   80212:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   80214:	4c1f      	ldr	r4, [pc, #124]	; (80294 <configInterrupts+0x9c>)
   80216:	4620      	mov	r0, r4
   80218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8021c:	2201      	movs	r2, #1
   8021e:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   80220:	4b1d      	ldr	r3, [pc, #116]	; (80298 <configInterrupts+0xa0>)
   80222:	9300      	str	r3, [sp, #0]
   80224:	4628      	mov	r0, r5
   80226:	210d      	movs	r1, #13
   80228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8022c:	2340      	movs	r3, #64	; 0x40
   8022e:	4e1b      	ldr	r6, [pc, #108]	; (8029c <configInterrupts+0xa4>)
   80230:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   80232:	4b1b      	ldr	r3, [pc, #108]	; (802a0 <configInterrupts+0xa8>)
   80234:	9300      	str	r3, [sp, #0]
   80236:	4620      	mov	r0, r4
   80238:	210c      	movs	r1, #12
   8023a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8023e:	2340      	movs	r3, #64	; 0x40
   80240:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   80242:	4628      	mov	r0, r5
   80244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80248:	4d16      	ldr	r5, [pc, #88]	; (802a4 <configInterrupts+0xac>)
   8024a:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   8024c:	4620      	mov	r0, r4
   8024e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80252:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80254:	4b14      	ldr	r3, [pc, #80]	; (802a8 <configInterrupts+0xb0>)
   80256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8025a:	601a      	str	r2, [r3, #0]
   8025c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80260:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);
	
	//test
	pio_set_output(PIOB, PIO_PB27, LOW, DISABLE, ENABLE); 
   80262:	2501      	movs	r5, #1
   80264:	9500      	str	r5, [sp, #0]
   80266:	4620      	mov	r0, r4
   80268:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8026c:	2200      	movs	r2, #0
   8026e:	4613      	mov	r3, r2
   80270:	4c0e      	ldr	r4, [pc, #56]	; (802ac <configInterrupts+0xb4>)
   80272:	47a0      	blx	r4
	pio_set_output(PIOD, PIO_PD8, LOW, DISABLE, ENABLE); 
   80274:	9500      	str	r5, [sp, #0]
   80276:	480e      	ldr	r0, [pc, #56]	; (802b0 <configInterrupts+0xb8>)
   80278:	f44f 7180 	mov.w	r1, #256	; 0x100
   8027c:	2200      	movs	r2, #0
   8027e:	4613      	mov	r3, r2
   80280:	47a0      	blx	r4
}
   80282:	b002      	add	sp, #8
   80284:	bd70      	pop	{r4, r5, r6, pc}
   80286:	bf00      	nop
   80288:	00080689 	.word	0x00080689
   8028c:	400e1200 	.word	0x400e1200
   80290:	00080395 	.word	0x00080395
   80294:	400e1000 	.word	0x400e1000
   80298:	00080169 	.word	0x00080169
   8029c:	000805fd 	.word	0x000805fd
   802a0:	000801b1 	.word	0x000801b1
   802a4:	00080421 	.word	0x00080421
   802a8:	e000e100 	.word	0xe000e100
   802ac:	000803c9 	.word	0x000803c9
   802b0:	400e1400 	.word	0x400e1400

000802b4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   802b4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   802b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   802ba:	4b17      	ldr	r3, [pc, #92]	; (80318 <board_init+0x64>)
   802bc:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   802be:	200b      	movs	r0, #11
   802c0:	4c16      	ldr	r4, [pc, #88]	; (8031c <board_init+0x68>)
   802c2:	47a0      	blx	r4
   802c4:	200c      	movs	r0, #12
   802c6:	47a0      	blx	r4
   802c8:	200d      	movs	r0, #13
   802ca:	47a0      	blx	r4
   802cc:	200e      	movs	r0, #14
   802ce:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   802d0:	203b      	movs	r0, #59	; 0x3b
   802d2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802d6:	4c12      	ldr	r4, [pc, #72]	; (80320 <board_init+0x6c>)
   802d8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   802da:	2055      	movs	r0, #85	; 0x55
   802dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802e0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   802e2:	2056      	movs	r0, #86	; 0x56
   802e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802e8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   802ea:	2068      	movs	r0, #104	; 0x68
   802ec:	490d      	ldr	r1, [pc, #52]	; (80324 <board_init+0x70>)
   802ee:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   802f0:	205c      	movs	r0, #92	; 0x5c
   802f2:	490d      	ldr	r1, [pc, #52]	; (80328 <board_init+0x74>)
   802f4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   802f6:	480d      	ldr	r0, [pc, #52]	; (8032c <board_init+0x78>)
   802f8:	f44f 7140 	mov.w	r1, #768	; 0x300
   802fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80300:	4b0b      	ldr	r3, [pc, #44]	; (80330 <board_init+0x7c>)
   80302:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80304:	202b      	movs	r0, #43	; 0x2b
   80306:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8030a:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8030c:	202a      	movs	r0, #42	; 0x2a
   8030e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80312:	47a0      	blx	r4
   80314:	bd10      	pop	{r4, pc}
   80316:	bf00      	nop
   80318:	400e1a50 	.word	0x400e1a50
   8031c:	00080689 	.word	0x00080689
   80320:	00080431 	.word	0x00080431
   80324:	28000079 	.word	0x28000079
   80328:	28000001 	.word	0x28000001
   8032c:	400e0e00 	.word	0x400e0e00
   80330:	00080505 	.word	0x00080505

00080334 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
   80334:	6301      	str	r1, [r0, #48]	; 0x30
   80336:	4770      	bx	lr

00080338 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
   80338:	6341      	str	r1, [r0, #52]	; 0x34
   8033a:	4770      	bx	lr

0008033c <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   8033c:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80340:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   80344:	bf0c      	ite	eq
   80346:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   80348:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   8034a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   8034c:	bf0c      	ite	eq
   8034e:	2000      	moveq	r0, #0
   80350:	2001      	movne	r0, #1
   80352:	4770      	bx	lr

00080354 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80354:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80356:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8035a:	d016      	beq.n	8038a <pio_set_peripheral+0x36>
   8035c:	d804      	bhi.n	80368 <pio_set_peripheral+0x14>
   8035e:	b1c1      	cbz	r1, 80392 <pio_set_peripheral+0x3e>
   80360:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80364:	d00a      	beq.n	8037c <pio_set_peripheral+0x28>
   80366:	e013      	b.n	80390 <pio_set_peripheral+0x3c>
   80368:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8036c:	d011      	beq.n	80392 <pio_set_peripheral+0x3e>
   8036e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80372:	d00e      	beq.n	80392 <pio_set_peripheral+0x3e>
   80374:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80378:	d10a      	bne.n	80390 <pio_set_peripheral+0x3c>
   8037a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8037c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8037e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80380:	400b      	ands	r3, r1
   80382:	ea23 0302 	bic.w	r3, r3, r2
   80386:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80388:	e002      	b.n	80390 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8038a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8038c:	4313      	orrs	r3, r2
   8038e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80390:	6042      	str	r2, [r0, #4]
   80392:	4770      	bx	lr

00080394 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80394:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80396:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8039a:	bf14      	ite	ne
   8039c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8039e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   803a0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   803a4:	bf14      	ite	ne
   803a6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   803a8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   803aa:	f012 0f02 	tst.w	r2, #2
   803ae:	d002      	beq.n	803b6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   803b0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   803b4:	e004      	b.n	803c0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   803b6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   803ba:	bf18      	it	ne
   803bc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   803c0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   803c2:	6001      	str	r1, [r0, #0]
   803c4:	4770      	bx	lr
   803c6:	bf00      	nop

000803c8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   803c8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803ca:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803cc:	9c01      	ldr	r4, [sp, #4]
   803ce:	b10c      	cbz	r4, 803d4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   803d0:	6641      	str	r1, [r0, #100]	; 0x64
   803d2:	e000      	b.n	803d6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803d4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   803d6:	b10b      	cbz	r3, 803dc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   803d8:	6501      	str	r1, [r0, #80]	; 0x50
   803da:	e000      	b.n	803de <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   803dc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   803de:	b10a      	cbz	r2, 803e4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   803e0:	6301      	str	r1, [r0, #48]	; 0x30
   803e2:	e000      	b.n	803e6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   803e4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   803e6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   803e8:	6001      	str	r1, [r0, #0]
}
   803ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   803ee:	4770      	bx	lr

000803f0 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   803f0:	f012 0f10 	tst.w	r2, #16
   803f4:	d010      	beq.n	80418 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   803f6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   803fa:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   803fe:	bf14      	ite	ne
   80400:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80404:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   80408:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   8040c:	bf14      	ite	ne
   8040e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   80412:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80416:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   80418:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   8041c:	4770      	bx	lr
   8041e:	bf00      	nop

00080420 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   80420:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   80422:	6401      	str	r1, [r0, #64]	; 0x40
   80424:	4770      	bx	lr
   80426:	bf00      	nop

00080428 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80428:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8042a:	4770      	bx	lr

0008042c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8042c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8042e:	4770      	bx	lr

00080430 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80430:	b570      	push	{r4, r5, r6, lr}
   80432:	b082      	sub	sp, #8
   80434:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80436:	0944      	lsrs	r4, r0, #5
   80438:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   8043c:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80440:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80442:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80446:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8044a:	d030      	beq.n	804ae <pio_configure_pin+0x7e>
   8044c:	d806      	bhi.n	8045c <pio_configure_pin+0x2c>
   8044e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80452:	d00a      	beq.n	8046a <pio_configure_pin+0x3a>
   80454:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80458:	d018      	beq.n	8048c <pio_configure_pin+0x5c>
   8045a:	e049      	b.n	804f0 <pio_configure_pin+0xc0>
   8045c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80460:	d030      	beq.n	804c4 <pio_configure_pin+0x94>
   80462:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80466:	d02d      	beq.n	804c4 <pio_configure_pin+0x94>
   80468:	e042      	b.n	804f0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8046a:	f000 001f 	and.w	r0, r0, #31
   8046e:	2401      	movs	r4, #1
   80470:	4084      	lsls	r4, r0
   80472:	4630      	mov	r0, r6
   80474:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80478:	4622      	mov	r2, r4
   8047a:	4b1f      	ldr	r3, [pc, #124]	; (804f8 <pio_configure_pin+0xc8>)
   8047c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8047e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80482:	bf14      	ite	ne
   80484:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80486:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80488:	2001      	movs	r0, #1
   8048a:	e032      	b.n	804f2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8048c:	f000 001f 	and.w	r0, r0, #31
   80490:	2401      	movs	r4, #1
   80492:	4084      	lsls	r4, r0
   80494:	4630      	mov	r0, r6
   80496:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8049a:	4622      	mov	r2, r4
   8049c:	4b16      	ldr	r3, [pc, #88]	; (804f8 <pio_configure_pin+0xc8>)
   8049e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   804a0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   804a4:	bf14      	ite	ne
   804a6:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   804a8:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   804aa:	2001      	movs	r0, #1
   804ac:	e021      	b.n	804f2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   804ae:	f000 011f 	and.w	r1, r0, #31
   804b2:	2401      	movs	r4, #1
   804b4:	4630      	mov	r0, r6
   804b6:	fa04 f101 	lsl.w	r1, r4, r1
   804ba:	462a      	mov	r2, r5
   804bc:	4b0f      	ldr	r3, [pc, #60]	; (804fc <pio_configure_pin+0xcc>)
   804be:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   804c0:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   804c2:	e016      	b.n	804f2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804c4:	f000 011f 	and.w	r1, r0, #31
   804c8:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   804ca:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804ce:	ea05 0304 	and.w	r3, r5, r4
   804d2:	9300      	str	r3, [sp, #0]
   804d4:	4630      	mov	r0, r6
   804d6:	fa04 f101 	lsl.w	r1, r4, r1
   804da:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804de:	bf14      	ite	ne
   804e0:	2200      	movne	r2, #0
   804e2:	2201      	moveq	r2, #1
   804e4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   804e8:	4d05      	ldr	r5, [pc, #20]	; (80500 <pio_configure_pin+0xd0>)
   804ea:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   804ec:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804ee:	e000      	b.n	804f2 <pio_configure_pin+0xc2>

	default:
		return 0;
   804f0:	2000      	movs	r0, #0
	}

	return 1;
}
   804f2:	b002      	add	sp, #8
   804f4:	bd70      	pop	{r4, r5, r6, pc}
   804f6:	bf00      	nop
   804f8:	00080355 	.word	0x00080355
   804fc:	00080395 	.word	0x00080395
   80500:	000803c9 	.word	0x000803c9

00080504 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80504:	b5f0      	push	{r4, r5, r6, r7, lr}
   80506:	b083      	sub	sp, #12
   80508:	4607      	mov	r7, r0
   8050a:	460e      	mov	r6, r1
   8050c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8050e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80512:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80516:	d026      	beq.n	80566 <pio_configure_pin_group+0x62>
   80518:	d806      	bhi.n	80528 <pio_configure_pin_group+0x24>
   8051a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8051e:	d00a      	beq.n	80536 <pio_configure_pin_group+0x32>
   80520:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80524:	d013      	beq.n	8054e <pio_configure_pin_group+0x4a>
   80526:	e034      	b.n	80592 <pio_configure_pin_group+0x8e>
   80528:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8052c:	d01f      	beq.n	8056e <pio_configure_pin_group+0x6a>
   8052e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80532:	d01c      	beq.n	8056e <pio_configure_pin_group+0x6a>
   80534:	e02d      	b.n	80592 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80536:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8053a:	4632      	mov	r2, r6
   8053c:	4b16      	ldr	r3, [pc, #88]	; (80598 <pio_configure_pin_group+0x94>)
   8053e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80540:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80544:	bf14      	ite	ne
   80546:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80548:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8054a:	2001      	movs	r0, #1
   8054c:	e022      	b.n	80594 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8054e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80552:	4632      	mov	r2, r6
   80554:	4b10      	ldr	r3, [pc, #64]	; (80598 <pio_configure_pin_group+0x94>)
   80556:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80558:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8055c:	bf14      	ite	ne
   8055e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80560:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80562:	2001      	movs	r0, #1
   80564:	e016      	b.n	80594 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80566:	4b0d      	ldr	r3, [pc, #52]	; (8059c <pio_configure_pin_group+0x98>)
   80568:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8056a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8056c:	e012      	b.n	80594 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8056e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80572:	f005 0301 	and.w	r3, r5, #1
   80576:	9300      	str	r3, [sp, #0]
   80578:	4638      	mov	r0, r7
   8057a:	4631      	mov	r1, r6
   8057c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80580:	bf14      	ite	ne
   80582:	2200      	movne	r2, #0
   80584:	2201      	moveq	r2, #1
   80586:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8058a:	4c05      	ldr	r4, [pc, #20]	; (805a0 <pio_configure_pin_group+0x9c>)
   8058c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8058e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80590:	e000      	b.n	80594 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80592:	2000      	movs	r0, #0
	}

	return 1;
}
   80594:	b003      	add	sp, #12
   80596:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80598:	00080355 	.word	0x00080355
   8059c:	00080395 	.word	0x00080395
   805a0:	000803c9 	.word	0x000803c9

000805a4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   805a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805a8:	4604      	mov	r4, r0
   805aa:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   805ac:	4b10      	ldr	r3, [pc, #64]	; (805f0 <pio_handler_process+0x4c>)
   805ae:	4798      	blx	r3
   805b0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   805b2:	4620      	mov	r0, r4
   805b4:	4b0f      	ldr	r3, [pc, #60]	; (805f4 <pio_handler_process+0x50>)
   805b6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   805b8:	4005      	ands	r5, r0
   805ba:	d017      	beq.n	805ec <pio_handler_process+0x48>
   805bc:	4f0e      	ldr	r7, [pc, #56]	; (805f8 <pio_handler_process+0x54>)
   805be:	f107 040c 	add.w	r4, r7, #12
   805c2:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   805c4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   805c8:	42b3      	cmp	r3, r6
   805ca:	d10a      	bne.n	805e2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   805cc:	f854 1c08 	ldr.w	r1, [r4, #-8]
   805d0:	4229      	tst	r1, r5
   805d2:	d006      	beq.n	805e2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   805d4:	6823      	ldr	r3, [r4, #0]
   805d6:	4630      	mov	r0, r6
   805d8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   805da:	f854 3c08 	ldr.w	r3, [r4, #-8]
   805de:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   805e2:	42bc      	cmp	r4, r7
   805e4:	d002      	beq.n	805ec <pio_handler_process+0x48>
   805e6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   805e8:	2d00      	cmp	r5, #0
   805ea:	d1eb      	bne.n	805c4 <pio_handler_process+0x20>
   805ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805f0:	00080429 	.word	0x00080429
   805f4:	0008042d 	.word	0x0008042d
   805f8:	20070578 	.word	0x20070578

000805fc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   805fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   805fe:	4c0b      	ldr	r4, [pc, #44]	; (8062c <pio_handler_set+0x30>)
   80600:	6824      	ldr	r4, [r4, #0]
   80602:	2c06      	cmp	r4, #6
   80604:	d810      	bhi.n	80628 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   80606:	4f0a      	ldr	r7, [pc, #40]	; (80630 <pio_handler_set+0x34>)
   80608:	0126      	lsls	r6, r4, #4
   8060a:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   8060c:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   8060e:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   80610:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   80612:	9906      	ldr	r1, [sp, #24]
   80614:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   80616:	3401      	adds	r4, #1
   80618:	4904      	ldr	r1, [pc, #16]	; (8062c <pio_handler_set+0x30>)
   8061a:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   8061c:	4611      	mov	r1, r2
   8061e:	461a      	mov	r2, r3
   80620:	4b04      	ldr	r3, [pc, #16]	; (80634 <pio_handler_set+0x38>)
   80622:	4798      	blx	r3

	return 0;
   80624:	2000      	movs	r0, #0
   80626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80628:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   8062a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8062c:	20070574 	.word	0x20070574
   80630:	20070578 	.word	0x20070578
   80634:	000803f1 	.word	0x000803f1

00080638 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80638:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8063a:	4802      	ldr	r0, [pc, #8]	; (80644 <PIOA_Handler+0xc>)
   8063c:	210b      	movs	r1, #11
   8063e:	4b02      	ldr	r3, [pc, #8]	; (80648 <PIOA_Handler+0x10>)
   80640:	4798      	blx	r3
   80642:	bd08      	pop	{r3, pc}
   80644:	400e0e00 	.word	0x400e0e00
   80648:	000805a5 	.word	0x000805a5

0008064c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8064c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8064e:	4802      	ldr	r0, [pc, #8]	; (80658 <PIOB_Handler+0xc>)
   80650:	210c      	movs	r1, #12
   80652:	4b02      	ldr	r3, [pc, #8]	; (8065c <PIOB_Handler+0x10>)
   80654:	4798      	blx	r3
   80656:	bd08      	pop	{r3, pc}
   80658:	400e1000 	.word	0x400e1000
   8065c:	000805a5 	.word	0x000805a5

00080660 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80660:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80662:	4802      	ldr	r0, [pc, #8]	; (8066c <PIOC_Handler+0xc>)
   80664:	210d      	movs	r1, #13
   80666:	4b02      	ldr	r3, [pc, #8]	; (80670 <PIOC_Handler+0x10>)
   80668:	4798      	blx	r3
   8066a:	bd08      	pop	{r3, pc}
   8066c:	400e1200 	.word	0x400e1200
   80670:	000805a5 	.word	0x000805a5

00080674 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80674:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80676:	4802      	ldr	r0, [pc, #8]	; (80680 <PIOD_Handler+0xc>)
   80678:	210e      	movs	r1, #14
   8067a:	4b02      	ldr	r3, [pc, #8]	; (80684 <PIOD_Handler+0x10>)
   8067c:	4798      	blx	r3
   8067e:	bd08      	pop	{r3, pc}
   80680:	400e1400 	.word	0x400e1400
   80684:	000805a5 	.word	0x000805a5

00080688 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80688:	282c      	cmp	r0, #44	; 0x2c
   8068a:	d820      	bhi.n	806ce <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   8068c:	281f      	cmp	r0, #31
   8068e:	d80d      	bhi.n	806ac <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80690:	4b12      	ldr	r3, [pc, #72]	; (806dc <pmc_enable_periph_clk+0x54>)
   80692:	699a      	ldr	r2, [r3, #24]
   80694:	2301      	movs	r3, #1
   80696:	4083      	lsls	r3, r0
   80698:	401a      	ands	r2, r3
   8069a:	4293      	cmp	r3, r2
   8069c:	d019      	beq.n	806d2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8069e:	2301      	movs	r3, #1
   806a0:	fa03 f000 	lsl.w	r0, r3, r0
   806a4:	4b0d      	ldr	r3, [pc, #52]	; (806dc <pmc_enable_periph_clk+0x54>)
   806a6:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   806a8:	2000      	movs	r0, #0
   806aa:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   806ac:	4b0b      	ldr	r3, [pc, #44]	; (806dc <pmc_enable_periph_clk+0x54>)
   806ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   806b2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   806b4:	2301      	movs	r3, #1
   806b6:	4083      	lsls	r3, r0
   806b8:	401a      	ands	r2, r3
   806ba:	4293      	cmp	r3, r2
   806bc:	d00b      	beq.n	806d6 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   806be:	2301      	movs	r3, #1
   806c0:	fa03 f000 	lsl.w	r0, r3, r0
   806c4:	4b05      	ldr	r3, [pc, #20]	; (806dc <pmc_enable_periph_clk+0x54>)
   806c6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   806ca:	2000      	movs	r0, #0
   806cc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   806ce:	2001      	movs	r0, #1
   806d0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   806d2:	2000      	movs	r0, #0
   806d4:	4770      	bx	lr
   806d6:	2000      	movs	r0, #0
}
   806d8:	4770      	bx	lr
   806da:	bf00      	nop
   806dc:	400e0600 	.word	0x400e0600

000806e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   806e0:	e7fe      	b.n	806e0 <Dummy_Handler>
   806e2:	bf00      	nop

000806e4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   806e4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   806e6:	4b1e      	ldr	r3, [pc, #120]	; (80760 <Reset_Handler+0x7c>)
   806e8:	4a1e      	ldr	r2, [pc, #120]	; (80764 <Reset_Handler+0x80>)
   806ea:	429a      	cmp	r2, r3
   806ec:	d003      	beq.n	806f6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   806ee:	4b1e      	ldr	r3, [pc, #120]	; (80768 <Reset_Handler+0x84>)
   806f0:	4a1b      	ldr	r2, [pc, #108]	; (80760 <Reset_Handler+0x7c>)
   806f2:	429a      	cmp	r2, r3
   806f4:	d304      	bcc.n	80700 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   806f6:	4b1d      	ldr	r3, [pc, #116]	; (8076c <Reset_Handler+0x88>)
   806f8:	4a1d      	ldr	r2, [pc, #116]	; (80770 <Reset_Handler+0x8c>)
   806fa:	429a      	cmp	r2, r3
   806fc:	d30f      	bcc.n	8071e <Reset_Handler+0x3a>
   806fe:	e01a      	b.n	80736 <Reset_Handler+0x52>
   80700:	4b1c      	ldr	r3, [pc, #112]	; (80774 <Reset_Handler+0x90>)
   80702:	4c1d      	ldr	r4, [pc, #116]	; (80778 <Reset_Handler+0x94>)
   80704:	1ae4      	subs	r4, r4, r3
   80706:	f024 0403 	bic.w	r4, r4, #3
   8070a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8070c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8070e:	4814      	ldr	r0, [pc, #80]	; (80760 <Reset_Handler+0x7c>)
   80710:	4914      	ldr	r1, [pc, #80]	; (80764 <Reset_Handler+0x80>)
   80712:	585a      	ldr	r2, [r3, r1]
   80714:	501a      	str	r2, [r3, r0]
   80716:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80718:	42a3      	cmp	r3, r4
   8071a:	d1fa      	bne.n	80712 <Reset_Handler+0x2e>
   8071c:	e7eb      	b.n	806f6 <Reset_Handler+0x12>
   8071e:	4b17      	ldr	r3, [pc, #92]	; (8077c <Reset_Handler+0x98>)
   80720:	4917      	ldr	r1, [pc, #92]	; (80780 <Reset_Handler+0x9c>)
   80722:	1ac9      	subs	r1, r1, r3
   80724:	f021 0103 	bic.w	r1, r1, #3
   80728:	1d1a      	adds	r2, r3, #4
   8072a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8072c:	2200      	movs	r2, #0
   8072e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80732:	428b      	cmp	r3, r1
   80734:	d1fb      	bne.n	8072e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80736:	4a13      	ldr	r2, [pc, #76]	; (80784 <Reset_Handler+0xa0>)
   80738:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   8073c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80740:	4911      	ldr	r1, [pc, #68]	; (80788 <Reset_Handler+0xa4>)
   80742:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80744:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80748:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   8074c:	d203      	bcs.n	80756 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8074e:	688a      	ldr	r2, [r1, #8]
   80750:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80754:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80756:	4b0d      	ldr	r3, [pc, #52]	; (8078c <Reset_Handler+0xa8>)
   80758:	4798      	blx	r3

	/* Branch to main function */
	main();
   8075a:	4b0d      	ldr	r3, [pc, #52]	; (80790 <Reset_Handler+0xac>)
   8075c:	4798      	blx	r3
   8075e:	e7fe      	b.n	8075e <Reset_Handler+0x7a>
   80760:	20070000 	.word	0x20070000
   80764:	00080908 	.word	0x00080908
   80768:	20070558 	.word	0x20070558
   8076c:	200705e8 	.word	0x200705e8
   80770:	20070558 	.word	0x20070558
   80774:	20070004 	.word	0x20070004
   80778:	2007055b 	.word	0x2007055b
   8077c:	20070554 	.word	0x20070554
   80780:	200705e3 	.word	0x200705e3
   80784:	00080000 	.word	0x00080000
   80788:	e000ed00 	.word	0xe000ed00
   8078c:	00080795 	.word	0x00080795
   80790:	00080149 	.word	0x00080149

00080794 <__libc_init_array>:
   80794:	b570      	push	{r4, r5, r6, lr}
   80796:	4e0f      	ldr	r6, [pc, #60]	; (807d4 <__libc_init_array+0x40>)
   80798:	4d0f      	ldr	r5, [pc, #60]	; (807d8 <__libc_init_array+0x44>)
   8079a:	1b76      	subs	r6, r6, r5
   8079c:	10b6      	asrs	r6, r6, #2
   8079e:	d007      	beq.n	807b0 <__libc_init_array+0x1c>
   807a0:	3d04      	subs	r5, #4
   807a2:	2400      	movs	r4, #0
   807a4:	3401      	adds	r4, #1
   807a6:	f855 3f04 	ldr.w	r3, [r5, #4]!
   807aa:	4798      	blx	r3
   807ac:	42a6      	cmp	r6, r4
   807ae:	d1f9      	bne.n	807a4 <__libc_init_array+0x10>
   807b0:	4e0a      	ldr	r6, [pc, #40]	; (807dc <__libc_init_array+0x48>)
   807b2:	4d0b      	ldr	r5, [pc, #44]	; (807e0 <__libc_init_array+0x4c>)
   807b4:	f000 f896 	bl	808e4 <_init>
   807b8:	1b76      	subs	r6, r6, r5
   807ba:	10b6      	asrs	r6, r6, #2
   807bc:	d008      	beq.n	807d0 <__libc_init_array+0x3c>
   807be:	3d04      	subs	r5, #4
   807c0:	2400      	movs	r4, #0
   807c2:	3401      	adds	r4, #1
   807c4:	f855 3f04 	ldr.w	r3, [r5, #4]!
   807c8:	4798      	blx	r3
   807ca:	42a6      	cmp	r6, r4
   807cc:	d1f9      	bne.n	807c2 <__libc_init_array+0x2e>
   807ce:	bd70      	pop	{r4, r5, r6, pc}
   807d0:	bd70      	pop	{r4, r5, r6, pc}
   807d2:	bf00      	nop
   807d4:	000808f0 	.word	0x000808f0
   807d8:	000808f0 	.word	0x000808f0
   807dc:	000808f8 	.word	0x000808f8
   807e0:	000808f0 	.word	0x000808f0

000807e4 <register_fini>:
   807e4:	4b02      	ldr	r3, [pc, #8]	; (807f0 <register_fini+0xc>)
   807e6:	b113      	cbz	r3, 807ee <register_fini+0xa>
   807e8:	4802      	ldr	r0, [pc, #8]	; (807f4 <register_fini+0x10>)
   807ea:	f000 b805 	b.w	807f8 <atexit>
   807ee:	4770      	bx	lr
   807f0:	00000000 	.word	0x00000000
   807f4:	00080805 	.word	0x00080805

000807f8 <atexit>:
   807f8:	4601      	mov	r1, r0
   807fa:	2000      	movs	r0, #0
   807fc:	4602      	mov	r2, r0
   807fe:	4603      	mov	r3, r0
   80800:	f000 b818 	b.w	80834 <__register_exitproc>

00080804 <__libc_fini_array>:
   80804:	b538      	push	{r3, r4, r5, lr}
   80806:	4d09      	ldr	r5, [pc, #36]	; (8082c <__libc_fini_array+0x28>)
   80808:	4c09      	ldr	r4, [pc, #36]	; (80830 <__libc_fini_array+0x2c>)
   8080a:	1b64      	subs	r4, r4, r5
   8080c:	10a4      	asrs	r4, r4, #2
   8080e:	bf18      	it	ne
   80810:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   80814:	d005      	beq.n	80822 <__libc_fini_array+0x1e>
   80816:	3c01      	subs	r4, #1
   80818:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8081c:	4798      	blx	r3
   8081e:	2c00      	cmp	r4, #0
   80820:	d1f9      	bne.n	80816 <__libc_fini_array+0x12>
   80822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80826:	f000 b867 	b.w	808f8 <_fini>
   8082a:	bf00      	nop
   8082c:	00080904 	.word	0x00080904
   80830:	00080908 	.word	0x00080908

00080834 <__register_exitproc>:
   80834:	b5f0      	push	{r4, r5, r6, r7, lr}
   80836:	4c27      	ldr	r4, [pc, #156]	; (808d4 <__register_exitproc+0xa0>)
   80838:	b085      	sub	sp, #20
   8083a:	6826      	ldr	r6, [r4, #0]
   8083c:	4607      	mov	r7, r0
   8083e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   80842:	2c00      	cmp	r4, #0
   80844:	d040      	beq.n	808c8 <__register_exitproc+0x94>
   80846:	6865      	ldr	r5, [r4, #4]
   80848:	2d1f      	cmp	r5, #31
   8084a:	dd1e      	ble.n	8088a <__register_exitproc+0x56>
   8084c:	4822      	ldr	r0, [pc, #136]	; (808d8 <__register_exitproc+0xa4>)
   8084e:	b918      	cbnz	r0, 80858 <__register_exitproc+0x24>
   80850:	f04f 30ff 	mov.w	r0, #4294967295
   80854:	b005      	add	sp, #20
   80856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80858:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8085c:	9103      	str	r1, [sp, #12]
   8085e:	9202      	str	r2, [sp, #8]
   80860:	9301      	str	r3, [sp, #4]
   80862:	f3af 8000 	nop.w
   80866:	9903      	ldr	r1, [sp, #12]
   80868:	4604      	mov	r4, r0
   8086a:	9a02      	ldr	r2, [sp, #8]
   8086c:	9b01      	ldr	r3, [sp, #4]
   8086e:	2800      	cmp	r0, #0
   80870:	d0ee      	beq.n	80850 <__register_exitproc+0x1c>
   80872:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   80876:	2000      	movs	r0, #0
   80878:	6025      	str	r5, [r4, #0]
   8087a:	6060      	str	r0, [r4, #4]
   8087c:	4605      	mov	r5, r0
   8087e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   80882:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   80886:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8088a:	b93f      	cbnz	r7, 8089c <__register_exitproc+0x68>
   8088c:	1c6b      	adds	r3, r5, #1
   8088e:	2000      	movs	r0, #0
   80890:	3502      	adds	r5, #2
   80892:	6063      	str	r3, [r4, #4]
   80894:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   80898:	b005      	add	sp, #20
   8089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8089c:	2601      	movs	r6, #1
   8089e:	40ae      	lsls	r6, r5
   808a0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   808a4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   808a8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   808ac:	2f02      	cmp	r7, #2
   808ae:	ea42 0206 	orr.w	r2, r2, r6
   808b2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   808b6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   808ba:	d1e7      	bne.n	8088c <__register_exitproc+0x58>
   808bc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   808c0:	431e      	orrs	r6, r3
   808c2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   808c6:	e7e1      	b.n	8088c <__register_exitproc+0x58>
   808c8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   808cc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   808d0:	e7b9      	b.n	80846 <__register_exitproc+0x12>
   808d2:	bf00      	nop
   808d4:	000808e0 	.word	0x000808e0
   808d8:	00000000 	.word	0x00000000
   808dc:	00000043 	.word	0x00000043

000808e0 <_global_impure_ptr>:
   808e0:	20070130                                0.. 

000808e4 <_init>:
   808e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   808e6:	bf00      	nop
   808e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   808ea:	bc08      	pop	{r3}
   808ec:	469e      	mov	lr, r3
   808ee:	4770      	bx	lr

000808f0 <__init_array_start>:
   808f0:	000807e5 	.word	0x000807e5

000808f4 <__frame_dummy_init_array_entry>:
   808f4:	00080119                                ....

000808f8 <_fini>:
   808f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   808fa:	bf00      	nop
   808fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   808fe:	bc08      	pop	{r3}
   80900:	469e      	mov	lr, r3
   80902:	4770      	bx	lr

00080904 <__fini_array_start>:
   80904:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	000808dc 00000000 00000000 00000000     ................
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...
