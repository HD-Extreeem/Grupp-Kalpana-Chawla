
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fcc  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083fcc  00083fcc  0000bfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000099c  20070000  00083fd4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001dc  2007099c  00084970  0001099c  2**2
                  ALLOC
  4 .stack        00002000  20070b78  00084b4c  0001099c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000ec3b  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000266c  00000000  00000000  0001f65b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004e8e  00000000  00000000  00021cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b28  00000000  00000000  00026b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a00  00000000  00000000  0002767d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000185fd  00000000  00000000  0002807d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010365  00000000  00000000  0004067a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000613c6  00000000  00000000  000509df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002230  00000000  00000000  000b1da8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b78 	.word	0x20072b78
   80004:	00080e5d 	.word	0x00080e5d
   80008:	00080e59 	.word	0x00080e59
   8000c:	00080e59 	.word	0x00080e59
   80010:	00080e59 	.word	0x00080e59
   80014:	00080e59 	.word	0x00080e59
   80018:	00080e59 	.word	0x00080e59
	...
   8002c:	00080e59 	.word	0x00080e59
   80030:	00080e59 	.word	0x00080e59
   80034:	00000000 	.word	0x00000000
   80038:	00080e59 	.word	0x00080e59
   8003c:	00080e59 	.word	0x00080e59
   80040:	00080e59 	.word	0x00080e59
   80044:	00080e59 	.word	0x00080e59
   80048:	00080e59 	.word	0x00080e59
   8004c:	00080e59 	.word	0x00080e59
   80050:	00080e59 	.word	0x00080e59
   80054:	00080e59 	.word	0x00080e59
   80058:	00080e59 	.word	0x00080e59
   8005c:	00080e59 	.word	0x00080e59
   80060:	00080e59 	.word	0x00080e59
   80064:	00080e59 	.word	0x00080e59
   80068:	00000000 	.word	0x00000000
   8006c:	00080bd9 	.word	0x00080bd9
   80070:	00080bed 	.word	0x00080bed
   80074:	00080c01 	.word	0x00080c01
   80078:	00080c15 	.word	0x00080c15
	...
   80084:	000803e9 	.word	0x000803e9
   80088:	00080e59 	.word	0x00080e59
   8008c:	00080e59 	.word	0x00080e59
   80090:	00080e59 	.word	0x00080e59
   80094:	00080e59 	.word	0x00080e59
   80098:	00080e59 	.word	0x00080e59
   8009c:	00080e59 	.word	0x00080e59
   800a0:	00080e59 	.word	0x00080e59
   800a4:	00000000 	.word	0x00000000
   800a8:	00080e59 	.word	0x00080e59
   800ac:	00080e59 	.word	0x00080e59
   800b0:	00080e59 	.word	0x00080e59
   800b4:	00080e59 	.word	0x00080e59
   800b8:	00080e59 	.word	0x00080e59
   800bc:	00080e59 	.word	0x00080e59
   800c0:	00080e59 	.word	0x00080e59
   800c4:	00080e59 	.word	0x00080e59
   800c8:	00080e59 	.word	0x00080e59
   800cc:	00080e59 	.word	0x00080e59
   800d0:	00080e59 	.word	0x00080e59
   800d4:	00080e59 	.word	0x00080e59
   800d8:	00080e59 	.word	0x00080e59
   800dc:	00080e59 	.word	0x00080e59
   800e0:	00080e59 	.word	0x00080e59
   800e4:	00080e59 	.word	0x00080e59
   800e8:	00080e59 	.word	0x00080e59
   800ec:	00080e59 	.word	0x00080e59
   800f0:	00080e59 	.word	0x00080e59

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007099c 	.word	0x2007099c
   80110:	00000000 	.word	0x00000000
   80114:	00083fd4 	.word	0x00083fd4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083fd4 	.word	0x00083fd4
   8013c:	200709a0 	.word	0x200709a0
   80140:	00083fd4 	.word	0x00083fd4
   80144:	00000000 	.word	0x00000000

00080148 <main>:
int e=0;
uint16_t kp = 1;
uint16_t speed = 1800;

int main(void)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Initialize the SAM system */
	SystemInit();
   8014c:	4b1a      	ldr	r3, [pc, #104]	; (801b8 <main+0x70>)
   8014e:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   80150:	4b1a      	ldr	r3, [pc, #104]	; (801bc <main+0x74>)
   80152:	4798      	blx	r3
	configureConsole();
   80154:	4b1a      	ldr	r3, [pc, #104]	; (801c0 <main+0x78>)
   80156:	4798      	blx	r3
	configInterrupts();
   80158:	4b1a      	ldr	r3, [pc, #104]	; (801c4 <main+0x7c>)
   8015a:	4798      	blx	r3
	PWM_init();
   8015c:	4b1a      	ldr	r3, [pc, #104]	; (801c8 <main+0x80>)
   8015e:	4798      	blx	r3
	printf("Startar");
   80160:	481a      	ldr	r0, [pc, #104]	; (801cc <main+0x84>)
   80162:	4b1b      	ldr	r3, [pc, #108]	; (801d0 <main+0x88>)
   80164:	4798      	blx	r3
	pwm_pin_22(1800);
   80166:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   8016a:	4b1a      	ldr	r3, [pc, #104]	; (801d4 <main+0x8c>)
   8016c:	4798      	blx	r3
	
	while (1)
	{
		//setPoint = 2*setPoint;
		m_value = (counter_2-counter_1);
   8016e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80204 <main+0xbc>
   80172:	4f19      	ldr	r7, [pc, #100]	; (801d8 <main+0x90>)
   80174:	4e19      	ldr	r6, [pc, #100]	; (801dc <main+0x94>)
   80176:	f8b8 2000 	ldrh.w	r2, [r8]
   8017a:	883b      	ldrh	r3, [r7, #0]
   8017c:	1ad3      	subs	r3, r2, r3
   8017e:	6033      	str	r3, [r6, #0]
		e = (setPoint - m_value);
   80180:	4a17      	ldr	r2, [pc, #92]	; (801e0 <main+0x98>)
   80182:	6812      	ldr	r2, [r2, #0]
   80184:	1ad3      	subs	r3, r2, r3
   80186:	4c17      	ldr	r4, [pc, #92]	; (801e4 <main+0x9c>)
   80188:	6023      	str	r3, [r4, #0]
		s_value = (kp*e);
   8018a:	4a17      	ldr	r2, [pc, #92]	; (801e8 <main+0xa0>)
   8018c:	8812      	ldrh	r2, [r2, #0]
   8018e:	fb02 f303 	mul.w	r3, r2, r3
   80192:	4d16      	ldr	r5, [pc, #88]	; (801ec <main+0xa4>)
   80194:	602b      	str	r3, [r5, #0]
		pwm_pin_21((speed+s_value));
   80196:	4a16      	ldr	r2, [pc, #88]	; (801f0 <main+0xa8>)
   80198:	8810      	ldrh	r0, [r2, #0]
   8019a:	4418      	add	r0, r3
   8019c:	4b15      	ldr	r3, [pc, #84]	; (801f4 <main+0xac>)
   8019e:	4798      	blx	r3
		printf("\n e = %d",e);
   801a0:	4815      	ldr	r0, [pc, #84]	; (801f8 <main+0xb0>)
   801a2:	6821      	ldr	r1, [r4, #0]
   801a4:	4c0a      	ldr	r4, [pc, #40]	; (801d0 <main+0x88>)
   801a6:	47a0      	blx	r4
		printf("\n s_value = %d",s_value);
   801a8:	4814      	ldr	r0, [pc, #80]	; (801fc <main+0xb4>)
   801aa:	6829      	ldr	r1, [r5, #0]
   801ac:	47a0      	blx	r4
		printf("\n m_value = %d",m_value);
   801ae:	4814      	ldr	r0, [pc, #80]	; (80200 <main+0xb8>)
   801b0:	6831      	ldr	r1, [r6, #0]
   801b2:	47a0      	blx	r4
   801b4:	e7df      	b.n	80176 <main+0x2e>
   801b6:	bf00      	nop
   801b8:	20070001 	.word	0x20070001
   801bc:	0008085d 	.word	0x0008085d
   801c0:	000805a5 	.word	0x000805a5
   801c4:	00080675 	.word	0x00080675
   801c8:	000807a1 	.word	0x000807a1
   801cc:	00083ef0 	.word	0x00083ef0
   801d0:	00080fad 	.word	0x00080fad
   801d4:	0008082d 	.word	0x0008082d
   801d8:	20070a66 	.word	0x20070a66
   801dc:	200709bc 	.word	0x200709bc
   801e0:	200709c4 	.word	0x200709c4
   801e4:	200709c0 	.word	0x200709c0
   801e8:	2007012c 	.word	0x2007012c
   801ec:	200709b8 	.word	0x200709b8
   801f0:	2007012e 	.word	0x2007012e
   801f4:	000807fd 	.word	0x000807fd
   801f8:	00083ef8 	.word	0x00083ef8
   801fc:	00083f04 	.word	0x00083f04
   80200:	00083f14 	.word	0x00083f14
   80204:	20070a68 	.word	0x20070a68

00080208 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8020c:	b083      	sub	sp, #12
   8020e:	4605      	mov	r5, r0
	while (len) {
   80210:	4690      	mov	r8, r2
   80212:	2a00      	cmp	r2, #0
   80214:	d047      	beq.n	802a6 <usart_serial_read_packet+0x9e>
   80216:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80218:	4f25      	ldr	r7, [pc, #148]	; (802b0 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8021a:	4c26      	ldr	r4, [pc, #152]	; (802b4 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8021c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 802c8 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80220:	f8df b094 	ldr.w	fp, [pc, #148]	; 802b8 <usart_serial_read_packet+0xb0>
   80224:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80228:	2300      	movs	r3, #0
   8022a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8022c:	4b22      	ldr	r3, [pc, #136]	; (802b8 <usart_serial_read_packet+0xb0>)
   8022e:	429d      	cmp	r5, r3
   80230:	d106      	bne.n	80240 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80232:	4658      	mov	r0, fp
   80234:	4649      	mov	r1, r9
   80236:	4b21      	ldr	r3, [pc, #132]	; (802bc <usart_serial_read_packet+0xb4>)
   80238:	4798      	blx	r3
   8023a:	2800      	cmp	r0, #0
   8023c:	d1f9      	bne.n	80232 <usart_serial_read_packet+0x2a>
   8023e:	e019      	b.n	80274 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80240:	4b1f      	ldr	r3, [pc, #124]	; (802c0 <usart_serial_read_packet+0xb8>)
   80242:	429d      	cmp	r5, r3
   80244:	d109      	bne.n	8025a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80246:	4699      	mov	r9, r3
   80248:	4648      	mov	r0, r9
   8024a:	a901      	add	r1, sp, #4
   8024c:	47a0      	blx	r4
   8024e:	2800      	cmp	r0, #0
   80250:	d1fa      	bne.n	80248 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80252:	9b01      	ldr	r3, [sp, #4]
   80254:	f806 3c01 	strb.w	r3, [r6, #-1]
   80258:	e017      	b.n	8028a <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8025a:	4b1a      	ldr	r3, [pc, #104]	; (802c4 <usart_serial_read_packet+0xbc>)
   8025c:	429d      	cmp	r5, r3
   8025e:	d109      	bne.n	80274 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80260:	4699      	mov	r9, r3
   80262:	4648      	mov	r0, r9
   80264:	a901      	add	r1, sp, #4
   80266:	47a0      	blx	r4
   80268:	2800      	cmp	r0, #0
   8026a:	d1fa      	bne.n	80262 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   8026c:	9b01      	ldr	r3, [sp, #4]
   8026e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80272:	e014      	b.n	8029e <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80274:	4555      	cmp	r5, sl
   80276:	d108      	bne.n	8028a <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80278:	4650      	mov	r0, sl
   8027a:	a901      	add	r1, sp, #4
   8027c:	47a0      	blx	r4
   8027e:	2800      	cmp	r0, #0
   80280:	d1fa      	bne.n	80278 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80282:	9b01      	ldr	r3, [sp, #4]
   80284:	f806 3c01 	strb.w	r3, [r6, #-1]
   80288:	e009      	b.n	8029e <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8028a:	42bd      	cmp	r5, r7
   8028c:	d107      	bne.n	8029e <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   8028e:	4638      	mov	r0, r7
   80290:	a901      	add	r1, sp, #4
   80292:	47a0      	blx	r4
   80294:	2800      	cmp	r0, #0
   80296:	d1fa      	bne.n	8028e <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80298:	9b01      	ldr	r3, [sp, #4]
   8029a:	f806 3c01 	strb.w	r3, [r6, #-1]
   8029e:	3601      	adds	r6, #1
   802a0:	f1b8 0801 	subs.w	r8, r8, #1
   802a4:	d1be      	bne.n	80224 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   802a6:	2000      	movs	r0, #0
   802a8:	b003      	add	sp, #12
   802aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   802ae:	bf00      	nop
   802b0:	400a4000 	.word	0x400a4000
   802b4:	000803d1 	.word	0x000803d1
   802b8:	400e0800 	.word	0x400e0800
   802bc:	000803a9 	.word	0x000803a9
   802c0:	40098000 	.word	0x40098000
   802c4:	4009c000 	.word	0x4009c000
   802c8:	400a0000 	.word	0x400a0000

000802cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   802cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802d0:	460c      	mov	r4, r1
   802d2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   802d4:	b960      	cbnz	r0, 802f0 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   802d6:	2a00      	cmp	r2, #0
   802d8:	dd0e      	ble.n	802f8 <_read+0x2c>
   802da:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   802dc:	4e09      	ldr	r6, [pc, #36]	; (80304 <_read+0x38>)
   802de:	4d0a      	ldr	r5, [pc, #40]	; (80308 <_read+0x3c>)
   802e0:	6830      	ldr	r0, [r6, #0]
   802e2:	4621      	mov	r1, r4
   802e4:	682b      	ldr	r3, [r5, #0]
   802e6:	4798      	blx	r3
		ptr++;
   802e8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   802ea:	42bc      	cmp	r4, r7
   802ec:	d1f8      	bne.n	802e0 <_read+0x14>
   802ee:	e006      	b.n	802fe <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   802f0:	f04f 30ff 	mov.w	r0, #4294967295
   802f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   802f8:	2000      	movs	r0, #0
   802fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   802fe:	4640      	mov	r0, r8
	}
	return nChars;
}
   80300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80304:	20070b20 	.word	0x20070b20
   80308:	20070b18 	.word	0x20070b18

0008030c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8030c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80310:	460e      	mov	r6, r1
   80312:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80314:	3801      	subs	r0, #1
   80316:	2802      	cmp	r0, #2
   80318:	d80f      	bhi.n	8033a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8031a:	b192      	cbz	r2, 80342 <_write+0x36>
   8031c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8031e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8035c <_write+0x50>
   80322:	4f0d      	ldr	r7, [pc, #52]	; (80358 <_write+0x4c>)
   80324:	f8d8 0000 	ldr.w	r0, [r8]
   80328:	5d31      	ldrb	r1, [r6, r4]
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	4798      	blx	r3
   8032e:	2800      	cmp	r0, #0
   80330:	db0a      	blt.n	80348 <_write+0x3c>
			return -1;
		}
		++nChars;
   80332:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80334:	42a5      	cmp	r5, r4
   80336:	d1f5      	bne.n	80324 <_write+0x18>
   80338:	e00a      	b.n	80350 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8033a:	f04f 30ff 	mov.w	r0, #4294967295
   8033e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80342:	2000      	movs	r0, #0
   80344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80348:	f04f 30ff 	mov.w	r0, #4294967295
   8034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80350:	4620      	mov	r0, r4
	}
	return nChars;
}
   80352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80356:	bf00      	nop
   80358:	20070b1c 	.word	0x20070b1c
   8035c:	20070b20 	.word	0x20070b20

00080360 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80360:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80362:	23ac      	movs	r3, #172	; 0xac
   80364:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80366:	680a      	ldr	r2, [r1, #0]
   80368:	684b      	ldr	r3, [r1, #4]
   8036a:	fbb2 f3f3 	udiv	r3, r2, r3
   8036e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80370:	1e5c      	subs	r4, r3, #1
   80372:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80376:	4294      	cmp	r4, r2
   80378:	d80a      	bhi.n	80390 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8037a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8037c:	688b      	ldr	r3, [r1, #8]
   8037e:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80380:	f240 2302 	movw	r3, #514	; 0x202
   80384:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80388:	2350      	movs	r3, #80	; 0x50
   8038a:	6003      	str	r3, [r0, #0]

	return 0;
   8038c:	2000      	movs	r0, #0
   8038e:	e000      	b.n	80392 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80390:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80392:	f85d 4b04 	ldr.w	r4, [sp], #4
   80396:	4770      	bx	lr

00080398 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80398:	6943      	ldr	r3, [r0, #20]
   8039a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8039e:	bf1a      	itte	ne
   803a0:	61c1      	strne	r1, [r0, #28]
	return 0;
   803a2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   803a4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   803a6:	4770      	bx	lr

000803a8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   803a8:	6943      	ldr	r3, [r0, #20]
   803aa:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   803ae:	bf1d      	ittte	ne
   803b0:	6983      	ldrne	r3, [r0, #24]
   803b2:	700b      	strbne	r3, [r1, #0]
	return 0;
   803b4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   803b6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   803b8:	4770      	bx	lr
   803ba:	bf00      	nop

000803bc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   803bc:	6943      	ldr	r3, [r0, #20]
   803be:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   803c2:	bf1d      	ittte	ne
   803c4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   803c8:	61c1      	strne	r1, [r0, #28]
	return 0;
   803ca:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   803cc:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   803ce:	4770      	bx	lr

000803d0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   803d0:	6943      	ldr	r3, [r0, #20]
   803d2:	f013 0f01 	tst.w	r3, #1
   803d6:	d005      	beq.n	803e4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   803d8:	6983      	ldr	r3, [r0, #24]
   803da:	f3c3 0308 	ubfx	r3, r3, #0, #9
   803de:	600b      	str	r3, [r1, #0]

	return 0;
   803e0:	2000      	movs	r0, #0
   803e2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   803e4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   803e6:	4770      	bx	lr

000803e8 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   803e8:	b500      	push	{lr}
   803ea:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   803ec:	4813      	ldr	r0, [pc, #76]	; (8043c <USART0_Handler+0x54>)
   803ee:	f10d 0107 	add.w	r1, sp, #7
   803f2:	2201      	movs	r2, #1
   803f4:	4b12      	ldr	r3, [pc, #72]	; (80440 <USART0_Handler+0x58>)
   803f6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   803f8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   803fa:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   803fe:	2200      	movs	r2, #0
   80400:	4b10      	ldr	r3, [pc, #64]	; (80444 <USART0_Handler+0x5c>)
   80402:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   80404:	4b10      	ldr	r3, [pc, #64]	; (80448 <USART0_Handler+0x60>)
   80406:	781a      	ldrb	r2, [r3, #0]
   80408:	3201      	adds	r2, #1
   8040a:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8040c:	4b0f      	ldr	r3, [pc, #60]	; (8044c <USART0_Handler+0x64>)
   8040e:	781b      	ldrb	r3, [r3, #0]
   80410:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80414:	4a0e      	ldr	r2, [pc, #56]	; (80450 <USART0_Handler+0x68>)
   80416:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80418:	2b9b      	cmp	r3, #155	; 0x9b
   8041a:	d103      	bne.n	80424 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   8041c:	2200      	movs	r2, #0
   8041e:	4b0b      	ldr	r3, [pc, #44]	; (8044c <USART0_Handler+0x64>)
   80420:	701a      	strb	r2, [r3, #0]
   80422:	e002      	b.n	8042a <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   80424:	3301      	adds	r3, #1
   80426:	4a09      	ldr	r2, [pc, #36]	; (8044c <USART0_Handler+0x64>)
   80428:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8042a:	2201      	movs	r2, #1
   8042c:	4b05      	ldr	r3, [pc, #20]	; (80444 <USART0_Handler+0x5c>)
   8042e:	701a      	strb	r2, [r3, #0]
   80430:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80434:	b662      	cpsie	i
}
   80436:	b003      	add	sp, #12
   80438:	f85d fb04 	ldr.w	pc, [sp], #4
   8043c:	40098000 	.word	0x40098000
   80440:	00080209 	.word	0x00080209
   80444:	20070130 	.word	0x20070130
   80448:	20070a65 	.word	0x20070a65
   8044c:	20070a64 	.word	0x20070a64
   80450:	200709c8 	.word	0x200709c8

00080454 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80454:	b5f0      	push	{r4, r5, r6, r7, lr}
   80456:	b083      	sub	sp, #12
   80458:	4604      	mov	r4, r0
   8045a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8045c:	2300      	movs	r3, #0
   8045e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80460:	4b1f      	ldr	r3, [pc, #124]	; (804e0 <usart_serial_getchar+0x8c>)
   80462:	4298      	cmp	r0, r3
   80464:	d107      	bne.n	80476 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80466:	461f      	mov	r7, r3
   80468:	4e1e      	ldr	r6, [pc, #120]	; (804e4 <usart_serial_getchar+0x90>)
   8046a:	4638      	mov	r0, r7
   8046c:	4629      	mov	r1, r5
   8046e:	47b0      	blx	r6
   80470:	2800      	cmp	r0, #0
   80472:	d1fa      	bne.n	8046a <usart_serial_getchar+0x16>
   80474:	e019      	b.n	804aa <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80476:	4b1c      	ldr	r3, [pc, #112]	; (804e8 <usart_serial_getchar+0x94>)
   80478:	4298      	cmp	r0, r3
   8047a:	d109      	bne.n	80490 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   8047c:	461f      	mov	r7, r3
   8047e:	4e1b      	ldr	r6, [pc, #108]	; (804ec <usart_serial_getchar+0x98>)
   80480:	4638      	mov	r0, r7
   80482:	a901      	add	r1, sp, #4
   80484:	47b0      	blx	r6
   80486:	2800      	cmp	r0, #0
   80488:	d1fa      	bne.n	80480 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8048a:	9b01      	ldr	r3, [sp, #4]
   8048c:	702b      	strb	r3, [r5, #0]
   8048e:	e019      	b.n	804c4 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80490:	4b17      	ldr	r3, [pc, #92]	; (804f0 <usart_serial_getchar+0x9c>)
   80492:	4298      	cmp	r0, r3
   80494:	d109      	bne.n	804aa <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80496:	461e      	mov	r6, r3
   80498:	4c14      	ldr	r4, [pc, #80]	; (804ec <usart_serial_getchar+0x98>)
   8049a:	4630      	mov	r0, r6
   8049c:	a901      	add	r1, sp, #4
   8049e:	47a0      	blx	r4
   804a0:	2800      	cmp	r0, #0
   804a2:	d1fa      	bne.n	8049a <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   804a4:	9b01      	ldr	r3, [sp, #4]
   804a6:	702b      	strb	r3, [r5, #0]
   804a8:	e018      	b.n	804dc <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   804aa:	4b12      	ldr	r3, [pc, #72]	; (804f4 <usart_serial_getchar+0xa0>)
   804ac:	429c      	cmp	r4, r3
   804ae:	d109      	bne.n	804c4 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   804b0:	461e      	mov	r6, r3
   804b2:	4c0e      	ldr	r4, [pc, #56]	; (804ec <usart_serial_getchar+0x98>)
   804b4:	4630      	mov	r0, r6
   804b6:	a901      	add	r1, sp, #4
   804b8:	47a0      	blx	r4
   804ba:	2800      	cmp	r0, #0
   804bc:	d1fa      	bne.n	804b4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   804be:	9b01      	ldr	r3, [sp, #4]
   804c0:	702b      	strb	r3, [r5, #0]
   804c2:	e00b      	b.n	804dc <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   804c4:	4b0c      	ldr	r3, [pc, #48]	; (804f8 <usart_serial_getchar+0xa4>)
   804c6:	429c      	cmp	r4, r3
   804c8:	d108      	bne.n	804dc <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   804ca:	461e      	mov	r6, r3
   804cc:	4c07      	ldr	r4, [pc, #28]	; (804ec <usart_serial_getchar+0x98>)
   804ce:	4630      	mov	r0, r6
   804d0:	a901      	add	r1, sp, #4
   804d2:	47a0      	blx	r4
   804d4:	2800      	cmp	r0, #0
   804d6:	d1fa      	bne.n	804ce <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   804d8:	9b01      	ldr	r3, [sp, #4]
   804da:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   804dc:	b003      	add	sp, #12
   804de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   804e0:	400e0800 	.word	0x400e0800
   804e4:	000803a9 	.word	0x000803a9
   804e8:	40098000 	.word	0x40098000
   804ec:	000803d1 	.word	0x000803d1
   804f0:	4009c000 	.word	0x4009c000
   804f4:	400a0000 	.word	0x400a0000
   804f8:	400a4000 	.word	0x400a4000

000804fc <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   804fc:	b570      	push	{r4, r5, r6, lr}
   804fe:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80500:	4b21      	ldr	r3, [pc, #132]	; (80588 <usart_serial_putchar+0x8c>)
   80502:	4298      	cmp	r0, r3
   80504:	d107      	bne.n	80516 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80506:	461e      	mov	r6, r3
   80508:	4d20      	ldr	r5, [pc, #128]	; (8058c <usart_serial_putchar+0x90>)
   8050a:	4630      	mov	r0, r6
   8050c:	4621      	mov	r1, r4
   8050e:	47a8      	blx	r5
   80510:	2800      	cmp	r0, #0
   80512:	d1fa      	bne.n	8050a <usart_serial_putchar+0xe>
   80514:	e02b      	b.n	8056e <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80516:	4b1e      	ldr	r3, [pc, #120]	; (80590 <usart_serial_putchar+0x94>)
   80518:	4298      	cmp	r0, r3
   8051a:	d107      	bne.n	8052c <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   8051c:	461e      	mov	r6, r3
   8051e:	4d1d      	ldr	r5, [pc, #116]	; (80594 <usart_serial_putchar+0x98>)
   80520:	4630      	mov	r0, r6
   80522:	4621      	mov	r1, r4
   80524:	47a8      	blx	r5
   80526:	2800      	cmp	r0, #0
   80528:	d1fa      	bne.n	80520 <usart_serial_putchar+0x24>
   8052a:	e022      	b.n	80572 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8052c:	4b1a      	ldr	r3, [pc, #104]	; (80598 <usart_serial_putchar+0x9c>)
   8052e:	4298      	cmp	r0, r3
   80530:	d107      	bne.n	80542 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80532:	461e      	mov	r6, r3
   80534:	4d17      	ldr	r5, [pc, #92]	; (80594 <usart_serial_putchar+0x98>)
   80536:	4630      	mov	r0, r6
   80538:	4621      	mov	r1, r4
   8053a:	47a8      	blx	r5
   8053c:	2800      	cmp	r0, #0
   8053e:	d1fa      	bne.n	80536 <usart_serial_putchar+0x3a>
   80540:	e019      	b.n	80576 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80542:	4b16      	ldr	r3, [pc, #88]	; (8059c <usart_serial_putchar+0xa0>)
   80544:	4298      	cmp	r0, r3
   80546:	d107      	bne.n	80558 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80548:	461e      	mov	r6, r3
   8054a:	4d12      	ldr	r5, [pc, #72]	; (80594 <usart_serial_putchar+0x98>)
   8054c:	4630      	mov	r0, r6
   8054e:	4621      	mov	r1, r4
   80550:	47a8      	blx	r5
   80552:	2800      	cmp	r0, #0
   80554:	d1fa      	bne.n	8054c <usart_serial_putchar+0x50>
   80556:	e010      	b.n	8057a <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80558:	4b11      	ldr	r3, [pc, #68]	; (805a0 <usart_serial_putchar+0xa4>)
   8055a:	4298      	cmp	r0, r3
   8055c:	d10f      	bne.n	8057e <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8055e:	461e      	mov	r6, r3
   80560:	4d0c      	ldr	r5, [pc, #48]	; (80594 <usart_serial_putchar+0x98>)
   80562:	4630      	mov	r0, r6
   80564:	4621      	mov	r1, r4
   80566:	47a8      	blx	r5
   80568:	2800      	cmp	r0, #0
   8056a:	d1fa      	bne.n	80562 <usart_serial_putchar+0x66>
   8056c:	e009      	b.n	80582 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8056e:	2001      	movs	r0, #1
   80570:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80572:	2001      	movs	r0, #1
   80574:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80576:	2001      	movs	r0, #1
   80578:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8057a:	2001      	movs	r0, #1
   8057c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8057e:	2000      	movs	r0, #0
   80580:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80582:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80584:	bd70      	pop	{r4, r5, r6, pc}
   80586:	bf00      	nop
   80588:	400e0800 	.word	0x400e0800
   8058c:	00080399 	.word	0x00080399
   80590:	40098000 	.word	0x40098000
   80594:	000803bd 	.word	0x000803bd
   80598:	4009c000 	.word	0x4009c000
   8059c:	400a0000 	.word	0x400a0000
   805a0:	400a4000 	.word	0x400a4000

000805a4 <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   805a4:	b530      	push	{r4, r5, lr}
   805a6:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805a8:	2008      	movs	r0, #8
   805aa:	4d13      	ldr	r5, [pc, #76]	; (805f8 <configureConsole+0x54>)
   805ac:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   805ae:	4c13      	ldr	r4, [pc, #76]	; (805fc <configureConsole+0x58>)
   805b0:	4b13      	ldr	r3, [pc, #76]	; (80600 <configureConsole+0x5c>)
   805b2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   805b4:	4a13      	ldr	r2, [pc, #76]	; (80604 <configureConsole+0x60>)
   805b6:	4b14      	ldr	r3, [pc, #80]	; (80608 <configureConsole+0x64>)
   805b8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   805ba:	4a14      	ldr	r2, [pc, #80]	; (8060c <configureConsole+0x68>)
   805bc:	4b14      	ldr	r3, [pc, #80]	; (80610 <configureConsole+0x6c>)
   805be:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   805c0:	4b14      	ldr	r3, [pc, #80]	; (80614 <configureConsole+0x70>)
   805c2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   805c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   805c8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   805ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805ce:	9303      	str	r3, [sp, #12]
   805d0:	2008      	movs	r0, #8
   805d2:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   805d4:	4620      	mov	r0, r4
   805d6:	a901      	add	r1, sp, #4
   805d8:	4b0f      	ldr	r3, [pc, #60]	; (80618 <configureConsole+0x74>)
   805da:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   805dc:	4d0f      	ldr	r5, [pc, #60]	; (8061c <configureConsole+0x78>)
   805de:	682b      	ldr	r3, [r5, #0]
   805e0:	6898      	ldr	r0, [r3, #8]
   805e2:	2100      	movs	r1, #0
   805e4:	4c0e      	ldr	r4, [pc, #56]	; (80620 <configureConsole+0x7c>)
   805e6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   805e8:	682b      	ldr	r3, [r5, #0]
   805ea:	6858      	ldr	r0, [r3, #4]
   805ec:	2100      	movs	r1, #0
   805ee:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   805f0:	2000      	movs	r0, #0
   805f2:	b005      	add	sp, #20
   805f4:	bd30      	pop	{r4, r5, pc}
   805f6:	bf00      	nop
   805f8:	00080c29 	.word	0x00080c29
   805fc:	400e0800 	.word	0x400e0800
   80600:	20070b20 	.word	0x20070b20
   80604:	000804fd 	.word	0x000804fd
   80608:	20070b1c 	.word	0x20070b1c
   8060c:	00080455 	.word	0x00080455
   80610:	20070b18 	.word	0x20070b18
   80614:	0501bd00 	.word	0x0501bd00
   80618:	00080361 	.word	0x00080361
   8061c:	20070560 	.word	0x20070560
   80620:	00081069 	.word	0x00081069

00080624 <pin12_edge_handler>:
	

}

// Handler which calls when pin 53 is toggle.  
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   80624:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   80626:	4806      	ldr	r0, [pc, #24]	; (80640 <pin12_edge_handler+0x1c>)
   80628:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8062c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80630:	4b04      	ldr	r3, [pc, #16]	; (80644 <pin12_edge_handler+0x20>)
   80632:	4798      	blx	r3
   80634:	b118      	cbz	r0, 8063e <pin12_edge_handler+0x1a>
		//increase the counter value
		counter_1++;
   80636:	4b04      	ldr	r3, [pc, #16]	; (80648 <pin12_edge_handler+0x24>)
   80638:	881a      	ldrh	r2, [r3, #0]
   8063a:	3201      	adds	r2, #1
   8063c:	801a      	strh	r2, [r3, #0]
   8063e:	bd08      	pop	{r3, pc}
   80640:	400e1200 	.word	0x400e1200
   80644:	000808dd 	.word	0x000808dd
   80648:	20070a66 	.word	0x20070a66

0008064c <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}	
}

// Handler which calls when pin 51 is toggle. 
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   8064c:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   8064e:	4806      	ldr	r0, [pc, #24]	; (80668 <pin14_edge_handler+0x1c>)
   80650:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80654:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80658:	4b04      	ldr	r3, [pc, #16]	; (8066c <pin14_edge_handler+0x20>)
   8065a:	4798      	blx	r3
   8065c:	b118      	cbz	r0, 80666 <pin14_edge_handler+0x1a>
	//Increase the counter value
			counter_2++;
   8065e:	4b04      	ldr	r3, [pc, #16]	; (80670 <pin14_edge_handler+0x24>)
   80660:	881a      	ldrh	r2, [r3, #0]
   80662:	3201      	adds	r2, #1
   80664:	801a      	strh	r2, [r3, #0]
   80666:	bd08      	pop	{r3, pc}
   80668:	400e1000 	.word	0x400e1000
   8066c:	000808dd 	.word	0x000808dd
   80670:	20070a68 	.word	0x20070a68

00080674 <configInterrupts>:
// Counter for Arlo Robot encoders for right and left wheel
 uint16_t counter_1 = 0;
 uint16_t counter_2 = 0;


void configInterrupts(void){
   80674:	b570      	push	{r4, r5, r6, lr}
   80676:	b082      	sub	sp, #8
	
	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   80678:	200c      	movs	r0, #12
   8067a:	4c1a      	ldr	r4, [pc, #104]	; (806e4 <configInterrupts+0x70>)
   8067c:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);	
   8067e:	200d      	movs	r0, #13
   80680:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   80682:	4d19      	ldr	r5, [pc, #100]	; (806e8 <configInterrupts+0x74>)
   80684:	4628      	mov	r0, r5
   80686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8068a:	2201      	movs	r2, #1
   8068c:	4e17      	ldr	r6, [pc, #92]	; (806ec <configInterrupts+0x78>)
   8068e:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   80690:	4c17      	ldr	r4, [pc, #92]	; (806f0 <configInterrupts+0x7c>)
   80692:	4620      	mov	r0, r4
   80694:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80698:	2201      	movs	r2, #1
   8069a:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   8069c:	4b15      	ldr	r3, [pc, #84]	; (806f4 <configInterrupts+0x80>)
   8069e:	9300      	str	r3, [sp, #0]
   806a0:	4628      	mov	r0, r5
   806a2:	210d      	movs	r1, #13
   806a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   806a8:	2340      	movs	r3, #64	; 0x40
   806aa:	4e13      	ldr	r6, [pc, #76]	; (806f8 <configInterrupts+0x84>)
   806ac:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   806ae:	4b13      	ldr	r3, [pc, #76]	; (806fc <configInterrupts+0x88>)
   806b0:	9300      	str	r3, [sp, #0]
   806b2:	4620      	mov	r0, r4
   806b4:	210c      	movs	r1, #12
   806b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   806ba:	2340      	movs	r3, #64	; 0x40
   806bc:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   806be:	4628      	mov	r0, r5
   806c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   806c4:	4d0e      	ldr	r5, [pc, #56]	; (80700 <configInterrupts+0x8c>)
   806c6:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   806c8:	4620      	mov	r0, r4
   806ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   806ce:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   806d0:	4b0c      	ldr	r3, [pc, #48]	; (80704 <configInterrupts+0x90>)
   806d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   806d6:	601a      	str	r2, [r3, #0]
   806d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   806dc:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);
	

}
   806de:	b002      	add	sp, #8
   806e0:	bd70      	pop	{r4, r5, r6, pc}
   806e2:	bf00      	nop
   806e4:	00080c29 	.word	0x00080c29
   806e8:	400e1200 	.word	0x400e1200
   806ec:	00080935 	.word	0x00080935
   806f0:	400e1000 	.word	0x400e1000
   806f4:	00080625 	.word	0x00080625
   806f8:	00080b9d 	.word	0x00080b9d
   806fc:	0008064d 	.word	0x0008064d
   80700:	000809c1 	.word	0x000809c1
   80704:	e000e100 	.word	0xe000e100

00080708 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   80708:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   8070a:	2055      	movs	r0, #85	; 0x55
   8070c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80710:	4b0b      	ldr	r3, [pc, #44]	; (80740 <initPin21+0x38>)
   80712:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   80714:	4b0b      	ldr	r3, [pc, #44]	; (80744 <initPin21+0x3c>)
   80716:	2404      	movs	r4, #4
   80718:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8071a:	220b      	movs	r2, #11
   8071c:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   8071e:	2200      	movs	r2, #0
   80720:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   80722:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 8000;
   80724:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   80728:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   8072a:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   8072c:	4d06      	ldr	r5, [pc, #24]	; (80748 <initPin21+0x40>)
   8072e:	4628      	mov	r0, r5
   80730:	4619      	mov	r1, r3
   80732:	4b06      	ldr	r3, [pc, #24]	; (8074c <initPin21+0x44>)
   80734:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80736:	4628      	mov	r0, r5
   80738:	4621      	mov	r1, r4
   8073a:	4b05      	ldr	r3, [pc, #20]	; (80750 <initPin21+0x48>)
   8073c:	4798      	blx	r3
   8073e:	bd38      	pop	{r3, r4, r5, pc}
   80740:	000809d1 	.word	0x000809d1
   80744:	20070b4c 	.word	0x20070b4c
   80748:	40094000 	.word	0x40094000
   8074c:	00080d19 	.word	0x00080d19
   80750:	00080e41 	.word	0x00080e41

00080754 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   80754:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   80756:	2056      	movs	r0, #86	; 0x56
   80758:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8075c:	4b0b      	ldr	r3, [pc, #44]	; (8078c <initPin22+0x38>)
   8075e:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   80760:	4b0b      	ldr	r3, [pc, #44]	; (80790 <initPin22+0x3c>)
   80762:	2405      	movs	r4, #5
   80764:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80766:	220b      	movs	r2, #11
   80768:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   8076a:	2200      	movs	r2, #0
   8076c:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   8076e:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 8000;
   80770:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   80774:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   80776:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   80778:	4d06      	ldr	r5, [pc, #24]	; (80794 <initPin22+0x40>)
   8077a:	4628      	mov	r0, r5
   8077c:	4619      	mov	r1, r3
   8077e:	4b06      	ldr	r3, [pc, #24]	; (80798 <initPin22+0x44>)
   80780:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   80782:	4628      	mov	r0, r5
   80784:	4621      	mov	r1, r4
   80786:	4b05      	ldr	r3, [pc, #20]	; (8079c <initPin22+0x48>)
   80788:	4798      	blx	r3
   8078a:	bd38      	pop	{r3, r4, r5, pc}
   8078c:	000809d1 	.word	0x000809d1
   80790:	20070b24 	.word	0x20070b24
   80794:	40094000 	.word	0x40094000
   80798:	00080d19 	.word	0x00080d19
   8079c:	00080e41 	.word	0x00080e41

000807a0 <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   807a0:	b530      	push	{r4, r5, lr}
   807a2:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   807a4:	2024      	movs	r0, #36	; 0x24
   807a6:	4b0d      	ldr	r3, [pc, #52]	; (807dc <PWM_init+0x3c>)
   807a8:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   807aa:	4c0d      	ldr	r4, [pc, #52]	; (807e0 <PWM_init+0x40>)
   807ac:	4620      	mov	r0, r4
   807ae:	2104      	movs	r1, #4
   807b0:	4d0c      	ldr	r5, [pc, #48]	; (807e4 <PWM_init+0x44>)
   807b2:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   807b4:	4620      	mov	r0, r4
   807b6:	2105      	movs	r1, #5
   807b8:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   807ba:	4b0b      	ldr	r3, [pc, #44]	; (807e8 <PWM_init+0x48>)
   807bc:	9301      	str	r3, [sp, #4]
   807be:	2300      	movs	r3, #0
   807c0:	9302      	str	r3, [sp, #8]
   807c2:	4b0a      	ldr	r3, [pc, #40]	; (807ec <PWM_init+0x4c>)
   807c4:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   807c6:	4620      	mov	r0, r4
   807c8:	a901      	add	r1, sp, #4
   807ca:	4b09      	ldr	r3, [pc, #36]	; (807f0 <PWM_init+0x50>)
   807cc:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   807ce:	4b09      	ldr	r3, [pc, #36]	; (807f4 <PWM_init+0x54>)
   807d0:	4798      	blx	r3
	initPin22();
   807d2:	4b09      	ldr	r3, [pc, #36]	; (807f8 <PWM_init+0x58>)
   807d4:	4798      	blx	r3
	
}
   807d6:	b005      	add	sp, #20
   807d8:	bd30      	pop	{r4, r5, pc}
   807da:	bf00      	nop
   807dc:	00080c29 	.word	0x00080c29
   807e0:	40094000 	.word	0x40094000
   807e4:	00080e4d 	.word	0x00080e4d
   807e8:	000f4240 	.word	0x000f4240
   807ec:	0501bd00 	.word	0x0501bd00
   807f0:	00080cd9 	.word	0x00080cd9
   807f4:	00080709 	.word	0x00080709
   807f8:	00080755 	.word	0x00080755

000807fc <pwm_pin_21>:
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
}
 /* This method changes the duty cycle of PWM signal on pin 9. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void pwm_pin_21(uint32_t duty){
   807fc:	b508      	push	{r3, lr}
	if(duty<800){
   807fe:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80802:	d305      	bcc.n	80810 <pwm_pin_21+0x14>
   80804:	f640 0298 	movw	r2, #2200	; 0x898
   80808:	4290      	cmp	r0, r2
   8080a:	bf38      	it	cc
   8080c:	4602      	movcc	r2, r0
   8080e:	e001      	b.n	80814 <pwm_pin_21+0x18>
		duty=800;
   80810:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_21, duty );
   80814:	4802      	ldr	r0, [pc, #8]	; (80820 <pwm_pin_21+0x24>)
   80816:	4903      	ldr	r1, [pc, #12]	; (80824 <pwm_pin_21+0x28>)
   80818:	4b03      	ldr	r3, [pc, #12]	; (80828 <pwm_pin_21+0x2c>)
   8081a:	4798      	blx	r3
   8081c:	bd08      	pop	{r3, pc}
   8081e:	bf00      	nop
   80820:	40094000 	.word	0x40094000
   80824:	20070b4c 	.word	0x20070b4c
   80828:	00080e1d 	.word	0x00080e1d

0008082c <pwm_pin_22>:
}

 /* This method changes the duty cycle of PWM signal on pin 8. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void pwm_pin_22(uint32_t duty){
   8082c:	b508      	push	{r3, lr}
	
	if(duty<800){
   8082e:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80832:	d305      	bcc.n	80840 <pwm_pin_22+0x14>
   80834:	f640 0298 	movw	r2, #2200	; 0x898
   80838:	4290      	cmp	r0, r2
   8083a:	bf38      	it	cc
   8083c:	4602      	movcc	r2, r0
   8083e:	e001      	b.n	80844 <pwm_pin_22+0x18>
		duty=800;
   80840:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   80844:	4802      	ldr	r0, [pc, #8]	; (80850 <pwm_pin_22+0x24>)
   80846:	4903      	ldr	r1, [pc, #12]	; (80854 <pwm_pin_22+0x28>)
   80848:	4b03      	ldr	r3, [pc, #12]	; (80858 <pwm_pin_22+0x2c>)
   8084a:	4798      	blx	r3
   8084c:	bd08      	pop	{r3, pc}
   8084e:	bf00      	nop
   80850:	40094000 	.word	0x40094000
   80854:	20070b24 	.word	0x20070b24
   80858:	00080e1d 	.word	0x00080e1d

0008085c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8085c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8085e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80862:	4b17      	ldr	r3, [pc, #92]	; (808c0 <board_init+0x64>)
   80864:	605a      	str	r2, [r3, #4]
   80866:	200b      	movs	r0, #11
   80868:	4c16      	ldr	r4, [pc, #88]	; (808c4 <board_init+0x68>)
   8086a:	47a0      	blx	r4
   8086c:	200c      	movs	r0, #12
   8086e:	47a0      	blx	r4
   80870:	200d      	movs	r0, #13
   80872:	47a0      	blx	r4
   80874:	200e      	movs	r0, #14
   80876:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80878:	203b      	movs	r0, #59	; 0x3b
   8087a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8087e:	4c12      	ldr	r4, [pc, #72]	; (808c8 <board_init+0x6c>)
   80880:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80882:	2055      	movs	r0, #85	; 0x55
   80884:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80888:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8088a:	2056      	movs	r0, #86	; 0x56
   8088c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80890:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80892:	2068      	movs	r0, #104	; 0x68
   80894:	490d      	ldr	r1, [pc, #52]	; (808cc <board_init+0x70>)
   80896:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80898:	205c      	movs	r0, #92	; 0x5c
   8089a:	490d      	ldr	r1, [pc, #52]	; (808d0 <board_init+0x74>)
   8089c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8089e:	480d      	ldr	r0, [pc, #52]	; (808d4 <board_init+0x78>)
   808a0:	f44f 7140 	mov.w	r1, #768	; 0x300
   808a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   808a8:	4b0b      	ldr	r3, [pc, #44]	; (808d8 <board_init+0x7c>)
   808aa:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   808ac:	202b      	movs	r0, #43	; 0x2b
   808ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808b2:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   808b4:	202a      	movs	r0, #42	; 0x2a
   808b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808ba:	47a0      	blx	r4
   808bc:	bd10      	pop	{r4, pc}
   808be:	bf00      	nop
   808c0:	400e1a50 	.word	0x400e1a50
   808c4:	00080c29 	.word	0x00080c29
   808c8:	000809d1 	.word	0x000809d1
   808cc:	28000079 	.word	0x28000079
   808d0:	28000001 	.word	0x28000001
   808d4:	400e0e00 	.word	0x400e0e00
   808d8:	00080aa5 	.word	0x00080aa5

000808dc <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   808dc:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   808e0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   808e4:	bf0c      	ite	eq
   808e6:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   808e8:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   808ea:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   808ec:	bf0c      	ite	eq
   808ee:	2000      	moveq	r0, #0
   808f0:	2001      	movne	r0, #1
   808f2:	4770      	bx	lr

000808f4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   808f4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   808f6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   808fa:	d016      	beq.n	8092a <pio_set_peripheral+0x36>
   808fc:	d804      	bhi.n	80908 <pio_set_peripheral+0x14>
   808fe:	b1c1      	cbz	r1, 80932 <pio_set_peripheral+0x3e>
   80900:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80904:	d00a      	beq.n	8091c <pio_set_peripheral+0x28>
   80906:	e013      	b.n	80930 <pio_set_peripheral+0x3c>
   80908:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8090c:	d011      	beq.n	80932 <pio_set_peripheral+0x3e>
   8090e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80912:	d00e      	beq.n	80932 <pio_set_peripheral+0x3e>
   80914:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80918:	d10a      	bne.n	80930 <pio_set_peripheral+0x3c>
   8091a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8091c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8091e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80920:	400b      	ands	r3, r1
   80922:	ea23 0302 	bic.w	r3, r3, r2
   80926:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80928:	e002      	b.n	80930 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8092a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8092c:	4313      	orrs	r3, r2
   8092e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80930:	6042      	str	r2, [r0, #4]
   80932:	4770      	bx	lr

00080934 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80934:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80936:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8093a:	bf14      	ite	ne
   8093c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8093e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80940:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80944:	bf14      	ite	ne
   80946:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80948:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8094a:	f012 0f02 	tst.w	r2, #2
   8094e:	d002      	beq.n	80956 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80950:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80954:	e004      	b.n	80960 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80956:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8095a:	bf18      	it	ne
   8095c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80960:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80962:	6001      	str	r1, [r0, #0]
   80964:	4770      	bx	lr
   80966:	bf00      	nop

00080968 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80968:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8096a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8096c:	9c01      	ldr	r4, [sp, #4]
   8096e:	b10c      	cbz	r4, 80974 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80970:	6641      	str	r1, [r0, #100]	; 0x64
   80972:	e000      	b.n	80976 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80974:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80976:	b10b      	cbz	r3, 8097c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80978:	6501      	str	r1, [r0, #80]	; 0x50
   8097a:	e000      	b.n	8097e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8097c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8097e:	b10a      	cbz	r2, 80984 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80980:	6301      	str	r1, [r0, #48]	; 0x30
   80982:	e000      	b.n	80986 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80984:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80986:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80988:	6001      	str	r1, [r0, #0]
}
   8098a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8098e:	4770      	bx	lr

00080990 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   80990:	f012 0f10 	tst.w	r2, #16
   80994:	d010      	beq.n	809b8 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   80996:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8099a:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   8099e:	bf14      	ite	ne
   809a0:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   809a4:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   809a8:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   809ac:	bf14      	ite	ne
   809ae:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   809b2:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   809b6:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   809b8:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   809bc:	4770      	bx	lr
   809be:	bf00      	nop

000809c0 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   809c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   809c2:	6401      	str	r1, [r0, #64]	; 0x40
   809c4:	4770      	bx	lr
   809c6:	bf00      	nop

000809c8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   809c8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   809ca:	4770      	bx	lr

000809cc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   809cc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   809ce:	4770      	bx	lr

000809d0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   809d0:	b570      	push	{r4, r5, r6, lr}
   809d2:	b082      	sub	sp, #8
   809d4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   809d6:	0944      	lsrs	r4, r0, #5
   809d8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   809dc:	f204 7407 	addw	r4, r4, #1799	; 0x707
   809e0:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   809e2:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   809e6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   809ea:	d030      	beq.n	80a4e <pio_configure_pin+0x7e>
   809ec:	d806      	bhi.n	809fc <pio_configure_pin+0x2c>
   809ee:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   809f2:	d00a      	beq.n	80a0a <pio_configure_pin+0x3a>
   809f4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   809f8:	d018      	beq.n	80a2c <pio_configure_pin+0x5c>
   809fa:	e049      	b.n	80a90 <pio_configure_pin+0xc0>
   809fc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a00:	d030      	beq.n	80a64 <pio_configure_pin+0x94>
   80a02:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a06:	d02d      	beq.n	80a64 <pio_configure_pin+0x94>
   80a08:	e042      	b.n	80a90 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80a0a:	f000 001f 	and.w	r0, r0, #31
   80a0e:	2401      	movs	r4, #1
   80a10:	4084      	lsls	r4, r0
   80a12:	4630      	mov	r0, r6
   80a14:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a18:	4622      	mov	r2, r4
   80a1a:	4b1f      	ldr	r3, [pc, #124]	; (80a98 <pio_configure_pin+0xc8>)
   80a1c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a1e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a22:	bf14      	ite	ne
   80a24:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a26:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a28:	2001      	movs	r0, #1
   80a2a:	e032      	b.n	80a92 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80a2c:	f000 001f 	and.w	r0, r0, #31
   80a30:	2401      	movs	r4, #1
   80a32:	4084      	lsls	r4, r0
   80a34:	4630      	mov	r0, r6
   80a36:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a3a:	4622      	mov	r2, r4
   80a3c:	4b16      	ldr	r3, [pc, #88]	; (80a98 <pio_configure_pin+0xc8>)
   80a3e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a40:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a44:	bf14      	ite	ne
   80a46:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a48:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a4a:	2001      	movs	r0, #1
   80a4c:	e021      	b.n	80a92 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80a4e:	f000 011f 	and.w	r1, r0, #31
   80a52:	2401      	movs	r4, #1
   80a54:	4630      	mov	r0, r6
   80a56:	fa04 f101 	lsl.w	r1, r4, r1
   80a5a:	462a      	mov	r2, r5
   80a5c:	4b0f      	ldr	r3, [pc, #60]	; (80a9c <pio_configure_pin+0xcc>)
   80a5e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a60:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80a62:	e016      	b.n	80a92 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80a64:	f000 011f 	and.w	r1, r0, #31
   80a68:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a6a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80a6e:	ea05 0304 	and.w	r3, r5, r4
   80a72:	9300      	str	r3, [sp, #0]
   80a74:	4630      	mov	r0, r6
   80a76:	fa04 f101 	lsl.w	r1, r4, r1
   80a7a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a7e:	bf14      	ite	ne
   80a80:	2200      	movne	r2, #0
   80a82:	2201      	moveq	r2, #1
   80a84:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a88:	4d05      	ldr	r5, [pc, #20]	; (80aa0 <pio_configure_pin+0xd0>)
   80a8a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80a8c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a8e:	e000      	b.n	80a92 <pio_configure_pin+0xc2>

	default:
		return 0;
   80a90:	2000      	movs	r0, #0
	}

	return 1;
}
   80a92:	b002      	add	sp, #8
   80a94:	bd70      	pop	{r4, r5, r6, pc}
   80a96:	bf00      	nop
   80a98:	000808f5 	.word	0x000808f5
   80a9c:	00080935 	.word	0x00080935
   80aa0:	00080969 	.word	0x00080969

00080aa4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80aa6:	b083      	sub	sp, #12
   80aa8:	4607      	mov	r7, r0
   80aaa:	460e      	mov	r6, r1
   80aac:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80aae:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80ab2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80ab6:	d026      	beq.n	80b06 <pio_configure_pin_group+0x62>
   80ab8:	d806      	bhi.n	80ac8 <pio_configure_pin_group+0x24>
   80aba:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80abe:	d00a      	beq.n	80ad6 <pio_configure_pin_group+0x32>
   80ac0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80ac4:	d013      	beq.n	80aee <pio_configure_pin_group+0x4a>
   80ac6:	e034      	b.n	80b32 <pio_configure_pin_group+0x8e>
   80ac8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80acc:	d01f      	beq.n	80b0e <pio_configure_pin_group+0x6a>
   80ace:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80ad2:	d01c      	beq.n	80b0e <pio_configure_pin_group+0x6a>
   80ad4:	e02d      	b.n	80b32 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80ad6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ada:	4632      	mov	r2, r6
   80adc:	4b16      	ldr	r3, [pc, #88]	; (80b38 <pio_configure_pin_group+0x94>)
   80ade:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ae0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80ae4:	bf14      	ite	ne
   80ae6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80ae8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80aea:	2001      	movs	r0, #1
   80aec:	e022      	b.n	80b34 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80aee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80af2:	4632      	mov	r2, r6
   80af4:	4b10      	ldr	r3, [pc, #64]	; (80b38 <pio_configure_pin_group+0x94>)
   80af6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80af8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80afc:	bf14      	ite	ne
   80afe:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b00:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b02:	2001      	movs	r0, #1
   80b04:	e016      	b.n	80b34 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80b06:	4b0d      	ldr	r3, [pc, #52]	; (80b3c <pio_configure_pin_group+0x98>)
   80b08:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b0a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80b0c:	e012      	b.n	80b34 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b0e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80b12:	f005 0301 	and.w	r3, r5, #1
   80b16:	9300      	str	r3, [sp, #0]
   80b18:	4638      	mov	r0, r7
   80b1a:	4631      	mov	r1, r6
   80b1c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b20:	bf14      	ite	ne
   80b22:	2200      	movne	r2, #0
   80b24:	2201      	moveq	r2, #1
   80b26:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b2a:	4c05      	ldr	r4, [pc, #20]	; (80b40 <pio_configure_pin_group+0x9c>)
   80b2c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80b2e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80b30:	e000      	b.n	80b34 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80b32:	2000      	movs	r0, #0
	}

	return 1;
}
   80b34:	b003      	add	sp, #12
   80b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b38:	000808f5 	.word	0x000808f5
   80b3c:	00080935 	.word	0x00080935
   80b40:	00080969 	.word	0x00080969

00080b44 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80b48:	4604      	mov	r4, r0
   80b4a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80b4c:	4b10      	ldr	r3, [pc, #64]	; (80b90 <pio_handler_process+0x4c>)
   80b4e:	4798      	blx	r3
   80b50:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80b52:	4620      	mov	r0, r4
   80b54:	4b0f      	ldr	r3, [pc, #60]	; (80b94 <pio_handler_process+0x50>)
   80b56:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80b58:	4005      	ands	r5, r0
   80b5a:	d017      	beq.n	80b8c <pio_handler_process+0x48>
   80b5c:	4f0e      	ldr	r7, [pc, #56]	; (80b98 <pio_handler_process+0x54>)
   80b5e:	f107 040c 	add.w	r4, r7, #12
   80b62:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80b64:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80b68:	42b3      	cmp	r3, r6
   80b6a:	d10a      	bne.n	80b82 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80b6c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80b70:	4229      	tst	r1, r5
   80b72:	d006      	beq.n	80b82 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80b74:	6823      	ldr	r3, [r4, #0]
   80b76:	4630      	mov	r0, r6
   80b78:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80b7a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80b7e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80b82:	42bc      	cmp	r4, r7
   80b84:	d002      	beq.n	80b8c <pio_handler_process+0x48>
   80b86:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80b88:	2d00      	cmp	r5, #0
   80b8a:	d1eb      	bne.n	80b64 <pio_handler_process+0x20>
   80b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b90:	000809c9 	.word	0x000809c9
   80b94:	000809cd 	.word	0x000809cd
   80b98:	20070a70 	.word	0x20070a70

00080b9c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80b9e:	4c0b      	ldr	r4, [pc, #44]	; (80bcc <pio_handler_set+0x30>)
   80ba0:	6824      	ldr	r4, [r4, #0]
   80ba2:	2c06      	cmp	r4, #6
   80ba4:	d810      	bhi.n	80bc8 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   80ba6:	4f0a      	ldr	r7, [pc, #40]	; (80bd0 <pio_handler_set+0x34>)
   80ba8:	0126      	lsls	r6, r4, #4
   80baa:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   80bac:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   80bae:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   80bb0:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   80bb2:	9906      	ldr	r1, [sp, #24]
   80bb4:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   80bb6:	3401      	adds	r4, #1
   80bb8:	4904      	ldr	r1, [pc, #16]	; (80bcc <pio_handler_set+0x30>)
   80bba:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80bbc:	4611      	mov	r1, r2
   80bbe:	461a      	mov	r2, r3
   80bc0:	4b04      	ldr	r3, [pc, #16]	; (80bd4 <pio_handler_set+0x38>)
   80bc2:	4798      	blx	r3

	return 0;
   80bc4:	2000      	movs	r0, #0
   80bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80bc8:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80bcc:	20070a6c 	.word	0x20070a6c
   80bd0:	20070a70 	.word	0x20070a70
   80bd4:	00080991 	.word	0x00080991

00080bd8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80bd8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80bda:	4802      	ldr	r0, [pc, #8]	; (80be4 <PIOA_Handler+0xc>)
   80bdc:	210b      	movs	r1, #11
   80bde:	4b02      	ldr	r3, [pc, #8]	; (80be8 <PIOA_Handler+0x10>)
   80be0:	4798      	blx	r3
   80be2:	bd08      	pop	{r3, pc}
   80be4:	400e0e00 	.word	0x400e0e00
   80be8:	00080b45 	.word	0x00080b45

00080bec <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80bec:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80bee:	4802      	ldr	r0, [pc, #8]	; (80bf8 <PIOB_Handler+0xc>)
   80bf0:	210c      	movs	r1, #12
   80bf2:	4b02      	ldr	r3, [pc, #8]	; (80bfc <PIOB_Handler+0x10>)
   80bf4:	4798      	blx	r3
   80bf6:	bd08      	pop	{r3, pc}
   80bf8:	400e1000 	.word	0x400e1000
   80bfc:	00080b45 	.word	0x00080b45

00080c00 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80c00:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80c02:	4802      	ldr	r0, [pc, #8]	; (80c0c <PIOC_Handler+0xc>)
   80c04:	210d      	movs	r1, #13
   80c06:	4b02      	ldr	r3, [pc, #8]	; (80c10 <PIOC_Handler+0x10>)
   80c08:	4798      	blx	r3
   80c0a:	bd08      	pop	{r3, pc}
   80c0c:	400e1200 	.word	0x400e1200
   80c10:	00080b45 	.word	0x00080b45

00080c14 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80c14:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80c16:	4802      	ldr	r0, [pc, #8]	; (80c20 <PIOD_Handler+0xc>)
   80c18:	210e      	movs	r1, #14
   80c1a:	4b02      	ldr	r3, [pc, #8]	; (80c24 <PIOD_Handler+0x10>)
   80c1c:	4798      	blx	r3
   80c1e:	bd08      	pop	{r3, pc}
   80c20:	400e1400 	.word	0x400e1400
   80c24:	00080b45 	.word	0x00080b45

00080c28 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c28:	282c      	cmp	r0, #44	; 0x2c
   80c2a:	d820      	bhi.n	80c6e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80c2c:	281f      	cmp	r0, #31
   80c2e:	d80d      	bhi.n	80c4c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c30:	4b12      	ldr	r3, [pc, #72]	; (80c7c <pmc_enable_periph_clk+0x54>)
   80c32:	699a      	ldr	r2, [r3, #24]
   80c34:	2301      	movs	r3, #1
   80c36:	4083      	lsls	r3, r0
   80c38:	401a      	ands	r2, r3
   80c3a:	4293      	cmp	r3, r2
   80c3c:	d019      	beq.n	80c72 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80c3e:	2301      	movs	r3, #1
   80c40:	fa03 f000 	lsl.w	r0, r3, r0
   80c44:	4b0d      	ldr	r3, [pc, #52]	; (80c7c <pmc_enable_periph_clk+0x54>)
   80c46:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c48:	2000      	movs	r0, #0
   80c4a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c4c:	4b0b      	ldr	r3, [pc, #44]	; (80c7c <pmc_enable_periph_clk+0x54>)
   80c4e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80c52:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c54:	2301      	movs	r3, #1
   80c56:	4083      	lsls	r3, r0
   80c58:	401a      	ands	r2, r3
   80c5a:	4293      	cmp	r3, r2
   80c5c:	d00b      	beq.n	80c76 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80c5e:	2301      	movs	r3, #1
   80c60:	fa03 f000 	lsl.w	r0, r3, r0
   80c64:	4b05      	ldr	r3, [pc, #20]	; (80c7c <pmc_enable_periph_clk+0x54>)
   80c66:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80c6a:	2000      	movs	r0, #0
   80c6c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80c6e:	2001      	movs	r0, #1
   80c70:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c72:	2000      	movs	r0, #0
   80c74:	4770      	bx	lr
   80c76:	2000      	movs	r0, #0
}
   80c78:	4770      	bx	lr
   80c7a:	bf00      	nop
   80c7c:	400e0600 	.word	0x400e0600

00080c80 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80c80:	b4f0      	push	{r4, r5, r6, r7}
   80c82:	b08c      	sub	sp, #48	; 0x30
   80c84:	4607      	mov	r7, r0
   80c86:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80c88:	ac01      	add	r4, sp, #4
   80c8a:	4d12      	ldr	r5, [pc, #72]	; (80cd4 <pwm_clocks_generate+0x54>)
   80c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80c94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80c98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80c9c:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80c9e:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80ca0:	f852 4f04 	ldr.w	r4, [r2, #4]!
   80ca4:	fbb6 f4f4 	udiv	r4, r6, r4
   80ca8:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80cac:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   80cb0:	d903      	bls.n	80cba <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   80cb2:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80cb4:	2b0b      	cmp	r3, #11
   80cb6:	d1f3      	bne.n	80ca0 <pwm_clocks_generate+0x20>
   80cb8:	e004      	b.n	80cc4 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80cba:	2b0a      	cmp	r3, #10
   80cbc:	d805      	bhi.n	80cca <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   80cbe:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   80cc2:	e004      	b.n	80cce <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80cc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80cc8:	e001      	b.n	80cce <pwm_clocks_generate+0x4e>
   80cca:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   80cce:	b00c      	add	sp, #48	; 0x30
   80cd0:	bcf0      	pop	{r4, r5, r6, r7}
   80cd2:	4770      	bx	lr
   80cd4:	00083f24 	.word	0x00083f24

00080cd8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80cd8:	b570      	push	{r4, r5, r6, lr}
   80cda:	4606      	mov	r6, r0
   80cdc:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80cde:	6808      	ldr	r0, [r1, #0]
   80ce0:	b140      	cbz	r0, 80cf4 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80ce2:	6889      	ldr	r1, [r1, #8]
   80ce4:	4b0b      	ldr	r3, [pc, #44]	; (80d14 <pwm_init+0x3c>)
   80ce6:	4798      	blx	r3
   80ce8:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80cee:	4298      	cmp	r0, r3
   80cf0:	d101      	bne.n	80cf6 <pwm_init+0x1e>
   80cf2:	e00e      	b.n	80d12 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80cf4:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80cf6:	6860      	ldr	r0, [r4, #4]
   80cf8:	b140      	cbz	r0, 80d0c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80cfa:	68a1      	ldr	r1, [r4, #8]
   80cfc:	4b05      	ldr	r3, [pc, #20]	; (80d14 <pwm_init+0x3c>)
   80cfe:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80d04:	4298      	cmp	r0, r3
   80d06:	d004      	beq.n	80d12 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80d08:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80d0c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80d0e:	2000      	movs	r0, #0
   80d10:	bd70      	pop	{r4, r5, r6, pc}
}
   80d12:	bd70      	pop	{r4, r5, r6, pc}
   80d14:	00080c81 	.word	0x00080c81

00080d18 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80d18:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80d1a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80d1c:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80d1e:	684a      	ldr	r2, [r1, #4]
   80d20:	f002 020f 	and.w	r2, r2, #15
   80d24:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80d26:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80d28:	432c      	orrs	r4, r5
   80d2a:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80d2c:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80d30:	7d8a      	ldrb	r2, [r1, #22]
   80d32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80d36:	7dca      	ldrb	r2, [r1, #23]
   80d38:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80d3c:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80d3e:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   80d42:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80d46:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80d4a:	68cc      	ldr	r4, [r1, #12]
   80d4c:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80d50:	690c      	ldr	r4, [r1, #16]
   80d52:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80d56:	7d8a      	ldrb	r2, [r1, #22]
   80d58:	b13a      	cbz	r2, 80d6a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80d5a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80d5c:	8b4a      	ldrh	r2, [r1, #26]
   80d5e:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80d62:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   80d66:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80d6a:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80d6c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80d70:	409a      	lsls	r2, r3
   80d72:	43d2      	mvns	r2, r2
   80d74:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80d76:	7fce      	ldrb	r6, [r1, #31]
   80d78:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80d7a:	7f8c      	ldrb	r4, [r1, #30]
   80d7c:	409c      	lsls	r4, r3
   80d7e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80d82:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80d84:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80d86:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80d88:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80d8a:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80d8e:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80d90:	f891 4020 	ldrb.w	r4, [r1, #32]
   80d94:	409c      	lsls	r4, r3
   80d96:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80d9a:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80d9c:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80d9e:	2201      	movs	r2, #1
   80da0:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80da2:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80da6:	b11c      	cbz	r4, 80db0 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80da8:	6a04      	ldr	r4, [r0, #32]
   80daa:	4314      	orrs	r4, r2
   80dac:	6204      	str	r4, [r0, #32]
   80dae:	e003      	b.n	80db8 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80db0:	6a04      	ldr	r4, [r0, #32]
   80db2:	ea24 0402 	bic.w	r4, r4, r2
   80db6:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80db8:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80dbc:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80dbe:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80dc0:	bf0c      	ite	eq
   80dc2:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80dc4:	4394      	bicne	r4, r2
   80dc6:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80dc8:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80dcc:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80dce:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80dd0:	bf0c      	ite	eq
   80dd2:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80dd6:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80dda:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80ddc:	2b03      	cmp	r3, #3
   80dde:	d80c      	bhi.n	80dfa <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80de0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80de2:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80de4:	22ff      	movs	r2, #255	; 0xff
   80de6:	409a      	lsls	r2, r3
   80de8:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80dec:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80df0:	fa01 f303 	lsl.w	r3, r1, r3
   80df4:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80df6:	66c3      	str	r3, [r0, #108]	; 0x6c
   80df8:	e00c      	b.n	80e14 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80dfa:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80dfc:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80dfe:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80e00:	22ff      	movs	r2, #255	; 0xff
   80e02:	409a      	lsls	r2, r3
   80e04:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80e08:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80e0c:	fa01 f303 	lsl.w	r3, r1, r3
   80e10:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80e12:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80e14:	2000      	movs	r0, #0
   80e16:	bc70      	pop	{r4, r5, r6}
   80e18:	4770      	bx	lr
   80e1a:	bf00      	nop

00080e1c <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80e1c:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   80e1e:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80e20:	690b      	ldr	r3, [r1, #16]
   80e22:	4293      	cmp	r3, r2
   80e24:	d306      	bcc.n	80e34 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80e26:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80e28:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80e2c:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   80e30:	2000      	movs	r0, #0
   80e32:	e001      	b.n	80e38 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80e34:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80e38:	f85d 4b04 	ldr.w	r4, [sp], #4
   80e3c:	4770      	bx	lr
   80e3e:	bf00      	nop

00080e40 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80e40:	2301      	movs	r3, #1
   80e42:	fa03 f101 	lsl.w	r1, r3, r1
   80e46:	6041      	str	r1, [r0, #4]
   80e48:	4770      	bx	lr
   80e4a:	bf00      	nop

00080e4c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80e4c:	2301      	movs	r3, #1
   80e4e:	fa03 f101 	lsl.w	r1, r3, r1
   80e52:	6081      	str	r1, [r0, #8]
   80e54:	4770      	bx	lr
   80e56:	bf00      	nop

00080e58 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80e58:	e7fe      	b.n	80e58 <Dummy_Handler>
   80e5a:	bf00      	nop

00080e5c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80e5c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80e5e:	4b1e      	ldr	r3, [pc, #120]	; (80ed8 <Reset_Handler+0x7c>)
   80e60:	4a1e      	ldr	r2, [pc, #120]	; (80edc <Reset_Handler+0x80>)
   80e62:	429a      	cmp	r2, r3
   80e64:	d003      	beq.n	80e6e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80e66:	4b1e      	ldr	r3, [pc, #120]	; (80ee0 <Reset_Handler+0x84>)
   80e68:	4a1b      	ldr	r2, [pc, #108]	; (80ed8 <Reset_Handler+0x7c>)
   80e6a:	429a      	cmp	r2, r3
   80e6c:	d304      	bcc.n	80e78 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e6e:	4b1d      	ldr	r3, [pc, #116]	; (80ee4 <Reset_Handler+0x88>)
   80e70:	4a1d      	ldr	r2, [pc, #116]	; (80ee8 <Reset_Handler+0x8c>)
   80e72:	429a      	cmp	r2, r3
   80e74:	d30f      	bcc.n	80e96 <Reset_Handler+0x3a>
   80e76:	e01a      	b.n	80eae <Reset_Handler+0x52>
   80e78:	4b1c      	ldr	r3, [pc, #112]	; (80eec <Reset_Handler+0x90>)
   80e7a:	4c1d      	ldr	r4, [pc, #116]	; (80ef0 <Reset_Handler+0x94>)
   80e7c:	1ae4      	subs	r4, r4, r3
   80e7e:	f024 0403 	bic.w	r4, r4, #3
   80e82:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80e84:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80e86:	4814      	ldr	r0, [pc, #80]	; (80ed8 <Reset_Handler+0x7c>)
   80e88:	4914      	ldr	r1, [pc, #80]	; (80edc <Reset_Handler+0x80>)
   80e8a:	585a      	ldr	r2, [r3, r1]
   80e8c:	501a      	str	r2, [r3, r0]
   80e8e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80e90:	42a3      	cmp	r3, r4
   80e92:	d1fa      	bne.n	80e8a <Reset_Handler+0x2e>
   80e94:	e7eb      	b.n	80e6e <Reset_Handler+0x12>
   80e96:	4b17      	ldr	r3, [pc, #92]	; (80ef4 <Reset_Handler+0x98>)
   80e98:	4917      	ldr	r1, [pc, #92]	; (80ef8 <Reset_Handler+0x9c>)
   80e9a:	1ac9      	subs	r1, r1, r3
   80e9c:	f021 0103 	bic.w	r1, r1, #3
   80ea0:	1d1a      	adds	r2, r3, #4
   80ea2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80ea4:	2200      	movs	r2, #0
   80ea6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80eaa:	428b      	cmp	r3, r1
   80eac:	d1fb      	bne.n	80ea6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80eae:	4a13      	ldr	r2, [pc, #76]	; (80efc <Reset_Handler+0xa0>)
   80eb0:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80eb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80eb8:	4911      	ldr	r1, [pc, #68]	; (80f00 <Reset_Handler+0xa4>)
   80eba:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80ebc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80ec0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80ec4:	d203      	bcs.n	80ece <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80ec6:	688a      	ldr	r2, [r1, #8]
   80ec8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80ecc:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80ece:	4b0d      	ldr	r3, [pc, #52]	; (80f04 <Reset_Handler+0xa8>)
   80ed0:	4798      	blx	r3

	/* Branch to main function */
	main();
   80ed2:	4b0d      	ldr	r3, [pc, #52]	; (80f08 <Reset_Handler+0xac>)
   80ed4:	4798      	blx	r3
   80ed6:	e7fe      	b.n	80ed6 <Reset_Handler+0x7a>
   80ed8:	20070000 	.word	0x20070000
   80edc:	00083fd4 	.word	0x00083fd4
   80ee0:	2007099c 	.word	0x2007099c
   80ee4:	20070b78 	.word	0x20070b78
   80ee8:	2007099c 	.word	0x2007099c
   80eec:	20070004 	.word	0x20070004
   80ef0:	2007099f 	.word	0x2007099f
   80ef4:	20070998 	.word	0x20070998
   80ef8:	20070b73 	.word	0x20070b73
   80efc:	00080000 	.word	0x00080000
   80f00:	e000ed00 	.word	0xe000ed00
   80f04:	00080f5d 	.word	0x00080f5d
   80f08:	00080149 	.word	0x00080149

00080f0c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80f0c:	4b09      	ldr	r3, [pc, #36]	; (80f34 <_sbrk+0x28>)
   80f0e:	681b      	ldr	r3, [r3, #0]
   80f10:	b913      	cbnz	r3, 80f18 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80f12:	4a09      	ldr	r2, [pc, #36]	; (80f38 <_sbrk+0x2c>)
   80f14:	4b07      	ldr	r3, [pc, #28]	; (80f34 <_sbrk+0x28>)
   80f16:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80f18:	4b06      	ldr	r3, [pc, #24]	; (80f34 <_sbrk+0x28>)
   80f1a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80f1c:	181a      	adds	r2, r3, r0
   80f1e:	4907      	ldr	r1, [pc, #28]	; (80f3c <_sbrk+0x30>)
   80f20:	4291      	cmp	r1, r2
   80f22:	db04      	blt.n	80f2e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80f24:	4610      	mov	r0, r2
   80f26:	4a03      	ldr	r2, [pc, #12]	; (80f34 <_sbrk+0x28>)
   80f28:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80f2a:	4618      	mov	r0, r3
   80f2c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80f2e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80f32:	4770      	bx	lr
   80f34:	20070ae0 	.word	0x20070ae0
   80f38:	20072b78 	.word	0x20072b78
   80f3c:	20087ffc 	.word	0x20087ffc

00080f40 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80f40:	f04f 30ff 	mov.w	r0, #4294967295
   80f44:	4770      	bx	lr
   80f46:	bf00      	nop

00080f48 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80f4c:	604b      	str	r3, [r1, #4]

	return 0;
}
   80f4e:	2000      	movs	r0, #0
   80f50:	4770      	bx	lr
   80f52:	bf00      	nop

00080f54 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80f54:	2001      	movs	r0, #1
   80f56:	4770      	bx	lr

00080f58 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80f58:	2000      	movs	r0, #0
   80f5a:	4770      	bx	lr

00080f5c <__libc_init_array>:
   80f5c:	b570      	push	{r4, r5, r6, lr}
   80f5e:	4e0f      	ldr	r6, [pc, #60]	; (80f9c <__libc_init_array+0x40>)
   80f60:	4d0f      	ldr	r5, [pc, #60]	; (80fa0 <__libc_init_array+0x44>)
   80f62:	1b76      	subs	r6, r6, r5
   80f64:	10b6      	asrs	r6, r6, #2
   80f66:	d007      	beq.n	80f78 <__libc_init_array+0x1c>
   80f68:	3d04      	subs	r5, #4
   80f6a:	2400      	movs	r4, #0
   80f6c:	3401      	adds	r4, #1
   80f6e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80f72:	4798      	blx	r3
   80f74:	42a6      	cmp	r6, r4
   80f76:	d1f9      	bne.n	80f6c <__libc_init_array+0x10>
   80f78:	4e0a      	ldr	r6, [pc, #40]	; (80fa4 <__libc_init_array+0x48>)
   80f7a:	4d0b      	ldr	r5, [pc, #44]	; (80fa8 <__libc_init_array+0x4c>)
   80f7c:	f003 f814 	bl	83fa8 <_init>
   80f80:	1b76      	subs	r6, r6, r5
   80f82:	10b6      	asrs	r6, r6, #2
   80f84:	d008      	beq.n	80f98 <__libc_init_array+0x3c>
   80f86:	3d04      	subs	r5, #4
   80f88:	2400      	movs	r4, #0
   80f8a:	3401      	adds	r4, #1
   80f8c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80f90:	4798      	blx	r3
   80f92:	42a6      	cmp	r6, r4
   80f94:	d1f9      	bne.n	80f8a <__libc_init_array+0x2e>
   80f96:	bd70      	pop	{r4, r5, r6, pc}
   80f98:	bd70      	pop	{r4, r5, r6, pc}
   80f9a:	bf00      	nop
   80f9c:	00083fb4 	.word	0x00083fb4
   80fa0:	00083fb4 	.word	0x00083fb4
   80fa4:	00083fbc 	.word	0x00083fbc
   80fa8:	00083fb4 	.word	0x00083fb4

00080fac <iprintf>:
   80fac:	b40f      	push	{r0, r1, r2, r3}
   80fae:	b510      	push	{r4, lr}
   80fb0:	4b07      	ldr	r3, [pc, #28]	; (80fd0 <iprintf+0x24>)
   80fb2:	b082      	sub	sp, #8
   80fb4:	ac04      	add	r4, sp, #16
   80fb6:	f854 2b04 	ldr.w	r2, [r4], #4
   80fba:	6818      	ldr	r0, [r3, #0]
   80fbc:	4623      	mov	r3, r4
   80fbe:	6881      	ldr	r1, [r0, #8]
   80fc0:	9401      	str	r4, [sp, #4]
   80fc2:	f000 f945 	bl	81250 <_vfiprintf_r>
   80fc6:	b002      	add	sp, #8
   80fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80fcc:	b004      	add	sp, #16
   80fce:	4770      	bx	lr
   80fd0:	20070560 	.word	0x20070560

00080fd4 <memset>:
   80fd4:	b4f0      	push	{r4, r5, r6, r7}
   80fd6:	0784      	lsls	r4, r0, #30
   80fd8:	d043      	beq.n	81062 <memset+0x8e>
   80fda:	1e54      	subs	r4, r2, #1
   80fdc:	2a00      	cmp	r2, #0
   80fde:	d03e      	beq.n	8105e <memset+0x8a>
   80fe0:	b2cd      	uxtb	r5, r1
   80fe2:	4603      	mov	r3, r0
   80fe4:	e003      	b.n	80fee <memset+0x1a>
   80fe6:	1e62      	subs	r2, r4, #1
   80fe8:	2c00      	cmp	r4, #0
   80fea:	d038      	beq.n	8105e <memset+0x8a>
   80fec:	4614      	mov	r4, r2
   80fee:	f803 5b01 	strb.w	r5, [r3], #1
   80ff2:	079a      	lsls	r2, r3, #30
   80ff4:	d1f7      	bne.n	80fe6 <memset+0x12>
   80ff6:	2c03      	cmp	r4, #3
   80ff8:	d92a      	bls.n	81050 <memset+0x7c>
   80ffa:	b2cd      	uxtb	r5, r1
   80ffc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81000:	2c0f      	cmp	r4, #15
   81002:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81006:	d915      	bls.n	81034 <memset+0x60>
   81008:	f1a4 0710 	sub.w	r7, r4, #16
   8100c:	093f      	lsrs	r7, r7, #4
   8100e:	f103 0610 	add.w	r6, r3, #16
   81012:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81016:	461a      	mov	r2, r3
   81018:	6015      	str	r5, [r2, #0]
   8101a:	6055      	str	r5, [r2, #4]
   8101c:	6095      	str	r5, [r2, #8]
   8101e:	60d5      	str	r5, [r2, #12]
   81020:	3210      	adds	r2, #16
   81022:	42b2      	cmp	r2, r6
   81024:	d1f8      	bne.n	81018 <memset+0x44>
   81026:	f004 040f 	and.w	r4, r4, #15
   8102a:	3701      	adds	r7, #1
   8102c:	2c03      	cmp	r4, #3
   8102e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81032:	d90d      	bls.n	81050 <memset+0x7c>
   81034:	461e      	mov	r6, r3
   81036:	4622      	mov	r2, r4
   81038:	3a04      	subs	r2, #4
   8103a:	2a03      	cmp	r2, #3
   8103c:	f846 5b04 	str.w	r5, [r6], #4
   81040:	d8fa      	bhi.n	81038 <memset+0x64>
   81042:	1f22      	subs	r2, r4, #4
   81044:	f022 0203 	bic.w	r2, r2, #3
   81048:	3204      	adds	r2, #4
   8104a:	4413      	add	r3, r2
   8104c:	f004 0403 	and.w	r4, r4, #3
   81050:	b12c      	cbz	r4, 8105e <memset+0x8a>
   81052:	b2c9      	uxtb	r1, r1
   81054:	441c      	add	r4, r3
   81056:	f803 1b01 	strb.w	r1, [r3], #1
   8105a:	42a3      	cmp	r3, r4
   8105c:	d1fb      	bne.n	81056 <memset+0x82>
   8105e:	bcf0      	pop	{r4, r5, r6, r7}
   81060:	4770      	bx	lr
   81062:	4614      	mov	r4, r2
   81064:	4603      	mov	r3, r0
   81066:	e7c6      	b.n	80ff6 <memset+0x22>

00081068 <setbuf>:
   81068:	2900      	cmp	r1, #0
   8106a:	bf0c      	ite	eq
   8106c:	2202      	moveq	r2, #2
   8106e:	2200      	movne	r2, #0
   81070:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81074:	f000 b800 	b.w	81078 <setvbuf>

00081078 <setvbuf>:
   81078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8107c:	4d3c      	ldr	r5, [pc, #240]	; (81170 <setvbuf+0xf8>)
   8107e:	4604      	mov	r4, r0
   81080:	682d      	ldr	r5, [r5, #0]
   81082:	4688      	mov	r8, r1
   81084:	4616      	mov	r6, r2
   81086:	461f      	mov	r7, r3
   81088:	b115      	cbz	r5, 81090 <setvbuf+0x18>
   8108a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8108c:	2b00      	cmp	r3, #0
   8108e:	d04f      	beq.n	81130 <setvbuf+0xb8>
   81090:	2e02      	cmp	r6, #2
   81092:	d830      	bhi.n	810f6 <setvbuf+0x7e>
   81094:	2f00      	cmp	r7, #0
   81096:	db2e      	blt.n	810f6 <setvbuf+0x7e>
   81098:	4628      	mov	r0, r5
   8109a:	4621      	mov	r1, r4
   8109c:	f001 f856 	bl	8214c <_fflush_r>
   810a0:	89a3      	ldrh	r3, [r4, #12]
   810a2:	2200      	movs	r2, #0
   810a4:	6062      	str	r2, [r4, #4]
   810a6:	61a2      	str	r2, [r4, #24]
   810a8:	061a      	lsls	r2, r3, #24
   810aa:	d428      	bmi.n	810fe <setvbuf+0x86>
   810ac:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   810b0:	b29b      	uxth	r3, r3
   810b2:	2e02      	cmp	r6, #2
   810b4:	81a3      	strh	r3, [r4, #12]
   810b6:	d02d      	beq.n	81114 <setvbuf+0x9c>
   810b8:	f1b8 0f00 	cmp.w	r8, #0
   810bc:	d03c      	beq.n	81138 <setvbuf+0xc0>
   810be:	2e01      	cmp	r6, #1
   810c0:	d013      	beq.n	810ea <setvbuf+0x72>
   810c2:	b29b      	uxth	r3, r3
   810c4:	f003 0008 	and.w	r0, r3, #8
   810c8:	4a2a      	ldr	r2, [pc, #168]	; (81174 <setvbuf+0xfc>)
   810ca:	b280      	uxth	r0, r0
   810cc:	63ea      	str	r2, [r5, #60]	; 0x3c
   810ce:	f8c4 8000 	str.w	r8, [r4]
   810d2:	f8c4 8010 	str.w	r8, [r4, #16]
   810d6:	6167      	str	r7, [r4, #20]
   810d8:	b178      	cbz	r0, 810fa <setvbuf+0x82>
   810da:	f013 0f03 	tst.w	r3, #3
   810de:	bf18      	it	ne
   810e0:	2700      	movne	r7, #0
   810e2:	60a7      	str	r7, [r4, #8]
   810e4:	2000      	movs	r0, #0
   810e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810ea:	f043 0301 	orr.w	r3, r3, #1
   810ee:	427a      	negs	r2, r7
   810f0:	81a3      	strh	r3, [r4, #12]
   810f2:	61a2      	str	r2, [r4, #24]
   810f4:	e7e5      	b.n	810c2 <setvbuf+0x4a>
   810f6:	f04f 30ff 	mov.w	r0, #4294967295
   810fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810fe:	4628      	mov	r0, r5
   81100:	6921      	ldr	r1, [r4, #16]
   81102:	f001 f983 	bl	8240c <_free_r>
   81106:	89a3      	ldrh	r3, [r4, #12]
   81108:	2e02      	cmp	r6, #2
   8110a:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8110e:	b29b      	uxth	r3, r3
   81110:	81a3      	strh	r3, [r4, #12]
   81112:	d1d1      	bne.n	810b8 <setvbuf+0x40>
   81114:	2000      	movs	r0, #0
   81116:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8111a:	f043 0302 	orr.w	r3, r3, #2
   8111e:	2500      	movs	r5, #0
   81120:	2101      	movs	r1, #1
   81122:	81a3      	strh	r3, [r4, #12]
   81124:	60a5      	str	r5, [r4, #8]
   81126:	6022      	str	r2, [r4, #0]
   81128:	6122      	str	r2, [r4, #16]
   8112a:	6161      	str	r1, [r4, #20]
   8112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81130:	4628      	mov	r0, r5
   81132:	f001 f827 	bl	82184 <__sinit>
   81136:	e7ab      	b.n	81090 <setvbuf+0x18>
   81138:	2f00      	cmp	r7, #0
   8113a:	bf08      	it	eq
   8113c:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81140:	4638      	mov	r0, r7
   81142:	f001 fc59 	bl	829f8 <malloc>
   81146:	4680      	mov	r8, r0
   81148:	b128      	cbz	r0, 81156 <setvbuf+0xde>
   8114a:	89a3      	ldrh	r3, [r4, #12]
   8114c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81150:	b29b      	uxth	r3, r3
   81152:	81a3      	strh	r3, [r4, #12]
   81154:	e7b3      	b.n	810be <setvbuf+0x46>
   81156:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8115a:	f001 fc4d 	bl	829f8 <malloc>
   8115e:	4680      	mov	r8, r0
   81160:	b918      	cbnz	r0, 8116a <setvbuf+0xf2>
   81162:	89a3      	ldrh	r3, [r4, #12]
   81164:	f04f 30ff 	mov.w	r0, #4294967295
   81168:	e7d5      	b.n	81116 <setvbuf+0x9e>
   8116a:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8116e:	e7ec      	b.n	8114a <setvbuf+0xd2>
   81170:	20070560 	.word	0x20070560
   81174:	00082179 	.word	0x00082179

00081178 <strlen>:
   81178:	f020 0103 	bic.w	r1, r0, #3
   8117c:	f010 0003 	ands.w	r0, r0, #3
   81180:	f1c0 0000 	rsb	r0, r0, #0
   81184:	f851 3b04 	ldr.w	r3, [r1], #4
   81188:	f100 0c04 	add.w	ip, r0, #4
   8118c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81190:	f06f 0200 	mvn.w	r2, #0
   81194:	bf1c      	itt	ne
   81196:	fa22 f20c 	lsrne.w	r2, r2, ip
   8119a:	4313      	orrne	r3, r2
   8119c:	f04f 0c01 	mov.w	ip, #1
   811a0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   811a4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   811a8:	eba3 020c 	sub.w	r2, r3, ip
   811ac:	ea22 0203 	bic.w	r2, r2, r3
   811b0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   811b4:	bf04      	itt	eq
   811b6:	f851 3b04 	ldreq.w	r3, [r1], #4
   811ba:	3004      	addeq	r0, #4
   811bc:	d0f4      	beq.n	811a8 <strlen+0x30>
   811be:	f013 0fff 	tst.w	r3, #255	; 0xff
   811c2:	bf1f      	itttt	ne
   811c4:	3001      	addne	r0, #1
   811c6:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   811ca:	3001      	addne	r0, #1
   811cc:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   811d0:	bf18      	it	ne
   811d2:	3001      	addne	r0, #1
   811d4:	4770      	bx	lr
   811d6:	bf00      	nop

000811d8 <__sprint_r.part.0>:
   811d8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   811da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   811de:	049c      	lsls	r4, r3, #18
   811e0:	460e      	mov	r6, r1
   811e2:	4680      	mov	r8, r0
   811e4:	4691      	mov	r9, r2
   811e6:	d52a      	bpl.n	8123e <__sprint_r.part.0+0x66>
   811e8:	6893      	ldr	r3, [r2, #8]
   811ea:	6812      	ldr	r2, [r2, #0]
   811ec:	f102 0a08 	add.w	sl, r2, #8
   811f0:	b31b      	cbz	r3, 8123a <__sprint_r.part.0+0x62>
   811f2:	e91a 00a0 	ldmdb	sl, {r5, r7}
   811f6:	08bf      	lsrs	r7, r7, #2
   811f8:	d017      	beq.n	8122a <__sprint_r.part.0+0x52>
   811fa:	3d04      	subs	r5, #4
   811fc:	2400      	movs	r4, #0
   811fe:	e001      	b.n	81204 <__sprint_r.part.0+0x2c>
   81200:	42a7      	cmp	r7, r4
   81202:	d010      	beq.n	81226 <__sprint_r.part.0+0x4e>
   81204:	4640      	mov	r0, r8
   81206:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8120a:	4632      	mov	r2, r6
   8120c:	f001 f850 	bl	822b0 <_fputwc_r>
   81210:	1c43      	adds	r3, r0, #1
   81212:	f104 0401 	add.w	r4, r4, #1
   81216:	d1f3      	bne.n	81200 <__sprint_r.part.0+0x28>
   81218:	2300      	movs	r3, #0
   8121a:	f8c9 3008 	str.w	r3, [r9, #8]
   8121e:	f8c9 3004 	str.w	r3, [r9, #4]
   81222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81226:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8122a:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8122e:	f8c9 3008 	str.w	r3, [r9, #8]
   81232:	f10a 0a08 	add.w	sl, sl, #8
   81236:	2b00      	cmp	r3, #0
   81238:	d1db      	bne.n	811f2 <__sprint_r.part.0+0x1a>
   8123a:	2000      	movs	r0, #0
   8123c:	e7ec      	b.n	81218 <__sprint_r.part.0+0x40>
   8123e:	f001 f9b1 	bl	825a4 <__sfvwrite_r>
   81242:	2300      	movs	r3, #0
   81244:	f8c9 3008 	str.w	r3, [r9, #8]
   81248:	f8c9 3004 	str.w	r3, [r9, #4]
   8124c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081250 <_vfiprintf_r>:
   81250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81254:	b0b1      	sub	sp, #196	; 0xc4
   81256:	461c      	mov	r4, r3
   81258:	9102      	str	r1, [sp, #8]
   8125a:	4690      	mov	r8, r2
   8125c:	9308      	str	r3, [sp, #32]
   8125e:	9006      	str	r0, [sp, #24]
   81260:	b118      	cbz	r0, 8126a <_vfiprintf_r+0x1a>
   81262:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81264:	2b00      	cmp	r3, #0
   81266:	f000 80e8 	beq.w	8143a <_vfiprintf_r+0x1ea>
   8126a:	9d02      	ldr	r5, [sp, #8]
   8126c:	89ab      	ldrh	r3, [r5, #12]
   8126e:	b29a      	uxth	r2, r3
   81270:	0490      	lsls	r0, r2, #18
   81272:	d407      	bmi.n	81284 <_vfiprintf_r+0x34>
   81274:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81276:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8127a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   8127e:	81ab      	strh	r3, [r5, #12]
   81280:	b29a      	uxth	r2, r3
   81282:	6669      	str	r1, [r5, #100]	; 0x64
   81284:	0711      	lsls	r1, r2, #28
   81286:	f140 80b7 	bpl.w	813f8 <_vfiprintf_r+0x1a8>
   8128a:	f8dd b008 	ldr.w	fp, [sp, #8]
   8128e:	f8db 3010 	ldr.w	r3, [fp, #16]
   81292:	2b00      	cmp	r3, #0
   81294:	f000 80b0 	beq.w	813f8 <_vfiprintf_r+0x1a8>
   81298:	f002 021a 	and.w	r2, r2, #26
   8129c:	2a0a      	cmp	r2, #10
   8129e:	f000 80b7 	beq.w	81410 <_vfiprintf_r+0x1c0>
   812a2:	2300      	movs	r3, #0
   812a4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   812a8:	930a      	str	r3, [sp, #40]	; 0x28
   812aa:	9315      	str	r3, [sp, #84]	; 0x54
   812ac:	9314      	str	r3, [sp, #80]	; 0x50
   812ae:	9309      	str	r3, [sp, #36]	; 0x24
   812b0:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   812b4:	464e      	mov	r6, r9
   812b6:	f898 3000 	ldrb.w	r3, [r8]
   812ba:	2b00      	cmp	r3, #0
   812bc:	f000 84c8 	beq.w	81c50 <_vfiprintf_r+0xa00>
   812c0:	2b25      	cmp	r3, #37	; 0x25
   812c2:	f000 84c5 	beq.w	81c50 <_vfiprintf_r+0xa00>
   812c6:	f108 0201 	add.w	r2, r8, #1
   812ca:	e001      	b.n	812d0 <_vfiprintf_r+0x80>
   812cc:	2b25      	cmp	r3, #37	; 0x25
   812ce:	d004      	beq.n	812da <_vfiprintf_r+0x8a>
   812d0:	7813      	ldrb	r3, [r2, #0]
   812d2:	4614      	mov	r4, r2
   812d4:	3201      	adds	r2, #1
   812d6:	2b00      	cmp	r3, #0
   812d8:	d1f8      	bne.n	812cc <_vfiprintf_r+0x7c>
   812da:	ebc8 0504 	rsb	r5, r8, r4
   812de:	b195      	cbz	r5, 81306 <_vfiprintf_r+0xb6>
   812e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   812e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   812e4:	3301      	adds	r3, #1
   812e6:	442a      	add	r2, r5
   812e8:	2b07      	cmp	r3, #7
   812ea:	f8c6 8000 	str.w	r8, [r6]
   812ee:	6075      	str	r5, [r6, #4]
   812f0:	9215      	str	r2, [sp, #84]	; 0x54
   812f2:	9314      	str	r3, [sp, #80]	; 0x50
   812f4:	dd7b      	ble.n	813ee <_vfiprintf_r+0x19e>
   812f6:	2a00      	cmp	r2, #0
   812f8:	f040 84d5 	bne.w	81ca6 <_vfiprintf_r+0xa56>
   812fc:	9809      	ldr	r0, [sp, #36]	; 0x24
   812fe:	9214      	str	r2, [sp, #80]	; 0x50
   81300:	4428      	add	r0, r5
   81302:	464e      	mov	r6, r9
   81304:	9009      	str	r0, [sp, #36]	; 0x24
   81306:	7823      	ldrb	r3, [r4, #0]
   81308:	2b00      	cmp	r3, #0
   8130a:	f000 83ed 	beq.w	81ae8 <_vfiprintf_r+0x898>
   8130e:	2100      	movs	r1, #0
   81310:	f04f 0200 	mov.w	r2, #0
   81314:	f04f 3cff 	mov.w	ip, #4294967295
   81318:	7863      	ldrb	r3, [r4, #1]
   8131a:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8131e:	9104      	str	r1, [sp, #16]
   81320:	468a      	mov	sl, r1
   81322:	f104 0801 	add.w	r8, r4, #1
   81326:	4608      	mov	r0, r1
   81328:	4665      	mov	r5, ip
   8132a:	f108 0801 	add.w	r8, r8, #1
   8132e:	f1a3 0220 	sub.w	r2, r3, #32
   81332:	2a58      	cmp	r2, #88	; 0x58
   81334:	f200 82d9 	bhi.w	818ea <_vfiprintf_r+0x69a>
   81338:	e8df f012 	tbh	[pc, r2, lsl #1]
   8133c:	02d702cb 	.word	0x02d702cb
   81340:	02d202d7 	.word	0x02d202d7
   81344:	02d702d7 	.word	0x02d702d7
   81348:	02d702d7 	.word	0x02d702d7
   8134c:	02d702d7 	.word	0x02d702d7
   81350:	028f0282 	.word	0x028f0282
   81354:	008402d7 	.word	0x008402d7
   81358:	02d70293 	.word	0x02d70293
   8135c:	0196012b 	.word	0x0196012b
   81360:	01960196 	.word	0x01960196
   81364:	01960196 	.word	0x01960196
   81368:	01960196 	.word	0x01960196
   8136c:	01960196 	.word	0x01960196
   81370:	02d702d7 	.word	0x02d702d7
   81374:	02d702d7 	.word	0x02d702d7
   81378:	02d702d7 	.word	0x02d702d7
   8137c:	02d702d7 	.word	0x02d702d7
   81380:	02d702d7 	.word	0x02d702d7
   81384:	02d70130 	.word	0x02d70130
   81388:	02d702d7 	.word	0x02d702d7
   8138c:	02d702d7 	.word	0x02d702d7
   81390:	02d702d7 	.word	0x02d702d7
   81394:	02d702d7 	.word	0x02d702d7
   81398:	017b02d7 	.word	0x017b02d7
   8139c:	02d702d7 	.word	0x02d702d7
   813a0:	02d702d7 	.word	0x02d702d7
   813a4:	01a402d7 	.word	0x01a402d7
   813a8:	02d702d7 	.word	0x02d702d7
   813ac:	02d701bf 	.word	0x02d701bf
   813b0:	02d702d7 	.word	0x02d702d7
   813b4:	02d702d7 	.word	0x02d702d7
   813b8:	02d702d7 	.word	0x02d702d7
   813bc:	02d702d7 	.word	0x02d702d7
   813c0:	01e402d7 	.word	0x01e402d7
   813c4:	02d701fa 	.word	0x02d701fa
   813c8:	02d702d7 	.word	0x02d702d7
   813cc:	01fa0216 	.word	0x01fa0216
   813d0:	02d702d7 	.word	0x02d702d7
   813d4:	02d7021b 	.word	0x02d7021b
   813d8:	00890228 	.word	0x00890228
   813dc:	027d0266 	.word	0x027d0266
   813e0:	023a02d7 	.word	0x023a02d7
   813e4:	011902d7 	.word	0x011902d7
   813e8:	02d702d7 	.word	0x02d702d7
   813ec:	02af      	.short	0x02af
   813ee:	3608      	adds	r6, #8
   813f0:	9809      	ldr	r0, [sp, #36]	; 0x24
   813f2:	4428      	add	r0, r5
   813f4:	9009      	str	r0, [sp, #36]	; 0x24
   813f6:	e786      	b.n	81306 <_vfiprintf_r+0xb6>
   813f8:	9806      	ldr	r0, [sp, #24]
   813fa:	9902      	ldr	r1, [sp, #8]
   813fc:	f000 fd90 	bl	81f20 <__swsetup_r>
   81400:	b9b0      	cbnz	r0, 81430 <_vfiprintf_r+0x1e0>
   81402:	9d02      	ldr	r5, [sp, #8]
   81404:	89aa      	ldrh	r2, [r5, #12]
   81406:	f002 021a 	and.w	r2, r2, #26
   8140a:	2a0a      	cmp	r2, #10
   8140c:	f47f af49 	bne.w	812a2 <_vfiprintf_r+0x52>
   81410:	f8dd b008 	ldr.w	fp, [sp, #8]
   81414:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81418:	2b00      	cmp	r3, #0
   8141a:	f6ff af42 	blt.w	812a2 <_vfiprintf_r+0x52>
   8141e:	9806      	ldr	r0, [sp, #24]
   81420:	4659      	mov	r1, fp
   81422:	4642      	mov	r2, r8
   81424:	4623      	mov	r3, r4
   81426:	f000 fd3d 	bl	81ea4 <__sbprintf>
   8142a:	b031      	add	sp, #196	; 0xc4
   8142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81430:	f04f 30ff 	mov.w	r0, #4294967295
   81434:	b031      	add	sp, #196	; 0xc4
   81436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8143a:	f000 fea3 	bl	82184 <__sinit>
   8143e:	e714      	b.n	8126a <_vfiprintf_r+0x1a>
   81440:	4240      	negs	r0, r0
   81442:	9308      	str	r3, [sp, #32]
   81444:	f04a 0a04 	orr.w	sl, sl, #4
   81448:	f898 3000 	ldrb.w	r3, [r8]
   8144c:	e76d      	b.n	8132a <_vfiprintf_r+0xda>
   8144e:	f01a 0320 	ands.w	r3, sl, #32
   81452:	9004      	str	r0, [sp, #16]
   81454:	46ac      	mov	ip, r5
   81456:	f000 80f4 	beq.w	81642 <_vfiprintf_r+0x3f2>
   8145a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8145e:	f10b 0307 	add.w	r3, fp, #7
   81462:	f023 0307 	bic.w	r3, r3, #7
   81466:	f103 0408 	add.w	r4, r3, #8
   8146a:	9408      	str	r4, [sp, #32]
   8146c:	e9d3 4500 	ldrd	r4, r5, [r3]
   81470:	2300      	movs	r3, #0
   81472:	f04f 0000 	mov.w	r0, #0
   81476:	2100      	movs	r1, #0
   81478:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   8147c:	f8cd c014 	str.w	ip, [sp, #20]
   81480:	9107      	str	r1, [sp, #28]
   81482:	f1bc 0f00 	cmp.w	ip, #0
   81486:	bfa8      	it	ge
   81488:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   8148c:	ea54 0205 	orrs.w	r2, r4, r5
   81490:	f040 80ad 	bne.w	815ee <_vfiprintf_r+0x39e>
   81494:	f1bc 0f00 	cmp.w	ip, #0
   81498:	f040 80a9 	bne.w	815ee <_vfiprintf_r+0x39e>
   8149c:	2b00      	cmp	r3, #0
   8149e:	f040 83c0 	bne.w	81c22 <_vfiprintf_r+0x9d2>
   814a2:	f01a 0f01 	tst.w	sl, #1
   814a6:	f000 83bc 	beq.w	81c22 <_vfiprintf_r+0x9d2>
   814aa:	2330      	movs	r3, #48	; 0x30
   814ac:	af30      	add	r7, sp, #192	; 0xc0
   814ae:	f807 3d41 	strb.w	r3, [r7, #-65]!
   814b2:	ebc7 0409 	rsb	r4, r7, r9
   814b6:	9405      	str	r4, [sp, #20]
   814b8:	f8dd b014 	ldr.w	fp, [sp, #20]
   814bc:	9c07      	ldr	r4, [sp, #28]
   814be:	45e3      	cmp	fp, ip
   814c0:	bfb8      	it	lt
   814c2:	46e3      	movlt	fp, ip
   814c4:	f8cd b00c 	str.w	fp, [sp, #12]
   814c8:	b11c      	cbz	r4, 814d2 <_vfiprintf_r+0x282>
   814ca:	f10b 0b01 	add.w	fp, fp, #1
   814ce:	f8cd b00c 	str.w	fp, [sp, #12]
   814d2:	f01a 0502 	ands.w	r5, sl, #2
   814d6:	9507      	str	r5, [sp, #28]
   814d8:	d005      	beq.n	814e6 <_vfiprintf_r+0x296>
   814da:	f8dd b00c 	ldr.w	fp, [sp, #12]
   814de:	f10b 0b02 	add.w	fp, fp, #2
   814e2:	f8cd b00c 	str.w	fp, [sp, #12]
   814e6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   814ea:	930b      	str	r3, [sp, #44]	; 0x2c
   814ec:	f040 821b 	bne.w	81926 <_vfiprintf_r+0x6d6>
   814f0:	9d04      	ldr	r5, [sp, #16]
   814f2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   814f6:	ebcb 0405 	rsb	r4, fp, r5
   814fa:	2c00      	cmp	r4, #0
   814fc:	f340 8213 	ble.w	81926 <_vfiprintf_r+0x6d6>
   81500:	2c10      	cmp	r4, #16
   81502:	f340 8489 	ble.w	81e18 <_vfiprintf_r+0xbc8>
   81506:	4dbe      	ldr	r5, [pc, #760]	; (81800 <_vfiprintf_r+0x5b0>)
   81508:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8150a:	462b      	mov	r3, r5
   8150c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8150e:	4625      	mov	r5, r4
   81510:	f04f 0b10 	mov.w	fp, #16
   81514:	4664      	mov	r4, ip
   81516:	46b4      	mov	ip, r6
   81518:	461e      	mov	r6, r3
   8151a:	e006      	b.n	8152a <_vfiprintf_r+0x2da>
   8151c:	1c83      	adds	r3, r0, #2
   8151e:	f10c 0c08 	add.w	ip, ip, #8
   81522:	4608      	mov	r0, r1
   81524:	3d10      	subs	r5, #16
   81526:	2d10      	cmp	r5, #16
   81528:	dd11      	ble.n	8154e <_vfiprintf_r+0x2fe>
   8152a:	1c41      	adds	r1, r0, #1
   8152c:	3210      	adds	r2, #16
   8152e:	2907      	cmp	r1, #7
   81530:	9215      	str	r2, [sp, #84]	; 0x54
   81532:	e88c 0840 	stmia.w	ip, {r6, fp}
   81536:	9114      	str	r1, [sp, #80]	; 0x50
   81538:	ddf0      	ble.n	8151c <_vfiprintf_r+0x2cc>
   8153a:	2a00      	cmp	r2, #0
   8153c:	f040 81e6 	bne.w	8190c <_vfiprintf_r+0x6bc>
   81540:	3d10      	subs	r5, #16
   81542:	2d10      	cmp	r5, #16
   81544:	f04f 0301 	mov.w	r3, #1
   81548:	4610      	mov	r0, r2
   8154a:	46cc      	mov	ip, r9
   8154c:	dced      	bgt.n	8152a <_vfiprintf_r+0x2da>
   8154e:	4631      	mov	r1, r6
   81550:	4666      	mov	r6, ip
   81552:	46a4      	mov	ip, r4
   81554:	462c      	mov	r4, r5
   81556:	460d      	mov	r5, r1
   81558:	4422      	add	r2, r4
   8155a:	2b07      	cmp	r3, #7
   8155c:	9215      	str	r2, [sp, #84]	; 0x54
   8155e:	6035      	str	r5, [r6, #0]
   81560:	6074      	str	r4, [r6, #4]
   81562:	9314      	str	r3, [sp, #80]	; 0x50
   81564:	f300 836d 	bgt.w	81c42 <_vfiprintf_r+0x9f2>
   81568:	3608      	adds	r6, #8
   8156a:	1c59      	adds	r1, r3, #1
   8156c:	e1de      	b.n	8192c <_vfiprintf_r+0x6dc>
   8156e:	f01a 0f20 	tst.w	sl, #32
   81572:	9004      	str	r0, [sp, #16]
   81574:	46ac      	mov	ip, r5
   81576:	f000 808d 	beq.w	81694 <_vfiprintf_r+0x444>
   8157a:	9d08      	ldr	r5, [sp, #32]
   8157c:	1deb      	adds	r3, r5, #7
   8157e:	f023 0307 	bic.w	r3, r3, #7
   81582:	f103 0b08 	add.w	fp, r3, #8
   81586:	e9d3 4500 	ldrd	r4, r5, [r3]
   8158a:	f8cd b020 	str.w	fp, [sp, #32]
   8158e:	2301      	movs	r3, #1
   81590:	e76f      	b.n	81472 <_vfiprintf_r+0x222>
   81592:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81596:	f898 3000 	ldrb.w	r3, [r8]
   8159a:	e6c6      	b.n	8132a <_vfiprintf_r+0xda>
   8159c:	f04a 0a10 	orr.w	sl, sl, #16
   815a0:	f01a 0f20 	tst.w	sl, #32
   815a4:	9004      	str	r0, [sp, #16]
   815a6:	46ac      	mov	ip, r5
   815a8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   815ac:	f000 80c8 	beq.w	81740 <_vfiprintf_r+0x4f0>
   815b0:	9c08      	ldr	r4, [sp, #32]
   815b2:	1de1      	adds	r1, r4, #7
   815b4:	f021 0107 	bic.w	r1, r1, #7
   815b8:	e9d1 2300 	ldrd	r2, r3, [r1]
   815bc:	3108      	adds	r1, #8
   815be:	9108      	str	r1, [sp, #32]
   815c0:	4614      	mov	r4, r2
   815c2:	461d      	mov	r5, r3
   815c4:	2a00      	cmp	r2, #0
   815c6:	f173 0b00 	sbcs.w	fp, r3, #0
   815ca:	f2c0 83ce 	blt.w	81d6a <_vfiprintf_r+0xb1a>
   815ce:	f1bc 0f00 	cmp.w	ip, #0
   815d2:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   815d6:	bfa8      	it	ge
   815d8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   815dc:	ea54 0205 	orrs.w	r2, r4, r5
   815e0:	9007      	str	r0, [sp, #28]
   815e2:	f8cd c014 	str.w	ip, [sp, #20]
   815e6:	f04f 0301 	mov.w	r3, #1
   815ea:	f43f af53 	beq.w	81494 <_vfiprintf_r+0x244>
   815ee:	2b01      	cmp	r3, #1
   815f0:	f000 8319 	beq.w	81c26 <_vfiprintf_r+0x9d6>
   815f4:	2b02      	cmp	r3, #2
   815f6:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   815fa:	f040 824c 	bne.w	81a96 <_vfiprintf_r+0x846>
   815fe:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81602:	4619      	mov	r1, r3
   81604:	f004 000f 	and.w	r0, r4, #15
   81608:	0922      	lsrs	r2, r4, #4
   8160a:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8160e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81612:	092b      	lsrs	r3, r5, #4
   81614:	7008      	strb	r0, [r1, #0]
   81616:	ea52 0003 	orrs.w	r0, r2, r3
   8161a:	460f      	mov	r7, r1
   8161c:	4614      	mov	r4, r2
   8161e:	461d      	mov	r5, r3
   81620:	f101 31ff 	add.w	r1, r1, #4294967295
   81624:	d1ee      	bne.n	81604 <_vfiprintf_r+0x3b4>
   81626:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   8162a:	ebc7 0309 	rsb	r3, r7, r9
   8162e:	9305      	str	r3, [sp, #20]
   81630:	e742      	b.n	814b8 <_vfiprintf_r+0x268>
   81632:	f04a 0a10 	orr.w	sl, sl, #16
   81636:	f01a 0320 	ands.w	r3, sl, #32
   8163a:	9004      	str	r0, [sp, #16]
   8163c:	46ac      	mov	ip, r5
   8163e:	f47f af0c 	bne.w	8145a <_vfiprintf_r+0x20a>
   81642:	f01a 0210 	ands.w	r2, sl, #16
   81646:	f040 8311 	bne.w	81c6c <_vfiprintf_r+0xa1c>
   8164a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8164e:	f000 830d 	beq.w	81c6c <_vfiprintf_r+0xa1c>
   81652:	f8dd b020 	ldr.w	fp, [sp, #32]
   81656:	4613      	mov	r3, r2
   81658:	f8bb 4000 	ldrh.w	r4, [fp]
   8165c:	f10b 0b04 	add.w	fp, fp, #4
   81660:	2500      	movs	r5, #0
   81662:	f8cd b020 	str.w	fp, [sp, #32]
   81666:	e704      	b.n	81472 <_vfiprintf_r+0x222>
   81668:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8166c:	2000      	movs	r0, #0
   8166e:	f818 3b01 	ldrb.w	r3, [r8], #1
   81672:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81676:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   8167a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8167e:	2a09      	cmp	r2, #9
   81680:	d9f5      	bls.n	8166e <_vfiprintf_r+0x41e>
   81682:	e654      	b.n	8132e <_vfiprintf_r+0xde>
   81684:	f04a 0a10 	orr.w	sl, sl, #16
   81688:	f01a 0f20 	tst.w	sl, #32
   8168c:	9004      	str	r0, [sp, #16]
   8168e:	46ac      	mov	ip, r5
   81690:	f47f af73 	bne.w	8157a <_vfiprintf_r+0x32a>
   81694:	f01a 0f10 	tst.w	sl, #16
   81698:	f040 82ef 	bne.w	81c7a <_vfiprintf_r+0xa2a>
   8169c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   816a0:	f000 82eb 	beq.w	81c7a <_vfiprintf_r+0xa2a>
   816a4:	f8dd b020 	ldr.w	fp, [sp, #32]
   816a8:	2500      	movs	r5, #0
   816aa:	f8bb 4000 	ldrh.w	r4, [fp]
   816ae:	f10b 0b04 	add.w	fp, fp, #4
   816b2:	2301      	movs	r3, #1
   816b4:	f8cd b020 	str.w	fp, [sp, #32]
   816b8:	e6db      	b.n	81472 <_vfiprintf_r+0x222>
   816ba:	46ac      	mov	ip, r5
   816bc:	4d51      	ldr	r5, [pc, #324]	; (81804 <_vfiprintf_r+0x5b4>)
   816be:	f01a 0f20 	tst.w	sl, #32
   816c2:	9004      	str	r0, [sp, #16]
   816c4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   816c8:	950a      	str	r5, [sp, #40]	; 0x28
   816ca:	f000 80f0 	beq.w	818ae <_vfiprintf_r+0x65e>
   816ce:	9d08      	ldr	r5, [sp, #32]
   816d0:	1dea      	adds	r2, r5, #7
   816d2:	f022 0207 	bic.w	r2, r2, #7
   816d6:	f102 0b08 	add.w	fp, r2, #8
   816da:	f8cd b020 	str.w	fp, [sp, #32]
   816de:	e9d2 4500 	ldrd	r4, r5, [r2]
   816e2:	f01a 0f01 	tst.w	sl, #1
   816e6:	f000 82aa 	beq.w	81c3e <_vfiprintf_r+0x9ee>
   816ea:	ea54 0b05 	orrs.w	fp, r4, r5
   816ee:	f000 82a6 	beq.w	81c3e <_vfiprintf_r+0x9ee>
   816f2:	2230      	movs	r2, #48	; 0x30
   816f4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   816f8:	f04a 0a02 	orr.w	sl, sl, #2
   816fc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81700:	2302      	movs	r3, #2
   81702:	e6b6      	b.n	81472 <_vfiprintf_r+0x222>
   81704:	9b08      	ldr	r3, [sp, #32]
   81706:	f8dd b020 	ldr.w	fp, [sp, #32]
   8170a:	681b      	ldr	r3, [r3, #0]
   8170c:	2401      	movs	r4, #1
   8170e:	f04f 0500 	mov.w	r5, #0
   81712:	f10b 0b04 	add.w	fp, fp, #4
   81716:	9004      	str	r0, [sp, #16]
   81718:	9403      	str	r4, [sp, #12]
   8171a:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8171e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81722:	f8cd b020 	str.w	fp, [sp, #32]
   81726:	9405      	str	r4, [sp, #20]
   81728:	af16      	add	r7, sp, #88	; 0x58
   8172a:	f04f 0c00 	mov.w	ip, #0
   8172e:	e6d0      	b.n	814d2 <_vfiprintf_r+0x282>
   81730:	f01a 0f20 	tst.w	sl, #32
   81734:	9004      	str	r0, [sp, #16]
   81736:	46ac      	mov	ip, r5
   81738:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8173c:	f47f af38 	bne.w	815b0 <_vfiprintf_r+0x360>
   81740:	f01a 0f10 	tst.w	sl, #16
   81744:	f040 82a7 	bne.w	81c96 <_vfiprintf_r+0xa46>
   81748:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8174c:	f000 82a3 	beq.w	81c96 <_vfiprintf_r+0xa46>
   81750:	f8dd b020 	ldr.w	fp, [sp, #32]
   81754:	f9bb 4000 	ldrsh.w	r4, [fp]
   81758:	f10b 0b04 	add.w	fp, fp, #4
   8175c:	17e5      	asrs	r5, r4, #31
   8175e:	4622      	mov	r2, r4
   81760:	462b      	mov	r3, r5
   81762:	f8cd b020 	str.w	fp, [sp, #32]
   81766:	e72d      	b.n	815c4 <_vfiprintf_r+0x374>
   81768:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   8176c:	f898 3000 	ldrb.w	r3, [r8]
   81770:	e5db      	b.n	8132a <_vfiprintf_r+0xda>
   81772:	f898 3000 	ldrb.w	r3, [r8]
   81776:	4642      	mov	r2, r8
   81778:	2b6c      	cmp	r3, #108	; 0x6c
   8177a:	bf03      	ittte	eq
   8177c:	f108 0801 	addeq.w	r8, r8, #1
   81780:	f04a 0a20 	orreq.w	sl, sl, #32
   81784:	7853      	ldrbeq	r3, [r2, #1]
   81786:	f04a 0a10 	orrne.w	sl, sl, #16
   8178a:	e5ce      	b.n	8132a <_vfiprintf_r+0xda>
   8178c:	f01a 0f20 	tst.w	sl, #32
   81790:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81794:	f000 82f7 	beq.w	81d86 <_vfiprintf_r+0xb36>
   81798:	9c08      	ldr	r4, [sp, #32]
   8179a:	6821      	ldr	r1, [r4, #0]
   8179c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8179e:	17e5      	asrs	r5, r4, #31
   817a0:	462b      	mov	r3, r5
   817a2:	9d08      	ldr	r5, [sp, #32]
   817a4:	4622      	mov	r2, r4
   817a6:	3504      	adds	r5, #4
   817a8:	9508      	str	r5, [sp, #32]
   817aa:	e9c1 2300 	strd	r2, r3, [r1]
   817ae:	e582      	b.n	812b6 <_vfiprintf_r+0x66>
   817b0:	9c08      	ldr	r4, [sp, #32]
   817b2:	46ac      	mov	ip, r5
   817b4:	6827      	ldr	r7, [r4, #0]
   817b6:	f04f 0500 	mov.w	r5, #0
   817ba:	9004      	str	r0, [sp, #16]
   817bc:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   817c0:	3404      	adds	r4, #4
   817c2:	2f00      	cmp	r7, #0
   817c4:	f000 8332 	beq.w	81e2c <_vfiprintf_r+0xbdc>
   817c8:	f1bc 0f00 	cmp.w	ip, #0
   817cc:	4638      	mov	r0, r7
   817ce:	f2c0 8307 	blt.w	81de0 <_vfiprintf_r+0xb90>
   817d2:	4662      	mov	r2, ip
   817d4:	2100      	movs	r1, #0
   817d6:	f8cd c004 	str.w	ip, [sp, #4]
   817da:	f001 fbb1 	bl	82f40 <memchr>
   817de:	f8dd c004 	ldr.w	ip, [sp, #4]
   817e2:	2800      	cmp	r0, #0
   817e4:	f000 833a 	beq.w	81e5c <_vfiprintf_r+0xc0c>
   817e8:	1bc0      	subs	r0, r0, r7
   817ea:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   817ee:	4560      	cmp	r0, ip
   817f0:	bfa8      	it	ge
   817f2:	4660      	movge	r0, ip
   817f4:	9005      	str	r0, [sp, #20]
   817f6:	9408      	str	r4, [sp, #32]
   817f8:	9507      	str	r5, [sp, #28]
   817fa:	f04f 0c00 	mov.w	ip, #0
   817fe:	e65b      	b.n	814b8 <_vfiprintf_r+0x268>
   81800:	00083f98 	.word	0x00083f98
   81804:	00083f58 	.word	0x00083f58
   81808:	9b08      	ldr	r3, [sp, #32]
   8180a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8180e:	9004      	str	r0, [sp, #16]
   81810:	48b2      	ldr	r0, [pc, #712]	; (81adc <_vfiprintf_r+0x88c>)
   81812:	681c      	ldr	r4, [r3, #0]
   81814:	2230      	movs	r2, #48	; 0x30
   81816:	2378      	movs	r3, #120	; 0x78
   81818:	f10b 0b04 	add.w	fp, fp, #4
   8181c:	46ac      	mov	ip, r5
   8181e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81822:	f04a 0a02 	orr.w	sl, sl, #2
   81826:	f8cd b020 	str.w	fp, [sp, #32]
   8182a:	2500      	movs	r5, #0
   8182c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81830:	900a      	str	r0, [sp, #40]	; 0x28
   81832:	2302      	movs	r3, #2
   81834:	e61d      	b.n	81472 <_vfiprintf_r+0x222>
   81836:	f04a 0a20 	orr.w	sl, sl, #32
   8183a:	f898 3000 	ldrb.w	r3, [r8]
   8183e:	e574      	b.n	8132a <_vfiprintf_r+0xda>
   81840:	f8dd b020 	ldr.w	fp, [sp, #32]
   81844:	f8db 0000 	ldr.w	r0, [fp]
   81848:	f10b 0304 	add.w	r3, fp, #4
   8184c:	2800      	cmp	r0, #0
   8184e:	f6ff adf7 	blt.w	81440 <_vfiprintf_r+0x1f0>
   81852:	9308      	str	r3, [sp, #32]
   81854:	f898 3000 	ldrb.w	r3, [r8]
   81858:	e567      	b.n	8132a <_vfiprintf_r+0xda>
   8185a:	f898 3000 	ldrb.w	r3, [r8]
   8185e:	212b      	movs	r1, #43	; 0x2b
   81860:	e563      	b.n	8132a <_vfiprintf_r+0xda>
   81862:	f898 3000 	ldrb.w	r3, [r8]
   81866:	f108 0401 	add.w	r4, r8, #1
   8186a:	2b2a      	cmp	r3, #42	; 0x2a
   8186c:	f000 8305 	beq.w	81e7a <_vfiprintf_r+0xc2a>
   81870:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81874:	2a09      	cmp	r2, #9
   81876:	bf98      	it	ls
   81878:	2500      	movls	r5, #0
   8187a:	f200 82fa 	bhi.w	81e72 <_vfiprintf_r+0xc22>
   8187e:	f814 3b01 	ldrb.w	r3, [r4], #1
   81882:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81886:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8188a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8188e:	2a09      	cmp	r2, #9
   81890:	d9f5      	bls.n	8187e <_vfiprintf_r+0x62e>
   81892:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   81896:	46a0      	mov	r8, r4
   81898:	e549      	b.n	8132e <_vfiprintf_r+0xde>
   8189a:	4c90      	ldr	r4, [pc, #576]	; (81adc <_vfiprintf_r+0x88c>)
   8189c:	f01a 0f20 	tst.w	sl, #32
   818a0:	9004      	str	r0, [sp, #16]
   818a2:	46ac      	mov	ip, r5
   818a4:	940a      	str	r4, [sp, #40]	; 0x28
   818a6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   818aa:	f47f af10 	bne.w	816ce <_vfiprintf_r+0x47e>
   818ae:	f01a 0f10 	tst.w	sl, #16
   818b2:	f040 81ea 	bne.w	81c8a <_vfiprintf_r+0xa3a>
   818b6:	f01a 0f40 	tst.w	sl, #64	; 0x40
   818ba:	f000 81e6 	beq.w	81c8a <_vfiprintf_r+0xa3a>
   818be:	f8dd b020 	ldr.w	fp, [sp, #32]
   818c2:	2500      	movs	r5, #0
   818c4:	f8bb 4000 	ldrh.w	r4, [fp]
   818c8:	f10b 0b04 	add.w	fp, fp, #4
   818cc:	f8cd b020 	str.w	fp, [sp, #32]
   818d0:	e707      	b.n	816e2 <_vfiprintf_r+0x492>
   818d2:	f898 3000 	ldrb.w	r3, [r8]
   818d6:	2900      	cmp	r1, #0
   818d8:	f47f ad27 	bne.w	8132a <_vfiprintf_r+0xda>
   818dc:	2120      	movs	r1, #32
   818de:	e524      	b.n	8132a <_vfiprintf_r+0xda>
   818e0:	f04a 0a01 	orr.w	sl, sl, #1
   818e4:	f898 3000 	ldrb.w	r3, [r8]
   818e8:	e51f      	b.n	8132a <_vfiprintf_r+0xda>
   818ea:	9004      	str	r0, [sp, #16]
   818ec:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   818f0:	2b00      	cmp	r3, #0
   818f2:	f000 80f9 	beq.w	81ae8 <_vfiprintf_r+0x898>
   818f6:	2501      	movs	r5, #1
   818f8:	f04f 0b00 	mov.w	fp, #0
   818fc:	9503      	str	r5, [sp, #12]
   818fe:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81902:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81906:	9505      	str	r5, [sp, #20]
   81908:	af16      	add	r7, sp, #88	; 0x58
   8190a:	e70e      	b.n	8172a <_vfiprintf_r+0x4da>
   8190c:	9806      	ldr	r0, [sp, #24]
   8190e:	9902      	ldr	r1, [sp, #8]
   81910:	aa13      	add	r2, sp, #76	; 0x4c
   81912:	f7ff fc61 	bl	811d8 <__sprint_r.part.0>
   81916:	2800      	cmp	r0, #0
   81918:	f040 80ed 	bne.w	81af6 <_vfiprintf_r+0x8a6>
   8191c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8191e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81920:	1c43      	adds	r3, r0, #1
   81922:	46cc      	mov	ip, r9
   81924:	e5fe      	b.n	81524 <_vfiprintf_r+0x2d4>
   81926:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81928:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8192a:	1c59      	adds	r1, r3, #1
   8192c:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81930:	b168      	cbz	r0, 8194e <_vfiprintf_r+0x6fe>
   81932:	3201      	adds	r2, #1
   81934:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81938:	2301      	movs	r3, #1
   8193a:	2907      	cmp	r1, #7
   8193c:	9215      	str	r2, [sp, #84]	; 0x54
   8193e:	9114      	str	r1, [sp, #80]	; 0x50
   81940:	e886 0009 	stmia.w	r6, {r0, r3}
   81944:	f300 8160 	bgt.w	81c08 <_vfiprintf_r+0x9b8>
   81948:	460b      	mov	r3, r1
   8194a:	3608      	adds	r6, #8
   8194c:	3101      	adds	r1, #1
   8194e:	9c07      	ldr	r4, [sp, #28]
   81950:	b164      	cbz	r4, 8196c <_vfiprintf_r+0x71c>
   81952:	3202      	adds	r2, #2
   81954:	a812      	add	r0, sp, #72	; 0x48
   81956:	2302      	movs	r3, #2
   81958:	2907      	cmp	r1, #7
   8195a:	9215      	str	r2, [sp, #84]	; 0x54
   8195c:	9114      	str	r1, [sp, #80]	; 0x50
   8195e:	e886 0009 	stmia.w	r6, {r0, r3}
   81962:	f300 8157 	bgt.w	81c14 <_vfiprintf_r+0x9c4>
   81966:	460b      	mov	r3, r1
   81968:	3608      	adds	r6, #8
   8196a:	3101      	adds	r1, #1
   8196c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8196e:	2d80      	cmp	r5, #128	; 0x80
   81970:	f000 8101 	beq.w	81b76 <_vfiprintf_r+0x926>
   81974:	9d05      	ldr	r5, [sp, #20]
   81976:	ebc5 040c 	rsb	r4, r5, ip
   8197a:	2c00      	cmp	r4, #0
   8197c:	dd2f      	ble.n	819de <_vfiprintf_r+0x78e>
   8197e:	2c10      	cmp	r4, #16
   81980:	4d57      	ldr	r5, [pc, #348]	; (81ae0 <_vfiprintf_r+0x890>)
   81982:	dd22      	ble.n	819ca <_vfiprintf_r+0x77a>
   81984:	4630      	mov	r0, r6
   81986:	f04f 0b10 	mov.w	fp, #16
   8198a:	462e      	mov	r6, r5
   8198c:	4625      	mov	r5, r4
   8198e:	9c06      	ldr	r4, [sp, #24]
   81990:	e006      	b.n	819a0 <_vfiprintf_r+0x750>
   81992:	f103 0c02 	add.w	ip, r3, #2
   81996:	3008      	adds	r0, #8
   81998:	460b      	mov	r3, r1
   8199a:	3d10      	subs	r5, #16
   8199c:	2d10      	cmp	r5, #16
   8199e:	dd10      	ble.n	819c2 <_vfiprintf_r+0x772>
   819a0:	1c59      	adds	r1, r3, #1
   819a2:	3210      	adds	r2, #16
   819a4:	2907      	cmp	r1, #7
   819a6:	9215      	str	r2, [sp, #84]	; 0x54
   819a8:	e880 0840 	stmia.w	r0, {r6, fp}
   819ac:	9114      	str	r1, [sp, #80]	; 0x50
   819ae:	ddf0      	ble.n	81992 <_vfiprintf_r+0x742>
   819b0:	2a00      	cmp	r2, #0
   819b2:	d163      	bne.n	81a7c <_vfiprintf_r+0x82c>
   819b4:	3d10      	subs	r5, #16
   819b6:	2d10      	cmp	r5, #16
   819b8:	f04f 0c01 	mov.w	ip, #1
   819bc:	4613      	mov	r3, r2
   819be:	4648      	mov	r0, r9
   819c0:	dcee      	bgt.n	819a0 <_vfiprintf_r+0x750>
   819c2:	462c      	mov	r4, r5
   819c4:	4661      	mov	r1, ip
   819c6:	4635      	mov	r5, r6
   819c8:	4606      	mov	r6, r0
   819ca:	4422      	add	r2, r4
   819cc:	2907      	cmp	r1, #7
   819ce:	9215      	str	r2, [sp, #84]	; 0x54
   819d0:	6035      	str	r5, [r6, #0]
   819d2:	6074      	str	r4, [r6, #4]
   819d4:	9114      	str	r1, [sp, #80]	; 0x50
   819d6:	f300 80c1 	bgt.w	81b5c <_vfiprintf_r+0x90c>
   819da:	3608      	adds	r6, #8
   819dc:	3101      	adds	r1, #1
   819de:	9d05      	ldr	r5, [sp, #20]
   819e0:	2907      	cmp	r1, #7
   819e2:	442a      	add	r2, r5
   819e4:	9215      	str	r2, [sp, #84]	; 0x54
   819e6:	6037      	str	r7, [r6, #0]
   819e8:	6075      	str	r5, [r6, #4]
   819ea:	9114      	str	r1, [sp, #80]	; 0x50
   819ec:	f340 80c1 	ble.w	81b72 <_vfiprintf_r+0x922>
   819f0:	2a00      	cmp	r2, #0
   819f2:	f040 8130 	bne.w	81c56 <_vfiprintf_r+0xa06>
   819f6:	9214      	str	r2, [sp, #80]	; 0x50
   819f8:	464e      	mov	r6, r9
   819fa:	f01a 0f04 	tst.w	sl, #4
   819fe:	f000 808b 	beq.w	81b18 <_vfiprintf_r+0x8c8>
   81a02:	9d04      	ldr	r5, [sp, #16]
   81a04:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a08:	ebcb 0405 	rsb	r4, fp, r5
   81a0c:	2c00      	cmp	r4, #0
   81a0e:	f340 8083 	ble.w	81b18 <_vfiprintf_r+0x8c8>
   81a12:	2c10      	cmp	r4, #16
   81a14:	f340 821e 	ble.w	81e54 <_vfiprintf_r+0xc04>
   81a18:	9914      	ldr	r1, [sp, #80]	; 0x50
   81a1a:	4d32      	ldr	r5, [pc, #200]	; (81ae4 <_vfiprintf_r+0x894>)
   81a1c:	2710      	movs	r7, #16
   81a1e:	f8dd a018 	ldr.w	sl, [sp, #24]
   81a22:	f8dd b008 	ldr.w	fp, [sp, #8]
   81a26:	e005      	b.n	81a34 <_vfiprintf_r+0x7e4>
   81a28:	1c88      	adds	r0, r1, #2
   81a2a:	3608      	adds	r6, #8
   81a2c:	4619      	mov	r1, r3
   81a2e:	3c10      	subs	r4, #16
   81a30:	2c10      	cmp	r4, #16
   81a32:	dd10      	ble.n	81a56 <_vfiprintf_r+0x806>
   81a34:	1c4b      	adds	r3, r1, #1
   81a36:	3210      	adds	r2, #16
   81a38:	2b07      	cmp	r3, #7
   81a3a:	9215      	str	r2, [sp, #84]	; 0x54
   81a3c:	e886 00a0 	stmia.w	r6, {r5, r7}
   81a40:	9314      	str	r3, [sp, #80]	; 0x50
   81a42:	ddf1      	ble.n	81a28 <_vfiprintf_r+0x7d8>
   81a44:	2a00      	cmp	r2, #0
   81a46:	d17d      	bne.n	81b44 <_vfiprintf_r+0x8f4>
   81a48:	3c10      	subs	r4, #16
   81a4a:	2c10      	cmp	r4, #16
   81a4c:	f04f 0001 	mov.w	r0, #1
   81a50:	4611      	mov	r1, r2
   81a52:	464e      	mov	r6, r9
   81a54:	dcee      	bgt.n	81a34 <_vfiprintf_r+0x7e4>
   81a56:	4422      	add	r2, r4
   81a58:	2807      	cmp	r0, #7
   81a5a:	9215      	str	r2, [sp, #84]	; 0x54
   81a5c:	6035      	str	r5, [r6, #0]
   81a5e:	6074      	str	r4, [r6, #4]
   81a60:	9014      	str	r0, [sp, #80]	; 0x50
   81a62:	dd59      	ble.n	81b18 <_vfiprintf_r+0x8c8>
   81a64:	2a00      	cmp	r2, #0
   81a66:	d14f      	bne.n	81b08 <_vfiprintf_r+0x8b8>
   81a68:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81a6a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a6e:	9d04      	ldr	r5, [sp, #16]
   81a70:	45ab      	cmp	fp, r5
   81a72:	bfac      	ite	ge
   81a74:	445c      	addge	r4, fp
   81a76:	1964      	addlt	r4, r4, r5
   81a78:	9409      	str	r4, [sp, #36]	; 0x24
   81a7a:	e05e      	b.n	81b3a <_vfiprintf_r+0x8ea>
   81a7c:	4620      	mov	r0, r4
   81a7e:	9902      	ldr	r1, [sp, #8]
   81a80:	aa13      	add	r2, sp, #76	; 0x4c
   81a82:	f7ff fba9 	bl	811d8 <__sprint_r.part.0>
   81a86:	2800      	cmp	r0, #0
   81a88:	d135      	bne.n	81af6 <_vfiprintf_r+0x8a6>
   81a8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81a8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a8e:	f103 0c01 	add.w	ip, r3, #1
   81a92:	4648      	mov	r0, r9
   81a94:	e781      	b.n	8199a <_vfiprintf_r+0x74a>
   81a96:	08e0      	lsrs	r0, r4, #3
   81a98:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81a9c:	f004 0207 	and.w	r2, r4, #7
   81aa0:	08e9      	lsrs	r1, r5, #3
   81aa2:	3230      	adds	r2, #48	; 0x30
   81aa4:	ea50 0b01 	orrs.w	fp, r0, r1
   81aa8:	461f      	mov	r7, r3
   81aaa:	701a      	strb	r2, [r3, #0]
   81aac:	4604      	mov	r4, r0
   81aae:	460d      	mov	r5, r1
   81ab0:	f103 33ff 	add.w	r3, r3, #4294967295
   81ab4:	d1ef      	bne.n	81a96 <_vfiprintf_r+0x846>
   81ab6:	f01a 0f01 	tst.w	sl, #1
   81aba:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81abe:	4639      	mov	r1, r7
   81ac0:	f000 80b9 	beq.w	81c36 <_vfiprintf_r+0x9e6>
   81ac4:	2a30      	cmp	r2, #48	; 0x30
   81ac6:	f43f acf4 	beq.w	814b2 <_vfiprintf_r+0x262>
   81aca:	461f      	mov	r7, r3
   81acc:	ebc7 0509 	rsb	r5, r7, r9
   81ad0:	2330      	movs	r3, #48	; 0x30
   81ad2:	9505      	str	r5, [sp, #20]
   81ad4:	f801 3c01 	strb.w	r3, [r1, #-1]
   81ad8:	e4ee      	b.n	814b8 <_vfiprintf_r+0x268>
   81ada:	bf00      	nop
   81adc:	00083f6c 	.word	0x00083f6c
   81ae0:	00083f88 	.word	0x00083f88
   81ae4:	00083f98 	.word	0x00083f98
   81ae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81aea:	b123      	cbz	r3, 81af6 <_vfiprintf_r+0x8a6>
   81aec:	9806      	ldr	r0, [sp, #24]
   81aee:	9902      	ldr	r1, [sp, #8]
   81af0:	aa13      	add	r2, sp, #76	; 0x4c
   81af2:	f7ff fb71 	bl	811d8 <__sprint_r.part.0>
   81af6:	9c02      	ldr	r4, [sp, #8]
   81af8:	89a3      	ldrh	r3, [r4, #12]
   81afa:	065b      	lsls	r3, r3, #25
   81afc:	f53f ac98 	bmi.w	81430 <_vfiprintf_r+0x1e0>
   81b00:	9809      	ldr	r0, [sp, #36]	; 0x24
   81b02:	b031      	add	sp, #196	; 0xc4
   81b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b08:	9806      	ldr	r0, [sp, #24]
   81b0a:	9902      	ldr	r1, [sp, #8]
   81b0c:	aa13      	add	r2, sp, #76	; 0x4c
   81b0e:	f7ff fb63 	bl	811d8 <__sprint_r.part.0>
   81b12:	2800      	cmp	r0, #0
   81b14:	d1ef      	bne.n	81af6 <_vfiprintf_r+0x8a6>
   81b16:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b18:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81b1a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81b1e:	9d04      	ldr	r5, [sp, #16]
   81b20:	45ab      	cmp	fp, r5
   81b22:	bfac      	ite	ge
   81b24:	445c      	addge	r4, fp
   81b26:	1964      	addlt	r4, r4, r5
   81b28:	9409      	str	r4, [sp, #36]	; 0x24
   81b2a:	b132      	cbz	r2, 81b3a <_vfiprintf_r+0x8ea>
   81b2c:	9806      	ldr	r0, [sp, #24]
   81b2e:	9902      	ldr	r1, [sp, #8]
   81b30:	aa13      	add	r2, sp, #76	; 0x4c
   81b32:	f7ff fb51 	bl	811d8 <__sprint_r.part.0>
   81b36:	2800      	cmp	r0, #0
   81b38:	d1dd      	bne.n	81af6 <_vfiprintf_r+0x8a6>
   81b3a:	2000      	movs	r0, #0
   81b3c:	9014      	str	r0, [sp, #80]	; 0x50
   81b3e:	464e      	mov	r6, r9
   81b40:	f7ff bbb9 	b.w	812b6 <_vfiprintf_r+0x66>
   81b44:	4650      	mov	r0, sl
   81b46:	4659      	mov	r1, fp
   81b48:	aa13      	add	r2, sp, #76	; 0x4c
   81b4a:	f7ff fb45 	bl	811d8 <__sprint_r.part.0>
   81b4e:	2800      	cmp	r0, #0
   81b50:	d1d1      	bne.n	81af6 <_vfiprintf_r+0x8a6>
   81b52:	9914      	ldr	r1, [sp, #80]	; 0x50
   81b54:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b56:	1c48      	adds	r0, r1, #1
   81b58:	464e      	mov	r6, r9
   81b5a:	e768      	b.n	81a2e <_vfiprintf_r+0x7de>
   81b5c:	2a00      	cmp	r2, #0
   81b5e:	f040 80f7 	bne.w	81d50 <_vfiprintf_r+0xb00>
   81b62:	9c05      	ldr	r4, [sp, #20]
   81b64:	2301      	movs	r3, #1
   81b66:	9720      	str	r7, [sp, #128]	; 0x80
   81b68:	9421      	str	r4, [sp, #132]	; 0x84
   81b6a:	9415      	str	r4, [sp, #84]	; 0x54
   81b6c:	4622      	mov	r2, r4
   81b6e:	9314      	str	r3, [sp, #80]	; 0x50
   81b70:	464e      	mov	r6, r9
   81b72:	3608      	adds	r6, #8
   81b74:	e741      	b.n	819fa <_vfiprintf_r+0x7aa>
   81b76:	9d04      	ldr	r5, [sp, #16]
   81b78:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81b7c:	ebcb 0405 	rsb	r4, fp, r5
   81b80:	2c00      	cmp	r4, #0
   81b82:	f77f aef7 	ble.w	81974 <_vfiprintf_r+0x724>
   81b86:	2c10      	cmp	r4, #16
   81b88:	4da6      	ldr	r5, [pc, #664]	; (81e24 <_vfiprintf_r+0xbd4>)
   81b8a:	f340 8170 	ble.w	81e6e <_vfiprintf_r+0xc1e>
   81b8e:	4629      	mov	r1, r5
   81b90:	f04f 0b10 	mov.w	fp, #16
   81b94:	4625      	mov	r5, r4
   81b96:	4664      	mov	r4, ip
   81b98:	46b4      	mov	ip, r6
   81b9a:	460e      	mov	r6, r1
   81b9c:	e006      	b.n	81bac <_vfiprintf_r+0x95c>
   81b9e:	1c98      	adds	r0, r3, #2
   81ba0:	f10c 0c08 	add.w	ip, ip, #8
   81ba4:	460b      	mov	r3, r1
   81ba6:	3d10      	subs	r5, #16
   81ba8:	2d10      	cmp	r5, #16
   81baa:	dd0f      	ble.n	81bcc <_vfiprintf_r+0x97c>
   81bac:	1c59      	adds	r1, r3, #1
   81bae:	3210      	adds	r2, #16
   81bb0:	2907      	cmp	r1, #7
   81bb2:	9215      	str	r2, [sp, #84]	; 0x54
   81bb4:	e88c 0840 	stmia.w	ip, {r6, fp}
   81bb8:	9114      	str	r1, [sp, #80]	; 0x50
   81bba:	ddf0      	ble.n	81b9e <_vfiprintf_r+0x94e>
   81bbc:	b9ba      	cbnz	r2, 81bee <_vfiprintf_r+0x99e>
   81bbe:	3d10      	subs	r5, #16
   81bc0:	2d10      	cmp	r5, #16
   81bc2:	f04f 0001 	mov.w	r0, #1
   81bc6:	4613      	mov	r3, r2
   81bc8:	46cc      	mov	ip, r9
   81bca:	dcef      	bgt.n	81bac <_vfiprintf_r+0x95c>
   81bcc:	4633      	mov	r3, r6
   81bce:	4666      	mov	r6, ip
   81bd0:	46a4      	mov	ip, r4
   81bd2:	462c      	mov	r4, r5
   81bd4:	461d      	mov	r5, r3
   81bd6:	4422      	add	r2, r4
   81bd8:	2807      	cmp	r0, #7
   81bda:	9215      	str	r2, [sp, #84]	; 0x54
   81bdc:	6035      	str	r5, [r6, #0]
   81bde:	6074      	str	r4, [r6, #4]
   81be0:	9014      	str	r0, [sp, #80]	; 0x50
   81be2:	f300 80af 	bgt.w	81d44 <_vfiprintf_r+0xaf4>
   81be6:	3608      	adds	r6, #8
   81be8:	1c41      	adds	r1, r0, #1
   81bea:	4603      	mov	r3, r0
   81bec:	e6c2      	b.n	81974 <_vfiprintf_r+0x724>
   81bee:	9806      	ldr	r0, [sp, #24]
   81bf0:	9902      	ldr	r1, [sp, #8]
   81bf2:	aa13      	add	r2, sp, #76	; 0x4c
   81bf4:	f7ff faf0 	bl	811d8 <__sprint_r.part.0>
   81bf8:	2800      	cmp	r0, #0
   81bfa:	f47f af7c 	bne.w	81af6 <_vfiprintf_r+0x8a6>
   81bfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c00:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c02:	1c58      	adds	r0, r3, #1
   81c04:	46cc      	mov	ip, r9
   81c06:	e7ce      	b.n	81ba6 <_vfiprintf_r+0x956>
   81c08:	2a00      	cmp	r2, #0
   81c0a:	d179      	bne.n	81d00 <_vfiprintf_r+0xab0>
   81c0c:	4619      	mov	r1, r3
   81c0e:	464e      	mov	r6, r9
   81c10:	4613      	mov	r3, r2
   81c12:	e69c      	b.n	8194e <_vfiprintf_r+0x6fe>
   81c14:	2a00      	cmp	r2, #0
   81c16:	f040 8084 	bne.w	81d22 <_vfiprintf_r+0xad2>
   81c1a:	2101      	movs	r1, #1
   81c1c:	4613      	mov	r3, r2
   81c1e:	464e      	mov	r6, r9
   81c20:	e6a4      	b.n	8196c <_vfiprintf_r+0x71c>
   81c22:	464f      	mov	r7, r9
   81c24:	e448      	b.n	814b8 <_vfiprintf_r+0x268>
   81c26:	2d00      	cmp	r5, #0
   81c28:	bf08      	it	eq
   81c2a:	2c0a      	cmpeq	r4, #10
   81c2c:	d246      	bcs.n	81cbc <_vfiprintf_r+0xa6c>
   81c2e:	3430      	adds	r4, #48	; 0x30
   81c30:	af30      	add	r7, sp, #192	; 0xc0
   81c32:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81c36:	ebc7 0309 	rsb	r3, r7, r9
   81c3a:	9305      	str	r3, [sp, #20]
   81c3c:	e43c      	b.n	814b8 <_vfiprintf_r+0x268>
   81c3e:	2302      	movs	r3, #2
   81c40:	e417      	b.n	81472 <_vfiprintf_r+0x222>
   81c42:	2a00      	cmp	r2, #0
   81c44:	f040 80af 	bne.w	81da6 <_vfiprintf_r+0xb56>
   81c48:	4613      	mov	r3, r2
   81c4a:	2101      	movs	r1, #1
   81c4c:	464e      	mov	r6, r9
   81c4e:	e66d      	b.n	8192c <_vfiprintf_r+0x6dc>
   81c50:	4644      	mov	r4, r8
   81c52:	f7ff bb58 	b.w	81306 <_vfiprintf_r+0xb6>
   81c56:	9806      	ldr	r0, [sp, #24]
   81c58:	9902      	ldr	r1, [sp, #8]
   81c5a:	aa13      	add	r2, sp, #76	; 0x4c
   81c5c:	f7ff fabc 	bl	811d8 <__sprint_r.part.0>
   81c60:	2800      	cmp	r0, #0
   81c62:	f47f af48 	bne.w	81af6 <_vfiprintf_r+0x8a6>
   81c66:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c68:	464e      	mov	r6, r9
   81c6a:	e6c6      	b.n	819fa <_vfiprintf_r+0x7aa>
   81c6c:	9d08      	ldr	r5, [sp, #32]
   81c6e:	682c      	ldr	r4, [r5, #0]
   81c70:	3504      	adds	r5, #4
   81c72:	9508      	str	r5, [sp, #32]
   81c74:	2500      	movs	r5, #0
   81c76:	f7ff bbfc 	b.w	81472 <_vfiprintf_r+0x222>
   81c7a:	9d08      	ldr	r5, [sp, #32]
   81c7c:	2301      	movs	r3, #1
   81c7e:	682c      	ldr	r4, [r5, #0]
   81c80:	3504      	adds	r5, #4
   81c82:	9508      	str	r5, [sp, #32]
   81c84:	2500      	movs	r5, #0
   81c86:	f7ff bbf4 	b.w	81472 <_vfiprintf_r+0x222>
   81c8a:	9d08      	ldr	r5, [sp, #32]
   81c8c:	682c      	ldr	r4, [r5, #0]
   81c8e:	3504      	adds	r5, #4
   81c90:	9508      	str	r5, [sp, #32]
   81c92:	2500      	movs	r5, #0
   81c94:	e525      	b.n	816e2 <_vfiprintf_r+0x492>
   81c96:	9d08      	ldr	r5, [sp, #32]
   81c98:	682c      	ldr	r4, [r5, #0]
   81c9a:	3504      	adds	r5, #4
   81c9c:	9508      	str	r5, [sp, #32]
   81c9e:	17e5      	asrs	r5, r4, #31
   81ca0:	4622      	mov	r2, r4
   81ca2:	462b      	mov	r3, r5
   81ca4:	e48e      	b.n	815c4 <_vfiprintf_r+0x374>
   81ca6:	9806      	ldr	r0, [sp, #24]
   81ca8:	9902      	ldr	r1, [sp, #8]
   81caa:	aa13      	add	r2, sp, #76	; 0x4c
   81cac:	f7ff fa94 	bl	811d8 <__sprint_r.part.0>
   81cb0:	2800      	cmp	r0, #0
   81cb2:	f47f af20 	bne.w	81af6 <_vfiprintf_r+0x8a6>
   81cb6:	464e      	mov	r6, r9
   81cb8:	f7ff bb9a 	b.w	813f0 <_vfiprintf_r+0x1a0>
   81cbc:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81cc0:	9603      	str	r6, [sp, #12]
   81cc2:	465e      	mov	r6, fp
   81cc4:	46e3      	mov	fp, ip
   81cc6:	4620      	mov	r0, r4
   81cc8:	4629      	mov	r1, r5
   81cca:	220a      	movs	r2, #10
   81ccc:	2300      	movs	r3, #0
   81cce:	f001 fe2f 	bl	83930 <__aeabi_uldivmod>
   81cd2:	3230      	adds	r2, #48	; 0x30
   81cd4:	7032      	strb	r2, [r6, #0]
   81cd6:	4620      	mov	r0, r4
   81cd8:	4629      	mov	r1, r5
   81cda:	220a      	movs	r2, #10
   81cdc:	2300      	movs	r3, #0
   81cde:	f001 fe27 	bl	83930 <__aeabi_uldivmod>
   81ce2:	4604      	mov	r4, r0
   81ce4:	460d      	mov	r5, r1
   81ce6:	ea54 0005 	orrs.w	r0, r4, r5
   81cea:	4637      	mov	r7, r6
   81cec:	f106 36ff 	add.w	r6, r6, #4294967295
   81cf0:	d1e9      	bne.n	81cc6 <_vfiprintf_r+0xa76>
   81cf2:	ebc7 0309 	rsb	r3, r7, r9
   81cf6:	46dc      	mov	ip, fp
   81cf8:	9e03      	ldr	r6, [sp, #12]
   81cfa:	9305      	str	r3, [sp, #20]
   81cfc:	f7ff bbdc 	b.w	814b8 <_vfiprintf_r+0x268>
   81d00:	9806      	ldr	r0, [sp, #24]
   81d02:	9902      	ldr	r1, [sp, #8]
   81d04:	aa13      	add	r2, sp, #76	; 0x4c
   81d06:	f8cd c004 	str.w	ip, [sp, #4]
   81d0a:	f7ff fa65 	bl	811d8 <__sprint_r.part.0>
   81d0e:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d12:	2800      	cmp	r0, #0
   81d14:	f47f aeef 	bne.w	81af6 <_vfiprintf_r+0x8a6>
   81d18:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d1c:	1c59      	adds	r1, r3, #1
   81d1e:	464e      	mov	r6, r9
   81d20:	e615      	b.n	8194e <_vfiprintf_r+0x6fe>
   81d22:	9806      	ldr	r0, [sp, #24]
   81d24:	9902      	ldr	r1, [sp, #8]
   81d26:	aa13      	add	r2, sp, #76	; 0x4c
   81d28:	f8cd c004 	str.w	ip, [sp, #4]
   81d2c:	f7ff fa54 	bl	811d8 <__sprint_r.part.0>
   81d30:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d34:	2800      	cmp	r0, #0
   81d36:	f47f aede 	bne.w	81af6 <_vfiprintf_r+0x8a6>
   81d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d3e:	1c59      	adds	r1, r3, #1
   81d40:	464e      	mov	r6, r9
   81d42:	e613      	b.n	8196c <_vfiprintf_r+0x71c>
   81d44:	2a00      	cmp	r2, #0
   81d46:	d156      	bne.n	81df6 <_vfiprintf_r+0xba6>
   81d48:	2101      	movs	r1, #1
   81d4a:	4613      	mov	r3, r2
   81d4c:	464e      	mov	r6, r9
   81d4e:	e611      	b.n	81974 <_vfiprintf_r+0x724>
   81d50:	9806      	ldr	r0, [sp, #24]
   81d52:	9902      	ldr	r1, [sp, #8]
   81d54:	aa13      	add	r2, sp, #76	; 0x4c
   81d56:	f7ff fa3f 	bl	811d8 <__sprint_r.part.0>
   81d5a:	2800      	cmp	r0, #0
   81d5c:	f47f aecb 	bne.w	81af6 <_vfiprintf_r+0x8a6>
   81d60:	9914      	ldr	r1, [sp, #80]	; 0x50
   81d62:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d64:	3101      	adds	r1, #1
   81d66:	464e      	mov	r6, r9
   81d68:	e639      	b.n	819de <_vfiprintf_r+0x78e>
   81d6a:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81d6e:	4264      	negs	r4, r4
   81d70:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81d74:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81d78:	f8cd b01c 	str.w	fp, [sp, #28]
   81d7c:	f8cd c014 	str.w	ip, [sp, #20]
   81d80:	2301      	movs	r3, #1
   81d82:	f7ff bb7e 	b.w	81482 <_vfiprintf_r+0x232>
   81d86:	f01a 0f10 	tst.w	sl, #16
   81d8a:	d11d      	bne.n	81dc8 <_vfiprintf_r+0xb78>
   81d8c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81d90:	d058      	beq.n	81e44 <_vfiprintf_r+0xbf4>
   81d92:	9d08      	ldr	r5, [sp, #32]
   81d94:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81d98:	682b      	ldr	r3, [r5, #0]
   81d9a:	3504      	adds	r5, #4
   81d9c:	9508      	str	r5, [sp, #32]
   81d9e:	f8a3 b000 	strh.w	fp, [r3]
   81da2:	f7ff ba88 	b.w	812b6 <_vfiprintf_r+0x66>
   81da6:	9806      	ldr	r0, [sp, #24]
   81da8:	9902      	ldr	r1, [sp, #8]
   81daa:	aa13      	add	r2, sp, #76	; 0x4c
   81dac:	f8cd c004 	str.w	ip, [sp, #4]
   81db0:	f7ff fa12 	bl	811d8 <__sprint_r.part.0>
   81db4:	f8dd c004 	ldr.w	ip, [sp, #4]
   81db8:	2800      	cmp	r0, #0
   81dba:	f47f ae9c 	bne.w	81af6 <_vfiprintf_r+0x8a6>
   81dbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81dc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81dc2:	1c59      	adds	r1, r3, #1
   81dc4:	464e      	mov	r6, r9
   81dc6:	e5b1      	b.n	8192c <_vfiprintf_r+0x6dc>
   81dc8:	f8dd b020 	ldr.w	fp, [sp, #32]
   81dcc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81dce:	f8db 3000 	ldr.w	r3, [fp]
   81dd2:	f10b 0b04 	add.w	fp, fp, #4
   81dd6:	f8cd b020 	str.w	fp, [sp, #32]
   81dda:	601c      	str	r4, [r3, #0]
   81ddc:	f7ff ba6b 	b.w	812b6 <_vfiprintf_r+0x66>
   81de0:	9408      	str	r4, [sp, #32]
   81de2:	f7ff f9c9 	bl	81178 <strlen>
   81de6:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81dea:	9005      	str	r0, [sp, #20]
   81dec:	9407      	str	r4, [sp, #28]
   81dee:	f04f 0c00 	mov.w	ip, #0
   81df2:	f7ff bb61 	b.w	814b8 <_vfiprintf_r+0x268>
   81df6:	9806      	ldr	r0, [sp, #24]
   81df8:	9902      	ldr	r1, [sp, #8]
   81dfa:	aa13      	add	r2, sp, #76	; 0x4c
   81dfc:	f8cd c004 	str.w	ip, [sp, #4]
   81e00:	f7ff f9ea 	bl	811d8 <__sprint_r.part.0>
   81e04:	f8dd c004 	ldr.w	ip, [sp, #4]
   81e08:	2800      	cmp	r0, #0
   81e0a:	f47f ae74 	bne.w	81af6 <_vfiprintf_r+0x8a6>
   81e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e10:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e12:	1c59      	adds	r1, r3, #1
   81e14:	464e      	mov	r6, r9
   81e16:	e5ad      	b.n	81974 <_vfiprintf_r+0x724>
   81e18:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e1c:	3301      	adds	r3, #1
   81e1e:	4d02      	ldr	r5, [pc, #8]	; (81e28 <_vfiprintf_r+0xbd8>)
   81e20:	f7ff bb9a 	b.w	81558 <_vfiprintf_r+0x308>
   81e24:	00083f88 	.word	0x00083f88
   81e28:	00083f98 	.word	0x00083f98
   81e2c:	f1bc 0f06 	cmp.w	ip, #6
   81e30:	bf34      	ite	cc
   81e32:	4663      	movcc	r3, ip
   81e34:	2306      	movcs	r3, #6
   81e36:	9408      	str	r4, [sp, #32]
   81e38:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81e3c:	9305      	str	r3, [sp, #20]
   81e3e:	9403      	str	r4, [sp, #12]
   81e40:	4f16      	ldr	r7, [pc, #88]	; (81e9c <_vfiprintf_r+0xc4c>)
   81e42:	e472      	b.n	8172a <_vfiprintf_r+0x4da>
   81e44:	9c08      	ldr	r4, [sp, #32]
   81e46:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81e48:	6823      	ldr	r3, [r4, #0]
   81e4a:	3404      	adds	r4, #4
   81e4c:	9408      	str	r4, [sp, #32]
   81e4e:	601d      	str	r5, [r3, #0]
   81e50:	f7ff ba31 	b.w	812b6 <_vfiprintf_r+0x66>
   81e54:	9814      	ldr	r0, [sp, #80]	; 0x50
   81e56:	4d12      	ldr	r5, [pc, #72]	; (81ea0 <_vfiprintf_r+0xc50>)
   81e58:	3001      	adds	r0, #1
   81e5a:	e5fc      	b.n	81a56 <_vfiprintf_r+0x806>
   81e5c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81e60:	f8cd c014 	str.w	ip, [sp, #20]
   81e64:	9507      	str	r5, [sp, #28]
   81e66:	9408      	str	r4, [sp, #32]
   81e68:	4684      	mov	ip, r0
   81e6a:	f7ff bb25 	b.w	814b8 <_vfiprintf_r+0x268>
   81e6e:	4608      	mov	r0, r1
   81e70:	e6b1      	b.n	81bd6 <_vfiprintf_r+0x986>
   81e72:	46a0      	mov	r8, r4
   81e74:	2500      	movs	r5, #0
   81e76:	f7ff ba5a 	b.w	8132e <_vfiprintf_r+0xde>
   81e7a:	f8dd b020 	ldr.w	fp, [sp, #32]
   81e7e:	f898 3001 	ldrb.w	r3, [r8, #1]
   81e82:	f8db 5000 	ldr.w	r5, [fp]
   81e86:	f10b 0204 	add.w	r2, fp, #4
   81e8a:	2d00      	cmp	r5, #0
   81e8c:	9208      	str	r2, [sp, #32]
   81e8e:	46a0      	mov	r8, r4
   81e90:	f6bf aa4b 	bge.w	8132a <_vfiprintf_r+0xda>
   81e94:	f04f 35ff 	mov.w	r5, #4294967295
   81e98:	f7ff ba47 	b.w	8132a <_vfiprintf_r+0xda>
   81e9c:	00083f80 	.word	0x00083f80
   81ea0:	00083f98 	.word	0x00083f98

00081ea4 <__sbprintf>:
   81ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ea8:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81eaa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81eae:	4688      	mov	r8, r1
   81eb0:	9719      	str	r7, [sp, #100]	; 0x64
   81eb2:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81eb6:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81eba:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81ebe:	9707      	str	r7, [sp, #28]
   81ec0:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81ec4:	ac1a      	add	r4, sp, #104	; 0x68
   81ec6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81eca:	f02a 0a02 	bic.w	sl, sl, #2
   81ece:	2600      	movs	r6, #0
   81ed0:	4669      	mov	r1, sp
   81ed2:	9400      	str	r4, [sp, #0]
   81ed4:	9404      	str	r4, [sp, #16]
   81ed6:	9502      	str	r5, [sp, #8]
   81ed8:	9505      	str	r5, [sp, #20]
   81eda:	f8ad a00c 	strh.w	sl, [sp, #12]
   81ede:	f8ad 900e 	strh.w	r9, [sp, #14]
   81ee2:	9709      	str	r7, [sp, #36]	; 0x24
   81ee4:	9606      	str	r6, [sp, #24]
   81ee6:	4605      	mov	r5, r0
   81ee8:	f7ff f9b2 	bl	81250 <_vfiprintf_r>
   81eec:	1e04      	subs	r4, r0, #0
   81eee:	db07      	blt.n	81f00 <__sbprintf+0x5c>
   81ef0:	4628      	mov	r0, r5
   81ef2:	4669      	mov	r1, sp
   81ef4:	f000 f92a 	bl	8214c <_fflush_r>
   81ef8:	42b0      	cmp	r0, r6
   81efa:	bf18      	it	ne
   81efc:	f04f 34ff 	movne.w	r4, #4294967295
   81f00:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81f04:	065b      	lsls	r3, r3, #25
   81f06:	d505      	bpl.n	81f14 <__sbprintf+0x70>
   81f08:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f10:	f8a8 300c 	strh.w	r3, [r8, #12]
   81f14:	4620      	mov	r0, r4
   81f16:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81f1e:	bf00      	nop

00081f20 <__swsetup_r>:
   81f20:	4b2f      	ldr	r3, [pc, #188]	; (81fe0 <__swsetup_r+0xc0>)
   81f22:	b570      	push	{r4, r5, r6, lr}
   81f24:	4606      	mov	r6, r0
   81f26:	6818      	ldr	r0, [r3, #0]
   81f28:	460c      	mov	r4, r1
   81f2a:	b110      	cbz	r0, 81f32 <__swsetup_r+0x12>
   81f2c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81f2e:	2a00      	cmp	r2, #0
   81f30:	d036      	beq.n	81fa0 <__swsetup_r+0x80>
   81f32:	89a5      	ldrh	r5, [r4, #12]
   81f34:	b2ab      	uxth	r3, r5
   81f36:	0719      	lsls	r1, r3, #28
   81f38:	d50c      	bpl.n	81f54 <__swsetup_r+0x34>
   81f3a:	6922      	ldr	r2, [r4, #16]
   81f3c:	b1aa      	cbz	r2, 81f6a <__swsetup_r+0x4a>
   81f3e:	f013 0101 	ands.w	r1, r3, #1
   81f42:	d01e      	beq.n	81f82 <__swsetup_r+0x62>
   81f44:	6963      	ldr	r3, [r4, #20]
   81f46:	2100      	movs	r1, #0
   81f48:	425b      	negs	r3, r3
   81f4a:	61a3      	str	r3, [r4, #24]
   81f4c:	60a1      	str	r1, [r4, #8]
   81f4e:	b1f2      	cbz	r2, 81f8e <__swsetup_r+0x6e>
   81f50:	2000      	movs	r0, #0
   81f52:	bd70      	pop	{r4, r5, r6, pc}
   81f54:	06da      	lsls	r2, r3, #27
   81f56:	d53a      	bpl.n	81fce <__swsetup_r+0xae>
   81f58:	075b      	lsls	r3, r3, #29
   81f5a:	d424      	bmi.n	81fa6 <__swsetup_r+0x86>
   81f5c:	6922      	ldr	r2, [r4, #16]
   81f5e:	f045 0308 	orr.w	r3, r5, #8
   81f62:	81a3      	strh	r3, [r4, #12]
   81f64:	b29b      	uxth	r3, r3
   81f66:	2a00      	cmp	r2, #0
   81f68:	d1e9      	bne.n	81f3e <__swsetup_r+0x1e>
   81f6a:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81f6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81f72:	d0e4      	beq.n	81f3e <__swsetup_r+0x1e>
   81f74:	4630      	mov	r0, r6
   81f76:	4621      	mov	r1, r4
   81f78:	f000 fcce 	bl	82918 <__smakebuf_r>
   81f7c:	89a3      	ldrh	r3, [r4, #12]
   81f7e:	6922      	ldr	r2, [r4, #16]
   81f80:	e7dd      	b.n	81f3e <__swsetup_r+0x1e>
   81f82:	0798      	lsls	r0, r3, #30
   81f84:	bf58      	it	pl
   81f86:	6961      	ldrpl	r1, [r4, #20]
   81f88:	60a1      	str	r1, [r4, #8]
   81f8a:	2a00      	cmp	r2, #0
   81f8c:	d1e0      	bne.n	81f50 <__swsetup_r+0x30>
   81f8e:	89a3      	ldrh	r3, [r4, #12]
   81f90:	061a      	lsls	r2, r3, #24
   81f92:	d5dd      	bpl.n	81f50 <__swsetup_r+0x30>
   81f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f98:	81a3      	strh	r3, [r4, #12]
   81f9a:	f04f 30ff 	mov.w	r0, #4294967295
   81f9e:	bd70      	pop	{r4, r5, r6, pc}
   81fa0:	f000 f8f0 	bl	82184 <__sinit>
   81fa4:	e7c5      	b.n	81f32 <__swsetup_r+0x12>
   81fa6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81fa8:	b149      	cbz	r1, 81fbe <__swsetup_r+0x9e>
   81faa:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81fae:	4299      	cmp	r1, r3
   81fb0:	d003      	beq.n	81fba <__swsetup_r+0x9a>
   81fb2:	4630      	mov	r0, r6
   81fb4:	f000 fa2a 	bl	8240c <_free_r>
   81fb8:	89a5      	ldrh	r5, [r4, #12]
   81fba:	2300      	movs	r3, #0
   81fbc:	6323      	str	r3, [r4, #48]	; 0x30
   81fbe:	6922      	ldr	r2, [r4, #16]
   81fc0:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81fc4:	2100      	movs	r1, #0
   81fc6:	b2ad      	uxth	r5, r5
   81fc8:	6022      	str	r2, [r4, #0]
   81fca:	6061      	str	r1, [r4, #4]
   81fcc:	e7c7      	b.n	81f5e <__swsetup_r+0x3e>
   81fce:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81fd2:	2309      	movs	r3, #9
   81fd4:	6033      	str	r3, [r6, #0]
   81fd6:	f04f 30ff 	mov.w	r0, #4294967295
   81fda:	81a5      	strh	r5, [r4, #12]
   81fdc:	bd70      	pop	{r4, r5, r6, pc}
   81fde:	bf00      	nop
   81fe0:	20070560 	.word	0x20070560

00081fe4 <register_fini>:
   81fe4:	4b02      	ldr	r3, [pc, #8]	; (81ff0 <register_fini+0xc>)
   81fe6:	b113      	cbz	r3, 81fee <register_fini+0xa>
   81fe8:	4802      	ldr	r0, [pc, #8]	; (81ff4 <register_fini+0x10>)
   81fea:	f000 b805 	b.w	81ff8 <atexit>
   81fee:	4770      	bx	lr
   81ff0:	00000000 	.word	0x00000000
   81ff4:	00082281 	.word	0x00082281

00081ff8 <atexit>:
   81ff8:	4601      	mov	r1, r0
   81ffa:	2000      	movs	r0, #0
   81ffc:	4602      	mov	r2, r0
   81ffe:	4603      	mov	r3, r0
   82000:	f001 bb9a 	b.w	83738 <__register_exitproc>

00082004 <__sflush_r>:
   82004:	898b      	ldrh	r3, [r1, #12]
   82006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8200a:	b29a      	uxth	r2, r3
   8200c:	460d      	mov	r5, r1
   8200e:	0711      	lsls	r1, r2, #28
   82010:	4680      	mov	r8, r0
   82012:	d43c      	bmi.n	8208e <__sflush_r+0x8a>
   82014:	686a      	ldr	r2, [r5, #4]
   82016:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8201a:	2a00      	cmp	r2, #0
   8201c:	81ab      	strh	r3, [r5, #12]
   8201e:	dd59      	ble.n	820d4 <__sflush_r+0xd0>
   82020:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82022:	2c00      	cmp	r4, #0
   82024:	d04b      	beq.n	820be <__sflush_r+0xba>
   82026:	b29b      	uxth	r3, r3
   82028:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   8202c:	2100      	movs	r1, #0
   8202e:	b292      	uxth	r2, r2
   82030:	f8d8 6000 	ldr.w	r6, [r8]
   82034:	f8c8 1000 	str.w	r1, [r8]
   82038:	2a00      	cmp	r2, #0
   8203a:	d04f      	beq.n	820dc <__sflush_r+0xd8>
   8203c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8203e:	075f      	lsls	r7, r3, #29
   82040:	d505      	bpl.n	8204e <__sflush_r+0x4a>
   82042:	6869      	ldr	r1, [r5, #4]
   82044:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82046:	1a52      	subs	r2, r2, r1
   82048:	b10b      	cbz	r3, 8204e <__sflush_r+0x4a>
   8204a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8204c:	1ad2      	subs	r2, r2, r3
   8204e:	4640      	mov	r0, r8
   82050:	69e9      	ldr	r1, [r5, #28]
   82052:	2300      	movs	r3, #0
   82054:	47a0      	blx	r4
   82056:	1c44      	adds	r4, r0, #1
   82058:	d04a      	beq.n	820f0 <__sflush_r+0xec>
   8205a:	89ab      	ldrh	r3, [r5, #12]
   8205c:	692a      	ldr	r2, [r5, #16]
   8205e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82062:	b29b      	uxth	r3, r3
   82064:	2100      	movs	r1, #0
   82066:	602a      	str	r2, [r5, #0]
   82068:	04da      	lsls	r2, r3, #19
   8206a:	81ab      	strh	r3, [r5, #12]
   8206c:	6069      	str	r1, [r5, #4]
   8206e:	d44c      	bmi.n	8210a <__sflush_r+0x106>
   82070:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82072:	f8c8 6000 	str.w	r6, [r8]
   82076:	b311      	cbz	r1, 820be <__sflush_r+0xba>
   82078:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8207c:	4299      	cmp	r1, r3
   8207e:	d002      	beq.n	82086 <__sflush_r+0x82>
   82080:	4640      	mov	r0, r8
   82082:	f000 f9c3 	bl	8240c <_free_r>
   82086:	2000      	movs	r0, #0
   82088:	6328      	str	r0, [r5, #48]	; 0x30
   8208a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8208e:	692e      	ldr	r6, [r5, #16]
   82090:	b1ae      	cbz	r6, 820be <__sflush_r+0xba>
   82092:	0791      	lsls	r1, r2, #30
   82094:	682c      	ldr	r4, [r5, #0]
   82096:	bf0c      	ite	eq
   82098:	696b      	ldreq	r3, [r5, #20]
   8209a:	2300      	movne	r3, #0
   8209c:	602e      	str	r6, [r5, #0]
   8209e:	1ba4      	subs	r4, r4, r6
   820a0:	60ab      	str	r3, [r5, #8]
   820a2:	e00a      	b.n	820ba <__sflush_r+0xb6>
   820a4:	4632      	mov	r2, r6
   820a6:	4623      	mov	r3, r4
   820a8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   820aa:	4640      	mov	r0, r8
   820ac:	69e9      	ldr	r1, [r5, #28]
   820ae:	47b8      	blx	r7
   820b0:	2800      	cmp	r0, #0
   820b2:	ebc0 0404 	rsb	r4, r0, r4
   820b6:	4406      	add	r6, r0
   820b8:	dd04      	ble.n	820c4 <__sflush_r+0xc0>
   820ba:	2c00      	cmp	r4, #0
   820bc:	dcf2      	bgt.n	820a4 <__sflush_r+0xa0>
   820be:	2000      	movs	r0, #0
   820c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820c4:	89ab      	ldrh	r3, [r5, #12]
   820c6:	f04f 30ff 	mov.w	r0, #4294967295
   820ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   820ce:	81ab      	strh	r3, [r5, #12]
   820d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820d4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   820d6:	2a00      	cmp	r2, #0
   820d8:	dca2      	bgt.n	82020 <__sflush_r+0x1c>
   820da:	e7f0      	b.n	820be <__sflush_r+0xba>
   820dc:	2301      	movs	r3, #1
   820de:	4640      	mov	r0, r8
   820e0:	69e9      	ldr	r1, [r5, #28]
   820e2:	47a0      	blx	r4
   820e4:	1c43      	adds	r3, r0, #1
   820e6:	4602      	mov	r2, r0
   820e8:	d01e      	beq.n	82128 <__sflush_r+0x124>
   820ea:	89ab      	ldrh	r3, [r5, #12]
   820ec:	6aac      	ldr	r4, [r5, #40]	; 0x28
   820ee:	e7a6      	b.n	8203e <__sflush_r+0x3a>
   820f0:	f8d8 3000 	ldr.w	r3, [r8]
   820f4:	b95b      	cbnz	r3, 8210e <__sflush_r+0x10a>
   820f6:	89aa      	ldrh	r2, [r5, #12]
   820f8:	6929      	ldr	r1, [r5, #16]
   820fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   820fe:	b292      	uxth	r2, r2
   82100:	606b      	str	r3, [r5, #4]
   82102:	04d3      	lsls	r3, r2, #19
   82104:	81aa      	strh	r2, [r5, #12]
   82106:	6029      	str	r1, [r5, #0]
   82108:	d5b2      	bpl.n	82070 <__sflush_r+0x6c>
   8210a:	6528      	str	r0, [r5, #80]	; 0x50
   8210c:	e7b0      	b.n	82070 <__sflush_r+0x6c>
   8210e:	2b1d      	cmp	r3, #29
   82110:	d001      	beq.n	82116 <__sflush_r+0x112>
   82112:	2b16      	cmp	r3, #22
   82114:	d113      	bne.n	8213e <__sflush_r+0x13a>
   82116:	89a9      	ldrh	r1, [r5, #12]
   82118:	692b      	ldr	r3, [r5, #16]
   8211a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   8211e:	2200      	movs	r2, #0
   82120:	81a9      	strh	r1, [r5, #12]
   82122:	602b      	str	r3, [r5, #0]
   82124:	606a      	str	r2, [r5, #4]
   82126:	e7a3      	b.n	82070 <__sflush_r+0x6c>
   82128:	f8d8 3000 	ldr.w	r3, [r8]
   8212c:	2b00      	cmp	r3, #0
   8212e:	d0dc      	beq.n	820ea <__sflush_r+0xe6>
   82130:	2b1d      	cmp	r3, #29
   82132:	d001      	beq.n	82138 <__sflush_r+0x134>
   82134:	2b16      	cmp	r3, #22
   82136:	d1c5      	bne.n	820c4 <__sflush_r+0xc0>
   82138:	f8c8 6000 	str.w	r6, [r8]
   8213c:	e7bf      	b.n	820be <__sflush_r+0xba>
   8213e:	89ab      	ldrh	r3, [r5, #12]
   82140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82144:	81ab      	strh	r3, [r5, #12]
   82146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8214a:	bf00      	nop

0008214c <_fflush_r>:
   8214c:	b510      	push	{r4, lr}
   8214e:	4604      	mov	r4, r0
   82150:	b082      	sub	sp, #8
   82152:	b108      	cbz	r0, 82158 <_fflush_r+0xc>
   82154:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82156:	b153      	cbz	r3, 8216e <_fflush_r+0x22>
   82158:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   8215c:	b908      	cbnz	r0, 82162 <_fflush_r+0x16>
   8215e:	b002      	add	sp, #8
   82160:	bd10      	pop	{r4, pc}
   82162:	4620      	mov	r0, r4
   82164:	b002      	add	sp, #8
   82166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8216a:	f7ff bf4b 	b.w	82004 <__sflush_r>
   8216e:	9101      	str	r1, [sp, #4]
   82170:	f000 f808 	bl	82184 <__sinit>
   82174:	9901      	ldr	r1, [sp, #4]
   82176:	e7ef      	b.n	82158 <_fflush_r+0xc>

00082178 <_cleanup_r>:
   82178:	4901      	ldr	r1, [pc, #4]	; (82180 <_cleanup_r+0x8>)
   8217a:	f000 bb9f 	b.w	828bc <_fwalk>
   8217e:	bf00      	nop
   82180:	00083885 	.word	0x00083885

00082184 <__sinit>:
   82184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82188:	6b84      	ldr	r4, [r0, #56]	; 0x38
   8218a:	b083      	sub	sp, #12
   8218c:	4607      	mov	r7, r0
   8218e:	2c00      	cmp	r4, #0
   82190:	d165      	bne.n	8225e <__sinit+0xda>
   82192:	687d      	ldr	r5, [r7, #4]
   82194:	4833      	ldr	r0, [pc, #204]	; (82264 <__sinit+0xe0>)
   82196:	2304      	movs	r3, #4
   82198:	2103      	movs	r1, #3
   8219a:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8219e:	63f8      	str	r0, [r7, #60]	; 0x3c
   821a0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   821a4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   821a8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   821ac:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   821b0:	81ab      	strh	r3, [r5, #12]
   821b2:	602c      	str	r4, [r5, #0]
   821b4:	606c      	str	r4, [r5, #4]
   821b6:	60ac      	str	r4, [r5, #8]
   821b8:	666c      	str	r4, [r5, #100]	; 0x64
   821ba:	81ec      	strh	r4, [r5, #14]
   821bc:	612c      	str	r4, [r5, #16]
   821be:	616c      	str	r4, [r5, #20]
   821c0:	61ac      	str	r4, [r5, #24]
   821c2:	4621      	mov	r1, r4
   821c4:	2208      	movs	r2, #8
   821c6:	f7fe ff05 	bl	80fd4 <memset>
   821ca:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82268 <__sinit+0xe4>
   821ce:	68be      	ldr	r6, [r7, #8]
   821d0:	f8df a098 	ldr.w	sl, [pc, #152]	; 8226c <__sinit+0xe8>
   821d4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82270 <__sinit+0xec>
   821d8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82274 <__sinit+0xf0>
   821dc:	2301      	movs	r3, #1
   821de:	2209      	movs	r2, #9
   821e0:	61ed      	str	r5, [r5, #28]
   821e2:	f8c5 b020 	str.w	fp, [r5, #32]
   821e6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   821ea:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   821ee:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   821f2:	4621      	mov	r1, r4
   821f4:	81f3      	strh	r3, [r6, #14]
   821f6:	81b2      	strh	r2, [r6, #12]
   821f8:	6034      	str	r4, [r6, #0]
   821fa:	6074      	str	r4, [r6, #4]
   821fc:	60b4      	str	r4, [r6, #8]
   821fe:	6674      	str	r4, [r6, #100]	; 0x64
   82200:	6134      	str	r4, [r6, #16]
   82202:	6174      	str	r4, [r6, #20]
   82204:	61b4      	str	r4, [r6, #24]
   82206:	2208      	movs	r2, #8
   82208:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   8220c:	9301      	str	r3, [sp, #4]
   8220e:	f7fe fee1 	bl	80fd4 <memset>
   82212:	68fd      	ldr	r5, [r7, #12]
   82214:	2012      	movs	r0, #18
   82216:	2202      	movs	r2, #2
   82218:	61f6      	str	r6, [r6, #28]
   8221a:	f8c6 b020 	str.w	fp, [r6, #32]
   8221e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82222:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82226:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8222a:	4621      	mov	r1, r4
   8222c:	81a8      	strh	r0, [r5, #12]
   8222e:	81ea      	strh	r2, [r5, #14]
   82230:	602c      	str	r4, [r5, #0]
   82232:	606c      	str	r4, [r5, #4]
   82234:	60ac      	str	r4, [r5, #8]
   82236:	666c      	str	r4, [r5, #100]	; 0x64
   82238:	612c      	str	r4, [r5, #16]
   8223a:	616c      	str	r4, [r5, #20]
   8223c:	61ac      	str	r4, [r5, #24]
   8223e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82242:	2208      	movs	r2, #8
   82244:	f7fe fec6 	bl	80fd4 <memset>
   82248:	9b01      	ldr	r3, [sp, #4]
   8224a:	61ed      	str	r5, [r5, #28]
   8224c:	f8c5 b020 	str.w	fp, [r5, #32]
   82250:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82254:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82258:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8225c:	63bb      	str	r3, [r7, #56]	; 0x38
   8225e:	b003      	add	sp, #12
   82260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82264:	00082179 	.word	0x00082179
   82268:	00083579 	.word	0x00083579
   8226c:	0008359d 	.word	0x0008359d
   82270:	000835d5 	.word	0x000835d5
   82274:	000835f5 	.word	0x000835f5

00082278 <__sfp_lock_acquire>:
   82278:	4770      	bx	lr
   8227a:	bf00      	nop

0008227c <__sfp_lock_release>:
   8227c:	4770      	bx	lr
   8227e:	bf00      	nop

00082280 <__libc_fini_array>:
   82280:	b538      	push	{r3, r4, r5, lr}
   82282:	4d09      	ldr	r5, [pc, #36]	; (822a8 <__libc_fini_array+0x28>)
   82284:	4c09      	ldr	r4, [pc, #36]	; (822ac <__libc_fini_array+0x2c>)
   82286:	1b64      	subs	r4, r4, r5
   82288:	10a4      	asrs	r4, r4, #2
   8228a:	bf18      	it	ne
   8228c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82290:	d005      	beq.n	8229e <__libc_fini_array+0x1e>
   82292:	3c01      	subs	r4, #1
   82294:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82298:	4798      	blx	r3
   8229a:	2c00      	cmp	r4, #0
   8229c:	d1f9      	bne.n	82292 <__libc_fini_array+0x12>
   8229e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   822a2:	f001 be8b 	b.w	83fbc <_fini>
   822a6:	bf00      	nop
   822a8:	00083fc8 	.word	0x00083fc8
   822ac:	00083fcc 	.word	0x00083fcc

000822b0 <_fputwc_r>:
   822b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   822b4:	8993      	ldrh	r3, [r2, #12]
   822b6:	460f      	mov	r7, r1
   822b8:	0499      	lsls	r1, r3, #18
   822ba:	b082      	sub	sp, #8
   822bc:	4614      	mov	r4, r2
   822be:	4680      	mov	r8, r0
   822c0:	d406      	bmi.n	822d0 <_fputwc_r+0x20>
   822c2:	6e52      	ldr	r2, [r2, #100]	; 0x64
   822c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   822c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   822cc:	81a3      	strh	r3, [r4, #12]
   822ce:	6662      	str	r2, [r4, #100]	; 0x64
   822d0:	f000 fb1c 	bl	8290c <__locale_mb_cur_max>
   822d4:	2801      	cmp	r0, #1
   822d6:	d03e      	beq.n	82356 <_fputwc_r+0xa6>
   822d8:	463a      	mov	r2, r7
   822da:	4640      	mov	r0, r8
   822dc:	a901      	add	r1, sp, #4
   822de:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   822e2:	f001 f9df 	bl	836a4 <_wcrtomb_r>
   822e6:	1c42      	adds	r2, r0, #1
   822e8:	4606      	mov	r6, r0
   822ea:	d02d      	beq.n	82348 <_fputwc_r+0x98>
   822ec:	2800      	cmp	r0, #0
   822ee:	d03a      	beq.n	82366 <_fputwc_r+0xb6>
   822f0:	f89d 1004 	ldrb.w	r1, [sp, #4]
   822f4:	2500      	movs	r5, #0
   822f6:	e009      	b.n	8230c <_fputwc_r+0x5c>
   822f8:	6823      	ldr	r3, [r4, #0]
   822fa:	7019      	strb	r1, [r3, #0]
   822fc:	6823      	ldr	r3, [r4, #0]
   822fe:	3301      	adds	r3, #1
   82300:	6023      	str	r3, [r4, #0]
   82302:	3501      	adds	r5, #1
   82304:	42b5      	cmp	r5, r6
   82306:	d22e      	bcs.n	82366 <_fputwc_r+0xb6>
   82308:	ab01      	add	r3, sp, #4
   8230a:	5ce9      	ldrb	r1, [r5, r3]
   8230c:	68a3      	ldr	r3, [r4, #8]
   8230e:	3b01      	subs	r3, #1
   82310:	2b00      	cmp	r3, #0
   82312:	60a3      	str	r3, [r4, #8]
   82314:	daf0      	bge.n	822f8 <_fputwc_r+0x48>
   82316:	69a2      	ldr	r2, [r4, #24]
   82318:	4293      	cmp	r3, r2
   8231a:	db06      	blt.n	8232a <_fputwc_r+0x7a>
   8231c:	6823      	ldr	r3, [r4, #0]
   8231e:	7019      	strb	r1, [r3, #0]
   82320:	6823      	ldr	r3, [r4, #0]
   82322:	7819      	ldrb	r1, [r3, #0]
   82324:	3301      	adds	r3, #1
   82326:	290a      	cmp	r1, #10
   82328:	d1ea      	bne.n	82300 <_fputwc_r+0x50>
   8232a:	4640      	mov	r0, r8
   8232c:	4622      	mov	r2, r4
   8232e:	f001 f965 	bl	835fc <__swbuf_r>
   82332:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82336:	4258      	negs	r0, r3
   82338:	4158      	adcs	r0, r3
   8233a:	2800      	cmp	r0, #0
   8233c:	d0e1      	beq.n	82302 <_fputwc_r+0x52>
   8233e:	f04f 30ff 	mov.w	r0, #4294967295
   82342:	b002      	add	sp, #8
   82344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82348:	89a3      	ldrh	r3, [r4, #12]
   8234a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8234e:	81a3      	strh	r3, [r4, #12]
   82350:	b002      	add	sp, #8
   82352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82356:	1e7b      	subs	r3, r7, #1
   82358:	2bfe      	cmp	r3, #254	; 0xfe
   8235a:	d8bd      	bhi.n	822d8 <_fputwc_r+0x28>
   8235c:	b2f9      	uxtb	r1, r7
   8235e:	4606      	mov	r6, r0
   82360:	f88d 1004 	strb.w	r1, [sp, #4]
   82364:	e7c6      	b.n	822f4 <_fputwc_r+0x44>
   82366:	4638      	mov	r0, r7
   82368:	b002      	add	sp, #8
   8236a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8236e:	bf00      	nop

00082370 <_malloc_trim_r>:
   82370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82372:	4d23      	ldr	r5, [pc, #140]	; (82400 <_malloc_trim_r+0x90>)
   82374:	460f      	mov	r7, r1
   82376:	4604      	mov	r4, r0
   82378:	f000 ff08 	bl	8318c <__malloc_lock>
   8237c:	68ab      	ldr	r3, [r5, #8]
   8237e:	685e      	ldr	r6, [r3, #4]
   82380:	f026 0603 	bic.w	r6, r6, #3
   82384:	1bf1      	subs	r1, r6, r7
   82386:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8238a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8238e:	f021 010f 	bic.w	r1, r1, #15
   82392:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82396:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8239a:	db07      	blt.n	823ac <_malloc_trim_r+0x3c>
   8239c:	4620      	mov	r0, r4
   8239e:	2100      	movs	r1, #0
   823a0:	f001 f8d8 	bl	83554 <_sbrk_r>
   823a4:	68ab      	ldr	r3, [r5, #8]
   823a6:	4433      	add	r3, r6
   823a8:	4298      	cmp	r0, r3
   823aa:	d004      	beq.n	823b6 <_malloc_trim_r+0x46>
   823ac:	4620      	mov	r0, r4
   823ae:	f000 feef 	bl	83190 <__malloc_unlock>
   823b2:	2000      	movs	r0, #0
   823b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   823b6:	4620      	mov	r0, r4
   823b8:	4279      	negs	r1, r7
   823ba:	f001 f8cb 	bl	83554 <_sbrk_r>
   823be:	3001      	adds	r0, #1
   823c0:	d00d      	beq.n	823de <_malloc_trim_r+0x6e>
   823c2:	4b10      	ldr	r3, [pc, #64]	; (82404 <_malloc_trim_r+0x94>)
   823c4:	68aa      	ldr	r2, [r5, #8]
   823c6:	6819      	ldr	r1, [r3, #0]
   823c8:	1bf6      	subs	r6, r6, r7
   823ca:	f046 0601 	orr.w	r6, r6, #1
   823ce:	4620      	mov	r0, r4
   823d0:	1bc9      	subs	r1, r1, r7
   823d2:	6056      	str	r6, [r2, #4]
   823d4:	6019      	str	r1, [r3, #0]
   823d6:	f000 fedb 	bl	83190 <__malloc_unlock>
   823da:	2001      	movs	r0, #1
   823dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   823de:	4620      	mov	r0, r4
   823e0:	2100      	movs	r1, #0
   823e2:	f001 f8b7 	bl	83554 <_sbrk_r>
   823e6:	68ab      	ldr	r3, [r5, #8]
   823e8:	1ac2      	subs	r2, r0, r3
   823ea:	2a0f      	cmp	r2, #15
   823ec:	ddde      	ble.n	823ac <_malloc_trim_r+0x3c>
   823ee:	4d06      	ldr	r5, [pc, #24]	; (82408 <_malloc_trim_r+0x98>)
   823f0:	4904      	ldr	r1, [pc, #16]	; (82404 <_malloc_trim_r+0x94>)
   823f2:	682d      	ldr	r5, [r5, #0]
   823f4:	f042 0201 	orr.w	r2, r2, #1
   823f8:	1b40      	subs	r0, r0, r5
   823fa:	605a      	str	r2, [r3, #4]
   823fc:	6008      	str	r0, [r1, #0]
   823fe:	e7d5      	b.n	823ac <_malloc_trim_r+0x3c>
   82400:	20070588 	.word	0x20070588
   82404:	20070af0 	.word	0x20070af0
   82408:	20070994 	.word	0x20070994

0008240c <_free_r>:
   8240c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82410:	460d      	mov	r5, r1
   82412:	4606      	mov	r6, r0
   82414:	2900      	cmp	r1, #0
   82416:	d055      	beq.n	824c4 <_free_r+0xb8>
   82418:	f000 feb8 	bl	8318c <__malloc_lock>
   8241c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82420:	f8df c170 	ldr.w	ip, [pc, #368]	; 82594 <_free_r+0x188>
   82424:	f1a5 0408 	sub.w	r4, r5, #8
   82428:	f021 0301 	bic.w	r3, r1, #1
   8242c:	18e2      	adds	r2, r4, r3
   8242e:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82432:	6857      	ldr	r7, [r2, #4]
   82434:	4290      	cmp	r0, r2
   82436:	f027 0703 	bic.w	r7, r7, #3
   8243a:	d068      	beq.n	8250e <_free_r+0x102>
   8243c:	f011 0101 	ands.w	r1, r1, #1
   82440:	6057      	str	r7, [r2, #4]
   82442:	d032      	beq.n	824aa <_free_r+0x9e>
   82444:	2100      	movs	r1, #0
   82446:	19d0      	adds	r0, r2, r7
   82448:	6840      	ldr	r0, [r0, #4]
   8244a:	07c0      	lsls	r0, r0, #31
   8244c:	d406      	bmi.n	8245c <_free_r+0x50>
   8244e:	443b      	add	r3, r7
   82450:	6890      	ldr	r0, [r2, #8]
   82452:	2900      	cmp	r1, #0
   82454:	d04d      	beq.n	824f2 <_free_r+0xe6>
   82456:	68d2      	ldr	r2, [r2, #12]
   82458:	60c2      	str	r2, [r0, #12]
   8245a:	6090      	str	r0, [r2, #8]
   8245c:	f043 0201 	orr.w	r2, r3, #1
   82460:	6062      	str	r2, [r4, #4]
   82462:	50e3      	str	r3, [r4, r3]
   82464:	b9e1      	cbnz	r1, 824a0 <_free_r+0x94>
   82466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8246a:	d32d      	bcc.n	824c8 <_free_r+0xbc>
   8246c:	0a5a      	lsrs	r2, r3, #9
   8246e:	2a04      	cmp	r2, #4
   82470:	d869      	bhi.n	82546 <_free_r+0x13a>
   82472:	0998      	lsrs	r0, r3, #6
   82474:	3038      	adds	r0, #56	; 0x38
   82476:	0041      	lsls	r1, r0, #1
   82478:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   8247c:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82480:	4944      	ldr	r1, [pc, #272]	; (82594 <_free_r+0x188>)
   82482:	4562      	cmp	r2, ip
   82484:	d065      	beq.n	82552 <_free_r+0x146>
   82486:	6851      	ldr	r1, [r2, #4]
   82488:	f021 0103 	bic.w	r1, r1, #3
   8248c:	428b      	cmp	r3, r1
   8248e:	d202      	bcs.n	82496 <_free_r+0x8a>
   82490:	6892      	ldr	r2, [r2, #8]
   82492:	4594      	cmp	ip, r2
   82494:	d1f7      	bne.n	82486 <_free_r+0x7a>
   82496:	68d3      	ldr	r3, [r2, #12]
   82498:	60e3      	str	r3, [r4, #12]
   8249a:	60a2      	str	r2, [r4, #8]
   8249c:	609c      	str	r4, [r3, #8]
   8249e:	60d4      	str	r4, [r2, #12]
   824a0:	4630      	mov	r0, r6
   824a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   824a6:	f000 be73 	b.w	83190 <__malloc_unlock>
   824aa:	f855 5c08 	ldr.w	r5, [r5, #-8]
   824ae:	f10c 0808 	add.w	r8, ip, #8
   824b2:	1b64      	subs	r4, r4, r5
   824b4:	68a0      	ldr	r0, [r4, #8]
   824b6:	442b      	add	r3, r5
   824b8:	4540      	cmp	r0, r8
   824ba:	d042      	beq.n	82542 <_free_r+0x136>
   824bc:	68e5      	ldr	r5, [r4, #12]
   824be:	60c5      	str	r5, [r0, #12]
   824c0:	60a8      	str	r0, [r5, #8]
   824c2:	e7c0      	b.n	82446 <_free_r+0x3a>
   824c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   824c8:	08db      	lsrs	r3, r3, #3
   824ca:	109a      	asrs	r2, r3, #2
   824cc:	2001      	movs	r0, #1
   824ce:	4090      	lsls	r0, r2
   824d0:	f8dc 1004 	ldr.w	r1, [ip, #4]
   824d4:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   824d8:	689a      	ldr	r2, [r3, #8]
   824da:	4301      	orrs	r1, r0
   824dc:	60a2      	str	r2, [r4, #8]
   824de:	60e3      	str	r3, [r4, #12]
   824e0:	f8cc 1004 	str.w	r1, [ip, #4]
   824e4:	4630      	mov	r0, r6
   824e6:	609c      	str	r4, [r3, #8]
   824e8:	60d4      	str	r4, [r2, #12]
   824ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   824ee:	f000 be4f 	b.w	83190 <__malloc_unlock>
   824f2:	4d29      	ldr	r5, [pc, #164]	; (82598 <_free_r+0x18c>)
   824f4:	42a8      	cmp	r0, r5
   824f6:	d1ae      	bne.n	82456 <_free_r+0x4a>
   824f8:	f043 0201 	orr.w	r2, r3, #1
   824fc:	f8cc 4014 	str.w	r4, [ip, #20]
   82500:	f8cc 4010 	str.w	r4, [ip, #16]
   82504:	60e0      	str	r0, [r4, #12]
   82506:	60a0      	str	r0, [r4, #8]
   82508:	6062      	str	r2, [r4, #4]
   8250a:	50e3      	str	r3, [r4, r3]
   8250c:	e7c8      	b.n	824a0 <_free_r+0x94>
   8250e:	441f      	add	r7, r3
   82510:	07cb      	lsls	r3, r1, #31
   82512:	d407      	bmi.n	82524 <_free_r+0x118>
   82514:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82518:	1a64      	subs	r4, r4, r1
   8251a:	68e3      	ldr	r3, [r4, #12]
   8251c:	68a2      	ldr	r2, [r4, #8]
   8251e:	440f      	add	r7, r1
   82520:	60d3      	str	r3, [r2, #12]
   82522:	609a      	str	r2, [r3, #8]
   82524:	4b1d      	ldr	r3, [pc, #116]	; (8259c <_free_r+0x190>)
   82526:	f047 0201 	orr.w	r2, r7, #1
   8252a:	681b      	ldr	r3, [r3, #0]
   8252c:	6062      	str	r2, [r4, #4]
   8252e:	429f      	cmp	r7, r3
   82530:	f8cc 4008 	str.w	r4, [ip, #8]
   82534:	d3b4      	bcc.n	824a0 <_free_r+0x94>
   82536:	4b1a      	ldr	r3, [pc, #104]	; (825a0 <_free_r+0x194>)
   82538:	4630      	mov	r0, r6
   8253a:	6819      	ldr	r1, [r3, #0]
   8253c:	f7ff ff18 	bl	82370 <_malloc_trim_r>
   82540:	e7ae      	b.n	824a0 <_free_r+0x94>
   82542:	2101      	movs	r1, #1
   82544:	e77f      	b.n	82446 <_free_r+0x3a>
   82546:	2a14      	cmp	r2, #20
   82548:	d80b      	bhi.n	82562 <_free_r+0x156>
   8254a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8254e:	0041      	lsls	r1, r0, #1
   82550:	e792      	b.n	82478 <_free_r+0x6c>
   82552:	1080      	asrs	r0, r0, #2
   82554:	2501      	movs	r5, #1
   82556:	4085      	lsls	r5, r0
   82558:	6848      	ldr	r0, [r1, #4]
   8255a:	4613      	mov	r3, r2
   8255c:	4328      	orrs	r0, r5
   8255e:	6048      	str	r0, [r1, #4]
   82560:	e79a      	b.n	82498 <_free_r+0x8c>
   82562:	2a54      	cmp	r2, #84	; 0x54
   82564:	d803      	bhi.n	8256e <_free_r+0x162>
   82566:	0b18      	lsrs	r0, r3, #12
   82568:	306e      	adds	r0, #110	; 0x6e
   8256a:	0041      	lsls	r1, r0, #1
   8256c:	e784      	b.n	82478 <_free_r+0x6c>
   8256e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82572:	d803      	bhi.n	8257c <_free_r+0x170>
   82574:	0bd8      	lsrs	r0, r3, #15
   82576:	3077      	adds	r0, #119	; 0x77
   82578:	0041      	lsls	r1, r0, #1
   8257a:	e77d      	b.n	82478 <_free_r+0x6c>
   8257c:	f240 5154 	movw	r1, #1364	; 0x554
   82580:	428a      	cmp	r2, r1
   82582:	d803      	bhi.n	8258c <_free_r+0x180>
   82584:	0c98      	lsrs	r0, r3, #18
   82586:	307c      	adds	r0, #124	; 0x7c
   82588:	0041      	lsls	r1, r0, #1
   8258a:	e775      	b.n	82478 <_free_r+0x6c>
   8258c:	21fc      	movs	r1, #252	; 0xfc
   8258e:	207e      	movs	r0, #126	; 0x7e
   82590:	e772      	b.n	82478 <_free_r+0x6c>
   82592:	bf00      	nop
   82594:	20070588 	.word	0x20070588
   82598:	20070590 	.word	0x20070590
   8259c:	20070990 	.word	0x20070990
   825a0:	20070aec 	.word	0x20070aec

000825a4 <__sfvwrite_r>:
   825a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   825a8:	6893      	ldr	r3, [r2, #8]
   825aa:	b083      	sub	sp, #12
   825ac:	4616      	mov	r6, r2
   825ae:	4681      	mov	r9, r0
   825b0:	460c      	mov	r4, r1
   825b2:	b32b      	cbz	r3, 82600 <__sfvwrite_r+0x5c>
   825b4:	898b      	ldrh	r3, [r1, #12]
   825b6:	0719      	lsls	r1, r3, #28
   825b8:	d526      	bpl.n	82608 <__sfvwrite_r+0x64>
   825ba:	6922      	ldr	r2, [r4, #16]
   825bc:	b322      	cbz	r2, 82608 <__sfvwrite_r+0x64>
   825be:	f003 0202 	and.w	r2, r3, #2
   825c2:	b292      	uxth	r2, r2
   825c4:	6835      	ldr	r5, [r6, #0]
   825c6:	2a00      	cmp	r2, #0
   825c8:	d02c      	beq.n	82624 <__sfvwrite_r+0x80>
   825ca:	f04f 0a00 	mov.w	sl, #0
   825ce:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 828b8 <__sfvwrite_r+0x314>
   825d2:	46d0      	mov	r8, sl
   825d4:	45d8      	cmp	r8, fp
   825d6:	bf34      	ite	cc
   825d8:	4643      	movcc	r3, r8
   825da:	465b      	movcs	r3, fp
   825dc:	4652      	mov	r2, sl
   825de:	4648      	mov	r0, r9
   825e0:	f1b8 0f00 	cmp.w	r8, #0
   825e4:	d04f      	beq.n	82686 <__sfvwrite_r+0xe2>
   825e6:	69e1      	ldr	r1, [r4, #28]
   825e8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   825ea:	47b8      	blx	r7
   825ec:	2800      	cmp	r0, #0
   825ee:	dd56      	ble.n	8269e <__sfvwrite_r+0xfa>
   825f0:	68b3      	ldr	r3, [r6, #8]
   825f2:	4482      	add	sl, r0
   825f4:	1a1b      	subs	r3, r3, r0
   825f6:	ebc0 0808 	rsb	r8, r0, r8
   825fa:	60b3      	str	r3, [r6, #8]
   825fc:	2b00      	cmp	r3, #0
   825fe:	d1e9      	bne.n	825d4 <__sfvwrite_r+0x30>
   82600:	2000      	movs	r0, #0
   82602:	b003      	add	sp, #12
   82604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82608:	4648      	mov	r0, r9
   8260a:	4621      	mov	r1, r4
   8260c:	f7ff fc88 	bl	81f20 <__swsetup_r>
   82610:	2800      	cmp	r0, #0
   82612:	f040 8148 	bne.w	828a6 <__sfvwrite_r+0x302>
   82616:	89a3      	ldrh	r3, [r4, #12]
   82618:	6835      	ldr	r5, [r6, #0]
   8261a:	f003 0202 	and.w	r2, r3, #2
   8261e:	b292      	uxth	r2, r2
   82620:	2a00      	cmp	r2, #0
   82622:	d1d2      	bne.n	825ca <__sfvwrite_r+0x26>
   82624:	f013 0a01 	ands.w	sl, r3, #1
   82628:	d142      	bne.n	826b0 <__sfvwrite_r+0x10c>
   8262a:	46d0      	mov	r8, sl
   8262c:	f1b8 0f00 	cmp.w	r8, #0
   82630:	d023      	beq.n	8267a <__sfvwrite_r+0xd6>
   82632:	059a      	lsls	r2, r3, #22
   82634:	68a7      	ldr	r7, [r4, #8]
   82636:	d576      	bpl.n	82726 <__sfvwrite_r+0x182>
   82638:	45b8      	cmp	r8, r7
   8263a:	f0c0 80a4 	bcc.w	82786 <__sfvwrite_r+0x1e2>
   8263e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82642:	f040 80b2 	bne.w	827aa <__sfvwrite_r+0x206>
   82646:	6820      	ldr	r0, [r4, #0]
   82648:	46bb      	mov	fp, r7
   8264a:	4651      	mov	r1, sl
   8264c:	465a      	mov	r2, fp
   8264e:	f000 fd37 	bl	830c0 <memmove>
   82652:	68a2      	ldr	r2, [r4, #8]
   82654:	6821      	ldr	r1, [r4, #0]
   82656:	1bd2      	subs	r2, r2, r7
   82658:	eb01 030b 	add.w	r3, r1, fp
   8265c:	60a2      	str	r2, [r4, #8]
   8265e:	6023      	str	r3, [r4, #0]
   82660:	4642      	mov	r2, r8
   82662:	68b3      	ldr	r3, [r6, #8]
   82664:	4492      	add	sl, r2
   82666:	1a9b      	subs	r3, r3, r2
   82668:	ebc2 0808 	rsb	r8, r2, r8
   8266c:	60b3      	str	r3, [r6, #8]
   8266e:	2b00      	cmp	r3, #0
   82670:	d0c6      	beq.n	82600 <__sfvwrite_r+0x5c>
   82672:	89a3      	ldrh	r3, [r4, #12]
   82674:	f1b8 0f00 	cmp.w	r8, #0
   82678:	d1db      	bne.n	82632 <__sfvwrite_r+0x8e>
   8267a:	f8d5 a000 	ldr.w	sl, [r5]
   8267e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82682:	3508      	adds	r5, #8
   82684:	e7d2      	b.n	8262c <__sfvwrite_r+0x88>
   82686:	f8d5 a000 	ldr.w	sl, [r5]
   8268a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8268e:	3508      	adds	r5, #8
   82690:	e7a0      	b.n	825d4 <__sfvwrite_r+0x30>
   82692:	4648      	mov	r0, r9
   82694:	4621      	mov	r1, r4
   82696:	f7ff fd59 	bl	8214c <_fflush_r>
   8269a:	2800      	cmp	r0, #0
   8269c:	d059      	beq.n	82752 <__sfvwrite_r+0x1ae>
   8269e:	89a3      	ldrh	r3, [r4, #12]
   826a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   826a4:	f04f 30ff 	mov.w	r0, #4294967295
   826a8:	81a3      	strh	r3, [r4, #12]
   826aa:	b003      	add	sp, #12
   826ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   826b0:	4692      	mov	sl, r2
   826b2:	9201      	str	r2, [sp, #4]
   826b4:	4693      	mov	fp, r2
   826b6:	4690      	mov	r8, r2
   826b8:	f1b8 0f00 	cmp.w	r8, #0
   826bc:	d02b      	beq.n	82716 <__sfvwrite_r+0x172>
   826be:	9f01      	ldr	r7, [sp, #4]
   826c0:	2f00      	cmp	r7, #0
   826c2:	d064      	beq.n	8278e <__sfvwrite_r+0x1ea>
   826c4:	6820      	ldr	r0, [r4, #0]
   826c6:	6921      	ldr	r1, [r4, #16]
   826c8:	45c2      	cmp	sl, r8
   826ca:	bf34      	ite	cc
   826cc:	4653      	movcc	r3, sl
   826ce:	4643      	movcs	r3, r8
   826d0:	4288      	cmp	r0, r1
   826d2:	461f      	mov	r7, r3
   826d4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   826d8:	6962      	ldr	r2, [r4, #20]
   826da:	d903      	bls.n	826e4 <__sfvwrite_r+0x140>
   826dc:	4494      	add	ip, r2
   826de:	4563      	cmp	r3, ip
   826e0:	f300 80ae 	bgt.w	82840 <__sfvwrite_r+0x29c>
   826e4:	4293      	cmp	r3, r2
   826e6:	db36      	blt.n	82756 <__sfvwrite_r+0x1b2>
   826e8:	4613      	mov	r3, r2
   826ea:	6a67      	ldr	r7, [r4, #36]	; 0x24
   826ec:	4648      	mov	r0, r9
   826ee:	69e1      	ldr	r1, [r4, #28]
   826f0:	465a      	mov	r2, fp
   826f2:	47b8      	blx	r7
   826f4:	1e07      	subs	r7, r0, #0
   826f6:	ddd2      	ble.n	8269e <__sfvwrite_r+0xfa>
   826f8:	ebba 0a07 	subs.w	sl, sl, r7
   826fc:	d03a      	beq.n	82774 <__sfvwrite_r+0x1d0>
   826fe:	68b3      	ldr	r3, [r6, #8]
   82700:	44bb      	add	fp, r7
   82702:	1bdb      	subs	r3, r3, r7
   82704:	ebc7 0808 	rsb	r8, r7, r8
   82708:	60b3      	str	r3, [r6, #8]
   8270a:	2b00      	cmp	r3, #0
   8270c:	f43f af78 	beq.w	82600 <__sfvwrite_r+0x5c>
   82710:	f1b8 0f00 	cmp.w	r8, #0
   82714:	d1d3      	bne.n	826be <__sfvwrite_r+0x11a>
   82716:	2700      	movs	r7, #0
   82718:	f8d5 b000 	ldr.w	fp, [r5]
   8271c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82720:	9701      	str	r7, [sp, #4]
   82722:	3508      	adds	r5, #8
   82724:	e7c8      	b.n	826b8 <__sfvwrite_r+0x114>
   82726:	6820      	ldr	r0, [r4, #0]
   82728:	6923      	ldr	r3, [r4, #16]
   8272a:	4298      	cmp	r0, r3
   8272c:	d802      	bhi.n	82734 <__sfvwrite_r+0x190>
   8272e:	6963      	ldr	r3, [r4, #20]
   82730:	4598      	cmp	r8, r3
   82732:	d272      	bcs.n	8281a <__sfvwrite_r+0x276>
   82734:	45b8      	cmp	r8, r7
   82736:	bf38      	it	cc
   82738:	4647      	movcc	r7, r8
   8273a:	463a      	mov	r2, r7
   8273c:	4651      	mov	r1, sl
   8273e:	f000 fcbf 	bl	830c0 <memmove>
   82742:	68a3      	ldr	r3, [r4, #8]
   82744:	6822      	ldr	r2, [r4, #0]
   82746:	1bdb      	subs	r3, r3, r7
   82748:	443a      	add	r2, r7
   8274a:	60a3      	str	r3, [r4, #8]
   8274c:	6022      	str	r2, [r4, #0]
   8274e:	2b00      	cmp	r3, #0
   82750:	d09f      	beq.n	82692 <__sfvwrite_r+0xee>
   82752:	463a      	mov	r2, r7
   82754:	e785      	b.n	82662 <__sfvwrite_r+0xbe>
   82756:	461a      	mov	r2, r3
   82758:	4659      	mov	r1, fp
   8275a:	9300      	str	r3, [sp, #0]
   8275c:	f000 fcb0 	bl	830c0 <memmove>
   82760:	9b00      	ldr	r3, [sp, #0]
   82762:	68a1      	ldr	r1, [r4, #8]
   82764:	6822      	ldr	r2, [r4, #0]
   82766:	1ac9      	subs	r1, r1, r3
   82768:	ebba 0a07 	subs.w	sl, sl, r7
   8276c:	4413      	add	r3, r2
   8276e:	60a1      	str	r1, [r4, #8]
   82770:	6023      	str	r3, [r4, #0]
   82772:	d1c4      	bne.n	826fe <__sfvwrite_r+0x15a>
   82774:	4648      	mov	r0, r9
   82776:	4621      	mov	r1, r4
   82778:	f7ff fce8 	bl	8214c <_fflush_r>
   8277c:	2800      	cmp	r0, #0
   8277e:	d18e      	bne.n	8269e <__sfvwrite_r+0xfa>
   82780:	f8cd a004 	str.w	sl, [sp, #4]
   82784:	e7bb      	b.n	826fe <__sfvwrite_r+0x15a>
   82786:	6820      	ldr	r0, [r4, #0]
   82788:	4647      	mov	r7, r8
   8278a:	46c3      	mov	fp, r8
   8278c:	e75d      	b.n	8264a <__sfvwrite_r+0xa6>
   8278e:	4658      	mov	r0, fp
   82790:	210a      	movs	r1, #10
   82792:	4642      	mov	r2, r8
   82794:	f000 fbd4 	bl	82f40 <memchr>
   82798:	2800      	cmp	r0, #0
   8279a:	d07f      	beq.n	8289c <__sfvwrite_r+0x2f8>
   8279c:	f100 0a01 	add.w	sl, r0, #1
   827a0:	2701      	movs	r7, #1
   827a2:	ebcb 0a0a 	rsb	sl, fp, sl
   827a6:	9701      	str	r7, [sp, #4]
   827a8:	e78c      	b.n	826c4 <__sfvwrite_r+0x120>
   827aa:	6822      	ldr	r2, [r4, #0]
   827ac:	6921      	ldr	r1, [r4, #16]
   827ae:	6967      	ldr	r7, [r4, #20]
   827b0:	ebc1 0c02 	rsb	ip, r1, r2
   827b4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   827b8:	f10c 0201 	add.w	r2, ip, #1
   827bc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   827c0:	4442      	add	r2, r8
   827c2:	107f      	asrs	r7, r7, #1
   827c4:	4297      	cmp	r7, r2
   827c6:	bf34      	ite	cc
   827c8:	4617      	movcc	r7, r2
   827ca:	463a      	movcs	r2, r7
   827cc:	055b      	lsls	r3, r3, #21
   827ce:	d54f      	bpl.n	82870 <__sfvwrite_r+0x2cc>
   827d0:	4611      	mov	r1, r2
   827d2:	4648      	mov	r0, r9
   827d4:	f8cd c000 	str.w	ip, [sp]
   827d8:	f000 f916 	bl	82a08 <_malloc_r>
   827dc:	f8dd c000 	ldr.w	ip, [sp]
   827e0:	4683      	mov	fp, r0
   827e2:	2800      	cmp	r0, #0
   827e4:	d062      	beq.n	828ac <__sfvwrite_r+0x308>
   827e6:	4662      	mov	r2, ip
   827e8:	6921      	ldr	r1, [r4, #16]
   827ea:	f8cd c000 	str.w	ip, [sp]
   827ee:	f000 fbf1 	bl	82fd4 <memcpy>
   827f2:	89a2      	ldrh	r2, [r4, #12]
   827f4:	f8dd c000 	ldr.w	ip, [sp]
   827f8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   827fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82800:	81a2      	strh	r2, [r4, #12]
   82802:	eb0b 000c 	add.w	r0, fp, ip
   82806:	ebcc 0207 	rsb	r2, ip, r7
   8280a:	f8c4 b010 	str.w	fp, [r4, #16]
   8280e:	6167      	str	r7, [r4, #20]
   82810:	6020      	str	r0, [r4, #0]
   82812:	60a2      	str	r2, [r4, #8]
   82814:	4647      	mov	r7, r8
   82816:	46c3      	mov	fp, r8
   82818:	e717      	b.n	8264a <__sfvwrite_r+0xa6>
   8281a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8281e:	4590      	cmp	r8, r2
   82820:	bf38      	it	cc
   82822:	4642      	movcc	r2, r8
   82824:	fb92 f2f3 	sdiv	r2, r2, r3
   82828:	fb02 f303 	mul.w	r3, r2, r3
   8282c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8282e:	4648      	mov	r0, r9
   82830:	69e1      	ldr	r1, [r4, #28]
   82832:	4652      	mov	r2, sl
   82834:	47b8      	blx	r7
   82836:	2800      	cmp	r0, #0
   82838:	f77f af31 	ble.w	8269e <__sfvwrite_r+0xfa>
   8283c:	4602      	mov	r2, r0
   8283e:	e710      	b.n	82662 <__sfvwrite_r+0xbe>
   82840:	4662      	mov	r2, ip
   82842:	4659      	mov	r1, fp
   82844:	f8cd c000 	str.w	ip, [sp]
   82848:	f000 fc3a 	bl	830c0 <memmove>
   8284c:	f8dd c000 	ldr.w	ip, [sp]
   82850:	6823      	ldr	r3, [r4, #0]
   82852:	4648      	mov	r0, r9
   82854:	4463      	add	r3, ip
   82856:	6023      	str	r3, [r4, #0]
   82858:	4621      	mov	r1, r4
   8285a:	f8cd c000 	str.w	ip, [sp]
   8285e:	f7ff fc75 	bl	8214c <_fflush_r>
   82862:	f8dd c000 	ldr.w	ip, [sp]
   82866:	2800      	cmp	r0, #0
   82868:	f47f af19 	bne.w	8269e <__sfvwrite_r+0xfa>
   8286c:	4667      	mov	r7, ip
   8286e:	e743      	b.n	826f8 <__sfvwrite_r+0x154>
   82870:	4648      	mov	r0, r9
   82872:	f8cd c000 	str.w	ip, [sp]
   82876:	f000 fc8d 	bl	83194 <_realloc_r>
   8287a:	f8dd c000 	ldr.w	ip, [sp]
   8287e:	4683      	mov	fp, r0
   82880:	2800      	cmp	r0, #0
   82882:	d1be      	bne.n	82802 <__sfvwrite_r+0x25e>
   82884:	4648      	mov	r0, r9
   82886:	6921      	ldr	r1, [r4, #16]
   82888:	f7ff fdc0 	bl	8240c <_free_r>
   8288c:	89a3      	ldrh	r3, [r4, #12]
   8288e:	220c      	movs	r2, #12
   82890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82894:	b29b      	uxth	r3, r3
   82896:	f8c9 2000 	str.w	r2, [r9]
   8289a:	e701      	b.n	826a0 <__sfvwrite_r+0xfc>
   8289c:	2701      	movs	r7, #1
   8289e:	f108 0a01 	add.w	sl, r8, #1
   828a2:	9701      	str	r7, [sp, #4]
   828a4:	e70e      	b.n	826c4 <__sfvwrite_r+0x120>
   828a6:	f04f 30ff 	mov.w	r0, #4294967295
   828aa:	e6aa      	b.n	82602 <__sfvwrite_r+0x5e>
   828ac:	230c      	movs	r3, #12
   828ae:	f8c9 3000 	str.w	r3, [r9]
   828b2:	89a3      	ldrh	r3, [r4, #12]
   828b4:	e6f4      	b.n	826a0 <__sfvwrite_r+0xfc>
   828b6:	bf00      	nop
   828b8:	7ffffc00 	.word	0x7ffffc00

000828bc <_fwalk>:
   828bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828c0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   828c4:	4688      	mov	r8, r1
   828c6:	d019      	beq.n	828fc <_fwalk+0x40>
   828c8:	2600      	movs	r6, #0
   828ca:	687d      	ldr	r5, [r7, #4]
   828cc:	68bc      	ldr	r4, [r7, #8]
   828ce:	3d01      	subs	r5, #1
   828d0:	d40e      	bmi.n	828f0 <_fwalk+0x34>
   828d2:	89a3      	ldrh	r3, [r4, #12]
   828d4:	3d01      	subs	r5, #1
   828d6:	2b01      	cmp	r3, #1
   828d8:	d906      	bls.n	828e8 <_fwalk+0x2c>
   828da:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   828de:	4620      	mov	r0, r4
   828e0:	3301      	adds	r3, #1
   828e2:	d001      	beq.n	828e8 <_fwalk+0x2c>
   828e4:	47c0      	blx	r8
   828e6:	4306      	orrs	r6, r0
   828e8:	1c6b      	adds	r3, r5, #1
   828ea:	f104 0468 	add.w	r4, r4, #104	; 0x68
   828ee:	d1f0      	bne.n	828d2 <_fwalk+0x16>
   828f0:	683f      	ldr	r7, [r7, #0]
   828f2:	2f00      	cmp	r7, #0
   828f4:	d1e9      	bne.n	828ca <_fwalk+0xe>
   828f6:	4630      	mov	r0, r6
   828f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828fc:	463e      	mov	r6, r7
   828fe:	4630      	mov	r0, r6
   82900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082904 <__locale_charset>:
   82904:	4800      	ldr	r0, [pc, #0]	; (82908 <__locale_charset+0x4>)
   82906:	4770      	bx	lr
   82908:	20070564 	.word	0x20070564

0008290c <__locale_mb_cur_max>:
   8290c:	4b01      	ldr	r3, [pc, #4]	; (82914 <__locale_mb_cur_max+0x8>)
   8290e:	6818      	ldr	r0, [r3, #0]
   82910:	4770      	bx	lr
   82912:	bf00      	nop
   82914:	20070584 	.word	0x20070584

00082918 <__smakebuf_r>:
   82918:	b5f0      	push	{r4, r5, r6, r7, lr}
   8291a:	898b      	ldrh	r3, [r1, #12]
   8291c:	b091      	sub	sp, #68	; 0x44
   8291e:	b29a      	uxth	r2, r3
   82920:	0796      	lsls	r6, r2, #30
   82922:	460c      	mov	r4, r1
   82924:	4605      	mov	r5, r0
   82926:	d437      	bmi.n	82998 <__smakebuf_r+0x80>
   82928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8292c:	2900      	cmp	r1, #0
   8292e:	db17      	blt.n	82960 <__smakebuf_r+0x48>
   82930:	aa01      	add	r2, sp, #4
   82932:	f000 ffaf 	bl	83894 <_fstat_r>
   82936:	2800      	cmp	r0, #0
   82938:	db10      	blt.n	8295c <__smakebuf_r+0x44>
   8293a:	9b02      	ldr	r3, [sp, #8]
   8293c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82940:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82944:	424f      	negs	r7, r1
   82946:	414f      	adcs	r7, r1
   82948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8294c:	d02c      	beq.n	829a8 <__smakebuf_r+0x90>
   8294e:	89a3      	ldrh	r3, [r4, #12]
   82950:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82958:	81a3      	strh	r3, [r4, #12]
   8295a:	e00b      	b.n	82974 <__smakebuf_r+0x5c>
   8295c:	89a3      	ldrh	r3, [r4, #12]
   8295e:	b29a      	uxth	r2, r3
   82960:	f012 0f80 	tst.w	r2, #128	; 0x80
   82964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82968:	81a3      	strh	r3, [r4, #12]
   8296a:	bf14      	ite	ne
   8296c:	2640      	movne	r6, #64	; 0x40
   8296e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82972:	2700      	movs	r7, #0
   82974:	4628      	mov	r0, r5
   82976:	4631      	mov	r1, r6
   82978:	f000 f846 	bl	82a08 <_malloc_r>
   8297c:	89a3      	ldrh	r3, [r4, #12]
   8297e:	2800      	cmp	r0, #0
   82980:	d029      	beq.n	829d6 <__smakebuf_r+0xbe>
   82982:	4a1b      	ldr	r2, [pc, #108]	; (829f0 <__smakebuf_r+0xd8>)
   82984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82988:	63ea      	str	r2, [r5, #60]	; 0x3c
   8298a:	81a3      	strh	r3, [r4, #12]
   8298c:	6020      	str	r0, [r4, #0]
   8298e:	6120      	str	r0, [r4, #16]
   82990:	6166      	str	r6, [r4, #20]
   82992:	b9a7      	cbnz	r7, 829be <__smakebuf_r+0xa6>
   82994:	b011      	add	sp, #68	; 0x44
   82996:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82998:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8299c:	2201      	movs	r2, #1
   8299e:	600b      	str	r3, [r1, #0]
   829a0:	610b      	str	r3, [r1, #16]
   829a2:	614a      	str	r2, [r1, #20]
   829a4:	b011      	add	sp, #68	; 0x44
   829a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   829a8:	4a12      	ldr	r2, [pc, #72]	; (829f4 <__smakebuf_r+0xdc>)
   829aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   829ac:	4293      	cmp	r3, r2
   829ae:	d1ce      	bne.n	8294e <__smakebuf_r+0x36>
   829b0:	89a3      	ldrh	r3, [r4, #12]
   829b2:	f44f 6680 	mov.w	r6, #1024	; 0x400
   829b6:	4333      	orrs	r3, r6
   829b8:	81a3      	strh	r3, [r4, #12]
   829ba:	64e6      	str	r6, [r4, #76]	; 0x4c
   829bc:	e7da      	b.n	82974 <__smakebuf_r+0x5c>
   829be:	4628      	mov	r0, r5
   829c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   829c4:	f000 ff7a 	bl	838bc <_isatty_r>
   829c8:	2800      	cmp	r0, #0
   829ca:	d0e3      	beq.n	82994 <__smakebuf_r+0x7c>
   829cc:	89a3      	ldrh	r3, [r4, #12]
   829ce:	f043 0301 	orr.w	r3, r3, #1
   829d2:	81a3      	strh	r3, [r4, #12]
   829d4:	e7de      	b.n	82994 <__smakebuf_r+0x7c>
   829d6:	059a      	lsls	r2, r3, #22
   829d8:	d4dc      	bmi.n	82994 <__smakebuf_r+0x7c>
   829da:	f104 0243 	add.w	r2, r4, #67	; 0x43
   829de:	f043 0302 	orr.w	r3, r3, #2
   829e2:	2101      	movs	r1, #1
   829e4:	81a3      	strh	r3, [r4, #12]
   829e6:	6022      	str	r2, [r4, #0]
   829e8:	6122      	str	r2, [r4, #16]
   829ea:	6161      	str	r1, [r4, #20]
   829ec:	e7d2      	b.n	82994 <__smakebuf_r+0x7c>
   829ee:	bf00      	nop
   829f0:	00082179 	.word	0x00082179
   829f4:	000835d5 	.word	0x000835d5

000829f8 <malloc>:
   829f8:	4b02      	ldr	r3, [pc, #8]	; (82a04 <malloc+0xc>)
   829fa:	4601      	mov	r1, r0
   829fc:	6818      	ldr	r0, [r3, #0]
   829fe:	f000 b803 	b.w	82a08 <_malloc_r>
   82a02:	bf00      	nop
   82a04:	20070560 	.word	0x20070560

00082a08 <_malloc_r>:
   82a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a0c:	f101 050b 	add.w	r5, r1, #11
   82a10:	2d16      	cmp	r5, #22
   82a12:	b083      	sub	sp, #12
   82a14:	4606      	mov	r6, r0
   82a16:	d927      	bls.n	82a68 <_malloc_r+0x60>
   82a18:	f035 0507 	bics.w	r5, r5, #7
   82a1c:	d427      	bmi.n	82a6e <_malloc_r+0x66>
   82a1e:	42a9      	cmp	r1, r5
   82a20:	d825      	bhi.n	82a6e <_malloc_r+0x66>
   82a22:	4630      	mov	r0, r6
   82a24:	f000 fbb2 	bl	8318c <__malloc_lock>
   82a28:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82a2c:	d226      	bcs.n	82a7c <_malloc_r+0x74>
   82a2e:	4fc1      	ldr	r7, [pc, #772]	; (82d34 <_malloc_r+0x32c>)
   82a30:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82a34:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82a38:	68dc      	ldr	r4, [r3, #12]
   82a3a:	429c      	cmp	r4, r3
   82a3c:	f000 81d2 	beq.w	82de4 <_malloc_r+0x3dc>
   82a40:	6863      	ldr	r3, [r4, #4]
   82a42:	68e2      	ldr	r2, [r4, #12]
   82a44:	f023 0303 	bic.w	r3, r3, #3
   82a48:	4423      	add	r3, r4
   82a4a:	6858      	ldr	r0, [r3, #4]
   82a4c:	68a1      	ldr	r1, [r4, #8]
   82a4e:	f040 0501 	orr.w	r5, r0, #1
   82a52:	60ca      	str	r2, [r1, #12]
   82a54:	4630      	mov	r0, r6
   82a56:	6091      	str	r1, [r2, #8]
   82a58:	605d      	str	r5, [r3, #4]
   82a5a:	f000 fb99 	bl	83190 <__malloc_unlock>
   82a5e:	3408      	adds	r4, #8
   82a60:	4620      	mov	r0, r4
   82a62:	b003      	add	sp, #12
   82a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a68:	2510      	movs	r5, #16
   82a6a:	42a9      	cmp	r1, r5
   82a6c:	d9d9      	bls.n	82a22 <_malloc_r+0x1a>
   82a6e:	2400      	movs	r4, #0
   82a70:	230c      	movs	r3, #12
   82a72:	4620      	mov	r0, r4
   82a74:	6033      	str	r3, [r6, #0]
   82a76:	b003      	add	sp, #12
   82a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a7c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82a80:	f000 8089 	beq.w	82b96 <_malloc_r+0x18e>
   82a84:	f1bc 0f04 	cmp.w	ip, #4
   82a88:	f200 8160 	bhi.w	82d4c <_malloc_r+0x344>
   82a8c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82a90:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82a94:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82a98:	4fa6      	ldr	r7, [pc, #664]	; (82d34 <_malloc_r+0x32c>)
   82a9a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82a9e:	68cc      	ldr	r4, [r1, #12]
   82aa0:	42a1      	cmp	r1, r4
   82aa2:	d105      	bne.n	82ab0 <_malloc_r+0xa8>
   82aa4:	e00c      	b.n	82ac0 <_malloc_r+0xb8>
   82aa6:	2b00      	cmp	r3, #0
   82aa8:	da79      	bge.n	82b9e <_malloc_r+0x196>
   82aaa:	68e4      	ldr	r4, [r4, #12]
   82aac:	42a1      	cmp	r1, r4
   82aae:	d007      	beq.n	82ac0 <_malloc_r+0xb8>
   82ab0:	6862      	ldr	r2, [r4, #4]
   82ab2:	f022 0203 	bic.w	r2, r2, #3
   82ab6:	1b53      	subs	r3, r2, r5
   82ab8:	2b0f      	cmp	r3, #15
   82aba:	ddf4      	ble.n	82aa6 <_malloc_r+0x9e>
   82abc:	f10c 3cff 	add.w	ip, ip, #4294967295
   82ac0:	f10c 0c01 	add.w	ip, ip, #1
   82ac4:	4b9b      	ldr	r3, [pc, #620]	; (82d34 <_malloc_r+0x32c>)
   82ac6:	693c      	ldr	r4, [r7, #16]
   82ac8:	f103 0e08 	add.w	lr, r3, #8
   82acc:	4574      	cmp	r4, lr
   82ace:	f000 817e 	beq.w	82dce <_malloc_r+0x3c6>
   82ad2:	6861      	ldr	r1, [r4, #4]
   82ad4:	f021 0103 	bic.w	r1, r1, #3
   82ad8:	1b4a      	subs	r2, r1, r5
   82ada:	2a0f      	cmp	r2, #15
   82adc:	f300 8164 	bgt.w	82da8 <_malloc_r+0x3a0>
   82ae0:	2a00      	cmp	r2, #0
   82ae2:	f8c3 e014 	str.w	lr, [r3, #20]
   82ae6:	f8c3 e010 	str.w	lr, [r3, #16]
   82aea:	da69      	bge.n	82bc0 <_malloc_r+0x1b8>
   82aec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82af0:	f080 813a 	bcs.w	82d68 <_malloc_r+0x360>
   82af4:	08c9      	lsrs	r1, r1, #3
   82af6:	108a      	asrs	r2, r1, #2
   82af8:	f04f 0801 	mov.w	r8, #1
   82afc:	fa08 f802 	lsl.w	r8, r8, r2
   82b00:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82b04:	685a      	ldr	r2, [r3, #4]
   82b06:	6888      	ldr	r0, [r1, #8]
   82b08:	ea48 0202 	orr.w	r2, r8, r2
   82b0c:	60a0      	str	r0, [r4, #8]
   82b0e:	60e1      	str	r1, [r4, #12]
   82b10:	605a      	str	r2, [r3, #4]
   82b12:	608c      	str	r4, [r1, #8]
   82b14:	60c4      	str	r4, [r0, #12]
   82b16:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82b1a:	2001      	movs	r0, #1
   82b1c:	4098      	lsls	r0, r3
   82b1e:	4290      	cmp	r0, r2
   82b20:	d85b      	bhi.n	82bda <_malloc_r+0x1d2>
   82b22:	4202      	tst	r2, r0
   82b24:	d106      	bne.n	82b34 <_malloc_r+0x12c>
   82b26:	f02c 0c03 	bic.w	ip, ip, #3
   82b2a:	0040      	lsls	r0, r0, #1
   82b2c:	4202      	tst	r2, r0
   82b2e:	f10c 0c04 	add.w	ip, ip, #4
   82b32:	d0fa      	beq.n	82b2a <_malloc_r+0x122>
   82b34:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82b38:	4644      	mov	r4, r8
   82b3a:	46e1      	mov	r9, ip
   82b3c:	68e3      	ldr	r3, [r4, #12]
   82b3e:	429c      	cmp	r4, r3
   82b40:	d107      	bne.n	82b52 <_malloc_r+0x14a>
   82b42:	e146      	b.n	82dd2 <_malloc_r+0x3ca>
   82b44:	2a00      	cmp	r2, #0
   82b46:	f280 8157 	bge.w	82df8 <_malloc_r+0x3f0>
   82b4a:	68db      	ldr	r3, [r3, #12]
   82b4c:	429c      	cmp	r4, r3
   82b4e:	f000 8140 	beq.w	82dd2 <_malloc_r+0x3ca>
   82b52:	6859      	ldr	r1, [r3, #4]
   82b54:	f021 0103 	bic.w	r1, r1, #3
   82b58:	1b4a      	subs	r2, r1, r5
   82b5a:	2a0f      	cmp	r2, #15
   82b5c:	ddf2      	ble.n	82b44 <_malloc_r+0x13c>
   82b5e:	461c      	mov	r4, r3
   82b60:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82b64:	68d9      	ldr	r1, [r3, #12]
   82b66:	f045 0901 	orr.w	r9, r5, #1
   82b6a:	f042 0801 	orr.w	r8, r2, #1
   82b6e:	441d      	add	r5, r3
   82b70:	f8c3 9004 	str.w	r9, [r3, #4]
   82b74:	4630      	mov	r0, r6
   82b76:	f8cc 100c 	str.w	r1, [ip, #12]
   82b7a:	f8c1 c008 	str.w	ip, [r1, #8]
   82b7e:	617d      	str	r5, [r7, #20]
   82b80:	613d      	str	r5, [r7, #16]
   82b82:	f8c5 e00c 	str.w	lr, [r5, #12]
   82b86:	f8c5 e008 	str.w	lr, [r5, #8]
   82b8a:	f8c5 8004 	str.w	r8, [r5, #4]
   82b8e:	50aa      	str	r2, [r5, r2]
   82b90:	f000 fafe 	bl	83190 <__malloc_unlock>
   82b94:	e764      	b.n	82a60 <_malloc_r+0x58>
   82b96:	217e      	movs	r1, #126	; 0x7e
   82b98:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82b9c:	e77c      	b.n	82a98 <_malloc_r+0x90>
   82b9e:	4422      	add	r2, r4
   82ba0:	6850      	ldr	r0, [r2, #4]
   82ba2:	68e3      	ldr	r3, [r4, #12]
   82ba4:	68a1      	ldr	r1, [r4, #8]
   82ba6:	f040 0501 	orr.w	r5, r0, #1
   82baa:	60cb      	str	r3, [r1, #12]
   82bac:	4630      	mov	r0, r6
   82bae:	6099      	str	r1, [r3, #8]
   82bb0:	6055      	str	r5, [r2, #4]
   82bb2:	f000 faed 	bl	83190 <__malloc_unlock>
   82bb6:	3408      	adds	r4, #8
   82bb8:	4620      	mov	r0, r4
   82bba:	b003      	add	sp, #12
   82bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bc0:	4421      	add	r1, r4
   82bc2:	684b      	ldr	r3, [r1, #4]
   82bc4:	4630      	mov	r0, r6
   82bc6:	f043 0301 	orr.w	r3, r3, #1
   82bca:	604b      	str	r3, [r1, #4]
   82bcc:	f000 fae0 	bl	83190 <__malloc_unlock>
   82bd0:	3408      	adds	r4, #8
   82bd2:	4620      	mov	r0, r4
   82bd4:	b003      	add	sp, #12
   82bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bda:	68bc      	ldr	r4, [r7, #8]
   82bdc:	6863      	ldr	r3, [r4, #4]
   82bde:	f023 0903 	bic.w	r9, r3, #3
   82be2:	45a9      	cmp	r9, r5
   82be4:	d304      	bcc.n	82bf0 <_malloc_r+0x1e8>
   82be6:	ebc5 0309 	rsb	r3, r5, r9
   82bea:	2b0f      	cmp	r3, #15
   82bec:	f300 8091 	bgt.w	82d12 <_malloc_r+0x30a>
   82bf0:	4b51      	ldr	r3, [pc, #324]	; (82d38 <_malloc_r+0x330>)
   82bf2:	4a52      	ldr	r2, [pc, #328]	; (82d3c <_malloc_r+0x334>)
   82bf4:	6819      	ldr	r1, [r3, #0]
   82bf6:	6813      	ldr	r3, [r2, #0]
   82bf8:	eb05 0a01 	add.w	sl, r5, r1
   82bfc:	3301      	adds	r3, #1
   82bfe:	eb04 0b09 	add.w	fp, r4, r9
   82c02:	f000 8161 	beq.w	82ec8 <_malloc_r+0x4c0>
   82c06:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82c0a:	f10a 0a0f 	add.w	sl, sl, #15
   82c0e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82c12:	f02a 0a0f 	bic.w	sl, sl, #15
   82c16:	4630      	mov	r0, r6
   82c18:	4651      	mov	r1, sl
   82c1a:	9201      	str	r2, [sp, #4]
   82c1c:	f000 fc9a 	bl	83554 <_sbrk_r>
   82c20:	f1b0 3fff 	cmp.w	r0, #4294967295
   82c24:	4680      	mov	r8, r0
   82c26:	9a01      	ldr	r2, [sp, #4]
   82c28:	f000 8101 	beq.w	82e2e <_malloc_r+0x426>
   82c2c:	4583      	cmp	fp, r0
   82c2e:	f200 80fb 	bhi.w	82e28 <_malloc_r+0x420>
   82c32:	f8df c114 	ldr.w	ip, [pc, #276]	; 82d48 <_malloc_r+0x340>
   82c36:	45c3      	cmp	fp, r8
   82c38:	f8dc 3000 	ldr.w	r3, [ip]
   82c3c:	4453      	add	r3, sl
   82c3e:	f8cc 3000 	str.w	r3, [ip]
   82c42:	f000 814a 	beq.w	82eda <_malloc_r+0x4d2>
   82c46:	6812      	ldr	r2, [r2, #0]
   82c48:	493c      	ldr	r1, [pc, #240]	; (82d3c <_malloc_r+0x334>)
   82c4a:	3201      	adds	r2, #1
   82c4c:	bf1b      	ittet	ne
   82c4e:	ebcb 0b08 	rsbne	fp, fp, r8
   82c52:	445b      	addne	r3, fp
   82c54:	f8c1 8000 	streq.w	r8, [r1]
   82c58:	f8cc 3000 	strne.w	r3, [ip]
   82c5c:	f018 0307 	ands.w	r3, r8, #7
   82c60:	f000 8114 	beq.w	82e8c <_malloc_r+0x484>
   82c64:	f1c3 0208 	rsb	r2, r3, #8
   82c68:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82c6c:	4490      	add	r8, r2
   82c6e:	3308      	adds	r3, #8
   82c70:	44c2      	add	sl, r8
   82c72:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82c76:	ebca 0a03 	rsb	sl, sl, r3
   82c7a:	4651      	mov	r1, sl
   82c7c:	4630      	mov	r0, r6
   82c7e:	f8cd c004 	str.w	ip, [sp, #4]
   82c82:	f000 fc67 	bl	83554 <_sbrk_r>
   82c86:	1c43      	adds	r3, r0, #1
   82c88:	f8dd c004 	ldr.w	ip, [sp, #4]
   82c8c:	f000 8135 	beq.w	82efa <_malloc_r+0x4f2>
   82c90:	ebc8 0200 	rsb	r2, r8, r0
   82c94:	4452      	add	r2, sl
   82c96:	f042 0201 	orr.w	r2, r2, #1
   82c9a:	f8dc 3000 	ldr.w	r3, [ip]
   82c9e:	42bc      	cmp	r4, r7
   82ca0:	4453      	add	r3, sl
   82ca2:	f8c7 8008 	str.w	r8, [r7, #8]
   82ca6:	f8cc 3000 	str.w	r3, [ip]
   82caa:	f8c8 2004 	str.w	r2, [r8, #4]
   82cae:	f8df a098 	ldr.w	sl, [pc, #152]	; 82d48 <_malloc_r+0x340>
   82cb2:	d015      	beq.n	82ce0 <_malloc_r+0x2d8>
   82cb4:	f1b9 0f0f 	cmp.w	r9, #15
   82cb8:	f240 80eb 	bls.w	82e92 <_malloc_r+0x48a>
   82cbc:	6861      	ldr	r1, [r4, #4]
   82cbe:	f1a9 020c 	sub.w	r2, r9, #12
   82cc2:	f022 0207 	bic.w	r2, r2, #7
   82cc6:	f001 0101 	and.w	r1, r1, #1
   82cca:	ea42 0e01 	orr.w	lr, r2, r1
   82cce:	2005      	movs	r0, #5
   82cd0:	18a1      	adds	r1, r4, r2
   82cd2:	2a0f      	cmp	r2, #15
   82cd4:	f8c4 e004 	str.w	lr, [r4, #4]
   82cd8:	6048      	str	r0, [r1, #4]
   82cda:	6088      	str	r0, [r1, #8]
   82cdc:	f200 8111 	bhi.w	82f02 <_malloc_r+0x4fa>
   82ce0:	4a17      	ldr	r2, [pc, #92]	; (82d40 <_malloc_r+0x338>)
   82ce2:	68bc      	ldr	r4, [r7, #8]
   82ce4:	6811      	ldr	r1, [r2, #0]
   82ce6:	428b      	cmp	r3, r1
   82ce8:	bf88      	it	hi
   82cea:	6013      	strhi	r3, [r2, #0]
   82cec:	4a15      	ldr	r2, [pc, #84]	; (82d44 <_malloc_r+0x33c>)
   82cee:	6811      	ldr	r1, [r2, #0]
   82cf0:	428b      	cmp	r3, r1
   82cf2:	bf88      	it	hi
   82cf4:	6013      	strhi	r3, [r2, #0]
   82cf6:	6862      	ldr	r2, [r4, #4]
   82cf8:	f022 0203 	bic.w	r2, r2, #3
   82cfc:	4295      	cmp	r5, r2
   82cfe:	ebc5 0302 	rsb	r3, r5, r2
   82d02:	d801      	bhi.n	82d08 <_malloc_r+0x300>
   82d04:	2b0f      	cmp	r3, #15
   82d06:	dc04      	bgt.n	82d12 <_malloc_r+0x30a>
   82d08:	4630      	mov	r0, r6
   82d0a:	f000 fa41 	bl	83190 <__malloc_unlock>
   82d0e:	2400      	movs	r4, #0
   82d10:	e6a6      	b.n	82a60 <_malloc_r+0x58>
   82d12:	f045 0201 	orr.w	r2, r5, #1
   82d16:	f043 0301 	orr.w	r3, r3, #1
   82d1a:	4425      	add	r5, r4
   82d1c:	6062      	str	r2, [r4, #4]
   82d1e:	4630      	mov	r0, r6
   82d20:	60bd      	str	r5, [r7, #8]
   82d22:	606b      	str	r3, [r5, #4]
   82d24:	f000 fa34 	bl	83190 <__malloc_unlock>
   82d28:	3408      	adds	r4, #8
   82d2a:	4620      	mov	r0, r4
   82d2c:	b003      	add	sp, #12
   82d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d32:	bf00      	nop
   82d34:	20070588 	.word	0x20070588
   82d38:	20070aec 	.word	0x20070aec
   82d3c:	20070994 	.word	0x20070994
   82d40:	20070ae8 	.word	0x20070ae8
   82d44:	20070ae4 	.word	0x20070ae4
   82d48:	20070af0 	.word	0x20070af0
   82d4c:	f1bc 0f14 	cmp.w	ip, #20
   82d50:	d961      	bls.n	82e16 <_malloc_r+0x40e>
   82d52:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82d56:	f200 808f 	bhi.w	82e78 <_malloc_r+0x470>
   82d5a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82d5e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82d62:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82d66:	e697      	b.n	82a98 <_malloc_r+0x90>
   82d68:	0a4b      	lsrs	r3, r1, #9
   82d6a:	2b04      	cmp	r3, #4
   82d6c:	d958      	bls.n	82e20 <_malloc_r+0x418>
   82d6e:	2b14      	cmp	r3, #20
   82d70:	f200 80ad 	bhi.w	82ece <_malloc_r+0x4c6>
   82d74:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82d78:	0050      	lsls	r0, r2, #1
   82d7a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82d7e:	6883      	ldr	r3, [r0, #8]
   82d80:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82f3c <_malloc_r+0x534>
   82d84:	4283      	cmp	r3, r0
   82d86:	f000 808a 	beq.w	82e9e <_malloc_r+0x496>
   82d8a:	685a      	ldr	r2, [r3, #4]
   82d8c:	f022 0203 	bic.w	r2, r2, #3
   82d90:	4291      	cmp	r1, r2
   82d92:	d202      	bcs.n	82d9a <_malloc_r+0x392>
   82d94:	689b      	ldr	r3, [r3, #8]
   82d96:	4298      	cmp	r0, r3
   82d98:	d1f7      	bne.n	82d8a <_malloc_r+0x382>
   82d9a:	68d9      	ldr	r1, [r3, #12]
   82d9c:	687a      	ldr	r2, [r7, #4]
   82d9e:	60e1      	str	r1, [r4, #12]
   82da0:	60a3      	str	r3, [r4, #8]
   82da2:	608c      	str	r4, [r1, #8]
   82da4:	60dc      	str	r4, [r3, #12]
   82da6:	e6b6      	b.n	82b16 <_malloc_r+0x10e>
   82da8:	f045 0701 	orr.w	r7, r5, #1
   82dac:	f042 0101 	orr.w	r1, r2, #1
   82db0:	4425      	add	r5, r4
   82db2:	6067      	str	r7, [r4, #4]
   82db4:	4630      	mov	r0, r6
   82db6:	615d      	str	r5, [r3, #20]
   82db8:	611d      	str	r5, [r3, #16]
   82dba:	f8c5 e00c 	str.w	lr, [r5, #12]
   82dbe:	f8c5 e008 	str.w	lr, [r5, #8]
   82dc2:	6069      	str	r1, [r5, #4]
   82dc4:	50aa      	str	r2, [r5, r2]
   82dc6:	3408      	adds	r4, #8
   82dc8:	f000 f9e2 	bl	83190 <__malloc_unlock>
   82dcc:	e648      	b.n	82a60 <_malloc_r+0x58>
   82dce:	685a      	ldr	r2, [r3, #4]
   82dd0:	e6a1      	b.n	82b16 <_malloc_r+0x10e>
   82dd2:	f109 0901 	add.w	r9, r9, #1
   82dd6:	f019 0f03 	tst.w	r9, #3
   82dda:	f104 0408 	add.w	r4, r4, #8
   82dde:	f47f aead 	bne.w	82b3c <_malloc_r+0x134>
   82de2:	e02d      	b.n	82e40 <_malloc_r+0x438>
   82de4:	f104 0308 	add.w	r3, r4, #8
   82de8:	6964      	ldr	r4, [r4, #20]
   82dea:	42a3      	cmp	r3, r4
   82dec:	bf08      	it	eq
   82dee:	f10c 0c02 	addeq.w	ip, ip, #2
   82df2:	f43f ae67 	beq.w	82ac4 <_malloc_r+0xbc>
   82df6:	e623      	b.n	82a40 <_malloc_r+0x38>
   82df8:	4419      	add	r1, r3
   82dfa:	6848      	ldr	r0, [r1, #4]
   82dfc:	461c      	mov	r4, r3
   82dfe:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82e02:	68db      	ldr	r3, [r3, #12]
   82e04:	f040 0501 	orr.w	r5, r0, #1
   82e08:	604d      	str	r5, [r1, #4]
   82e0a:	4630      	mov	r0, r6
   82e0c:	60d3      	str	r3, [r2, #12]
   82e0e:	609a      	str	r2, [r3, #8]
   82e10:	f000 f9be 	bl	83190 <__malloc_unlock>
   82e14:	e624      	b.n	82a60 <_malloc_r+0x58>
   82e16:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82e1a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e1e:	e63b      	b.n	82a98 <_malloc_r+0x90>
   82e20:	098a      	lsrs	r2, r1, #6
   82e22:	3238      	adds	r2, #56	; 0x38
   82e24:	0050      	lsls	r0, r2, #1
   82e26:	e7a8      	b.n	82d7a <_malloc_r+0x372>
   82e28:	42bc      	cmp	r4, r7
   82e2a:	f43f af02 	beq.w	82c32 <_malloc_r+0x22a>
   82e2e:	68bc      	ldr	r4, [r7, #8]
   82e30:	6862      	ldr	r2, [r4, #4]
   82e32:	f022 0203 	bic.w	r2, r2, #3
   82e36:	e761      	b.n	82cfc <_malloc_r+0x2f4>
   82e38:	f8d8 8000 	ldr.w	r8, [r8]
   82e3c:	4598      	cmp	r8, r3
   82e3e:	d17a      	bne.n	82f36 <_malloc_r+0x52e>
   82e40:	f01c 0f03 	tst.w	ip, #3
   82e44:	f1a8 0308 	sub.w	r3, r8, #8
   82e48:	f10c 3cff 	add.w	ip, ip, #4294967295
   82e4c:	d1f4      	bne.n	82e38 <_malloc_r+0x430>
   82e4e:	687b      	ldr	r3, [r7, #4]
   82e50:	ea23 0300 	bic.w	r3, r3, r0
   82e54:	607b      	str	r3, [r7, #4]
   82e56:	0040      	lsls	r0, r0, #1
   82e58:	4298      	cmp	r0, r3
   82e5a:	f63f aebe 	bhi.w	82bda <_malloc_r+0x1d2>
   82e5e:	2800      	cmp	r0, #0
   82e60:	f43f aebb 	beq.w	82bda <_malloc_r+0x1d2>
   82e64:	4203      	tst	r3, r0
   82e66:	46cc      	mov	ip, r9
   82e68:	f47f ae64 	bne.w	82b34 <_malloc_r+0x12c>
   82e6c:	0040      	lsls	r0, r0, #1
   82e6e:	4203      	tst	r3, r0
   82e70:	f10c 0c04 	add.w	ip, ip, #4
   82e74:	d0fa      	beq.n	82e6c <_malloc_r+0x464>
   82e76:	e65d      	b.n	82b34 <_malloc_r+0x12c>
   82e78:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82e7c:	d819      	bhi.n	82eb2 <_malloc_r+0x4aa>
   82e7e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82e82:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82e86:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e8a:	e605      	b.n	82a98 <_malloc_r+0x90>
   82e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82e90:	e6ee      	b.n	82c70 <_malloc_r+0x268>
   82e92:	2301      	movs	r3, #1
   82e94:	f8c8 3004 	str.w	r3, [r8, #4]
   82e98:	4644      	mov	r4, r8
   82e9a:	2200      	movs	r2, #0
   82e9c:	e72e      	b.n	82cfc <_malloc_r+0x2f4>
   82e9e:	1092      	asrs	r2, r2, #2
   82ea0:	2001      	movs	r0, #1
   82ea2:	4090      	lsls	r0, r2
   82ea4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82ea8:	4619      	mov	r1, r3
   82eaa:	4302      	orrs	r2, r0
   82eac:	f8c8 2004 	str.w	r2, [r8, #4]
   82eb0:	e775      	b.n	82d9e <_malloc_r+0x396>
   82eb2:	f240 5354 	movw	r3, #1364	; 0x554
   82eb6:	459c      	cmp	ip, r3
   82eb8:	d81b      	bhi.n	82ef2 <_malloc_r+0x4ea>
   82eba:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82ebe:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82ec2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82ec6:	e5e7      	b.n	82a98 <_malloc_r+0x90>
   82ec8:	f10a 0a10 	add.w	sl, sl, #16
   82ecc:	e6a3      	b.n	82c16 <_malloc_r+0x20e>
   82ece:	2b54      	cmp	r3, #84	; 0x54
   82ed0:	d81f      	bhi.n	82f12 <_malloc_r+0x50a>
   82ed2:	0b0a      	lsrs	r2, r1, #12
   82ed4:	326e      	adds	r2, #110	; 0x6e
   82ed6:	0050      	lsls	r0, r2, #1
   82ed8:	e74f      	b.n	82d7a <_malloc_r+0x372>
   82eda:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82ede:	2900      	cmp	r1, #0
   82ee0:	f47f aeb1 	bne.w	82c46 <_malloc_r+0x23e>
   82ee4:	eb0a 0109 	add.w	r1, sl, r9
   82ee8:	68ba      	ldr	r2, [r7, #8]
   82eea:	f041 0101 	orr.w	r1, r1, #1
   82eee:	6051      	str	r1, [r2, #4]
   82ef0:	e6f6      	b.n	82ce0 <_malloc_r+0x2d8>
   82ef2:	21fc      	movs	r1, #252	; 0xfc
   82ef4:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82ef8:	e5ce      	b.n	82a98 <_malloc_r+0x90>
   82efa:	2201      	movs	r2, #1
   82efc:	f04f 0a00 	mov.w	sl, #0
   82f00:	e6cb      	b.n	82c9a <_malloc_r+0x292>
   82f02:	f104 0108 	add.w	r1, r4, #8
   82f06:	4630      	mov	r0, r6
   82f08:	f7ff fa80 	bl	8240c <_free_r>
   82f0c:	f8da 3000 	ldr.w	r3, [sl]
   82f10:	e6e6      	b.n	82ce0 <_malloc_r+0x2d8>
   82f12:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82f16:	d803      	bhi.n	82f20 <_malloc_r+0x518>
   82f18:	0bca      	lsrs	r2, r1, #15
   82f1a:	3277      	adds	r2, #119	; 0x77
   82f1c:	0050      	lsls	r0, r2, #1
   82f1e:	e72c      	b.n	82d7a <_malloc_r+0x372>
   82f20:	f240 5254 	movw	r2, #1364	; 0x554
   82f24:	4293      	cmp	r3, r2
   82f26:	d803      	bhi.n	82f30 <_malloc_r+0x528>
   82f28:	0c8a      	lsrs	r2, r1, #18
   82f2a:	327c      	adds	r2, #124	; 0x7c
   82f2c:	0050      	lsls	r0, r2, #1
   82f2e:	e724      	b.n	82d7a <_malloc_r+0x372>
   82f30:	20fc      	movs	r0, #252	; 0xfc
   82f32:	227e      	movs	r2, #126	; 0x7e
   82f34:	e721      	b.n	82d7a <_malloc_r+0x372>
   82f36:	687b      	ldr	r3, [r7, #4]
   82f38:	e78d      	b.n	82e56 <_malloc_r+0x44e>
   82f3a:	bf00      	nop
   82f3c:	20070588 	.word	0x20070588

00082f40 <memchr>:
   82f40:	0783      	lsls	r3, r0, #30
   82f42:	b470      	push	{r4, r5, r6}
   82f44:	b2c9      	uxtb	r1, r1
   82f46:	d040      	beq.n	82fca <memchr+0x8a>
   82f48:	1e54      	subs	r4, r2, #1
   82f4a:	b32a      	cbz	r2, 82f98 <memchr+0x58>
   82f4c:	7803      	ldrb	r3, [r0, #0]
   82f4e:	428b      	cmp	r3, r1
   82f50:	d023      	beq.n	82f9a <memchr+0x5a>
   82f52:	1c43      	adds	r3, r0, #1
   82f54:	e004      	b.n	82f60 <memchr+0x20>
   82f56:	b1fc      	cbz	r4, 82f98 <memchr+0x58>
   82f58:	7805      	ldrb	r5, [r0, #0]
   82f5a:	4614      	mov	r4, r2
   82f5c:	428d      	cmp	r5, r1
   82f5e:	d01c      	beq.n	82f9a <memchr+0x5a>
   82f60:	f013 0f03 	tst.w	r3, #3
   82f64:	4618      	mov	r0, r3
   82f66:	f104 32ff 	add.w	r2, r4, #4294967295
   82f6a:	f103 0301 	add.w	r3, r3, #1
   82f6e:	d1f2      	bne.n	82f56 <memchr+0x16>
   82f70:	2c03      	cmp	r4, #3
   82f72:	d814      	bhi.n	82f9e <memchr+0x5e>
   82f74:	1e65      	subs	r5, r4, #1
   82f76:	b354      	cbz	r4, 82fce <memchr+0x8e>
   82f78:	7803      	ldrb	r3, [r0, #0]
   82f7a:	428b      	cmp	r3, r1
   82f7c:	d00d      	beq.n	82f9a <memchr+0x5a>
   82f7e:	1c42      	adds	r2, r0, #1
   82f80:	2300      	movs	r3, #0
   82f82:	e002      	b.n	82f8a <memchr+0x4a>
   82f84:	7804      	ldrb	r4, [r0, #0]
   82f86:	428c      	cmp	r4, r1
   82f88:	d007      	beq.n	82f9a <memchr+0x5a>
   82f8a:	42ab      	cmp	r3, r5
   82f8c:	4610      	mov	r0, r2
   82f8e:	f103 0301 	add.w	r3, r3, #1
   82f92:	f102 0201 	add.w	r2, r2, #1
   82f96:	d1f5      	bne.n	82f84 <memchr+0x44>
   82f98:	2000      	movs	r0, #0
   82f9a:	bc70      	pop	{r4, r5, r6}
   82f9c:	4770      	bx	lr
   82f9e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82fa2:	4603      	mov	r3, r0
   82fa4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82fa8:	681a      	ldr	r2, [r3, #0]
   82faa:	4618      	mov	r0, r3
   82fac:	4072      	eors	r2, r6
   82fae:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   82fb2:	ea25 0202 	bic.w	r2, r5, r2
   82fb6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   82fba:	f103 0304 	add.w	r3, r3, #4
   82fbe:	d1d9      	bne.n	82f74 <memchr+0x34>
   82fc0:	3c04      	subs	r4, #4
   82fc2:	2c03      	cmp	r4, #3
   82fc4:	4618      	mov	r0, r3
   82fc6:	d8ef      	bhi.n	82fa8 <memchr+0x68>
   82fc8:	e7d4      	b.n	82f74 <memchr+0x34>
   82fca:	4614      	mov	r4, r2
   82fcc:	e7d0      	b.n	82f70 <memchr+0x30>
   82fce:	4620      	mov	r0, r4
   82fd0:	e7e3      	b.n	82f9a <memchr+0x5a>
   82fd2:	bf00      	nop

00082fd4 <memcpy>:
   82fd4:	4684      	mov	ip, r0
   82fd6:	ea41 0300 	orr.w	r3, r1, r0
   82fda:	f013 0303 	ands.w	r3, r3, #3
   82fde:	d149      	bne.n	83074 <memcpy+0xa0>
   82fe0:	3a40      	subs	r2, #64	; 0x40
   82fe2:	d323      	bcc.n	8302c <memcpy+0x58>
   82fe4:	680b      	ldr	r3, [r1, #0]
   82fe6:	6003      	str	r3, [r0, #0]
   82fe8:	684b      	ldr	r3, [r1, #4]
   82fea:	6043      	str	r3, [r0, #4]
   82fec:	688b      	ldr	r3, [r1, #8]
   82fee:	6083      	str	r3, [r0, #8]
   82ff0:	68cb      	ldr	r3, [r1, #12]
   82ff2:	60c3      	str	r3, [r0, #12]
   82ff4:	690b      	ldr	r3, [r1, #16]
   82ff6:	6103      	str	r3, [r0, #16]
   82ff8:	694b      	ldr	r3, [r1, #20]
   82ffa:	6143      	str	r3, [r0, #20]
   82ffc:	698b      	ldr	r3, [r1, #24]
   82ffe:	6183      	str	r3, [r0, #24]
   83000:	69cb      	ldr	r3, [r1, #28]
   83002:	61c3      	str	r3, [r0, #28]
   83004:	6a0b      	ldr	r3, [r1, #32]
   83006:	6203      	str	r3, [r0, #32]
   83008:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8300a:	6243      	str	r3, [r0, #36]	; 0x24
   8300c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8300e:	6283      	str	r3, [r0, #40]	; 0x28
   83010:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83012:	62c3      	str	r3, [r0, #44]	; 0x2c
   83014:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83016:	6303      	str	r3, [r0, #48]	; 0x30
   83018:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8301a:	6343      	str	r3, [r0, #52]	; 0x34
   8301c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8301e:	6383      	str	r3, [r0, #56]	; 0x38
   83020:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83022:	63c3      	str	r3, [r0, #60]	; 0x3c
   83024:	3040      	adds	r0, #64	; 0x40
   83026:	3140      	adds	r1, #64	; 0x40
   83028:	3a40      	subs	r2, #64	; 0x40
   8302a:	d2db      	bcs.n	82fe4 <memcpy+0x10>
   8302c:	3230      	adds	r2, #48	; 0x30
   8302e:	d30b      	bcc.n	83048 <memcpy+0x74>
   83030:	680b      	ldr	r3, [r1, #0]
   83032:	6003      	str	r3, [r0, #0]
   83034:	684b      	ldr	r3, [r1, #4]
   83036:	6043      	str	r3, [r0, #4]
   83038:	688b      	ldr	r3, [r1, #8]
   8303a:	6083      	str	r3, [r0, #8]
   8303c:	68cb      	ldr	r3, [r1, #12]
   8303e:	60c3      	str	r3, [r0, #12]
   83040:	3010      	adds	r0, #16
   83042:	3110      	adds	r1, #16
   83044:	3a10      	subs	r2, #16
   83046:	d2f3      	bcs.n	83030 <memcpy+0x5c>
   83048:	320c      	adds	r2, #12
   8304a:	d305      	bcc.n	83058 <memcpy+0x84>
   8304c:	f851 3b04 	ldr.w	r3, [r1], #4
   83050:	f840 3b04 	str.w	r3, [r0], #4
   83054:	3a04      	subs	r2, #4
   83056:	d2f9      	bcs.n	8304c <memcpy+0x78>
   83058:	3204      	adds	r2, #4
   8305a:	d008      	beq.n	8306e <memcpy+0x9a>
   8305c:	07d2      	lsls	r2, r2, #31
   8305e:	bf1c      	itt	ne
   83060:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83064:	f800 3b01 	strbne.w	r3, [r0], #1
   83068:	d301      	bcc.n	8306e <memcpy+0x9a>
   8306a:	880b      	ldrh	r3, [r1, #0]
   8306c:	8003      	strh	r3, [r0, #0]
   8306e:	4660      	mov	r0, ip
   83070:	4770      	bx	lr
   83072:	bf00      	nop
   83074:	2a08      	cmp	r2, #8
   83076:	d313      	bcc.n	830a0 <memcpy+0xcc>
   83078:	078b      	lsls	r3, r1, #30
   8307a:	d0b1      	beq.n	82fe0 <memcpy+0xc>
   8307c:	f010 0303 	ands.w	r3, r0, #3
   83080:	d0ae      	beq.n	82fe0 <memcpy+0xc>
   83082:	f1c3 0304 	rsb	r3, r3, #4
   83086:	1ad2      	subs	r2, r2, r3
   83088:	07db      	lsls	r3, r3, #31
   8308a:	bf1c      	itt	ne
   8308c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83090:	f800 3b01 	strbne.w	r3, [r0], #1
   83094:	d3a4      	bcc.n	82fe0 <memcpy+0xc>
   83096:	f831 3b02 	ldrh.w	r3, [r1], #2
   8309a:	f820 3b02 	strh.w	r3, [r0], #2
   8309e:	e79f      	b.n	82fe0 <memcpy+0xc>
   830a0:	3a04      	subs	r2, #4
   830a2:	d3d9      	bcc.n	83058 <memcpy+0x84>
   830a4:	3a01      	subs	r2, #1
   830a6:	f811 3b01 	ldrb.w	r3, [r1], #1
   830aa:	f800 3b01 	strb.w	r3, [r0], #1
   830ae:	d2f9      	bcs.n	830a4 <memcpy+0xd0>
   830b0:	780b      	ldrb	r3, [r1, #0]
   830b2:	7003      	strb	r3, [r0, #0]
   830b4:	784b      	ldrb	r3, [r1, #1]
   830b6:	7043      	strb	r3, [r0, #1]
   830b8:	788b      	ldrb	r3, [r1, #2]
   830ba:	7083      	strb	r3, [r0, #2]
   830bc:	4660      	mov	r0, ip
   830be:	4770      	bx	lr

000830c0 <memmove>:
   830c0:	4288      	cmp	r0, r1
   830c2:	b4f0      	push	{r4, r5, r6, r7}
   830c4:	d910      	bls.n	830e8 <memmove+0x28>
   830c6:	188c      	adds	r4, r1, r2
   830c8:	42a0      	cmp	r0, r4
   830ca:	d20d      	bcs.n	830e8 <memmove+0x28>
   830cc:	1885      	adds	r5, r0, r2
   830ce:	1e53      	subs	r3, r2, #1
   830d0:	b142      	cbz	r2, 830e4 <memmove+0x24>
   830d2:	4621      	mov	r1, r4
   830d4:	462a      	mov	r2, r5
   830d6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   830da:	3b01      	subs	r3, #1
   830dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   830e0:	1c5c      	adds	r4, r3, #1
   830e2:	d1f8      	bne.n	830d6 <memmove+0x16>
   830e4:	bcf0      	pop	{r4, r5, r6, r7}
   830e6:	4770      	bx	lr
   830e8:	2a0f      	cmp	r2, #15
   830ea:	d944      	bls.n	83176 <memmove+0xb6>
   830ec:	ea40 0301 	orr.w	r3, r0, r1
   830f0:	079b      	lsls	r3, r3, #30
   830f2:	d144      	bne.n	8317e <memmove+0xbe>
   830f4:	f1a2 0710 	sub.w	r7, r2, #16
   830f8:	093f      	lsrs	r7, r7, #4
   830fa:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   830fe:	3610      	adds	r6, #16
   83100:	460c      	mov	r4, r1
   83102:	4603      	mov	r3, r0
   83104:	6825      	ldr	r5, [r4, #0]
   83106:	3310      	adds	r3, #16
   83108:	f843 5c10 	str.w	r5, [r3, #-16]
   8310c:	6865      	ldr	r5, [r4, #4]
   8310e:	3410      	adds	r4, #16
   83110:	f843 5c0c 	str.w	r5, [r3, #-12]
   83114:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83118:	f843 5c08 	str.w	r5, [r3, #-8]
   8311c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83120:	f843 5c04 	str.w	r5, [r3, #-4]
   83124:	42b3      	cmp	r3, r6
   83126:	d1ed      	bne.n	83104 <memmove+0x44>
   83128:	1c7b      	adds	r3, r7, #1
   8312a:	f002 0c0f 	and.w	ip, r2, #15
   8312e:	011b      	lsls	r3, r3, #4
   83130:	f1bc 0f03 	cmp.w	ip, #3
   83134:	4419      	add	r1, r3
   83136:	4403      	add	r3, r0
   83138:	d923      	bls.n	83182 <memmove+0xc2>
   8313a:	460e      	mov	r6, r1
   8313c:	461d      	mov	r5, r3
   8313e:	4664      	mov	r4, ip
   83140:	f856 7b04 	ldr.w	r7, [r6], #4
   83144:	3c04      	subs	r4, #4
   83146:	2c03      	cmp	r4, #3
   83148:	f845 7b04 	str.w	r7, [r5], #4
   8314c:	d8f8      	bhi.n	83140 <memmove+0x80>
   8314e:	f1ac 0404 	sub.w	r4, ip, #4
   83152:	f024 0403 	bic.w	r4, r4, #3
   83156:	3404      	adds	r4, #4
   83158:	f002 0203 	and.w	r2, r2, #3
   8315c:	4423      	add	r3, r4
   8315e:	4421      	add	r1, r4
   83160:	2a00      	cmp	r2, #0
   83162:	d0bf      	beq.n	830e4 <memmove+0x24>
   83164:	441a      	add	r2, r3
   83166:	f811 4b01 	ldrb.w	r4, [r1], #1
   8316a:	f803 4b01 	strb.w	r4, [r3], #1
   8316e:	4293      	cmp	r3, r2
   83170:	d1f9      	bne.n	83166 <memmove+0xa6>
   83172:	bcf0      	pop	{r4, r5, r6, r7}
   83174:	4770      	bx	lr
   83176:	4603      	mov	r3, r0
   83178:	2a00      	cmp	r2, #0
   8317a:	d1f3      	bne.n	83164 <memmove+0xa4>
   8317c:	e7b2      	b.n	830e4 <memmove+0x24>
   8317e:	4603      	mov	r3, r0
   83180:	e7f0      	b.n	83164 <memmove+0xa4>
   83182:	4662      	mov	r2, ip
   83184:	2a00      	cmp	r2, #0
   83186:	d1ed      	bne.n	83164 <memmove+0xa4>
   83188:	e7ac      	b.n	830e4 <memmove+0x24>
   8318a:	bf00      	nop

0008318c <__malloc_lock>:
   8318c:	4770      	bx	lr
   8318e:	bf00      	nop

00083190 <__malloc_unlock>:
   83190:	4770      	bx	lr
   83192:	bf00      	nop

00083194 <_realloc_r>:
   83194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83198:	460c      	mov	r4, r1
   8319a:	b083      	sub	sp, #12
   8319c:	4690      	mov	r8, r2
   8319e:	4681      	mov	r9, r0
   831a0:	2900      	cmp	r1, #0
   831a2:	f000 80ba 	beq.w	8331a <_realloc_r+0x186>
   831a6:	f7ff fff1 	bl	8318c <__malloc_lock>
   831aa:	f108 060b 	add.w	r6, r8, #11
   831ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   831b2:	2e16      	cmp	r6, #22
   831b4:	f023 0503 	bic.w	r5, r3, #3
   831b8:	f1a4 0708 	sub.w	r7, r4, #8
   831bc:	d84b      	bhi.n	83256 <_realloc_r+0xc2>
   831be:	2110      	movs	r1, #16
   831c0:	460e      	mov	r6, r1
   831c2:	45b0      	cmp	r8, r6
   831c4:	d84c      	bhi.n	83260 <_realloc_r+0xcc>
   831c6:	428d      	cmp	r5, r1
   831c8:	da51      	bge.n	8326e <_realloc_r+0xda>
   831ca:	f8df b384 	ldr.w	fp, [pc, #900]	; 83550 <_realloc_r+0x3bc>
   831ce:	1978      	adds	r0, r7, r5
   831d0:	f8db e008 	ldr.w	lr, [fp, #8]
   831d4:	4586      	cmp	lr, r0
   831d6:	f000 80a6 	beq.w	83326 <_realloc_r+0x192>
   831da:	6842      	ldr	r2, [r0, #4]
   831dc:	f022 0c01 	bic.w	ip, r2, #1
   831e0:	4484      	add	ip, r0
   831e2:	f8dc c004 	ldr.w	ip, [ip, #4]
   831e6:	f01c 0f01 	tst.w	ip, #1
   831ea:	d054      	beq.n	83296 <_realloc_r+0x102>
   831ec:	2200      	movs	r2, #0
   831ee:	4610      	mov	r0, r2
   831f0:	07db      	lsls	r3, r3, #31
   831f2:	d46f      	bmi.n	832d4 <_realloc_r+0x140>
   831f4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   831f8:	ebc3 0a07 	rsb	sl, r3, r7
   831fc:	f8da 3004 	ldr.w	r3, [sl, #4]
   83200:	f023 0303 	bic.w	r3, r3, #3
   83204:	442b      	add	r3, r5
   83206:	2800      	cmp	r0, #0
   83208:	d062      	beq.n	832d0 <_realloc_r+0x13c>
   8320a:	4570      	cmp	r0, lr
   8320c:	f000 80e9 	beq.w	833e2 <_realloc_r+0x24e>
   83210:	eb02 0e03 	add.w	lr, r2, r3
   83214:	458e      	cmp	lr, r1
   83216:	db5b      	blt.n	832d0 <_realloc_r+0x13c>
   83218:	68c3      	ldr	r3, [r0, #12]
   8321a:	6882      	ldr	r2, [r0, #8]
   8321c:	46d0      	mov	r8, sl
   8321e:	60d3      	str	r3, [r2, #12]
   83220:	609a      	str	r2, [r3, #8]
   83222:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83226:	f8da 300c 	ldr.w	r3, [sl, #12]
   8322a:	1f2a      	subs	r2, r5, #4
   8322c:	2a24      	cmp	r2, #36	; 0x24
   8322e:	60cb      	str	r3, [r1, #12]
   83230:	6099      	str	r1, [r3, #8]
   83232:	f200 8123 	bhi.w	8347c <_realloc_r+0x2e8>
   83236:	2a13      	cmp	r2, #19
   83238:	f240 80b0 	bls.w	8339c <_realloc_r+0x208>
   8323c:	6823      	ldr	r3, [r4, #0]
   8323e:	2a1b      	cmp	r2, #27
   83240:	f8ca 3008 	str.w	r3, [sl, #8]
   83244:	6863      	ldr	r3, [r4, #4]
   83246:	f8ca 300c 	str.w	r3, [sl, #12]
   8324a:	f200 812b 	bhi.w	834a4 <_realloc_r+0x310>
   8324e:	3408      	adds	r4, #8
   83250:	f10a 0310 	add.w	r3, sl, #16
   83254:	e0a3      	b.n	8339e <_realloc_r+0x20a>
   83256:	f026 0607 	bic.w	r6, r6, #7
   8325a:	2e00      	cmp	r6, #0
   8325c:	4631      	mov	r1, r6
   8325e:	dab0      	bge.n	831c2 <_realloc_r+0x2e>
   83260:	230c      	movs	r3, #12
   83262:	2000      	movs	r0, #0
   83264:	f8c9 3000 	str.w	r3, [r9]
   83268:	b003      	add	sp, #12
   8326a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8326e:	46a0      	mov	r8, r4
   83270:	1baa      	subs	r2, r5, r6
   83272:	2a0f      	cmp	r2, #15
   83274:	f003 0301 	and.w	r3, r3, #1
   83278:	d81a      	bhi.n	832b0 <_realloc_r+0x11c>
   8327a:	432b      	orrs	r3, r5
   8327c:	607b      	str	r3, [r7, #4]
   8327e:	443d      	add	r5, r7
   83280:	686b      	ldr	r3, [r5, #4]
   83282:	f043 0301 	orr.w	r3, r3, #1
   83286:	606b      	str	r3, [r5, #4]
   83288:	4648      	mov	r0, r9
   8328a:	f7ff ff81 	bl	83190 <__malloc_unlock>
   8328e:	4640      	mov	r0, r8
   83290:	b003      	add	sp, #12
   83292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83296:	f022 0203 	bic.w	r2, r2, #3
   8329a:	eb02 0c05 	add.w	ip, r2, r5
   8329e:	458c      	cmp	ip, r1
   832a0:	dba6      	blt.n	831f0 <_realloc_r+0x5c>
   832a2:	68c2      	ldr	r2, [r0, #12]
   832a4:	6881      	ldr	r1, [r0, #8]
   832a6:	46a0      	mov	r8, r4
   832a8:	60ca      	str	r2, [r1, #12]
   832aa:	4665      	mov	r5, ip
   832ac:	6091      	str	r1, [r2, #8]
   832ae:	e7df      	b.n	83270 <_realloc_r+0xdc>
   832b0:	19b9      	adds	r1, r7, r6
   832b2:	4333      	orrs	r3, r6
   832b4:	f042 0001 	orr.w	r0, r2, #1
   832b8:	607b      	str	r3, [r7, #4]
   832ba:	440a      	add	r2, r1
   832bc:	6048      	str	r0, [r1, #4]
   832be:	6853      	ldr	r3, [r2, #4]
   832c0:	3108      	adds	r1, #8
   832c2:	f043 0301 	orr.w	r3, r3, #1
   832c6:	6053      	str	r3, [r2, #4]
   832c8:	4648      	mov	r0, r9
   832ca:	f7ff f89f 	bl	8240c <_free_r>
   832ce:	e7db      	b.n	83288 <_realloc_r+0xf4>
   832d0:	428b      	cmp	r3, r1
   832d2:	da33      	bge.n	8333c <_realloc_r+0x1a8>
   832d4:	4641      	mov	r1, r8
   832d6:	4648      	mov	r0, r9
   832d8:	f7ff fb96 	bl	82a08 <_malloc_r>
   832dc:	4680      	mov	r8, r0
   832de:	2800      	cmp	r0, #0
   832e0:	d0d2      	beq.n	83288 <_realloc_r+0xf4>
   832e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   832e6:	f1a0 0108 	sub.w	r1, r0, #8
   832ea:	f023 0201 	bic.w	r2, r3, #1
   832ee:	443a      	add	r2, r7
   832f0:	4291      	cmp	r1, r2
   832f2:	f000 80bc 	beq.w	8346e <_realloc_r+0x2da>
   832f6:	1f2a      	subs	r2, r5, #4
   832f8:	2a24      	cmp	r2, #36	; 0x24
   832fa:	d86e      	bhi.n	833da <_realloc_r+0x246>
   832fc:	2a13      	cmp	r2, #19
   832fe:	d842      	bhi.n	83386 <_realloc_r+0x1f2>
   83300:	4603      	mov	r3, r0
   83302:	4622      	mov	r2, r4
   83304:	6811      	ldr	r1, [r2, #0]
   83306:	6019      	str	r1, [r3, #0]
   83308:	6851      	ldr	r1, [r2, #4]
   8330a:	6059      	str	r1, [r3, #4]
   8330c:	6892      	ldr	r2, [r2, #8]
   8330e:	609a      	str	r2, [r3, #8]
   83310:	4621      	mov	r1, r4
   83312:	4648      	mov	r0, r9
   83314:	f7ff f87a 	bl	8240c <_free_r>
   83318:	e7b6      	b.n	83288 <_realloc_r+0xf4>
   8331a:	4611      	mov	r1, r2
   8331c:	b003      	add	sp, #12
   8331e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83322:	f7ff bb71 	b.w	82a08 <_malloc_r>
   83326:	f8de 2004 	ldr.w	r2, [lr, #4]
   8332a:	f106 0c10 	add.w	ip, r6, #16
   8332e:	f022 0203 	bic.w	r2, r2, #3
   83332:	1950      	adds	r0, r2, r5
   83334:	4560      	cmp	r0, ip
   83336:	da3d      	bge.n	833b4 <_realloc_r+0x220>
   83338:	4670      	mov	r0, lr
   8333a:	e759      	b.n	831f0 <_realloc_r+0x5c>
   8333c:	46d0      	mov	r8, sl
   8333e:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83342:	f8da 100c 	ldr.w	r1, [sl, #12]
   83346:	1f2a      	subs	r2, r5, #4
   83348:	2a24      	cmp	r2, #36	; 0x24
   8334a:	60c1      	str	r1, [r0, #12]
   8334c:	6088      	str	r0, [r1, #8]
   8334e:	f200 80a0 	bhi.w	83492 <_realloc_r+0x2fe>
   83352:	2a13      	cmp	r2, #19
   83354:	f240 809b 	bls.w	8348e <_realloc_r+0x2fa>
   83358:	6821      	ldr	r1, [r4, #0]
   8335a:	2a1b      	cmp	r2, #27
   8335c:	f8ca 1008 	str.w	r1, [sl, #8]
   83360:	6861      	ldr	r1, [r4, #4]
   83362:	f8ca 100c 	str.w	r1, [sl, #12]
   83366:	f200 80b2 	bhi.w	834ce <_realloc_r+0x33a>
   8336a:	3408      	adds	r4, #8
   8336c:	f10a 0210 	add.w	r2, sl, #16
   83370:	6821      	ldr	r1, [r4, #0]
   83372:	461d      	mov	r5, r3
   83374:	6011      	str	r1, [r2, #0]
   83376:	6861      	ldr	r1, [r4, #4]
   83378:	4657      	mov	r7, sl
   8337a:	6051      	str	r1, [r2, #4]
   8337c:	68a3      	ldr	r3, [r4, #8]
   8337e:	6093      	str	r3, [r2, #8]
   83380:	f8da 3004 	ldr.w	r3, [sl, #4]
   83384:	e774      	b.n	83270 <_realloc_r+0xdc>
   83386:	6823      	ldr	r3, [r4, #0]
   83388:	2a1b      	cmp	r2, #27
   8338a:	6003      	str	r3, [r0, #0]
   8338c:	6863      	ldr	r3, [r4, #4]
   8338e:	6043      	str	r3, [r0, #4]
   83390:	d862      	bhi.n	83458 <_realloc_r+0x2c4>
   83392:	f100 0308 	add.w	r3, r0, #8
   83396:	f104 0208 	add.w	r2, r4, #8
   8339a:	e7b3      	b.n	83304 <_realloc_r+0x170>
   8339c:	4643      	mov	r3, r8
   8339e:	6822      	ldr	r2, [r4, #0]
   833a0:	4675      	mov	r5, lr
   833a2:	601a      	str	r2, [r3, #0]
   833a4:	6862      	ldr	r2, [r4, #4]
   833a6:	4657      	mov	r7, sl
   833a8:	605a      	str	r2, [r3, #4]
   833aa:	68a2      	ldr	r2, [r4, #8]
   833ac:	609a      	str	r2, [r3, #8]
   833ae:	f8da 3004 	ldr.w	r3, [sl, #4]
   833b2:	e75d      	b.n	83270 <_realloc_r+0xdc>
   833b4:	1b83      	subs	r3, r0, r6
   833b6:	4437      	add	r7, r6
   833b8:	f043 0301 	orr.w	r3, r3, #1
   833bc:	f8cb 7008 	str.w	r7, [fp, #8]
   833c0:	607b      	str	r3, [r7, #4]
   833c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   833c6:	4648      	mov	r0, r9
   833c8:	f003 0301 	and.w	r3, r3, #1
   833cc:	431e      	orrs	r6, r3
   833ce:	f844 6c04 	str.w	r6, [r4, #-4]
   833d2:	f7ff fedd 	bl	83190 <__malloc_unlock>
   833d6:	4620      	mov	r0, r4
   833d8:	e75a      	b.n	83290 <_realloc_r+0xfc>
   833da:	4621      	mov	r1, r4
   833dc:	f7ff fe70 	bl	830c0 <memmove>
   833e0:	e796      	b.n	83310 <_realloc_r+0x17c>
   833e2:	eb02 0c03 	add.w	ip, r2, r3
   833e6:	f106 0210 	add.w	r2, r6, #16
   833ea:	4594      	cmp	ip, r2
   833ec:	f6ff af70 	blt.w	832d0 <_realloc_r+0x13c>
   833f0:	4657      	mov	r7, sl
   833f2:	f857 1f08 	ldr.w	r1, [r7, #8]!
   833f6:	f8da 300c 	ldr.w	r3, [sl, #12]
   833fa:	1f2a      	subs	r2, r5, #4
   833fc:	2a24      	cmp	r2, #36	; 0x24
   833fe:	60cb      	str	r3, [r1, #12]
   83400:	6099      	str	r1, [r3, #8]
   83402:	f200 8086 	bhi.w	83512 <_realloc_r+0x37e>
   83406:	2a13      	cmp	r2, #19
   83408:	d977      	bls.n	834fa <_realloc_r+0x366>
   8340a:	6823      	ldr	r3, [r4, #0]
   8340c:	2a1b      	cmp	r2, #27
   8340e:	f8ca 3008 	str.w	r3, [sl, #8]
   83412:	6863      	ldr	r3, [r4, #4]
   83414:	f8ca 300c 	str.w	r3, [sl, #12]
   83418:	f200 8084 	bhi.w	83524 <_realloc_r+0x390>
   8341c:	3408      	adds	r4, #8
   8341e:	f10a 0310 	add.w	r3, sl, #16
   83422:	6822      	ldr	r2, [r4, #0]
   83424:	601a      	str	r2, [r3, #0]
   83426:	6862      	ldr	r2, [r4, #4]
   83428:	605a      	str	r2, [r3, #4]
   8342a:	68a2      	ldr	r2, [r4, #8]
   8342c:	609a      	str	r2, [r3, #8]
   8342e:	ebc6 020c 	rsb	r2, r6, ip
   83432:	eb0a 0306 	add.w	r3, sl, r6
   83436:	f042 0201 	orr.w	r2, r2, #1
   8343a:	f8cb 3008 	str.w	r3, [fp, #8]
   8343e:	605a      	str	r2, [r3, #4]
   83440:	f8da 3004 	ldr.w	r3, [sl, #4]
   83444:	4648      	mov	r0, r9
   83446:	f003 0301 	and.w	r3, r3, #1
   8344a:	431e      	orrs	r6, r3
   8344c:	f8ca 6004 	str.w	r6, [sl, #4]
   83450:	f7ff fe9e 	bl	83190 <__malloc_unlock>
   83454:	4638      	mov	r0, r7
   83456:	e71b      	b.n	83290 <_realloc_r+0xfc>
   83458:	68a3      	ldr	r3, [r4, #8]
   8345a:	2a24      	cmp	r2, #36	; 0x24
   8345c:	6083      	str	r3, [r0, #8]
   8345e:	68e3      	ldr	r3, [r4, #12]
   83460:	60c3      	str	r3, [r0, #12]
   83462:	d02b      	beq.n	834bc <_realloc_r+0x328>
   83464:	f100 0310 	add.w	r3, r0, #16
   83468:	f104 0210 	add.w	r2, r4, #16
   8346c:	e74a      	b.n	83304 <_realloc_r+0x170>
   8346e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83472:	46a0      	mov	r8, r4
   83474:	f022 0203 	bic.w	r2, r2, #3
   83478:	4415      	add	r5, r2
   8347a:	e6f9      	b.n	83270 <_realloc_r+0xdc>
   8347c:	4621      	mov	r1, r4
   8347e:	4640      	mov	r0, r8
   83480:	4675      	mov	r5, lr
   83482:	4657      	mov	r7, sl
   83484:	f7ff fe1c 	bl	830c0 <memmove>
   83488:	f8da 3004 	ldr.w	r3, [sl, #4]
   8348c:	e6f0      	b.n	83270 <_realloc_r+0xdc>
   8348e:	4642      	mov	r2, r8
   83490:	e76e      	b.n	83370 <_realloc_r+0x1dc>
   83492:	4621      	mov	r1, r4
   83494:	4640      	mov	r0, r8
   83496:	461d      	mov	r5, r3
   83498:	4657      	mov	r7, sl
   8349a:	f7ff fe11 	bl	830c0 <memmove>
   8349e:	f8da 3004 	ldr.w	r3, [sl, #4]
   834a2:	e6e5      	b.n	83270 <_realloc_r+0xdc>
   834a4:	68a3      	ldr	r3, [r4, #8]
   834a6:	2a24      	cmp	r2, #36	; 0x24
   834a8:	f8ca 3010 	str.w	r3, [sl, #16]
   834ac:	68e3      	ldr	r3, [r4, #12]
   834ae:	f8ca 3014 	str.w	r3, [sl, #20]
   834b2:	d018      	beq.n	834e6 <_realloc_r+0x352>
   834b4:	3410      	adds	r4, #16
   834b6:	f10a 0318 	add.w	r3, sl, #24
   834ba:	e770      	b.n	8339e <_realloc_r+0x20a>
   834bc:	6922      	ldr	r2, [r4, #16]
   834be:	f100 0318 	add.w	r3, r0, #24
   834c2:	6102      	str	r2, [r0, #16]
   834c4:	6961      	ldr	r1, [r4, #20]
   834c6:	f104 0218 	add.w	r2, r4, #24
   834ca:	6141      	str	r1, [r0, #20]
   834cc:	e71a      	b.n	83304 <_realloc_r+0x170>
   834ce:	68a1      	ldr	r1, [r4, #8]
   834d0:	2a24      	cmp	r2, #36	; 0x24
   834d2:	f8ca 1010 	str.w	r1, [sl, #16]
   834d6:	68e1      	ldr	r1, [r4, #12]
   834d8:	f8ca 1014 	str.w	r1, [sl, #20]
   834dc:	d00f      	beq.n	834fe <_realloc_r+0x36a>
   834de:	3410      	adds	r4, #16
   834e0:	f10a 0218 	add.w	r2, sl, #24
   834e4:	e744      	b.n	83370 <_realloc_r+0x1dc>
   834e6:	6922      	ldr	r2, [r4, #16]
   834e8:	f10a 0320 	add.w	r3, sl, #32
   834ec:	f8ca 2018 	str.w	r2, [sl, #24]
   834f0:	6962      	ldr	r2, [r4, #20]
   834f2:	3418      	adds	r4, #24
   834f4:	f8ca 201c 	str.w	r2, [sl, #28]
   834f8:	e751      	b.n	8339e <_realloc_r+0x20a>
   834fa:	463b      	mov	r3, r7
   834fc:	e791      	b.n	83422 <_realloc_r+0x28e>
   834fe:	6921      	ldr	r1, [r4, #16]
   83500:	f10a 0220 	add.w	r2, sl, #32
   83504:	f8ca 1018 	str.w	r1, [sl, #24]
   83508:	6961      	ldr	r1, [r4, #20]
   8350a:	3418      	adds	r4, #24
   8350c:	f8ca 101c 	str.w	r1, [sl, #28]
   83510:	e72e      	b.n	83370 <_realloc_r+0x1dc>
   83512:	4621      	mov	r1, r4
   83514:	4638      	mov	r0, r7
   83516:	f8cd c004 	str.w	ip, [sp, #4]
   8351a:	f7ff fdd1 	bl	830c0 <memmove>
   8351e:	f8dd c004 	ldr.w	ip, [sp, #4]
   83522:	e784      	b.n	8342e <_realloc_r+0x29a>
   83524:	68a3      	ldr	r3, [r4, #8]
   83526:	2a24      	cmp	r2, #36	; 0x24
   83528:	f8ca 3010 	str.w	r3, [sl, #16]
   8352c:	68e3      	ldr	r3, [r4, #12]
   8352e:	f8ca 3014 	str.w	r3, [sl, #20]
   83532:	d003      	beq.n	8353c <_realloc_r+0x3a8>
   83534:	3410      	adds	r4, #16
   83536:	f10a 0318 	add.w	r3, sl, #24
   8353a:	e772      	b.n	83422 <_realloc_r+0x28e>
   8353c:	6922      	ldr	r2, [r4, #16]
   8353e:	f10a 0320 	add.w	r3, sl, #32
   83542:	f8ca 2018 	str.w	r2, [sl, #24]
   83546:	6962      	ldr	r2, [r4, #20]
   83548:	3418      	adds	r4, #24
   8354a:	f8ca 201c 	str.w	r2, [sl, #28]
   8354e:	e768      	b.n	83422 <_realloc_r+0x28e>
   83550:	20070588 	.word	0x20070588

00083554 <_sbrk_r>:
   83554:	b538      	push	{r3, r4, r5, lr}
   83556:	4c07      	ldr	r4, [pc, #28]	; (83574 <_sbrk_r+0x20>)
   83558:	2300      	movs	r3, #0
   8355a:	4605      	mov	r5, r0
   8355c:	4608      	mov	r0, r1
   8355e:	6023      	str	r3, [r4, #0]
   83560:	f7fd fcd4 	bl	80f0c <_sbrk>
   83564:	1c43      	adds	r3, r0, #1
   83566:	d000      	beq.n	8356a <_sbrk_r+0x16>
   83568:	bd38      	pop	{r3, r4, r5, pc}
   8356a:	6823      	ldr	r3, [r4, #0]
   8356c:	2b00      	cmp	r3, #0
   8356e:	d0fb      	beq.n	83568 <_sbrk_r+0x14>
   83570:	602b      	str	r3, [r5, #0]
   83572:	bd38      	pop	{r3, r4, r5, pc}
   83574:	20070b74 	.word	0x20070b74

00083578 <__sread>:
   83578:	b510      	push	{r4, lr}
   8357a:	460c      	mov	r4, r1
   8357c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83580:	f000 f9c2 	bl	83908 <_read_r>
   83584:	2800      	cmp	r0, #0
   83586:	db03      	blt.n	83590 <__sread+0x18>
   83588:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8358a:	4403      	add	r3, r0
   8358c:	6523      	str	r3, [r4, #80]	; 0x50
   8358e:	bd10      	pop	{r4, pc}
   83590:	89a3      	ldrh	r3, [r4, #12]
   83592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83596:	81a3      	strh	r3, [r4, #12]
   83598:	bd10      	pop	{r4, pc}
   8359a:	bf00      	nop

0008359c <__swrite>:
   8359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   835a0:	460c      	mov	r4, r1
   835a2:	8989      	ldrh	r1, [r1, #12]
   835a4:	461d      	mov	r5, r3
   835a6:	05cb      	lsls	r3, r1, #23
   835a8:	4616      	mov	r6, r2
   835aa:	4607      	mov	r7, r0
   835ac:	d506      	bpl.n	835bc <__swrite+0x20>
   835ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   835b2:	2200      	movs	r2, #0
   835b4:	2302      	movs	r3, #2
   835b6:	f000 f993 	bl	838e0 <_lseek_r>
   835ba:	89a1      	ldrh	r1, [r4, #12]
   835bc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   835c0:	81a1      	strh	r1, [r4, #12]
   835c2:	4638      	mov	r0, r7
   835c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   835c8:	4632      	mov	r2, r6
   835ca:	462b      	mov	r3, r5
   835cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   835d0:	f000 b89e 	b.w	83710 <_write_r>

000835d4 <__sseek>:
   835d4:	b510      	push	{r4, lr}
   835d6:	460c      	mov	r4, r1
   835d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835dc:	f000 f980 	bl	838e0 <_lseek_r>
   835e0:	89a3      	ldrh	r3, [r4, #12]
   835e2:	1c42      	adds	r2, r0, #1
   835e4:	bf0e      	itee	eq
   835e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   835ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   835ee:	6520      	strne	r0, [r4, #80]	; 0x50
   835f0:	81a3      	strh	r3, [r4, #12]
   835f2:	bd10      	pop	{r4, pc}

000835f4 <__sclose>:
   835f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835f8:	f000 b8f2 	b.w	837e0 <_close_r>

000835fc <__swbuf_r>:
   835fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   835fe:	460d      	mov	r5, r1
   83600:	4614      	mov	r4, r2
   83602:	4607      	mov	r7, r0
   83604:	b110      	cbz	r0, 8360c <__swbuf_r+0x10>
   83606:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83608:	2b00      	cmp	r3, #0
   8360a:	d048      	beq.n	8369e <__swbuf_r+0xa2>
   8360c:	89a2      	ldrh	r2, [r4, #12]
   8360e:	69a0      	ldr	r0, [r4, #24]
   83610:	b293      	uxth	r3, r2
   83612:	60a0      	str	r0, [r4, #8]
   83614:	0718      	lsls	r0, r3, #28
   83616:	d538      	bpl.n	8368a <__swbuf_r+0x8e>
   83618:	6926      	ldr	r6, [r4, #16]
   8361a:	2e00      	cmp	r6, #0
   8361c:	d035      	beq.n	8368a <__swbuf_r+0x8e>
   8361e:	0499      	lsls	r1, r3, #18
   83620:	b2ed      	uxtb	r5, r5
   83622:	d515      	bpl.n	83650 <__swbuf_r+0x54>
   83624:	6823      	ldr	r3, [r4, #0]
   83626:	6962      	ldr	r2, [r4, #20]
   83628:	1b9e      	subs	r6, r3, r6
   8362a:	4296      	cmp	r6, r2
   8362c:	da1c      	bge.n	83668 <__swbuf_r+0x6c>
   8362e:	3601      	adds	r6, #1
   83630:	68a2      	ldr	r2, [r4, #8]
   83632:	1c59      	adds	r1, r3, #1
   83634:	3a01      	subs	r2, #1
   83636:	60a2      	str	r2, [r4, #8]
   83638:	6021      	str	r1, [r4, #0]
   8363a:	701d      	strb	r5, [r3, #0]
   8363c:	6963      	ldr	r3, [r4, #20]
   8363e:	42b3      	cmp	r3, r6
   83640:	d01a      	beq.n	83678 <__swbuf_r+0x7c>
   83642:	89a3      	ldrh	r3, [r4, #12]
   83644:	07db      	lsls	r3, r3, #31
   83646:	d501      	bpl.n	8364c <__swbuf_r+0x50>
   83648:	2d0a      	cmp	r5, #10
   8364a:	d015      	beq.n	83678 <__swbuf_r+0x7c>
   8364c:	4628      	mov	r0, r5
   8364e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83650:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83652:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8365a:	6663      	str	r3, [r4, #100]	; 0x64
   8365c:	6823      	ldr	r3, [r4, #0]
   8365e:	81a2      	strh	r2, [r4, #12]
   83660:	6962      	ldr	r2, [r4, #20]
   83662:	1b9e      	subs	r6, r3, r6
   83664:	4296      	cmp	r6, r2
   83666:	dbe2      	blt.n	8362e <__swbuf_r+0x32>
   83668:	4638      	mov	r0, r7
   8366a:	4621      	mov	r1, r4
   8366c:	f7fe fd6e 	bl	8214c <_fflush_r>
   83670:	b940      	cbnz	r0, 83684 <__swbuf_r+0x88>
   83672:	6823      	ldr	r3, [r4, #0]
   83674:	2601      	movs	r6, #1
   83676:	e7db      	b.n	83630 <__swbuf_r+0x34>
   83678:	4638      	mov	r0, r7
   8367a:	4621      	mov	r1, r4
   8367c:	f7fe fd66 	bl	8214c <_fflush_r>
   83680:	2800      	cmp	r0, #0
   83682:	d0e3      	beq.n	8364c <__swbuf_r+0x50>
   83684:	f04f 30ff 	mov.w	r0, #4294967295
   83688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8368a:	4638      	mov	r0, r7
   8368c:	4621      	mov	r1, r4
   8368e:	f7fe fc47 	bl	81f20 <__swsetup_r>
   83692:	2800      	cmp	r0, #0
   83694:	d1f6      	bne.n	83684 <__swbuf_r+0x88>
   83696:	89a2      	ldrh	r2, [r4, #12]
   83698:	6926      	ldr	r6, [r4, #16]
   8369a:	b293      	uxth	r3, r2
   8369c:	e7bf      	b.n	8361e <__swbuf_r+0x22>
   8369e:	f7fe fd71 	bl	82184 <__sinit>
   836a2:	e7b3      	b.n	8360c <__swbuf_r+0x10>

000836a4 <_wcrtomb_r>:
   836a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836a8:	461e      	mov	r6, r3
   836aa:	b086      	sub	sp, #24
   836ac:	460c      	mov	r4, r1
   836ae:	4605      	mov	r5, r0
   836b0:	4617      	mov	r7, r2
   836b2:	4b0f      	ldr	r3, [pc, #60]	; (836f0 <_wcrtomb_r+0x4c>)
   836b4:	b191      	cbz	r1, 836dc <_wcrtomb_r+0x38>
   836b6:	f8d3 8000 	ldr.w	r8, [r3]
   836ba:	f7ff f923 	bl	82904 <__locale_charset>
   836be:	9600      	str	r6, [sp, #0]
   836c0:	4603      	mov	r3, r0
   836c2:	4621      	mov	r1, r4
   836c4:	463a      	mov	r2, r7
   836c6:	4628      	mov	r0, r5
   836c8:	47c0      	blx	r8
   836ca:	1c43      	adds	r3, r0, #1
   836cc:	d103      	bne.n	836d6 <_wcrtomb_r+0x32>
   836ce:	2200      	movs	r2, #0
   836d0:	238a      	movs	r3, #138	; 0x8a
   836d2:	6032      	str	r2, [r6, #0]
   836d4:	602b      	str	r3, [r5, #0]
   836d6:	b006      	add	sp, #24
   836d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   836dc:	681f      	ldr	r7, [r3, #0]
   836de:	f7ff f911 	bl	82904 <__locale_charset>
   836e2:	9600      	str	r6, [sp, #0]
   836e4:	4603      	mov	r3, r0
   836e6:	4622      	mov	r2, r4
   836e8:	4628      	mov	r0, r5
   836ea:	a903      	add	r1, sp, #12
   836ec:	47b8      	blx	r7
   836ee:	e7ec      	b.n	836ca <_wcrtomb_r+0x26>
   836f0:	20070998 	.word	0x20070998

000836f4 <__ascii_wctomb>:
   836f4:	b121      	cbz	r1, 83700 <__ascii_wctomb+0xc>
   836f6:	2aff      	cmp	r2, #255	; 0xff
   836f8:	d804      	bhi.n	83704 <__ascii_wctomb+0x10>
   836fa:	700a      	strb	r2, [r1, #0]
   836fc:	2001      	movs	r0, #1
   836fe:	4770      	bx	lr
   83700:	4608      	mov	r0, r1
   83702:	4770      	bx	lr
   83704:	238a      	movs	r3, #138	; 0x8a
   83706:	6003      	str	r3, [r0, #0]
   83708:	f04f 30ff 	mov.w	r0, #4294967295
   8370c:	4770      	bx	lr
   8370e:	bf00      	nop

00083710 <_write_r>:
   83710:	b570      	push	{r4, r5, r6, lr}
   83712:	4c08      	ldr	r4, [pc, #32]	; (83734 <_write_r+0x24>)
   83714:	4606      	mov	r6, r0
   83716:	2500      	movs	r5, #0
   83718:	4608      	mov	r0, r1
   8371a:	4611      	mov	r1, r2
   8371c:	461a      	mov	r2, r3
   8371e:	6025      	str	r5, [r4, #0]
   83720:	f7fc fdf4 	bl	8030c <_write>
   83724:	1c43      	adds	r3, r0, #1
   83726:	d000      	beq.n	8372a <_write_r+0x1a>
   83728:	bd70      	pop	{r4, r5, r6, pc}
   8372a:	6823      	ldr	r3, [r4, #0]
   8372c:	2b00      	cmp	r3, #0
   8372e:	d0fb      	beq.n	83728 <_write_r+0x18>
   83730:	6033      	str	r3, [r6, #0]
   83732:	bd70      	pop	{r4, r5, r6, pc}
   83734:	20070b74 	.word	0x20070b74

00083738 <__register_exitproc>:
   83738:	b5f0      	push	{r4, r5, r6, r7, lr}
   8373a:	4c27      	ldr	r4, [pc, #156]	; (837d8 <__register_exitproc+0xa0>)
   8373c:	b085      	sub	sp, #20
   8373e:	6826      	ldr	r6, [r4, #0]
   83740:	4607      	mov	r7, r0
   83742:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83746:	2c00      	cmp	r4, #0
   83748:	d040      	beq.n	837cc <__register_exitproc+0x94>
   8374a:	6865      	ldr	r5, [r4, #4]
   8374c:	2d1f      	cmp	r5, #31
   8374e:	dd1e      	ble.n	8378e <__register_exitproc+0x56>
   83750:	4822      	ldr	r0, [pc, #136]	; (837dc <__register_exitproc+0xa4>)
   83752:	b918      	cbnz	r0, 8375c <__register_exitproc+0x24>
   83754:	f04f 30ff 	mov.w	r0, #4294967295
   83758:	b005      	add	sp, #20
   8375a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8375c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83760:	9103      	str	r1, [sp, #12]
   83762:	9202      	str	r2, [sp, #8]
   83764:	9301      	str	r3, [sp, #4]
   83766:	f7ff f947 	bl	829f8 <malloc>
   8376a:	9903      	ldr	r1, [sp, #12]
   8376c:	4604      	mov	r4, r0
   8376e:	9a02      	ldr	r2, [sp, #8]
   83770:	9b01      	ldr	r3, [sp, #4]
   83772:	2800      	cmp	r0, #0
   83774:	d0ee      	beq.n	83754 <__register_exitproc+0x1c>
   83776:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8377a:	2000      	movs	r0, #0
   8377c:	6025      	str	r5, [r4, #0]
   8377e:	6060      	str	r0, [r4, #4]
   83780:	4605      	mov	r5, r0
   83782:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83786:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8378a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8378e:	b93f      	cbnz	r7, 837a0 <__register_exitproc+0x68>
   83790:	1c6b      	adds	r3, r5, #1
   83792:	2000      	movs	r0, #0
   83794:	3502      	adds	r5, #2
   83796:	6063      	str	r3, [r4, #4]
   83798:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   8379c:	b005      	add	sp, #20
   8379e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   837a0:	2601      	movs	r6, #1
   837a2:	40ae      	lsls	r6, r5
   837a4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   837a8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   837ac:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   837b0:	2f02      	cmp	r7, #2
   837b2:	ea42 0206 	orr.w	r2, r2, r6
   837b6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   837ba:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   837be:	d1e7      	bne.n	83790 <__register_exitproc+0x58>
   837c0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   837c4:	431e      	orrs	r6, r3
   837c6:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   837ca:	e7e1      	b.n	83790 <__register_exitproc+0x58>
   837cc:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   837d0:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   837d4:	e7b9      	b.n	8374a <__register_exitproc+0x12>
   837d6:	bf00      	nop
   837d8:	00083f54 	.word	0x00083f54
   837dc:	000829f9 	.word	0x000829f9

000837e0 <_close_r>:
   837e0:	b538      	push	{r3, r4, r5, lr}
   837e2:	4c07      	ldr	r4, [pc, #28]	; (83800 <_close_r+0x20>)
   837e4:	2300      	movs	r3, #0
   837e6:	4605      	mov	r5, r0
   837e8:	4608      	mov	r0, r1
   837ea:	6023      	str	r3, [r4, #0]
   837ec:	f7fd fba8 	bl	80f40 <_close>
   837f0:	1c43      	adds	r3, r0, #1
   837f2:	d000      	beq.n	837f6 <_close_r+0x16>
   837f4:	bd38      	pop	{r3, r4, r5, pc}
   837f6:	6823      	ldr	r3, [r4, #0]
   837f8:	2b00      	cmp	r3, #0
   837fa:	d0fb      	beq.n	837f4 <_close_r+0x14>
   837fc:	602b      	str	r3, [r5, #0]
   837fe:	bd38      	pop	{r3, r4, r5, pc}
   83800:	20070b74 	.word	0x20070b74

00083804 <_fclose_r>:
   83804:	b570      	push	{r4, r5, r6, lr}
   83806:	460c      	mov	r4, r1
   83808:	4605      	mov	r5, r0
   8380a:	b131      	cbz	r1, 8381a <_fclose_r+0x16>
   8380c:	b110      	cbz	r0, 83814 <_fclose_r+0x10>
   8380e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83810:	2b00      	cmp	r3, #0
   83812:	d02f      	beq.n	83874 <_fclose_r+0x70>
   83814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83818:	b90b      	cbnz	r3, 8381e <_fclose_r+0x1a>
   8381a:	2000      	movs	r0, #0
   8381c:	bd70      	pop	{r4, r5, r6, pc}
   8381e:	4628      	mov	r0, r5
   83820:	4621      	mov	r1, r4
   83822:	f7fe fc93 	bl	8214c <_fflush_r>
   83826:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83828:	4606      	mov	r6, r0
   8382a:	b133      	cbz	r3, 8383a <_fclose_r+0x36>
   8382c:	4628      	mov	r0, r5
   8382e:	69e1      	ldr	r1, [r4, #28]
   83830:	4798      	blx	r3
   83832:	2800      	cmp	r0, #0
   83834:	bfb8      	it	lt
   83836:	f04f 36ff 	movlt.w	r6, #4294967295
   8383a:	89a3      	ldrh	r3, [r4, #12]
   8383c:	061b      	lsls	r3, r3, #24
   8383e:	d41c      	bmi.n	8387a <_fclose_r+0x76>
   83840:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83842:	b141      	cbz	r1, 83856 <_fclose_r+0x52>
   83844:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83848:	4299      	cmp	r1, r3
   8384a:	d002      	beq.n	83852 <_fclose_r+0x4e>
   8384c:	4628      	mov	r0, r5
   8384e:	f7fe fddd 	bl	8240c <_free_r>
   83852:	2300      	movs	r3, #0
   83854:	6323      	str	r3, [r4, #48]	; 0x30
   83856:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83858:	b121      	cbz	r1, 83864 <_fclose_r+0x60>
   8385a:	4628      	mov	r0, r5
   8385c:	f7fe fdd6 	bl	8240c <_free_r>
   83860:	2300      	movs	r3, #0
   83862:	6463      	str	r3, [r4, #68]	; 0x44
   83864:	f7fe fd08 	bl	82278 <__sfp_lock_acquire>
   83868:	2300      	movs	r3, #0
   8386a:	81a3      	strh	r3, [r4, #12]
   8386c:	f7fe fd06 	bl	8227c <__sfp_lock_release>
   83870:	4630      	mov	r0, r6
   83872:	bd70      	pop	{r4, r5, r6, pc}
   83874:	f7fe fc86 	bl	82184 <__sinit>
   83878:	e7cc      	b.n	83814 <_fclose_r+0x10>
   8387a:	4628      	mov	r0, r5
   8387c:	6921      	ldr	r1, [r4, #16]
   8387e:	f7fe fdc5 	bl	8240c <_free_r>
   83882:	e7dd      	b.n	83840 <_fclose_r+0x3c>

00083884 <fclose>:
   83884:	4b02      	ldr	r3, [pc, #8]	; (83890 <fclose+0xc>)
   83886:	4601      	mov	r1, r0
   83888:	6818      	ldr	r0, [r3, #0]
   8388a:	f7ff bfbb 	b.w	83804 <_fclose_r>
   8388e:	bf00      	nop
   83890:	20070560 	.word	0x20070560

00083894 <_fstat_r>:
   83894:	b538      	push	{r3, r4, r5, lr}
   83896:	4c08      	ldr	r4, [pc, #32]	; (838b8 <_fstat_r+0x24>)
   83898:	2300      	movs	r3, #0
   8389a:	4605      	mov	r5, r0
   8389c:	4608      	mov	r0, r1
   8389e:	4611      	mov	r1, r2
   838a0:	6023      	str	r3, [r4, #0]
   838a2:	f7fd fb51 	bl	80f48 <_fstat>
   838a6:	1c43      	adds	r3, r0, #1
   838a8:	d000      	beq.n	838ac <_fstat_r+0x18>
   838aa:	bd38      	pop	{r3, r4, r5, pc}
   838ac:	6823      	ldr	r3, [r4, #0]
   838ae:	2b00      	cmp	r3, #0
   838b0:	d0fb      	beq.n	838aa <_fstat_r+0x16>
   838b2:	602b      	str	r3, [r5, #0]
   838b4:	bd38      	pop	{r3, r4, r5, pc}
   838b6:	bf00      	nop
   838b8:	20070b74 	.word	0x20070b74

000838bc <_isatty_r>:
   838bc:	b538      	push	{r3, r4, r5, lr}
   838be:	4c07      	ldr	r4, [pc, #28]	; (838dc <_isatty_r+0x20>)
   838c0:	2300      	movs	r3, #0
   838c2:	4605      	mov	r5, r0
   838c4:	4608      	mov	r0, r1
   838c6:	6023      	str	r3, [r4, #0]
   838c8:	f7fd fb44 	bl	80f54 <_isatty>
   838cc:	1c43      	adds	r3, r0, #1
   838ce:	d000      	beq.n	838d2 <_isatty_r+0x16>
   838d0:	bd38      	pop	{r3, r4, r5, pc}
   838d2:	6823      	ldr	r3, [r4, #0]
   838d4:	2b00      	cmp	r3, #0
   838d6:	d0fb      	beq.n	838d0 <_isatty_r+0x14>
   838d8:	602b      	str	r3, [r5, #0]
   838da:	bd38      	pop	{r3, r4, r5, pc}
   838dc:	20070b74 	.word	0x20070b74

000838e0 <_lseek_r>:
   838e0:	b570      	push	{r4, r5, r6, lr}
   838e2:	4c08      	ldr	r4, [pc, #32]	; (83904 <_lseek_r+0x24>)
   838e4:	4606      	mov	r6, r0
   838e6:	2500      	movs	r5, #0
   838e8:	4608      	mov	r0, r1
   838ea:	4611      	mov	r1, r2
   838ec:	461a      	mov	r2, r3
   838ee:	6025      	str	r5, [r4, #0]
   838f0:	f7fd fb32 	bl	80f58 <_lseek>
   838f4:	1c43      	adds	r3, r0, #1
   838f6:	d000      	beq.n	838fa <_lseek_r+0x1a>
   838f8:	bd70      	pop	{r4, r5, r6, pc}
   838fa:	6823      	ldr	r3, [r4, #0]
   838fc:	2b00      	cmp	r3, #0
   838fe:	d0fb      	beq.n	838f8 <_lseek_r+0x18>
   83900:	6033      	str	r3, [r6, #0]
   83902:	bd70      	pop	{r4, r5, r6, pc}
   83904:	20070b74 	.word	0x20070b74

00083908 <_read_r>:
   83908:	b570      	push	{r4, r5, r6, lr}
   8390a:	4c08      	ldr	r4, [pc, #32]	; (8392c <_read_r+0x24>)
   8390c:	4606      	mov	r6, r0
   8390e:	2500      	movs	r5, #0
   83910:	4608      	mov	r0, r1
   83912:	4611      	mov	r1, r2
   83914:	461a      	mov	r2, r3
   83916:	6025      	str	r5, [r4, #0]
   83918:	f7fc fcd8 	bl	802cc <_read>
   8391c:	1c43      	adds	r3, r0, #1
   8391e:	d000      	beq.n	83922 <_read_r+0x1a>
   83920:	bd70      	pop	{r4, r5, r6, pc}
   83922:	6823      	ldr	r3, [r4, #0]
   83924:	2b00      	cmp	r3, #0
   83926:	d0fb      	beq.n	83920 <_read_r+0x18>
   83928:	6033      	str	r3, [r6, #0]
   8392a:	bd70      	pop	{r4, r5, r6, pc}
   8392c:	20070b74 	.word	0x20070b74

00083930 <__aeabi_uldivmod>:
   83930:	b94b      	cbnz	r3, 83946 <__aeabi_uldivmod+0x16>
   83932:	b942      	cbnz	r2, 83946 <__aeabi_uldivmod+0x16>
   83934:	2900      	cmp	r1, #0
   83936:	bf08      	it	eq
   83938:	2800      	cmpeq	r0, #0
   8393a:	d002      	beq.n	83942 <__aeabi_uldivmod+0x12>
   8393c:	f04f 31ff 	mov.w	r1, #4294967295
   83940:	4608      	mov	r0, r1
   83942:	f000 b83b 	b.w	839bc <__aeabi_idiv0>
   83946:	b082      	sub	sp, #8
   83948:	46ec      	mov	ip, sp
   8394a:	e92d 5000 	stmdb	sp!, {ip, lr}
   8394e:	f000 f81d 	bl	8398c <__gnu_uldivmod_helper>
   83952:	f8dd e004 	ldr.w	lr, [sp, #4]
   83956:	b002      	add	sp, #8
   83958:	bc0c      	pop	{r2, r3}
   8395a:	4770      	bx	lr

0008395c <__gnu_ldivmod_helper>:
   8395c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83960:	9e08      	ldr	r6, [sp, #32]
   83962:	4614      	mov	r4, r2
   83964:	461d      	mov	r5, r3
   83966:	4680      	mov	r8, r0
   83968:	4689      	mov	r9, r1
   8396a:	f000 f829 	bl	839c0 <__divdi3>
   8396e:	fb04 f301 	mul.w	r3, r4, r1
   83972:	fba4 ab00 	umull	sl, fp, r4, r0
   83976:	fb00 3205 	mla	r2, r0, r5, r3
   8397a:	4493      	add	fp, r2
   8397c:	ebb8 080a 	subs.w	r8, r8, sl
   83980:	eb69 090b 	sbc.w	r9, r9, fp
   83984:	e9c6 8900 	strd	r8, r9, [r6]
   83988:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008398c <__gnu_uldivmod_helper>:
   8398c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83990:	9e08      	ldr	r6, [sp, #32]
   83992:	4614      	mov	r4, r2
   83994:	461d      	mov	r5, r3
   83996:	4680      	mov	r8, r0
   83998:	4689      	mov	r9, r1
   8399a:	f000 f961 	bl	83c60 <__udivdi3>
   8399e:	fb00 f505 	mul.w	r5, r0, r5
   839a2:	fba0 ab04 	umull	sl, fp, r0, r4
   839a6:	fb04 5401 	mla	r4, r4, r1, r5
   839aa:	44a3      	add	fp, r4
   839ac:	ebb8 080a 	subs.w	r8, r8, sl
   839b0:	eb69 090b 	sbc.w	r9, r9, fp
   839b4:	e9c6 8900 	strd	r8, r9, [r6]
   839b8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000839bc <__aeabi_idiv0>:
   839bc:	4770      	bx	lr
   839be:	bf00      	nop

000839c0 <__divdi3>:
   839c0:	2900      	cmp	r1, #0
   839c2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   839c6:	f2c0 80a1 	blt.w	83b0c <__divdi3+0x14c>
   839ca:	2400      	movs	r4, #0
   839cc:	2b00      	cmp	r3, #0
   839ce:	f2c0 8098 	blt.w	83b02 <__divdi3+0x142>
   839d2:	4615      	mov	r5, r2
   839d4:	4606      	mov	r6, r0
   839d6:	460f      	mov	r7, r1
   839d8:	2b00      	cmp	r3, #0
   839da:	d13f      	bne.n	83a5c <__divdi3+0x9c>
   839dc:	428a      	cmp	r2, r1
   839de:	d958      	bls.n	83a92 <__divdi3+0xd2>
   839e0:	fab2 f382 	clz	r3, r2
   839e4:	b14b      	cbz	r3, 839fa <__divdi3+0x3a>
   839e6:	f1c3 0220 	rsb	r2, r3, #32
   839ea:	fa01 f703 	lsl.w	r7, r1, r3
   839ee:	fa20 f202 	lsr.w	r2, r0, r2
   839f2:	409d      	lsls	r5, r3
   839f4:	fa00 f603 	lsl.w	r6, r0, r3
   839f8:	4317      	orrs	r7, r2
   839fa:	0c29      	lsrs	r1, r5, #16
   839fc:	fbb7 f2f1 	udiv	r2, r7, r1
   83a00:	fb01 7712 	mls	r7, r1, r2, r7
   83a04:	b2a8      	uxth	r0, r5
   83a06:	fb00 f302 	mul.w	r3, r0, r2
   83a0a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83a0e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83a12:	42bb      	cmp	r3, r7
   83a14:	d909      	bls.n	83a2a <__divdi3+0x6a>
   83a16:	197f      	adds	r7, r7, r5
   83a18:	f102 3cff 	add.w	ip, r2, #4294967295
   83a1c:	f080 8105 	bcs.w	83c2a <__divdi3+0x26a>
   83a20:	42bb      	cmp	r3, r7
   83a22:	f240 8102 	bls.w	83c2a <__divdi3+0x26a>
   83a26:	3a02      	subs	r2, #2
   83a28:	442f      	add	r7, r5
   83a2a:	1aff      	subs	r7, r7, r3
   83a2c:	fbb7 f3f1 	udiv	r3, r7, r1
   83a30:	fb01 7113 	mls	r1, r1, r3, r7
   83a34:	fb00 f003 	mul.w	r0, r0, r3
   83a38:	b2b6      	uxth	r6, r6
   83a3a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83a3e:	4288      	cmp	r0, r1
   83a40:	d908      	bls.n	83a54 <__divdi3+0x94>
   83a42:	1949      	adds	r1, r1, r5
   83a44:	f103 37ff 	add.w	r7, r3, #4294967295
   83a48:	f080 80f1 	bcs.w	83c2e <__divdi3+0x26e>
   83a4c:	4288      	cmp	r0, r1
   83a4e:	f240 80ee 	bls.w	83c2e <__divdi3+0x26e>
   83a52:	3b02      	subs	r3, #2
   83a54:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83a58:	2300      	movs	r3, #0
   83a5a:	e003      	b.n	83a64 <__divdi3+0xa4>
   83a5c:	428b      	cmp	r3, r1
   83a5e:	d90a      	bls.n	83a76 <__divdi3+0xb6>
   83a60:	2300      	movs	r3, #0
   83a62:	461a      	mov	r2, r3
   83a64:	4610      	mov	r0, r2
   83a66:	4619      	mov	r1, r3
   83a68:	b114      	cbz	r4, 83a70 <__divdi3+0xb0>
   83a6a:	4240      	negs	r0, r0
   83a6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83a70:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83a74:	4770      	bx	lr
   83a76:	fab3 f883 	clz	r8, r3
   83a7a:	f1b8 0f00 	cmp.w	r8, #0
   83a7e:	f040 8088 	bne.w	83b92 <__divdi3+0x1d2>
   83a82:	428b      	cmp	r3, r1
   83a84:	d302      	bcc.n	83a8c <__divdi3+0xcc>
   83a86:	4282      	cmp	r2, r0
   83a88:	f200 80e2 	bhi.w	83c50 <__divdi3+0x290>
   83a8c:	2300      	movs	r3, #0
   83a8e:	2201      	movs	r2, #1
   83a90:	e7e8      	b.n	83a64 <__divdi3+0xa4>
   83a92:	b912      	cbnz	r2, 83a9a <__divdi3+0xda>
   83a94:	2301      	movs	r3, #1
   83a96:	fbb3 f5f2 	udiv	r5, r3, r2
   83a9a:	fab5 f285 	clz	r2, r5
   83a9e:	2a00      	cmp	r2, #0
   83aa0:	d13a      	bne.n	83b18 <__divdi3+0x158>
   83aa2:	1b7f      	subs	r7, r7, r5
   83aa4:	0c28      	lsrs	r0, r5, #16
   83aa6:	fa1f fc85 	uxth.w	ip, r5
   83aaa:	2301      	movs	r3, #1
   83aac:	fbb7 f1f0 	udiv	r1, r7, r0
   83ab0:	fb00 7711 	mls	r7, r0, r1, r7
   83ab4:	fb0c f201 	mul.w	r2, ip, r1
   83ab8:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83abc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83ac0:	42ba      	cmp	r2, r7
   83ac2:	d907      	bls.n	83ad4 <__divdi3+0x114>
   83ac4:	197f      	adds	r7, r7, r5
   83ac6:	f101 38ff 	add.w	r8, r1, #4294967295
   83aca:	d202      	bcs.n	83ad2 <__divdi3+0x112>
   83acc:	42ba      	cmp	r2, r7
   83ace:	f200 80c4 	bhi.w	83c5a <__divdi3+0x29a>
   83ad2:	4641      	mov	r1, r8
   83ad4:	1abf      	subs	r7, r7, r2
   83ad6:	fbb7 f2f0 	udiv	r2, r7, r0
   83ada:	fb00 7012 	mls	r0, r0, r2, r7
   83ade:	fb0c fc02 	mul.w	ip, ip, r2
   83ae2:	b2b6      	uxth	r6, r6
   83ae4:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83ae8:	4584      	cmp	ip, r0
   83aea:	d907      	bls.n	83afc <__divdi3+0x13c>
   83aec:	1940      	adds	r0, r0, r5
   83aee:	f102 37ff 	add.w	r7, r2, #4294967295
   83af2:	d202      	bcs.n	83afa <__divdi3+0x13a>
   83af4:	4584      	cmp	ip, r0
   83af6:	f200 80ae 	bhi.w	83c56 <__divdi3+0x296>
   83afa:	463a      	mov	r2, r7
   83afc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83b00:	e7b0      	b.n	83a64 <__divdi3+0xa4>
   83b02:	43e4      	mvns	r4, r4
   83b04:	4252      	negs	r2, r2
   83b06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83b0a:	e762      	b.n	839d2 <__divdi3+0x12>
   83b0c:	4240      	negs	r0, r0
   83b0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83b12:	f04f 34ff 	mov.w	r4, #4294967295
   83b16:	e759      	b.n	839cc <__divdi3+0xc>
   83b18:	4095      	lsls	r5, r2
   83b1a:	f1c2 0920 	rsb	r9, r2, #32
   83b1e:	fa27 f109 	lsr.w	r1, r7, r9
   83b22:	fa26 f909 	lsr.w	r9, r6, r9
   83b26:	4097      	lsls	r7, r2
   83b28:	0c28      	lsrs	r0, r5, #16
   83b2a:	fbb1 f8f0 	udiv	r8, r1, r0
   83b2e:	fb00 1118 	mls	r1, r0, r8, r1
   83b32:	fa1f fc85 	uxth.w	ip, r5
   83b36:	fb0c f308 	mul.w	r3, ip, r8
   83b3a:	ea49 0907 	orr.w	r9, r9, r7
   83b3e:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83b42:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83b46:	428b      	cmp	r3, r1
   83b48:	fa06 f602 	lsl.w	r6, r6, r2
   83b4c:	d908      	bls.n	83b60 <__divdi3+0x1a0>
   83b4e:	1949      	adds	r1, r1, r5
   83b50:	f108 32ff 	add.w	r2, r8, #4294967295
   83b54:	d27a      	bcs.n	83c4c <__divdi3+0x28c>
   83b56:	428b      	cmp	r3, r1
   83b58:	d978      	bls.n	83c4c <__divdi3+0x28c>
   83b5a:	f1a8 0802 	sub.w	r8, r8, #2
   83b5e:	4429      	add	r1, r5
   83b60:	1ac9      	subs	r1, r1, r3
   83b62:	fbb1 f3f0 	udiv	r3, r1, r0
   83b66:	fb00 1713 	mls	r7, r0, r3, r1
   83b6a:	fb0c f203 	mul.w	r2, ip, r3
   83b6e:	fa1f f989 	uxth.w	r9, r9
   83b72:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83b76:	42ba      	cmp	r2, r7
   83b78:	d907      	bls.n	83b8a <__divdi3+0x1ca>
   83b7a:	197f      	adds	r7, r7, r5
   83b7c:	f103 31ff 	add.w	r1, r3, #4294967295
   83b80:	d260      	bcs.n	83c44 <__divdi3+0x284>
   83b82:	42ba      	cmp	r2, r7
   83b84:	d95e      	bls.n	83c44 <__divdi3+0x284>
   83b86:	3b02      	subs	r3, #2
   83b88:	442f      	add	r7, r5
   83b8a:	1abf      	subs	r7, r7, r2
   83b8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83b90:	e78c      	b.n	83aac <__divdi3+0xec>
   83b92:	f1c8 0220 	rsb	r2, r8, #32
   83b96:	fa25 f102 	lsr.w	r1, r5, r2
   83b9a:	fa03 fc08 	lsl.w	ip, r3, r8
   83b9e:	fa27 f302 	lsr.w	r3, r7, r2
   83ba2:	fa20 f202 	lsr.w	r2, r0, r2
   83ba6:	fa07 f708 	lsl.w	r7, r7, r8
   83baa:	ea41 0c0c 	orr.w	ip, r1, ip
   83bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83bb2:	fbb3 f1f9 	udiv	r1, r3, r9
   83bb6:	fb09 3311 	mls	r3, r9, r1, r3
   83bba:	fa1f fa8c 	uxth.w	sl, ip
   83bbe:	fb0a fb01 	mul.w	fp, sl, r1
   83bc2:	4317      	orrs	r7, r2
   83bc4:	0c3a      	lsrs	r2, r7, #16
   83bc6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83bca:	459b      	cmp	fp, r3
   83bcc:	fa05 f008 	lsl.w	r0, r5, r8
   83bd0:	d908      	bls.n	83be4 <__divdi3+0x224>
   83bd2:	eb13 030c 	adds.w	r3, r3, ip
   83bd6:	f101 32ff 	add.w	r2, r1, #4294967295
   83bda:	d235      	bcs.n	83c48 <__divdi3+0x288>
   83bdc:	459b      	cmp	fp, r3
   83bde:	d933      	bls.n	83c48 <__divdi3+0x288>
   83be0:	3902      	subs	r1, #2
   83be2:	4463      	add	r3, ip
   83be4:	ebcb 0303 	rsb	r3, fp, r3
   83be8:	fbb3 f2f9 	udiv	r2, r3, r9
   83bec:	fb09 3312 	mls	r3, r9, r2, r3
   83bf0:	fb0a fa02 	mul.w	sl, sl, r2
   83bf4:	b2bf      	uxth	r7, r7
   83bf6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83bfa:	45ba      	cmp	sl, r7
   83bfc:	d908      	bls.n	83c10 <__divdi3+0x250>
   83bfe:	eb17 070c 	adds.w	r7, r7, ip
   83c02:	f102 33ff 	add.w	r3, r2, #4294967295
   83c06:	d21b      	bcs.n	83c40 <__divdi3+0x280>
   83c08:	45ba      	cmp	sl, r7
   83c0a:	d919      	bls.n	83c40 <__divdi3+0x280>
   83c0c:	3a02      	subs	r2, #2
   83c0e:	4467      	add	r7, ip
   83c10:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83c14:	fba5 0100 	umull	r0, r1, r5, r0
   83c18:	ebca 0707 	rsb	r7, sl, r7
   83c1c:	428f      	cmp	r7, r1
   83c1e:	f04f 0300 	mov.w	r3, #0
   83c22:	d30a      	bcc.n	83c3a <__divdi3+0x27a>
   83c24:	d005      	beq.n	83c32 <__divdi3+0x272>
   83c26:	462a      	mov	r2, r5
   83c28:	e71c      	b.n	83a64 <__divdi3+0xa4>
   83c2a:	4662      	mov	r2, ip
   83c2c:	e6fd      	b.n	83a2a <__divdi3+0x6a>
   83c2e:	463b      	mov	r3, r7
   83c30:	e710      	b.n	83a54 <__divdi3+0x94>
   83c32:	fa06 f608 	lsl.w	r6, r6, r8
   83c36:	4286      	cmp	r6, r0
   83c38:	d2f5      	bcs.n	83c26 <__divdi3+0x266>
   83c3a:	1e6a      	subs	r2, r5, #1
   83c3c:	2300      	movs	r3, #0
   83c3e:	e711      	b.n	83a64 <__divdi3+0xa4>
   83c40:	461a      	mov	r2, r3
   83c42:	e7e5      	b.n	83c10 <__divdi3+0x250>
   83c44:	460b      	mov	r3, r1
   83c46:	e7a0      	b.n	83b8a <__divdi3+0x1ca>
   83c48:	4611      	mov	r1, r2
   83c4a:	e7cb      	b.n	83be4 <__divdi3+0x224>
   83c4c:	4690      	mov	r8, r2
   83c4e:	e787      	b.n	83b60 <__divdi3+0x1a0>
   83c50:	4643      	mov	r3, r8
   83c52:	4642      	mov	r2, r8
   83c54:	e706      	b.n	83a64 <__divdi3+0xa4>
   83c56:	3a02      	subs	r2, #2
   83c58:	e750      	b.n	83afc <__divdi3+0x13c>
   83c5a:	3902      	subs	r1, #2
   83c5c:	442f      	add	r7, r5
   83c5e:	e739      	b.n	83ad4 <__divdi3+0x114>

00083c60 <__udivdi3>:
   83c60:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83c64:	4614      	mov	r4, r2
   83c66:	4605      	mov	r5, r0
   83c68:	460e      	mov	r6, r1
   83c6a:	2b00      	cmp	r3, #0
   83c6c:	d143      	bne.n	83cf6 <__udivdi3+0x96>
   83c6e:	428a      	cmp	r2, r1
   83c70:	d953      	bls.n	83d1a <__udivdi3+0xba>
   83c72:	fab2 f782 	clz	r7, r2
   83c76:	b157      	cbz	r7, 83c8e <__udivdi3+0x2e>
   83c78:	f1c7 0620 	rsb	r6, r7, #32
   83c7c:	fa20 f606 	lsr.w	r6, r0, r6
   83c80:	fa01 f307 	lsl.w	r3, r1, r7
   83c84:	fa02 f407 	lsl.w	r4, r2, r7
   83c88:	fa00 f507 	lsl.w	r5, r0, r7
   83c8c:	431e      	orrs	r6, r3
   83c8e:	0c21      	lsrs	r1, r4, #16
   83c90:	fbb6 f2f1 	udiv	r2, r6, r1
   83c94:	fb01 6612 	mls	r6, r1, r2, r6
   83c98:	b2a0      	uxth	r0, r4
   83c9a:	fb00 f302 	mul.w	r3, r0, r2
   83c9e:	0c2f      	lsrs	r7, r5, #16
   83ca0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83ca4:	42b3      	cmp	r3, r6
   83ca6:	d909      	bls.n	83cbc <__udivdi3+0x5c>
   83ca8:	1936      	adds	r6, r6, r4
   83caa:	f102 37ff 	add.w	r7, r2, #4294967295
   83cae:	f080 80fd 	bcs.w	83eac <__udivdi3+0x24c>
   83cb2:	42b3      	cmp	r3, r6
   83cb4:	f240 80fa 	bls.w	83eac <__udivdi3+0x24c>
   83cb8:	3a02      	subs	r2, #2
   83cba:	4426      	add	r6, r4
   83cbc:	1af6      	subs	r6, r6, r3
   83cbe:	fbb6 f3f1 	udiv	r3, r6, r1
   83cc2:	fb01 6113 	mls	r1, r1, r3, r6
   83cc6:	fb00 f003 	mul.w	r0, r0, r3
   83cca:	b2ad      	uxth	r5, r5
   83ccc:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83cd0:	4288      	cmp	r0, r1
   83cd2:	d908      	bls.n	83ce6 <__udivdi3+0x86>
   83cd4:	1909      	adds	r1, r1, r4
   83cd6:	f103 36ff 	add.w	r6, r3, #4294967295
   83cda:	f080 80e9 	bcs.w	83eb0 <__udivdi3+0x250>
   83cde:	4288      	cmp	r0, r1
   83ce0:	f240 80e6 	bls.w	83eb0 <__udivdi3+0x250>
   83ce4:	3b02      	subs	r3, #2
   83ce6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83cea:	2300      	movs	r3, #0
   83cec:	4610      	mov	r0, r2
   83cee:	4619      	mov	r1, r3
   83cf0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83cf4:	4770      	bx	lr
   83cf6:	428b      	cmp	r3, r1
   83cf8:	d84c      	bhi.n	83d94 <__udivdi3+0x134>
   83cfa:	fab3 f683 	clz	r6, r3
   83cfe:	2e00      	cmp	r6, #0
   83d00:	d14f      	bne.n	83da2 <__udivdi3+0x142>
   83d02:	428b      	cmp	r3, r1
   83d04:	d302      	bcc.n	83d0c <__udivdi3+0xac>
   83d06:	4282      	cmp	r2, r0
   83d08:	f200 80dd 	bhi.w	83ec6 <__udivdi3+0x266>
   83d0c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d10:	2300      	movs	r3, #0
   83d12:	2201      	movs	r2, #1
   83d14:	4610      	mov	r0, r2
   83d16:	4619      	mov	r1, r3
   83d18:	4770      	bx	lr
   83d1a:	b912      	cbnz	r2, 83d22 <__udivdi3+0xc2>
   83d1c:	2401      	movs	r4, #1
   83d1e:	fbb4 f4f2 	udiv	r4, r4, r2
   83d22:	fab4 f284 	clz	r2, r4
   83d26:	2a00      	cmp	r2, #0
   83d28:	f040 8082 	bne.w	83e30 <__udivdi3+0x1d0>
   83d2c:	1b09      	subs	r1, r1, r4
   83d2e:	0c26      	lsrs	r6, r4, #16
   83d30:	b2a7      	uxth	r7, r4
   83d32:	2301      	movs	r3, #1
   83d34:	fbb1 f0f6 	udiv	r0, r1, r6
   83d38:	fb06 1110 	mls	r1, r6, r0, r1
   83d3c:	fb07 f200 	mul.w	r2, r7, r0
   83d40:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83d44:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83d48:	428a      	cmp	r2, r1
   83d4a:	d907      	bls.n	83d5c <__udivdi3+0xfc>
   83d4c:	1909      	adds	r1, r1, r4
   83d4e:	f100 3cff 	add.w	ip, r0, #4294967295
   83d52:	d202      	bcs.n	83d5a <__udivdi3+0xfa>
   83d54:	428a      	cmp	r2, r1
   83d56:	f200 80c8 	bhi.w	83eea <__udivdi3+0x28a>
   83d5a:	4660      	mov	r0, ip
   83d5c:	1a89      	subs	r1, r1, r2
   83d5e:	fbb1 f2f6 	udiv	r2, r1, r6
   83d62:	fb06 1112 	mls	r1, r6, r2, r1
   83d66:	fb07 f702 	mul.w	r7, r7, r2
   83d6a:	b2ad      	uxth	r5, r5
   83d6c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83d70:	42af      	cmp	r7, r5
   83d72:	d908      	bls.n	83d86 <__udivdi3+0x126>
   83d74:	192c      	adds	r4, r5, r4
   83d76:	f102 31ff 	add.w	r1, r2, #4294967295
   83d7a:	f080 809b 	bcs.w	83eb4 <__udivdi3+0x254>
   83d7e:	42a7      	cmp	r7, r4
   83d80:	f240 8098 	bls.w	83eb4 <__udivdi3+0x254>
   83d84:	3a02      	subs	r2, #2
   83d86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83d8a:	4610      	mov	r0, r2
   83d8c:	4619      	mov	r1, r3
   83d8e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d92:	4770      	bx	lr
   83d94:	2300      	movs	r3, #0
   83d96:	461a      	mov	r2, r3
   83d98:	4610      	mov	r0, r2
   83d9a:	4619      	mov	r1, r3
   83d9c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83da0:	4770      	bx	lr
   83da2:	f1c6 0520 	rsb	r5, r6, #32
   83da6:	fa22 f705 	lsr.w	r7, r2, r5
   83daa:	fa03 f406 	lsl.w	r4, r3, r6
   83dae:	fa21 f305 	lsr.w	r3, r1, r5
   83db2:	fa01 fb06 	lsl.w	fp, r1, r6
   83db6:	fa20 f505 	lsr.w	r5, r0, r5
   83dba:	433c      	orrs	r4, r7
   83dbc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83dc0:	fbb3 fcf8 	udiv	ip, r3, r8
   83dc4:	fb08 331c 	mls	r3, r8, ip, r3
   83dc8:	fa1f f984 	uxth.w	r9, r4
   83dcc:	fb09 fa0c 	mul.w	sl, r9, ip
   83dd0:	ea45 0b0b 	orr.w	fp, r5, fp
   83dd4:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83dd8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83ddc:	459a      	cmp	sl, r3
   83dde:	fa02 f206 	lsl.w	r2, r2, r6
   83de2:	d904      	bls.n	83dee <__udivdi3+0x18e>
   83de4:	191b      	adds	r3, r3, r4
   83de6:	f10c 35ff 	add.w	r5, ip, #4294967295
   83dea:	d36f      	bcc.n	83ecc <__udivdi3+0x26c>
   83dec:	46ac      	mov	ip, r5
   83dee:	ebca 0303 	rsb	r3, sl, r3
   83df2:	fbb3 f5f8 	udiv	r5, r3, r8
   83df6:	fb08 3315 	mls	r3, r8, r5, r3
   83dfa:	fb09 f905 	mul.w	r9, r9, r5
   83dfe:	fa1f fb8b 	uxth.w	fp, fp
   83e02:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83e06:	45b9      	cmp	r9, r7
   83e08:	d904      	bls.n	83e14 <__udivdi3+0x1b4>
   83e0a:	193f      	adds	r7, r7, r4
   83e0c:	f105 33ff 	add.w	r3, r5, #4294967295
   83e10:	d362      	bcc.n	83ed8 <__udivdi3+0x278>
   83e12:	461d      	mov	r5, r3
   83e14:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83e18:	fbac 2302 	umull	r2, r3, ip, r2
   83e1c:	ebc9 0707 	rsb	r7, r9, r7
   83e20:	429f      	cmp	r7, r3
   83e22:	f04f 0500 	mov.w	r5, #0
   83e26:	d34a      	bcc.n	83ebe <__udivdi3+0x25e>
   83e28:	d046      	beq.n	83eb8 <__udivdi3+0x258>
   83e2a:	4662      	mov	r2, ip
   83e2c:	462b      	mov	r3, r5
   83e2e:	e75d      	b.n	83cec <__udivdi3+0x8c>
   83e30:	4094      	lsls	r4, r2
   83e32:	f1c2 0920 	rsb	r9, r2, #32
   83e36:	fa21 fc09 	lsr.w	ip, r1, r9
   83e3a:	4091      	lsls	r1, r2
   83e3c:	fa20 f909 	lsr.w	r9, r0, r9
   83e40:	0c26      	lsrs	r6, r4, #16
   83e42:	fbbc f8f6 	udiv	r8, ip, r6
   83e46:	fb06 cc18 	mls	ip, r6, r8, ip
   83e4a:	b2a7      	uxth	r7, r4
   83e4c:	fb07 f308 	mul.w	r3, r7, r8
   83e50:	ea49 0901 	orr.w	r9, r9, r1
   83e54:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83e58:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83e5c:	4563      	cmp	r3, ip
   83e5e:	fa00 f502 	lsl.w	r5, r0, r2
   83e62:	d909      	bls.n	83e78 <__udivdi3+0x218>
   83e64:	eb1c 0c04 	adds.w	ip, ip, r4
   83e68:	f108 32ff 	add.w	r2, r8, #4294967295
   83e6c:	d23b      	bcs.n	83ee6 <__udivdi3+0x286>
   83e6e:	4563      	cmp	r3, ip
   83e70:	d939      	bls.n	83ee6 <__udivdi3+0x286>
   83e72:	f1a8 0802 	sub.w	r8, r8, #2
   83e76:	44a4      	add	ip, r4
   83e78:	ebc3 0c0c 	rsb	ip, r3, ip
   83e7c:	fbbc f3f6 	udiv	r3, ip, r6
   83e80:	fb06 c113 	mls	r1, r6, r3, ip
   83e84:	fb07 f203 	mul.w	r2, r7, r3
   83e88:	fa1f f989 	uxth.w	r9, r9
   83e8c:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83e90:	428a      	cmp	r2, r1
   83e92:	d907      	bls.n	83ea4 <__udivdi3+0x244>
   83e94:	1909      	adds	r1, r1, r4
   83e96:	f103 30ff 	add.w	r0, r3, #4294967295
   83e9a:	d222      	bcs.n	83ee2 <__udivdi3+0x282>
   83e9c:	428a      	cmp	r2, r1
   83e9e:	d920      	bls.n	83ee2 <__udivdi3+0x282>
   83ea0:	3b02      	subs	r3, #2
   83ea2:	4421      	add	r1, r4
   83ea4:	1a89      	subs	r1, r1, r2
   83ea6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83eaa:	e743      	b.n	83d34 <__udivdi3+0xd4>
   83eac:	463a      	mov	r2, r7
   83eae:	e705      	b.n	83cbc <__udivdi3+0x5c>
   83eb0:	4633      	mov	r3, r6
   83eb2:	e718      	b.n	83ce6 <__udivdi3+0x86>
   83eb4:	460a      	mov	r2, r1
   83eb6:	e766      	b.n	83d86 <__udivdi3+0x126>
   83eb8:	40b0      	lsls	r0, r6
   83eba:	4290      	cmp	r0, r2
   83ebc:	d2b5      	bcs.n	83e2a <__udivdi3+0x1ca>
   83ebe:	f10c 32ff 	add.w	r2, ip, #4294967295
   83ec2:	2300      	movs	r3, #0
   83ec4:	e712      	b.n	83cec <__udivdi3+0x8c>
   83ec6:	4633      	mov	r3, r6
   83ec8:	4632      	mov	r2, r6
   83eca:	e70f      	b.n	83cec <__udivdi3+0x8c>
   83ecc:	459a      	cmp	sl, r3
   83ece:	d98d      	bls.n	83dec <__udivdi3+0x18c>
   83ed0:	f1ac 0c02 	sub.w	ip, ip, #2
   83ed4:	4423      	add	r3, r4
   83ed6:	e78a      	b.n	83dee <__udivdi3+0x18e>
   83ed8:	45b9      	cmp	r9, r7
   83eda:	d99a      	bls.n	83e12 <__udivdi3+0x1b2>
   83edc:	3d02      	subs	r5, #2
   83ede:	4427      	add	r7, r4
   83ee0:	e798      	b.n	83e14 <__udivdi3+0x1b4>
   83ee2:	4603      	mov	r3, r0
   83ee4:	e7de      	b.n	83ea4 <__udivdi3+0x244>
   83ee6:	4690      	mov	r8, r2
   83ee8:	e7c6      	b.n	83e78 <__udivdi3+0x218>
   83eea:	3802      	subs	r0, #2
   83eec:	4421      	add	r1, r4
   83eee:	e735      	b.n	83d5c <__udivdi3+0xfc>
   83ef0:	72617453 	.word	0x72617453
   83ef4:	00726174 	.word	0x00726174
   83ef8:	2065200a 	.word	0x2065200a
   83efc:	6425203d 	.word	0x6425203d
   83f00:	00000000 	.word	0x00000000
   83f04:	5f73200a 	.word	0x5f73200a
   83f08:	756c6176 	.word	0x756c6176
   83f0c:	203d2065 	.word	0x203d2065
   83f10:	00006425 	.word	0x00006425
   83f14:	5f6d200a 	.word	0x5f6d200a
   83f18:	756c6176 	.word	0x756c6176
   83f1c:	203d2065 	.word	0x203d2065
   83f20:	00006425 	.word	0x00006425
   83f24:	00000001 	.word	0x00000001
   83f28:	00000002 	.word	0x00000002
   83f2c:	00000004 	.word	0x00000004
   83f30:	00000008 	.word	0x00000008
   83f34:	00000010 	.word	0x00000010
   83f38:	00000020 	.word	0x00000020
   83f3c:	00000040 	.word	0x00000040
   83f40:	00000080 	.word	0x00000080
   83f44:	00000100 	.word	0x00000100
   83f48:	00000200 	.word	0x00000200
   83f4c:	00000400 	.word	0x00000400
   83f50:	00000043 	.word	0x00000043

00083f54 <_global_impure_ptr>:
   83f54:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   83f64:	46454443 00000000 33323130 37363534     CDEF....01234567
   83f74:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83f84:	0000296c                                l)..

00083f88 <zeroes.6721>:
   83f88:	30303030 30303030 30303030 30303030     0000000000000000

00083f98 <blanks.6720>:
   83f98:	20202020 20202020 20202020 20202020                     

00083fa8 <_init>:
   83fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83faa:	bf00      	nop
   83fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83fae:	bc08      	pop	{r3}
   83fb0:	469e      	mov	lr, r3
   83fb2:	4770      	bx	lr

00083fb4 <__init_array_start>:
   83fb4:	00081fe5 	.word	0x00081fe5

00083fb8 <__frame_dummy_init_array_entry>:
   83fb8:	00080119                                ....

00083fbc <_fini>:
   83fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83fbe:	bf00      	nop
   83fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83fc2:	bc08      	pop	{r3}
   83fc4:	469e      	mov	lr, r3
   83fc6:	4770      	bx	lr

00083fc8 <__fini_array_start>:
   83fc8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070134 	.word	0x20070134

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <kp>:
2007012c:	07080001                                         ..

2007012e <speed>:
2007012e:	00010708                                         ..

20070130 <g_interrupt_enabled>:
20070130:	00000001                                ....

20070134 <SystemCoreClock>:
20070134:	003d0900                                ..=.

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00083f50 00000000 00000000 00000000     P?..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <lc_ctype_charset>:
20070564:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070584 <__mb_cur_max>:
20070584:	00000001                                ....

20070588 <__malloc_av_>:
	...
20070590:	20070588 20070588 20070590 20070590     ... ... ... ... 
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 

20070990 <__malloc_trim_threshold>:
20070990:	00020000                                ....

20070994 <__malloc_sbrk_base>:
20070994:	ffffffff                                ....

20070998 <__wctomb>:
20070998:	000836f5                                .6..
