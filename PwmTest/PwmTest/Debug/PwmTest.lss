
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009cc  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000568  20070000  000809cc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000b4  20070568  00080f34  00010568  2**2
                  ALLOC
  3 .stack        00002004  2007061c  00080fe8  00010568  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010568  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010591  2**0
                  CONTENTS, READONLY
  6 .debug_info   000063ca  00000000  00000000  000105ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000104d  00000000  00000000  000169b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002a88  00000000  00000000  00017a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005c8  00000000  00000000  0001a48b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000528  00000000  00000000  0001aa53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014d27  00000000  00000000  0001af7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007eb4  00000000  00000000  0002fca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005f197  00000000  00000000  00037b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c98  00000000  00000000  00096cf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072620 	.word	0x20072620
   80004:	0008077d 	.word	0x0008077d
   80008:	00080779 	.word	0x00080779
   8000c:	00080779 	.word	0x00080779
   80010:	00080779 	.word	0x00080779
   80014:	00080779 	.word	0x00080779
   80018:	00080779 	.word	0x00080779
	...
   8002c:	00080779 	.word	0x00080779
   80030:	00080779 	.word	0x00080779
   80034:	00000000 	.word	0x00000000
   80038:	00080779 	.word	0x00080779
   8003c:	00080779 	.word	0x00080779
   80040:	00080779 	.word	0x00080779
   80044:	00080779 	.word	0x00080779
   80048:	00080779 	.word	0x00080779
   8004c:	00080779 	.word	0x00080779
   80050:	00080779 	.word	0x00080779
   80054:	00080779 	.word	0x00080779
   80058:	00080779 	.word	0x00080779
   8005c:	00080779 	.word	0x00080779
   80060:	00080779 	.word	0x00080779
   80064:	00080779 	.word	0x00080779
   80068:	00000000 	.word	0x00000000
   8006c:	000804f9 	.word	0x000804f9
   80070:	0008050d 	.word	0x0008050d
   80074:	00080521 	.word	0x00080521
   80078:	00080535 	.word	0x00080535
	...
   80084:	00080779 	.word	0x00080779
   80088:	00080779 	.word	0x00080779
   8008c:	00080779 	.word	0x00080779
   80090:	00080779 	.word	0x00080779
   80094:	00080779 	.word	0x00080779
   80098:	00080779 	.word	0x00080779
   8009c:	00080779 	.word	0x00080779
   800a0:	00080779 	.word	0x00080779
   800a4:	00000000 	.word	0x00000000
   800a8:	00080779 	.word	0x00080779
   800ac:	00080779 	.word	0x00080779
   800b0:	00080779 	.word	0x00080779
   800b4:	00080779 	.word	0x00080779
   800b8:	00080779 	.word	0x00080779
   800bc:	00080779 	.word	0x00080779
   800c0:	00080779 	.word	0x00080779
   800c4:	00080779 	.word	0x00080779
   800c8:	00080779 	.word	0x00080779
   800cc:	00080779 	.word	0x00080779
   800d0:	00080779 	.word	0x00080779
   800d4:	00080779 	.word	0x00080779
   800d8:	00080779 	.word	0x00080779
   800dc:	00080779 	.word	0x00080779
   800e0:	00080779 	.word	0x00080779
   800e4:	00080779 	.word	0x00080779
   800e8:	00080779 	.word	0x00080779
   800ec:	00080779 	.word	0x00080779
   800f0:	00080779 	.word	0x00080779

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070568 	.word	0x20070568
   80110:	00000000 	.word	0x00000000
   80114:	000809cc 	.word	0x000809cc

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000809cc 	.word	0x000809cc
   8013c:	2007056c 	.word	0x2007056c
   80140:	000809cc 	.word	0x000809cc
   80144:	00000000 	.word	0x00000000

00080148 <main>:
 * \return Unused (ANSI-C compatibility).
 */
#define PWM_PIN IOPORT_CREATE_PIN(PIOC, 21)
pwm_channel_t pwm_channel_instance;
int main(void)
{
   80148:	b5f0      	push	{r4, r5, r6, r7, lr}
   8014a:	b085      	sub	sp, #20
    /* Initialize the SAM system */
    SystemInit();
   8014c:	4b20      	ldr	r3, [pc, #128]	; (801d0 <main+0x88>)
   8014e:	4798      	blx	r3
	board_init();
   80150:	4b20      	ldr	r3, [pc, #128]	; (801d4 <main+0x8c>)
   80152:	4798      	blx	r3
	
	pio_configure_pin(PWM_PIN, PIO_TYPE_PIO_PERIPH_B);
   80154:	2055      	movs	r0, #85	; 0x55
   80156:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8015a:	4b1f      	ldr	r3, [pc, #124]	; (801d8 <main+0x90>)
   8015c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PWM);
   8015e:	2024      	movs	r0, #36	; 0x24
   80160:	4b1e      	ldr	r3, [pc, #120]	; (801dc <main+0x94>)
   80162:	4798      	blx	r3
	
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   80164:	4c1e      	ldr	r4, [pc, #120]	; (801e0 <main+0x98>)
   80166:	4620      	mov	r0, r4
   80168:	2104      	movs	r1, #4
   8016a:	4b1e      	ldr	r3, [pc, #120]	; (801e4 <main+0x9c>)
   8016c:	4798      	blx	r3
	
	pwm_clock_t PWMDAC_clock_config = {
   8016e:	4b1e      	ldr	r3, [pc, #120]	; (801e8 <main+0xa0>)
   80170:	9301      	str	r3, [sp, #4]
   80172:	2500      	movs	r5, #0
   80174:	9502      	str	r5, [sp, #8]
   80176:	4b1d      	ldr	r3, [pc, #116]	; (801ec <main+0xa4>)
   80178:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	
	pwm_init(PWM, &PWMDAC_clock_config);
   8017a:	4620      	mov	r0, r4
   8017c:	a901      	add	r1, sp, #4
   8017e:	4b1c      	ldr	r3, [pc, #112]	; (801f0 <main+0xa8>)
   80180:	4798      	blx	r3
	
	pwm_channel_instance.channel = PWM_CHANNEL_4;
   80182:	491c      	ldr	r1, [pc, #112]	; (801f4 <main+0xac>)
   80184:	2604      	movs	r6, #4
   80186:	600e      	str	r6, [r1, #0]
	pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80188:	220b      	movs	r2, #11
   8018a:	604a      	str	r2, [r1, #4]
	pwm_channel_instance.polarity = PWM_HIGH;
   8018c:	2201      	movs	r2, #1
   8018e:	728a      	strb	r2, [r1, #10]
	pwm_channel_instance.alignment = PWM_ALIGN_LEFT;
   80190:	810d      	strh	r5, [r1, #8]
	pwm_channel_instance.ul_period = 2000;
   80192:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   80196:	610a      	str	r2, [r1, #16]
	pwm_channel_instance.ul_duty = 0;
   80198:	60cd      	str	r5, [r1, #12]
	
	pwm_channel_init(PWM, &pwm_channel_instance);
   8019a:	4620      	mov	r0, r4
   8019c:	4b16      	ldr	r3, [pc, #88]	; (801f8 <main+0xb0>)
   8019e:	4798      	blx	r3
	
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   801a0:	4620      	mov	r0, r4
   801a2:	4631      	mov	r1, r6
   801a4:	4b15      	ldr	r3, [pc, #84]	; (801fc <main+0xb4>)
   801a6:	4798      	blx	r3

    while (1) 
    {
        //TODO:: Please write your application code 
		for (uint32_t i = 1000; i<=2000;i++)
   801a8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		{
			pwm_channel_update_duty(PWM, &pwm_channel_instance, i );
   801ac:	4f0c      	ldr	r7, [pc, #48]	; (801e0 <main+0x98>)
   801ae:	4e11      	ldr	r6, [pc, #68]	; (801f4 <main+0xac>)
   801b0:	4d13      	ldr	r5, [pc, #76]	; (80200 <main+0xb8>)
   801b2:	4638      	mov	r0, r7
   801b4:	4631      	mov	r1, r6
   801b6:	4622      	mov	r2, r4
   801b8:	47a8      	blx	r5
			delay_us(5500);
   801ba:	f248 00e8 	movw	r0, #33000	; 0x80e8
   801be:	4b11      	ldr	r3, [pc, #68]	; (80204 <main+0xbc>)
   801c0:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_4);

    while (1) 
    {
        //TODO:: Please write your application code 
		for (uint32_t i = 1000; i<=2000;i++)
   801c2:	3401      	adds	r4, #1
   801c4:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   801c8:	bf88      	it	hi
   801ca:	f44f 747a 	movhi.w	r4, #1000	; 0x3e8
   801ce:	e7f0      	b.n	801b2 <main+0x6a>
   801d0:	2007000d 	.word	0x2007000d
   801d4:	00080209 	.word	0x00080209
   801d8:	0008032d 	.word	0x0008032d
   801dc:	00080549 	.word	0x00080549
   801e0:	40094000 	.word	0x40094000
   801e4:	0008076d 	.word	0x0008076d
   801e8:	000f4240 	.word	0x000f4240
   801ec:	0501bd00 	.word	0x0501bd00
   801f0:	000805f9 	.word	0x000805f9
   801f4:	200705f4 	.word	0x200705f4
   801f8:	00080639 	.word	0x00080639
   801fc:	00080761 	.word	0x00080761
   80200:	0008073d 	.word	0x0008073d
   80204:	20070001 	.word	0x20070001

00080208 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80208:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8020a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8020e:	4b17      	ldr	r3, [pc, #92]	; (8026c <board_init+0x64>)
   80210:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80212:	200b      	movs	r0, #11
   80214:	4c16      	ldr	r4, [pc, #88]	; (80270 <board_init+0x68>)
   80216:	47a0      	blx	r4
   80218:	200c      	movs	r0, #12
   8021a:	47a0      	blx	r4
   8021c:	200d      	movs	r0, #13
   8021e:	47a0      	blx	r4
   80220:	200e      	movs	r0, #14
   80222:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80224:	203b      	movs	r0, #59	; 0x3b
   80226:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8022a:	4c12      	ldr	r4, [pc, #72]	; (80274 <board_init+0x6c>)
   8022c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8022e:	2055      	movs	r0, #85	; 0x55
   80230:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80234:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80236:	2056      	movs	r0, #86	; 0x56
   80238:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8023c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8023e:	2068      	movs	r0, #104	; 0x68
   80240:	490d      	ldr	r1, [pc, #52]	; (80278 <board_init+0x70>)
   80242:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80244:	205c      	movs	r0, #92	; 0x5c
   80246:	490d      	ldr	r1, [pc, #52]	; (8027c <board_init+0x74>)
   80248:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8024a:	480d      	ldr	r0, [pc, #52]	; (80280 <board_init+0x78>)
   8024c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80250:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80254:	4b0b      	ldr	r3, [pc, #44]	; (80284 <board_init+0x7c>)
   80256:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80258:	202b      	movs	r0, #43	; 0x2b
   8025a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8025e:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80260:	202a      	movs	r0, #42	; 0x2a
   80262:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80266:	47a0      	blx	r4
   80268:	bd10      	pop	{r4, pc}
   8026a:	bf00      	nop
   8026c:	400e1a50 	.word	0x400e1a50
   80270:	00080549 	.word	0x00080549
   80274:	0008032d 	.word	0x0008032d
   80278:	28000079 	.word	0x28000079
   8027c:	28000001 	.word	0x28000001
   80280:	400e0e00 	.word	0x400e0e00
   80284:	00080401 	.word	0x00080401

00080288 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80288:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8028a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8028e:	d016      	beq.n	802be <pio_set_peripheral+0x36>
   80290:	d804      	bhi.n	8029c <pio_set_peripheral+0x14>
   80292:	b1c1      	cbz	r1, 802c6 <pio_set_peripheral+0x3e>
   80294:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80298:	d00a      	beq.n	802b0 <pio_set_peripheral+0x28>
   8029a:	e013      	b.n	802c4 <pio_set_peripheral+0x3c>
   8029c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   802a0:	d011      	beq.n	802c6 <pio_set_peripheral+0x3e>
   802a2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   802a6:	d00e      	beq.n	802c6 <pio_set_peripheral+0x3e>
   802a8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   802ac:	d10a      	bne.n	802c4 <pio_set_peripheral+0x3c>
   802ae:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   802b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   802b2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   802b4:	400b      	ands	r3, r1
   802b6:	ea23 0302 	bic.w	r3, r3, r2
   802ba:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   802bc:	e002      	b.n	802c4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   802be:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   802c0:	4313      	orrs	r3, r2
   802c2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   802c4:	6042      	str	r2, [r0, #4]
   802c6:	4770      	bx	lr

000802c8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   802c8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802ca:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   802ce:	bf14      	ite	ne
   802d0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802d2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   802d4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   802d8:	bf14      	ite	ne
   802da:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   802dc:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   802de:	f012 0f02 	tst.w	r2, #2
   802e2:	d002      	beq.n	802ea <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   802e4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   802e8:	e004      	b.n	802f4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   802ea:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   802ee:	bf18      	it	ne
   802f0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   802f4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   802f6:	6001      	str	r1, [r0, #0]
   802f8:	4770      	bx	lr
   802fa:	bf00      	nop

000802fc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   802fc:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   802fe:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80300:	9c01      	ldr	r4, [sp, #4]
   80302:	b10c      	cbz	r4, 80308 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80304:	6641      	str	r1, [r0, #100]	; 0x64
   80306:	e000      	b.n	8030a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80308:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8030a:	b10b      	cbz	r3, 80310 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8030c:	6501      	str	r1, [r0, #80]	; 0x50
   8030e:	e000      	b.n	80312 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80310:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80312:	b10a      	cbz	r2, 80318 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80314:	6301      	str	r1, [r0, #48]	; 0x30
   80316:	e000      	b.n	8031a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80318:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8031a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8031c:	6001      	str	r1, [r0, #0]
}
   8031e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80322:	4770      	bx	lr

00080324 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80324:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80326:	4770      	bx	lr

00080328 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80328:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8032a:	4770      	bx	lr

0008032c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8032c:	b570      	push	{r4, r5, r6, lr}
   8032e:	b082      	sub	sp, #8
   80330:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80332:	0944      	lsrs	r4, r0, #5
   80334:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80338:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8033c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8033e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80342:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80346:	d030      	beq.n	803aa <pio_configure_pin+0x7e>
   80348:	d806      	bhi.n	80358 <pio_configure_pin+0x2c>
   8034a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8034e:	d00a      	beq.n	80366 <pio_configure_pin+0x3a>
   80350:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80354:	d018      	beq.n	80388 <pio_configure_pin+0x5c>
   80356:	e049      	b.n	803ec <pio_configure_pin+0xc0>
   80358:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8035c:	d030      	beq.n	803c0 <pio_configure_pin+0x94>
   8035e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80362:	d02d      	beq.n	803c0 <pio_configure_pin+0x94>
   80364:	e042      	b.n	803ec <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80366:	f000 001f 	and.w	r0, r0, #31
   8036a:	2401      	movs	r4, #1
   8036c:	4084      	lsls	r4, r0
   8036e:	4630      	mov	r0, r6
   80370:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80374:	4622      	mov	r2, r4
   80376:	4b1f      	ldr	r3, [pc, #124]	; (803f4 <pio_configure_pin+0xc8>)
   80378:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8037a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8037e:	bf14      	ite	ne
   80380:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80382:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80384:	2001      	movs	r0, #1
   80386:	e032      	b.n	803ee <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80388:	f000 001f 	and.w	r0, r0, #31
   8038c:	2401      	movs	r4, #1
   8038e:	4084      	lsls	r4, r0
   80390:	4630      	mov	r0, r6
   80392:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80396:	4622      	mov	r2, r4
   80398:	4b16      	ldr	r3, [pc, #88]	; (803f4 <pio_configure_pin+0xc8>)
   8039a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8039c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803a0:	bf14      	ite	ne
   803a2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803a4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803a6:	2001      	movs	r0, #1
   803a8:	e021      	b.n	803ee <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   803aa:	f000 011f 	and.w	r1, r0, #31
   803ae:	2401      	movs	r4, #1
   803b0:	4630      	mov	r0, r6
   803b2:	fa04 f101 	lsl.w	r1, r4, r1
   803b6:	462a      	mov	r2, r5
   803b8:	4b0f      	ldr	r3, [pc, #60]	; (803f8 <pio_configure_pin+0xcc>)
   803ba:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   803bc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   803be:	e016      	b.n	803ee <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   803c0:	f000 011f 	and.w	r1, r0, #31
   803c4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   803c6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   803ca:	ea05 0304 	and.w	r3, r5, r4
   803ce:	9300      	str	r3, [sp, #0]
   803d0:	4630      	mov	r0, r6
   803d2:	fa04 f101 	lsl.w	r1, r4, r1
   803d6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   803da:	bf14      	ite	ne
   803dc:	2200      	movne	r2, #0
   803de:	2201      	moveq	r2, #1
   803e0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   803e4:	4d05      	ldr	r5, [pc, #20]	; (803fc <pio_configure_pin+0xd0>)
   803e6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   803e8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   803ea:	e000      	b.n	803ee <pio_configure_pin+0xc2>

	default:
		return 0;
   803ec:	2000      	movs	r0, #0
	}

	return 1;
}
   803ee:	b002      	add	sp, #8
   803f0:	bd70      	pop	{r4, r5, r6, pc}
   803f2:	bf00      	nop
   803f4:	00080289 	.word	0x00080289
   803f8:	000802c9 	.word	0x000802c9
   803fc:	000802fd 	.word	0x000802fd

00080400 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80400:	b5f0      	push	{r4, r5, r6, r7, lr}
   80402:	b083      	sub	sp, #12
   80404:	4607      	mov	r7, r0
   80406:	460e      	mov	r6, r1
   80408:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8040a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8040e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80412:	d026      	beq.n	80462 <pio_configure_pin_group+0x62>
   80414:	d806      	bhi.n	80424 <pio_configure_pin_group+0x24>
   80416:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8041a:	d00a      	beq.n	80432 <pio_configure_pin_group+0x32>
   8041c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80420:	d013      	beq.n	8044a <pio_configure_pin_group+0x4a>
   80422:	e034      	b.n	8048e <pio_configure_pin_group+0x8e>
   80424:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80428:	d01f      	beq.n	8046a <pio_configure_pin_group+0x6a>
   8042a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8042e:	d01c      	beq.n	8046a <pio_configure_pin_group+0x6a>
   80430:	e02d      	b.n	8048e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80432:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80436:	4632      	mov	r2, r6
   80438:	4b16      	ldr	r3, [pc, #88]	; (80494 <pio_configure_pin_group+0x94>)
   8043a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8043c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80440:	bf14      	ite	ne
   80442:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80444:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80446:	2001      	movs	r0, #1
   80448:	e022      	b.n	80490 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8044a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8044e:	4632      	mov	r2, r6
   80450:	4b10      	ldr	r3, [pc, #64]	; (80494 <pio_configure_pin_group+0x94>)
   80452:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80454:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80458:	bf14      	ite	ne
   8045a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8045c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8045e:	2001      	movs	r0, #1
   80460:	e016      	b.n	80490 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80462:	4b0d      	ldr	r3, [pc, #52]	; (80498 <pio_configure_pin_group+0x98>)
   80464:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80466:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80468:	e012      	b.n	80490 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8046a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8046e:	f005 0301 	and.w	r3, r5, #1
   80472:	9300      	str	r3, [sp, #0]
   80474:	4638      	mov	r0, r7
   80476:	4631      	mov	r1, r6
   80478:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8047c:	bf14      	ite	ne
   8047e:	2200      	movne	r2, #0
   80480:	2201      	moveq	r2, #1
   80482:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80486:	4c05      	ldr	r4, [pc, #20]	; (8049c <pio_configure_pin_group+0x9c>)
   80488:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8048a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8048c:	e000      	b.n	80490 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8048e:	2000      	movs	r0, #0
	}

	return 1;
}
   80490:	b003      	add	sp, #12
   80492:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80494:	00080289 	.word	0x00080289
   80498:	000802c9 	.word	0x000802c9
   8049c:	000802fd 	.word	0x000802fd

000804a0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   804a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804a4:	4604      	mov	r4, r0
   804a6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   804a8:	4b10      	ldr	r3, [pc, #64]	; (804ec <pio_handler_process+0x4c>)
   804aa:	4798      	blx	r3
   804ac:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   804ae:	4620      	mov	r0, r4
   804b0:	4b0f      	ldr	r3, [pc, #60]	; (804f0 <pio_handler_process+0x50>)
   804b2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   804b4:	4005      	ands	r5, r0
   804b6:	d017      	beq.n	804e8 <pio_handler_process+0x48>
   804b8:	4f0e      	ldr	r7, [pc, #56]	; (804f4 <pio_handler_process+0x54>)
   804ba:	f107 040c 	add.w	r4, r7, #12
   804be:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   804c0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   804c4:	42b3      	cmp	r3, r6
   804c6:	d10a      	bne.n	804de <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   804c8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   804cc:	4229      	tst	r1, r5
   804ce:	d006      	beq.n	804de <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   804d0:	6823      	ldr	r3, [r4, #0]
   804d2:	4630      	mov	r0, r6
   804d4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   804d6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   804da:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   804de:	42bc      	cmp	r4, r7
   804e0:	d002      	beq.n	804e8 <pio_handler_process+0x48>
   804e2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   804e4:	2d00      	cmp	r5, #0
   804e6:	d1eb      	bne.n	804c0 <pio_handler_process+0x20>
   804e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804ec:	00080325 	.word	0x00080325
   804f0:	00080329 	.word	0x00080329
   804f4:	20070584 	.word	0x20070584

000804f8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   804f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   804fa:	4802      	ldr	r0, [pc, #8]	; (80504 <PIOA_Handler+0xc>)
   804fc:	210b      	movs	r1, #11
   804fe:	4b02      	ldr	r3, [pc, #8]	; (80508 <PIOA_Handler+0x10>)
   80500:	4798      	blx	r3
   80502:	bd08      	pop	{r3, pc}
   80504:	400e0e00 	.word	0x400e0e00
   80508:	000804a1 	.word	0x000804a1

0008050c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8050c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8050e:	4802      	ldr	r0, [pc, #8]	; (80518 <PIOB_Handler+0xc>)
   80510:	210c      	movs	r1, #12
   80512:	4b02      	ldr	r3, [pc, #8]	; (8051c <PIOB_Handler+0x10>)
   80514:	4798      	blx	r3
   80516:	bd08      	pop	{r3, pc}
   80518:	400e1000 	.word	0x400e1000
   8051c:	000804a1 	.word	0x000804a1

00080520 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80520:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80522:	4802      	ldr	r0, [pc, #8]	; (8052c <PIOC_Handler+0xc>)
   80524:	210d      	movs	r1, #13
   80526:	4b02      	ldr	r3, [pc, #8]	; (80530 <PIOC_Handler+0x10>)
   80528:	4798      	blx	r3
   8052a:	bd08      	pop	{r3, pc}
   8052c:	400e1200 	.word	0x400e1200
   80530:	000804a1 	.word	0x000804a1

00080534 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80534:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80536:	4802      	ldr	r0, [pc, #8]	; (80540 <PIOD_Handler+0xc>)
   80538:	210e      	movs	r1, #14
   8053a:	4b02      	ldr	r3, [pc, #8]	; (80544 <PIOD_Handler+0x10>)
   8053c:	4798      	blx	r3
   8053e:	bd08      	pop	{r3, pc}
   80540:	400e1400 	.word	0x400e1400
   80544:	000804a1 	.word	0x000804a1

00080548 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80548:	282c      	cmp	r0, #44	; 0x2c
   8054a:	d820      	bhi.n	8058e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   8054c:	281f      	cmp	r0, #31
   8054e:	d80d      	bhi.n	8056c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80550:	4b12      	ldr	r3, [pc, #72]	; (8059c <pmc_enable_periph_clk+0x54>)
   80552:	699a      	ldr	r2, [r3, #24]
   80554:	2301      	movs	r3, #1
   80556:	4083      	lsls	r3, r0
   80558:	401a      	ands	r2, r3
   8055a:	4293      	cmp	r3, r2
   8055c:	d019      	beq.n	80592 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8055e:	2301      	movs	r3, #1
   80560:	fa03 f000 	lsl.w	r0, r3, r0
   80564:	4b0d      	ldr	r3, [pc, #52]	; (8059c <pmc_enable_periph_clk+0x54>)
   80566:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80568:	2000      	movs	r0, #0
   8056a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8056c:	4b0b      	ldr	r3, [pc, #44]	; (8059c <pmc_enable_periph_clk+0x54>)
   8056e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80572:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80574:	2301      	movs	r3, #1
   80576:	4083      	lsls	r3, r0
   80578:	401a      	ands	r2, r3
   8057a:	4293      	cmp	r3, r2
   8057c:	d00b      	beq.n	80596 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8057e:	2301      	movs	r3, #1
   80580:	fa03 f000 	lsl.w	r0, r3, r0
   80584:	4b05      	ldr	r3, [pc, #20]	; (8059c <pmc_enable_periph_clk+0x54>)
   80586:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8058a:	2000      	movs	r0, #0
   8058c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8058e:	2001      	movs	r0, #1
   80590:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80592:	2000      	movs	r0, #0
   80594:	4770      	bx	lr
   80596:	2000      	movs	r0, #0
}
   80598:	4770      	bx	lr
   8059a:	bf00      	nop
   8059c:	400e0600 	.word	0x400e0600

000805a0 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   805a0:	b4f0      	push	{r4, r5, r6, r7}
   805a2:	b08c      	sub	sp, #48	; 0x30
   805a4:	4607      	mov	r7, r0
   805a6:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   805a8:	ac01      	add	r4, sp, #4
   805aa:	4d12      	ldr	r5, [pc, #72]	; (805f4 <pwm_clocks_generate+0x54>)
   805ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   805ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   805b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   805b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   805b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   805b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   805bc:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   805be:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   805c0:	f852 4f04 	ldr.w	r4, [r2, #4]!
   805c4:	fbb6 f4f4 	udiv	r4, r6, r4
   805c8:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   805cc:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   805d0:	d903      	bls.n	805da <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   805d2:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   805d4:	2b0b      	cmp	r3, #11
   805d6:	d1f3      	bne.n	805c0 <pwm_clocks_generate+0x20>
   805d8:	e004      	b.n	805e4 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   805da:	2b0a      	cmp	r3, #10
   805dc:	d805      	bhi.n	805ea <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   805de:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   805e2:	e004      	b.n	805ee <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   805e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   805e8:	e001      	b.n	805ee <pwm_clocks_generate+0x4e>
   805ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   805ee:	b00c      	add	sp, #48	; 0x30
   805f0:	bcf0      	pop	{r4, r5, r6, r7}
   805f2:	4770      	bx	lr
   805f4:	00080974 	.word	0x00080974

000805f8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   805f8:	b570      	push	{r4, r5, r6, lr}
   805fa:	4606      	mov	r6, r0
   805fc:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   805fe:	6808      	ldr	r0, [r1, #0]
   80600:	b140      	cbz	r0, 80614 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80602:	6889      	ldr	r1, [r1, #8]
   80604:	4b0b      	ldr	r3, [pc, #44]	; (80634 <pwm_init+0x3c>)
   80606:	4798      	blx	r3
   80608:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8060a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8060e:	4298      	cmp	r0, r3
   80610:	d101      	bne.n	80616 <pwm_init+0x1e>
   80612:	e00e      	b.n	80632 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80614:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80616:	6860      	ldr	r0, [r4, #4]
   80618:	b140      	cbz	r0, 8062c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8061a:	68a1      	ldr	r1, [r4, #8]
   8061c:	4b05      	ldr	r3, [pc, #20]	; (80634 <pwm_init+0x3c>)
   8061e:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80620:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80624:	4298      	cmp	r0, r3
   80626:	d004      	beq.n	80632 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80628:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   8062c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8062e:	2000      	movs	r0, #0
   80630:	bd70      	pop	{r4, r5, r6, pc}
}
   80632:	bd70      	pop	{r4, r5, r6, pc}
   80634:	000805a1 	.word	0x000805a1

00080638 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80638:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8063a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   8063c:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8063e:	684a      	ldr	r2, [r1, #4]
   80640:	f002 020f 	and.w	r2, r2, #15
   80644:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80646:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80648:	432c      	orrs	r4, r5
   8064a:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   8064c:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80650:	7d8a      	ldrb	r2, [r1, #22]
   80652:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80656:	7dca      	ldrb	r2, [r1, #23]
   80658:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   8065c:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8065e:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   80662:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80666:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8066a:	68cc      	ldr	r4, [r1, #12]
   8066c:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80670:	690c      	ldr	r4, [r1, #16]
   80672:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80676:	7d8a      	ldrb	r2, [r1, #22]
   80678:	b13a      	cbz	r2, 8068a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8067a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8067c:	8b4a      	ldrh	r2, [r1, #26]
   8067e:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80682:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   80686:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   8068a:	6c85      	ldr	r5, [r0, #72]	; 0x48
   8068c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80690:	409a      	lsls	r2, r3
   80692:	43d2      	mvns	r2, r2
   80694:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80696:	7fce      	ldrb	r6, [r1, #31]
   80698:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8069a:	7f8c      	ldrb	r4, [r1, #30]
   8069c:	409c      	lsls	r4, r3
   8069e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   806a2:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   806a4:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   806a6:	6c44      	ldr	r4, [r0, #68]	; 0x44
   806a8:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   806aa:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   806ae:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   806b0:	f891 4020 	ldrb.w	r4, [r1, #32]
   806b4:	409c      	lsls	r4, r3
   806b6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   806ba:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   806bc:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   806be:	2201      	movs	r2, #1
   806c0:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   806c2:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   806c6:	b11c      	cbz	r4, 806d0 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   806c8:	6a04      	ldr	r4, [r0, #32]
   806ca:	4314      	orrs	r4, r2
   806cc:	6204      	str	r4, [r0, #32]
   806ce:	e003      	b.n	806d8 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   806d0:	6a04      	ldr	r4, [r0, #32]
   806d2:	ea24 0402 	bic.w	r4, r4, r2
   806d6:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   806d8:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   806dc:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   806de:	6e84      	ldr	r4, [r0, #104]	; 0x68
   806e0:	bf0c      	ite	eq
   806e2:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   806e4:	4394      	bicne	r4, r2
   806e6:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   806e8:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   806ec:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   806ee:	6e84      	ldr	r4, [r0, #104]	; 0x68
   806f0:	bf0c      	ite	eq
   806f2:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   806f6:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   806fa:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   806fc:	2b03      	cmp	r3, #3
   806fe:	d80c      	bhi.n	8071a <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80700:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80702:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80704:	22ff      	movs	r2, #255	; 0xff
   80706:	409a      	lsls	r2, r3
   80708:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8070c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80710:	fa01 f303 	lsl.w	r3, r1, r3
   80714:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80716:	66c3      	str	r3, [r0, #108]	; 0x6c
   80718:	e00c      	b.n	80734 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   8071a:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   8071c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8071e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80720:	22ff      	movs	r2, #255	; 0xff
   80722:	409a      	lsls	r2, r3
   80724:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80728:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8072c:	fa01 f303 	lsl.w	r3, r1, r3
   80730:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80732:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80734:	2000      	movs	r0, #0
   80736:	bc70      	pop	{r4, r5, r6}
   80738:	4770      	bx	lr
   8073a:	bf00      	nop

0008073c <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   8073c:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   8073e:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80740:	690b      	ldr	r3, [r1, #16]
   80742:	4293      	cmp	r3, r2
   80744:	d306      	bcc.n	80754 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80746:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80748:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   8074c:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   80750:	2000      	movs	r0, #0
   80752:	e001      	b.n	80758 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80754:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80758:	f85d 4b04 	ldr.w	r4, [sp], #4
   8075c:	4770      	bx	lr
   8075e:	bf00      	nop

00080760 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80760:	2301      	movs	r3, #1
   80762:	fa03 f101 	lsl.w	r1, r3, r1
   80766:	6041      	str	r1, [r0, #4]
   80768:	4770      	bx	lr
   8076a:	bf00      	nop

0008076c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   8076c:	2301      	movs	r3, #1
   8076e:	fa03 f101 	lsl.w	r1, r3, r1
   80772:	6081      	str	r1, [r0, #8]
   80774:	4770      	bx	lr
   80776:	bf00      	nop

00080778 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80778:	e7fe      	b.n	80778 <Dummy_Handler>
   8077a:	bf00      	nop

0008077c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8077c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8077e:	4b1e      	ldr	r3, [pc, #120]	; (807f8 <Reset_Handler+0x7c>)
   80780:	4a1e      	ldr	r2, [pc, #120]	; (807fc <Reset_Handler+0x80>)
   80782:	429a      	cmp	r2, r3
   80784:	d003      	beq.n	8078e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80786:	4b1e      	ldr	r3, [pc, #120]	; (80800 <Reset_Handler+0x84>)
   80788:	4a1b      	ldr	r2, [pc, #108]	; (807f8 <Reset_Handler+0x7c>)
   8078a:	429a      	cmp	r2, r3
   8078c:	d304      	bcc.n	80798 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8078e:	4b1d      	ldr	r3, [pc, #116]	; (80804 <Reset_Handler+0x88>)
   80790:	4a1d      	ldr	r2, [pc, #116]	; (80808 <Reset_Handler+0x8c>)
   80792:	429a      	cmp	r2, r3
   80794:	d30f      	bcc.n	807b6 <Reset_Handler+0x3a>
   80796:	e01a      	b.n	807ce <Reset_Handler+0x52>
   80798:	4b1c      	ldr	r3, [pc, #112]	; (8080c <Reset_Handler+0x90>)
   8079a:	4c1d      	ldr	r4, [pc, #116]	; (80810 <Reset_Handler+0x94>)
   8079c:	1ae4      	subs	r4, r4, r3
   8079e:	f024 0403 	bic.w	r4, r4, #3
   807a2:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   807a4:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   807a6:	4814      	ldr	r0, [pc, #80]	; (807f8 <Reset_Handler+0x7c>)
   807a8:	4914      	ldr	r1, [pc, #80]	; (807fc <Reset_Handler+0x80>)
   807aa:	585a      	ldr	r2, [r3, r1]
   807ac:	501a      	str	r2, [r3, r0]
   807ae:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   807b0:	42a3      	cmp	r3, r4
   807b2:	d1fa      	bne.n	807aa <Reset_Handler+0x2e>
   807b4:	e7eb      	b.n	8078e <Reset_Handler+0x12>
   807b6:	4b17      	ldr	r3, [pc, #92]	; (80814 <Reset_Handler+0x98>)
   807b8:	4917      	ldr	r1, [pc, #92]	; (80818 <Reset_Handler+0x9c>)
   807ba:	1ac9      	subs	r1, r1, r3
   807bc:	f021 0103 	bic.w	r1, r1, #3
   807c0:	1d1a      	adds	r2, r3, #4
   807c2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   807c4:	2200      	movs	r2, #0
   807c6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   807ca:	428b      	cmp	r3, r1
   807cc:	d1fb      	bne.n	807c6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   807ce:	4a13      	ldr	r2, [pc, #76]	; (8081c <Reset_Handler+0xa0>)
   807d0:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   807d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   807d8:	4911      	ldr	r1, [pc, #68]	; (80820 <Reset_Handler+0xa4>)
   807da:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   807dc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   807e0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   807e4:	d203      	bcs.n	807ee <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   807e6:	688a      	ldr	r2, [r1, #8]
   807e8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   807ec:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   807ee:	4b0d      	ldr	r3, [pc, #52]	; (80824 <Reset_Handler+0xa8>)
   807f0:	4798      	blx	r3

	/* Branch to main function */
	main();
   807f2:	4b0d      	ldr	r3, [pc, #52]	; (80828 <Reset_Handler+0xac>)
   807f4:	4798      	blx	r3
   807f6:	e7fe      	b.n	807f6 <Reset_Handler+0x7a>
   807f8:	20070000 	.word	0x20070000
   807fc:	000809cc 	.word	0x000809cc
   80800:	20070568 	.word	0x20070568
   80804:	2007061c 	.word	0x2007061c
   80808:	20070568 	.word	0x20070568
   8080c:	20070004 	.word	0x20070004
   80810:	2007056b 	.word	0x2007056b
   80814:	20070564 	.word	0x20070564
   80818:	20070617 	.word	0x20070617
   8081c:	00080000 	.word	0x00080000
   80820:	e000ed00 	.word	0xe000ed00
   80824:	0008082d 	.word	0x0008082d
   80828:	00080149 	.word	0x00080149

0008082c <__libc_init_array>:
   8082c:	b570      	push	{r4, r5, r6, lr}
   8082e:	4e0f      	ldr	r6, [pc, #60]	; (8086c <__libc_init_array+0x40>)
   80830:	4d0f      	ldr	r5, [pc, #60]	; (80870 <__libc_init_array+0x44>)
   80832:	1b76      	subs	r6, r6, r5
   80834:	10b6      	asrs	r6, r6, #2
   80836:	d007      	beq.n	80848 <__libc_init_array+0x1c>
   80838:	3d04      	subs	r5, #4
   8083a:	2400      	movs	r4, #0
   8083c:	3401      	adds	r4, #1
   8083e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80842:	4798      	blx	r3
   80844:	42a6      	cmp	r6, r4
   80846:	d1f9      	bne.n	8083c <__libc_init_array+0x10>
   80848:	4e0a      	ldr	r6, [pc, #40]	; (80874 <__libc_init_array+0x48>)
   8084a:	4d0b      	ldr	r5, [pc, #44]	; (80878 <__libc_init_array+0x4c>)
   8084c:	f000 f8ac 	bl	809a8 <_init>
   80850:	1b76      	subs	r6, r6, r5
   80852:	10b6      	asrs	r6, r6, #2
   80854:	d008      	beq.n	80868 <__libc_init_array+0x3c>
   80856:	3d04      	subs	r5, #4
   80858:	2400      	movs	r4, #0
   8085a:	3401      	adds	r4, #1
   8085c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80860:	4798      	blx	r3
   80862:	42a6      	cmp	r6, r4
   80864:	d1f9      	bne.n	8085a <__libc_init_array+0x2e>
   80866:	bd70      	pop	{r4, r5, r6, pc}
   80868:	bd70      	pop	{r4, r5, r6, pc}
   8086a:	bf00      	nop
   8086c:	000809b4 	.word	0x000809b4
   80870:	000809b4 	.word	0x000809b4
   80874:	000809bc 	.word	0x000809bc
   80878:	000809b4 	.word	0x000809b4

0008087c <register_fini>:
   8087c:	4b02      	ldr	r3, [pc, #8]	; (80888 <register_fini+0xc>)
   8087e:	b113      	cbz	r3, 80886 <register_fini+0xa>
   80880:	4802      	ldr	r0, [pc, #8]	; (8088c <register_fini+0x10>)
   80882:	f000 b805 	b.w	80890 <atexit>
   80886:	4770      	bx	lr
   80888:	00000000 	.word	0x00000000
   8088c:	0008089d 	.word	0x0008089d

00080890 <atexit>:
   80890:	4601      	mov	r1, r0
   80892:	2000      	movs	r0, #0
   80894:	4602      	mov	r2, r0
   80896:	4603      	mov	r3, r0
   80898:	f000 b818 	b.w	808cc <__register_exitproc>

0008089c <__libc_fini_array>:
   8089c:	b538      	push	{r3, r4, r5, lr}
   8089e:	4d09      	ldr	r5, [pc, #36]	; (808c4 <__libc_fini_array+0x28>)
   808a0:	4c09      	ldr	r4, [pc, #36]	; (808c8 <__libc_fini_array+0x2c>)
   808a2:	1b64      	subs	r4, r4, r5
   808a4:	10a4      	asrs	r4, r4, #2
   808a6:	bf18      	it	ne
   808a8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   808ac:	d005      	beq.n	808ba <__libc_fini_array+0x1e>
   808ae:	3c01      	subs	r4, #1
   808b0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   808b4:	4798      	blx	r3
   808b6:	2c00      	cmp	r4, #0
   808b8:	d1f9      	bne.n	808ae <__libc_fini_array+0x12>
   808ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   808be:	f000 b87d 	b.w	809bc <_fini>
   808c2:	bf00      	nop
   808c4:	000809c8 	.word	0x000809c8
   808c8:	000809cc 	.word	0x000809cc

000808cc <__register_exitproc>:
   808cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   808ce:	4c27      	ldr	r4, [pc, #156]	; (8096c <__register_exitproc+0xa0>)
   808d0:	b085      	sub	sp, #20
   808d2:	6826      	ldr	r6, [r4, #0]
   808d4:	4607      	mov	r7, r0
   808d6:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   808da:	2c00      	cmp	r4, #0
   808dc:	d040      	beq.n	80960 <__register_exitproc+0x94>
   808de:	6865      	ldr	r5, [r4, #4]
   808e0:	2d1f      	cmp	r5, #31
   808e2:	dd1e      	ble.n	80922 <__register_exitproc+0x56>
   808e4:	4822      	ldr	r0, [pc, #136]	; (80970 <__register_exitproc+0xa4>)
   808e6:	b918      	cbnz	r0, 808f0 <__register_exitproc+0x24>
   808e8:	f04f 30ff 	mov.w	r0, #4294967295
   808ec:	b005      	add	sp, #20
   808ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   808f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   808f4:	9103      	str	r1, [sp, #12]
   808f6:	9202      	str	r2, [sp, #8]
   808f8:	9301      	str	r3, [sp, #4]
   808fa:	f3af 8000 	nop.w
   808fe:	9903      	ldr	r1, [sp, #12]
   80900:	4604      	mov	r4, r0
   80902:	9a02      	ldr	r2, [sp, #8]
   80904:	9b01      	ldr	r3, [sp, #4]
   80906:	2800      	cmp	r0, #0
   80908:	d0ee      	beq.n	808e8 <__register_exitproc+0x1c>
   8090a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8090e:	2000      	movs	r0, #0
   80910:	6025      	str	r5, [r4, #0]
   80912:	6060      	str	r0, [r4, #4]
   80914:	4605      	mov	r5, r0
   80916:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8091a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8091e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   80922:	b93f      	cbnz	r7, 80934 <__register_exitproc+0x68>
   80924:	1c6b      	adds	r3, r5, #1
   80926:	2000      	movs	r0, #0
   80928:	3502      	adds	r5, #2
   8092a:	6063      	str	r3, [r4, #4]
   8092c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   80930:	b005      	add	sp, #20
   80932:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80934:	2601      	movs	r6, #1
   80936:	40ae      	lsls	r6, r5
   80938:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   8093c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   80940:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   80944:	2f02      	cmp	r7, #2
   80946:	ea42 0206 	orr.w	r2, r2, r6
   8094a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8094e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   80952:	d1e7      	bne.n	80924 <__register_exitproc+0x58>
   80954:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   80958:	431e      	orrs	r6, r3
   8095a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8095e:	e7e1      	b.n	80924 <__register_exitproc+0x58>
   80960:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   80964:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   80968:	e7b9      	b.n	808de <__register_exitproc+0x12>
   8096a:	bf00      	nop
   8096c:	000809a4 	.word	0x000809a4
   80970:	00000000 	.word	0x00000000
   80974:	00000001 	.word	0x00000001
   80978:	00000002 	.word	0x00000002
   8097c:	00000004 	.word	0x00000004
   80980:	00000008 	.word	0x00000008
   80984:	00000010 	.word	0x00000010
   80988:	00000020 	.word	0x00000020
   8098c:	00000040 	.word	0x00000040
   80990:	00000080 	.word	0x00000080
   80994:	00000100 	.word	0x00000100
   80998:	00000200 	.word	0x00000200
   8099c:	00000400 	.word	0x00000400
   809a0:	00000043 	.word	0x00000043

000809a4 <_global_impure_ptr>:
   809a4:	20070140                                @.. 

000809a8 <_init>:
   809a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   809aa:	bf00      	nop
   809ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   809ae:	bc08      	pop	{r3}
   809b0:	469e      	mov	lr, r3
   809b2:	4770      	bx	lr

000809b4 <__init_array_start>:
   809b4:	0008087d 	.word	0x0008087d

000809b8 <__frame_dummy_init_array_entry>:
   809b8:	00080119                                ....

000809bc <_fini>:
   809bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   809be:	bf00      	nop
   809c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   809c2:	bc08      	pop	{r3}
   809c4:	469e      	mov	lr, r3
   809c6:	4770      	bx	lr

000809c8 <__fini_array_start>:
   809c8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	000809a0 00000000 00000000 00000000     ................
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...
