
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c14  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000099c  20070000  00083c14  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000001f8  2007099c  000845b0  0001099c  2**2
                  ALLOC
  3 .stack        00002004  20070b94  000847a8  0001099c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012047  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003052  00000000  00000000  00022a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005a1b  00000000  00000000  00025ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c10  00000000  00000000  0002b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a98  00000000  00000000  0002c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a01b  00000000  00000000  0002cb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000140a4  00000000  00000000  00046b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062283  00000000  00000000  0005ac3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002020  00000000  00000000  000bcec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b98 	.word	0x20072b98
   80004:	00081619 	.word	0x00081619
   80008:	00081615 	.word	0x00081615
   8000c:	00081615 	.word	0x00081615
   80010:	00081615 	.word	0x00081615
   80014:	00081615 	.word	0x00081615
   80018:	00081615 	.word	0x00081615
	...
   8002c:	00081615 	.word	0x00081615
   80030:	00081615 	.word	0x00081615
   80034:	00000000 	.word	0x00000000
   80038:	00081615 	.word	0x00081615
   8003c:	00081615 	.word	0x00081615
   80040:	00081615 	.word	0x00081615
   80044:	00081615 	.word	0x00081615
   80048:	00081615 	.word	0x00081615
   8004c:	00081615 	.word	0x00081615
   80050:	00081615 	.word	0x00081615
   80054:	00081615 	.word	0x00081615
   80058:	00081615 	.word	0x00081615
   8005c:	00081615 	.word	0x00081615
   80060:	00081615 	.word	0x00081615
   80064:	00081615 	.word	0x00081615
   80068:	00000000 	.word	0x00000000
   8006c:	00081395 	.word	0x00081395
   80070:	000813a9 	.word	0x000813a9
   80074:	000813bd 	.word	0x000813bd
   80078:	000813d1 	.word	0x000813d1
	...
   80084:	00080589 	.word	0x00080589
   80088:	000808d9 	.word	0x000808d9
   8008c:	00081615 	.word	0x00081615
   80090:	00081615 	.word	0x00081615
   80094:	00081615 	.word	0x00081615
   80098:	00081615 	.word	0x00081615
   8009c:	00081615 	.word	0x00081615
   800a0:	00081615 	.word	0x00081615
   800a4:	00000000 	.word	0x00000000
   800a8:	00081615 	.word	0x00081615
   800ac:	00081615 	.word	0x00081615
   800b0:	00081615 	.word	0x00081615
   800b4:	00081615 	.word	0x00081615
   800b8:	00081615 	.word	0x00081615
   800bc:	00081615 	.word	0x00081615
   800c0:	00081615 	.word	0x00081615
   800c4:	00081615 	.word	0x00081615
   800c8:	00081615 	.word	0x00081615
   800cc:	00081615 	.word	0x00081615
   800d0:	00081615 	.word	0x00081615
   800d4:	00081615 	.word	0x00081615
   800d8:	00081615 	.word	0x00081615
   800dc:	00081615 	.word	0x00081615
   800e0:	00081615 	.word	0x00081615
   800e4:	00081615 	.word	0x00081615
   800e8:	00081615 	.word	0x00081615
   800ec:	00081615 	.word	0x00081615
   800f0:	00081615 	.word	0x00081615

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007099c 	.word	0x2007099c
   80110:	00000000 	.word	0x00000000
   80114:	00083c14 	.word	0x00083c14

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083c14 	.word	0x00083c14
   8013c:	200709a0 	.word	0x200709a0
   80140:	00083c14 	.word	0x00083c14
   80144:	00000000 	.word	0x00000000

00080148 <main>:
extern int lastPosition [1][1]={0,-100};
extern int presentPosition [1][1]={0,0};


int main()
{
   80148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8014c:	b089      	sub	sp, #36	; 0x24
	/* Initialize the SAM system */
	SystemInit();
   8014e:	4b54      	ldr	r3, [pc, #336]	; (802a0 <main+0x158>)
   80150:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   80152:	4b54      	ldr	r3, [pc, #336]	; (802a4 <main+0x15c>)
   80154:	4798      	blx	r3
	configureConsole();
   80156:	4b54      	ldr	r3, [pc, #336]	; (802a8 <main+0x160>)
   80158:	4798      	blx	r3
	configInterrupts();
   8015a:	4b54      	ldr	r3, [pc, #336]	; (802ac <main+0x164>)
   8015c:	4798      	blx	r3
	PWM_init();
   8015e:	4b54      	ldr	r3, [pc, #336]	; (802b0 <main+0x168>)
   80160:	4798      	blx	r3
    delay_s(2);
   80162:	4854      	ldr	r0, [pc, #336]	; (802b4 <main+0x16c>)
   80164:	4f54      	ldr	r7, [pc, #336]	; (802b8 <main+0x170>)
   80166:	47b8      	blx	r7
moveTo(100,1);
   80168:	2064      	movs	r0, #100	; 0x64
   8016a:	2101      	movs	r1, #1
   8016c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 802e4 <main+0x19c>
   80170:	47c0      	blx	r8
delay_s(3);
   80172:	4852      	ldr	r0, [pc, #328]	; (802bc <main+0x174>)
   80174:	47b8      	blx	r7
rotation(calcluteRotationAngle(0,-100,0,0,100,100),130);
   80176:	2400      	movs	r4, #0
   80178:	2500      	movs	r5, #0
   8017a:	e9cd 4500 	strd	r4, r5, [sp]
   8017e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   80182:	f04f 0a00 	mov.w	sl, #0
   80186:	f8df b160 	ldr.w	fp, [pc, #352]	; 802e8 <main+0x1a0>
   8018a:	e9cd ab04 	strd	sl, fp, [sp, #16]
   8018e:	e9cd ab06 	strd	sl, fp, [sp, #24]
   80192:	4620      	mov	r0, r4
   80194:	4629      	mov	r1, r5
   80196:	2200      	movs	r2, #0
   80198:	4b49      	ldr	r3, [pc, #292]	; (802c0 <main+0x178>)
   8019a:	4e4a      	ldr	r6, [pc, #296]	; (802c4 <main+0x17c>)
   8019c:	47b0      	blx	r6
   8019e:	4e4a      	ldr	r6, [pc, #296]	; (802c8 <main+0x180>)
   801a0:	47b0      	blx	r6
   801a2:	2182      	movs	r1, #130	; 0x82
   801a4:	f8df c12c 	ldr.w	ip, [pc, #300]	; 802d4 <main+0x18c>
   801a8:	47e0      	blx	ip
moveTo(calculateDistance(0,0,100,100),1);
   801aa:	e9cd ab00 	strd	sl, fp, [sp]
   801ae:	e9cd ab02 	strd	sl, fp, [sp, #8]
   801b2:	4620      	mov	r0, r4
   801b4:	4629      	mov	r1, r5
   801b6:	4622      	mov	r2, r4
   801b8:	462b      	mov	r3, r5
   801ba:	f8df c110 	ldr.w	ip, [pc, #272]	; 802cc <main+0x184>
   801be:	47e0      	blx	ip
   801c0:	47b0      	blx	r6
   801c2:	2101      	movs	r1, #1
   801c4:	47c0      	blx	r8

delay_s(5);
   801c6:	f8df 9124 	ldr.w	r9, [pc, #292]	; 802ec <main+0x1a4>
   801ca:	4648      	mov	r0, r9
   801cc:	47b8      	blx	r7
rotation(calcluteRotationAngle(0,0,100,100,-100,300),130);
   801ce:	e9cd ab00 	strd	sl, fp, [sp]
   801d2:	e9cd ab02 	strd	sl, fp, [sp, #8]
   801d6:	2200      	movs	r2, #0
   801d8:	4b39      	ldr	r3, [pc, #228]	; (802c0 <main+0x178>)
   801da:	e9cd 2304 	strd	r2, r3, [sp, #16]
   801de:	a32e      	add	r3, pc, #184	; (adr r3, 80298 <main+0x150>)
   801e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   801e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   801e8:	4620      	mov	r0, r4
   801ea:	4629      	mov	r1, r5
   801ec:	4622      	mov	r2, r4
   801ee:	462b      	mov	r3, r5
   801f0:	4c34      	ldr	r4, [pc, #208]	; (802c4 <main+0x17c>)
   801f2:	47a0      	blx	r4
   801f4:	47b0      	blx	r6
   801f6:	2182      	movs	r1, #130	; 0x82
   801f8:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 802d4 <main+0x18c>
   801fc:	47e0      	blx	ip
moveTo(calculateDistance(100,100,-100,300),1);
   801fe:	2200      	movs	r2, #0
   80200:	4b2f      	ldr	r3, [pc, #188]	; (802c0 <main+0x178>)
   80202:	e9cd 2300 	strd	r2, r3, [sp]
   80206:	a324      	add	r3, pc, #144	; (adr r3, 80298 <main+0x150>)
   80208:	e9d3 2300 	ldrd	r2, r3, [r3]
   8020c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   80210:	4650      	mov	r0, sl
   80212:	4659      	mov	r1, fp
   80214:	4652      	mov	r2, sl
   80216:	465b      	mov	r3, fp
   80218:	4c2c      	ldr	r4, [pc, #176]	; (802cc <main+0x184>)
   8021a:	47a0      	blx	r4
   8021c:	47b0      	blx	r6
   8021e:	2101      	movs	r1, #1
   80220:	47c0      	blx	r8

delay_s(5);
   80222:	4648      	mov	r0, r9
   80224:	47b8      	blx	r7

rotation(calcluteRotationAngle(100,100,-100,300,100,600),130);
   80226:	2200      	movs	r2, #0
   80228:	4b25      	ldr	r3, [pc, #148]	; (802c0 <main+0x178>)
   8022a:	e9cd 2300 	strd	r2, r3, [sp]
   8022e:	a31a      	add	r3, pc, #104	; (adr r3, 80298 <main+0x150>)
   80230:	e9d3 2300 	ldrd	r2, r3, [r3]
   80234:	e9cd 2302 	strd	r2, r3, [sp, #8]
   80238:	e9cd ab04 	strd	sl, fp, [sp, #16]
   8023c:	2400      	movs	r4, #0
   8023e:	4d24      	ldr	r5, [pc, #144]	; (802d0 <main+0x188>)
   80240:	e9cd 4506 	strd	r4, r5, [sp, #24]
   80244:	4650      	mov	r0, sl
   80246:	4659      	mov	r1, fp
   80248:	4652      	mov	r2, sl
   8024a:	465b      	mov	r3, fp
   8024c:	f8df c074 	ldr.w	ip, [pc, #116]	; 802c4 <main+0x17c>
   80250:	47e0      	blx	ip
   80252:	47b0      	blx	r6
   80254:	2182      	movs	r1, #130	; 0x82
   80256:	4a1f      	ldr	r2, [pc, #124]	; (802d4 <main+0x18c>)
   80258:	4790      	blx	r2
moveTo(calculateDistance(-100,300,100,600),1);
   8025a:	e9cd ab00 	strd	sl, fp, [sp]
   8025e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   80262:	2000      	movs	r0, #0
   80264:	4916      	ldr	r1, [pc, #88]	; (802c0 <main+0x178>)
   80266:	a30c      	add	r3, pc, #48	; (adr r3, 80298 <main+0x150>)
   80268:	e9d3 2300 	ldrd	r2, r3, [r3]
   8026c:	4c17      	ldr	r4, [pc, #92]	; (802cc <main+0x184>)
   8026e:	47a0      	blx	r4
   80270:	47b0      	blx	r6
   80272:	2101      	movs	r1, #1
   80274:	47c0      	blx	r8
lastPosition[0][0]= presentPosition[0][0];
   80276:	4a18      	ldr	r2, [pc, #96]	; (802d8 <main+0x190>)
   80278:	4b18      	ldr	r3, [pc, #96]	; (802dc <main+0x194>)
   8027a:	6819      	ldr	r1, [r3, #0]
   8027c:	6011      	str	r1, [r2, #0]
lastPosition[0][1]= presentPosition[0][1];
   8027e:	6859      	ldr	r1, [r3, #4]
   80280:	6051      	str	r1, [r2, #4]
presentPosition[0][0] = objects[2][0];
   80282:	4a17      	ldr	r2, [pc, #92]	; (802e0 <main+0x198>)
   80284:	6911      	ldr	r1, [r2, #16]
   80286:	6019      	str	r1, [r3, #0]
presentPosition[0][1] = objects[2][1];
   80288:	6952      	ldr	r2, [r2, #20]
   8028a:	605a      	str	r2, [r3, #4]
delay_s(5);
   8028c:	4648      	mov	r0, r9
   8028e:	47b8      	blx	r7
// 		  delay_s(3);
// 		  rotation(90,130);
// 		  delay_s(3);
//  	 }
// 	
}
   80290:	2000      	movs	r0, #0
   80292:	b009      	add	sp, #36	; 0x24
   80294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80298:	00000000 	.word	0x00000000
   8029c:	4072c000 	.word	0x4072c000
   802a0:	2007000d 	.word	0x2007000d
   802a4:	000810c1 	.word	0x000810c1
   802a8:	00080745 	.word	0x00080745
   802ac:	00080845 	.word	0x00080845
   802b0:	00081005 	.word	0x00081005
   802b4:	00b71b00 	.word	0x00b71b00
   802b8:	20070001 	.word	0x20070001
   802bc:	0112a880 	.word	0x0112a880
   802c0:	c0590000 	.word	0xc0590000
   802c4:	00080ba1 	.word	0x00080ba1
   802c8:	00082585 	.word	0x00082585
   802cc:	00080921 	.word	0x00080921
   802d0:	4082c000 	.word	0x4082c000
   802d4:	00080ec9 	.word	0x00080ec9
   802d8:	200709bc 	.word	0x200709bc
   802dc:	200709b8 	.word	0x200709b8
   802e0:	2007013c 	.word	0x2007013c
   802e4:	00080c21 	.word	0x00080c21
   802e8:	40590000 	.word	0x40590000
   802ec:	01c9c380 	.word	0x01c9c380

000802f0 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   802f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   802f4:	b083      	sub	sp, #12
   802f6:	4605      	mov	r5, r0
	while (len) {
   802f8:	4690      	mov	r8, r2
   802fa:	2a00      	cmp	r2, #0
   802fc:	d047      	beq.n	8038e <usart_serial_read_packet+0x9e>
   802fe:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80300:	4f25      	ldr	r7, [pc, #148]	; (80398 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80302:	4c26      	ldr	r4, [pc, #152]	; (8039c <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80304:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 803b0 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80308:	f8df b094 	ldr.w	fp, [pc, #148]	; 803a0 <usart_serial_read_packet+0xb0>
   8030c:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80310:	2300      	movs	r3, #0
   80312:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80314:	4b22      	ldr	r3, [pc, #136]	; (803a0 <usart_serial_read_packet+0xb0>)
   80316:	429d      	cmp	r5, r3
   80318:	d106      	bne.n	80328 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   8031a:	4658      	mov	r0, fp
   8031c:	4649      	mov	r1, r9
   8031e:	4b21      	ldr	r3, [pc, #132]	; (803a4 <usart_serial_read_packet+0xb4>)
   80320:	4798      	blx	r3
   80322:	2800      	cmp	r0, #0
   80324:	d1f9      	bne.n	8031a <usart_serial_read_packet+0x2a>
   80326:	e019      	b.n	8035c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80328:	4b1f      	ldr	r3, [pc, #124]	; (803a8 <usart_serial_read_packet+0xb8>)
   8032a:	429d      	cmp	r5, r3
   8032c:	d109      	bne.n	80342 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8032e:	4699      	mov	r9, r3
   80330:	4648      	mov	r0, r9
   80332:	a901      	add	r1, sp, #4
   80334:	47a0      	blx	r4
   80336:	2800      	cmp	r0, #0
   80338:	d1fa      	bne.n	80330 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   8033a:	9b01      	ldr	r3, [sp, #4]
   8033c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80340:	e017      	b.n	80372 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80342:	4b1a      	ldr	r3, [pc, #104]	; (803ac <usart_serial_read_packet+0xbc>)
   80344:	429d      	cmp	r5, r3
   80346:	d109      	bne.n	8035c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80348:	4699      	mov	r9, r3
   8034a:	4648      	mov	r0, r9
   8034c:	a901      	add	r1, sp, #4
   8034e:	47a0      	blx	r4
   80350:	2800      	cmp	r0, #0
   80352:	d1fa      	bne.n	8034a <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80354:	9b01      	ldr	r3, [sp, #4]
   80356:	f806 3c01 	strb.w	r3, [r6, #-1]
   8035a:	e014      	b.n	80386 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8035c:	4555      	cmp	r5, sl
   8035e:	d108      	bne.n	80372 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80360:	4650      	mov	r0, sl
   80362:	a901      	add	r1, sp, #4
   80364:	47a0      	blx	r4
   80366:	2800      	cmp	r0, #0
   80368:	d1fa      	bne.n	80360 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   8036a:	9b01      	ldr	r3, [sp, #4]
   8036c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80370:	e009      	b.n	80386 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80372:	42bd      	cmp	r5, r7
   80374:	d107      	bne.n	80386 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80376:	4638      	mov	r0, r7
   80378:	a901      	add	r1, sp, #4
   8037a:	47a0      	blx	r4
   8037c:	2800      	cmp	r0, #0
   8037e:	d1fa      	bne.n	80376 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80380:	9b01      	ldr	r3, [sp, #4]
   80382:	f806 3c01 	strb.w	r3, [r6, #-1]
   80386:	3601      	adds	r6, #1
   80388:	f1b8 0801 	subs.w	r8, r8, #1
   8038c:	d1be      	bne.n	8030c <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8038e:	2000      	movs	r0, #0
   80390:	b003      	add	sp, #12
   80392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80396:	bf00      	nop
   80398:	400a4000 	.word	0x400a4000
   8039c:	00080571 	.word	0x00080571
   803a0:	400e0800 	.word	0x400e0800
   803a4:	00080459 	.word	0x00080459
   803a8:	40098000 	.word	0x40098000
   803ac:	4009c000 	.word	0x4009c000
   803b0:	400a0000 	.word	0x400a0000

000803b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   803b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803b8:	460c      	mov	r4, r1
   803ba:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   803bc:	b960      	cbnz	r0, 803d8 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   803be:	2a00      	cmp	r2, #0
   803c0:	dd0e      	ble.n	803e0 <_read+0x2c>
   803c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   803c4:	4e09      	ldr	r6, [pc, #36]	; (803ec <_read+0x38>)
   803c6:	4d0a      	ldr	r5, [pc, #40]	; (803f0 <_read+0x3c>)
   803c8:	6830      	ldr	r0, [r6, #0]
   803ca:	4621      	mov	r1, r4
   803cc:	682b      	ldr	r3, [r5, #0]
   803ce:	4798      	blx	r3
		ptr++;
   803d0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   803d2:	42bc      	cmp	r4, r7
   803d4:	d1f8      	bne.n	803c8 <_read+0x14>
   803d6:	e006      	b.n	803e6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   803d8:	f04f 30ff 	mov.w	r0, #4294967295
   803dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   803e0:	2000      	movs	r0, #0
   803e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   803e6:	4640      	mov	r0, r8
	}
	return nChars;
}
   803e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803ec:	20070b3c 	.word	0x20070b3c
   803f0:	20070b34 	.word	0x20070b34

000803f4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   803f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803f8:	460e      	mov	r6, r1
   803fa:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   803fc:	3801      	subs	r0, #1
   803fe:	2802      	cmp	r0, #2
   80400:	d80f      	bhi.n	80422 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80402:	b192      	cbz	r2, 8042a <_write+0x36>
   80404:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80406:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80444 <_write+0x50>
   8040a:	4f0d      	ldr	r7, [pc, #52]	; (80440 <_write+0x4c>)
   8040c:	f8d8 0000 	ldr.w	r0, [r8]
   80410:	5d31      	ldrb	r1, [r6, r4]
   80412:	683b      	ldr	r3, [r7, #0]
   80414:	4798      	blx	r3
   80416:	2800      	cmp	r0, #0
   80418:	db0a      	blt.n	80430 <_write+0x3c>
			return -1;
		}
		++nChars;
   8041a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8041c:	42a5      	cmp	r5, r4
   8041e:	d1f5      	bne.n	8040c <_write+0x18>
   80420:	e00a      	b.n	80438 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80422:	f04f 30ff 	mov.w	r0, #4294967295
   80426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8042a:	2000      	movs	r0, #0
   8042c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80430:	f04f 30ff 	mov.w	r0, #4294967295
   80434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80438:	4620      	mov	r0, r4
	}
	return nChars;
}
   8043a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8043e:	bf00      	nop
   80440:	20070b38 	.word	0x20070b38
   80444:	20070b3c 	.word	0x20070b3c

00080448 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80448:	6943      	ldr	r3, [r0, #20]
   8044a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8044e:	bf1a      	itte	ne
   80450:	61c1      	strne	r1, [r0, #28]
	return 0;
   80452:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80454:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80456:	4770      	bx	lr

00080458 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80458:	6943      	ldr	r3, [r0, #20]
   8045a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8045e:	bf1d      	ittte	ne
   80460:	6983      	ldrne	r3, [r0, #24]
   80462:	700b      	strbne	r3, [r1, #0]
	return 0;
   80464:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80466:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80468:	4770      	bx	lr
   8046a:	bf00      	nop

0008046c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8046c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8046e:	010b      	lsls	r3, r1, #4
   80470:	4293      	cmp	r3, r2
   80472:	d90d      	bls.n	80490 <usart_set_async_baudrate+0x24>
   80474:	e01a      	b.n	804ac <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   80476:	6841      	ldr	r1, [r0, #4]
   80478:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8047c:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   8047e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   80482:	6203      	str	r3, [r0, #32]

	return 0;
   80484:	2000      	movs	r0, #0
   80486:	e020      	b.n	804ca <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   80488:	2001      	movs	r0, #1
   8048a:	e01e      	b.n	804ca <usart_set_async_baudrate+0x5e>
   8048c:	2001      	movs	r0, #1
   8048e:	e01c      	b.n	804ca <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80490:	00d2      	lsls	r2, r2, #3
   80492:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   80496:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
   8049a:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   8049c:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   804a0:	1e54      	subs	r4, r2, #1
   804a2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   804a6:	428c      	cmp	r4, r1
   804a8:	d9e9      	bls.n	8047e <usart_set_async_baudrate+0x12>
   804aa:	e7ed      	b.n	80488 <usart_set_async_baudrate+0x1c>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   804ac:	00c9      	lsls	r1, r1, #3
   804ae:	00d3      	lsls	r3, r2, #3
   804b0:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   804b4:	fbb3 f3f1 	udiv	r3, r3, r1
	cd = cd_fp >> 3;
   804b8:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   804ba:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   804be:	1e54      	subs	r4, r2, #1
   804c0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   804c4:	428c      	cmp	r4, r1
   804c6:	d9d6      	bls.n	80476 <usart_set_async_baudrate+0xa>
   804c8:	e7e0      	b.n	8048c <usart_set_async_baudrate+0x20>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   804ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   804ce:	4770      	bx	lr

000804d0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   804d0:	4b08      	ldr	r3, [pc, #32]	; (804f4 <usart_reset+0x24>)
   804d2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   804d6:	2300      	movs	r3, #0
   804d8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   804da:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   804dc:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   804de:	2388      	movs	r3, #136	; 0x88
   804e0:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   804e2:	2324      	movs	r3, #36	; 0x24
   804e4:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   804e6:	f44f 7380 	mov.w	r3, #256	; 0x100
   804ea:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   804ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   804f0:	6003      	str	r3, [r0, #0]
   804f2:	4770      	bx	lr
   804f4:	55534100 	.word	0x55534100

000804f8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   804f8:	b570      	push	{r4, r5, r6, lr}
   804fa:	4605      	mov	r5, r0
   804fc:	460c      	mov	r4, r1
   804fe:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   80500:	4b0f      	ldr	r3, [pc, #60]	; (80540 <usart_init_rs232+0x48>)
   80502:	4798      	blx	r3

	ul_reg_val = 0;
   80504:	2100      	movs	r1, #0
   80506:	4b0f      	ldr	r3, [pc, #60]	; (80544 <usart_init_rs232+0x4c>)
   80508:	6019      	str	r1, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8050a:	b19c      	cbz	r4, 80534 <usart_init_rs232+0x3c>
   8050c:	4628      	mov	r0, r5
   8050e:	6821      	ldr	r1, [r4, #0]
   80510:	4632      	mov	r2, r6
   80512:	4b0d      	ldr	r3, [pc, #52]	; (80548 <usart_init_rs232+0x50>)
   80514:	4798      	blx	r3
   80516:	4603      	mov	r3, r0
   80518:	b970      	cbnz	r0, 80538 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8051a:	68a1      	ldr	r1, [r4, #8]
   8051c:	6862      	ldr	r2, [r4, #4]
   8051e:	430a      	orrs	r2, r1
   80520:	6921      	ldr	r1, [r4, #16]
   80522:	430a      	orrs	r2, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   80524:	68e0      	ldr	r0, [r4, #12]
   80526:	4302      	orrs	r2, r0
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   80528:	4906      	ldr	r1, [pc, #24]	; (80544 <usart_init_rs232+0x4c>)
   8052a:	600a      	str	r2, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   8052c:	6869      	ldr	r1, [r5, #4]
   8052e:	430a      	orrs	r2, r1
   80530:	606a      	str	r2, [r5, #4]

	return 0;
   80532:	e002      	b.n	8053a <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   80534:	2301      	movs	r3, #1
   80536:	e000      	b.n	8053a <usart_init_rs232+0x42>
   80538:	2301      	movs	r3, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   8053a:	4618      	mov	r0, r3
   8053c:	bd70      	pop	{r4, r5, r6, pc}
   8053e:	bf00      	nop
   80540:	000804d1 	.word	0x000804d1
   80544:	200709c0 	.word	0x200709c0
   80548:	0008046d 	.word	0x0008046d

0008054c <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   8054c:	2340      	movs	r3, #64	; 0x40
   8054e:	6003      	str	r3, [r0, #0]
   80550:	4770      	bx	lr
   80552:	bf00      	nop

00080554 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
   80554:	2310      	movs	r3, #16
   80556:	6003      	str	r3, [r0, #0]
   80558:	4770      	bx	lr
   8055a:	bf00      	nop

0008055c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8055c:	6943      	ldr	r3, [r0, #20]
   8055e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80562:	bf1d      	ittte	ne
   80564:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80568:	61c1      	strne	r1, [r0, #28]
	return 0;
   8056a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8056c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8056e:	4770      	bx	lr

00080570 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80570:	6943      	ldr	r3, [r0, #20]
   80572:	f013 0f01 	tst.w	r3, #1
   80576:	d005      	beq.n	80584 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80578:	6983      	ldr	r3, [r0, #24]
   8057a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8057e:	600b      	str	r3, [r1, #0]

	return 0;
   80580:	2000      	movs	r0, #0
   80582:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80584:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80586:	4770      	bx	lr

00080588 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80588:	b500      	push	{lr}
   8058a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   8058c:	4813      	ldr	r0, [pc, #76]	; (805dc <USART0_Handler+0x54>)
   8058e:	f10d 0107 	add.w	r1, sp, #7
   80592:	2201      	movs	r2, #1
   80594:	4b12      	ldr	r3, [pc, #72]	; (805e0 <USART0_Handler+0x58>)
   80596:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80598:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8059a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8059e:	2200      	movs	r2, #0
   805a0:	4b10      	ldr	r3, [pc, #64]	; (805e4 <USART0_Handler+0x5c>)
   805a2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   805a4:	4b10      	ldr	r3, [pc, #64]	; (805e8 <USART0_Handler+0x60>)
   805a6:	781a      	ldrb	r2, [r3, #0]
   805a8:	3201      	adds	r2, #1
   805aa:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   805ac:	4b0f      	ldr	r3, [pc, #60]	; (805ec <USART0_Handler+0x64>)
   805ae:	781b      	ldrb	r3, [r3, #0]
   805b0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   805b4:	4a0e      	ldr	r2, [pc, #56]	; (805f0 <USART0_Handler+0x68>)
   805b6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   805b8:	2b9b      	cmp	r3, #155	; 0x9b
   805ba:	d103      	bne.n	805c4 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   805bc:	2200      	movs	r2, #0
   805be:	4b0b      	ldr	r3, [pc, #44]	; (805ec <USART0_Handler+0x64>)
   805c0:	701a      	strb	r2, [r3, #0]
   805c2:	e002      	b.n	805ca <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   805c4:	3301      	adds	r3, #1
   805c6:	4a09      	ldr	r2, [pc, #36]	; (805ec <USART0_Handler+0x64>)
   805c8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   805ca:	2201      	movs	r2, #1
   805cc:	4b05      	ldr	r3, [pc, #20]	; (805e4 <USART0_Handler+0x5c>)
   805ce:	701a      	strb	r2, [r3, #0]
   805d0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   805d4:	b662      	cpsie	i
}
   805d6:	b003      	add	sp, #12
   805d8:	f85d fb04 	ldr.w	pc, [sp], #4
   805dc:	40098000 	.word	0x40098000
   805e0:	000802f1 	.word	0x000802f1
   805e4:	20070154 	.word	0x20070154
   805e8:	20070a61 	.word	0x20070a61
   805ec:	20070a60 	.word	0x20070a60
   805f0:	200709c4 	.word	0x200709c4

000805f4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   805f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   805f6:	b083      	sub	sp, #12
   805f8:	4604      	mov	r4, r0
   805fa:	460d      	mov	r5, r1
	uint32_t val = 0;
   805fc:	2300      	movs	r3, #0
   805fe:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80600:	4b1f      	ldr	r3, [pc, #124]	; (80680 <usart_serial_getchar+0x8c>)
   80602:	4298      	cmp	r0, r3
   80604:	d107      	bne.n	80616 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80606:	461f      	mov	r7, r3
   80608:	4e1e      	ldr	r6, [pc, #120]	; (80684 <usart_serial_getchar+0x90>)
   8060a:	4638      	mov	r0, r7
   8060c:	4629      	mov	r1, r5
   8060e:	47b0      	blx	r6
   80610:	2800      	cmp	r0, #0
   80612:	d1fa      	bne.n	8060a <usart_serial_getchar+0x16>
   80614:	e019      	b.n	8064a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80616:	4b1c      	ldr	r3, [pc, #112]	; (80688 <usart_serial_getchar+0x94>)
   80618:	4298      	cmp	r0, r3
   8061a:	d109      	bne.n	80630 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   8061c:	461f      	mov	r7, r3
   8061e:	4e1b      	ldr	r6, [pc, #108]	; (8068c <usart_serial_getchar+0x98>)
   80620:	4638      	mov	r0, r7
   80622:	a901      	add	r1, sp, #4
   80624:	47b0      	blx	r6
   80626:	2800      	cmp	r0, #0
   80628:	d1fa      	bne.n	80620 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8062a:	9b01      	ldr	r3, [sp, #4]
   8062c:	702b      	strb	r3, [r5, #0]
   8062e:	e019      	b.n	80664 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80630:	4b17      	ldr	r3, [pc, #92]	; (80690 <usart_serial_getchar+0x9c>)
   80632:	4298      	cmp	r0, r3
   80634:	d109      	bne.n	8064a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80636:	461e      	mov	r6, r3
   80638:	4c14      	ldr	r4, [pc, #80]	; (8068c <usart_serial_getchar+0x98>)
   8063a:	4630      	mov	r0, r6
   8063c:	a901      	add	r1, sp, #4
   8063e:	47a0      	blx	r4
   80640:	2800      	cmp	r0, #0
   80642:	d1fa      	bne.n	8063a <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80644:	9b01      	ldr	r3, [sp, #4]
   80646:	702b      	strb	r3, [r5, #0]
   80648:	e018      	b.n	8067c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8064a:	4b12      	ldr	r3, [pc, #72]	; (80694 <usart_serial_getchar+0xa0>)
   8064c:	429c      	cmp	r4, r3
   8064e:	d109      	bne.n	80664 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80650:	461e      	mov	r6, r3
   80652:	4c0e      	ldr	r4, [pc, #56]	; (8068c <usart_serial_getchar+0x98>)
   80654:	4630      	mov	r0, r6
   80656:	a901      	add	r1, sp, #4
   80658:	47a0      	blx	r4
   8065a:	2800      	cmp	r0, #0
   8065c:	d1fa      	bne.n	80654 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8065e:	9b01      	ldr	r3, [sp, #4]
   80660:	702b      	strb	r3, [r5, #0]
   80662:	e00b      	b.n	8067c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80664:	4b0c      	ldr	r3, [pc, #48]	; (80698 <usart_serial_getchar+0xa4>)
   80666:	429c      	cmp	r4, r3
   80668:	d108      	bne.n	8067c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8066a:	461e      	mov	r6, r3
   8066c:	4c07      	ldr	r4, [pc, #28]	; (8068c <usart_serial_getchar+0x98>)
   8066e:	4630      	mov	r0, r6
   80670:	a901      	add	r1, sp, #4
   80672:	47a0      	blx	r4
   80674:	2800      	cmp	r0, #0
   80676:	d1fa      	bne.n	8066e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80678:	9b01      	ldr	r3, [sp, #4]
   8067a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8067c:	b003      	add	sp, #12
   8067e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80680:	400e0800 	.word	0x400e0800
   80684:	00080459 	.word	0x00080459
   80688:	40098000 	.word	0x40098000
   8068c:	00080571 	.word	0x00080571
   80690:	4009c000 	.word	0x4009c000
   80694:	400a0000 	.word	0x400a0000
   80698:	400a4000 	.word	0x400a4000

0008069c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   8069c:	b570      	push	{r4, r5, r6, lr}
   8069e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   806a0:	4b21      	ldr	r3, [pc, #132]	; (80728 <usart_serial_putchar+0x8c>)
   806a2:	4298      	cmp	r0, r3
   806a4:	d107      	bne.n	806b6 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   806a6:	461e      	mov	r6, r3
   806a8:	4d20      	ldr	r5, [pc, #128]	; (8072c <usart_serial_putchar+0x90>)
   806aa:	4630      	mov	r0, r6
   806ac:	4621      	mov	r1, r4
   806ae:	47a8      	blx	r5
   806b0:	2800      	cmp	r0, #0
   806b2:	d1fa      	bne.n	806aa <usart_serial_putchar+0xe>
   806b4:	e02b      	b.n	8070e <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   806b6:	4b1e      	ldr	r3, [pc, #120]	; (80730 <usart_serial_putchar+0x94>)
   806b8:	4298      	cmp	r0, r3
   806ba:	d107      	bne.n	806cc <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   806bc:	461e      	mov	r6, r3
   806be:	4d1d      	ldr	r5, [pc, #116]	; (80734 <usart_serial_putchar+0x98>)
   806c0:	4630      	mov	r0, r6
   806c2:	4621      	mov	r1, r4
   806c4:	47a8      	blx	r5
   806c6:	2800      	cmp	r0, #0
   806c8:	d1fa      	bne.n	806c0 <usart_serial_putchar+0x24>
   806ca:	e022      	b.n	80712 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   806cc:	4b1a      	ldr	r3, [pc, #104]	; (80738 <usart_serial_putchar+0x9c>)
   806ce:	4298      	cmp	r0, r3
   806d0:	d107      	bne.n	806e2 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   806d2:	461e      	mov	r6, r3
   806d4:	4d17      	ldr	r5, [pc, #92]	; (80734 <usart_serial_putchar+0x98>)
   806d6:	4630      	mov	r0, r6
   806d8:	4621      	mov	r1, r4
   806da:	47a8      	blx	r5
   806dc:	2800      	cmp	r0, #0
   806de:	d1fa      	bne.n	806d6 <usart_serial_putchar+0x3a>
   806e0:	e019      	b.n	80716 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   806e2:	4b16      	ldr	r3, [pc, #88]	; (8073c <usart_serial_putchar+0xa0>)
   806e4:	4298      	cmp	r0, r3
   806e6:	d107      	bne.n	806f8 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   806e8:	461e      	mov	r6, r3
   806ea:	4d12      	ldr	r5, [pc, #72]	; (80734 <usart_serial_putchar+0x98>)
   806ec:	4630      	mov	r0, r6
   806ee:	4621      	mov	r1, r4
   806f0:	47a8      	blx	r5
   806f2:	2800      	cmp	r0, #0
   806f4:	d1fa      	bne.n	806ec <usart_serial_putchar+0x50>
   806f6:	e010      	b.n	8071a <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   806f8:	4b11      	ldr	r3, [pc, #68]	; (80740 <usart_serial_putchar+0xa4>)
   806fa:	4298      	cmp	r0, r3
   806fc:	d10f      	bne.n	8071e <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   806fe:	461e      	mov	r6, r3
   80700:	4d0c      	ldr	r5, [pc, #48]	; (80734 <usart_serial_putchar+0x98>)
   80702:	4630      	mov	r0, r6
   80704:	4621      	mov	r1, r4
   80706:	47a8      	blx	r5
   80708:	2800      	cmp	r0, #0
   8070a:	d1fa      	bne.n	80702 <usart_serial_putchar+0x66>
   8070c:	e009      	b.n	80722 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8070e:	2001      	movs	r0, #1
   80710:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80712:	2001      	movs	r0, #1
   80714:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80716:	2001      	movs	r0, #1
   80718:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8071a:	2001      	movs	r0, #1
   8071c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8071e:	2000      	movs	r0, #0
   80720:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80722:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80724:	bd70      	pop	{r4, r5, r6, pc}
   80726:	bf00      	nop
   80728:	400e0800 	.word	0x400e0800
   8072c:	00080449 	.word	0x00080449
   80730:	40098000 	.word	0x40098000
   80734:	0008055d 	.word	0x0008055d
   80738:	4009c000 	.word	0x4009c000
   8073c:	400a0000 	.word	0x400a0000
   80740:	400a4000 	.word	0x400a4000

00080744 <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   80744:	b570      	push	{r4, r5, r6, lr}
   80746:	b086      	sub	sp, #24
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80748:	2008      	movs	r0, #8
   8074a:	4e17      	ldr	r6, [pc, #92]	; (807a8 <configureConsole+0x64>)
   8074c:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8074e:	4d17      	ldr	r5, [pc, #92]	; (807ac <configureConsole+0x68>)
   80750:	4b17      	ldr	r3, [pc, #92]	; (807b0 <configureConsole+0x6c>)
   80752:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80754:	4a17      	ldr	r2, [pc, #92]	; (807b4 <configureConsole+0x70>)
   80756:	4b18      	ldr	r3, [pc, #96]	; (807b8 <configureConsole+0x74>)
   80758:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8075a:	4a18      	ldr	r2, [pc, #96]	; (807bc <configureConsole+0x78>)
   8075c:	4b18      	ldr	r3, [pc, #96]	; (807c0 <configureConsole+0x7c>)
   8075e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   80760:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80764:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
   80766:	2400      	movs	r4, #0
   80768:	9401      	str	r4, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
   8076a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8076e:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
   80770:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   80772:	9404      	str	r4, [sp, #16]
   80774:	2012      	movs	r0, #18
   80776:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   80778:	4628      	mov	r0, r5
   8077a:	4669      	mov	r1, sp
   8077c:	4a11      	ldr	r2, [pc, #68]	; (807c4 <configureConsole+0x80>)
   8077e:	4b12      	ldr	r3, [pc, #72]	; (807c8 <configureConsole+0x84>)
   80780:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   80782:	4628      	mov	r0, r5
   80784:	4b11      	ldr	r3, [pc, #68]	; (807cc <configureConsole+0x88>)
   80786:	4798      	blx	r3
		usart_enable_rx(p_usart);
   80788:	4628      	mov	r0, r5
   8078a:	4b11      	ldr	r3, [pc, #68]	; (807d0 <configureConsole+0x8c>)
   8078c:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8078e:	4e11      	ldr	r6, [pc, #68]	; (807d4 <configureConsole+0x90>)
   80790:	6833      	ldr	r3, [r6, #0]
   80792:	6898      	ldr	r0, [r3, #8]
   80794:	4621      	mov	r1, r4
   80796:	4d10      	ldr	r5, [pc, #64]	; (807d8 <configureConsole+0x94>)
   80798:	47a8      	blx	r5
	setbuf(stdin, NULL);
   8079a:	6833      	ldr	r3, [r6, #0]
   8079c:	6858      	ldr	r0, [r3, #4]
   8079e:	4621      	mov	r1, r4
   807a0:	47a8      	blx	r5
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
}
   807a2:	4620      	mov	r0, r4
   807a4:	b006      	add	sp, #24
   807a6:	bd70      	pop	{r4, r5, r6, pc}
   807a8:	000813e5 	.word	0x000813e5
   807ac:	4009c000 	.word	0x4009c000
   807b0:	20070b3c 	.word	0x20070b3c
   807b4:	0008069d 	.word	0x0008069d
   807b8:	20070b38 	.word	0x20070b38
   807bc:	000805f5 	.word	0x000805f5
   807c0:	20070b34 	.word	0x20070b34
   807c4:	0501bd00 	.word	0x0501bd00
   807c8:	000804f9 	.word	0x000804f9
   807cc:	0008054d 	.word	0x0008054d
   807d0:	00080555 	.word	0x00080555
   807d4:	20070588 	.word	0x20070588
   807d8:	00082d4d 	.word	0x00082d4d

000807dc <pin12_edge_handler>:
// 	usart_enable_interrupt(CONF_UART, UART_IER_RXRDY);

}

// Handler which calls when pin 53 is toggle.
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   807dc:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   807de:	4808      	ldr	r0, [pc, #32]	; (80800 <pin12_edge_handler+0x24>)
   807e0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   807e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   807e8:	4b06      	ldr	r3, [pc, #24]	; (80804 <pin12_edge_handler+0x28>)
   807ea:	4798      	blx	r3
   807ec:	b130      	cbz	r0, 807fc <pin12_edge_handler+0x20>
		//increase the counter value
		counter_2++;
   807ee:	4b06      	ldr	r3, [pc, #24]	; (80808 <pin12_edge_handler+0x2c>)
   807f0:	881a      	ldrh	r2, [r3, #0]
   807f2:	3201      	adds	r2, #1
   807f4:	801a      	strh	r2, [r3, #0]
		c2Loop = true;
   807f6:	2201      	movs	r2, #1
   807f8:	4b04      	ldr	r3, [pc, #16]	; (8080c <pin12_edge_handler+0x30>)
   807fa:	701a      	strb	r2, [r3, #0]
   807fc:	bd08      	pop	{r3, pc}
   807fe:	bf00      	nop
   80800:	400e1200 	.word	0x400e1200
   80804:	00081139 	.word	0x00081139
   80808:	20070a66 	.word	0x20070a66
   8080c:	20070139 	.word	0x20070139

00080810 <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}
}

// Handler which calls when pin 51 is toggle.
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   80810:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   80812:	4808      	ldr	r0, [pc, #32]	; (80834 <pin14_edge_handler+0x24>)
   80814:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80818:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8081c:	4b06      	ldr	r3, [pc, #24]	; (80838 <pin14_edge_handler+0x28>)
   8081e:	4798      	blx	r3
   80820:	b130      	cbz	r0, 80830 <pin14_edge_handler+0x20>
	//Increase the counter value
			counter_1++;
   80822:	4b06      	ldr	r3, [pc, #24]	; (8083c <pin14_edge_handler+0x2c>)
   80824:	881a      	ldrh	r2, [r3, #0]
   80826:	3201      	adds	r2, #1
   80828:	801a      	strh	r2, [r3, #0]
			c1Loop = true;
   8082a:	2201      	movs	r2, #1
   8082c:	4b04      	ldr	r3, [pc, #16]	; (80840 <pin14_edge_handler+0x30>)
   8082e:	701a      	strb	r2, [r3, #0]
   80830:	bd08      	pop	{r3, pc}
   80832:	bf00      	nop
   80834:	400e1000 	.word	0x400e1000
   80838:	00081139 	.word	0x00081139
   8083c:	20070a64 	.word	0x20070a64
   80840:	20070138 	.word	0x20070138

00080844 <configInterrupts>:
 char rx[16];
 bool c1Loop = true;
 bool c2Loop = true;


void configInterrupts(void){
   80844:	b570      	push	{r4, r5, r6, lr}
   80846:	b082      	sub	sp, #8

	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   80848:	200c      	movs	r0, #12
   8084a:	4c1a      	ldr	r4, [pc, #104]	; (808b4 <configInterrupts+0x70>)
   8084c:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);
   8084e:	200d      	movs	r0, #13
   80850:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   80852:	4d19      	ldr	r5, [pc, #100]	; (808b8 <configInterrupts+0x74>)
   80854:	4628      	mov	r0, r5
   80856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8085a:	2201      	movs	r2, #1
   8085c:	4e17      	ldr	r6, [pc, #92]	; (808bc <configInterrupts+0x78>)
   8085e:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   80860:	4c17      	ldr	r4, [pc, #92]	; (808c0 <configInterrupts+0x7c>)
   80862:	4620      	mov	r0, r4
   80864:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80868:	2201      	movs	r2, #1
   8086a:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   8086c:	4b15      	ldr	r3, [pc, #84]	; (808c4 <configInterrupts+0x80>)
   8086e:	9300      	str	r3, [sp, #0]
   80870:	4628      	mov	r0, r5
   80872:	210d      	movs	r1, #13
   80874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80878:	2340      	movs	r3, #64	; 0x40
   8087a:	4e13      	ldr	r6, [pc, #76]	; (808c8 <configInterrupts+0x84>)
   8087c:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   8087e:	4b13      	ldr	r3, [pc, #76]	; (808cc <configInterrupts+0x88>)
   80880:	9300      	str	r3, [sp, #0]
   80882:	4620      	mov	r0, r4
   80884:	210c      	movs	r1, #12
   80886:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8088a:	2340      	movs	r3, #64	; 0x40
   8088c:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   8088e:	4628      	mov	r0, r5
   80890:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80894:	4d0e      	ldr	r5, [pc, #56]	; (808d0 <configInterrupts+0x8c>)
   80896:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   80898:	4620      	mov	r0, r4
   8089a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8089e:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   808a0:	4b0c      	ldr	r3, [pc, #48]	; (808d4 <configInterrupts+0x90>)
   808a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   808a6:	601a      	str	r2, [r3, #0]
   808a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   808ac:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOB_IRQn);
	
// 	NVIC_EnableIRQ((IRQn_Type) ID_USART1);
// 	usart_enable_interrupt(CONF_UART, UART_IER_RXRDY);

}
   808ae:	b002      	add	sp, #8
   808b0:	bd70      	pop	{r4, r5, r6, pc}
   808b2:	bf00      	nop
   808b4:	000813e5 	.word	0x000813e5
   808b8:	400e1200 	.word	0x400e1200
   808bc:	00081191 	.word	0x00081191
   808c0:	400e1000 	.word	0x400e1000
   808c4:	000807dd 	.word	0x000807dd
   808c8:	00081359 	.word	0x00081359
   808cc:	00080811 	.word	0x00080811
   808d0:	0008121d 	.word	0x0008121d
   808d4:	e000e100 	.word	0xe000e100

000808d8 <USART1_Handler>:
			//printf("\n c2 = %d",counter_2);
	}
}

 void USART1_Handler() {
	 CONF_UART->US_CR |= (1 << US_CR_RSTRX);
   808d8:	4b09      	ldr	r3, [pc, #36]	; (80900 <USART1_Handler+0x28>)
   808da:	681a      	ldr	r2, [r3, #0]
   808dc:	f042 0210 	orr.w	r2, r2, #16
   808e0:	601a      	str	r2, [r3, #0]
	 rx[c_counter++] = CONF_UART->US_RHR & US_RHR_RXCHR_Msk;
   808e2:	4808      	ldr	r0, [pc, #32]	; (80904 <USART1_Handler+0x2c>)
   808e4:	7801      	ldrb	r1, [r0, #0]
   808e6:	1c4a      	adds	r2, r1, #1
   808e8:	b2d2      	uxtb	r2, r2
   808ea:	7002      	strb	r2, [r0, #0]
   808ec:	6998      	ldr	r0, [r3, #24]
   808ee:	4b06      	ldr	r3, [pc, #24]	; (80908 <USART1_Handler+0x30>)
   808f0:	5458      	strb	r0, [r3, r1]
	 if (c_counter > 15)
   808f2:	2a0f      	cmp	r2, #15
   808f4:	d902      	bls.n	808fc <USART1_Handler+0x24>
	 {
		 c_counter = 0;
   808f6:	2200      	movs	r2, #0
   808f8:	4b02      	ldr	r3, [pc, #8]	; (80904 <USART1_Handler+0x2c>)
   808fa:	701a      	strb	r2, [r3, #0]
   808fc:	4770      	bx	lr
   808fe:	bf00      	nop
   80900:	4009c000 	.word	0x4009c000
   80904:	20070a62 	.word	0x20070a62
   80908:	20070b1c 	.word	0x20070b1c

0008090c <reset_Counter>:
	 }
 }

void reset_Counter(void){
	counter_1=0;
   8090c:	2300      	movs	r3, #0
   8090e:	4a02      	ldr	r2, [pc, #8]	; (80918 <reset_Counter+0xc>)
   80910:	8013      	strh	r3, [r2, #0]
	counter_2=0;
   80912:	4a02      	ldr	r2, [pc, #8]	; (8091c <reset_Counter+0x10>)
   80914:	8013      	strh	r3, [r2, #0]
   80916:	4770      	bx	lr
   80918:	20070a64 	.word	0x20070a64
   8091c:	20070a66 	.word	0x20070a66

00080920 <calculateDistance>:
   @param Xb the x coordinate for B
   @param Ya the y coordinate for A
   @param Yb the y coordinate for B
   return distance the distance between A and B
**/
double calculateDistance (double Xa, double Ya, double Xb, double Yb){
   80920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80924:	4606      	mov	r6, r0
   80926:	460f      	mov	r7, r1
   80928:	4614      	mov	r4, r2
   8092a:	461d      	mov	r5, r3
	double distance;
	double deltaX = Xb - Xa;
   8092c:	f8df a054 	ldr.w	sl, [pc, #84]	; 80984 <calculateDistance+0x64>
   80930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   80934:	4632      	mov	r2, r6
   80936:	463b      	mov	r3, r7
   80938:	47d0      	blx	sl
   8093a:	4680      	mov	r8, r0
   8093c:	4689      	mov	r9, r1
	double deltaY = Yb - Ya;
   8093e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   80942:	4622      	mov	r2, r4
   80944:	462b      	mov	r3, r5
   80946:	47d0      	blx	sl
   80948:	4604      	mov	r4, r0
   8094a:	460d      	mov	r5, r1
	distance = sqrt((deltaX*deltaX) + (deltaY*deltaY));
   8094c:	f8df a038 	ldr.w	sl, [pc, #56]	; 80988 <calculateDistance+0x68>
   80950:	f8df b038 	ldr.w	fp, [pc, #56]	; 8098c <calculateDistance+0x6c>
   80954:	4640      	mov	r0, r8
   80956:	4649      	mov	r1, r9
   80958:	4642      	mov	r2, r8
   8095a:	464b      	mov	r3, r9
   8095c:	47d0      	blx	sl
   8095e:	4606      	mov	r6, r0
   80960:	460f      	mov	r7, r1
   80962:	4620      	mov	r0, r4
   80964:	4629      	mov	r1, r5
   80966:	4622      	mov	r2, r4
   80968:	462b      	mov	r3, r5
   8096a:	47d0      	blx	sl
   8096c:	4602      	mov	r2, r0
   8096e:	460b      	mov	r3, r1
   80970:	4630      	mov	r0, r6
   80972:	4639      	mov	r1, r7
   80974:	47d8      	blx	fp
   80976:	4b02      	ldr	r3, [pc, #8]	; (80980 <calculateDistance+0x60>)
   80978:	4798      	blx	r3
	return distance;
}
   8097a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8097e:	bf00      	nop
   80980:	00081a61 	.word	0x00081a61
   80984:	00081ce9 	.word	0x00081ce9
   80988:	00082051 	.word	0x00082051
   8098c:	00081ced 	.word	0x00081ced

00080990 <calculateAzimuthAngle>:
   @param Xb the x coordinate for B
   @param Ya the y coordinate for A
   @param Yb the y coordinate for B
   return azimutAngle the azimuth angle from A to B
**/
double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
   80990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80994:	4604      	mov	r4, r0
   80996:	460d      	mov	r5, r1
   80998:	4616      	mov	r6, r2
   8099a:	461f      	mov	r7, r3
	double azimutAngle = 0;
	double deltaX = Xb-Xa;
   8099c:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80b94 <calculateAzimuthAngle+0x204>
   809a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   809a4:	4622      	mov	r2, r4
   809a6:	462b      	mov	r3, r5
   809a8:	47c0      	blx	r8
   809aa:	4604      	mov	r4, r0
   809ac:	460d      	mov	r5, r1
	double deltaY = Yb-Ya;
   809ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   809b2:	4632      	mov	r2, r6
   809b4:	463b      	mov	r3, r7
   809b6:	47c0      	blx	r8
   809b8:	4606      	mov	r6, r0
   809ba:	460f      	mov	r7, r1
	
	// if A and B has same coordinates
	if ( (deltaX == 0) && (deltaY == 0) )
   809bc:	4620      	mov	r0, r4
   809be:	4629      	mov	r1, r5
   809c0:	2200      	movs	r2, #0
   809c2:	2300      	movs	r3, #0
   809c4:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80b70 <calculateAzimuthAngle+0x1e0>
   809c8:	47e0      	blx	ip
   809ca:	b1a8      	cbz	r0, 809f8 <calculateAzimuthAngle+0x68>
   809cc:	4630      	mov	r0, r6
   809ce:	4639      	mov	r1, r7
   809d0:	2200      	movs	r2, #0
   809d2:	2300      	movs	r3, #0
   809d4:	4c66      	ldr	r4, [pc, #408]	; (80b70 <calculateAzimuthAngle+0x1e0>)
   809d6:	47a0      	blx	r4
   809d8:	2800      	cmp	r0, #0
   809da:	f040 80aa 	bne.w	80b32 <calculateAzimuthAngle+0x1a2>
		azimutAngle = 0;
	} 
	// if A and B has same x coordinate
	else if (deltaX == 0)
	{
		if (deltaY>0)
   809de:	4630      	mov	r0, r6
   809e0:	4639      	mov	r1, r7
   809e2:	2200      	movs	r2, #0
   809e4:	2300      	movs	r3, #0
   809e6:	4c63      	ldr	r4, [pc, #396]	; (80b74 <calculateAzimuthAngle+0x1e4>)
   809e8:	47a0      	blx	r4
   809ea:	2800      	cmp	r0, #0
   809ec:	f000 80a5 	beq.w	80b3a <calculateAzimuthAngle+0x1aa>
		{
			azimutAngle = 0;
   809f0:	2000      	movs	r0, #0
   809f2:	2100      	movs	r1, #0
   809f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			azimutAngle = 180;
		}
		
	}
	// if A and B has same y coordinate
	else if (deltaY == 0)
   809f8:	4630      	mov	r0, r6
   809fa:	4639      	mov	r1, r7
   809fc:	2200      	movs	r2, #0
   809fe:	2300      	movs	r3, #0
   80a00:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80b70 <calculateAzimuthAngle+0x1e0>
   80a04:	47e0      	blx	ip
   80a06:	b160      	cbz	r0, 80a22 <calculateAzimuthAngle+0x92>
	{
		if (deltaX>0)
   80a08:	4620      	mov	r0, r4
   80a0a:	4629      	mov	r1, r5
   80a0c:	2200      	movs	r2, #0
   80a0e:	2300      	movs	r3, #0
   80a10:	4c58      	ldr	r4, [pc, #352]	; (80b74 <calculateAzimuthAngle+0x1e4>)
   80a12:	47a0      	blx	r4
   80a14:	2800      	cmp	r0, #0
   80a16:	f000 8094 	beq.w	80b42 <calculateAzimuthAngle+0x1b2>
		{
			azimutAngle = 90;
   80a1a:	2000      	movs	r0, #0
   80a1c:	4956      	ldr	r1, [pc, #344]	; (80b78 <calculateAzimuthAngle+0x1e8>)
   80a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		
	}
	else
	{   // angle is between 0 to 90 degree
		if ( (deltaX > 0) && (deltaY > 0 ) )
   80a22:	4620      	mov	r0, r4
   80a24:	4629      	mov	r1, r5
   80a26:	2200      	movs	r2, #0
   80a28:	2300      	movs	r3, #0
   80a2a:	f8df c148 	ldr.w	ip, [pc, #328]	; 80b74 <calculateAzimuthAngle+0x1e4>
   80a2e:	47e0      	blx	ip
   80a30:	b1b0      	cbz	r0, 80a60 <calculateAzimuthAngle+0xd0>
   80a32:	4630      	mov	r0, r6
   80a34:	4639      	mov	r1, r7
   80a36:	2200      	movs	r2, #0
   80a38:	2300      	movs	r3, #0
   80a3a:	f8df c138 	ldr.w	ip, [pc, #312]	; 80b74 <calculateAzimuthAngle+0x1e4>
   80a3e:	47e0      	blx	ip
   80a40:	b1b0      	cbz	r0, 80a70 <calculateAzimuthAngle+0xe0>
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   80a42:	4620      	mov	r0, r4
   80a44:	4629      	mov	r1, r5
   80a46:	4632      	mov	r2, r6
   80a48:	463b      	mov	r3, r7
   80a4a:	4c4c      	ldr	r4, [pc, #304]	; (80b7c <calculateAzimuthAngle+0x1ec>)
   80a4c:	47a0      	blx	r4
   80a4e:	4b4c      	ldr	r3, [pc, #304]	; (80b80 <calculateAzimuthAngle+0x1f0>)
   80a50:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   80a52:	a343      	add	r3, pc, #268	; (adr r3, 80b60 <calculateAzimuthAngle+0x1d0>)
   80a54:	e9d3 2300 	ldrd	r2, r3, [r3]
   80a58:	4c4a      	ldr	r4, [pc, #296]	; (80b84 <calculateAzimuthAngle+0x1f4>)
   80a5a:	47a0      	blx	r4
	}
	else
	{   // angle is between 0 to 90 degree
		if ( (deltaX > 0) && (deltaY > 0 ) )
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   80a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} 
		// the angle is between 90 to 180 degree
		else if ( (deltaX > 0) && (deltaY < 0 ) )
   80a60:	4620      	mov	r0, r4
   80a62:	4629      	mov	r1, r5
   80a64:	2200      	movs	r2, #0
   80a66:	2300      	movs	r3, #0
   80a68:	f8df c108 	ldr.w	ip, [pc, #264]	; 80b74 <calculateAzimuthAngle+0x1e4>
   80a6c:	47e0      	blx	ip
   80a6e:	b1d0      	cbz	r0, 80aa6 <calculateAzimuthAngle+0x116>
   80a70:	4630      	mov	r0, r6
   80a72:	4639      	mov	r1, r7
   80a74:	2200      	movs	r2, #0
   80a76:	2300      	movs	r3, #0
   80a78:	f8df c11c 	ldr.w	ip, [pc, #284]	; 80b98 <calculateAzimuthAngle+0x208>
   80a7c:	47e0      	blx	ip
   80a7e:	b190      	cbz	r0, 80aa6 <calculateAzimuthAngle+0x116>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   80a80:	4620      	mov	r0, r4
   80a82:	4629      	mov	r1, r5
   80a84:	4632      	mov	r2, r6
   80a86:	463b      	mov	r3, r7
   80a88:	4c3c      	ldr	r4, [pc, #240]	; (80b7c <calculateAzimuthAngle+0x1ec>)
   80a8a:	47a0      	blx	r4
   80a8c:	4b3c      	ldr	r3, [pc, #240]	; (80b80 <calculateAzimuthAngle+0x1f0>)
   80a8e:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   80a90:	a333      	add	r3, pc, #204	; (adr r3, 80b60 <calculateAzimuthAngle+0x1d0>)
   80a92:	e9d3 2300 	ldrd	r2, r3, [r3]
   80a96:	4c3b      	ldr	r4, [pc, #236]	; (80b84 <calculateAzimuthAngle+0x1f4>)
   80a98:	47a0      	blx	r4
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
		} 
		// the angle is between 90 to 180 degree
		else if ( (deltaX > 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   80a9a:	2200      	movs	r2, #0
   80a9c:	4b3a      	ldr	r3, [pc, #232]	; (80b88 <calculateAzimuthAngle+0x1f8>)
   80a9e:	4c3b      	ldr	r4, [pc, #236]	; (80b8c <calculateAzimuthAngle+0x1fc>)
   80aa0:	47a0      	blx	r4
   80aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		// the angle is between 180 to 270 degree
		else if ( (deltaX < 0) && (deltaY < 0 ) )
   80aa6:	4620      	mov	r0, r4
   80aa8:	4629      	mov	r1, r5
   80aaa:	2200      	movs	r2, #0
   80aac:	2300      	movs	r3, #0
   80aae:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 80b98 <calculateAzimuthAngle+0x208>
   80ab2:	47e0      	blx	ip
   80ab4:	b1d0      	cbz	r0, 80aec <calculateAzimuthAngle+0x15c>
   80ab6:	4630      	mov	r0, r6
   80ab8:	4639      	mov	r1, r7
   80aba:	2200      	movs	r2, #0
   80abc:	2300      	movs	r3, #0
   80abe:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 80b98 <calculateAzimuthAngle+0x208>
   80ac2:	47e0      	blx	ip
   80ac4:	b1d0      	cbz	r0, 80afc <calculateAzimuthAngle+0x16c>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   80ac6:	4620      	mov	r0, r4
   80ac8:	4629      	mov	r1, r5
   80aca:	4632      	mov	r2, r6
   80acc:	463b      	mov	r3, r7
   80ace:	4c2b      	ldr	r4, [pc, #172]	; (80b7c <calculateAzimuthAngle+0x1ec>)
   80ad0:	47a0      	blx	r4
   80ad2:	4b2b      	ldr	r3, [pc, #172]	; (80b80 <calculateAzimuthAngle+0x1f0>)
   80ad4:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   80ad6:	a322      	add	r3, pc, #136	; (adr r3, 80b60 <calculateAzimuthAngle+0x1d0>)
   80ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
   80adc:	4c29      	ldr	r4, [pc, #164]	; (80b84 <calculateAzimuthAngle+0x1f4>)
   80ade:	47a0      	blx	r4
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
		}
		// the angle is between 180 to 270 degree
		else if ( (deltaX < 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   80ae0:	2200      	movs	r2, #0
   80ae2:	4b29      	ldr	r3, [pc, #164]	; (80b88 <calculateAzimuthAngle+0x1f8>)
   80ae4:	4c29      	ldr	r4, [pc, #164]	; (80b8c <calculateAzimuthAngle+0x1fc>)
   80ae6:	47a0      	blx	r4
   80ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		// the angle is between 270 to 360 degree
		else if ( (deltaX < 0) && (deltaY > 0 ) )
   80aec:	4620      	mov	r0, r4
   80aee:	4629      	mov	r1, r5
   80af0:	2200      	movs	r2, #0
   80af2:	2300      	movs	r3, #0
   80af4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80b98 <calculateAzimuthAngle+0x208>
   80af8:	47e0      	blx	ip
   80afa:	b338      	cbz	r0, 80b4c <calculateAzimuthAngle+0x1bc>
   80afc:	4630      	mov	r0, r6
   80afe:	4639      	mov	r1, r7
   80b00:	2200      	movs	r2, #0
   80b02:	2300      	movs	r3, #0
   80b04:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80b74 <calculateAzimuthAngle+0x1e4>
   80b08:	47e0      	blx	ip
   80b0a:	b318      	cbz	r0, 80b54 <calculateAzimuthAngle+0x1c4>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   80b0c:	4620      	mov	r0, r4
   80b0e:	4629      	mov	r1, r5
   80b10:	4632      	mov	r2, r6
   80b12:	463b      	mov	r3, r7
   80b14:	4c19      	ldr	r4, [pc, #100]	; (80b7c <calculateAzimuthAngle+0x1ec>)
   80b16:	47a0      	blx	r4
   80b18:	4b19      	ldr	r3, [pc, #100]	; (80b80 <calculateAzimuthAngle+0x1f0>)
   80b1a:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   80b1c:	a310      	add	r3, pc, #64	; (adr r3, 80b60 <calculateAzimuthAngle+0x1d0>)
   80b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80b22:	4c18      	ldr	r4, [pc, #96]	; (80b84 <calculateAzimuthAngle+0x1f4>)
   80b24:	47a0      	blx	r4
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
		}
		// the angle is between 270 to 360 degree
		else if ( (deltaX < 0) && (deltaY > 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   80b26:	2200      	movs	r2, #0
   80b28:	4b19      	ldr	r3, [pc, #100]	; (80b90 <calculateAzimuthAngle+0x200>)
   80b2a:	4c18      	ldr	r4, [pc, #96]	; (80b8c <calculateAzimuthAngle+0x1fc>)
   80b2c:	47a0      	blx	r4
   80b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	double deltaY = Yb-Ya;
	
	// if A and B has same coordinates
	if ( (deltaX == 0) && (deltaY == 0) )
	{
		azimutAngle = 0;
   80b32:	2000      	movs	r0, #0
   80b34:	2100      	movs	r1, #0
   80b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 0;
		} 
		else
		{
			azimutAngle = 180;
   80b3a:	2000      	movs	r0, #0
   80b3c:	4912      	ldr	r1, [pc, #72]	; (80b88 <calculateAzimuthAngle+0x1f8>)
   80b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 90;
		} 
		else
		{
			azimutAngle = 270;
   80b42:	a109      	add	r1, pc, #36	; (adr r1, 80b68 <calculateAzimuthAngle+0x1d8>)
   80b44:	e9d1 0100 	ldrd	r0, r1, [r1]
   80b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   @param Ya the y coordinate for A
   @param Yb the y coordinate for B
   return azimutAngle the azimuth angle from A to B
**/
double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
	double azimutAngle = 0;
   80b4c:	2000      	movs	r0, #0
   80b4e:	2100      	movs	r1, #0
   80b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b54:	2000      	movs	r0, #0
   80b56:	2100      	movs	r1, #0
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
		}
	}
	
	return azimutAngle;
}
   80b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b5c:	f3af 8000 	nop.w
   80b60:	1a63c1f8 	.word	0x1a63c1f8
   80b64:	404ca5dc 	.word	0x404ca5dc
   80b68:	00000000 	.word	0x00000000
   80b6c:	4070e000 	.word	0x4070e000
   80b70:	00082521 	.word	0x00082521
   80b74:	00082571 	.word	0x00082571
   80b78:	40568000 	.word	0x40568000
   80b7c:	000822a5 	.word	0x000822a5
   80b80:	00081709 	.word	0x00081709
   80b84:	00082051 	.word	0x00082051
   80b88:	40668000 	.word	0x40668000
   80b8c:	00081ced 	.word	0x00081ced
   80b90:	40768000 	.word	0x40768000
   80b94:	00081ce9 	.word	0x00081ce9
   80b98:	00082535 	.word	0x00082535
   80b9c:	f3af 8000 	nop.w

00080ba0 <calcluteRotationAngle>:
   @param Ya the y coordinate for A
   @param Yb the x coordinate for B
   @param Yc the y coordinate for C
   return rotationAngle the rotation angle from A to target C
   **/
double calcluteRotationAngle (double Xa, double Ya, double Xb, double Yb, double Xc, double Yc){
   80ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80ba4:	b084      	sub	sp, #16
   80ba6:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
   80baa:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
	
	double AoB = calculateAzimuthAngle(Xa, Ya, Xb, Yb);
   80bae:	e9cd 4500 	strd	r4, r5, [sp]
   80bb2:	e9cd 8902 	strd	r8, r9, [sp, #8]
   80bb6:	f8df a064 	ldr.w	sl, [pc, #100]	; 80c1c <calcluteRotationAngle+0x7c>
   80bba:	47d0      	blx	sl
   80bbc:	4606      	mov	r6, r0
   80bbe:	460f      	mov	r7, r1
	double BoC = calculateAzimuthAngle(Xb, Yb, Xc, Yc);
   80bc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   80bc4:	e9cd 2300 	strd	r2, r3, [sp]
   80bc8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   80bcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   80bd0:	4620      	mov	r0, r4
   80bd2:	4629      	mov	r1, r5
   80bd4:	4642      	mov	r2, r8
   80bd6:	464b      	mov	r3, r9
   80bd8:	47d0      	blx	sl
	double rotationAngle = BoC-AoB;
   80bda:	4632      	mov	r2, r6
   80bdc:	463b      	mov	r3, r7
   80bde:	4c0b      	ldr	r4, [pc, #44]	; (80c0c <calcluteRotationAngle+0x6c>)
   80be0:	47a0      	blx	r4
   80be2:	4604      	mov	r4, r0
   80be4:	460d      	mov	r5, r1
	if (rotationAngle > 180)
   80be6:	2200      	movs	r2, #0
   80be8:	4b09      	ldr	r3, [pc, #36]	; (80c10 <calcluteRotationAngle+0x70>)
   80bea:	4e0a      	ldr	r6, [pc, #40]	; (80c14 <calcluteRotationAngle+0x74>)
   80bec:	47b0      	blx	r6
   80bee:	b138      	cbz	r0, 80c00 <calcluteRotationAngle+0x60>
	{
		rotationAngle =  rotationAngle - 360;
   80bf0:	4620      	mov	r0, r4
   80bf2:	4629      	mov	r1, r5
   80bf4:	2200      	movs	r2, #0
   80bf6:	4b08      	ldr	r3, [pc, #32]	; (80c18 <calcluteRotationAngle+0x78>)
   80bf8:	4c04      	ldr	r4, [pc, #16]	; (80c0c <calcluteRotationAngle+0x6c>)
   80bfa:	47a0      	blx	r4
   80bfc:	4604      	mov	r4, r0
   80bfe:	460d      	mov	r5, r1
	}
	return rotationAngle;
   80c00:	4620      	mov	r0, r4
   80c02:	4629      	mov	r1, r5
   80c04:	b004      	add	sp, #16
   80c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80c0a:	bf00      	nop
   80c0c:	00081ce9 	.word	0x00081ce9
   80c10:	40668000 	.word	0x40668000
   80c14:	00082571 	.word	0x00082571
   80c18:	40768000 	.word	0x40768000
   80c1c:	00080991 	.word	0x00080991

00080c20 <moveTo>:
This method moveTo handle position moving for a certain distance and direction
Method uses a PID controller for smoother movment of the robot
	@param distance the distance which the robot need to move in centimeters
	@param direction the direction robot need to move forward or backwards
**/
void moveTo (int distance, int direction){
   80c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c24:	b089      	sub	sp, #36	; 0x24
   80c26:	468b      	mov	fp, r1

	float totalPulses = (distance/1.38); //Calculate the total pulses needed to move to destination
   80c28:	4b8f      	ldr	r3, [pc, #572]	; (80e68 <moveTo+0x248>)
   80c2a:	4798      	blx	r3
   80c2c:	a382      	add	r3, pc, #520	; (adr r3, 80e38 <moveTo+0x218>)
   80c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80c32:	4c8e      	ldr	r4, [pc, #568]	; (80e6c <moveTo+0x24c>)
   80c34:	47a0      	blx	r4
   80c36:	4b8e      	ldr	r3, [pc, #568]	; (80e70 <moveTo+0x250>)
   80c38:	4798      	blx	r3
   80c3a:	4682      	mov	sl, r0
	double dT=0.5;
	double Td=0.265;//0.53;
	double Ti=1.075;//2.15;
	int32_t sum=0;
	//--------------------------------------Updated D�sir�e och Ansam 170503
	delay_us(300);
   80c3c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   80c40:	4c8c      	ldr	r4, [pc, #560]	; (80e74 <moveTo+0x254>)
   80c42:	47a0      	blx	r4
	reset_Counter(); //Reset counter for encoders for wheel to ensure counter reseted for next movement
   80c44:	4b8c      	ldr	r3, [pc, #560]	; (80e78 <moveTo+0x258>)
   80c46:	4798      	blx	r3
	delay_us(300);
   80c48:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   80c4c:	47a0      	blx	r4

	// Controlls if moving forward or backwards
	if ( direction!=1 && direction!=-1 )
   80c4e:	f1bb 0f01 	cmp.w	fp, #1
   80c52:	d004      	beq.n	80c5e <moveTo+0x3e>
	{
		direction=1;
   80c54:	f1bb 3fff 	cmp.w	fp, #4294967295
   80c58:	bf18      	it	ne
   80c5a:	f04f 0b01 	movne.w	fp, #1

		/**
		This while loop runs until robot reaches its destination
		checks if totalmovemnt pulses is the same or more than the total pulses needed
		**/
    while (totMovement <= totalPulses) {
   80c5e:	4650      	mov	r0, sl
   80c60:	2100      	movs	r1, #0
   80c62:	4b86      	ldr	r3, [pc, #536]	; (80e7c <moveTo+0x25c>)
   80c64:	4798      	blx	r3
   80c66:	2800      	cmp	r0, #0
   80c68:	f000 80d8 	beq.w	80e1c <moveTo+0x1fc>
   80c6c:	2200      	movs	r2, #0
   80c6e:	9206      	str	r2, [sp, #24]
   80c70:	2200      	movs	r2, #0
   80c72:	2300      	movs	r3, #0
   80c74:	e9cd 2300 	strd	r2, r3, [sp]
   80c78:	f04f 0900 	mov.w	r9, #0
 		{
 			speed = 180;
 		}


		rightWheel(1500 + ((speed+controlValue)*direction));//New speed for rightWheel
   80c7c:	f8cd b01c 	str.w	fp, [sp, #28]
		/**
		This while loop runs until robot reaches its destination
		checks if totalmovemnt pulses is the same or more than the total pulses needed
		**/
    while (totMovement <= totalPulses) {
		delay_ms(1);
   80c80:	f241 7070 	movw	r0, #6000	; 0x1770
   80c84:	4b7b      	ldr	r3, [pc, #492]	; (80e74 <moveTo+0x254>)
   80c86:	4798      	blx	r3
			/**
			Checks if both encoder have counted up since last time
			if counted, then regulates the need values from encoder
			**/
      if (c1Loop == true && c2Loop == true) {
   80c88:	4b7d      	ldr	r3, [pc, #500]	; (80e80 <moveTo+0x260>)
   80c8a:	781b      	ldrb	r3, [r3, #0]
   80c8c:	2b00      	cmp	r3, #0
   80c8e:	f000 80be 	beq.w	80e0e <moveTo+0x1ee>
   80c92:	4b7c      	ldr	r3, [pc, #496]	; (80e84 <moveTo+0x264>)
   80c94:	781b      	ldrb	r3, [r3, #0]
   80c96:	2b00      	cmp	r3, #0
   80c98:	f000 80b9 	beq.w	80e0e <moveTo+0x1ee>
		totMovement = totMovement + ((counter_1+counter_2)/2);
   80c9c:	4c7a      	ldr	r4, [pc, #488]	; (80e88 <moveTo+0x268>)
   80c9e:	8820      	ldrh	r0, [r4, #0]
   80ca0:	4d7a      	ldr	r5, [pc, #488]	; (80e8c <moveTo+0x26c>)
   80ca2:	882b      	ldrh	r3, [r5, #0]
   80ca4:	4418      	add	r0, r3
   80ca6:	1040      	asrs	r0, r0, #1
   80ca8:	4b79      	ldr	r3, [pc, #484]	; (80e90 <moveTo+0x270>)
   80caa:	4798      	blx	r3
   80cac:	4601      	mov	r1, r0
   80cae:	4648      	mov	r0, r9
   80cb0:	4b78      	ldr	r3, [pc, #480]	; (80e94 <moveTo+0x274>)
   80cb2:	4798      	blx	r3
   80cb4:	4681      	mov	r9, r0
		delay_ms(1);
   80cb6:	f241 7070 	movw	r0, #6000	; 0x1770
   80cba:	4e6e      	ldr	r6, [pc, #440]	; (80e74 <moveTo+0x254>)
   80cbc:	47b0      	blx	r6
        measurementValue = (counter_2-counter_1);// Calculates the error diffferce
   80cbe:	8828      	ldrh	r0, [r5, #0]
   80cc0:	8823      	ldrh	r3, [r4, #0]
   80cc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80e68 <moveTo+0x248>
   80cc6:	1ac0      	subs	r0, r0, r3
   80cc8:	47c0      	blx	r8
   80cca:	4604      	mov	r4, r0
   80ccc:	460d      	mov	r5, r1
		delay_us(500);
   80cce:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80cd2:	47b0      	blx	r6
        reset_Counter();//Reset counter for next regulation later
   80cd4:	4b68      	ldr	r3, [pc, #416]	; (80e78 <moveTo+0x258>)
   80cd6:	4798      	blx	r3
		delay_us(500);
   80cd8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80cdc:	47b0      	blx	r6
	    proportionalError = (referenceValue - measurementValue); // Calculates p-controller gain
   80cde:	4f6e      	ldr	r7, [pc, #440]	; (80e98 <moveTo+0x278>)
   80ce0:	2000      	movs	r0, #0
   80ce2:	2100      	movs	r1, #0
   80ce4:	4622      	mov	r2, r4
   80ce6:	462b      	mov	r3, r5
   80ce8:	47b8      	blx	r7
   80cea:	e9cd 0102 	strd	r0, r1, [sp, #8]

		//--------------------------------------Updated D�sir�e och Ansam 170503
		sum = (sum + prevD);
   80cee:	9806      	ldr	r0, [sp, #24]
   80cf0:	47c0      	blx	r8
   80cf2:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 80eb4 <moveTo+0x294>
   80cf6:	e9dd 2300 	ldrd	r2, r3, [sp]
   80cfa:	47d8      	blx	fp
   80cfc:	4b67      	ldr	r3, [pc, #412]	; (80e9c <moveTo+0x27c>)
   80cfe:	4798      	blx	r3
   80d00:	9006      	str	r0, [sp, #24]
		delay_us(500);
   80d02:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80d06:	47b0      	blx	r6
		integral= (sum * (dT/Ti));
		delay_us(500);
   80d08:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80d0c:	47b0      	blx	r6
		derivate = ((Td/dT) * (proportionalError-prevD));
		delay_us(500);
   80d0e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80d12:	47b0      	blx	r6
	    proportionalError = (referenceValue - measurementValue); // Calculates p-controller gain

		//--------------------------------------Updated D�sir�e och Ansam 170503
		sum = (sum + prevD);
		delay_us(500);
		integral= (sum * (dT/Ti));
   80d14:	9806      	ldr	r0, [sp, #24]
   80d16:	47c0      	blx	r8
   80d18:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80ec4 <moveTo+0x2a4>
   80d1c:	a348      	add	r3, pc, #288	; (adr r3, 80e40 <moveTo+0x220>)
   80d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d22:	47c0      	blx	r8
   80d24:	4602      	mov	r2, r0
   80d26:	460b      	mov	r3, r1
		delay_us(500);
		derivate = ((Td/dT) * (proportionalError-prevD));
		delay_us(500);
	   controlValue =(kp*(proportionalError+integral+ derivate)); //PID
   80d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   80d2c:	47d8      	blx	fp
   80d2e:	4604      	mov	r4, r0
   80d30:	460d      	mov	r5, r1
		//--------------------------------------Updated D�sir�e och Ansam 170503
		sum = (sum + prevD);
		delay_us(500);
		integral= (sum * (dT/Ti));
		delay_us(500);
		derivate = ((Td/dT) * (proportionalError-prevD));
   80d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   80d36:	e9dd 2300 	ldrd	r2, r3, [sp]
   80d3a:	47b8      	blx	r7
   80d3c:	a342      	add	r3, pc, #264	; (adr r3, 80e48 <moveTo+0x228>)
   80d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d42:	47c0      	blx	r8
   80d44:	4602      	mov	r2, r0
   80d46:	460b      	mov	r3, r1
		delay_us(500);
	   controlValue =(kp*(proportionalError+integral+ derivate)); //PID
   80d48:	4620      	mov	r0, r4
   80d4a:	4629      	mov	r1, r5
   80d4c:	47d8      	blx	fp
   80d4e:	2200      	movs	r2, #0
   80d50:	4b53      	ldr	r3, [pc, #332]	; (80ea0 <moveTo+0x280>)
   80d52:	47c0      	blx	r8
   80d54:	e9cd 0100 	strd	r0, r1, [sp]
	   //--------------------------------------Updated D�sir�e och Ansam 170503

	   //iPart = (Ti*integralError); //Calculates i-controller gain
	   // dPart = //(kd*(proportionalError-derivativeError)); //Calculates d-controller gain
	   //controlValue = (kp*(proportionalError+iPart+dPart)); //Total regulation for PID calculate new value for correcting the error
		delay_us(500);
   80d58:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80d5c:	47b0      	blx	r6

		 //	Check if almost reached the destination to slow down and make a smoother brake
		 if (((totMovement/totalPulses)>= 0.85) || ((totMovement/totalPulses)<= 0.1))
   80d5e:	4648      	mov	r0, r9
   80d60:	4651      	mov	r1, sl
   80d62:	4b50      	ldr	r3, [pc, #320]	; (80ea4 <moveTo+0x284>)
   80d64:	4798      	blx	r3
   80d66:	4b50      	ldr	r3, [pc, #320]	; (80ea8 <moveTo+0x288>)
   80d68:	4798      	blx	r3
   80d6a:	4604      	mov	r4, r0
   80d6c:	460d      	mov	r5, r1
   80d6e:	a338      	add	r3, pc, #224	; (adr r3, 80e50 <moveTo+0x230>)
   80d70:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d74:	4e4d      	ldr	r6, [pc, #308]	; (80eac <moveTo+0x28c>)
   80d76:	47b0      	blx	r6
   80d78:	b958      	cbnz	r0, 80d92 <moveTo+0x172>
   80d7a:	4620      	mov	r0, r4
   80d7c:	4629      	mov	r1, r5
   80d7e:	a336      	add	r3, pc, #216	; (adr r3, 80e58 <moveTo+0x238>)
   80d80:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d84:	4c4a      	ldr	r4, [pc, #296]	; (80eb0 <moveTo+0x290>)
   80d86:	47a0      	blx	r4
   80d88:	2800      	cmp	r0, #0
			 speed = 110;
 		}
		//Else same speed set
 		else
 		{
 			speed = 180;
   80d8a:	bf14      	ite	ne
   80d8c:	206e      	movne	r0, #110	; 0x6e
   80d8e:	20b4      	moveq	r0, #180	; 0xb4
   80d90:	e000      	b.n	80d94 <moveTo+0x174>

		 //	Check if almost reached the destination to slow down and make a smoother brake
		 if (((totMovement/totalPulses)>= 0.85) || ((totMovement/totalPulses)<= 0.1))
 		{
 			//speed = speed - ((totMovement/totalPulses)*150) ;
			 speed = 110;
   80d92:	206e      	movs	r0, #110	; 0x6e
 		{
 			speed = 180;
 		}


		rightWheel(1500 + ((speed+controlValue)*direction));//New speed for rightWheel
   80d94:	4e34      	ldr	r6, [pc, #208]	; (80e68 <moveTo+0x248>)
   80d96:	47b0      	blx	r6
   80d98:	4604      	mov	r4, r0
   80d9a:	460d      	mov	r5, r1
   80d9c:	9807      	ldr	r0, [sp, #28]
   80d9e:	47b0      	blx	r6
   80da0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80da4:	4e43      	ldr	r6, [pc, #268]	; (80eb4 <moveTo+0x294>)
   80da6:	4620      	mov	r0, r4
   80da8:	4629      	mov	r1, r5
   80daa:	e9dd 2300 	ldrd	r2, r3, [sp]
   80dae:	47b0      	blx	r6
   80db0:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80ec4 <moveTo+0x2a4>
   80db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   80db8:	47c0      	blx	r8
   80dba:	a329      	add	r3, pc, #164	; (adr r3, 80e60 <moveTo+0x240>)
   80dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   80dc0:	47b0      	blx	r6
   80dc2:	4f3d      	ldr	r7, [pc, #244]	; (80eb8 <moveTo+0x298>)
   80dc4:	47b8      	blx	r7
   80dc6:	4b3d      	ldr	r3, [pc, #244]	; (80ebc <moveTo+0x29c>)
   80dc8:	4798      	blx	r3
		leftWheel( 1500 + ((speed-controlValue)*direction));//New speed for leftWheel
   80dca:	4620      	mov	r0, r4
   80dcc:	4629      	mov	r1, r5
   80dce:	e9dd 2300 	ldrd	r2, r3, [sp]
   80dd2:	4c31      	ldr	r4, [pc, #196]	; (80e98 <moveTo+0x278>)
   80dd4:	47a0      	blx	r4
   80dd6:	4602      	mov	r2, r0
   80dd8:	460b      	mov	r3, r1
   80dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   80dde:	47c0      	blx	r8
   80de0:	a31f      	add	r3, pc, #124	; (adr r3, 80e60 <moveTo+0x240>)
   80de2:	e9d3 2300 	ldrd	r2, r3, [r3]
   80de6:	47b0      	blx	r6
   80de8:	47b8      	blx	r7
   80dea:	4b35      	ldr	r3, [pc, #212]	; (80ec0 <moveTo+0x2a0>)
   80dec:	4798      	blx	r3
		delay_us(500);
   80dee:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80df2:	4c20      	ldr	r4, [pc, #128]	; (80e74 <moveTo+0x254>)
   80df4:	47a0      	blx	r4
        c1Loop = false; //Loop finished to prevent from running loop again
   80df6:	2300      	movs	r3, #0
   80df8:	4a21      	ldr	r2, [pc, #132]	; (80e80 <moveTo+0x260>)
   80dfa:	7013      	strb	r3, [r2, #0]
        c2Loop = false;//Loop finished to prevent from running loop again
   80dfc:	4a21      	ldr	r2, [pc, #132]	; (80e84 <moveTo+0x264>)
   80dfe:	7013      	strb	r3, [r2, #0]
		delay_us(500);
   80e00:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80e04:	47a0      	blx	r4
		integral= (sum * (dT/Ti));
		delay_us(500);
		derivate = ((Td/dT) * (proportionalError-prevD));
		delay_us(500);
	   controlValue =(kp*(proportionalError+integral+ derivate)); //PID
	   prevD=proportionalError;
   80e06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80e0a:	e9cd 2300 	strd	r2, r3, [sp]

		/**
		This while loop runs until robot reaches its destination
		checks if totalmovemnt pulses is the same or more than the total pulses needed
		**/
    while (totMovement <= totalPulses) {
   80e0e:	4650      	mov	r0, sl
   80e10:	4649      	mov	r1, r9
   80e12:	4b1a      	ldr	r3, [pc, #104]	; (80e7c <moveTo+0x25c>)
   80e14:	4798      	blx	r3
   80e16:	2800      	cmp	r0, #0
   80e18:	f47f af32 	bne.w	80c80 <moveTo+0x60>
        c2Loop = false;//Loop finished to prevent from running loop again
		delay_us(500);
      }
}

	rightWheel(1500);//Stop rightWheel
   80e1c:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80e20:	4b26      	ldr	r3, [pc, #152]	; (80ebc <moveTo+0x29c>)
   80e22:	4798      	blx	r3
	leftWheel(1500);//Stop leftWheel
   80e24:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80e28:	4b25      	ldr	r3, [pc, #148]	; (80ec0 <moveTo+0x2a0>)
   80e2a:	4798      	blx	r3
}
   80e2c:	b009      	add	sp, #36	; 0x24
   80e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e32:	bf00      	nop
   80e34:	f3af 8000 	nop.w
   80e38:	e147ae14 	.word	0xe147ae14
   80e3c:	3ff6147a 	.word	0x3ff6147a
   80e40:	11dc4771 	.word	0x11dc4771
   80e44:	3fddc477 	.word	0x3fddc477
   80e48:	8f5c28f6 	.word	0x8f5c28f6
   80e4c:	3fe0f5c2 	.word	0x3fe0f5c2
   80e50:	33333333 	.word	0x33333333
   80e54:	3feb3333 	.word	0x3feb3333
   80e58:	9999999a 	.word	0x9999999a
   80e5c:	3fb99999 	.word	0x3fb99999
   80e60:	00000000 	.word	0x00000000
   80e64:	40977000 	.word	0x40977000
   80e68:	00081f85 	.word	0x00081f85
   80e6c:	000822a5 	.word	0x000822a5
   80e70:	00082615 	.word	0x00082615
   80e74:	20070001 	.word	0x20070001
   80e78:	0008090d 	.word	0x0008090d
   80e7c:	00082c35 	.word	0x00082c35
   80e80:	20070138 	.word	0x20070138
   80e84:	20070139 	.word	0x20070139
   80e88:	20070a64 	.word	0x20070a64
   80e8c:	20070a66 	.word	0x20070a66
   80e90:	00082829 	.word	0x00082829
   80e94:	000826c1 	.word	0x000826c1
   80e98:	00081ce9 	.word	0x00081ce9
   80e9c:	00082585 	.word	0x00082585
   80ea0:	401a0000 	.word	0x401a0000
   80ea4:	00082a39 	.word	0x00082a39
   80ea8:	00081fa9 	.word	0x00081fa9
   80eac:	0008255d 	.word	0x0008255d
   80eb0:	00082549 	.word	0x00082549
   80eb4:	00081ced 	.word	0x00081ced
   80eb8:	000825d5 	.word	0x000825d5
   80ebc:	00081091 	.word	0x00081091
   80ec0:	00081061 	.word	0x00081061
   80ec4:	00082051 	.word	0x00082051

00080ec8 <rotation>:

/* This method rotates the robot around its own axis at the desired degree and speed
   @param degree rotation degree
   @param ratationSpeed rotation speed
*/
void rotation (int degree, int rotationSpeed){
   80ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80ecc:	4604      	mov	r4, r0
   80ece:	460f      	mov	r7, r1
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
	int totalPulses;
	int course=1;     // rotation course, 1 to right -1 to left
	rightWheel(1500);
   80ed0:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80ed4:	4b20      	ldr	r3, [pc, #128]	; (80f58 <rotation+0x90>)
   80ed6:	4798      	blx	r3
	leftWheel(1500);
   80ed8:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80edc:	4b1f      	ldr	r3, [pc, #124]	; (80f5c <rotation+0x94>)
   80ede:	4798      	blx	r3
     if (degree<0)
   80ee0:	2c00      	cmp	r4, #0
     {
		 course=-1;
		 degree=degree*course;
   80ee2:	bfba      	itte	lt
   80ee4:	4264      	neglt	r4, r4
	int course=1;     // rotation course, 1 to right -1 to left
	rightWheel(1500);
	leftWheel(1500);
     if (degree<0)
     {
		 course=-1;
   80ee6:	f04f 38ff 	movlt.w	r8, #4294967295
	int controlValue=0;
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
	int totalPulses;
	int course=1;     // rotation course, 1 to right -1 to left
   80eea:	f04f 0801 	movge.w	r8, #1
     {
		 course=-1;
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
   80eee:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   80ef2:	1064      	asrs	r4, r4, #1
	reset_Counter();
   80ef4:	4b1a      	ldr	r3, [pc, #104]	; (80f60 <rotation+0x98>)
   80ef6:	4798      	blx	r3
*/
void rotation (int degree, int rotationSpeed){
	int controlValue=0;
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
   80ef8:	2200      	movs	r2, #0
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80efa:	4e1a      	ldr	r6, [pc, #104]	; (80f64 <rotation+0x9c>)
   80efc:	4d1a      	ldr	r5, [pc, #104]	; (80f68 <rotation+0xa0>)
		if ((counter_1+counter_2) >= checkValue)
		{
 		measurementValue = (counter_2-counter_1);
 		controlValue = (gain*measurementValue);
		// update wheels speed
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80efe:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80f5c <rotation+0x94>
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80f02:	e017      	b.n	80f34 <rotation+0x6c>
	{
		if ((counter_1+counter_2) >= checkValue)
   80f04:	4293      	cmp	r3, r2
   80f06:	db18      	blt.n	80f3a <rotation+0x72>
		{
 		measurementValue = (counter_2-counter_1);
   80f08:	ebc0 0a01 	rsb	sl, r0, r1
 		controlValue = (gain*measurementValue);
   80f0c:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
		// update wheels speed
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80f10:	eb07 000a 	add.w	r0, r7, sl
   80f14:	fb08 f000 	mul.w	r0, r8, r0
   80f18:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   80f1c:	47c8      	blx	r9
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
   80f1e:	ebc7 000a 	rsb	r0, r7, sl
   80f22:	fb08 f000 	mul.w	r0, r8, r0
   80f26:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   80f2a:	4b0b      	ldr	r3, [pc, #44]	; (80f58 <rotation+0x90>)
   80f2c:	4798      	blx	r3
		checkValue=counter_1+counter_2;
   80f2e:	8832      	ldrh	r2, [r6, #0]
   80f30:	882b      	ldrh	r3, [r5, #0]
   80f32:	441a      	add	r2, r3
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80f34:	8830      	ldrh	r0, [r6, #0]
   80f36:	8829      	ldrh	r1, [r5, #0]
   80f38:	1843      	adds	r3, r0, r1
   80f3a:	429c      	cmp	r4, r3
   80f3c:	dce2      	bgt.n	80f04 <rotation+0x3c>
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
		checkValue=counter_1+counter_2;
		}
	}
	//  stop wheels
	rightWheel(1500);
   80f3e:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80f42:	4b05      	ldr	r3, [pc, #20]	; (80f58 <rotation+0x90>)
   80f44:	4798      	blx	r3
	leftWheel(1500);
   80f46:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80f4a:	4b04      	ldr	r3, [pc, #16]	; (80f5c <rotation+0x94>)
   80f4c:	4798      	blx	r3
	reset_Counter();
   80f4e:	4b04      	ldr	r3, [pc, #16]	; (80f60 <rotation+0x98>)
   80f50:	4798      	blx	r3
   80f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80f56:	bf00      	nop
   80f58:	00081091 	.word	0x00081091
   80f5c:	00081061 	.word	0x00081061
   80f60:	0008090d 	.word	0x0008090d
   80f64:	20070a64 	.word	0x20070a64
   80f68:	20070a66 	.word	0x20070a66

00080f6c <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   80f6c:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   80f6e:	2055      	movs	r0, #85	; 0x55
   80f70:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f74:	4b0b      	ldr	r3, [pc, #44]	; (80fa4 <initPin21+0x38>)
   80f76:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   80f78:	4b0b      	ldr	r3, [pc, #44]	; (80fa8 <initPin21+0x3c>)
   80f7a:	2404      	movs	r4, #4
   80f7c:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80f7e:	220b      	movs	r2, #11
   80f80:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   80f82:	2200      	movs	r2, #0
   80f84:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   80f86:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 7500;
   80f88:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80f8c:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   80f8e:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   80f90:	4d06      	ldr	r5, [pc, #24]	; (80fac <initPin21+0x40>)
   80f92:	4628      	mov	r0, r5
   80f94:	4619      	mov	r1, r3
   80f96:	4b06      	ldr	r3, [pc, #24]	; (80fb0 <initPin21+0x44>)
   80f98:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80f9a:	4628      	mov	r0, r5
   80f9c:	4621      	mov	r1, r4
   80f9e:	4b05      	ldr	r3, [pc, #20]	; (80fb4 <initPin21+0x48>)
   80fa0:	4798      	blx	r3
   80fa2:	bd38      	pop	{r3, r4, r5, pc}
   80fa4:	0008122d 	.word	0x0008122d
   80fa8:	20070b68 	.word	0x20070b68
   80fac:	40094000 	.word	0x40094000
   80fb0:	000814d5 	.word	0x000814d5
   80fb4:	000815fd 	.word	0x000815fd

00080fb8 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   80fb8:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   80fba:	2056      	movs	r0, #86	; 0x56
   80fbc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80fc0:	4b0b      	ldr	r3, [pc, #44]	; (80ff0 <initPin22+0x38>)
   80fc2:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   80fc4:	4b0b      	ldr	r3, [pc, #44]	; (80ff4 <initPin22+0x3c>)
   80fc6:	2405      	movs	r4, #5
   80fc8:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80fca:	220b      	movs	r2, #11
   80fcc:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   80fce:	2200      	movs	r2, #0
   80fd0:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   80fd2:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 7500;
   80fd4:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80fd8:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   80fda:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   80fdc:	4d06      	ldr	r5, [pc, #24]	; (80ff8 <initPin22+0x40>)
   80fde:	4628      	mov	r0, r5
   80fe0:	4619      	mov	r1, r3
   80fe2:	4b06      	ldr	r3, [pc, #24]	; (80ffc <initPin22+0x44>)
   80fe4:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   80fe6:	4628      	mov	r0, r5
   80fe8:	4621      	mov	r1, r4
   80fea:	4b05      	ldr	r3, [pc, #20]	; (81000 <initPin22+0x48>)
   80fec:	4798      	blx	r3
   80fee:	bd38      	pop	{r3, r4, r5, pc}
   80ff0:	0008122d 	.word	0x0008122d
   80ff4:	20070b40 	.word	0x20070b40
   80ff8:	40094000 	.word	0x40094000
   80ffc:	000814d5 	.word	0x000814d5
   81000:	000815fd 	.word	0x000815fd

00081004 <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   81004:	b530      	push	{r4, r5, lr}
   81006:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   81008:	2024      	movs	r0, #36	; 0x24
   8100a:	4b0d      	ldr	r3, [pc, #52]	; (81040 <PWM_init+0x3c>)
   8100c:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   8100e:	4c0d      	ldr	r4, [pc, #52]	; (81044 <PWM_init+0x40>)
   81010:	4620      	mov	r0, r4
   81012:	2104      	movs	r1, #4
   81014:	4d0c      	ldr	r5, [pc, #48]	; (81048 <PWM_init+0x44>)
   81016:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   81018:	4620      	mov	r0, r4
   8101a:	2105      	movs	r1, #5
   8101c:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   8101e:	4b0b      	ldr	r3, [pc, #44]	; (8104c <PWM_init+0x48>)
   81020:	9301      	str	r3, [sp, #4]
   81022:	2300      	movs	r3, #0
   81024:	9302      	str	r3, [sp, #8]
   81026:	4b0a      	ldr	r3, [pc, #40]	; (81050 <PWM_init+0x4c>)
   81028:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   8102a:	4620      	mov	r0, r4
   8102c:	a901      	add	r1, sp, #4
   8102e:	4b09      	ldr	r3, [pc, #36]	; (81054 <PWM_init+0x50>)
   81030:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   81032:	4b09      	ldr	r3, [pc, #36]	; (81058 <PWM_init+0x54>)
   81034:	4798      	blx	r3
	initPin22();
   81036:	4b09      	ldr	r3, [pc, #36]	; (8105c <PWM_init+0x58>)
   81038:	4798      	blx	r3
	
}
   8103a:	b005      	add	sp, #20
   8103c:	bd30      	pop	{r4, r5, pc}
   8103e:	bf00      	nop
   81040:	000813e5 	.word	0x000813e5
   81044:	40094000 	.word	0x40094000
   81048:	00081609 	.word	0x00081609
   8104c:	000f4240 	.word	0x000f4240
   81050:	0501bd00 	.word	0x0501bd00
   81054:	00081495 	.word	0x00081495
   81058:	00080f6d 	.word	0x00080f6d
   8105c:	00080fb9 	.word	0x00080fb9

00081060 <leftWheel>:
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
}
 /* This method changes the duty cycle of PWM signal on pin 9. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void leftWheel(uint32_t duty){
   81060:	b508      	push	{r3, lr}
	if(duty<800){
   81062:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   81066:	d305      	bcc.n	81074 <leftWheel+0x14>
   81068:	f640 0298 	movw	r2, #2200	; 0x898
   8106c:	4290      	cmp	r0, r2
   8106e:	bf38      	it	cc
   81070:	4602      	movcc	r2, r0
   81072:	e001      	b.n	81078 <leftWheel+0x18>
		duty=800;
   81074:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_21, duty );
   81078:	4802      	ldr	r0, [pc, #8]	; (81084 <leftWheel+0x24>)
   8107a:	4903      	ldr	r1, [pc, #12]	; (81088 <leftWheel+0x28>)
   8107c:	4b03      	ldr	r3, [pc, #12]	; (8108c <leftWheel+0x2c>)
   8107e:	4798      	blx	r3
   81080:	bd08      	pop	{r3, pc}
   81082:	bf00      	nop
   81084:	40094000 	.word	0x40094000
   81088:	20070b68 	.word	0x20070b68
   8108c:	000815d9 	.word	0x000815d9

00081090 <rightWheel>:
}

 /* This method changes the duty cycle of PWM signal on pin 8. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void rightWheel(uint32_t duty){
   81090:	b508      	push	{r3, lr}
	
	if(duty<800){
   81092:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   81096:	d305      	bcc.n	810a4 <rightWheel+0x14>
   81098:	f640 0298 	movw	r2, #2200	; 0x898
   8109c:	4290      	cmp	r0, r2
   8109e:	bf38      	it	cc
   810a0:	4602      	movcc	r2, r0
   810a2:	e001      	b.n	810a8 <rightWheel+0x18>
		duty=800;
   810a4:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   810a8:	4802      	ldr	r0, [pc, #8]	; (810b4 <rightWheel+0x24>)
   810aa:	4903      	ldr	r1, [pc, #12]	; (810b8 <rightWheel+0x28>)
   810ac:	4b03      	ldr	r3, [pc, #12]	; (810bc <rightWheel+0x2c>)
   810ae:	4798      	blx	r3
   810b0:	bd08      	pop	{r3, pc}
   810b2:	bf00      	nop
   810b4:	40094000 	.word	0x40094000
   810b8:	20070b40 	.word	0x20070b40
   810bc:	000815d9 	.word	0x000815d9

000810c0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   810c0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   810c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   810c6:	4b16      	ldr	r3, [pc, #88]	; (81120 <board_init+0x60>)
   810c8:	605a      	str	r2, [r3, #4]
   810ca:	200b      	movs	r0, #11
   810cc:	4c15      	ldr	r4, [pc, #84]	; (81124 <board_init+0x64>)
   810ce:	47a0      	blx	r4
   810d0:	200c      	movs	r0, #12
   810d2:	47a0      	blx	r4
   810d4:	200d      	movs	r0, #13
   810d6:	47a0      	blx	r4
   810d8:	200e      	movs	r0, #14
   810da:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   810dc:	203b      	movs	r0, #59	; 0x3b
   810de:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   810e2:	4c11      	ldr	r4, [pc, #68]	; (81128 <board_init+0x68>)
   810e4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   810e6:	2055      	movs	r0, #85	; 0x55
   810e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   810ec:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   810ee:	2056      	movs	r0, #86	; 0x56
   810f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   810f4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   810f6:	2068      	movs	r0, #104	; 0x68
   810f8:	490c      	ldr	r1, [pc, #48]	; (8112c <board_init+0x6c>)
   810fa:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   810fc:	205c      	movs	r0, #92	; 0x5c
   810fe:	490c      	ldr	r1, [pc, #48]	; (81130 <board_init+0x70>)
   81100:	47a0      	blx	r4
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81102:	4b0c      	ldr	r3, [pc, #48]	; (81134 <board_init+0x74>)
   81104:	f44f 5240 	mov.w	r2, #12288	; 0x3000
   81108:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   8110a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   8110c:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   8110e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81112:	6f19      	ldr	r1, [r3, #112]	; 0x70
   81114:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
   81118:	6719      	str	r1, [r3, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8111a:	605a      	str	r2, [r3, #4]
   8111c:	bd10      	pop	{r4, pc}
   8111e:	bf00      	nop
   81120:	400e1a50 	.word	0x400e1a50
   81124:	000813e5 	.word	0x000813e5
   81128:	0008122d 	.word	0x0008122d
   8112c:	28000079 	.word	0x28000079
   81130:	28000001 	.word	0x28000001
   81134:	400e0e00 	.word	0x400e0e00

00081138 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   81138:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   8113c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   81140:	bf0c      	ite	eq
   81142:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   81144:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   81146:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   81148:	bf0c      	ite	eq
   8114a:	2000      	moveq	r0, #0
   8114c:	2001      	movne	r0, #1
   8114e:	4770      	bx	lr

00081150 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81150:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81152:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81156:	d016      	beq.n	81186 <pio_set_peripheral+0x36>
   81158:	d804      	bhi.n	81164 <pio_set_peripheral+0x14>
   8115a:	b1c1      	cbz	r1, 8118e <pio_set_peripheral+0x3e>
   8115c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81160:	d00a      	beq.n	81178 <pio_set_peripheral+0x28>
   81162:	e013      	b.n	8118c <pio_set_peripheral+0x3c>
   81164:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81168:	d011      	beq.n	8118e <pio_set_peripheral+0x3e>
   8116a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8116e:	d00e      	beq.n	8118e <pio_set_peripheral+0x3e>
   81170:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81174:	d10a      	bne.n	8118c <pio_set_peripheral+0x3c>
   81176:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81178:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8117a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8117c:	400b      	ands	r3, r1
   8117e:	ea23 0302 	bic.w	r3, r3, r2
   81182:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81184:	e002      	b.n	8118c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81186:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81188:	4313      	orrs	r3, r2
   8118a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8118c:	6042      	str	r2, [r0, #4]
   8118e:	4770      	bx	lr

00081190 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81190:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81192:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81196:	bf14      	ite	ne
   81198:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8119a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8119c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   811a0:	bf14      	ite	ne
   811a2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   811a4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   811a6:	f012 0f02 	tst.w	r2, #2
   811aa:	d002      	beq.n	811b2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   811ac:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   811b0:	e004      	b.n	811bc <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   811b2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   811b6:	bf18      	it	ne
   811b8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   811bc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   811be:	6001      	str	r1, [r0, #0]
   811c0:	4770      	bx	lr
   811c2:	bf00      	nop

000811c4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   811c4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   811c6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   811c8:	9c01      	ldr	r4, [sp, #4]
   811ca:	b10c      	cbz	r4, 811d0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   811cc:	6641      	str	r1, [r0, #100]	; 0x64
   811ce:	e000      	b.n	811d2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   811d0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   811d2:	b10b      	cbz	r3, 811d8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   811d4:	6501      	str	r1, [r0, #80]	; 0x50
   811d6:	e000      	b.n	811da <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   811d8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   811da:	b10a      	cbz	r2, 811e0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   811dc:	6301      	str	r1, [r0, #48]	; 0x30
   811de:	e000      	b.n	811e2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   811e0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   811e2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   811e4:	6001      	str	r1, [r0, #0]
}
   811e6:	f85d 4b04 	ldr.w	r4, [sp], #4
   811ea:	4770      	bx	lr

000811ec <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   811ec:	f012 0f10 	tst.w	r2, #16
   811f0:	d010      	beq.n	81214 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   811f2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   811f6:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   811fa:	bf14      	ite	ne
   811fc:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   81200:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   81204:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   81208:	bf14      	ite	ne
   8120a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   8120e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   81212:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   81214:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   81218:	4770      	bx	lr
   8121a:	bf00      	nop

0008121c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   8121c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   8121e:	6401      	str	r1, [r0, #64]	; 0x40
   81220:	4770      	bx	lr
   81222:	bf00      	nop

00081224 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81224:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81226:	4770      	bx	lr

00081228 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81228:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8122a:	4770      	bx	lr

0008122c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8122c:	b570      	push	{r4, r5, r6, lr}
   8122e:	b082      	sub	sp, #8
   81230:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81232:	0944      	lsrs	r4, r0, #5
   81234:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   81238:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8123c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8123e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   81242:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81246:	d030      	beq.n	812aa <pio_configure_pin+0x7e>
   81248:	d806      	bhi.n	81258 <pio_configure_pin+0x2c>
   8124a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8124e:	d00a      	beq.n	81266 <pio_configure_pin+0x3a>
   81250:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81254:	d018      	beq.n	81288 <pio_configure_pin+0x5c>
   81256:	e049      	b.n	812ec <pio_configure_pin+0xc0>
   81258:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8125c:	d030      	beq.n	812c0 <pio_configure_pin+0x94>
   8125e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81262:	d02d      	beq.n	812c0 <pio_configure_pin+0x94>
   81264:	e042      	b.n	812ec <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81266:	f000 001f 	and.w	r0, r0, #31
   8126a:	2401      	movs	r4, #1
   8126c:	4084      	lsls	r4, r0
   8126e:	4630      	mov	r0, r6
   81270:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81274:	4622      	mov	r2, r4
   81276:	4b1f      	ldr	r3, [pc, #124]	; (812f4 <pio_configure_pin+0xc8>)
   81278:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8127a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8127e:	bf14      	ite	ne
   81280:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81282:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81284:	2001      	movs	r0, #1
   81286:	e032      	b.n	812ee <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81288:	f000 001f 	and.w	r0, r0, #31
   8128c:	2401      	movs	r4, #1
   8128e:	4084      	lsls	r4, r0
   81290:	4630      	mov	r0, r6
   81292:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81296:	4622      	mov	r2, r4
   81298:	4b16      	ldr	r3, [pc, #88]	; (812f4 <pio_configure_pin+0xc8>)
   8129a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8129c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   812a0:	bf14      	ite	ne
   812a2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   812a4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   812a6:	2001      	movs	r0, #1
   812a8:	e021      	b.n	812ee <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   812aa:	f000 011f 	and.w	r1, r0, #31
   812ae:	2401      	movs	r4, #1
   812b0:	4630      	mov	r0, r6
   812b2:	fa04 f101 	lsl.w	r1, r4, r1
   812b6:	462a      	mov	r2, r5
   812b8:	4b0f      	ldr	r3, [pc, #60]	; (812f8 <pio_configure_pin+0xcc>)
   812ba:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   812bc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   812be:	e016      	b.n	812ee <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   812c0:	f000 011f 	and.w	r1, r0, #31
   812c4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   812c6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   812ca:	ea05 0304 	and.w	r3, r5, r4
   812ce:	9300      	str	r3, [sp, #0]
   812d0:	4630      	mov	r0, r6
   812d2:	fa04 f101 	lsl.w	r1, r4, r1
   812d6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   812da:	bf14      	ite	ne
   812dc:	2200      	movne	r2, #0
   812de:	2201      	moveq	r2, #1
   812e0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   812e4:	4d05      	ldr	r5, [pc, #20]	; (812fc <pio_configure_pin+0xd0>)
   812e6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   812e8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   812ea:	e000      	b.n	812ee <pio_configure_pin+0xc2>

	default:
		return 0;
   812ec:	2000      	movs	r0, #0
	}

	return 1;
}
   812ee:	b002      	add	sp, #8
   812f0:	bd70      	pop	{r4, r5, r6, pc}
   812f2:	bf00      	nop
   812f4:	00081151 	.word	0x00081151
   812f8:	00081191 	.word	0x00081191
   812fc:	000811c5 	.word	0x000811c5

00081300 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81304:	4604      	mov	r4, r0
   81306:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81308:	4b10      	ldr	r3, [pc, #64]	; (8134c <pio_handler_process+0x4c>)
   8130a:	4798      	blx	r3
   8130c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8130e:	4620      	mov	r0, r4
   81310:	4b0f      	ldr	r3, [pc, #60]	; (81350 <pio_handler_process+0x50>)
   81312:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81314:	4005      	ands	r5, r0
   81316:	d017      	beq.n	81348 <pio_handler_process+0x48>
   81318:	4f0e      	ldr	r7, [pc, #56]	; (81354 <pio_handler_process+0x54>)
   8131a:	f107 040c 	add.w	r4, r7, #12
   8131e:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81320:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81324:	42b3      	cmp	r3, r6
   81326:	d10a      	bne.n	8133e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81328:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8132c:	4229      	tst	r1, r5
   8132e:	d006      	beq.n	8133e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81330:	6823      	ldr	r3, [r4, #0]
   81332:	4630      	mov	r0, r6
   81334:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81336:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8133a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8133e:	42bc      	cmp	r4, r7
   81340:	d002      	beq.n	81348 <pio_handler_process+0x48>
   81342:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81344:	2d00      	cmp	r5, #0
   81346:	d1eb      	bne.n	81320 <pio_handler_process+0x20>
   81348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8134c:	00081225 	.word	0x00081225
   81350:	00081229 	.word	0x00081229
   81354:	20070a6c 	.word	0x20070a6c

00081358 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   81358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8135a:	4c0b      	ldr	r4, [pc, #44]	; (81388 <pio_handler_set+0x30>)
   8135c:	6824      	ldr	r4, [r4, #0]
   8135e:	2c06      	cmp	r4, #6
   81360:	d810      	bhi.n	81384 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   81362:	4f0a      	ldr	r7, [pc, #40]	; (8138c <pio_handler_set+0x34>)
   81364:	0126      	lsls	r6, r4, #4
   81366:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   81368:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   8136a:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   8136c:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   8136e:	9906      	ldr	r1, [sp, #24]
   81370:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   81372:	3401      	adds	r4, #1
   81374:	4904      	ldr	r1, [pc, #16]	; (81388 <pio_handler_set+0x30>)
   81376:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81378:	4611      	mov	r1, r2
   8137a:	461a      	mov	r2, r3
   8137c:	4b04      	ldr	r3, [pc, #16]	; (81390 <pio_handler_set+0x38>)
   8137e:	4798      	blx	r3

	return 0;
   81380:	2000      	movs	r0, #0
   81382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   81384:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   81386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81388:	20070a68 	.word	0x20070a68
   8138c:	20070a6c 	.word	0x20070a6c
   81390:	000811ed 	.word	0x000811ed

00081394 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81394:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81396:	4802      	ldr	r0, [pc, #8]	; (813a0 <PIOA_Handler+0xc>)
   81398:	210b      	movs	r1, #11
   8139a:	4b02      	ldr	r3, [pc, #8]	; (813a4 <PIOA_Handler+0x10>)
   8139c:	4798      	blx	r3
   8139e:	bd08      	pop	{r3, pc}
   813a0:	400e0e00 	.word	0x400e0e00
   813a4:	00081301 	.word	0x00081301

000813a8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   813a8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   813aa:	4802      	ldr	r0, [pc, #8]	; (813b4 <PIOB_Handler+0xc>)
   813ac:	210c      	movs	r1, #12
   813ae:	4b02      	ldr	r3, [pc, #8]	; (813b8 <PIOB_Handler+0x10>)
   813b0:	4798      	blx	r3
   813b2:	bd08      	pop	{r3, pc}
   813b4:	400e1000 	.word	0x400e1000
   813b8:	00081301 	.word	0x00081301

000813bc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   813bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   813be:	4802      	ldr	r0, [pc, #8]	; (813c8 <PIOC_Handler+0xc>)
   813c0:	210d      	movs	r1, #13
   813c2:	4b02      	ldr	r3, [pc, #8]	; (813cc <PIOC_Handler+0x10>)
   813c4:	4798      	blx	r3
   813c6:	bd08      	pop	{r3, pc}
   813c8:	400e1200 	.word	0x400e1200
   813cc:	00081301 	.word	0x00081301

000813d0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   813d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   813d2:	4802      	ldr	r0, [pc, #8]	; (813dc <PIOD_Handler+0xc>)
   813d4:	210e      	movs	r1, #14
   813d6:	4b02      	ldr	r3, [pc, #8]	; (813e0 <PIOD_Handler+0x10>)
   813d8:	4798      	blx	r3
   813da:	bd08      	pop	{r3, pc}
   813dc:	400e1400 	.word	0x400e1400
   813e0:	00081301 	.word	0x00081301

000813e4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   813e4:	282c      	cmp	r0, #44	; 0x2c
   813e6:	d820      	bhi.n	8142a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   813e8:	281f      	cmp	r0, #31
   813ea:	d80d      	bhi.n	81408 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   813ec:	4b12      	ldr	r3, [pc, #72]	; (81438 <pmc_enable_periph_clk+0x54>)
   813ee:	699a      	ldr	r2, [r3, #24]
   813f0:	2301      	movs	r3, #1
   813f2:	4083      	lsls	r3, r0
   813f4:	401a      	ands	r2, r3
   813f6:	4293      	cmp	r3, r2
   813f8:	d019      	beq.n	8142e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   813fa:	2301      	movs	r3, #1
   813fc:	fa03 f000 	lsl.w	r0, r3, r0
   81400:	4b0d      	ldr	r3, [pc, #52]	; (81438 <pmc_enable_periph_clk+0x54>)
   81402:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81404:	2000      	movs	r0, #0
   81406:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81408:	4b0b      	ldr	r3, [pc, #44]	; (81438 <pmc_enable_periph_clk+0x54>)
   8140a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   8140e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81410:	2301      	movs	r3, #1
   81412:	4083      	lsls	r3, r0
   81414:	401a      	ands	r2, r3
   81416:	4293      	cmp	r3, r2
   81418:	d00b      	beq.n	81432 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8141a:	2301      	movs	r3, #1
   8141c:	fa03 f000 	lsl.w	r0, r3, r0
   81420:	4b05      	ldr	r3, [pc, #20]	; (81438 <pmc_enable_periph_clk+0x54>)
   81422:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81426:	2000      	movs	r0, #0
   81428:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8142a:	2001      	movs	r0, #1
   8142c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8142e:	2000      	movs	r0, #0
   81430:	4770      	bx	lr
   81432:	2000      	movs	r0, #0
}
   81434:	4770      	bx	lr
   81436:	bf00      	nop
   81438:	400e0600 	.word	0x400e0600

0008143c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8143c:	b4f0      	push	{r4, r5, r6, r7}
   8143e:	b08c      	sub	sp, #48	; 0x30
   81440:	4607      	mov	r7, r0
   81442:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81444:	ac01      	add	r4, sp, #4
   81446:	4d12      	ldr	r5, [pc, #72]	; (81490 <pwm_clocks_generate+0x54>)
   81448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8144a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8144c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8144e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   81454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   81458:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8145a:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8145c:	f852 4f04 	ldr.w	r4, [r2, #4]!
   81460:	fbb6 f4f4 	udiv	r4, r6, r4
   81464:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   81468:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   8146c:	d903      	bls.n	81476 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   8146e:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   81470:	2b0b      	cmp	r3, #11
   81472:	d1f3      	bne.n	8145c <pwm_clocks_generate+0x20>
   81474:	e004      	b.n	81480 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   81476:	2b0a      	cmp	r3, #10
   81478:	d805      	bhi.n	81486 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   8147a:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   8147e:	e004      	b.n	8148a <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   81480:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81484:	e001      	b.n	8148a <pwm_clocks_generate+0x4e>
   81486:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8148a:	b00c      	add	sp, #48	; 0x30
   8148c:	bcf0      	pop	{r4, r5, r6, r7}
   8148e:	4770      	bx	lr
   81490:	00083b70 	.word	0x00083b70

00081494 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81494:	b570      	push	{r4, r5, r6, lr}
   81496:	4606      	mov	r6, r0
   81498:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8149a:	6808      	ldr	r0, [r1, #0]
   8149c:	b140      	cbz	r0, 814b0 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8149e:	6889      	ldr	r1, [r1, #8]
   814a0:	4b0b      	ldr	r3, [pc, #44]	; (814d0 <pwm_init+0x3c>)
   814a2:	4798      	blx	r3
   814a4:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   814a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   814aa:	4298      	cmp	r0, r3
   814ac:	d101      	bne.n	814b2 <pwm_init+0x1e>
   814ae:	e00e      	b.n	814ce <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   814b0:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   814b2:	6860      	ldr	r0, [r4, #4]
   814b4:	b140      	cbz	r0, 814c8 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   814b6:	68a1      	ldr	r1, [r4, #8]
   814b8:	4b05      	ldr	r3, [pc, #20]	; (814d0 <pwm_init+0x3c>)
   814ba:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   814bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   814c0:	4298      	cmp	r0, r3
   814c2:	d004      	beq.n	814ce <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   814c4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   814c8:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   814ca:	2000      	movs	r0, #0
   814cc:	bd70      	pop	{r4, r5, r6, pc}
}
   814ce:	bd70      	pop	{r4, r5, r6, pc}
   814d0:	0008143d 	.word	0x0008143d

000814d4 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   814d4:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   814d6:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   814d8:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   814da:	684a      	ldr	r2, [r1, #4]
   814dc:	f002 020f 	and.w	r2, r2, #15
   814e0:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   814e2:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   814e4:	432c      	orrs	r4, r5
   814e6:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   814e8:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   814ec:	7d8a      	ldrb	r2, [r1, #22]
   814ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   814f2:	7dca      	ldrb	r2, [r1, #23]
   814f4:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   814f8:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   814fa:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   814fe:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   81502:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   81506:	68cc      	ldr	r4, [r1, #12]
   81508:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   8150c:	690c      	ldr	r4, [r1, #16]
   8150e:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   81512:	7d8a      	ldrb	r2, [r1, #22]
   81514:	b13a      	cbz	r2, 81526 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   81516:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   81518:	8b4a      	ldrh	r2, [r1, #26]
   8151a:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   8151e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   81522:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   81526:	6c85      	ldr	r5, [r0, #72]	; 0x48
   81528:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   8152c:	409a      	lsls	r2, r3
   8152e:	43d2      	mvns	r2, r2
   81530:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   81532:	7fce      	ldrb	r6, [r1, #31]
   81534:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   81536:	7f8c      	ldrb	r4, [r1, #30]
   81538:	409c      	lsls	r4, r3
   8153a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8153e:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   81540:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   81542:	6c44      	ldr	r4, [r0, #68]	; 0x44
   81544:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   81546:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   8154a:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   8154c:	f891 4020 	ldrb.w	r4, [r1, #32]
   81550:	409c      	lsls	r4, r3
   81552:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   81556:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   81558:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   8155a:	2201      	movs	r2, #1
   8155c:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   8155e:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81562:	b11c      	cbz	r4, 8156c <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   81564:	6a04      	ldr	r4, [r0, #32]
   81566:	4314      	orrs	r4, r2
   81568:	6204      	str	r4, [r0, #32]
   8156a:	e003      	b.n	81574 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   8156c:	6a04      	ldr	r4, [r0, #32]
   8156e:	ea24 0402 	bic.w	r4, r4, r2
   81572:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   81574:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   81578:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8157a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8157c:	bf0c      	ite	eq
   8157e:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   81580:	4394      	bicne	r4, r2
   81582:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81584:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   81588:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8158a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8158c:	bf0c      	ite	eq
   8158e:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   81592:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   81596:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81598:	2b03      	cmp	r3, #3
   8159a:	d80c      	bhi.n	815b6 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8159c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8159e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   815a0:	22ff      	movs	r2, #255	; 0xff
   815a2:	409a      	lsls	r2, r3
   815a4:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   815a8:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   815ac:	fa01 f303 	lsl.w	r3, r1, r3
   815b0:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   815b2:	66c3      	str	r3, [r0, #108]	; 0x6c
   815b4:	e00c      	b.n	815d0 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   815b6:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   815b8:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   815ba:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   815bc:	22ff      	movs	r2, #255	; 0xff
   815be:	409a      	lsls	r2, r3
   815c0:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   815c4:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   815c8:	fa01 f303 	lsl.w	r3, r1, r3
   815cc:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   815ce:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   815d0:	2000      	movs	r0, #0
   815d2:	bc70      	pop	{r4, r5, r6}
   815d4:	4770      	bx	lr
   815d6:	bf00      	nop

000815d8 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   815d8:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   815da:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   815dc:	690b      	ldr	r3, [r1, #16]
   815de:	4293      	cmp	r3, r2
   815e0:	d306      	bcc.n	815f0 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   815e2:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   815e4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   815e8:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   815ec:	2000      	movs	r0, #0
   815ee:	e001      	b.n	815f4 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   815f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   815f4:	f85d 4b04 	ldr.w	r4, [sp], #4
   815f8:	4770      	bx	lr
   815fa:	bf00      	nop

000815fc <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   815fc:	2301      	movs	r3, #1
   815fe:	fa03 f101 	lsl.w	r1, r3, r1
   81602:	6041      	str	r1, [r0, #4]
   81604:	4770      	bx	lr
   81606:	bf00      	nop

00081608 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   81608:	2301      	movs	r3, #1
   8160a:	fa03 f101 	lsl.w	r1, r3, r1
   8160e:	6081      	str	r1, [r0, #8]
   81610:	4770      	bx	lr
   81612:	bf00      	nop

00081614 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81614:	e7fe      	b.n	81614 <Dummy_Handler>
   81616:	bf00      	nop

00081618 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81618:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8161a:	4b1e      	ldr	r3, [pc, #120]	; (81694 <Reset_Handler+0x7c>)
   8161c:	4a1e      	ldr	r2, [pc, #120]	; (81698 <Reset_Handler+0x80>)
   8161e:	429a      	cmp	r2, r3
   81620:	d003      	beq.n	8162a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81622:	4b1e      	ldr	r3, [pc, #120]	; (8169c <Reset_Handler+0x84>)
   81624:	4a1b      	ldr	r2, [pc, #108]	; (81694 <Reset_Handler+0x7c>)
   81626:	429a      	cmp	r2, r3
   81628:	d304      	bcc.n	81634 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8162a:	4b1d      	ldr	r3, [pc, #116]	; (816a0 <Reset_Handler+0x88>)
   8162c:	4a1d      	ldr	r2, [pc, #116]	; (816a4 <Reset_Handler+0x8c>)
   8162e:	429a      	cmp	r2, r3
   81630:	d30f      	bcc.n	81652 <Reset_Handler+0x3a>
   81632:	e01a      	b.n	8166a <Reset_Handler+0x52>
   81634:	4b1c      	ldr	r3, [pc, #112]	; (816a8 <Reset_Handler+0x90>)
   81636:	4c1d      	ldr	r4, [pc, #116]	; (816ac <Reset_Handler+0x94>)
   81638:	1ae4      	subs	r4, r4, r3
   8163a:	f024 0403 	bic.w	r4, r4, #3
   8163e:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81640:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81642:	4814      	ldr	r0, [pc, #80]	; (81694 <Reset_Handler+0x7c>)
   81644:	4914      	ldr	r1, [pc, #80]	; (81698 <Reset_Handler+0x80>)
   81646:	585a      	ldr	r2, [r3, r1]
   81648:	501a      	str	r2, [r3, r0]
   8164a:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8164c:	42a3      	cmp	r3, r4
   8164e:	d1fa      	bne.n	81646 <Reset_Handler+0x2e>
   81650:	e7eb      	b.n	8162a <Reset_Handler+0x12>
   81652:	4b17      	ldr	r3, [pc, #92]	; (816b0 <Reset_Handler+0x98>)
   81654:	4917      	ldr	r1, [pc, #92]	; (816b4 <Reset_Handler+0x9c>)
   81656:	1ac9      	subs	r1, r1, r3
   81658:	f021 0103 	bic.w	r1, r1, #3
   8165c:	1d1a      	adds	r2, r3, #4
   8165e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81660:	2200      	movs	r2, #0
   81662:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81666:	428b      	cmp	r3, r1
   81668:	d1fb      	bne.n	81662 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8166a:	4a13      	ldr	r2, [pc, #76]	; (816b8 <Reset_Handler+0xa0>)
   8166c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81670:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81674:	4911      	ldr	r1, [pc, #68]	; (816bc <Reset_Handler+0xa4>)
   81676:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81678:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   8167c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81680:	d203      	bcs.n	8168a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81682:	688a      	ldr	r2, [r1, #8]
   81684:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81688:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8168a:	4b0d      	ldr	r3, [pc, #52]	; (816c0 <Reset_Handler+0xa8>)
   8168c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8168e:	4b0d      	ldr	r3, [pc, #52]	; (816c4 <Reset_Handler+0xac>)
   81690:	4798      	blx	r3
   81692:	e7fe      	b.n	81692 <Reset_Handler+0x7a>
   81694:	20070000 	.word	0x20070000
   81698:	00083c14 	.word	0x00083c14
   8169c:	2007099c 	.word	0x2007099c
   816a0:	20070b94 	.word	0x20070b94
   816a4:	2007099c 	.word	0x2007099c
   816a8:	20070004 	.word	0x20070004
   816ac:	2007099f 	.word	0x2007099f
   816b0:	20070998 	.word	0x20070998
   816b4:	20070b8f 	.word	0x20070b8f
   816b8:	00080000 	.word	0x00080000
   816bc:	e000ed00 	.word	0xe000ed00
   816c0:	00082c69 	.word	0x00082c69
   816c4:	00080149 	.word	0x00080149

000816c8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   816c8:	4b09      	ldr	r3, [pc, #36]	; (816f0 <_sbrk+0x28>)
   816ca:	681b      	ldr	r3, [r3, #0]
   816cc:	b913      	cbnz	r3, 816d4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   816ce:	4a09      	ldr	r2, [pc, #36]	; (816f4 <_sbrk+0x2c>)
   816d0:	4b07      	ldr	r3, [pc, #28]	; (816f0 <_sbrk+0x28>)
   816d2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   816d4:	4b06      	ldr	r3, [pc, #24]	; (816f0 <_sbrk+0x28>)
   816d6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   816d8:	181a      	adds	r2, r3, r0
   816da:	4907      	ldr	r1, [pc, #28]	; (816f8 <_sbrk+0x30>)
   816dc:	4291      	cmp	r1, r2
   816de:	db04      	blt.n	816ea <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   816e0:	4610      	mov	r0, r2
   816e2:	4a03      	ldr	r2, [pc, #12]	; (816f0 <_sbrk+0x28>)
   816e4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   816e6:	4618      	mov	r0, r3
   816e8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   816ea:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   816ee:	4770      	bx	lr
   816f0:	20070adc 	.word	0x20070adc
   816f4:	20072b98 	.word	0x20072b98
   816f8:	20087ffc 	.word	0x20087ffc

000816fc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   816fc:	f04f 30ff 	mov.w	r0, #4294967295
   81700:	4770      	bx	lr
   81702:	bf00      	nop

00081704 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81704:	2000      	movs	r0, #0
   81706:	4770      	bx	lr

00081708 <atan>:
   81708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8170c:	4bb6      	ldr	r3, [pc, #728]	; (819e8 <atan+0x2e0>)
   8170e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   81712:	429e      	cmp	r6, r3
   81714:	b083      	sub	sp, #12
   81716:	4604      	mov	r4, r0
   81718:	460d      	mov	r5, r1
   8171a:	4689      	mov	r9, r1
   8171c:	dd0f      	ble.n	8173e <atan+0x36>
   8171e:	49b3      	ldr	r1, [pc, #716]	; (819ec <atan+0x2e4>)
   81720:	428e      	cmp	r6, r1
   81722:	f300 80b3 	bgt.w	8188c <atan+0x184>
   81726:	f000 80ae 	beq.w	81886 <atan+0x17e>
   8172a:	f1b9 0f00 	cmp.w	r9, #0
   8172e:	f340 80ef 	ble.w	81910 <atan+0x208>
   81732:	a191      	add	r1, pc, #580	; (adr r1, 81978 <atan+0x270>)
   81734:	e9d1 0100 	ldrd	r0, r1, [r1]
   81738:	b003      	add	sp, #12
   8173a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8173e:	4bac      	ldr	r3, [pc, #688]	; (819f0 <atan+0x2e8>)
   81740:	429e      	cmp	r6, r3
   81742:	f300 80bd 	bgt.w	818c0 <atan+0x1b8>
   81746:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   8174a:	429e      	cmp	r6, r3
   8174c:	f340 80a7 	ble.w	8189e <atan+0x196>
   81750:	f04f 3cff 	mov.w	ip, #4294967295
   81754:	4622      	mov	r2, r4
   81756:	462b      	mov	r3, r5
   81758:	4620      	mov	r0, r4
   8175a:	4629      	mov	r1, r5
   8175c:	f8cd c004 	str.w	ip, [sp, #4]
   81760:	f000 fc76 	bl	82050 <__aeabi_dmul>
   81764:	4602      	mov	r2, r0
   81766:	460b      	mov	r3, r1
   81768:	4682      	mov	sl, r0
   8176a:	468b      	mov	fp, r1
   8176c:	f000 fc70 	bl	82050 <__aeabi_dmul>
   81770:	a383      	add	r3, pc, #524	; (adr r3, 81980 <atan+0x278>)
   81772:	e9d3 2300 	ldrd	r2, r3, [r3]
   81776:	4606      	mov	r6, r0
   81778:	460f      	mov	r7, r1
   8177a:	f000 fc69 	bl	82050 <__aeabi_dmul>
   8177e:	a382      	add	r3, pc, #520	; (adr r3, 81988 <atan+0x280>)
   81780:	e9d3 2300 	ldrd	r2, r3, [r3]
   81784:	f000 fab2 	bl	81cec <__adddf3>
   81788:	4632      	mov	r2, r6
   8178a:	463b      	mov	r3, r7
   8178c:	f000 fc60 	bl	82050 <__aeabi_dmul>
   81790:	a37f      	add	r3, pc, #508	; (adr r3, 81990 <atan+0x288>)
   81792:	e9d3 2300 	ldrd	r2, r3, [r3]
   81796:	f000 faa9 	bl	81cec <__adddf3>
   8179a:	4632      	mov	r2, r6
   8179c:	463b      	mov	r3, r7
   8179e:	f000 fc57 	bl	82050 <__aeabi_dmul>
   817a2:	a37d      	add	r3, pc, #500	; (adr r3, 81998 <atan+0x290>)
   817a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   817a8:	f000 faa0 	bl	81cec <__adddf3>
   817ac:	4632      	mov	r2, r6
   817ae:	463b      	mov	r3, r7
   817b0:	f000 fc4e 	bl	82050 <__aeabi_dmul>
   817b4:	a37a      	add	r3, pc, #488	; (adr r3, 819a0 <atan+0x298>)
   817b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   817ba:	f000 fa97 	bl	81cec <__adddf3>
   817be:	4632      	mov	r2, r6
   817c0:	463b      	mov	r3, r7
   817c2:	f000 fc45 	bl	82050 <__aeabi_dmul>
   817c6:	a378      	add	r3, pc, #480	; (adr r3, 819a8 <atan+0x2a0>)
   817c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   817cc:	f000 fa8e 	bl	81cec <__adddf3>
   817d0:	4652      	mov	r2, sl
   817d2:	465b      	mov	r3, fp
   817d4:	f000 fc3c 	bl	82050 <__aeabi_dmul>
   817d8:	a375      	add	r3, pc, #468	; (adr r3, 819b0 <atan+0x2a8>)
   817da:	e9d3 2300 	ldrd	r2, r3, [r3]
   817de:	4682      	mov	sl, r0
   817e0:	468b      	mov	fp, r1
   817e2:	4630      	mov	r0, r6
   817e4:	4639      	mov	r1, r7
   817e6:	f000 fc33 	bl	82050 <__aeabi_dmul>
   817ea:	a373      	add	r3, pc, #460	; (adr r3, 819b8 <atan+0x2b0>)
   817ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   817f0:	f000 fa7a 	bl	81ce8 <__aeabi_dsub>
   817f4:	4632      	mov	r2, r6
   817f6:	463b      	mov	r3, r7
   817f8:	f000 fc2a 	bl	82050 <__aeabi_dmul>
   817fc:	a370      	add	r3, pc, #448	; (adr r3, 819c0 <atan+0x2b8>)
   817fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   81802:	f000 fa71 	bl	81ce8 <__aeabi_dsub>
   81806:	4632      	mov	r2, r6
   81808:	463b      	mov	r3, r7
   8180a:	f000 fc21 	bl	82050 <__aeabi_dmul>
   8180e:	a36e      	add	r3, pc, #440	; (adr r3, 819c8 <atan+0x2c0>)
   81810:	e9d3 2300 	ldrd	r2, r3, [r3]
   81814:	f000 fa68 	bl	81ce8 <__aeabi_dsub>
   81818:	4632      	mov	r2, r6
   8181a:	463b      	mov	r3, r7
   8181c:	f000 fc18 	bl	82050 <__aeabi_dmul>
   81820:	a36b      	add	r3, pc, #428	; (adr r3, 819d0 <atan+0x2c8>)
   81822:	e9d3 2300 	ldrd	r2, r3, [r3]
   81826:	f000 fa5f 	bl	81ce8 <__aeabi_dsub>
   8182a:	4632      	mov	r2, r6
   8182c:	463b      	mov	r3, r7
   8182e:	f000 fc0f 	bl	82050 <__aeabi_dmul>
   81832:	f8dd c004 	ldr.w	ip, [sp, #4]
   81836:	4602      	mov	r2, r0
   81838:	f1bc 3fff 	cmp.w	ip, #4294967295
   8183c:	460b      	mov	r3, r1
   8183e:	d06b      	beq.n	81918 <atan+0x210>
   81840:	4650      	mov	r0, sl
   81842:	4659      	mov	r1, fp
   81844:	ea4f 06cc 	mov.w	r6, ip, lsl #3
   81848:	f000 fa50 	bl	81cec <__adddf3>
   8184c:	4622      	mov	r2, r4
   8184e:	462b      	mov	r3, r5
   81850:	f000 fbfe 	bl	82050 <__aeabi_dmul>
   81854:	4f67      	ldr	r7, [pc, #412]	; (819f4 <atan+0x2ec>)
   81856:	4b68      	ldr	r3, [pc, #416]	; (819f8 <atan+0x2f0>)
   81858:	4437      	add	r7, r6
   8185a:	441e      	add	r6, r3
   8185c:	e9d6 2300 	ldrd	r2, r3, [r6]
   81860:	f000 fa42 	bl	81ce8 <__aeabi_dsub>
   81864:	4622      	mov	r2, r4
   81866:	462b      	mov	r3, r5
   81868:	f000 fa3e 	bl	81ce8 <__aeabi_dsub>
   8186c:	4602      	mov	r2, r0
   8186e:	460b      	mov	r3, r1
   81870:	e9d7 0100 	ldrd	r0, r1, [r7]
   81874:	f000 fa38 	bl	81ce8 <__aeabi_dsub>
   81878:	f1b9 0f00 	cmp.w	r9, #0
   8187c:	da0c      	bge.n	81898 <atan+0x190>
   8187e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   81882:	4629      	mov	r1, r5
   81884:	e008      	b.n	81898 <atan+0x190>
   81886:	2800      	cmp	r0, #0
   81888:	f43f af4f 	beq.w	8172a <atan+0x22>
   8188c:	4620      	mov	r0, r4
   8188e:	4629      	mov	r1, r5
   81890:	4622      	mov	r2, r4
   81892:	462b      	mov	r3, r5
   81894:	f000 fa2a 	bl	81cec <__adddf3>
   81898:	b003      	add	sp, #12
   8189a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8189e:	a34e      	add	r3, pc, #312	; (adr r3, 819d8 <atan+0x2d0>)
   818a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   818a4:	f000 fa22 	bl	81cec <__adddf3>
   818a8:	2200      	movs	r2, #0
   818aa:	4b54      	ldr	r3, [pc, #336]	; (819fc <atan+0x2f4>)
   818ac:	f000 fe60 	bl	82570 <__aeabi_dcmpgt>
   818b0:	2800      	cmp	r0, #0
   818b2:	f43f af4d 	beq.w	81750 <atan+0x48>
   818b6:	4620      	mov	r0, r4
   818b8:	4629      	mov	r1, r5
   818ba:	b003      	add	sp, #12
   818bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818c0:	f000 f8ca 	bl	81a58 <fabs>
   818c4:	4b4e      	ldr	r3, [pc, #312]	; (81a00 <atan+0x2f8>)
   818c6:	4604      	mov	r4, r0
   818c8:	429e      	cmp	r6, r3
   818ca:	460d      	mov	r5, r1
   818cc:	dc33      	bgt.n	81936 <atan+0x22e>
   818ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   818d2:	429e      	cmp	r6, r3
   818d4:	f300 80a5 	bgt.w	81a22 <atan+0x31a>
   818d8:	4602      	mov	r2, r0
   818da:	460b      	mov	r3, r1
   818dc:	f000 fa06 	bl	81cec <__adddf3>
   818e0:	2200      	movs	r2, #0
   818e2:	4b46      	ldr	r3, [pc, #280]	; (819fc <atan+0x2f4>)
   818e4:	f000 fa00 	bl	81ce8 <__aeabi_dsub>
   818e8:	2200      	movs	r2, #0
   818ea:	4606      	mov	r6, r0
   818ec:	460f      	mov	r7, r1
   818ee:	4620      	mov	r0, r4
   818f0:	4629      	mov	r1, r5
   818f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   818f6:	f000 f9f9 	bl	81cec <__adddf3>
   818fa:	4602      	mov	r2, r0
   818fc:	460b      	mov	r3, r1
   818fe:	4630      	mov	r0, r6
   81900:	4639      	mov	r1, r7
   81902:	f000 fccf 	bl	822a4 <__aeabi_ddiv>
   81906:	f04f 0c00 	mov.w	ip, #0
   8190a:	4604      	mov	r4, r0
   8190c:	460d      	mov	r5, r1
   8190e:	e721      	b.n	81754 <atan+0x4c>
   81910:	a133      	add	r1, pc, #204	; (adr r1, 819e0 <atan+0x2d8>)
   81912:	e9d1 0100 	ldrd	r0, r1, [r1]
   81916:	e7bf      	b.n	81898 <atan+0x190>
   81918:	4650      	mov	r0, sl
   8191a:	4659      	mov	r1, fp
   8191c:	f000 f9e6 	bl	81cec <__adddf3>
   81920:	4622      	mov	r2, r4
   81922:	462b      	mov	r3, r5
   81924:	f000 fb94 	bl	82050 <__aeabi_dmul>
   81928:	4602      	mov	r2, r0
   8192a:	460b      	mov	r3, r1
   8192c:	4620      	mov	r0, r4
   8192e:	4629      	mov	r1, r5
   81930:	f000 f9da 	bl	81ce8 <__aeabi_dsub>
   81934:	e7b0      	b.n	81898 <atan+0x190>
   81936:	4b33      	ldr	r3, [pc, #204]	; (81a04 <atan+0x2fc>)
   81938:	429e      	cmp	r6, r3
   8193a:	dc67      	bgt.n	81a0c <atan+0x304>
   8193c:	2200      	movs	r2, #0
   8193e:	4b32      	ldr	r3, [pc, #200]	; (81a08 <atan+0x300>)
   81940:	f000 f9d2 	bl	81ce8 <__aeabi_dsub>
   81944:	2200      	movs	r2, #0
   81946:	4606      	mov	r6, r0
   81948:	460f      	mov	r7, r1
   8194a:	4620      	mov	r0, r4
   8194c:	4629      	mov	r1, r5
   8194e:	4b2e      	ldr	r3, [pc, #184]	; (81a08 <atan+0x300>)
   81950:	f000 fb7e 	bl	82050 <__aeabi_dmul>
   81954:	2200      	movs	r2, #0
   81956:	4b29      	ldr	r3, [pc, #164]	; (819fc <atan+0x2f4>)
   81958:	f000 f9c8 	bl	81cec <__adddf3>
   8195c:	4602      	mov	r2, r0
   8195e:	460b      	mov	r3, r1
   81960:	4630      	mov	r0, r6
   81962:	4639      	mov	r1, r7
   81964:	f000 fc9e 	bl	822a4 <__aeabi_ddiv>
   81968:	f04f 0c02 	mov.w	ip, #2
   8196c:	4604      	mov	r4, r0
   8196e:	460d      	mov	r5, r1
   81970:	e6f0      	b.n	81754 <atan+0x4c>
   81972:	bf00      	nop
   81974:	f3af 8000 	nop.w
   81978:	54442d18 	.word	0x54442d18
   8197c:	3ff921fb 	.word	0x3ff921fb
   81980:	e322da11 	.word	0xe322da11
   81984:	3f90ad3a 	.word	0x3f90ad3a
   81988:	24760deb 	.word	0x24760deb
   8198c:	3fa97b4b 	.word	0x3fa97b4b
   81990:	a0d03d51 	.word	0xa0d03d51
   81994:	3fb10d66 	.word	0x3fb10d66
   81998:	c54c206e 	.word	0xc54c206e
   8199c:	3fb745cd 	.word	0x3fb745cd
   819a0:	920083ff 	.word	0x920083ff
   819a4:	3fc24924 	.word	0x3fc24924
   819a8:	5555550d 	.word	0x5555550d
   819ac:	3fd55555 	.word	0x3fd55555
   819b0:	2c6a6c2f 	.word	0x2c6a6c2f
   819b4:	bfa2b444 	.word	0xbfa2b444
   819b8:	52defd9a 	.word	0x52defd9a
   819bc:	3fadde2d 	.word	0x3fadde2d
   819c0:	af749a6d 	.word	0xaf749a6d
   819c4:	3fb3b0f2 	.word	0x3fb3b0f2
   819c8:	fe231671 	.word	0xfe231671
   819cc:	3fbc71c6 	.word	0x3fbc71c6
   819d0:	9998ebc4 	.word	0x9998ebc4
   819d4:	3fc99999 	.word	0x3fc99999
   819d8:	8800759c 	.word	0x8800759c
   819dc:	7e37e43c 	.word	0x7e37e43c
   819e0:	54442d18 	.word	0x54442d18
   819e4:	bff921fb 	.word	0xbff921fb
   819e8:	440fffff 	.word	0x440fffff
   819ec:	7ff00000 	.word	0x7ff00000
   819f0:	3fdbffff 	.word	0x3fdbffff
   819f4:	00083bc0 	.word	0x00083bc0
   819f8:	00083ba0 	.word	0x00083ba0
   819fc:	3ff00000 	.word	0x3ff00000
   81a00:	3ff2ffff 	.word	0x3ff2ffff
   81a04:	40037fff 	.word	0x40037fff
   81a08:	3ff80000 	.word	0x3ff80000
   81a0c:	4602      	mov	r2, r0
   81a0e:	460b      	mov	r3, r1
   81a10:	2000      	movs	r0, #0
   81a12:	490f      	ldr	r1, [pc, #60]	; (81a50 <atan+0x348>)
   81a14:	f000 fc46 	bl	822a4 <__aeabi_ddiv>
   81a18:	f04f 0c03 	mov.w	ip, #3
   81a1c:	4604      	mov	r4, r0
   81a1e:	460d      	mov	r5, r1
   81a20:	e698      	b.n	81754 <atan+0x4c>
   81a22:	2200      	movs	r2, #0
   81a24:	4b0b      	ldr	r3, [pc, #44]	; (81a54 <atan+0x34c>)
   81a26:	f000 f95f 	bl	81ce8 <__aeabi_dsub>
   81a2a:	2200      	movs	r2, #0
   81a2c:	4606      	mov	r6, r0
   81a2e:	460f      	mov	r7, r1
   81a30:	4620      	mov	r0, r4
   81a32:	4629      	mov	r1, r5
   81a34:	4b07      	ldr	r3, [pc, #28]	; (81a54 <atan+0x34c>)
   81a36:	f000 f959 	bl	81cec <__adddf3>
   81a3a:	4602      	mov	r2, r0
   81a3c:	460b      	mov	r3, r1
   81a3e:	4630      	mov	r0, r6
   81a40:	4639      	mov	r1, r7
   81a42:	f000 fc2f 	bl	822a4 <__aeabi_ddiv>
   81a46:	f04f 0c01 	mov.w	ip, #1
   81a4a:	4604      	mov	r4, r0
   81a4c:	460d      	mov	r5, r1
   81a4e:	e681      	b.n	81754 <atan+0x4c>
   81a50:	bff00000 	.word	0xbff00000
   81a54:	3ff00000 	.word	0x3ff00000

00081a58 <fabs>:
   81a58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81a5c:	4770      	bx	lr
   81a5e:	bf00      	nop

00081a60 <sqrt>:
   81a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81a64:	b08a      	sub	sp, #40	; 0x28
   81a66:	4604      	mov	r4, r0
   81a68:	460d      	mov	r5, r1
   81a6a:	f000 f84f 	bl	81b0c <__ieee754_sqrt>
   81a6e:	f8df a098 	ldr.w	sl, [pc, #152]	; 81b08 <sqrt+0xa8>
   81a72:	4606      	mov	r6, r0
   81a74:	f99a 3000 	ldrsb.w	r3, [sl]
   81a78:	460f      	mov	r7, r1
   81a7a:	3301      	adds	r3, #1
   81a7c:	d00f      	beq.n	81a9e <sqrt+0x3e>
   81a7e:	4620      	mov	r0, r4
   81a80:	4629      	mov	r1, r5
   81a82:	f000 f903 	bl	81c8c <__fpclassifyd>
   81a86:	b150      	cbz	r0, 81a9e <sqrt+0x3e>
   81a88:	f04f 0800 	mov.w	r8, #0
   81a8c:	f04f 0900 	mov.w	r9, #0
   81a90:	4642      	mov	r2, r8
   81a92:	464b      	mov	r3, r9
   81a94:	4620      	mov	r0, r4
   81a96:	4629      	mov	r1, r5
   81a98:	f000 fd4c 	bl	82534 <__aeabi_dcmplt>
   81a9c:	b920      	cbnz	r0, 81aa8 <sqrt+0x48>
   81a9e:	4630      	mov	r0, r6
   81aa0:	4639      	mov	r1, r7
   81aa2:	b00a      	add	sp, #40	; 0x28
   81aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81aa8:	4916      	ldr	r1, [pc, #88]	; (81b04 <sqrt+0xa4>)
   81aaa:	f89a 6000 	ldrb.w	r6, [sl]
   81aae:	2201      	movs	r2, #1
   81ab0:	2300      	movs	r3, #0
   81ab2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   81ab6:	e9cd 4502 	strd	r4, r5, [sp, #8]
   81aba:	9101      	str	r1, [sp, #4]
   81abc:	9200      	str	r2, [sp, #0]
   81abe:	9308      	str	r3, [sp, #32]
   81ac0:	b966      	cbnz	r6, 81adc <sqrt+0x7c>
   81ac2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   81ac6:	4668      	mov	r0, sp
   81ac8:	f000 f908 	bl	81cdc <matherr>
   81acc:	b180      	cbz	r0, 81af0 <sqrt+0x90>
   81ace:	9b08      	ldr	r3, [sp, #32]
   81ad0:	b99b      	cbnz	r3, 81afa <sqrt+0x9a>
   81ad2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   81ad6:	b00a      	add	sp, #40	; 0x28
   81ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81adc:	4640      	mov	r0, r8
   81ade:	4649      	mov	r1, r9
   81ae0:	4642      	mov	r2, r8
   81ae2:	464b      	mov	r3, r9
   81ae4:	f000 fbde 	bl	822a4 <__aeabi_ddiv>
   81ae8:	2e02      	cmp	r6, #2
   81aea:	e9cd 0106 	strd	r0, r1, [sp, #24]
   81aee:	d1ea      	bne.n	81ac6 <sqrt+0x66>
   81af0:	f001 f8b4 	bl	82c5c <__errno>
   81af4:	2321      	movs	r3, #33	; 0x21
   81af6:	6003      	str	r3, [r0, #0]
   81af8:	e7e9      	b.n	81ace <sqrt+0x6e>
   81afa:	f001 f8af 	bl	82c5c <__errno>
   81afe:	9b08      	ldr	r3, [sp, #32]
   81b00:	6003      	str	r3, [r0, #0]
   81b02:	e7e6      	b.n	81ad2 <sqrt+0x72>
   81b04:	00083be0 	.word	0x00083be0
   81b08:	2007015c 	.word	0x2007015c

00081b0c <__ieee754_sqrt>:
   81b0c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   81b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81b14:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
   81b18:	f8df 816c 	ldr.w	r8, [pc, #364]	; 81c88 <__ieee754_sqrt+0x17c>
   81b1c:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   81b20:	45c4      	cmp	ip, r8
   81b22:	4606      	mov	r6, r0
   81b24:	460f      	mov	r7, r1
   81b26:	460b      	mov	r3, r1
   81b28:	4602      	mov	r2, r0
   81b2a:	f000 808f 	beq.w	81c4c <__ieee754_sqrt+0x140>
   81b2e:	2900      	cmp	r1, #0
   81b30:	dd6f      	ble.n	81c12 <__ieee754_sqrt+0x106>
   81b32:	150f      	asrs	r7, r1, #20
   81b34:	d078      	beq.n	81c28 <__ieee754_sqrt+0x11c>
   81b36:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   81b3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   81b3e:	07f9      	lsls	r1, r7, #31
   81b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81b44:	d460      	bmi.n	81c08 <__ieee754_sqrt+0xfc>
   81b46:	0fd1      	lsrs	r1, r2, #31
   81b48:	f04f 0c00 	mov.w	ip, #0
   81b4c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   81b50:	107f      	asrs	r7, r7, #1
   81b52:	0052      	lsls	r2, r2, #1
   81b54:	4665      	mov	r5, ip
   81b56:	2016      	movs	r0, #22
   81b58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   81b5c:	186c      	adds	r4, r5, r1
   81b5e:	429c      	cmp	r4, r3
   81b60:	ea4f 76d2 	mov.w	r6, r2, lsr #31
   81b64:	ea4f 0242 	mov.w	r2, r2, lsl #1
   81b68:	dc02      	bgt.n	81b70 <__ieee754_sqrt+0x64>
   81b6a:	1b1b      	subs	r3, r3, r4
   81b6c:	1865      	adds	r5, r4, r1
   81b6e:	448c      	add	ip, r1
   81b70:	3801      	subs	r0, #1
   81b72:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   81b76:	ea4f 0151 	mov.w	r1, r1, lsr #1
   81b7a:	d1ef      	bne.n	81b5c <__ieee754_sqrt+0x50>
   81b7c:	4680      	mov	r8, r0
   81b7e:	2620      	movs	r6, #32
   81b80:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   81b84:	e009      	b.n	81b9a <__ieee754_sqrt+0x8e>
   81b86:	d023      	beq.n	81bd0 <__ieee754_sqrt+0xc4>
   81b88:	0fd4      	lsrs	r4, r2, #31
   81b8a:	3e01      	subs	r6, #1
   81b8c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   81b90:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   81b94:	ea4f 0242 	mov.w	r2, r2, lsl #1
   81b98:	d01e      	beq.n	81bd8 <__ieee754_sqrt+0xcc>
   81b9a:	42ab      	cmp	r3, r5
   81b9c:	eb01 0408 	add.w	r4, r1, r8
   81ba0:	ddf1      	ble.n	81b86 <__ieee754_sqrt+0x7a>
   81ba2:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
   81ba6:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
   81baa:	eb04 0801 	add.w	r8, r4, r1
   81bae:	d009      	beq.n	81bc4 <__ieee754_sqrt+0xb8>
   81bb0:	46a9      	mov	r9, r5
   81bb2:	1b5b      	subs	r3, r3, r5
   81bb4:	4294      	cmp	r4, r2
   81bb6:	bf88      	it	hi
   81bb8:	f103 33ff 	addhi.w	r3, r3, #4294967295
   81bbc:	1b12      	subs	r2, r2, r4
   81bbe:	4408      	add	r0, r1
   81bc0:	464d      	mov	r5, r9
   81bc2:	e7e1      	b.n	81b88 <__ieee754_sqrt+0x7c>
   81bc4:	f1b8 0f00 	cmp.w	r8, #0
   81bc8:	dbf2      	blt.n	81bb0 <__ieee754_sqrt+0xa4>
   81bca:	f105 0901 	add.w	r9, r5, #1
   81bce:	e7f0      	b.n	81bb2 <__ieee754_sqrt+0xa6>
   81bd0:	4294      	cmp	r4, r2
   81bd2:	d9e6      	bls.n	81ba2 <__ieee754_sqrt+0x96>
   81bd4:	461d      	mov	r5, r3
   81bd6:	e7d7      	b.n	81b88 <__ieee754_sqrt+0x7c>
   81bd8:	431a      	orrs	r2, r3
   81bda:	d004      	beq.n	81be6 <__ieee754_sqrt+0xda>
   81bdc:	1c43      	adds	r3, r0, #1
   81bde:	d041      	beq.n	81c64 <__ieee754_sqrt+0x158>
   81be0:	f000 0301 	and.w	r3, r0, #1
   81be4:	4418      	add	r0, r3
   81be6:	0846      	lsrs	r6, r0, #1
   81be8:	ea4f 036c 	mov.w	r3, ip, asr #1
   81bec:	f01c 0f01 	tst.w	ip, #1
   81bf0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   81bf4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81bf8:	bf18      	it	ne
   81bfa:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
   81bfe:	eb03 5107 	add.w	r1, r3, r7, lsl #20
   81c02:	4630      	mov	r0, r6
   81c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c08:	0fd1      	lsrs	r1, r2, #31
   81c0a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   81c0e:	0052      	lsls	r2, r2, #1
   81c10:	e799      	b.n	81b46 <__ieee754_sqrt+0x3a>
   81c12:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   81c16:	4303      	orrs	r3, r0
   81c18:	d022      	beq.n	81c60 <__ieee754_sqrt+0x154>
   81c1a:	bb51      	cbnz	r1, 81c72 <__ieee754_sqrt+0x166>
   81c1c:	460f      	mov	r7, r1
   81c1e:	0ad3      	lsrs	r3, r2, #11
   81c20:	3f15      	subs	r7, #21
   81c22:	0552      	lsls	r2, r2, #21
   81c24:	2b00      	cmp	r3, #0
   81c26:	d0fa      	beq.n	81c1e <__ieee754_sqrt+0x112>
   81c28:	f413 1180 	ands.w	r1, r3, #1048576	; 0x100000
   81c2c:	d11d      	bne.n	81c6a <__ieee754_sqrt+0x15e>
   81c2e:	005b      	lsls	r3, r3, #1
   81c30:	02d8      	lsls	r0, r3, #11
   81c32:	f101 0101 	add.w	r1, r1, #1
   81c36:	d5fa      	bpl.n	81c2e <__ieee754_sqrt+0x122>
   81c38:	f1c1 0001 	rsb	r0, r1, #1
   81c3c:	f1c1 0420 	rsb	r4, r1, #32
   81c40:	fa22 f404 	lsr.w	r4, r2, r4
   81c44:	4407      	add	r7, r0
   81c46:	408a      	lsls	r2, r1
   81c48:	4323      	orrs	r3, r4
   81c4a:	e774      	b.n	81b36 <__ieee754_sqrt+0x2a>
   81c4c:	4602      	mov	r2, r0
   81c4e:	460b      	mov	r3, r1
   81c50:	f000 f9fe 	bl	82050 <__aeabi_dmul>
   81c54:	4632      	mov	r2, r6
   81c56:	463b      	mov	r3, r7
   81c58:	f000 f848 	bl	81cec <__adddf3>
   81c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c64:	f10c 0c01 	add.w	ip, ip, #1
   81c68:	e7be      	b.n	81be8 <__ieee754_sqrt+0xdc>
   81c6a:	2420      	movs	r4, #32
   81c6c:	2001      	movs	r0, #1
   81c6e:	2100      	movs	r1, #0
   81c70:	e7e6      	b.n	81c40 <__ieee754_sqrt+0x134>
   81c72:	4602      	mov	r2, r0
   81c74:	460b      	mov	r3, r1
   81c76:	f000 f837 	bl	81ce8 <__aeabi_dsub>
   81c7a:	4602      	mov	r2, r0
   81c7c:	460b      	mov	r3, r1
   81c7e:	f000 fb11 	bl	822a4 <__aeabi_ddiv>
   81c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c86:	bf00      	nop
   81c88:	7ff00000 	.word	0x7ff00000

00081c8c <__fpclassifyd>:
   81c8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81c90:	b410      	push	{r4}
   81c92:	d008      	beq.n	81ca6 <__fpclassifyd+0x1a>
   81c94:	4a0f      	ldr	r2, [pc, #60]	; (81cd4 <__fpclassifyd+0x48>)
   81c96:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   81c9a:	4294      	cmp	r4, r2
   81c9c:	d80a      	bhi.n	81cb4 <__fpclassifyd+0x28>
   81c9e:	2004      	movs	r0, #4
   81ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
   81ca4:	4770      	bx	lr
   81ca6:	2800      	cmp	r0, #0
   81ca8:	bf0c      	ite	eq
   81caa:	2002      	moveq	r0, #2
   81cac:	2003      	movne	r0, #3
   81cae:	f85d 4b04 	ldr.w	r4, [sp], #4
   81cb2:	4770      	bx	lr
   81cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81cb8:	d201      	bcs.n	81cbe <__fpclassifyd+0x32>
   81cba:	2003      	movs	r0, #3
   81cbc:	e7f7      	b.n	81cae <__fpclassifyd+0x22>
   81cbe:	4a06      	ldr	r2, [pc, #24]	; (81cd8 <__fpclassifyd+0x4c>)
   81cc0:	4293      	cmp	r3, r2
   81cc2:	d001      	beq.n	81cc8 <__fpclassifyd+0x3c>
   81cc4:	2000      	movs	r0, #0
   81cc6:	e7f2      	b.n	81cae <__fpclassifyd+0x22>
   81cc8:	f1d0 0001 	rsbs	r0, r0, #1
   81ccc:	bf38      	it	cc
   81cce:	2000      	movcc	r0, #0
   81cd0:	e7ed      	b.n	81cae <__fpclassifyd+0x22>
   81cd2:	bf00      	nop
   81cd4:	7fdfffff 	.word	0x7fdfffff
   81cd8:	7ff00000 	.word	0x7ff00000

00081cdc <matherr>:
   81cdc:	2000      	movs	r0, #0
   81cde:	4770      	bx	lr

00081ce0 <__aeabi_drsub>:
   81ce0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81ce4:	e002      	b.n	81cec <__adddf3>
   81ce6:	bf00      	nop

00081ce8 <__aeabi_dsub>:
   81ce8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081cec <__adddf3>:
   81cec:	b530      	push	{r4, r5, lr}
   81cee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81cf2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81cf6:	ea94 0f05 	teq	r4, r5
   81cfa:	bf08      	it	eq
   81cfc:	ea90 0f02 	teqeq	r0, r2
   81d00:	bf1f      	itttt	ne
   81d02:	ea54 0c00 	orrsne.w	ip, r4, r0
   81d06:	ea55 0c02 	orrsne.w	ip, r5, r2
   81d0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81d0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81d12:	f000 80e2 	beq.w	81eda <__adddf3+0x1ee>
   81d16:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81d1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81d1e:	bfb8      	it	lt
   81d20:	426d      	neglt	r5, r5
   81d22:	dd0c      	ble.n	81d3e <__adddf3+0x52>
   81d24:	442c      	add	r4, r5
   81d26:	ea80 0202 	eor.w	r2, r0, r2
   81d2a:	ea81 0303 	eor.w	r3, r1, r3
   81d2e:	ea82 0000 	eor.w	r0, r2, r0
   81d32:	ea83 0101 	eor.w	r1, r3, r1
   81d36:	ea80 0202 	eor.w	r2, r0, r2
   81d3a:	ea81 0303 	eor.w	r3, r1, r3
   81d3e:	2d36      	cmp	r5, #54	; 0x36
   81d40:	bf88      	it	hi
   81d42:	bd30      	pophi	{r4, r5, pc}
   81d44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81d48:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81d4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81d50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81d54:	d002      	beq.n	81d5c <__adddf3+0x70>
   81d56:	4240      	negs	r0, r0
   81d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81d5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81d60:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81d64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81d68:	d002      	beq.n	81d70 <__adddf3+0x84>
   81d6a:	4252      	negs	r2, r2
   81d6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81d70:	ea94 0f05 	teq	r4, r5
   81d74:	f000 80a7 	beq.w	81ec6 <__adddf3+0x1da>
   81d78:	f1a4 0401 	sub.w	r4, r4, #1
   81d7c:	f1d5 0e20 	rsbs	lr, r5, #32
   81d80:	db0d      	blt.n	81d9e <__adddf3+0xb2>
   81d82:	fa02 fc0e 	lsl.w	ip, r2, lr
   81d86:	fa22 f205 	lsr.w	r2, r2, r5
   81d8a:	1880      	adds	r0, r0, r2
   81d8c:	f141 0100 	adc.w	r1, r1, #0
   81d90:	fa03 f20e 	lsl.w	r2, r3, lr
   81d94:	1880      	adds	r0, r0, r2
   81d96:	fa43 f305 	asr.w	r3, r3, r5
   81d9a:	4159      	adcs	r1, r3
   81d9c:	e00e      	b.n	81dbc <__adddf3+0xd0>
   81d9e:	f1a5 0520 	sub.w	r5, r5, #32
   81da2:	f10e 0e20 	add.w	lr, lr, #32
   81da6:	2a01      	cmp	r2, #1
   81da8:	fa03 fc0e 	lsl.w	ip, r3, lr
   81dac:	bf28      	it	cs
   81dae:	f04c 0c02 	orrcs.w	ip, ip, #2
   81db2:	fa43 f305 	asr.w	r3, r3, r5
   81db6:	18c0      	adds	r0, r0, r3
   81db8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81dbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81dc0:	d507      	bpl.n	81dd2 <__adddf3+0xe6>
   81dc2:	f04f 0e00 	mov.w	lr, #0
   81dc6:	f1dc 0c00 	rsbs	ip, ip, #0
   81dca:	eb7e 0000 	sbcs.w	r0, lr, r0
   81dce:	eb6e 0101 	sbc.w	r1, lr, r1
   81dd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81dd6:	d31b      	bcc.n	81e10 <__adddf3+0x124>
   81dd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81ddc:	d30c      	bcc.n	81df8 <__adddf3+0x10c>
   81dde:	0849      	lsrs	r1, r1, #1
   81de0:	ea5f 0030 	movs.w	r0, r0, rrx
   81de4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81de8:	f104 0401 	add.w	r4, r4, #1
   81dec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81df0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81df4:	f080 809a 	bcs.w	81f2c <__adddf3+0x240>
   81df8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81dfc:	bf08      	it	eq
   81dfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81e02:	f150 0000 	adcs.w	r0, r0, #0
   81e06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81e0a:	ea41 0105 	orr.w	r1, r1, r5
   81e0e:	bd30      	pop	{r4, r5, pc}
   81e10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81e14:	4140      	adcs	r0, r0
   81e16:	eb41 0101 	adc.w	r1, r1, r1
   81e1a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81e1e:	f1a4 0401 	sub.w	r4, r4, #1
   81e22:	d1e9      	bne.n	81df8 <__adddf3+0x10c>
   81e24:	f091 0f00 	teq	r1, #0
   81e28:	bf04      	itt	eq
   81e2a:	4601      	moveq	r1, r0
   81e2c:	2000      	moveq	r0, #0
   81e2e:	fab1 f381 	clz	r3, r1
   81e32:	bf08      	it	eq
   81e34:	3320      	addeq	r3, #32
   81e36:	f1a3 030b 	sub.w	r3, r3, #11
   81e3a:	f1b3 0220 	subs.w	r2, r3, #32
   81e3e:	da0c      	bge.n	81e5a <__adddf3+0x16e>
   81e40:	320c      	adds	r2, #12
   81e42:	dd08      	ble.n	81e56 <__adddf3+0x16a>
   81e44:	f102 0c14 	add.w	ip, r2, #20
   81e48:	f1c2 020c 	rsb	r2, r2, #12
   81e4c:	fa01 f00c 	lsl.w	r0, r1, ip
   81e50:	fa21 f102 	lsr.w	r1, r1, r2
   81e54:	e00c      	b.n	81e70 <__adddf3+0x184>
   81e56:	f102 0214 	add.w	r2, r2, #20
   81e5a:	bfd8      	it	le
   81e5c:	f1c2 0c20 	rsble	ip, r2, #32
   81e60:	fa01 f102 	lsl.w	r1, r1, r2
   81e64:	fa20 fc0c 	lsr.w	ip, r0, ip
   81e68:	bfdc      	itt	le
   81e6a:	ea41 010c 	orrle.w	r1, r1, ip
   81e6e:	4090      	lslle	r0, r2
   81e70:	1ae4      	subs	r4, r4, r3
   81e72:	bfa2      	ittt	ge
   81e74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81e78:	4329      	orrge	r1, r5
   81e7a:	bd30      	popge	{r4, r5, pc}
   81e7c:	ea6f 0404 	mvn.w	r4, r4
   81e80:	3c1f      	subs	r4, #31
   81e82:	da1c      	bge.n	81ebe <__adddf3+0x1d2>
   81e84:	340c      	adds	r4, #12
   81e86:	dc0e      	bgt.n	81ea6 <__adddf3+0x1ba>
   81e88:	f104 0414 	add.w	r4, r4, #20
   81e8c:	f1c4 0220 	rsb	r2, r4, #32
   81e90:	fa20 f004 	lsr.w	r0, r0, r4
   81e94:	fa01 f302 	lsl.w	r3, r1, r2
   81e98:	ea40 0003 	orr.w	r0, r0, r3
   81e9c:	fa21 f304 	lsr.w	r3, r1, r4
   81ea0:	ea45 0103 	orr.w	r1, r5, r3
   81ea4:	bd30      	pop	{r4, r5, pc}
   81ea6:	f1c4 040c 	rsb	r4, r4, #12
   81eaa:	f1c4 0220 	rsb	r2, r4, #32
   81eae:	fa20 f002 	lsr.w	r0, r0, r2
   81eb2:	fa01 f304 	lsl.w	r3, r1, r4
   81eb6:	ea40 0003 	orr.w	r0, r0, r3
   81eba:	4629      	mov	r1, r5
   81ebc:	bd30      	pop	{r4, r5, pc}
   81ebe:	fa21 f004 	lsr.w	r0, r1, r4
   81ec2:	4629      	mov	r1, r5
   81ec4:	bd30      	pop	{r4, r5, pc}
   81ec6:	f094 0f00 	teq	r4, #0
   81eca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81ece:	bf06      	itte	eq
   81ed0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81ed4:	3401      	addeq	r4, #1
   81ed6:	3d01      	subne	r5, #1
   81ed8:	e74e      	b.n	81d78 <__adddf3+0x8c>
   81eda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81ede:	bf18      	it	ne
   81ee0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81ee4:	d029      	beq.n	81f3a <__adddf3+0x24e>
   81ee6:	ea94 0f05 	teq	r4, r5
   81eea:	bf08      	it	eq
   81eec:	ea90 0f02 	teqeq	r0, r2
   81ef0:	d005      	beq.n	81efe <__adddf3+0x212>
   81ef2:	ea54 0c00 	orrs.w	ip, r4, r0
   81ef6:	bf04      	itt	eq
   81ef8:	4619      	moveq	r1, r3
   81efa:	4610      	moveq	r0, r2
   81efc:	bd30      	pop	{r4, r5, pc}
   81efe:	ea91 0f03 	teq	r1, r3
   81f02:	bf1e      	ittt	ne
   81f04:	2100      	movne	r1, #0
   81f06:	2000      	movne	r0, #0
   81f08:	bd30      	popne	{r4, r5, pc}
   81f0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81f0e:	d105      	bne.n	81f1c <__adddf3+0x230>
   81f10:	0040      	lsls	r0, r0, #1
   81f12:	4149      	adcs	r1, r1
   81f14:	bf28      	it	cs
   81f16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81f1a:	bd30      	pop	{r4, r5, pc}
   81f1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81f20:	bf3c      	itt	cc
   81f22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81f26:	bd30      	popcc	{r4, r5, pc}
   81f28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81f2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81f30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81f34:	f04f 0000 	mov.w	r0, #0
   81f38:	bd30      	pop	{r4, r5, pc}
   81f3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81f3e:	bf1a      	itte	ne
   81f40:	4619      	movne	r1, r3
   81f42:	4610      	movne	r0, r2
   81f44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81f48:	bf1c      	itt	ne
   81f4a:	460b      	movne	r3, r1
   81f4c:	4602      	movne	r2, r0
   81f4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81f52:	bf06      	itte	eq
   81f54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81f58:	ea91 0f03 	teqeq	r1, r3
   81f5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81f60:	bd30      	pop	{r4, r5, pc}
   81f62:	bf00      	nop

00081f64 <__aeabi_ui2d>:
   81f64:	f090 0f00 	teq	r0, #0
   81f68:	bf04      	itt	eq
   81f6a:	2100      	moveq	r1, #0
   81f6c:	4770      	bxeq	lr
   81f6e:	b530      	push	{r4, r5, lr}
   81f70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81f74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81f78:	f04f 0500 	mov.w	r5, #0
   81f7c:	f04f 0100 	mov.w	r1, #0
   81f80:	e750      	b.n	81e24 <__adddf3+0x138>
   81f82:	bf00      	nop

00081f84 <__aeabi_i2d>:
   81f84:	f090 0f00 	teq	r0, #0
   81f88:	bf04      	itt	eq
   81f8a:	2100      	moveq	r1, #0
   81f8c:	4770      	bxeq	lr
   81f8e:	b530      	push	{r4, r5, lr}
   81f90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81f94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81f98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81f9c:	bf48      	it	mi
   81f9e:	4240      	negmi	r0, r0
   81fa0:	f04f 0100 	mov.w	r1, #0
   81fa4:	e73e      	b.n	81e24 <__adddf3+0x138>
   81fa6:	bf00      	nop

00081fa8 <__aeabi_f2d>:
   81fa8:	0042      	lsls	r2, r0, #1
   81faa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81fae:	ea4f 0131 	mov.w	r1, r1, rrx
   81fb2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81fb6:	bf1f      	itttt	ne
   81fb8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81fbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81fc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81fc4:	4770      	bxne	lr
   81fc6:	f092 0f00 	teq	r2, #0
   81fca:	bf14      	ite	ne
   81fcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81fd0:	4770      	bxeq	lr
   81fd2:	b530      	push	{r4, r5, lr}
   81fd4:	f44f 7460 	mov.w	r4, #896	; 0x380
   81fd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81fdc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81fe0:	e720      	b.n	81e24 <__adddf3+0x138>
   81fe2:	bf00      	nop

00081fe4 <__aeabi_ul2d>:
   81fe4:	ea50 0201 	orrs.w	r2, r0, r1
   81fe8:	bf08      	it	eq
   81fea:	4770      	bxeq	lr
   81fec:	b530      	push	{r4, r5, lr}
   81fee:	f04f 0500 	mov.w	r5, #0
   81ff2:	e00a      	b.n	8200a <__aeabi_l2d+0x16>

00081ff4 <__aeabi_l2d>:
   81ff4:	ea50 0201 	orrs.w	r2, r0, r1
   81ff8:	bf08      	it	eq
   81ffa:	4770      	bxeq	lr
   81ffc:	b530      	push	{r4, r5, lr}
   81ffe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   82002:	d502      	bpl.n	8200a <__aeabi_l2d+0x16>
   82004:	4240      	negs	r0, r0
   82006:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8200a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8200e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82012:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   82016:	f43f aedc 	beq.w	81dd2 <__adddf3+0xe6>
   8201a:	f04f 0203 	mov.w	r2, #3
   8201e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82022:	bf18      	it	ne
   82024:	3203      	addne	r2, #3
   82026:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8202a:	bf18      	it	ne
   8202c:	3203      	addne	r2, #3
   8202e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   82032:	f1c2 0320 	rsb	r3, r2, #32
   82036:	fa00 fc03 	lsl.w	ip, r0, r3
   8203a:	fa20 f002 	lsr.w	r0, r0, r2
   8203e:	fa01 fe03 	lsl.w	lr, r1, r3
   82042:	ea40 000e 	orr.w	r0, r0, lr
   82046:	fa21 f102 	lsr.w	r1, r1, r2
   8204a:	4414      	add	r4, r2
   8204c:	e6c1      	b.n	81dd2 <__adddf3+0xe6>
   8204e:	bf00      	nop

00082050 <__aeabi_dmul>:
   82050:	b570      	push	{r4, r5, r6, lr}
   82052:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82056:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8205a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8205e:	bf1d      	ittte	ne
   82060:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82064:	ea94 0f0c 	teqne	r4, ip
   82068:	ea95 0f0c 	teqne	r5, ip
   8206c:	f000 f8de 	bleq	8222c <__aeabi_dmul+0x1dc>
   82070:	442c      	add	r4, r5
   82072:	ea81 0603 	eor.w	r6, r1, r3
   82076:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8207a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8207e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   82082:	bf18      	it	ne
   82084:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82088:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8208c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82090:	d038      	beq.n	82104 <__aeabi_dmul+0xb4>
   82092:	fba0 ce02 	umull	ip, lr, r0, r2
   82096:	f04f 0500 	mov.w	r5, #0
   8209a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8209e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   820a2:	fbe0 e503 	umlal	lr, r5, r0, r3
   820a6:	f04f 0600 	mov.w	r6, #0
   820aa:	fbe1 5603 	umlal	r5, r6, r1, r3
   820ae:	f09c 0f00 	teq	ip, #0
   820b2:	bf18      	it	ne
   820b4:	f04e 0e01 	orrne.w	lr, lr, #1
   820b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   820bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   820c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   820c4:	d204      	bcs.n	820d0 <__aeabi_dmul+0x80>
   820c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   820ca:	416d      	adcs	r5, r5
   820cc:	eb46 0606 	adc.w	r6, r6, r6
   820d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   820d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   820d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   820dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   820e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   820e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   820e8:	bf88      	it	hi
   820ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   820ee:	d81e      	bhi.n	8212e <__aeabi_dmul+0xde>
   820f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   820f4:	bf08      	it	eq
   820f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   820fa:	f150 0000 	adcs.w	r0, r0, #0
   820fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82102:	bd70      	pop	{r4, r5, r6, pc}
   82104:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   82108:	ea46 0101 	orr.w	r1, r6, r1
   8210c:	ea40 0002 	orr.w	r0, r0, r2
   82110:	ea81 0103 	eor.w	r1, r1, r3
   82114:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   82118:	bfc2      	ittt	gt
   8211a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8211e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82122:	bd70      	popgt	{r4, r5, r6, pc}
   82124:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82128:	f04f 0e00 	mov.w	lr, #0
   8212c:	3c01      	subs	r4, #1
   8212e:	f300 80ab 	bgt.w	82288 <__aeabi_dmul+0x238>
   82132:	f114 0f36 	cmn.w	r4, #54	; 0x36
   82136:	bfde      	ittt	le
   82138:	2000      	movle	r0, #0
   8213a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8213e:	bd70      	pople	{r4, r5, r6, pc}
   82140:	f1c4 0400 	rsb	r4, r4, #0
   82144:	3c20      	subs	r4, #32
   82146:	da35      	bge.n	821b4 <__aeabi_dmul+0x164>
   82148:	340c      	adds	r4, #12
   8214a:	dc1b      	bgt.n	82184 <__aeabi_dmul+0x134>
   8214c:	f104 0414 	add.w	r4, r4, #20
   82150:	f1c4 0520 	rsb	r5, r4, #32
   82154:	fa00 f305 	lsl.w	r3, r0, r5
   82158:	fa20 f004 	lsr.w	r0, r0, r4
   8215c:	fa01 f205 	lsl.w	r2, r1, r5
   82160:	ea40 0002 	orr.w	r0, r0, r2
   82164:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   82168:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8216c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82170:	fa21 f604 	lsr.w	r6, r1, r4
   82174:	eb42 0106 	adc.w	r1, r2, r6
   82178:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8217c:	bf08      	it	eq
   8217e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82182:	bd70      	pop	{r4, r5, r6, pc}
   82184:	f1c4 040c 	rsb	r4, r4, #12
   82188:	f1c4 0520 	rsb	r5, r4, #32
   8218c:	fa00 f304 	lsl.w	r3, r0, r4
   82190:	fa20 f005 	lsr.w	r0, r0, r5
   82194:	fa01 f204 	lsl.w	r2, r1, r4
   82198:	ea40 0002 	orr.w	r0, r0, r2
   8219c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   821a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   821a4:	f141 0100 	adc.w	r1, r1, #0
   821a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   821ac:	bf08      	it	eq
   821ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   821b2:	bd70      	pop	{r4, r5, r6, pc}
   821b4:	f1c4 0520 	rsb	r5, r4, #32
   821b8:	fa00 f205 	lsl.w	r2, r0, r5
   821bc:	ea4e 0e02 	orr.w	lr, lr, r2
   821c0:	fa20 f304 	lsr.w	r3, r0, r4
   821c4:	fa01 f205 	lsl.w	r2, r1, r5
   821c8:	ea43 0302 	orr.w	r3, r3, r2
   821cc:	fa21 f004 	lsr.w	r0, r1, r4
   821d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   821d4:	fa21 f204 	lsr.w	r2, r1, r4
   821d8:	ea20 0002 	bic.w	r0, r0, r2
   821dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   821e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   821e4:	bf08      	it	eq
   821e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   821ea:	bd70      	pop	{r4, r5, r6, pc}
   821ec:	f094 0f00 	teq	r4, #0
   821f0:	d10f      	bne.n	82212 <__aeabi_dmul+0x1c2>
   821f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   821f6:	0040      	lsls	r0, r0, #1
   821f8:	eb41 0101 	adc.w	r1, r1, r1
   821fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82200:	bf08      	it	eq
   82202:	3c01      	subeq	r4, #1
   82204:	d0f7      	beq.n	821f6 <__aeabi_dmul+0x1a6>
   82206:	ea41 0106 	orr.w	r1, r1, r6
   8220a:	f095 0f00 	teq	r5, #0
   8220e:	bf18      	it	ne
   82210:	4770      	bxne	lr
   82212:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   82216:	0052      	lsls	r2, r2, #1
   82218:	eb43 0303 	adc.w	r3, r3, r3
   8221c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82220:	bf08      	it	eq
   82222:	3d01      	subeq	r5, #1
   82224:	d0f7      	beq.n	82216 <__aeabi_dmul+0x1c6>
   82226:	ea43 0306 	orr.w	r3, r3, r6
   8222a:	4770      	bx	lr
   8222c:	ea94 0f0c 	teq	r4, ip
   82230:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82234:	bf18      	it	ne
   82236:	ea95 0f0c 	teqne	r5, ip
   8223a:	d00c      	beq.n	82256 <__aeabi_dmul+0x206>
   8223c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82240:	bf18      	it	ne
   82242:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82246:	d1d1      	bne.n	821ec <__aeabi_dmul+0x19c>
   82248:	ea81 0103 	eor.w	r1, r1, r3
   8224c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82250:	f04f 0000 	mov.w	r0, #0
   82254:	bd70      	pop	{r4, r5, r6, pc}
   82256:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8225a:	bf06      	itte	eq
   8225c:	4610      	moveq	r0, r2
   8225e:	4619      	moveq	r1, r3
   82260:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82264:	d019      	beq.n	8229a <__aeabi_dmul+0x24a>
   82266:	ea94 0f0c 	teq	r4, ip
   8226a:	d102      	bne.n	82272 <__aeabi_dmul+0x222>
   8226c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   82270:	d113      	bne.n	8229a <__aeabi_dmul+0x24a>
   82272:	ea95 0f0c 	teq	r5, ip
   82276:	d105      	bne.n	82284 <__aeabi_dmul+0x234>
   82278:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8227c:	bf1c      	itt	ne
   8227e:	4610      	movne	r0, r2
   82280:	4619      	movne	r1, r3
   82282:	d10a      	bne.n	8229a <__aeabi_dmul+0x24a>
   82284:	ea81 0103 	eor.w	r1, r1, r3
   82288:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8228c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82294:	f04f 0000 	mov.w	r0, #0
   82298:	bd70      	pop	{r4, r5, r6, pc}
   8229a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8229e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   822a2:	bd70      	pop	{r4, r5, r6, pc}

000822a4 <__aeabi_ddiv>:
   822a4:	b570      	push	{r4, r5, r6, lr}
   822a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   822aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   822ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   822b2:	bf1d      	ittte	ne
   822b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   822b8:	ea94 0f0c 	teqne	r4, ip
   822bc:	ea95 0f0c 	teqne	r5, ip
   822c0:	f000 f8a7 	bleq	82412 <__aeabi_ddiv+0x16e>
   822c4:	eba4 0405 	sub.w	r4, r4, r5
   822c8:	ea81 0e03 	eor.w	lr, r1, r3
   822cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   822d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   822d4:	f000 8088 	beq.w	823e8 <__aeabi_ddiv+0x144>
   822d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   822dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   822e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   822e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   822e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   822ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   822f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   822f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   822f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   822fc:	429d      	cmp	r5, r3
   822fe:	bf08      	it	eq
   82300:	4296      	cmpeq	r6, r2
   82302:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   82306:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8230a:	d202      	bcs.n	82312 <__aeabi_ddiv+0x6e>
   8230c:	085b      	lsrs	r3, r3, #1
   8230e:	ea4f 0232 	mov.w	r2, r2, rrx
   82312:	1ab6      	subs	r6, r6, r2
   82314:	eb65 0503 	sbc.w	r5, r5, r3
   82318:	085b      	lsrs	r3, r3, #1
   8231a:	ea4f 0232 	mov.w	r2, r2, rrx
   8231e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   82322:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   82326:	ebb6 0e02 	subs.w	lr, r6, r2
   8232a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8232e:	bf22      	ittt	cs
   82330:	1ab6      	subcs	r6, r6, r2
   82332:	4675      	movcs	r5, lr
   82334:	ea40 000c 	orrcs.w	r0, r0, ip
   82338:	085b      	lsrs	r3, r3, #1
   8233a:	ea4f 0232 	mov.w	r2, r2, rrx
   8233e:	ebb6 0e02 	subs.w	lr, r6, r2
   82342:	eb75 0e03 	sbcs.w	lr, r5, r3
   82346:	bf22      	ittt	cs
   82348:	1ab6      	subcs	r6, r6, r2
   8234a:	4675      	movcs	r5, lr
   8234c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82350:	085b      	lsrs	r3, r3, #1
   82352:	ea4f 0232 	mov.w	r2, r2, rrx
   82356:	ebb6 0e02 	subs.w	lr, r6, r2
   8235a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8235e:	bf22      	ittt	cs
   82360:	1ab6      	subcs	r6, r6, r2
   82362:	4675      	movcs	r5, lr
   82364:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82368:	085b      	lsrs	r3, r3, #1
   8236a:	ea4f 0232 	mov.w	r2, r2, rrx
   8236e:	ebb6 0e02 	subs.w	lr, r6, r2
   82372:	eb75 0e03 	sbcs.w	lr, r5, r3
   82376:	bf22      	ittt	cs
   82378:	1ab6      	subcs	r6, r6, r2
   8237a:	4675      	movcs	r5, lr
   8237c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82380:	ea55 0e06 	orrs.w	lr, r5, r6
   82384:	d018      	beq.n	823b8 <__aeabi_ddiv+0x114>
   82386:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8238a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8238e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   82392:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   82396:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8239a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8239e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   823a2:	d1c0      	bne.n	82326 <__aeabi_ddiv+0x82>
   823a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   823a8:	d10b      	bne.n	823c2 <__aeabi_ddiv+0x11e>
   823aa:	ea41 0100 	orr.w	r1, r1, r0
   823ae:	f04f 0000 	mov.w	r0, #0
   823b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   823b6:	e7b6      	b.n	82326 <__aeabi_ddiv+0x82>
   823b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   823bc:	bf04      	itt	eq
   823be:	4301      	orreq	r1, r0
   823c0:	2000      	moveq	r0, #0
   823c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   823c6:	bf88      	it	hi
   823c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   823cc:	f63f aeaf 	bhi.w	8212e <__aeabi_dmul+0xde>
   823d0:	ebb5 0c03 	subs.w	ip, r5, r3
   823d4:	bf04      	itt	eq
   823d6:	ebb6 0c02 	subseq.w	ip, r6, r2
   823da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   823de:	f150 0000 	adcs.w	r0, r0, #0
   823e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   823e6:	bd70      	pop	{r4, r5, r6, pc}
   823e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   823ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   823f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   823f4:	bfc2      	ittt	gt
   823f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   823fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   823fe:	bd70      	popgt	{r4, r5, r6, pc}
   82400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82404:	f04f 0e00 	mov.w	lr, #0
   82408:	3c01      	subs	r4, #1
   8240a:	e690      	b.n	8212e <__aeabi_dmul+0xde>
   8240c:	ea45 0e06 	orr.w	lr, r5, r6
   82410:	e68d      	b.n	8212e <__aeabi_dmul+0xde>
   82412:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82416:	ea94 0f0c 	teq	r4, ip
   8241a:	bf08      	it	eq
   8241c:	ea95 0f0c 	teqeq	r5, ip
   82420:	f43f af3b 	beq.w	8229a <__aeabi_dmul+0x24a>
   82424:	ea94 0f0c 	teq	r4, ip
   82428:	d10a      	bne.n	82440 <__aeabi_ddiv+0x19c>
   8242a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8242e:	f47f af34 	bne.w	8229a <__aeabi_dmul+0x24a>
   82432:	ea95 0f0c 	teq	r5, ip
   82436:	f47f af25 	bne.w	82284 <__aeabi_dmul+0x234>
   8243a:	4610      	mov	r0, r2
   8243c:	4619      	mov	r1, r3
   8243e:	e72c      	b.n	8229a <__aeabi_dmul+0x24a>
   82440:	ea95 0f0c 	teq	r5, ip
   82444:	d106      	bne.n	82454 <__aeabi_ddiv+0x1b0>
   82446:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8244a:	f43f aefd 	beq.w	82248 <__aeabi_dmul+0x1f8>
   8244e:	4610      	mov	r0, r2
   82450:	4619      	mov	r1, r3
   82452:	e722      	b.n	8229a <__aeabi_dmul+0x24a>
   82454:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82458:	bf18      	it	ne
   8245a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8245e:	f47f aec5 	bne.w	821ec <__aeabi_dmul+0x19c>
   82462:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   82466:	f47f af0d 	bne.w	82284 <__aeabi_dmul+0x234>
   8246a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8246e:	f47f aeeb 	bne.w	82248 <__aeabi_dmul+0x1f8>
   82472:	e712      	b.n	8229a <__aeabi_dmul+0x24a>

00082474 <__gedf2>:
   82474:	f04f 3cff 	mov.w	ip, #4294967295
   82478:	e006      	b.n	82488 <__cmpdf2+0x4>
   8247a:	bf00      	nop

0008247c <__ledf2>:
   8247c:	f04f 0c01 	mov.w	ip, #1
   82480:	e002      	b.n	82488 <__cmpdf2+0x4>
   82482:	bf00      	nop

00082484 <__cmpdf2>:
   82484:	f04f 0c01 	mov.w	ip, #1
   82488:	f84d cd04 	str.w	ip, [sp, #-4]!
   8248c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   82490:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   82494:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   82498:	bf18      	it	ne
   8249a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8249e:	d01b      	beq.n	824d8 <__cmpdf2+0x54>
   824a0:	b001      	add	sp, #4
   824a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   824a6:	bf0c      	ite	eq
   824a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   824ac:	ea91 0f03 	teqne	r1, r3
   824b0:	bf02      	ittt	eq
   824b2:	ea90 0f02 	teqeq	r0, r2
   824b6:	2000      	moveq	r0, #0
   824b8:	4770      	bxeq	lr
   824ba:	f110 0f00 	cmn.w	r0, #0
   824be:	ea91 0f03 	teq	r1, r3
   824c2:	bf58      	it	pl
   824c4:	4299      	cmppl	r1, r3
   824c6:	bf08      	it	eq
   824c8:	4290      	cmpeq	r0, r2
   824ca:	bf2c      	ite	cs
   824cc:	17d8      	asrcs	r0, r3, #31
   824ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   824d2:	f040 0001 	orr.w	r0, r0, #1
   824d6:	4770      	bx	lr
   824d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   824dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   824e0:	d102      	bne.n	824e8 <__cmpdf2+0x64>
   824e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   824e6:	d107      	bne.n	824f8 <__cmpdf2+0x74>
   824e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   824ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   824f0:	d1d6      	bne.n	824a0 <__cmpdf2+0x1c>
   824f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   824f6:	d0d3      	beq.n	824a0 <__cmpdf2+0x1c>
   824f8:	f85d 0b04 	ldr.w	r0, [sp], #4
   824fc:	4770      	bx	lr
   824fe:	bf00      	nop

00082500 <__aeabi_cdrcmple>:
   82500:	4684      	mov	ip, r0
   82502:	4610      	mov	r0, r2
   82504:	4662      	mov	r2, ip
   82506:	468c      	mov	ip, r1
   82508:	4619      	mov	r1, r3
   8250a:	4663      	mov	r3, ip
   8250c:	e000      	b.n	82510 <__aeabi_cdcmpeq>
   8250e:	bf00      	nop

00082510 <__aeabi_cdcmpeq>:
   82510:	b501      	push	{r0, lr}
   82512:	f7ff ffb7 	bl	82484 <__cmpdf2>
   82516:	2800      	cmp	r0, #0
   82518:	bf48      	it	mi
   8251a:	f110 0f00 	cmnmi.w	r0, #0
   8251e:	bd01      	pop	{r0, pc}

00082520 <__aeabi_dcmpeq>:
   82520:	f84d ed08 	str.w	lr, [sp, #-8]!
   82524:	f7ff fff4 	bl	82510 <__aeabi_cdcmpeq>
   82528:	bf0c      	ite	eq
   8252a:	2001      	moveq	r0, #1
   8252c:	2000      	movne	r0, #0
   8252e:	f85d fb08 	ldr.w	pc, [sp], #8
   82532:	bf00      	nop

00082534 <__aeabi_dcmplt>:
   82534:	f84d ed08 	str.w	lr, [sp, #-8]!
   82538:	f7ff ffea 	bl	82510 <__aeabi_cdcmpeq>
   8253c:	bf34      	ite	cc
   8253e:	2001      	movcc	r0, #1
   82540:	2000      	movcs	r0, #0
   82542:	f85d fb08 	ldr.w	pc, [sp], #8
   82546:	bf00      	nop

00082548 <__aeabi_dcmple>:
   82548:	f84d ed08 	str.w	lr, [sp, #-8]!
   8254c:	f7ff ffe0 	bl	82510 <__aeabi_cdcmpeq>
   82550:	bf94      	ite	ls
   82552:	2001      	movls	r0, #1
   82554:	2000      	movhi	r0, #0
   82556:	f85d fb08 	ldr.w	pc, [sp], #8
   8255a:	bf00      	nop

0008255c <__aeabi_dcmpge>:
   8255c:	f84d ed08 	str.w	lr, [sp, #-8]!
   82560:	f7ff ffce 	bl	82500 <__aeabi_cdrcmple>
   82564:	bf94      	ite	ls
   82566:	2001      	movls	r0, #1
   82568:	2000      	movhi	r0, #0
   8256a:	f85d fb08 	ldr.w	pc, [sp], #8
   8256e:	bf00      	nop

00082570 <__aeabi_dcmpgt>:
   82570:	f84d ed08 	str.w	lr, [sp, #-8]!
   82574:	f7ff ffc4 	bl	82500 <__aeabi_cdrcmple>
   82578:	bf34      	ite	cc
   8257a:	2001      	movcc	r0, #1
   8257c:	2000      	movcs	r0, #0
   8257e:	f85d fb08 	ldr.w	pc, [sp], #8
   82582:	bf00      	nop

00082584 <__aeabi_d2iz>:
   82584:	ea4f 0241 	mov.w	r2, r1, lsl #1
   82588:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8258c:	d215      	bcs.n	825ba <__aeabi_d2iz+0x36>
   8258e:	d511      	bpl.n	825b4 <__aeabi_d2iz+0x30>
   82590:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   82594:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   82598:	d912      	bls.n	825c0 <__aeabi_d2iz+0x3c>
   8259a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8259e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   825a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   825a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   825aa:	fa23 f002 	lsr.w	r0, r3, r2
   825ae:	bf18      	it	ne
   825b0:	4240      	negne	r0, r0
   825b2:	4770      	bx	lr
   825b4:	f04f 0000 	mov.w	r0, #0
   825b8:	4770      	bx	lr
   825ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   825be:	d105      	bne.n	825cc <__aeabi_d2iz+0x48>
   825c0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   825c4:	bf08      	it	eq
   825c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   825ca:	4770      	bx	lr
   825cc:	f04f 0000 	mov.w	r0, #0
   825d0:	4770      	bx	lr
   825d2:	bf00      	nop

000825d4 <__aeabi_d2uiz>:
   825d4:	004a      	lsls	r2, r1, #1
   825d6:	d211      	bcs.n	825fc <__aeabi_d2uiz+0x28>
   825d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   825dc:	d211      	bcs.n	82602 <__aeabi_d2uiz+0x2e>
   825de:	d50d      	bpl.n	825fc <__aeabi_d2uiz+0x28>
   825e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   825e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   825e8:	d40e      	bmi.n	82608 <__aeabi_d2uiz+0x34>
   825ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   825ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   825f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   825f6:	fa23 f002 	lsr.w	r0, r3, r2
   825fa:	4770      	bx	lr
   825fc:	f04f 0000 	mov.w	r0, #0
   82600:	4770      	bx	lr
   82602:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   82606:	d102      	bne.n	8260e <__aeabi_d2uiz+0x3a>
   82608:	f04f 30ff 	mov.w	r0, #4294967295
   8260c:	4770      	bx	lr
   8260e:	f04f 0000 	mov.w	r0, #0
   82612:	4770      	bx	lr

00082614 <__aeabi_d2f>:
   82614:	ea4f 0241 	mov.w	r2, r1, lsl #1
   82618:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   8261c:	bf24      	itt	cs
   8261e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   82622:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   82626:	d90d      	bls.n	82644 <__aeabi_d2f+0x30>
   82628:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8262c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   82630:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   82634:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   82638:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   8263c:	bf08      	it	eq
   8263e:	f020 0001 	biceq.w	r0, r0, #1
   82642:	4770      	bx	lr
   82644:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   82648:	d121      	bne.n	8268e <__aeabi_d2f+0x7a>
   8264a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   8264e:	bfbc      	itt	lt
   82650:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   82654:	4770      	bxlt	lr
   82656:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8265a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   8265e:	f1c2 0218 	rsb	r2, r2, #24
   82662:	f1c2 0c20 	rsb	ip, r2, #32
   82666:	fa10 f30c 	lsls.w	r3, r0, ip
   8266a:	fa20 f002 	lsr.w	r0, r0, r2
   8266e:	bf18      	it	ne
   82670:	f040 0001 	orrne.w	r0, r0, #1
   82674:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   82678:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   8267c:	fa03 fc0c 	lsl.w	ip, r3, ip
   82680:	ea40 000c 	orr.w	r0, r0, ip
   82684:	fa23 f302 	lsr.w	r3, r3, r2
   82688:	ea4f 0343 	mov.w	r3, r3, lsl #1
   8268c:	e7cc      	b.n	82628 <__aeabi_d2f+0x14>
   8268e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   82692:	d107      	bne.n	826a4 <__aeabi_d2f+0x90>
   82694:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   82698:	bf1e      	ittt	ne
   8269a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8269e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   826a2:	4770      	bxne	lr
   826a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   826a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   826ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   826b0:	4770      	bx	lr
   826b2:	bf00      	nop

000826b4 <__aeabi_frsub>:
   826b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   826b8:	e002      	b.n	826c0 <__addsf3>
   826ba:	bf00      	nop

000826bc <__aeabi_fsub>:
   826bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000826c0 <__addsf3>:
   826c0:	0042      	lsls	r2, r0, #1
   826c2:	bf1f      	itttt	ne
   826c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   826c8:	ea92 0f03 	teqne	r2, r3
   826cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   826d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   826d4:	d06a      	beq.n	827ac <__addsf3+0xec>
   826d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   826da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   826de:	bfc1      	itttt	gt
   826e0:	18d2      	addgt	r2, r2, r3
   826e2:	4041      	eorgt	r1, r0
   826e4:	4048      	eorgt	r0, r1
   826e6:	4041      	eorgt	r1, r0
   826e8:	bfb8      	it	lt
   826ea:	425b      	neglt	r3, r3
   826ec:	2b19      	cmp	r3, #25
   826ee:	bf88      	it	hi
   826f0:	4770      	bxhi	lr
   826f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   826f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   826fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   826fe:	bf18      	it	ne
   82700:	4240      	negne	r0, r0
   82702:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82706:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8270a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8270e:	bf18      	it	ne
   82710:	4249      	negne	r1, r1
   82712:	ea92 0f03 	teq	r2, r3
   82716:	d03f      	beq.n	82798 <__addsf3+0xd8>
   82718:	f1a2 0201 	sub.w	r2, r2, #1
   8271c:	fa41 fc03 	asr.w	ip, r1, r3
   82720:	eb10 000c 	adds.w	r0, r0, ip
   82724:	f1c3 0320 	rsb	r3, r3, #32
   82728:	fa01 f103 	lsl.w	r1, r1, r3
   8272c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82730:	d502      	bpl.n	82738 <__addsf3+0x78>
   82732:	4249      	negs	r1, r1
   82734:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   82738:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   8273c:	d313      	bcc.n	82766 <__addsf3+0xa6>
   8273e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   82742:	d306      	bcc.n	82752 <__addsf3+0x92>
   82744:	0840      	lsrs	r0, r0, #1
   82746:	ea4f 0131 	mov.w	r1, r1, rrx
   8274a:	f102 0201 	add.w	r2, r2, #1
   8274e:	2afe      	cmp	r2, #254	; 0xfe
   82750:	d251      	bcs.n	827f6 <__addsf3+0x136>
   82752:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   82756:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8275a:	bf08      	it	eq
   8275c:	f020 0001 	biceq.w	r0, r0, #1
   82760:	ea40 0003 	orr.w	r0, r0, r3
   82764:	4770      	bx	lr
   82766:	0049      	lsls	r1, r1, #1
   82768:	eb40 0000 	adc.w	r0, r0, r0
   8276c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   82770:	f1a2 0201 	sub.w	r2, r2, #1
   82774:	d1ed      	bne.n	82752 <__addsf3+0x92>
   82776:	fab0 fc80 	clz	ip, r0
   8277a:	f1ac 0c08 	sub.w	ip, ip, #8
   8277e:	ebb2 020c 	subs.w	r2, r2, ip
   82782:	fa00 f00c 	lsl.w	r0, r0, ip
   82786:	bfaa      	itet	ge
   82788:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8278c:	4252      	neglt	r2, r2
   8278e:	4318      	orrge	r0, r3
   82790:	bfbc      	itt	lt
   82792:	40d0      	lsrlt	r0, r2
   82794:	4318      	orrlt	r0, r3
   82796:	4770      	bx	lr
   82798:	f092 0f00 	teq	r2, #0
   8279c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   827a0:	bf06      	itte	eq
   827a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   827a6:	3201      	addeq	r2, #1
   827a8:	3b01      	subne	r3, #1
   827aa:	e7b5      	b.n	82718 <__addsf3+0x58>
   827ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
   827b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   827b4:	bf18      	it	ne
   827b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   827ba:	d021      	beq.n	82800 <__addsf3+0x140>
   827bc:	ea92 0f03 	teq	r2, r3
   827c0:	d004      	beq.n	827cc <__addsf3+0x10c>
   827c2:	f092 0f00 	teq	r2, #0
   827c6:	bf08      	it	eq
   827c8:	4608      	moveq	r0, r1
   827ca:	4770      	bx	lr
   827cc:	ea90 0f01 	teq	r0, r1
   827d0:	bf1c      	itt	ne
   827d2:	2000      	movne	r0, #0
   827d4:	4770      	bxne	lr
   827d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   827da:	d104      	bne.n	827e6 <__addsf3+0x126>
   827dc:	0040      	lsls	r0, r0, #1
   827de:	bf28      	it	cs
   827e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   827e4:	4770      	bx	lr
   827e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   827ea:	bf3c      	itt	cc
   827ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   827f0:	4770      	bxcc	lr
   827f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   827f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   827fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   827fe:	4770      	bx	lr
   82800:	ea7f 6222 	mvns.w	r2, r2, asr #24
   82804:	bf16      	itet	ne
   82806:	4608      	movne	r0, r1
   82808:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   8280c:	4601      	movne	r1, r0
   8280e:	0242      	lsls	r2, r0, #9
   82810:	bf06      	itte	eq
   82812:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   82816:	ea90 0f01 	teqeq	r0, r1
   8281a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8281e:	4770      	bx	lr

00082820 <__aeabi_ui2f>:
   82820:	f04f 0300 	mov.w	r3, #0
   82824:	e004      	b.n	82830 <__aeabi_i2f+0x8>
   82826:	bf00      	nop

00082828 <__aeabi_i2f>:
   82828:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   8282c:	bf48      	it	mi
   8282e:	4240      	negmi	r0, r0
   82830:	ea5f 0c00 	movs.w	ip, r0
   82834:	bf08      	it	eq
   82836:	4770      	bxeq	lr
   82838:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   8283c:	4601      	mov	r1, r0
   8283e:	f04f 0000 	mov.w	r0, #0
   82842:	e01c      	b.n	8287e <__aeabi_l2f+0x2a>

00082844 <__aeabi_ul2f>:
   82844:	ea50 0201 	orrs.w	r2, r0, r1
   82848:	bf08      	it	eq
   8284a:	4770      	bxeq	lr
   8284c:	f04f 0300 	mov.w	r3, #0
   82850:	e00a      	b.n	82868 <__aeabi_l2f+0x14>
   82852:	bf00      	nop

00082854 <__aeabi_l2f>:
   82854:	ea50 0201 	orrs.w	r2, r0, r1
   82858:	bf08      	it	eq
   8285a:	4770      	bxeq	lr
   8285c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   82860:	d502      	bpl.n	82868 <__aeabi_l2f+0x14>
   82862:	4240      	negs	r0, r0
   82864:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82868:	ea5f 0c01 	movs.w	ip, r1
   8286c:	bf02      	ittt	eq
   8286e:	4684      	moveq	ip, r0
   82870:	4601      	moveq	r1, r0
   82872:	2000      	moveq	r0, #0
   82874:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   82878:	bf08      	it	eq
   8287a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8287e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   82882:	fabc f28c 	clz	r2, ip
   82886:	3a08      	subs	r2, #8
   82888:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8288c:	db10      	blt.n	828b0 <__aeabi_l2f+0x5c>
   8288e:	fa01 fc02 	lsl.w	ip, r1, r2
   82892:	4463      	add	r3, ip
   82894:	fa00 fc02 	lsl.w	ip, r0, r2
   82898:	f1c2 0220 	rsb	r2, r2, #32
   8289c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   828a0:	fa20 f202 	lsr.w	r2, r0, r2
   828a4:	eb43 0002 	adc.w	r0, r3, r2
   828a8:	bf08      	it	eq
   828aa:	f020 0001 	biceq.w	r0, r0, #1
   828ae:	4770      	bx	lr
   828b0:	f102 0220 	add.w	r2, r2, #32
   828b4:	fa01 fc02 	lsl.w	ip, r1, r2
   828b8:	f1c2 0220 	rsb	r2, r2, #32
   828bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   828c0:	fa21 f202 	lsr.w	r2, r1, r2
   828c4:	eb43 0002 	adc.w	r0, r3, r2
   828c8:	bf08      	it	eq
   828ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   828ce:	4770      	bx	lr

000828d0 <__aeabi_fmul>:
   828d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   828d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   828d8:	bf1e      	ittt	ne
   828da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   828de:	ea92 0f0c 	teqne	r2, ip
   828e2:	ea93 0f0c 	teqne	r3, ip
   828e6:	d06f      	beq.n	829c8 <__aeabi_fmul+0xf8>
   828e8:	441a      	add	r2, r3
   828ea:	ea80 0c01 	eor.w	ip, r0, r1
   828ee:	0240      	lsls	r0, r0, #9
   828f0:	bf18      	it	ne
   828f2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   828f6:	d01e      	beq.n	82936 <__aeabi_fmul+0x66>
   828f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   828fc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   82900:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   82904:	fba0 3101 	umull	r3, r1, r0, r1
   82908:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8290c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   82910:	bf3e      	ittt	cc
   82912:	0049      	lslcc	r1, r1, #1
   82914:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   82918:	005b      	lslcc	r3, r3, #1
   8291a:	ea40 0001 	orr.w	r0, r0, r1
   8291e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   82922:	2afd      	cmp	r2, #253	; 0xfd
   82924:	d81d      	bhi.n	82962 <__aeabi_fmul+0x92>
   82926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   8292a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8292e:	bf08      	it	eq
   82930:	f020 0001 	biceq.w	r0, r0, #1
   82934:	4770      	bx	lr
   82936:	f090 0f00 	teq	r0, #0
   8293a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8293e:	bf08      	it	eq
   82940:	0249      	lsleq	r1, r1, #9
   82942:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   82946:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8294a:	3a7f      	subs	r2, #127	; 0x7f
   8294c:	bfc2      	ittt	gt
   8294e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   82952:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   82956:	4770      	bxgt	lr
   82958:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8295c:	f04f 0300 	mov.w	r3, #0
   82960:	3a01      	subs	r2, #1
   82962:	dc5d      	bgt.n	82a20 <__aeabi_fmul+0x150>
   82964:	f112 0f19 	cmn.w	r2, #25
   82968:	bfdc      	itt	le
   8296a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8296e:	4770      	bxle	lr
   82970:	f1c2 0200 	rsb	r2, r2, #0
   82974:	0041      	lsls	r1, r0, #1
   82976:	fa21 f102 	lsr.w	r1, r1, r2
   8297a:	f1c2 0220 	rsb	r2, r2, #32
   8297e:	fa00 fc02 	lsl.w	ip, r0, r2
   82982:	ea5f 0031 	movs.w	r0, r1, rrx
   82986:	f140 0000 	adc.w	r0, r0, #0
   8298a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8298e:	bf08      	it	eq
   82990:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   82994:	4770      	bx	lr
   82996:	f092 0f00 	teq	r2, #0
   8299a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8299e:	bf02      	ittt	eq
   829a0:	0040      	lsleq	r0, r0, #1
   829a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   829a6:	3a01      	subeq	r2, #1
   829a8:	d0f9      	beq.n	8299e <__aeabi_fmul+0xce>
   829aa:	ea40 000c 	orr.w	r0, r0, ip
   829ae:	f093 0f00 	teq	r3, #0
   829b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   829b6:	bf02      	ittt	eq
   829b8:	0049      	lsleq	r1, r1, #1
   829ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   829be:	3b01      	subeq	r3, #1
   829c0:	d0f9      	beq.n	829b6 <__aeabi_fmul+0xe6>
   829c2:	ea41 010c 	orr.w	r1, r1, ip
   829c6:	e78f      	b.n	828e8 <__aeabi_fmul+0x18>
   829c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   829cc:	ea92 0f0c 	teq	r2, ip
   829d0:	bf18      	it	ne
   829d2:	ea93 0f0c 	teqne	r3, ip
   829d6:	d00a      	beq.n	829ee <__aeabi_fmul+0x11e>
   829d8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   829dc:	bf18      	it	ne
   829de:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   829e2:	d1d8      	bne.n	82996 <__aeabi_fmul+0xc6>
   829e4:	ea80 0001 	eor.w	r0, r0, r1
   829e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   829ec:	4770      	bx	lr
   829ee:	f090 0f00 	teq	r0, #0
   829f2:	bf17      	itett	ne
   829f4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   829f8:	4608      	moveq	r0, r1
   829fa:	f091 0f00 	teqne	r1, #0
   829fe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   82a02:	d014      	beq.n	82a2e <__aeabi_fmul+0x15e>
   82a04:	ea92 0f0c 	teq	r2, ip
   82a08:	d101      	bne.n	82a0e <__aeabi_fmul+0x13e>
   82a0a:	0242      	lsls	r2, r0, #9
   82a0c:	d10f      	bne.n	82a2e <__aeabi_fmul+0x15e>
   82a0e:	ea93 0f0c 	teq	r3, ip
   82a12:	d103      	bne.n	82a1c <__aeabi_fmul+0x14c>
   82a14:	024b      	lsls	r3, r1, #9
   82a16:	bf18      	it	ne
   82a18:	4608      	movne	r0, r1
   82a1a:	d108      	bne.n	82a2e <__aeabi_fmul+0x15e>
   82a1c:	ea80 0001 	eor.w	r0, r0, r1
   82a20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   82a24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82a28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82a2c:	4770      	bx	lr
   82a2e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82a32:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   82a36:	4770      	bx	lr

00082a38 <__aeabi_fdiv>:
   82a38:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82a3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   82a40:	bf1e      	ittt	ne
   82a42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   82a46:	ea92 0f0c 	teqne	r2, ip
   82a4a:	ea93 0f0c 	teqne	r3, ip
   82a4e:	d069      	beq.n	82b24 <__aeabi_fdiv+0xec>
   82a50:	eba2 0203 	sub.w	r2, r2, r3
   82a54:	ea80 0c01 	eor.w	ip, r0, r1
   82a58:	0249      	lsls	r1, r1, #9
   82a5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   82a5e:	d037      	beq.n	82ad0 <__aeabi_fdiv+0x98>
   82a60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   82a64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   82a68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   82a6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   82a70:	428b      	cmp	r3, r1
   82a72:	bf38      	it	cc
   82a74:	005b      	lslcc	r3, r3, #1
   82a76:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   82a7a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   82a7e:	428b      	cmp	r3, r1
   82a80:	bf24      	itt	cs
   82a82:	1a5b      	subcs	r3, r3, r1
   82a84:	ea40 000c 	orrcs.w	r0, r0, ip
   82a88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   82a8c:	bf24      	itt	cs
   82a8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   82a92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82a96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   82a9a:	bf24      	itt	cs
   82a9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   82aa0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82aa4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   82aa8:	bf24      	itt	cs
   82aaa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   82aae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82ab2:	011b      	lsls	r3, r3, #4
   82ab4:	bf18      	it	ne
   82ab6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   82aba:	d1e0      	bne.n	82a7e <__aeabi_fdiv+0x46>
   82abc:	2afd      	cmp	r2, #253	; 0xfd
   82abe:	f63f af50 	bhi.w	82962 <__aeabi_fmul+0x92>
   82ac2:	428b      	cmp	r3, r1
   82ac4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82ac8:	bf08      	it	eq
   82aca:	f020 0001 	biceq.w	r0, r0, #1
   82ace:	4770      	bx	lr
   82ad0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   82ad4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   82ad8:	327f      	adds	r2, #127	; 0x7f
   82ada:	bfc2      	ittt	gt
   82adc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   82ae0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   82ae4:	4770      	bxgt	lr
   82ae6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82aea:	f04f 0300 	mov.w	r3, #0
   82aee:	3a01      	subs	r2, #1
   82af0:	e737      	b.n	82962 <__aeabi_fmul+0x92>
   82af2:	f092 0f00 	teq	r2, #0
   82af6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   82afa:	bf02      	ittt	eq
   82afc:	0040      	lsleq	r0, r0, #1
   82afe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   82b02:	3a01      	subeq	r2, #1
   82b04:	d0f9      	beq.n	82afa <__aeabi_fdiv+0xc2>
   82b06:	ea40 000c 	orr.w	r0, r0, ip
   82b0a:	f093 0f00 	teq	r3, #0
   82b0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82b12:	bf02      	ittt	eq
   82b14:	0049      	lsleq	r1, r1, #1
   82b16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   82b1a:	3b01      	subeq	r3, #1
   82b1c:	d0f9      	beq.n	82b12 <__aeabi_fdiv+0xda>
   82b1e:	ea41 010c 	orr.w	r1, r1, ip
   82b22:	e795      	b.n	82a50 <__aeabi_fdiv+0x18>
   82b24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   82b28:	ea92 0f0c 	teq	r2, ip
   82b2c:	d108      	bne.n	82b40 <__aeabi_fdiv+0x108>
   82b2e:	0242      	lsls	r2, r0, #9
   82b30:	f47f af7d 	bne.w	82a2e <__aeabi_fmul+0x15e>
   82b34:	ea93 0f0c 	teq	r3, ip
   82b38:	f47f af70 	bne.w	82a1c <__aeabi_fmul+0x14c>
   82b3c:	4608      	mov	r0, r1
   82b3e:	e776      	b.n	82a2e <__aeabi_fmul+0x15e>
   82b40:	ea93 0f0c 	teq	r3, ip
   82b44:	d104      	bne.n	82b50 <__aeabi_fdiv+0x118>
   82b46:	024b      	lsls	r3, r1, #9
   82b48:	f43f af4c 	beq.w	829e4 <__aeabi_fmul+0x114>
   82b4c:	4608      	mov	r0, r1
   82b4e:	e76e      	b.n	82a2e <__aeabi_fmul+0x15e>
   82b50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   82b54:	bf18      	it	ne
   82b56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   82b5a:	d1ca      	bne.n	82af2 <__aeabi_fdiv+0xba>
   82b5c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   82b60:	f47f af5c 	bne.w	82a1c <__aeabi_fmul+0x14c>
   82b64:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   82b68:	f47f af3c 	bne.w	829e4 <__aeabi_fmul+0x114>
   82b6c:	e75f      	b.n	82a2e <__aeabi_fmul+0x15e>
   82b6e:	bf00      	nop

00082b70 <__gesf2>:
   82b70:	f04f 3cff 	mov.w	ip, #4294967295
   82b74:	e006      	b.n	82b84 <__cmpsf2+0x4>
   82b76:	bf00      	nop

00082b78 <__lesf2>:
   82b78:	f04f 0c01 	mov.w	ip, #1
   82b7c:	e002      	b.n	82b84 <__cmpsf2+0x4>
   82b7e:	bf00      	nop

00082b80 <__cmpsf2>:
   82b80:	f04f 0c01 	mov.w	ip, #1
   82b84:	f84d cd04 	str.w	ip, [sp, #-4]!
   82b88:	ea4f 0240 	mov.w	r2, r0, lsl #1
   82b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82b94:	bf18      	it	ne
   82b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82b9a:	d011      	beq.n	82bc0 <__cmpsf2+0x40>
   82b9c:	b001      	add	sp, #4
   82b9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   82ba2:	bf18      	it	ne
   82ba4:	ea90 0f01 	teqne	r0, r1
   82ba8:	bf58      	it	pl
   82baa:	ebb2 0003 	subspl.w	r0, r2, r3
   82bae:	bf88      	it	hi
   82bb0:	17c8      	asrhi	r0, r1, #31
   82bb2:	bf38      	it	cc
   82bb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   82bb8:	bf18      	it	ne
   82bba:	f040 0001 	orrne.w	r0, r0, #1
   82bbe:	4770      	bx	lr
   82bc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82bc4:	d102      	bne.n	82bcc <__cmpsf2+0x4c>
   82bc6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   82bca:	d105      	bne.n	82bd8 <__cmpsf2+0x58>
   82bcc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   82bd0:	d1e4      	bne.n	82b9c <__cmpsf2+0x1c>
   82bd2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   82bd6:	d0e1      	beq.n	82b9c <__cmpsf2+0x1c>
   82bd8:	f85d 0b04 	ldr.w	r0, [sp], #4
   82bdc:	4770      	bx	lr
   82bde:	bf00      	nop

00082be0 <__aeabi_cfrcmple>:
   82be0:	4684      	mov	ip, r0
   82be2:	4608      	mov	r0, r1
   82be4:	4661      	mov	r1, ip
   82be6:	e7ff      	b.n	82be8 <__aeabi_cfcmpeq>

00082be8 <__aeabi_cfcmpeq>:
   82be8:	b50f      	push	{r0, r1, r2, r3, lr}
   82bea:	f7ff ffc9 	bl	82b80 <__cmpsf2>
   82bee:	2800      	cmp	r0, #0
   82bf0:	bf48      	it	mi
   82bf2:	f110 0f00 	cmnmi.w	r0, #0
   82bf6:	bd0f      	pop	{r0, r1, r2, r3, pc}

00082bf8 <__aeabi_fcmpeq>:
   82bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   82bfc:	f7ff fff4 	bl	82be8 <__aeabi_cfcmpeq>
   82c00:	bf0c      	ite	eq
   82c02:	2001      	moveq	r0, #1
   82c04:	2000      	movne	r0, #0
   82c06:	f85d fb08 	ldr.w	pc, [sp], #8
   82c0a:	bf00      	nop

00082c0c <__aeabi_fcmplt>:
   82c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   82c10:	f7ff ffea 	bl	82be8 <__aeabi_cfcmpeq>
   82c14:	bf34      	ite	cc
   82c16:	2001      	movcc	r0, #1
   82c18:	2000      	movcs	r0, #0
   82c1a:	f85d fb08 	ldr.w	pc, [sp], #8
   82c1e:	bf00      	nop

00082c20 <__aeabi_fcmple>:
   82c20:	f84d ed08 	str.w	lr, [sp, #-8]!
   82c24:	f7ff ffe0 	bl	82be8 <__aeabi_cfcmpeq>
   82c28:	bf94      	ite	ls
   82c2a:	2001      	movls	r0, #1
   82c2c:	2000      	movhi	r0, #0
   82c2e:	f85d fb08 	ldr.w	pc, [sp], #8
   82c32:	bf00      	nop

00082c34 <__aeabi_fcmpge>:
   82c34:	f84d ed08 	str.w	lr, [sp, #-8]!
   82c38:	f7ff ffd2 	bl	82be0 <__aeabi_cfrcmple>
   82c3c:	bf94      	ite	ls
   82c3e:	2001      	movls	r0, #1
   82c40:	2000      	movhi	r0, #0
   82c42:	f85d fb08 	ldr.w	pc, [sp], #8
   82c46:	bf00      	nop

00082c48 <__aeabi_fcmpgt>:
   82c48:	f84d ed08 	str.w	lr, [sp, #-8]!
   82c4c:	f7ff ffc8 	bl	82be0 <__aeabi_cfrcmple>
   82c50:	bf34      	ite	cc
   82c52:	2001      	movcc	r0, #1
   82c54:	2000      	movcs	r0, #0
   82c56:	f85d fb08 	ldr.w	pc, [sp], #8
   82c5a:	bf00      	nop

00082c5c <__errno>:
   82c5c:	4b01      	ldr	r3, [pc, #4]	; (82c64 <__errno+0x8>)
   82c5e:	6818      	ldr	r0, [r3, #0]
   82c60:	4770      	bx	lr
   82c62:	bf00      	nop
   82c64:	20070588 	.word	0x20070588

00082c68 <__libc_init_array>:
   82c68:	b570      	push	{r4, r5, r6, lr}
   82c6a:	4e0f      	ldr	r6, [pc, #60]	; (82ca8 <__libc_init_array+0x40>)
   82c6c:	4d0f      	ldr	r5, [pc, #60]	; (82cac <__libc_init_array+0x44>)
   82c6e:	1b76      	subs	r6, r6, r5
   82c70:	10b6      	asrs	r6, r6, #2
   82c72:	d007      	beq.n	82c84 <__libc_init_array+0x1c>
   82c74:	3d04      	subs	r5, #4
   82c76:	2400      	movs	r4, #0
   82c78:	3401      	adds	r4, #1
   82c7a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82c7e:	4798      	blx	r3
   82c80:	42a6      	cmp	r6, r4
   82c82:	d1f9      	bne.n	82c78 <__libc_init_array+0x10>
   82c84:	4e0a      	ldr	r6, [pc, #40]	; (82cb0 <__libc_init_array+0x48>)
   82c86:	4d0b      	ldr	r5, [pc, #44]	; (82cb4 <__libc_init_array+0x4c>)
   82c88:	f000 ffb2 	bl	83bf0 <_init>
   82c8c:	1b76      	subs	r6, r6, r5
   82c8e:	10b6      	asrs	r6, r6, #2
   82c90:	d008      	beq.n	82ca4 <__libc_init_array+0x3c>
   82c92:	3d04      	subs	r5, #4
   82c94:	2400      	movs	r4, #0
   82c96:	3401      	adds	r4, #1
   82c98:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82c9c:	4798      	blx	r3
   82c9e:	42a6      	cmp	r6, r4
   82ca0:	d1f9      	bne.n	82c96 <__libc_init_array+0x2e>
   82ca2:	bd70      	pop	{r4, r5, r6, pc}
   82ca4:	bd70      	pop	{r4, r5, r6, pc}
   82ca6:	bf00      	nop
   82ca8:	00083bfc 	.word	0x00083bfc
   82cac:	00083bfc 	.word	0x00083bfc
   82cb0:	00083c04 	.word	0x00083c04
   82cb4:	00083bfc 	.word	0x00083bfc

00082cb8 <memset>:
   82cb8:	b4f0      	push	{r4, r5, r6, r7}
   82cba:	0784      	lsls	r4, r0, #30
   82cbc:	d043      	beq.n	82d46 <memset+0x8e>
   82cbe:	1e54      	subs	r4, r2, #1
   82cc0:	2a00      	cmp	r2, #0
   82cc2:	d03e      	beq.n	82d42 <memset+0x8a>
   82cc4:	b2cd      	uxtb	r5, r1
   82cc6:	4603      	mov	r3, r0
   82cc8:	e003      	b.n	82cd2 <memset+0x1a>
   82cca:	1e62      	subs	r2, r4, #1
   82ccc:	2c00      	cmp	r4, #0
   82cce:	d038      	beq.n	82d42 <memset+0x8a>
   82cd0:	4614      	mov	r4, r2
   82cd2:	f803 5b01 	strb.w	r5, [r3], #1
   82cd6:	079a      	lsls	r2, r3, #30
   82cd8:	d1f7      	bne.n	82cca <memset+0x12>
   82cda:	2c03      	cmp	r4, #3
   82cdc:	d92a      	bls.n	82d34 <memset+0x7c>
   82cde:	b2cd      	uxtb	r5, r1
   82ce0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82ce4:	2c0f      	cmp	r4, #15
   82ce6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82cea:	d915      	bls.n	82d18 <memset+0x60>
   82cec:	f1a4 0710 	sub.w	r7, r4, #16
   82cf0:	093f      	lsrs	r7, r7, #4
   82cf2:	f103 0610 	add.w	r6, r3, #16
   82cf6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   82cfa:	461a      	mov	r2, r3
   82cfc:	6015      	str	r5, [r2, #0]
   82cfe:	6055      	str	r5, [r2, #4]
   82d00:	6095      	str	r5, [r2, #8]
   82d02:	60d5      	str	r5, [r2, #12]
   82d04:	3210      	adds	r2, #16
   82d06:	42b2      	cmp	r2, r6
   82d08:	d1f8      	bne.n	82cfc <memset+0x44>
   82d0a:	f004 040f 	and.w	r4, r4, #15
   82d0e:	3701      	adds	r7, #1
   82d10:	2c03      	cmp	r4, #3
   82d12:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   82d16:	d90d      	bls.n	82d34 <memset+0x7c>
   82d18:	461e      	mov	r6, r3
   82d1a:	4622      	mov	r2, r4
   82d1c:	3a04      	subs	r2, #4
   82d1e:	2a03      	cmp	r2, #3
   82d20:	f846 5b04 	str.w	r5, [r6], #4
   82d24:	d8fa      	bhi.n	82d1c <memset+0x64>
   82d26:	1f22      	subs	r2, r4, #4
   82d28:	f022 0203 	bic.w	r2, r2, #3
   82d2c:	3204      	adds	r2, #4
   82d2e:	4413      	add	r3, r2
   82d30:	f004 0403 	and.w	r4, r4, #3
   82d34:	b12c      	cbz	r4, 82d42 <memset+0x8a>
   82d36:	b2c9      	uxtb	r1, r1
   82d38:	441c      	add	r4, r3
   82d3a:	f803 1b01 	strb.w	r1, [r3], #1
   82d3e:	42a3      	cmp	r3, r4
   82d40:	d1fb      	bne.n	82d3a <memset+0x82>
   82d42:	bcf0      	pop	{r4, r5, r6, r7}
   82d44:	4770      	bx	lr
   82d46:	4614      	mov	r4, r2
   82d48:	4603      	mov	r3, r0
   82d4a:	e7c6      	b.n	82cda <memset+0x22>

00082d4c <setbuf>:
   82d4c:	2900      	cmp	r1, #0
   82d4e:	bf0c      	ite	eq
   82d50:	2202      	moveq	r2, #2
   82d52:	2200      	movne	r2, #0
   82d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82d58:	f000 b800 	b.w	82d5c <setvbuf>

00082d5c <setvbuf>:
   82d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82d60:	4d3c      	ldr	r5, [pc, #240]	; (82e54 <setvbuf+0xf8>)
   82d62:	4604      	mov	r4, r0
   82d64:	682d      	ldr	r5, [r5, #0]
   82d66:	4688      	mov	r8, r1
   82d68:	4616      	mov	r6, r2
   82d6a:	461f      	mov	r7, r3
   82d6c:	b115      	cbz	r5, 82d74 <setvbuf+0x18>
   82d6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82d70:	2b00      	cmp	r3, #0
   82d72:	d04f      	beq.n	82e14 <setvbuf+0xb8>
   82d74:	2e02      	cmp	r6, #2
   82d76:	d830      	bhi.n	82dda <setvbuf+0x7e>
   82d78:	2f00      	cmp	r7, #0
   82d7a:	db2e      	blt.n	82dda <setvbuf+0x7e>
   82d7c:	4628      	mov	r0, r5
   82d7e:	4621      	mov	r1, r4
   82d80:	f000 f920 	bl	82fc4 <_fflush_r>
   82d84:	89a3      	ldrh	r3, [r4, #12]
   82d86:	2200      	movs	r2, #0
   82d88:	6062      	str	r2, [r4, #4]
   82d8a:	61a2      	str	r2, [r4, #24]
   82d8c:	061a      	lsls	r2, r3, #24
   82d8e:	d428      	bmi.n	82de2 <setvbuf+0x86>
   82d90:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82d94:	b29b      	uxth	r3, r3
   82d96:	2e02      	cmp	r6, #2
   82d98:	81a3      	strh	r3, [r4, #12]
   82d9a:	d02d      	beq.n	82df8 <setvbuf+0x9c>
   82d9c:	f1b8 0f00 	cmp.w	r8, #0
   82da0:	d03c      	beq.n	82e1c <setvbuf+0xc0>
   82da2:	2e01      	cmp	r6, #1
   82da4:	d013      	beq.n	82dce <setvbuf+0x72>
   82da6:	b29b      	uxth	r3, r3
   82da8:	f003 0008 	and.w	r0, r3, #8
   82dac:	4a2a      	ldr	r2, [pc, #168]	; (82e58 <setvbuf+0xfc>)
   82dae:	b280      	uxth	r0, r0
   82db0:	63ea      	str	r2, [r5, #60]	; 0x3c
   82db2:	f8c4 8000 	str.w	r8, [r4]
   82db6:	f8c4 8010 	str.w	r8, [r4, #16]
   82dba:	6167      	str	r7, [r4, #20]
   82dbc:	b178      	cbz	r0, 82dde <setvbuf+0x82>
   82dbe:	f013 0f03 	tst.w	r3, #3
   82dc2:	bf18      	it	ne
   82dc4:	2700      	movne	r7, #0
   82dc6:	60a7      	str	r7, [r4, #8]
   82dc8:	2000      	movs	r0, #0
   82dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82dce:	f043 0301 	orr.w	r3, r3, #1
   82dd2:	427a      	negs	r2, r7
   82dd4:	81a3      	strh	r3, [r4, #12]
   82dd6:	61a2      	str	r2, [r4, #24]
   82dd8:	e7e5      	b.n	82da6 <setvbuf+0x4a>
   82dda:	f04f 30ff 	mov.w	r0, #4294967295
   82dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82de2:	4628      	mov	r0, r5
   82de4:	6921      	ldr	r1, [r4, #16]
   82de6:	f000 f9ed 	bl	831c4 <_free_r>
   82dea:	89a3      	ldrh	r3, [r4, #12]
   82dec:	2e02      	cmp	r6, #2
   82dee:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82df2:	b29b      	uxth	r3, r3
   82df4:	81a3      	strh	r3, [r4, #12]
   82df6:	d1d1      	bne.n	82d9c <setvbuf+0x40>
   82df8:	2000      	movs	r0, #0
   82dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82dfe:	f043 0302 	orr.w	r3, r3, #2
   82e02:	2500      	movs	r5, #0
   82e04:	2101      	movs	r1, #1
   82e06:	81a3      	strh	r3, [r4, #12]
   82e08:	60a5      	str	r5, [r4, #8]
   82e0a:	6022      	str	r2, [r4, #0]
   82e0c:	6122      	str	r2, [r4, #16]
   82e0e:	6161      	str	r1, [r4, #20]
   82e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e14:	4628      	mov	r0, r5
   82e16:	f000 f8f1 	bl	82ffc <__sinit>
   82e1a:	e7ab      	b.n	82d74 <setvbuf+0x18>
   82e1c:	2f00      	cmp	r7, #0
   82e1e:	bf08      	it	eq
   82e20:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   82e24:	4638      	mov	r0, r7
   82e26:	f000 fabd 	bl	833a4 <malloc>
   82e2a:	4680      	mov	r8, r0
   82e2c:	b128      	cbz	r0, 82e3a <setvbuf+0xde>
   82e2e:	89a3      	ldrh	r3, [r4, #12]
   82e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82e34:	b29b      	uxth	r3, r3
   82e36:	81a3      	strh	r3, [r4, #12]
   82e38:	e7b3      	b.n	82da2 <setvbuf+0x46>
   82e3a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82e3e:	f000 fab1 	bl	833a4 <malloc>
   82e42:	4680      	mov	r8, r0
   82e44:	b918      	cbnz	r0, 82e4e <setvbuf+0xf2>
   82e46:	89a3      	ldrh	r3, [r4, #12]
   82e48:	f04f 30ff 	mov.w	r0, #4294967295
   82e4c:	e7d5      	b.n	82dfa <setvbuf+0x9e>
   82e4e:	f44f 6780 	mov.w	r7, #1024	; 0x400
   82e52:	e7ec      	b.n	82e2e <setvbuf+0xd2>
   82e54:	20070588 	.word	0x20070588
   82e58:	00082ff1 	.word	0x00082ff1

00082e5c <register_fini>:
   82e5c:	4b02      	ldr	r3, [pc, #8]	; (82e68 <register_fini+0xc>)
   82e5e:	b113      	cbz	r3, 82e66 <register_fini+0xa>
   82e60:	4802      	ldr	r0, [pc, #8]	; (82e6c <register_fini+0x10>)
   82e62:	f000 b805 	b.w	82e70 <atexit>
   82e66:	4770      	bx	lr
   82e68:	00000000 	.word	0x00000000
   82e6c:	000830f9 	.word	0x000830f9

00082e70 <atexit>:
   82e70:	4601      	mov	r1, r0
   82e72:	2000      	movs	r0, #0
   82e74:	4602      	mov	r2, r0
   82e76:	4603      	mov	r3, r0
   82e78:	f000 bda4 	b.w	839c4 <__register_exitproc>

00082e7c <__sflush_r>:
   82e7c:	898b      	ldrh	r3, [r1, #12]
   82e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e82:	b29a      	uxth	r2, r3
   82e84:	460d      	mov	r5, r1
   82e86:	0711      	lsls	r1, r2, #28
   82e88:	4680      	mov	r8, r0
   82e8a:	d43c      	bmi.n	82f06 <__sflush_r+0x8a>
   82e8c:	686a      	ldr	r2, [r5, #4]
   82e8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82e92:	2a00      	cmp	r2, #0
   82e94:	81ab      	strh	r3, [r5, #12]
   82e96:	dd59      	ble.n	82f4c <__sflush_r+0xd0>
   82e98:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82e9a:	2c00      	cmp	r4, #0
   82e9c:	d04b      	beq.n	82f36 <__sflush_r+0xba>
   82e9e:	b29b      	uxth	r3, r3
   82ea0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82ea4:	2100      	movs	r1, #0
   82ea6:	b292      	uxth	r2, r2
   82ea8:	f8d8 6000 	ldr.w	r6, [r8]
   82eac:	f8c8 1000 	str.w	r1, [r8]
   82eb0:	2a00      	cmp	r2, #0
   82eb2:	d04f      	beq.n	82f54 <__sflush_r+0xd8>
   82eb4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82eb6:	075f      	lsls	r7, r3, #29
   82eb8:	d505      	bpl.n	82ec6 <__sflush_r+0x4a>
   82eba:	6869      	ldr	r1, [r5, #4]
   82ebc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82ebe:	1a52      	subs	r2, r2, r1
   82ec0:	b10b      	cbz	r3, 82ec6 <__sflush_r+0x4a>
   82ec2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82ec4:	1ad2      	subs	r2, r2, r3
   82ec6:	4640      	mov	r0, r8
   82ec8:	69e9      	ldr	r1, [r5, #28]
   82eca:	2300      	movs	r3, #0
   82ecc:	47a0      	blx	r4
   82ece:	1c44      	adds	r4, r0, #1
   82ed0:	d04a      	beq.n	82f68 <__sflush_r+0xec>
   82ed2:	89ab      	ldrh	r3, [r5, #12]
   82ed4:	692a      	ldr	r2, [r5, #16]
   82ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82eda:	b29b      	uxth	r3, r3
   82edc:	2100      	movs	r1, #0
   82ede:	602a      	str	r2, [r5, #0]
   82ee0:	04da      	lsls	r2, r3, #19
   82ee2:	81ab      	strh	r3, [r5, #12]
   82ee4:	6069      	str	r1, [r5, #4]
   82ee6:	d44c      	bmi.n	82f82 <__sflush_r+0x106>
   82ee8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82eea:	f8c8 6000 	str.w	r6, [r8]
   82eee:	b311      	cbz	r1, 82f36 <__sflush_r+0xba>
   82ef0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82ef4:	4299      	cmp	r1, r3
   82ef6:	d002      	beq.n	82efe <__sflush_r+0x82>
   82ef8:	4640      	mov	r0, r8
   82efa:	f000 f963 	bl	831c4 <_free_r>
   82efe:	2000      	movs	r0, #0
   82f00:	6328      	str	r0, [r5, #48]	; 0x30
   82f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82f06:	692e      	ldr	r6, [r5, #16]
   82f08:	b1ae      	cbz	r6, 82f36 <__sflush_r+0xba>
   82f0a:	0791      	lsls	r1, r2, #30
   82f0c:	682c      	ldr	r4, [r5, #0]
   82f0e:	bf0c      	ite	eq
   82f10:	696b      	ldreq	r3, [r5, #20]
   82f12:	2300      	movne	r3, #0
   82f14:	602e      	str	r6, [r5, #0]
   82f16:	1ba4      	subs	r4, r4, r6
   82f18:	60ab      	str	r3, [r5, #8]
   82f1a:	e00a      	b.n	82f32 <__sflush_r+0xb6>
   82f1c:	4632      	mov	r2, r6
   82f1e:	4623      	mov	r3, r4
   82f20:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82f22:	4640      	mov	r0, r8
   82f24:	69e9      	ldr	r1, [r5, #28]
   82f26:	47b8      	blx	r7
   82f28:	2800      	cmp	r0, #0
   82f2a:	ebc0 0404 	rsb	r4, r0, r4
   82f2e:	4406      	add	r6, r0
   82f30:	dd04      	ble.n	82f3c <__sflush_r+0xc0>
   82f32:	2c00      	cmp	r4, #0
   82f34:	dcf2      	bgt.n	82f1c <__sflush_r+0xa0>
   82f36:	2000      	movs	r0, #0
   82f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82f3c:	89ab      	ldrh	r3, [r5, #12]
   82f3e:	f04f 30ff 	mov.w	r0, #4294967295
   82f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82f46:	81ab      	strh	r3, [r5, #12]
   82f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82f4c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82f4e:	2a00      	cmp	r2, #0
   82f50:	dca2      	bgt.n	82e98 <__sflush_r+0x1c>
   82f52:	e7f0      	b.n	82f36 <__sflush_r+0xba>
   82f54:	2301      	movs	r3, #1
   82f56:	4640      	mov	r0, r8
   82f58:	69e9      	ldr	r1, [r5, #28]
   82f5a:	47a0      	blx	r4
   82f5c:	1c43      	adds	r3, r0, #1
   82f5e:	4602      	mov	r2, r0
   82f60:	d01e      	beq.n	82fa0 <__sflush_r+0x124>
   82f62:	89ab      	ldrh	r3, [r5, #12]
   82f64:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82f66:	e7a6      	b.n	82eb6 <__sflush_r+0x3a>
   82f68:	f8d8 3000 	ldr.w	r3, [r8]
   82f6c:	b95b      	cbnz	r3, 82f86 <__sflush_r+0x10a>
   82f6e:	89aa      	ldrh	r2, [r5, #12]
   82f70:	6929      	ldr	r1, [r5, #16]
   82f72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82f76:	b292      	uxth	r2, r2
   82f78:	606b      	str	r3, [r5, #4]
   82f7a:	04d3      	lsls	r3, r2, #19
   82f7c:	81aa      	strh	r2, [r5, #12]
   82f7e:	6029      	str	r1, [r5, #0]
   82f80:	d5b2      	bpl.n	82ee8 <__sflush_r+0x6c>
   82f82:	6528      	str	r0, [r5, #80]	; 0x50
   82f84:	e7b0      	b.n	82ee8 <__sflush_r+0x6c>
   82f86:	2b1d      	cmp	r3, #29
   82f88:	d001      	beq.n	82f8e <__sflush_r+0x112>
   82f8a:	2b16      	cmp	r3, #22
   82f8c:	d113      	bne.n	82fb6 <__sflush_r+0x13a>
   82f8e:	89a9      	ldrh	r1, [r5, #12]
   82f90:	692b      	ldr	r3, [r5, #16]
   82f92:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82f96:	2200      	movs	r2, #0
   82f98:	81a9      	strh	r1, [r5, #12]
   82f9a:	602b      	str	r3, [r5, #0]
   82f9c:	606a      	str	r2, [r5, #4]
   82f9e:	e7a3      	b.n	82ee8 <__sflush_r+0x6c>
   82fa0:	f8d8 3000 	ldr.w	r3, [r8]
   82fa4:	2b00      	cmp	r3, #0
   82fa6:	d0dc      	beq.n	82f62 <__sflush_r+0xe6>
   82fa8:	2b1d      	cmp	r3, #29
   82faa:	d001      	beq.n	82fb0 <__sflush_r+0x134>
   82fac:	2b16      	cmp	r3, #22
   82fae:	d1c5      	bne.n	82f3c <__sflush_r+0xc0>
   82fb0:	f8c8 6000 	str.w	r6, [r8]
   82fb4:	e7bf      	b.n	82f36 <__sflush_r+0xba>
   82fb6:	89ab      	ldrh	r3, [r5, #12]
   82fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82fbc:	81ab      	strh	r3, [r5, #12]
   82fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82fc2:	bf00      	nop

00082fc4 <_fflush_r>:
   82fc4:	b510      	push	{r4, lr}
   82fc6:	4604      	mov	r4, r0
   82fc8:	b082      	sub	sp, #8
   82fca:	b108      	cbz	r0, 82fd0 <_fflush_r+0xc>
   82fcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82fce:	b153      	cbz	r3, 82fe6 <_fflush_r+0x22>
   82fd0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82fd4:	b908      	cbnz	r0, 82fda <_fflush_r+0x16>
   82fd6:	b002      	add	sp, #8
   82fd8:	bd10      	pop	{r4, pc}
   82fda:	4620      	mov	r0, r4
   82fdc:	b002      	add	sp, #8
   82fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82fe2:	f7ff bf4b 	b.w	82e7c <__sflush_r>
   82fe6:	9101      	str	r1, [sp, #4]
   82fe8:	f000 f808 	bl	82ffc <__sinit>
   82fec:	9901      	ldr	r1, [sp, #4]
   82fee:	e7ef      	b.n	82fd0 <_fflush_r+0xc>

00082ff0 <_cleanup_r>:
   82ff0:	4901      	ldr	r1, [pc, #4]	; (82ff8 <_cleanup_r+0x8>)
   82ff2:	f000 b9b3 	b.w	8335c <_fwalk>
   82ff6:	bf00      	nop
   82ff8:	00083b11 	.word	0x00083b11

00082ffc <__sinit>:
   82ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83000:	6b84      	ldr	r4, [r0, #56]	; 0x38
   83002:	b083      	sub	sp, #12
   83004:	4607      	mov	r7, r0
   83006:	2c00      	cmp	r4, #0
   83008:	d165      	bne.n	830d6 <__sinit+0xda>
   8300a:	687d      	ldr	r5, [r7, #4]
   8300c:	4833      	ldr	r0, [pc, #204]	; (830dc <__sinit+0xe0>)
   8300e:	2304      	movs	r3, #4
   83010:	2103      	movs	r1, #3
   83012:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   83016:	63f8      	str	r0, [r7, #60]	; 0x3c
   83018:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8301c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   83020:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   83024:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83028:	81ab      	strh	r3, [r5, #12]
   8302a:	602c      	str	r4, [r5, #0]
   8302c:	606c      	str	r4, [r5, #4]
   8302e:	60ac      	str	r4, [r5, #8]
   83030:	666c      	str	r4, [r5, #100]	; 0x64
   83032:	81ec      	strh	r4, [r5, #14]
   83034:	612c      	str	r4, [r5, #16]
   83036:	616c      	str	r4, [r5, #20]
   83038:	61ac      	str	r4, [r5, #24]
   8303a:	4621      	mov	r1, r4
   8303c:	2208      	movs	r2, #8
   8303e:	f7ff fe3b 	bl	82cb8 <memset>
   83042:	f8df b09c 	ldr.w	fp, [pc, #156]	; 830e0 <__sinit+0xe4>
   83046:	68be      	ldr	r6, [r7, #8]
   83048:	f8df a098 	ldr.w	sl, [pc, #152]	; 830e4 <__sinit+0xe8>
   8304c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 830e8 <__sinit+0xec>
   83050:	f8df 8098 	ldr.w	r8, [pc, #152]	; 830ec <__sinit+0xf0>
   83054:	2301      	movs	r3, #1
   83056:	2209      	movs	r2, #9
   83058:	61ed      	str	r5, [r5, #28]
   8305a:	f8c5 b020 	str.w	fp, [r5, #32]
   8305e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83062:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83066:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8306a:	4621      	mov	r1, r4
   8306c:	81f3      	strh	r3, [r6, #14]
   8306e:	81b2      	strh	r2, [r6, #12]
   83070:	6034      	str	r4, [r6, #0]
   83072:	6074      	str	r4, [r6, #4]
   83074:	60b4      	str	r4, [r6, #8]
   83076:	6674      	str	r4, [r6, #100]	; 0x64
   83078:	6134      	str	r4, [r6, #16]
   8307a:	6174      	str	r4, [r6, #20]
   8307c:	61b4      	str	r4, [r6, #24]
   8307e:	2208      	movs	r2, #8
   83080:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   83084:	9301      	str	r3, [sp, #4]
   83086:	f7ff fe17 	bl	82cb8 <memset>
   8308a:	68fd      	ldr	r5, [r7, #12]
   8308c:	2012      	movs	r0, #18
   8308e:	2202      	movs	r2, #2
   83090:	61f6      	str	r6, [r6, #28]
   83092:	f8c6 b020 	str.w	fp, [r6, #32]
   83096:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8309a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8309e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   830a2:	4621      	mov	r1, r4
   830a4:	81a8      	strh	r0, [r5, #12]
   830a6:	81ea      	strh	r2, [r5, #14]
   830a8:	602c      	str	r4, [r5, #0]
   830aa:	606c      	str	r4, [r5, #4]
   830ac:	60ac      	str	r4, [r5, #8]
   830ae:	666c      	str	r4, [r5, #100]	; 0x64
   830b0:	612c      	str	r4, [r5, #16]
   830b2:	616c      	str	r4, [r5, #20]
   830b4:	61ac      	str	r4, [r5, #24]
   830b6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   830ba:	2208      	movs	r2, #8
   830bc:	f7ff fdfc 	bl	82cb8 <memset>
   830c0:	9b01      	ldr	r3, [sp, #4]
   830c2:	61ed      	str	r5, [r5, #28]
   830c4:	f8c5 b020 	str.w	fp, [r5, #32]
   830c8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   830cc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   830d0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   830d4:	63bb      	str	r3, [r7, #56]	; 0x38
   830d6:	b003      	add	sp, #12
   830d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830dc:	00082ff1 	.word	0x00082ff1
   830e0:	00083919 	.word	0x00083919
   830e4:	0008393d 	.word	0x0008393d
   830e8:	00083975 	.word	0x00083975
   830ec:	00083995 	.word	0x00083995

000830f0 <__sfp_lock_acquire>:
   830f0:	4770      	bx	lr
   830f2:	bf00      	nop

000830f4 <__sfp_lock_release>:
   830f4:	4770      	bx	lr
   830f6:	bf00      	nop

000830f8 <__libc_fini_array>:
   830f8:	b538      	push	{r3, r4, r5, lr}
   830fa:	4d09      	ldr	r5, [pc, #36]	; (83120 <__libc_fini_array+0x28>)
   830fc:	4c09      	ldr	r4, [pc, #36]	; (83124 <__libc_fini_array+0x2c>)
   830fe:	1b64      	subs	r4, r4, r5
   83100:	10a4      	asrs	r4, r4, #2
   83102:	bf18      	it	ne
   83104:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83108:	d005      	beq.n	83116 <__libc_fini_array+0x1e>
   8310a:	3c01      	subs	r4, #1
   8310c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83110:	4798      	blx	r3
   83112:	2c00      	cmp	r4, #0
   83114:	d1f9      	bne.n	8310a <__libc_fini_array+0x12>
   83116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8311a:	f000 bd73 	b.w	83c04 <_fini>
   8311e:	bf00      	nop
   83120:	00083c10 	.word	0x00083c10
   83124:	00083c14 	.word	0x00083c14

00083128 <_malloc_trim_r>:
   83128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8312a:	4d23      	ldr	r5, [pc, #140]	; (831b8 <_malloc_trim_r+0x90>)
   8312c:	460f      	mov	r7, r1
   8312e:	4604      	mov	r4, r0
   83130:	f000 fbdc 	bl	838ec <__malloc_lock>
   83134:	68ab      	ldr	r3, [r5, #8]
   83136:	685e      	ldr	r6, [r3, #4]
   83138:	f026 0603 	bic.w	r6, r6, #3
   8313c:	1bf1      	subs	r1, r6, r7
   8313e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   83142:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83146:	f021 010f 	bic.w	r1, r1, #15
   8314a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8314e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   83152:	db07      	blt.n	83164 <_malloc_trim_r+0x3c>
   83154:	4620      	mov	r0, r4
   83156:	2100      	movs	r1, #0
   83158:	f000 fbcc 	bl	838f4 <_sbrk_r>
   8315c:	68ab      	ldr	r3, [r5, #8]
   8315e:	4433      	add	r3, r6
   83160:	4298      	cmp	r0, r3
   83162:	d004      	beq.n	8316e <_malloc_trim_r+0x46>
   83164:	4620      	mov	r0, r4
   83166:	f000 fbc3 	bl	838f0 <__malloc_unlock>
   8316a:	2000      	movs	r0, #0
   8316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8316e:	4620      	mov	r0, r4
   83170:	4279      	negs	r1, r7
   83172:	f000 fbbf 	bl	838f4 <_sbrk_r>
   83176:	3001      	adds	r0, #1
   83178:	d00d      	beq.n	83196 <_malloc_trim_r+0x6e>
   8317a:	4b10      	ldr	r3, [pc, #64]	; (831bc <_malloc_trim_r+0x94>)
   8317c:	68aa      	ldr	r2, [r5, #8]
   8317e:	6819      	ldr	r1, [r3, #0]
   83180:	1bf6      	subs	r6, r6, r7
   83182:	f046 0601 	orr.w	r6, r6, #1
   83186:	4620      	mov	r0, r4
   83188:	1bc9      	subs	r1, r1, r7
   8318a:	6056      	str	r6, [r2, #4]
   8318c:	6019      	str	r1, [r3, #0]
   8318e:	f000 fbaf 	bl	838f0 <__malloc_unlock>
   83192:	2001      	movs	r0, #1
   83194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83196:	4620      	mov	r0, r4
   83198:	2100      	movs	r1, #0
   8319a:	f000 fbab 	bl	838f4 <_sbrk_r>
   8319e:	68ab      	ldr	r3, [r5, #8]
   831a0:	1ac2      	subs	r2, r0, r3
   831a2:	2a0f      	cmp	r2, #15
   831a4:	ddde      	ble.n	83164 <_malloc_trim_r+0x3c>
   831a6:	4d06      	ldr	r5, [pc, #24]	; (831c0 <_malloc_trim_r+0x98>)
   831a8:	4904      	ldr	r1, [pc, #16]	; (831bc <_malloc_trim_r+0x94>)
   831aa:	682d      	ldr	r5, [r5, #0]
   831ac:	f042 0201 	orr.w	r2, r2, #1
   831b0:	1b40      	subs	r0, r0, r5
   831b2:	605a      	str	r2, [r3, #4]
   831b4:	6008      	str	r0, [r1, #0]
   831b6:	e7d5      	b.n	83164 <_malloc_trim_r+0x3c>
   831b8:	2007058c 	.word	0x2007058c
   831bc:	20070aec 	.word	0x20070aec
   831c0:	20070998 	.word	0x20070998

000831c4 <_free_r>:
   831c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   831c8:	460d      	mov	r5, r1
   831ca:	4606      	mov	r6, r0
   831cc:	2900      	cmp	r1, #0
   831ce:	d055      	beq.n	8327c <_free_r+0xb8>
   831d0:	f000 fb8c 	bl	838ec <__malloc_lock>
   831d4:	f855 1c04 	ldr.w	r1, [r5, #-4]
   831d8:	f8df c170 	ldr.w	ip, [pc, #368]	; 8334c <_free_r+0x188>
   831dc:	f1a5 0408 	sub.w	r4, r5, #8
   831e0:	f021 0301 	bic.w	r3, r1, #1
   831e4:	18e2      	adds	r2, r4, r3
   831e6:	f8dc 0008 	ldr.w	r0, [ip, #8]
   831ea:	6857      	ldr	r7, [r2, #4]
   831ec:	4290      	cmp	r0, r2
   831ee:	f027 0703 	bic.w	r7, r7, #3
   831f2:	d068      	beq.n	832c6 <_free_r+0x102>
   831f4:	f011 0101 	ands.w	r1, r1, #1
   831f8:	6057      	str	r7, [r2, #4]
   831fa:	d032      	beq.n	83262 <_free_r+0x9e>
   831fc:	2100      	movs	r1, #0
   831fe:	19d0      	adds	r0, r2, r7
   83200:	6840      	ldr	r0, [r0, #4]
   83202:	07c0      	lsls	r0, r0, #31
   83204:	d406      	bmi.n	83214 <_free_r+0x50>
   83206:	443b      	add	r3, r7
   83208:	6890      	ldr	r0, [r2, #8]
   8320a:	2900      	cmp	r1, #0
   8320c:	d04d      	beq.n	832aa <_free_r+0xe6>
   8320e:	68d2      	ldr	r2, [r2, #12]
   83210:	60c2      	str	r2, [r0, #12]
   83212:	6090      	str	r0, [r2, #8]
   83214:	f043 0201 	orr.w	r2, r3, #1
   83218:	6062      	str	r2, [r4, #4]
   8321a:	50e3      	str	r3, [r4, r3]
   8321c:	b9e1      	cbnz	r1, 83258 <_free_r+0x94>
   8321e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83222:	d32d      	bcc.n	83280 <_free_r+0xbc>
   83224:	0a5a      	lsrs	r2, r3, #9
   83226:	2a04      	cmp	r2, #4
   83228:	d869      	bhi.n	832fe <_free_r+0x13a>
   8322a:	0998      	lsrs	r0, r3, #6
   8322c:	3038      	adds	r0, #56	; 0x38
   8322e:	0041      	lsls	r1, r0, #1
   83230:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   83234:	f8dc 2008 	ldr.w	r2, [ip, #8]
   83238:	4944      	ldr	r1, [pc, #272]	; (8334c <_free_r+0x188>)
   8323a:	4562      	cmp	r2, ip
   8323c:	d065      	beq.n	8330a <_free_r+0x146>
   8323e:	6851      	ldr	r1, [r2, #4]
   83240:	f021 0103 	bic.w	r1, r1, #3
   83244:	428b      	cmp	r3, r1
   83246:	d202      	bcs.n	8324e <_free_r+0x8a>
   83248:	6892      	ldr	r2, [r2, #8]
   8324a:	4594      	cmp	ip, r2
   8324c:	d1f7      	bne.n	8323e <_free_r+0x7a>
   8324e:	68d3      	ldr	r3, [r2, #12]
   83250:	60e3      	str	r3, [r4, #12]
   83252:	60a2      	str	r2, [r4, #8]
   83254:	609c      	str	r4, [r3, #8]
   83256:	60d4      	str	r4, [r2, #12]
   83258:	4630      	mov	r0, r6
   8325a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8325e:	f000 bb47 	b.w	838f0 <__malloc_unlock>
   83262:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83266:	f10c 0808 	add.w	r8, ip, #8
   8326a:	1b64      	subs	r4, r4, r5
   8326c:	68a0      	ldr	r0, [r4, #8]
   8326e:	442b      	add	r3, r5
   83270:	4540      	cmp	r0, r8
   83272:	d042      	beq.n	832fa <_free_r+0x136>
   83274:	68e5      	ldr	r5, [r4, #12]
   83276:	60c5      	str	r5, [r0, #12]
   83278:	60a8      	str	r0, [r5, #8]
   8327a:	e7c0      	b.n	831fe <_free_r+0x3a>
   8327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83280:	08db      	lsrs	r3, r3, #3
   83282:	109a      	asrs	r2, r3, #2
   83284:	2001      	movs	r0, #1
   83286:	4090      	lsls	r0, r2
   83288:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8328c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   83290:	689a      	ldr	r2, [r3, #8]
   83292:	4301      	orrs	r1, r0
   83294:	60a2      	str	r2, [r4, #8]
   83296:	60e3      	str	r3, [r4, #12]
   83298:	f8cc 1004 	str.w	r1, [ip, #4]
   8329c:	4630      	mov	r0, r6
   8329e:	609c      	str	r4, [r3, #8]
   832a0:	60d4      	str	r4, [r2, #12]
   832a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   832a6:	f000 bb23 	b.w	838f0 <__malloc_unlock>
   832aa:	4d29      	ldr	r5, [pc, #164]	; (83350 <_free_r+0x18c>)
   832ac:	42a8      	cmp	r0, r5
   832ae:	d1ae      	bne.n	8320e <_free_r+0x4a>
   832b0:	f043 0201 	orr.w	r2, r3, #1
   832b4:	f8cc 4014 	str.w	r4, [ip, #20]
   832b8:	f8cc 4010 	str.w	r4, [ip, #16]
   832bc:	60e0      	str	r0, [r4, #12]
   832be:	60a0      	str	r0, [r4, #8]
   832c0:	6062      	str	r2, [r4, #4]
   832c2:	50e3      	str	r3, [r4, r3]
   832c4:	e7c8      	b.n	83258 <_free_r+0x94>
   832c6:	441f      	add	r7, r3
   832c8:	07cb      	lsls	r3, r1, #31
   832ca:	d407      	bmi.n	832dc <_free_r+0x118>
   832cc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   832d0:	1a64      	subs	r4, r4, r1
   832d2:	68e3      	ldr	r3, [r4, #12]
   832d4:	68a2      	ldr	r2, [r4, #8]
   832d6:	440f      	add	r7, r1
   832d8:	60d3      	str	r3, [r2, #12]
   832da:	609a      	str	r2, [r3, #8]
   832dc:	4b1d      	ldr	r3, [pc, #116]	; (83354 <_free_r+0x190>)
   832de:	f047 0201 	orr.w	r2, r7, #1
   832e2:	681b      	ldr	r3, [r3, #0]
   832e4:	6062      	str	r2, [r4, #4]
   832e6:	429f      	cmp	r7, r3
   832e8:	f8cc 4008 	str.w	r4, [ip, #8]
   832ec:	d3b4      	bcc.n	83258 <_free_r+0x94>
   832ee:	4b1a      	ldr	r3, [pc, #104]	; (83358 <_free_r+0x194>)
   832f0:	4630      	mov	r0, r6
   832f2:	6819      	ldr	r1, [r3, #0]
   832f4:	f7ff ff18 	bl	83128 <_malloc_trim_r>
   832f8:	e7ae      	b.n	83258 <_free_r+0x94>
   832fa:	2101      	movs	r1, #1
   832fc:	e77f      	b.n	831fe <_free_r+0x3a>
   832fe:	2a14      	cmp	r2, #20
   83300:	d80b      	bhi.n	8331a <_free_r+0x156>
   83302:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   83306:	0041      	lsls	r1, r0, #1
   83308:	e792      	b.n	83230 <_free_r+0x6c>
   8330a:	1080      	asrs	r0, r0, #2
   8330c:	2501      	movs	r5, #1
   8330e:	4085      	lsls	r5, r0
   83310:	6848      	ldr	r0, [r1, #4]
   83312:	4613      	mov	r3, r2
   83314:	4328      	orrs	r0, r5
   83316:	6048      	str	r0, [r1, #4]
   83318:	e79a      	b.n	83250 <_free_r+0x8c>
   8331a:	2a54      	cmp	r2, #84	; 0x54
   8331c:	d803      	bhi.n	83326 <_free_r+0x162>
   8331e:	0b18      	lsrs	r0, r3, #12
   83320:	306e      	adds	r0, #110	; 0x6e
   83322:	0041      	lsls	r1, r0, #1
   83324:	e784      	b.n	83230 <_free_r+0x6c>
   83326:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8332a:	d803      	bhi.n	83334 <_free_r+0x170>
   8332c:	0bd8      	lsrs	r0, r3, #15
   8332e:	3077      	adds	r0, #119	; 0x77
   83330:	0041      	lsls	r1, r0, #1
   83332:	e77d      	b.n	83230 <_free_r+0x6c>
   83334:	f240 5154 	movw	r1, #1364	; 0x554
   83338:	428a      	cmp	r2, r1
   8333a:	d803      	bhi.n	83344 <_free_r+0x180>
   8333c:	0c98      	lsrs	r0, r3, #18
   8333e:	307c      	adds	r0, #124	; 0x7c
   83340:	0041      	lsls	r1, r0, #1
   83342:	e775      	b.n	83230 <_free_r+0x6c>
   83344:	21fc      	movs	r1, #252	; 0xfc
   83346:	207e      	movs	r0, #126	; 0x7e
   83348:	e772      	b.n	83230 <_free_r+0x6c>
   8334a:	bf00      	nop
   8334c:	2007058c 	.word	0x2007058c
   83350:	20070594 	.word	0x20070594
   83354:	20070994 	.word	0x20070994
   83358:	20070ae8 	.word	0x20070ae8

0008335c <_fwalk>:
   8335c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83360:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   83364:	4688      	mov	r8, r1
   83366:	d019      	beq.n	8339c <_fwalk+0x40>
   83368:	2600      	movs	r6, #0
   8336a:	687d      	ldr	r5, [r7, #4]
   8336c:	68bc      	ldr	r4, [r7, #8]
   8336e:	3d01      	subs	r5, #1
   83370:	d40e      	bmi.n	83390 <_fwalk+0x34>
   83372:	89a3      	ldrh	r3, [r4, #12]
   83374:	3d01      	subs	r5, #1
   83376:	2b01      	cmp	r3, #1
   83378:	d906      	bls.n	83388 <_fwalk+0x2c>
   8337a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8337e:	4620      	mov	r0, r4
   83380:	3301      	adds	r3, #1
   83382:	d001      	beq.n	83388 <_fwalk+0x2c>
   83384:	47c0      	blx	r8
   83386:	4306      	orrs	r6, r0
   83388:	1c6b      	adds	r3, r5, #1
   8338a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8338e:	d1f0      	bne.n	83372 <_fwalk+0x16>
   83390:	683f      	ldr	r7, [r7, #0]
   83392:	2f00      	cmp	r7, #0
   83394:	d1e9      	bne.n	8336a <_fwalk+0xe>
   83396:	4630      	mov	r0, r6
   83398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8339c:	463e      	mov	r6, r7
   8339e:	4630      	mov	r0, r6
   833a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000833a4 <malloc>:
   833a4:	4b02      	ldr	r3, [pc, #8]	; (833b0 <malloc+0xc>)
   833a6:	4601      	mov	r1, r0
   833a8:	6818      	ldr	r0, [r3, #0]
   833aa:	f000 b803 	b.w	833b4 <_malloc_r>
   833ae:	bf00      	nop
   833b0:	20070588 	.word	0x20070588

000833b4 <_malloc_r>:
   833b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   833b8:	f101 050b 	add.w	r5, r1, #11
   833bc:	2d16      	cmp	r5, #22
   833be:	b083      	sub	sp, #12
   833c0:	4606      	mov	r6, r0
   833c2:	d927      	bls.n	83414 <_malloc_r+0x60>
   833c4:	f035 0507 	bics.w	r5, r5, #7
   833c8:	d427      	bmi.n	8341a <_malloc_r+0x66>
   833ca:	42a9      	cmp	r1, r5
   833cc:	d825      	bhi.n	8341a <_malloc_r+0x66>
   833ce:	4630      	mov	r0, r6
   833d0:	f000 fa8c 	bl	838ec <__malloc_lock>
   833d4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   833d8:	d226      	bcs.n	83428 <_malloc_r+0x74>
   833da:	4fc1      	ldr	r7, [pc, #772]	; (836e0 <_malloc_r+0x32c>)
   833dc:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   833e0:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   833e4:	68dc      	ldr	r4, [r3, #12]
   833e6:	429c      	cmp	r4, r3
   833e8:	f000 81d2 	beq.w	83790 <_malloc_r+0x3dc>
   833ec:	6863      	ldr	r3, [r4, #4]
   833ee:	68e2      	ldr	r2, [r4, #12]
   833f0:	f023 0303 	bic.w	r3, r3, #3
   833f4:	4423      	add	r3, r4
   833f6:	6858      	ldr	r0, [r3, #4]
   833f8:	68a1      	ldr	r1, [r4, #8]
   833fa:	f040 0501 	orr.w	r5, r0, #1
   833fe:	60ca      	str	r2, [r1, #12]
   83400:	4630      	mov	r0, r6
   83402:	6091      	str	r1, [r2, #8]
   83404:	605d      	str	r5, [r3, #4]
   83406:	f000 fa73 	bl	838f0 <__malloc_unlock>
   8340a:	3408      	adds	r4, #8
   8340c:	4620      	mov	r0, r4
   8340e:	b003      	add	sp, #12
   83410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83414:	2510      	movs	r5, #16
   83416:	42a9      	cmp	r1, r5
   83418:	d9d9      	bls.n	833ce <_malloc_r+0x1a>
   8341a:	2400      	movs	r4, #0
   8341c:	230c      	movs	r3, #12
   8341e:	4620      	mov	r0, r4
   83420:	6033      	str	r3, [r6, #0]
   83422:	b003      	add	sp, #12
   83424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83428:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   8342c:	f000 8089 	beq.w	83542 <_malloc_r+0x18e>
   83430:	f1bc 0f04 	cmp.w	ip, #4
   83434:	f200 8160 	bhi.w	836f8 <_malloc_r+0x344>
   83438:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   8343c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   83440:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83444:	4fa6      	ldr	r7, [pc, #664]	; (836e0 <_malloc_r+0x32c>)
   83446:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8344a:	68cc      	ldr	r4, [r1, #12]
   8344c:	42a1      	cmp	r1, r4
   8344e:	d105      	bne.n	8345c <_malloc_r+0xa8>
   83450:	e00c      	b.n	8346c <_malloc_r+0xb8>
   83452:	2b00      	cmp	r3, #0
   83454:	da79      	bge.n	8354a <_malloc_r+0x196>
   83456:	68e4      	ldr	r4, [r4, #12]
   83458:	42a1      	cmp	r1, r4
   8345a:	d007      	beq.n	8346c <_malloc_r+0xb8>
   8345c:	6862      	ldr	r2, [r4, #4]
   8345e:	f022 0203 	bic.w	r2, r2, #3
   83462:	1b53      	subs	r3, r2, r5
   83464:	2b0f      	cmp	r3, #15
   83466:	ddf4      	ble.n	83452 <_malloc_r+0x9e>
   83468:	f10c 3cff 	add.w	ip, ip, #4294967295
   8346c:	f10c 0c01 	add.w	ip, ip, #1
   83470:	4b9b      	ldr	r3, [pc, #620]	; (836e0 <_malloc_r+0x32c>)
   83472:	693c      	ldr	r4, [r7, #16]
   83474:	f103 0e08 	add.w	lr, r3, #8
   83478:	4574      	cmp	r4, lr
   8347a:	f000 817e 	beq.w	8377a <_malloc_r+0x3c6>
   8347e:	6861      	ldr	r1, [r4, #4]
   83480:	f021 0103 	bic.w	r1, r1, #3
   83484:	1b4a      	subs	r2, r1, r5
   83486:	2a0f      	cmp	r2, #15
   83488:	f300 8164 	bgt.w	83754 <_malloc_r+0x3a0>
   8348c:	2a00      	cmp	r2, #0
   8348e:	f8c3 e014 	str.w	lr, [r3, #20]
   83492:	f8c3 e010 	str.w	lr, [r3, #16]
   83496:	da69      	bge.n	8356c <_malloc_r+0x1b8>
   83498:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8349c:	f080 813a 	bcs.w	83714 <_malloc_r+0x360>
   834a0:	08c9      	lsrs	r1, r1, #3
   834a2:	108a      	asrs	r2, r1, #2
   834a4:	f04f 0801 	mov.w	r8, #1
   834a8:	fa08 f802 	lsl.w	r8, r8, r2
   834ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   834b0:	685a      	ldr	r2, [r3, #4]
   834b2:	6888      	ldr	r0, [r1, #8]
   834b4:	ea48 0202 	orr.w	r2, r8, r2
   834b8:	60a0      	str	r0, [r4, #8]
   834ba:	60e1      	str	r1, [r4, #12]
   834bc:	605a      	str	r2, [r3, #4]
   834be:	608c      	str	r4, [r1, #8]
   834c0:	60c4      	str	r4, [r0, #12]
   834c2:	ea4f 03ac 	mov.w	r3, ip, asr #2
   834c6:	2001      	movs	r0, #1
   834c8:	4098      	lsls	r0, r3
   834ca:	4290      	cmp	r0, r2
   834cc:	d85b      	bhi.n	83586 <_malloc_r+0x1d2>
   834ce:	4202      	tst	r2, r0
   834d0:	d106      	bne.n	834e0 <_malloc_r+0x12c>
   834d2:	f02c 0c03 	bic.w	ip, ip, #3
   834d6:	0040      	lsls	r0, r0, #1
   834d8:	4202      	tst	r2, r0
   834da:	f10c 0c04 	add.w	ip, ip, #4
   834de:	d0fa      	beq.n	834d6 <_malloc_r+0x122>
   834e0:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   834e4:	4644      	mov	r4, r8
   834e6:	46e1      	mov	r9, ip
   834e8:	68e3      	ldr	r3, [r4, #12]
   834ea:	429c      	cmp	r4, r3
   834ec:	d107      	bne.n	834fe <_malloc_r+0x14a>
   834ee:	e146      	b.n	8377e <_malloc_r+0x3ca>
   834f0:	2a00      	cmp	r2, #0
   834f2:	f280 8157 	bge.w	837a4 <_malloc_r+0x3f0>
   834f6:	68db      	ldr	r3, [r3, #12]
   834f8:	429c      	cmp	r4, r3
   834fa:	f000 8140 	beq.w	8377e <_malloc_r+0x3ca>
   834fe:	6859      	ldr	r1, [r3, #4]
   83500:	f021 0103 	bic.w	r1, r1, #3
   83504:	1b4a      	subs	r2, r1, r5
   83506:	2a0f      	cmp	r2, #15
   83508:	ddf2      	ble.n	834f0 <_malloc_r+0x13c>
   8350a:	461c      	mov	r4, r3
   8350c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   83510:	68d9      	ldr	r1, [r3, #12]
   83512:	f045 0901 	orr.w	r9, r5, #1
   83516:	f042 0801 	orr.w	r8, r2, #1
   8351a:	441d      	add	r5, r3
   8351c:	f8c3 9004 	str.w	r9, [r3, #4]
   83520:	4630      	mov	r0, r6
   83522:	f8cc 100c 	str.w	r1, [ip, #12]
   83526:	f8c1 c008 	str.w	ip, [r1, #8]
   8352a:	617d      	str	r5, [r7, #20]
   8352c:	613d      	str	r5, [r7, #16]
   8352e:	f8c5 e00c 	str.w	lr, [r5, #12]
   83532:	f8c5 e008 	str.w	lr, [r5, #8]
   83536:	f8c5 8004 	str.w	r8, [r5, #4]
   8353a:	50aa      	str	r2, [r5, r2]
   8353c:	f000 f9d8 	bl	838f0 <__malloc_unlock>
   83540:	e764      	b.n	8340c <_malloc_r+0x58>
   83542:	217e      	movs	r1, #126	; 0x7e
   83544:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   83548:	e77c      	b.n	83444 <_malloc_r+0x90>
   8354a:	4422      	add	r2, r4
   8354c:	6850      	ldr	r0, [r2, #4]
   8354e:	68e3      	ldr	r3, [r4, #12]
   83550:	68a1      	ldr	r1, [r4, #8]
   83552:	f040 0501 	orr.w	r5, r0, #1
   83556:	60cb      	str	r3, [r1, #12]
   83558:	4630      	mov	r0, r6
   8355a:	6099      	str	r1, [r3, #8]
   8355c:	6055      	str	r5, [r2, #4]
   8355e:	f000 f9c7 	bl	838f0 <__malloc_unlock>
   83562:	3408      	adds	r4, #8
   83564:	4620      	mov	r0, r4
   83566:	b003      	add	sp, #12
   83568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8356c:	4421      	add	r1, r4
   8356e:	684b      	ldr	r3, [r1, #4]
   83570:	4630      	mov	r0, r6
   83572:	f043 0301 	orr.w	r3, r3, #1
   83576:	604b      	str	r3, [r1, #4]
   83578:	f000 f9ba 	bl	838f0 <__malloc_unlock>
   8357c:	3408      	adds	r4, #8
   8357e:	4620      	mov	r0, r4
   83580:	b003      	add	sp, #12
   83582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83586:	68bc      	ldr	r4, [r7, #8]
   83588:	6863      	ldr	r3, [r4, #4]
   8358a:	f023 0903 	bic.w	r9, r3, #3
   8358e:	45a9      	cmp	r9, r5
   83590:	d304      	bcc.n	8359c <_malloc_r+0x1e8>
   83592:	ebc5 0309 	rsb	r3, r5, r9
   83596:	2b0f      	cmp	r3, #15
   83598:	f300 8091 	bgt.w	836be <_malloc_r+0x30a>
   8359c:	4b51      	ldr	r3, [pc, #324]	; (836e4 <_malloc_r+0x330>)
   8359e:	4a52      	ldr	r2, [pc, #328]	; (836e8 <_malloc_r+0x334>)
   835a0:	6819      	ldr	r1, [r3, #0]
   835a2:	6813      	ldr	r3, [r2, #0]
   835a4:	eb05 0a01 	add.w	sl, r5, r1
   835a8:	3301      	adds	r3, #1
   835aa:	eb04 0b09 	add.w	fp, r4, r9
   835ae:	f000 8161 	beq.w	83874 <_malloc_r+0x4c0>
   835b2:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   835b6:	f10a 0a0f 	add.w	sl, sl, #15
   835ba:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   835be:	f02a 0a0f 	bic.w	sl, sl, #15
   835c2:	4630      	mov	r0, r6
   835c4:	4651      	mov	r1, sl
   835c6:	9201      	str	r2, [sp, #4]
   835c8:	f000 f994 	bl	838f4 <_sbrk_r>
   835cc:	f1b0 3fff 	cmp.w	r0, #4294967295
   835d0:	4680      	mov	r8, r0
   835d2:	9a01      	ldr	r2, [sp, #4]
   835d4:	f000 8101 	beq.w	837da <_malloc_r+0x426>
   835d8:	4583      	cmp	fp, r0
   835da:	f200 80fb 	bhi.w	837d4 <_malloc_r+0x420>
   835de:	f8df c114 	ldr.w	ip, [pc, #276]	; 836f4 <_malloc_r+0x340>
   835e2:	45c3      	cmp	fp, r8
   835e4:	f8dc 3000 	ldr.w	r3, [ip]
   835e8:	4453      	add	r3, sl
   835ea:	f8cc 3000 	str.w	r3, [ip]
   835ee:	f000 814a 	beq.w	83886 <_malloc_r+0x4d2>
   835f2:	6812      	ldr	r2, [r2, #0]
   835f4:	493c      	ldr	r1, [pc, #240]	; (836e8 <_malloc_r+0x334>)
   835f6:	3201      	adds	r2, #1
   835f8:	bf1b      	ittet	ne
   835fa:	ebcb 0b08 	rsbne	fp, fp, r8
   835fe:	445b      	addne	r3, fp
   83600:	f8c1 8000 	streq.w	r8, [r1]
   83604:	f8cc 3000 	strne.w	r3, [ip]
   83608:	f018 0307 	ands.w	r3, r8, #7
   8360c:	f000 8114 	beq.w	83838 <_malloc_r+0x484>
   83610:	f1c3 0208 	rsb	r2, r3, #8
   83614:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   83618:	4490      	add	r8, r2
   8361a:	3308      	adds	r3, #8
   8361c:	44c2      	add	sl, r8
   8361e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   83622:	ebca 0a03 	rsb	sl, sl, r3
   83626:	4651      	mov	r1, sl
   83628:	4630      	mov	r0, r6
   8362a:	f8cd c004 	str.w	ip, [sp, #4]
   8362e:	f000 f961 	bl	838f4 <_sbrk_r>
   83632:	1c43      	adds	r3, r0, #1
   83634:	f8dd c004 	ldr.w	ip, [sp, #4]
   83638:	f000 8135 	beq.w	838a6 <_malloc_r+0x4f2>
   8363c:	ebc8 0200 	rsb	r2, r8, r0
   83640:	4452      	add	r2, sl
   83642:	f042 0201 	orr.w	r2, r2, #1
   83646:	f8dc 3000 	ldr.w	r3, [ip]
   8364a:	42bc      	cmp	r4, r7
   8364c:	4453      	add	r3, sl
   8364e:	f8c7 8008 	str.w	r8, [r7, #8]
   83652:	f8cc 3000 	str.w	r3, [ip]
   83656:	f8c8 2004 	str.w	r2, [r8, #4]
   8365a:	f8df a098 	ldr.w	sl, [pc, #152]	; 836f4 <_malloc_r+0x340>
   8365e:	d015      	beq.n	8368c <_malloc_r+0x2d8>
   83660:	f1b9 0f0f 	cmp.w	r9, #15
   83664:	f240 80eb 	bls.w	8383e <_malloc_r+0x48a>
   83668:	6861      	ldr	r1, [r4, #4]
   8366a:	f1a9 020c 	sub.w	r2, r9, #12
   8366e:	f022 0207 	bic.w	r2, r2, #7
   83672:	f001 0101 	and.w	r1, r1, #1
   83676:	ea42 0e01 	orr.w	lr, r2, r1
   8367a:	2005      	movs	r0, #5
   8367c:	18a1      	adds	r1, r4, r2
   8367e:	2a0f      	cmp	r2, #15
   83680:	f8c4 e004 	str.w	lr, [r4, #4]
   83684:	6048      	str	r0, [r1, #4]
   83686:	6088      	str	r0, [r1, #8]
   83688:	f200 8111 	bhi.w	838ae <_malloc_r+0x4fa>
   8368c:	4a17      	ldr	r2, [pc, #92]	; (836ec <_malloc_r+0x338>)
   8368e:	68bc      	ldr	r4, [r7, #8]
   83690:	6811      	ldr	r1, [r2, #0]
   83692:	428b      	cmp	r3, r1
   83694:	bf88      	it	hi
   83696:	6013      	strhi	r3, [r2, #0]
   83698:	4a15      	ldr	r2, [pc, #84]	; (836f0 <_malloc_r+0x33c>)
   8369a:	6811      	ldr	r1, [r2, #0]
   8369c:	428b      	cmp	r3, r1
   8369e:	bf88      	it	hi
   836a0:	6013      	strhi	r3, [r2, #0]
   836a2:	6862      	ldr	r2, [r4, #4]
   836a4:	f022 0203 	bic.w	r2, r2, #3
   836a8:	4295      	cmp	r5, r2
   836aa:	ebc5 0302 	rsb	r3, r5, r2
   836ae:	d801      	bhi.n	836b4 <_malloc_r+0x300>
   836b0:	2b0f      	cmp	r3, #15
   836b2:	dc04      	bgt.n	836be <_malloc_r+0x30a>
   836b4:	4630      	mov	r0, r6
   836b6:	f000 f91b 	bl	838f0 <__malloc_unlock>
   836ba:	2400      	movs	r4, #0
   836bc:	e6a6      	b.n	8340c <_malloc_r+0x58>
   836be:	f045 0201 	orr.w	r2, r5, #1
   836c2:	f043 0301 	orr.w	r3, r3, #1
   836c6:	4425      	add	r5, r4
   836c8:	6062      	str	r2, [r4, #4]
   836ca:	4630      	mov	r0, r6
   836cc:	60bd      	str	r5, [r7, #8]
   836ce:	606b      	str	r3, [r5, #4]
   836d0:	f000 f90e 	bl	838f0 <__malloc_unlock>
   836d4:	3408      	adds	r4, #8
   836d6:	4620      	mov	r0, r4
   836d8:	b003      	add	sp, #12
   836da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   836de:	bf00      	nop
   836e0:	2007058c 	.word	0x2007058c
   836e4:	20070ae8 	.word	0x20070ae8
   836e8:	20070998 	.word	0x20070998
   836ec:	20070ae4 	.word	0x20070ae4
   836f0:	20070ae0 	.word	0x20070ae0
   836f4:	20070aec 	.word	0x20070aec
   836f8:	f1bc 0f14 	cmp.w	ip, #20
   836fc:	d961      	bls.n	837c2 <_malloc_r+0x40e>
   836fe:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   83702:	f200 808f 	bhi.w	83824 <_malloc_r+0x470>
   83706:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8370a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8370e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83712:	e697      	b.n	83444 <_malloc_r+0x90>
   83714:	0a4b      	lsrs	r3, r1, #9
   83716:	2b04      	cmp	r3, #4
   83718:	d958      	bls.n	837cc <_malloc_r+0x418>
   8371a:	2b14      	cmp	r3, #20
   8371c:	f200 80ad 	bhi.w	8387a <_malloc_r+0x4c6>
   83720:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   83724:	0050      	lsls	r0, r2, #1
   83726:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8372a:	6883      	ldr	r3, [r0, #8]
   8372c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 838e8 <_malloc_r+0x534>
   83730:	4283      	cmp	r3, r0
   83732:	f000 808a 	beq.w	8384a <_malloc_r+0x496>
   83736:	685a      	ldr	r2, [r3, #4]
   83738:	f022 0203 	bic.w	r2, r2, #3
   8373c:	4291      	cmp	r1, r2
   8373e:	d202      	bcs.n	83746 <_malloc_r+0x392>
   83740:	689b      	ldr	r3, [r3, #8]
   83742:	4298      	cmp	r0, r3
   83744:	d1f7      	bne.n	83736 <_malloc_r+0x382>
   83746:	68d9      	ldr	r1, [r3, #12]
   83748:	687a      	ldr	r2, [r7, #4]
   8374a:	60e1      	str	r1, [r4, #12]
   8374c:	60a3      	str	r3, [r4, #8]
   8374e:	608c      	str	r4, [r1, #8]
   83750:	60dc      	str	r4, [r3, #12]
   83752:	e6b6      	b.n	834c2 <_malloc_r+0x10e>
   83754:	f045 0701 	orr.w	r7, r5, #1
   83758:	f042 0101 	orr.w	r1, r2, #1
   8375c:	4425      	add	r5, r4
   8375e:	6067      	str	r7, [r4, #4]
   83760:	4630      	mov	r0, r6
   83762:	615d      	str	r5, [r3, #20]
   83764:	611d      	str	r5, [r3, #16]
   83766:	f8c5 e00c 	str.w	lr, [r5, #12]
   8376a:	f8c5 e008 	str.w	lr, [r5, #8]
   8376e:	6069      	str	r1, [r5, #4]
   83770:	50aa      	str	r2, [r5, r2]
   83772:	3408      	adds	r4, #8
   83774:	f000 f8bc 	bl	838f0 <__malloc_unlock>
   83778:	e648      	b.n	8340c <_malloc_r+0x58>
   8377a:	685a      	ldr	r2, [r3, #4]
   8377c:	e6a1      	b.n	834c2 <_malloc_r+0x10e>
   8377e:	f109 0901 	add.w	r9, r9, #1
   83782:	f019 0f03 	tst.w	r9, #3
   83786:	f104 0408 	add.w	r4, r4, #8
   8378a:	f47f aead 	bne.w	834e8 <_malloc_r+0x134>
   8378e:	e02d      	b.n	837ec <_malloc_r+0x438>
   83790:	f104 0308 	add.w	r3, r4, #8
   83794:	6964      	ldr	r4, [r4, #20]
   83796:	42a3      	cmp	r3, r4
   83798:	bf08      	it	eq
   8379a:	f10c 0c02 	addeq.w	ip, ip, #2
   8379e:	f43f ae67 	beq.w	83470 <_malloc_r+0xbc>
   837a2:	e623      	b.n	833ec <_malloc_r+0x38>
   837a4:	4419      	add	r1, r3
   837a6:	6848      	ldr	r0, [r1, #4]
   837a8:	461c      	mov	r4, r3
   837aa:	f854 2f08 	ldr.w	r2, [r4, #8]!
   837ae:	68db      	ldr	r3, [r3, #12]
   837b0:	f040 0501 	orr.w	r5, r0, #1
   837b4:	604d      	str	r5, [r1, #4]
   837b6:	4630      	mov	r0, r6
   837b8:	60d3      	str	r3, [r2, #12]
   837ba:	609a      	str	r2, [r3, #8]
   837bc:	f000 f898 	bl	838f0 <__malloc_unlock>
   837c0:	e624      	b.n	8340c <_malloc_r+0x58>
   837c2:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   837c6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   837ca:	e63b      	b.n	83444 <_malloc_r+0x90>
   837cc:	098a      	lsrs	r2, r1, #6
   837ce:	3238      	adds	r2, #56	; 0x38
   837d0:	0050      	lsls	r0, r2, #1
   837d2:	e7a8      	b.n	83726 <_malloc_r+0x372>
   837d4:	42bc      	cmp	r4, r7
   837d6:	f43f af02 	beq.w	835de <_malloc_r+0x22a>
   837da:	68bc      	ldr	r4, [r7, #8]
   837dc:	6862      	ldr	r2, [r4, #4]
   837de:	f022 0203 	bic.w	r2, r2, #3
   837e2:	e761      	b.n	836a8 <_malloc_r+0x2f4>
   837e4:	f8d8 8000 	ldr.w	r8, [r8]
   837e8:	4598      	cmp	r8, r3
   837ea:	d17a      	bne.n	838e2 <_malloc_r+0x52e>
   837ec:	f01c 0f03 	tst.w	ip, #3
   837f0:	f1a8 0308 	sub.w	r3, r8, #8
   837f4:	f10c 3cff 	add.w	ip, ip, #4294967295
   837f8:	d1f4      	bne.n	837e4 <_malloc_r+0x430>
   837fa:	687b      	ldr	r3, [r7, #4]
   837fc:	ea23 0300 	bic.w	r3, r3, r0
   83800:	607b      	str	r3, [r7, #4]
   83802:	0040      	lsls	r0, r0, #1
   83804:	4298      	cmp	r0, r3
   83806:	f63f aebe 	bhi.w	83586 <_malloc_r+0x1d2>
   8380a:	2800      	cmp	r0, #0
   8380c:	f43f aebb 	beq.w	83586 <_malloc_r+0x1d2>
   83810:	4203      	tst	r3, r0
   83812:	46cc      	mov	ip, r9
   83814:	f47f ae64 	bne.w	834e0 <_malloc_r+0x12c>
   83818:	0040      	lsls	r0, r0, #1
   8381a:	4203      	tst	r3, r0
   8381c:	f10c 0c04 	add.w	ip, ip, #4
   83820:	d0fa      	beq.n	83818 <_malloc_r+0x464>
   83822:	e65d      	b.n	834e0 <_malloc_r+0x12c>
   83824:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83828:	d819      	bhi.n	8385e <_malloc_r+0x4aa>
   8382a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8382e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   83832:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83836:	e605      	b.n	83444 <_malloc_r+0x90>
   83838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8383c:	e6ee      	b.n	8361c <_malloc_r+0x268>
   8383e:	2301      	movs	r3, #1
   83840:	f8c8 3004 	str.w	r3, [r8, #4]
   83844:	4644      	mov	r4, r8
   83846:	2200      	movs	r2, #0
   83848:	e72e      	b.n	836a8 <_malloc_r+0x2f4>
   8384a:	1092      	asrs	r2, r2, #2
   8384c:	2001      	movs	r0, #1
   8384e:	4090      	lsls	r0, r2
   83850:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83854:	4619      	mov	r1, r3
   83856:	4302      	orrs	r2, r0
   83858:	f8c8 2004 	str.w	r2, [r8, #4]
   8385c:	e775      	b.n	8374a <_malloc_r+0x396>
   8385e:	f240 5354 	movw	r3, #1364	; 0x554
   83862:	459c      	cmp	ip, r3
   83864:	d81b      	bhi.n	8389e <_malloc_r+0x4ea>
   83866:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   8386a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8386e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83872:	e5e7      	b.n	83444 <_malloc_r+0x90>
   83874:	f10a 0a10 	add.w	sl, sl, #16
   83878:	e6a3      	b.n	835c2 <_malloc_r+0x20e>
   8387a:	2b54      	cmp	r3, #84	; 0x54
   8387c:	d81f      	bhi.n	838be <_malloc_r+0x50a>
   8387e:	0b0a      	lsrs	r2, r1, #12
   83880:	326e      	adds	r2, #110	; 0x6e
   83882:	0050      	lsls	r0, r2, #1
   83884:	e74f      	b.n	83726 <_malloc_r+0x372>
   83886:	f3cb 010b 	ubfx	r1, fp, #0, #12
   8388a:	2900      	cmp	r1, #0
   8388c:	f47f aeb1 	bne.w	835f2 <_malloc_r+0x23e>
   83890:	eb0a 0109 	add.w	r1, sl, r9
   83894:	68ba      	ldr	r2, [r7, #8]
   83896:	f041 0101 	orr.w	r1, r1, #1
   8389a:	6051      	str	r1, [r2, #4]
   8389c:	e6f6      	b.n	8368c <_malloc_r+0x2d8>
   8389e:	21fc      	movs	r1, #252	; 0xfc
   838a0:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   838a4:	e5ce      	b.n	83444 <_malloc_r+0x90>
   838a6:	2201      	movs	r2, #1
   838a8:	f04f 0a00 	mov.w	sl, #0
   838ac:	e6cb      	b.n	83646 <_malloc_r+0x292>
   838ae:	f104 0108 	add.w	r1, r4, #8
   838b2:	4630      	mov	r0, r6
   838b4:	f7ff fc86 	bl	831c4 <_free_r>
   838b8:	f8da 3000 	ldr.w	r3, [sl]
   838bc:	e6e6      	b.n	8368c <_malloc_r+0x2d8>
   838be:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   838c2:	d803      	bhi.n	838cc <_malloc_r+0x518>
   838c4:	0bca      	lsrs	r2, r1, #15
   838c6:	3277      	adds	r2, #119	; 0x77
   838c8:	0050      	lsls	r0, r2, #1
   838ca:	e72c      	b.n	83726 <_malloc_r+0x372>
   838cc:	f240 5254 	movw	r2, #1364	; 0x554
   838d0:	4293      	cmp	r3, r2
   838d2:	d803      	bhi.n	838dc <_malloc_r+0x528>
   838d4:	0c8a      	lsrs	r2, r1, #18
   838d6:	327c      	adds	r2, #124	; 0x7c
   838d8:	0050      	lsls	r0, r2, #1
   838da:	e724      	b.n	83726 <_malloc_r+0x372>
   838dc:	20fc      	movs	r0, #252	; 0xfc
   838de:	227e      	movs	r2, #126	; 0x7e
   838e0:	e721      	b.n	83726 <_malloc_r+0x372>
   838e2:	687b      	ldr	r3, [r7, #4]
   838e4:	e78d      	b.n	83802 <_malloc_r+0x44e>
   838e6:	bf00      	nop
   838e8:	2007058c 	.word	0x2007058c

000838ec <__malloc_lock>:
   838ec:	4770      	bx	lr
   838ee:	bf00      	nop

000838f0 <__malloc_unlock>:
   838f0:	4770      	bx	lr
   838f2:	bf00      	nop

000838f4 <_sbrk_r>:
   838f4:	b538      	push	{r3, r4, r5, lr}
   838f6:	4c07      	ldr	r4, [pc, #28]	; (83914 <_sbrk_r+0x20>)
   838f8:	2300      	movs	r3, #0
   838fa:	4605      	mov	r5, r0
   838fc:	4608      	mov	r0, r1
   838fe:	6023      	str	r3, [r4, #0]
   83900:	f7fd fee2 	bl	816c8 <_sbrk>
   83904:	1c43      	adds	r3, r0, #1
   83906:	d000      	beq.n	8390a <_sbrk_r+0x16>
   83908:	bd38      	pop	{r3, r4, r5, pc}
   8390a:	6823      	ldr	r3, [r4, #0]
   8390c:	2b00      	cmp	r3, #0
   8390e:	d0fb      	beq.n	83908 <_sbrk_r+0x14>
   83910:	602b      	str	r3, [r5, #0]
   83912:	bd38      	pop	{r3, r4, r5, pc}
   83914:	20070b90 	.word	0x20070b90

00083918 <__sread>:
   83918:	b510      	push	{r4, lr}
   8391a:	460c      	mov	r4, r1
   8391c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83920:	f000 f912 	bl	83b48 <_read_r>
   83924:	2800      	cmp	r0, #0
   83926:	db03      	blt.n	83930 <__sread+0x18>
   83928:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8392a:	4403      	add	r3, r0
   8392c:	6523      	str	r3, [r4, #80]	; 0x50
   8392e:	bd10      	pop	{r4, pc}
   83930:	89a3      	ldrh	r3, [r4, #12]
   83932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83936:	81a3      	strh	r3, [r4, #12]
   83938:	bd10      	pop	{r4, pc}
   8393a:	bf00      	nop

0008393c <__swrite>:
   8393c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83940:	460c      	mov	r4, r1
   83942:	8989      	ldrh	r1, [r1, #12]
   83944:	461d      	mov	r5, r3
   83946:	05cb      	lsls	r3, r1, #23
   83948:	4616      	mov	r6, r2
   8394a:	4607      	mov	r7, r0
   8394c:	d506      	bpl.n	8395c <__swrite+0x20>
   8394e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83952:	2200      	movs	r2, #0
   83954:	2302      	movs	r3, #2
   83956:	f000 f8e3 	bl	83b20 <_lseek_r>
   8395a:	89a1      	ldrh	r1, [r4, #12]
   8395c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83960:	81a1      	strh	r1, [r4, #12]
   83962:	4638      	mov	r0, r7
   83964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83968:	4632      	mov	r2, r6
   8396a:	462b      	mov	r3, r5
   8396c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83970:	f000 b814 	b.w	8399c <_write_r>

00083974 <__sseek>:
   83974:	b510      	push	{r4, lr}
   83976:	460c      	mov	r4, r1
   83978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8397c:	f000 f8d0 	bl	83b20 <_lseek_r>
   83980:	89a3      	ldrh	r3, [r4, #12]
   83982:	1c42      	adds	r2, r0, #1
   83984:	bf0e      	itee	eq
   83986:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8398a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8398e:	6520      	strne	r0, [r4, #80]	; 0x50
   83990:	81a3      	strh	r3, [r4, #12]
   83992:	bd10      	pop	{r4, pc}

00083994 <__sclose>:
   83994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83998:	f000 b868 	b.w	83a6c <_close_r>

0008399c <_write_r>:
   8399c:	b570      	push	{r4, r5, r6, lr}
   8399e:	4c08      	ldr	r4, [pc, #32]	; (839c0 <_write_r+0x24>)
   839a0:	4606      	mov	r6, r0
   839a2:	2500      	movs	r5, #0
   839a4:	4608      	mov	r0, r1
   839a6:	4611      	mov	r1, r2
   839a8:	461a      	mov	r2, r3
   839aa:	6025      	str	r5, [r4, #0]
   839ac:	f7fc fd22 	bl	803f4 <_write>
   839b0:	1c43      	adds	r3, r0, #1
   839b2:	d000      	beq.n	839b6 <_write_r+0x1a>
   839b4:	bd70      	pop	{r4, r5, r6, pc}
   839b6:	6823      	ldr	r3, [r4, #0]
   839b8:	2b00      	cmp	r3, #0
   839ba:	d0fb      	beq.n	839b4 <_write_r+0x18>
   839bc:	6033      	str	r3, [r6, #0]
   839be:	bd70      	pop	{r4, r5, r6, pc}
   839c0:	20070b90 	.word	0x20070b90

000839c4 <__register_exitproc>:
   839c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   839c6:	4c27      	ldr	r4, [pc, #156]	; (83a64 <__register_exitproc+0xa0>)
   839c8:	b085      	sub	sp, #20
   839ca:	6826      	ldr	r6, [r4, #0]
   839cc:	4607      	mov	r7, r0
   839ce:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   839d2:	2c00      	cmp	r4, #0
   839d4:	d040      	beq.n	83a58 <__register_exitproc+0x94>
   839d6:	6865      	ldr	r5, [r4, #4]
   839d8:	2d1f      	cmp	r5, #31
   839da:	dd1e      	ble.n	83a1a <__register_exitproc+0x56>
   839dc:	4822      	ldr	r0, [pc, #136]	; (83a68 <__register_exitproc+0xa4>)
   839de:	b918      	cbnz	r0, 839e8 <__register_exitproc+0x24>
   839e0:	f04f 30ff 	mov.w	r0, #4294967295
   839e4:	b005      	add	sp, #20
   839e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   839e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   839ec:	9103      	str	r1, [sp, #12]
   839ee:	9202      	str	r2, [sp, #8]
   839f0:	9301      	str	r3, [sp, #4]
   839f2:	f7ff fcd7 	bl	833a4 <malloc>
   839f6:	9903      	ldr	r1, [sp, #12]
   839f8:	4604      	mov	r4, r0
   839fa:	9a02      	ldr	r2, [sp, #8]
   839fc:	9b01      	ldr	r3, [sp, #4]
   839fe:	2800      	cmp	r0, #0
   83a00:	d0ee      	beq.n	839e0 <__register_exitproc+0x1c>
   83a02:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83a06:	2000      	movs	r0, #0
   83a08:	6025      	str	r5, [r4, #0]
   83a0a:	6060      	str	r0, [r4, #4]
   83a0c:	4605      	mov	r5, r0
   83a0e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83a12:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83a16:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83a1a:	b93f      	cbnz	r7, 83a2c <__register_exitproc+0x68>
   83a1c:	1c6b      	adds	r3, r5, #1
   83a1e:	2000      	movs	r0, #0
   83a20:	3502      	adds	r5, #2
   83a22:	6063      	str	r3, [r4, #4]
   83a24:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83a28:	b005      	add	sp, #20
   83a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83a2c:	2601      	movs	r6, #1
   83a2e:	40ae      	lsls	r6, r5
   83a30:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83a34:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83a38:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83a3c:	2f02      	cmp	r7, #2
   83a3e:	ea42 0206 	orr.w	r2, r2, r6
   83a42:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83a46:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83a4a:	d1e7      	bne.n	83a1c <__register_exitproc+0x58>
   83a4c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83a50:	431e      	orrs	r6, r3
   83a52:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83a56:	e7e1      	b.n	83a1c <__register_exitproc+0x58>
   83a58:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83a5c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83a60:	e7b9      	b.n	839d6 <__register_exitproc+0x12>
   83a62:	bf00      	nop
   83a64:	00083bec 	.word	0x00083bec
   83a68:	000833a5 	.word	0x000833a5

00083a6c <_close_r>:
   83a6c:	b538      	push	{r3, r4, r5, lr}
   83a6e:	4c07      	ldr	r4, [pc, #28]	; (83a8c <_close_r+0x20>)
   83a70:	2300      	movs	r3, #0
   83a72:	4605      	mov	r5, r0
   83a74:	4608      	mov	r0, r1
   83a76:	6023      	str	r3, [r4, #0]
   83a78:	f7fd fe40 	bl	816fc <_close>
   83a7c:	1c43      	adds	r3, r0, #1
   83a7e:	d000      	beq.n	83a82 <_close_r+0x16>
   83a80:	bd38      	pop	{r3, r4, r5, pc}
   83a82:	6823      	ldr	r3, [r4, #0]
   83a84:	2b00      	cmp	r3, #0
   83a86:	d0fb      	beq.n	83a80 <_close_r+0x14>
   83a88:	602b      	str	r3, [r5, #0]
   83a8a:	bd38      	pop	{r3, r4, r5, pc}
   83a8c:	20070b90 	.word	0x20070b90

00083a90 <_fclose_r>:
   83a90:	b570      	push	{r4, r5, r6, lr}
   83a92:	460c      	mov	r4, r1
   83a94:	4605      	mov	r5, r0
   83a96:	b131      	cbz	r1, 83aa6 <_fclose_r+0x16>
   83a98:	b110      	cbz	r0, 83aa0 <_fclose_r+0x10>
   83a9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83a9c:	2b00      	cmp	r3, #0
   83a9e:	d02f      	beq.n	83b00 <_fclose_r+0x70>
   83aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83aa4:	b90b      	cbnz	r3, 83aaa <_fclose_r+0x1a>
   83aa6:	2000      	movs	r0, #0
   83aa8:	bd70      	pop	{r4, r5, r6, pc}
   83aaa:	4628      	mov	r0, r5
   83aac:	4621      	mov	r1, r4
   83aae:	f7ff fa89 	bl	82fc4 <_fflush_r>
   83ab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83ab4:	4606      	mov	r6, r0
   83ab6:	b133      	cbz	r3, 83ac6 <_fclose_r+0x36>
   83ab8:	4628      	mov	r0, r5
   83aba:	69e1      	ldr	r1, [r4, #28]
   83abc:	4798      	blx	r3
   83abe:	2800      	cmp	r0, #0
   83ac0:	bfb8      	it	lt
   83ac2:	f04f 36ff 	movlt.w	r6, #4294967295
   83ac6:	89a3      	ldrh	r3, [r4, #12]
   83ac8:	061b      	lsls	r3, r3, #24
   83aca:	d41c      	bmi.n	83b06 <_fclose_r+0x76>
   83acc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83ace:	b141      	cbz	r1, 83ae2 <_fclose_r+0x52>
   83ad0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83ad4:	4299      	cmp	r1, r3
   83ad6:	d002      	beq.n	83ade <_fclose_r+0x4e>
   83ad8:	4628      	mov	r0, r5
   83ada:	f7ff fb73 	bl	831c4 <_free_r>
   83ade:	2300      	movs	r3, #0
   83ae0:	6323      	str	r3, [r4, #48]	; 0x30
   83ae2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83ae4:	b121      	cbz	r1, 83af0 <_fclose_r+0x60>
   83ae6:	4628      	mov	r0, r5
   83ae8:	f7ff fb6c 	bl	831c4 <_free_r>
   83aec:	2300      	movs	r3, #0
   83aee:	6463      	str	r3, [r4, #68]	; 0x44
   83af0:	f7ff fafe 	bl	830f0 <__sfp_lock_acquire>
   83af4:	2300      	movs	r3, #0
   83af6:	81a3      	strh	r3, [r4, #12]
   83af8:	f7ff fafc 	bl	830f4 <__sfp_lock_release>
   83afc:	4630      	mov	r0, r6
   83afe:	bd70      	pop	{r4, r5, r6, pc}
   83b00:	f7ff fa7c 	bl	82ffc <__sinit>
   83b04:	e7cc      	b.n	83aa0 <_fclose_r+0x10>
   83b06:	4628      	mov	r0, r5
   83b08:	6921      	ldr	r1, [r4, #16]
   83b0a:	f7ff fb5b 	bl	831c4 <_free_r>
   83b0e:	e7dd      	b.n	83acc <_fclose_r+0x3c>

00083b10 <fclose>:
   83b10:	4b02      	ldr	r3, [pc, #8]	; (83b1c <fclose+0xc>)
   83b12:	4601      	mov	r1, r0
   83b14:	6818      	ldr	r0, [r3, #0]
   83b16:	f7ff bfbb 	b.w	83a90 <_fclose_r>
   83b1a:	bf00      	nop
   83b1c:	20070588 	.word	0x20070588

00083b20 <_lseek_r>:
   83b20:	b570      	push	{r4, r5, r6, lr}
   83b22:	4c08      	ldr	r4, [pc, #32]	; (83b44 <_lseek_r+0x24>)
   83b24:	4606      	mov	r6, r0
   83b26:	2500      	movs	r5, #0
   83b28:	4608      	mov	r0, r1
   83b2a:	4611      	mov	r1, r2
   83b2c:	461a      	mov	r2, r3
   83b2e:	6025      	str	r5, [r4, #0]
   83b30:	f7fd fde8 	bl	81704 <_lseek>
   83b34:	1c43      	adds	r3, r0, #1
   83b36:	d000      	beq.n	83b3a <_lseek_r+0x1a>
   83b38:	bd70      	pop	{r4, r5, r6, pc}
   83b3a:	6823      	ldr	r3, [r4, #0]
   83b3c:	2b00      	cmp	r3, #0
   83b3e:	d0fb      	beq.n	83b38 <_lseek_r+0x18>
   83b40:	6033      	str	r3, [r6, #0]
   83b42:	bd70      	pop	{r4, r5, r6, pc}
   83b44:	20070b90 	.word	0x20070b90

00083b48 <_read_r>:
   83b48:	b570      	push	{r4, r5, r6, lr}
   83b4a:	4c08      	ldr	r4, [pc, #32]	; (83b6c <_read_r+0x24>)
   83b4c:	4606      	mov	r6, r0
   83b4e:	2500      	movs	r5, #0
   83b50:	4608      	mov	r0, r1
   83b52:	4611      	mov	r1, r2
   83b54:	461a      	mov	r2, r3
   83b56:	6025      	str	r5, [r4, #0]
   83b58:	f7fc fc2c 	bl	803b4 <_read>
   83b5c:	1c43      	adds	r3, r0, #1
   83b5e:	d000      	beq.n	83b62 <_read_r+0x1a>
   83b60:	bd70      	pop	{r4, r5, r6, pc}
   83b62:	6823      	ldr	r3, [r4, #0]
   83b64:	2b00      	cmp	r3, #0
   83b66:	d0fb      	beq.n	83b60 <_read_r+0x18>
   83b68:	6033      	str	r3, [r6, #0]
   83b6a:	bd70      	pop	{r4, r5, r6, pc}
   83b6c:	20070b90 	.word	0x20070b90
   83b70:	00000001 	.word	0x00000001
   83b74:	00000002 	.word	0x00000002
   83b78:	00000004 	.word	0x00000004
   83b7c:	00000008 	.word	0x00000008
   83b80:	00000010 	.word	0x00000010
   83b84:	00000020 	.word	0x00000020
   83b88:	00000040 	.word	0x00000040
   83b8c:	00000080 	.word	0x00000080
   83b90:	00000100 	.word	0x00000100
   83b94:	00000200 	.word	0x00000200
   83b98:	00000400 	.word	0x00000400
   83b9c:	00000000 	.word	0x00000000

00083ba0 <atanlo>:
   83ba0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   83bb0:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00083bc0 <atanhi>:
   83bc0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   83bd0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
   83be0:	74727173 00000000 00000043              sqrt....C...

00083bec <_global_impure_ptr>:
   83bec:	20070160                                `.. 

00083bf0 <_init>:
   83bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83bf2:	bf00      	nop
   83bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83bf6:	bc08      	pop	{r3}
   83bf8:	469e      	mov	lr, r3
   83bfa:	4770      	bx	lr

00083bfc <__init_array_start>:
   83bfc:	00082e5d 	.word	0x00082e5d

00083c00 <__frame_dummy_init_array_entry>:
   83c00:	00080119                                ....

00083c04 <_fini>:
   83c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c06:	bf00      	nop
   83c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83c0a:	bc08      	pop	{r3}
   83c0c:	469e      	mov	lr, r3
   83c0e:	4770      	bx	lr

00083c10 <__fini_array_start>:
   83c10:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070158 	.word	0x20070158

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <c1Loop>:
20070138:	00000101                                         .

20070139 <c2Loop>:
20070139:	64000001                                         ...

2007013c <objects>:
2007013c:	00000064 00000064 ffffff9c 000000c8     d...d...........
2007014c:	00000064 00000190                       d.......

20070154 <g_interrupt_enabled>:
20070154:	00000001                                ....

20070158 <SystemCoreClock>:
20070158:	003d0900                                ..=.

2007015c <__fdlib_version>:
2007015c:	00000001                                ....

20070160 <impure_data>:
20070160:	00000000 2007044c 200704b4 2007051c     ....L.. ... ... 
	...
20070194:	00083be8 00000000 00000000 00000000     .;..............
	...
20070208:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070218:	0005deec 0000000b 00000000 00000000     ................
	...

20070588 <_impure_ptr>:
20070588:	20070160                                `.. 

2007058c <__malloc_av_>:
	...
20070594:	2007058c 2007058c 20070594 20070594     ... ... ... ... 
200705a4:	2007059c 2007059c 200705a4 200705a4     ... ... ... ... 
200705b4:	200705ac 200705ac 200705b4 200705b4     ... ... ... ... 
200705c4:	200705bc 200705bc 200705c4 200705c4     ... ... ... ... 
200705d4:	200705cc 200705cc 200705d4 200705d4     ... ... ... ... 
200705e4:	200705dc 200705dc 200705e4 200705e4     ... ... ... ... 
200705f4:	200705ec 200705ec 200705f4 200705f4     ... ... ... ... 
20070604:	200705fc 200705fc 20070604 20070604     ... ... ... ... 
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 
20070984:	2007097c 2007097c 20070984 20070984     |.. |.. ... ... 

20070994 <__malloc_trim_threshold>:
20070994:	00020000                                ....

20070998 <__malloc_sbrk_base>:
20070998:	ffffffff                                ....
