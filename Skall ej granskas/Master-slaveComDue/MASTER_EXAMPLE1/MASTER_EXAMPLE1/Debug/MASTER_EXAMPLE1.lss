
MASTER_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004000  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084000  00084000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00084008  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000d4  200709a4  000849ac  000109a4  2**2
                  ALLOC
  4 .stack        00002000  20070a78  00084a80  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000a921  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002096  00000000  00000000  0001b349  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004426  00000000  00000000  0001d3df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009e8  00000000  00000000  00021805  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008c8  00000000  00000000  000221ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018020  00000000  00000000  00022ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000df51  00000000  00000000  0003aad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000632df  00000000  00000000  00048a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f14  00000000  00000000  000abd08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a78 	.word	0x20072a78
   80004:	00080a1d 	.word	0x00080a1d
   80008:	00080a19 	.word	0x00080a19
   8000c:	00080a19 	.word	0x00080a19
   80010:	00080a19 	.word	0x00080a19
   80014:	00080a19 	.word	0x00080a19
   80018:	00080a19 	.word	0x00080a19
	...
   8002c:	00080a19 	.word	0x00080a19
   80030:	00080a19 	.word	0x00080a19
   80034:	00000000 	.word	0x00000000
   80038:	00080a19 	.word	0x00080a19
   8003c:	00080a19 	.word	0x00080a19
   80040:	00080a19 	.word	0x00080a19
   80044:	00080a19 	.word	0x00080a19
   80048:	00080a19 	.word	0x00080a19
   8004c:	00080a19 	.word	0x00080a19
   80050:	00080a19 	.word	0x00080a19
   80054:	00080a19 	.word	0x00080a19
   80058:	00080a19 	.word	0x00080a19
   8005c:	00080a19 	.word	0x00080a19
   80060:	00080a19 	.word	0x00080a19
   80064:	00080a19 	.word	0x00080a19
   80068:	00000000 	.word	0x00000000
   8006c:	00080609 	.word	0x00080609
   80070:	0008061d 	.word	0x0008061d
   80074:	00080631 	.word	0x00080631
   80078:	00080645 	.word	0x00080645
	...
   80084:	00080a19 	.word	0x00080a19
   80088:	00080a19 	.word	0x00080a19
   8008c:	00080a19 	.word	0x00080a19
   80090:	00080a19 	.word	0x00080a19
   80094:	00080a19 	.word	0x00080a19
   80098:	00080a19 	.word	0x00080a19
   8009c:	00080a19 	.word	0x00080a19
   800a0:	00080a19 	.word	0x00080a19
   800a4:	00000000 	.word	0x00000000
   800a8:	00080a19 	.word	0x00080a19
   800ac:	00080a19 	.word	0x00080a19
   800b0:	00080a19 	.word	0x00080a19
   800b4:	00080a19 	.word	0x00080a19
   800b8:	00080a19 	.word	0x00080a19
   800bc:	00080a19 	.word	0x00080a19
   800c0:	00080a19 	.word	0x00080a19
   800c4:	00080a19 	.word	0x00080a19
   800c8:	00080a19 	.word	0x00080a19
   800cc:	00080a19 	.word	0x00080a19
   800d0:	00080a19 	.word	0x00080a19
   800d4:	00080a19 	.word	0x00080a19
   800d8:	00080a19 	.word	0x00080a19
   800dc:	00080a19 	.word	0x00080a19
   800e0:	00080a19 	.word	0x00080a19
   800e4:	00080a19 	.word	0x00080a19
   800e8:	00080a19 	.word	0x00080a19
   800ec:	00080a19 	.word	0x00080a19
   800f0:	00080a19 	.word	0x00080a19

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	00084008 	.word	0x00084008

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084008 	.word	0x00084008
   8013c:	200709a8 	.word	0x200709a8
   80140:	00084008 	.word	0x00084008
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80150:	2000      	movs	r0, #0
   80152:	213e      	movs	r1, #62	; 0x3e
   80154:	4b0d      	ldr	r3, [pc, #52]	; (8018c <sysclk_init+0x44>)
   80156:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80158:	4c0d      	ldr	r4, [pc, #52]	; (80190 <sysclk_init+0x48>)
   8015a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015c:	2800      	cmp	r0, #0
   8015e:	d0fc      	beq.n	8015a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80160:	4b0c      	ldr	r3, [pc, #48]	; (80194 <sysclk_init+0x4c>)
   80162:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80164:	4a0c      	ldr	r2, [pc, #48]	; (80198 <sysclk_init+0x50>)
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80168:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8016a:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016e:	2800      	cmp	r0, #0
   80170:	d0fc      	beq.n	8016c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80172:	2010      	movs	r0, #16
   80174:	4b0b      	ldr	r3, [pc, #44]	; (801a4 <sysclk_init+0x5c>)
   80176:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80178:	4b0b      	ldr	r3, [pc, #44]	; (801a8 <sysclk_init+0x60>)
   8017a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017c:	4801      	ldr	r0, [pc, #4]	; (80184 <sysclk_init+0x3c>)
   8017e:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   80180:	4798      	blx	r3
   80182:	bd10      	pop	{r4, pc}
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700b1 	.word	0x200700b1
   8018c:	000806bd 	.word	0x000806bd
   80190:	00080711 	.word	0x00080711
   80194:	00080721 	.word	0x00080721
   80198:	200d3f01 	.word	0x200d3f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	00080731 	.word	0x00080731
   801a4:	00080659 	.word	0x00080659
   801a8:	00080acd 	.word	0x00080acd

000801ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801b0:	460c      	mov	r4, r1
   801b2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   801b4:	b960      	cbnz	r0, 801d0 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   801b6:	2a00      	cmp	r2, #0
   801b8:	dd0e      	ble.n	801d8 <_read+0x2c>
   801ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801bc:	4e09      	ldr	r6, [pc, #36]	; (801e4 <_read+0x38>)
   801be:	4d0a      	ldr	r5, [pc, #40]	; (801e8 <_read+0x3c>)
   801c0:	6830      	ldr	r0, [r6, #0]
   801c2:	4621      	mov	r1, r4
   801c4:	682b      	ldr	r3, [r5, #0]
   801c6:	4798      	blx	r3
		ptr++;
   801c8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801ca:	42bc      	cmp	r4, r7
   801cc:	d1f8      	bne.n	801c0 <_read+0x14>
   801ce:	e006      	b.n	801de <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801d0:	f04f 30ff 	mov.w	r0, #4294967295
   801d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   801d8:	2000      	movs	r0, #0
   801da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   801de:	4640      	mov	r0, r8
	}
	return nChars;
}
   801e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801e4:	20070a70 	.word	0x20070a70
   801e8:	20070a68 	.word	0x20070a68

000801ec <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   801ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801f0:	460e      	mov	r6, r1
   801f2:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   801f4:	3801      	subs	r0, #1
   801f6:	2802      	cmp	r0, #2
   801f8:	d80f      	bhi.n	8021a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   801fa:	b192      	cbz	r2, 80222 <_write+0x36>
   801fc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   801fe:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8023c <_write+0x50>
   80202:	4f0d      	ldr	r7, [pc, #52]	; (80238 <_write+0x4c>)
   80204:	f8d8 0000 	ldr.w	r0, [r8]
   80208:	5d31      	ldrb	r1, [r6, r4]
   8020a:	683b      	ldr	r3, [r7, #0]
   8020c:	4798      	blx	r3
   8020e:	2800      	cmp	r0, #0
   80210:	db0a      	blt.n	80228 <_write+0x3c>
			return -1;
		}
		++nChars;
   80212:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80214:	42a5      	cmp	r5, r4
   80216:	d1f5      	bne.n	80204 <_write+0x18>
   80218:	e00a      	b.n	80230 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8021a:	f04f 30ff 	mov.w	r0, #4294967295
   8021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80222:	2000      	movs	r0, #0
   80224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80228:	f04f 30ff 	mov.w	r0, #4294967295
   8022c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80230:	4620      	mov	r0, r4
	}
	return nChars;
}
   80232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80236:	bf00      	nop
   80238:	20070a6c 	.word	0x20070a6c
   8023c:	20070a70 	.word	0x20070a70

00080240 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80240:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80246:	4b1e      	ldr	r3, [pc, #120]	; (802c0 <board_init+0x80>)
   80248:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8024a:	200b      	movs	r0, #11
   8024c:	4c1d      	ldr	r4, [pc, #116]	; (802c4 <board_init+0x84>)
   8024e:	47a0      	blx	r4
   80250:	200c      	movs	r0, #12
   80252:	47a0      	blx	r4
   80254:	200d      	movs	r0, #13
   80256:	47a0      	blx	r4
   80258:	200e      	movs	r0, #14
   8025a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8025c:	203b      	movs	r0, #59	; 0x3b
   8025e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80262:	4c19      	ldr	r4, [pc, #100]	; (802c8 <board_init+0x88>)
   80264:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80266:	2055      	movs	r0, #85	; 0x55
   80268:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8026c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8026e:	2056      	movs	r0, #86	; 0x56
   80270:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80274:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80276:	2068      	movs	r0, #104	; 0x68
   80278:	4914      	ldr	r1, [pc, #80]	; (802cc <board_init+0x8c>)
   8027a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8027c:	205c      	movs	r0, #92	; 0x5c
   8027e:	4914      	ldr	r1, [pc, #80]	; (802d0 <board_init+0x90>)
   80280:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80282:	4814      	ldr	r0, [pc, #80]	; (802d4 <board_init+0x94>)
   80284:	f44f 7140 	mov.w	r1, #768	; 0x300
   80288:	4a13      	ldr	r2, [pc, #76]	; (802d8 <board_init+0x98>)
   8028a:	4b14      	ldr	r3, [pc, #80]	; (802dc <board_init+0x9c>)
   8028c:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   8028e:	2011      	movs	r0, #17
   80290:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80294:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   80296:	2012      	movs	r0, #18
   80298:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8029c:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   8029e:	200a      	movs	r0, #10
   802a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802a4:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   802a6:	200b      	movs	r0, #11
   802a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802ac:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   802ae:	202b      	movs	r0, #43	; 0x2b
   802b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802b4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   802b6:	202a      	movs	r0, #42	; 0x2a
   802b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802bc:	47a0      	blx	r4
   802be:	bd10      	pop	{r4, pc}
   802c0:	400e1a50 	.word	0x400e1a50
   802c4:	00080741 	.word	0x00080741
   802c8:	0008043d 	.word	0x0008043d
   802cc:	28000079 	.word	0x28000079
   802d0:	28000001 	.word	0x28000001
   802d4:	400e0e00 	.word	0x400e0e00
   802d8:	08000001 	.word	0x08000001
   802dc:	00080511 	.word	0x00080511

000802e0 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   802e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802e4:	4606      	mov	r6, r0
   802e6:	2400      	movs	r4, #0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   802e8:	4d0a      	ldr	r5, [pc, #40]	; (80314 <LED_Off+0x34>)
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   802ea:	4f0b      	ldr	r7, [pc, #44]	; (80318 <LED_Off+0x38>)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   802ec:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8031c <LED_Off+0x3c>
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   802f0:	5963      	ldr	r3, [r4, r5]
   802f2:	42b3      	cmp	r3, r6
   802f4:	d108      	bne.n	80308 <LED_Off+0x28>
   802f6:	192b      	adds	r3, r5, r4
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   802f8:	685b      	ldr	r3, [r3, #4]
   802fa:	2b01      	cmp	r3, #1
   802fc:	d102      	bne.n	80304 <LED_Off+0x24>
				gpio_set_pin_low(led_gpio);
   802fe:	4630      	mov	r0, r6
   80300:	47c0      	blx	r8
   80302:	e001      	b.n	80308 <LED_Off+0x28>
			} else {
				gpio_set_pin_high(led_gpio);
   80304:	4630      	mov	r0, r6
   80306:	47b8      	blx	r7
   80308:	3408      	adds	r4, #8
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8030a:	2c20      	cmp	r4, #32
   8030c:	d1f0      	bne.n	802f0 <LED_Off+0x10>
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   8030e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80312:	bf00      	nop
   80314:	00083f20 	.word	0x00083f20
   80318:	00080405 	.word	0x00080405
   8031c:	00080421 	.word	0x00080421

00080320 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   80320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80324:	4606      	mov	r6, r0
   80326:	2400      	movs	r4, #0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   80328:	4d0a      	ldr	r5, [pc, #40]	; (80354 <LED_On+0x34>)
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   8032a:	4f0b      	ldr	r7, [pc, #44]	; (80358 <LED_On+0x38>)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   8032c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8035c <LED_On+0x3c>
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   80330:	5963      	ldr	r3, [r4, r5]
   80332:	42b3      	cmp	r3, r6
   80334:	d108      	bne.n	80348 <LED_On+0x28>
   80336:	192b      	adds	r3, r5, r4
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   80338:	685b      	ldr	r3, [r3, #4]
   8033a:	2b01      	cmp	r3, #1
   8033c:	d102      	bne.n	80344 <LED_On+0x24>
				gpio_set_pin_high(led_gpio);
   8033e:	4630      	mov	r0, r6
   80340:	47c0      	blx	r8
   80342:	e001      	b.n	80348 <LED_On+0x28>
			} else {
				gpio_set_pin_low(led_gpio);
   80344:	4630      	mov	r0, r6
   80346:	47b8      	blx	r7
   80348:	3408      	adds	r4, #8
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8034a:	2c20      	cmp	r4, #32
   8034c:	d1f0      	bne.n	80330 <LED_On+0x10>
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   8034e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80352:	bf00      	nop
   80354:	00083f20 	.word	0x00083f20
   80358:	00080421 	.word	0x00080421
   8035c:	00080405 	.word	0x00080405

00080360 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80360:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80362:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80366:	d016      	beq.n	80396 <pio_set_peripheral+0x36>
   80368:	d804      	bhi.n	80374 <pio_set_peripheral+0x14>
   8036a:	b1c1      	cbz	r1, 8039e <pio_set_peripheral+0x3e>
   8036c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80370:	d00a      	beq.n	80388 <pio_set_peripheral+0x28>
   80372:	e013      	b.n	8039c <pio_set_peripheral+0x3c>
   80374:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80378:	d011      	beq.n	8039e <pio_set_peripheral+0x3e>
   8037a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8037e:	d00e      	beq.n	8039e <pio_set_peripheral+0x3e>
   80380:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80384:	d10a      	bne.n	8039c <pio_set_peripheral+0x3c>
   80386:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80388:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8038a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8038c:	400b      	ands	r3, r1
   8038e:	ea23 0302 	bic.w	r3, r3, r2
   80392:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80394:	e002      	b.n	8039c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80396:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80398:	4313      	orrs	r3, r2
   8039a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8039c:	6042      	str	r2, [r0, #4]
   8039e:	4770      	bx	lr

000803a0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803a0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803a2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   803a6:	bf14      	ite	ne
   803a8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803aa:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   803ac:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   803b0:	bf14      	ite	ne
   803b2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   803b4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   803b6:	f012 0f02 	tst.w	r2, #2
   803ba:	d002      	beq.n	803c2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   803bc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   803c0:	e004      	b.n	803cc <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   803c2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   803c6:	bf18      	it	ne
   803c8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   803cc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   803ce:	6001      	str	r1, [r0, #0]
   803d0:	4770      	bx	lr
   803d2:	bf00      	nop

000803d4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   803d4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803d6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803d8:	9c01      	ldr	r4, [sp, #4]
   803da:	b10c      	cbz	r4, 803e0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   803dc:	6641      	str	r1, [r0, #100]	; 0x64
   803de:	e000      	b.n	803e2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803e0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   803e2:	b10b      	cbz	r3, 803e8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   803e4:	6501      	str	r1, [r0, #80]	; 0x50
   803e6:	e000      	b.n	803ea <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   803e8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   803ea:	b10a      	cbz	r2, 803f0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   803ec:	6301      	str	r1, [r0, #48]	; 0x30
   803ee:	e000      	b.n	803f2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   803f0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   803f2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   803f4:	6001      	str	r1, [r0, #0]
}
   803f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   803fa:	4770      	bx	lr

000803fc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   803fc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   803fe:	4770      	bx	lr

00080400 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80400:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80402:	4770      	bx	lr

00080404 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80404:	0943      	lsrs	r3, r0, #5
   80406:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8040a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8040e:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80410:	f000 001f 	and.w	r0, r0, #31
   80414:	2201      	movs	r2, #1
   80416:	fa02 f000 	lsl.w	r0, r2, r0
   8041a:	6318      	str	r0, [r3, #48]	; 0x30
   8041c:	4770      	bx	lr
   8041e:	bf00      	nop

00080420 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80420:	0943      	lsrs	r3, r0, #5
   80422:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80426:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8042a:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8042c:	f000 001f 	and.w	r0, r0, #31
   80430:	2201      	movs	r2, #1
   80432:	fa02 f000 	lsl.w	r0, r2, r0
   80436:	6358      	str	r0, [r3, #52]	; 0x34
   80438:	4770      	bx	lr
   8043a:	bf00      	nop

0008043c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8043c:	b570      	push	{r4, r5, r6, lr}
   8043e:	b082      	sub	sp, #8
   80440:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80442:	0944      	lsrs	r4, r0, #5
   80444:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80448:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8044c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8044e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80452:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80456:	d030      	beq.n	804ba <pio_configure_pin+0x7e>
   80458:	d806      	bhi.n	80468 <pio_configure_pin+0x2c>
   8045a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8045e:	d00a      	beq.n	80476 <pio_configure_pin+0x3a>
   80460:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80464:	d018      	beq.n	80498 <pio_configure_pin+0x5c>
   80466:	e049      	b.n	804fc <pio_configure_pin+0xc0>
   80468:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8046c:	d030      	beq.n	804d0 <pio_configure_pin+0x94>
   8046e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80472:	d02d      	beq.n	804d0 <pio_configure_pin+0x94>
   80474:	e042      	b.n	804fc <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80476:	f000 001f 	and.w	r0, r0, #31
   8047a:	2401      	movs	r4, #1
   8047c:	4084      	lsls	r4, r0
   8047e:	4630      	mov	r0, r6
   80480:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80484:	4622      	mov	r2, r4
   80486:	4b1f      	ldr	r3, [pc, #124]	; (80504 <pio_configure_pin+0xc8>)
   80488:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8048a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8048e:	bf14      	ite	ne
   80490:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80492:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80494:	2001      	movs	r0, #1
   80496:	e032      	b.n	804fe <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80498:	f000 001f 	and.w	r0, r0, #31
   8049c:	2401      	movs	r4, #1
   8049e:	4084      	lsls	r4, r0
   804a0:	4630      	mov	r0, r6
   804a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804a6:	4622      	mov	r2, r4
   804a8:	4b16      	ldr	r3, [pc, #88]	; (80504 <pio_configure_pin+0xc8>)
   804aa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   804ac:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   804b0:	bf14      	ite	ne
   804b2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   804b4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   804b6:	2001      	movs	r0, #1
   804b8:	e021      	b.n	804fe <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   804ba:	f000 011f 	and.w	r1, r0, #31
   804be:	2401      	movs	r4, #1
   804c0:	4630      	mov	r0, r6
   804c2:	fa04 f101 	lsl.w	r1, r4, r1
   804c6:	462a      	mov	r2, r5
   804c8:	4b0f      	ldr	r3, [pc, #60]	; (80508 <pio_configure_pin+0xcc>)
   804ca:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   804cc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   804ce:	e016      	b.n	804fe <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804d0:	f000 011f 	and.w	r1, r0, #31
   804d4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   804d6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804da:	ea05 0304 	and.w	r3, r5, r4
   804de:	9300      	str	r3, [sp, #0]
   804e0:	4630      	mov	r0, r6
   804e2:	fa04 f101 	lsl.w	r1, r4, r1
   804e6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804ea:	bf14      	ite	ne
   804ec:	2200      	movne	r2, #0
   804ee:	2201      	moveq	r2, #1
   804f0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   804f4:	4d05      	ldr	r5, [pc, #20]	; (8050c <pio_configure_pin+0xd0>)
   804f6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   804f8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804fa:	e000      	b.n	804fe <pio_configure_pin+0xc2>

	default:
		return 0;
   804fc:	2000      	movs	r0, #0
	}

	return 1;
}
   804fe:	b002      	add	sp, #8
   80500:	bd70      	pop	{r4, r5, r6, pc}
   80502:	bf00      	nop
   80504:	00080361 	.word	0x00080361
   80508:	000803a1 	.word	0x000803a1
   8050c:	000803d5 	.word	0x000803d5

00080510 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80510:	b5f0      	push	{r4, r5, r6, r7, lr}
   80512:	b083      	sub	sp, #12
   80514:	4607      	mov	r7, r0
   80516:	460e      	mov	r6, r1
   80518:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8051a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8051e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80522:	d026      	beq.n	80572 <pio_configure_pin_group+0x62>
   80524:	d806      	bhi.n	80534 <pio_configure_pin_group+0x24>
   80526:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8052a:	d00a      	beq.n	80542 <pio_configure_pin_group+0x32>
   8052c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80530:	d013      	beq.n	8055a <pio_configure_pin_group+0x4a>
   80532:	e034      	b.n	8059e <pio_configure_pin_group+0x8e>
   80534:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80538:	d01f      	beq.n	8057a <pio_configure_pin_group+0x6a>
   8053a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8053e:	d01c      	beq.n	8057a <pio_configure_pin_group+0x6a>
   80540:	e02d      	b.n	8059e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80542:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80546:	4632      	mov	r2, r6
   80548:	4b16      	ldr	r3, [pc, #88]	; (805a4 <pio_configure_pin_group+0x94>)
   8054a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8054c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80550:	bf14      	ite	ne
   80552:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80554:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80556:	2001      	movs	r0, #1
   80558:	e022      	b.n	805a0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8055a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8055e:	4632      	mov	r2, r6
   80560:	4b10      	ldr	r3, [pc, #64]	; (805a4 <pio_configure_pin_group+0x94>)
   80562:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80564:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80568:	bf14      	ite	ne
   8056a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8056c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8056e:	2001      	movs	r0, #1
   80570:	e016      	b.n	805a0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80572:	4b0d      	ldr	r3, [pc, #52]	; (805a8 <pio_configure_pin_group+0x98>)
   80574:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80576:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80578:	e012      	b.n	805a0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8057a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8057e:	f005 0301 	and.w	r3, r5, #1
   80582:	9300      	str	r3, [sp, #0]
   80584:	4638      	mov	r0, r7
   80586:	4631      	mov	r1, r6
   80588:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8058c:	bf14      	ite	ne
   8058e:	2200      	movne	r2, #0
   80590:	2201      	moveq	r2, #1
   80592:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80596:	4c05      	ldr	r4, [pc, #20]	; (805ac <pio_configure_pin_group+0x9c>)
   80598:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8059a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8059c:	e000      	b.n	805a0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8059e:	2000      	movs	r0, #0
	}

	return 1;
}
   805a0:	b003      	add	sp, #12
   805a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   805a4:	00080361 	.word	0x00080361
   805a8:	000803a1 	.word	0x000803a1
   805ac:	000803d5 	.word	0x000803d5

000805b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   805b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805b4:	4604      	mov	r4, r0
   805b6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   805b8:	4b10      	ldr	r3, [pc, #64]	; (805fc <pio_handler_process+0x4c>)
   805ba:	4798      	blx	r3
   805bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   805be:	4620      	mov	r0, r4
   805c0:	4b0f      	ldr	r3, [pc, #60]	; (80600 <pio_handler_process+0x50>)
   805c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   805c4:	4005      	ands	r5, r0
   805c6:	d017      	beq.n	805f8 <pio_handler_process+0x48>
   805c8:	4f0e      	ldr	r7, [pc, #56]	; (80604 <pio_handler_process+0x54>)
   805ca:	f107 040c 	add.w	r4, r7, #12
   805ce:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   805d0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   805d4:	42b3      	cmp	r3, r6
   805d6:	d10a      	bne.n	805ee <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   805d8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   805dc:	4229      	tst	r1, r5
   805de:	d006      	beq.n	805ee <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   805e0:	6823      	ldr	r3, [r4, #0]
   805e2:	4630      	mov	r0, r6
   805e4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   805e6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   805ea:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   805ee:	42bc      	cmp	r4, r7
   805f0:	d002      	beq.n	805f8 <pio_handler_process+0x48>
   805f2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   805f4:	2d00      	cmp	r5, #0
   805f6:	d1eb      	bne.n	805d0 <pio_handler_process+0x20>
   805f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805fc:	000803fd 	.word	0x000803fd
   80600:	00080401 	.word	0x00080401
   80604:	200709c0 	.word	0x200709c0

00080608 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80608:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8060a:	4802      	ldr	r0, [pc, #8]	; (80614 <PIOA_Handler+0xc>)
   8060c:	210b      	movs	r1, #11
   8060e:	4b02      	ldr	r3, [pc, #8]	; (80618 <PIOA_Handler+0x10>)
   80610:	4798      	blx	r3
   80612:	bd08      	pop	{r3, pc}
   80614:	400e0e00 	.word	0x400e0e00
   80618:	000805b1 	.word	0x000805b1

0008061c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8061c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8061e:	4802      	ldr	r0, [pc, #8]	; (80628 <PIOB_Handler+0xc>)
   80620:	210c      	movs	r1, #12
   80622:	4b02      	ldr	r3, [pc, #8]	; (8062c <PIOB_Handler+0x10>)
   80624:	4798      	blx	r3
   80626:	bd08      	pop	{r3, pc}
   80628:	400e1000 	.word	0x400e1000
   8062c:	000805b1 	.word	0x000805b1

00080630 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80630:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80632:	4802      	ldr	r0, [pc, #8]	; (8063c <PIOC_Handler+0xc>)
   80634:	210d      	movs	r1, #13
   80636:	4b02      	ldr	r3, [pc, #8]	; (80640 <PIOC_Handler+0x10>)
   80638:	4798      	blx	r3
   8063a:	bd08      	pop	{r3, pc}
   8063c:	400e1200 	.word	0x400e1200
   80640:	000805b1 	.word	0x000805b1

00080644 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80644:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80646:	4802      	ldr	r0, [pc, #8]	; (80650 <PIOD_Handler+0xc>)
   80648:	210e      	movs	r1, #14
   8064a:	4b02      	ldr	r3, [pc, #8]	; (80654 <PIOD_Handler+0x10>)
   8064c:	4798      	blx	r3
   8064e:	bd08      	pop	{r3, pc}
   80650:	400e1400 	.word	0x400e1400
   80654:	000805b1 	.word	0x000805b1

00080658 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80658:	4b17      	ldr	r3, [pc, #92]	; (806b8 <pmc_switch_mck_to_pllack+0x60>)
   8065a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8065c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80660:	4310      	orrs	r0, r2
   80662:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80666:	f013 0f08 	tst.w	r3, #8
   8066a:	d109      	bne.n	80680 <pmc_switch_mck_to_pllack+0x28>
   8066c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80670:	4911      	ldr	r1, [pc, #68]	; (806b8 <pmc_switch_mck_to_pllack+0x60>)
   80672:	e001      	b.n	80678 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80674:	3b01      	subs	r3, #1
   80676:	d019      	beq.n	806ac <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80678:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8067a:	f012 0f08 	tst.w	r2, #8
   8067e:	d0f9      	beq.n	80674 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80680:	4b0d      	ldr	r3, [pc, #52]	; (806b8 <pmc_switch_mck_to_pllack+0x60>)
   80682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80684:	f022 0203 	bic.w	r2, r2, #3
   80688:	f042 0202 	orr.w	r2, r2, #2
   8068c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8068e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80690:	f010 0008 	ands.w	r0, r0, #8
   80694:	d10c      	bne.n	806b0 <pmc_switch_mck_to_pllack+0x58>
   80696:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8069a:	4907      	ldr	r1, [pc, #28]	; (806b8 <pmc_switch_mck_to_pllack+0x60>)
   8069c:	e001      	b.n	806a2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8069e:	3b01      	subs	r3, #1
   806a0:	d008      	beq.n	806b4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   806a2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   806a4:	f012 0f08 	tst.w	r2, #8
   806a8:	d0f9      	beq.n	8069e <pmc_switch_mck_to_pllack+0x46>
   806aa:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   806ac:	2001      	movs	r0, #1
   806ae:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   806b0:	2000      	movs	r0, #0
   806b2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   806b4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   806b6:	4770      	bx	lr
   806b8:	400e0600 	.word	0x400e0600

000806bc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   806bc:	b138      	cbz	r0, 806ce <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   806be:	4911      	ldr	r1, [pc, #68]	; (80704 <pmc_switch_mainck_to_xtal+0x48>)
   806c0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   806c2:	4a11      	ldr	r2, [pc, #68]	; (80708 <pmc_switch_mainck_to_xtal+0x4c>)
   806c4:	401a      	ands	r2, r3
   806c6:	4b11      	ldr	r3, [pc, #68]	; (8070c <pmc_switch_mainck_to_xtal+0x50>)
   806c8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   806ca:	620b      	str	r3, [r1, #32]
   806cc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   806ce:	4a0d      	ldr	r2, [pc, #52]	; (80704 <pmc_switch_mainck_to_xtal+0x48>)
   806d0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   806d2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   806d6:	f023 0303 	bic.w	r3, r3, #3
   806da:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   806de:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   806e2:	0209      	lsls	r1, r1, #8
   806e4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   806e6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   806e8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   806ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806ec:	f013 0f01 	tst.w	r3, #1
   806f0:	d0fb      	beq.n	806ea <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   806f2:	4a04      	ldr	r2, [pc, #16]	; (80704 <pmc_switch_mainck_to_xtal+0x48>)
   806f4:	6a13      	ldr	r3, [r2, #32]
   806f6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   806fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   806fe:	6213      	str	r3, [r2, #32]
   80700:	4770      	bx	lr
   80702:	bf00      	nop
   80704:	400e0600 	.word	0x400e0600
   80708:	fec8fffc 	.word	0xfec8fffc
   8070c:	01370002 	.word	0x01370002

00080710 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80710:	4b02      	ldr	r3, [pc, #8]	; (8071c <pmc_osc_is_ready_mainck+0xc>)
   80712:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80714:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80718:	4770      	bx	lr
   8071a:	bf00      	nop
   8071c:	400e0600 	.word	0x400e0600

00080720 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80720:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80724:	4b01      	ldr	r3, [pc, #4]	; (8072c <pmc_disable_pllack+0xc>)
   80726:	629a      	str	r2, [r3, #40]	; 0x28
   80728:	4770      	bx	lr
   8072a:	bf00      	nop
   8072c:	400e0600 	.word	0x400e0600

00080730 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80730:	4b02      	ldr	r3, [pc, #8]	; (8073c <pmc_is_locked_pllack+0xc>)
   80732:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80734:	f000 0002 	and.w	r0, r0, #2
   80738:	4770      	bx	lr
   8073a:	bf00      	nop
   8073c:	400e0600 	.word	0x400e0600

00080740 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80740:	282c      	cmp	r0, #44	; 0x2c
   80742:	d820      	bhi.n	80786 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80744:	281f      	cmp	r0, #31
   80746:	d80d      	bhi.n	80764 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80748:	4b12      	ldr	r3, [pc, #72]	; (80794 <pmc_enable_periph_clk+0x54>)
   8074a:	699a      	ldr	r2, [r3, #24]
   8074c:	2301      	movs	r3, #1
   8074e:	4083      	lsls	r3, r0
   80750:	401a      	ands	r2, r3
   80752:	4293      	cmp	r3, r2
   80754:	d019      	beq.n	8078a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80756:	2301      	movs	r3, #1
   80758:	fa03 f000 	lsl.w	r0, r3, r0
   8075c:	4b0d      	ldr	r3, [pc, #52]	; (80794 <pmc_enable_periph_clk+0x54>)
   8075e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80760:	2000      	movs	r0, #0
   80762:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80764:	4b0b      	ldr	r3, [pc, #44]	; (80794 <pmc_enable_periph_clk+0x54>)
   80766:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8076a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8076c:	2301      	movs	r3, #1
   8076e:	4083      	lsls	r3, r0
   80770:	401a      	ands	r2, r3
   80772:	4293      	cmp	r3, r2
   80774:	d00b      	beq.n	8078e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80776:	2301      	movs	r3, #1
   80778:	fa03 f000 	lsl.w	r0, r3, r0
   8077c:	4b05      	ldr	r3, [pc, #20]	; (80794 <pmc_enable_periph_clk+0x54>)
   8077e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80782:	2000      	movs	r0, #0
   80784:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80786:	2001      	movs	r0, #1
   80788:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8078a:	2000      	movs	r0, #0
   8078c:	4770      	bx	lr
   8078e:	2000      	movs	r0, #0
}
   80790:	4770      	bx	lr
   80792:	bf00      	nop
   80794:	400e0600 	.word	0x400e0600

00080798 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80798:	4b0f      	ldr	r3, [pc, #60]	; (807d8 <twi_set_speed+0x40>)
   8079a:	4299      	cmp	r1, r3
   8079c:	d819      	bhi.n	807d2 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8079e:	0049      	lsls	r1, r1, #1
   807a0:	fbb2 f2f1 	udiv	r2, r2, r1
   807a4:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   807a6:	2aff      	cmp	r2, #255	; 0xff
   807a8:	d907      	bls.n	807ba <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   807aa:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   807ac:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   807ae:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   807b0:	2aff      	cmp	r2, #255	; 0xff
   807b2:	d903      	bls.n	807bc <twi_set_speed+0x24>
   807b4:	2b07      	cmp	r3, #7
   807b6:	d1f9      	bne.n	807ac <twi_set_speed+0x14>
   807b8:	e000      	b.n	807bc <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   807ba:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   807bc:	0211      	lsls	r1, r2, #8
   807be:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   807c0:	041b      	lsls	r3, r3, #16
   807c2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   807c6:	430b      	orrs	r3, r1
   807c8:	b2d2      	uxtb	r2, r2
   807ca:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   807cc:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   807ce:	2000      	movs	r0, #0
   807d0:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   807d2:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   807d4:	4770      	bx	lr
   807d6:	bf00      	nop
   807d8:	00061a80 	.word	0x00061a80

000807dc <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   807dc:	b538      	push	{r3, r4, r5, lr}
   807de:	4604      	mov	r4, r0
   807e0:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   807e2:	f04f 33ff 	mov.w	r3, #4294967295
   807e6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   807e8:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   807ea:	2380      	movs	r3, #128	; 0x80
   807ec:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   807ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   807f0:	2308      	movs	r3, #8
   807f2:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   807f4:	2320      	movs	r3, #32
   807f6:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   807f8:	2304      	movs	r3, #4
   807fa:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   807fc:	6849      	ldr	r1, [r1, #4]
   807fe:	682a      	ldr	r2, [r5, #0]
   80800:	4b05      	ldr	r3, [pc, #20]	; (80818 <twi_master_init+0x3c>)
   80802:	4798      	blx	r3
   80804:	2801      	cmp	r0, #1
   80806:	bf14      	ite	ne
   80808:	2000      	movne	r0, #0
   8080a:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   8080c:	7a6b      	ldrb	r3, [r5, #9]
   8080e:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   80810:	bf04      	itt	eq
   80812:	2340      	moveq	r3, #64	; 0x40
   80814:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   80816:	bd38      	pop	{r3, r4, r5, pc}
   80818:	00080799 	.word	0x00080799

0008081c <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   8081c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   80820:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   80822:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   80824:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   80826:	2b00      	cmp	r3, #0
   80828:	d049      	beq.n	808be <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   8082a:	2200      	movs	r2, #0
   8082c:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   8082e:	6848      	ldr	r0, [r1, #4]
   80830:	0200      	lsls	r0, r0, #8
   80832:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   80836:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   8083a:	7c0d      	ldrb	r5, [r1, #16]
   8083c:	042d      	lsls	r5, r5, #16
   8083e:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   80842:	4328      	orrs	r0, r5
   80844:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80846:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80848:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   8084a:	b15a      	cbz	r2, 80864 <twi_master_read+0x48>
		return 0;

	val = addr[0];
   8084c:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   8084e:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   80850:	bfc4      	itt	gt
   80852:	784d      	ldrbgt	r5, [r1, #1]
   80854:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   80858:	2a02      	cmp	r2, #2
   8085a:	dd04      	ble.n	80866 <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   8085c:	788a      	ldrb	r2, [r1, #2]
   8085e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   80862:	e000      	b.n	80866 <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80864:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80866:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   80868:	2b01      	cmp	r3, #1
   8086a:	d104      	bne.n	80876 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   8086c:	2203      	movs	r2, #3
   8086e:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   80870:	f04f 0c01 	mov.w	ip, #1
   80874:	e02b      	b.n	808ce <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   80876:	2201      	movs	r2, #1
   80878:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   8087a:	f04f 0c00 	mov.w	ip, #0
   8087e:	e026      	b.n	808ce <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80880:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80882:	f411 7f80 	tst.w	r1, #256	; 0x100
   80886:	d11c      	bne.n	808c2 <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   80888:	1e55      	subs	r5, r2, #1
   8088a:	b1e2      	cbz	r2, 808c6 <twi_master_read+0xaa>
   8088c:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   8088e:	2b01      	cmp	r3, #1
   80890:	d105      	bne.n	8089e <twi_master_read+0x82>
   80892:	f1bc 0f00 	cmp.w	ip, #0
   80896:	d102      	bne.n	8089e <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   80898:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   8089c:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   8089e:	f011 0f02 	tst.w	r1, #2
   808a2:	d004      	beq.n	808ae <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   808a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
   808a6:	7032      	strb	r2, [r6, #0]

		cnt--;
   808a8:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   808aa:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   808ac:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   808ae:	2b00      	cmp	r3, #0
   808b0:	d1e6      	bne.n	80880 <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   808b2:	6a23      	ldr	r3, [r4, #32]
   808b4:	f013 0f01 	tst.w	r3, #1
   808b8:	d0fb      	beq.n	808b2 <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   808ba:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   808bc:	e014      	b.n	808e8 <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   808be:	2001      	movs	r0, #1
   808c0:	e012      	b.n	808e8 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   808c2:	2005      	movs	r0, #5
   808c4:	e010      	b.n	808e8 <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   808c6:	2009      	movs	r0, #9
   808c8:	e00e      	b.n	808e8 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   808ca:	2005      	movs	r0, #5
   808cc:	e00c      	b.n	808e8 <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   808ce:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   808d0:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   808d4:	d1f9      	bne.n	808ca <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   808d6:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   808da:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   808de:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   808e2:	f643 2798 	movw	r7, #15000	; 0x3a98
   808e6:	e7d2      	b.n	8088e <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   808e8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   808ec:	4770      	bx	lr
   808ee:	bf00      	nop

000808f0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   808f0:	b470      	push	{r4, r5, r6}
   808f2:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   808f4:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   808f6:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   808f8:	2a00      	cmp	r2, #0
   808fa:	d03f      	beq.n	8097c <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   808fc:	2400      	movs	r4, #0
   808fe:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   80900:	7c0e      	ldrb	r6, [r1, #16]
   80902:	0436      	lsls	r6, r6, #16
   80904:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80908:	684d      	ldr	r5, [r1, #4]
   8090a:	022d      	lsls	r5, r5, #8
   8090c:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   80910:	4335      	orrs	r5, r6
   80912:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80914:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80916:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   80918:	b15c      	cbz	r4, 80932 <twi_master_write+0x42>
		return 0;

	val = addr[0];
   8091a:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   8091c:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   8091e:	bfc4      	itt	gt
   80920:	784e      	ldrbgt	r6, [r1, #1]
   80922:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   80926:	2c02      	cmp	r4, #2
   80928:	dd04      	ble.n	80934 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   8092a:	7889      	ldrb	r1, [r1, #2]
   8092c:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   80930:	e000      	b.n	80934 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80932:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80934:	60dd      	str	r5, [r3, #12]
   80936:	e00b      	b.n	80950 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80938:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   8093a:	f411 7f80 	tst.w	r1, #256	; 0x100
   8093e:	d11f      	bne.n	80980 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80940:	f011 0f04 	tst.w	r1, #4
   80944:	d0f8      	beq.n	80938 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   80946:	f810 1b01 	ldrb.w	r1, [r0], #1
   8094a:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   8094c:	3a01      	subs	r2, #1
   8094e:	d007      	beq.n	80960 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   80950:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80952:	f411 7f80 	tst.w	r1, #256	; 0x100
   80956:	d115      	bne.n	80984 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80958:	f011 0f04 	tst.w	r1, #4
   8095c:	d1f3      	bne.n	80946 <twi_master_write+0x56>
   8095e:	e7eb      	b.n	80938 <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   80960:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   80962:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   80966:	d10f      	bne.n	80988 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   80968:	f012 0f04 	tst.w	r2, #4
   8096c:	d0f8      	beq.n	80960 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   8096e:	2202      	movs	r2, #2
   80970:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80972:	6a1a      	ldr	r2, [r3, #32]
   80974:	f012 0f01 	tst.w	r2, #1
   80978:	d0fb      	beq.n	80972 <twi_master_write+0x82>
   8097a:	e006      	b.n	8098a <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   8097c:	2001      	movs	r0, #1
   8097e:	e004      	b.n	8098a <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80980:	2005      	movs	r0, #5
   80982:	e002      	b.n	8098a <twi_master_write+0x9a>
   80984:	2005      	movs	r0, #5
   80986:	e000      	b.n	8098a <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80988:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   8098a:	bc70      	pop	{r4, r5, r6}
   8098c:	4770      	bx	lr
   8098e:	bf00      	nop

00080990 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80990:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80992:	23ac      	movs	r3, #172	; 0xac
   80994:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80996:	680a      	ldr	r2, [r1, #0]
   80998:	684b      	ldr	r3, [r1, #4]
   8099a:	fbb2 f3f3 	udiv	r3, r2, r3
   8099e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   809a0:	1e5c      	subs	r4, r3, #1
   809a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   809a6:	4294      	cmp	r4, r2
   809a8:	d80a      	bhi.n	809c0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   809aa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   809ac:	688b      	ldr	r3, [r1, #8]
   809ae:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   809b0:	f240 2302 	movw	r3, #514	; 0x202
   809b4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   809b8:	2350      	movs	r3, #80	; 0x50
   809ba:	6003      	str	r3, [r0, #0]

	return 0;
   809bc:	2000      	movs	r0, #0
   809be:	e000      	b.n	809c2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   809c0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   809c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   809c6:	4770      	bx	lr

000809c8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   809c8:	6943      	ldr	r3, [r0, #20]
   809ca:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   809ce:	bf1a      	itte	ne
   809d0:	61c1      	strne	r1, [r0, #28]
	return 0;
   809d2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   809d4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   809d6:	4770      	bx	lr

000809d8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   809d8:	6943      	ldr	r3, [r0, #20]
   809da:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   809de:	bf1d      	ittte	ne
   809e0:	6983      	ldrne	r3, [r0, #24]
   809e2:	700b      	strbne	r3, [r1, #0]
	return 0;
   809e4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   809e6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   809e8:	4770      	bx	lr
   809ea:	bf00      	nop

000809ec <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   809ec:	6943      	ldr	r3, [r0, #20]
   809ee:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   809f2:	bf1d      	ittte	ne
   809f4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   809f8:	61c1      	strne	r1, [r0, #28]
	return 0;
   809fa:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   809fc:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   809fe:	4770      	bx	lr

00080a00 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80a00:	6943      	ldr	r3, [r0, #20]
   80a02:	f013 0f01 	tst.w	r3, #1
   80a06:	d005      	beq.n	80a14 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80a08:	6983      	ldr	r3, [r0, #24]
   80a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80a0e:	600b      	str	r3, [r1, #0]

	return 0;
   80a10:	2000      	movs	r0, #0
   80a12:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80a14:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80a16:	4770      	bx	lr

00080a18 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80a18:	e7fe      	b.n	80a18 <Dummy_Handler>
   80a1a:	bf00      	nop

00080a1c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80a1c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80a1e:	4b1e      	ldr	r3, [pc, #120]	; (80a98 <Reset_Handler+0x7c>)
   80a20:	4a1e      	ldr	r2, [pc, #120]	; (80a9c <Reset_Handler+0x80>)
   80a22:	429a      	cmp	r2, r3
   80a24:	d003      	beq.n	80a2e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80a26:	4b1e      	ldr	r3, [pc, #120]	; (80aa0 <Reset_Handler+0x84>)
   80a28:	4a1b      	ldr	r2, [pc, #108]	; (80a98 <Reset_Handler+0x7c>)
   80a2a:	429a      	cmp	r2, r3
   80a2c:	d304      	bcc.n	80a38 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a2e:	4b1d      	ldr	r3, [pc, #116]	; (80aa4 <Reset_Handler+0x88>)
   80a30:	4a1d      	ldr	r2, [pc, #116]	; (80aa8 <Reset_Handler+0x8c>)
   80a32:	429a      	cmp	r2, r3
   80a34:	d30f      	bcc.n	80a56 <Reset_Handler+0x3a>
   80a36:	e01a      	b.n	80a6e <Reset_Handler+0x52>
   80a38:	4b1c      	ldr	r3, [pc, #112]	; (80aac <Reset_Handler+0x90>)
   80a3a:	4c1d      	ldr	r4, [pc, #116]	; (80ab0 <Reset_Handler+0x94>)
   80a3c:	1ae4      	subs	r4, r4, r3
   80a3e:	f024 0403 	bic.w	r4, r4, #3
   80a42:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a44:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80a46:	4814      	ldr	r0, [pc, #80]	; (80a98 <Reset_Handler+0x7c>)
   80a48:	4914      	ldr	r1, [pc, #80]	; (80a9c <Reset_Handler+0x80>)
   80a4a:	585a      	ldr	r2, [r3, r1]
   80a4c:	501a      	str	r2, [r3, r0]
   80a4e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a50:	42a3      	cmp	r3, r4
   80a52:	d1fa      	bne.n	80a4a <Reset_Handler+0x2e>
   80a54:	e7eb      	b.n	80a2e <Reset_Handler+0x12>
   80a56:	4b17      	ldr	r3, [pc, #92]	; (80ab4 <Reset_Handler+0x98>)
   80a58:	4917      	ldr	r1, [pc, #92]	; (80ab8 <Reset_Handler+0x9c>)
   80a5a:	1ac9      	subs	r1, r1, r3
   80a5c:	f021 0103 	bic.w	r1, r1, #3
   80a60:	1d1a      	adds	r2, r3, #4
   80a62:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80a64:	2200      	movs	r2, #0
   80a66:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a6a:	428b      	cmp	r3, r1
   80a6c:	d1fb      	bne.n	80a66 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80a6e:	4a13      	ldr	r2, [pc, #76]	; (80abc <Reset_Handler+0xa0>)
   80a70:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80a74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80a78:	4911      	ldr	r1, [pc, #68]	; (80ac0 <Reset_Handler+0xa4>)
   80a7a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80a7c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80a80:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80a84:	d203      	bcs.n	80a8e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80a86:	688a      	ldr	r2, [r1, #8]
   80a88:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80a8c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80a8e:	4b0d      	ldr	r3, [pc, #52]	; (80ac4 <Reset_Handler+0xa8>)
   80a90:	4798      	blx	r3

	/* Branch to main function */
	main();
   80a92:	4b0d      	ldr	r3, [pc, #52]	; (80ac8 <Reset_Handler+0xac>)
   80a94:	4798      	blx	r3
   80a96:	e7fe      	b.n	80a96 <Reset_Handler+0x7a>
   80a98:	20070000 	.word	0x20070000
   80a9c:	00084008 	.word	0x00084008
   80aa0:	200709a4 	.word	0x200709a4
   80aa4:	20070a78 	.word	0x20070a78
   80aa8:	200709a4 	.word	0x200709a4
   80aac:	20070004 	.word	0x20070004
   80ab0:	200709a7 	.word	0x200709a7
   80ab4:	200709a0 	.word	0x200709a0
   80ab8:	20070a73 	.word	0x20070a73
   80abc:	00080000 	.word	0x00080000
   80ac0:	e000ed00 	.word	0xe000ed00
   80ac4:	00080f8d 	.word	0x00080f8d
   80ac8:	00080e09 	.word	0x00080e09

00080acc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80acc:	4b3e      	ldr	r3, [pc, #248]	; (80bc8 <SystemCoreClockUpdate+0xfc>)
   80ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ad0:	f003 0303 	and.w	r3, r3, #3
   80ad4:	2b03      	cmp	r3, #3
   80ad6:	d85f      	bhi.n	80b98 <SystemCoreClockUpdate+0xcc>
   80ad8:	e8df f003 	tbb	[pc, r3]
   80adc:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80ae0:	4b3a      	ldr	r3, [pc, #232]	; (80bcc <SystemCoreClockUpdate+0x100>)
   80ae2:	695b      	ldr	r3, [r3, #20]
   80ae4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80ae8:	bf14      	ite	ne
   80aea:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80aee:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80af2:	4b37      	ldr	r3, [pc, #220]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80af4:	601a      	str	r2, [r3, #0]
   80af6:	e04f      	b.n	80b98 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80af8:	4b33      	ldr	r3, [pc, #204]	; (80bc8 <SystemCoreClockUpdate+0xfc>)
   80afa:	6a1b      	ldr	r3, [r3, #32]
   80afc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b00:	d003      	beq.n	80b0a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b02:	4a34      	ldr	r2, [pc, #208]	; (80bd4 <SystemCoreClockUpdate+0x108>)
   80b04:	4b32      	ldr	r3, [pc, #200]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80b06:	601a      	str	r2, [r3, #0]
   80b08:	e046      	b.n	80b98 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b0a:	4a33      	ldr	r2, [pc, #204]	; (80bd8 <SystemCoreClockUpdate+0x10c>)
   80b0c:	4b30      	ldr	r3, [pc, #192]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80b0e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b10:	4b2d      	ldr	r3, [pc, #180]	; (80bc8 <SystemCoreClockUpdate+0xfc>)
   80b12:	6a1b      	ldr	r3, [r3, #32]
   80b14:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b18:	2b10      	cmp	r3, #16
   80b1a:	d002      	beq.n	80b22 <SystemCoreClockUpdate+0x56>
   80b1c:	2b20      	cmp	r3, #32
   80b1e:	d004      	beq.n	80b2a <SystemCoreClockUpdate+0x5e>
   80b20:	e03a      	b.n	80b98 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80b22:	4a2e      	ldr	r2, [pc, #184]	; (80bdc <SystemCoreClockUpdate+0x110>)
   80b24:	4b2a      	ldr	r3, [pc, #168]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80b26:	601a      	str	r2, [r3, #0]
				break;
   80b28:	e036      	b.n	80b98 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80b2a:	4a2a      	ldr	r2, [pc, #168]	; (80bd4 <SystemCoreClockUpdate+0x108>)
   80b2c:	4b28      	ldr	r3, [pc, #160]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80b2e:	601a      	str	r2, [r3, #0]
				break;
   80b30:	e032      	b.n	80b98 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b32:	4b25      	ldr	r3, [pc, #148]	; (80bc8 <SystemCoreClockUpdate+0xfc>)
   80b34:	6a1b      	ldr	r3, [r3, #32]
   80b36:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b3a:	d003      	beq.n	80b44 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b3c:	4a25      	ldr	r2, [pc, #148]	; (80bd4 <SystemCoreClockUpdate+0x108>)
   80b3e:	4b24      	ldr	r3, [pc, #144]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80b40:	601a      	str	r2, [r3, #0]
   80b42:	e012      	b.n	80b6a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b44:	4a24      	ldr	r2, [pc, #144]	; (80bd8 <SystemCoreClockUpdate+0x10c>)
   80b46:	4b22      	ldr	r3, [pc, #136]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80b48:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b4a:	4b1f      	ldr	r3, [pc, #124]	; (80bc8 <SystemCoreClockUpdate+0xfc>)
   80b4c:	6a1b      	ldr	r3, [r3, #32]
   80b4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b52:	2b10      	cmp	r3, #16
   80b54:	d002      	beq.n	80b5c <SystemCoreClockUpdate+0x90>
   80b56:	2b20      	cmp	r3, #32
   80b58:	d004      	beq.n	80b64 <SystemCoreClockUpdate+0x98>
   80b5a:	e006      	b.n	80b6a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80b5c:	4a1f      	ldr	r2, [pc, #124]	; (80bdc <SystemCoreClockUpdate+0x110>)
   80b5e:	4b1c      	ldr	r3, [pc, #112]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80b60:	601a      	str	r2, [r3, #0]
				break;
   80b62:	e002      	b.n	80b6a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80b64:	4a1b      	ldr	r2, [pc, #108]	; (80bd4 <SystemCoreClockUpdate+0x108>)
   80b66:	4b1a      	ldr	r3, [pc, #104]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80b68:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80b6a:	4b17      	ldr	r3, [pc, #92]	; (80bc8 <SystemCoreClockUpdate+0xfc>)
   80b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b6e:	f003 0303 	and.w	r3, r3, #3
   80b72:	2b02      	cmp	r3, #2
   80b74:	d10d      	bne.n	80b92 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b76:	4b14      	ldr	r3, [pc, #80]	; (80bc8 <SystemCoreClockUpdate+0xfc>)
   80b78:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80b7c:	4b14      	ldr	r3, [pc, #80]	; (80bd0 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b7e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80b82:	681a      	ldr	r2, [r3, #0]
   80b84:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b88:	b2c9      	uxtb	r1, r1
   80b8a:	fbb2 f2f1 	udiv	r2, r2, r1
   80b8e:	601a      	str	r2, [r3, #0]
   80b90:	e002      	b.n	80b98 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80b92:	4a13      	ldr	r2, [pc, #76]	; (80be0 <SystemCoreClockUpdate+0x114>)
   80b94:	4b0e      	ldr	r3, [pc, #56]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80b96:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80b98:	4b0b      	ldr	r3, [pc, #44]	; (80bc8 <SystemCoreClockUpdate+0xfc>)
   80b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ba0:	2b70      	cmp	r3, #112	; 0x70
   80ba2:	d107      	bne.n	80bb4 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80ba4:	4b0a      	ldr	r3, [pc, #40]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80ba6:	681a      	ldr	r2, [r3, #0]
   80ba8:	490e      	ldr	r1, [pc, #56]	; (80be4 <SystemCoreClockUpdate+0x118>)
   80baa:	fba1 0202 	umull	r0, r2, r1, r2
   80bae:	0852      	lsrs	r2, r2, #1
   80bb0:	601a      	str	r2, [r3, #0]
   80bb2:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80bb4:	4b04      	ldr	r3, [pc, #16]	; (80bc8 <SystemCoreClockUpdate+0xfc>)
   80bb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80bb8:	4b05      	ldr	r3, [pc, #20]	; (80bd0 <SystemCoreClockUpdate+0x104>)
   80bba:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80bbe:	681a      	ldr	r2, [r3, #0]
   80bc0:	40ca      	lsrs	r2, r1
   80bc2:	601a      	str	r2, [r3, #0]
   80bc4:	4770      	bx	lr
   80bc6:	bf00      	nop
   80bc8:	400e0600 	.word	0x400e0600
   80bcc:	400e1a10 	.word	0x400e1a10
   80bd0:	20070138 	.word	0x20070138
   80bd4:	00b71b00 	.word	0x00b71b00
   80bd8:	003d0900 	.word	0x003d0900
   80bdc:	007a1200 	.word	0x007a1200
   80be0:	0e4e1c00 	.word	0x0e4e1c00
   80be4:	aaaaaaab 	.word	0xaaaaaaab

00080be8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80be8:	4b09      	ldr	r3, [pc, #36]	; (80c10 <_sbrk+0x28>)
   80bea:	681b      	ldr	r3, [r3, #0]
   80bec:	b913      	cbnz	r3, 80bf4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80bee:	4a09      	ldr	r2, [pc, #36]	; (80c14 <_sbrk+0x2c>)
   80bf0:	4b07      	ldr	r3, [pc, #28]	; (80c10 <_sbrk+0x28>)
   80bf2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80bf4:	4b06      	ldr	r3, [pc, #24]	; (80c10 <_sbrk+0x28>)
   80bf6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80bf8:	181a      	adds	r2, r3, r0
   80bfa:	4907      	ldr	r1, [pc, #28]	; (80c18 <_sbrk+0x30>)
   80bfc:	4291      	cmp	r1, r2
   80bfe:	db04      	blt.n	80c0a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80c00:	4610      	mov	r0, r2
   80c02:	4a03      	ldr	r2, [pc, #12]	; (80c10 <_sbrk+0x28>)
   80c04:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80c06:	4618      	mov	r0, r3
   80c08:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80c0a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80c0e:	4770      	bx	lr
   80c10:	20070a30 	.word	0x20070a30
   80c14:	20072a78 	.word	0x20072a78
   80c18:	20087ffc 	.word	0x20087ffc

00080c1c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80c1c:	f04f 30ff 	mov.w	r0, #4294967295
   80c20:	4770      	bx	lr
   80c22:	bf00      	nop

00080c24 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80c28:	604b      	str	r3, [r1, #4]

	return 0;
}
   80c2a:	2000      	movs	r0, #0
   80c2c:	4770      	bx	lr
   80c2e:	bf00      	nop

00080c30 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80c30:	2001      	movs	r0, #1
   80c32:	4770      	bx	lr

00080c34 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80c34:	2000      	movs	r0, #0
   80c36:	4770      	bx	lr

00080c38 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80c38:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c3a:	b083      	sub	sp, #12
   80c3c:	4604      	mov	r4, r0
   80c3e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80c40:	2300      	movs	r3, #0
   80c42:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80c44:	4b1f      	ldr	r3, [pc, #124]	; (80cc4 <usart_serial_getchar+0x8c>)
   80c46:	4298      	cmp	r0, r3
   80c48:	d107      	bne.n	80c5a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80c4a:	461f      	mov	r7, r3
   80c4c:	4e1e      	ldr	r6, [pc, #120]	; (80cc8 <usart_serial_getchar+0x90>)
   80c4e:	4638      	mov	r0, r7
   80c50:	4629      	mov	r1, r5
   80c52:	47b0      	blx	r6
   80c54:	2800      	cmp	r0, #0
   80c56:	d1fa      	bne.n	80c4e <usart_serial_getchar+0x16>
   80c58:	e019      	b.n	80c8e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80c5a:	4b1c      	ldr	r3, [pc, #112]	; (80ccc <usart_serial_getchar+0x94>)
   80c5c:	4298      	cmp	r0, r3
   80c5e:	d109      	bne.n	80c74 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80c60:	461f      	mov	r7, r3
   80c62:	4e1b      	ldr	r6, [pc, #108]	; (80cd0 <usart_serial_getchar+0x98>)
   80c64:	4638      	mov	r0, r7
   80c66:	a901      	add	r1, sp, #4
   80c68:	47b0      	blx	r6
   80c6a:	2800      	cmp	r0, #0
   80c6c:	d1fa      	bne.n	80c64 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80c6e:	9b01      	ldr	r3, [sp, #4]
   80c70:	702b      	strb	r3, [r5, #0]
   80c72:	e019      	b.n	80ca8 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80c74:	4b17      	ldr	r3, [pc, #92]	; (80cd4 <usart_serial_getchar+0x9c>)
   80c76:	4298      	cmp	r0, r3
   80c78:	d109      	bne.n	80c8e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80c7a:	461e      	mov	r6, r3
   80c7c:	4c14      	ldr	r4, [pc, #80]	; (80cd0 <usart_serial_getchar+0x98>)
   80c7e:	4630      	mov	r0, r6
   80c80:	a901      	add	r1, sp, #4
   80c82:	47a0      	blx	r4
   80c84:	2800      	cmp	r0, #0
   80c86:	d1fa      	bne.n	80c7e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80c88:	9b01      	ldr	r3, [sp, #4]
   80c8a:	702b      	strb	r3, [r5, #0]
   80c8c:	e018      	b.n	80cc0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80c8e:	4b12      	ldr	r3, [pc, #72]	; (80cd8 <usart_serial_getchar+0xa0>)
   80c90:	429c      	cmp	r4, r3
   80c92:	d109      	bne.n	80ca8 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80c94:	461e      	mov	r6, r3
   80c96:	4c0e      	ldr	r4, [pc, #56]	; (80cd0 <usart_serial_getchar+0x98>)
   80c98:	4630      	mov	r0, r6
   80c9a:	a901      	add	r1, sp, #4
   80c9c:	47a0      	blx	r4
   80c9e:	2800      	cmp	r0, #0
   80ca0:	d1fa      	bne.n	80c98 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80ca2:	9b01      	ldr	r3, [sp, #4]
   80ca4:	702b      	strb	r3, [r5, #0]
   80ca6:	e00b      	b.n	80cc0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ca8:	4b0c      	ldr	r3, [pc, #48]	; (80cdc <usart_serial_getchar+0xa4>)
   80caa:	429c      	cmp	r4, r3
   80cac:	d108      	bne.n	80cc0 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80cae:	461e      	mov	r6, r3
   80cb0:	4c07      	ldr	r4, [pc, #28]	; (80cd0 <usart_serial_getchar+0x98>)
   80cb2:	4630      	mov	r0, r6
   80cb4:	a901      	add	r1, sp, #4
   80cb6:	47a0      	blx	r4
   80cb8:	2800      	cmp	r0, #0
   80cba:	d1fa      	bne.n	80cb2 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80cbc:	9b01      	ldr	r3, [sp, #4]
   80cbe:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80cc0:	b003      	add	sp, #12
   80cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80cc4:	400e0800 	.word	0x400e0800
   80cc8:	000809d9 	.word	0x000809d9
   80ccc:	40098000 	.word	0x40098000
   80cd0:	00080a01 	.word	0x00080a01
   80cd4:	4009c000 	.word	0x4009c000
   80cd8:	400a0000 	.word	0x400a0000
   80cdc:	400a4000 	.word	0x400a4000

00080ce0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80ce0:	b570      	push	{r4, r5, r6, lr}
   80ce2:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80ce4:	4b21      	ldr	r3, [pc, #132]	; (80d6c <usart_serial_putchar+0x8c>)
   80ce6:	4298      	cmp	r0, r3
   80ce8:	d107      	bne.n	80cfa <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80cea:	461e      	mov	r6, r3
   80cec:	4d20      	ldr	r5, [pc, #128]	; (80d70 <usart_serial_putchar+0x90>)
   80cee:	4630      	mov	r0, r6
   80cf0:	4621      	mov	r1, r4
   80cf2:	47a8      	blx	r5
   80cf4:	2800      	cmp	r0, #0
   80cf6:	d1fa      	bne.n	80cee <usart_serial_putchar+0xe>
   80cf8:	e02b      	b.n	80d52 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80cfa:	4b1e      	ldr	r3, [pc, #120]	; (80d74 <usart_serial_putchar+0x94>)
   80cfc:	4298      	cmp	r0, r3
   80cfe:	d107      	bne.n	80d10 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80d00:	461e      	mov	r6, r3
   80d02:	4d1d      	ldr	r5, [pc, #116]	; (80d78 <usart_serial_putchar+0x98>)
   80d04:	4630      	mov	r0, r6
   80d06:	4621      	mov	r1, r4
   80d08:	47a8      	blx	r5
   80d0a:	2800      	cmp	r0, #0
   80d0c:	d1fa      	bne.n	80d04 <usart_serial_putchar+0x24>
   80d0e:	e022      	b.n	80d56 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80d10:	4b1a      	ldr	r3, [pc, #104]	; (80d7c <usart_serial_putchar+0x9c>)
   80d12:	4298      	cmp	r0, r3
   80d14:	d107      	bne.n	80d26 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80d16:	461e      	mov	r6, r3
   80d18:	4d17      	ldr	r5, [pc, #92]	; (80d78 <usart_serial_putchar+0x98>)
   80d1a:	4630      	mov	r0, r6
   80d1c:	4621      	mov	r1, r4
   80d1e:	47a8      	blx	r5
   80d20:	2800      	cmp	r0, #0
   80d22:	d1fa      	bne.n	80d1a <usart_serial_putchar+0x3a>
   80d24:	e019      	b.n	80d5a <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80d26:	4b16      	ldr	r3, [pc, #88]	; (80d80 <usart_serial_putchar+0xa0>)
   80d28:	4298      	cmp	r0, r3
   80d2a:	d107      	bne.n	80d3c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80d2c:	461e      	mov	r6, r3
   80d2e:	4d12      	ldr	r5, [pc, #72]	; (80d78 <usart_serial_putchar+0x98>)
   80d30:	4630      	mov	r0, r6
   80d32:	4621      	mov	r1, r4
   80d34:	47a8      	blx	r5
   80d36:	2800      	cmp	r0, #0
   80d38:	d1fa      	bne.n	80d30 <usart_serial_putchar+0x50>
   80d3a:	e010      	b.n	80d5e <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80d3c:	4b11      	ldr	r3, [pc, #68]	; (80d84 <usart_serial_putchar+0xa4>)
   80d3e:	4298      	cmp	r0, r3
   80d40:	d10f      	bne.n	80d62 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80d42:	461e      	mov	r6, r3
   80d44:	4d0c      	ldr	r5, [pc, #48]	; (80d78 <usart_serial_putchar+0x98>)
   80d46:	4630      	mov	r0, r6
   80d48:	4621      	mov	r1, r4
   80d4a:	47a8      	blx	r5
   80d4c:	2800      	cmp	r0, #0
   80d4e:	d1fa      	bne.n	80d46 <usart_serial_putchar+0x66>
   80d50:	e009      	b.n	80d66 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80d52:	2001      	movs	r0, #1
   80d54:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80d56:	2001      	movs	r0, #1
   80d58:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80d5a:	2001      	movs	r0, #1
   80d5c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80d5e:	2001      	movs	r0, #1
   80d60:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80d62:	2000      	movs	r0, #0
   80d64:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80d66:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80d68:	bd70      	pop	{r4, r5, r6, pc}
   80d6a:	bf00      	nop
   80d6c:	400e0800 	.word	0x400e0800
   80d70:	000809c9 	.word	0x000809c9
   80d74:	40098000 	.word	0x40098000
   80d78:	000809ed 	.word	0x000809ed
   80d7c:	4009c000 	.word	0x4009c000
   80d80:	400a0000 	.word	0x400a0000
   80d84:	400a4000 	.word	0x400a4000

00080d88 <configure_console>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   80d88:	b530      	push	{r4, r5, lr}
   80d8a:	b085      	sub	sp, #20
   80d8c:	2008      	movs	r0, #8
   80d8e:	4d13      	ldr	r5, [pc, #76]	; (80ddc <configure_console+0x54>)
   80d90:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80d92:	4c13      	ldr	r4, [pc, #76]	; (80de0 <configure_console+0x58>)
   80d94:	4b13      	ldr	r3, [pc, #76]	; (80de4 <configure_console+0x5c>)
   80d96:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80d98:	4a13      	ldr	r2, [pc, #76]	; (80de8 <configure_console+0x60>)
   80d9a:	4b14      	ldr	r3, [pc, #80]	; (80dec <configure_console+0x64>)
   80d9c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80d9e:	4a14      	ldr	r2, [pc, #80]	; (80df0 <configure_console+0x68>)
   80da0:	4b14      	ldr	r3, [pc, #80]	; (80df4 <configure_console+0x6c>)
   80da2:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80da4:	4b14      	ldr	r3, [pc, #80]	; (80df8 <configure_console+0x70>)
   80da6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80da8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80dac:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80db2:	9303      	str	r3, [sp, #12]
   80db4:	2008      	movs	r0, #8
   80db6:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80db8:	4620      	mov	r0, r4
   80dba:	a901      	add	r1, sp, #4
   80dbc:	4b0f      	ldr	r3, [pc, #60]	; (80dfc <configure_console+0x74>)
   80dbe:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80dc0:	4d0f      	ldr	r5, [pc, #60]	; (80e00 <configure_console+0x78>)
   80dc2:	682b      	ldr	r3, [r5, #0]
   80dc4:	6898      	ldr	r0, [r3, #8]
   80dc6:	2100      	movs	r1, #0
   80dc8:	4c0e      	ldr	r4, [pc, #56]	; (80e04 <configure_console+0x7c>)
   80dca:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80dcc:	682b      	ldr	r3, [r5, #0]
   80dce:	6858      	ldr	r0, [r3, #4]
   80dd0:	2100      	movs	r1, #0
   80dd2:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	return 0;
   80dd4:	2000      	movs	r0, #0
   80dd6:	b005      	add	sp, #20
   80dd8:	bd30      	pop	{r4, r5, pc}
   80dda:	bf00      	nop
   80ddc:	00080741 	.word	0x00080741
   80de0:	400e0800 	.word	0x400e0800
   80de4:	20070a70 	.word	0x20070a70
   80de8:	00080ce1 	.word	0x00080ce1
   80dec:	20070a6c 	.word	0x20070a6c
   80df0:	00080c39 	.word	0x00080c39
   80df4:	20070a68 	.word	0x20070a68
   80df8:	0501bd00 	.word	0x0501bd00
   80dfc:	00080991 	.word	0x00080991
   80e00:	20070568 	.word	0x20070568
   80e04:	00081099 	.word	0x00081099

00080e08 <main>:
	0x4F,
	0x4F
};

int main(void)
{
   80e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80e0c:	b090      	sub	sp, #64	; 0x40
	sysclk_init();
   80e0e:	4b4b      	ldr	r3, [pc, #300]	; (80f3c <main+0x134>)
   80e10:	4798      	blx	r3
	board_init();
   80e12:	4b4b      	ldr	r3, [pc, #300]	; (80f40 <main+0x138>)
   80e14:	4798      	blx	r3
	configure_console();
   80e16:	4b4b      	ldr	r3, [pc, #300]	; (80f44 <main+0x13c>)
   80e18:	4798      	blx	r3
	printf("Startar");
   80e1a:	484b      	ldr	r0, [pc, #300]	; (80f48 <main+0x140>)
   80e1c:	4b4b      	ldr	r3, [pc, #300]	; (80f4c <main+0x144>)
   80e1e:	4798      	blx	r3
   80e20:	240a      	movs	r4, #10
	// configure_console();
	
	/* irq_initialize_vectors(); */
	for (int i = 0; i < 10; i++)
	{
		LED_On(LED0_GPIO);
   80e22:	4f4b      	ldr	r7, [pc, #300]	; (80f50 <main+0x148>)
		delay_ms(100);
   80e24:	4e4b      	ldr	r6, [pc, #300]	; (80f54 <main+0x14c>)
   80e26:	4d4c      	ldr	r5, [pc, #304]	; (80f58 <main+0x150>)
	// configure_console();
	
	/* irq_initialize_vectors(); */
	for (int i = 0; i < 10; i++)
	{
		LED_On(LED0_GPIO);
   80e28:	203b      	movs	r0, #59	; 0x3b
   80e2a:	47b8      	blx	r7
		delay_ms(100);
   80e2c:	4630      	mov	r0, r6
   80e2e:	47a8      	blx	r5
		LED_Off(LED0_GPIO);
   80e30:	203b      	movs	r0, #59	; 0x3b
   80e32:	4b4a      	ldr	r3, [pc, #296]	; (80f5c <main+0x154>)
   80e34:	4798      	blx	r3
		delay_ms(100);
   80e36:	4630      	mov	r0, r6
   80e38:	47a8      	blx	r5
	printf("Startar");
	
	// configure_console();
	
	/* irq_initialize_vectors(); */
	for (int i = 0; i < 10; i++)
   80e3a:	3c01      	subs	r4, #1
   80e3c:	d1f4      	bne.n	80e28 <main+0x20>
		delay_ms(100);
		LED_Off(LED0_GPIO);
		delay_ms(100);
	}
	
	delay_ms(1000);
   80e3e:	4848      	ldr	r0, [pc, #288]	; (80f60 <main+0x158>)
   80e40:	4b45      	ldr	r3, [pc, #276]	; (80f58 <main+0x150>)
   80e42:	4798      	blx	r3
	
	
	/* TWI master initialization options. */
	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   80e44:	f24c 3350 	movw	r3, #50000	; 0xc350
   80e48:	930e      	str	r3, [sp, #56]	; 0x38
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   80e4a:	4b46      	ldr	r3, [pc, #280]	; (80f64 <main+0x15c>)
   80e4c:	930d      	str	r3, [sp, #52]	; 0x34
	p_opt->smbus      = 0;
   80e4e:	2300      	movs	r3, #0
   80e50:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   80e54:	2016      	movs	r0, #22
   80e56:	4b44      	ldr	r3, [pc, #272]	; (80f68 <main+0x160>)
   80e58:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80e5a:	4844      	ldr	r0, [pc, #272]	; (80f6c <main+0x164>)
   80e5c:	a90d      	add	r1, sp, #52	; 0x34
   80e5e:	4b44      	ldr	r3, [pc, #272]	; (80f70 <main+0x168>)
   80e60:	4798      	blx	r3
   80e62:	240a      	movs	r4, #10

	/* Initialize the TWI master driver. */
	twi_master_setup(TWI0, &opt);
	for (int i = 0; i < 10; i++)
	{
		LED_On(LED0_GPIO);
   80e64:	4f3a      	ldr	r7, [pc, #232]	; (80f50 <main+0x148>)
		delay_ms(100);
   80e66:	4e3b      	ldr	r6, [pc, #236]	; (80f54 <main+0x14c>)
   80e68:	4d3b      	ldr	r5, [pc, #236]	; (80f58 <main+0x150>)

	/* Initialize the TWI master driver. */
	twi_master_setup(TWI0, &opt);
	for (int i = 0; i < 10; i++)
	{
		LED_On(LED0_GPIO);
   80e6a:	203b      	movs	r0, #59	; 0x3b
   80e6c:	47b8      	blx	r7
		delay_ms(100);
   80e6e:	4630      	mov	r0, r6
   80e70:	47a8      	blx	r5
		LED_Off(LED0_GPIO);
   80e72:	203b      	movs	r0, #59	; 0x3b
   80e74:	4b39      	ldr	r3, [pc, #228]	; (80f5c <main+0x154>)
   80e76:	4798      	blx	r3
		delay_ms(100);
   80e78:	4630      	mov	r0, r6
   80e7a:	47a8      	blx	r5
	twi_master_options_t opt;
	opt.speed = TWI_SPEED;

	/* Initialize the TWI master driver. */
	twi_master_setup(TWI0, &opt);
	for (int i = 0; i < 10; i++)
   80e7c:	3c01      	subs	r4, #1
   80e7e:	d1f4      	bne.n	80e6a <main+0x62>
		LED_On(LED0_GPIO);
		delay_ms(100);
		LED_Off(LED0_GPIO);
		delay_ms(100);
	}
	delay_ms(1000);
   80e80:	4837      	ldr	r0, [pc, #220]	; (80f60 <main+0x158>)
   80e82:	4b35      	ldr	r3, [pc, #212]	; (80f58 <main+0x150>)
   80e84:	4798      	blx	r3
	
	twi_package_t packet = {
   80e86:	2300      	movs	r3, #0
   80e88:	9308      	str	r3, [sp, #32]
   80e8a:	9309      	str	r3, [sp, #36]	; 0x24
   80e8c:	930c      	str	r3, [sp, #48]	; 0x30
   80e8e:	4b39      	ldr	r3, [pc, #228]	; (80f74 <main+0x16c>)
   80e90:	930a      	str	r3, [sp, #40]	; 0x28
   80e92:	2305      	movs	r3, #5
   80e94:	930b      	str	r3, [sp, #44]	; 0x2c
   80e96:	2350      	movs	r3, #80	; 0x50
   80e98:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   80e9c:	240a      	movs	r4, #10
		.length       = sizeof(test_pattern)   // transfer data size (bytes)
	};

	for (int i = 0; i < 10; i++)
	{
		LED_On(LED0_GPIO);
   80e9e:	4f2c      	ldr	r7, [pc, #176]	; (80f50 <main+0x148>)
		delay_ms(100);
   80ea0:	4e2c      	ldr	r6, [pc, #176]	; (80f54 <main+0x14c>)
   80ea2:	4d2d      	ldr	r5, [pc, #180]	; (80f58 <main+0x150>)
		.length       = sizeof(test_pattern)   // transfer data size (bytes)
	};

	for (int i = 0; i < 10; i++)
	{
		LED_On(LED0_GPIO);
   80ea4:	203b      	movs	r0, #59	; 0x3b
   80ea6:	47b8      	blx	r7
		delay_ms(100);
   80ea8:	4630      	mov	r0, r6
   80eaa:	47a8      	blx	r5
		LED_Off(LED0_GPIO);
   80eac:	203b      	movs	r0, #59	; 0x3b
   80eae:	4b2b      	ldr	r3, [pc, #172]	; (80f5c <main+0x154>)
   80eb0:	4798      	blx	r3
		delay_ms(100);
   80eb2:	4630      	mov	r0, r6
   80eb4:	47a8      	blx	r5
		.chip         = EEPROM_BUS_ADDR,      // TWI slave bus address
		.buffer       = (void*) test_pattern, // transfer data source buffer
		.length       = sizeof(test_pattern)   // transfer data size (bytes)
	};

	for (int i = 0; i < 10; i++)
   80eb6:	3c01      	subs	r4, #1
   80eb8:	d1f4      	bne.n	80ea4 <main+0x9c>
		LED_Off(LED0_GPIO);
		delay_ms(100);
	}
	
	// Perform a multi-byte write access then check the result.
	while (twi_master_write(TWI0, &packet) != TWI_SUCCESS);
   80eba:	4d2c      	ldr	r5, [pc, #176]	; (80f6c <main+0x164>)
   80ebc:	4c2e      	ldr	r4, [pc, #184]	; (80f78 <main+0x170>)
   80ebe:	4628      	mov	r0, r5
   80ec0:	a908      	add	r1, sp, #32
   80ec2:	47a0      	blx	r4
   80ec4:	2800      	cmp	r0, #0
   80ec6:	d1fa      	bne.n	80ebe <main+0xb6>
   80ec8:	240a      	movs	r4, #10
	for (int i = 0; i < 10; i++)
	{
		LED_On(LED0_GPIO);
   80eca:	4f21      	ldr	r7, [pc, #132]	; (80f50 <main+0x148>)
		delay_ms(100);
   80ecc:	4e21      	ldr	r6, [pc, #132]	; (80f54 <main+0x14c>)
   80ece:	4d22      	ldr	r5, [pc, #136]	; (80f58 <main+0x150>)
	
	// Perform a multi-byte write access then check the result.
	while (twi_master_write(TWI0, &packet) != TWI_SUCCESS);
	for (int i = 0; i < 10; i++)
	{
		LED_On(LED0_GPIO);
   80ed0:	203b      	movs	r0, #59	; 0x3b
   80ed2:	47b8      	blx	r7
		delay_ms(100);
   80ed4:	4630      	mov	r0, r6
   80ed6:	47a8      	blx	r5
		LED_Off(LED0_GPIO);
   80ed8:	203b      	movs	r0, #59	; 0x3b
   80eda:	4b20      	ldr	r3, [pc, #128]	; (80f5c <main+0x154>)
   80edc:	4798      	blx	r3
		delay_ms(100);
   80ede:	4630      	mov	r0, r6
   80ee0:	47a8      	blx	r5
		delay_ms(100);
	}
	
	// Perform a multi-byte write access then check the result.
	while (twi_master_write(TWI0, &packet) != TWI_SUCCESS);
	for (int i = 0; i < 10; i++)
   80ee2:	3c01      	subs	r4, #1
   80ee4:	d1f4      	bne.n	80ed0 <main+0xc8>
		LED_Off(LED0_GPIO);
		delay_ms(100);
	}
	uint8_t data_received[sizeof(test_pattern)];

	twi_package_t packet_received = {
   80ee6:	2300      	movs	r3, #0
   80ee8:	9301      	str	r3, [sp, #4]
   80eea:	9302      	str	r3, [sp, #8]
   80eec:	9305      	str	r3, [sp, #20]
   80eee:	ab06      	add	r3, sp, #24
   80ef0:	9303      	str	r3, [sp, #12]
   80ef2:	2305      	movs	r3, #5
   80ef4:	9304      	str	r3, [sp, #16]
   80ef6:	2350      	movs	r3, #80	; 0x50
   80ef8:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = data_received,        // transfer data destination buffer
		.length       = sizeof(test_pattern)   // transfer data size (bytes)
	};

	// Perform a multi-byte read access then check the result.
	while(twi_master_read(TWI0, &packet_received) != TWI_SUCCESS);
   80efc:	4d1b      	ldr	r5, [pc, #108]	; (80f6c <main+0x164>)
   80efe:	4c1f      	ldr	r4, [pc, #124]	; (80f7c <main+0x174>)
   80f00:	4628      	mov	r0, r5
   80f02:	a901      	add	r1, sp, #4
   80f04:	47a0      	blx	r4
   80f06:	2800      	cmp	r0, #0
   80f08:	d1fa      	bne.n	80f00 <main+0xf8>
   80f0a:	f10d 0517 	add.w	r5, sp, #23
   80f0e:	f10d 081c 	add.w	r8, sp, #28
	
		for (uint32_t i = 0 ; i < sizeof(data_received); i++) {
			printf("Tar emot:%c\n\r", data_received[i]);
   80f12:	4f1b      	ldr	r7, [pc, #108]	; (80f80 <main+0x178>)
   80f14:	4c0d      	ldr	r4, [pc, #52]	; (80f4c <main+0x144>)
			if (data_received[0]==0x57)
			{
				printf("Data Correct\n\r");
			}
			else{
				printf("Data incorrect\n\r");
   80f16:	4e1b      	ldr	r6, [pc, #108]	; (80f84 <main+0x17c>)

	// Perform a multi-byte read access then check the result.
	while(twi_master_read(TWI0, &packet_received) != TWI_SUCCESS);
	
		for (uint32_t i = 0 ; i < sizeof(data_received); i++) {
			printf("Tar emot:%c\n\r", data_received[i]);
   80f18:	4638      	mov	r0, r7
   80f1a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   80f1e:	47a0      	blx	r4
			// 		if (data_received[i] != test_pattern[i]) {
			// 			// Error
			// 			printf("Error");
			// 			while(1);
			// 		}
			if (data_received[0]==0x57)
   80f20:	f89d 3018 	ldrb.w	r3, [sp, #24]
   80f24:	2b57      	cmp	r3, #87	; 0x57
			{
				printf("Data Correct\n\r");
   80f26:	bf0c      	ite	eq
   80f28:	4817      	ldreq	r0, [pc, #92]	; (80f88 <main+0x180>)
			}
			else{
				printf("Data incorrect\n\r");
   80f2a:	4630      	movne	r0, r6
   80f2c:	47a0      	blx	r4
	};

	// Perform a multi-byte read access then check the result.
	while(twi_master_read(TWI0, &packet_received) != TWI_SUCCESS);
	
		for (uint32_t i = 0 ; i < sizeof(data_received); i++) {
   80f2e:	4545      	cmp	r5, r8
   80f30:	d1f2      	bne.n	80f18 <main+0x110>
	 

	// Verify that the received data matches the sent data.
	

	LED_On(LED0_GPIO);
   80f32:	203b      	movs	r0, #59	; 0x3b
   80f34:	4b06      	ldr	r3, [pc, #24]	; (80f50 <main+0x148>)
   80f36:	4798      	blx	r3
   80f38:	e7fe      	b.n	80f38 <main+0x130>
   80f3a:	bf00      	nop
   80f3c:	00080149 	.word	0x00080149
   80f40:	00080241 	.word	0x00080241
   80f44:	00080d89 	.word	0x00080d89
   80f48:	00083f48 	.word	0x00083f48
   80f4c:	00080fdd 	.word	0x00080fdd
   80f50:	00080321 	.word	0x00080321
   80f54:	000927c0 	.word	0x000927c0
   80f58:	20070001 	.word	0x20070001
   80f5c:	000802e1 	.word	0x000802e1
   80f60:	005b8d80 	.word	0x005b8d80
   80f64:	0501bd00 	.word	0x0501bd00
   80f68:	00080741 	.word	0x00080741
   80f6c:	4008c000 	.word	0x4008c000
   80f70:	000807dd 	.word	0x000807dd
   80f74:	00083f40 	.word	0x00083f40
   80f78:	000808f1 	.word	0x000808f1
   80f7c:	0008081d 	.word	0x0008081d
   80f80:	00083f50 	.word	0x00083f50
   80f84:	00083f70 	.word	0x00083f70
   80f88:	00083f60 	.word	0x00083f60

00080f8c <__libc_init_array>:
   80f8c:	b570      	push	{r4, r5, r6, lr}
   80f8e:	4e0f      	ldr	r6, [pc, #60]	; (80fcc <__libc_init_array+0x40>)
   80f90:	4d0f      	ldr	r5, [pc, #60]	; (80fd0 <__libc_init_array+0x44>)
   80f92:	1b76      	subs	r6, r6, r5
   80f94:	10b6      	asrs	r6, r6, #2
   80f96:	d007      	beq.n	80fa8 <__libc_init_array+0x1c>
   80f98:	3d04      	subs	r5, #4
   80f9a:	2400      	movs	r4, #0
   80f9c:	3401      	adds	r4, #1
   80f9e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80fa2:	4798      	blx	r3
   80fa4:	42a6      	cmp	r6, r4
   80fa6:	d1f9      	bne.n	80f9c <__libc_init_array+0x10>
   80fa8:	4e0a      	ldr	r6, [pc, #40]	; (80fd4 <__libc_init_array+0x48>)
   80faa:	4d0b      	ldr	r5, [pc, #44]	; (80fd8 <__libc_init_array+0x4c>)
   80fac:	f003 f816 	bl	83fdc <_init>
   80fb0:	1b76      	subs	r6, r6, r5
   80fb2:	10b6      	asrs	r6, r6, #2
   80fb4:	d008      	beq.n	80fc8 <__libc_init_array+0x3c>
   80fb6:	3d04      	subs	r5, #4
   80fb8:	2400      	movs	r4, #0
   80fba:	3401      	adds	r4, #1
   80fbc:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80fc0:	4798      	blx	r3
   80fc2:	42a6      	cmp	r6, r4
   80fc4:	d1f9      	bne.n	80fba <__libc_init_array+0x2e>
   80fc6:	bd70      	pop	{r4, r5, r6, pc}
   80fc8:	bd70      	pop	{r4, r5, r6, pc}
   80fca:	bf00      	nop
   80fcc:	00083fe8 	.word	0x00083fe8
   80fd0:	00083fe8 	.word	0x00083fe8
   80fd4:	00083ff0 	.word	0x00083ff0
   80fd8:	00083fe8 	.word	0x00083fe8

00080fdc <iprintf>:
   80fdc:	b40f      	push	{r0, r1, r2, r3}
   80fde:	b510      	push	{r4, lr}
   80fe0:	4b07      	ldr	r3, [pc, #28]	; (81000 <iprintf+0x24>)
   80fe2:	b082      	sub	sp, #8
   80fe4:	ac04      	add	r4, sp, #16
   80fe6:	f854 2b04 	ldr.w	r2, [r4], #4
   80fea:	6818      	ldr	r0, [r3, #0]
   80fec:	4623      	mov	r3, r4
   80fee:	6881      	ldr	r1, [r0, #8]
   80ff0:	9401      	str	r4, [sp, #4]
   80ff2:	f000 f915 	bl	81220 <_vfiprintf_r>
   80ff6:	b002      	add	sp, #8
   80ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80ffc:	b004      	add	sp, #16
   80ffe:	4770      	bx	lr
   81000:	20070568 	.word	0x20070568

00081004 <memset>:
   81004:	b4f0      	push	{r4, r5, r6, r7}
   81006:	0784      	lsls	r4, r0, #30
   81008:	d043      	beq.n	81092 <memset+0x8e>
   8100a:	1e54      	subs	r4, r2, #1
   8100c:	2a00      	cmp	r2, #0
   8100e:	d03e      	beq.n	8108e <memset+0x8a>
   81010:	b2cd      	uxtb	r5, r1
   81012:	4603      	mov	r3, r0
   81014:	e003      	b.n	8101e <memset+0x1a>
   81016:	1e62      	subs	r2, r4, #1
   81018:	2c00      	cmp	r4, #0
   8101a:	d038      	beq.n	8108e <memset+0x8a>
   8101c:	4614      	mov	r4, r2
   8101e:	f803 5b01 	strb.w	r5, [r3], #1
   81022:	079a      	lsls	r2, r3, #30
   81024:	d1f7      	bne.n	81016 <memset+0x12>
   81026:	2c03      	cmp	r4, #3
   81028:	d92a      	bls.n	81080 <memset+0x7c>
   8102a:	b2cd      	uxtb	r5, r1
   8102c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81030:	2c0f      	cmp	r4, #15
   81032:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81036:	d915      	bls.n	81064 <memset+0x60>
   81038:	f1a4 0710 	sub.w	r7, r4, #16
   8103c:	093f      	lsrs	r7, r7, #4
   8103e:	f103 0610 	add.w	r6, r3, #16
   81042:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81046:	461a      	mov	r2, r3
   81048:	6015      	str	r5, [r2, #0]
   8104a:	6055      	str	r5, [r2, #4]
   8104c:	6095      	str	r5, [r2, #8]
   8104e:	60d5      	str	r5, [r2, #12]
   81050:	3210      	adds	r2, #16
   81052:	42b2      	cmp	r2, r6
   81054:	d1f8      	bne.n	81048 <memset+0x44>
   81056:	f004 040f 	and.w	r4, r4, #15
   8105a:	3701      	adds	r7, #1
   8105c:	2c03      	cmp	r4, #3
   8105e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81062:	d90d      	bls.n	81080 <memset+0x7c>
   81064:	461e      	mov	r6, r3
   81066:	4622      	mov	r2, r4
   81068:	3a04      	subs	r2, #4
   8106a:	2a03      	cmp	r2, #3
   8106c:	f846 5b04 	str.w	r5, [r6], #4
   81070:	d8fa      	bhi.n	81068 <memset+0x64>
   81072:	1f22      	subs	r2, r4, #4
   81074:	f022 0203 	bic.w	r2, r2, #3
   81078:	3204      	adds	r2, #4
   8107a:	4413      	add	r3, r2
   8107c:	f004 0403 	and.w	r4, r4, #3
   81080:	b12c      	cbz	r4, 8108e <memset+0x8a>
   81082:	b2c9      	uxtb	r1, r1
   81084:	441c      	add	r4, r3
   81086:	f803 1b01 	strb.w	r1, [r3], #1
   8108a:	42a3      	cmp	r3, r4
   8108c:	d1fb      	bne.n	81086 <memset+0x82>
   8108e:	bcf0      	pop	{r4, r5, r6, r7}
   81090:	4770      	bx	lr
   81092:	4614      	mov	r4, r2
   81094:	4603      	mov	r3, r0
   81096:	e7c6      	b.n	81026 <memset+0x22>

00081098 <setbuf>:
   81098:	2900      	cmp	r1, #0
   8109a:	bf0c      	ite	eq
   8109c:	2202      	moveq	r2, #2
   8109e:	2200      	movne	r2, #0
   810a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   810a4:	f000 b800 	b.w	810a8 <setvbuf>

000810a8 <setvbuf>:
   810a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810ac:	4d3c      	ldr	r5, [pc, #240]	; (811a0 <setvbuf+0xf8>)
   810ae:	4604      	mov	r4, r0
   810b0:	682d      	ldr	r5, [r5, #0]
   810b2:	4688      	mov	r8, r1
   810b4:	4616      	mov	r6, r2
   810b6:	461f      	mov	r7, r3
   810b8:	b115      	cbz	r5, 810c0 <setvbuf+0x18>
   810ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   810bc:	2b00      	cmp	r3, #0
   810be:	d04f      	beq.n	81160 <setvbuf+0xb8>
   810c0:	2e02      	cmp	r6, #2
   810c2:	d830      	bhi.n	81126 <setvbuf+0x7e>
   810c4:	2f00      	cmp	r7, #0
   810c6:	db2e      	blt.n	81126 <setvbuf+0x7e>
   810c8:	4628      	mov	r0, r5
   810ca:	4621      	mov	r1, r4
   810cc:	f001 f826 	bl	8211c <_fflush_r>
   810d0:	89a3      	ldrh	r3, [r4, #12]
   810d2:	2200      	movs	r2, #0
   810d4:	6062      	str	r2, [r4, #4]
   810d6:	61a2      	str	r2, [r4, #24]
   810d8:	061a      	lsls	r2, r3, #24
   810da:	d428      	bmi.n	8112e <setvbuf+0x86>
   810dc:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   810e0:	b29b      	uxth	r3, r3
   810e2:	2e02      	cmp	r6, #2
   810e4:	81a3      	strh	r3, [r4, #12]
   810e6:	d02d      	beq.n	81144 <setvbuf+0x9c>
   810e8:	f1b8 0f00 	cmp.w	r8, #0
   810ec:	d03c      	beq.n	81168 <setvbuf+0xc0>
   810ee:	2e01      	cmp	r6, #1
   810f0:	d013      	beq.n	8111a <setvbuf+0x72>
   810f2:	b29b      	uxth	r3, r3
   810f4:	f003 0008 	and.w	r0, r3, #8
   810f8:	4a2a      	ldr	r2, [pc, #168]	; (811a4 <setvbuf+0xfc>)
   810fa:	b280      	uxth	r0, r0
   810fc:	63ea      	str	r2, [r5, #60]	; 0x3c
   810fe:	f8c4 8000 	str.w	r8, [r4]
   81102:	f8c4 8010 	str.w	r8, [r4, #16]
   81106:	6167      	str	r7, [r4, #20]
   81108:	b178      	cbz	r0, 8112a <setvbuf+0x82>
   8110a:	f013 0f03 	tst.w	r3, #3
   8110e:	bf18      	it	ne
   81110:	2700      	movne	r7, #0
   81112:	60a7      	str	r7, [r4, #8]
   81114:	2000      	movs	r0, #0
   81116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8111a:	f043 0301 	orr.w	r3, r3, #1
   8111e:	427a      	negs	r2, r7
   81120:	81a3      	strh	r3, [r4, #12]
   81122:	61a2      	str	r2, [r4, #24]
   81124:	e7e5      	b.n	810f2 <setvbuf+0x4a>
   81126:	f04f 30ff 	mov.w	r0, #4294967295
   8112a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8112e:	4628      	mov	r0, r5
   81130:	6921      	ldr	r1, [r4, #16]
   81132:	f001 f953 	bl	823dc <_free_r>
   81136:	89a3      	ldrh	r3, [r4, #12]
   81138:	2e02      	cmp	r6, #2
   8113a:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8113e:	b29b      	uxth	r3, r3
   81140:	81a3      	strh	r3, [r4, #12]
   81142:	d1d1      	bne.n	810e8 <setvbuf+0x40>
   81144:	2000      	movs	r0, #0
   81146:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8114a:	f043 0302 	orr.w	r3, r3, #2
   8114e:	2500      	movs	r5, #0
   81150:	2101      	movs	r1, #1
   81152:	81a3      	strh	r3, [r4, #12]
   81154:	60a5      	str	r5, [r4, #8]
   81156:	6022      	str	r2, [r4, #0]
   81158:	6122      	str	r2, [r4, #16]
   8115a:	6161      	str	r1, [r4, #20]
   8115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81160:	4628      	mov	r0, r5
   81162:	f000 fff7 	bl	82154 <__sinit>
   81166:	e7ab      	b.n	810c0 <setvbuf+0x18>
   81168:	2f00      	cmp	r7, #0
   8116a:	bf08      	it	eq
   8116c:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81170:	4638      	mov	r0, r7
   81172:	f001 fc29 	bl	829c8 <malloc>
   81176:	4680      	mov	r8, r0
   81178:	b128      	cbz	r0, 81186 <setvbuf+0xde>
   8117a:	89a3      	ldrh	r3, [r4, #12]
   8117c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81180:	b29b      	uxth	r3, r3
   81182:	81a3      	strh	r3, [r4, #12]
   81184:	e7b3      	b.n	810ee <setvbuf+0x46>
   81186:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8118a:	f001 fc1d 	bl	829c8 <malloc>
   8118e:	4680      	mov	r8, r0
   81190:	b918      	cbnz	r0, 8119a <setvbuf+0xf2>
   81192:	89a3      	ldrh	r3, [r4, #12]
   81194:	f04f 30ff 	mov.w	r0, #4294967295
   81198:	e7d5      	b.n	81146 <setvbuf+0x9e>
   8119a:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8119e:	e7ec      	b.n	8117a <setvbuf+0xd2>
   811a0:	20070568 	.word	0x20070568
   811a4:	00082149 	.word	0x00082149

000811a8 <__sprint_r.part.0>:
   811a8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   811aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   811ae:	049c      	lsls	r4, r3, #18
   811b0:	460e      	mov	r6, r1
   811b2:	4680      	mov	r8, r0
   811b4:	4691      	mov	r9, r2
   811b6:	d52a      	bpl.n	8120e <__sprint_r.part.0+0x66>
   811b8:	6893      	ldr	r3, [r2, #8]
   811ba:	6812      	ldr	r2, [r2, #0]
   811bc:	f102 0a08 	add.w	sl, r2, #8
   811c0:	b31b      	cbz	r3, 8120a <__sprint_r.part.0+0x62>
   811c2:	e91a 00a0 	ldmdb	sl, {r5, r7}
   811c6:	08bf      	lsrs	r7, r7, #2
   811c8:	d017      	beq.n	811fa <__sprint_r.part.0+0x52>
   811ca:	3d04      	subs	r5, #4
   811cc:	2400      	movs	r4, #0
   811ce:	e001      	b.n	811d4 <__sprint_r.part.0+0x2c>
   811d0:	42a7      	cmp	r7, r4
   811d2:	d010      	beq.n	811f6 <__sprint_r.part.0+0x4e>
   811d4:	4640      	mov	r0, r8
   811d6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   811da:	4632      	mov	r2, r6
   811dc:	f001 f850 	bl	82280 <_fputwc_r>
   811e0:	1c43      	adds	r3, r0, #1
   811e2:	f104 0401 	add.w	r4, r4, #1
   811e6:	d1f3      	bne.n	811d0 <__sprint_r.part.0+0x28>
   811e8:	2300      	movs	r3, #0
   811ea:	f8c9 3008 	str.w	r3, [r9, #8]
   811ee:	f8c9 3004 	str.w	r3, [r9, #4]
   811f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   811f6:	f8d9 3008 	ldr.w	r3, [r9, #8]
   811fa:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   811fe:	f8c9 3008 	str.w	r3, [r9, #8]
   81202:	f10a 0a08 	add.w	sl, sl, #8
   81206:	2b00      	cmp	r3, #0
   81208:	d1db      	bne.n	811c2 <__sprint_r.part.0+0x1a>
   8120a:	2000      	movs	r0, #0
   8120c:	e7ec      	b.n	811e8 <__sprint_r.part.0+0x40>
   8120e:	f001 f9b1 	bl	82574 <__sfvwrite_r>
   81212:	2300      	movs	r3, #0
   81214:	f8c9 3008 	str.w	r3, [r9, #8]
   81218:	f8c9 3004 	str.w	r3, [r9, #4]
   8121c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081220 <_vfiprintf_r>:
   81220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81224:	b0b1      	sub	sp, #196	; 0xc4
   81226:	461c      	mov	r4, r3
   81228:	9102      	str	r1, [sp, #8]
   8122a:	4690      	mov	r8, r2
   8122c:	9308      	str	r3, [sp, #32]
   8122e:	9006      	str	r0, [sp, #24]
   81230:	b118      	cbz	r0, 8123a <_vfiprintf_r+0x1a>
   81232:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81234:	2b00      	cmp	r3, #0
   81236:	f000 80e8 	beq.w	8140a <_vfiprintf_r+0x1ea>
   8123a:	9d02      	ldr	r5, [sp, #8]
   8123c:	89ab      	ldrh	r3, [r5, #12]
   8123e:	b29a      	uxth	r2, r3
   81240:	0490      	lsls	r0, r2, #18
   81242:	d407      	bmi.n	81254 <_vfiprintf_r+0x34>
   81244:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8124a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   8124e:	81ab      	strh	r3, [r5, #12]
   81250:	b29a      	uxth	r2, r3
   81252:	6669      	str	r1, [r5, #100]	; 0x64
   81254:	0711      	lsls	r1, r2, #28
   81256:	f140 80b7 	bpl.w	813c8 <_vfiprintf_r+0x1a8>
   8125a:	f8dd b008 	ldr.w	fp, [sp, #8]
   8125e:	f8db 3010 	ldr.w	r3, [fp, #16]
   81262:	2b00      	cmp	r3, #0
   81264:	f000 80b0 	beq.w	813c8 <_vfiprintf_r+0x1a8>
   81268:	f002 021a 	and.w	r2, r2, #26
   8126c:	2a0a      	cmp	r2, #10
   8126e:	f000 80b7 	beq.w	813e0 <_vfiprintf_r+0x1c0>
   81272:	2300      	movs	r3, #0
   81274:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81278:	930a      	str	r3, [sp, #40]	; 0x28
   8127a:	9315      	str	r3, [sp, #84]	; 0x54
   8127c:	9314      	str	r3, [sp, #80]	; 0x50
   8127e:	9309      	str	r3, [sp, #36]	; 0x24
   81280:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81284:	464e      	mov	r6, r9
   81286:	f898 3000 	ldrb.w	r3, [r8]
   8128a:	2b00      	cmp	r3, #0
   8128c:	f000 84c8 	beq.w	81c20 <_vfiprintf_r+0xa00>
   81290:	2b25      	cmp	r3, #37	; 0x25
   81292:	f000 84c5 	beq.w	81c20 <_vfiprintf_r+0xa00>
   81296:	f108 0201 	add.w	r2, r8, #1
   8129a:	e001      	b.n	812a0 <_vfiprintf_r+0x80>
   8129c:	2b25      	cmp	r3, #37	; 0x25
   8129e:	d004      	beq.n	812aa <_vfiprintf_r+0x8a>
   812a0:	7813      	ldrb	r3, [r2, #0]
   812a2:	4614      	mov	r4, r2
   812a4:	3201      	adds	r2, #1
   812a6:	2b00      	cmp	r3, #0
   812a8:	d1f8      	bne.n	8129c <_vfiprintf_r+0x7c>
   812aa:	ebc8 0504 	rsb	r5, r8, r4
   812ae:	b195      	cbz	r5, 812d6 <_vfiprintf_r+0xb6>
   812b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   812b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   812b4:	3301      	adds	r3, #1
   812b6:	442a      	add	r2, r5
   812b8:	2b07      	cmp	r3, #7
   812ba:	f8c6 8000 	str.w	r8, [r6]
   812be:	6075      	str	r5, [r6, #4]
   812c0:	9215      	str	r2, [sp, #84]	; 0x54
   812c2:	9314      	str	r3, [sp, #80]	; 0x50
   812c4:	dd7b      	ble.n	813be <_vfiprintf_r+0x19e>
   812c6:	2a00      	cmp	r2, #0
   812c8:	f040 84d5 	bne.w	81c76 <_vfiprintf_r+0xa56>
   812cc:	9809      	ldr	r0, [sp, #36]	; 0x24
   812ce:	9214      	str	r2, [sp, #80]	; 0x50
   812d0:	4428      	add	r0, r5
   812d2:	464e      	mov	r6, r9
   812d4:	9009      	str	r0, [sp, #36]	; 0x24
   812d6:	7823      	ldrb	r3, [r4, #0]
   812d8:	2b00      	cmp	r3, #0
   812da:	f000 83ed 	beq.w	81ab8 <_vfiprintf_r+0x898>
   812de:	2100      	movs	r1, #0
   812e0:	f04f 0200 	mov.w	r2, #0
   812e4:	f04f 3cff 	mov.w	ip, #4294967295
   812e8:	7863      	ldrb	r3, [r4, #1]
   812ea:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   812ee:	9104      	str	r1, [sp, #16]
   812f0:	468a      	mov	sl, r1
   812f2:	f104 0801 	add.w	r8, r4, #1
   812f6:	4608      	mov	r0, r1
   812f8:	4665      	mov	r5, ip
   812fa:	f108 0801 	add.w	r8, r8, #1
   812fe:	f1a3 0220 	sub.w	r2, r3, #32
   81302:	2a58      	cmp	r2, #88	; 0x58
   81304:	f200 82d9 	bhi.w	818ba <_vfiprintf_r+0x69a>
   81308:	e8df f012 	tbh	[pc, r2, lsl #1]
   8130c:	02d702cb 	.word	0x02d702cb
   81310:	02d202d7 	.word	0x02d202d7
   81314:	02d702d7 	.word	0x02d702d7
   81318:	02d702d7 	.word	0x02d702d7
   8131c:	02d702d7 	.word	0x02d702d7
   81320:	028f0282 	.word	0x028f0282
   81324:	008402d7 	.word	0x008402d7
   81328:	02d70293 	.word	0x02d70293
   8132c:	0196012b 	.word	0x0196012b
   81330:	01960196 	.word	0x01960196
   81334:	01960196 	.word	0x01960196
   81338:	01960196 	.word	0x01960196
   8133c:	01960196 	.word	0x01960196
   81340:	02d702d7 	.word	0x02d702d7
   81344:	02d702d7 	.word	0x02d702d7
   81348:	02d702d7 	.word	0x02d702d7
   8134c:	02d702d7 	.word	0x02d702d7
   81350:	02d702d7 	.word	0x02d702d7
   81354:	02d70130 	.word	0x02d70130
   81358:	02d702d7 	.word	0x02d702d7
   8135c:	02d702d7 	.word	0x02d702d7
   81360:	02d702d7 	.word	0x02d702d7
   81364:	02d702d7 	.word	0x02d702d7
   81368:	017b02d7 	.word	0x017b02d7
   8136c:	02d702d7 	.word	0x02d702d7
   81370:	02d702d7 	.word	0x02d702d7
   81374:	01a402d7 	.word	0x01a402d7
   81378:	02d702d7 	.word	0x02d702d7
   8137c:	02d701bf 	.word	0x02d701bf
   81380:	02d702d7 	.word	0x02d702d7
   81384:	02d702d7 	.word	0x02d702d7
   81388:	02d702d7 	.word	0x02d702d7
   8138c:	02d702d7 	.word	0x02d702d7
   81390:	01e402d7 	.word	0x01e402d7
   81394:	02d701fa 	.word	0x02d701fa
   81398:	02d702d7 	.word	0x02d702d7
   8139c:	01fa0216 	.word	0x01fa0216
   813a0:	02d702d7 	.word	0x02d702d7
   813a4:	02d7021b 	.word	0x02d7021b
   813a8:	00890228 	.word	0x00890228
   813ac:	027d0266 	.word	0x027d0266
   813b0:	023a02d7 	.word	0x023a02d7
   813b4:	011902d7 	.word	0x011902d7
   813b8:	02d702d7 	.word	0x02d702d7
   813bc:	02af      	.short	0x02af
   813be:	3608      	adds	r6, #8
   813c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   813c2:	4428      	add	r0, r5
   813c4:	9009      	str	r0, [sp, #36]	; 0x24
   813c6:	e786      	b.n	812d6 <_vfiprintf_r+0xb6>
   813c8:	9806      	ldr	r0, [sp, #24]
   813ca:	9902      	ldr	r1, [sp, #8]
   813cc:	f000 fd90 	bl	81ef0 <__swsetup_r>
   813d0:	b9b0      	cbnz	r0, 81400 <_vfiprintf_r+0x1e0>
   813d2:	9d02      	ldr	r5, [sp, #8]
   813d4:	89aa      	ldrh	r2, [r5, #12]
   813d6:	f002 021a 	and.w	r2, r2, #26
   813da:	2a0a      	cmp	r2, #10
   813dc:	f47f af49 	bne.w	81272 <_vfiprintf_r+0x52>
   813e0:	f8dd b008 	ldr.w	fp, [sp, #8]
   813e4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   813e8:	2b00      	cmp	r3, #0
   813ea:	f6ff af42 	blt.w	81272 <_vfiprintf_r+0x52>
   813ee:	9806      	ldr	r0, [sp, #24]
   813f0:	4659      	mov	r1, fp
   813f2:	4642      	mov	r2, r8
   813f4:	4623      	mov	r3, r4
   813f6:	f000 fd3d 	bl	81e74 <__sbprintf>
   813fa:	b031      	add	sp, #196	; 0xc4
   813fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81400:	f04f 30ff 	mov.w	r0, #4294967295
   81404:	b031      	add	sp, #196	; 0xc4
   81406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8140a:	f000 fea3 	bl	82154 <__sinit>
   8140e:	e714      	b.n	8123a <_vfiprintf_r+0x1a>
   81410:	4240      	negs	r0, r0
   81412:	9308      	str	r3, [sp, #32]
   81414:	f04a 0a04 	orr.w	sl, sl, #4
   81418:	f898 3000 	ldrb.w	r3, [r8]
   8141c:	e76d      	b.n	812fa <_vfiprintf_r+0xda>
   8141e:	f01a 0320 	ands.w	r3, sl, #32
   81422:	9004      	str	r0, [sp, #16]
   81424:	46ac      	mov	ip, r5
   81426:	f000 80f4 	beq.w	81612 <_vfiprintf_r+0x3f2>
   8142a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8142e:	f10b 0307 	add.w	r3, fp, #7
   81432:	f023 0307 	bic.w	r3, r3, #7
   81436:	f103 0408 	add.w	r4, r3, #8
   8143a:	9408      	str	r4, [sp, #32]
   8143c:	e9d3 4500 	ldrd	r4, r5, [r3]
   81440:	2300      	movs	r3, #0
   81442:	f04f 0000 	mov.w	r0, #0
   81446:	2100      	movs	r1, #0
   81448:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   8144c:	f8cd c014 	str.w	ip, [sp, #20]
   81450:	9107      	str	r1, [sp, #28]
   81452:	f1bc 0f00 	cmp.w	ip, #0
   81456:	bfa8      	it	ge
   81458:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   8145c:	ea54 0205 	orrs.w	r2, r4, r5
   81460:	f040 80ad 	bne.w	815be <_vfiprintf_r+0x39e>
   81464:	f1bc 0f00 	cmp.w	ip, #0
   81468:	f040 80a9 	bne.w	815be <_vfiprintf_r+0x39e>
   8146c:	2b00      	cmp	r3, #0
   8146e:	f040 83c0 	bne.w	81bf2 <_vfiprintf_r+0x9d2>
   81472:	f01a 0f01 	tst.w	sl, #1
   81476:	f000 83bc 	beq.w	81bf2 <_vfiprintf_r+0x9d2>
   8147a:	2330      	movs	r3, #48	; 0x30
   8147c:	af30      	add	r7, sp, #192	; 0xc0
   8147e:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81482:	ebc7 0409 	rsb	r4, r7, r9
   81486:	9405      	str	r4, [sp, #20]
   81488:	f8dd b014 	ldr.w	fp, [sp, #20]
   8148c:	9c07      	ldr	r4, [sp, #28]
   8148e:	45e3      	cmp	fp, ip
   81490:	bfb8      	it	lt
   81492:	46e3      	movlt	fp, ip
   81494:	f8cd b00c 	str.w	fp, [sp, #12]
   81498:	b11c      	cbz	r4, 814a2 <_vfiprintf_r+0x282>
   8149a:	f10b 0b01 	add.w	fp, fp, #1
   8149e:	f8cd b00c 	str.w	fp, [sp, #12]
   814a2:	f01a 0502 	ands.w	r5, sl, #2
   814a6:	9507      	str	r5, [sp, #28]
   814a8:	d005      	beq.n	814b6 <_vfiprintf_r+0x296>
   814aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
   814ae:	f10b 0b02 	add.w	fp, fp, #2
   814b2:	f8cd b00c 	str.w	fp, [sp, #12]
   814b6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   814ba:	930b      	str	r3, [sp, #44]	; 0x2c
   814bc:	f040 821b 	bne.w	818f6 <_vfiprintf_r+0x6d6>
   814c0:	9d04      	ldr	r5, [sp, #16]
   814c2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   814c6:	ebcb 0405 	rsb	r4, fp, r5
   814ca:	2c00      	cmp	r4, #0
   814cc:	f340 8213 	ble.w	818f6 <_vfiprintf_r+0x6d6>
   814d0:	2c10      	cmp	r4, #16
   814d2:	f340 8489 	ble.w	81de8 <_vfiprintf_r+0xbc8>
   814d6:	4dbe      	ldr	r5, [pc, #760]	; (817d0 <_vfiprintf_r+0x5b0>)
   814d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   814da:	462b      	mov	r3, r5
   814dc:	9814      	ldr	r0, [sp, #80]	; 0x50
   814de:	4625      	mov	r5, r4
   814e0:	f04f 0b10 	mov.w	fp, #16
   814e4:	4664      	mov	r4, ip
   814e6:	46b4      	mov	ip, r6
   814e8:	461e      	mov	r6, r3
   814ea:	e006      	b.n	814fa <_vfiprintf_r+0x2da>
   814ec:	1c83      	adds	r3, r0, #2
   814ee:	f10c 0c08 	add.w	ip, ip, #8
   814f2:	4608      	mov	r0, r1
   814f4:	3d10      	subs	r5, #16
   814f6:	2d10      	cmp	r5, #16
   814f8:	dd11      	ble.n	8151e <_vfiprintf_r+0x2fe>
   814fa:	1c41      	adds	r1, r0, #1
   814fc:	3210      	adds	r2, #16
   814fe:	2907      	cmp	r1, #7
   81500:	9215      	str	r2, [sp, #84]	; 0x54
   81502:	e88c 0840 	stmia.w	ip, {r6, fp}
   81506:	9114      	str	r1, [sp, #80]	; 0x50
   81508:	ddf0      	ble.n	814ec <_vfiprintf_r+0x2cc>
   8150a:	2a00      	cmp	r2, #0
   8150c:	f040 81e6 	bne.w	818dc <_vfiprintf_r+0x6bc>
   81510:	3d10      	subs	r5, #16
   81512:	2d10      	cmp	r5, #16
   81514:	f04f 0301 	mov.w	r3, #1
   81518:	4610      	mov	r0, r2
   8151a:	46cc      	mov	ip, r9
   8151c:	dced      	bgt.n	814fa <_vfiprintf_r+0x2da>
   8151e:	4631      	mov	r1, r6
   81520:	4666      	mov	r6, ip
   81522:	46a4      	mov	ip, r4
   81524:	462c      	mov	r4, r5
   81526:	460d      	mov	r5, r1
   81528:	4422      	add	r2, r4
   8152a:	2b07      	cmp	r3, #7
   8152c:	9215      	str	r2, [sp, #84]	; 0x54
   8152e:	6035      	str	r5, [r6, #0]
   81530:	6074      	str	r4, [r6, #4]
   81532:	9314      	str	r3, [sp, #80]	; 0x50
   81534:	f300 836d 	bgt.w	81c12 <_vfiprintf_r+0x9f2>
   81538:	3608      	adds	r6, #8
   8153a:	1c59      	adds	r1, r3, #1
   8153c:	e1de      	b.n	818fc <_vfiprintf_r+0x6dc>
   8153e:	f01a 0f20 	tst.w	sl, #32
   81542:	9004      	str	r0, [sp, #16]
   81544:	46ac      	mov	ip, r5
   81546:	f000 808d 	beq.w	81664 <_vfiprintf_r+0x444>
   8154a:	9d08      	ldr	r5, [sp, #32]
   8154c:	1deb      	adds	r3, r5, #7
   8154e:	f023 0307 	bic.w	r3, r3, #7
   81552:	f103 0b08 	add.w	fp, r3, #8
   81556:	e9d3 4500 	ldrd	r4, r5, [r3]
   8155a:	f8cd b020 	str.w	fp, [sp, #32]
   8155e:	2301      	movs	r3, #1
   81560:	e76f      	b.n	81442 <_vfiprintf_r+0x222>
   81562:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81566:	f898 3000 	ldrb.w	r3, [r8]
   8156a:	e6c6      	b.n	812fa <_vfiprintf_r+0xda>
   8156c:	f04a 0a10 	orr.w	sl, sl, #16
   81570:	f01a 0f20 	tst.w	sl, #32
   81574:	9004      	str	r0, [sp, #16]
   81576:	46ac      	mov	ip, r5
   81578:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8157c:	f000 80c8 	beq.w	81710 <_vfiprintf_r+0x4f0>
   81580:	9c08      	ldr	r4, [sp, #32]
   81582:	1de1      	adds	r1, r4, #7
   81584:	f021 0107 	bic.w	r1, r1, #7
   81588:	e9d1 2300 	ldrd	r2, r3, [r1]
   8158c:	3108      	adds	r1, #8
   8158e:	9108      	str	r1, [sp, #32]
   81590:	4614      	mov	r4, r2
   81592:	461d      	mov	r5, r3
   81594:	2a00      	cmp	r2, #0
   81596:	f173 0b00 	sbcs.w	fp, r3, #0
   8159a:	f2c0 83ce 	blt.w	81d3a <_vfiprintf_r+0xb1a>
   8159e:	f1bc 0f00 	cmp.w	ip, #0
   815a2:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   815a6:	bfa8      	it	ge
   815a8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   815ac:	ea54 0205 	orrs.w	r2, r4, r5
   815b0:	9007      	str	r0, [sp, #28]
   815b2:	f8cd c014 	str.w	ip, [sp, #20]
   815b6:	f04f 0301 	mov.w	r3, #1
   815ba:	f43f af53 	beq.w	81464 <_vfiprintf_r+0x244>
   815be:	2b01      	cmp	r3, #1
   815c0:	f000 8319 	beq.w	81bf6 <_vfiprintf_r+0x9d6>
   815c4:	2b02      	cmp	r3, #2
   815c6:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   815ca:	f040 824c 	bne.w	81a66 <_vfiprintf_r+0x846>
   815ce:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   815d2:	4619      	mov	r1, r3
   815d4:	f004 000f 	and.w	r0, r4, #15
   815d8:	0922      	lsrs	r2, r4, #4
   815da:	f81b 0000 	ldrb.w	r0, [fp, r0]
   815de:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   815e2:	092b      	lsrs	r3, r5, #4
   815e4:	7008      	strb	r0, [r1, #0]
   815e6:	ea52 0003 	orrs.w	r0, r2, r3
   815ea:	460f      	mov	r7, r1
   815ec:	4614      	mov	r4, r2
   815ee:	461d      	mov	r5, r3
   815f0:	f101 31ff 	add.w	r1, r1, #4294967295
   815f4:	d1ee      	bne.n	815d4 <_vfiprintf_r+0x3b4>
   815f6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   815fa:	ebc7 0309 	rsb	r3, r7, r9
   815fe:	9305      	str	r3, [sp, #20]
   81600:	e742      	b.n	81488 <_vfiprintf_r+0x268>
   81602:	f04a 0a10 	orr.w	sl, sl, #16
   81606:	f01a 0320 	ands.w	r3, sl, #32
   8160a:	9004      	str	r0, [sp, #16]
   8160c:	46ac      	mov	ip, r5
   8160e:	f47f af0c 	bne.w	8142a <_vfiprintf_r+0x20a>
   81612:	f01a 0210 	ands.w	r2, sl, #16
   81616:	f040 8311 	bne.w	81c3c <_vfiprintf_r+0xa1c>
   8161a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8161e:	f000 830d 	beq.w	81c3c <_vfiprintf_r+0xa1c>
   81622:	f8dd b020 	ldr.w	fp, [sp, #32]
   81626:	4613      	mov	r3, r2
   81628:	f8bb 4000 	ldrh.w	r4, [fp]
   8162c:	f10b 0b04 	add.w	fp, fp, #4
   81630:	2500      	movs	r5, #0
   81632:	f8cd b020 	str.w	fp, [sp, #32]
   81636:	e704      	b.n	81442 <_vfiprintf_r+0x222>
   81638:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8163c:	2000      	movs	r0, #0
   8163e:	f818 3b01 	ldrb.w	r3, [r8], #1
   81642:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81646:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   8164a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8164e:	2a09      	cmp	r2, #9
   81650:	d9f5      	bls.n	8163e <_vfiprintf_r+0x41e>
   81652:	e654      	b.n	812fe <_vfiprintf_r+0xde>
   81654:	f04a 0a10 	orr.w	sl, sl, #16
   81658:	f01a 0f20 	tst.w	sl, #32
   8165c:	9004      	str	r0, [sp, #16]
   8165e:	46ac      	mov	ip, r5
   81660:	f47f af73 	bne.w	8154a <_vfiprintf_r+0x32a>
   81664:	f01a 0f10 	tst.w	sl, #16
   81668:	f040 82ef 	bne.w	81c4a <_vfiprintf_r+0xa2a>
   8166c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81670:	f000 82eb 	beq.w	81c4a <_vfiprintf_r+0xa2a>
   81674:	f8dd b020 	ldr.w	fp, [sp, #32]
   81678:	2500      	movs	r5, #0
   8167a:	f8bb 4000 	ldrh.w	r4, [fp]
   8167e:	f10b 0b04 	add.w	fp, fp, #4
   81682:	2301      	movs	r3, #1
   81684:	f8cd b020 	str.w	fp, [sp, #32]
   81688:	e6db      	b.n	81442 <_vfiprintf_r+0x222>
   8168a:	46ac      	mov	ip, r5
   8168c:	4d51      	ldr	r5, [pc, #324]	; (817d4 <_vfiprintf_r+0x5b4>)
   8168e:	f01a 0f20 	tst.w	sl, #32
   81692:	9004      	str	r0, [sp, #16]
   81694:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81698:	950a      	str	r5, [sp, #40]	; 0x28
   8169a:	f000 80f0 	beq.w	8187e <_vfiprintf_r+0x65e>
   8169e:	9d08      	ldr	r5, [sp, #32]
   816a0:	1dea      	adds	r2, r5, #7
   816a2:	f022 0207 	bic.w	r2, r2, #7
   816a6:	f102 0b08 	add.w	fp, r2, #8
   816aa:	f8cd b020 	str.w	fp, [sp, #32]
   816ae:	e9d2 4500 	ldrd	r4, r5, [r2]
   816b2:	f01a 0f01 	tst.w	sl, #1
   816b6:	f000 82aa 	beq.w	81c0e <_vfiprintf_r+0x9ee>
   816ba:	ea54 0b05 	orrs.w	fp, r4, r5
   816be:	f000 82a6 	beq.w	81c0e <_vfiprintf_r+0x9ee>
   816c2:	2230      	movs	r2, #48	; 0x30
   816c4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   816c8:	f04a 0a02 	orr.w	sl, sl, #2
   816cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   816d0:	2302      	movs	r3, #2
   816d2:	e6b6      	b.n	81442 <_vfiprintf_r+0x222>
   816d4:	9b08      	ldr	r3, [sp, #32]
   816d6:	f8dd b020 	ldr.w	fp, [sp, #32]
   816da:	681b      	ldr	r3, [r3, #0]
   816dc:	2401      	movs	r4, #1
   816de:	f04f 0500 	mov.w	r5, #0
   816e2:	f10b 0b04 	add.w	fp, fp, #4
   816e6:	9004      	str	r0, [sp, #16]
   816e8:	9403      	str	r4, [sp, #12]
   816ea:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   816ee:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   816f2:	f8cd b020 	str.w	fp, [sp, #32]
   816f6:	9405      	str	r4, [sp, #20]
   816f8:	af16      	add	r7, sp, #88	; 0x58
   816fa:	f04f 0c00 	mov.w	ip, #0
   816fe:	e6d0      	b.n	814a2 <_vfiprintf_r+0x282>
   81700:	f01a 0f20 	tst.w	sl, #32
   81704:	9004      	str	r0, [sp, #16]
   81706:	46ac      	mov	ip, r5
   81708:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8170c:	f47f af38 	bne.w	81580 <_vfiprintf_r+0x360>
   81710:	f01a 0f10 	tst.w	sl, #16
   81714:	f040 82a7 	bne.w	81c66 <_vfiprintf_r+0xa46>
   81718:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8171c:	f000 82a3 	beq.w	81c66 <_vfiprintf_r+0xa46>
   81720:	f8dd b020 	ldr.w	fp, [sp, #32]
   81724:	f9bb 4000 	ldrsh.w	r4, [fp]
   81728:	f10b 0b04 	add.w	fp, fp, #4
   8172c:	17e5      	asrs	r5, r4, #31
   8172e:	4622      	mov	r2, r4
   81730:	462b      	mov	r3, r5
   81732:	f8cd b020 	str.w	fp, [sp, #32]
   81736:	e72d      	b.n	81594 <_vfiprintf_r+0x374>
   81738:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   8173c:	f898 3000 	ldrb.w	r3, [r8]
   81740:	e5db      	b.n	812fa <_vfiprintf_r+0xda>
   81742:	f898 3000 	ldrb.w	r3, [r8]
   81746:	4642      	mov	r2, r8
   81748:	2b6c      	cmp	r3, #108	; 0x6c
   8174a:	bf03      	ittte	eq
   8174c:	f108 0801 	addeq.w	r8, r8, #1
   81750:	f04a 0a20 	orreq.w	sl, sl, #32
   81754:	7853      	ldrbeq	r3, [r2, #1]
   81756:	f04a 0a10 	orrne.w	sl, sl, #16
   8175a:	e5ce      	b.n	812fa <_vfiprintf_r+0xda>
   8175c:	f01a 0f20 	tst.w	sl, #32
   81760:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81764:	f000 82f7 	beq.w	81d56 <_vfiprintf_r+0xb36>
   81768:	9c08      	ldr	r4, [sp, #32]
   8176a:	6821      	ldr	r1, [r4, #0]
   8176c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8176e:	17e5      	asrs	r5, r4, #31
   81770:	462b      	mov	r3, r5
   81772:	9d08      	ldr	r5, [sp, #32]
   81774:	4622      	mov	r2, r4
   81776:	3504      	adds	r5, #4
   81778:	9508      	str	r5, [sp, #32]
   8177a:	e9c1 2300 	strd	r2, r3, [r1]
   8177e:	e582      	b.n	81286 <_vfiprintf_r+0x66>
   81780:	9c08      	ldr	r4, [sp, #32]
   81782:	46ac      	mov	ip, r5
   81784:	6827      	ldr	r7, [r4, #0]
   81786:	f04f 0500 	mov.w	r5, #0
   8178a:	9004      	str	r0, [sp, #16]
   8178c:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81790:	3404      	adds	r4, #4
   81792:	2f00      	cmp	r7, #0
   81794:	f000 8332 	beq.w	81dfc <_vfiprintf_r+0xbdc>
   81798:	f1bc 0f00 	cmp.w	ip, #0
   8179c:	4638      	mov	r0, r7
   8179e:	f2c0 8307 	blt.w	81db0 <_vfiprintf_r+0xb90>
   817a2:	4662      	mov	r2, ip
   817a4:	2100      	movs	r1, #0
   817a6:	f8cd c004 	str.w	ip, [sp, #4]
   817aa:	f001 fbb1 	bl	82f10 <memchr>
   817ae:	f8dd c004 	ldr.w	ip, [sp, #4]
   817b2:	2800      	cmp	r0, #0
   817b4:	f000 833a 	beq.w	81e2c <_vfiprintf_r+0xc0c>
   817b8:	1bc0      	subs	r0, r0, r7
   817ba:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   817be:	4560      	cmp	r0, ip
   817c0:	bfa8      	it	ge
   817c2:	4660      	movge	r0, ip
   817c4:	9005      	str	r0, [sp, #20]
   817c6:	9408      	str	r4, [sp, #32]
   817c8:	9507      	str	r5, [sp, #28]
   817ca:	f04f 0c00 	mov.w	ip, #0
   817ce:	e65b      	b.n	81488 <_vfiprintf_r+0x268>
   817d0:	00083fcc 	.word	0x00083fcc
   817d4:	00083f8c 	.word	0x00083f8c
   817d8:	9b08      	ldr	r3, [sp, #32]
   817da:	f8dd b020 	ldr.w	fp, [sp, #32]
   817de:	9004      	str	r0, [sp, #16]
   817e0:	48b2      	ldr	r0, [pc, #712]	; (81aac <_vfiprintf_r+0x88c>)
   817e2:	681c      	ldr	r4, [r3, #0]
   817e4:	2230      	movs	r2, #48	; 0x30
   817e6:	2378      	movs	r3, #120	; 0x78
   817e8:	f10b 0b04 	add.w	fp, fp, #4
   817ec:	46ac      	mov	ip, r5
   817ee:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   817f2:	f04a 0a02 	orr.w	sl, sl, #2
   817f6:	f8cd b020 	str.w	fp, [sp, #32]
   817fa:	2500      	movs	r5, #0
   817fc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81800:	900a      	str	r0, [sp, #40]	; 0x28
   81802:	2302      	movs	r3, #2
   81804:	e61d      	b.n	81442 <_vfiprintf_r+0x222>
   81806:	f04a 0a20 	orr.w	sl, sl, #32
   8180a:	f898 3000 	ldrb.w	r3, [r8]
   8180e:	e574      	b.n	812fa <_vfiprintf_r+0xda>
   81810:	f8dd b020 	ldr.w	fp, [sp, #32]
   81814:	f8db 0000 	ldr.w	r0, [fp]
   81818:	f10b 0304 	add.w	r3, fp, #4
   8181c:	2800      	cmp	r0, #0
   8181e:	f6ff adf7 	blt.w	81410 <_vfiprintf_r+0x1f0>
   81822:	9308      	str	r3, [sp, #32]
   81824:	f898 3000 	ldrb.w	r3, [r8]
   81828:	e567      	b.n	812fa <_vfiprintf_r+0xda>
   8182a:	f898 3000 	ldrb.w	r3, [r8]
   8182e:	212b      	movs	r1, #43	; 0x2b
   81830:	e563      	b.n	812fa <_vfiprintf_r+0xda>
   81832:	f898 3000 	ldrb.w	r3, [r8]
   81836:	f108 0401 	add.w	r4, r8, #1
   8183a:	2b2a      	cmp	r3, #42	; 0x2a
   8183c:	f000 8305 	beq.w	81e4a <_vfiprintf_r+0xc2a>
   81840:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81844:	2a09      	cmp	r2, #9
   81846:	bf98      	it	ls
   81848:	2500      	movls	r5, #0
   8184a:	f200 82fa 	bhi.w	81e42 <_vfiprintf_r+0xc22>
   8184e:	f814 3b01 	ldrb.w	r3, [r4], #1
   81852:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81856:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8185a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8185e:	2a09      	cmp	r2, #9
   81860:	d9f5      	bls.n	8184e <_vfiprintf_r+0x62e>
   81862:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   81866:	46a0      	mov	r8, r4
   81868:	e549      	b.n	812fe <_vfiprintf_r+0xde>
   8186a:	4c90      	ldr	r4, [pc, #576]	; (81aac <_vfiprintf_r+0x88c>)
   8186c:	f01a 0f20 	tst.w	sl, #32
   81870:	9004      	str	r0, [sp, #16]
   81872:	46ac      	mov	ip, r5
   81874:	940a      	str	r4, [sp, #40]	; 0x28
   81876:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8187a:	f47f af10 	bne.w	8169e <_vfiprintf_r+0x47e>
   8187e:	f01a 0f10 	tst.w	sl, #16
   81882:	f040 81ea 	bne.w	81c5a <_vfiprintf_r+0xa3a>
   81886:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8188a:	f000 81e6 	beq.w	81c5a <_vfiprintf_r+0xa3a>
   8188e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81892:	2500      	movs	r5, #0
   81894:	f8bb 4000 	ldrh.w	r4, [fp]
   81898:	f10b 0b04 	add.w	fp, fp, #4
   8189c:	f8cd b020 	str.w	fp, [sp, #32]
   818a0:	e707      	b.n	816b2 <_vfiprintf_r+0x492>
   818a2:	f898 3000 	ldrb.w	r3, [r8]
   818a6:	2900      	cmp	r1, #0
   818a8:	f47f ad27 	bne.w	812fa <_vfiprintf_r+0xda>
   818ac:	2120      	movs	r1, #32
   818ae:	e524      	b.n	812fa <_vfiprintf_r+0xda>
   818b0:	f04a 0a01 	orr.w	sl, sl, #1
   818b4:	f898 3000 	ldrb.w	r3, [r8]
   818b8:	e51f      	b.n	812fa <_vfiprintf_r+0xda>
   818ba:	9004      	str	r0, [sp, #16]
   818bc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   818c0:	2b00      	cmp	r3, #0
   818c2:	f000 80f9 	beq.w	81ab8 <_vfiprintf_r+0x898>
   818c6:	2501      	movs	r5, #1
   818c8:	f04f 0b00 	mov.w	fp, #0
   818cc:	9503      	str	r5, [sp, #12]
   818ce:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   818d2:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   818d6:	9505      	str	r5, [sp, #20]
   818d8:	af16      	add	r7, sp, #88	; 0x58
   818da:	e70e      	b.n	816fa <_vfiprintf_r+0x4da>
   818dc:	9806      	ldr	r0, [sp, #24]
   818de:	9902      	ldr	r1, [sp, #8]
   818e0:	aa13      	add	r2, sp, #76	; 0x4c
   818e2:	f7ff fc61 	bl	811a8 <__sprint_r.part.0>
   818e6:	2800      	cmp	r0, #0
   818e8:	f040 80ed 	bne.w	81ac6 <_vfiprintf_r+0x8a6>
   818ec:	9814      	ldr	r0, [sp, #80]	; 0x50
   818ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
   818f0:	1c43      	adds	r3, r0, #1
   818f2:	46cc      	mov	ip, r9
   818f4:	e5fe      	b.n	814f4 <_vfiprintf_r+0x2d4>
   818f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   818f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   818fa:	1c59      	adds	r1, r3, #1
   818fc:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81900:	b168      	cbz	r0, 8191e <_vfiprintf_r+0x6fe>
   81902:	3201      	adds	r2, #1
   81904:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81908:	2301      	movs	r3, #1
   8190a:	2907      	cmp	r1, #7
   8190c:	9215      	str	r2, [sp, #84]	; 0x54
   8190e:	9114      	str	r1, [sp, #80]	; 0x50
   81910:	e886 0009 	stmia.w	r6, {r0, r3}
   81914:	f300 8160 	bgt.w	81bd8 <_vfiprintf_r+0x9b8>
   81918:	460b      	mov	r3, r1
   8191a:	3608      	adds	r6, #8
   8191c:	3101      	adds	r1, #1
   8191e:	9c07      	ldr	r4, [sp, #28]
   81920:	b164      	cbz	r4, 8193c <_vfiprintf_r+0x71c>
   81922:	3202      	adds	r2, #2
   81924:	a812      	add	r0, sp, #72	; 0x48
   81926:	2302      	movs	r3, #2
   81928:	2907      	cmp	r1, #7
   8192a:	9215      	str	r2, [sp, #84]	; 0x54
   8192c:	9114      	str	r1, [sp, #80]	; 0x50
   8192e:	e886 0009 	stmia.w	r6, {r0, r3}
   81932:	f300 8157 	bgt.w	81be4 <_vfiprintf_r+0x9c4>
   81936:	460b      	mov	r3, r1
   81938:	3608      	adds	r6, #8
   8193a:	3101      	adds	r1, #1
   8193c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8193e:	2d80      	cmp	r5, #128	; 0x80
   81940:	f000 8101 	beq.w	81b46 <_vfiprintf_r+0x926>
   81944:	9d05      	ldr	r5, [sp, #20]
   81946:	ebc5 040c 	rsb	r4, r5, ip
   8194a:	2c00      	cmp	r4, #0
   8194c:	dd2f      	ble.n	819ae <_vfiprintf_r+0x78e>
   8194e:	2c10      	cmp	r4, #16
   81950:	4d57      	ldr	r5, [pc, #348]	; (81ab0 <_vfiprintf_r+0x890>)
   81952:	dd22      	ble.n	8199a <_vfiprintf_r+0x77a>
   81954:	4630      	mov	r0, r6
   81956:	f04f 0b10 	mov.w	fp, #16
   8195a:	462e      	mov	r6, r5
   8195c:	4625      	mov	r5, r4
   8195e:	9c06      	ldr	r4, [sp, #24]
   81960:	e006      	b.n	81970 <_vfiprintf_r+0x750>
   81962:	f103 0c02 	add.w	ip, r3, #2
   81966:	3008      	adds	r0, #8
   81968:	460b      	mov	r3, r1
   8196a:	3d10      	subs	r5, #16
   8196c:	2d10      	cmp	r5, #16
   8196e:	dd10      	ble.n	81992 <_vfiprintf_r+0x772>
   81970:	1c59      	adds	r1, r3, #1
   81972:	3210      	adds	r2, #16
   81974:	2907      	cmp	r1, #7
   81976:	9215      	str	r2, [sp, #84]	; 0x54
   81978:	e880 0840 	stmia.w	r0, {r6, fp}
   8197c:	9114      	str	r1, [sp, #80]	; 0x50
   8197e:	ddf0      	ble.n	81962 <_vfiprintf_r+0x742>
   81980:	2a00      	cmp	r2, #0
   81982:	d163      	bne.n	81a4c <_vfiprintf_r+0x82c>
   81984:	3d10      	subs	r5, #16
   81986:	2d10      	cmp	r5, #16
   81988:	f04f 0c01 	mov.w	ip, #1
   8198c:	4613      	mov	r3, r2
   8198e:	4648      	mov	r0, r9
   81990:	dcee      	bgt.n	81970 <_vfiprintf_r+0x750>
   81992:	462c      	mov	r4, r5
   81994:	4661      	mov	r1, ip
   81996:	4635      	mov	r5, r6
   81998:	4606      	mov	r6, r0
   8199a:	4422      	add	r2, r4
   8199c:	2907      	cmp	r1, #7
   8199e:	9215      	str	r2, [sp, #84]	; 0x54
   819a0:	6035      	str	r5, [r6, #0]
   819a2:	6074      	str	r4, [r6, #4]
   819a4:	9114      	str	r1, [sp, #80]	; 0x50
   819a6:	f300 80c1 	bgt.w	81b2c <_vfiprintf_r+0x90c>
   819aa:	3608      	adds	r6, #8
   819ac:	3101      	adds	r1, #1
   819ae:	9d05      	ldr	r5, [sp, #20]
   819b0:	2907      	cmp	r1, #7
   819b2:	442a      	add	r2, r5
   819b4:	9215      	str	r2, [sp, #84]	; 0x54
   819b6:	6037      	str	r7, [r6, #0]
   819b8:	6075      	str	r5, [r6, #4]
   819ba:	9114      	str	r1, [sp, #80]	; 0x50
   819bc:	f340 80c1 	ble.w	81b42 <_vfiprintf_r+0x922>
   819c0:	2a00      	cmp	r2, #0
   819c2:	f040 8130 	bne.w	81c26 <_vfiprintf_r+0xa06>
   819c6:	9214      	str	r2, [sp, #80]	; 0x50
   819c8:	464e      	mov	r6, r9
   819ca:	f01a 0f04 	tst.w	sl, #4
   819ce:	f000 808b 	beq.w	81ae8 <_vfiprintf_r+0x8c8>
   819d2:	9d04      	ldr	r5, [sp, #16]
   819d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   819d8:	ebcb 0405 	rsb	r4, fp, r5
   819dc:	2c00      	cmp	r4, #0
   819de:	f340 8083 	ble.w	81ae8 <_vfiprintf_r+0x8c8>
   819e2:	2c10      	cmp	r4, #16
   819e4:	f340 821e 	ble.w	81e24 <_vfiprintf_r+0xc04>
   819e8:	9914      	ldr	r1, [sp, #80]	; 0x50
   819ea:	4d32      	ldr	r5, [pc, #200]	; (81ab4 <_vfiprintf_r+0x894>)
   819ec:	2710      	movs	r7, #16
   819ee:	f8dd a018 	ldr.w	sl, [sp, #24]
   819f2:	f8dd b008 	ldr.w	fp, [sp, #8]
   819f6:	e005      	b.n	81a04 <_vfiprintf_r+0x7e4>
   819f8:	1c88      	adds	r0, r1, #2
   819fa:	3608      	adds	r6, #8
   819fc:	4619      	mov	r1, r3
   819fe:	3c10      	subs	r4, #16
   81a00:	2c10      	cmp	r4, #16
   81a02:	dd10      	ble.n	81a26 <_vfiprintf_r+0x806>
   81a04:	1c4b      	adds	r3, r1, #1
   81a06:	3210      	adds	r2, #16
   81a08:	2b07      	cmp	r3, #7
   81a0a:	9215      	str	r2, [sp, #84]	; 0x54
   81a0c:	e886 00a0 	stmia.w	r6, {r5, r7}
   81a10:	9314      	str	r3, [sp, #80]	; 0x50
   81a12:	ddf1      	ble.n	819f8 <_vfiprintf_r+0x7d8>
   81a14:	2a00      	cmp	r2, #0
   81a16:	d17d      	bne.n	81b14 <_vfiprintf_r+0x8f4>
   81a18:	3c10      	subs	r4, #16
   81a1a:	2c10      	cmp	r4, #16
   81a1c:	f04f 0001 	mov.w	r0, #1
   81a20:	4611      	mov	r1, r2
   81a22:	464e      	mov	r6, r9
   81a24:	dcee      	bgt.n	81a04 <_vfiprintf_r+0x7e4>
   81a26:	4422      	add	r2, r4
   81a28:	2807      	cmp	r0, #7
   81a2a:	9215      	str	r2, [sp, #84]	; 0x54
   81a2c:	6035      	str	r5, [r6, #0]
   81a2e:	6074      	str	r4, [r6, #4]
   81a30:	9014      	str	r0, [sp, #80]	; 0x50
   81a32:	dd59      	ble.n	81ae8 <_vfiprintf_r+0x8c8>
   81a34:	2a00      	cmp	r2, #0
   81a36:	d14f      	bne.n	81ad8 <_vfiprintf_r+0x8b8>
   81a38:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81a3a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a3e:	9d04      	ldr	r5, [sp, #16]
   81a40:	45ab      	cmp	fp, r5
   81a42:	bfac      	ite	ge
   81a44:	445c      	addge	r4, fp
   81a46:	1964      	addlt	r4, r4, r5
   81a48:	9409      	str	r4, [sp, #36]	; 0x24
   81a4a:	e05e      	b.n	81b0a <_vfiprintf_r+0x8ea>
   81a4c:	4620      	mov	r0, r4
   81a4e:	9902      	ldr	r1, [sp, #8]
   81a50:	aa13      	add	r2, sp, #76	; 0x4c
   81a52:	f7ff fba9 	bl	811a8 <__sprint_r.part.0>
   81a56:	2800      	cmp	r0, #0
   81a58:	d135      	bne.n	81ac6 <_vfiprintf_r+0x8a6>
   81a5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81a5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a5e:	f103 0c01 	add.w	ip, r3, #1
   81a62:	4648      	mov	r0, r9
   81a64:	e781      	b.n	8196a <_vfiprintf_r+0x74a>
   81a66:	08e0      	lsrs	r0, r4, #3
   81a68:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81a6c:	f004 0207 	and.w	r2, r4, #7
   81a70:	08e9      	lsrs	r1, r5, #3
   81a72:	3230      	adds	r2, #48	; 0x30
   81a74:	ea50 0b01 	orrs.w	fp, r0, r1
   81a78:	461f      	mov	r7, r3
   81a7a:	701a      	strb	r2, [r3, #0]
   81a7c:	4604      	mov	r4, r0
   81a7e:	460d      	mov	r5, r1
   81a80:	f103 33ff 	add.w	r3, r3, #4294967295
   81a84:	d1ef      	bne.n	81a66 <_vfiprintf_r+0x846>
   81a86:	f01a 0f01 	tst.w	sl, #1
   81a8a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81a8e:	4639      	mov	r1, r7
   81a90:	f000 80b9 	beq.w	81c06 <_vfiprintf_r+0x9e6>
   81a94:	2a30      	cmp	r2, #48	; 0x30
   81a96:	f43f acf4 	beq.w	81482 <_vfiprintf_r+0x262>
   81a9a:	461f      	mov	r7, r3
   81a9c:	ebc7 0509 	rsb	r5, r7, r9
   81aa0:	2330      	movs	r3, #48	; 0x30
   81aa2:	9505      	str	r5, [sp, #20]
   81aa4:	f801 3c01 	strb.w	r3, [r1, #-1]
   81aa8:	e4ee      	b.n	81488 <_vfiprintf_r+0x268>
   81aaa:	bf00      	nop
   81aac:	00083fa0 	.word	0x00083fa0
   81ab0:	00083fbc 	.word	0x00083fbc
   81ab4:	00083fcc 	.word	0x00083fcc
   81ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81aba:	b123      	cbz	r3, 81ac6 <_vfiprintf_r+0x8a6>
   81abc:	9806      	ldr	r0, [sp, #24]
   81abe:	9902      	ldr	r1, [sp, #8]
   81ac0:	aa13      	add	r2, sp, #76	; 0x4c
   81ac2:	f7ff fb71 	bl	811a8 <__sprint_r.part.0>
   81ac6:	9c02      	ldr	r4, [sp, #8]
   81ac8:	89a3      	ldrh	r3, [r4, #12]
   81aca:	065b      	lsls	r3, r3, #25
   81acc:	f53f ac98 	bmi.w	81400 <_vfiprintf_r+0x1e0>
   81ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
   81ad2:	b031      	add	sp, #196	; 0xc4
   81ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ad8:	9806      	ldr	r0, [sp, #24]
   81ada:	9902      	ldr	r1, [sp, #8]
   81adc:	aa13      	add	r2, sp, #76	; 0x4c
   81ade:	f7ff fb63 	bl	811a8 <__sprint_r.part.0>
   81ae2:	2800      	cmp	r0, #0
   81ae4:	d1ef      	bne.n	81ac6 <_vfiprintf_r+0x8a6>
   81ae6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ae8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81aea:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81aee:	9d04      	ldr	r5, [sp, #16]
   81af0:	45ab      	cmp	fp, r5
   81af2:	bfac      	ite	ge
   81af4:	445c      	addge	r4, fp
   81af6:	1964      	addlt	r4, r4, r5
   81af8:	9409      	str	r4, [sp, #36]	; 0x24
   81afa:	b132      	cbz	r2, 81b0a <_vfiprintf_r+0x8ea>
   81afc:	9806      	ldr	r0, [sp, #24]
   81afe:	9902      	ldr	r1, [sp, #8]
   81b00:	aa13      	add	r2, sp, #76	; 0x4c
   81b02:	f7ff fb51 	bl	811a8 <__sprint_r.part.0>
   81b06:	2800      	cmp	r0, #0
   81b08:	d1dd      	bne.n	81ac6 <_vfiprintf_r+0x8a6>
   81b0a:	2000      	movs	r0, #0
   81b0c:	9014      	str	r0, [sp, #80]	; 0x50
   81b0e:	464e      	mov	r6, r9
   81b10:	f7ff bbb9 	b.w	81286 <_vfiprintf_r+0x66>
   81b14:	4650      	mov	r0, sl
   81b16:	4659      	mov	r1, fp
   81b18:	aa13      	add	r2, sp, #76	; 0x4c
   81b1a:	f7ff fb45 	bl	811a8 <__sprint_r.part.0>
   81b1e:	2800      	cmp	r0, #0
   81b20:	d1d1      	bne.n	81ac6 <_vfiprintf_r+0x8a6>
   81b22:	9914      	ldr	r1, [sp, #80]	; 0x50
   81b24:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b26:	1c48      	adds	r0, r1, #1
   81b28:	464e      	mov	r6, r9
   81b2a:	e768      	b.n	819fe <_vfiprintf_r+0x7de>
   81b2c:	2a00      	cmp	r2, #0
   81b2e:	f040 80f7 	bne.w	81d20 <_vfiprintf_r+0xb00>
   81b32:	9c05      	ldr	r4, [sp, #20]
   81b34:	2301      	movs	r3, #1
   81b36:	9720      	str	r7, [sp, #128]	; 0x80
   81b38:	9421      	str	r4, [sp, #132]	; 0x84
   81b3a:	9415      	str	r4, [sp, #84]	; 0x54
   81b3c:	4622      	mov	r2, r4
   81b3e:	9314      	str	r3, [sp, #80]	; 0x50
   81b40:	464e      	mov	r6, r9
   81b42:	3608      	adds	r6, #8
   81b44:	e741      	b.n	819ca <_vfiprintf_r+0x7aa>
   81b46:	9d04      	ldr	r5, [sp, #16]
   81b48:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81b4c:	ebcb 0405 	rsb	r4, fp, r5
   81b50:	2c00      	cmp	r4, #0
   81b52:	f77f aef7 	ble.w	81944 <_vfiprintf_r+0x724>
   81b56:	2c10      	cmp	r4, #16
   81b58:	4da6      	ldr	r5, [pc, #664]	; (81df4 <_vfiprintf_r+0xbd4>)
   81b5a:	f340 8170 	ble.w	81e3e <_vfiprintf_r+0xc1e>
   81b5e:	4629      	mov	r1, r5
   81b60:	f04f 0b10 	mov.w	fp, #16
   81b64:	4625      	mov	r5, r4
   81b66:	4664      	mov	r4, ip
   81b68:	46b4      	mov	ip, r6
   81b6a:	460e      	mov	r6, r1
   81b6c:	e006      	b.n	81b7c <_vfiprintf_r+0x95c>
   81b6e:	1c98      	adds	r0, r3, #2
   81b70:	f10c 0c08 	add.w	ip, ip, #8
   81b74:	460b      	mov	r3, r1
   81b76:	3d10      	subs	r5, #16
   81b78:	2d10      	cmp	r5, #16
   81b7a:	dd0f      	ble.n	81b9c <_vfiprintf_r+0x97c>
   81b7c:	1c59      	adds	r1, r3, #1
   81b7e:	3210      	adds	r2, #16
   81b80:	2907      	cmp	r1, #7
   81b82:	9215      	str	r2, [sp, #84]	; 0x54
   81b84:	e88c 0840 	stmia.w	ip, {r6, fp}
   81b88:	9114      	str	r1, [sp, #80]	; 0x50
   81b8a:	ddf0      	ble.n	81b6e <_vfiprintf_r+0x94e>
   81b8c:	b9ba      	cbnz	r2, 81bbe <_vfiprintf_r+0x99e>
   81b8e:	3d10      	subs	r5, #16
   81b90:	2d10      	cmp	r5, #16
   81b92:	f04f 0001 	mov.w	r0, #1
   81b96:	4613      	mov	r3, r2
   81b98:	46cc      	mov	ip, r9
   81b9a:	dcef      	bgt.n	81b7c <_vfiprintf_r+0x95c>
   81b9c:	4633      	mov	r3, r6
   81b9e:	4666      	mov	r6, ip
   81ba0:	46a4      	mov	ip, r4
   81ba2:	462c      	mov	r4, r5
   81ba4:	461d      	mov	r5, r3
   81ba6:	4422      	add	r2, r4
   81ba8:	2807      	cmp	r0, #7
   81baa:	9215      	str	r2, [sp, #84]	; 0x54
   81bac:	6035      	str	r5, [r6, #0]
   81bae:	6074      	str	r4, [r6, #4]
   81bb0:	9014      	str	r0, [sp, #80]	; 0x50
   81bb2:	f300 80af 	bgt.w	81d14 <_vfiprintf_r+0xaf4>
   81bb6:	3608      	adds	r6, #8
   81bb8:	1c41      	adds	r1, r0, #1
   81bba:	4603      	mov	r3, r0
   81bbc:	e6c2      	b.n	81944 <_vfiprintf_r+0x724>
   81bbe:	9806      	ldr	r0, [sp, #24]
   81bc0:	9902      	ldr	r1, [sp, #8]
   81bc2:	aa13      	add	r2, sp, #76	; 0x4c
   81bc4:	f7ff faf0 	bl	811a8 <__sprint_r.part.0>
   81bc8:	2800      	cmp	r0, #0
   81bca:	f47f af7c 	bne.w	81ac6 <_vfiprintf_r+0x8a6>
   81bce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81bd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bd2:	1c58      	adds	r0, r3, #1
   81bd4:	46cc      	mov	ip, r9
   81bd6:	e7ce      	b.n	81b76 <_vfiprintf_r+0x956>
   81bd8:	2a00      	cmp	r2, #0
   81bda:	d179      	bne.n	81cd0 <_vfiprintf_r+0xab0>
   81bdc:	4619      	mov	r1, r3
   81bde:	464e      	mov	r6, r9
   81be0:	4613      	mov	r3, r2
   81be2:	e69c      	b.n	8191e <_vfiprintf_r+0x6fe>
   81be4:	2a00      	cmp	r2, #0
   81be6:	f040 8084 	bne.w	81cf2 <_vfiprintf_r+0xad2>
   81bea:	2101      	movs	r1, #1
   81bec:	4613      	mov	r3, r2
   81bee:	464e      	mov	r6, r9
   81bf0:	e6a4      	b.n	8193c <_vfiprintf_r+0x71c>
   81bf2:	464f      	mov	r7, r9
   81bf4:	e448      	b.n	81488 <_vfiprintf_r+0x268>
   81bf6:	2d00      	cmp	r5, #0
   81bf8:	bf08      	it	eq
   81bfa:	2c0a      	cmpeq	r4, #10
   81bfc:	d246      	bcs.n	81c8c <_vfiprintf_r+0xa6c>
   81bfe:	3430      	adds	r4, #48	; 0x30
   81c00:	af30      	add	r7, sp, #192	; 0xc0
   81c02:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81c06:	ebc7 0309 	rsb	r3, r7, r9
   81c0a:	9305      	str	r3, [sp, #20]
   81c0c:	e43c      	b.n	81488 <_vfiprintf_r+0x268>
   81c0e:	2302      	movs	r3, #2
   81c10:	e417      	b.n	81442 <_vfiprintf_r+0x222>
   81c12:	2a00      	cmp	r2, #0
   81c14:	f040 80af 	bne.w	81d76 <_vfiprintf_r+0xb56>
   81c18:	4613      	mov	r3, r2
   81c1a:	2101      	movs	r1, #1
   81c1c:	464e      	mov	r6, r9
   81c1e:	e66d      	b.n	818fc <_vfiprintf_r+0x6dc>
   81c20:	4644      	mov	r4, r8
   81c22:	f7ff bb58 	b.w	812d6 <_vfiprintf_r+0xb6>
   81c26:	9806      	ldr	r0, [sp, #24]
   81c28:	9902      	ldr	r1, [sp, #8]
   81c2a:	aa13      	add	r2, sp, #76	; 0x4c
   81c2c:	f7ff fabc 	bl	811a8 <__sprint_r.part.0>
   81c30:	2800      	cmp	r0, #0
   81c32:	f47f af48 	bne.w	81ac6 <_vfiprintf_r+0x8a6>
   81c36:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c38:	464e      	mov	r6, r9
   81c3a:	e6c6      	b.n	819ca <_vfiprintf_r+0x7aa>
   81c3c:	9d08      	ldr	r5, [sp, #32]
   81c3e:	682c      	ldr	r4, [r5, #0]
   81c40:	3504      	adds	r5, #4
   81c42:	9508      	str	r5, [sp, #32]
   81c44:	2500      	movs	r5, #0
   81c46:	f7ff bbfc 	b.w	81442 <_vfiprintf_r+0x222>
   81c4a:	9d08      	ldr	r5, [sp, #32]
   81c4c:	2301      	movs	r3, #1
   81c4e:	682c      	ldr	r4, [r5, #0]
   81c50:	3504      	adds	r5, #4
   81c52:	9508      	str	r5, [sp, #32]
   81c54:	2500      	movs	r5, #0
   81c56:	f7ff bbf4 	b.w	81442 <_vfiprintf_r+0x222>
   81c5a:	9d08      	ldr	r5, [sp, #32]
   81c5c:	682c      	ldr	r4, [r5, #0]
   81c5e:	3504      	adds	r5, #4
   81c60:	9508      	str	r5, [sp, #32]
   81c62:	2500      	movs	r5, #0
   81c64:	e525      	b.n	816b2 <_vfiprintf_r+0x492>
   81c66:	9d08      	ldr	r5, [sp, #32]
   81c68:	682c      	ldr	r4, [r5, #0]
   81c6a:	3504      	adds	r5, #4
   81c6c:	9508      	str	r5, [sp, #32]
   81c6e:	17e5      	asrs	r5, r4, #31
   81c70:	4622      	mov	r2, r4
   81c72:	462b      	mov	r3, r5
   81c74:	e48e      	b.n	81594 <_vfiprintf_r+0x374>
   81c76:	9806      	ldr	r0, [sp, #24]
   81c78:	9902      	ldr	r1, [sp, #8]
   81c7a:	aa13      	add	r2, sp, #76	; 0x4c
   81c7c:	f7ff fa94 	bl	811a8 <__sprint_r.part.0>
   81c80:	2800      	cmp	r0, #0
   81c82:	f47f af20 	bne.w	81ac6 <_vfiprintf_r+0x8a6>
   81c86:	464e      	mov	r6, r9
   81c88:	f7ff bb9a 	b.w	813c0 <_vfiprintf_r+0x1a0>
   81c8c:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81c90:	9603      	str	r6, [sp, #12]
   81c92:	465e      	mov	r6, fp
   81c94:	46e3      	mov	fp, ip
   81c96:	4620      	mov	r0, r4
   81c98:	4629      	mov	r1, r5
   81c9a:	220a      	movs	r2, #10
   81c9c:	2300      	movs	r3, #0
   81c9e:	f001 fe5f 	bl	83960 <__aeabi_uldivmod>
   81ca2:	3230      	adds	r2, #48	; 0x30
   81ca4:	7032      	strb	r2, [r6, #0]
   81ca6:	4620      	mov	r0, r4
   81ca8:	4629      	mov	r1, r5
   81caa:	220a      	movs	r2, #10
   81cac:	2300      	movs	r3, #0
   81cae:	f001 fe57 	bl	83960 <__aeabi_uldivmod>
   81cb2:	4604      	mov	r4, r0
   81cb4:	460d      	mov	r5, r1
   81cb6:	ea54 0005 	orrs.w	r0, r4, r5
   81cba:	4637      	mov	r7, r6
   81cbc:	f106 36ff 	add.w	r6, r6, #4294967295
   81cc0:	d1e9      	bne.n	81c96 <_vfiprintf_r+0xa76>
   81cc2:	ebc7 0309 	rsb	r3, r7, r9
   81cc6:	46dc      	mov	ip, fp
   81cc8:	9e03      	ldr	r6, [sp, #12]
   81cca:	9305      	str	r3, [sp, #20]
   81ccc:	f7ff bbdc 	b.w	81488 <_vfiprintf_r+0x268>
   81cd0:	9806      	ldr	r0, [sp, #24]
   81cd2:	9902      	ldr	r1, [sp, #8]
   81cd4:	aa13      	add	r2, sp, #76	; 0x4c
   81cd6:	f8cd c004 	str.w	ip, [sp, #4]
   81cda:	f7ff fa65 	bl	811a8 <__sprint_r.part.0>
   81cde:	f8dd c004 	ldr.w	ip, [sp, #4]
   81ce2:	2800      	cmp	r0, #0
   81ce4:	f47f aeef 	bne.w	81ac6 <_vfiprintf_r+0x8a6>
   81ce8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81cea:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cec:	1c59      	adds	r1, r3, #1
   81cee:	464e      	mov	r6, r9
   81cf0:	e615      	b.n	8191e <_vfiprintf_r+0x6fe>
   81cf2:	9806      	ldr	r0, [sp, #24]
   81cf4:	9902      	ldr	r1, [sp, #8]
   81cf6:	aa13      	add	r2, sp, #76	; 0x4c
   81cf8:	f8cd c004 	str.w	ip, [sp, #4]
   81cfc:	f7ff fa54 	bl	811a8 <__sprint_r.part.0>
   81d00:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d04:	2800      	cmp	r0, #0
   81d06:	f47f aede 	bne.w	81ac6 <_vfiprintf_r+0x8a6>
   81d0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d0e:	1c59      	adds	r1, r3, #1
   81d10:	464e      	mov	r6, r9
   81d12:	e613      	b.n	8193c <_vfiprintf_r+0x71c>
   81d14:	2a00      	cmp	r2, #0
   81d16:	d156      	bne.n	81dc6 <_vfiprintf_r+0xba6>
   81d18:	2101      	movs	r1, #1
   81d1a:	4613      	mov	r3, r2
   81d1c:	464e      	mov	r6, r9
   81d1e:	e611      	b.n	81944 <_vfiprintf_r+0x724>
   81d20:	9806      	ldr	r0, [sp, #24]
   81d22:	9902      	ldr	r1, [sp, #8]
   81d24:	aa13      	add	r2, sp, #76	; 0x4c
   81d26:	f7ff fa3f 	bl	811a8 <__sprint_r.part.0>
   81d2a:	2800      	cmp	r0, #0
   81d2c:	f47f aecb 	bne.w	81ac6 <_vfiprintf_r+0x8a6>
   81d30:	9914      	ldr	r1, [sp, #80]	; 0x50
   81d32:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d34:	3101      	adds	r1, #1
   81d36:	464e      	mov	r6, r9
   81d38:	e639      	b.n	819ae <_vfiprintf_r+0x78e>
   81d3a:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81d3e:	4264      	negs	r4, r4
   81d40:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81d44:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81d48:	f8cd b01c 	str.w	fp, [sp, #28]
   81d4c:	f8cd c014 	str.w	ip, [sp, #20]
   81d50:	2301      	movs	r3, #1
   81d52:	f7ff bb7e 	b.w	81452 <_vfiprintf_r+0x232>
   81d56:	f01a 0f10 	tst.w	sl, #16
   81d5a:	d11d      	bne.n	81d98 <_vfiprintf_r+0xb78>
   81d5c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81d60:	d058      	beq.n	81e14 <_vfiprintf_r+0xbf4>
   81d62:	9d08      	ldr	r5, [sp, #32]
   81d64:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81d68:	682b      	ldr	r3, [r5, #0]
   81d6a:	3504      	adds	r5, #4
   81d6c:	9508      	str	r5, [sp, #32]
   81d6e:	f8a3 b000 	strh.w	fp, [r3]
   81d72:	f7ff ba88 	b.w	81286 <_vfiprintf_r+0x66>
   81d76:	9806      	ldr	r0, [sp, #24]
   81d78:	9902      	ldr	r1, [sp, #8]
   81d7a:	aa13      	add	r2, sp, #76	; 0x4c
   81d7c:	f8cd c004 	str.w	ip, [sp, #4]
   81d80:	f7ff fa12 	bl	811a8 <__sprint_r.part.0>
   81d84:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d88:	2800      	cmp	r0, #0
   81d8a:	f47f ae9c 	bne.w	81ac6 <_vfiprintf_r+0x8a6>
   81d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d90:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d92:	1c59      	adds	r1, r3, #1
   81d94:	464e      	mov	r6, r9
   81d96:	e5b1      	b.n	818fc <_vfiprintf_r+0x6dc>
   81d98:	f8dd b020 	ldr.w	fp, [sp, #32]
   81d9c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81d9e:	f8db 3000 	ldr.w	r3, [fp]
   81da2:	f10b 0b04 	add.w	fp, fp, #4
   81da6:	f8cd b020 	str.w	fp, [sp, #32]
   81daa:	601c      	str	r4, [r3, #0]
   81dac:	f7ff ba6b 	b.w	81286 <_vfiprintf_r+0x66>
   81db0:	9408      	str	r4, [sp, #32]
   81db2:	f001 fc0b 	bl	835cc <strlen>
   81db6:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81dba:	9005      	str	r0, [sp, #20]
   81dbc:	9407      	str	r4, [sp, #28]
   81dbe:	f04f 0c00 	mov.w	ip, #0
   81dc2:	f7ff bb61 	b.w	81488 <_vfiprintf_r+0x268>
   81dc6:	9806      	ldr	r0, [sp, #24]
   81dc8:	9902      	ldr	r1, [sp, #8]
   81dca:	aa13      	add	r2, sp, #76	; 0x4c
   81dcc:	f8cd c004 	str.w	ip, [sp, #4]
   81dd0:	f7ff f9ea 	bl	811a8 <__sprint_r.part.0>
   81dd4:	f8dd c004 	ldr.w	ip, [sp, #4]
   81dd8:	2800      	cmp	r0, #0
   81dda:	f47f ae74 	bne.w	81ac6 <_vfiprintf_r+0x8a6>
   81dde:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81de0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81de2:	1c59      	adds	r1, r3, #1
   81de4:	464e      	mov	r6, r9
   81de6:	e5ad      	b.n	81944 <_vfiprintf_r+0x724>
   81de8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81dea:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81dec:	3301      	adds	r3, #1
   81dee:	4d02      	ldr	r5, [pc, #8]	; (81df8 <_vfiprintf_r+0xbd8>)
   81df0:	f7ff bb9a 	b.w	81528 <_vfiprintf_r+0x308>
   81df4:	00083fbc 	.word	0x00083fbc
   81df8:	00083fcc 	.word	0x00083fcc
   81dfc:	f1bc 0f06 	cmp.w	ip, #6
   81e00:	bf34      	ite	cc
   81e02:	4663      	movcc	r3, ip
   81e04:	2306      	movcs	r3, #6
   81e06:	9408      	str	r4, [sp, #32]
   81e08:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81e0c:	9305      	str	r3, [sp, #20]
   81e0e:	9403      	str	r4, [sp, #12]
   81e10:	4f16      	ldr	r7, [pc, #88]	; (81e6c <_vfiprintf_r+0xc4c>)
   81e12:	e472      	b.n	816fa <_vfiprintf_r+0x4da>
   81e14:	9c08      	ldr	r4, [sp, #32]
   81e16:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81e18:	6823      	ldr	r3, [r4, #0]
   81e1a:	3404      	adds	r4, #4
   81e1c:	9408      	str	r4, [sp, #32]
   81e1e:	601d      	str	r5, [r3, #0]
   81e20:	f7ff ba31 	b.w	81286 <_vfiprintf_r+0x66>
   81e24:	9814      	ldr	r0, [sp, #80]	; 0x50
   81e26:	4d12      	ldr	r5, [pc, #72]	; (81e70 <_vfiprintf_r+0xc50>)
   81e28:	3001      	adds	r0, #1
   81e2a:	e5fc      	b.n	81a26 <_vfiprintf_r+0x806>
   81e2c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81e30:	f8cd c014 	str.w	ip, [sp, #20]
   81e34:	9507      	str	r5, [sp, #28]
   81e36:	9408      	str	r4, [sp, #32]
   81e38:	4684      	mov	ip, r0
   81e3a:	f7ff bb25 	b.w	81488 <_vfiprintf_r+0x268>
   81e3e:	4608      	mov	r0, r1
   81e40:	e6b1      	b.n	81ba6 <_vfiprintf_r+0x986>
   81e42:	46a0      	mov	r8, r4
   81e44:	2500      	movs	r5, #0
   81e46:	f7ff ba5a 	b.w	812fe <_vfiprintf_r+0xde>
   81e4a:	f8dd b020 	ldr.w	fp, [sp, #32]
   81e4e:	f898 3001 	ldrb.w	r3, [r8, #1]
   81e52:	f8db 5000 	ldr.w	r5, [fp]
   81e56:	f10b 0204 	add.w	r2, fp, #4
   81e5a:	2d00      	cmp	r5, #0
   81e5c:	9208      	str	r2, [sp, #32]
   81e5e:	46a0      	mov	r8, r4
   81e60:	f6bf aa4b 	bge.w	812fa <_vfiprintf_r+0xda>
   81e64:	f04f 35ff 	mov.w	r5, #4294967295
   81e68:	f7ff ba47 	b.w	812fa <_vfiprintf_r+0xda>
   81e6c:	00083fb4 	.word	0x00083fb4
   81e70:	00083fcc 	.word	0x00083fcc

00081e74 <__sbprintf>:
   81e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81e78:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81e7a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81e7e:	4688      	mov	r8, r1
   81e80:	9719      	str	r7, [sp, #100]	; 0x64
   81e82:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81e86:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81e8a:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81e8e:	9707      	str	r7, [sp, #28]
   81e90:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81e94:	ac1a      	add	r4, sp, #104	; 0x68
   81e96:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81e9a:	f02a 0a02 	bic.w	sl, sl, #2
   81e9e:	2600      	movs	r6, #0
   81ea0:	4669      	mov	r1, sp
   81ea2:	9400      	str	r4, [sp, #0]
   81ea4:	9404      	str	r4, [sp, #16]
   81ea6:	9502      	str	r5, [sp, #8]
   81ea8:	9505      	str	r5, [sp, #20]
   81eaa:	f8ad a00c 	strh.w	sl, [sp, #12]
   81eae:	f8ad 900e 	strh.w	r9, [sp, #14]
   81eb2:	9709      	str	r7, [sp, #36]	; 0x24
   81eb4:	9606      	str	r6, [sp, #24]
   81eb6:	4605      	mov	r5, r0
   81eb8:	f7ff f9b2 	bl	81220 <_vfiprintf_r>
   81ebc:	1e04      	subs	r4, r0, #0
   81ebe:	db07      	blt.n	81ed0 <__sbprintf+0x5c>
   81ec0:	4628      	mov	r0, r5
   81ec2:	4669      	mov	r1, sp
   81ec4:	f000 f92a 	bl	8211c <_fflush_r>
   81ec8:	42b0      	cmp	r0, r6
   81eca:	bf18      	it	ne
   81ecc:	f04f 34ff 	movne.w	r4, #4294967295
   81ed0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81ed4:	065b      	lsls	r3, r3, #25
   81ed6:	d505      	bpl.n	81ee4 <__sbprintf+0x70>
   81ed8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81ee0:	f8a8 300c 	strh.w	r3, [r8, #12]
   81ee4:	4620      	mov	r0, r4
   81ee6:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81eee:	bf00      	nop

00081ef0 <__swsetup_r>:
   81ef0:	4b2f      	ldr	r3, [pc, #188]	; (81fb0 <__swsetup_r+0xc0>)
   81ef2:	b570      	push	{r4, r5, r6, lr}
   81ef4:	4606      	mov	r6, r0
   81ef6:	6818      	ldr	r0, [r3, #0]
   81ef8:	460c      	mov	r4, r1
   81efa:	b110      	cbz	r0, 81f02 <__swsetup_r+0x12>
   81efc:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81efe:	2a00      	cmp	r2, #0
   81f00:	d036      	beq.n	81f70 <__swsetup_r+0x80>
   81f02:	89a5      	ldrh	r5, [r4, #12]
   81f04:	b2ab      	uxth	r3, r5
   81f06:	0719      	lsls	r1, r3, #28
   81f08:	d50c      	bpl.n	81f24 <__swsetup_r+0x34>
   81f0a:	6922      	ldr	r2, [r4, #16]
   81f0c:	b1aa      	cbz	r2, 81f3a <__swsetup_r+0x4a>
   81f0e:	f013 0101 	ands.w	r1, r3, #1
   81f12:	d01e      	beq.n	81f52 <__swsetup_r+0x62>
   81f14:	6963      	ldr	r3, [r4, #20]
   81f16:	2100      	movs	r1, #0
   81f18:	425b      	negs	r3, r3
   81f1a:	61a3      	str	r3, [r4, #24]
   81f1c:	60a1      	str	r1, [r4, #8]
   81f1e:	b1f2      	cbz	r2, 81f5e <__swsetup_r+0x6e>
   81f20:	2000      	movs	r0, #0
   81f22:	bd70      	pop	{r4, r5, r6, pc}
   81f24:	06da      	lsls	r2, r3, #27
   81f26:	d53a      	bpl.n	81f9e <__swsetup_r+0xae>
   81f28:	075b      	lsls	r3, r3, #29
   81f2a:	d424      	bmi.n	81f76 <__swsetup_r+0x86>
   81f2c:	6922      	ldr	r2, [r4, #16]
   81f2e:	f045 0308 	orr.w	r3, r5, #8
   81f32:	81a3      	strh	r3, [r4, #12]
   81f34:	b29b      	uxth	r3, r3
   81f36:	2a00      	cmp	r2, #0
   81f38:	d1e9      	bne.n	81f0e <__swsetup_r+0x1e>
   81f3a:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81f3e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81f42:	d0e4      	beq.n	81f0e <__swsetup_r+0x1e>
   81f44:	4630      	mov	r0, r6
   81f46:	4621      	mov	r1, r4
   81f48:	f000 fcce 	bl	828e8 <__smakebuf_r>
   81f4c:	89a3      	ldrh	r3, [r4, #12]
   81f4e:	6922      	ldr	r2, [r4, #16]
   81f50:	e7dd      	b.n	81f0e <__swsetup_r+0x1e>
   81f52:	0798      	lsls	r0, r3, #30
   81f54:	bf58      	it	pl
   81f56:	6961      	ldrpl	r1, [r4, #20]
   81f58:	60a1      	str	r1, [r4, #8]
   81f5a:	2a00      	cmp	r2, #0
   81f5c:	d1e0      	bne.n	81f20 <__swsetup_r+0x30>
   81f5e:	89a3      	ldrh	r3, [r4, #12]
   81f60:	061a      	lsls	r2, r3, #24
   81f62:	d5dd      	bpl.n	81f20 <__swsetup_r+0x30>
   81f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f68:	81a3      	strh	r3, [r4, #12]
   81f6a:	f04f 30ff 	mov.w	r0, #4294967295
   81f6e:	bd70      	pop	{r4, r5, r6, pc}
   81f70:	f000 f8f0 	bl	82154 <__sinit>
   81f74:	e7c5      	b.n	81f02 <__swsetup_r+0x12>
   81f76:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81f78:	b149      	cbz	r1, 81f8e <__swsetup_r+0x9e>
   81f7a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81f7e:	4299      	cmp	r1, r3
   81f80:	d003      	beq.n	81f8a <__swsetup_r+0x9a>
   81f82:	4630      	mov	r0, r6
   81f84:	f000 fa2a 	bl	823dc <_free_r>
   81f88:	89a5      	ldrh	r5, [r4, #12]
   81f8a:	2300      	movs	r3, #0
   81f8c:	6323      	str	r3, [r4, #48]	; 0x30
   81f8e:	6922      	ldr	r2, [r4, #16]
   81f90:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81f94:	2100      	movs	r1, #0
   81f96:	b2ad      	uxth	r5, r5
   81f98:	6022      	str	r2, [r4, #0]
   81f9a:	6061      	str	r1, [r4, #4]
   81f9c:	e7c7      	b.n	81f2e <__swsetup_r+0x3e>
   81f9e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81fa2:	2309      	movs	r3, #9
   81fa4:	6033      	str	r3, [r6, #0]
   81fa6:	f04f 30ff 	mov.w	r0, #4294967295
   81faa:	81a5      	strh	r5, [r4, #12]
   81fac:	bd70      	pop	{r4, r5, r6, pc}
   81fae:	bf00      	nop
   81fb0:	20070568 	.word	0x20070568

00081fb4 <register_fini>:
   81fb4:	4b02      	ldr	r3, [pc, #8]	; (81fc0 <register_fini+0xc>)
   81fb6:	b113      	cbz	r3, 81fbe <register_fini+0xa>
   81fb8:	4802      	ldr	r0, [pc, #8]	; (81fc4 <register_fini+0x10>)
   81fba:	f000 b805 	b.w	81fc8 <atexit>
   81fbe:	4770      	bx	lr
   81fc0:	00000000 	.word	0x00000000
   81fc4:	00082251 	.word	0x00082251

00081fc8 <atexit>:
   81fc8:	4601      	mov	r1, r0
   81fca:	2000      	movs	r0, #0
   81fcc:	4602      	mov	r2, r0
   81fce:	4603      	mov	r3, r0
   81fd0:	f001 bbca 	b.w	83768 <__register_exitproc>

00081fd4 <__sflush_r>:
   81fd4:	898b      	ldrh	r3, [r1, #12]
   81fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81fda:	b29a      	uxth	r2, r3
   81fdc:	460d      	mov	r5, r1
   81fde:	0711      	lsls	r1, r2, #28
   81fe0:	4680      	mov	r8, r0
   81fe2:	d43c      	bmi.n	8205e <__sflush_r+0x8a>
   81fe4:	686a      	ldr	r2, [r5, #4]
   81fe6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81fea:	2a00      	cmp	r2, #0
   81fec:	81ab      	strh	r3, [r5, #12]
   81fee:	dd59      	ble.n	820a4 <__sflush_r+0xd0>
   81ff0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81ff2:	2c00      	cmp	r4, #0
   81ff4:	d04b      	beq.n	8208e <__sflush_r+0xba>
   81ff6:	b29b      	uxth	r3, r3
   81ff8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81ffc:	2100      	movs	r1, #0
   81ffe:	b292      	uxth	r2, r2
   82000:	f8d8 6000 	ldr.w	r6, [r8]
   82004:	f8c8 1000 	str.w	r1, [r8]
   82008:	2a00      	cmp	r2, #0
   8200a:	d04f      	beq.n	820ac <__sflush_r+0xd8>
   8200c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8200e:	075f      	lsls	r7, r3, #29
   82010:	d505      	bpl.n	8201e <__sflush_r+0x4a>
   82012:	6869      	ldr	r1, [r5, #4]
   82014:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82016:	1a52      	subs	r2, r2, r1
   82018:	b10b      	cbz	r3, 8201e <__sflush_r+0x4a>
   8201a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8201c:	1ad2      	subs	r2, r2, r3
   8201e:	4640      	mov	r0, r8
   82020:	69e9      	ldr	r1, [r5, #28]
   82022:	2300      	movs	r3, #0
   82024:	47a0      	blx	r4
   82026:	1c44      	adds	r4, r0, #1
   82028:	d04a      	beq.n	820c0 <__sflush_r+0xec>
   8202a:	89ab      	ldrh	r3, [r5, #12]
   8202c:	692a      	ldr	r2, [r5, #16]
   8202e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82032:	b29b      	uxth	r3, r3
   82034:	2100      	movs	r1, #0
   82036:	602a      	str	r2, [r5, #0]
   82038:	04da      	lsls	r2, r3, #19
   8203a:	81ab      	strh	r3, [r5, #12]
   8203c:	6069      	str	r1, [r5, #4]
   8203e:	d44c      	bmi.n	820da <__sflush_r+0x106>
   82040:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82042:	f8c8 6000 	str.w	r6, [r8]
   82046:	b311      	cbz	r1, 8208e <__sflush_r+0xba>
   82048:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8204c:	4299      	cmp	r1, r3
   8204e:	d002      	beq.n	82056 <__sflush_r+0x82>
   82050:	4640      	mov	r0, r8
   82052:	f000 f9c3 	bl	823dc <_free_r>
   82056:	2000      	movs	r0, #0
   82058:	6328      	str	r0, [r5, #48]	; 0x30
   8205a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8205e:	692e      	ldr	r6, [r5, #16]
   82060:	b1ae      	cbz	r6, 8208e <__sflush_r+0xba>
   82062:	0791      	lsls	r1, r2, #30
   82064:	682c      	ldr	r4, [r5, #0]
   82066:	bf0c      	ite	eq
   82068:	696b      	ldreq	r3, [r5, #20]
   8206a:	2300      	movne	r3, #0
   8206c:	602e      	str	r6, [r5, #0]
   8206e:	1ba4      	subs	r4, r4, r6
   82070:	60ab      	str	r3, [r5, #8]
   82072:	e00a      	b.n	8208a <__sflush_r+0xb6>
   82074:	4632      	mov	r2, r6
   82076:	4623      	mov	r3, r4
   82078:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8207a:	4640      	mov	r0, r8
   8207c:	69e9      	ldr	r1, [r5, #28]
   8207e:	47b8      	blx	r7
   82080:	2800      	cmp	r0, #0
   82082:	ebc0 0404 	rsb	r4, r0, r4
   82086:	4406      	add	r6, r0
   82088:	dd04      	ble.n	82094 <__sflush_r+0xc0>
   8208a:	2c00      	cmp	r4, #0
   8208c:	dcf2      	bgt.n	82074 <__sflush_r+0xa0>
   8208e:	2000      	movs	r0, #0
   82090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82094:	89ab      	ldrh	r3, [r5, #12]
   82096:	f04f 30ff 	mov.w	r0, #4294967295
   8209a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8209e:	81ab      	strh	r3, [r5, #12]
   820a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820a4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   820a6:	2a00      	cmp	r2, #0
   820a8:	dca2      	bgt.n	81ff0 <__sflush_r+0x1c>
   820aa:	e7f0      	b.n	8208e <__sflush_r+0xba>
   820ac:	2301      	movs	r3, #1
   820ae:	4640      	mov	r0, r8
   820b0:	69e9      	ldr	r1, [r5, #28]
   820b2:	47a0      	blx	r4
   820b4:	1c43      	adds	r3, r0, #1
   820b6:	4602      	mov	r2, r0
   820b8:	d01e      	beq.n	820f8 <__sflush_r+0x124>
   820ba:	89ab      	ldrh	r3, [r5, #12]
   820bc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   820be:	e7a6      	b.n	8200e <__sflush_r+0x3a>
   820c0:	f8d8 3000 	ldr.w	r3, [r8]
   820c4:	b95b      	cbnz	r3, 820de <__sflush_r+0x10a>
   820c6:	89aa      	ldrh	r2, [r5, #12]
   820c8:	6929      	ldr	r1, [r5, #16]
   820ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   820ce:	b292      	uxth	r2, r2
   820d0:	606b      	str	r3, [r5, #4]
   820d2:	04d3      	lsls	r3, r2, #19
   820d4:	81aa      	strh	r2, [r5, #12]
   820d6:	6029      	str	r1, [r5, #0]
   820d8:	d5b2      	bpl.n	82040 <__sflush_r+0x6c>
   820da:	6528      	str	r0, [r5, #80]	; 0x50
   820dc:	e7b0      	b.n	82040 <__sflush_r+0x6c>
   820de:	2b1d      	cmp	r3, #29
   820e0:	d001      	beq.n	820e6 <__sflush_r+0x112>
   820e2:	2b16      	cmp	r3, #22
   820e4:	d113      	bne.n	8210e <__sflush_r+0x13a>
   820e6:	89a9      	ldrh	r1, [r5, #12]
   820e8:	692b      	ldr	r3, [r5, #16]
   820ea:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   820ee:	2200      	movs	r2, #0
   820f0:	81a9      	strh	r1, [r5, #12]
   820f2:	602b      	str	r3, [r5, #0]
   820f4:	606a      	str	r2, [r5, #4]
   820f6:	e7a3      	b.n	82040 <__sflush_r+0x6c>
   820f8:	f8d8 3000 	ldr.w	r3, [r8]
   820fc:	2b00      	cmp	r3, #0
   820fe:	d0dc      	beq.n	820ba <__sflush_r+0xe6>
   82100:	2b1d      	cmp	r3, #29
   82102:	d001      	beq.n	82108 <__sflush_r+0x134>
   82104:	2b16      	cmp	r3, #22
   82106:	d1c5      	bne.n	82094 <__sflush_r+0xc0>
   82108:	f8c8 6000 	str.w	r6, [r8]
   8210c:	e7bf      	b.n	8208e <__sflush_r+0xba>
   8210e:	89ab      	ldrh	r3, [r5, #12]
   82110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82114:	81ab      	strh	r3, [r5, #12]
   82116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8211a:	bf00      	nop

0008211c <_fflush_r>:
   8211c:	b510      	push	{r4, lr}
   8211e:	4604      	mov	r4, r0
   82120:	b082      	sub	sp, #8
   82122:	b108      	cbz	r0, 82128 <_fflush_r+0xc>
   82124:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82126:	b153      	cbz	r3, 8213e <_fflush_r+0x22>
   82128:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   8212c:	b908      	cbnz	r0, 82132 <_fflush_r+0x16>
   8212e:	b002      	add	sp, #8
   82130:	bd10      	pop	{r4, pc}
   82132:	4620      	mov	r0, r4
   82134:	b002      	add	sp, #8
   82136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8213a:	f7ff bf4b 	b.w	81fd4 <__sflush_r>
   8213e:	9101      	str	r1, [sp, #4]
   82140:	f000 f808 	bl	82154 <__sinit>
   82144:	9901      	ldr	r1, [sp, #4]
   82146:	e7ef      	b.n	82128 <_fflush_r+0xc>

00082148 <_cleanup_r>:
   82148:	4901      	ldr	r1, [pc, #4]	; (82150 <_cleanup_r+0x8>)
   8214a:	f000 bb9f 	b.w	8288c <_fwalk>
   8214e:	bf00      	nop
   82150:	000838b5 	.word	0x000838b5

00082154 <__sinit>:
   82154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82158:	6b84      	ldr	r4, [r0, #56]	; 0x38
   8215a:	b083      	sub	sp, #12
   8215c:	4607      	mov	r7, r0
   8215e:	2c00      	cmp	r4, #0
   82160:	d165      	bne.n	8222e <__sinit+0xda>
   82162:	687d      	ldr	r5, [r7, #4]
   82164:	4833      	ldr	r0, [pc, #204]	; (82234 <__sinit+0xe0>)
   82166:	2304      	movs	r3, #4
   82168:	2103      	movs	r1, #3
   8216a:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8216e:	63f8      	str	r0, [r7, #60]	; 0x3c
   82170:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82174:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82178:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8217c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82180:	81ab      	strh	r3, [r5, #12]
   82182:	602c      	str	r4, [r5, #0]
   82184:	606c      	str	r4, [r5, #4]
   82186:	60ac      	str	r4, [r5, #8]
   82188:	666c      	str	r4, [r5, #100]	; 0x64
   8218a:	81ec      	strh	r4, [r5, #14]
   8218c:	612c      	str	r4, [r5, #16]
   8218e:	616c      	str	r4, [r5, #20]
   82190:	61ac      	str	r4, [r5, #24]
   82192:	4621      	mov	r1, r4
   82194:	2208      	movs	r2, #8
   82196:	f7fe ff35 	bl	81004 <memset>
   8219a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82238 <__sinit+0xe4>
   8219e:	68be      	ldr	r6, [r7, #8]
   821a0:	f8df a098 	ldr.w	sl, [pc, #152]	; 8223c <__sinit+0xe8>
   821a4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82240 <__sinit+0xec>
   821a8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82244 <__sinit+0xf0>
   821ac:	2301      	movs	r3, #1
   821ae:	2209      	movs	r2, #9
   821b0:	61ed      	str	r5, [r5, #28]
   821b2:	f8c5 b020 	str.w	fp, [r5, #32]
   821b6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   821ba:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   821be:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   821c2:	4621      	mov	r1, r4
   821c4:	81f3      	strh	r3, [r6, #14]
   821c6:	81b2      	strh	r2, [r6, #12]
   821c8:	6034      	str	r4, [r6, #0]
   821ca:	6074      	str	r4, [r6, #4]
   821cc:	60b4      	str	r4, [r6, #8]
   821ce:	6674      	str	r4, [r6, #100]	; 0x64
   821d0:	6134      	str	r4, [r6, #16]
   821d2:	6174      	str	r4, [r6, #20]
   821d4:	61b4      	str	r4, [r6, #24]
   821d6:	2208      	movs	r2, #8
   821d8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   821dc:	9301      	str	r3, [sp, #4]
   821de:	f7fe ff11 	bl	81004 <memset>
   821e2:	68fd      	ldr	r5, [r7, #12]
   821e4:	2012      	movs	r0, #18
   821e6:	2202      	movs	r2, #2
   821e8:	61f6      	str	r6, [r6, #28]
   821ea:	f8c6 b020 	str.w	fp, [r6, #32]
   821ee:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   821f2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   821f6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   821fa:	4621      	mov	r1, r4
   821fc:	81a8      	strh	r0, [r5, #12]
   821fe:	81ea      	strh	r2, [r5, #14]
   82200:	602c      	str	r4, [r5, #0]
   82202:	606c      	str	r4, [r5, #4]
   82204:	60ac      	str	r4, [r5, #8]
   82206:	666c      	str	r4, [r5, #100]	; 0x64
   82208:	612c      	str	r4, [r5, #16]
   8220a:	616c      	str	r4, [r5, #20]
   8220c:	61ac      	str	r4, [r5, #24]
   8220e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82212:	2208      	movs	r2, #8
   82214:	f7fe fef6 	bl	81004 <memset>
   82218:	9b01      	ldr	r3, [sp, #4]
   8221a:	61ed      	str	r5, [r5, #28]
   8221c:	f8c5 b020 	str.w	fp, [r5, #32]
   82220:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82224:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82228:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8222c:	63bb      	str	r3, [r7, #56]	; 0x38
   8222e:	b003      	add	sp, #12
   82230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82234:	00082149 	.word	0x00082149
   82238:	00083549 	.word	0x00083549
   8223c:	0008356d 	.word	0x0008356d
   82240:	000835a5 	.word	0x000835a5
   82244:	000835c5 	.word	0x000835c5

00082248 <__sfp_lock_acquire>:
   82248:	4770      	bx	lr
   8224a:	bf00      	nop

0008224c <__sfp_lock_release>:
   8224c:	4770      	bx	lr
   8224e:	bf00      	nop

00082250 <__libc_fini_array>:
   82250:	b538      	push	{r3, r4, r5, lr}
   82252:	4d09      	ldr	r5, [pc, #36]	; (82278 <__libc_fini_array+0x28>)
   82254:	4c09      	ldr	r4, [pc, #36]	; (8227c <__libc_fini_array+0x2c>)
   82256:	1b64      	subs	r4, r4, r5
   82258:	10a4      	asrs	r4, r4, #2
   8225a:	bf18      	it	ne
   8225c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82260:	d005      	beq.n	8226e <__libc_fini_array+0x1e>
   82262:	3c01      	subs	r4, #1
   82264:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82268:	4798      	blx	r3
   8226a:	2c00      	cmp	r4, #0
   8226c:	d1f9      	bne.n	82262 <__libc_fini_array+0x12>
   8226e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82272:	f001 bebd 	b.w	83ff0 <_fini>
   82276:	bf00      	nop
   82278:	00083ffc 	.word	0x00083ffc
   8227c:	00084000 	.word	0x00084000

00082280 <_fputwc_r>:
   82280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82284:	8993      	ldrh	r3, [r2, #12]
   82286:	460f      	mov	r7, r1
   82288:	0499      	lsls	r1, r3, #18
   8228a:	b082      	sub	sp, #8
   8228c:	4614      	mov	r4, r2
   8228e:	4680      	mov	r8, r0
   82290:	d406      	bmi.n	822a0 <_fputwc_r+0x20>
   82292:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82294:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8229c:	81a3      	strh	r3, [r4, #12]
   8229e:	6662      	str	r2, [r4, #100]	; 0x64
   822a0:	f000 fb1c 	bl	828dc <__locale_mb_cur_max>
   822a4:	2801      	cmp	r0, #1
   822a6:	d03e      	beq.n	82326 <_fputwc_r+0xa6>
   822a8:	463a      	mov	r2, r7
   822aa:	4640      	mov	r0, r8
   822ac:	a901      	add	r1, sp, #4
   822ae:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   822b2:	f001 fa0f 	bl	836d4 <_wcrtomb_r>
   822b6:	1c42      	adds	r2, r0, #1
   822b8:	4606      	mov	r6, r0
   822ba:	d02d      	beq.n	82318 <_fputwc_r+0x98>
   822bc:	2800      	cmp	r0, #0
   822be:	d03a      	beq.n	82336 <_fputwc_r+0xb6>
   822c0:	f89d 1004 	ldrb.w	r1, [sp, #4]
   822c4:	2500      	movs	r5, #0
   822c6:	e009      	b.n	822dc <_fputwc_r+0x5c>
   822c8:	6823      	ldr	r3, [r4, #0]
   822ca:	7019      	strb	r1, [r3, #0]
   822cc:	6823      	ldr	r3, [r4, #0]
   822ce:	3301      	adds	r3, #1
   822d0:	6023      	str	r3, [r4, #0]
   822d2:	3501      	adds	r5, #1
   822d4:	42b5      	cmp	r5, r6
   822d6:	d22e      	bcs.n	82336 <_fputwc_r+0xb6>
   822d8:	ab01      	add	r3, sp, #4
   822da:	5ce9      	ldrb	r1, [r5, r3]
   822dc:	68a3      	ldr	r3, [r4, #8]
   822de:	3b01      	subs	r3, #1
   822e0:	2b00      	cmp	r3, #0
   822e2:	60a3      	str	r3, [r4, #8]
   822e4:	daf0      	bge.n	822c8 <_fputwc_r+0x48>
   822e6:	69a2      	ldr	r2, [r4, #24]
   822e8:	4293      	cmp	r3, r2
   822ea:	db06      	blt.n	822fa <_fputwc_r+0x7a>
   822ec:	6823      	ldr	r3, [r4, #0]
   822ee:	7019      	strb	r1, [r3, #0]
   822f0:	6823      	ldr	r3, [r4, #0]
   822f2:	7819      	ldrb	r1, [r3, #0]
   822f4:	3301      	adds	r3, #1
   822f6:	290a      	cmp	r1, #10
   822f8:	d1ea      	bne.n	822d0 <_fputwc_r+0x50>
   822fa:	4640      	mov	r0, r8
   822fc:	4622      	mov	r2, r4
   822fe:	f001 f995 	bl	8362c <__swbuf_r>
   82302:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82306:	4258      	negs	r0, r3
   82308:	4158      	adcs	r0, r3
   8230a:	2800      	cmp	r0, #0
   8230c:	d0e1      	beq.n	822d2 <_fputwc_r+0x52>
   8230e:	f04f 30ff 	mov.w	r0, #4294967295
   82312:	b002      	add	sp, #8
   82314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82318:	89a3      	ldrh	r3, [r4, #12]
   8231a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8231e:	81a3      	strh	r3, [r4, #12]
   82320:	b002      	add	sp, #8
   82322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82326:	1e7b      	subs	r3, r7, #1
   82328:	2bfe      	cmp	r3, #254	; 0xfe
   8232a:	d8bd      	bhi.n	822a8 <_fputwc_r+0x28>
   8232c:	b2f9      	uxtb	r1, r7
   8232e:	4606      	mov	r6, r0
   82330:	f88d 1004 	strb.w	r1, [sp, #4]
   82334:	e7c6      	b.n	822c4 <_fputwc_r+0x44>
   82336:	4638      	mov	r0, r7
   82338:	b002      	add	sp, #8
   8233a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8233e:	bf00      	nop

00082340 <_malloc_trim_r>:
   82340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82342:	4d23      	ldr	r5, [pc, #140]	; (823d0 <_malloc_trim_r+0x90>)
   82344:	460f      	mov	r7, r1
   82346:	4604      	mov	r4, r0
   82348:	f000 ff08 	bl	8315c <__malloc_lock>
   8234c:	68ab      	ldr	r3, [r5, #8]
   8234e:	685e      	ldr	r6, [r3, #4]
   82350:	f026 0603 	bic.w	r6, r6, #3
   82354:	1bf1      	subs	r1, r6, r7
   82356:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8235a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8235e:	f021 010f 	bic.w	r1, r1, #15
   82362:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82366:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8236a:	db07      	blt.n	8237c <_malloc_trim_r+0x3c>
   8236c:	4620      	mov	r0, r4
   8236e:	2100      	movs	r1, #0
   82370:	f001 f8d8 	bl	83524 <_sbrk_r>
   82374:	68ab      	ldr	r3, [r5, #8]
   82376:	4433      	add	r3, r6
   82378:	4298      	cmp	r0, r3
   8237a:	d004      	beq.n	82386 <_malloc_trim_r+0x46>
   8237c:	4620      	mov	r0, r4
   8237e:	f000 feef 	bl	83160 <__malloc_unlock>
   82382:	2000      	movs	r0, #0
   82384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82386:	4620      	mov	r0, r4
   82388:	4279      	negs	r1, r7
   8238a:	f001 f8cb 	bl	83524 <_sbrk_r>
   8238e:	3001      	adds	r0, #1
   82390:	d00d      	beq.n	823ae <_malloc_trim_r+0x6e>
   82392:	4b10      	ldr	r3, [pc, #64]	; (823d4 <_malloc_trim_r+0x94>)
   82394:	68aa      	ldr	r2, [r5, #8]
   82396:	6819      	ldr	r1, [r3, #0]
   82398:	1bf6      	subs	r6, r6, r7
   8239a:	f046 0601 	orr.w	r6, r6, #1
   8239e:	4620      	mov	r0, r4
   823a0:	1bc9      	subs	r1, r1, r7
   823a2:	6056      	str	r6, [r2, #4]
   823a4:	6019      	str	r1, [r3, #0]
   823a6:	f000 fedb 	bl	83160 <__malloc_unlock>
   823aa:	2001      	movs	r0, #1
   823ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   823ae:	4620      	mov	r0, r4
   823b0:	2100      	movs	r1, #0
   823b2:	f001 f8b7 	bl	83524 <_sbrk_r>
   823b6:	68ab      	ldr	r3, [r5, #8]
   823b8:	1ac2      	subs	r2, r0, r3
   823ba:	2a0f      	cmp	r2, #15
   823bc:	ddde      	ble.n	8237c <_malloc_trim_r+0x3c>
   823be:	4d06      	ldr	r5, [pc, #24]	; (823d8 <_malloc_trim_r+0x98>)
   823c0:	4904      	ldr	r1, [pc, #16]	; (823d4 <_malloc_trim_r+0x94>)
   823c2:	682d      	ldr	r5, [r5, #0]
   823c4:	f042 0201 	orr.w	r2, r2, #1
   823c8:	1b40      	subs	r0, r0, r5
   823ca:	605a      	str	r2, [r3, #4]
   823cc:	6008      	str	r0, [r1, #0]
   823ce:	e7d5      	b.n	8237c <_malloc_trim_r+0x3c>
   823d0:	20070590 	.word	0x20070590
   823d4:	20070a40 	.word	0x20070a40
   823d8:	2007099c 	.word	0x2007099c

000823dc <_free_r>:
   823dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823e0:	460d      	mov	r5, r1
   823e2:	4606      	mov	r6, r0
   823e4:	2900      	cmp	r1, #0
   823e6:	d055      	beq.n	82494 <_free_r+0xb8>
   823e8:	f000 feb8 	bl	8315c <__malloc_lock>
   823ec:	f855 1c04 	ldr.w	r1, [r5, #-4]
   823f0:	f8df c170 	ldr.w	ip, [pc, #368]	; 82564 <_free_r+0x188>
   823f4:	f1a5 0408 	sub.w	r4, r5, #8
   823f8:	f021 0301 	bic.w	r3, r1, #1
   823fc:	18e2      	adds	r2, r4, r3
   823fe:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82402:	6857      	ldr	r7, [r2, #4]
   82404:	4290      	cmp	r0, r2
   82406:	f027 0703 	bic.w	r7, r7, #3
   8240a:	d068      	beq.n	824de <_free_r+0x102>
   8240c:	f011 0101 	ands.w	r1, r1, #1
   82410:	6057      	str	r7, [r2, #4]
   82412:	d032      	beq.n	8247a <_free_r+0x9e>
   82414:	2100      	movs	r1, #0
   82416:	19d0      	adds	r0, r2, r7
   82418:	6840      	ldr	r0, [r0, #4]
   8241a:	07c0      	lsls	r0, r0, #31
   8241c:	d406      	bmi.n	8242c <_free_r+0x50>
   8241e:	443b      	add	r3, r7
   82420:	6890      	ldr	r0, [r2, #8]
   82422:	2900      	cmp	r1, #0
   82424:	d04d      	beq.n	824c2 <_free_r+0xe6>
   82426:	68d2      	ldr	r2, [r2, #12]
   82428:	60c2      	str	r2, [r0, #12]
   8242a:	6090      	str	r0, [r2, #8]
   8242c:	f043 0201 	orr.w	r2, r3, #1
   82430:	6062      	str	r2, [r4, #4]
   82432:	50e3      	str	r3, [r4, r3]
   82434:	b9e1      	cbnz	r1, 82470 <_free_r+0x94>
   82436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8243a:	d32d      	bcc.n	82498 <_free_r+0xbc>
   8243c:	0a5a      	lsrs	r2, r3, #9
   8243e:	2a04      	cmp	r2, #4
   82440:	d869      	bhi.n	82516 <_free_r+0x13a>
   82442:	0998      	lsrs	r0, r3, #6
   82444:	3038      	adds	r0, #56	; 0x38
   82446:	0041      	lsls	r1, r0, #1
   82448:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   8244c:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82450:	4944      	ldr	r1, [pc, #272]	; (82564 <_free_r+0x188>)
   82452:	4562      	cmp	r2, ip
   82454:	d065      	beq.n	82522 <_free_r+0x146>
   82456:	6851      	ldr	r1, [r2, #4]
   82458:	f021 0103 	bic.w	r1, r1, #3
   8245c:	428b      	cmp	r3, r1
   8245e:	d202      	bcs.n	82466 <_free_r+0x8a>
   82460:	6892      	ldr	r2, [r2, #8]
   82462:	4594      	cmp	ip, r2
   82464:	d1f7      	bne.n	82456 <_free_r+0x7a>
   82466:	68d3      	ldr	r3, [r2, #12]
   82468:	60e3      	str	r3, [r4, #12]
   8246a:	60a2      	str	r2, [r4, #8]
   8246c:	609c      	str	r4, [r3, #8]
   8246e:	60d4      	str	r4, [r2, #12]
   82470:	4630      	mov	r0, r6
   82472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82476:	f000 be73 	b.w	83160 <__malloc_unlock>
   8247a:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8247e:	f10c 0808 	add.w	r8, ip, #8
   82482:	1b64      	subs	r4, r4, r5
   82484:	68a0      	ldr	r0, [r4, #8]
   82486:	442b      	add	r3, r5
   82488:	4540      	cmp	r0, r8
   8248a:	d042      	beq.n	82512 <_free_r+0x136>
   8248c:	68e5      	ldr	r5, [r4, #12]
   8248e:	60c5      	str	r5, [r0, #12]
   82490:	60a8      	str	r0, [r5, #8]
   82492:	e7c0      	b.n	82416 <_free_r+0x3a>
   82494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82498:	08db      	lsrs	r3, r3, #3
   8249a:	109a      	asrs	r2, r3, #2
   8249c:	2001      	movs	r0, #1
   8249e:	4090      	lsls	r0, r2
   824a0:	f8dc 1004 	ldr.w	r1, [ip, #4]
   824a4:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   824a8:	689a      	ldr	r2, [r3, #8]
   824aa:	4301      	orrs	r1, r0
   824ac:	60a2      	str	r2, [r4, #8]
   824ae:	60e3      	str	r3, [r4, #12]
   824b0:	f8cc 1004 	str.w	r1, [ip, #4]
   824b4:	4630      	mov	r0, r6
   824b6:	609c      	str	r4, [r3, #8]
   824b8:	60d4      	str	r4, [r2, #12]
   824ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   824be:	f000 be4f 	b.w	83160 <__malloc_unlock>
   824c2:	4d29      	ldr	r5, [pc, #164]	; (82568 <_free_r+0x18c>)
   824c4:	42a8      	cmp	r0, r5
   824c6:	d1ae      	bne.n	82426 <_free_r+0x4a>
   824c8:	f043 0201 	orr.w	r2, r3, #1
   824cc:	f8cc 4014 	str.w	r4, [ip, #20]
   824d0:	f8cc 4010 	str.w	r4, [ip, #16]
   824d4:	60e0      	str	r0, [r4, #12]
   824d6:	60a0      	str	r0, [r4, #8]
   824d8:	6062      	str	r2, [r4, #4]
   824da:	50e3      	str	r3, [r4, r3]
   824dc:	e7c8      	b.n	82470 <_free_r+0x94>
   824de:	441f      	add	r7, r3
   824e0:	07cb      	lsls	r3, r1, #31
   824e2:	d407      	bmi.n	824f4 <_free_r+0x118>
   824e4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   824e8:	1a64      	subs	r4, r4, r1
   824ea:	68e3      	ldr	r3, [r4, #12]
   824ec:	68a2      	ldr	r2, [r4, #8]
   824ee:	440f      	add	r7, r1
   824f0:	60d3      	str	r3, [r2, #12]
   824f2:	609a      	str	r2, [r3, #8]
   824f4:	4b1d      	ldr	r3, [pc, #116]	; (8256c <_free_r+0x190>)
   824f6:	f047 0201 	orr.w	r2, r7, #1
   824fa:	681b      	ldr	r3, [r3, #0]
   824fc:	6062      	str	r2, [r4, #4]
   824fe:	429f      	cmp	r7, r3
   82500:	f8cc 4008 	str.w	r4, [ip, #8]
   82504:	d3b4      	bcc.n	82470 <_free_r+0x94>
   82506:	4b1a      	ldr	r3, [pc, #104]	; (82570 <_free_r+0x194>)
   82508:	4630      	mov	r0, r6
   8250a:	6819      	ldr	r1, [r3, #0]
   8250c:	f7ff ff18 	bl	82340 <_malloc_trim_r>
   82510:	e7ae      	b.n	82470 <_free_r+0x94>
   82512:	2101      	movs	r1, #1
   82514:	e77f      	b.n	82416 <_free_r+0x3a>
   82516:	2a14      	cmp	r2, #20
   82518:	d80b      	bhi.n	82532 <_free_r+0x156>
   8251a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8251e:	0041      	lsls	r1, r0, #1
   82520:	e792      	b.n	82448 <_free_r+0x6c>
   82522:	1080      	asrs	r0, r0, #2
   82524:	2501      	movs	r5, #1
   82526:	4085      	lsls	r5, r0
   82528:	6848      	ldr	r0, [r1, #4]
   8252a:	4613      	mov	r3, r2
   8252c:	4328      	orrs	r0, r5
   8252e:	6048      	str	r0, [r1, #4]
   82530:	e79a      	b.n	82468 <_free_r+0x8c>
   82532:	2a54      	cmp	r2, #84	; 0x54
   82534:	d803      	bhi.n	8253e <_free_r+0x162>
   82536:	0b18      	lsrs	r0, r3, #12
   82538:	306e      	adds	r0, #110	; 0x6e
   8253a:	0041      	lsls	r1, r0, #1
   8253c:	e784      	b.n	82448 <_free_r+0x6c>
   8253e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82542:	d803      	bhi.n	8254c <_free_r+0x170>
   82544:	0bd8      	lsrs	r0, r3, #15
   82546:	3077      	adds	r0, #119	; 0x77
   82548:	0041      	lsls	r1, r0, #1
   8254a:	e77d      	b.n	82448 <_free_r+0x6c>
   8254c:	f240 5154 	movw	r1, #1364	; 0x554
   82550:	428a      	cmp	r2, r1
   82552:	d803      	bhi.n	8255c <_free_r+0x180>
   82554:	0c98      	lsrs	r0, r3, #18
   82556:	307c      	adds	r0, #124	; 0x7c
   82558:	0041      	lsls	r1, r0, #1
   8255a:	e775      	b.n	82448 <_free_r+0x6c>
   8255c:	21fc      	movs	r1, #252	; 0xfc
   8255e:	207e      	movs	r0, #126	; 0x7e
   82560:	e772      	b.n	82448 <_free_r+0x6c>
   82562:	bf00      	nop
   82564:	20070590 	.word	0x20070590
   82568:	20070598 	.word	0x20070598
   8256c:	20070998 	.word	0x20070998
   82570:	20070a3c 	.word	0x20070a3c

00082574 <__sfvwrite_r>:
   82574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82578:	6893      	ldr	r3, [r2, #8]
   8257a:	b083      	sub	sp, #12
   8257c:	4616      	mov	r6, r2
   8257e:	4681      	mov	r9, r0
   82580:	460c      	mov	r4, r1
   82582:	b32b      	cbz	r3, 825d0 <__sfvwrite_r+0x5c>
   82584:	898b      	ldrh	r3, [r1, #12]
   82586:	0719      	lsls	r1, r3, #28
   82588:	d526      	bpl.n	825d8 <__sfvwrite_r+0x64>
   8258a:	6922      	ldr	r2, [r4, #16]
   8258c:	b322      	cbz	r2, 825d8 <__sfvwrite_r+0x64>
   8258e:	f003 0202 	and.w	r2, r3, #2
   82592:	b292      	uxth	r2, r2
   82594:	6835      	ldr	r5, [r6, #0]
   82596:	2a00      	cmp	r2, #0
   82598:	d02c      	beq.n	825f4 <__sfvwrite_r+0x80>
   8259a:	f04f 0a00 	mov.w	sl, #0
   8259e:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82888 <__sfvwrite_r+0x314>
   825a2:	46d0      	mov	r8, sl
   825a4:	45d8      	cmp	r8, fp
   825a6:	bf34      	ite	cc
   825a8:	4643      	movcc	r3, r8
   825aa:	465b      	movcs	r3, fp
   825ac:	4652      	mov	r2, sl
   825ae:	4648      	mov	r0, r9
   825b0:	f1b8 0f00 	cmp.w	r8, #0
   825b4:	d04f      	beq.n	82656 <__sfvwrite_r+0xe2>
   825b6:	69e1      	ldr	r1, [r4, #28]
   825b8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   825ba:	47b8      	blx	r7
   825bc:	2800      	cmp	r0, #0
   825be:	dd56      	ble.n	8266e <__sfvwrite_r+0xfa>
   825c0:	68b3      	ldr	r3, [r6, #8]
   825c2:	4482      	add	sl, r0
   825c4:	1a1b      	subs	r3, r3, r0
   825c6:	ebc0 0808 	rsb	r8, r0, r8
   825ca:	60b3      	str	r3, [r6, #8]
   825cc:	2b00      	cmp	r3, #0
   825ce:	d1e9      	bne.n	825a4 <__sfvwrite_r+0x30>
   825d0:	2000      	movs	r0, #0
   825d2:	b003      	add	sp, #12
   825d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825d8:	4648      	mov	r0, r9
   825da:	4621      	mov	r1, r4
   825dc:	f7ff fc88 	bl	81ef0 <__swsetup_r>
   825e0:	2800      	cmp	r0, #0
   825e2:	f040 8148 	bne.w	82876 <__sfvwrite_r+0x302>
   825e6:	89a3      	ldrh	r3, [r4, #12]
   825e8:	6835      	ldr	r5, [r6, #0]
   825ea:	f003 0202 	and.w	r2, r3, #2
   825ee:	b292      	uxth	r2, r2
   825f0:	2a00      	cmp	r2, #0
   825f2:	d1d2      	bne.n	8259a <__sfvwrite_r+0x26>
   825f4:	f013 0a01 	ands.w	sl, r3, #1
   825f8:	d142      	bne.n	82680 <__sfvwrite_r+0x10c>
   825fa:	46d0      	mov	r8, sl
   825fc:	f1b8 0f00 	cmp.w	r8, #0
   82600:	d023      	beq.n	8264a <__sfvwrite_r+0xd6>
   82602:	059a      	lsls	r2, r3, #22
   82604:	68a7      	ldr	r7, [r4, #8]
   82606:	d576      	bpl.n	826f6 <__sfvwrite_r+0x182>
   82608:	45b8      	cmp	r8, r7
   8260a:	f0c0 80a4 	bcc.w	82756 <__sfvwrite_r+0x1e2>
   8260e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82612:	f040 80b2 	bne.w	8277a <__sfvwrite_r+0x206>
   82616:	6820      	ldr	r0, [r4, #0]
   82618:	46bb      	mov	fp, r7
   8261a:	4651      	mov	r1, sl
   8261c:	465a      	mov	r2, fp
   8261e:	f000 fd37 	bl	83090 <memmove>
   82622:	68a2      	ldr	r2, [r4, #8]
   82624:	6821      	ldr	r1, [r4, #0]
   82626:	1bd2      	subs	r2, r2, r7
   82628:	eb01 030b 	add.w	r3, r1, fp
   8262c:	60a2      	str	r2, [r4, #8]
   8262e:	6023      	str	r3, [r4, #0]
   82630:	4642      	mov	r2, r8
   82632:	68b3      	ldr	r3, [r6, #8]
   82634:	4492      	add	sl, r2
   82636:	1a9b      	subs	r3, r3, r2
   82638:	ebc2 0808 	rsb	r8, r2, r8
   8263c:	60b3      	str	r3, [r6, #8]
   8263e:	2b00      	cmp	r3, #0
   82640:	d0c6      	beq.n	825d0 <__sfvwrite_r+0x5c>
   82642:	89a3      	ldrh	r3, [r4, #12]
   82644:	f1b8 0f00 	cmp.w	r8, #0
   82648:	d1db      	bne.n	82602 <__sfvwrite_r+0x8e>
   8264a:	f8d5 a000 	ldr.w	sl, [r5]
   8264e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82652:	3508      	adds	r5, #8
   82654:	e7d2      	b.n	825fc <__sfvwrite_r+0x88>
   82656:	f8d5 a000 	ldr.w	sl, [r5]
   8265a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8265e:	3508      	adds	r5, #8
   82660:	e7a0      	b.n	825a4 <__sfvwrite_r+0x30>
   82662:	4648      	mov	r0, r9
   82664:	4621      	mov	r1, r4
   82666:	f7ff fd59 	bl	8211c <_fflush_r>
   8266a:	2800      	cmp	r0, #0
   8266c:	d059      	beq.n	82722 <__sfvwrite_r+0x1ae>
   8266e:	89a3      	ldrh	r3, [r4, #12]
   82670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82674:	f04f 30ff 	mov.w	r0, #4294967295
   82678:	81a3      	strh	r3, [r4, #12]
   8267a:	b003      	add	sp, #12
   8267c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82680:	4692      	mov	sl, r2
   82682:	9201      	str	r2, [sp, #4]
   82684:	4693      	mov	fp, r2
   82686:	4690      	mov	r8, r2
   82688:	f1b8 0f00 	cmp.w	r8, #0
   8268c:	d02b      	beq.n	826e6 <__sfvwrite_r+0x172>
   8268e:	9f01      	ldr	r7, [sp, #4]
   82690:	2f00      	cmp	r7, #0
   82692:	d064      	beq.n	8275e <__sfvwrite_r+0x1ea>
   82694:	6820      	ldr	r0, [r4, #0]
   82696:	6921      	ldr	r1, [r4, #16]
   82698:	45c2      	cmp	sl, r8
   8269a:	bf34      	ite	cc
   8269c:	4653      	movcc	r3, sl
   8269e:	4643      	movcs	r3, r8
   826a0:	4288      	cmp	r0, r1
   826a2:	461f      	mov	r7, r3
   826a4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   826a8:	6962      	ldr	r2, [r4, #20]
   826aa:	d903      	bls.n	826b4 <__sfvwrite_r+0x140>
   826ac:	4494      	add	ip, r2
   826ae:	4563      	cmp	r3, ip
   826b0:	f300 80ae 	bgt.w	82810 <__sfvwrite_r+0x29c>
   826b4:	4293      	cmp	r3, r2
   826b6:	db36      	blt.n	82726 <__sfvwrite_r+0x1b2>
   826b8:	4613      	mov	r3, r2
   826ba:	6a67      	ldr	r7, [r4, #36]	; 0x24
   826bc:	4648      	mov	r0, r9
   826be:	69e1      	ldr	r1, [r4, #28]
   826c0:	465a      	mov	r2, fp
   826c2:	47b8      	blx	r7
   826c4:	1e07      	subs	r7, r0, #0
   826c6:	ddd2      	ble.n	8266e <__sfvwrite_r+0xfa>
   826c8:	ebba 0a07 	subs.w	sl, sl, r7
   826cc:	d03a      	beq.n	82744 <__sfvwrite_r+0x1d0>
   826ce:	68b3      	ldr	r3, [r6, #8]
   826d0:	44bb      	add	fp, r7
   826d2:	1bdb      	subs	r3, r3, r7
   826d4:	ebc7 0808 	rsb	r8, r7, r8
   826d8:	60b3      	str	r3, [r6, #8]
   826da:	2b00      	cmp	r3, #0
   826dc:	f43f af78 	beq.w	825d0 <__sfvwrite_r+0x5c>
   826e0:	f1b8 0f00 	cmp.w	r8, #0
   826e4:	d1d3      	bne.n	8268e <__sfvwrite_r+0x11a>
   826e6:	2700      	movs	r7, #0
   826e8:	f8d5 b000 	ldr.w	fp, [r5]
   826ec:	f8d5 8004 	ldr.w	r8, [r5, #4]
   826f0:	9701      	str	r7, [sp, #4]
   826f2:	3508      	adds	r5, #8
   826f4:	e7c8      	b.n	82688 <__sfvwrite_r+0x114>
   826f6:	6820      	ldr	r0, [r4, #0]
   826f8:	6923      	ldr	r3, [r4, #16]
   826fa:	4298      	cmp	r0, r3
   826fc:	d802      	bhi.n	82704 <__sfvwrite_r+0x190>
   826fe:	6963      	ldr	r3, [r4, #20]
   82700:	4598      	cmp	r8, r3
   82702:	d272      	bcs.n	827ea <__sfvwrite_r+0x276>
   82704:	45b8      	cmp	r8, r7
   82706:	bf38      	it	cc
   82708:	4647      	movcc	r7, r8
   8270a:	463a      	mov	r2, r7
   8270c:	4651      	mov	r1, sl
   8270e:	f000 fcbf 	bl	83090 <memmove>
   82712:	68a3      	ldr	r3, [r4, #8]
   82714:	6822      	ldr	r2, [r4, #0]
   82716:	1bdb      	subs	r3, r3, r7
   82718:	443a      	add	r2, r7
   8271a:	60a3      	str	r3, [r4, #8]
   8271c:	6022      	str	r2, [r4, #0]
   8271e:	2b00      	cmp	r3, #0
   82720:	d09f      	beq.n	82662 <__sfvwrite_r+0xee>
   82722:	463a      	mov	r2, r7
   82724:	e785      	b.n	82632 <__sfvwrite_r+0xbe>
   82726:	461a      	mov	r2, r3
   82728:	4659      	mov	r1, fp
   8272a:	9300      	str	r3, [sp, #0]
   8272c:	f000 fcb0 	bl	83090 <memmove>
   82730:	9b00      	ldr	r3, [sp, #0]
   82732:	68a1      	ldr	r1, [r4, #8]
   82734:	6822      	ldr	r2, [r4, #0]
   82736:	1ac9      	subs	r1, r1, r3
   82738:	ebba 0a07 	subs.w	sl, sl, r7
   8273c:	4413      	add	r3, r2
   8273e:	60a1      	str	r1, [r4, #8]
   82740:	6023      	str	r3, [r4, #0]
   82742:	d1c4      	bne.n	826ce <__sfvwrite_r+0x15a>
   82744:	4648      	mov	r0, r9
   82746:	4621      	mov	r1, r4
   82748:	f7ff fce8 	bl	8211c <_fflush_r>
   8274c:	2800      	cmp	r0, #0
   8274e:	d18e      	bne.n	8266e <__sfvwrite_r+0xfa>
   82750:	f8cd a004 	str.w	sl, [sp, #4]
   82754:	e7bb      	b.n	826ce <__sfvwrite_r+0x15a>
   82756:	6820      	ldr	r0, [r4, #0]
   82758:	4647      	mov	r7, r8
   8275a:	46c3      	mov	fp, r8
   8275c:	e75d      	b.n	8261a <__sfvwrite_r+0xa6>
   8275e:	4658      	mov	r0, fp
   82760:	210a      	movs	r1, #10
   82762:	4642      	mov	r2, r8
   82764:	f000 fbd4 	bl	82f10 <memchr>
   82768:	2800      	cmp	r0, #0
   8276a:	d07f      	beq.n	8286c <__sfvwrite_r+0x2f8>
   8276c:	f100 0a01 	add.w	sl, r0, #1
   82770:	2701      	movs	r7, #1
   82772:	ebcb 0a0a 	rsb	sl, fp, sl
   82776:	9701      	str	r7, [sp, #4]
   82778:	e78c      	b.n	82694 <__sfvwrite_r+0x120>
   8277a:	6822      	ldr	r2, [r4, #0]
   8277c:	6921      	ldr	r1, [r4, #16]
   8277e:	6967      	ldr	r7, [r4, #20]
   82780:	ebc1 0c02 	rsb	ip, r1, r2
   82784:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82788:	f10c 0201 	add.w	r2, ip, #1
   8278c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82790:	4442      	add	r2, r8
   82792:	107f      	asrs	r7, r7, #1
   82794:	4297      	cmp	r7, r2
   82796:	bf34      	ite	cc
   82798:	4617      	movcc	r7, r2
   8279a:	463a      	movcs	r2, r7
   8279c:	055b      	lsls	r3, r3, #21
   8279e:	d54f      	bpl.n	82840 <__sfvwrite_r+0x2cc>
   827a0:	4611      	mov	r1, r2
   827a2:	4648      	mov	r0, r9
   827a4:	f8cd c000 	str.w	ip, [sp]
   827a8:	f000 f916 	bl	829d8 <_malloc_r>
   827ac:	f8dd c000 	ldr.w	ip, [sp]
   827b0:	4683      	mov	fp, r0
   827b2:	2800      	cmp	r0, #0
   827b4:	d062      	beq.n	8287c <__sfvwrite_r+0x308>
   827b6:	4662      	mov	r2, ip
   827b8:	6921      	ldr	r1, [r4, #16]
   827ba:	f8cd c000 	str.w	ip, [sp]
   827be:	f000 fbf1 	bl	82fa4 <memcpy>
   827c2:	89a2      	ldrh	r2, [r4, #12]
   827c4:	f8dd c000 	ldr.w	ip, [sp]
   827c8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   827cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   827d0:	81a2      	strh	r2, [r4, #12]
   827d2:	eb0b 000c 	add.w	r0, fp, ip
   827d6:	ebcc 0207 	rsb	r2, ip, r7
   827da:	f8c4 b010 	str.w	fp, [r4, #16]
   827de:	6167      	str	r7, [r4, #20]
   827e0:	6020      	str	r0, [r4, #0]
   827e2:	60a2      	str	r2, [r4, #8]
   827e4:	4647      	mov	r7, r8
   827e6:	46c3      	mov	fp, r8
   827e8:	e717      	b.n	8261a <__sfvwrite_r+0xa6>
   827ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   827ee:	4590      	cmp	r8, r2
   827f0:	bf38      	it	cc
   827f2:	4642      	movcc	r2, r8
   827f4:	fb92 f2f3 	sdiv	r2, r2, r3
   827f8:	fb02 f303 	mul.w	r3, r2, r3
   827fc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   827fe:	4648      	mov	r0, r9
   82800:	69e1      	ldr	r1, [r4, #28]
   82802:	4652      	mov	r2, sl
   82804:	47b8      	blx	r7
   82806:	2800      	cmp	r0, #0
   82808:	f77f af31 	ble.w	8266e <__sfvwrite_r+0xfa>
   8280c:	4602      	mov	r2, r0
   8280e:	e710      	b.n	82632 <__sfvwrite_r+0xbe>
   82810:	4662      	mov	r2, ip
   82812:	4659      	mov	r1, fp
   82814:	f8cd c000 	str.w	ip, [sp]
   82818:	f000 fc3a 	bl	83090 <memmove>
   8281c:	f8dd c000 	ldr.w	ip, [sp]
   82820:	6823      	ldr	r3, [r4, #0]
   82822:	4648      	mov	r0, r9
   82824:	4463      	add	r3, ip
   82826:	6023      	str	r3, [r4, #0]
   82828:	4621      	mov	r1, r4
   8282a:	f8cd c000 	str.w	ip, [sp]
   8282e:	f7ff fc75 	bl	8211c <_fflush_r>
   82832:	f8dd c000 	ldr.w	ip, [sp]
   82836:	2800      	cmp	r0, #0
   82838:	f47f af19 	bne.w	8266e <__sfvwrite_r+0xfa>
   8283c:	4667      	mov	r7, ip
   8283e:	e743      	b.n	826c8 <__sfvwrite_r+0x154>
   82840:	4648      	mov	r0, r9
   82842:	f8cd c000 	str.w	ip, [sp]
   82846:	f000 fc8d 	bl	83164 <_realloc_r>
   8284a:	f8dd c000 	ldr.w	ip, [sp]
   8284e:	4683      	mov	fp, r0
   82850:	2800      	cmp	r0, #0
   82852:	d1be      	bne.n	827d2 <__sfvwrite_r+0x25e>
   82854:	4648      	mov	r0, r9
   82856:	6921      	ldr	r1, [r4, #16]
   82858:	f7ff fdc0 	bl	823dc <_free_r>
   8285c:	89a3      	ldrh	r3, [r4, #12]
   8285e:	220c      	movs	r2, #12
   82860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82864:	b29b      	uxth	r3, r3
   82866:	f8c9 2000 	str.w	r2, [r9]
   8286a:	e701      	b.n	82670 <__sfvwrite_r+0xfc>
   8286c:	2701      	movs	r7, #1
   8286e:	f108 0a01 	add.w	sl, r8, #1
   82872:	9701      	str	r7, [sp, #4]
   82874:	e70e      	b.n	82694 <__sfvwrite_r+0x120>
   82876:	f04f 30ff 	mov.w	r0, #4294967295
   8287a:	e6aa      	b.n	825d2 <__sfvwrite_r+0x5e>
   8287c:	230c      	movs	r3, #12
   8287e:	f8c9 3000 	str.w	r3, [r9]
   82882:	89a3      	ldrh	r3, [r4, #12]
   82884:	e6f4      	b.n	82670 <__sfvwrite_r+0xfc>
   82886:	bf00      	nop
   82888:	7ffffc00 	.word	0x7ffffc00

0008288c <_fwalk>:
   8288c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82890:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82894:	4688      	mov	r8, r1
   82896:	d019      	beq.n	828cc <_fwalk+0x40>
   82898:	2600      	movs	r6, #0
   8289a:	687d      	ldr	r5, [r7, #4]
   8289c:	68bc      	ldr	r4, [r7, #8]
   8289e:	3d01      	subs	r5, #1
   828a0:	d40e      	bmi.n	828c0 <_fwalk+0x34>
   828a2:	89a3      	ldrh	r3, [r4, #12]
   828a4:	3d01      	subs	r5, #1
   828a6:	2b01      	cmp	r3, #1
   828a8:	d906      	bls.n	828b8 <_fwalk+0x2c>
   828aa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   828ae:	4620      	mov	r0, r4
   828b0:	3301      	adds	r3, #1
   828b2:	d001      	beq.n	828b8 <_fwalk+0x2c>
   828b4:	47c0      	blx	r8
   828b6:	4306      	orrs	r6, r0
   828b8:	1c6b      	adds	r3, r5, #1
   828ba:	f104 0468 	add.w	r4, r4, #104	; 0x68
   828be:	d1f0      	bne.n	828a2 <_fwalk+0x16>
   828c0:	683f      	ldr	r7, [r7, #0]
   828c2:	2f00      	cmp	r7, #0
   828c4:	d1e9      	bne.n	8289a <_fwalk+0xe>
   828c6:	4630      	mov	r0, r6
   828c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828cc:	463e      	mov	r6, r7
   828ce:	4630      	mov	r0, r6
   828d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000828d4 <__locale_charset>:
   828d4:	4800      	ldr	r0, [pc, #0]	; (828d8 <__locale_charset+0x4>)
   828d6:	4770      	bx	lr
   828d8:	2007056c 	.word	0x2007056c

000828dc <__locale_mb_cur_max>:
   828dc:	4b01      	ldr	r3, [pc, #4]	; (828e4 <__locale_mb_cur_max+0x8>)
   828de:	6818      	ldr	r0, [r3, #0]
   828e0:	4770      	bx	lr
   828e2:	bf00      	nop
   828e4:	2007058c 	.word	0x2007058c

000828e8 <__smakebuf_r>:
   828e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   828ea:	898b      	ldrh	r3, [r1, #12]
   828ec:	b091      	sub	sp, #68	; 0x44
   828ee:	b29a      	uxth	r2, r3
   828f0:	0796      	lsls	r6, r2, #30
   828f2:	460c      	mov	r4, r1
   828f4:	4605      	mov	r5, r0
   828f6:	d437      	bmi.n	82968 <__smakebuf_r+0x80>
   828f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   828fc:	2900      	cmp	r1, #0
   828fe:	db17      	blt.n	82930 <__smakebuf_r+0x48>
   82900:	aa01      	add	r2, sp, #4
   82902:	f000 ffdf 	bl	838c4 <_fstat_r>
   82906:	2800      	cmp	r0, #0
   82908:	db10      	blt.n	8292c <__smakebuf_r+0x44>
   8290a:	9b02      	ldr	r3, [sp, #8]
   8290c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82910:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82914:	424f      	negs	r7, r1
   82916:	414f      	adcs	r7, r1
   82918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8291c:	d02c      	beq.n	82978 <__smakebuf_r+0x90>
   8291e:	89a3      	ldrh	r3, [r4, #12]
   82920:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82924:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82928:	81a3      	strh	r3, [r4, #12]
   8292a:	e00b      	b.n	82944 <__smakebuf_r+0x5c>
   8292c:	89a3      	ldrh	r3, [r4, #12]
   8292e:	b29a      	uxth	r2, r3
   82930:	f012 0f80 	tst.w	r2, #128	; 0x80
   82934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82938:	81a3      	strh	r3, [r4, #12]
   8293a:	bf14      	ite	ne
   8293c:	2640      	movne	r6, #64	; 0x40
   8293e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82942:	2700      	movs	r7, #0
   82944:	4628      	mov	r0, r5
   82946:	4631      	mov	r1, r6
   82948:	f000 f846 	bl	829d8 <_malloc_r>
   8294c:	89a3      	ldrh	r3, [r4, #12]
   8294e:	2800      	cmp	r0, #0
   82950:	d029      	beq.n	829a6 <__smakebuf_r+0xbe>
   82952:	4a1b      	ldr	r2, [pc, #108]	; (829c0 <__smakebuf_r+0xd8>)
   82954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82958:	63ea      	str	r2, [r5, #60]	; 0x3c
   8295a:	81a3      	strh	r3, [r4, #12]
   8295c:	6020      	str	r0, [r4, #0]
   8295e:	6120      	str	r0, [r4, #16]
   82960:	6166      	str	r6, [r4, #20]
   82962:	b9a7      	cbnz	r7, 8298e <__smakebuf_r+0xa6>
   82964:	b011      	add	sp, #68	; 0x44
   82966:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82968:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8296c:	2201      	movs	r2, #1
   8296e:	600b      	str	r3, [r1, #0]
   82970:	610b      	str	r3, [r1, #16]
   82972:	614a      	str	r2, [r1, #20]
   82974:	b011      	add	sp, #68	; 0x44
   82976:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82978:	4a12      	ldr	r2, [pc, #72]	; (829c4 <__smakebuf_r+0xdc>)
   8297a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8297c:	4293      	cmp	r3, r2
   8297e:	d1ce      	bne.n	8291e <__smakebuf_r+0x36>
   82980:	89a3      	ldrh	r3, [r4, #12]
   82982:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82986:	4333      	orrs	r3, r6
   82988:	81a3      	strh	r3, [r4, #12]
   8298a:	64e6      	str	r6, [r4, #76]	; 0x4c
   8298c:	e7da      	b.n	82944 <__smakebuf_r+0x5c>
   8298e:	4628      	mov	r0, r5
   82990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82994:	f000 ffaa 	bl	838ec <_isatty_r>
   82998:	2800      	cmp	r0, #0
   8299a:	d0e3      	beq.n	82964 <__smakebuf_r+0x7c>
   8299c:	89a3      	ldrh	r3, [r4, #12]
   8299e:	f043 0301 	orr.w	r3, r3, #1
   829a2:	81a3      	strh	r3, [r4, #12]
   829a4:	e7de      	b.n	82964 <__smakebuf_r+0x7c>
   829a6:	059a      	lsls	r2, r3, #22
   829a8:	d4dc      	bmi.n	82964 <__smakebuf_r+0x7c>
   829aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
   829ae:	f043 0302 	orr.w	r3, r3, #2
   829b2:	2101      	movs	r1, #1
   829b4:	81a3      	strh	r3, [r4, #12]
   829b6:	6022      	str	r2, [r4, #0]
   829b8:	6122      	str	r2, [r4, #16]
   829ba:	6161      	str	r1, [r4, #20]
   829bc:	e7d2      	b.n	82964 <__smakebuf_r+0x7c>
   829be:	bf00      	nop
   829c0:	00082149 	.word	0x00082149
   829c4:	000835a5 	.word	0x000835a5

000829c8 <malloc>:
   829c8:	4b02      	ldr	r3, [pc, #8]	; (829d4 <malloc+0xc>)
   829ca:	4601      	mov	r1, r0
   829cc:	6818      	ldr	r0, [r3, #0]
   829ce:	f000 b803 	b.w	829d8 <_malloc_r>
   829d2:	bf00      	nop
   829d4:	20070568 	.word	0x20070568

000829d8 <_malloc_r>:
   829d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   829dc:	f101 050b 	add.w	r5, r1, #11
   829e0:	2d16      	cmp	r5, #22
   829e2:	b083      	sub	sp, #12
   829e4:	4606      	mov	r6, r0
   829e6:	d927      	bls.n	82a38 <_malloc_r+0x60>
   829e8:	f035 0507 	bics.w	r5, r5, #7
   829ec:	d427      	bmi.n	82a3e <_malloc_r+0x66>
   829ee:	42a9      	cmp	r1, r5
   829f0:	d825      	bhi.n	82a3e <_malloc_r+0x66>
   829f2:	4630      	mov	r0, r6
   829f4:	f000 fbb2 	bl	8315c <__malloc_lock>
   829f8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   829fc:	d226      	bcs.n	82a4c <_malloc_r+0x74>
   829fe:	4fc1      	ldr	r7, [pc, #772]	; (82d04 <_malloc_r+0x32c>)
   82a00:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82a04:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82a08:	68dc      	ldr	r4, [r3, #12]
   82a0a:	429c      	cmp	r4, r3
   82a0c:	f000 81d2 	beq.w	82db4 <_malloc_r+0x3dc>
   82a10:	6863      	ldr	r3, [r4, #4]
   82a12:	68e2      	ldr	r2, [r4, #12]
   82a14:	f023 0303 	bic.w	r3, r3, #3
   82a18:	4423      	add	r3, r4
   82a1a:	6858      	ldr	r0, [r3, #4]
   82a1c:	68a1      	ldr	r1, [r4, #8]
   82a1e:	f040 0501 	orr.w	r5, r0, #1
   82a22:	60ca      	str	r2, [r1, #12]
   82a24:	4630      	mov	r0, r6
   82a26:	6091      	str	r1, [r2, #8]
   82a28:	605d      	str	r5, [r3, #4]
   82a2a:	f000 fb99 	bl	83160 <__malloc_unlock>
   82a2e:	3408      	adds	r4, #8
   82a30:	4620      	mov	r0, r4
   82a32:	b003      	add	sp, #12
   82a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a38:	2510      	movs	r5, #16
   82a3a:	42a9      	cmp	r1, r5
   82a3c:	d9d9      	bls.n	829f2 <_malloc_r+0x1a>
   82a3e:	2400      	movs	r4, #0
   82a40:	230c      	movs	r3, #12
   82a42:	4620      	mov	r0, r4
   82a44:	6033      	str	r3, [r6, #0]
   82a46:	b003      	add	sp, #12
   82a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a4c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82a50:	f000 8089 	beq.w	82b66 <_malloc_r+0x18e>
   82a54:	f1bc 0f04 	cmp.w	ip, #4
   82a58:	f200 8160 	bhi.w	82d1c <_malloc_r+0x344>
   82a5c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82a60:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82a64:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82a68:	4fa6      	ldr	r7, [pc, #664]	; (82d04 <_malloc_r+0x32c>)
   82a6a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82a6e:	68cc      	ldr	r4, [r1, #12]
   82a70:	42a1      	cmp	r1, r4
   82a72:	d105      	bne.n	82a80 <_malloc_r+0xa8>
   82a74:	e00c      	b.n	82a90 <_malloc_r+0xb8>
   82a76:	2b00      	cmp	r3, #0
   82a78:	da79      	bge.n	82b6e <_malloc_r+0x196>
   82a7a:	68e4      	ldr	r4, [r4, #12]
   82a7c:	42a1      	cmp	r1, r4
   82a7e:	d007      	beq.n	82a90 <_malloc_r+0xb8>
   82a80:	6862      	ldr	r2, [r4, #4]
   82a82:	f022 0203 	bic.w	r2, r2, #3
   82a86:	1b53      	subs	r3, r2, r5
   82a88:	2b0f      	cmp	r3, #15
   82a8a:	ddf4      	ble.n	82a76 <_malloc_r+0x9e>
   82a8c:	f10c 3cff 	add.w	ip, ip, #4294967295
   82a90:	f10c 0c01 	add.w	ip, ip, #1
   82a94:	4b9b      	ldr	r3, [pc, #620]	; (82d04 <_malloc_r+0x32c>)
   82a96:	693c      	ldr	r4, [r7, #16]
   82a98:	f103 0e08 	add.w	lr, r3, #8
   82a9c:	4574      	cmp	r4, lr
   82a9e:	f000 817e 	beq.w	82d9e <_malloc_r+0x3c6>
   82aa2:	6861      	ldr	r1, [r4, #4]
   82aa4:	f021 0103 	bic.w	r1, r1, #3
   82aa8:	1b4a      	subs	r2, r1, r5
   82aaa:	2a0f      	cmp	r2, #15
   82aac:	f300 8164 	bgt.w	82d78 <_malloc_r+0x3a0>
   82ab0:	2a00      	cmp	r2, #0
   82ab2:	f8c3 e014 	str.w	lr, [r3, #20]
   82ab6:	f8c3 e010 	str.w	lr, [r3, #16]
   82aba:	da69      	bge.n	82b90 <_malloc_r+0x1b8>
   82abc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82ac0:	f080 813a 	bcs.w	82d38 <_malloc_r+0x360>
   82ac4:	08c9      	lsrs	r1, r1, #3
   82ac6:	108a      	asrs	r2, r1, #2
   82ac8:	f04f 0801 	mov.w	r8, #1
   82acc:	fa08 f802 	lsl.w	r8, r8, r2
   82ad0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82ad4:	685a      	ldr	r2, [r3, #4]
   82ad6:	6888      	ldr	r0, [r1, #8]
   82ad8:	ea48 0202 	orr.w	r2, r8, r2
   82adc:	60a0      	str	r0, [r4, #8]
   82ade:	60e1      	str	r1, [r4, #12]
   82ae0:	605a      	str	r2, [r3, #4]
   82ae2:	608c      	str	r4, [r1, #8]
   82ae4:	60c4      	str	r4, [r0, #12]
   82ae6:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82aea:	2001      	movs	r0, #1
   82aec:	4098      	lsls	r0, r3
   82aee:	4290      	cmp	r0, r2
   82af0:	d85b      	bhi.n	82baa <_malloc_r+0x1d2>
   82af2:	4202      	tst	r2, r0
   82af4:	d106      	bne.n	82b04 <_malloc_r+0x12c>
   82af6:	f02c 0c03 	bic.w	ip, ip, #3
   82afa:	0040      	lsls	r0, r0, #1
   82afc:	4202      	tst	r2, r0
   82afe:	f10c 0c04 	add.w	ip, ip, #4
   82b02:	d0fa      	beq.n	82afa <_malloc_r+0x122>
   82b04:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82b08:	4644      	mov	r4, r8
   82b0a:	46e1      	mov	r9, ip
   82b0c:	68e3      	ldr	r3, [r4, #12]
   82b0e:	429c      	cmp	r4, r3
   82b10:	d107      	bne.n	82b22 <_malloc_r+0x14a>
   82b12:	e146      	b.n	82da2 <_malloc_r+0x3ca>
   82b14:	2a00      	cmp	r2, #0
   82b16:	f280 8157 	bge.w	82dc8 <_malloc_r+0x3f0>
   82b1a:	68db      	ldr	r3, [r3, #12]
   82b1c:	429c      	cmp	r4, r3
   82b1e:	f000 8140 	beq.w	82da2 <_malloc_r+0x3ca>
   82b22:	6859      	ldr	r1, [r3, #4]
   82b24:	f021 0103 	bic.w	r1, r1, #3
   82b28:	1b4a      	subs	r2, r1, r5
   82b2a:	2a0f      	cmp	r2, #15
   82b2c:	ddf2      	ble.n	82b14 <_malloc_r+0x13c>
   82b2e:	461c      	mov	r4, r3
   82b30:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82b34:	68d9      	ldr	r1, [r3, #12]
   82b36:	f045 0901 	orr.w	r9, r5, #1
   82b3a:	f042 0801 	orr.w	r8, r2, #1
   82b3e:	441d      	add	r5, r3
   82b40:	f8c3 9004 	str.w	r9, [r3, #4]
   82b44:	4630      	mov	r0, r6
   82b46:	f8cc 100c 	str.w	r1, [ip, #12]
   82b4a:	f8c1 c008 	str.w	ip, [r1, #8]
   82b4e:	617d      	str	r5, [r7, #20]
   82b50:	613d      	str	r5, [r7, #16]
   82b52:	f8c5 e00c 	str.w	lr, [r5, #12]
   82b56:	f8c5 e008 	str.w	lr, [r5, #8]
   82b5a:	f8c5 8004 	str.w	r8, [r5, #4]
   82b5e:	50aa      	str	r2, [r5, r2]
   82b60:	f000 fafe 	bl	83160 <__malloc_unlock>
   82b64:	e764      	b.n	82a30 <_malloc_r+0x58>
   82b66:	217e      	movs	r1, #126	; 0x7e
   82b68:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82b6c:	e77c      	b.n	82a68 <_malloc_r+0x90>
   82b6e:	4422      	add	r2, r4
   82b70:	6850      	ldr	r0, [r2, #4]
   82b72:	68e3      	ldr	r3, [r4, #12]
   82b74:	68a1      	ldr	r1, [r4, #8]
   82b76:	f040 0501 	orr.w	r5, r0, #1
   82b7a:	60cb      	str	r3, [r1, #12]
   82b7c:	4630      	mov	r0, r6
   82b7e:	6099      	str	r1, [r3, #8]
   82b80:	6055      	str	r5, [r2, #4]
   82b82:	f000 faed 	bl	83160 <__malloc_unlock>
   82b86:	3408      	adds	r4, #8
   82b88:	4620      	mov	r0, r4
   82b8a:	b003      	add	sp, #12
   82b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b90:	4421      	add	r1, r4
   82b92:	684b      	ldr	r3, [r1, #4]
   82b94:	4630      	mov	r0, r6
   82b96:	f043 0301 	orr.w	r3, r3, #1
   82b9a:	604b      	str	r3, [r1, #4]
   82b9c:	f000 fae0 	bl	83160 <__malloc_unlock>
   82ba0:	3408      	adds	r4, #8
   82ba2:	4620      	mov	r0, r4
   82ba4:	b003      	add	sp, #12
   82ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82baa:	68bc      	ldr	r4, [r7, #8]
   82bac:	6863      	ldr	r3, [r4, #4]
   82bae:	f023 0903 	bic.w	r9, r3, #3
   82bb2:	45a9      	cmp	r9, r5
   82bb4:	d304      	bcc.n	82bc0 <_malloc_r+0x1e8>
   82bb6:	ebc5 0309 	rsb	r3, r5, r9
   82bba:	2b0f      	cmp	r3, #15
   82bbc:	f300 8091 	bgt.w	82ce2 <_malloc_r+0x30a>
   82bc0:	4b51      	ldr	r3, [pc, #324]	; (82d08 <_malloc_r+0x330>)
   82bc2:	4a52      	ldr	r2, [pc, #328]	; (82d0c <_malloc_r+0x334>)
   82bc4:	6819      	ldr	r1, [r3, #0]
   82bc6:	6813      	ldr	r3, [r2, #0]
   82bc8:	eb05 0a01 	add.w	sl, r5, r1
   82bcc:	3301      	adds	r3, #1
   82bce:	eb04 0b09 	add.w	fp, r4, r9
   82bd2:	f000 8161 	beq.w	82e98 <_malloc_r+0x4c0>
   82bd6:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82bda:	f10a 0a0f 	add.w	sl, sl, #15
   82bde:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82be2:	f02a 0a0f 	bic.w	sl, sl, #15
   82be6:	4630      	mov	r0, r6
   82be8:	4651      	mov	r1, sl
   82bea:	9201      	str	r2, [sp, #4]
   82bec:	f000 fc9a 	bl	83524 <_sbrk_r>
   82bf0:	f1b0 3fff 	cmp.w	r0, #4294967295
   82bf4:	4680      	mov	r8, r0
   82bf6:	9a01      	ldr	r2, [sp, #4]
   82bf8:	f000 8101 	beq.w	82dfe <_malloc_r+0x426>
   82bfc:	4583      	cmp	fp, r0
   82bfe:	f200 80fb 	bhi.w	82df8 <_malloc_r+0x420>
   82c02:	f8df c114 	ldr.w	ip, [pc, #276]	; 82d18 <_malloc_r+0x340>
   82c06:	45c3      	cmp	fp, r8
   82c08:	f8dc 3000 	ldr.w	r3, [ip]
   82c0c:	4453      	add	r3, sl
   82c0e:	f8cc 3000 	str.w	r3, [ip]
   82c12:	f000 814a 	beq.w	82eaa <_malloc_r+0x4d2>
   82c16:	6812      	ldr	r2, [r2, #0]
   82c18:	493c      	ldr	r1, [pc, #240]	; (82d0c <_malloc_r+0x334>)
   82c1a:	3201      	adds	r2, #1
   82c1c:	bf1b      	ittet	ne
   82c1e:	ebcb 0b08 	rsbne	fp, fp, r8
   82c22:	445b      	addne	r3, fp
   82c24:	f8c1 8000 	streq.w	r8, [r1]
   82c28:	f8cc 3000 	strne.w	r3, [ip]
   82c2c:	f018 0307 	ands.w	r3, r8, #7
   82c30:	f000 8114 	beq.w	82e5c <_malloc_r+0x484>
   82c34:	f1c3 0208 	rsb	r2, r3, #8
   82c38:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82c3c:	4490      	add	r8, r2
   82c3e:	3308      	adds	r3, #8
   82c40:	44c2      	add	sl, r8
   82c42:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82c46:	ebca 0a03 	rsb	sl, sl, r3
   82c4a:	4651      	mov	r1, sl
   82c4c:	4630      	mov	r0, r6
   82c4e:	f8cd c004 	str.w	ip, [sp, #4]
   82c52:	f000 fc67 	bl	83524 <_sbrk_r>
   82c56:	1c43      	adds	r3, r0, #1
   82c58:	f8dd c004 	ldr.w	ip, [sp, #4]
   82c5c:	f000 8135 	beq.w	82eca <_malloc_r+0x4f2>
   82c60:	ebc8 0200 	rsb	r2, r8, r0
   82c64:	4452      	add	r2, sl
   82c66:	f042 0201 	orr.w	r2, r2, #1
   82c6a:	f8dc 3000 	ldr.w	r3, [ip]
   82c6e:	42bc      	cmp	r4, r7
   82c70:	4453      	add	r3, sl
   82c72:	f8c7 8008 	str.w	r8, [r7, #8]
   82c76:	f8cc 3000 	str.w	r3, [ip]
   82c7a:	f8c8 2004 	str.w	r2, [r8, #4]
   82c7e:	f8df a098 	ldr.w	sl, [pc, #152]	; 82d18 <_malloc_r+0x340>
   82c82:	d015      	beq.n	82cb0 <_malloc_r+0x2d8>
   82c84:	f1b9 0f0f 	cmp.w	r9, #15
   82c88:	f240 80eb 	bls.w	82e62 <_malloc_r+0x48a>
   82c8c:	6861      	ldr	r1, [r4, #4]
   82c8e:	f1a9 020c 	sub.w	r2, r9, #12
   82c92:	f022 0207 	bic.w	r2, r2, #7
   82c96:	f001 0101 	and.w	r1, r1, #1
   82c9a:	ea42 0e01 	orr.w	lr, r2, r1
   82c9e:	2005      	movs	r0, #5
   82ca0:	18a1      	adds	r1, r4, r2
   82ca2:	2a0f      	cmp	r2, #15
   82ca4:	f8c4 e004 	str.w	lr, [r4, #4]
   82ca8:	6048      	str	r0, [r1, #4]
   82caa:	6088      	str	r0, [r1, #8]
   82cac:	f200 8111 	bhi.w	82ed2 <_malloc_r+0x4fa>
   82cb0:	4a17      	ldr	r2, [pc, #92]	; (82d10 <_malloc_r+0x338>)
   82cb2:	68bc      	ldr	r4, [r7, #8]
   82cb4:	6811      	ldr	r1, [r2, #0]
   82cb6:	428b      	cmp	r3, r1
   82cb8:	bf88      	it	hi
   82cba:	6013      	strhi	r3, [r2, #0]
   82cbc:	4a15      	ldr	r2, [pc, #84]	; (82d14 <_malloc_r+0x33c>)
   82cbe:	6811      	ldr	r1, [r2, #0]
   82cc0:	428b      	cmp	r3, r1
   82cc2:	bf88      	it	hi
   82cc4:	6013      	strhi	r3, [r2, #0]
   82cc6:	6862      	ldr	r2, [r4, #4]
   82cc8:	f022 0203 	bic.w	r2, r2, #3
   82ccc:	4295      	cmp	r5, r2
   82cce:	ebc5 0302 	rsb	r3, r5, r2
   82cd2:	d801      	bhi.n	82cd8 <_malloc_r+0x300>
   82cd4:	2b0f      	cmp	r3, #15
   82cd6:	dc04      	bgt.n	82ce2 <_malloc_r+0x30a>
   82cd8:	4630      	mov	r0, r6
   82cda:	f000 fa41 	bl	83160 <__malloc_unlock>
   82cde:	2400      	movs	r4, #0
   82ce0:	e6a6      	b.n	82a30 <_malloc_r+0x58>
   82ce2:	f045 0201 	orr.w	r2, r5, #1
   82ce6:	f043 0301 	orr.w	r3, r3, #1
   82cea:	4425      	add	r5, r4
   82cec:	6062      	str	r2, [r4, #4]
   82cee:	4630      	mov	r0, r6
   82cf0:	60bd      	str	r5, [r7, #8]
   82cf2:	606b      	str	r3, [r5, #4]
   82cf4:	f000 fa34 	bl	83160 <__malloc_unlock>
   82cf8:	3408      	adds	r4, #8
   82cfa:	4620      	mov	r0, r4
   82cfc:	b003      	add	sp, #12
   82cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d02:	bf00      	nop
   82d04:	20070590 	.word	0x20070590
   82d08:	20070a3c 	.word	0x20070a3c
   82d0c:	2007099c 	.word	0x2007099c
   82d10:	20070a38 	.word	0x20070a38
   82d14:	20070a34 	.word	0x20070a34
   82d18:	20070a40 	.word	0x20070a40
   82d1c:	f1bc 0f14 	cmp.w	ip, #20
   82d20:	d961      	bls.n	82de6 <_malloc_r+0x40e>
   82d22:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82d26:	f200 808f 	bhi.w	82e48 <_malloc_r+0x470>
   82d2a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82d2e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82d32:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82d36:	e697      	b.n	82a68 <_malloc_r+0x90>
   82d38:	0a4b      	lsrs	r3, r1, #9
   82d3a:	2b04      	cmp	r3, #4
   82d3c:	d958      	bls.n	82df0 <_malloc_r+0x418>
   82d3e:	2b14      	cmp	r3, #20
   82d40:	f200 80ad 	bhi.w	82e9e <_malloc_r+0x4c6>
   82d44:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82d48:	0050      	lsls	r0, r2, #1
   82d4a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82d4e:	6883      	ldr	r3, [r0, #8]
   82d50:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82f0c <_malloc_r+0x534>
   82d54:	4283      	cmp	r3, r0
   82d56:	f000 808a 	beq.w	82e6e <_malloc_r+0x496>
   82d5a:	685a      	ldr	r2, [r3, #4]
   82d5c:	f022 0203 	bic.w	r2, r2, #3
   82d60:	4291      	cmp	r1, r2
   82d62:	d202      	bcs.n	82d6a <_malloc_r+0x392>
   82d64:	689b      	ldr	r3, [r3, #8]
   82d66:	4298      	cmp	r0, r3
   82d68:	d1f7      	bne.n	82d5a <_malloc_r+0x382>
   82d6a:	68d9      	ldr	r1, [r3, #12]
   82d6c:	687a      	ldr	r2, [r7, #4]
   82d6e:	60e1      	str	r1, [r4, #12]
   82d70:	60a3      	str	r3, [r4, #8]
   82d72:	608c      	str	r4, [r1, #8]
   82d74:	60dc      	str	r4, [r3, #12]
   82d76:	e6b6      	b.n	82ae6 <_malloc_r+0x10e>
   82d78:	f045 0701 	orr.w	r7, r5, #1
   82d7c:	f042 0101 	orr.w	r1, r2, #1
   82d80:	4425      	add	r5, r4
   82d82:	6067      	str	r7, [r4, #4]
   82d84:	4630      	mov	r0, r6
   82d86:	615d      	str	r5, [r3, #20]
   82d88:	611d      	str	r5, [r3, #16]
   82d8a:	f8c5 e00c 	str.w	lr, [r5, #12]
   82d8e:	f8c5 e008 	str.w	lr, [r5, #8]
   82d92:	6069      	str	r1, [r5, #4]
   82d94:	50aa      	str	r2, [r5, r2]
   82d96:	3408      	adds	r4, #8
   82d98:	f000 f9e2 	bl	83160 <__malloc_unlock>
   82d9c:	e648      	b.n	82a30 <_malloc_r+0x58>
   82d9e:	685a      	ldr	r2, [r3, #4]
   82da0:	e6a1      	b.n	82ae6 <_malloc_r+0x10e>
   82da2:	f109 0901 	add.w	r9, r9, #1
   82da6:	f019 0f03 	tst.w	r9, #3
   82daa:	f104 0408 	add.w	r4, r4, #8
   82dae:	f47f aead 	bne.w	82b0c <_malloc_r+0x134>
   82db2:	e02d      	b.n	82e10 <_malloc_r+0x438>
   82db4:	f104 0308 	add.w	r3, r4, #8
   82db8:	6964      	ldr	r4, [r4, #20]
   82dba:	42a3      	cmp	r3, r4
   82dbc:	bf08      	it	eq
   82dbe:	f10c 0c02 	addeq.w	ip, ip, #2
   82dc2:	f43f ae67 	beq.w	82a94 <_malloc_r+0xbc>
   82dc6:	e623      	b.n	82a10 <_malloc_r+0x38>
   82dc8:	4419      	add	r1, r3
   82dca:	6848      	ldr	r0, [r1, #4]
   82dcc:	461c      	mov	r4, r3
   82dce:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82dd2:	68db      	ldr	r3, [r3, #12]
   82dd4:	f040 0501 	orr.w	r5, r0, #1
   82dd8:	604d      	str	r5, [r1, #4]
   82dda:	4630      	mov	r0, r6
   82ddc:	60d3      	str	r3, [r2, #12]
   82dde:	609a      	str	r2, [r3, #8]
   82de0:	f000 f9be 	bl	83160 <__malloc_unlock>
   82de4:	e624      	b.n	82a30 <_malloc_r+0x58>
   82de6:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82dea:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82dee:	e63b      	b.n	82a68 <_malloc_r+0x90>
   82df0:	098a      	lsrs	r2, r1, #6
   82df2:	3238      	adds	r2, #56	; 0x38
   82df4:	0050      	lsls	r0, r2, #1
   82df6:	e7a8      	b.n	82d4a <_malloc_r+0x372>
   82df8:	42bc      	cmp	r4, r7
   82dfa:	f43f af02 	beq.w	82c02 <_malloc_r+0x22a>
   82dfe:	68bc      	ldr	r4, [r7, #8]
   82e00:	6862      	ldr	r2, [r4, #4]
   82e02:	f022 0203 	bic.w	r2, r2, #3
   82e06:	e761      	b.n	82ccc <_malloc_r+0x2f4>
   82e08:	f8d8 8000 	ldr.w	r8, [r8]
   82e0c:	4598      	cmp	r8, r3
   82e0e:	d17a      	bne.n	82f06 <_malloc_r+0x52e>
   82e10:	f01c 0f03 	tst.w	ip, #3
   82e14:	f1a8 0308 	sub.w	r3, r8, #8
   82e18:	f10c 3cff 	add.w	ip, ip, #4294967295
   82e1c:	d1f4      	bne.n	82e08 <_malloc_r+0x430>
   82e1e:	687b      	ldr	r3, [r7, #4]
   82e20:	ea23 0300 	bic.w	r3, r3, r0
   82e24:	607b      	str	r3, [r7, #4]
   82e26:	0040      	lsls	r0, r0, #1
   82e28:	4298      	cmp	r0, r3
   82e2a:	f63f aebe 	bhi.w	82baa <_malloc_r+0x1d2>
   82e2e:	2800      	cmp	r0, #0
   82e30:	f43f aebb 	beq.w	82baa <_malloc_r+0x1d2>
   82e34:	4203      	tst	r3, r0
   82e36:	46cc      	mov	ip, r9
   82e38:	f47f ae64 	bne.w	82b04 <_malloc_r+0x12c>
   82e3c:	0040      	lsls	r0, r0, #1
   82e3e:	4203      	tst	r3, r0
   82e40:	f10c 0c04 	add.w	ip, ip, #4
   82e44:	d0fa      	beq.n	82e3c <_malloc_r+0x464>
   82e46:	e65d      	b.n	82b04 <_malloc_r+0x12c>
   82e48:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82e4c:	d819      	bhi.n	82e82 <_malloc_r+0x4aa>
   82e4e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82e52:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82e56:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e5a:	e605      	b.n	82a68 <_malloc_r+0x90>
   82e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82e60:	e6ee      	b.n	82c40 <_malloc_r+0x268>
   82e62:	2301      	movs	r3, #1
   82e64:	f8c8 3004 	str.w	r3, [r8, #4]
   82e68:	4644      	mov	r4, r8
   82e6a:	2200      	movs	r2, #0
   82e6c:	e72e      	b.n	82ccc <_malloc_r+0x2f4>
   82e6e:	1092      	asrs	r2, r2, #2
   82e70:	2001      	movs	r0, #1
   82e72:	4090      	lsls	r0, r2
   82e74:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82e78:	4619      	mov	r1, r3
   82e7a:	4302      	orrs	r2, r0
   82e7c:	f8c8 2004 	str.w	r2, [r8, #4]
   82e80:	e775      	b.n	82d6e <_malloc_r+0x396>
   82e82:	f240 5354 	movw	r3, #1364	; 0x554
   82e86:	459c      	cmp	ip, r3
   82e88:	d81b      	bhi.n	82ec2 <_malloc_r+0x4ea>
   82e8a:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82e8e:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82e92:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e96:	e5e7      	b.n	82a68 <_malloc_r+0x90>
   82e98:	f10a 0a10 	add.w	sl, sl, #16
   82e9c:	e6a3      	b.n	82be6 <_malloc_r+0x20e>
   82e9e:	2b54      	cmp	r3, #84	; 0x54
   82ea0:	d81f      	bhi.n	82ee2 <_malloc_r+0x50a>
   82ea2:	0b0a      	lsrs	r2, r1, #12
   82ea4:	326e      	adds	r2, #110	; 0x6e
   82ea6:	0050      	lsls	r0, r2, #1
   82ea8:	e74f      	b.n	82d4a <_malloc_r+0x372>
   82eaa:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82eae:	2900      	cmp	r1, #0
   82eb0:	f47f aeb1 	bne.w	82c16 <_malloc_r+0x23e>
   82eb4:	eb0a 0109 	add.w	r1, sl, r9
   82eb8:	68ba      	ldr	r2, [r7, #8]
   82eba:	f041 0101 	orr.w	r1, r1, #1
   82ebe:	6051      	str	r1, [r2, #4]
   82ec0:	e6f6      	b.n	82cb0 <_malloc_r+0x2d8>
   82ec2:	21fc      	movs	r1, #252	; 0xfc
   82ec4:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82ec8:	e5ce      	b.n	82a68 <_malloc_r+0x90>
   82eca:	2201      	movs	r2, #1
   82ecc:	f04f 0a00 	mov.w	sl, #0
   82ed0:	e6cb      	b.n	82c6a <_malloc_r+0x292>
   82ed2:	f104 0108 	add.w	r1, r4, #8
   82ed6:	4630      	mov	r0, r6
   82ed8:	f7ff fa80 	bl	823dc <_free_r>
   82edc:	f8da 3000 	ldr.w	r3, [sl]
   82ee0:	e6e6      	b.n	82cb0 <_malloc_r+0x2d8>
   82ee2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82ee6:	d803      	bhi.n	82ef0 <_malloc_r+0x518>
   82ee8:	0bca      	lsrs	r2, r1, #15
   82eea:	3277      	adds	r2, #119	; 0x77
   82eec:	0050      	lsls	r0, r2, #1
   82eee:	e72c      	b.n	82d4a <_malloc_r+0x372>
   82ef0:	f240 5254 	movw	r2, #1364	; 0x554
   82ef4:	4293      	cmp	r3, r2
   82ef6:	d803      	bhi.n	82f00 <_malloc_r+0x528>
   82ef8:	0c8a      	lsrs	r2, r1, #18
   82efa:	327c      	adds	r2, #124	; 0x7c
   82efc:	0050      	lsls	r0, r2, #1
   82efe:	e724      	b.n	82d4a <_malloc_r+0x372>
   82f00:	20fc      	movs	r0, #252	; 0xfc
   82f02:	227e      	movs	r2, #126	; 0x7e
   82f04:	e721      	b.n	82d4a <_malloc_r+0x372>
   82f06:	687b      	ldr	r3, [r7, #4]
   82f08:	e78d      	b.n	82e26 <_malloc_r+0x44e>
   82f0a:	bf00      	nop
   82f0c:	20070590 	.word	0x20070590

00082f10 <memchr>:
   82f10:	0783      	lsls	r3, r0, #30
   82f12:	b470      	push	{r4, r5, r6}
   82f14:	b2c9      	uxtb	r1, r1
   82f16:	d040      	beq.n	82f9a <memchr+0x8a>
   82f18:	1e54      	subs	r4, r2, #1
   82f1a:	b32a      	cbz	r2, 82f68 <memchr+0x58>
   82f1c:	7803      	ldrb	r3, [r0, #0]
   82f1e:	428b      	cmp	r3, r1
   82f20:	d023      	beq.n	82f6a <memchr+0x5a>
   82f22:	1c43      	adds	r3, r0, #1
   82f24:	e004      	b.n	82f30 <memchr+0x20>
   82f26:	b1fc      	cbz	r4, 82f68 <memchr+0x58>
   82f28:	7805      	ldrb	r5, [r0, #0]
   82f2a:	4614      	mov	r4, r2
   82f2c:	428d      	cmp	r5, r1
   82f2e:	d01c      	beq.n	82f6a <memchr+0x5a>
   82f30:	f013 0f03 	tst.w	r3, #3
   82f34:	4618      	mov	r0, r3
   82f36:	f104 32ff 	add.w	r2, r4, #4294967295
   82f3a:	f103 0301 	add.w	r3, r3, #1
   82f3e:	d1f2      	bne.n	82f26 <memchr+0x16>
   82f40:	2c03      	cmp	r4, #3
   82f42:	d814      	bhi.n	82f6e <memchr+0x5e>
   82f44:	1e65      	subs	r5, r4, #1
   82f46:	b354      	cbz	r4, 82f9e <memchr+0x8e>
   82f48:	7803      	ldrb	r3, [r0, #0]
   82f4a:	428b      	cmp	r3, r1
   82f4c:	d00d      	beq.n	82f6a <memchr+0x5a>
   82f4e:	1c42      	adds	r2, r0, #1
   82f50:	2300      	movs	r3, #0
   82f52:	e002      	b.n	82f5a <memchr+0x4a>
   82f54:	7804      	ldrb	r4, [r0, #0]
   82f56:	428c      	cmp	r4, r1
   82f58:	d007      	beq.n	82f6a <memchr+0x5a>
   82f5a:	42ab      	cmp	r3, r5
   82f5c:	4610      	mov	r0, r2
   82f5e:	f103 0301 	add.w	r3, r3, #1
   82f62:	f102 0201 	add.w	r2, r2, #1
   82f66:	d1f5      	bne.n	82f54 <memchr+0x44>
   82f68:	2000      	movs	r0, #0
   82f6a:	bc70      	pop	{r4, r5, r6}
   82f6c:	4770      	bx	lr
   82f6e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82f72:	4603      	mov	r3, r0
   82f74:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82f78:	681a      	ldr	r2, [r3, #0]
   82f7a:	4618      	mov	r0, r3
   82f7c:	4072      	eors	r2, r6
   82f7e:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   82f82:	ea25 0202 	bic.w	r2, r5, r2
   82f86:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   82f8a:	f103 0304 	add.w	r3, r3, #4
   82f8e:	d1d9      	bne.n	82f44 <memchr+0x34>
   82f90:	3c04      	subs	r4, #4
   82f92:	2c03      	cmp	r4, #3
   82f94:	4618      	mov	r0, r3
   82f96:	d8ef      	bhi.n	82f78 <memchr+0x68>
   82f98:	e7d4      	b.n	82f44 <memchr+0x34>
   82f9a:	4614      	mov	r4, r2
   82f9c:	e7d0      	b.n	82f40 <memchr+0x30>
   82f9e:	4620      	mov	r0, r4
   82fa0:	e7e3      	b.n	82f6a <memchr+0x5a>
   82fa2:	bf00      	nop

00082fa4 <memcpy>:
   82fa4:	4684      	mov	ip, r0
   82fa6:	ea41 0300 	orr.w	r3, r1, r0
   82faa:	f013 0303 	ands.w	r3, r3, #3
   82fae:	d149      	bne.n	83044 <memcpy+0xa0>
   82fb0:	3a40      	subs	r2, #64	; 0x40
   82fb2:	d323      	bcc.n	82ffc <memcpy+0x58>
   82fb4:	680b      	ldr	r3, [r1, #0]
   82fb6:	6003      	str	r3, [r0, #0]
   82fb8:	684b      	ldr	r3, [r1, #4]
   82fba:	6043      	str	r3, [r0, #4]
   82fbc:	688b      	ldr	r3, [r1, #8]
   82fbe:	6083      	str	r3, [r0, #8]
   82fc0:	68cb      	ldr	r3, [r1, #12]
   82fc2:	60c3      	str	r3, [r0, #12]
   82fc4:	690b      	ldr	r3, [r1, #16]
   82fc6:	6103      	str	r3, [r0, #16]
   82fc8:	694b      	ldr	r3, [r1, #20]
   82fca:	6143      	str	r3, [r0, #20]
   82fcc:	698b      	ldr	r3, [r1, #24]
   82fce:	6183      	str	r3, [r0, #24]
   82fd0:	69cb      	ldr	r3, [r1, #28]
   82fd2:	61c3      	str	r3, [r0, #28]
   82fd4:	6a0b      	ldr	r3, [r1, #32]
   82fd6:	6203      	str	r3, [r0, #32]
   82fd8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82fda:	6243      	str	r3, [r0, #36]	; 0x24
   82fdc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82fde:	6283      	str	r3, [r0, #40]	; 0x28
   82fe0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82fe2:	62c3      	str	r3, [r0, #44]	; 0x2c
   82fe4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82fe6:	6303      	str	r3, [r0, #48]	; 0x30
   82fe8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82fea:	6343      	str	r3, [r0, #52]	; 0x34
   82fec:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82fee:	6383      	str	r3, [r0, #56]	; 0x38
   82ff0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82ff2:	63c3      	str	r3, [r0, #60]	; 0x3c
   82ff4:	3040      	adds	r0, #64	; 0x40
   82ff6:	3140      	adds	r1, #64	; 0x40
   82ff8:	3a40      	subs	r2, #64	; 0x40
   82ffa:	d2db      	bcs.n	82fb4 <memcpy+0x10>
   82ffc:	3230      	adds	r2, #48	; 0x30
   82ffe:	d30b      	bcc.n	83018 <memcpy+0x74>
   83000:	680b      	ldr	r3, [r1, #0]
   83002:	6003      	str	r3, [r0, #0]
   83004:	684b      	ldr	r3, [r1, #4]
   83006:	6043      	str	r3, [r0, #4]
   83008:	688b      	ldr	r3, [r1, #8]
   8300a:	6083      	str	r3, [r0, #8]
   8300c:	68cb      	ldr	r3, [r1, #12]
   8300e:	60c3      	str	r3, [r0, #12]
   83010:	3010      	adds	r0, #16
   83012:	3110      	adds	r1, #16
   83014:	3a10      	subs	r2, #16
   83016:	d2f3      	bcs.n	83000 <memcpy+0x5c>
   83018:	320c      	adds	r2, #12
   8301a:	d305      	bcc.n	83028 <memcpy+0x84>
   8301c:	f851 3b04 	ldr.w	r3, [r1], #4
   83020:	f840 3b04 	str.w	r3, [r0], #4
   83024:	3a04      	subs	r2, #4
   83026:	d2f9      	bcs.n	8301c <memcpy+0x78>
   83028:	3204      	adds	r2, #4
   8302a:	d008      	beq.n	8303e <memcpy+0x9a>
   8302c:	07d2      	lsls	r2, r2, #31
   8302e:	bf1c      	itt	ne
   83030:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83034:	f800 3b01 	strbne.w	r3, [r0], #1
   83038:	d301      	bcc.n	8303e <memcpy+0x9a>
   8303a:	880b      	ldrh	r3, [r1, #0]
   8303c:	8003      	strh	r3, [r0, #0]
   8303e:	4660      	mov	r0, ip
   83040:	4770      	bx	lr
   83042:	bf00      	nop
   83044:	2a08      	cmp	r2, #8
   83046:	d313      	bcc.n	83070 <memcpy+0xcc>
   83048:	078b      	lsls	r3, r1, #30
   8304a:	d0b1      	beq.n	82fb0 <memcpy+0xc>
   8304c:	f010 0303 	ands.w	r3, r0, #3
   83050:	d0ae      	beq.n	82fb0 <memcpy+0xc>
   83052:	f1c3 0304 	rsb	r3, r3, #4
   83056:	1ad2      	subs	r2, r2, r3
   83058:	07db      	lsls	r3, r3, #31
   8305a:	bf1c      	itt	ne
   8305c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83060:	f800 3b01 	strbne.w	r3, [r0], #1
   83064:	d3a4      	bcc.n	82fb0 <memcpy+0xc>
   83066:	f831 3b02 	ldrh.w	r3, [r1], #2
   8306a:	f820 3b02 	strh.w	r3, [r0], #2
   8306e:	e79f      	b.n	82fb0 <memcpy+0xc>
   83070:	3a04      	subs	r2, #4
   83072:	d3d9      	bcc.n	83028 <memcpy+0x84>
   83074:	3a01      	subs	r2, #1
   83076:	f811 3b01 	ldrb.w	r3, [r1], #1
   8307a:	f800 3b01 	strb.w	r3, [r0], #1
   8307e:	d2f9      	bcs.n	83074 <memcpy+0xd0>
   83080:	780b      	ldrb	r3, [r1, #0]
   83082:	7003      	strb	r3, [r0, #0]
   83084:	784b      	ldrb	r3, [r1, #1]
   83086:	7043      	strb	r3, [r0, #1]
   83088:	788b      	ldrb	r3, [r1, #2]
   8308a:	7083      	strb	r3, [r0, #2]
   8308c:	4660      	mov	r0, ip
   8308e:	4770      	bx	lr

00083090 <memmove>:
   83090:	4288      	cmp	r0, r1
   83092:	b4f0      	push	{r4, r5, r6, r7}
   83094:	d910      	bls.n	830b8 <memmove+0x28>
   83096:	188c      	adds	r4, r1, r2
   83098:	42a0      	cmp	r0, r4
   8309a:	d20d      	bcs.n	830b8 <memmove+0x28>
   8309c:	1885      	adds	r5, r0, r2
   8309e:	1e53      	subs	r3, r2, #1
   830a0:	b142      	cbz	r2, 830b4 <memmove+0x24>
   830a2:	4621      	mov	r1, r4
   830a4:	462a      	mov	r2, r5
   830a6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   830aa:	3b01      	subs	r3, #1
   830ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
   830b0:	1c5c      	adds	r4, r3, #1
   830b2:	d1f8      	bne.n	830a6 <memmove+0x16>
   830b4:	bcf0      	pop	{r4, r5, r6, r7}
   830b6:	4770      	bx	lr
   830b8:	2a0f      	cmp	r2, #15
   830ba:	d944      	bls.n	83146 <memmove+0xb6>
   830bc:	ea40 0301 	orr.w	r3, r0, r1
   830c0:	079b      	lsls	r3, r3, #30
   830c2:	d144      	bne.n	8314e <memmove+0xbe>
   830c4:	f1a2 0710 	sub.w	r7, r2, #16
   830c8:	093f      	lsrs	r7, r7, #4
   830ca:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   830ce:	3610      	adds	r6, #16
   830d0:	460c      	mov	r4, r1
   830d2:	4603      	mov	r3, r0
   830d4:	6825      	ldr	r5, [r4, #0]
   830d6:	3310      	adds	r3, #16
   830d8:	f843 5c10 	str.w	r5, [r3, #-16]
   830dc:	6865      	ldr	r5, [r4, #4]
   830de:	3410      	adds	r4, #16
   830e0:	f843 5c0c 	str.w	r5, [r3, #-12]
   830e4:	f854 5c08 	ldr.w	r5, [r4, #-8]
   830e8:	f843 5c08 	str.w	r5, [r3, #-8]
   830ec:	f854 5c04 	ldr.w	r5, [r4, #-4]
   830f0:	f843 5c04 	str.w	r5, [r3, #-4]
   830f4:	42b3      	cmp	r3, r6
   830f6:	d1ed      	bne.n	830d4 <memmove+0x44>
   830f8:	1c7b      	adds	r3, r7, #1
   830fa:	f002 0c0f 	and.w	ip, r2, #15
   830fe:	011b      	lsls	r3, r3, #4
   83100:	f1bc 0f03 	cmp.w	ip, #3
   83104:	4419      	add	r1, r3
   83106:	4403      	add	r3, r0
   83108:	d923      	bls.n	83152 <memmove+0xc2>
   8310a:	460e      	mov	r6, r1
   8310c:	461d      	mov	r5, r3
   8310e:	4664      	mov	r4, ip
   83110:	f856 7b04 	ldr.w	r7, [r6], #4
   83114:	3c04      	subs	r4, #4
   83116:	2c03      	cmp	r4, #3
   83118:	f845 7b04 	str.w	r7, [r5], #4
   8311c:	d8f8      	bhi.n	83110 <memmove+0x80>
   8311e:	f1ac 0404 	sub.w	r4, ip, #4
   83122:	f024 0403 	bic.w	r4, r4, #3
   83126:	3404      	adds	r4, #4
   83128:	f002 0203 	and.w	r2, r2, #3
   8312c:	4423      	add	r3, r4
   8312e:	4421      	add	r1, r4
   83130:	2a00      	cmp	r2, #0
   83132:	d0bf      	beq.n	830b4 <memmove+0x24>
   83134:	441a      	add	r2, r3
   83136:	f811 4b01 	ldrb.w	r4, [r1], #1
   8313a:	f803 4b01 	strb.w	r4, [r3], #1
   8313e:	4293      	cmp	r3, r2
   83140:	d1f9      	bne.n	83136 <memmove+0xa6>
   83142:	bcf0      	pop	{r4, r5, r6, r7}
   83144:	4770      	bx	lr
   83146:	4603      	mov	r3, r0
   83148:	2a00      	cmp	r2, #0
   8314a:	d1f3      	bne.n	83134 <memmove+0xa4>
   8314c:	e7b2      	b.n	830b4 <memmove+0x24>
   8314e:	4603      	mov	r3, r0
   83150:	e7f0      	b.n	83134 <memmove+0xa4>
   83152:	4662      	mov	r2, ip
   83154:	2a00      	cmp	r2, #0
   83156:	d1ed      	bne.n	83134 <memmove+0xa4>
   83158:	e7ac      	b.n	830b4 <memmove+0x24>
   8315a:	bf00      	nop

0008315c <__malloc_lock>:
   8315c:	4770      	bx	lr
   8315e:	bf00      	nop

00083160 <__malloc_unlock>:
   83160:	4770      	bx	lr
   83162:	bf00      	nop

00083164 <_realloc_r>:
   83164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83168:	460c      	mov	r4, r1
   8316a:	b083      	sub	sp, #12
   8316c:	4690      	mov	r8, r2
   8316e:	4681      	mov	r9, r0
   83170:	2900      	cmp	r1, #0
   83172:	f000 80ba 	beq.w	832ea <_realloc_r+0x186>
   83176:	f7ff fff1 	bl	8315c <__malloc_lock>
   8317a:	f108 060b 	add.w	r6, r8, #11
   8317e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83182:	2e16      	cmp	r6, #22
   83184:	f023 0503 	bic.w	r5, r3, #3
   83188:	f1a4 0708 	sub.w	r7, r4, #8
   8318c:	d84b      	bhi.n	83226 <_realloc_r+0xc2>
   8318e:	2110      	movs	r1, #16
   83190:	460e      	mov	r6, r1
   83192:	45b0      	cmp	r8, r6
   83194:	d84c      	bhi.n	83230 <_realloc_r+0xcc>
   83196:	428d      	cmp	r5, r1
   83198:	da51      	bge.n	8323e <_realloc_r+0xda>
   8319a:	f8df b384 	ldr.w	fp, [pc, #900]	; 83520 <_realloc_r+0x3bc>
   8319e:	1978      	adds	r0, r7, r5
   831a0:	f8db e008 	ldr.w	lr, [fp, #8]
   831a4:	4586      	cmp	lr, r0
   831a6:	f000 80a6 	beq.w	832f6 <_realloc_r+0x192>
   831aa:	6842      	ldr	r2, [r0, #4]
   831ac:	f022 0c01 	bic.w	ip, r2, #1
   831b0:	4484      	add	ip, r0
   831b2:	f8dc c004 	ldr.w	ip, [ip, #4]
   831b6:	f01c 0f01 	tst.w	ip, #1
   831ba:	d054      	beq.n	83266 <_realloc_r+0x102>
   831bc:	2200      	movs	r2, #0
   831be:	4610      	mov	r0, r2
   831c0:	07db      	lsls	r3, r3, #31
   831c2:	d46f      	bmi.n	832a4 <_realloc_r+0x140>
   831c4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   831c8:	ebc3 0a07 	rsb	sl, r3, r7
   831cc:	f8da 3004 	ldr.w	r3, [sl, #4]
   831d0:	f023 0303 	bic.w	r3, r3, #3
   831d4:	442b      	add	r3, r5
   831d6:	2800      	cmp	r0, #0
   831d8:	d062      	beq.n	832a0 <_realloc_r+0x13c>
   831da:	4570      	cmp	r0, lr
   831dc:	f000 80e9 	beq.w	833b2 <_realloc_r+0x24e>
   831e0:	eb02 0e03 	add.w	lr, r2, r3
   831e4:	458e      	cmp	lr, r1
   831e6:	db5b      	blt.n	832a0 <_realloc_r+0x13c>
   831e8:	68c3      	ldr	r3, [r0, #12]
   831ea:	6882      	ldr	r2, [r0, #8]
   831ec:	46d0      	mov	r8, sl
   831ee:	60d3      	str	r3, [r2, #12]
   831f0:	609a      	str	r2, [r3, #8]
   831f2:	f858 1f08 	ldr.w	r1, [r8, #8]!
   831f6:	f8da 300c 	ldr.w	r3, [sl, #12]
   831fa:	1f2a      	subs	r2, r5, #4
   831fc:	2a24      	cmp	r2, #36	; 0x24
   831fe:	60cb      	str	r3, [r1, #12]
   83200:	6099      	str	r1, [r3, #8]
   83202:	f200 8123 	bhi.w	8344c <_realloc_r+0x2e8>
   83206:	2a13      	cmp	r2, #19
   83208:	f240 80b0 	bls.w	8336c <_realloc_r+0x208>
   8320c:	6823      	ldr	r3, [r4, #0]
   8320e:	2a1b      	cmp	r2, #27
   83210:	f8ca 3008 	str.w	r3, [sl, #8]
   83214:	6863      	ldr	r3, [r4, #4]
   83216:	f8ca 300c 	str.w	r3, [sl, #12]
   8321a:	f200 812b 	bhi.w	83474 <_realloc_r+0x310>
   8321e:	3408      	adds	r4, #8
   83220:	f10a 0310 	add.w	r3, sl, #16
   83224:	e0a3      	b.n	8336e <_realloc_r+0x20a>
   83226:	f026 0607 	bic.w	r6, r6, #7
   8322a:	2e00      	cmp	r6, #0
   8322c:	4631      	mov	r1, r6
   8322e:	dab0      	bge.n	83192 <_realloc_r+0x2e>
   83230:	230c      	movs	r3, #12
   83232:	2000      	movs	r0, #0
   83234:	f8c9 3000 	str.w	r3, [r9]
   83238:	b003      	add	sp, #12
   8323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8323e:	46a0      	mov	r8, r4
   83240:	1baa      	subs	r2, r5, r6
   83242:	2a0f      	cmp	r2, #15
   83244:	f003 0301 	and.w	r3, r3, #1
   83248:	d81a      	bhi.n	83280 <_realloc_r+0x11c>
   8324a:	432b      	orrs	r3, r5
   8324c:	607b      	str	r3, [r7, #4]
   8324e:	443d      	add	r5, r7
   83250:	686b      	ldr	r3, [r5, #4]
   83252:	f043 0301 	orr.w	r3, r3, #1
   83256:	606b      	str	r3, [r5, #4]
   83258:	4648      	mov	r0, r9
   8325a:	f7ff ff81 	bl	83160 <__malloc_unlock>
   8325e:	4640      	mov	r0, r8
   83260:	b003      	add	sp, #12
   83262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83266:	f022 0203 	bic.w	r2, r2, #3
   8326a:	eb02 0c05 	add.w	ip, r2, r5
   8326e:	458c      	cmp	ip, r1
   83270:	dba6      	blt.n	831c0 <_realloc_r+0x5c>
   83272:	68c2      	ldr	r2, [r0, #12]
   83274:	6881      	ldr	r1, [r0, #8]
   83276:	46a0      	mov	r8, r4
   83278:	60ca      	str	r2, [r1, #12]
   8327a:	4665      	mov	r5, ip
   8327c:	6091      	str	r1, [r2, #8]
   8327e:	e7df      	b.n	83240 <_realloc_r+0xdc>
   83280:	19b9      	adds	r1, r7, r6
   83282:	4333      	orrs	r3, r6
   83284:	f042 0001 	orr.w	r0, r2, #1
   83288:	607b      	str	r3, [r7, #4]
   8328a:	440a      	add	r2, r1
   8328c:	6048      	str	r0, [r1, #4]
   8328e:	6853      	ldr	r3, [r2, #4]
   83290:	3108      	adds	r1, #8
   83292:	f043 0301 	orr.w	r3, r3, #1
   83296:	6053      	str	r3, [r2, #4]
   83298:	4648      	mov	r0, r9
   8329a:	f7ff f89f 	bl	823dc <_free_r>
   8329e:	e7db      	b.n	83258 <_realloc_r+0xf4>
   832a0:	428b      	cmp	r3, r1
   832a2:	da33      	bge.n	8330c <_realloc_r+0x1a8>
   832a4:	4641      	mov	r1, r8
   832a6:	4648      	mov	r0, r9
   832a8:	f7ff fb96 	bl	829d8 <_malloc_r>
   832ac:	4680      	mov	r8, r0
   832ae:	2800      	cmp	r0, #0
   832b0:	d0d2      	beq.n	83258 <_realloc_r+0xf4>
   832b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   832b6:	f1a0 0108 	sub.w	r1, r0, #8
   832ba:	f023 0201 	bic.w	r2, r3, #1
   832be:	443a      	add	r2, r7
   832c0:	4291      	cmp	r1, r2
   832c2:	f000 80bc 	beq.w	8343e <_realloc_r+0x2da>
   832c6:	1f2a      	subs	r2, r5, #4
   832c8:	2a24      	cmp	r2, #36	; 0x24
   832ca:	d86e      	bhi.n	833aa <_realloc_r+0x246>
   832cc:	2a13      	cmp	r2, #19
   832ce:	d842      	bhi.n	83356 <_realloc_r+0x1f2>
   832d0:	4603      	mov	r3, r0
   832d2:	4622      	mov	r2, r4
   832d4:	6811      	ldr	r1, [r2, #0]
   832d6:	6019      	str	r1, [r3, #0]
   832d8:	6851      	ldr	r1, [r2, #4]
   832da:	6059      	str	r1, [r3, #4]
   832dc:	6892      	ldr	r2, [r2, #8]
   832de:	609a      	str	r2, [r3, #8]
   832e0:	4621      	mov	r1, r4
   832e2:	4648      	mov	r0, r9
   832e4:	f7ff f87a 	bl	823dc <_free_r>
   832e8:	e7b6      	b.n	83258 <_realloc_r+0xf4>
   832ea:	4611      	mov	r1, r2
   832ec:	b003      	add	sp, #12
   832ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   832f2:	f7ff bb71 	b.w	829d8 <_malloc_r>
   832f6:	f8de 2004 	ldr.w	r2, [lr, #4]
   832fa:	f106 0c10 	add.w	ip, r6, #16
   832fe:	f022 0203 	bic.w	r2, r2, #3
   83302:	1950      	adds	r0, r2, r5
   83304:	4560      	cmp	r0, ip
   83306:	da3d      	bge.n	83384 <_realloc_r+0x220>
   83308:	4670      	mov	r0, lr
   8330a:	e759      	b.n	831c0 <_realloc_r+0x5c>
   8330c:	46d0      	mov	r8, sl
   8330e:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83312:	f8da 100c 	ldr.w	r1, [sl, #12]
   83316:	1f2a      	subs	r2, r5, #4
   83318:	2a24      	cmp	r2, #36	; 0x24
   8331a:	60c1      	str	r1, [r0, #12]
   8331c:	6088      	str	r0, [r1, #8]
   8331e:	f200 80a0 	bhi.w	83462 <_realloc_r+0x2fe>
   83322:	2a13      	cmp	r2, #19
   83324:	f240 809b 	bls.w	8345e <_realloc_r+0x2fa>
   83328:	6821      	ldr	r1, [r4, #0]
   8332a:	2a1b      	cmp	r2, #27
   8332c:	f8ca 1008 	str.w	r1, [sl, #8]
   83330:	6861      	ldr	r1, [r4, #4]
   83332:	f8ca 100c 	str.w	r1, [sl, #12]
   83336:	f200 80b2 	bhi.w	8349e <_realloc_r+0x33a>
   8333a:	3408      	adds	r4, #8
   8333c:	f10a 0210 	add.w	r2, sl, #16
   83340:	6821      	ldr	r1, [r4, #0]
   83342:	461d      	mov	r5, r3
   83344:	6011      	str	r1, [r2, #0]
   83346:	6861      	ldr	r1, [r4, #4]
   83348:	4657      	mov	r7, sl
   8334a:	6051      	str	r1, [r2, #4]
   8334c:	68a3      	ldr	r3, [r4, #8]
   8334e:	6093      	str	r3, [r2, #8]
   83350:	f8da 3004 	ldr.w	r3, [sl, #4]
   83354:	e774      	b.n	83240 <_realloc_r+0xdc>
   83356:	6823      	ldr	r3, [r4, #0]
   83358:	2a1b      	cmp	r2, #27
   8335a:	6003      	str	r3, [r0, #0]
   8335c:	6863      	ldr	r3, [r4, #4]
   8335e:	6043      	str	r3, [r0, #4]
   83360:	d862      	bhi.n	83428 <_realloc_r+0x2c4>
   83362:	f100 0308 	add.w	r3, r0, #8
   83366:	f104 0208 	add.w	r2, r4, #8
   8336a:	e7b3      	b.n	832d4 <_realloc_r+0x170>
   8336c:	4643      	mov	r3, r8
   8336e:	6822      	ldr	r2, [r4, #0]
   83370:	4675      	mov	r5, lr
   83372:	601a      	str	r2, [r3, #0]
   83374:	6862      	ldr	r2, [r4, #4]
   83376:	4657      	mov	r7, sl
   83378:	605a      	str	r2, [r3, #4]
   8337a:	68a2      	ldr	r2, [r4, #8]
   8337c:	609a      	str	r2, [r3, #8]
   8337e:	f8da 3004 	ldr.w	r3, [sl, #4]
   83382:	e75d      	b.n	83240 <_realloc_r+0xdc>
   83384:	1b83      	subs	r3, r0, r6
   83386:	4437      	add	r7, r6
   83388:	f043 0301 	orr.w	r3, r3, #1
   8338c:	f8cb 7008 	str.w	r7, [fp, #8]
   83390:	607b      	str	r3, [r7, #4]
   83392:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83396:	4648      	mov	r0, r9
   83398:	f003 0301 	and.w	r3, r3, #1
   8339c:	431e      	orrs	r6, r3
   8339e:	f844 6c04 	str.w	r6, [r4, #-4]
   833a2:	f7ff fedd 	bl	83160 <__malloc_unlock>
   833a6:	4620      	mov	r0, r4
   833a8:	e75a      	b.n	83260 <_realloc_r+0xfc>
   833aa:	4621      	mov	r1, r4
   833ac:	f7ff fe70 	bl	83090 <memmove>
   833b0:	e796      	b.n	832e0 <_realloc_r+0x17c>
   833b2:	eb02 0c03 	add.w	ip, r2, r3
   833b6:	f106 0210 	add.w	r2, r6, #16
   833ba:	4594      	cmp	ip, r2
   833bc:	f6ff af70 	blt.w	832a0 <_realloc_r+0x13c>
   833c0:	4657      	mov	r7, sl
   833c2:	f857 1f08 	ldr.w	r1, [r7, #8]!
   833c6:	f8da 300c 	ldr.w	r3, [sl, #12]
   833ca:	1f2a      	subs	r2, r5, #4
   833cc:	2a24      	cmp	r2, #36	; 0x24
   833ce:	60cb      	str	r3, [r1, #12]
   833d0:	6099      	str	r1, [r3, #8]
   833d2:	f200 8086 	bhi.w	834e2 <_realloc_r+0x37e>
   833d6:	2a13      	cmp	r2, #19
   833d8:	d977      	bls.n	834ca <_realloc_r+0x366>
   833da:	6823      	ldr	r3, [r4, #0]
   833dc:	2a1b      	cmp	r2, #27
   833de:	f8ca 3008 	str.w	r3, [sl, #8]
   833e2:	6863      	ldr	r3, [r4, #4]
   833e4:	f8ca 300c 	str.w	r3, [sl, #12]
   833e8:	f200 8084 	bhi.w	834f4 <_realloc_r+0x390>
   833ec:	3408      	adds	r4, #8
   833ee:	f10a 0310 	add.w	r3, sl, #16
   833f2:	6822      	ldr	r2, [r4, #0]
   833f4:	601a      	str	r2, [r3, #0]
   833f6:	6862      	ldr	r2, [r4, #4]
   833f8:	605a      	str	r2, [r3, #4]
   833fa:	68a2      	ldr	r2, [r4, #8]
   833fc:	609a      	str	r2, [r3, #8]
   833fe:	ebc6 020c 	rsb	r2, r6, ip
   83402:	eb0a 0306 	add.w	r3, sl, r6
   83406:	f042 0201 	orr.w	r2, r2, #1
   8340a:	f8cb 3008 	str.w	r3, [fp, #8]
   8340e:	605a      	str	r2, [r3, #4]
   83410:	f8da 3004 	ldr.w	r3, [sl, #4]
   83414:	4648      	mov	r0, r9
   83416:	f003 0301 	and.w	r3, r3, #1
   8341a:	431e      	orrs	r6, r3
   8341c:	f8ca 6004 	str.w	r6, [sl, #4]
   83420:	f7ff fe9e 	bl	83160 <__malloc_unlock>
   83424:	4638      	mov	r0, r7
   83426:	e71b      	b.n	83260 <_realloc_r+0xfc>
   83428:	68a3      	ldr	r3, [r4, #8]
   8342a:	2a24      	cmp	r2, #36	; 0x24
   8342c:	6083      	str	r3, [r0, #8]
   8342e:	68e3      	ldr	r3, [r4, #12]
   83430:	60c3      	str	r3, [r0, #12]
   83432:	d02b      	beq.n	8348c <_realloc_r+0x328>
   83434:	f100 0310 	add.w	r3, r0, #16
   83438:	f104 0210 	add.w	r2, r4, #16
   8343c:	e74a      	b.n	832d4 <_realloc_r+0x170>
   8343e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83442:	46a0      	mov	r8, r4
   83444:	f022 0203 	bic.w	r2, r2, #3
   83448:	4415      	add	r5, r2
   8344a:	e6f9      	b.n	83240 <_realloc_r+0xdc>
   8344c:	4621      	mov	r1, r4
   8344e:	4640      	mov	r0, r8
   83450:	4675      	mov	r5, lr
   83452:	4657      	mov	r7, sl
   83454:	f7ff fe1c 	bl	83090 <memmove>
   83458:	f8da 3004 	ldr.w	r3, [sl, #4]
   8345c:	e6f0      	b.n	83240 <_realloc_r+0xdc>
   8345e:	4642      	mov	r2, r8
   83460:	e76e      	b.n	83340 <_realloc_r+0x1dc>
   83462:	4621      	mov	r1, r4
   83464:	4640      	mov	r0, r8
   83466:	461d      	mov	r5, r3
   83468:	4657      	mov	r7, sl
   8346a:	f7ff fe11 	bl	83090 <memmove>
   8346e:	f8da 3004 	ldr.w	r3, [sl, #4]
   83472:	e6e5      	b.n	83240 <_realloc_r+0xdc>
   83474:	68a3      	ldr	r3, [r4, #8]
   83476:	2a24      	cmp	r2, #36	; 0x24
   83478:	f8ca 3010 	str.w	r3, [sl, #16]
   8347c:	68e3      	ldr	r3, [r4, #12]
   8347e:	f8ca 3014 	str.w	r3, [sl, #20]
   83482:	d018      	beq.n	834b6 <_realloc_r+0x352>
   83484:	3410      	adds	r4, #16
   83486:	f10a 0318 	add.w	r3, sl, #24
   8348a:	e770      	b.n	8336e <_realloc_r+0x20a>
   8348c:	6922      	ldr	r2, [r4, #16]
   8348e:	f100 0318 	add.w	r3, r0, #24
   83492:	6102      	str	r2, [r0, #16]
   83494:	6961      	ldr	r1, [r4, #20]
   83496:	f104 0218 	add.w	r2, r4, #24
   8349a:	6141      	str	r1, [r0, #20]
   8349c:	e71a      	b.n	832d4 <_realloc_r+0x170>
   8349e:	68a1      	ldr	r1, [r4, #8]
   834a0:	2a24      	cmp	r2, #36	; 0x24
   834a2:	f8ca 1010 	str.w	r1, [sl, #16]
   834a6:	68e1      	ldr	r1, [r4, #12]
   834a8:	f8ca 1014 	str.w	r1, [sl, #20]
   834ac:	d00f      	beq.n	834ce <_realloc_r+0x36a>
   834ae:	3410      	adds	r4, #16
   834b0:	f10a 0218 	add.w	r2, sl, #24
   834b4:	e744      	b.n	83340 <_realloc_r+0x1dc>
   834b6:	6922      	ldr	r2, [r4, #16]
   834b8:	f10a 0320 	add.w	r3, sl, #32
   834bc:	f8ca 2018 	str.w	r2, [sl, #24]
   834c0:	6962      	ldr	r2, [r4, #20]
   834c2:	3418      	adds	r4, #24
   834c4:	f8ca 201c 	str.w	r2, [sl, #28]
   834c8:	e751      	b.n	8336e <_realloc_r+0x20a>
   834ca:	463b      	mov	r3, r7
   834cc:	e791      	b.n	833f2 <_realloc_r+0x28e>
   834ce:	6921      	ldr	r1, [r4, #16]
   834d0:	f10a 0220 	add.w	r2, sl, #32
   834d4:	f8ca 1018 	str.w	r1, [sl, #24]
   834d8:	6961      	ldr	r1, [r4, #20]
   834da:	3418      	adds	r4, #24
   834dc:	f8ca 101c 	str.w	r1, [sl, #28]
   834e0:	e72e      	b.n	83340 <_realloc_r+0x1dc>
   834e2:	4621      	mov	r1, r4
   834e4:	4638      	mov	r0, r7
   834e6:	f8cd c004 	str.w	ip, [sp, #4]
   834ea:	f7ff fdd1 	bl	83090 <memmove>
   834ee:	f8dd c004 	ldr.w	ip, [sp, #4]
   834f2:	e784      	b.n	833fe <_realloc_r+0x29a>
   834f4:	68a3      	ldr	r3, [r4, #8]
   834f6:	2a24      	cmp	r2, #36	; 0x24
   834f8:	f8ca 3010 	str.w	r3, [sl, #16]
   834fc:	68e3      	ldr	r3, [r4, #12]
   834fe:	f8ca 3014 	str.w	r3, [sl, #20]
   83502:	d003      	beq.n	8350c <_realloc_r+0x3a8>
   83504:	3410      	adds	r4, #16
   83506:	f10a 0318 	add.w	r3, sl, #24
   8350a:	e772      	b.n	833f2 <_realloc_r+0x28e>
   8350c:	6922      	ldr	r2, [r4, #16]
   8350e:	f10a 0320 	add.w	r3, sl, #32
   83512:	f8ca 2018 	str.w	r2, [sl, #24]
   83516:	6962      	ldr	r2, [r4, #20]
   83518:	3418      	adds	r4, #24
   8351a:	f8ca 201c 	str.w	r2, [sl, #28]
   8351e:	e768      	b.n	833f2 <_realloc_r+0x28e>
   83520:	20070590 	.word	0x20070590

00083524 <_sbrk_r>:
   83524:	b538      	push	{r3, r4, r5, lr}
   83526:	4c07      	ldr	r4, [pc, #28]	; (83544 <_sbrk_r+0x20>)
   83528:	2300      	movs	r3, #0
   8352a:	4605      	mov	r5, r0
   8352c:	4608      	mov	r0, r1
   8352e:	6023      	str	r3, [r4, #0]
   83530:	f7fd fb5a 	bl	80be8 <_sbrk>
   83534:	1c43      	adds	r3, r0, #1
   83536:	d000      	beq.n	8353a <_sbrk_r+0x16>
   83538:	bd38      	pop	{r3, r4, r5, pc}
   8353a:	6823      	ldr	r3, [r4, #0]
   8353c:	2b00      	cmp	r3, #0
   8353e:	d0fb      	beq.n	83538 <_sbrk_r+0x14>
   83540:	602b      	str	r3, [r5, #0]
   83542:	bd38      	pop	{r3, r4, r5, pc}
   83544:	20070a74 	.word	0x20070a74

00083548 <__sread>:
   83548:	b510      	push	{r4, lr}
   8354a:	460c      	mov	r4, r1
   8354c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83550:	f000 f9f2 	bl	83938 <_read_r>
   83554:	2800      	cmp	r0, #0
   83556:	db03      	blt.n	83560 <__sread+0x18>
   83558:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8355a:	4403      	add	r3, r0
   8355c:	6523      	str	r3, [r4, #80]	; 0x50
   8355e:	bd10      	pop	{r4, pc}
   83560:	89a3      	ldrh	r3, [r4, #12]
   83562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83566:	81a3      	strh	r3, [r4, #12]
   83568:	bd10      	pop	{r4, pc}
   8356a:	bf00      	nop

0008356c <__swrite>:
   8356c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83570:	460c      	mov	r4, r1
   83572:	8989      	ldrh	r1, [r1, #12]
   83574:	461d      	mov	r5, r3
   83576:	05cb      	lsls	r3, r1, #23
   83578:	4616      	mov	r6, r2
   8357a:	4607      	mov	r7, r0
   8357c:	d506      	bpl.n	8358c <__swrite+0x20>
   8357e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83582:	2200      	movs	r2, #0
   83584:	2302      	movs	r3, #2
   83586:	f000 f9c3 	bl	83910 <_lseek_r>
   8358a:	89a1      	ldrh	r1, [r4, #12]
   8358c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83590:	81a1      	strh	r1, [r4, #12]
   83592:	4638      	mov	r0, r7
   83594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83598:	4632      	mov	r2, r6
   8359a:	462b      	mov	r3, r5
   8359c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   835a0:	f000 b8ce 	b.w	83740 <_write_r>

000835a4 <__sseek>:
   835a4:	b510      	push	{r4, lr}
   835a6:	460c      	mov	r4, r1
   835a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835ac:	f000 f9b0 	bl	83910 <_lseek_r>
   835b0:	89a3      	ldrh	r3, [r4, #12]
   835b2:	1c42      	adds	r2, r0, #1
   835b4:	bf0e      	itee	eq
   835b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   835ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   835be:	6520      	strne	r0, [r4, #80]	; 0x50
   835c0:	81a3      	strh	r3, [r4, #12]
   835c2:	bd10      	pop	{r4, pc}

000835c4 <__sclose>:
   835c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835c8:	f000 b922 	b.w	83810 <_close_r>

000835cc <strlen>:
   835cc:	f020 0103 	bic.w	r1, r0, #3
   835d0:	f010 0003 	ands.w	r0, r0, #3
   835d4:	f1c0 0000 	rsb	r0, r0, #0
   835d8:	f851 3b04 	ldr.w	r3, [r1], #4
   835dc:	f100 0c04 	add.w	ip, r0, #4
   835e0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   835e4:	f06f 0200 	mvn.w	r2, #0
   835e8:	bf1c      	itt	ne
   835ea:	fa22 f20c 	lsrne.w	r2, r2, ip
   835ee:	4313      	orrne	r3, r2
   835f0:	f04f 0c01 	mov.w	ip, #1
   835f4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   835f8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   835fc:	eba3 020c 	sub.w	r2, r3, ip
   83600:	ea22 0203 	bic.w	r2, r2, r3
   83604:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83608:	bf04      	itt	eq
   8360a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8360e:	3004      	addeq	r0, #4
   83610:	d0f4      	beq.n	835fc <strlen+0x30>
   83612:	f013 0fff 	tst.w	r3, #255	; 0xff
   83616:	bf1f      	itttt	ne
   83618:	3001      	addne	r0, #1
   8361a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8361e:	3001      	addne	r0, #1
   83620:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   83624:	bf18      	it	ne
   83626:	3001      	addne	r0, #1
   83628:	4770      	bx	lr
   8362a:	bf00      	nop

0008362c <__swbuf_r>:
   8362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8362e:	460d      	mov	r5, r1
   83630:	4614      	mov	r4, r2
   83632:	4607      	mov	r7, r0
   83634:	b110      	cbz	r0, 8363c <__swbuf_r+0x10>
   83636:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83638:	2b00      	cmp	r3, #0
   8363a:	d048      	beq.n	836ce <__swbuf_r+0xa2>
   8363c:	89a2      	ldrh	r2, [r4, #12]
   8363e:	69a0      	ldr	r0, [r4, #24]
   83640:	b293      	uxth	r3, r2
   83642:	60a0      	str	r0, [r4, #8]
   83644:	0718      	lsls	r0, r3, #28
   83646:	d538      	bpl.n	836ba <__swbuf_r+0x8e>
   83648:	6926      	ldr	r6, [r4, #16]
   8364a:	2e00      	cmp	r6, #0
   8364c:	d035      	beq.n	836ba <__swbuf_r+0x8e>
   8364e:	0499      	lsls	r1, r3, #18
   83650:	b2ed      	uxtb	r5, r5
   83652:	d515      	bpl.n	83680 <__swbuf_r+0x54>
   83654:	6823      	ldr	r3, [r4, #0]
   83656:	6962      	ldr	r2, [r4, #20]
   83658:	1b9e      	subs	r6, r3, r6
   8365a:	4296      	cmp	r6, r2
   8365c:	da1c      	bge.n	83698 <__swbuf_r+0x6c>
   8365e:	3601      	adds	r6, #1
   83660:	68a2      	ldr	r2, [r4, #8]
   83662:	1c59      	adds	r1, r3, #1
   83664:	3a01      	subs	r2, #1
   83666:	60a2      	str	r2, [r4, #8]
   83668:	6021      	str	r1, [r4, #0]
   8366a:	701d      	strb	r5, [r3, #0]
   8366c:	6963      	ldr	r3, [r4, #20]
   8366e:	42b3      	cmp	r3, r6
   83670:	d01a      	beq.n	836a8 <__swbuf_r+0x7c>
   83672:	89a3      	ldrh	r3, [r4, #12]
   83674:	07db      	lsls	r3, r3, #31
   83676:	d501      	bpl.n	8367c <__swbuf_r+0x50>
   83678:	2d0a      	cmp	r5, #10
   8367a:	d015      	beq.n	836a8 <__swbuf_r+0x7c>
   8367c:	4628      	mov	r0, r5
   8367e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83680:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83682:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8368a:	6663      	str	r3, [r4, #100]	; 0x64
   8368c:	6823      	ldr	r3, [r4, #0]
   8368e:	81a2      	strh	r2, [r4, #12]
   83690:	6962      	ldr	r2, [r4, #20]
   83692:	1b9e      	subs	r6, r3, r6
   83694:	4296      	cmp	r6, r2
   83696:	dbe2      	blt.n	8365e <__swbuf_r+0x32>
   83698:	4638      	mov	r0, r7
   8369a:	4621      	mov	r1, r4
   8369c:	f7fe fd3e 	bl	8211c <_fflush_r>
   836a0:	b940      	cbnz	r0, 836b4 <__swbuf_r+0x88>
   836a2:	6823      	ldr	r3, [r4, #0]
   836a4:	2601      	movs	r6, #1
   836a6:	e7db      	b.n	83660 <__swbuf_r+0x34>
   836a8:	4638      	mov	r0, r7
   836aa:	4621      	mov	r1, r4
   836ac:	f7fe fd36 	bl	8211c <_fflush_r>
   836b0:	2800      	cmp	r0, #0
   836b2:	d0e3      	beq.n	8367c <__swbuf_r+0x50>
   836b4:	f04f 30ff 	mov.w	r0, #4294967295
   836b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836ba:	4638      	mov	r0, r7
   836bc:	4621      	mov	r1, r4
   836be:	f7fe fc17 	bl	81ef0 <__swsetup_r>
   836c2:	2800      	cmp	r0, #0
   836c4:	d1f6      	bne.n	836b4 <__swbuf_r+0x88>
   836c6:	89a2      	ldrh	r2, [r4, #12]
   836c8:	6926      	ldr	r6, [r4, #16]
   836ca:	b293      	uxth	r3, r2
   836cc:	e7bf      	b.n	8364e <__swbuf_r+0x22>
   836ce:	f7fe fd41 	bl	82154 <__sinit>
   836d2:	e7b3      	b.n	8363c <__swbuf_r+0x10>

000836d4 <_wcrtomb_r>:
   836d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836d8:	461e      	mov	r6, r3
   836da:	b086      	sub	sp, #24
   836dc:	460c      	mov	r4, r1
   836de:	4605      	mov	r5, r0
   836e0:	4617      	mov	r7, r2
   836e2:	4b0f      	ldr	r3, [pc, #60]	; (83720 <_wcrtomb_r+0x4c>)
   836e4:	b191      	cbz	r1, 8370c <_wcrtomb_r+0x38>
   836e6:	f8d3 8000 	ldr.w	r8, [r3]
   836ea:	f7ff f8f3 	bl	828d4 <__locale_charset>
   836ee:	9600      	str	r6, [sp, #0]
   836f0:	4603      	mov	r3, r0
   836f2:	4621      	mov	r1, r4
   836f4:	463a      	mov	r2, r7
   836f6:	4628      	mov	r0, r5
   836f8:	47c0      	blx	r8
   836fa:	1c43      	adds	r3, r0, #1
   836fc:	d103      	bne.n	83706 <_wcrtomb_r+0x32>
   836fe:	2200      	movs	r2, #0
   83700:	238a      	movs	r3, #138	; 0x8a
   83702:	6032      	str	r2, [r6, #0]
   83704:	602b      	str	r3, [r5, #0]
   83706:	b006      	add	sp, #24
   83708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8370c:	681f      	ldr	r7, [r3, #0]
   8370e:	f7ff f8e1 	bl	828d4 <__locale_charset>
   83712:	9600      	str	r6, [sp, #0]
   83714:	4603      	mov	r3, r0
   83716:	4622      	mov	r2, r4
   83718:	4628      	mov	r0, r5
   8371a:	a903      	add	r1, sp, #12
   8371c:	47b8      	blx	r7
   8371e:	e7ec      	b.n	836fa <_wcrtomb_r+0x26>
   83720:	200709a0 	.word	0x200709a0

00083724 <__ascii_wctomb>:
   83724:	b121      	cbz	r1, 83730 <__ascii_wctomb+0xc>
   83726:	2aff      	cmp	r2, #255	; 0xff
   83728:	d804      	bhi.n	83734 <__ascii_wctomb+0x10>
   8372a:	700a      	strb	r2, [r1, #0]
   8372c:	2001      	movs	r0, #1
   8372e:	4770      	bx	lr
   83730:	4608      	mov	r0, r1
   83732:	4770      	bx	lr
   83734:	238a      	movs	r3, #138	; 0x8a
   83736:	6003      	str	r3, [r0, #0]
   83738:	f04f 30ff 	mov.w	r0, #4294967295
   8373c:	4770      	bx	lr
   8373e:	bf00      	nop

00083740 <_write_r>:
   83740:	b570      	push	{r4, r5, r6, lr}
   83742:	4c08      	ldr	r4, [pc, #32]	; (83764 <_write_r+0x24>)
   83744:	4606      	mov	r6, r0
   83746:	2500      	movs	r5, #0
   83748:	4608      	mov	r0, r1
   8374a:	4611      	mov	r1, r2
   8374c:	461a      	mov	r2, r3
   8374e:	6025      	str	r5, [r4, #0]
   83750:	f7fc fd4c 	bl	801ec <_write>
   83754:	1c43      	adds	r3, r0, #1
   83756:	d000      	beq.n	8375a <_write_r+0x1a>
   83758:	bd70      	pop	{r4, r5, r6, pc}
   8375a:	6823      	ldr	r3, [r4, #0]
   8375c:	2b00      	cmp	r3, #0
   8375e:	d0fb      	beq.n	83758 <_write_r+0x18>
   83760:	6033      	str	r3, [r6, #0]
   83762:	bd70      	pop	{r4, r5, r6, pc}
   83764:	20070a74 	.word	0x20070a74

00083768 <__register_exitproc>:
   83768:	b5f0      	push	{r4, r5, r6, r7, lr}
   8376a:	4c27      	ldr	r4, [pc, #156]	; (83808 <__register_exitproc+0xa0>)
   8376c:	b085      	sub	sp, #20
   8376e:	6826      	ldr	r6, [r4, #0]
   83770:	4607      	mov	r7, r0
   83772:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83776:	2c00      	cmp	r4, #0
   83778:	d040      	beq.n	837fc <__register_exitproc+0x94>
   8377a:	6865      	ldr	r5, [r4, #4]
   8377c:	2d1f      	cmp	r5, #31
   8377e:	dd1e      	ble.n	837be <__register_exitproc+0x56>
   83780:	4822      	ldr	r0, [pc, #136]	; (8380c <__register_exitproc+0xa4>)
   83782:	b918      	cbnz	r0, 8378c <__register_exitproc+0x24>
   83784:	f04f 30ff 	mov.w	r0, #4294967295
   83788:	b005      	add	sp, #20
   8378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8378c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83790:	9103      	str	r1, [sp, #12]
   83792:	9202      	str	r2, [sp, #8]
   83794:	9301      	str	r3, [sp, #4]
   83796:	f7ff f917 	bl	829c8 <malloc>
   8379a:	9903      	ldr	r1, [sp, #12]
   8379c:	4604      	mov	r4, r0
   8379e:	9a02      	ldr	r2, [sp, #8]
   837a0:	9b01      	ldr	r3, [sp, #4]
   837a2:	2800      	cmp	r0, #0
   837a4:	d0ee      	beq.n	83784 <__register_exitproc+0x1c>
   837a6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   837aa:	2000      	movs	r0, #0
   837ac:	6025      	str	r5, [r4, #0]
   837ae:	6060      	str	r0, [r4, #4]
   837b0:	4605      	mov	r5, r0
   837b2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   837b6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   837ba:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   837be:	b93f      	cbnz	r7, 837d0 <__register_exitproc+0x68>
   837c0:	1c6b      	adds	r3, r5, #1
   837c2:	2000      	movs	r0, #0
   837c4:	3502      	adds	r5, #2
   837c6:	6063      	str	r3, [r4, #4]
   837c8:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   837cc:	b005      	add	sp, #20
   837ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   837d0:	2601      	movs	r6, #1
   837d2:	40ae      	lsls	r6, r5
   837d4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   837d8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   837dc:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   837e0:	2f02      	cmp	r7, #2
   837e2:	ea42 0206 	orr.w	r2, r2, r6
   837e6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   837ea:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   837ee:	d1e7      	bne.n	837c0 <__register_exitproc+0x58>
   837f0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   837f4:	431e      	orrs	r6, r3
   837f6:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   837fa:	e7e1      	b.n	837c0 <__register_exitproc+0x58>
   837fc:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83800:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83804:	e7b9      	b.n	8377a <__register_exitproc+0x12>
   83806:	bf00      	nop
   83808:	00083f88 	.word	0x00083f88
   8380c:	000829c9 	.word	0x000829c9

00083810 <_close_r>:
   83810:	b538      	push	{r3, r4, r5, lr}
   83812:	4c07      	ldr	r4, [pc, #28]	; (83830 <_close_r+0x20>)
   83814:	2300      	movs	r3, #0
   83816:	4605      	mov	r5, r0
   83818:	4608      	mov	r0, r1
   8381a:	6023      	str	r3, [r4, #0]
   8381c:	f7fd f9fe 	bl	80c1c <_close>
   83820:	1c43      	adds	r3, r0, #1
   83822:	d000      	beq.n	83826 <_close_r+0x16>
   83824:	bd38      	pop	{r3, r4, r5, pc}
   83826:	6823      	ldr	r3, [r4, #0]
   83828:	2b00      	cmp	r3, #0
   8382a:	d0fb      	beq.n	83824 <_close_r+0x14>
   8382c:	602b      	str	r3, [r5, #0]
   8382e:	bd38      	pop	{r3, r4, r5, pc}
   83830:	20070a74 	.word	0x20070a74

00083834 <_fclose_r>:
   83834:	b570      	push	{r4, r5, r6, lr}
   83836:	460c      	mov	r4, r1
   83838:	4605      	mov	r5, r0
   8383a:	b131      	cbz	r1, 8384a <_fclose_r+0x16>
   8383c:	b110      	cbz	r0, 83844 <_fclose_r+0x10>
   8383e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83840:	2b00      	cmp	r3, #0
   83842:	d02f      	beq.n	838a4 <_fclose_r+0x70>
   83844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83848:	b90b      	cbnz	r3, 8384e <_fclose_r+0x1a>
   8384a:	2000      	movs	r0, #0
   8384c:	bd70      	pop	{r4, r5, r6, pc}
   8384e:	4628      	mov	r0, r5
   83850:	4621      	mov	r1, r4
   83852:	f7fe fc63 	bl	8211c <_fflush_r>
   83856:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83858:	4606      	mov	r6, r0
   8385a:	b133      	cbz	r3, 8386a <_fclose_r+0x36>
   8385c:	4628      	mov	r0, r5
   8385e:	69e1      	ldr	r1, [r4, #28]
   83860:	4798      	blx	r3
   83862:	2800      	cmp	r0, #0
   83864:	bfb8      	it	lt
   83866:	f04f 36ff 	movlt.w	r6, #4294967295
   8386a:	89a3      	ldrh	r3, [r4, #12]
   8386c:	061b      	lsls	r3, r3, #24
   8386e:	d41c      	bmi.n	838aa <_fclose_r+0x76>
   83870:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83872:	b141      	cbz	r1, 83886 <_fclose_r+0x52>
   83874:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83878:	4299      	cmp	r1, r3
   8387a:	d002      	beq.n	83882 <_fclose_r+0x4e>
   8387c:	4628      	mov	r0, r5
   8387e:	f7fe fdad 	bl	823dc <_free_r>
   83882:	2300      	movs	r3, #0
   83884:	6323      	str	r3, [r4, #48]	; 0x30
   83886:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83888:	b121      	cbz	r1, 83894 <_fclose_r+0x60>
   8388a:	4628      	mov	r0, r5
   8388c:	f7fe fda6 	bl	823dc <_free_r>
   83890:	2300      	movs	r3, #0
   83892:	6463      	str	r3, [r4, #68]	; 0x44
   83894:	f7fe fcd8 	bl	82248 <__sfp_lock_acquire>
   83898:	2300      	movs	r3, #0
   8389a:	81a3      	strh	r3, [r4, #12]
   8389c:	f7fe fcd6 	bl	8224c <__sfp_lock_release>
   838a0:	4630      	mov	r0, r6
   838a2:	bd70      	pop	{r4, r5, r6, pc}
   838a4:	f7fe fc56 	bl	82154 <__sinit>
   838a8:	e7cc      	b.n	83844 <_fclose_r+0x10>
   838aa:	4628      	mov	r0, r5
   838ac:	6921      	ldr	r1, [r4, #16]
   838ae:	f7fe fd95 	bl	823dc <_free_r>
   838b2:	e7dd      	b.n	83870 <_fclose_r+0x3c>

000838b4 <fclose>:
   838b4:	4b02      	ldr	r3, [pc, #8]	; (838c0 <fclose+0xc>)
   838b6:	4601      	mov	r1, r0
   838b8:	6818      	ldr	r0, [r3, #0]
   838ba:	f7ff bfbb 	b.w	83834 <_fclose_r>
   838be:	bf00      	nop
   838c0:	20070568 	.word	0x20070568

000838c4 <_fstat_r>:
   838c4:	b538      	push	{r3, r4, r5, lr}
   838c6:	4c08      	ldr	r4, [pc, #32]	; (838e8 <_fstat_r+0x24>)
   838c8:	2300      	movs	r3, #0
   838ca:	4605      	mov	r5, r0
   838cc:	4608      	mov	r0, r1
   838ce:	4611      	mov	r1, r2
   838d0:	6023      	str	r3, [r4, #0]
   838d2:	f7fd f9a7 	bl	80c24 <_fstat>
   838d6:	1c43      	adds	r3, r0, #1
   838d8:	d000      	beq.n	838dc <_fstat_r+0x18>
   838da:	bd38      	pop	{r3, r4, r5, pc}
   838dc:	6823      	ldr	r3, [r4, #0]
   838de:	2b00      	cmp	r3, #0
   838e0:	d0fb      	beq.n	838da <_fstat_r+0x16>
   838e2:	602b      	str	r3, [r5, #0]
   838e4:	bd38      	pop	{r3, r4, r5, pc}
   838e6:	bf00      	nop
   838e8:	20070a74 	.word	0x20070a74

000838ec <_isatty_r>:
   838ec:	b538      	push	{r3, r4, r5, lr}
   838ee:	4c07      	ldr	r4, [pc, #28]	; (8390c <_isatty_r+0x20>)
   838f0:	2300      	movs	r3, #0
   838f2:	4605      	mov	r5, r0
   838f4:	4608      	mov	r0, r1
   838f6:	6023      	str	r3, [r4, #0]
   838f8:	f7fd f99a 	bl	80c30 <_isatty>
   838fc:	1c43      	adds	r3, r0, #1
   838fe:	d000      	beq.n	83902 <_isatty_r+0x16>
   83900:	bd38      	pop	{r3, r4, r5, pc}
   83902:	6823      	ldr	r3, [r4, #0]
   83904:	2b00      	cmp	r3, #0
   83906:	d0fb      	beq.n	83900 <_isatty_r+0x14>
   83908:	602b      	str	r3, [r5, #0]
   8390a:	bd38      	pop	{r3, r4, r5, pc}
   8390c:	20070a74 	.word	0x20070a74

00083910 <_lseek_r>:
   83910:	b570      	push	{r4, r5, r6, lr}
   83912:	4c08      	ldr	r4, [pc, #32]	; (83934 <_lseek_r+0x24>)
   83914:	4606      	mov	r6, r0
   83916:	2500      	movs	r5, #0
   83918:	4608      	mov	r0, r1
   8391a:	4611      	mov	r1, r2
   8391c:	461a      	mov	r2, r3
   8391e:	6025      	str	r5, [r4, #0]
   83920:	f7fd f988 	bl	80c34 <_lseek>
   83924:	1c43      	adds	r3, r0, #1
   83926:	d000      	beq.n	8392a <_lseek_r+0x1a>
   83928:	bd70      	pop	{r4, r5, r6, pc}
   8392a:	6823      	ldr	r3, [r4, #0]
   8392c:	2b00      	cmp	r3, #0
   8392e:	d0fb      	beq.n	83928 <_lseek_r+0x18>
   83930:	6033      	str	r3, [r6, #0]
   83932:	bd70      	pop	{r4, r5, r6, pc}
   83934:	20070a74 	.word	0x20070a74

00083938 <_read_r>:
   83938:	b570      	push	{r4, r5, r6, lr}
   8393a:	4c08      	ldr	r4, [pc, #32]	; (8395c <_read_r+0x24>)
   8393c:	4606      	mov	r6, r0
   8393e:	2500      	movs	r5, #0
   83940:	4608      	mov	r0, r1
   83942:	4611      	mov	r1, r2
   83944:	461a      	mov	r2, r3
   83946:	6025      	str	r5, [r4, #0]
   83948:	f7fc fc30 	bl	801ac <_read>
   8394c:	1c43      	adds	r3, r0, #1
   8394e:	d000      	beq.n	83952 <_read_r+0x1a>
   83950:	bd70      	pop	{r4, r5, r6, pc}
   83952:	6823      	ldr	r3, [r4, #0]
   83954:	2b00      	cmp	r3, #0
   83956:	d0fb      	beq.n	83950 <_read_r+0x18>
   83958:	6033      	str	r3, [r6, #0]
   8395a:	bd70      	pop	{r4, r5, r6, pc}
   8395c:	20070a74 	.word	0x20070a74

00083960 <__aeabi_uldivmod>:
   83960:	b94b      	cbnz	r3, 83976 <__aeabi_uldivmod+0x16>
   83962:	b942      	cbnz	r2, 83976 <__aeabi_uldivmod+0x16>
   83964:	2900      	cmp	r1, #0
   83966:	bf08      	it	eq
   83968:	2800      	cmpeq	r0, #0
   8396a:	d002      	beq.n	83972 <__aeabi_uldivmod+0x12>
   8396c:	f04f 31ff 	mov.w	r1, #4294967295
   83970:	4608      	mov	r0, r1
   83972:	f000 b83b 	b.w	839ec <__aeabi_idiv0>
   83976:	b082      	sub	sp, #8
   83978:	46ec      	mov	ip, sp
   8397a:	e92d 5000 	stmdb	sp!, {ip, lr}
   8397e:	f000 f81d 	bl	839bc <__gnu_uldivmod_helper>
   83982:	f8dd e004 	ldr.w	lr, [sp, #4]
   83986:	b002      	add	sp, #8
   83988:	bc0c      	pop	{r2, r3}
   8398a:	4770      	bx	lr

0008398c <__gnu_ldivmod_helper>:
   8398c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83990:	9e08      	ldr	r6, [sp, #32]
   83992:	4614      	mov	r4, r2
   83994:	461d      	mov	r5, r3
   83996:	4680      	mov	r8, r0
   83998:	4689      	mov	r9, r1
   8399a:	f000 f829 	bl	839f0 <__divdi3>
   8399e:	fb04 f301 	mul.w	r3, r4, r1
   839a2:	fba4 ab00 	umull	sl, fp, r4, r0
   839a6:	fb00 3205 	mla	r2, r0, r5, r3
   839aa:	4493      	add	fp, r2
   839ac:	ebb8 080a 	subs.w	r8, r8, sl
   839b0:	eb69 090b 	sbc.w	r9, r9, fp
   839b4:	e9c6 8900 	strd	r8, r9, [r6]
   839b8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000839bc <__gnu_uldivmod_helper>:
   839bc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   839c0:	9e08      	ldr	r6, [sp, #32]
   839c2:	4614      	mov	r4, r2
   839c4:	461d      	mov	r5, r3
   839c6:	4680      	mov	r8, r0
   839c8:	4689      	mov	r9, r1
   839ca:	f000 f961 	bl	83c90 <__udivdi3>
   839ce:	fb00 f505 	mul.w	r5, r0, r5
   839d2:	fba0 ab04 	umull	sl, fp, r0, r4
   839d6:	fb04 5401 	mla	r4, r4, r1, r5
   839da:	44a3      	add	fp, r4
   839dc:	ebb8 080a 	subs.w	r8, r8, sl
   839e0:	eb69 090b 	sbc.w	r9, r9, fp
   839e4:	e9c6 8900 	strd	r8, r9, [r6]
   839e8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000839ec <__aeabi_idiv0>:
   839ec:	4770      	bx	lr
   839ee:	bf00      	nop

000839f0 <__divdi3>:
   839f0:	2900      	cmp	r1, #0
   839f2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   839f6:	f2c0 80a1 	blt.w	83b3c <__divdi3+0x14c>
   839fa:	2400      	movs	r4, #0
   839fc:	2b00      	cmp	r3, #0
   839fe:	f2c0 8098 	blt.w	83b32 <__divdi3+0x142>
   83a02:	4615      	mov	r5, r2
   83a04:	4606      	mov	r6, r0
   83a06:	460f      	mov	r7, r1
   83a08:	2b00      	cmp	r3, #0
   83a0a:	d13f      	bne.n	83a8c <__divdi3+0x9c>
   83a0c:	428a      	cmp	r2, r1
   83a0e:	d958      	bls.n	83ac2 <__divdi3+0xd2>
   83a10:	fab2 f382 	clz	r3, r2
   83a14:	b14b      	cbz	r3, 83a2a <__divdi3+0x3a>
   83a16:	f1c3 0220 	rsb	r2, r3, #32
   83a1a:	fa01 f703 	lsl.w	r7, r1, r3
   83a1e:	fa20 f202 	lsr.w	r2, r0, r2
   83a22:	409d      	lsls	r5, r3
   83a24:	fa00 f603 	lsl.w	r6, r0, r3
   83a28:	4317      	orrs	r7, r2
   83a2a:	0c29      	lsrs	r1, r5, #16
   83a2c:	fbb7 f2f1 	udiv	r2, r7, r1
   83a30:	fb01 7712 	mls	r7, r1, r2, r7
   83a34:	b2a8      	uxth	r0, r5
   83a36:	fb00 f302 	mul.w	r3, r0, r2
   83a3a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83a3e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83a42:	42bb      	cmp	r3, r7
   83a44:	d909      	bls.n	83a5a <__divdi3+0x6a>
   83a46:	197f      	adds	r7, r7, r5
   83a48:	f102 3cff 	add.w	ip, r2, #4294967295
   83a4c:	f080 8105 	bcs.w	83c5a <__divdi3+0x26a>
   83a50:	42bb      	cmp	r3, r7
   83a52:	f240 8102 	bls.w	83c5a <__divdi3+0x26a>
   83a56:	3a02      	subs	r2, #2
   83a58:	442f      	add	r7, r5
   83a5a:	1aff      	subs	r7, r7, r3
   83a5c:	fbb7 f3f1 	udiv	r3, r7, r1
   83a60:	fb01 7113 	mls	r1, r1, r3, r7
   83a64:	fb00 f003 	mul.w	r0, r0, r3
   83a68:	b2b6      	uxth	r6, r6
   83a6a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83a6e:	4288      	cmp	r0, r1
   83a70:	d908      	bls.n	83a84 <__divdi3+0x94>
   83a72:	1949      	adds	r1, r1, r5
   83a74:	f103 37ff 	add.w	r7, r3, #4294967295
   83a78:	f080 80f1 	bcs.w	83c5e <__divdi3+0x26e>
   83a7c:	4288      	cmp	r0, r1
   83a7e:	f240 80ee 	bls.w	83c5e <__divdi3+0x26e>
   83a82:	3b02      	subs	r3, #2
   83a84:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83a88:	2300      	movs	r3, #0
   83a8a:	e003      	b.n	83a94 <__divdi3+0xa4>
   83a8c:	428b      	cmp	r3, r1
   83a8e:	d90a      	bls.n	83aa6 <__divdi3+0xb6>
   83a90:	2300      	movs	r3, #0
   83a92:	461a      	mov	r2, r3
   83a94:	4610      	mov	r0, r2
   83a96:	4619      	mov	r1, r3
   83a98:	b114      	cbz	r4, 83aa0 <__divdi3+0xb0>
   83a9a:	4240      	negs	r0, r0
   83a9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83aa0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83aa4:	4770      	bx	lr
   83aa6:	fab3 f883 	clz	r8, r3
   83aaa:	f1b8 0f00 	cmp.w	r8, #0
   83aae:	f040 8088 	bne.w	83bc2 <__divdi3+0x1d2>
   83ab2:	428b      	cmp	r3, r1
   83ab4:	d302      	bcc.n	83abc <__divdi3+0xcc>
   83ab6:	4282      	cmp	r2, r0
   83ab8:	f200 80e2 	bhi.w	83c80 <__divdi3+0x290>
   83abc:	2300      	movs	r3, #0
   83abe:	2201      	movs	r2, #1
   83ac0:	e7e8      	b.n	83a94 <__divdi3+0xa4>
   83ac2:	b912      	cbnz	r2, 83aca <__divdi3+0xda>
   83ac4:	2301      	movs	r3, #1
   83ac6:	fbb3 f5f2 	udiv	r5, r3, r2
   83aca:	fab5 f285 	clz	r2, r5
   83ace:	2a00      	cmp	r2, #0
   83ad0:	d13a      	bne.n	83b48 <__divdi3+0x158>
   83ad2:	1b7f      	subs	r7, r7, r5
   83ad4:	0c28      	lsrs	r0, r5, #16
   83ad6:	fa1f fc85 	uxth.w	ip, r5
   83ada:	2301      	movs	r3, #1
   83adc:	fbb7 f1f0 	udiv	r1, r7, r0
   83ae0:	fb00 7711 	mls	r7, r0, r1, r7
   83ae4:	fb0c f201 	mul.w	r2, ip, r1
   83ae8:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83aec:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83af0:	42ba      	cmp	r2, r7
   83af2:	d907      	bls.n	83b04 <__divdi3+0x114>
   83af4:	197f      	adds	r7, r7, r5
   83af6:	f101 38ff 	add.w	r8, r1, #4294967295
   83afa:	d202      	bcs.n	83b02 <__divdi3+0x112>
   83afc:	42ba      	cmp	r2, r7
   83afe:	f200 80c4 	bhi.w	83c8a <__divdi3+0x29a>
   83b02:	4641      	mov	r1, r8
   83b04:	1abf      	subs	r7, r7, r2
   83b06:	fbb7 f2f0 	udiv	r2, r7, r0
   83b0a:	fb00 7012 	mls	r0, r0, r2, r7
   83b0e:	fb0c fc02 	mul.w	ip, ip, r2
   83b12:	b2b6      	uxth	r6, r6
   83b14:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83b18:	4584      	cmp	ip, r0
   83b1a:	d907      	bls.n	83b2c <__divdi3+0x13c>
   83b1c:	1940      	adds	r0, r0, r5
   83b1e:	f102 37ff 	add.w	r7, r2, #4294967295
   83b22:	d202      	bcs.n	83b2a <__divdi3+0x13a>
   83b24:	4584      	cmp	ip, r0
   83b26:	f200 80ae 	bhi.w	83c86 <__divdi3+0x296>
   83b2a:	463a      	mov	r2, r7
   83b2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83b30:	e7b0      	b.n	83a94 <__divdi3+0xa4>
   83b32:	43e4      	mvns	r4, r4
   83b34:	4252      	negs	r2, r2
   83b36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83b3a:	e762      	b.n	83a02 <__divdi3+0x12>
   83b3c:	4240      	negs	r0, r0
   83b3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83b42:	f04f 34ff 	mov.w	r4, #4294967295
   83b46:	e759      	b.n	839fc <__divdi3+0xc>
   83b48:	4095      	lsls	r5, r2
   83b4a:	f1c2 0920 	rsb	r9, r2, #32
   83b4e:	fa27 f109 	lsr.w	r1, r7, r9
   83b52:	fa26 f909 	lsr.w	r9, r6, r9
   83b56:	4097      	lsls	r7, r2
   83b58:	0c28      	lsrs	r0, r5, #16
   83b5a:	fbb1 f8f0 	udiv	r8, r1, r0
   83b5e:	fb00 1118 	mls	r1, r0, r8, r1
   83b62:	fa1f fc85 	uxth.w	ip, r5
   83b66:	fb0c f308 	mul.w	r3, ip, r8
   83b6a:	ea49 0907 	orr.w	r9, r9, r7
   83b6e:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83b72:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83b76:	428b      	cmp	r3, r1
   83b78:	fa06 f602 	lsl.w	r6, r6, r2
   83b7c:	d908      	bls.n	83b90 <__divdi3+0x1a0>
   83b7e:	1949      	adds	r1, r1, r5
   83b80:	f108 32ff 	add.w	r2, r8, #4294967295
   83b84:	d27a      	bcs.n	83c7c <__divdi3+0x28c>
   83b86:	428b      	cmp	r3, r1
   83b88:	d978      	bls.n	83c7c <__divdi3+0x28c>
   83b8a:	f1a8 0802 	sub.w	r8, r8, #2
   83b8e:	4429      	add	r1, r5
   83b90:	1ac9      	subs	r1, r1, r3
   83b92:	fbb1 f3f0 	udiv	r3, r1, r0
   83b96:	fb00 1713 	mls	r7, r0, r3, r1
   83b9a:	fb0c f203 	mul.w	r2, ip, r3
   83b9e:	fa1f f989 	uxth.w	r9, r9
   83ba2:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83ba6:	42ba      	cmp	r2, r7
   83ba8:	d907      	bls.n	83bba <__divdi3+0x1ca>
   83baa:	197f      	adds	r7, r7, r5
   83bac:	f103 31ff 	add.w	r1, r3, #4294967295
   83bb0:	d260      	bcs.n	83c74 <__divdi3+0x284>
   83bb2:	42ba      	cmp	r2, r7
   83bb4:	d95e      	bls.n	83c74 <__divdi3+0x284>
   83bb6:	3b02      	subs	r3, #2
   83bb8:	442f      	add	r7, r5
   83bba:	1abf      	subs	r7, r7, r2
   83bbc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83bc0:	e78c      	b.n	83adc <__divdi3+0xec>
   83bc2:	f1c8 0220 	rsb	r2, r8, #32
   83bc6:	fa25 f102 	lsr.w	r1, r5, r2
   83bca:	fa03 fc08 	lsl.w	ip, r3, r8
   83bce:	fa27 f302 	lsr.w	r3, r7, r2
   83bd2:	fa20 f202 	lsr.w	r2, r0, r2
   83bd6:	fa07 f708 	lsl.w	r7, r7, r8
   83bda:	ea41 0c0c 	orr.w	ip, r1, ip
   83bde:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83be2:	fbb3 f1f9 	udiv	r1, r3, r9
   83be6:	fb09 3311 	mls	r3, r9, r1, r3
   83bea:	fa1f fa8c 	uxth.w	sl, ip
   83bee:	fb0a fb01 	mul.w	fp, sl, r1
   83bf2:	4317      	orrs	r7, r2
   83bf4:	0c3a      	lsrs	r2, r7, #16
   83bf6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83bfa:	459b      	cmp	fp, r3
   83bfc:	fa05 f008 	lsl.w	r0, r5, r8
   83c00:	d908      	bls.n	83c14 <__divdi3+0x224>
   83c02:	eb13 030c 	adds.w	r3, r3, ip
   83c06:	f101 32ff 	add.w	r2, r1, #4294967295
   83c0a:	d235      	bcs.n	83c78 <__divdi3+0x288>
   83c0c:	459b      	cmp	fp, r3
   83c0e:	d933      	bls.n	83c78 <__divdi3+0x288>
   83c10:	3902      	subs	r1, #2
   83c12:	4463      	add	r3, ip
   83c14:	ebcb 0303 	rsb	r3, fp, r3
   83c18:	fbb3 f2f9 	udiv	r2, r3, r9
   83c1c:	fb09 3312 	mls	r3, r9, r2, r3
   83c20:	fb0a fa02 	mul.w	sl, sl, r2
   83c24:	b2bf      	uxth	r7, r7
   83c26:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83c2a:	45ba      	cmp	sl, r7
   83c2c:	d908      	bls.n	83c40 <__divdi3+0x250>
   83c2e:	eb17 070c 	adds.w	r7, r7, ip
   83c32:	f102 33ff 	add.w	r3, r2, #4294967295
   83c36:	d21b      	bcs.n	83c70 <__divdi3+0x280>
   83c38:	45ba      	cmp	sl, r7
   83c3a:	d919      	bls.n	83c70 <__divdi3+0x280>
   83c3c:	3a02      	subs	r2, #2
   83c3e:	4467      	add	r7, ip
   83c40:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83c44:	fba5 0100 	umull	r0, r1, r5, r0
   83c48:	ebca 0707 	rsb	r7, sl, r7
   83c4c:	428f      	cmp	r7, r1
   83c4e:	f04f 0300 	mov.w	r3, #0
   83c52:	d30a      	bcc.n	83c6a <__divdi3+0x27a>
   83c54:	d005      	beq.n	83c62 <__divdi3+0x272>
   83c56:	462a      	mov	r2, r5
   83c58:	e71c      	b.n	83a94 <__divdi3+0xa4>
   83c5a:	4662      	mov	r2, ip
   83c5c:	e6fd      	b.n	83a5a <__divdi3+0x6a>
   83c5e:	463b      	mov	r3, r7
   83c60:	e710      	b.n	83a84 <__divdi3+0x94>
   83c62:	fa06 f608 	lsl.w	r6, r6, r8
   83c66:	4286      	cmp	r6, r0
   83c68:	d2f5      	bcs.n	83c56 <__divdi3+0x266>
   83c6a:	1e6a      	subs	r2, r5, #1
   83c6c:	2300      	movs	r3, #0
   83c6e:	e711      	b.n	83a94 <__divdi3+0xa4>
   83c70:	461a      	mov	r2, r3
   83c72:	e7e5      	b.n	83c40 <__divdi3+0x250>
   83c74:	460b      	mov	r3, r1
   83c76:	e7a0      	b.n	83bba <__divdi3+0x1ca>
   83c78:	4611      	mov	r1, r2
   83c7a:	e7cb      	b.n	83c14 <__divdi3+0x224>
   83c7c:	4690      	mov	r8, r2
   83c7e:	e787      	b.n	83b90 <__divdi3+0x1a0>
   83c80:	4643      	mov	r3, r8
   83c82:	4642      	mov	r2, r8
   83c84:	e706      	b.n	83a94 <__divdi3+0xa4>
   83c86:	3a02      	subs	r2, #2
   83c88:	e750      	b.n	83b2c <__divdi3+0x13c>
   83c8a:	3902      	subs	r1, #2
   83c8c:	442f      	add	r7, r5
   83c8e:	e739      	b.n	83b04 <__divdi3+0x114>

00083c90 <__udivdi3>:
   83c90:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83c94:	4614      	mov	r4, r2
   83c96:	4605      	mov	r5, r0
   83c98:	460e      	mov	r6, r1
   83c9a:	2b00      	cmp	r3, #0
   83c9c:	d143      	bne.n	83d26 <__udivdi3+0x96>
   83c9e:	428a      	cmp	r2, r1
   83ca0:	d953      	bls.n	83d4a <__udivdi3+0xba>
   83ca2:	fab2 f782 	clz	r7, r2
   83ca6:	b157      	cbz	r7, 83cbe <__udivdi3+0x2e>
   83ca8:	f1c7 0620 	rsb	r6, r7, #32
   83cac:	fa20 f606 	lsr.w	r6, r0, r6
   83cb0:	fa01 f307 	lsl.w	r3, r1, r7
   83cb4:	fa02 f407 	lsl.w	r4, r2, r7
   83cb8:	fa00 f507 	lsl.w	r5, r0, r7
   83cbc:	431e      	orrs	r6, r3
   83cbe:	0c21      	lsrs	r1, r4, #16
   83cc0:	fbb6 f2f1 	udiv	r2, r6, r1
   83cc4:	fb01 6612 	mls	r6, r1, r2, r6
   83cc8:	b2a0      	uxth	r0, r4
   83cca:	fb00 f302 	mul.w	r3, r0, r2
   83cce:	0c2f      	lsrs	r7, r5, #16
   83cd0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83cd4:	42b3      	cmp	r3, r6
   83cd6:	d909      	bls.n	83cec <__udivdi3+0x5c>
   83cd8:	1936      	adds	r6, r6, r4
   83cda:	f102 37ff 	add.w	r7, r2, #4294967295
   83cde:	f080 80fd 	bcs.w	83edc <__udivdi3+0x24c>
   83ce2:	42b3      	cmp	r3, r6
   83ce4:	f240 80fa 	bls.w	83edc <__udivdi3+0x24c>
   83ce8:	3a02      	subs	r2, #2
   83cea:	4426      	add	r6, r4
   83cec:	1af6      	subs	r6, r6, r3
   83cee:	fbb6 f3f1 	udiv	r3, r6, r1
   83cf2:	fb01 6113 	mls	r1, r1, r3, r6
   83cf6:	fb00 f003 	mul.w	r0, r0, r3
   83cfa:	b2ad      	uxth	r5, r5
   83cfc:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83d00:	4288      	cmp	r0, r1
   83d02:	d908      	bls.n	83d16 <__udivdi3+0x86>
   83d04:	1909      	adds	r1, r1, r4
   83d06:	f103 36ff 	add.w	r6, r3, #4294967295
   83d0a:	f080 80e9 	bcs.w	83ee0 <__udivdi3+0x250>
   83d0e:	4288      	cmp	r0, r1
   83d10:	f240 80e6 	bls.w	83ee0 <__udivdi3+0x250>
   83d14:	3b02      	subs	r3, #2
   83d16:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83d1a:	2300      	movs	r3, #0
   83d1c:	4610      	mov	r0, r2
   83d1e:	4619      	mov	r1, r3
   83d20:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d24:	4770      	bx	lr
   83d26:	428b      	cmp	r3, r1
   83d28:	d84c      	bhi.n	83dc4 <__udivdi3+0x134>
   83d2a:	fab3 f683 	clz	r6, r3
   83d2e:	2e00      	cmp	r6, #0
   83d30:	d14f      	bne.n	83dd2 <__udivdi3+0x142>
   83d32:	428b      	cmp	r3, r1
   83d34:	d302      	bcc.n	83d3c <__udivdi3+0xac>
   83d36:	4282      	cmp	r2, r0
   83d38:	f200 80dd 	bhi.w	83ef6 <__udivdi3+0x266>
   83d3c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d40:	2300      	movs	r3, #0
   83d42:	2201      	movs	r2, #1
   83d44:	4610      	mov	r0, r2
   83d46:	4619      	mov	r1, r3
   83d48:	4770      	bx	lr
   83d4a:	b912      	cbnz	r2, 83d52 <__udivdi3+0xc2>
   83d4c:	2401      	movs	r4, #1
   83d4e:	fbb4 f4f2 	udiv	r4, r4, r2
   83d52:	fab4 f284 	clz	r2, r4
   83d56:	2a00      	cmp	r2, #0
   83d58:	f040 8082 	bne.w	83e60 <__udivdi3+0x1d0>
   83d5c:	1b09      	subs	r1, r1, r4
   83d5e:	0c26      	lsrs	r6, r4, #16
   83d60:	b2a7      	uxth	r7, r4
   83d62:	2301      	movs	r3, #1
   83d64:	fbb1 f0f6 	udiv	r0, r1, r6
   83d68:	fb06 1110 	mls	r1, r6, r0, r1
   83d6c:	fb07 f200 	mul.w	r2, r7, r0
   83d70:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83d74:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83d78:	428a      	cmp	r2, r1
   83d7a:	d907      	bls.n	83d8c <__udivdi3+0xfc>
   83d7c:	1909      	adds	r1, r1, r4
   83d7e:	f100 3cff 	add.w	ip, r0, #4294967295
   83d82:	d202      	bcs.n	83d8a <__udivdi3+0xfa>
   83d84:	428a      	cmp	r2, r1
   83d86:	f200 80c8 	bhi.w	83f1a <__udivdi3+0x28a>
   83d8a:	4660      	mov	r0, ip
   83d8c:	1a89      	subs	r1, r1, r2
   83d8e:	fbb1 f2f6 	udiv	r2, r1, r6
   83d92:	fb06 1112 	mls	r1, r6, r2, r1
   83d96:	fb07 f702 	mul.w	r7, r7, r2
   83d9a:	b2ad      	uxth	r5, r5
   83d9c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83da0:	42af      	cmp	r7, r5
   83da2:	d908      	bls.n	83db6 <__udivdi3+0x126>
   83da4:	192c      	adds	r4, r5, r4
   83da6:	f102 31ff 	add.w	r1, r2, #4294967295
   83daa:	f080 809b 	bcs.w	83ee4 <__udivdi3+0x254>
   83dae:	42a7      	cmp	r7, r4
   83db0:	f240 8098 	bls.w	83ee4 <__udivdi3+0x254>
   83db4:	3a02      	subs	r2, #2
   83db6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83dba:	4610      	mov	r0, r2
   83dbc:	4619      	mov	r1, r3
   83dbe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83dc2:	4770      	bx	lr
   83dc4:	2300      	movs	r3, #0
   83dc6:	461a      	mov	r2, r3
   83dc8:	4610      	mov	r0, r2
   83dca:	4619      	mov	r1, r3
   83dcc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83dd0:	4770      	bx	lr
   83dd2:	f1c6 0520 	rsb	r5, r6, #32
   83dd6:	fa22 f705 	lsr.w	r7, r2, r5
   83dda:	fa03 f406 	lsl.w	r4, r3, r6
   83dde:	fa21 f305 	lsr.w	r3, r1, r5
   83de2:	fa01 fb06 	lsl.w	fp, r1, r6
   83de6:	fa20 f505 	lsr.w	r5, r0, r5
   83dea:	433c      	orrs	r4, r7
   83dec:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83df0:	fbb3 fcf8 	udiv	ip, r3, r8
   83df4:	fb08 331c 	mls	r3, r8, ip, r3
   83df8:	fa1f f984 	uxth.w	r9, r4
   83dfc:	fb09 fa0c 	mul.w	sl, r9, ip
   83e00:	ea45 0b0b 	orr.w	fp, r5, fp
   83e04:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83e08:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83e0c:	459a      	cmp	sl, r3
   83e0e:	fa02 f206 	lsl.w	r2, r2, r6
   83e12:	d904      	bls.n	83e1e <__udivdi3+0x18e>
   83e14:	191b      	adds	r3, r3, r4
   83e16:	f10c 35ff 	add.w	r5, ip, #4294967295
   83e1a:	d36f      	bcc.n	83efc <__udivdi3+0x26c>
   83e1c:	46ac      	mov	ip, r5
   83e1e:	ebca 0303 	rsb	r3, sl, r3
   83e22:	fbb3 f5f8 	udiv	r5, r3, r8
   83e26:	fb08 3315 	mls	r3, r8, r5, r3
   83e2a:	fb09 f905 	mul.w	r9, r9, r5
   83e2e:	fa1f fb8b 	uxth.w	fp, fp
   83e32:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83e36:	45b9      	cmp	r9, r7
   83e38:	d904      	bls.n	83e44 <__udivdi3+0x1b4>
   83e3a:	193f      	adds	r7, r7, r4
   83e3c:	f105 33ff 	add.w	r3, r5, #4294967295
   83e40:	d362      	bcc.n	83f08 <__udivdi3+0x278>
   83e42:	461d      	mov	r5, r3
   83e44:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83e48:	fbac 2302 	umull	r2, r3, ip, r2
   83e4c:	ebc9 0707 	rsb	r7, r9, r7
   83e50:	429f      	cmp	r7, r3
   83e52:	f04f 0500 	mov.w	r5, #0
   83e56:	d34a      	bcc.n	83eee <__udivdi3+0x25e>
   83e58:	d046      	beq.n	83ee8 <__udivdi3+0x258>
   83e5a:	4662      	mov	r2, ip
   83e5c:	462b      	mov	r3, r5
   83e5e:	e75d      	b.n	83d1c <__udivdi3+0x8c>
   83e60:	4094      	lsls	r4, r2
   83e62:	f1c2 0920 	rsb	r9, r2, #32
   83e66:	fa21 fc09 	lsr.w	ip, r1, r9
   83e6a:	4091      	lsls	r1, r2
   83e6c:	fa20 f909 	lsr.w	r9, r0, r9
   83e70:	0c26      	lsrs	r6, r4, #16
   83e72:	fbbc f8f6 	udiv	r8, ip, r6
   83e76:	fb06 cc18 	mls	ip, r6, r8, ip
   83e7a:	b2a7      	uxth	r7, r4
   83e7c:	fb07 f308 	mul.w	r3, r7, r8
   83e80:	ea49 0901 	orr.w	r9, r9, r1
   83e84:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83e88:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83e8c:	4563      	cmp	r3, ip
   83e8e:	fa00 f502 	lsl.w	r5, r0, r2
   83e92:	d909      	bls.n	83ea8 <__udivdi3+0x218>
   83e94:	eb1c 0c04 	adds.w	ip, ip, r4
   83e98:	f108 32ff 	add.w	r2, r8, #4294967295
   83e9c:	d23b      	bcs.n	83f16 <__udivdi3+0x286>
   83e9e:	4563      	cmp	r3, ip
   83ea0:	d939      	bls.n	83f16 <__udivdi3+0x286>
   83ea2:	f1a8 0802 	sub.w	r8, r8, #2
   83ea6:	44a4      	add	ip, r4
   83ea8:	ebc3 0c0c 	rsb	ip, r3, ip
   83eac:	fbbc f3f6 	udiv	r3, ip, r6
   83eb0:	fb06 c113 	mls	r1, r6, r3, ip
   83eb4:	fb07 f203 	mul.w	r2, r7, r3
   83eb8:	fa1f f989 	uxth.w	r9, r9
   83ebc:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83ec0:	428a      	cmp	r2, r1
   83ec2:	d907      	bls.n	83ed4 <__udivdi3+0x244>
   83ec4:	1909      	adds	r1, r1, r4
   83ec6:	f103 30ff 	add.w	r0, r3, #4294967295
   83eca:	d222      	bcs.n	83f12 <__udivdi3+0x282>
   83ecc:	428a      	cmp	r2, r1
   83ece:	d920      	bls.n	83f12 <__udivdi3+0x282>
   83ed0:	3b02      	subs	r3, #2
   83ed2:	4421      	add	r1, r4
   83ed4:	1a89      	subs	r1, r1, r2
   83ed6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83eda:	e743      	b.n	83d64 <__udivdi3+0xd4>
   83edc:	463a      	mov	r2, r7
   83ede:	e705      	b.n	83cec <__udivdi3+0x5c>
   83ee0:	4633      	mov	r3, r6
   83ee2:	e718      	b.n	83d16 <__udivdi3+0x86>
   83ee4:	460a      	mov	r2, r1
   83ee6:	e766      	b.n	83db6 <__udivdi3+0x126>
   83ee8:	40b0      	lsls	r0, r6
   83eea:	4290      	cmp	r0, r2
   83eec:	d2b5      	bcs.n	83e5a <__udivdi3+0x1ca>
   83eee:	f10c 32ff 	add.w	r2, ip, #4294967295
   83ef2:	2300      	movs	r3, #0
   83ef4:	e712      	b.n	83d1c <__udivdi3+0x8c>
   83ef6:	4633      	mov	r3, r6
   83ef8:	4632      	mov	r2, r6
   83efa:	e70f      	b.n	83d1c <__udivdi3+0x8c>
   83efc:	459a      	cmp	sl, r3
   83efe:	d98d      	bls.n	83e1c <__udivdi3+0x18c>
   83f00:	f1ac 0c02 	sub.w	ip, ip, #2
   83f04:	4423      	add	r3, r4
   83f06:	e78a      	b.n	83e1e <__udivdi3+0x18e>
   83f08:	45b9      	cmp	r9, r7
   83f0a:	d99a      	bls.n	83e42 <__udivdi3+0x1b2>
   83f0c:	3d02      	subs	r5, #2
   83f0e:	4427      	add	r7, r4
   83f10:	e798      	b.n	83e44 <__udivdi3+0x1b4>
   83f12:	4603      	mov	r3, r0
   83f14:	e7de      	b.n	83ed4 <__udivdi3+0x244>
   83f16:	4690      	mov	r8, r2
   83f18:	e7c6      	b.n	83ea8 <__udivdi3+0x218>
   83f1a:	3802      	subs	r0, #2
   83f1c:	4421      	add	r1, r4
   83f1e:	e735      	b.n	83d8c <__udivdi3+0xfc>

00083f20 <LED_DESCRIPTOR>:
   83f20:	003b 0000 0000 0000 0055 0000 0000 0000     ;.......U.......
   83f30:	0056 0000 0000 0000 0057 0000 0001 0000     V.......W.......

00083f40 <test_pattern>:
   83f40:	4f57 4f48 004f 0000 7453 7261 6174 0072     WOHOO...Startar.
   83f50:	6154 2072 6d65 746f 253a 0a63 000d 0000     Tar emot:%c.....
   83f60:	6144 6174 4320 726f 6572 7463 0d0a 0000     Data Correct....
   83f70:	6144 6174 6920 636e 726f 6572 7463 0d0a     Data incorrect..
   83f80:	0000 0000 0043 0000                         ....C...

00083f88 <_global_impure_ptr>:
   83f88:	0140 2007 3130 3332 3534 3736 3938 4241     @.. 0123456789AB
   83f98:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   83fa8:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   83fb8:	296c 0000                                   l)..

00083fbc <zeroes.6721>:
   83fbc:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00083fcc <blanks.6720>:
   83fcc:	2020 2020 2020 2020 2020 2020 2020 2020                     

00083fdc <_init>:
   83fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83fde:	bf00      	nop
   83fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83fe2:	bc08      	pop	{r3}
   83fe4:	469e      	mov	lr, r3
   83fe6:	4770      	bx	lr

00083fe8 <__init_array_start>:
   83fe8:	00081fb5 	.word	0x00081fb5

00083fec <__frame_dummy_init_array_entry>:
   83fec:	00080119                                ....

00083ff0 <_fini>:
   83ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83ff2:	bf00      	nop
   83ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83ff6:	bc08      	pop	{r3}
   83ff8:	469e      	mov	lr, r3
   83ffa:	4770      	bx	lr

00083ffc <__fini_array_start>:
   83ffc:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00083f84 00000000 00000000 00000000     .?..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00083725                                %7..
