
TWITest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ddc  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083ddc  00083ddc  0000bddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000099c  20070000  00083de4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000174  2007099c  00084780  0001099c  2**2
                  ALLOC
  4 .stack        00002000  20070b10  000848f4  0001099c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000c9b2  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000252e  00000000  00000000  0001d3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004a0c  00000000  00000000  0001f900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a68  00000000  00000000  0002430c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000950  00000000  00000000  00024d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001890f  00000000  00000000  000256c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ef82  00000000  00000000  0003dfd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000635c0  00000000  00000000  0004cf55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002084  00000000  00000000  000b0518  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b10 	.word	0x20072b10
   80004:	0008089d 	.word	0x0008089d
   80008:	00080899 	.word	0x00080899
   8000c:	00080899 	.word	0x00080899
   80010:	00080899 	.word	0x00080899
   80014:	00080899 	.word	0x00080899
   80018:	00080899 	.word	0x00080899
	...
   8002c:	00080899 	.word	0x00080899
   80030:	00080899 	.word	0x00080899
   80034:	00000000 	.word	0x00000000
   80038:	00080899 	.word	0x00080899
   8003c:	00080899 	.word	0x00080899
   80040:	00080899 	.word	0x00080899
   80044:	00080899 	.word	0x00080899
   80048:	00080899 	.word	0x00080899
   8004c:	00080899 	.word	0x00080899
   80050:	00080899 	.word	0x00080899
   80054:	00080899 	.word	0x00080899
   80058:	00080899 	.word	0x00080899
   8005c:	00080899 	.word	0x00080899
   80060:	00080899 	.word	0x00080899
   80064:	00080899 	.word	0x00080899
   80068:	00000000 	.word	0x00000000
   8006c:	000805e5 	.word	0x000805e5
   80070:	000805f9 	.word	0x000805f9
   80074:	0008060d 	.word	0x0008060d
   80078:	00080621 	.word	0x00080621
	...
   80084:	00080ab9 	.word	0x00080ab9
   80088:	00080899 	.word	0x00080899
   8008c:	00080899 	.word	0x00080899
   80090:	00080899 	.word	0x00080899
   80094:	00080899 	.word	0x00080899
   80098:	00080899 	.word	0x00080899
   8009c:	00080899 	.word	0x00080899
   800a0:	00080899 	.word	0x00080899
   800a4:	00000000 	.word	0x00000000
   800a8:	00080899 	.word	0x00080899
   800ac:	00080899 	.word	0x00080899
   800b0:	00080899 	.word	0x00080899
   800b4:	00080899 	.word	0x00080899
   800b8:	00080899 	.word	0x00080899
   800bc:	00080899 	.word	0x00080899
   800c0:	00080899 	.word	0x00080899
   800c4:	00080899 	.word	0x00080899
   800c8:	00080899 	.word	0x00080899
   800cc:	00080899 	.word	0x00080899
   800d0:	00080899 	.word	0x00080899
   800d4:	00080899 	.word	0x00080899
   800d8:	00080899 	.word	0x00080899
   800dc:	00080899 	.word	0x00080899
   800e0:	00080899 	.word	0x00080899
   800e4:	00080899 	.word	0x00080899
   800e8:	00080899 	.word	0x00080899
   800ec:	00080899 	.word	0x00080899
   800f0:	00080899 	.word	0x00080899

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007099c 	.word	0x2007099c
   80110:	00000000 	.word	0x00000000
   80114:	00083de4 	.word	0x00083de4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083de4 	.word	0x00083de4
   8013c:	200709a0 	.word	0x200709a0
   80140:	00083de4 	.word	0x00083de4
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80150:	2000      	movs	r0, #0
   80152:	213e      	movs	r1, #62	; 0x3e
   80154:	4b0d      	ldr	r3, [pc, #52]	; (8018c <sysclk_init+0x44>)
   80156:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80158:	4c0d      	ldr	r4, [pc, #52]	; (80190 <sysclk_init+0x48>)
   8015a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015c:	2800      	cmp	r0, #0
   8015e:	d0fc      	beq.n	8015a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80160:	4b0c      	ldr	r3, [pc, #48]	; (80194 <sysclk_init+0x4c>)
   80162:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80164:	4a0c      	ldr	r2, [pc, #48]	; (80198 <sysclk_init+0x50>)
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80168:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8016a:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016e:	2800      	cmp	r0, #0
   80170:	d0fc      	beq.n	8016c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80172:	2010      	movs	r0, #16
   80174:	4b0b      	ldr	r3, [pc, #44]	; (801a4 <sysclk_init+0x5c>)
   80176:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80178:	4b0b      	ldr	r3, [pc, #44]	; (801a8 <sysclk_init+0x60>)
   8017a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017c:	4801      	ldr	r0, [pc, #4]	; (80184 <sysclk_init+0x3c>)
   8017e:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   80180:	4798      	blx	r3
   80182:	bd10      	pop	{r4, pc}
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700a5 	.word	0x200700a5
   8018c:	00080699 	.word	0x00080699
   80190:	000806ed 	.word	0x000806ed
   80194:	000806fd 	.word	0x000806fd
   80198:	200d3f01 	.word	0x200d3f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	0008070d 	.word	0x0008070d
   801a4:	00080635 	.word	0x00080635
   801a8:	0008094d 	.word	0x0008094d

000801ac <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   801ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801b0:	b083      	sub	sp, #12
   801b2:	4605      	mov	r5, r0
	while (len) {
   801b4:	4690      	mov	r8, r2
   801b6:	2a00      	cmp	r2, #0
   801b8:	d047      	beq.n	8024a <usart_serial_read_packet+0x9e>
   801ba:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801bc:	4f25      	ldr	r7, [pc, #148]	; (80254 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   801be:	4c26      	ldr	r4, [pc, #152]	; (80258 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801c0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8026c <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   801c4:	f8df b094 	ldr.w	fp, [pc, #148]	; 8025c <usart_serial_read_packet+0xb0>
   801c8:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   801cc:	2300      	movs	r3, #0
   801ce:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801d0:	4b22      	ldr	r3, [pc, #136]	; (8025c <usart_serial_read_packet+0xb0>)
   801d2:	429d      	cmp	r5, r3
   801d4:	d106      	bne.n	801e4 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   801d6:	4658      	mov	r0, fp
   801d8:	4649      	mov	r1, r9
   801da:	4b21      	ldr	r3, [pc, #132]	; (80260 <usart_serial_read_packet+0xb4>)
   801dc:	4798      	blx	r3
   801de:	2800      	cmp	r0, #0
   801e0:	d1f9      	bne.n	801d6 <usart_serial_read_packet+0x2a>
   801e2:	e019      	b.n	80218 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801e4:	4b1f      	ldr	r3, [pc, #124]	; (80264 <usart_serial_read_packet+0xb8>)
   801e6:	429d      	cmp	r5, r3
   801e8:	d109      	bne.n	801fe <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   801ea:	4699      	mov	r9, r3
   801ec:	4648      	mov	r0, r9
   801ee:	a901      	add	r1, sp, #4
   801f0:	47a0      	blx	r4
   801f2:	2800      	cmp	r0, #0
   801f4:	d1fa      	bne.n	801ec <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   801f6:	9b01      	ldr	r3, [sp, #4]
   801f8:	f806 3c01 	strb.w	r3, [r6, #-1]
   801fc:	e017      	b.n	8022e <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   801fe:	4b1a      	ldr	r3, [pc, #104]	; (80268 <usart_serial_read_packet+0xbc>)
   80200:	429d      	cmp	r5, r3
   80202:	d109      	bne.n	80218 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80204:	4699      	mov	r9, r3
   80206:	4648      	mov	r0, r9
   80208:	a901      	add	r1, sp, #4
   8020a:	47a0      	blx	r4
   8020c:	2800      	cmp	r0, #0
   8020e:	d1fa      	bne.n	80206 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80210:	9b01      	ldr	r3, [sp, #4]
   80212:	f806 3c01 	strb.w	r3, [r6, #-1]
   80216:	e014      	b.n	80242 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80218:	4555      	cmp	r5, sl
   8021a:	d108      	bne.n	8022e <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   8021c:	4650      	mov	r0, sl
   8021e:	a901      	add	r1, sp, #4
   80220:	47a0      	blx	r4
   80222:	2800      	cmp	r0, #0
   80224:	d1fa      	bne.n	8021c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80226:	9b01      	ldr	r3, [sp, #4]
   80228:	f806 3c01 	strb.w	r3, [r6, #-1]
   8022c:	e009      	b.n	80242 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8022e:	42bd      	cmp	r5, r7
   80230:	d107      	bne.n	80242 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80232:	4638      	mov	r0, r7
   80234:	a901      	add	r1, sp, #4
   80236:	47a0      	blx	r4
   80238:	2800      	cmp	r0, #0
   8023a:	d1fa      	bne.n	80232 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   8023c:	9b01      	ldr	r3, [sp, #4]
   8023e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80242:	3601      	adds	r6, #1
   80244:	f1b8 0801 	subs.w	r8, r8, #1
   80248:	d1be      	bne.n	801c8 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8024a:	2000      	movs	r0, #0
   8024c:	b003      	add	sp, #12
   8024e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80252:	bf00      	nop
   80254:	400a4000 	.word	0x400a4000
   80258:	00080881 	.word	0x00080881
   8025c:	400e0800 	.word	0x400e0800
   80260:	00080859 	.word	0x00080859
   80264:	40098000 	.word	0x40098000
   80268:	4009c000 	.word	0x4009c000
   8026c:	400a0000 	.word	0x400a0000

00080270 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80274:	460c      	mov	r4, r1
   80276:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80278:	b960      	cbnz	r0, 80294 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8027a:	2a00      	cmp	r2, #0
   8027c:	dd0e      	ble.n	8029c <_read+0x2c>
   8027e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80280:	4e09      	ldr	r6, [pc, #36]	; (802a8 <_read+0x38>)
   80282:	4d0a      	ldr	r5, [pc, #40]	; (802ac <_read+0x3c>)
   80284:	6830      	ldr	r0, [r6, #0]
   80286:	4621      	mov	r1, r4
   80288:	682b      	ldr	r3, [r5, #0]
   8028a:	4798      	blx	r3
		ptr++;
   8028c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8028e:	42bc      	cmp	r4, r7
   80290:	d1f8      	bne.n	80284 <_read+0x14>
   80292:	e006      	b.n	802a2 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80294:	f04f 30ff 	mov.w	r0, #4294967295
   80298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   8029c:	2000      	movs	r0, #0
   8029e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   802a2:	4640      	mov	r0, r8
	}
	return nChars;
}
   802a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802a8:	20070b08 	.word	0x20070b08
   802ac:	20070b00 	.word	0x20070b00

000802b0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   802b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802b4:	460e      	mov	r6, r1
   802b6:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   802b8:	3801      	subs	r0, #1
   802ba:	2802      	cmp	r0, #2
   802bc:	d80f      	bhi.n	802de <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   802be:	b192      	cbz	r2, 802e6 <_write+0x36>
   802c0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802c2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80300 <_write+0x50>
   802c6:	4f0d      	ldr	r7, [pc, #52]	; (802fc <_write+0x4c>)
   802c8:	f8d8 0000 	ldr.w	r0, [r8]
   802cc:	5d31      	ldrb	r1, [r6, r4]
   802ce:	683b      	ldr	r3, [r7, #0]
   802d0:	4798      	blx	r3
   802d2:	2800      	cmp	r0, #0
   802d4:	db0a      	blt.n	802ec <_write+0x3c>
			return -1;
		}
		++nChars;
   802d6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802d8:	42a5      	cmp	r5, r4
   802da:	d1f5      	bne.n	802c8 <_write+0x18>
   802dc:	e00a      	b.n	802f4 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   802de:	f04f 30ff 	mov.w	r0, #4294967295
   802e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   802e6:	2000      	movs	r0, #0
   802e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   802ec:	f04f 30ff 	mov.w	r0, #4294967295
   802f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   802f4:	4620      	mov	r0, r4
	}
	return nChars;
}
   802f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802fa:	bf00      	nop
   802fc:	20070b04 	.word	0x20070b04
   80300:	20070b08 	.word	0x20070b08

00080304 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80304:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80306:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8030a:	4b12      	ldr	r3, [pc, #72]	; (80354 <board_init+0x50>)
   8030c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8030e:	200b      	movs	r0, #11
   80310:	4c11      	ldr	r4, [pc, #68]	; (80358 <board_init+0x54>)
   80312:	47a0      	blx	r4
   80314:	200c      	movs	r0, #12
   80316:	47a0      	blx	r4
   80318:	200d      	movs	r0, #13
   8031a:	47a0      	blx	r4
   8031c:	200e      	movs	r0, #14
   8031e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80320:	203b      	movs	r0, #59	; 0x3b
   80322:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80326:	4c0d      	ldr	r4, [pc, #52]	; (8035c <board_init+0x58>)
   80328:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8032a:	2055      	movs	r0, #85	; 0x55
   8032c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80330:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80332:	2056      	movs	r0, #86	; 0x56
   80334:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80338:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8033a:	2068      	movs	r0, #104	; 0x68
   8033c:	4908      	ldr	r1, [pc, #32]	; (80360 <board_init+0x5c>)
   8033e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80340:	205c      	movs	r0, #92	; 0x5c
   80342:	4908      	ldr	r1, [pc, #32]	; (80364 <board_init+0x60>)
   80344:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80346:	4808      	ldr	r0, [pc, #32]	; (80368 <board_init+0x64>)
   80348:	f44f 7140 	mov.w	r1, #768	; 0x300
   8034c:	4a07      	ldr	r2, [pc, #28]	; (8036c <board_init+0x68>)
   8034e:	4b08      	ldr	r3, [pc, #32]	; (80370 <board_init+0x6c>)
   80350:	4798      	blx	r3
   80352:	bd10      	pop	{r4, pc}
   80354:	400e1a50 	.word	0x400e1a50
   80358:	0008071d 	.word	0x0008071d
   8035c:	00080419 	.word	0x00080419
   80360:	28000079 	.word	0x28000079
   80364:	28000001 	.word	0x28000001
   80368:	400e0e00 	.word	0x400e0e00
   8036c:	08000001 	.word	0x08000001
   80370:	000804ed 	.word	0x000804ed

00080374 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80374:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80376:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8037a:	d016      	beq.n	803aa <pio_set_peripheral+0x36>
   8037c:	d804      	bhi.n	80388 <pio_set_peripheral+0x14>
   8037e:	b1c1      	cbz	r1, 803b2 <pio_set_peripheral+0x3e>
   80380:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80384:	d00a      	beq.n	8039c <pio_set_peripheral+0x28>
   80386:	e013      	b.n	803b0 <pio_set_peripheral+0x3c>
   80388:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8038c:	d011      	beq.n	803b2 <pio_set_peripheral+0x3e>
   8038e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80392:	d00e      	beq.n	803b2 <pio_set_peripheral+0x3e>
   80394:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80398:	d10a      	bne.n	803b0 <pio_set_peripheral+0x3c>
   8039a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8039c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8039e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   803a0:	400b      	ands	r3, r1
   803a2:	ea23 0302 	bic.w	r3, r3, r2
   803a6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   803a8:	e002      	b.n	803b0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   803aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   803ac:	4313      	orrs	r3, r2
   803ae:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   803b0:	6042      	str	r2, [r0, #4]
   803b2:	4770      	bx	lr

000803b4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803b4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803b6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   803ba:	bf14      	ite	ne
   803bc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803be:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   803c0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   803c4:	bf14      	ite	ne
   803c6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   803c8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   803ca:	f012 0f02 	tst.w	r2, #2
   803ce:	d002      	beq.n	803d6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   803d0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   803d4:	e004      	b.n	803e0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   803d6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   803da:	bf18      	it	ne
   803dc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   803e0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   803e2:	6001      	str	r1, [r0, #0]
   803e4:	4770      	bx	lr
   803e6:	bf00      	nop

000803e8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   803e8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803ea:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803ec:	9c01      	ldr	r4, [sp, #4]
   803ee:	b10c      	cbz	r4, 803f4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   803f0:	6641      	str	r1, [r0, #100]	; 0x64
   803f2:	e000      	b.n	803f6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803f4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   803f6:	b10b      	cbz	r3, 803fc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   803f8:	6501      	str	r1, [r0, #80]	; 0x50
   803fa:	e000      	b.n	803fe <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   803fc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   803fe:	b10a      	cbz	r2, 80404 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80400:	6301      	str	r1, [r0, #48]	; 0x30
   80402:	e000      	b.n	80406 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80404:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80406:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80408:	6001      	str	r1, [r0, #0]
}
   8040a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8040e:	4770      	bx	lr

00080410 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80410:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80412:	4770      	bx	lr

00080414 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80414:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80416:	4770      	bx	lr

00080418 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80418:	b570      	push	{r4, r5, r6, lr}
   8041a:	b082      	sub	sp, #8
   8041c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8041e:	0944      	lsrs	r4, r0, #5
   80420:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80424:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80428:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8042a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8042e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80432:	d030      	beq.n	80496 <pio_configure_pin+0x7e>
   80434:	d806      	bhi.n	80444 <pio_configure_pin+0x2c>
   80436:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8043a:	d00a      	beq.n	80452 <pio_configure_pin+0x3a>
   8043c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80440:	d018      	beq.n	80474 <pio_configure_pin+0x5c>
   80442:	e049      	b.n	804d8 <pio_configure_pin+0xc0>
   80444:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80448:	d030      	beq.n	804ac <pio_configure_pin+0x94>
   8044a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8044e:	d02d      	beq.n	804ac <pio_configure_pin+0x94>
   80450:	e042      	b.n	804d8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80452:	f000 001f 	and.w	r0, r0, #31
   80456:	2401      	movs	r4, #1
   80458:	4084      	lsls	r4, r0
   8045a:	4630      	mov	r0, r6
   8045c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80460:	4622      	mov	r2, r4
   80462:	4b1f      	ldr	r3, [pc, #124]	; (804e0 <pio_configure_pin+0xc8>)
   80464:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80466:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8046a:	bf14      	ite	ne
   8046c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8046e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80470:	2001      	movs	r0, #1
   80472:	e032      	b.n	804da <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80474:	f000 001f 	and.w	r0, r0, #31
   80478:	2401      	movs	r4, #1
   8047a:	4084      	lsls	r4, r0
   8047c:	4630      	mov	r0, r6
   8047e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80482:	4622      	mov	r2, r4
   80484:	4b16      	ldr	r3, [pc, #88]	; (804e0 <pio_configure_pin+0xc8>)
   80486:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80488:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8048c:	bf14      	ite	ne
   8048e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80490:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80492:	2001      	movs	r0, #1
   80494:	e021      	b.n	804da <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80496:	f000 011f 	and.w	r1, r0, #31
   8049a:	2401      	movs	r4, #1
   8049c:	4630      	mov	r0, r6
   8049e:	fa04 f101 	lsl.w	r1, r4, r1
   804a2:	462a      	mov	r2, r5
   804a4:	4b0f      	ldr	r3, [pc, #60]	; (804e4 <pio_configure_pin+0xcc>)
   804a6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   804a8:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   804aa:	e016      	b.n	804da <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804ac:	f000 011f 	and.w	r1, r0, #31
   804b0:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   804b2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804b6:	ea05 0304 	and.w	r3, r5, r4
   804ba:	9300      	str	r3, [sp, #0]
   804bc:	4630      	mov	r0, r6
   804be:	fa04 f101 	lsl.w	r1, r4, r1
   804c2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804c6:	bf14      	ite	ne
   804c8:	2200      	movne	r2, #0
   804ca:	2201      	moveq	r2, #1
   804cc:	f3c5 0380 	ubfx	r3, r5, #2, #1
   804d0:	4d05      	ldr	r5, [pc, #20]	; (804e8 <pio_configure_pin+0xd0>)
   804d2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   804d4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804d6:	e000      	b.n	804da <pio_configure_pin+0xc2>

	default:
		return 0;
   804d8:	2000      	movs	r0, #0
	}

	return 1;
}
   804da:	b002      	add	sp, #8
   804dc:	bd70      	pop	{r4, r5, r6, pc}
   804de:	bf00      	nop
   804e0:	00080375 	.word	0x00080375
   804e4:	000803b5 	.word	0x000803b5
   804e8:	000803e9 	.word	0x000803e9

000804ec <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   804ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   804ee:	b083      	sub	sp, #12
   804f0:	4607      	mov	r7, r0
   804f2:	460e      	mov	r6, r1
   804f4:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   804f6:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   804fa:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   804fe:	d026      	beq.n	8054e <pio_configure_pin_group+0x62>
   80500:	d806      	bhi.n	80510 <pio_configure_pin_group+0x24>
   80502:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80506:	d00a      	beq.n	8051e <pio_configure_pin_group+0x32>
   80508:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8050c:	d013      	beq.n	80536 <pio_configure_pin_group+0x4a>
   8050e:	e034      	b.n	8057a <pio_configure_pin_group+0x8e>
   80510:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80514:	d01f      	beq.n	80556 <pio_configure_pin_group+0x6a>
   80516:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8051a:	d01c      	beq.n	80556 <pio_configure_pin_group+0x6a>
   8051c:	e02d      	b.n	8057a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8051e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80522:	4632      	mov	r2, r6
   80524:	4b16      	ldr	r3, [pc, #88]	; (80580 <pio_configure_pin_group+0x94>)
   80526:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80528:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8052c:	bf14      	ite	ne
   8052e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80530:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80532:	2001      	movs	r0, #1
   80534:	e022      	b.n	8057c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80536:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8053a:	4632      	mov	r2, r6
   8053c:	4b10      	ldr	r3, [pc, #64]	; (80580 <pio_configure_pin_group+0x94>)
   8053e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80540:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80544:	bf14      	ite	ne
   80546:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80548:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8054a:	2001      	movs	r0, #1
   8054c:	e016      	b.n	8057c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8054e:	4b0d      	ldr	r3, [pc, #52]	; (80584 <pio_configure_pin_group+0x98>)
   80550:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80552:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80554:	e012      	b.n	8057c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80556:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8055a:	f005 0301 	and.w	r3, r5, #1
   8055e:	9300      	str	r3, [sp, #0]
   80560:	4638      	mov	r0, r7
   80562:	4631      	mov	r1, r6
   80564:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80568:	bf14      	ite	ne
   8056a:	2200      	movne	r2, #0
   8056c:	2201      	moveq	r2, #1
   8056e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80572:	4c05      	ldr	r4, [pc, #20]	; (80588 <pio_configure_pin_group+0x9c>)
   80574:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80576:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80578:	e000      	b.n	8057c <pio_configure_pin_group+0x90>

	default:
		return 0;
   8057a:	2000      	movs	r0, #0
	}

	return 1;
}
   8057c:	b003      	add	sp, #12
   8057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80580:	00080375 	.word	0x00080375
   80584:	000803b5 	.word	0x000803b5
   80588:	000803e9 	.word	0x000803e9

0008058c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8058c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80590:	4604      	mov	r4, r0
   80592:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80594:	4b10      	ldr	r3, [pc, #64]	; (805d8 <pio_handler_process+0x4c>)
   80596:	4798      	blx	r3
   80598:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8059a:	4620      	mov	r0, r4
   8059c:	4b0f      	ldr	r3, [pc, #60]	; (805dc <pio_handler_process+0x50>)
   8059e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   805a0:	4005      	ands	r5, r0
   805a2:	d017      	beq.n	805d4 <pio_handler_process+0x48>
   805a4:	4f0e      	ldr	r7, [pc, #56]	; (805e0 <pio_handler_process+0x54>)
   805a6:	f107 040c 	add.w	r4, r7, #12
   805aa:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   805ac:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   805b0:	42b3      	cmp	r3, r6
   805b2:	d10a      	bne.n	805ca <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   805b4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   805b8:	4229      	tst	r1, r5
   805ba:	d006      	beq.n	805ca <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   805bc:	6823      	ldr	r3, [r4, #0]
   805be:	4630      	mov	r0, r6
   805c0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   805c2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   805c6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   805ca:	42bc      	cmp	r4, r7
   805cc:	d002      	beq.n	805d4 <pio_handler_process+0x48>
   805ce:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   805d0:	2d00      	cmp	r5, #0
   805d2:	d1eb      	bne.n	805ac <pio_handler_process+0x20>
   805d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805d8:	00080411 	.word	0x00080411
   805dc:	00080415 	.word	0x00080415
   805e0:	200709b8 	.word	0x200709b8

000805e4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   805e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   805e6:	4802      	ldr	r0, [pc, #8]	; (805f0 <PIOA_Handler+0xc>)
   805e8:	210b      	movs	r1, #11
   805ea:	4b02      	ldr	r3, [pc, #8]	; (805f4 <PIOA_Handler+0x10>)
   805ec:	4798      	blx	r3
   805ee:	bd08      	pop	{r3, pc}
   805f0:	400e0e00 	.word	0x400e0e00
   805f4:	0008058d 	.word	0x0008058d

000805f8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   805f8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   805fa:	4802      	ldr	r0, [pc, #8]	; (80604 <PIOB_Handler+0xc>)
   805fc:	210c      	movs	r1, #12
   805fe:	4b02      	ldr	r3, [pc, #8]	; (80608 <PIOB_Handler+0x10>)
   80600:	4798      	blx	r3
   80602:	bd08      	pop	{r3, pc}
   80604:	400e1000 	.word	0x400e1000
   80608:	0008058d 	.word	0x0008058d

0008060c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8060c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8060e:	4802      	ldr	r0, [pc, #8]	; (80618 <PIOC_Handler+0xc>)
   80610:	210d      	movs	r1, #13
   80612:	4b02      	ldr	r3, [pc, #8]	; (8061c <PIOC_Handler+0x10>)
   80614:	4798      	blx	r3
   80616:	bd08      	pop	{r3, pc}
   80618:	400e1200 	.word	0x400e1200
   8061c:	0008058d 	.word	0x0008058d

00080620 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80620:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80622:	4802      	ldr	r0, [pc, #8]	; (8062c <PIOD_Handler+0xc>)
   80624:	210e      	movs	r1, #14
   80626:	4b02      	ldr	r3, [pc, #8]	; (80630 <PIOD_Handler+0x10>)
   80628:	4798      	blx	r3
   8062a:	bd08      	pop	{r3, pc}
   8062c:	400e1400 	.word	0x400e1400
   80630:	0008058d 	.word	0x0008058d

00080634 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80634:	4b17      	ldr	r3, [pc, #92]	; (80694 <pmc_switch_mck_to_pllack+0x60>)
   80636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80638:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   8063c:	4310      	orrs	r0, r2
   8063e:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80642:	f013 0f08 	tst.w	r3, #8
   80646:	d109      	bne.n	8065c <pmc_switch_mck_to_pllack+0x28>
   80648:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8064c:	4911      	ldr	r1, [pc, #68]	; (80694 <pmc_switch_mck_to_pllack+0x60>)
   8064e:	e001      	b.n	80654 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80650:	3b01      	subs	r3, #1
   80652:	d019      	beq.n	80688 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80654:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80656:	f012 0f08 	tst.w	r2, #8
   8065a:	d0f9      	beq.n	80650 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8065c:	4b0d      	ldr	r3, [pc, #52]	; (80694 <pmc_switch_mck_to_pllack+0x60>)
   8065e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80660:	f022 0203 	bic.w	r2, r2, #3
   80664:	f042 0202 	orr.w	r2, r2, #2
   80668:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8066a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   8066c:	f010 0008 	ands.w	r0, r0, #8
   80670:	d10c      	bne.n	8068c <pmc_switch_mck_to_pllack+0x58>
   80672:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80676:	4907      	ldr	r1, [pc, #28]	; (80694 <pmc_switch_mck_to_pllack+0x60>)
   80678:	e001      	b.n	8067e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8067a:	3b01      	subs	r3, #1
   8067c:	d008      	beq.n	80690 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8067e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80680:	f012 0f08 	tst.w	r2, #8
   80684:	d0f9      	beq.n	8067a <pmc_switch_mck_to_pllack+0x46>
   80686:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80688:	2001      	movs	r0, #1
   8068a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8068c:	2000      	movs	r0, #0
   8068e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80690:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80692:	4770      	bx	lr
   80694:	400e0600 	.word	0x400e0600

00080698 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80698:	b138      	cbz	r0, 806aa <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8069a:	4911      	ldr	r1, [pc, #68]	; (806e0 <pmc_switch_mainck_to_xtal+0x48>)
   8069c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8069e:	4a11      	ldr	r2, [pc, #68]	; (806e4 <pmc_switch_mainck_to_xtal+0x4c>)
   806a0:	401a      	ands	r2, r3
   806a2:	4b11      	ldr	r3, [pc, #68]	; (806e8 <pmc_switch_mainck_to_xtal+0x50>)
   806a4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   806a6:	620b      	str	r3, [r1, #32]
   806a8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   806aa:	4a0d      	ldr	r2, [pc, #52]	; (806e0 <pmc_switch_mainck_to_xtal+0x48>)
   806ac:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   806ae:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   806b2:	f023 0303 	bic.w	r3, r3, #3
   806b6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   806ba:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   806be:	0209      	lsls	r1, r1, #8
   806c0:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   806c2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   806c4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   806c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806c8:	f013 0f01 	tst.w	r3, #1
   806cc:	d0fb      	beq.n	806c6 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   806ce:	4a04      	ldr	r2, [pc, #16]	; (806e0 <pmc_switch_mainck_to_xtal+0x48>)
   806d0:	6a13      	ldr	r3, [r2, #32]
   806d2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   806d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   806da:	6213      	str	r3, [r2, #32]
   806dc:	4770      	bx	lr
   806de:	bf00      	nop
   806e0:	400e0600 	.word	0x400e0600
   806e4:	fec8fffc 	.word	0xfec8fffc
   806e8:	01370002 	.word	0x01370002

000806ec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   806ec:	4b02      	ldr	r3, [pc, #8]	; (806f8 <pmc_osc_is_ready_mainck+0xc>)
   806ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   806f0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   806f4:	4770      	bx	lr
   806f6:	bf00      	nop
   806f8:	400e0600 	.word	0x400e0600

000806fc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   806fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80700:	4b01      	ldr	r3, [pc, #4]	; (80708 <pmc_disable_pllack+0xc>)
   80702:	629a      	str	r2, [r3, #40]	; 0x28
   80704:	4770      	bx	lr
   80706:	bf00      	nop
   80708:	400e0600 	.word	0x400e0600

0008070c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8070c:	4b02      	ldr	r3, [pc, #8]	; (80718 <pmc_is_locked_pllack+0xc>)
   8070e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80710:	f000 0002 	and.w	r0, r0, #2
   80714:	4770      	bx	lr
   80716:	bf00      	nop
   80718:	400e0600 	.word	0x400e0600

0008071c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8071c:	282c      	cmp	r0, #44	; 0x2c
   8071e:	d820      	bhi.n	80762 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80720:	281f      	cmp	r0, #31
   80722:	d80d      	bhi.n	80740 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80724:	4b12      	ldr	r3, [pc, #72]	; (80770 <pmc_enable_periph_clk+0x54>)
   80726:	699a      	ldr	r2, [r3, #24]
   80728:	2301      	movs	r3, #1
   8072a:	4083      	lsls	r3, r0
   8072c:	401a      	ands	r2, r3
   8072e:	4293      	cmp	r3, r2
   80730:	d019      	beq.n	80766 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80732:	2301      	movs	r3, #1
   80734:	fa03 f000 	lsl.w	r0, r3, r0
   80738:	4b0d      	ldr	r3, [pc, #52]	; (80770 <pmc_enable_periph_clk+0x54>)
   8073a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8073c:	2000      	movs	r0, #0
   8073e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80740:	4b0b      	ldr	r3, [pc, #44]	; (80770 <pmc_enable_periph_clk+0x54>)
   80742:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80746:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80748:	2301      	movs	r3, #1
   8074a:	4083      	lsls	r3, r0
   8074c:	401a      	ands	r2, r3
   8074e:	4293      	cmp	r3, r2
   80750:	d00b      	beq.n	8076a <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80752:	2301      	movs	r3, #1
   80754:	fa03 f000 	lsl.w	r0, r3, r0
   80758:	4b05      	ldr	r3, [pc, #20]	; (80770 <pmc_enable_periph_clk+0x54>)
   8075a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8075e:	2000      	movs	r0, #0
   80760:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80762:	2001      	movs	r0, #1
   80764:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80766:	2000      	movs	r0, #0
   80768:	4770      	bx	lr
   8076a:	2000      	movs	r0, #0
}
   8076c:	4770      	bx	lr
   8076e:	bf00      	nop
   80770:	400e0600 	.word	0x400e0600

00080774 <twi_enable_master_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80774:	2308      	movs	r3, #8
   80776:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80778:	2320      	movs	r3, #32
   8077a:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   8077c:	2304      	movs	r3, #4
   8077e:	6003      	str	r3, [r0, #0]
   80780:	4770      	bx	lr
   80782:	bf00      	nop

00080784 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80784:	4b0f      	ldr	r3, [pc, #60]	; (807c4 <twi_set_speed+0x40>)
   80786:	4299      	cmp	r1, r3
   80788:	d819      	bhi.n	807be <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8078a:	0049      	lsls	r1, r1, #1
   8078c:	fbb2 f2f1 	udiv	r2, r2, r1
   80790:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80792:	2aff      	cmp	r2, #255	; 0xff
   80794:	d907      	bls.n	807a6 <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   80796:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   80798:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8079a:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8079c:	2aff      	cmp	r2, #255	; 0xff
   8079e:	d903      	bls.n	807a8 <twi_set_speed+0x24>
   807a0:	2b07      	cmp	r3, #7
   807a2:	d1f9      	bne.n	80798 <twi_set_speed+0x14>
   807a4:	e000      	b.n	807a8 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   807a6:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   807a8:	0211      	lsls	r1, r2, #8
   807aa:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   807ac:	041b      	lsls	r3, r3, #16
   807ae:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   807b2:	430b      	orrs	r3, r1
   807b4:	b2d2      	uxtb	r2, r2
   807b6:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   807b8:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   807ba:	2000      	movs	r0, #0
   807bc:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   807be:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   807c0:	4770      	bx	lr
   807c2:	bf00      	nop
   807c4:	00061a80 	.word	0x00061a80

000807c8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   807c8:	b538      	push	{r3, r4, r5, lr}
   807ca:	4604      	mov	r4, r0
   807cc:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   807ce:	f04f 33ff 	mov.w	r3, #4294967295
   807d2:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   807d4:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   807d6:	2380      	movs	r3, #128	; 0x80
   807d8:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   807da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   807dc:	2308      	movs	r3, #8
   807de:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   807e0:	2320      	movs	r3, #32
   807e2:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   807e4:	2304      	movs	r3, #4
   807e6:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   807e8:	6849      	ldr	r1, [r1, #4]
   807ea:	682a      	ldr	r2, [r5, #0]
   807ec:	4b05      	ldr	r3, [pc, #20]	; (80804 <twi_master_init+0x3c>)
   807ee:	4798      	blx	r3
   807f0:	2801      	cmp	r0, #1
   807f2:	bf14      	ite	ne
   807f4:	2000      	movne	r0, #0
   807f6:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   807f8:	7a6b      	ldrb	r3, [r5, #9]
   807fa:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   807fc:	bf04      	itt	eq
   807fe:	2340      	moveq	r3, #64	; 0x40
   80800:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   80802:	bd38      	pop	{r3, r4, r5, pc}
   80804:	00080785 	.word	0x00080785

00080808 <twi_disable_slave_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_disable_slave_mode(Twi *p_twi)
{
	/* Set Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80808:	2320      	movs	r3, #32
   8080a:	6003      	str	r3, [r0, #0]
   8080c:	4770      	bx	lr
   8080e:	bf00      	nop

00080810 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80810:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80812:	23ac      	movs	r3, #172	; 0xac
   80814:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80816:	680a      	ldr	r2, [r1, #0]
   80818:	684b      	ldr	r3, [r1, #4]
   8081a:	fbb2 f3f3 	udiv	r3, r2, r3
   8081e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80820:	1e5c      	subs	r4, r3, #1
   80822:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80826:	4294      	cmp	r4, r2
   80828:	d80a      	bhi.n	80840 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8082a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8082c:	688b      	ldr	r3, [r1, #8]
   8082e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80830:	f240 2302 	movw	r3, #514	; 0x202
   80834:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80838:	2350      	movs	r3, #80	; 0x50
   8083a:	6003      	str	r3, [r0, #0]

	return 0;
   8083c:	2000      	movs	r0, #0
   8083e:	e000      	b.n	80842 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80840:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80842:	f85d 4b04 	ldr.w	r4, [sp], #4
   80846:	4770      	bx	lr

00080848 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80848:	6943      	ldr	r3, [r0, #20]
   8084a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8084e:	bf1a      	itte	ne
   80850:	61c1      	strne	r1, [r0, #28]
	return 0;
   80852:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80854:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80856:	4770      	bx	lr

00080858 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80858:	6943      	ldr	r3, [r0, #20]
   8085a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8085e:	bf1d      	ittte	ne
   80860:	6983      	ldrne	r3, [r0, #24]
   80862:	700b      	strbne	r3, [r1, #0]
	return 0;
   80864:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80866:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80868:	4770      	bx	lr
   8086a:	bf00      	nop

0008086c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8086c:	6943      	ldr	r3, [r0, #20]
   8086e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80872:	bf1d      	ittte	ne
   80874:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80878:	61c1      	strne	r1, [r0, #28]
	return 0;
   8087a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8087c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8087e:	4770      	bx	lr

00080880 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80880:	6943      	ldr	r3, [r0, #20]
   80882:	f013 0f01 	tst.w	r3, #1
   80886:	d005      	beq.n	80894 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80888:	6983      	ldr	r3, [r0, #24]
   8088a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8088e:	600b      	str	r3, [r1, #0]

	return 0;
   80890:	2000      	movs	r0, #0
   80892:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80894:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80896:	4770      	bx	lr

00080898 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80898:	e7fe      	b.n	80898 <Dummy_Handler>
   8089a:	bf00      	nop

0008089c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8089c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8089e:	4b1e      	ldr	r3, [pc, #120]	; (80918 <Reset_Handler+0x7c>)
   808a0:	4a1e      	ldr	r2, [pc, #120]	; (8091c <Reset_Handler+0x80>)
   808a2:	429a      	cmp	r2, r3
   808a4:	d003      	beq.n	808ae <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   808a6:	4b1e      	ldr	r3, [pc, #120]	; (80920 <Reset_Handler+0x84>)
   808a8:	4a1b      	ldr	r2, [pc, #108]	; (80918 <Reset_Handler+0x7c>)
   808aa:	429a      	cmp	r2, r3
   808ac:	d304      	bcc.n	808b8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   808ae:	4b1d      	ldr	r3, [pc, #116]	; (80924 <Reset_Handler+0x88>)
   808b0:	4a1d      	ldr	r2, [pc, #116]	; (80928 <Reset_Handler+0x8c>)
   808b2:	429a      	cmp	r2, r3
   808b4:	d30f      	bcc.n	808d6 <Reset_Handler+0x3a>
   808b6:	e01a      	b.n	808ee <Reset_Handler+0x52>
   808b8:	4b1c      	ldr	r3, [pc, #112]	; (8092c <Reset_Handler+0x90>)
   808ba:	4c1d      	ldr	r4, [pc, #116]	; (80930 <Reset_Handler+0x94>)
   808bc:	1ae4      	subs	r4, r4, r3
   808be:	f024 0403 	bic.w	r4, r4, #3
   808c2:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   808c4:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   808c6:	4814      	ldr	r0, [pc, #80]	; (80918 <Reset_Handler+0x7c>)
   808c8:	4914      	ldr	r1, [pc, #80]	; (8091c <Reset_Handler+0x80>)
   808ca:	585a      	ldr	r2, [r3, r1]
   808cc:	501a      	str	r2, [r3, r0]
   808ce:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   808d0:	42a3      	cmp	r3, r4
   808d2:	d1fa      	bne.n	808ca <Reset_Handler+0x2e>
   808d4:	e7eb      	b.n	808ae <Reset_Handler+0x12>
   808d6:	4b17      	ldr	r3, [pc, #92]	; (80934 <Reset_Handler+0x98>)
   808d8:	4917      	ldr	r1, [pc, #92]	; (80938 <Reset_Handler+0x9c>)
   808da:	1ac9      	subs	r1, r1, r3
   808dc:	f021 0103 	bic.w	r1, r1, #3
   808e0:	1d1a      	adds	r2, r3, #4
   808e2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   808e4:	2200      	movs	r2, #0
   808e6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   808ea:	428b      	cmp	r3, r1
   808ec:	d1fb      	bne.n	808e6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   808ee:	4a13      	ldr	r2, [pc, #76]	; (8093c <Reset_Handler+0xa0>)
   808f0:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   808f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   808f8:	4911      	ldr	r1, [pc, #68]	; (80940 <Reset_Handler+0xa4>)
   808fa:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   808fc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80900:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80904:	d203      	bcs.n	8090e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80906:	688a      	ldr	r2, [r1, #8]
   80908:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8090c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8090e:	4b0d      	ldr	r3, [pc, #52]	; (80944 <Reset_Handler+0xa8>)
   80910:	4798      	blx	r3

	/* Branch to main function */
	main();
   80912:	4b0d      	ldr	r3, [pc, #52]	; (80948 <Reset_Handler+0xac>)
   80914:	4798      	blx	r3
   80916:	e7fe      	b.n	80916 <Reset_Handler+0x7a>
   80918:	20070000 	.word	0x20070000
   8091c:	00083de4 	.word	0x00083de4
   80920:	2007099c 	.word	0x2007099c
   80924:	20070b10 	.word	0x20070b10
   80928:	2007099c 	.word	0x2007099c
   8092c:	20070004 	.word	0x20070004
   80930:	2007099f 	.word	0x2007099f
   80934:	20070998 	.word	0x20070998
   80938:	20070b0b 	.word	0x20070b0b
   8093c:	00080000 	.word	0x00080000
   80940:	e000ed00 	.word	0xe000ed00
   80944:	00080d95 	.word	0x00080d95
   80948:	00080d71 	.word	0x00080d71

0008094c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8094c:	4b3e      	ldr	r3, [pc, #248]	; (80a48 <SystemCoreClockUpdate+0xfc>)
   8094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80950:	f003 0303 	and.w	r3, r3, #3
   80954:	2b03      	cmp	r3, #3
   80956:	d85f      	bhi.n	80a18 <SystemCoreClockUpdate+0xcc>
   80958:	e8df f003 	tbb	[pc, r3]
   8095c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80960:	4b3a      	ldr	r3, [pc, #232]	; (80a4c <SystemCoreClockUpdate+0x100>)
   80962:	695b      	ldr	r3, [r3, #20]
   80964:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80968:	bf14      	ite	ne
   8096a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8096e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80972:	4b37      	ldr	r3, [pc, #220]	; (80a50 <SystemCoreClockUpdate+0x104>)
   80974:	601a      	str	r2, [r3, #0]
   80976:	e04f      	b.n	80a18 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80978:	4b33      	ldr	r3, [pc, #204]	; (80a48 <SystemCoreClockUpdate+0xfc>)
   8097a:	6a1b      	ldr	r3, [r3, #32]
   8097c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80980:	d003      	beq.n	8098a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80982:	4a34      	ldr	r2, [pc, #208]	; (80a54 <SystemCoreClockUpdate+0x108>)
   80984:	4b32      	ldr	r3, [pc, #200]	; (80a50 <SystemCoreClockUpdate+0x104>)
   80986:	601a      	str	r2, [r3, #0]
   80988:	e046      	b.n	80a18 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8098a:	4a33      	ldr	r2, [pc, #204]	; (80a58 <SystemCoreClockUpdate+0x10c>)
   8098c:	4b30      	ldr	r3, [pc, #192]	; (80a50 <SystemCoreClockUpdate+0x104>)
   8098e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80990:	4b2d      	ldr	r3, [pc, #180]	; (80a48 <SystemCoreClockUpdate+0xfc>)
   80992:	6a1b      	ldr	r3, [r3, #32]
   80994:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80998:	2b10      	cmp	r3, #16
   8099a:	d002      	beq.n	809a2 <SystemCoreClockUpdate+0x56>
   8099c:	2b20      	cmp	r3, #32
   8099e:	d004      	beq.n	809aa <SystemCoreClockUpdate+0x5e>
   809a0:	e03a      	b.n	80a18 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   809a2:	4a2e      	ldr	r2, [pc, #184]	; (80a5c <SystemCoreClockUpdate+0x110>)
   809a4:	4b2a      	ldr	r3, [pc, #168]	; (80a50 <SystemCoreClockUpdate+0x104>)
   809a6:	601a      	str	r2, [r3, #0]
				break;
   809a8:	e036      	b.n	80a18 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   809aa:	4a2a      	ldr	r2, [pc, #168]	; (80a54 <SystemCoreClockUpdate+0x108>)
   809ac:	4b28      	ldr	r3, [pc, #160]	; (80a50 <SystemCoreClockUpdate+0x104>)
   809ae:	601a      	str	r2, [r3, #0]
				break;
   809b0:	e032      	b.n	80a18 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   809b2:	4b25      	ldr	r3, [pc, #148]	; (80a48 <SystemCoreClockUpdate+0xfc>)
   809b4:	6a1b      	ldr	r3, [r3, #32]
   809b6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   809ba:	d003      	beq.n	809c4 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   809bc:	4a25      	ldr	r2, [pc, #148]	; (80a54 <SystemCoreClockUpdate+0x108>)
   809be:	4b24      	ldr	r3, [pc, #144]	; (80a50 <SystemCoreClockUpdate+0x104>)
   809c0:	601a      	str	r2, [r3, #0]
   809c2:	e012      	b.n	809ea <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   809c4:	4a24      	ldr	r2, [pc, #144]	; (80a58 <SystemCoreClockUpdate+0x10c>)
   809c6:	4b22      	ldr	r3, [pc, #136]	; (80a50 <SystemCoreClockUpdate+0x104>)
   809c8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   809ca:	4b1f      	ldr	r3, [pc, #124]	; (80a48 <SystemCoreClockUpdate+0xfc>)
   809cc:	6a1b      	ldr	r3, [r3, #32]
   809ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
   809d2:	2b10      	cmp	r3, #16
   809d4:	d002      	beq.n	809dc <SystemCoreClockUpdate+0x90>
   809d6:	2b20      	cmp	r3, #32
   809d8:	d004      	beq.n	809e4 <SystemCoreClockUpdate+0x98>
   809da:	e006      	b.n	809ea <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   809dc:	4a1f      	ldr	r2, [pc, #124]	; (80a5c <SystemCoreClockUpdate+0x110>)
   809de:	4b1c      	ldr	r3, [pc, #112]	; (80a50 <SystemCoreClockUpdate+0x104>)
   809e0:	601a      	str	r2, [r3, #0]
				break;
   809e2:	e002      	b.n	809ea <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   809e4:	4a1b      	ldr	r2, [pc, #108]	; (80a54 <SystemCoreClockUpdate+0x108>)
   809e6:	4b1a      	ldr	r3, [pc, #104]	; (80a50 <SystemCoreClockUpdate+0x104>)
   809e8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   809ea:	4b17      	ldr	r3, [pc, #92]	; (80a48 <SystemCoreClockUpdate+0xfc>)
   809ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809ee:	f003 0303 	and.w	r3, r3, #3
   809f2:	2b02      	cmp	r3, #2
   809f4:	d10d      	bne.n	80a12 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   809f6:	4b14      	ldr	r3, [pc, #80]	; (80a48 <SystemCoreClockUpdate+0xfc>)
   809f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   809fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
   809fc:	4b14      	ldr	r3, [pc, #80]	; (80a50 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   809fe:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80a02:	681a      	ldr	r2, [r3, #0]
   80a04:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80a08:	b2c9      	uxtb	r1, r1
   80a0a:	fbb2 f2f1 	udiv	r2, r2, r1
   80a0e:	601a      	str	r2, [r3, #0]
   80a10:	e002      	b.n	80a18 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80a12:	4a13      	ldr	r2, [pc, #76]	; (80a60 <SystemCoreClockUpdate+0x114>)
   80a14:	4b0e      	ldr	r3, [pc, #56]	; (80a50 <SystemCoreClockUpdate+0x104>)
   80a16:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80a18:	4b0b      	ldr	r3, [pc, #44]	; (80a48 <SystemCoreClockUpdate+0xfc>)
   80a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a20:	2b70      	cmp	r3, #112	; 0x70
   80a22:	d107      	bne.n	80a34 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80a24:	4b0a      	ldr	r3, [pc, #40]	; (80a50 <SystemCoreClockUpdate+0x104>)
   80a26:	681a      	ldr	r2, [r3, #0]
   80a28:	490e      	ldr	r1, [pc, #56]	; (80a64 <SystemCoreClockUpdate+0x118>)
   80a2a:	fba1 0202 	umull	r0, r2, r1, r2
   80a2e:	0852      	lsrs	r2, r2, #1
   80a30:	601a      	str	r2, [r3, #0]
   80a32:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80a34:	4b04      	ldr	r3, [pc, #16]	; (80a48 <SystemCoreClockUpdate+0xfc>)
   80a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80a38:	4b05      	ldr	r3, [pc, #20]	; (80a50 <SystemCoreClockUpdate+0x104>)
   80a3a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80a3e:	681a      	ldr	r2, [r3, #0]
   80a40:	40ca      	lsrs	r2, r1
   80a42:	601a      	str	r2, [r3, #0]
   80a44:	4770      	bx	lr
   80a46:	bf00      	nop
   80a48:	400e0600 	.word	0x400e0600
   80a4c:	400e1a10 	.word	0x400e1a10
   80a50:	20070130 	.word	0x20070130
   80a54:	00b71b00 	.word	0x00b71b00
   80a58:	003d0900 	.word	0x003d0900
   80a5c:	007a1200 	.word	0x007a1200
   80a60:	0e4e1c00 	.word	0x0e4e1c00
   80a64:	aaaaaaab 	.word	0xaaaaaaab

00080a68 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80a68:	4b09      	ldr	r3, [pc, #36]	; (80a90 <_sbrk+0x28>)
   80a6a:	681b      	ldr	r3, [r3, #0]
   80a6c:	b913      	cbnz	r3, 80a74 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80a6e:	4a09      	ldr	r2, [pc, #36]	; (80a94 <_sbrk+0x2c>)
   80a70:	4b07      	ldr	r3, [pc, #28]	; (80a90 <_sbrk+0x28>)
   80a72:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80a74:	4b06      	ldr	r3, [pc, #24]	; (80a90 <_sbrk+0x28>)
   80a76:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80a78:	181a      	adds	r2, r3, r0
   80a7a:	4907      	ldr	r1, [pc, #28]	; (80a98 <_sbrk+0x30>)
   80a7c:	4291      	cmp	r1, r2
   80a7e:	db04      	blt.n	80a8a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80a80:	4610      	mov	r0, r2
   80a82:	4a03      	ldr	r2, [pc, #12]	; (80a90 <_sbrk+0x28>)
   80a84:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80a86:	4618      	mov	r0, r3
   80a88:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80a8a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80a8e:	4770      	bx	lr
   80a90:	20070a28 	.word	0x20070a28
   80a94:	20072b10 	.word	0x20072b10
   80a98:	20087ffc 	.word	0x20087ffc

00080a9c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80a9c:	f04f 30ff 	mov.w	r0, #4294967295
   80aa0:	4770      	bx	lr
   80aa2:	bf00      	nop

00080aa4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80aa8:	604b      	str	r3, [r1, #4]

	return 0;
}
   80aaa:	2000      	movs	r0, #0
   80aac:	4770      	bx	lr
   80aae:	bf00      	nop

00080ab0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80ab0:	2001      	movs	r0, #1
   80ab2:	4770      	bx	lr

00080ab4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80ab4:	2000      	movs	r0, #0
   80ab6:	4770      	bx	lr

00080ab8 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80ab8:	b500      	push	{lr}
   80aba:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80abc:	4811      	ldr	r0, [pc, #68]	; (80b04 <USART0_Handler+0x4c>)
   80abe:	f10d 0107 	add.w	r1, sp, #7
   80ac2:	2201      	movs	r2, #1
   80ac4:	4b10      	ldr	r3, [pc, #64]	; (80b08 <USART0_Handler+0x50>)
   80ac6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80ac8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80aca:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80ace:	2200      	movs	r2, #0
   80ad0:	4b0e      	ldr	r3, [pc, #56]	; (80b0c <USART0_Handler+0x54>)
   80ad2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80ad4:	4b0e      	ldr	r3, [pc, #56]	; (80b10 <USART0_Handler+0x58>)
   80ad6:	781b      	ldrb	r3, [r3, #0]
   80ad8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80adc:	4a0d      	ldr	r2, [pc, #52]	; (80b14 <USART0_Handler+0x5c>)
   80ade:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80ae0:	2b9b      	cmp	r3, #155	; 0x9b
   80ae2:	d103      	bne.n	80aec <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80ae4:	2200      	movs	r2, #0
   80ae6:	4b0a      	ldr	r3, [pc, #40]	; (80b10 <USART0_Handler+0x58>)
   80ae8:	701a      	strb	r2, [r3, #0]
   80aea:	e002      	b.n	80af2 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   80aec:	3301      	adds	r3, #1
   80aee:	4a08      	ldr	r2, [pc, #32]	; (80b10 <USART0_Handler+0x58>)
   80af0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80af2:	2201      	movs	r2, #1
   80af4:	4b05      	ldr	r3, [pc, #20]	; (80b0c <USART0_Handler+0x54>)
   80af6:	701a      	strb	r2, [r3, #0]
   80af8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80afc:	b662      	cpsie	i
}
   80afe:	b003      	add	sp, #12
   80b00:	f85d fb04 	ldr.w	pc, [sp], #4
   80b04:	40098000 	.word	0x40098000
   80b08:	000801ad 	.word	0x000801ad
   80b0c:	2007012c 	.word	0x2007012c
   80b10:	20070ac8 	.word	0x20070ac8
   80b14:	20070a2c 	.word	0x20070a2c

00080b18 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b1a:	b083      	sub	sp, #12
   80b1c:	4604      	mov	r4, r0
   80b1e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80b20:	2300      	movs	r3, #0
   80b22:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80b24:	4b1f      	ldr	r3, [pc, #124]	; (80ba4 <usart_serial_getchar+0x8c>)
   80b26:	4298      	cmp	r0, r3
   80b28:	d107      	bne.n	80b3a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80b2a:	461f      	mov	r7, r3
   80b2c:	4e1e      	ldr	r6, [pc, #120]	; (80ba8 <usart_serial_getchar+0x90>)
   80b2e:	4638      	mov	r0, r7
   80b30:	4629      	mov	r1, r5
   80b32:	47b0      	blx	r6
   80b34:	2800      	cmp	r0, #0
   80b36:	d1fa      	bne.n	80b2e <usart_serial_getchar+0x16>
   80b38:	e019      	b.n	80b6e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80b3a:	4b1c      	ldr	r3, [pc, #112]	; (80bac <usart_serial_getchar+0x94>)
   80b3c:	4298      	cmp	r0, r3
   80b3e:	d109      	bne.n	80b54 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80b40:	461f      	mov	r7, r3
   80b42:	4e1b      	ldr	r6, [pc, #108]	; (80bb0 <usart_serial_getchar+0x98>)
   80b44:	4638      	mov	r0, r7
   80b46:	a901      	add	r1, sp, #4
   80b48:	47b0      	blx	r6
   80b4a:	2800      	cmp	r0, #0
   80b4c:	d1fa      	bne.n	80b44 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80b4e:	9b01      	ldr	r3, [sp, #4]
   80b50:	702b      	strb	r3, [r5, #0]
   80b52:	e019      	b.n	80b88 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80b54:	4b17      	ldr	r3, [pc, #92]	; (80bb4 <usart_serial_getchar+0x9c>)
   80b56:	4298      	cmp	r0, r3
   80b58:	d109      	bne.n	80b6e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80b5a:	461e      	mov	r6, r3
   80b5c:	4c14      	ldr	r4, [pc, #80]	; (80bb0 <usart_serial_getchar+0x98>)
   80b5e:	4630      	mov	r0, r6
   80b60:	a901      	add	r1, sp, #4
   80b62:	47a0      	blx	r4
   80b64:	2800      	cmp	r0, #0
   80b66:	d1fa      	bne.n	80b5e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80b68:	9b01      	ldr	r3, [sp, #4]
   80b6a:	702b      	strb	r3, [r5, #0]
   80b6c:	e018      	b.n	80ba0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80b6e:	4b12      	ldr	r3, [pc, #72]	; (80bb8 <usart_serial_getchar+0xa0>)
   80b70:	429c      	cmp	r4, r3
   80b72:	d109      	bne.n	80b88 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80b74:	461e      	mov	r6, r3
   80b76:	4c0e      	ldr	r4, [pc, #56]	; (80bb0 <usart_serial_getchar+0x98>)
   80b78:	4630      	mov	r0, r6
   80b7a:	a901      	add	r1, sp, #4
   80b7c:	47a0      	blx	r4
   80b7e:	2800      	cmp	r0, #0
   80b80:	d1fa      	bne.n	80b78 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80b82:	9b01      	ldr	r3, [sp, #4]
   80b84:	702b      	strb	r3, [r5, #0]
   80b86:	e00b      	b.n	80ba0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80b88:	4b0c      	ldr	r3, [pc, #48]	; (80bbc <usart_serial_getchar+0xa4>)
   80b8a:	429c      	cmp	r4, r3
   80b8c:	d108      	bne.n	80ba0 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80b8e:	461e      	mov	r6, r3
   80b90:	4c07      	ldr	r4, [pc, #28]	; (80bb0 <usart_serial_getchar+0x98>)
   80b92:	4630      	mov	r0, r6
   80b94:	a901      	add	r1, sp, #4
   80b96:	47a0      	blx	r4
   80b98:	2800      	cmp	r0, #0
   80b9a:	d1fa      	bne.n	80b92 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80b9c:	9b01      	ldr	r3, [sp, #4]
   80b9e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80ba0:	b003      	add	sp, #12
   80ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80ba4:	400e0800 	.word	0x400e0800
   80ba8:	00080859 	.word	0x00080859
   80bac:	40098000 	.word	0x40098000
   80bb0:	00080881 	.word	0x00080881
   80bb4:	4009c000 	.word	0x4009c000
   80bb8:	400a0000 	.word	0x400a0000
   80bbc:	400a4000 	.word	0x400a4000

00080bc0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80bc0:	b570      	push	{r4, r5, r6, lr}
   80bc2:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80bc4:	4b21      	ldr	r3, [pc, #132]	; (80c4c <usart_serial_putchar+0x8c>)
   80bc6:	4298      	cmp	r0, r3
   80bc8:	d107      	bne.n	80bda <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80bca:	461e      	mov	r6, r3
   80bcc:	4d20      	ldr	r5, [pc, #128]	; (80c50 <usart_serial_putchar+0x90>)
   80bce:	4630      	mov	r0, r6
   80bd0:	4621      	mov	r1, r4
   80bd2:	47a8      	blx	r5
   80bd4:	2800      	cmp	r0, #0
   80bd6:	d1fa      	bne.n	80bce <usart_serial_putchar+0xe>
   80bd8:	e02b      	b.n	80c32 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80bda:	4b1e      	ldr	r3, [pc, #120]	; (80c54 <usart_serial_putchar+0x94>)
   80bdc:	4298      	cmp	r0, r3
   80bde:	d107      	bne.n	80bf0 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80be0:	461e      	mov	r6, r3
   80be2:	4d1d      	ldr	r5, [pc, #116]	; (80c58 <usart_serial_putchar+0x98>)
   80be4:	4630      	mov	r0, r6
   80be6:	4621      	mov	r1, r4
   80be8:	47a8      	blx	r5
   80bea:	2800      	cmp	r0, #0
   80bec:	d1fa      	bne.n	80be4 <usart_serial_putchar+0x24>
   80bee:	e022      	b.n	80c36 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80bf0:	4b1a      	ldr	r3, [pc, #104]	; (80c5c <usart_serial_putchar+0x9c>)
   80bf2:	4298      	cmp	r0, r3
   80bf4:	d107      	bne.n	80c06 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80bf6:	461e      	mov	r6, r3
   80bf8:	4d17      	ldr	r5, [pc, #92]	; (80c58 <usart_serial_putchar+0x98>)
   80bfa:	4630      	mov	r0, r6
   80bfc:	4621      	mov	r1, r4
   80bfe:	47a8      	blx	r5
   80c00:	2800      	cmp	r0, #0
   80c02:	d1fa      	bne.n	80bfa <usart_serial_putchar+0x3a>
   80c04:	e019      	b.n	80c3a <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80c06:	4b16      	ldr	r3, [pc, #88]	; (80c60 <usart_serial_putchar+0xa0>)
   80c08:	4298      	cmp	r0, r3
   80c0a:	d107      	bne.n	80c1c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80c0c:	461e      	mov	r6, r3
   80c0e:	4d12      	ldr	r5, [pc, #72]	; (80c58 <usart_serial_putchar+0x98>)
   80c10:	4630      	mov	r0, r6
   80c12:	4621      	mov	r1, r4
   80c14:	47a8      	blx	r5
   80c16:	2800      	cmp	r0, #0
   80c18:	d1fa      	bne.n	80c10 <usart_serial_putchar+0x50>
   80c1a:	e010      	b.n	80c3e <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80c1c:	4b11      	ldr	r3, [pc, #68]	; (80c64 <usart_serial_putchar+0xa4>)
   80c1e:	4298      	cmp	r0, r3
   80c20:	d10f      	bne.n	80c42 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80c22:	461e      	mov	r6, r3
   80c24:	4d0c      	ldr	r5, [pc, #48]	; (80c58 <usart_serial_putchar+0x98>)
   80c26:	4630      	mov	r0, r6
   80c28:	4621      	mov	r1, r4
   80c2a:	47a8      	blx	r5
   80c2c:	2800      	cmp	r0, #0
   80c2e:	d1fa      	bne.n	80c26 <usart_serial_putchar+0x66>
   80c30:	e009      	b.n	80c46 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80c32:	2001      	movs	r0, #1
   80c34:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c36:	2001      	movs	r0, #1
   80c38:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c3a:	2001      	movs	r0, #1
   80c3c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c3e:	2001      	movs	r0, #1
   80c40:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80c42:	2000      	movs	r0, #0
   80c44:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c46:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80c48:	bd70      	pop	{r4, r5, r6, pc}
   80c4a:	bf00      	nop
   80c4c:	400e0800 	.word	0x400e0800
   80c50:	00080849 	.word	0x00080849
   80c54:	40098000 	.word	0x40098000
   80c58:	0008086d 	.word	0x0008086d
   80c5c:	4009c000 	.word	0x4009c000
   80c60:	400a0000 	.word	0x400a0000
   80c64:	400a4000 	.word	0x400a4000

00080c68 <configure_console>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   80c68:	b530      	push	{r4, r5, lr}
   80c6a:	b085      	sub	sp, #20
   80c6c:	2008      	movs	r0, #8
   80c6e:	4d13      	ldr	r5, [pc, #76]	; (80cbc <configure_console+0x54>)
   80c70:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80c72:	4c13      	ldr	r4, [pc, #76]	; (80cc0 <configure_console+0x58>)
   80c74:	4b13      	ldr	r3, [pc, #76]	; (80cc4 <configure_console+0x5c>)
   80c76:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80c78:	4a13      	ldr	r2, [pc, #76]	; (80cc8 <configure_console+0x60>)
   80c7a:	4b14      	ldr	r3, [pc, #80]	; (80ccc <configure_console+0x64>)
   80c7c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80c7e:	4a14      	ldr	r2, [pc, #80]	; (80cd0 <configure_console+0x68>)
   80c80:	4b14      	ldr	r3, [pc, #80]	; (80cd4 <configure_console+0x6c>)
   80c82:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80c84:	4b14      	ldr	r3, [pc, #80]	; (80cd8 <configure_console+0x70>)
   80c86:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80c88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80c8c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80c8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80c92:	9303      	str	r3, [sp, #12]
   80c94:	2008      	movs	r0, #8
   80c96:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80c98:	4620      	mov	r0, r4
   80c9a:	a901      	add	r1, sp, #4
   80c9c:	4b0f      	ldr	r3, [pc, #60]	; (80cdc <configure_console+0x74>)
   80c9e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80ca0:	4d0f      	ldr	r5, [pc, #60]	; (80ce0 <configure_console+0x78>)
   80ca2:	682b      	ldr	r3, [r5, #0]
   80ca4:	6898      	ldr	r0, [r3, #8]
   80ca6:	2100      	movs	r1, #0
   80ca8:	4c0e      	ldr	r4, [pc, #56]	; (80ce4 <configure_console+0x7c>)
   80caa:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80cac:	682b      	ldr	r3, [r5, #0]
   80cae:	6858      	ldr	r0, [r3, #4]
   80cb0:	2100      	movs	r1, #0
   80cb2:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   80cb4:	2000      	movs	r0, #0
   80cb6:	b005      	add	sp, #20
   80cb8:	bd30      	pop	{r4, r5, pc}
   80cba:	bf00      	nop
   80cbc:	0008071d 	.word	0x0008071d
   80cc0:	400e0800 	.word	0x400e0800
   80cc4:	20070b08 	.word	0x20070b08
   80cc8:	00080bc1 	.word	0x00080bc1
   80ccc:	20070b04 	.word	0x20070b04
   80cd0:	00080b19 	.word	0x00080b19
   80cd4:	20070b00 	.word	0x20070b00
   80cd8:	0501bd00 	.word	0x0501bd00
   80cdc:	00080811 	.word	0x00080811
   80ce0:	20070560 	.word	0x20070560
   80ce4:	00080ea1 	.word	0x00080ea1

00080ce8 <configure_twi>:
	
	while (1);
}

void configure_twi(void)
{
   80ce8:	b530      	push	{r4, r5, lr}
   80cea:	b085      	sub	sp, #20
	/* Enable TWI peripheral clock */
	pmc_enable_periph_clk(ID_TWI0);
   80cec:	2016      	movs	r0, #22
   80cee:	4b15      	ldr	r3, [pc, #84]	; (80d44 <configure_twi+0x5c>)
   80cf0:	4798      	blx	r3
	//sysclk_enable_peripheral_clock(ID_TWI0);
	pio_set_peripheral(PIOA, PIO_PERIPH_A, 17);	// SDA
   80cf2:	4d15      	ldr	r5, [pc, #84]	; (80d48 <configure_twi+0x60>)
   80cf4:	4628      	mov	r0, r5
   80cf6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80cfa:	2211      	movs	r2, #17
   80cfc:	4c13      	ldr	r4, [pc, #76]	; (80d4c <configure_twi+0x64>)
   80cfe:	47a0      	blx	r4
	pio_set_peripheral(PIOA, PIO_PERIPH_A, 18);	// SCL
   80d00:	4628      	mov	r0, r5
   80d02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d06:	2212      	movs	r2, #18
   80d08:	47a0      	blx	r4
	
	/* Configure TWI options */
	twi_options_t p_opt;
	p_opt.master_clk = sysclk_get_peripheral_hz();
   80d0a:	4b11      	ldr	r3, [pc, #68]	; (80d50 <configure_twi+0x68>)
   80d0c:	9301      	str	r3, [sp, #4]
	p_opt.speed = TWI_CLK;
   80d0e:	f242 7310 	movw	r3, #10000	; 0x2710
   80d12:	9302      	str	r3, [sp, #8]
	p_opt.chip = TWI_MASTER_ADDR;
   80d14:	2308      	movs	r3, #8
   80d16:	f88d 300c 	strb.w	r3, [sp, #12]
	
	/* Configure TWI as master*/
	uint32_t status = twi_master_init(TWI0, &p_opt);
   80d1a:	480e      	ldr	r0, [pc, #56]	; (80d54 <configure_twi+0x6c>)
   80d1c:	a901      	add	r1, sp, #4
   80d1e:	4b0e      	ldr	r3, [pc, #56]	; (80d58 <configure_twi+0x70>)
   80d20:	4798      	blx	r3
	if (status != TWI_SUCCESS)
   80d22:	b118      	cbz	r0, 80d2c <configure_twi+0x44>
	{
		printf("Failed to initialize master\r\n");
   80d24:	480d      	ldr	r0, [pc, #52]	; (80d5c <configure_twi+0x74>)
   80d26:	4b0e      	ldr	r3, [pc, #56]	; (80d60 <configure_twi+0x78>)
   80d28:	4798      	blx	r3
   80d2a:	e002      	b.n	80d32 <configure_twi+0x4a>
	}
	else
	{
		printf("Initialized master\r\n");
   80d2c:	480d      	ldr	r0, [pc, #52]	; (80d64 <configure_twi+0x7c>)
   80d2e:	4b0c      	ldr	r3, [pc, #48]	; (80d60 <configure_twi+0x78>)
   80d30:	4798      	blx	r3
	}

	/* Enable TWI master mode */
	twi_disable_slave_mode(TWI0);
   80d32:	4c08      	ldr	r4, [pc, #32]	; (80d54 <configure_twi+0x6c>)
   80d34:	4620      	mov	r0, r4
   80d36:	4b0c      	ldr	r3, [pc, #48]	; (80d68 <configure_twi+0x80>)
   80d38:	4798      	blx	r3
	twi_enable_master_mode(TWI0);
   80d3a:	4620      	mov	r0, r4
   80d3c:	4b0b      	ldr	r3, [pc, #44]	; (80d6c <configure_twi+0x84>)
   80d3e:	4798      	blx	r3
   80d40:	b005      	add	sp, #20
   80d42:	bd30      	pop	{r4, r5, pc}
   80d44:	0008071d 	.word	0x0008071d
   80d48:	400e0e00 	.word	0x400e0e00
   80d4c:	00080375 	.word	0x00080375
   80d50:	0501bd00 	.word	0x0501bd00
   80d54:	4008c000 	.word	0x4008c000
   80d58:	000807c9 	.word	0x000807c9
   80d5c:	00083d28 	.word	0x00083d28
   80d60:	00080de5 	.word	0x00080de5
   80d64:	00083d48 	.word	0x00083d48
   80d68:	00080809 	.word	0x00080809
   80d6c:	00080775 	.word	0x00080775

00080d70 <main>:
static uint8_t rx_buffer[DATA_LENGTH] = {0x00};

void configure_twi(void);

int main (void)
{
   80d70:	b508      	push	{r3, lr}
	/* System clock and board initialization */
	sysclk_init();
   80d72:	4b04      	ldr	r3, [pc, #16]	; (80d84 <main+0x14>)
   80d74:	4798      	blx	r3
	board_init();
   80d76:	4b04      	ldr	r3, [pc, #16]	; (80d88 <main+0x18>)
   80d78:	4798      	blx	r3
	
	configure_console();
   80d7a:	4b04      	ldr	r3, [pc, #16]	; (80d8c <main+0x1c>)
   80d7c:	4798      	blx	r3
	configure_twi();
   80d7e:	4b04      	ldr	r3, [pc, #16]	; (80d90 <main+0x20>)
   80d80:	4798      	blx	r3
   80d82:	e7fe      	b.n	80d82 <main+0x12>
   80d84:	00080149 	.word	0x00080149
   80d88:	00080305 	.word	0x00080305
   80d8c:	00080c69 	.word	0x00080c69
   80d90:	00080ce9 	.word	0x00080ce9

00080d94 <__libc_init_array>:
   80d94:	b570      	push	{r4, r5, r6, lr}
   80d96:	4e0f      	ldr	r6, [pc, #60]	; (80dd4 <__libc_init_array+0x40>)
   80d98:	4d0f      	ldr	r5, [pc, #60]	; (80dd8 <__libc_init_array+0x44>)
   80d9a:	1b76      	subs	r6, r6, r5
   80d9c:	10b6      	asrs	r6, r6, #2
   80d9e:	d007      	beq.n	80db0 <__libc_init_array+0x1c>
   80da0:	3d04      	subs	r5, #4
   80da2:	2400      	movs	r4, #0
   80da4:	3401      	adds	r4, #1
   80da6:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80daa:	4798      	blx	r3
   80dac:	42a6      	cmp	r6, r4
   80dae:	d1f9      	bne.n	80da4 <__libc_init_array+0x10>
   80db0:	4e0a      	ldr	r6, [pc, #40]	; (80ddc <__libc_init_array+0x48>)
   80db2:	4d0b      	ldr	r5, [pc, #44]	; (80de0 <__libc_init_array+0x4c>)
   80db4:	f003 f800 	bl	83db8 <_init>
   80db8:	1b76      	subs	r6, r6, r5
   80dba:	10b6      	asrs	r6, r6, #2
   80dbc:	d008      	beq.n	80dd0 <__libc_init_array+0x3c>
   80dbe:	3d04      	subs	r5, #4
   80dc0:	2400      	movs	r4, #0
   80dc2:	3401      	adds	r4, #1
   80dc4:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80dc8:	4798      	blx	r3
   80dca:	42a6      	cmp	r6, r4
   80dcc:	d1f9      	bne.n	80dc2 <__libc_init_array+0x2e>
   80dce:	bd70      	pop	{r4, r5, r6, pc}
   80dd0:	bd70      	pop	{r4, r5, r6, pc}
   80dd2:	bf00      	nop
   80dd4:	00083dc4 	.word	0x00083dc4
   80dd8:	00083dc4 	.word	0x00083dc4
   80ddc:	00083dcc 	.word	0x00083dcc
   80de0:	00083dc4 	.word	0x00083dc4

00080de4 <iprintf>:
   80de4:	b40f      	push	{r0, r1, r2, r3}
   80de6:	b510      	push	{r4, lr}
   80de8:	4b07      	ldr	r3, [pc, #28]	; (80e08 <iprintf+0x24>)
   80dea:	b082      	sub	sp, #8
   80dec:	ac04      	add	r4, sp, #16
   80dee:	f854 2b04 	ldr.w	r2, [r4], #4
   80df2:	6818      	ldr	r0, [r3, #0]
   80df4:	4623      	mov	r3, r4
   80df6:	6881      	ldr	r1, [r0, #8]
   80df8:	9401      	str	r4, [sp, #4]
   80dfa:	f000 f915 	bl	81028 <_vfiprintf_r>
   80dfe:	b002      	add	sp, #8
   80e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80e04:	b004      	add	sp, #16
   80e06:	4770      	bx	lr
   80e08:	20070560 	.word	0x20070560

00080e0c <memset>:
   80e0c:	b4f0      	push	{r4, r5, r6, r7}
   80e0e:	0784      	lsls	r4, r0, #30
   80e10:	d043      	beq.n	80e9a <memset+0x8e>
   80e12:	1e54      	subs	r4, r2, #1
   80e14:	2a00      	cmp	r2, #0
   80e16:	d03e      	beq.n	80e96 <memset+0x8a>
   80e18:	b2cd      	uxtb	r5, r1
   80e1a:	4603      	mov	r3, r0
   80e1c:	e003      	b.n	80e26 <memset+0x1a>
   80e1e:	1e62      	subs	r2, r4, #1
   80e20:	2c00      	cmp	r4, #0
   80e22:	d038      	beq.n	80e96 <memset+0x8a>
   80e24:	4614      	mov	r4, r2
   80e26:	f803 5b01 	strb.w	r5, [r3], #1
   80e2a:	079a      	lsls	r2, r3, #30
   80e2c:	d1f7      	bne.n	80e1e <memset+0x12>
   80e2e:	2c03      	cmp	r4, #3
   80e30:	d92a      	bls.n	80e88 <memset+0x7c>
   80e32:	b2cd      	uxtb	r5, r1
   80e34:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80e38:	2c0f      	cmp	r4, #15
   80e3a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80e3e:	d915      	bls.n	80e6c <memset+0x60>
   80e40:	f1a4 0710 	sub.w	r7, r4, #16
   80e44:	093f      	lsrs	r7, r7, #4
   80e46:	f103 0610 	add.w	r6, r3, #16
   80e4a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   80e4e:	461a      	mov	r2, r3
   80e50:	6015      	str	r5, [r2, #0]
   80e52:	6055      	str	r5, [r2, #4]
   80e54:	6095      	str	r5, [r2, #8]
   80e56:	60d5      	str	r5, [r2, #12]
   80e58:	3210      	adds	r2, #16
   80e5a:	42b2      	cmp	r2, r6
   80e5c:	d1f8      	bne.n	80e50 <memset+0x44>
   80e5e:	f004 040f 	and.w	r4, r4, #15
   80e62:	3701      	adds	r7, #1
   80e64:	2c03      	cmp	r4, #3
   80e66:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   80e6a:	d90d      	bls.n	80e88 <memset+0x7c>
   80e6c:	461e      	mov	r6, r3
   80e6e:	4622      	mov	r2, r4
   80e70:	3a04      	subs	r2, #4
   80e72:	2a03      	cmp	r2, #3
   80e74:	f846 5b04 	str.w	r5, [r6], #4
   80e78:	d8fa      	bhi.n	80e70 <memset+0x64>
   80e7a:	1f22      	subs	r2, r4, #4
   80e7c:	f022 0203 	bic.w	r2, r2, #3
   80e80:	3204      	adds	r2, #4
   80e82:	4413      	add	r3, r2
   80e84:	f004 0403 	and.w	r4, r4, #3
   80e88:	b12c      	cbz	r4, 80e96 <memset+0x8a>
   80e8a:	b2c9      	uxtb	r1, r1
   80e8c:	441c      	add	r4, r3
   80e8e:	f803 1b01 	strb.w	r1, [r3], #1
   80e92:	42a3      	cmp	r3, r4
   80e94:	d1fb      	bne.n	80e8e <memset+0x82>
   80e96:	bcf0      	pop	{r4, r5, r6, r7}
   80e98:	4770      	bx	lr
   80e9a:	4614      	mov	r4, r2
   80e9c:	4603      	mov	r3, r0
   80e9e:	e7c6      	b.n	80e2e <memset+0x22>

00080ea0 <setbuf>:
   80ea0:	2900      	cmp	r1, #0
   80ea2:	bf0c      	ite	eq
   80ea4:	2202      	moveq	r2, #2
   80ea6:	2200      	movne	r2, #0
   80ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80eac:	f000 b800 	b.w	80eb0 <setvbuf>

00080eb0 <setvbuf>:
   80eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80eb4:	4d3c      	ldr	r5, [pc, #240]	; (80fa8 <setvbuf+0xf8>)
   80eb6:	4604      	mov	r4, r0
   80eb8:	682d      	ldr	r5, [r5, #0]
   80eba:	4688      	mov	r8, r1
   80ebc:	4616      	mov	r6, r2
   80ebe:	461f      	mov	r7, r3
   80ec0:	b115      	cbz	r5, 80ec8 <setvbuf+0x18>
   80ec2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80ec4:	2b00      	cmp	r3, #0
   80ec6:	d04f      	beq.n	80f68 <setvbuf+0xb8>
   80ec8:	2e02      	cmp	r6, #2
   80eca:	d830      	bhi.n	80f2e <setvbuf+0x7e>
   80ecc:	2f00      	cmp	r7, #0
   80ece:	db2e      	blt.n	80f2e <setvbuf+0x7e>
   80ed0:	4628      	mov	r0, r5
   80ed2:	4621      	mov	r1, r4
   80ed4:	f001 f826 	bl	81f24 <_fflush_r>
   80ed8:	89a3      	ldrh	r3, [r4, #12]
   80eda:	2200      	movs	r2, #0
   80edc:	6062      	str	r2, [r4, #4]
   80ede:	61a2      	str	r2, [r4, #24]
   80ee0:	061a      	lsls	r2, r3, #24
   80ee2:	d428      	bmi.n	80f36 <setvbuf+0x86>
   80ee4:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80ee8:	b29b      	uxth	r3, r3
   80eea:	2e02      	cmp	r6, #2
   80eec:	81a3      	strh	r3, [r4, #12]
   80eee:	d02d      	beq.n	80f4c <setvbuf+0x9c>
   80ef0:	f1b8 0f00 	cmp.w	r8, #0
   80ef4:	d03c      	beq.n	80f70 <setvbuf+0xc0>
   80ef6:	2e01      	cmp	r6, #1
   80ef8:	d013      	beq.n	80f22 <setvbuf+0x72>
   80efa:	b29b      	uxth	r3, r3
   80efc:	f003 0008 	and.w	r0, r3, #8
   80f00:	4a2a      	ldr	r2, [pc, #168]	; (80fac <setvbuf+0xfc>)
   80f02:	b280      	uxth	r0, r0
   80f04:	63ea      	str	r2, [r5, #60]	; 0x3c
   80f06:	f8c4 8000 	str.w	r8, [r4]
   80f0a:	f8c4 8010 	str.w	r8, [r4, #16]
   80f0e:	6167      	str	r7, [r4, #20]
   80f10:	b178      	cbz	r0, 80f32 <setvbuf+0x82>
   80f12:	f013 0f03 	tst.w	r3, #3
   80f16:	bf18      	it	ne
   80f18:	2700      	movne	r7, #0
   80f1a:	60a7      	str	r7, [r4, #8]
   80f1c:	2000      	movs	r0, #0
   80f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f22:	f043 0301 	orr.w	r3, r3, #1
   80f26:	427a      	negs	r2, r7
   80f28:	81a3      	strh	r3, [r4, #12]
   80f2a:	61a2      	str	r2, [r4, #24]
   80f2c:	e7e5      	b.n	80efa <setvbuf+0x4a>
   80f2e:	f04f 30ff 	mov.w	r0, #4294967295
   80f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f36:	4628      	mov	r0, r5
   80f38:	6921      	ldr	r1, [r4, #16]
   80f3a:	f001 f953 	bl	821e4 <_free_r>
   80f3e:	89a3      	ldrh	r3, [r4, #12]
   80f40:	2e02      	cmp	r6, #2
   80f42:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80f46:	b29b      	uxth	r3, r3
   80f48:	81a3      	strh	r3, [r4, #12]
   80f4a:	d1d1      	bne.n	80ef0 <setvbuf+0x40>
   80f4c:	2000      	movs	r0, #0
   80f4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   80f52:	f043 0302 	orr.w	r3, r3, #2
   80f56:	2500      	movs	r5, #0
   80f58:	2101      	movs	r1, #1
   80f5a:	81a3      	strh	r3, [r4, #12]
   80f5c:	60a5      	str	r5, [r4, #8]
   80f5e:	6022      	str	r2, [r4, #0]
   80f60:	6122      	str	r2, [r4, #16]
   80f62:	6161      	str	r1, [r4, #20]
   80f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f68:	4628      	mov	r0, r5
   80f6a:	f000 fff7 	bl	81f5c <__sinit>
   80f6e:	e7ab      	b.n	80ec8 <setvbuf+0x18>
   80f70:	2f00      	cmp	r7, #0
   80f72:	bf08      	it	eq
   80f74:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   80f78:	4638      	mov	r0, r7
   80f7a:	f001 fc29 	bl	827d0 <malloc>
   80f7e:	4680      	mov	r8, r0
   80f80:	b128      	cbz	r0, 80f8e <setvbuf+0xde>
   80f82:	89a3      	ldrh	r3, [r4, #12]
   80f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80f88:	b29b      	uxth	r3, r3
   80f8a:	81a3      	strh	r3, [r4, #12]
   80f8c:	e7b3      	b.n	80ef6 <setvbuf+0x46>
   80f8e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80f92:	f001 fc1d 	bl	827d0 <malloc>
   80f96:	4680      	mov	r8, r0
   80f98:	b918      	cbnz	r0, 80fa2 <setvbuf+0xf2>
   80f9a:	89a3      	ldrh	r3, [r4, #12]
   80f9c:	f04f 30ff 	mov.w	r0, #4294967295
   80fa0:	e7d5      	b.n	80f4e <setvbuf+0x9e>
   80fa2:	f44f 6780 	mov.w	r7, #1024	; 0x400
   80fa6:	e7ec      	b.n	80f82 <setvbuf+0xd2>
   80fa8:	20070560 	.word	0x20070560
   80fac:	00081f51 	.word	0x00081f51

00080fb0 <__sprint_r.part.0>:
   80fb0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   80fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80fb6:	049c      	lsls	r4, r3, #18
   80fb8:	460e      	mov	r6, r1
   80fba:	4680      	mov	r8, r0
   80fbc:	4691      	mov	r9, r2
   80fbe:	d52a      	bpl.n	81016 <__sprint_r.part.0+0x66>
   80fc0:	6893      	ldr	r3, [r2, #8]
   80fc2:	6812      	ldr	r2, [r2, #0]
   80fc4:	f102 0a08 	add.w	sl, r2, #8
   80fc8:	b31b      	cbz	r3, 81012 <__sprint_r.part.0+0x62>
   80fca:	e91a 00a0 	ldmdb	sl, {r5, r7}
   80fce:	08bf      	lsrs	r7, r7, #2
   80fd0:	d017      	beq.n	81002 <__sprint_r.part.0+0x52>
   80fd2:	3d04      	subs	r5, #4
   80fd4:	2400      	movs	r4, #0
   80fd6:	e001      	b.n	80fdc <__sprint_r.part.0+0x2c>
   80fd8:	42a7      	cmp	r7, r4
   80fda:	d010      	beq.n	80ffe <__sprint_r.part.0+0x4e>
   80fdc:	4640      	mov	r0, r8
   80fde:	f855 1f04 	ldr.w	r1, [r5, #4]!
   80fe2:	4632      	mov	r2, r6
   80fe4:	f001 f850 	bl	82088 <_fputwc_r>
   80fe8:	1c43      	adds	r3, r0, #1
   80fea:	f104 0401 	add.w	r4, r4, #1
   80fee:	d1f3      	bne.n	80fd8 <__sprint_r.part.0+0x28>
   80ff0:	2300      	movs	r3, #0
   80ff2:	f8c9 3008 	str.w	r3, [r9, #8]
   80ff6:	f8c9 3004 	str.w	r3, [r9, #4]
   80ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80ffe:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81002:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81006:	f8c9 3008 	str.w	r3, [r9, #8]
   8100a:	f10a 0a08 	add.w	sl, sl, #8
   8100e:	2b00      	cmp	r3, #0
   81010:	d1db      	bne.n	80fca <__sprint_r.part.0+0x1a>
   81012:	2000      	movs	r0, #0
   81014:	e7ec      	b.n	80ff0 <__sprint_r.part.0+0x40>
   81016:	f001 f9b1 	bl	8237c <__sfvwrite_r>
   8101a:	2300      	movs	r3, #0
   8101c:	f8c9 3008 	str.w	r3, [r9, #8]
   81020:	f8c9 3004 	str.w	r3, [r9, #4]
   81024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081028 <_vfiprintf_r>:
   81028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8102c:	b0b1      	sub	sp, #196	; 0xc4
   8102e:	461c      	mov	r4, r3
   81030:	9102      	str	r1, [sp, #8]
   81032:	4690      	mov	r8, r2
   81034:	9308      	str	r3, [sp, #32]
   81036:	9006      	str	r0, [sp, #24]
   81038:	b118      	cbz	r0, 81042 <_vfiprintf_r+0x1a>
   8103a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8103c:	2b00      	cmp	r3, #0
   8103e:	f000 80e8 	beq.w	81212 <_vfiprintf_r+0x1ea>
   81042:	9d02      	ldr	r5, [sp, #8]
   81044:	89ab      	ldrh	r3, [r5, #12]
   81046:	b29a      	uxth	r2, r3
   81048:	0490      	lsls	r0, r2, #18
   8104a:	d407      	bmi.n	8105c <_vfiprintf_r+0x34>
   8104c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   8104e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81052:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81056:	81ab      	strh	r3, [r5, #12]
   81058:	b29a      	uxth	r2, r3
   8105a:	6669      	str	r1, [r5, #100]	; 0x64
   8105c:	0711      	lsls	r1, r2, #28
   8105e:	f140 80b7 	bpl.w	811d0 <_vfiprintf_r+0x1a8>
   81062:	f8dd b008 	ldr.w	fp, [sp, #8]
   81066:	f8db 3010 	ldr.w	r3, [fp, #16]
   8106a:	2b00      	cmp	r3, #0
   8106c:	f000 80b0 	beq.w	811d0 <_vfiprintf_r+0x1a8>
   81070:	f002 021a 	and.w	r2, r2, #26
   81074:	2a0a      	cmp	r2, #10
   81076:	f000 80b7 	beq.w	811e8 <_vfiprintf_r+0x1c0>
   8107a:	2300      	movs	r3, #0
   8107c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81080:	930a      	str	r3, [sp, #40]	; 0x28
   81082:	9315      	str	r3, [sp, #84]	; 0x54
   81084:	9314      	str	r3, [sp, #80]	; 0x50
   81086:	9309      	str	r3, [sp, #36]	; 0x24
   81088:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   8108c:	464e      	mov	r6, r9
   8108e:	f898 3000 	ldrb.w	r3, [r8]
   81092:	2b00      	cmp	r3, #0
   81094:	f000 84c8 	beq.w	81a28 <_vfiprintf_r+0xa00>
   81098:	2b25      	cmp	r3, #37	; 0x25
   8109a:	f000 84c5 	beq.w	81a28 <_vfiprintf_r+0xa00>
   8109e:	f108 0201 	add.w	r2, r8, #1
   810a2:	e001      	b.n	810a8 <_vfiprintf_r+0x80>
   810a4:	2b25      	cmp	r3, #37	; 0x25
   810a6:	d004      	beq.n	810b2 <_vfiprintf_r+0x8a>
   810a8:	7813      	ldrb	r3, [r2, #0]
   810aa:	4614      	mov	r4, r2
   810ac:	3201      	adds	r2, #1
   810ae:	2b00      	cmp	r3, #0
   810b0:	d1f8      	bne.n	810a4 <_vfiprintf_r+0x7c>
   810b2:	ebc8 0504 	rsb	r5, r8, r4
   810b6:	b195      	cbz	r5, 810de <_vfiprintf_r+0xb6>
   810b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   810ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
   810bc:	3301      	adds	r3, #1
   810be:	442a      	add	r2, r5
   810c0:	2b07      	cmp	r3, #7
   810c2:	f8c6 8000 	str.w	r8, [r6]
   810c6:	6075      	str	r5, [r6, #4]
   810c8:	9215      	str	r2, [sp, #84]	; 0x54
   810ca:	9314      	str	r3, [sp, #80]	; 0x50
   810cc:	dd7b      	ble.n	811c6 <_vfiprintf_r+0x19e>
   810ce:	2a00      	cmp	r2, #0
   810d0:	f040 84d5 	bne.w	81a7e <_vfiprintf_r+0xa56>
   810d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   810d6:	9214      	str	r2, [sp, #80]	; 0x50
   810d8:	4428      	add	r0, r5
   810da:	464e      	mov	r6, r9
   810dc:	9009      	str	r0, [sp, #36]	; 0x24
   810de:	7823      	ldrb	r3, [r4, #0]
   810e0:	2b00      	cmp	r3, #0
   810e2:	f000 83ed 	beq.w	818c0 <_vfiprintf_r+0x898>
   810e6:	2100      	movs	r1, #0
   810e8:	f04f 0200 	mov.w	r2, #0
   810ec:	f04f 3cff 	mov.w	ip, #4294967295
   810f0:	7863      	ldrb	r3, [r4, #1]
   810f2:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   810f6:	9104      	str	r1, [sp, #16]
   810f8:	468a      	mov	sl, r1
   810fa:	f104 0801 	add.w	r8, r4, #1
   810fe:	4608      	mov	r0, r1
   81100:	4665      	mov	r5, ip
   81102:	f108 0801 	add.w	r8, r8, #1
   81106:	f1a3 0220 	sub.w	r2, r3, #32
   8110a:	2a58      	cmp	r2, #88	; 0x58
   8110c:	f200 82d9 	bhi.w	816c2 <_vfiprintf_r+0x69a>
   81110:	e8df f012 	tbh	[pc, r2, lsl #1]
   81114:	02d702cb 	.word	0x02d702cb
   81118:	02d202d7 	.word	0x02d202d7
   8111c:	02d702d7 	.word	0x02d702d7
   81120:	02d702d7 	.word	0x02d702d7
   81124:	02d702d7 	.word	0x02d702d7
   81128:	028f0282 	.word	0x028f0282
   8112c:	008402d7 	.word	0x008402d7
   81130:	02d70293 	.word	0x02d70293
   81134:	0196012b 	.word	0x0196012b
   81138:	01960196 	.word	0x01960196
   8113c:	01960196 	.word	0x01960196
   81140:	01960196 	.word	0x01960196
   81144:	01960196 	.word	0x01960196
   81148:	02d702d7 	.word	0x02d702d7
   8114c:	02d702d7 	.word	0x02d702d7
   81150:	02d702d7 	.word	0x02d702d7
   81154:	02d702d7 	.word	0x02d702d7
   81158:	02d702d7 	.word	0x02d702d7
   8115c:	02d70130 	.word	0x02d70130
   81160:	02d702d7 	.word	0x02d702d7
   81164:	02d702d7 	.word	0x02d702d7
   81168:	02d702d7 	.word	0x02d702d7
   8116c:	02d702d7 	.word	0x02d702d7
   81170:	017b02d7 	.word	0x017b02d7
   81174:	02d702d7 	.word	0x02d702d7
   81178:	02d702d7 	.word	0x02d702d7
   8117c:	01a402d7 	.word	0x01a402d7
   81180:	02d702d7 	.word	0x02d702d7
   81184:	02d701bf 	.word	0x02d701bf
   81188:	02d702d7 	.word	0x02d702d7
   8118c:	02d702d7 	.word	0x02d702d7
   81190:	02d702d7 	.word	0x02d702d7
   81194:	02d702d7 	.word	0x02d702d7
   81198:	01e402d7 	.word	0x01e402d7
   8119c:	02d701fa 	.word	0x02d701fa
   811a0:	02d702d7 	.word	0x02d702d7
   811a4:	01fa0216 	.word	0x01fa0216
   811a8:	02d702d7 	.word	0x02d702d7
   811ac:	02d7021b 	.word	0x02d7021b
   811b0:	00890228 	.word	0x00890228
   811b4:	027d0266 	.word	0x027d0266
   811b8:	023a02d7 	.word	0x023a02d7
   811bc:	011902d7 	.word	0x011902d7
   811c0:	02d702d7 	.word	0x02d702d7
   811c4:	02af      	.short	0x02af
   811c6:	3608      	adds	r6, #8
   811c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   811ca:	4428      	add	r0, r5
   811cc:	9009      	str	r0, [sp, #36]	; 0x24
   811ce:	e786      	b.n	810de <_vfiprintf_r+0xb6>
   811d0:	9806      	ldr	r0, [sp, #24]
   811d2:	9902      	ldr	r1, [sp, #8]
   811d4:	f000 fd90 	bl	81cf8 <__swsetup_r>
   811d8:	b9b0      	cbnz	r0, 81208 <_vfiprintf_r+0x1e0>
   811da:	9d02      	ldr	r5, [sp, #8]
   811dc:	89aa      	ldrh	r2, [r5, #12]
   811de:	f002 021a 	and.w	r2, r2, #26
   811e2:	2a0a      	cmp	r2, #10
   811e4:	f47f af49 	bne.w	8107a <_vfiprintf_r+0x52>
   811e8:	f8dd b008 	ldr.w	fp, [sp, #8]
   811ec:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   811f0:	2b00      	cmp	r3, #0
   811f2:	f6ff af42 	blt.w	8107a <_vfiprintf_r+0x52>
   811f6:	9806      	ldr	r0, [sp, #24]
   811f8:	4659      	mov	r1, fp
   811fa:	4642      	mov	r2, r8
   811fc:	4623      	mov	r3, r4
   811fe:	f000 fd3d 	bl	81c7c <__sbprintf>
   81202:	b031      	add	sp, #196	; 0xc4
   81204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81208:	f04f 30ff 	mov.w	r0, #4294967295
   8120c:	b031      	add	sp, #196	; 0xc4
   8120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81212:	f000 fea3 	bl	81f5c <__sinit>
   81216:	e714      	b.n	81042 <_vfiprintf_r+0x1a>
   81218:	4240      	negs	r0, r0
   8121a:	9308      	str	r3, [sp, #32]
   8121c:	f04a 0a04 	orr.w	sl, sl, #4
   81220:	f898 3000 	ldrb.w	r3, [r8]
   81224:	e76d      	b.n	81102 <_vfiprintf_r+0xda>
   81226:	f01a 0320 	ands.w	r3, sl, #32
   8122a:	9004      	str	r0, [sp, #16]
   8122c:	46ac      	mov	ip, r5
   8122e:	f000 80f4 	beq.w	8141a <_vfiprintf_r+0x3f2>
   81232:	f8dd b020 	ldr.w	fp, [sp, #32]
   81236:	f10b 0307 	add.w	r3, fp, #7
   8123a:	f023 0307 	bic.w	r3, r3, #7
   8123e:	f103 0408 	add.w	r4, r3, #8
   81242:	9408      	str	r4, [sp, #32]
   81244:	e9d3 4500 	ldrd	r4, r5, [r3]
   81248:	2300      	movs	r3, #0
   8124a:	f04f 0000 	mov.w	r0, #0
   8124e:	2100      	movs	r1, #0
   81250:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   81254:	f8cd c014 	str.w	ip, [sp, #20]
   81258:	9107      	str	r1, [sp, #28]
   8125a:	f1bc 0f00 	cmp.w	ip, #0
   8125e:	bfa8      	it	ge
   81260:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81264:	ea54 0205 	orrs.w	r2, r4, r5
   81268:	f040 80ad 	bne.w	813c6 <_vfiprintf_r+0x39e>
   8126c:	f1bc 0f00 	cmp.w	ip, #0
   81270:	f040 80a9 	bne.w	813c6 <_vfiprintf_r+0x39e>
   81274:	2b00      	cmp	r3, #0
   81276:	f040 83c0 	bne.w	819fa <_vfiprintf_r+0x9d2>
   8127a:	f01a 0f01 	tst.w	sl, #1
   8127e:	f000 83bc 	beq.w	819fa <_vfiprintf_r+0x9d2>
   81282:	2330      	movs	r3, #48	; 0x30
   81284:	af30      	add	r7, sp, #192	; 0xc0
   81286:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8128a:	ebc7 0409 	rsb	r4, r7, r9
   8128e:	9405      	str	r4, [sp, #20]
   81290:	f8dd b014 	ldr.w	fp, [sp, #20]
   81294:	9c07      	ldr	r4, [sp, #28]
   81296:	45e3      	cmp	fp, ip
   81298:	bfb8      	it	lt
   8129a:	46e3      	movlt	fp, ip
   8129c:	f8cd b00c 	str.w	fp, [sp, #12]
   812a0:	b11c      	cbz	r4, 812aa <_vfiprintf_r+0x282>
   812a2:	f10b 0b01 	add.w	fp, fp, #1
   812a6:	f8cd b00c 	str.w	fp, [sp, #12]
   812aa:	f01a 0502 	ands.w	r5, sl, #2
   812ae:	9507      	str	r5, [sp, #28]
   812b0:	d005      	beq.n	812be <_vfiprintf_r+0x296>
   812b2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   812b6:	f10b 0b02 	add.w	fp, fp, #2
   812ba:	f8cd b00c 	str.w	fp, [sp, #12]
   812be:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   812c2:	930b      	str	r3, [sp, #44]	; 0x2c
   812c4:	f040 821b 	bne.w	816fe <_vfiprintf_r+0x6d6>
   812c8:	9d04      	ldr	r5, [sp, #16]
   812ca:	f8dd b00c 	ldr.w	fp, [sp, #12]
   812ce:	ebcb 0405 	rsb	r4, fp, r5
   812d2:	2c00      	cmp	r4, #0
   812d4:	f340 8213 	ble.w	816fe <_vfiprintf_r+0x6d6>
   812d8:	2c10      	cmp	r4, #16
   812da:	f340 8489 	ble.w	81bf0 <_vfiprintf_r+0xbc8>
   812de:	4dbe      	ldr	r5, [pc, #760]	; (815d8 <_vfiprintf_r+0x5b0>)
   812e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   812e2:	462b      	mov	r3, r5
   812e4:	9814      	ldr	r0, [sp, #80]	; 0x50
   812e6:	4625      	mov	r5, r4
   812e8:	f04f 0b10 	mov.w	fp, #16
   812ec:	4664      	mov	r4, ip
   812ee:	46b4      	mov	ip, r6
   812f0:	461e      	mov	r6, r3
   812f2:	e006      	b.n	81302 <_vfiprintf_r+0x2da>
   812f4:	1c83      	adds	r3, r0, #2
   812f6:	f10c 0c08 	add.w	ip, ip, #8
   812fa:	4608      	mov	r0, r1
   812fc:	3d10      	subs	r5, #16
   812fe:	2d10      	cmp	r5, #16
   81300:	dd11      	ble.n	81326 <_vfiprintf_r+0x2fe>
   81302:	1c41      	adds	r1, r0, #1
   81304:	3210      	adds	r2, #16
   81306:	2907      	cmp	r1, #7
   81308:	9215      	str	r2, [sp, #84]	; 0x54
   8130a:	e88c 0840 	stmia.w	ip, {r6, fp}
   8130e:	9114      	str	r1, [sp, #80]	; 0x50
   81310:	ddf0      	ble.n	812f4 <_vfiprintf_r+0x2cc>
   81312:	2a00      	cmp	r2, #0
   81314:	f040 81e6 	bne.w	816e4 <_vfiprintf_r+0x6bc>
   81318:	3d10      	subs	r5, #16
   8131a:	2d10      	cmp	r5, #16
   8131c:	f04f 0301 	mov.w	r3, #1
   81320:	4610      	mov	r0, r2
   81322:	46cc      	mov	ip, r9
   81324:	dced      	bgt.n	81302 <_vfiprintf_r+0x2da>
   81326:	4631      	mov	r1, r6
   81328:	4666      	mov	r6, ip
   8132a:	46a4      	mov	ip, r4
   8132c:	462c      	mov	r4, r5
   8132e:	460d      	mov	r5, r1
   81330:	4422      	add	r2, r4
   81332:	2b07      	cmp	r3, #7
   81334:	9215      	str	r2, [sp, #84]	; 0x54
   81336:	6035      	str	r5, [r6, #0]
   81338:	6074      	str	r4, [r6, #4]
   8133a:	9314      	str	r3, [sp, #80]	; 0x50
   8133c:	f300 836d 	bgt.w	81a1a <_vfiprintf_r+0x9f2>
   81340:	3608      	adds	r6, #8
   81342:	1c59      	adds	r1, r3, #1
   81344:	e1de      	b.n	81704 <_vfiprintf_r+0x6dc>
   81346:	f01a 0f20 	tst.w	sl, #32
   8134a:	9004      	str	r0, [sp, #16]
   8134c:	46ac      	mov	ip, r5
   8134e:	f000 808d 	beq.w	8146c <_vfiprintf_r+0x444>
   81352:	9d08      	ldr	r5, [sp, #32]
   81354:	1deb      	adds	r3, r5, #7
   81356:	f023 0307 	bic.w	r3, r3, #7
   8135a:	f103 0b08 	add.w	fp, r3, #8
   8135e:	e9d3 4500 	ldrd	r4, r5, [r3]
   81362:	f8cd b020 	str.w	fp, [sp, #32]
   81366:	2301      	movs	r3, #1
   81368:	e76f      	b.n	8124a <_vfiprintf_r+0x222>
   8136a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   8136e:	f898 3000 	ldrb.w	r3, [r8]
   81372:	e6c6      	b.n	81102 <_vfiprintf_r+0xda>
   81374:	f04a 0a10 	orr.w	sl, sl, #16
   81378:	f01a 0f20 	tst.w	sl, #32
   8137c:	9004      	str	r0, [sp, #16]
   8137e:	46ac      	mov	ip, r5
   81380:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81384:	f000 80c8 	beq.w	81518 <_vfiprintf_r+0x4f0>
   81388:	9c08      	ldr	r4, [sp, #32]
   8138a:	1de1      	adds	r1, r4, #7
   8138c:	f021 0107 	bic.w	r1, r1, #7
   81390:	e9d1 2300 	ldrd	r2, r3, [r1]
   81394:	3108      	adds	r1, #8
   81396:	9108      	str	r1, [sp, #32]
   81398:	4614      	mov	r4, r2
   8139a:	461d      	mov	r5, r3
   8139c:	2a00      	cmp	r2, #0
   8139e:	f173 0b00 	sbcs.w	fp, r3, #0
   813a2:	f2c0 83ce 	blt.w	81b42 <_vfiprintf_r+0xb1a>
   813a6:	f1bc 0f00 	cmp.w	ip, #0
   813aa:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   813ae:	bfa8      	it	ge
   813b0:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   813b4:	ea54 0205 	orrs.w	r2, r4, r5
   813b8:	9007      	str	r0, [sp, #28]
   813ba:	f8cd c014 	str.w	ip, [sp, #20]
   813be:	f04f 0301 	mov.w	r3, #1
   813c2:	f43f af53 	beq.w	8126c <_vfiprintf_r+0x244>
   813c6:	2b01      	cmp	r3, #1
   813c8:	f000 8319 	beq.w	819fe <_vfiprintf_r+0x9d6>
   813cc:	2b02      	cmp	r3, #2
   813ce:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   813d2:	f040 824c 	bne.w	8186e <_vfiprintf_r+0x846>
   813d6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   813da:	4619      	mov	r1, r3
   813dc:	f004 000f 	and.w	r0, r4, #15
   813e0:	0922      	lsrs	r2, r4, #4
   813e2:	f81b 0000 	ldrb.w	r0, [fp, r0]
   813e6:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   813ea:	092b      	lsrs	r3, r5, #4
   813ec:	7008      	strb	r0, [r1, #0]
   813ee:	ea52 0003 	orrs.w	r0, r2, r3
   813f2:	460f      	mov	r7, r1
   813f4:	4614      	mov	r4, r2
   813f6:	461d      	mov	r5, r3
   813f8:	f101 31ff 	add.w	r1, r1, #4294967295
   813fc:	d1ee      	bne.n	813dc <_vfiprintf_r+0x3b4>
   813fe:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81402:	ebc7 0309 	rsb	r3, r7, r9
   81406:	9305      	str	r3, [sp, #20]
   81408:	e742      	b.n	81290 <_vfiprintf_r+0x268>
   8140a:	f04a 0a10 	orr.w	sl, sl, #16
   8140e:	f01a 0320 	ands.w	r3, sl, #32
   81412:	9004      	str	r0, [sp, #16]
   81414:	46ac      	mov	ip, r5
   81416:	f47f af0c 	bne.w	81232 <_vfiprintf_r+0x20a>
   8141a:	f01a 0210 	ands.w	r2, sl, #16
   8141e:	f040 8311 	bne.w	81a44 <_vfiprintf_r+0xa1c>
   81422:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   81426:	f000 830d 	beq.w	81a44 <_vfiprintf_r+0xa1c>
   8142a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8142e:	4613      	mov	r3, r2
   81430:	f8bb 4000 	ldrh.w	r4, [fp]
   81434:	f10b 0b04 	add.w	fp, fp, #4
   81438:	2500      	movs	r5, #0
   8143a:	f8cd b020 	str.w	fp, [sp, #32]
   8143e:	e704      	b.n	8124a <_vfiprintf_r+0x222>
   81440:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81444:	2000      	movs	r0, #0
   81446:	f818 3b01 	ldrb.w	r3, [r8], #1
   8144a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8144e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81452:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81456:	2a09      	cmp	r2, #9
   81458:	d9f5      	bls.n	81446 <_vfiprintf_r+0x41e>
   8145a:	e654      	b.n	81106 <_vfiprintf_r+0xde>
   8145c:	f04a 0a10 	orr.w	sl, sl, #16
   81460:	f01a 0f20 	tst.w	sl, #32
   81464:	9004      	str	r0, [sp, #16]
   81466:	46ac      	mov	ip, r5
   81468:	f47f af73 	bne.w	81352 <_vfiprintf_r+0x32a>
   8146c:	f01a 0f10 	tst.w	sl, #16
   81470:	f040 82ef 	bne.w	81a52 <_vfiprintf_r+0xa2a>
   81474:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81478:	f000 82eb 	beq.w	81a52 <_vfiprintf_r+0xa2a>
   8147c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81480:	2500      	movs	r5, #0
   81482:	f8bb 4000 	ldrh.w	r4, [fp]
   81486:	f10b 0b04 	add.w	fp, fp, #4
   8148a:	2301      	movs	r3, #1
   8148c:	f8cd b020 	str.w	fp, [sp, #32]
   81490:	e6db      	b.n	8124a <_vfiprintf_r+0x222>
   81492:	46ac      	mov	ip, r5
   81494:	4d51      	ldr	r5, [pc, #324]	; (815dc <_vfiprintf_r+0x5b4>)
   81496:	f01a 0f20 	tst.w	sl, #32
   8149a:	9004      	str	r0, [sp, #16]
   8149c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   814a0:	950a      	str	r5, [sp, #40]	; 0x28
   814a2:	f000 80f0 	beq.w	81686 <_vfiprintf_r+0x65e>
   814a6:	9d08      	ldr	r5, [sp, #32]
   814a8:	1dea      	adds	r2, r5, #7
   814aa:	f022 0207 	bic.w	r2, r2, #7
   814ae:	f102 0b08 	add.w	fp, r2, #8
   814b2:	f8cd b020 	str.w	fp, [sp, #32]
   814b6:	e9d2 4500 	ldrd	r4, r5, [r2]
   814ba:	f01a 0f01 	tst.w	sl, #1
   814be:	f000 82aa 	beq.w	81a16 <_vfiprintf_r+0x9ee>
   814c2:	ea54 0b05 	orrs.w	fp, r4, r5
   814c6:	f000 82a6 	beq.w	81a16 <_vfiprintf_r+0x9ee>
   814ca:	2230      	movs	r2, #48	; 0x30
   814cc:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   814d0:	f04a 0a02 	orr.w	sl, sl, #2
   814d4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   814d8:	2302      	movs	r3, #2
   814da:	e6b6      	b.n	8124a <_vfiprintf_r+0x222>
   814dc:	9b08      	ldr	r3, [sp, #32]
   814de:	f8dd b020 	ldr.w	fp, [sp, #32]
   814e2:	681b      	ldr	r3, [r3, #0]
   814e4:	2401      	movs	r4, #1
   814e6:	f04f 0500 	mov.w	r5, #0
   814ea:	f10b 0b04 	add.w	fp, fp, #4
   814ee:	9004      	str	r0, [sp, #16]
   814f0:	9403      	str	r4, [sp, #12]
   814f2:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   814f6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   814fa:	f8cd b020 	str.w	fp, [sp, #32]
   814fe:	9405      	str	r4, [sp, #20]
   81500:	af16      	add	r7, sp, #88	; 0x58
   81502:	f04f 0c00 	mov.w	ip, #0
   81506:	e6d0      	b.n	812aa <_vfiprintf_r+0x282>
   81508:	f01a 0f20 	tst.w	sl, #32
   8150c:	9004      	str	r0, [sp, #16]
   8150e:	46ac      	mov	ip, r5
   81510:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81514:	f47f af38 	bne.w	81388 <_vfiprintf_r+0x360>
   81518:	f01a 0f10 	tst.w	sl, #16
   8151c:	f040 82a7 	bne.w	81a6e <_vfiprintf_r+0xa46>
   81520:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81524:	f000 82a3 	beq.w	81a6e <_vfiprintf_r+0xa46>
   81528:	f8dd b020 	ldr.w	fp, [sp, #32]
   8152c:	f9bb 4000 	ldrsh.w	r4, [fp]
   81530:	f10b 0b04 	add.w	fp, fp, #4
   81534:	17e5      	asrs	r5, r4, #31
   81536:	4622      	mov	r2, r4
   81538:	462b      	mov	r3, r5
   8153a:	f8cd b020 	str.w	fp, [sp, #32]
   8153e:	e72d      	b.n	8139c <_vfiprintf_r+0x374>
   81540:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81544:	f898 3000 	ldrb.w	r3, [r8]
   81548:	e5db      	b.n	81102 <_vfiprintf_r+0xda>
   8154a:	f898 3000 	ldrb.w	r3, [r8]
   8154e:	4642      	mov	r2, r8
   81550:	2b6c      	cmp	r3, #108	; 0x6c
   81552:	bf03      	ittte	eq
   81554:	f108 0801 	addeq.w	r8, r8, #1
   81558:	f04a 0a20 	orreq.w	sl, sl, #32
   8155c:	7853      	ldrbeq	r3, [r2, #1]
   8155e:	f04a 0a10 	orrne.w	sl, sl, #16
   81562:	e5ce      	b.n	81102 <_vfiprintf_r+0xda>
   81564:	f01a 0f20 	tst.w	sl, #32
   81568:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8156c:	f000 82f7 	beq.w	81b5e <_vfiprintf_r+0xb36>
   81570:	9c08      	ldr	r4, [sp, #32]
   81572:	6821      	ldr	r1, [r4, #0]
   81574:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81576:	17e5      	asrs	r5, r4, #31
   81578:	462b      	mov	r3, r5
   8157a:	9d08      	ldr	r5, [sp, #32]
   8157c:	4622      	mov	r2, r4
   8157e:	3504      	adds	r5, #4
   81580:	9508      	str	r5, [sp, #32]
   81582:	e9c1 2300 	strd	r2, r3, [r1]
   81586:	e582      	b.n	8108e <_vfiprintf_r+0x66>
   81588:	9c08      	ldr	r4, [sp, #32]
   8158a:	46ac      	mov	ip, r5
   8158c:	6827      	ldr	r7, [r4, #0]
   8158e:	f04f 0500 	mov.w	r5, #0
   81592:	9004      	str	r0, [sp, #16]
   81594:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81598:	3404      	adds	r4, #4
   8159a:	2f00      	cmp	r7, #0
   8159c:	f000 8332 	beq.w	81c04 <_vfiprintf_r+0xbdc>
   815a0:	f1bc 0f00 	cmp.w	ip, #0
   815a4:	4638      	mov	r0, r7
   815a6:	f2c0 8307 	blt.w	81bb8 <_vfiprintf_r+0xb90>
   815aa:	4662      	mov	r2, ip
   815ac:	2100      	movs	r1, #0
   815ae:	f8cd c004 	str.w	ip, [sp, #4]
   815b2:	f001 fbb1 	bl	82d18 <memchr>
   815b6:	f8dd c004 	ldr.w	ip, [sp, #4]
   815ba:	2800      	cmp	r0, #0
   815bc:	f000 833a 	beq.w	81c34 <_vfiprintf_r+0xc0c>
   815c0:	1bc0      	subs	r0, r0, r7
   815c2:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   815c6:	4560      	cmp	r0, ip
   815c8:	bfa8      	it	ge
   815ca:	4660      	movge	r0, ip
   815cc:	9005      	str	r0, [sp, #20]
   815ce:	9408      	str	r4, [sp, #32]
   815d0:	9507      	str	r5, [sp, #28]
   815d2:	f04f 0c00 	mov.w	ip, #0
   815d6:	e65b      	b.n	81290 <_vfiprintf_r+0x268>
   815d8:	00083da8 	.word	0x00083da8
   815dc:	00083d68 	.word	0x00083d68
   815e0:	9b08      	ldr	r3, [sp, #32]
   815e2:	f8dd b020 	ldr.w	fp, [sp, #32]
   815e6:	9004      	str	r0, [sp, #16]
   815e8:	48b2      	ldr	r0, [pc, #712]	; (818b4 <_vfiprintf_r+0x88c>)
   815ea:	681c      	ldr	r4, [r3, #0]
   815ec:	2230      	movs	r2, #48	; 0x30
   815ee:	2378      	movs	r3, #120	; 0x78
   815f0:	f10b 0b04 	add.w	fp, fp, #4
   815f4:	46ac      	mov	ip, r5
   815f6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   815fa:	f04a 0a02 	orr.w	sl, sl, #2
   815fe:	f8cd b020 	str.w	fp, [sp, #32]
   81602:	2500      	movs	r5, #0
   81604:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81608:	900a      	str	r0, [sp, #40]	; 0x28
   8160a:	2302      	movs	r3, #2
   8160c:	e61d      	b.n	8124a <_vfiprintf_r+0x222>
   8160e:	f04a 0a20 	orr.w	sl, sl, #32
   81612:	f898 3000 	ldrb.w	r3, [r8]
   81616:	e574      	b.n	81102 <_vfiprintf_r+0xda>
   81618:	f8dd b020 	ldr.w	fp, [sp, #32]
   8161c:	f8db 0000 	ldr.w	r0, [fp]
   81620:	f10b 0304 	add.w	r3, fp, #4
   81624:	2800      	cmp	r0, #0
   81626:	f6ff adf7 	blt.w	81218 <_vfiprintf_r+0x1f0>
   8162a:	9308      	str	r3, [sp, #32]
   8162c:	f898 3000 	ldrb.w	r3, [r8]
   81630:	e567      	b.n	81102 <_vfiprintf_r+0xda>
   81632:	f898 3000 	ldrb.w	r3, [r8]
   81636:	212b      	movs	r1, #43	; 0x2b
   81638:	e563      	b.n	81102 <_vfiprintf_r+0xda>
   8163a:	f898 3000 	ldrb.w	r3, [r8]
   8163e:	f108 0401 	add.w	r4, r8, #1
   81642:	2b2a      	cmp	r3, #42	; 0x2a
   81644:	f000 8305 	beq.w	81c52 <_vfiprintf_r+0xc2a>
   81648:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8164c:	2a09      	cmp	r2, #9
   8164e:	bf98      	it	ls
   81650:	2500      	movls	r5, #0
   81652:	f200 82fa 	bhi.w	81c4a <_vfiprintf_r+0xc22>
   81656:	f814 3b01 	ldrb.w	r3, [r4], #1
   8165a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8165e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81662:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81666:	2a09      	cmp	r2, #9
   81668:	d9f5      	bls.n	81656 <_vfiprintf_r+0x62e>
   8166a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   8166e:	46a0      	mov	r8, r4
   81670:	e549      	b.n	81106 <_vfiprintf_r+0xde>
   81672:	4c90      	ldr	r4, [pc, #576]	; (818b4 <_vfiprintf_r+0x88c>)
   81674:	f01a 0f20 	tst.w	sl, #32
   81678:	9004      	str	r0, [sp, #16]
   8167a:	46ac      	mov	ip, r5
   8167c:	940a      	str	r4, [sp, #40]	; 0x28
   8167e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81682:	f47f af10 	bne.w	814a6 <_vfiprintf_r+0x47e>
   81686:	f01a 0f10 	tst.w	sl, #16
   8168a:	f040 81ea 	bne.w	81a62 <_vfiprintf_r+0xa3a>
   8168e:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81692:	f000 81e6 	beq.w	81a62 <_vfiprintf_r+0xa3a>
   81696:	f8dd b020 	ldr.w	fp, [sp, #32]
   8169a:	2500      	movs	r5, #0
   8169c:	f8bb 4000 	ldrh.w	r4, [fp]
   816a0:	f10b 0b04 	add.w	fp, fp, #4
   816a4:	f8cd b020 	str.w	fp, [sp, #32]
   816a8:	e707      	b.n	814ba <_vfiprintf_r+0x492>
   816aa:	f898 3000 	ldrb.w	r3, [r8]
   816ae:	2900      	cmp	r1, #0
   816b0:	f47f ad27 	bne.w	81102 <_vfiprintf_r+0xda>
   816b4:	2120      	movs	r1, #32
   816b6:	e524      	b.n	81102 <_vfiprintf_r+0xda>
   816b8:	f04a 0a01 	orr.w	sl, sl, #1
   816bc:	f898 3000 	ldrb.w	r3, [r8]
   816c0:	e51f      	b.n	81102 <_vfiprintf_r+0xda>
   816c2:	9004      	str	r0, [sp, #16]
   816c4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   816c8:	2b00      	cmp	r3, #0
   816ca:	f000 80f9 	beq.w	818c0 <_vfiprintf_r+0x898>
   816ce:	2501      	movs	r5, #1
   816d0:	f04f 0b00 	mov.w	fp, #0
   816d4:	9503      	str	r5, [sp, #12]
   816d6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   816da:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   816de:	9505      	str	r5, [sp, #20]
   816e0:	af16      	add	r7, sp, #88	; 0x58
   816e2:	e70e      	b.n	81502 <_vfiprintf_r+0x4da>
   816e4:	9806      	ldr	r0, [sp, #24]
   816e6:	9902      	ldr	r1, [sp, #8]
   816e8:	aa13      	add	r2, sp, #76	; 0x4c
   816ea:	f7ff fc61 	bl	80fb0 <__sprint_r.part.0>
   816ee:	2800      	cmp	r0, #0
   816f0:	f040 80ed 	bne.w	818ce <_vfiprintf_r+0x8a6>
   816f4:	9814      	ldr	r0, [sp, #80]	; 0x50
   816f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   816f8:	1c43      	adds	r3, r0, #1
   816fa:	46cc      	mov	ip, r9
   816fc:	e5fe      	b.n	812fc <_vfiprintf_r+0x2d4>
   816fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81700:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81702:	1c59      	adds	r1, r3, #1
   81704:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81708:	b168      	cbz	r0, 81726 <_vfiprintf_r+0x6fe>
   8170a:	3201      	adds	r2, #1
   8170c:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81710:	2301      	movs	r3, #1
   81712:	2907      	cmp	r1, #7
   81714:	9215      	str	r2, [sp, #84]	; 0x54
   81716:	9114      	str	r1, [sp, #80]	; 0x50
   81718:	e886 0009 	stmia.w	r6, {r0, r3}
   8171c:	f300 8160 	bgt.w	819e0 <_vfiprintf_r+0x9b8>
   81720:	460b      	mov	r3, r1
   81722:	3608      	adds	r6, #8
   81724:	3101      	adds	r1, #1
   81726:	9c07      	ldr	r4, [sp, #28]
   81728:	b164      	cbz	r4, 81744 <_vfiprintf_r+0x71c>
   8172a:	3202      	adds	r2, #2
   8172c:	a812      	add	r0, sp, #72	; 0x48
   8172e:	2302      	movs	r3, #2
   81730:	2907      	cmp	r1, #7
   81732:	9215      	str	r2, [sp, #84]	; 0x54
   81734:	9114      	str	r1, [sp, #80]	; 0x50
   81736:	e886 0009 	stmia.w	r6, {r0, r3}
   8173a:	f300 8157 	bgt.w	819ec <_vfiprintf_r+0x9c4>
   8173e:	460b      	mov	r3, r1
   81740:	3608      	adds	r6, #8
   81742:	3101      	adds	r1, #1
   81744:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81746:	2d80      	cmp	r5, #128	; 0x80
   81748:	f000 8101 	beq.w	8194e <_vfiprintf_r+0x926>
   8174c:	9d05      	ldr	r5, [sp, #20]
   8174e:	ebc5 040c 	rsb	r4, r5, ip
   81752:	2c00      	cmp	r4, #0
   81754:	dd2f      	ble.n	817b6 <_vfiprintf_r+0x78e>
   81756:	2c10      	cmp	r4, #16
   81758:	4d57      	ldr	r5, [pc, #348]	; (818b8 <_vfiprintf_r+0x890>)
   8175a:	dd22      	ble.n	817a2 <_vfiprintf_r+0x77a>
   8175c:	4630      	mov	r0, r6
   8175e:	f04f 0b10 	mov.w	fp, #16
   81762:	462e      	mov	r6, r5
   81764:	4625      	mov	r5, r4
   81766:	9c06      	ldr	r4, [sp, #24]
   81768:	e006      	b.n	81778 <_vfiprintf_r+0x750>
   8176a:	f103 0c02 	add.w	ip, r3, #2
   8176e:	3008      	adds	r0, #8
   81770:	460b      	mov	r3, r1
   81772:	3d10      	subs	r5, #16
   81774:	2d10      	cmp	r5, #16
   81776:	dd10      	ble.n	8179a <_vfiprintf_r+0x772>
   81778:	1c59      	adds	r1, r3, #1
   8177a:	3210      	adds	r2, #16
   8177c:	2907      	cmp	r1, #7
   8177e:	9215      	str	r2, [sp, #84]	; 0x54
   81780:	e880 0840 	stmia.w	r0, {r6, fp}
   81784:	9114      	str	r1, [sp, #80]	; 0x50
   81786:	ddf0      	ble.n	8176a <_vfiprintf_r+0x742>
   81788:	2a00      	cmp	r2, #0
   8178a:	d163      	bne.n	81854 <_vfiprintf_r+0x82c>
   8178c:	3d10      	subs	r5, #16
   8178e:	2d10      	cmp	r5, #16
   81790:	f04f 0c01 	mov.w	ip, #1
   81794:	4613      	mov	r3, r2
   81796:	4648      	mov	r0, r9
   81798:	dcee      	bgt.n	81778 <_vfiprintf_r+0x750>
   8179a:	462c      	mov	r4, r5
   8179c:	4661      	mov	r1, ip
   8179e:	4635      	mov	r5, r6
   817a0:	4606      	mov	r6, r0
   817a2:	4422      	add	r2, r4
   817a4:	2907      	cmp	r1, #7
   817a6:	9215      	str	r2, [sp, #84]	; 0x54
   817a8:	6035      	str	r5, [r6, #0]
   817aa:	6074      	str	r4, [r6, #4]
   817ac:	9114      	str	r1, [sp, #80]	; 0x50
   817ae:	f300 80c1 	bgt.w	81934 <_vfiprintf_r+0x90c>
   817b2:	3608      	adds	r6, #8
   817b4:	3101      	adds	r1, #1
   817b6:	9d05      	ldr	r5, [sp, #20]
   817b8:	2907      	cmp	r1, #7
   817ba:	442a      	add	r2, r5
   817bc:	9215      	str	r2, [sp, #84]	; 0x54
   817be:	6037      	str	r7, [r6, #0]
   817c0:	6075      	str	r5, [r6, #4]
   817c2:	9114      	str	r1, [sp, #80]	; 0x50
   817c4:	f340 80c1 	ble.w	8194a <_vfiprintf_r+0x922>
   817c8:	2a00      	cmp	r2, #0
   817ca:	f040 8130 	bne.w	81a2e <_vfiprintf_r+0xa06>
   817ce:	9214      	str	r2, [sp, #80]	; 0x50
   817d0:	464e      	mov	r6, r9
   817d2:	f01a 0f04 	tst.w	sl, #4
   817d6:	f000 808b 	beq.w	818f0 <_vfiprintf_r+0x8c8>
   817da:	9d04      	ldr	r5, [sp, #16]
   817dc:	f8dd b00c 	ldr.w	fp, [sp, #12]
   817e0:	ebcb 0405 	rsb	r4, fp, r5
   817e4:	2c00      	cmp	r4, #0
   817e6:	f340 8083 	ble.w	818f0 <_vfiprintf_r+0x8c8>
   817ea:	2c10      	cmp	r4, #16
   817ec:	f340 821e 	ble.w	81c2c <_vfiprintf_r+0xc04>
   817f0:	9914      	ldr	r1, [sp, #80]	; 0x50
   817f2:	4d32      	ldr	r5, [pc, #200]	; (818bc <_vfiprintf_r+0x894>)
   817f4:	2710      	movs	r7, #16
   817f6:	f8dd a018 	ldr.w	sl, [sp, #24]
   817fa:	f8dd b008 	ldr.w	fp, [sp, #8]
   817fe:	e005      	b.n	8180c <_vfiprintf_r+0x7e4>
   81800:	1c88      	adds	r0, r1, #2
   81802:	3608      	adds	r6, #8
   81804:	4619      	mov	r1, r3
   81806:	3c10      	subs	r4, #16
   81808:	2c10      	cmp	r4, #16
   8180a:	dd10      	ble.n	8182e <_vfiprintf_r+0x806>
   8180c:	1c4b      	adds	r3, r1, #1
   8180e:	3210      	adds	r2, #16
   81810:	2b07      	cmp	r3, #7
   81812:	9215      	str	r2, [sp, #84]	; 0x54
   81814:	e886 00a0 	stmia.w	r6, {r5, r7}
   81818:	9314      	str	r3, [sp, #80]	; 0x50
   8181a:	ddf1      	ble.n	81800 <_vfiprintf_r+0x7d8>
   8181c:	2a00      	cmp	r2, #0
   8181e:	d17d      	bne.n	8191c <_vfiprintf_r+0x8f4>
   81820:	3c10      	subs	r4, #16
   81822:	2c10      	cmp	r4, #16
   81824:	f04f 0001 	mov.w	r0, #1
   81828:	4611      	mov	r1, r2
   8182a:	464e      	mov	r6, r9
   8182c:	dcee      	bgt.n	8180c <_vfiprintf_r+0x7e4>
   8182e:	4422      	add	r2, r4
   81830:	2807      	cmp	r0, #7
   81832:	9215      	str	r2, [sp, #84]	; 0x54
   81834:	6035      	str	r5, [r6, #0]
   81836:	6074      	str	r4, [r6, #4]
   81838:	9014      	str	r0, [sp, #80]	; 0x50
   8183a:	dd59      	ble.n	818f0 <_vfiprintf_r+0x8c8>
   8183c:	2a00      	cmp	r2, #0
   8183e:	d14f      	bne.n	818e0 <_vfiprintf_r+0x8b8>
   81840:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81842:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81846:	9d04      	ldr	r5, [sp, #16]
   81848:	45ab      	cmp	fp, r5
   8184a:	bfac      	ite	ge
   8184c:	445c      	addge	r4, fp
   8184e:	1964      	addlt	r4, r4, r5
   81850:	9409      	str	r4, [sp, #36]	; 0x24
   81852:	e05e      	b.n	81912 <_vfiprintf_r+0x8ea>
   81854:	4620      	mov	r0, r4
   81856:	9902      	ldr	r1, [sp, #8]
   81858:	aa13      	add	r2, sp, #76	; 0x4c
   8185a:	f7ff fba9 	bl	80fb0 <__sprint_r.part.0>
   8185e:	2800      	cmp	r0, #0
   81860:	d135      	bne.n	818ce <_vfiprintf_r+0x8a6>
   81862:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81864:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81866:	f103 0c01 	add.w	ip, r3, #1
   8186a:	4648      	mov	r0, r9
   8186c:	e781      	b.n	81772 <_vfiprintf_r+0x74a>
   8186e:	08e0      	lsrs	r0, r4, #3
   81870:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81874:	f004 0207 	and.w	r2, r4, #7
   81878:	08e9      	lsrs	r1, r5, #3
   8187a:	3230      	adds	r2, #48	; 0x30
   8187c:	ea50 0b01 	orrs.w	fp, r0, r1
   81880:	461f      	mov	r7, r3
   81882:	701a      	strb	r2, [r3, #0]
   81884:	4604      	mov	r4, r0
   81886:	460d      	mov	r5, r1
   81888:	f103 33ff 	add.w	r3, r3, #4294967295
   8188c:	d1ef      	bne.n	8186e <_vfiprintf_r+0x846>
   8188e:	f01a 0f01 	tst.w	sl, #1
   81892:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81896:	4639      	mov	r1, r7
   81898:	f000 80b9 	beq.w	81a0e <_vfiprintf_r+0x9e6>
   8189c:	2a30      	cmp	r2, #48	; 0x30
   8189e:	f43f acf4 	beq.w	8128a <_vfiprintf_r+0x262>
   818a2:	461f      	mov	r7, r3
   818a4:	ebc7 0509 	rsb	r5, r7, r9
   818a8:	2330      	movs	r3, #48	; 0x30
   818aa:	9505      	str	r5, [sp, #20]
   818ac:	f801 3c01 	strb.w	r3, [r1, #-1]
   818b0:	e4ee      	b.n	81290 <_vfiprintf_r+0x268>
   818b2:	bf00      	nop
   818b4:	00083d7c 	.word	0x00083d7c
   818b8:	00083d98 	.word	0x00083d98
   818bc:	00083da8 	.word	0x00083da8
   818c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   818c2:	b123      	cbz	r3, 818ce <_vfiprintf_r+0x8a6>
   818c4:	9806      	ldr	r0, [sp, #24]
   818c6:	9902      	ldr	r1, [sp, #8]
   818c8:	aa13      	add	r2, sp, #76	; 0x4c
   818ca:	f7ff fb71 	bl	80fb0 <__sprint_r.part.0>
   818ce:	9c02      	ldr	r4, [sp, #8]
   818d0:	89a3      	ldrh	r3, [r4, #12]
   818d2:	065b      	lsls	r3, r3, #25
   818d4:	f53f ac98 	bmi.w	81208 <_vfiprintf_r+0x1e0>
   818d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   818da:	b031      	add	sp, #196	; 0xc4
   818dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818e0:	9806      	ldr	r0, [sp, #24]
   818e2:	9902      	ldr	r1, [sp, #8]
   818e4:	aa13      	add	r2, sp, #76	; 0x4c
   818e6:	f7ff fb63 	bl	80fb0 <__sprint_r.part.0>
   818ea:	2800      	cmp	r0, #0
   818ec:	d1ef      	bne.n	818ce <_vfiprintf_r+0x8a6>
   818ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
   818f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   818f2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   818f6:	9d04      	ldr	r5, [sp, #16]
   818f8:	45ab      	cmp	fp, r5
   818fa:	bfac      	ite	ge
   818fc:	445c      	addge	r4, fp
   818fe:	1964      	addlt	r4, r4, r5
   81900:	9409      	str	r4, [sp, #36]	; 0x24
   81902:	b132      	cbz	r2, 81912 <_vfiprintf_r+0x8ea>
   81904:	9806      	ldr	r0, [sp, #24]
   81906:	9902      	ldr	r1, [sp, #8]
   81908:	aa13      	add	r2, sp, #76	; 0x4c
   8190a:	f7ff fb51 	bl	80fb0 <__sprint_r.part.0>
   8190e:	2800      	cmp	r0, #0
   81910:	d1dd      	bne.n	818ce <_vfiprintf_r+0x8a6>
   81912:	2000      	movs	r0, #0
   81914:	9014      	str	r0, [sp, #80]	; 0x50
   81916:	464e      	mov	r6, r9
   81918:	f7ff bbb9 	b.w	8108e <_vfiprintf_r+0x66>
   8191c:	4650      	mov	r0, sl
   8191e:	4659      	mov	r1, fp
   81920:	aa13      	add	r2, sp, #76	; 0x4c
   81922:	f7ff fb45 	bl	80fb0 <__sprint_r.part.0>
   81926:	2800      	cmp	r0, #0
   81928:	d1d1      	bne.n	818ce <_vfiprintf_r+0x8a6>
   8192a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8192c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8192e:	1c48      	adds	r0, r1, #1
   81930:	464e      	mov	r6, r9
   81932:	e768      	b.n	81806 <_vfiprintf_r+0x7de>
   81934:	2a00      	cmp	r2, #0
   81936:	f040 80f7 	bne.w	81b28 <_vfiprintf_r+0xb00>
   8193a:	9c05      	ldr	r4, [sp, #20]
   8193c:	2301      	movs	r3, #1
   8193e:	9720      	str	r7, [sp, #128]	; 0x80
   81940:	9421      	str	r4, [sp, #132]	; 0x84
   81942:	9415      	str	r4, [sp, #84]	; 0x54
   81944:	4622      	mov	r2, r4
   81946:	9314      	str	r3, [sp, #80]	; 0x50
   81948:	464e      	mov	r6, r9
   8194a:	3608      	adds	r6, #8
   8194c:	e741      	b.n	817d2 <_vfiprintf_r+0x7aa>
   8194e:	9d04      	ldr	r5, [sp, #16]
   81950:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81954:	ebcb 0405 	rsb	r4, fp, r5
   81958:	2c00      	cmp	r4, #0
   8195a:	f77f aef7 	ble.w	8174c <_vfiprintf_r+0x724>
   8195e:	2c10      	cmp	r4, #16
   81960:	4da6      	ldr	r5, [pc, #664]	; (81bfc <_vfiprintf_r+0xbd4>)
   81962:	f340 8170 	ble.w	81c46 <_vfiprintf_r+0xc1e>
   81966:	4629      	mov	r1, r5
   81968:	f04f 0b10 	mov.w	fp, #16
   8196c:	4625      	mov	r5, r4
   8196e:	4664      	mov	r4, ip
   81970:	46b4      	mov	ip, r6
   81972:	460e      	mov	r6, r1
   81974:	e006      	b.n	81984 <_vfiprintf_r+0x95c>
   81976:	1c98      	adds	r0, r3, #2
   81978:	f10c 0c08 	add.w	ip, ip, #8
   8197c:	460b      	mov	r3, r1
   8197e:	3d10      	subs	r5, #16
   81980:	2d10      	cmp	r5, #16
   81982:	dd0f      	ble.n	819a4 <_vfiprintf_r+0x97c>
   81984:	1c59      	adds	r1, r3, #1
   81986:	3210      	adds	r2, #16
   81988:	2907      	cmp	r1, #7
   8198a:	9215      	str	r2, [sp, #84]	; 0x54
   8198c:	e88c 0840 	stmia.w	ip, {r6, fp}
   81990:	9114      	str	r1, [sp, #80]	; 0x50
   81992:	ddf0      	ble.n	81976 <_vfiprintf_r+0x94e>
   81994:	b9ba      	cbnz	r2, 819c6 <_vfiprintf_r+0x99e>
   81996:	3d10      	subs	r5, #16
   81998:	2d10      	cmp	r5, #16
   8199a:	f04f 0001 	mov.w	r0, #1
   8199e:	4613      	mov	r3, r2
   819a0:	46cc      	mov	ip, r9
   819a2:	dcef      	bgt.n	81984 <_vfiprintf_r+0x95c>
   819a4:	4633      	mov	r3, r6
   819a6:	4666      	mov	r6, ip
   819a8:	46a4      	mov	ip, r4
   819aa:	462c      	mov	r4, r5
   819ac:	461d      	mov	r5, r3
   819ae:	4422      	add	r2, r4
   819b0:	2807      	cmp	r0, #7
   819b2:	9215      	str	r2, [sp, #84]	; 0x54
   819b4:	6035      	str	r5, [r6, #0]
   819b6:	6074      	str	r4, [r6, #4]
   819b8:	9014      	str	r0, [sp, #80]	; 0x50
   819ba:	f300 80af 	bgt.w	81b1c <_vfiprintf_r+0xaf4>
   819be:	3608      	adds	r6, #8
   819c0:	1c41      	adds	r1, r0, #1
   819c2:	4603      	mov	r3, r0
   819c4:	e6c2      	b.n	8174c <_vfiprintf_r+0x724>
   819c6:	9806      	ldr	r0, [sp, #24]
   819c8:	9902      	ldr	r1, [sp, #8]
   819ca:	aa13      	add	r2, sp, #76	; 0x4c
   819cc:	f7ff faf0 	bl	80fb0 <__sprint_r.part.0>
   819d0:	2800      	cmp	r0, #0
   819d2:	f47f af7c 	bne.w	818ce <_vfiprintf_r+0x8a6>
   819d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   819d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   819da:	1c58      	adds	r0, r3, #1
   819dc:	46cc      	mov	ip, r9
   819de:	e7ce      	b.n	8197e <_vfiprintf_r+0x956>
   819e0:	2a00      	cmp	r2, #0
   819e2:	d179      	bne.n	81ad8 <_vfiprintf_r+0xab0>
   819e4:	4619      	mov	r1, r3
   819e6:	464e      	mov	r6, r9
   819e8:	4613      	mov	r3, r2
   819ea:	e69c      	b.n	81726 <_vfiprintf_r+0x6fe>
   819ec:	2a00      	cmp	r2, #0
   819ee:	f040 8084 	bne.w	81afa <_vfiprintf_r+0xad2>
   819f2:	2101      	movs	r1, #1
   819f4:	4613      	mov	r3, r2
   819f6:	464e      	mov	r6, r9
   819f8:	e6a4      	b.n	81744 <_vfiprintf_r+0x71c>
   819fa:	464f      	mov	r7, r9
   819fc:	e448      	b.n	81290 <_vfiprintf_r+0x268>
   819fe:	2d00      	cmp	r5, #0
   81a00:	bf08      	it	eq
   81a02:	2c0a      	cmpeq	r4, #10
   81a04:	d246      	bcs.n	81a94 <_vfiprintf_r+0xa6c>
   81a06:	3430      	adds	r4, #48	; 0x30
   81a08:	af30      	add	r7, sp, #192	; 0xc0
   81a0a:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81a0e:	ebc7 0309 	rsb	r3, r7, r9
   81a12:	9305      	str	r3, [sp, #20]
   81a14:	e43c      	b.n	81290 <_vfiprintf_r+0x268>
   81a16:	2302      	movs	r3, #2
   81a18:	e417      	b.n	8124a <_vfiprintf_r+0x222>
   81a1a:	2a00      	cmp	r2, #0
   81a1c:	f040 80af 	bne.w	81b7e <_vfiprintf_r+0xb56>
   81a20:	4613      	mov	r3, r2
   81a22:	2101      	movs	r1, #1
   81a24:	464e      	mov	r6, r9
   81a26:	e66d      	b.n	81704 <_vfiprintf_r+0x6dc>
   81a28:	4644      	mov	r4, r8
   81a2a:	f7ff bb58 	b.w	810de <_vfiprintf_r+0xb6>
   81a2e:	9806      	ldr	r0, [sp, #24]
   81a30:	9902      	ldr	r1, [sp, #8]
   81a32:	aa13      	add	r2, sp, #76	; 0x4c
   81a34:	f7ff fabc 	bl	80fb0 <__sprint_r.part.0>
   81a38:	2800      	cmp	r0, #0
   81a3a:	f47f af48 	bne.w	818ce <_vfiprintf_r+0x8a6>
   81a3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a40:	464e      	mov	r6, r9
   81a42:	e6c6      	b.n	817d2 <_vfiprintf_r+0x7aa>
   81a44:	9d08      	ldr	r5, [sp, #32]
   81a46:	682c      	ldr	r4, [r5, #0]
   81a48:	3504      	adds	r5, #4
   81a4a:	9508      	str	r5, [sp, #32]
   81a4c:	2500      	movs	r5, #0
   81a4e:	f7ff bbfc 	b.w	8124a <_vfiprintf_r+0x222>
   81a52:	9d08      	ldr	r5, [sp, #32]
   81a54:	2301      	movs	r3, #1
   81a56:	682c      	ldr	r4, [r5, #0]
   81a58:	3504      	adds	r5, #4
   81a5a:	9508      	str	r5, [sp, #32]
   81a5c:	2500      	movs	r5, #0
   81a5e:	f7ff bbf4 	b.w	8124a <_vfiprintf_r+0x222>
   81a62:	9d08      	ldr	r5, [sp, #32]
   81a64:	682c      	ldr	r4, [r5, #0]
   81a66:	3504      	adds	r5, #4
   81a68:	9508      	str	r5, [sp, #32]
   81a6a:	2500      	movs	r5, #0
   81a6c:	e525      	b.n	814ba <_vfiprintf_r+0x492>
   81a6e:	9d08      	ldr	r5, [sp, #32]
   81a70:	682c      	ldr	r4, [r5, #0]
   81a72:	3504      	adds	r5, #4
   81a74:	9508      	str	r5, [sp, #32]
   81a76:	17e5      	asrs	r5, r4, #31
   81a78:	4622      	mov	r2, r4
   81a7a:	462b      	mov	r3, r5
   81a7c:	e48e      	b.n	8139c <_vfiprintf_r+0x374>
   81a7e:	9806      	ldr	r0, [sp, #24]
   81a80:	9902      	ldr	r1, [sp, #8]
   81a82:	aa13      	add	r2, sp, #76	; 0x4c
   81a84:	f7ff fa94 	bl	80fb0 <__sprint_r.part.0>
   81a88:	2800      	cmp	r0, #0
   81a8a:	f47f af20 	bne.w	818ce <_vfiprintf_r+0x8a6>
   81a8e:	464e      	mov	r6, r9
   81a90:	f7ff bb9a 	b.w	811c8 <_vfiprintf_r+0x1a0>
   81a94:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81a98:	9603      	str	r6, [sp, #12]
   81a9a:	465e      	mov	r6, fp
   81a9c:	46e3      	mov	fp, ip
   81a9e:	4620      	mov	r0, r4
   81aa0:	4629      	mov	r1, r5
   81aa2:	220a      	movs	r2, #10
   81aa4:	2300      	movs	r3, #0
   81aa6:	f001 fe5f 	bl	83768 <__aeabi_uldivmod>
   81aaa:	3230      	adds	r2, #48	; 0x30
   81aac:	7032      	strb	r2, [r6, #0]
   81aae:	4620      	mov	r0, r4
   81ab0:	4629      	mov	r1, r5
   81ab2:	220a      	movs	r2, #10
   81ab4:	2300      	movs	r3, #0
   81ab6:	f001 fe57 	bl	83768 <__aeabi_uldivmod>
   81aba:	4604      	mov	r4, r0
   81abc:	460d      	mov	r5, r1
   81abe:	ea54 0005 	orrs.w	r0, r4, r5
   81ac2:	4637      	mov	r7, r6
   81ac4:	f106 36ff 	add.w	r6, r6, #4294967295
   81ac8:	d1e9      	bne.n	81a9e <_vfiprintf_r+0xa76>
   81aca:	ebc7 0309 	rsb	r3, r7, r9
   81ace:	46dc      	mov	ip, fp
   81ad0:	9e03      	ldr	r6, [sp, #12]
   81ad2:	9305      	str	r3, [sp, #20]
   81ad4:	f7ff bbdc 	b.w	81290 <_vfiprintf_r+0x268>
   81ad8:	9806      	ldr	r0, [sp, #24]
   81ada:	9902      	ldr	r1, [sp, #8]
   81adc:	aa13      	add	r2, sp, #76	; 0x4c
   81ade:	f8cd c004 	str.w	ip, [sp, #4]
   81ae2:	f7ff fa65 	bl	80fb0 <__sprint_r.part.0>
   81ae6:	f8dd c004 	ldr.w	ip, [sp, #4]
   81aea:	2800      	cmp	r0, #0
   81aec:	f47f aeef 	bne.w	818ce <_vfiprintf_r+0x8a6>
   81af0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81af2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81af4:	1c59      	adds	r1, r3, #1
   81af6:	464e      	mov	r6, r9
   81af8:	e615      	b.n	81726 <_vfiprintf_r+0x6fe>
   81afa:	9806      	ldr	r0, [sp, #24]
   81afc:	9902      	ldr	r1, [sp, #8]
   81afe:	aa13      	add	r2, sp, #76	; 0x4c
   81b00:	f8cd c004 	str.w	ip, [sp, #4]
   81b04:	f7ff fa54 	bl	80fb0 <__sprint_r.part.0>
   81b08:	f8dd c004 	ldr.w	ip, [sp, #4]
   81b0c:	2800      	cmp	r0, #0
   81b0e:	f47f aede 	bne.w	818ce <_vfiprintf_r+0x8a6>
   81b12:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b14:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b16:	1c59      	adds	r1, r3, #1
   81b18:	464e      	mov	r6, r9
   81b1a:	e613      	b.n	81744 <_vfiprintf_r+0x71c>
   81b1c:	2a00      	cmp	r2, #0
   81b1e:	d156      	bne.n	81bce <_vfiprintf_r+0xba6>
   81b20:	2101      	movs	r1, #1
   81b22:	4613      	mov	r3, r2
   81b24:	464e      	mov	r6, r9
   81b26:	e611      	b.n	8174c <_vfiprintf_r+0x724>
   81b28:	9806      	ldr	r0, [sp, #24]
   81b2a:	9902      	ldr	r1, [sp, #8]
   81b2c:	aa13      	add	r2, sp, #76	; 0x4c
   81b2e:	f7ff fa3f 	bl	80fb0 <__sprint_r.part.0>
   81b32:	2800      	cmp	r0, #0
   81b34:	f47f aecb 	bne.w	818ce <_vfiprintf_r+0x8a6>
   81b38:	9914      	ldr	r1, [sp, #80]	; 0x50
   81b3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b3c:	3101      	adds	r1, #1
   81b3e:	464e      	mov	r6, r9
   81b40:	e639      	b.n	817b6 <_vfiprintf_r+0x78e>
   81b42:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81b46:	4264      	negs	r4, r4
   81b48:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81b4c:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81b50:	f8cd b01c 	str.w	fp, [sp, #28]
   81b54:	f8cd c014 	str.w	ip, [sp, #20]
   81b58:	2301      	movs	r3, #1
   81b5a:	f7ff bb7e 	b.w	8125a <_vfiprintf_r+0x232>
   81b5e:	f01a 0f10 	tst.w	sl, #16
   81b62:	d11d      	bne.n	81ba0 <_vfiprintf_r+0xb78>
   81b64:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81b68:	d058      	beq.n	81c1c <_vfiprintf_r+0xbf4>
   81b6a:	9d08      	ldr	r5, [sp, #32]
   81b6c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81b70:	682b      	ldr	r3, [r5, #0]
   81b72:	3504      	adds	r5, #4
   81b74:	9508      	str	r5, [sp, #32]
   81b76:	f8a3 b000 	strh.w	fp, [r3]
   81b7a:	f7ff ba88 	b.w	8108e <_vfiprintf_r+0x66>
   81b7e:	9806      	ldr	r0, [sp, #24]
   81b80:	9902      	ldr	r1, [sp, #8]
   81b82:	aa13      	add	r2, sp, #76	; 0x4c
   81b84:	f8cd c004 	str.w	ip, [sp, #4]
   81b88:	f7ff fa12 	bl	80fb0 <__sprint_r.part.0>
   81b8c:	f8dd c004 	ldr.w	ip, [sp, #4]
   81b90:	2800      	cmp	r0, #0
   81b92:	f47f ae9c 	bne.w	818ce <_vfiprintf_r+0x8a6>
   81b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b98:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b9a:	1c59      	adds	r1, r3, #1
   81b9c:	464e      	mov	r6, r9
   81b9e:	e5b1      	b.n	81704 <_vfiprintf_r+0x6dc>
   81ba0:	f8dd b020 	ldr.w	fp, [sp, #32]
   81ba4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81ba6:	f8db 3000 	ldr.w	r3, [fp]
   81baa:	f10b 0b04 	add.w	fp, fp, #4
   81bae:	f8cd b020 	str.w	fp, [sp, #32]
   81bb2:	601c      	str	r4, [r3, #0]
   81bb4:	f7ff ba6b 	b.w	8108e <_vfiprintf_r+0x66>
   81bb8:	9408      	str	r4, [sp, #32]
   81bba:	f001 fc0b 	bl	833d4 <strlen>
   81bbe:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81bc2:	9005      	str	r0, [sp, #20]
   81bc4:	9407      	str	r4, [sp, #28]
   81bc6:	f04f 0c00 	mov.w	ip, #0
   81bca:	f7ff bb61 	b.w	81290 <_vfiprintf_r+0x268>
   81bce:	9806      	ldr	r0, [sp, #24]
   81bd0:	9902      	ldr	r1, [sp, #8]
   81bd2:	aa13      	add	r2, sp, #76	; 0x4c
   81bd4:	f8cd c004 	str.w	ip, [sp, #4]
   81bd8:	f7ff f9ea 	bl	80fb0 <__sprint_r.part.0>
   81bdc:	f8dd c004 	ldr.w	ip, [sp, #4]
   81be0:	2800      	cmp	r0, #0
   81be2:	f47f ae74 	bne.w	818ce <_vfiprintf_r+0x8a6>
   81be6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81be8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bea:	1c59      	adds	r1, r3, #1
   81bec:	464e      	mov	r6, r9
   81bee:	e5ad      	b.n	8174c <_vfiprintf_r+0x724>
   81bf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81bf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bf4:	3301      	adds	r3, #1
   81bf6:	4d02      	ldr	r5, [pc, #8]	; (81c00 <_vfiprintf_r+0xbd8>)
   81bf8:	f7ff bb9a 	b.w	81330 <_vfiprintf_r+0x308>
   81bfc:	00083d98 	.word	0x00083d98
   81c00:	00083da8 	.word	0x00083da8
   81c04:	f1bc 0f06 	cmp.w	ip, #6
   81c08:	bf34      	ite	cc
   81c0a:	4663      	movcc	r3, ip
   81c0c:	2306      	movcs	r3, #6
   81c0e:	9408      	str	r4, [sp, #32]
   81c10:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81c14:	9305      	str	r3, [sp, #20]
   81c16:	9403      	str	r4, [sp, #12]
   81c18:	4f16      	ldr	r7, [pc, #88]	; (81c74 <_vfiprintf_r+0xc4c>)
   81c1a:	e472      	b.n	81502 <_vfiprintf_r+0x4da>
   81c1c:	9c08      	ldr	r4, [sp, #32]
   81c1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81c20:	6823      	ldr	r3, [r4, #0]
   81c22:	3404      	adds	r4, #4
   81c24:	9408      	str	r4, [sp, #32]
   81c26:	601d      	str	r5, [r3, #0]
   81c28:	f7ff ba31 	b.w	8108e <_vfiprintf_r+0x66>
   81c2c:	9814      	ldr	r0, [sp, #80]	; 0x50
   81c2e:	4d12      	ldr	r5, [pc, #72]	; (81c78 <_vfiprintf_r+0xc50>)
   81c30:	3001      	adds	r0, #1
   81c32:	e5fc      	b.n	8182e <_vfiprintf_r+0x806>
   81c34:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81c38:	f8cd c014 	str.w	ip, [sp, #20]
   81c3c:	9507      	str	r5, [sp, #28]
   81c3e:	9408      	str	r4, [sp, #32]
   81c40:	4684      	mov	ip, r0
   81c42:	f7ff bb25 	b.w	81290 <_vfiprintf_r+0x268>
   81c46:	4608      	mov	r0, r1
   81c48:	e6b1      	b.n	819ae <_vfiprintf_r+0x986>
   81c4a:	46a0      	mov	r8, r4
   81c4c:	2500      	movs	r5, #0
   81c4e:	f7ff ba5a 	b.w	81106 <_vfiprintf_r+0xde>
   81c52:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c56:	f898 3001 	ldrb.w	r3, [r8, #1]
   81c5a:	f8db 5000 	ldr.w	r5, [fp]
   81c5e:	f10b 0204 	add.w	r2, fp, #4
   81c62:	2d00      	cmp	r5, #0
   81c64:	9208      	str	r2, [sp, #32]
   81c66:	46a0      	mov	r8, r4
   81c68:	f6bf aa4b 	bge.w	81102 <_vfiprintf_r+0xda>
   81c6c:	f04f 35ff 	mov.w	r5, #4294967295
   81c70:	f7ff ba47 	b.w	81102 <_vfiprintf_r+0xda>
   81c74:	00083d90 	.word	0x00083d90
   81c78:	00083da8 	.word	0x00083da8

00081c7c <__sbprintf>:
   81c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81c80:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81c82:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81c86:	4688      	mov	r8, r1
   81c88:	9719      	str	r7, [sp, #100]	; 0x64
   81c8a:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81c8e:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81c92:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81c96:	9707      	str	r7, [sp, #28]
   81c98:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81c9c:	ac1a      	add	r4, sp, #104	; 0x68
   81c9e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81ca2:	f02a 0a02 	bic.w	sl, sl, #2
   81ca6:	2600      	movs	r6, #0
   81ca8:	4669      	mov	r1, sp
   81caa:	9400      	str	r4, [sp, #0]
   81cac:	9404      	str	r4, [sp, #16]
   81cae:	9502      	str	r5, [sp, #8]
   81cb0:	9505      	str	r5, [sp, #20]
   81cb2:	f8ad a00c 	strh.w	sl, [sp, #12]
   81cb6:	f8ad 900e 	strh.w	r9, [sp, #14]
   81cba:	9709      	str	r7, [sp, #36]	; 0x24
   81cbc:	9606      	str	r6, [sp, #24]
   81cbe:	4605      	mov	r5, r0
   81cc0:	f7ff f9b2 	bl	81028 <_vfiprintf_r>
   81cc4:	1e04      	subs	r4, r0, #0
   81cc6:	db07      	blt.n	81cd8 <__sbprintf+0x5c>
   81cc8:	4628      	mov	r0, r5
   81cca:	4669      	mov	r1, sp
   81ccc:	f000 f92a 	bl	81f24 <_fflush_r>
   81cd0:	42b0      	cmp	r0, r6
   81cd2:	bf18      	it	ne
   81cd4:	f04f 34ff 	movne.w	r4, #4294967295
   81cd8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81cdc:	065b      	lsls	r3, r3, #25
   81cde:	d505      	bpl.n	81cec <__sbprintf+0x70>
   81ce0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81ce8:	f8a8 300c 	strh.w	r3, [r8, #12]
   81cec:	4620      	mov	r0, r4
   81cee:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81cf6:	bf00      	nop

00081cf8 <__swsetup_r>:
   81cf8:	4b2f      	ldr	r3, [pc, #188]	; (81db8 <__swsetup_r+0xc0>)
   81cfa:	b570      	push	{r4, r5, r6, lr}
   81cfc:	4606      	mov	r6, r0
   81cfe:	6818      	ldr	r0, [r3, #0]
   81d00:	460c      	mov	r4, r1
   81d02:	b110      	cbz	r0, 81d0a <__swsetup_r+0x12>
   81d04:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81d06:	2a00      	cmp	r2, #0
   81d08:	d036      	beq.n	81d78 <__swsetup_r+0x80>
   81d0a:	89a5      	ldrh	r5, [r4, #12]
   81d0c:	b2ab      	uxth	r3, r5
   81d0e:	0719      	lsls	r1, r3, #28
   81d10:	d50c      	bpl.n	81d2c <__swsetup_r+0x34>
   81d12:	6922      	ldr	r2, [r4, #16]
   81d14:	b1aa      	cbz	r2, 81d42 <__swsetup_r+0x4a>
   81d16:	f013 0101 	ands.w	r1, r3, #1
   81d1a:	d01e      	beq.n	81d5a <__swsetup_r+0x62>
   81d1c:	6963      	ldr	r3, [r4, #20]
   81d1e:	2100      	movs	r1, #0
   81d20:	425b      	negs	r3, r3
   81d22:	61a3      	str	r3, [r4, #24]
   81d24:	60a1      	str	r1, [r4, #8]
   81d26:	b1f2      	cbz	r2, 81d66 <__swsetup_r+0x6e>
   81d28:	2000      	movs	r0, #0
   81d2a:	bd70      	pop	{r4, r5, r6, pc}
   81d2c:	06da      	lsls	r2, r3, #27
   81d2e:	d53a      	bpl.n	81da6 <__swsetup_r+0xae>
   81d30:	075b      	lsls	r3, r3, #29
   81d32:	d424      	bmi.n	81d7e <__swsetup_r+0x86>
   81d34:	6922      	ldr	r2, [r4, #16]
   81d36:	f045 0308 	orr.w	r3, r5, #8
   81d3a:	81a3      	strh	r3, [r4, #12]
   81d3c:	b29b      	uxth	r3, r3
   81d3e:	2a00      	cmp	r2, #0
   81d40:	d1e9      	bne.n	81d16 <__swsetup_r+0x1e>
   81d42:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81d46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81d4a:	d0e4      	beq.n	81d16 <__swsetup_r+0x1e>
   81d4c:	4630      	mov	r0, r6
   81d4e:	4621      	mov	r1, r4
   81d50:	f000 fcce 	bl	826f0 <__smakebuf_r>
   81d54:	89a3      	ldrh	r3, [r4, #12]
   81d56:	6922      	ldr	r2, [r4, #16]
   81d58:	e7dd      	b.n	81d16 <__swsetup_r+0x1e>
   81d5a:	0798      	lsls	r0, r3, #30
   81d5c:	bf58      	it	pl
   81d5e:	6961      	ldrpl	r1, [r4, #20]
   81d60:	60a1      	str	r1, [r4, #8]
   81d62:	2a00      	cmp	r2, #0
   81d64:	d1e0      	bne.n	81d28 <__swsetup_r+0x30>
   81d66:	89a3      	ldrh	r3, [r4, #12]
   81d68:	061a      	lsls	r2, r3, #24
   81d6a:	d5dd      	bpl.n	81d28 <__swsetup_r+0x30>
   81d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81d70:	81a3      	strh	r3, [r4, #12]
   81d72:	f04f 30ff 	mov.w	r0, #4294967295
   81d76:	bd70      	pop	{r4, r5, r6, pc}
   81d78:	f000 f8f0 	bl	81f5c <__sinit>
   81d7c:	e7c5      	b.n	81d0a <__swsetup_r+0x12>
   81d7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81d80:	b149      	cbz	r1, 81d96 <__swsetup_r+0x9e>
   81d82:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81d86:	4299      	cmp	r1, r3
   81d88:	d003      	beq.n	81d92 <__swsetup_r+0x9a>
   81d8a:	4630      	mov	r0, r6
   81d8c:	f000 fa2a 	bl	821e4 <_free_r>
   81d90:	89a5      	ldrh	r5, [r4, #12]
   81d92:	2300      	movs	r3, #0
   81d94:	6323      	str	r3, [r4, #48]	; 0x30
   81d96:	6922      	ldr	r2, [r4, #16]
   81d98:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81d9c:	2100      	movs	r1, #0
   81d9e:	b2ad      	uxth	r5, r5
   81da0:	6022      	str	r2, [r4, #0]
   81da2:	6061      	str	r1, [r4, #4]
   81da4:	e7c7      	b.n	81d36 <__swsetup_r+0x3e>
   81da6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81daa:	2309      	movs	r3, #9
   81dac:	6033      	str	r3, [r6, #0]
   81dae:	f04f 30ff 	mov.w	r0, #4294967295
   81db2:	81a5      	strh	r5, [r4, #12]
   81db4:	bd70      	pop	{r4, r5, r6, pc}
   81db6:	bf00      	nop
   81db8:	20070560 	.word	0x20070560

00081dbc <register_fini>:
   81dbc:	4b02      	ldr	r3, [pc, #8]	; (81dc8 <register_fini+0xc>)
   81dbe:	b113      	cbz	r3, 81dc6 <register_fini+0xa>
   81dc0:	4802      	ldr	r0, [pc, #8]	; (81dcc <register_fini+0x10>)
   81dc2:	f000 b805 	b.w	81dd0 <atexit>
   81dc6:	4770      	bx	lr
   81dc8:	00000000 	.word	0x00000000
   81dcc:	00082059 	.word	0x00082059

00081dd0 <atexit>:
   81dd0:	4601      	mov	r1, r0
   81dd2:	2000      	movs	r0, #0
   81dd4:	4602      	mov	r2, r0
   81dd6:	4603      	mov	r3, r0
   81dd8:	f001 bbca 	b.w	83570 <__register_exitproc>

00081ddc <__sflush_r>:
   81ddc:	898b      	ldrh	r3, [r1, #12]
   81dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81de2:	b29a      	uxth	r2, r3
   81de4:	460d      	mov	r5, r1
   81de6:	0711      	lsls	r1, r2, #28
   81de8:	4680      	mov	r8, r0
   81dea:	d43c      	bmi.n	81e66 <__sflush_r+0x8a>
   81dec:	686a      	ldr	r2, [r5, #4]
   81dee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81df2:	2a00      	cmp	r2, #0
   81df4:	81ab      	strh	r3, [r5, #12]
   81df6:	dd59      	ble.n	81eac <__sflush_r+0xd0>
   81df8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81dfa:	2c00      	cmp	r4, #0
   81dfc:	d04b      	beq.n	81e96 <__sflush_r+0xba>
   81dfe:	b29b      	uxth	r3, r3
   81e00:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81e04:	2100      	movs	r1, #0
   81e06:	b292      	uxth	r2, r2
   81e08:	f8d8 6000 	ldr.w	r6, [r8]
   81e0c:	f8c8 1000 	str.w	r1, [r8]
   81e10:	2a00      	cmp	r2, #0
   81e12:	d04f      	beq.n	81eb4 <__sflush_r+0xd8>
   81e14:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81e16:	075f      	lsls	r7, r3, #29
   81e18:	d505      	bpl.n	81e26 <__sflush_r+0x4a>
   81e1a:	6869      	ldr	r1, [r5, #4]
   81e1c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81e1e:	1a52      	subs	r2, r2, r1
   81e20:	b10b      	cbz	r3, 81e26 <__sflush_r+0x4a>
   81e22:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81e24:	1ad2      	subs	r2, r2, r3
   81e26:	4640      	mov	r0, r8
   81e28:	69e9      	ldr	r1, [r5, #28]
   81e2a:	2300      	movs	r3, #0
   81e2c:	47a0      	blx	r4
   81e2e:	1c44      	adds	r4, r0, #1
   81e30:	d04a      	beq.n	81ec8 <__sflush_r+0xec>
   81e32:	89ab      	ldrh	r3, [r5, #12]
   81e34:	692a      	ldr	r2, [r5, #16]
   81e36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81e3a:	b29b      	uxth	r3, r3
   81e3c:	2100      	movs	r1, #0
   81e3e:	602a      	str	r2, [r5, #0]
   81e40:	04da      	lsls	r2, r3, #19
   81e42:	81ab      	strh	r3, [r5, #12]
   81e44:	6069      	str	r1, [r5, #4]
   81e46:	d44c      	bmi.n	81ee2 <__sflush_r+0x106>
   81e48:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81e4a:	f8c8 6000 	str.w	r6, [r8]
   81e4e:	b311      	cbz	r1, 81e96 <__sflush_r+0xba>
   81e50:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81e54:	4299      	cmp	r1, r3
   81e56:	d002      	beq.n	81e5e <__sflush_r+0x82>
   81e58:	4640      	mov	r0, r8
   81e5a:	f000 f9c3 	bl	821e4 <_free_r>
   81e5e:	2000      	movs	r0, #0
   81e60:	6328      	str	r0, [r5, #48]	; 0x30
   81e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e66:	692e      	ldr	r6, [r5, #16]
   81e68:	b1ae      	cbz	r6, 81e96 <__sflush_r+0xba>
   81e6a:	0791      	lsls	r1, r2, #30
   81e6c:	682c      	ldr	r4, [r5, #0]
   81e6e:	bf0c      	ite	eq
   81e70:	696b      	ldreq	r3, [r5, #20]
   81e72:	2300      	movne	r3, #0
   81e74:	602e      	str	r6, [r5, #0]
   81e76:	1ba4      	subs	r4, r4, r6
   81e78:	60ab      	str	r3, [r5, #8]
   81e7a:	e00a      	b.n	81e92 <__sflush_r+0xb6>
   81e7c:	4632      	mov	r2, r6
   81e7e:	4623      	mov	r3, r4
   81e80:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81e82:	4640      	mov	r0, r8
   81e84:	69e9      	ldr	r1, [r5, #28]
   81e86:	47b8      	blx	r7
   81e88:	2800      	cmp	r0, #0
   81e8a:	ebc0 0404 	rsb	r4, r0, r4
   81e8e:	4406      	add	r6, r0
   81e90:	dd04      	ble.n	81e9c <__sflush_r+0xc0>
   81e92:	2c00      	cmp	r4, #0
   81e94:	dcf2      	bgt.n	81e7c <__sflush_r+0xa0>
   81e96:	2000      	movs	r0, #0
   81e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e9c:	89ab      	ldrh	r3, [r5, #12]
   81e9e:	f04f 30ff 	mov.w	r0, #4294967295
   81ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81ea6:	81ab      	strh	r3, [r5, #12]
   81ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81eac:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81eae:	2a00      	cmp	r2, #0
   81eb0:	dca2      	bgt.n	81df8 <__sflush_r+0x1c>
   81eb2:	e7f0      	b.n	81e96 <__sflush_r+0xba>
   81eb4:	2301      	movs	r3, #1
   81eb6:	4640      	mov	r0, r8
   81eb8:	69e9      	ldr	r1, [r5, #28]
   81eba:	47a0      	blx	r4
   81ebc:	1c43      	adds	r3, r0, #1
   81ebe:	4602      	mov	r2, r0
   81ec0:	d01e      	beq.n	81f00 <__sflush_r+0x124>
   81ec2:	89ab      	ldrh	r3, [r5, #12]
   81ec4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81ec6:	e7a6      	b.n	81e16 <__sflush_r+0x3a>
   81ec8:	f8d8 3000 	ldr.w	r3, [r8]
   81ecc:	b95b      	cbnz	r3, 81ee6 <__sflush_r+0x10a>
   81ece:	89aa      	ldrh	r2, [r5, #12]
   81ed0:	6929      	ldr	r1, [r5, #16]
   81ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   81ed6:	b292      	uxth	r2, r2
   81ed8:	606b      	str	r3, [r5, #4]
   81eda:	04d3      	lsls	r3, r2, #19
   81edc:	81aa      	strh	r2, [r5, #12]
   81ede:	6029      	str	r1, [r5, #0]
   81ee0:	d5b2      	bpl.n	81e48 <__sflush_r+0x6c>
   81ee2:	6528      	str	r0, [r5, #80]	; 0x50
   81ee4:	e7b0      	b.n	81e48 <__sflush_r+0x6c>
   81ee6:	2b1d      	cmp	r3, #29
   81ee8:	d001      	beq.n	81eee <__sflush_r+0x112>
   81eea:	2b16      	cmp	r3, #22
   81eec:	d113      	bne.n	81f16 <__sflush_r+0x13a>
   81eee:	89a9      	ldrh	r1, [r5, #12]
   81ef0:	692b      	ldr	r3, [r5, #16]
   81ef2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   81ef6:	2200      	movs	r2, #0
   81ef8:	81a9      	strh	r1, [r5, #12]
   81efa:	602b      	str	r3, [r5, #0]
   81efc:	606a      	str	r2, [r5, #4]
   81efe:	e7a3      	b.n	81e48 <__sflush_r+0x6c>
   81f00:	f8d8 3000 	ldr.w	r3, [r8]
   81f04:	2b00      	cmp	r3, #0
   81f06:	d0dc      	beq.n	81ec2 <__sflush_r+0xe6>
   81f08:	2b1d      	cmp	r3, #29
   81f0a:	d001      	beq.n	81f10 <__sflush_r+0x134>
   81f0c:	2b16      	cmp	r3, #22
   81f0e:	d1c5      	bne.n	81e9c <__sflush_r+0xc0>
   81f10:	f8c8 6000 	str.w	r6, [r8]
   81f14:	e7bf      	b.n	81e96 <__sflush_r+0xba>
   81f16:	89ab      	ldrh	r3, [r5, #12]
   81f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f1c:	81ab      	strh	r3, [r5, #12]
   81f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f22:	bf00      	nop

00081f24 <_fflush_r>:
   81f24:	b510      	push	{r4, lr}
   81f26:	4604      	mov	r4, r0
   81f28:	b082      	sub	sp, #8
   81f2a:	b108      	cbz	r0, 81f30 <_fflush_r+0xc>
   81f2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81f2e:	b153      	cbz	r3, 81f46 <_fflush_r+0x22>
   81f30:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81f34:	b908      	cbnz	r0, 81f3a <_fflush_r+0x16>
   81f36:	b002      	add	sp, #8
   81f38:	bd10      	pop	{r4, pc}
   81f3a:	4620      	mov	r0, r4
   81f3c:	b002      	add	sp, #8
   81f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81f42:	f7ff bf4b 	b.w	81ddc <__sflush_r>
   81f46:	9101      	str	r1, [sp, #4]
   81f48:	f000 f808 	bl	81f5c <__sinit>
   81f4c:	9901      	ldr	r1, [sp, #4]
   81f4e:	e7ef      	b.n	81f30 <_fflush_r+0xc>

00081f50 <_cleanup_r>:
   81f50:	4901      	ldr	r1, [pc, #4]	; (81f58 <_cleanup_r+0x8>)
   81f52:	f000 bb9f 	b.w	82694 <_fwalk>
   81f56:	bf00      	nop
   81f58:	000836bd 	.word	0x000836bd

00081f5c <__sinit>:
   81f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81f60:	6b84      	ldr	r4, [r0, #56]	; 0x38
   81f62:	b083      	sub	sp, #12
   81f64:	4607      	mov	r7, r0
   81f66:	2c00      	cmp	r4, #0
   81f68:	d165      	bne.n	82036 <__sinit+0xda>
   81f6a:	687d      	ldr	r5, [r7, #4]
   81f6c:	4833      	ldr	r0, [pc, #204]	; (8203c <__sinit+0xe0>)
   81f6e:	2304      	movs	r3, #4
   81f70:	2103      	movs	r1, #3
   81f72:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   81f76:	63f8      	str	r0, [r7, #60]	; 0x3c
   81f78:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   81f7c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   81f80:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   81f84:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81f88:	81ab      	strh	r3, [r5, #12]
   81f8a:	602c      	str	r4, [r5, #0]
   81f8c:	606c      	str	r4, [r5, #4]
   81f8e:	60ac      	str	r4, [r5, #8]
   81f90:	666c      	str	r4, [r5, #100]	; 0x64
   81f92:	81ec      	strh	r4, [r5, #14]
   81f94:	612c      	str	r4, [r5, #16]
   81f96:	616c      	str	r4, [r5, #20]
   81f98:	61ac      	str	r4, [r5, #24]
   81f9a:	4621      	mov	r1, r4
   81f9c:	2208      	movs	r2, #8
   81f9e:	f7fe ff35 	bl	80e0c <memset>
   81fa2:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82040 <__sinit+0xe4>
   81fa6:	68be      	ldr	r6, [r7, #8]
   81fa8:	f8df a098 	ldr.w	sl, [pc, #152]	; 82044 <__sinit+0xe8>
   81fac:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82048 <__sinit+0xec>
   81fb0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8204c <__sinit+0xf0>
   81fb4:	2301      	movs	r3, #1
   81fb6:	2209      	movs	r2, #9
   81fb8:	61ed      	str	r5, [r5, #28]
   81fba:	f8c5 b020 	str.w	fp, [r5, #32]
   81fbe:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81fc2:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81fc6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81fca:	4621      	mov	r1, r4
   81fcc:	81f3      	strh	r3, [r6, #14]
   81fce:	81b2      	strh	r2, [r6, #12]
   81fd0:	6034      	str	r4, [r6, #0]
   81fd2:	6074      	str	r4, [r6, #4]
   81fd4:	60b4      	str	r4, [r6, #8]
   81fd6:	6674      	str	r4, [r6, #100]	; 0x64
   81fd8:	6134      	str	r4, [r6, #16]
   81fda:	6174      	str	r4, [r6, #20]
   81fdc:	61b4      	str	r4, [r6, #24]
   81fde:	2208      	movs	r2, #8
   81fe0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   81fe4:	9301      	str	r3, [sp, #4]
   81fe6:	f7fe ff11 	bl	80e0c <memset>
   81fea:	68fd      	ldr	r5, [r7, #12]
   81fec:	2012      	movs	r0, #18
   81fee:	2202      	movs	r2, #2
   81ff0:	61f6      	str	r6, [r6, #28]
   81ff2:	f8c6 b020 	str.w	fp, [r6, #32]
   81ff6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   81ffa:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   81ffe:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82002:	4621      	mov	r1, r4
   82004:	81a8      	strh	r0, [r5, #12]
   82006:	81ea      	strh	r2, [r5, #14]
   82008:	602c      	str	r4, [r5, #0]
   8200a:	606c      	str	r4, [r5, #4]
   8200c:	60ac      	str	r4, [r5, #8]
   8200e:	666c      	str	r4, [r5, #100]	; 0x64
   82010:	612c      	str	r4, [r5, #16]
   82012:	616c      	str	r4, [r5, #20]
   82014:	61ac      	str	r4, [r5, #24]
   82016:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8201a:	2208      	movs	r2, #8
   8201c:	f7fe fef6 	bl	80e0c <memset>
   82020:	9b01      	ldr	r3, [sp, #4]
   82022:	61ed      	str	r5, [r5, #28]
   82024:	f8c5 b020 	str.w	fp, [r5, #32]
   82028:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8202c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82030:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82034:	63bb      	str	r3, [r7, #56]	; 0x38
   82036:	b003      	add	sp, #12
   82038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8203c:	00081f51 	.word	0x00081f51
   82040:	00083351 	.word	0x00083351
   82044:	00083375 	.word	0x00083375
   82048:	000833ad 	.word	0x000833ad
   8204c:	000833cd 	.word	0x000833cd

00082050 <__sfp_lock_acquire>:
   82050:	4770      	bx	lr
   82052:	bf00      	nop

00082054 <__sfp_lock_release>:
   82054:	4770      	bx	lr
   82056:	bf00      	nop

00082058 <__libc_fini_array>:
   82058:	b538      	push	{r3, r4, r5, lr}
   8205a:	4d09      	ldr	r5, [pc, #36]	; (82080 <__libc_fini_array+0x28>)
   8205c:	4c09      	ldr	r4, [pc, #36]	; (82084 <__libc_fini_array+0x2c>)
   8205e:	1b64      	subs	r4, r4, r5
   82060:	10a4      	asrs	r4, r4, #2
   82062:	bf18      	it	ne
   82064:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82068:	d005      	beq.n	82076 <__libc_fini_array+0x1e>
   8206a:	3c01      	subs	r4, #1
   8206c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82070:	4798      	blx	r3
   82072:	2c00      	cmp	r4, #0
   82074:	d1f9      	bne.n	8206a <__libc_fini_array+0x12>
   82076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8207a:	f001 bea7 	b.w	83dcc <_fini>
   8207e:	bf00      	nop
   82080:	00083dd8 	.word	0x00083dd8
   82084:	00083ddc 	.word	0x00083ddc

00082088 <_fputwc_r>:
   82088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8208c:	8993      	ldrh	r3, [r2, #12]
   8208e:	460f      	mov	r7, r1
   82090:	0499      	lsls	r1, r3, #18
   82092:	b082      	sub	sp, #8
   82094:	4614      	mov	r4, r2
   82096:	4680      	mov	r8, r0
   82098:	d406      	bmi.n	820a8 <_fputwc_r+0x20>
   8209a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   8209c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   820a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   820a4:	81a3      	strh	r3, [r4, #12]
   820a6:	6662      	str	r2, [r4, #100]	; 0x64
   820a8:	f000 fb1c 	bl	826e4 <__locale_mb_cur_max>
   820ac:	2801      	cmp	r0, #1
   820ae:	d03e      	beq.n	8212e <_fputwc_r+0xa6>
   820b0:	463a      	mov	r2, r7
   820b2:	4640      	mov	r0, r8
   820b4:	a901      	add	r1, sp, #4
   820b6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   820ba:	f001 fa0f 	bl	834dc <_wcrtomb_r>
   820be:	1c42      	adds	r2, r0, #1
   820c0:	4606      	mov	r6, r0
   820c2:	d02d      	beq.n	82120 <_fputwc_r+0x98>
   820c4:	2800      	cmp	r0, #0
   820c6:	d03a      	beq.n	8213e <_fputwc_r+0xb6>
   820c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   820cc:	2500      	movs	r5, #0
   820ce:	e009      	b.n	820e4 <_fputwc_r+0x5c>
   820d0:	6823      	ldr	r3, [r4, #0]
   820d2:	7019      	strb	r1, [r3, #0]
   820d4:	6823      	ldr	r3, [r4, #0]
   820d6:	3301      	adds	r3, #1
   820d8:	6023      	str	r3, [r4, #0]
   820da:	3501      	adds	r5, #1
   820dc:	42b5      	cmp	r5, r6
   820de:	d22e      	bcs.n	8213e <_fputwc_r+0xb6>
   820e0:	ab01      	add	r3, sp, #4
   820e2:	5ce9      	ldrb	r1, [r5, r3]
   820e4:	68a3      	ldr	r3, [r4, #8]
   820e6:	3b01      	subs	r3, #1
   820e8:	2b00      	cmp	r3, #0
   820ea:	60a3      	str	r3, [r4, #8]
   820ec:	daf0      	bge.n	820d0 <_fputwc_r+0x48>
   820ee:	69a2      	ldr	r2, [r4, #24]
   820f0:	4293      	cmp	r3, r2
   820f2:	db06      	blt.n	82102 <_fputwc_r+0x7a>
   820f4:	6823      	ldr	r3, [r4, #0]
   820f6:	7019      	strb	r1, [r3, #0]
   820f8:	6823      	ldr	r3, [r4, #0]
   820fa:	7819      	ldrb	r1, [r3, #0]
   820fc:	3301      	adds	r3, #1
   820fe:	290a      	cmp	r1, #10
   82100:	d1ea      	bne.n	820d8 <_fputwc_r+0x50>
   82102:	4640      	mov	r0, r8
   82104:	4622      	mov	r2, r4
   82106:	f001 f995 	bl	83434 <__swbuf_r>
   8210a:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8210e:	4258      	negs	r0, r3
   82110:	4158      	adcs	r0, r3
   82112:	2800      	cmp	r0, #0
   82114:	d0e1      	beq.n	820da <_fputwc_r+0x52>
   82116:	f04f 30ff 	mov.w	r0, #4294967295
   8211a:	b002      	add	sp, #8
   8211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82120:	89a3      	ldrh	r3, [r4, #12]
   82122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82126:	81a3      	strh	r3, [r4, #12]
   82128:	b002      	add	sp, #8
   8212a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8212e:	1e7b      	subs	r3, r7, #1
   82130:	2bfe      	cmp	r3, #254	; 0xfe
   82132:	d8bd      	bhi.n	820b0 <_fputwc_r+0x28>
   82134:	b2f9      	uxtb	r1, r7
   82136:	4606      	mov	r6, r0
   82138:	f88d 1004 	strb.w	r1, [sp, #4]
   8213c:	e7c6      	b.n	820cc <_fputwc_r+0x44>
   8213e:	4638      	mov	r0, r7
   82140:	b002      	add	sp, #8
   82142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82146:	bf00      	nop

00082148 <_malloc_trim_r>:
   82148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8214a:	4d23      	ldr	r5, [pc, #140]	; (821d8 <_malloc_trim_r+0x90>)
   8214c:	460f      	mov	r7, r1
   8214e:	4604      	mov	r4, r0
   82150:	f000 ff08 	bl	82f64 <__malloc_lock>
   82154:	68ab      	ldr	r3, [r5, #8]
   82156:	685e      	ldr	r6, [r3, #4]
   82158:	f026 0603 	bic.w	r6, r6, #3
   8215c:	1bf1      	subs	r1, r6, r7
   8215e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82162:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82166:	f021 010f 	bic.w	r1, r1, #15
   8216a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8216e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82172:	db07      	blt.n	82184 <_malloc_trim_r+0x3c>
   82174:	4620      	mov	r0, r4
   82176:	2100      	movs	r1, #0
   82178:	f001 f8d8 	bl	8332c <_sbrk_r>
   8217c:	68ab      	ldr	r3, [r5, #8]
   8217e:	4433      	add	r3, r6
   82180:	4298      	cmp	r0, r3
   82182:	d004      	beq.n	8218e <_malloc_trim_r+0x46>
   82184:	4620      	mov	r0, r4
   82186:	f000 feef 	bl	82f68 <__malloc_unlock>
   8218a:	2000      	movs	r0, #0
   8218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8218e:	4620      	mov	r0, r4
   82190:	4279      	negs	r1, r7
   82192:	f001 f8cb 	bl	8332c <_sbrk_r>
   82196:	3001      	adds	r0, #1
   82198:	d00d      	beq.n	821b6 <_malloc_trim_r+0x6e>
   8219a:	4b10      	ldr	r3, [pc, #64]	; (821dc <_malloc_trim_r+0x94>)
   8219c:	68aa      	ldr	r2, [r5, #8]
   8219e:	6819      	ldr	r1, [r3, #0]
   821a0:	1bf6      	subs	r6, r6, r7
   821a2:	f046 0601 	orr.w	r6, r6, #1
   821a6:	4620      	mov	r0, r4
   821a8:	1bc9      	subs	r1, r1, r7
   821aa:	6056      	str	r6, [r2, #4]
   821ac:	6019      	str	r1, [r3, #0]
   821ae:	f000 fedb 	bl	82f68 <__malloc_unlock>
   821b2:	2001      	movs	r0, #1
   821b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   821b6:	4620      	mov	r0, r4
   821b8:	2100      	movs	r1, #0
   821ba:	f001 f8b7 	bl	8332c <_sbrk_r>
   821be:	68ab      	ldr	r3, [r5, #8]
   821c0:	1ac2      	subs	r2, r0, r3
   821c2:	2a0f      	cmp	r2, #15
   821c4:	ddde      	ble.n	82184 <_malloc_trim_r+0x3c>
   821c6:	4d06      	ldr	r5, [pc, #24]	; (821e0 <_malloc_trim_r+0x98>)
   821c8:	4904      	ldr	r1, [pc, #16]	; (821dc <_malloc_trim_r+0x94>)
   821ca:	682d      	ldr	r5, [r5, #0]
   821cc:	f042 0201 	orr.w	r2, r2, #1
   821d0:	1b40      	subs	r0, r0, r5
   821d2:	605a      	str	r2, [r3, #4]
   821d4:	6008      	str	r0, [r1, #0]
   821d6:	e7d5      	b.n	82184 <_malloc_trim_r+0x3c>
   821d8:	20070588 	.word	0x20070588
   821dc:	20070ad8 	.word	0x20070ad8
   821e0:	20070994 	.word	0x20070994

000821e4 <_free_r>:
   821e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   821e8:	460d      	mov	r5, r1
   821ea:	4606      	mov	r6, r0
   821ec:	2900      	cmp	r1, #0
   821ee:	d055      	beq.n	8229c <_free_r+0xb8>
   821f0:	f000 feb8 	bl	82f64 <__malloc_lock>
   821f4:	f855 1c04 	ldr.w	r1, [r5, #-4]
   821f8:	f8df c170 	ldr.w	ip, [pc, #368]	; 8236c <_free_r+0x188>
   821fc:	f1a5 0408 	sub.w	r4, r5, #8
   82200:	f021 0301 	bic.w	r3, r1, #1
   82204:	18e2      	adds	r2, r4, r3
   82206:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8220a:	6857      	ldr	r7, [r2, #4]
   8220c:	4290      	cmp	r0, r2
   8220e:	f027 0703 	bic.w	r7, r7, #3
   82212:	d068      	beq.n	822e6 <_free_r+0x102>
   82214:	f011 0101 	ands.w	r1, r1, #1
   82218:	6057      	str	r7, [r2, #4]
   8221a:	d032      	beq.n	82282 <_free_r+0x9e>
   8221c:	2100      	movs	r1, #0
   8221e:	19d0      	adds	r0, r2, r7
   82220:	6840      	ldr	r0, [r0, #4]
   82222:	07c0      	lsls	r0, r0, #31
   82224:	d406      	bmi.n	82234 <_free_r+0x50>
   82226:	443b      	add	r3, r7
   82228:	6890      	ldr	r0, [r2, #8]
   8222a:	2900      	cmp	r1, #0
   8222c:	d04d      	beq.n	822ca <_free_r+0xe6>
   8222e:	68d2      	ldr	r2, [r2, #12]
   82230:	60c2      	str	r2, [r0, #12]
   82232:	6090      	str	r0, [r2, #8]
   82234:	f043 0201 	orr.w	r2, r3, #1
   82238:	6062      	str	r2, [r4, #4]
   8223a:	50e3      	str	r3, [r4, r3]
   8223c:	b9e1      	cbnz	r1, 82278 <_free_r+0x94>
   8223e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82242:	d32d      	bcc.n	822a0 <_free_r+0xbc>
   82244:	0a5a      	lsrs	r2, r3, #9
   82246:	2a04      	cmp	r2, #4
   82248:	d869      	bhi.n	8231e <_free_r+0x13a>
   8224a:	0998      	lsrs	r0, r3, #6
   8224c:	3038      	adds	r0, #56	; 0x38
   8224e:	0041      	lsls	r1, r0, #1
   82250:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82254:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82258:	4944      	ldr	r1, [pc, #272]	; (8236c <_free_r+0x188>)
   8225a:	4562      	cmp	r2, ip
   8225c:	d065      	beq.n	8232a <_free_r+0x146>
   8225e:	6851      	ldr	r1, [r2, #4]
   82260:	f021 0103 	bic.w	r1, r1, #3
   82264:	428b      	cmp	r3, r1
   82266:	d202      	bcs.n	8226e <_free_r+0x8a>
   82268:	6892      	ldr	r2, [r2, #8]
   8226a:	4594      	cmp	ip, r2
   8226c:	d1f7      	bne.n	8225e <_free_r+0x7a>
   8226e:	68d3      	ldr	r3, [r2, #12]
   82270:	60e3      	str	r3, [r4, #12]
   82272:	60a2      	str	r2, [r4, #8]
   82274:	609c      	str	r4, [r3, #8]
   82276:	60d4      	str	r4, [r2, #12]
   82278:	4630      	mov	r0, r6
   8227a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8227e:	f000 be73 	b.w	82f68 <__malloc_unlock>
   82282:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82286:	f10c 0808 	add.w	r8, ip, #8
   8228a:	1b64      	subs	r4, r4, r5
   8228c:	68a0      	ldr	r0, [r4, #8]
   8228e:	442b      	add	r3, r5
   82290:	4540      	cmp	r0, r8
   82292:	d042      	beq.n	8231a <_free_r+0x136>
   82294:	68e5      	ldr	r5, [r4, #12]
   82296:	60c5      	str	r5, [r0, #12]
   82298:	60a8      	str	r0, [r5, #8]
   8229a:	e7c0      	b.n	8221e <_free_r+0x3a>
   8229c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822a0:	08db      	lsrs	r3, r3, #3
   822a2:	109a      	asrs	r2, r3, #2
   822a4:	2001      	movs	r0, #1
   822a6:	4090      	lsls	r0, r2
   822a8:	f8dc 1004 	ldr.w	r1, [ip, #4]
   822ac:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   822b0:	689a      	ldr	r2, [r3, #8]
   822b2:	4301      	orrs	r1, r0
   822b4:	60a2      	str	r2, [r4, #8]
   822b6:	60e3      	str	r3, [r4, #12]
   822b8:	f8cc 1004 	str.w	r1, [ip, #4]
   822bc:	4630      	mov	r0, r6
   822be:	609c      	str	r4, [r3, #8]
   822c0:	60d4      	str	r4, [r2, #12]
   822c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   822c6:	f000 be4f 	b.w	82f68 <__malloc_unlock>
   822ca:	4d29      	ldr	r5, [pc, #164]	; (82370 <_free_r+0x18c>)
   822cc:	42a8      	cmp	r0, r5
   822ce:	d1ae      	bne.n	8222e <_free_r+0x4a>
   822d0:	f043 0201 	orr.w	r2, r3, #1
   822d4:	f8cc 4014 	str.w	r4, [ip, #20]
   822d8:	f8cc 4010 	str.w	r4, [ip, #16]
   822dc:	60e0      	str	r0, [r4, #12]
   822de:	60a0      	str	r0, [r4, #8]
   822e0:	6062      	str	r2, [r4, #4]
   822e2:	50e3      	str	r3, [r4, r3]
   822e4:	e7c8      	b.n	82278 <_free_r+0x94>
   822e6:	441f      	add	r7, r3
   822e8:	07cb      	lsls	r3, r1, #31
   822ea:	d407      	bmi.n	822fc <_free_r+0x118>
   822ec:	f855 1c08 	ldr.w	r1, [r5, #-8]
   822f0:	1a64      	subs	r4, r4, r1
   822f2:	68e3      	ldr	r3, [r4, #12]
   822f4:	68a2      	ldr	r2, [r4, #8]
   822f6:	440f      	add	r7, r1
   822f8:	60d3      	str	r3, [r2, #12]
   822fa:	609a      	str	r2, [r3, #8]
   822fc:	4b1d      	ldr	r3, [pc, #116]	; (82374 <_free_r+0x190>)
   822fe:	f047 0201 	orr.w	r2, r7, #1
   82302:	681b      	ldr	r3, [r3, #0]
   82304:	6062      	str	r2, [r4, #4]
   82306:	429f      	cmp	r7, r3
   82308:	f8cc 4008 	str.w	r4, [ip, #8]
   8230c:	d3b4      	bcc.n	82278 <_free_r+0x94>
   8230e:	4b1a      	ldr	r3, [pc, #104]	; (82378 <_free_r+0x194>)
   82310:	4630      	mov	r0, r6
   82312:	6819      	ldr	r1, [r3, #0]
   82314:	f7ff ff18 	bl	82148 <_malloc_trim_r>
   82318:	e7ae      	b.n	82278 <_free_r+0x94>
   8231a:	2101      	movs	r1, #1
   8231c:	e77f      	b.n	8221e <_free_r+0x3a>
   8231e:	2a14      	cmp	r2, #20
   82320:	d80b      	bhi.n	8233a <_free_r+0x156>
   82322:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82326:	0041      	lsls	r1, r0, #1
   82328:	e792      	b.n	82250 <_free_r+0x6c>
   8232a:	1080      	asrs	r0, r0, #2
   8232c:	2501      	movs	r5, #1
   8232e:	4085      	lsls	r5, r0
   82330:	6848      	ldr	r0, [r1, #4]
   82332:	4613      	mov	r3, r2
   82334:	4328      	orrs	r0, r5
   82336:	6048      	str	r0, [r1, #4]
   82338:	e79a      	b.n	82270 <_free_r+0x8c>
   8233a:	2a54      	cmp	r2, #84	; 0x54
   8233c:	d803      	bhi.n	82346 <_free_r+0x162>
   8233e:	0b18      	lsrs	r0, r3, #12
   82340:	306e      	adds	r0, #110	; 0x6e
   82342:	0041      	lsls	r1, r0, #1
   82344:	e784      	b.n	82250 <_free_r+0x6c>
   82346:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8234a:	d803      	bhi.n	82354 <_free_r+0x170>
   8234c:	0bd8      	lsrs	r0, r3, #15
   8234e:	3077      	adds	r0, #119	; 0x77
   82350:	0041      	lsls	r1, r0, #1
   82352:	e77d      	b.n	82250 <_free_r+0x6c>
   82354:	f240 5154 	movw	r1, #1364	; 0x554
   82358:	428a      	cmp	r2, r1
   8235a:	d803      	bhi.n	82364 <_free_r+0x180>
   8235c:	0c98      	lsrs	r0, r3, #18
   8235e:	307c      	adds	r0, #124	; 0x7c
   82360:	0041      	lsls	r1, r0, #1
   82362:	e775      	b.n	82250 <_free_r+0x6c>
   82364:	21fc      	movs	r1, #252	; 0xfc
   82366:	207e      	movs	r0, #126	; 0x7e
   82368:	e772      	b.n	82250 <_free_r+0x6c>
   8236a:	bf00      	nop
   8236c:	20070588 	.word	0x20070588
   82370:	20070590 	.word	0x20070590
   82374:	20070990 	.word	0x20070990
   82378:	20070ad4 	.word	0x20070ad4

0008237c <__sfvwrite_r>:
   8237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82380:	6893      	ldr	r3, [r2, #8]
   82382:	b083      	sub	sp, #12
   82384:	4616      	mov	r6, r2
   82386:	4681      	mov	r9, r0
   82388:	460c      	mov	r4, r1
   8238a:	b32b      	cbz	r3, 823d8 <__sfvwrite_r+0x5c>
   8238c:	898b      	ldrh	r3, [r1, #12]
   8238e:	0719      	lsls	r1, r3, #28
   82390:	d526      	bpl.n	823e0 <__sfvwrite_r+0x64>
   82392:	6922      	ldr	r2, [r4, #16]
   82394:	b322      	cbz	r2, 823e0 <__sfvwrite_r+0x64>
   82396:	f003 0202 	and.w	r2, r3, #2
   8239a:	b292      	uxth	r2, r2
   8239c:	6835      	ldr	r5, [r6, #0]
   8239e:	2a00      	cmp	r2, #0
   823a0:	d02c      	beq.n	823fc <__sfvwrite_r+0x80>
   823a2:	f04f 0a00 	mov.w	sl, #0
   823a6:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82690 <__sfvwrite_r+0x314>
   823aa:	46d0      	mov	r8, sl
   823ac:	45d8      	cmp	r8, fp
   823ae:	bf34      	ite	cc
   823b0:	4643      	movcc	r3, r8
   823b2:	465b      	movcs	r3, fp
   823b4:	4652      	mov	r2, sl
   823b6:	4648      	mov	r0, r9
   823b8:	f1b8 0f00 	cmp.w	r8, #0
   823bc:	d04f      	beq.n	8245e <__sfvwrite_r+0xe2>
   823be:	69e1      	ldr	r1, [r4, #28]
   823c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   823c2:	47b8      	blx	r7
   823c4:	2800      	cmp	r0, #0
   823c6:	dd56      	ble.n	82476 <__sfvwrite_r+0xfa>
   823c8:	68b3      	ldr	r3, [r6, #8]
   823ca:	4482      	add	sl, r0
   823cc:	1a1b      	subs	r3, r3, r0
   823ce:	ebc0 0808 	rsb	r8, r0, r8
   823d2:	60b3      	str	r3, [r6, #8]
   823d4:	2b00      	cmp	r3, #0
   823d6:	d1e9      	bne.n	823ac <__sfvwrite_r+0x30>
   823d8:	2000      	movs	r0, #0
   823da:	b003      	add	sp, #12
   823dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823e0:	4648      	mov	r0, r9
   823e2:	4621      	mov	r1, r4
   823e4:	f7ff fc88 	bl	81cf8 <__swsetup_r>
   823e8:	2800      	cmp	r0, #0
   823ea:	f040 8148 	bne.w	8267e <__sfvwrite_r+0x302>
   823ee:	89a3      	ldrh	r3, [r4, #12]
   823f0:	6835      	ldr	r5, [r6, #0]
   823f2:	f003 0202 	and.w	r2, r3, #2
   823f6:	b292      	uxth	r2, r2
   823f8:	2a00      	cmp	r2, #0
   823fa:	d1d2      	bne.n	823a2 <__sfvwrite_r+0x26>
   823fc:	f013 0a01 	ands.w	sl, r3, #1
   82400:	d142      	bne.n	82488 <__sfvwrite_r+0x10c>
   82402:	46d0      	mov	r8, sl
   82404:	f1b8 0f00 	cmp.w	r8, #0
   82408:	d023      	beq.n	82452 <__sfvwrite_r+0xd6>
   8240a:	059a      	lsls	r2, r3, #22
   8240c:	68a7      	ldr	r7, [r4, #8]
   8240e:	d576      	bpl.n	824fe <__sfvwrite_r+0x182>
   82410:	45b8      	cmp	r8, r7
   82412:	f0c0 80a4 	bcc.w	8255e <__sfvwrite_r+0x1e2>
   82416:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8241a:	f040 80b2 	bne.w	82582 <__sfvwrite_r+0x206>
   8241e:	6820      	ldr	r0, [r4, #0]
   82420:	46bb      	mov	fp, r7
   82422:	4651      	mov	r1, sl
   82424:	465a      	mov	r2, fp
   82426:	f000 fd37 	bl	82e98 <memmove>
   8242a:	68a2      	ldr	r2, [r4, #8]
   8242c:	6821      	ldr	r1, [r4, #0]
   8242e:	1bd2      	subs	r2, r2, r7
   82430:	eb01 030b 	add.w	r3, r1, fp
   82434:	60a2      	str	r2, [r4, #8]
   82436:	6023      	str	r3, [r4, #0]
   82438:	4642      	mov	r2, r8
   8243a:	68b3      	ldr	r3, [r6, #8]
   8243c:	4492      	add	sl, r2
   8243e:	1a9b      	subs	r3, r3, r2
   82440:	ebc2 0808 	rsb	r8, r2, r8
   82444:	60b3      	str	r3, [r6, #8]
   82446:	2b00      	cmp	r3, #0
   82448:	d0c6      	beq.n	823d8 <__sfvwrite_r+0x5c>
   8244a:	89a3      	ldrh	r3, [r4, #12]
   8244c:	f1b8 0f00 	cmp.w	r8, #0
   82450:	d1db      	bne.n	8240a <__sfvwrite_r+0x8e>
   82452:	f8d5 a000 	ldr.w	sl, [r5]
   82456:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8245a:	3508      	adds	r5, #8
   8245c:	e7d2      	b.n	82404 <__sfvwrite_r+0x88>
   8245e:	f8d5 a000 	ldr.w	sl, [r5]
   82462:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82466:	3508      	adds	r5, #8
   82468:	e7a0      	b.n	823ac <__sfvwrite_r+0x30>
   8246a:	4648      	mov	r0, r9
   8246c:	4621      	mov	r1, r4
   8246e:	f7ff fd59 	bl	81f24 <_fflush_r>
   82472:	2800      	cmp	r0, #0
   82474:	d059      	beq.n	8252a <__sfvwrite_r+0x1ae>
   82476:	89a3      	ldrh	r3, [r4, #12]
   82478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8247c:	f04f 30ff 	mov.w	r0, #4294967295
   82480:	81a3      	strh	r3, [r4, #12]
   82482:	b003      	add	sp, #12
   82484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82488:	4692      	mov	sl, r2
   8248a:	9201      	str	r2, [sp, #4]
   8248c:	4693      	mov	fp, r2
   8248e:	4690      	mov	r8, r2
   82490:	f1b8 0f00 	cmp.w	r8, #0
   82494:	d02b      	beq.n	824ee <__sfvwrite_r+0x172>
   82496:	9f01      	ldr	r7, [sp, #4]
   82498:	2f00      	cmp	r7, #0
   8249a:	d064      	beq.n	82566 <__sfvwrite_r+0x1ea>
   8249c:	6820      	ldr	r0, [r4, #0]
   8249e:	6921      	ldr	r1, [r4, #16]
   824a0:	45c2      	cmp	sl, r8
   824a2:	bf34      	ite	cc
   824a4:	4653      	movcc	r3, sl
   824a6:	4643      	movcs	r3, r8
   824a8:	4288      	cmp	r0, r1
   824aa:	461f      	mov	r7, r3
   824ac:	f8d4 c008 	ldr.w	ip, [r4, #8]
   824b0:	6962      	ldr	r2, [r4, #20]
   824b2:	d903      	bls.n	824bc <__sfvwrite_r+0x140>
   824b4:	4494      	add	ip, r2
   824b6:	4563      	cmp	r3, ip
   824b8:	f300 80ae 	bgt.w	82618 <__sfvwrite_r+0x29c>
   824bc:	4293      	cmp	r3, r2
   824be:	db36      	blt.n	8252e <__sfvwrite_r+0x1b2>
   824c0:	4613      	mov	r3, r2
   824c2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   824c4:	4648      	mov	r0, r9
   824c6:	69e1      	ldr	r1, [r4, #28]
   824c8:	465a      	mov	r2, fp
   824ca:	47b8      	blx	r7
   824cc:	1e07      	subs	r7, r0, #0
   824ce:	ddd2      	ble.n	82476 <__sfvwrite_r+0xfa>
   824d0:	ebba 0a07 	subs.w	sl, sl, r7
   824d4:	d03a      	beq.n	8254c <__sfvwrite_r+0x1d0>
   824d6:	68b3      	ldr	r3, [r6, #8]
   824d8:	44bb      	add	fp, r7
   824da:	1bdb      	subs	r3, r3, r7
   824dc:	ebc7 0808 	rsb	r8, r7, r8
   824e0:	60b3      	str	r3, [r6, #8]
   824e2:	2b00      	cmp	r3, #0
   824e4:	f43f af78 	beq.w	823d8 <__sfvwrite_r+0x5c>
   824e8:	f1b8 0f00 	cmp.w	r8, #0
   824ec:	d1d3      	bne.n	82496 <__sfvwrite_r+0x11a>
   824ee:	2700      	movs	r7, #0
   824f0:	f8d5 b000 	ldr.w	fp, [r5]
   824f4:	f8d5 8004 	ldr.w	r8, [r5, #4]
   824f8:	9701      	str	r7, [sp, #4]
   824fa:	3508      	adds	r5, #8
   824fc:	e7c8      	b.n	82490 <__sfvwrite_r+0x114>
   824fe:	6820      	ldr	r0, [r4, #0]
   82500:	6923      	ldr	r3, [r4, #16]
   82502:	4298      	cmp	r0, r3
   82504:	d802      	bhi.n	8250c <__sfvwrite_r+0x190>
   82506:	6963      	ldr	r3, [r4, #20]
   82508:	4598      	cmp	r8, r3
   8250a:	d272      	bcs.n	825f2 <__sfvwrite_r+0x276>
   8250c:	45b8      	cmp	r8, r7
   8250e:	bf38      	it	cc
   82510:	4647      	movcc	r7, r8
   82512:	463a      	mov	r2, r7
   82514:	4651      	mov	r1, sl
   82516:	f000 fcbf 	bl	82e98 <memmove>
   8251a:	68a3      	ldr	r3, [r4, #8]
   8251c:	6822      	ldr	r2, [r4, #0]
   8251e:	1bdb      	subs	r3, r3, r7
   82520:	443a      	add	r2, r7
   82522:	60a3      	str	r3, [r4, #8]
   82524:	6022      	str	r2, [r4, #0]
   82526:	2b00      	cmp	r3, #0
   82528:	d09f      	beq.n	8246a <__sfvwrite_r+0xee>
   8252a:	463a      	mov	r2, r7
   8252c:	e785      	b.n	8243a <__sfvwrite_r+0xbe>
   8252e:	461a      	mov	r2, r3
   82530:	4659      	mov	r1, fp
   82532:	9300      	str	r3, [sp, #0]
   82534:	f000 fcb0 	bl	82e98 <memmove>
   82538:	9b00      	ldr	r3, [sp, #0]
   8253a:	68a1      	ldr	r1, [r4, #8]
   8253c:	6822      	ldr	r2, [r4, #0]
   8253e:	1ac9      	subs	r1, r1, r3
   82540:	ebba 0a07 	subs.w	sl, sl, r7
   82544:	4413      	add	r3, r2
   82546:	60a1      	str	r1, [r4, #8]
   82548:	6023      	str	r3, [r4, #0]
   8254a:	d1c4      	bne.n	824d6 <__sfvwrite_r+0x15a>
   8254c:	4648      	mov	r0, r9
   8254e:	4621      	mov	r1, r4
   82550:	f7ff fce8 	bl	81f24 <_fflush_r>
   82554:	2800      	cmp	r0, #0
   82556:	d18e      	bne.n	82476 <__sfvwrite_r+0xfa>
   82558:	f8cd a004 	str.w	sl, [sp, #4]
   8255c:	e7bb      	b.n	824d6 <__sfvwrite_r+0x15a>
   8255e:	6820      	ldr	r0, [r4, #0]
   82560:	4647      	mov	r7, r8
   82562:	46c3      	mov	fp, r8
   82564:	e75d      	b.n	82422 <__sfvwrite_r+0xa6>
   82566:	4658      	mov	r0, fp
   82568:	210a      	movs	r1, #10
   8256a:	4642      	mov	r2, r8
   8256c:	f000 fbd4 	bl	82d18 <memchr>
   82570:	2800      	cmp	r0, #0
   82572:	d07f      	beq.n	82674 <__sfvwrite_r+0x2f8>
   82574:	f100 0a01 	add.w	sl, r0, #1
   82578:	2701      	movs	r7, #1
   8257a:	ebcb 0a0a 	rsb	sl, fp, sl
   8257e:	9701      	str	r7, [sp, #4]
   82580:	e78c      	b.n	8249c <__sfvwrite_r+0x120>
   82582:	6822      	ldr	r2, [r4, #0]
   82584:	6921      	ldr	r1, [r4, #16]
   82586:	6967      	ldr	r7, [r4, #20]
   82588:	ebc1 0c02 	rsb	ip, r1, r2
   8258c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82590:	f10c 0201 	add.w	r2, ip, #1
   82594:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82598:	4442      	add	r2, r8
   8259a:	107f      	asrs	r7, r7, #1
   8259c:	4297      	cmp	r7, r2
   8259e:	bf34      	ite	cc
   825a0:	4617      	movcc	r7, r2
   825a2:	463a      	movcs	r2, r7
   825a4:	055b      	lsls	r3, r3, #21
   825a6:	d54f      	bpl.n	82648 <__sfvwrite_r+0x2cc>
   825a8:	4611      	mov	r1, r2
   825aa:	4648      	mov	r0, r9
   825ac:	f8cd c000 	str.w	ip, [sp]
   825b0:	f000 f916 	bl	827e0 <_malloc_r>
   825b4:	f8dd c000 	ldr.w	ip, [sp]
   825b8:	4683      	mov	fp, r0
   825ba:	2800      	cmp	r0, #0
   825bc:	d062      	beq.n	82684 <__sfvwrite_r+0x308>
   825be:	4662      	mov	r2, ip
   825c0:	6921      	ldr	r1, [r4, #16]
   825c2:	f8cd c000 	str.w	ip, [sp]
   825c6:	f000 fbf1 	bl	82dac <memcpy>
   825ca:	89a2      	ldrh	r2, [r4, #12]
   825cc:	f8dd c000 	ldr.w	ip, [sp]
   825d0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   825d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   825d8:	81a2      	strh	r2, [r4, #12]
   825da:	eb0b 000c 	add.w	r0, fp, ip
   825de:	ebcc 0207 	rsb	r2, ip, r7
   825e2:	f8c4 b010 	str.w	fp, [r4, #16]
   825e6:	6167      	str	r7, [r4, #20]
   825e8:	6020      	str	r0, [r4, #0]
   825ea:	60a2      	str	r2, [r4, #8]
   825ec:	4647      	mov	r7, r8
   825ee:	46c3      	mov	fp, r8
   825f0:	e717      	b.n	82422 <__sfvwrite_r+0xa6>
   825f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   825f6:	4590      	cmp	r8, r2
   825f8:	bf38      	it	cc
   825fa:	4642      	movcc	r2, r8
   825fc:	fb92 f2f3 	sdiv	r2, r2, r3
   82600:	fb02 f303 	mul.w	r3, r2, r3
   82604:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82606:	4648      	mov	r0, r9
   82608:	69e1      	ldr	r1, [r4, #28]
   8260a:	4652      	mov	r2, sl
   8260c:	47b8      	blx	r7
   8260e:	2800      	cmp	r0, #0
   82610:	f77f af31 	ble.w	82476 <__sfvwrite_r+0xfa>
   82614:	4602      	mov	r2, r0
   82616:	e710      	b.n	8243a <__sfvwrite_r+0xbe>
   82618:	4662      	mov	r2, ip
   8261a:	4659      	mov	r1, fp
   8261c:	f8cd c000 	str.w	ip, [sp]
   82620:	f000 fc3a 	bl	82e98 <memmove>
   82624:	f8dd c000 	ldr.w	ip, [sp]
   82628:	6823      	ldr	r3, [r4, #0]
   8262a:	4648      	mov	r0, r9
   8262c:	4463      	add	r3, ip
   8262e:	6023      	str	r3, [r4, #0]
   82630:	4621      	mov	r1, r4
   82632:	f8cd c000 	str.w	ip, [sp]
   82636:	f7ff fc75 	bl	81f24 <_fflush_r>
   8263a:	f8dd c000 	ldr.w	ip, [sp]
   8263e:	2800      	cmp	r0, #0
   82640:	f47f af19 	bne.w	82476 <__sfvwrite_r+0xfa>
   82644:	4667      	mov	r7, ip
   82646:	e743      	b.n	824d0 <__sfvwrite_r+0x154>
   82648:	4648      	mov	r0, r9
   8264a:	f8cd c000 	str.w	ip, [sp]
   8264e:	f000 fc8d 	bl	82f6c <_realloc_r>
   82652:	f8dd c000 	ldr.w	ip, [sp]
   82656:	4683      	mov	fp, r0
   82658:	2800      	cmp	r0, #0
   8265a:	d1be      	bne.n	825da <__sfvwrite_r+0x25e>
   8265c:	4648      	mov	r0, r9
   8265e:	6921      	ldr	r1, [r4, #16]
   82660:	f7ff fdc0 	bl	821e4 <_free_r>
   82664:	89a3      	ldrh	r3, [r4, #12]
   82666:	220c      	movs	r2, #12
   82668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8266c:	b29b      	uxth	r3, r3
   8266e:	f8c9 2000 	str.w	r2, [r9]
   82672:	e701      	b.n	82478 <__sfvwrite_r+0xfc>
   82674:	2701      	movs	r7, #1
   82676:	f108 0a01 	add.w	sl, r8, #1
   8267a:	9701      	str	r7, [sp, #4]
   8267c:	e70e      	b.n	8249c <__sfvwrite_r+0x120>
   8267e:	f04f 30ff 	mov.w	r0, #4294967295
   82682:	e6aa      	b.n	823da <__sfvwrite_r+0x5e>
   82684:	230c      	movs	r3, #12
   82686:	f8c9 3000 	str.w	r3, [r9]
   8268a:	89a3      	ldrh	r3, [r4, #12]
   8268c:	e6f4      	b.n	82478 <__sfvwrite_r+0xfc>
   8268e:	bf00      	nop
   82690:	7ffffc00 	.word	0x7ffffc00

00082694 <_fwalk>:
   82694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82698:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   8269c:	4688      	mov	r8, r1
   8269e:	d019      	beq.n	826d4 <_fwalk+0x40>
   826a0:	2600      	movs	r6, #0
   826a2:	687d      	ldr	r5, [r7, #4]
   826a4:	68bc      	ldr	r4, [r7, #8]
   826a6:	3d01      	subs	r5, #1
   826a8:	d40e      	bmi.n	826c8 <_fwalk+0x34>
   826aa:	89a3      	ldrh	r3, [r4, #12]
   826ac:	3d01      	subs	r5, #1
   826ae:	2b01      	cmp	r3, #1
   826b0:	d906      	bls.n	826c0 <_fwalk+0x2c>
   826b2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   826b6:	4620      	mov	r0, r4
   826b8:	3301      	adds	r3, #1
   826ba:	d001      	beq.n	826c0 <_fwalk+0x2c>
   826bc:	47c0      	blx	r8
   826be:	4306      	orrs	r6, r0
   826c0:	1c6b      	adds	r3, r5, #1
   826c2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   826c6:	d1f0      	bne.n	826aa <_fwalk+0x16>
   826c8:	683f      	ldr	r7, [r7, #0]
   826ca:	2f00      	cmp	r7, #0
   826cc:	d1e9      	bne.n	826a2 <_fwalk+0xe>
   826ce:	4630      	mov	r0, r6
   826d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826d4:	463e      	mov	r6, r7
   826d6:	4630      	mov	r0, r6
   826d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000826dc <__locale_charset>:
   826dc:	4800      	ldr	r0, [pc, #0]	; (826e0 <__locale_charset+0x4>)
   826de:	4770      	bx	lr
   826e0:	20070564 	.word	0x20070564

000826e4 <__locale_mb_cur_max>:
   826e4:	4b01      	ldr	r3, [pc, #4]	; (826ec <__locale_mb_cur_max+0x8>)
   826e6:	6818      	ldr	r0, [r3, #0]
   826e8:	4770      	bx	lr
   826ea:	bf00      	nop
   826ec:	20070584 	.word	0x20070584

000826f0 <__smakebuf_r>:
   826f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   826f2:	898b      	ldrh	r3, [r1, #12]
   826f4:	b091      	sub	sp, #68	; 0x44
   826f6:	b29a      	uxth	r2, r3
   826f8:	0796      	lsls	r6, r2, #30
   826fa:	460c      	mov	r4, r1
   826fc:	4605      	mov	r5, r0
   826fe:	d437      	bmi.n	82770 <__smakebuf_r+0x80>
   82700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82704:	2900      	cmp	r1, #0
   82706:	db17      	blt.n	82738 <__smakebuf_r+0x48>
   82708:	aa01      	add	r2, sp, #4
   8270a:	f000 ffdf 	bl	836cc <_fstat_r>
   8270e:	2800      	cmp	r0, #0
   82710:	db10      	blt.n	82734 <__smakebuf_r+0x44>
   82712:	9b02      	ldr	r3, [sp, #8]
   82714:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82718:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   8271c:	424f      	negs	r7, r1
   8271e:	414f      	adcs	r7, r1
   82720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82724:	d02c      	beq.n	82780 <__smakebuf_r+0x90>
   82726:	89a3      	ldrh	r3, [r4, #12]
   82728:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8272c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82730:	81a3      	strh	r3, [r4, #12]
   82732:	e00b      	b.n	8274c <__smakebuf_r+0x5c>
   82734:	89a3      	ldrh	r3, [r4, #12]
   82736:	b29a      	uxth	r2, r3
   82738:	f012 0f80 	tst.w	r2, #128	; 0x80
   8273c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82740:	81a3      	strh	r3, [r4, #12]
   82742:	bf14      	ite	ne
   82744:	2640      	movne	r6, #64	; 0x40
   82746:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8274a:	2700      	movs	r7, #0
   8274c:	4628      	mov	r0, r5
   8274e:	4631      	mov	r1, r6
   82750:	f000 f846 	bl	827e0 <_malloc_r>
   82754:	89a3      	ldrh	r3, [r4, #12]
   82756:	2800      	cmp	r0, #0
   82758:	d029      	beq.n	827ae <__smakebuf_r+0xbe>
   8275a:	4a1b      	ldr	r2, [pc, #108]	; (827c8 <__smakebuf_r+0xd8>)
   8275c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82760:	63ea      	str	r2, [r5, #60]	; 0x3c
   82762:	81a3      	strh	r3, [r4, #12]
   82764:	6020      	str	r0, [r4, #0]
   82766:	6120      	str	r0, [r4, #16]
   82768:	6166      	str	r6, [r4, #20]
   8276a:	b9a7      	cbnz	r7, 82796 <__smakebuf_r+0xa6>
   8276c:	b011      	add	sp, #68	; 0x44
   8276e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82770:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82774:	2201      	movs	r2, #1
   82776:	600b      	str	r3, [r1, #0]
   82778:	610b      	str	r3, [r1, #16]
   8277a:	614a      	str	r2, [r1, #20]
   8277c:	b011      	add	sp, #68	; 0x44
   8277e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82780:	4a12      	ldr	r2, [pc, #72]	; (827cc <__smakebuf_r+0xdc>)
   82782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82784:	4293      	cmp	r3, r2
   82786:	d1ce      	bne.n	82726 <__smakebuf_r+0x36>
   82788:	89a3      	ldrh	r3, [r4, #12]
   8278a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8278e:	4333      	orrs	r3, r6
   82790:	81a3      	strh	r3, [r4, #12]
   82792:	64e6      	str	r6, [r4, #76]	; 0x4c
   82794:	e7da      	b.n	8274c <__smakebuf_r+0x5c>
   82796:	4628      	mov	r0, r5
   82798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8279c:	f000 ffaa 	bl	836f4 <_isatty_r>
   827a0:	2800      	cmp	r0, #0
   827a2:	d0e3      	beq.n	8276c <__smakebuf_r+0x7c>
   827a4:	89a3      	ldrh	r3, [r4, #12]
   827a6:	f043 0301 	orr.w	r3, r3, #1
   827aa:	81a3      	strh	r3, [r4, #12]
   827ac:	e7de      	b.n	8276c <__smakebuf_r+0x7c>
   827ae:	059a      	lsls	r2, r3, #22
   827b0:	d4dc      	bmi.n	8276c <__smakebuf_r+0x7c>
   827b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   827b6:	f043 0302 	orr.w	r3, r3, #2
   827ba:	2101      	movs	r1, #1
   827bc:	81a3      	strh	r3, [r4, #12]
   827be:	6022      	str	r2, [r4, #0]
   827c0:	6122      	str	r2, [r4, #16]
   827c2:	6161      	str	r1, [r4, #20]
   827c4:	e7d2      	b.n	8276c <__smakebuf_r+0x7c>
   827c6:	bf00      	nop
   827c8:	00081f51 	.word	0x00081f51
   827cc:	000833ad 	.word	0x000833ad

000827d0 <malloc>:
   827d0:	4b02      	ldr	r3, [pc, #8]	; (827dc <malloc+0xc>)
   827d2:	4601      	mov	r1, r0
   827d4:	6818      	ldr	r0, [r3, #0]
   827d6:	f000 b803 	b.w	827e0 <_malloc_r>
   827da:	bf00      	nop
   827dc:	20070560 	.word	0x20070560

000827e0 <_malloc_r>:
   827e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   827e4:	f101 050b 	add.w	r5, r1, #11
   827e8:	2d16      	cmp	r5, #22
   827ea:	b083      	sub	sp, #12
   827ec:	4606      	mov	r6, r0
   827ee:	d927      	bls.n	82840 <_malloc_r+0x60>
   827f0:	f035 0507 	bics.w	r5, r5, #7
   827f4:	d427      	bmi.n	82846 <_malloc_r+0x66>
   827f6:	42a9      	cmp	r1, r5
   827f8:	d825      	bhi.n	82846 <_malloc_r+0x66>
   827fa:	4630      	mov	r0, r6
   827fc:	f000 fbb2 	bl	82f64 <__malloc_lock>
   82800:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82804:	d226      	bcs.n	82854 <_malloc_r+0x74>
   82806:	4fc1      	ldr	r7, [pc, #772]	; (82b0c <_malloc_r+0x32c>)
   82808:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   8280c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82810:	68dc      	ldr	r4, [r3, #12]
   82812:	429c      	cmp	r4, r3
   82814:	f000 81d2 	beq.w	82bbc <_malloc_r+0x3dc>
   82818:	6863      	ldr	r3, [r4, #4]
   8281a:	68e2      	ldr	r2, [r4, #12]
   8281c:	f023 0303 	bic.w	r3, r3, #3
   82820:	4423      	add	r3, r4
   82822:	6858      	ldr	r0, [r3, #4]
   82824:	68a1      	ldr	r1, [r4, #8]
   82826:	f040 0501 	orr.w	r5, r0, #1
   8282a:	60ca      	str	r2, [r1, #12]
   8282c:	4630      	mov	r0, r6
   8282e:	6091      	str	r1, [r2, #8]
   82830:	605d      	str	r5, [r3, #4]
   82832:	f000 fb99 	bl	82f68 <__malloc_unlock>
   82836:	3408      	adds	r4, #8
   82838:	4620      	mov	r0, r4
   8283a:	b003      	add	sp, #12
   8283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82840:	2510      	movs	r5, #16
   82842:	42a9      	cmp	r1, r5
   82844:	d9d9      	bls.n	827fa <_malloc_r+0x1a>
   82846:	2400      	movs	r4, #0
   82848:	230c      	movs	r3, #12
   8284a:	4620      	mov	r0, r4
   8284c:	6033      	str	r3, [r6, #0]
   8284e:	b003      	add	sp, #12
   82850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82854:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82858:	f000 8089 	beq.w	8296e <_malloc_r+0x18e>
   8285c:	f1bc 0f04 	cmp.w	ip, #4
   82860:	f200 8160 	bhi.w	82b24 <_malloc_r+0x344>
   82864:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82868:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   8286c:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82870:	4fa6      	ldr	r7, [pc, #664]	; (82b0c <_malloc_r+0x32c>)
   82872:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82876:	68cc      	ldr	r4, [r1, #12]
   82878:	42a1      	cmp	r1, r4
   8287a:	d105      	bne.n	82888 <_malloc_r+0xa8>
   8287c:	e00c      	b.n	82898 <_malloc_r+0xb8>
   8287e:	2b00      	cmp	r3, #0
   82880:	da79      	bge.n	82976 <_malloc_r+0x196>
   82882:	68e4      	ldr	r4, [r4, #12]
   82884:	42a1      	cmp	r1, r4
   82886:	d007      	beq.n	82898 <_malloc_r+0xb8>
   82888:	6862      	ldr	r2, [r4, #4]
   8288a:	f022 0203 	bic.w	r2, r2, #3
   8288e:	1b53      	subs	r3, r2, r5
   82890:	2b0f      	cmp	r3, #15
   82892:	ddf4      	ble.n	8287e <_malloc_r+0x9e>
   82894:	f10c 3cff 	add.w	ip, ip, #4294967295
   82898:	f10c 0c01 	add.w	ip, ip, #1
   8289c:	4b9b      	ldr	r3, [pc, #620]	; (82b0c <_malloc_r+0x32c>)
   8289e:	693c      	ldr	r4, [r7, #16]
   828a0:	f103 0e08 	add.w	lr, r3, #8
   828a4:	4574      	cmp	r4, lr
   828a6:	f000 817e 	beq.w	82ba6 <_malloc_r+0x3c6>
   828aa:	6861      	ldr	r1, [r4, #4]
   828ac:	f021 0103 	bic.w	r1, r1, #3
   828b0:	1b4a      	subs	r2, r1, r5
   828b2:	2a0f      	cmp	r2, #15
   828b4:	f300 8164 	bgt.w	82b80 <_malloc_r+0x3a0>
   828b8:	2a00      	cmp	r2, #0
   828ba:	f8c3 e014 	str.w	lr, [r3, #20]
   828be:	f8c3 e010 	str.w	lr, [r3, #16]
   828c2:	da69      	bge.n	82998 <_malloc_r+0x1b8>
   828c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   828c8:	f080 813a 	bcs.w	82b40 <_malloc_r+0x360>
   828cc:	08c9      	lsrs	r1, r1, #3
   828ce:	108a      	asrs	r2, r1, #2
   828d0:	f04f 0801 	mov.w	r8, #1
   828d4:	fa08 f802 	lsl.w	r8, r8, r2
   828d8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   828dc:	685a      	ldr	r2, [r3, #4]
   828de:	6888      	ldr	r0, [r1, #8]
   828e0:	ea48 0202 	orr.w	r2, r8, r2
   828e4:	60a0      	str	r0, [r4, #8]
   828e6:	60e1      	str	r1, [r4, #12]
   828e8:	605a      	str	r2, [r3, #4]
   828ea:	608c      	str	r4, [r1, #8]
   828ec:	60c4      	str	r4, [r0, #12]
   828ee:	ea4f 03ac 	mov.w	r3, ip, asr #2
   828f2:	2001      	movs	r0, #1
   828f4:	4098      	lsls	r0, r3
   828f6:	4290      	cmp	r0, r2
   828f8:	d85b      	bhi.n	829b2 <_malloc_r+0x1d2>
   828fa:	4202      	tst	r2, r0
   828fc:	d106      	bne.n	8290c <_malloc_r+0x12c>
   828fe:	f02c 0c03 	bic.w	ip, ip, #3
   82902:	0040      	lsls	r0, r0, #1
   82904:	4202      	tst	r2, r0
   82906:	f10c 0c04 	add.w	ip, ip, #4
   8290a:	d0fa      	beq.n	82902 <_malloc_r+0x122>
   8290c:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82910:	4644      	mov	r4, r8
   82912:	46e1      	mov	r9, ip
   82914:	68e3      	ldr	r3, [r4, #12]
   82916:	429c      	cmp	r4, r3
   82918:	d107      	bne.n	8292a <_malloc_r+0x14a>
   8291a:	e146      	b.n	82baa <_malloc_r+0x3ca>
   8291c:	2a00      	cmp	r2, #0
   8291e:	f280 8157 	bge.w	82bd0 <_malloc_r+0x3f0>
   82922:	68db      	ldr	r3, [r3, #12]
   82924:	429c      	cmp	r4, r3
   82926:	f000 8140 	beq.w	82baa <_malloc_r+0x3ca>
   8292a:	6859      	ldr	r1, [r3, #4]
   8292c:	f021 0103 	bic.w	r1, r1, #3
   82930:	1b4a      	subs	r2, r1, r5
   82932:	2a0f      	cmp	r2, #15
   82934:	ddf2      	ble.n	8291c <_malloc_r+0x13c>
   82936:	461c      	mov	r4, r3
   82938:	f854 cf08 	ldr.w	ip, [r4, #8]!
   8293c:	68d9      	ldr	r1, [r3, #12]
   8293e:	f045 0901 	orr.w	r9, r5, #1
   82942:	f042 0801 	orr.w	r8, r2, #1
   82946:	441d      	add	r5, r3
   82948:	f8c3 9004 	str.w	r9, [r3, #4]
   8294c:	4630      	mov	r0, r6
   8294e:	f8cc 100c 	str.w	r1, [ip, #12]
   82952:	f8c1 c008 	str.w	ip, [r1, #8]
   82956:	617d      	str	r5, [r7, #20]
   82958:	613d      	str	r5, [r7, #16]
   8295a:	f8c5 e00c 	str.w	lr, [r5, #12]
   8295e:	f8c5 e008 	str.w	lr, [r5, #8]
   82962:	f8c5 8004 	str.w	r8, [r5, #4]
   82966:	50aa      	str	r2, [r5, r2]
   82968:	f000 fafe 	bl	82f68 <__malloc_unlock>
   8296c:	e764      	b.n	82838 <_malloc_r+0x58>
   8296e:	217e      	movs	r1, #126	; 0x7e
   82970:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82974:	e77c      	b.n	82870 <_malloc_r+0x90>
   82976:	4422      	add	r2, r4
   82978:	6850      	ldr	r0, [r2, #4]
   8297a:	68e3      	ldr	r3, [r4, #12]
   8297c:	68a1      	ldr	r1, [r4, #8]
   8297e:	f040 0501 	orr.w	r5, r0, #1
   82982:	60cb      	str	r3, [r1, #12]
   82984:	4630      	mov	r0, r6
   82986:	6099      	str	r1, [r3, #8]
   82988:	6055      	str	r5, [r2, #4]
   8298a:	f000 faed 	bl	82f68 <__malloc_unlock>
   8298e:	3408      	adds	r4, #8
   82990:	4620      	mov	r0, r4
   82992:	b003      	add	sp, #12
   82994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82998:	4421      	add	r1, r4
   8299a:	684b      	ldr	r3, [r1, #4]
   8299c:	4630      	mov	r0, r6
   8299e:	f043 0301 	orr.w	r3, r3, #1
   829a2:	604b      	str	r3, [r1, #4]
   829a4:	f000 fae0 	bl	82f68 <__malloc_unlock>
   829a8:	3408      	adds	r4, #8
   829aa:	4620      	mov	r0, r4
   829ac:	b003      	add	sp, #12
   829ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829b2:	68bc      	ldr	r4, [r7, #8]
   829b4:	6863      	ldr	r3, [r4, #4]
   829b6:	f023 0903 	bic.w	r9, r3, #3
   829ba:	45a9      	cmp	r9, r5
   829bc:	d304      	bcc.n	829c8 <_malloc_r+0x1e8>
   829be:	ebc5 0309 	rsb	r3, r5, r9
   829c2:	2b0f      	cmp	r3, #15
   829c4:	f300 8091 	bgt.w	82aea <_malloc_r+0x30a>
   829c8:	4b51      	ldr	r3, [pc, #324]	; (82b10 <_malloc_r+0x330>)
   829ca:	4a52      	ldr	r2, [pc, #328]	; (82b14 <_malloc_r+0x334>)
   829cc:	6819      	ldr	r1, [r3, #0]
   829ce:	6813      	ldr	r3, [r2, #0]
   829d0:	eb05 0a01 	add.w	sl, r5, r1
   829d4:	3301      	adds	r3, #1
   829d6:	eb04 0b09 	add.w	fp, r4, r9
   829da:	f000 8161 	beq.w	82ca0 <_malloc_r+0x4c0>
   829de:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   829e2:	f10a 0a0f 	add.w	sl, sl, #15
   829e6:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   829ea:	f02a 0a0f 	bic.w	sl, sl, #15
   829ee:	4630      	mov	r0, r6
   829f0:	4651      	mov	r1, sl
   829f2:	9201      	str	r2, [sp, #4]
   829f4:	f000 fc9a 	bl	8332c <_sbrk_r>
   829f8:	f1b0 3fff 	cmp.w	r0, #4294967295
   829fc:	4680      	mov	r8, r0
   829fe:	9a01      	ldr	r2, [sp, #4]
   82a00:	f000 8101 	beq.w	82c06 <_malloc_r+0x426>
   82a04:	4583      	cmp	fp, r0
   82a06:	f200 80fb 	bhi.w	82c00 <_malloc_r+0x420>
   82a0a:	f8df c114 	ldr.w	ip, [pc, #276]	; 82b20 <_malloc_r+0x340>
   82a0e:	45c3      	cmp	fp, r8
   82a10:	f8dc 3000 	ldr.w	r3, [ip]
   82a14:	4453      	add	r3, sl
   82a16:	f8cc 3000 	str.w	r3, [ip]
   82a1a:	f000 814a 	beq.w	82cb2 <_malloc_r+0x4d2>
   82a1e:	6812      	ldr	r2, [r2, #0]
   82a20:	493c      	ldr	r1, [pc, #240]	; (82b14 <_malloc_r+0x334>)
   82a22:	3201      	adds	r2, #1
   82a24:	bf1b      	ittet	ne
   82a26:	ebcb 0b08 	rsbne	fp, fp, r8
   82a2a:	445b      	addne	r3, fp
   82a2c:	f8c1 8000 	streq.w	r8, [r1]
   82a30:	f8cc 3000 	strne.w	r3, [ip]
   82a34:	f018 0307 	ands.w	r3, r8, #7
   82a38:	f000 8114 	beq.w	82c64 <_malloc_r+0x484>
   82a3c:	f1c3 0208 	rsb	r2, r3, #8
   82a40:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82a44:	4490      	add	r8, r2
   82a46:	3308      	adds	r3, #8
   82a48:	44c2      	add	sl, r8
   82a4a:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82a4e:	ebca 0a03 	rsb	sl, sl, r3
   82a52:	4651      	mov	r1, sl
   82a54:	4630      	mov	r0, r6
   82a56:	f8cd c004 	str.w	ip, [sp, #4]
   82a5a:	f000 fc67 	bl	8332c <_sbrk_r>
   82a5e:	1c43      	adds	r3, r0, #1
   82a60:	f8dd c004 	ldr.w	ip, [sp, #4]
   82a64:	f000 8135 	beq.w	82cd2 <_malloc_r+0x4f2>
   82a68:	ebc8 0200 	rsb	r2, r8, r0
   82a6c:	4452      	add	r2, sl
   82a6e:	f042 0201 	orr.w	r2, r2, #1
   82a72:	f8dc 3000 	ldr.w	r3, [ip]
   82a76:	42bc      	cmp	r4, r7
   82a78:	4453      	add	r3, sl
   82a7a:	f8c7 8008 	str.w	r8, [r7, #8]
   82a7e:	f8cc 3000 	str.w	r3, [ip]
   82a82:	f8c8 2004 	str.w	r2, [r8, #4]
   82a86:	f8df a098 	ldr.w	sl, [pc, #152]	; 82b20 <_malloc_r+0x340>
   82a8a:	d015      	beq.n	82ab8 <_malloc_r+0x2d8>
   82a8c:	f1b9 0f0f 	cmp.w	r9, #15
   82a90:	f240 80eb 	bls.w	82c6a <_malloc_r+0x48a>
   82a94:	6861      	ldr	r1, [r4, #4]
   82a96:	f1a9 020c 	sub.w	r2, r9, #12
   82a9a:	f022 0207 	bic.w	r2, r2, #7
   82a9e:	f001 0101 	and.w	r1, r1, #1
   82aa2:	ea42 0e01 	orr.w	lr, r2, r1
   82aa6:	2005      	movs	r0, #5
   82aa8:	18a1      	adds	r1, r4, r2
   82aaa:	2a0f      	cmp	r2, #15
   82aac:	f8c4 e004 	str.w	lr, [r4, #4]
   82ab0:	6048      	str	r0, [r1, #4]
   82ab2:	6088      	str	r0, [r1, #8]
   82ab4:	f200 8111 	bhi.w	82cda <_malloc_r+0x4fa>
   82ab8:	4a17      	ldr	r2, [pc, #92]	; (82b18 <_malloc_r+0x338>)
   82aba:	68bc      	ldr	r4, [r7, #8]
   82abc:	6811      	ldr	r1, [r2, #0]
   82abe:	428b      	cmp	r3, r1
   82ac0:	bf88      	it	hi
   82ac2:	6013      	strhi	r3, [r2, #0]
   82ac4:	4a15      	ldr	r2, [pc, #84]	; (82b1c <_malloc_r+0x33c>)
   82ac6:	6811      	ldr	r1, [r2, #0]
   82ac8:	428b      	cmp	r3, r1
   82aca:	bf88      	it	hi
   82acc:	6013      	strhi	r3, [r2, #0]
   82ace:	6862      	ldr	r2, [r4, #4]
   82ad0:	f022 0203 	bic.w	r2, r2, #3
   82ad4:	4295      	cmp	r5, r2
   82ad6:	ebc5 0302 	rsb	r3, r5, r2
   82ada:	d801      	bhi.n	82ae0 <_malloc_r+0x300>
   82adc:	2b0f      	cmp	r3, #15
   82ade:	dc04      	bgt.n	82aea <_malloc_r+0x30a>
   82ae0:	4630      	mov	r0, r6
   82ae2:	f000 fa41 	bl	82f68 <__malloc_unlock>
   82ae6:	2400      	movs	r4, #0
   82ae8:	e6a6      	b.n	82838 <_malloc_r+0x58>
   82aea:	f045 0201 	orr.w	r2, r5, #1
   82aee:	f043 0301 	orr.w	r3, r3, #1
   82af2:	4425      	add	r5, r4
   82af4:	6062      	str	r2, [r4, #4]
   82af6:	4630      	mov	r0, r6
   82af8:	60bd      	str	r5, [r7, #8]
   82afa:	606b      	str	r3, [r5, #4]
   82afc:	f000 fa34 	bl	82f68 <__malloc_unlock>
   82b00:	3408      	adds	r4, #8
   82b02:	4620      	mov	r0, r4
   82b04:	b003      	add	sp, #12
   82b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b0a:	bf00      	nop
   82b0c:	20070588 	.word	0x20070588
   82b10:	20070ad4 	.word	0x20070ad4
   82b14:	20070994 	.word	0x20070994
   82b18:	20070ad0 	.word	0x20070ad0
   82b1c:	20070acc 	.word	0x20070acc
   82b20:	20070ad8 	.word	0x20070ad8
   82b24:	f1bc 0f14 	cmp.w	ip, #20
   82b28:	d961      	bls.n	82bee <_malloc_r+0x40e>
   82b2a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82b2e:	f200 808f 	bhi.w	82c50 <_malloc_r+0x470>
   82b32:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82b36:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82b3a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82b3e:	e697      	b.n	82870 <_malloc_r+0x90>
   82b40:	0a4b      	lsrs	r3, r1, #9
   82b42:	2b04      	cmp	r3, #4
   82b44:	d958      	bls.n	82bf8 <_malloc_r+0x418>
   82b46:	2b14      	cmp	r3, #20
   82b48:	f200 80ad 	bhi.w	82ca6 <_malloc_r+0x4c6>
   82b4c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82b50:	0050      	lsls	r0, r2, #1
   82b52:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82b56:	6883      	ldr	r3, [r0, #8]
   82b58:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82d14 <_malloc_r+0x534>
   82b5c:	4283      	cmp	r3, r0
   82b5e:	f000 808a 	beq.w	82c76 <_malloc_r+0x496>
   82b62:	685a      	ldr	r2, [r3, #4]
   82b64:	f022 0203 	bic.w	r2, r2, #3
   82b68:	4291      	cmp	r1, r2
   82b6a:	d202      	bcs.n	82b72 <_malloc_r+0x392>
   82b6c:	689b      	ldr	r3, [r3, #8]
   82b6e:	4298      	cmp	r0, r3
   82b70:	d1f7      	bne.n	82b62 <_malloc_r+0x382>
   82b72:	68d9      	ldr	r1, [r3, #12]
   82b74:	687a      	ldr	r2, [r7, #4]
   82b76:	60e1      	str	r1, [r4, #12]
   82b78:	60a3      	str	r3, [r4, #8]
   82b7a:	608c      	str	r4, [r1, #8]
   82b7c:	60dc      	str	r4, [r3, #12]
   82b7e:	e6b6      	b.n	828ee <_malloc_r+0x10e>
   82b80:	f045 0701 	orr.w	r7, r5, #1
   82b84:	f042 0101 	orr.w	r1, r2, #1
   82b88:	4425      	add	r5, r4
   82b8a:	6067      	str	r7, [r4, #4]
   82b8c:	4630      	mov	r0, r6
   82b8e:	615d      	str	r5, [r3, #20]
   82b90:	611d      	str	r5, [r3, #16]
   82b92:	f8c5 e00c 	str.w	lr, [r5, #12]
   82b96:	f8c5 e008 	str.w	lr, [r5, #8]
   82b9a:	6069      	str	r1, [r5, #4]
   82b9c:	50aa      	str	r2, [r5, r2]
   82b9e:	3408      	adds	r4, #8
   82ba0:	f000 f9e2 	bl	82f68 <__malloc_unlock>
   82ba4:	e648      	b.n	82838 <_malloc_r+0x58>
   82ba6:	685a      	ldr	r2, [r3, #4]
   82ba8:	e6a1      	b.n	828ee <_malloc_r+0x10e>
   82baa:	f109 0901 	add.w	r9, r9, #1
   82bae:	f019 0f03 	tst.w	r9, #3
   82bb2:	f104 0408 	add.w	r4, r4, #8
   82bb6:	f47f aead 	bne.w	82914 <_malloc_r+0x134>
   82bba:	e02d      	b.n	82c18 <_malloc_r+0x438>
   82bbc:	f104 0308 	add.w	r3, r4, #8
   82bc0:	6964      	ldr	r4, [r4, #20]
   82bc2:	42a3      	cmp	r3, r4
   82bc4:	bf08      	it	eq
   82bc6:	f10c 0c02 	addeq.w	ip, ip, #2
   82bca:	f43f ae67 	beq.w	8289c <_malloc_r+0xbc>
   82bce:	e623      	b.n	82818 <_malloc_r+0x38>
   82bd0:	4419      	add	r1, r3
   82bd2:	6848      	ldr	r0, [r1, #4]
   82bd4:	461c      	mov	r4, r3
   82bd6:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82bda:	68db      	ldr	r3, [r3, #12]
   82bdc:	f040 0501 	orr.w	r5, r0, #1
   82be0:	604d      	str	r5, [r1, #4]
   82be2:	4630      	mov	r0, r6
   82be4:	60d3      	str	r3, [r2, #12]
   82be6:	609a      	str	r2, [r3, #8]
   82be8:	f000 f9be 	bl	82f68 <__malloc_unlock>
   82bec:	e624      	b.n	82838 <_malloc_r+0x58>
   82bee:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82bf2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82bf6:	e63b      	b.n	82870 <_malloc_r+0x90>
   82bf8:	098a      	lsrs	r2, r1, #6
   82bfa:	3238      	adds	r2, #56	; 0x38
   82bfc:	0050      	lsls	r0, r2, #1
   82bfe:	e7a8      	b.n	82b52 <_malloc_r+0x372>
   82c00:	42bc      	cmp	r4, r7
   82c02:	f43f af02 	beq.w	82a0a <_malloc_r+0x22a>
   82c06:	68bc      	ldr	r4, [r7, #8]
   82c08:	6862      	ldr	r2, [r4, #4]
   82c0a:	f022 0203 	bic.w	r2, r2, #3
   82c0e:	e761      	b.n	82ad4 <_malloc_r+0x2f4>
   82c10:	f8d8 8000 	ldr.w	r8, [r8]
   82c14:	4598      	cmp	r8, r3
   82c16:	d17a      	bne.n	82d0e <_malloc_r+0x52e>
   82c18:	f01c 0f03 	tst.w	ip, #3
   82c1c:	f1a8 0308 	sub.w	r3, r8, #8
   82c20:	f10c 3cff 	add.w	ip, ip, #4294967295
   82c24:	d1f4      	bne.n	82c10 <_malloc_r+0x430>
   82c26:	687b      	ldr	r3, [r7, #4]
   82c28:	ea23 0300 	bic.w	r3, r3, r0
   82c2c:	607b      	str	r3, [r7, #4]
   82c2e:	0040      	lsls	r0, r0, #1
   82c30:	4298      	cmp	r0, r3
   82c32:	f63f aebe 	bhi.w	829b2 <_malloc_r+0x1d2>
   82c36:	2800      	cmp	r0, #0
   82c38:	f43f aebb 	beq.w	829b2 <_malloc_r+0x1d2>
   82c3c:	4203      	tst	r3, r0
   82c3e:	46cc      	mov	ip, r9
   82c40:	f47f ae64 	bne.w	8290c <_malloc_r+0x12c>
   82c44:	0040      	lsls	r0, r0, #1
   82c46:	4203      	tst	r3, r0
   82c48:	f10c 0c04 	add.w	ip, ip, #4
   82c4c:	d0fa      	beq.n	82c44 <_malloc_r+0x464>
   82c4e:	e65d      	b.n	8290c <_malloc_r+0x12c>
   82c50:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82c54:	d819      	bhi.n	82c8a <_malloc_r+0x4aa>
   82c56:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82c5a:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82c5e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82c62:	e605      	b.n	82870 <_malloc_r+0x90>
   82c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82c68:	e6ee      	b.n	82a48 <_malloc_r+0x268>
   82c6a:	2301      	movs	r3, #1
   82c6c:	f8c8 3004 	str.w	r3, [r8, #4]
   82c70:	4644      	mov	r4, r8
   82c72:	2200      	movs	r2, #0
   82c74:	e72e      	b.n	82ad4 <_malloc_r+0x2f4>
   82c76:	1092      	asrs	r2, r2, #2
   82c78:	2001      	movs	r0, #1
   82c7a:	4090      	lsls	r0, r2
   82c7c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82c80:	4619      	mov	r1, r3
   82c82:	4302      	orrs	r2, r0
   82c84:	f8c8 2004 	str.w	r2, [r8, #4]
   82c88:	e775      	b.n	82b76 <_malloc_r+0x396>
   82c8a:	f240 5354 	movw	r3, #1364	; 0x554
   82c8e:	459c      	cmp	ip, r3
   82c90:	d81b      	bhi.n	82cca <_malloc_r+0x4ea>
   82c92:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82c96:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82c9a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82c9e:	e5e7      	b.n	82870 <_malloc_r+0x90>
   82ca0:	f10a 0a10 	add.w	sl, sl, #16
   82ca4:	e6a3      	b.n	829ee <_malloc_r+0x20e>
   82ca6:	2b54      	cmp	r3, #84	; 0x54
   82ca8:	d81f      	bhi.n	82cea <_malloc_r+0x50a>
   82caa:	0b0a      	lsrs	r2, r1, #12
   82cac:	326e      	adds	r2, #110	; 0x6e
   82cae:	0050      	lsls	r0, r2, #1
   82cb0:	e74f      	b.n	82b52 <_malloc_r+0x372>
   82cb2:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82cb6:	2900      	cmp	r1, #0
   82cb8:	f47f aeb1 	bne.w	82a1e <_malloc_r+0x23e>
   82cbc:	eb0a 0109 	add.w	r1, sl, r9
   82cc0:	68ba      	ldr	r2, [r7, #8]
   82cc2:	f041 0101 	orr.w	r1, r1, #1
   82cc6:	6051      	str	r1, [r2, #4]
   82cc8:	e6f6      	b.n	82ab8 <_malloc_r+0x2d8>
   82cca:	21fc      	movs	r1, #252	; 0xfc
   82ccc:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82cd0:	e5ce      	b.n	82870 <_malloc_r+0x90>
   82cd2:	2201      	movs	r2, #1
   82cd4:	f04f 0a00 	mov.w	sl, #0
   82cd8:	e6cb      	b.n	82a72 <_malloc_r+0x292>
   82cda:	f104 0108 	add.w	r1, r4, #8
   82cde:	4630      	mov	r0, r6
   82ce0:	f7ff fa80 	bl	821e4 <_free_r>
   82ce4:	f8da 3000 	ldr.w	r3, [sl]
   82ce8:	e6e6      	b.n	82ab8 <_malloc_r+0x2d8>
   82cea:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82cee:	d803      	bhi.n	82cf8 <_malloc_r+0x518>
   82cf0:	0bca      	lsrs	r2, r1, #15
   82cf2:	3277      	adds	r2, #119	; 0x77
   82cf4:	0050      	lsls	r0, r2, #1
   82cf6:	e72c      	b.n	82b52 <_malloc_r+0x372>
   82cf8:	f240 5254 	movw	r2, #1364	; 0x554
   82cfc:	4293      	cmp	r3, r2
   82cfe:	d803      	bhi.n	82d08 <_malloc_r+0x528>
   82d00:	0c8a      	lsrs	r2, r1, #18
   82d02:	327c      	adds	r2, #124	; 0x7c
   82d04:	0050      	lsls	r0, r2, #1
   82d06:	e724      	b.n	82b52 <_malloc_r+0x372>
   82d08:	20fc      	movs	r0, #252	; 0xfc
   82d0a:	227e      	movs	r2, #126	; 0x7e
   82d0c:	e721      	b.n	82b52 <_malloc_r+0x372>
   82d0e:	687b      	ldr	r3, [r7, #4]
   82d10:	e78d      	b.n	82c2e <_malloc_r+0x44e>
   82d12:	bf00      	nop
   82d14:	20070588 	.word	0x20070588

00082d18 <memchr>:
   82d18:	0783      	lsls	r3, r0, #30
   82d1a:	b470      	push	{r4, r5, r6}
   82d1c:	b2c9      	uxtb	r1, r1
   82d1e:	d040      	beq.n	82da2 <memchr+0x8a>
   82d20:	1e54      	subs	r4, r2, #1
   82d22:	b32a      	cbz	r2, 82d70 <memchr+0x58>
   82d24:	7803      	ldrb	r3, [r0, #0]
   82d26:	428b      	cmp	r3, r1
   82d28:	d023      	beq.n	82d72 <memchr+0x5a>
   82d2a:	1c43      	adds	r3, r0, #1
   82d2c:	e004      	b.n	82d38 <memchr+0x20>
   82d2e:	b1fc      	cbz	r4, 82d70 <memchr+0x58>
   82d30:	7805      	ldrb	r5, [r0, #0]
   82d32:	4614      	mov	r4, r2
   82d34:	428d      	cmp	r5, r1
   82d36:	d01c      	beq.n	82d72 <memchr+0x5a>
   82d38:	f013 0f03 	tst.w	r3, #3
   82d3c:	4618      	mov	r0, r3
   82d3e:	f104 32ff 	add.w	r2, r4, #4294967295
   82d42:	f103 0301 	add.w	r3, r3, #1
   82d46:	d1f2      	bne.n	82d2e <memchr+0x16>
   82d48:	2c03      	cmp	r4, #3
   82d4a:	d814      	bhi.n	82d76 <memchr+0x5e>
   82d4c:	1e65      	subs	r5, r4, #1
   82d4e:	b354      	cbz	r4, 82da6 <memchr+0x8e>
   82d50:	7803      	ldrb	r3, [r0, #0]
   82d52:	428b      	cmp	r3, r1
   82d54:	d00d      	beq.n	82d72 <memchr+0x5a>
   82d56:	1c42      	adds	r2, r0, #1
   82d58:	2300      	movs	r3, #0
   82d5a:	e002      	b.n	82d62 <memchr+0x4a>
   82d5c:	7804      	ldrb	r4, [r0, #0]
   82d5e:	428c      	cmp	r4, r1
   82d60:	d007      	beq.n	82d72 <memchr+0x5a>
   82d62:	42ab      	cmp	r3, r5
   82d64:	4610      	mov	r0, r2
   82d66:	f103 0301 	add.w	r3, r3, #1
   82d6a:	f102 0201 	add.w	r2, r2, #1
   82d6e:	d1f5      	bne.n	82d5c <memchr+0x44>
   82d70:	2000      	movs	r0, #0
   82d72:	bc70      	pop	{r4, r5, r6}
   82d74:	4770      	bx	lr
   82d76:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82d7a:	4603      	mov	r3, r0
   82d7c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82d80:	681a      	ldr	r2, [r3, #0]
   82d82:	4618      	mov	r0, r3
   82d84:	4072      	eors	r2, r6
   82d86:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   82d8a:	ea25 0202 	bic.w	r2, r5, r2
   82d8e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   82d92:	f103 0304 	add.w	r3, r3, #4
   82d96:	d1d9      	bne.n	82d4c <memchr+0x34>
   82d98:	3c04      	subs	r4, #4
   82d9a:	2c03      	cmp	r4, #3
   82d9c:	4618      	mov	r0, r3
   82d9e:	d8ef      	bhi.n	82d80 <memchr+0x68>
   82da0:	e7d4      	b.n	82d4c <memchr+0x34>
   82da2:	4614      	mov	r4, r2
   82da4:	e7d0      	b.n	82d48 <memchr+0x30>
   82da6:	4620      	mov	r0, r4
   82da8:	e7e3      	b.n	82d72 <memchr+0x5a>
   82daa:	bf00      	nop

00082dac <memcpy>:
   82dac:	4684      	mov	ip, r0
   82dae:	ea41 0300 	orr.w	r3, r1, r0
   82db2:	f013 0303 	ands.w	r3, r3, #3
   82db6:	d149      	bne.n	82e4c <memcpy+0xa0>
   82db8:	3a40      	subs	r2, #64	; 0x40
   82dba:	d323      	bcc.n	82e04 <memcpy+0x58>
   82dbc:	680b      	ldr	r3, [r1, #0]
   82dbe:	6003      	str	r3, [r0, #0]
   82dc0:	684b      	ldr	r3, [r1, #4]
   82dc2:	6043      	str	r3, [r0, #4]
   82dc4:	688b      	ldr	r3, [r1, #8]
   82dc6:	6083      	str	r3, [r0, #8]
   82dc8:	68cb      	ldr	r3, [r1, #12]
   82dca:	60c3      	str	r3, [r0, #12]
   82dcc:	690b      	ldr	r3, [r1, #16]
   82dce:	6103      	str	r3, [r0, #16]
   82dd0:	694b      	ldr	r3, [r1, #20]
   82dd2:	6143      	str	r3, [r0, #20]
   82dd4:	698b      	ldr	r3, [r1, #24]
   82dd6:	6183      	str	r3, [r0, #24]
   82dd8:	69cb      	ldr	r3, [r1, #28]
   82dda:	61c3      	str	r3, [r0, #28]
   82ddc:	6a0b      	ldr	r3, [r1, #32]
   82dde:	6203      	str	r3, [r0, #32]
   82de0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82de2:	6243      	str	r3, [r0, #36]	; 0x24
   82de4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82de6:	6283      	str	r3, [r0, #40]	; 0x28
   82de8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82dea:	62c3      	str	r3, [r0, #44]	; 0x2c
   82dec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82dee:	6303      	str	r3, [r0, #48]	; 0x30
   82df0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82df2:	6343      	str	r3, [r0, #52]	; 0x34
   82df4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82df6:	6383      	str	r3, [r0, #56]	; 0x38
   82df8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82dfa:	63c3      	str	r3, [r0, #60]	; 0x3c
   82dfc:	3040      	adds	r0, #64	; 0x40
   82dfe:	3140      	adds	r1, #64	; 0x40
   82e00:	3a40      	subs	r2, #64	; 0x40
   82e02:	d2db      	bcs.n	82dbc <memcpy+0x10>
   82e04:	3230      	adds	r2, #48	; 0x30
   82e06:	d30b      	bcc.n	82e20 <memcpy+0x74>
   82e08:	680b      	ldr	r3, [r1, #0]
   82e0a:	6003      	str	r3, [r0, #0]
   82e0c:	684b      	ldr	r3, [r1, #4]
   82e0e:	6043      	str	r3, [r0, #4]
   82e10:	688b      	ldr	r3, [r1, #8]
   82e12:	6083      	str	r3, [r0, #8]
   82e14:	68cb      	ldr	r3, [r1, #12]
   82e16:	60c3      	str	r3, [r0, #12]
   82e18:	3010      	adds	r0, #16
   82e1a:	3110      	adds	r1, #16
   82e1c:	3a10      	subs	r2, #16
   82e1e:	d2f3      	bcs.n	82e08 <memcpy+0x5c>
   82e20:	320c      	adds	r2, #12
   82e22:	d305      	bcc.n	82e30 <memcpy+0x84>
   82e24:	f851 3b04 	ldr.w	r3, [r1], #4
   82e28:	f840 3b04 	str.w	r3, [r0], #4
   82e2c:	3a04      	subs	r2, #4
   82e2e:	d2f9      	bcs.n	82e24 <memcpy+0x78>
   82e30:	3204      	adds	r2, #4
   82e32:	d008      	beq.n	82e46 <memcpy+0x9a>
   82e34:	07d2      	lsls	r2, r2, #31
   82e36:	bf1c      	itt	ne
   82e38:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82e3c:	f800 3b01 	strbne.w	r3, [r0], #1
   82e40:	d301      	bcc.n	82e46 <memcpy+0x9a>
   82e42:	880b      	ldrh	r3, [r1, #0]
   82e44:	8003      	strh	r3, [r0, #0]
   82e46:	4660      	mov	r0, ip
   82e48:	4770      	bx	lr
   82e4a:	bf00      	nop
   82e4c:	2a08      	cmp	r2, #8
   82e4e:	d313      	bcc.n	82e78 <memcpy+0xcc>
   82e50:	078b      	lsls	r3, r1, #30
   82e52:	d0b1      	beq.n	82db8 <memcpy+0xc>
   82e54:	f010 0303 	ands.w	r3, r0, #3
   82e58:	d0ae      	beq.n	82db8 <memcpy+0xc>
   82e5a:	f1c3 0304 	rsb	r3, r3, #4
   82e5e:	1ad2      	subs	r2, r2, r3
   82e60:	07db      	lsls	r3, r3, #31
   82e62:	bf1c      	itt	ne
   82e64:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82e68:	f800 3b01 	strbne.w	r3, [r0], #1
   82e6c:	d3a4      	bcc.n	82db8 <memcpy+0xc>
   82e6e:	f831 3b02 	ldrh.w	r3, [r1], #2
   82e72:	f820 3b02 	strh.w	r3, [r0], #2
   82e76:	e79f      	b.n	82db8 <memcpy+0xc>
   82e78:	3a04      	subs	r2, #4
   82e7a:	d3d9      	bcc.n	82e30 <memcpy+0x84>
   82e7c:	3a01      	subs	r2, #1
   82e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
   82e82:	f800 3b01 	strb.w	r3, [r0], #1
   82e86:	d2f9      	bcs.n	82e7c <memcpy+0xd0>
   82e88:	780b      	ldrb	r3, [r1, #0]
   82e8a:	7003      	strb	r3, [r0, #0]
   82e8c:	784b      	ldrb	r3, [r1, #1]
   82e8e:	7043      	strb	r3, [r0, #1]
   82e90:	788b      	ldrb	r3, [r1, #2]
   82e92:	7083      	strb	r3, [r0, #2]
   82e94:	4660      	mov	r0, ip
   82e96:	4770      	bx	lr

00082e98 <memmove>:
   82e98:	4288      	cmp	r0, r1
   82e9a:	b4f0      	push	{r4, r5, r6, r7}
   82e9c:	d910      	bls.n	82ec0 <memmove+0x28>
   82e9e:	188c      	adds	r4, r1, r2
   82ea0:	42a0      	cmp	r0, r4
   82ea2:	d20d      	bcs.n	82ec0 <memmove+0x28>
   82ea4:	1885      	adds	r5, r0, r2
   82ea6:	1e53      	subs	r3, r2, #1
   82ea8:	b142      	cbz	r2, 82ebc <memmove+0x24>
   82eaa:	4621      	mov	r1, r4
   82eac:	462a      	mov	r2, r5
   82eae:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   82eb2:	3b01      	subs	r3, #1
   82eb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   82eb8:	1c5c      	adds	r4, r3, #1
   82eba:	d1f8      	bne.n	82eae <memmove+0x16>
   82ebc:	bcf0      	pop	{r4, r5, r6, r7}
   82ebe:	4770      	bx	lr
   82ec0:	2a0f      	cmp	r2, #15
   82ec2:	d944      	bls.n	82f4e <memmove+0xb6>
   82ec4:	ea40 0301 	orr.w	r3, r0, r1
   82ec8:	079b      	lsls	r3, r3, #30
   82eca:	d144      	bne.n	82f56 <memmove+0xbe>
   82ecc:	f1a2 0710 	sub.w	r7, r2, #16
   82ed0:	093f      	lsrs	r7, r7, #4
   82ed2:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   82ed6:	3610      	adds	r6, #16
   82ed8:	460c      	mov	r4, r1
   82eda:	4603      	mov	r3, r0
   82edc:	6825      	ldr	r5, [r4, #0]
   82ede:	3310      	adds	r3, #16
   82ee0:	f843 5c10 	str.w	r5, [r3, #-16]
   82ee4:	6865      	ldr	r5, [r4, #4]
   82ee6:	3410      	adds	r4, #16
   82ee8:	f843 5c0c 	str.w	r5, [r3, #-12]
   82eec:	f854 5c08 	ldr.w	r5, [r4, #-8]
   82ef0:	f843 5c08 	str.w	r5, [r3, #-8]
   82ef4:	f854 5c04 	ldr.w	r5, [r4, #-4]
   82ef8:	f843 5c04 	str.w	r5, [r3, #-4]
   82efc:	42b3      	cmp	r3, r6
   82efe:	d1ed      	bne.n	82edc <memmove+0x44>
   82f00:	1c7b      	adds	r3, r7, #1
   82f02:	f002 0c0f 	and.w	ip, r2, #15
   82f06:	011b      	lsls	r3, r3, #4
   82f08:	f1bc 0f03 	cmp.w	ip, #3
   82f0c:	4419      	add	r1, r3
   82f0e:	4403      	add	r3, r0
   82f10:	d923      	bls.n	82f5a <memmove+0xc2>
   82f12:	460e      	mov	r6, r1
   82f14:	461d      	mov	r5, r3
   82f16:	4664      	mov	r4, ip
   82f18:	f856 7b04 	ldr.w	r7, [r6], #4
   82f1c:	3c04      	subs	r4, #4
   82f1e:	2c03      	cmp	r4, #3
   82f20:	f845 7b04 	str.w	r7, [r5], #4
   82f24:	d8f8      	bhi.n	82f18 <memmove+0x80>
   82f26:	f1ac 0404 	sub.w	r4, ip, #4
   82f2a:	f024 0403 	bic.w	r4, r4, #3
   82f2e:	3404      	adds	r4, #4
   82f30:	f002 0203 	and.w	r2, r2, #3
   82f34:	4423      	add	r3, r4
   82f36:	4421      	add	r1, r4
   82f38:	2a00      	cmp	r2, #0
   82f3a:	d0bf      	beq.n	82ebc <memmove+0x24>
   82f3c:	441a      	add	r2, r3
   82f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
   82f42:	f803 4b01 	strb.w	r4, [r3], #1
   82f46:	4293      	cmp	r3, r2
   82f48:	d1f9      	bne.n	82f3e <memmove+0xa6>
   82f4a:	bcf0      	pop	{r4, r5, r6, r7}
   82f4c:	4770      	bx	lr
   82f4e:	4603      	mov	r3, r0
   82f50:	2a00      	cmp	r2, #0
   82f52:	d1f3      	bne.n	82f3c <memmove+0xa4>
   82f54:	e7b2      	b.n	82ebc <memmove+0x24>
   82f56:	4603      	mov	r3, r0
   82f58:	e7f0      	b.n	82f3c <memmove+0xa4>
   82f5a:	4662      	mov	r2, ip
   82f5c:	2a00      	cmp	r2, #0
   82f5e:	d1ed      	bne.n	82f3c <memmove+0xa4>
   82f60:	e7ac      	b.n	82ebc <memmove+0x24>
   82f62:	bf00      	nop

00082f64 <__malloc_lock>:
   82f64:	4770      	bx	lr
   82f66:	bf00      	nop

00082f68 <__malloc_unlock>:
   82f68:	4770      	bx	lr
   82f6a:	bf00      	nop

00082f6c <_realloc_r>:
   82f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f70:	460c      	mov	r4, r1
   82f72:	b083      	sub	sp, #12
   82f74:	4690      	mov	r8, r2
   82f76:	4681      	mov	r9, r0
   82f78:	2900      	cmp	r1, #0
   82f7a:	f000 80ba 	beq.w	830f2 <_realloc_r+0x186>
   82f7e:	f7ff fff1 	bl	82f64 <__malloc_lock>
   82f82:	f108 060b 	add.w	r6, r8, #11
   82f86:	f854 3c04 	ldr.w	r3, [r4, #-4]
   82f8a:	2e16      	cmp	r6, #22
   82f8c:	f023 0503 	bic.w	r5, r3, #3
   82f90:	f1a4 0708 	sub.w	r7, r4, #8
   82f94:	d84b      	bhi.n	8302e <_realloc_r+0xc2>
   82f96:	2110      	movs	r1, #16
   82f98:	460e      	mov	r6, r1
   82f9a:	45b0      	cmp	r8, r6
   82f9c:	d84c      	bhi.n	83038 <_realloc_r+0xcc>
   82f9e:	428d      	cmp	r5, r1
   82fa0:	da51      	bge.n	83046 <_realloc_r+0xda>
   82fa2:	f8df b384 	ldr.w	fp, [pc, #900]	; 83328 <_realloc_r+0x3bc>
   82fa6:	1978      	adds	r0, r7, r5
   82fa8:	f8db e008 	ldr.w	lr, [fp, #8]
   82fac:	4586      	cmp	lr, r0
   82fae:	f000 80a6 	beq.w	830fe <_realloc_r+0x192>
   82fb2:	6842      	ldr	r2, [r0, #4]
   82fb4:	f022 0c01 	bic.w	ip, r2, #1
   82fb8:	4484      	add	ip, r0
   82fba:	f8dc c004 	ldr.w	ip, [ip, #4]
   82fbe:	f01c 0f01 	tst.w	ip, #1
   82fc2:	d054      	beq.n	8306e <_realloc_r+0x102>
   82fc4:	2200      	movs	r2, #0
   82fc6:	4610      	mov	r0, r2
   82fc8:	07db      	lsls	r3, r3, #31
   82fca:	d46f      	bmi.n	830ac <_realloc_r+0x140>
   82fcc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   82fd0:	ebc3 0a07 	rsb	sl, r3, r7
   82fd4:	f8da 3004 	ldr.w	r3, [sl, #4]
   82fd8:	f023 0303 	bic.w	r3, r3, #3
   82fdc:	442b      	add	r3, r5
   82fde:	2800      	cmp	r0, #0
   82fe0:	d062      	beq.n	830a8 <_realloc_r+0x13c>
   82fe2:	4570      	cmp	r0, lr
   82fe4:	f000 80e9 	beq.w	831ba <_realloc_r+0x24e>
   82fe8:	eb02 0e03 	add.w	lr, r2, r3
   82fec:	458e      	cmp	lr, r1
   82fee:	db5b      	blt.n	830a8 <_realloc_r+0x13c>
   82ff0:	68c3      	ldr	r3, [r0, #12]
   82ff2:	6882      	ldr	r2, [r0, #8]
   82ff4:	46d0      	mov	r8, sl
   82ff6:	60d3      	str	r3, [r2, #12]
   82ff8:	609a      	str	r2, [r3, #8]
   82ffa:	f858 1f08 	ldr.w	r1, [r8, #8]!
   82ffe:	f8da 300c 	ldr.w	r3, [sl, #12]
   83002:	1f2a      	subs	r2, r5, #4
   83004:	2a24      	cmp	r2, #36	; 0x24
   83006:	60cb      	str	r3, [r1, #12]
   83008:	6099      	str	r1, [r3, #8]
   8300a:	f200 8123 	bhi.w	83254 <_realloc_r+0x2e8>
   8300e:	2a13      	cmp	r2, #19
   83010:	f240 80b0 	bls.w	83174 <_realloc_r+0x208>
   83014:	6823      	ldr	r3, [r4, #0]
   83016:	2a1b      	cmp	r2, #27
   83018:	f8ca 3008 	str.w	r3, [sl, #8]
   8301c:	6863      	ldr	r3, [r4, #4]
   8301e:	f8ca 300c 	str.w	r3, [sl, #12]
   83022:	f200 812b 	bhi.w	8327c <_realloc_r+0x310>
   83026:	3408      	adds	r4, #8
   83028:	f10a 0310 	add.w	r3, sl, #16
   8302c:	e0a3      	b.n	83176 <_realloc_r+0x20a>
   8302e:	f026 0607 	bic.w	r6, r6, #7
   83032:	2e00      	cmp	r6, #0
   83034:	4631      	mov	r1, r6
   83036:	dab0      	bge.n	82f9a <_realloc_r+0x2e>
   83038:	230c      	movs	r3, #12
   8303a:	2000      	movs	r0, #0
   8303c:	f8c9 3000 	str.w	r3, [r9]
   83040:	b003      	add	sp, #12
   83042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83046:	46a0      	mov	r8, r4
   83048:	1baa      	subs	r2, r5, r6
   8304a:	2a0f      	cmp	r2, #15
   8304c:	f003 0301 	and.w	r3, r3, #1
   83050:	d81a      	bhi.n	83088 <_realloc_r+0x11c>
   83052:	432b      	orrs	r3, r5
   83054:	607b      	str	r3, [r7, #4]
   83056:	443d      	add	r5, r7
   83058:	686b      	ldr	r3, [r5, #4]
   8305a:	f043 0301 	orr.w	r3, r3, #1
   8305e:	606b      	str	r3, [r5, #4]
   83060:	4648      	mov	r0, r9
   83062:	f7ff ff81 	bl	82f68 <__malloc_unlock>
   83066:	4640      	mov	r0, r8
   83068:	b003      	add	sp, #12
   8306a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8306e:	f022 0203 	bic.w	r2, r2, #3
   83072:	eb02 0c05 	add.w	ip, r2, r5
   83076:	458c      	cmp	ip, r1
   83078:	dba6      	blt.n	82fc8 <_realloc_r+0x5c>
   8307a:	68c2      	ldr	r2, [r0, #12]
   8307c:	6881      	ldr	r1, [r0, #8]
   8307e:	46a0      	mov	r8, r4
   83080:	60ca      	str	r2, [r1, #12]
   83082:	4665      	mov	r5, ip
   83084:	6091      	str	r1, [r2, #8]
   83086:	e7df      	b.n	83048 <_realloc_r+0xdc>
   83088:	19b9      	adds	r1, r7, r6
   8308a:	4333      	orrs	r3, r6
   8308c:	f042 0001 	orr.w	r0, r2, #1
   83090:	607b      	str	r3, [r7, #4]
   83092:	440a      	add	r2, r1
   83094:	6048      	str	r0, [r1, #4]
   83096:	6853      	ldr	r3, [r2, #4]
   83098:	3108      	adds	r1, #8
   8309a:	f043 0301 	orr.w	r3, r3, #1
   8309e:	6053      	str	r3, [r2, #4]
   830a0:	4648      	mov	r0, r9
   830a2:	f7ff f89f 	bl	821e4 <_free_r>
   830a6:	e7db      	b.n	83060 <_realloc_r+0xf4>
   830a8:	428b      	cmp	r3, r1
   830aa:	da33      	bge.n	83114 <_realloc_r+0x1a8>
   830ac:	4641      	mov	r1, r8
   830ae:	4648      	mov	r0, r9
   830b0:	f7ff fb96 	bl	827e0 <_malloc_r>
   830b4:	4680      	mov	r8, r0
   830b6:	2800      	cmp	r0, #0
   830b8:	d0d2      	beq.n	83060 <_realloc_r+0xf4>
   830ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   830be:	f1a0 0108 	sub.w	r1, r0, #8
   830c2:	f023 0201 	bic.w	r2, r3, #1
   830c6:	443a      	add	r2, r7
   830c8:	4291      	cmp	r1, r2
   830ca:	f000 80bc 	beq.w	83246 <_realloc_r+0x2da>
   830ce:	1f2a      	subs	r2, r5, #4
   830d0:	2a24      	cmp	r2, #36	; 0x24
   830d2:	d86e      	bhi.n	831b2 <_realloc_r+0x246>
   830d4:	2a13      	cmp	r2, #19
   830d6:	d842      	bhi.n	8315e <_realloc_r+0x1f2>
   830d8:	4603      	mov	r3, r0
   830da:	4622      	mov	r2, r4
   830dc:	6811      	ldr	r1, [r2, #0]
   830de:	6019      	str	r1, [r3, #0]
   830e0:	6851      	ldr	r1, [r2, #4]
   830e2:	6059      	str	r1, [r3, #4]
   830e4:	6892      	ldr	r2, [r2, #8]
   830e6:	609a      	str	r2, [r3, #8]
   830e8:	4621      	mov	r1, r4
   830ea:	4648      	mov	r0, r9
   830ec:	f7ff f87a 	bl	821e4 <_free_r>
   830f0:	e7b6      	b.n	83060 <_realloc_r+0xf4>
   830f2:	4611      	mov	r1, r2
   830f4:	b003      	add	sp, #12
   830f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   830fa:	f7ff bb71 	b.w	827e0 <_malloc_r>
   830fe:	f8de 2004 	ldr.w	r2, [lr, #4]
   83102:	f106 0c10 	add.w	ip, r6, #16
   83106:	f022 0203 	bic.w	r2, r2, #3
   8310a:	1950      	adds	r0, r2, r5
   8310c:	4560      	cmp	r0, ip
   8310e:	da3d      	bge.n	8318c <_realloc_r+0x220>
   83110:	4670      	mov	r0, lr
   83112:	e759      	b.n	82fc8 <_realloc_r+0x5c>
   83114:	46d0      	mov	r8, sl
   83116:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8311a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8311e:	1f2a      	subs	r2, r5, #4
   83120:	2a24      	cmp	r2, #36	; 0x24
   83122:	60c1      	str	r1, [r0, #12]
   83124:	6088      	str	r0, [r1, #8]
   83126:	f200 80a0 	bhi.w	8326a <_realloc_r+0x2fe>
   8312a:	2a13      	cmp	r2, #19
   8312c:	f240 809b 	bls.w	83266 <_realloc_r+0x2fa>
   83130:	6821      	ldr	r1, [r4, #0]
   83132:	2a1b      	cmp	r2, #27
   83134:	f8ca 1008 	str.w	r1, [sl, #8]
   83138:	6861      	ldr	r1, [r4, #4]
   8313a:	f8ca 100c 	str.w	r1, [sl, #12]
   8313e:	f200 80b2 	bhi.w	832a6 <_realloc_r+0x33a>
   83142:	3408      	adds	r4, #8
   83144:	f10a 0210 	add.w	r2, sl, #16
   83148:	6821      	ldr	r1, [r4, #0]
   8314a:	461d      	mov	r5, r3
   8314c:	6011      	str	r1, [r2, #0]
   8314e:	6861      	ldr	r1, [r4, #4]
   83150:	4657      	mov	r7, sl
   83152:	6051      	str	r1, [r2, #4]
   83154:	68a3      	ldr	r3, [r4, #8]
   83156:	6093      	str	r3, [r2, #8]
   83158:	f8da 3004 	ldr.w	r3, [sl, #4]
   8315c:	e774      	b.n	83048 <_realloc_r+0xdc>
   8315e:	6823      	ldr	r3, [r4, #0]
   83160:	2a1b      	cmp	r2, #27
   83162:	6003      	str	r3, [r0, #0]
   83164:	6863      	ldr	r3, [r4, #4]
   83166:	6043      	str	r3, [r0, #4]
   83168:	d862      	bhi.n	83230 <_realloc_r+0x2c4>
   8316a:	f100 0308 	add.w	r3, r0, #8
   8316e:	f104 0208 	add.w	r2, r4, #8
   83172:	e7b3      	b.n	830dc <_realloc_r+0x170>
   83174:	4643      	mov	r3, r8
   83176:	6822      	ldr	r2, [r4, #0]
   83178:	4675      	mov	r5, lr
   8317a:	601a      	str	r2, [r3, #0]
   8317c:	6862      	ldr	r2, [r4, #4]
   8317e:	4657      	mov	r7, sl
   83180:	605a      	str	r2, [r3, #4]
   83182:	68a2      	ldr	r2, [r4, #8]
   83184:	609a      	str	r2, [r3, #8]
   83186:	f8da 3004 	ldr.w	r3, [sl, #4]
   8318a:	e75d      	b.n	83048 <_realloc_r+0xdc>
   8318c:	1b83      	subs	r3, r0, r6
   8318e:	4437      	add	r7, r6
   83190:	f043 0301 	orr.w	r3, r3, #1
   83194:	f8cb 7008 	str.w	r7, [fp, #8]
   83198:	607b      	str	r3, [r7, #4]
   8319a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8319e:	4648      	mov	r0, r9
   831a0:	f003 0301 	and.w	r3, r3, #1
   831a4:	431e      	orrs	r6, r3
   831a6:	f844 6c04 	str.w	r6, [r4, #-4]
   831aa:	f7ff fedd 	bl	82f68 <__malloc_unlock>
   831ae:	4620      	mov	r0, r4
   831b0:	e75a      	b.n	83068 <_realloc_r+0xfc>
   831b2:	4621      	mov	r1, r4
   831b4:	f7ff fe70 	bl	82e98 <memmove>
   831b8:	e796      	b.n	830e8 <_realloc_r+0x17c>
   831ba:	eb02 0c03 	add.w	ip, r2, r3
   831be:	f106 0210 	add.w	r2, r6, #16
   831c2:	4594      	cmp	ip, r2
   831c4:	f6ff af70 	blt.w	830a8 <_realloc_r+0x13c>
   831c8:	4657      	mov	r7, sl
   831ca:	f857 1f08 	ldr.w	r1, [r7, #8]!
   831ce:	f8da 300c 	ldr.w	r3, [sl, #12]
   831d2:	1f2a      	subs	r2, r5, #4
   831d4:	2a24      	cmp	r2, #36	; 0x24
   831d6:	60cb      	str	r3, [r1, #12]
   831d8:	6099      	str	r1, [r3, #8]
   831da:	f200 8086 	bhi.w	832ea <_realloc_r+0x37e>
   831de:	2a13      	cmp	r2, #19
   831e0:	d977      	bls.n	832d2 <_realloc_r+0x366>
   831e2:	6823      	ldr	r3, [r4, #0]
   831e4:	2a1b      	cmp	r2, #27
   831e6:	f8ca 3008 	str.w	r3, [sl, #8]
   831ea:	6863      	ldr	r3, [r4, #4]
   831ec:	f8ca 300c 	str.w	r3, [sl, #12]
   831f0:	f200 8084 	bhi.w	832fc <_realloc_r+0x390>
   831f4:	3408      	adds	r4, #8
   831f6:	f10a 0310 	add.w	r3, sl, #16
   831fa:	6822      	ldr	r2, [r4, #0]
   831fc:	601a      	str	r2, [r3, #0]
   831fe:	6862      	ldr	r2, [r4, #4]
   83200:	605a      	str	r2, [r3, #4]
   83202:	68a2      	ldr	r2, [r4, #8]
   83204:	609a      	str	r2, [r3, #8]
   83206:	ebc6 020c 	rsb	r2, r6, ip
   8320a:	eb0a 0306 	add.w	r3, sl, r6
   8320e:	f042 0201 	orr.w	r2, r2, #1
   83212:	f8cb 3008 	str.w	r3, [fp, #8]
   83216:	605a      	str	r2, [r3, #4]
   83218:	f8da 3004 	ldr.w	r3, [sl, #4]
   8321c:	4648      	mov	r0, r9
   8321e:	f003 0301 	and.w	r3, r3, #1
   83222:	431e      	orrs	r6, r3
   83224:	f8ca 6004 	str.w	r6, [sl, #4]
   83228:	f7ff fe9e 	bl	82f68 <__malloc_unlock>
   8322c:	4638      	mov	r0, r7
   8322e:	e71b      	b.n	83068 <_realloc_r+0xfc>
   83230:	68a3      	ldr	r3, [r4, #8]
   83232:	2a24      	cmp	r2, #36	; 0x24
   83234:	6083      	str	r3, [r0, #8]
   83236:	68e3      	ldr	r3, [r4, #12]
   83238:	60c3      	str	r3, [r0, #12]
   8323a:	d02b      	beq.n	83294 <_realloc_r+0x328>
   8323c:	f100 0310 	add.w	r3, r0, #16
   83240:	f104 0210 	add.w	r2, r4, #16
   83244:	e74a      	b.n	830dc <_realloc_r+0x170>
   83246:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8324a:	46a0      	mov	r8, r4
   8324c:	f022 0203 	bic.w	r2, r2, #3
   83250:	4415      	add	r5, r2
   83252:	e6f9      	b.n	83048 <_realloc_r+0xdc>
   83254:	4621      	mov	r1, r4
   83256:	4640      	mov	r0, r8
   83258:	4675      	mov	r5, lr
   8325a:	4657      	mov	r7, sl
   8325c:	f7ff fe1c 	bl	82e98 <memmove>
   83260:	f8da 3004 	ldr.w	r3, [sl, #4]
   83264:	e6f0      	b.n	83048 <_realloc_r+0xdc>
   83266:	4642      	mov	r2, r8
   83268:	e76e      	b.n	83148 <_realloc_r+0x1dc>
   8326a:	4621      	mov	r1, r4
   8326c:	4640      	mov	r0, r8
   8326e:	461d      	mov	r5, r3
   83270:	4657      	mov	r7, sl
   83272:	f7ff fe11 	bl	82e98 <memmove>
   83276:	f8da 3004 	ldr.w	r3, [sl, #4]
   8327a:	e6e5      	b.n	83048 <_realloc_r+0xdc>
   8327c:	68a3      	ldr	r3, [r4, #8]
   8327e:	2a24      	cmp	r2, #36	; 0x24
   83280:	f8ca 3010 	str.w	r3, [sl, #16]
   83284:	68e3      	ldr	r3, [r4, #12]
   83286:	f8ca 3014 	str.w	r3, [sl, #20]
   8328a:	d018      	beq.n	832be <_realloc_r+0x352>
   8328c:	3410      	adds	r4, #16
   8328e:	f10a 0318 	add.w	r3, sl, #24
   83292:	e770      	b.n	83176 <_realloc_r+0x20a>
   83294:	6922      	ldr	r2, [r4, #16]
   83296:	f100 0318 	add.w	r3, r0, #24
   8329a:	6102      	str	r2, [r0, #16]
   8329c:	6961      	ldr	r1, [r4, #20]
   8329e:	f104 0218 	add.w	r2, r4, #24
   832a2:	6141      	str	r1, [r0, #20]
   832a4:	e71a      	b.n	830dc <_realloc_r+0x170>
   832a6:	68a1      	ldr	r1, [r4, #8]
   832a8:	2a24      	cmp	r2, #36	; 0x24
   832aa:	f8ca 1010 	str.w	r1, [sl, #16]
   832ae:	68e1      	ldr	r1, [r4, #12]
   832b0:	f8ca 1014 	str.w	r1, [sl, #20]
   832b4:	d00f      	beq.n	832d6 <_realloc_r+0x36a>
   832b6:	3410      	adds	r4, #16
   832b8:	f10a 0218 	add.w	r2, sl, #24
   832bc:	e744      	b.n	83148 <_realloc_r+0x1dc>
   832be:	6922      	ldr	r2, [r4, #16]
   832c0:	f10a 0320 	add.w	r3, sl, #32
   832c4:	f8ca 2018 	str.w	r2, [sl, #24]
   832c8:	6962      	ldr	r2, [r4, #20]
   832ca:	3418      	adds	r4, #24
   832cc:	f8ca 201c 	str.w	r2, [sl, #28]
   832d0:	e751      	b.n	83176 <_realloc_r+0x20a>
   832d2:	463b      	mov	r3, r7
   832d4:	e791      	b.n	831fa <_realloc_r+0x28e>
   832d6:	6921      	ldr	r1, [r4, #16]
   832d8:	f10a 0220 	add.w	r2, sl, #32
   832dc:	f8ca 1018 	str.w	r1, [sl, #24]
   832e0:	6961      	ldr	r1, [r4, #20]
   832e2:	3418      	adds	r4, #24
   832e4:	f8ca 101c 	str.w	r1, [sl, #28]
   832e8:	e72e      	b.n	83148 <_realloc_r+0x1dc>
   832ea:	4621      	mov	r1, r4
   832ec:	4638      	mov	r0, r7
   832ee:	f8cd c004 	str.w	ip, [sp, #4]
   832f2:	f7ff fdd1 	bl	82e98 <memmove>
   832f6:	f8dd c004 	ldr.w	ip, [sp, #4]
   832fa:	e784      	b.n	83206 <_realloc_r+0x29a>
   832fc:	68a3      	ldr	r3, [r4, #8]
   832fe:	2a24      	cmp	r2, #36	; 0x24
   83300:	f8ca 3010 	str.w	r3, [sl, #16]
   83304:	68e3      	ldr	r3, [r4, #12]
   83306:	f8ca 3014 	str.w	r3, [sl, #20]
   8330a:	d003      	beq.n	83314 <_realloc_r+0x3a8>
   8330c:	3410      	adds	r4, #16
   8330e:	f10a 0318 	add.w	r3, sl, #24
   83312:	e772      	b.n	831fa <_realloc_r+0x28e>
   83314:	6922      	ldr	r2, [r4, #16]
   83316:	f10a 0320 	add.w	r3, sl, #32
   8331a:	f8ca 2018 	str.w	r2, [sl, #24]
   8331e:	6962      	ldr	r2, [r4, #20]
   83320:	3418      	adds	r4, #24
   83322:	f8ca 201c 	str.w	r2, [sl, #28]
   83326:	e768      	b.n	831fa <_realloc_r+0x28e>
   83328:	20070588 	.word	0x20070588

0008332c <_sbrk_r>:
   8332c:	b538      	push	{r3, r4, r5, lr}
   8332e:	4c07      	ldr	r4, [pc, #28]	; (8334c <_sbrk_r+0x20>)
   83330:	2300      	movs	r3, #0
   83332:	4605      	mov	r5, r0
   83334:	4608      	mov	r0, r1
   83336:	6023      	str	r3, [r4, #0]
   83338:	f7fd fb96 	bl	80a68 <_sbrk>
   8333c:	1c43      	adds	r3, r0, #1
   8333e:	d000      	beq.n	83342 <_sbrk_r+0x16>
   83340:	bd38      	pop	{r3, r4, r5, pc}
   83342:	6823      	ldr	r3, [r4, #0]
   83344:	2b00      	cmp	r3, #0
   83346:	d0fb      	beq.n	83340 <_sbrk_r+0x14>
   83348:	602b      	str	r3, [r5, #0]
   8334a:	bd38      	pop	{r3, r4, r5, pc}
   8334c:	20070b0c 	.word	0x20070b0c

00083350 <__sread>:
   83350:	b510      	push	{r4, lr}
   83352:	460c      	mov	r4, r1
   83354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83358:	f000 f9f2 	bl	83740 <_read_r>
   8335c:	2800      	cmp	r0, #0
   8335e:	db03      	blt.n	83368 <__sread+0x18>
   83360:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83362:	4403      	add	r3, r0
   83364:	6523      	str	r3, [r4, #80]	; 0x50
   83366:	bd10      	pop	{r4, pc}
   83368:	89a3      	ldrh	r3, [r4, #12]
   8336a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8336e:	81a3      	strh	r3, [r4, #12]
   83370:	bd10      	pop	{r4, pc}
   83372:	bf00      	nop

00083374 <__swrite>:
   83374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83378:	460c      	mov	r4, r1
   8337a:	8989      	ldrh	r1, [r1, #12]
   8337c:	461d      	mov	r5, r3
   8337e:	05cb      	lsls	r3, r1, #23
   83380:	4616      	mov	r6, r2
   83382:	4607      	mov	r7, r0
   83384:	d506      	bpl.n	83394 <__swrite+0x20>
   83386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8338a:	2200      	movs	r2, #0
   8338c:	2302      	movs	r3, #2
   8338e:	f000 f9c3 	bl	83718 <_lseek_r>
   83392:	89a1      	ldrh	r1, [r4, #12]
   83394:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83398:	81a1      	strh	r1, [r4, #12]
   8339a:	4638      	mov	r0, r7
   8339c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   833a0:	4632      	mov	r2, r6
   833a2:	462b      	mov	r3, r5
   833a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   833a8:	f000 b8ce 	b.w	83548 <_write_r>

000833ac <__sseek>:
   833ac:	b510      	push	{r4, lr}
   833ae:	460c      	mov	r4, r1
   833b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   833b4:	f000 f9b0 	bl	83718 <_lseek_r>
   833b8:	89a3      	ldrh	r3, [r4, #12]
   833ba:	1c42      	adds	r2, r0, #1
   833bc:	bf0e      	itee	eq
   833be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   833c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   833c6:	6520      	strne	r0, [r4, #80]	; 0x50
   833c8:	81a3      	strh	r3, [r4, #12]
   833ca:	bd10      	pop	{r4, pc}

000833cc <__sclose>:
   833cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   833d0:	f000 b922 	b.w	83618 <_close_r>

000833d4 <strlen>:
   833d4:	f020 0103 	bic.w	r1, r0, #3
   833d8:	f010 0003 	ands.w	r0, r0, #3
   833dc:	f1c0 0000 	rsb	r0, r0, #0
   833e0:	f851 3b04 	ldr.w	r3, [r1], #4
   833e4:	f100 0c04 	add.w	ip, r0, #4
   833e8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   833ec:	f06f 0200 	mvn.w	r2, #0
   833f0:	bf1c      	itt	ne
   833f2:	fa22 f20c 	lsrne.w	r2, r2, ip
   833f6:	4313      	orrne	r3, r2
   833f8:	f04f 0c01 	mov.w	ip, #1
   833fc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83400:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83404:	eba3 020c 	sub.w	r2, r3, ip
   83408:	ea22 0203 	bic.w	r2, r2, r3
   8340c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83410:	bf04      	itt	eq
   83412:	f851 3b04 	ldreq.w	r3, [r1], #4
   83416:	3004      	addeq	r0, #4
   83418:	d0f4      	beq.n	83404 <strlen+0x30>
   8341a:	f013 0fff 	tst.w	r3, #255	; 0xff
   8341e:	bf1f      	itttt	ne
   83420:	3001      	addne	r0, #1
   83422:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   83426:	3001      	addne	r0, #1
   83428:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   8342c:	bf18      	it	ne
   8342e:	3001      	addne	r0, #1
   83430:	4770      	bx	lr
   83432:	bf00      	nop

00083434 <__swbuf_r>:
   83434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83436:	460d      	mov	r5, r1
   83438:	4614      	mov	r4, r2
   8343a:	4607      	mov	r7, r0
   8343c:	b110      	cbz	r0, 83444 <__swbuf_r+0x10>
   8343e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83440:	2b00      	cmp	r3, #0
   83442:	d048      	beq.n	834d6 <__swbuf_r+0xa2>
   83444:	89a2      	ldrh	r2, [r4, #12]
   83446:	69a0      	ldr	r0, [r4, #24]
   83448:	b293      	uxth	r3, r2
   8344a:	60a0      	str	r0, [r4, #8]
   8344c:	0718      	lsls	r0, r3, #28
   8344e:	d538      	bpl.n	834c2 <__swbuf_r+0x8e>
   83450:	6926      	ldr	r6, [r4, #16]
   83452:	2e00      	cmp	r6, #0
   83454:	d035      	beq.n	834c2 <__swbuf_r+0x8e>
   83456:	0499      	lsls	r1, r3, #18
   83458:	b2ed      	uxtb	r5, r5
   8345a:	d515      	bpl.n	83488 <__swbuf_r+0x54>
   8345c:	6823      	ldr	r3, [r4, #0]
   8345e:	6962      	ldr	r2, [r4, #20]
   83460:	1b9e      	subs	r6, r3, r6
   83462:	4296      	cmp	r6, r2
   83464:	da1c      	bge.n	834a0 <__swbuf_r+0x6c>
   83466:	3601      	adds	r6, #1
   83468:	68a2      	ldr	r2, [r4, #8]
   8346a:	1c59      	adds	r1, r3, #1
   8346c:	3a01      	subs	r2, #1
   8346e:	60a2      	str	r2, [r4, #8]
   83470:	6021      	str	r1, [r4, #0]
   83472:	701d      	strb	r5, [r3, #0]
   83474:	6963      	ldr	r3, [r4, #20]
   83476:	42b3      	cmp	r3, r6
   83478:	d01a      	beq.n	834b0 <__swbuf_r+0x7c>
   8347a:	89a3      	ldrh	r3, [r4, #12]
   8347c:	07db      	lsls	r3, r3, #31
   8347e:	d501      	bpl.n	83484 <__swbuf_r+0x50>
   83480:	2d0a      	cmp	r5, #10
   83482:	d015      	beq.n	834b0 <__swbuf_r+0x7c>
   83484:	4628      	mov	r0, r5
   83486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83488:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8348a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8348e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83492:	6663      	str	r3, [r4, #100]	; 0x64
   83494:	6823      	ldr	r3, [r4, #0]
   83496:	81a2      	strh	r2, [r4, #12]
   83498:	6962      	ldr	r2, [r4, #20]
   8349a:	1b9e      	subs	r6, r3, r6
   8349c:	4296      	cmp	r6, r2
   8349e:	dbe2      	blt.n	83466 <__swbuf_r+0x32>
   834a0:	4638      	mov	r0, r7
   834a2:	4621      	mov	r1, r4
   834a4:	f7fe fd3e 	bl	81f24 <_fflush_r>
   834a8:	b940      	cbnz	r0, 834bc <__swbuf_r+0x88>
   834aa:	6823      	ldr	r3, [r4, #0]
   834ac:	2601      	movs	r6, #1
   834ae:	e7db      	b.n	83468 <__swbuf_r+0x34>
   834b0:	4638      	mov	r0, r7
   834b2:	4621      	mov	r1, r4
   834b4:	f7fe fd36 	bl	81f24 <_fflush_r>
   834b8:	2800      	cmp	r0, #0
   834ba:	d0e3      	beq.n	83484 <__swbuf_r+0x50>
   834bc:	f04f 30ff 	mov.w	r0, #4294967295
   834c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   834c2:	4638      	mov	r0, r7
   834c4:	4621      	mov	r1, r4
   834c6:	f7fe fc17 	bl	81cf8 <__swsetup_r>
   834ca:	2800      	cmp	r0, #0
   834cc:	d1f6      	bne.n	834bc <__swbuf_r+0x88>
   834ce:	89a2      	ldrh	r2, [r4, #12]
   834d0:	6926      	ldr	r6, [r4, #16]
   834d2:	b293      	uxth	r3, r2
   834d4:	e7bf      	b.n	83456 <__swbuf_r+0x22>
   834d6:	f7fe fd41 	bl	81f5c <__sinit>
   834da:	e7b3      	b.n	83444 <__swbuf_r+0x10>

000834dc <_wcrtomb_r>:
   834dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   834e0:	461e      	mov	r6, r3
   834e2:	b086      	sub	sp, #24
   834e4:	460c      	mov	r4, r1
   834e6:	4605      	mov	r5, r0
   834e8:	4617      	mov	r7, r2
   834ea:	4b0f      	ldr	r3, [pc, #60]	; (83528 <_wcrtomb_r+0x4c>)
   834ec:	b191      	cbz	r1, 83514 <_wcrtomb_r+0x38>
   834ee:	f8d3 8000 	ldr.w	r8, [r3]
   834f2:	f7ff f8f3 	bl	826dc <__locale_charset>
   834f6:	9600      	str	r6, [sp, #0]
   834f8:	4603      	mov	r3, r0
   834fa:	4621      	mov	r1, r4
   834fc:	463a      	mov	r2, r7
   834fe:	4628      	mov	r0, r5
   83500:	47c0      	blx	r8
   83502:	1c43      	adds	r3, r0, #1
   83504:	d103      	bne.n	8350e <_wcrtomb_r+0x32>
   83506:	2200      	movs	r2, #0
   83508:	238a      	movs	r3, #138	; 0x8a
   8350a:	6032      	str	r2, [r6, #0]
   8350c:	602b      	str	r3, [r5, #0]
   8350e:	b006      	add	sp, #24
   83510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83514:	681f      	ldr	r7, [r3, #0]
   83516:	f7ff f8e1 	bl	826dc <__locale_charset>
   8351a:	9600      	str	r6, [sp, #0]
   8351c:	4603      	mov	r3, r0
   8351e:	4622      	mov	r2, r4
   83520:	4628      	mov	r0, r5
   83522:	a903      	add	r1, sp, #12
   83524:	47b8      	blx	r7
   83526:	e7ec      	b.n	83502 <_wcrtomb_r+0x26>
   83528:	20070998 	.word	0x20070998

0008352c <__ascii_wctomb>:
   8352c:	b121      	cbz	r1, 83538 <__ascii_wctomb+0xc>
   8352e:	2aff      	cmp	r2, #255	; 0xff
   83530:	d804      	bhi.n	8353c <__ascii_wctomb+0x10>
   83532:	700a      	strb	r2, [r1, #0]
   83534:	2001      	movs	r0, #1
   83536:	4770      	bx	lr
   83538:	4608      	mov	r0, r1
   8353a:	4770      	bx	lr
   8353c:	238a      	movs	r3, #138	; 0x8a
   8353e:	6003      	str	r3, [r0, #0]
   83540:	f04f 30ff 	mov.w	r0, #4294967295
   83544:	4770      	bx	lr
   83546:	bf00      	nop

00083548 <_write_r>:
   83548:	b570      	push	{r4, r5, r6, lr}
   8354a:	4c08      	ldr	r4, [pc, #32]	; (8356c <_write_r+0x24>)
   8354c:	4606      	mov	r6, r0
   8354e:	2500      	movs	r5, #0
   83550:	4608      	mov	r0, r1
   83552:	4611      	mov	r1, r2
   83554:	461a      	mov	r2, r3
   83556:	6025      	str	r5, [r4, #0]
   83558:	f7fc feaa 	bl	802b0 <_write>
   8355c:	1c43      	adds	r3, r0, #1
   8355e:	d000      	beq.n	83562 <_write_r+0x1a>
   83560:	bd70      	pop	{r4, r5, r6, pc}
   83562:	6823      	ldr	r3, [r4, #0]
   83564:	2b00      	cmp	r3, #0
   83566:	d0fb      	beq.n	83560 <_write_r+0x18>
   83568:	6033      	str	r3, [r6, #0]
   8356a:	bd70      	pop	{r4, r5, r6, pc}
   8356c:	20070b0c 	.word	0x20070b0c

00083570 <__register_exitproc>:
   83570:	b5f0      	push	{r4, r5, r6, r7, lr}
   83572:	4c27      	ldr	r4, [pc, #156]	; (83610 <__register_exitproc+0xa0>)
   83574:	b085      	sub	sp, #20
   83576:	6826      	ldr	r6, [r4, #0]
   83578:	4607      	mov	r7, r0
   8357a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8357e:	2c00      	cmp	r4, #0
   83580:	d040      	beq.n	83604 <__register_exitproc+0x94>
   83582:	6865      	ldr	r5, [r4, #4]
   83584:	2d1f      	cmp	r5, #31
   83586:	dd1e      	ble.n	835c6 <__register_exitproc+0x56>
   83588:	4822      	ldr	r0, [pc, #136]	; (83614 <__register_exitproc+0xa4>)
   8358a:	b918      	cbnz	r0, 83594 <__register_exitproc+0x24>
   8358c:	f04f 30ff 	mov.w	r0, #4294967295
   83590:	b005      	add	sp, #20
   83592:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83594:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83598:	9103      	str	r1, [sp, #12]
   8359a:	9202      	str	r2, [sp, #8]
   8359c:	9301      	str	r3, [sp, #4]
   8359e:	f7ff f917 	bl	827d0 <malloc>
   835a2:	9903      	ldr	r1, [sp, #12]
   835a4:	4604      	mov	r4, r0
   835a6:	9a02      	ldr	r2, [sp, #8]
   835a8:	9b01      	ldr	r3, [sp, #4]
   835aa:	2800      	cmp	r0, #0
   835ac:	d0ee      	beq.n	8358c <__register_exitproc+0x1c>
   835ae:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   835b2:	2000      	movs	r0, #0
   835b4:	6025      	str	r5, [r4, #0]
   835b6:	6060      	str	r0, [r4, #4]
   835b8:	4605      	mov	r5, r0
   835ba:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   835be:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   835c2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   835c6:	b93f      	cbnz	r7, 835d8 <__register_exitproc+0x68>
   835c8:	1c6b      	adds	r3, r5, #1
   835ca:	2000      	movs	r0, #0
   835cc:	3502      	adds	r5, #2
   835ce:	6063      	str	r3, [r4, #4]
   835d0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   835d4:	b005      	add	sp, #20
   835d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   835d8:	2601      	movs	r6, #1
   835da:	40ae      	lsls	r6, r5
   835dc:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   835e0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   835e4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   835e8:	2f02      	cmp	r7, #2
   835ea:	ea42 0206 	orr.w	r2, r2, r6
   835ee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   835f2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   835f6:	d1e7      	bne.n	835c8 <__register_exitproc+0x58>
   835f8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   835fc:	431e      	orrs	r6, r3
   835fe:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83602:	e7e1      	b.n	835c8 <__register_exitproc+0x58>
   83604:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83608:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8360c:	e7b9      	b.n	83582 <__register_exitproc+0x12>
   8360e:	bf00      	nop
   83610:	00083d64 	.word	0x00083d64
   83614:	000827d1 	.word	0x000827d1

00083618 <_close_r>:
   83618:	b538      	push	{r3, r4, r5, lr}
   8361a:	4c07      	ldr	r4, [pc, #28]	; (83638 <_close_r+0x20>)
   8361c:	2300      	movs	r3, #0
   8361e:	4605      	mov	r5, r0
   83620:	4608      	mov	r0, r1
   83622:	6023      	str	r3, [r4, #0]
   83624:	f7fd fa3a 	bl	80a9c <_close>
   83628:	1c43      	adds	r3, r0, #1
   8362a:	d000      	beq.n	8362e <_close_r+0x16>
   8362c:	bd38      	pop	{r3, r4, r5, pc}
   8362e:	6823      	ldr	r3, [r4, #0]
   83630:	2b00      	cmp	r3, #0
   83632:	d0fb      	beq.n	8362c <_close_r+0x14>
   83634:	602b      	str	r3, [r5, #0]
   83636:	bd38      	pop	{r3, r4, r5, pc}
   83638:	20070b0c 	.word	0x20070b0c

0008363c <_fclose_r>:
   8363c:	b570      	push	{r4, r5, r6, lr}
   8363e:	460c      	mov	r4, r1
   83640:	4605      	mov	r5, r0
   83642:	b131      	cbz	r1, 83652 <_fclose_r+0x16>
   83644:	b110      	cbz	r0, 8364c <_fclose_r+0x10>
   83646:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83648:	2b00      	cmp	r3, #0
   8364a:	d02f      	beq.n	836ac <_fclose_r+0x70>
   8364c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83650:	b90b      	cbnz	r3, 83656 <_fclose_r+0x1a>
   83652:	2000      	movs	r0, #0
   83654:	bd70      	pop	{r4, r5, r6, pc}
   83656:	4628      	mov	r0, r5
   83658:	4621      	mov	r1, r4
   8365a:	f7fe fc63 	bl	81f24 <_fflush_r>
   8365e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83660:	4606      	mov	r6, r0
   83662:	b133      	cbz	r3, 83672 <_fclose_r+0x36>
   83664:	4628      	mov	r0, r5
   83666:	69e1      	ldr	r1, [r4, #28]
   83668:	4798      	blx	r3
   8366a:	2800      	cmp	r0, #0
   8366c:	bfb8      	it	lt
   8366e:	f04f 36ff 	movlt.w	r6, #4294967295
   83672:	89a3      	ldrh	r3, [r4, #12]
   83674:	061b      	lsls	r3, r3, #24
   83676:	d41c      	bmi.n	836b2 <_fclose_r+0x76>
   83678:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8367a:	b141      	cbz	r1, 8368e <_fclose_r+0x52>
   8367c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83680:	4299      	cmp	r1, r3
   83682:	d002      	beq.n	8368a <_fclose_r+0x4e>
   83684:	4628      	mov	r0, r5
   83686:	f7fe fdad 	bl	821e4 <_free_r>
   8368a:	2300      	movs	r3, #0
   8368c:	6323      	str	r3, [r4, #48]	; 0x30
   8368e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83690:	b121      	cbz	r1, 8369c <_fclose_r+0x60>
   83692:	4628      	mov	r0, r5
   83694:	f7fe fda6 	bl	821e4 <_free_r>
   83698:	2300      	movs	r3, #0
   8369a:	6463      	str	r3, [r4, #68]	; 0x44
   8369c:	f7fe fcd8 	bl	82050 <__sfp_lock_acquire>
   836a0:	2300      	movs	r3, #0
   836a2:	81a3      	strh	r3, [r4, #12]
   836a4:	f7fe fcd6 	bl	82054 <__sfp_lock_release>
   836a8:	4630      	mov	r0, r6
   836aa:	bd70      	pop	{r4, r5, r6, pc}
   836ac:	f7fe fc56 	bl	81f5c <__sinit>
   836b0:	e7cc      	b.n	8364c <_fclose_r+0x10>
   836b2:	4628      	mov	r0, r5
   836b4:	6921      	ldr	r1, [r4, #16]
   836b6:	f7fe fd95 	bl	821e4 <_free_r>
   836ba:	e7dd      	b.n	83678 <_fclose_r+0x3c>

000836bc <fclose>:
   836bc:	4b02      	ldr	r3, [pc, #8]	; (836c8 <fclose+0xc>)
   836be:	4601      	mov	r1, r0
   836c0:	6818      	ldr	r0, [r3, #0]
   836c2:	f7ff bfbb 	b.w	8363c <_fclose_r>
   836c6:	bf00      	nop
   836c8:	20070560 	.word	0x20070560

000836cc <_fstat_r>:
   836cc:	b538      	push	{r3, r4, r5, lr}
   836ce:	4c08      	ldr	r4, [pc, #32]	; (836f0 <_fstat_r+0x24>)
   836d0:	2300      	movs	r3, #0
   836d2:	4605      	mov	r5, r0
   836d4:	4608      	mov	r0, r1
   836d6:	4611      	mov	r1, r2
   836d8:	6023      	str	r3, [r4, #0]
   836da:	f7fd f9e3 	bl	80aa4 <_fstat>
   836de:	1c43      	adds	r3, r0, #1
   836e0:	d000      	beq.n	836e4 <_fstat_r+0x18>
   836e2:	bd38      	pop	{r3, r4, r5, pc}
   836e4:	6823      	ldr	r3, [r4, #0]
   836e6:	2b00      	cmp	r3, #0
   836e8:	d0fb      	beq.n	836e2 <_fstat_r+0x16>
   836ea:	602b      	str	r3, [r5, #0]
   836ec:	bd38      	pop	{r3, r4, r5, pc}
   836ee:	bf00      	nop
   836f0:	20070b0c 	.word	0x20070b0c

000836f4 <_isatty_r>:
   836f4:	b538      	push	{r3, r4, r5, lr}
   836f6:	4c07      	ldr	r4, [pc, #28]	; (83714 <_isatty_r+0x20>)
   836f8:	2300      	movs	r3, #0
   836fa:	4605      	mov	r5, r0
   836fc:	4608      	mov	r0, r1
   836fe:	6023      	str	r3, [r4, #0]
   83700:	f7fd f9d6 	bl	80ab0 <_isatty>
   83704:	1c43      	adds	r3, r0, #1
   83706:	d000      	beq.n	8370a <_isatty_r+0x16>
   83708:	bd38      	pop	{r3, r4, r5, pc}
   8370a:	6823      	ldr	r3, [r4, #0]
   8370c:	2b00      	cmp	r3, #0
   8370e:	d0fb      	beq.n	83708 <_isatty_r+0x14>
   83710:	602b      	str	r3, [r5, #0]
   83712:	bd38      	pop	{r3, r4, r5, pc}
   83714:	20070b0c 	.word	0x20070b0c

00083718 <_lseek_r>:
   83718:	b570      	push	{r4, r5, r6, lr}
   8371a:	4c08      	ldr	r4, [pc, #32]	; (8373c <_lseek_r+0x24>)
   8371c:	4606      	mov	r6, r0
   8371e:	2500      	movs	r5, #0
   83720:	4608      	mov	r0, r1
   83722:	4611      	mov	r1, r2
   83724:	461a      	mov	r2, r3
   83726:	6025      	str	r5, [r4, #0]
   83728:	f7fd f9c4 	bl	80ab4 <_lseek>
   8372c:	1c43      	adds	r3, r0, #1
   8372e:	d000      	beq.n	83732 <_lseek_r+0x1a>
   83730:	bd70      	pop	{r4, r5, r6, pc}
   83732:	6823      	ldr	r3, [r4, #0]
   83734:	2b00      	cmp	r3, #0
   83736:	d0fb      	beq.n	83730 <_lseek_r+0x18>
   83738:	6033      	str	r3, [r6, #0]
   8373a:	bd70      	pop	{r4, r5, r6, pc}
   8373c:	20070b0c 	.word	0x20070b0c

00083740 <_read_r>:
   83740:	b570      	push	{r4, r5, r6, lr}
   83742:	4c08      	ldr	r4, [pc, #32]	; (83764 <_read_r+0x24>)
   83744:	4606      	mov	r6, r0
   83746:	2500      	movs	r5, #0
   83748:	4608      	mov	r0, r1
   8374a:	4611      	mov	r1, r2
   8374c:	461a      	mov	r2, r3
   8374e:	6025      	str	r5, [r4, #0]
   83750:	f7fc fd8e 	bl	80270 <_read>
   83754:	1c43      	adds	r3, r0, #1
   83756:	d000      	beq.n	8375a <_read_r+0x1a>
   83758:	bd70      	pop	{r4, r5, r6, pc}
   8375a:	6823      	ldr	r3, [r4, #0]
   8375c:	2b00      	cmp	r3, #0
   8375e:	d0fb      	beq.n	83758 <_read_r+0x18>
   83760:	6033      	str	r3, [r6, #0]
   83762:	bd70      	pop	{r4, r5, r6, pc}
   83764:	20070b0c 	.word	0x20070b0c

00083768 <__aeabi_uldivmod>:
   83768:	b94b      	cbnz	r3, 8377e <__aeabi_uldivmod+0x16>
   8376a:	b942      	cbnz	r2, 8377e <__aeabi_uldivmod+0x16>
   8376c:	2900      	cmp	r1, #0
   8376e:	bf08      	it	eq
   83770:	2800      	cmpeq	r0, #0
   83772:	d002      	beq.n	8377a <__aeabi_uldivmod+0x12>
   83774:	f04f 31ff 	mov.w	r1, #4294967295
   83778:	4608      	mov	r0, r1
   8377a:	f000 b83b 	b.w	837f4 <__aeabi_idiv0>
   8377e:	b082      	sub	sp, #8
   83780:	46ec      	mov	ip, sp
   83782:	e92d 5000 	stmdb	sp!, {ip, lr}
   83786:	f000 f81d 	bl	837c4 <__gnu_uldivmod_helper>
   8378a:	f8dd e004 	ldr.w	lr, [sp, #4]
   8378e:	b002      	add	sp, #8
   83790:	bc0c      	pop	{r2, r3}
   83792:	4770      	bx	lr

00083794 <__gnu_ldivmod_helper>:
   83794:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83798:	9e08      	ldr	r6, [sp, #32]
   8379a:	4614      	mov	r4, r2
   8379c:	461d      	mov	r5, r3
   8379e:	4680      	mov	r8, r0
   837a0:	4689      	mov	r9, r1
   837a2:	f000 f829 	bl	837f8 <__divdi3>
   837a6:	fb04 f301 	mul.w	r3, r4, r1
   837aa:	fba4 ab00 	umull	sl, fp, r4, r0
   837ae:	fb00 3205 	mla	r2, r0, r5, r3
   837b2:	4493      	add	fp, r2
   837b4:	ebb8 080a 	subs.w	r8, r8, sl
   837b8:	eb69 090b 	sbc.w	r9, r9, fp
   837bc:	e9c6 8900 	strd	r8, r9, [r6]
   837c0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000837c4 <__gnu_uldivmod_helper>:
   837c4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   837c8:	9e08      	ldr	r6, [sp, #32]
   837ca:	4614      	mov	r4, r2
   837cc:	461d      	mov	r5, r3
   837ce:	4680      	mov	r8, r0
   837d0:	4689      	mov	r9, r1
   837d2:	f000 f961 	bl	83a98 <__udivdi3>
   837d6:	fb00 f505 	mul.w	r5, r0, r5
   837da:	fba0 ab04 	umull	sl, fp, r0, r4
   837de:	fb04 5401 	mla	r4, r4, r1, r5
   837e2:	44a3      	add	fp, r4
   837e4:	ebb8 080a 	subs.w	r8, r8, sl
   837e8:	eb69 090b 	sbc.w	r9, r9, fp
   837ec:	e9c6 8900 	strd	r8, r9, [r6]
   837f0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000837f4 <__aeabi_idiv0>:
   837f4:	4770      	bx	lr
   837f6:	bf00      	nop

000837f8 <__divdi3>:
   837f8:	2900      	cmp	r1, #0
   837fa:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   837fe:	f2c0 80a1 	blt.w	83944 <__divdi3+0x14c>
   83802:	2400      	movs	r4, #0
   83804:	2b00      	cmp	r3, #0
   83806:	f2c0 8098 	blt.w	8393a <__divdi3+0x142>
   8380a:	4615      	mov	r5, r2
   8380c:	4606      	mov	r6, r0
   8380e:	460f      	mov	r7, r1
   83810:	2b00      	cmp	r3, #0
   83812:	d13f      	bne.n	83894 <__divdi3+0x9c>
   83814:	428a      	cmp	r2, r1
   83816:	d958      	bls.n	838ca <__divdi3+0xd2>
   83818:	fab2 f382 	clz	r3, r2
   8381c:	b14b      	cbz	r3, 83832 <__divdi3+0x3a>
   8381e:	f1c3 0220 	rsb	r2, r3, #32
   83822:	fa01 f703 	lsl.w	r7, r1, r3
   83826:	fa20 f202 	lsr.w	r2, r0, r2
   8382a:	409d      	lsls	r5, r3
   8382c:	fa00 f603 	lsl.w	r6, r0, r3
   83830:	4317      	orrs	r7, r2
   83832:	0c29      	lsrs	r1, r5, #16
   83834:	fbb7 f2f1 	udiv	r2, r7, r1
   83838:	fb01 7712 	mls	r7, r1, r2, r7
   8383c:	b2a8      	uxth	r0, r5
   8383e:	fb00 f302 	mul.w	r3, r0, r2
   83842:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83846:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   8384a:	42bb      	cmp	r3, r7
   8384c:	d909      	bls.n	83862 <__divdi3+0x6a>
   8384e:	197f      	adds	r7, r7, r5
   83850:	f102 3cff 	add.w	ip, r2, #4294967295
   83854:	f080 8105 	bcs.w	83a62 <__divdi3+0x26a>
   83858:	42bb      	cmp	r3, r7
   8385a:	f240 8102 	bls.w	83a62 <__divdi3+0x26a>
   8385e:	3a02      	subs	r2, #2
   83860:	442f      	add	r7, r5
   83862:	1aff      	subs	r7, r7, r3
   83864:	fbb7 f3f1 	udiv	r3, r7, r1
   83868:	fb01 7113 	mls	r1, r1, r3, r7
   8386c:	fb00 f003 	mul.w	r0, r0, r3
   83870:	b2b6      	uxth	r6, r6
   83872:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83876:	4288      	cmp	r0, r1
   83878:	d908      	bls.n	8388c <__divdi3+0x94>
   8387a:	1949      	adds	r1, r1, r5
   8387c:	f103 37ff 	add.w	r7, r3, #4294967295
   83880:	f080 80f1 	bcs.w	83a66 <__divdi3+0x26e>
   83884:	4288      	cmp	r0, r1
   83886:	f240 80ee 	bls.w	83a66 <__divdi3+0x26e>
   8388a:	3b02      	subs	r3, #2
   8388c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83890:	2300      	movs	r3, #0
   83892:	e003      	b.n	8389c <__divdi3+0xa4>
   83894:	428b      	cmp	r3, r1
   83896:	d90a      	bls.n	838ae <__divdi3+0xb6>
   83898:	2300      	movs	r3, #0
   8389a:	461a      	mov	r2, r3
   8389c:	4610      	mov	r0, r2
   8389e:	4619      	mov	r1, r3
   838a0:	b114      	cbz	r4, 838a8 <__divdi3+0xb0>
   838a2:	4240      	negs	r0, r0
   838a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   838a8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   838ac:	4770      	bx	lr
   838ae:	fab3 f883 	clz	r8, r3
   838b2:	f1b8 0f00 	cmp.w	r8, #0
   838b6:	f040 8088 	bne.w	839ca <__divdi3+0x1d2>
   838ba:	428b      	cmp	r3, r1
   838bc:	d302      	bcc.n	838c4 <__divdi3+0xcc>
   838be:	4282      	cmp	r2, r0
   838c0:	f200 80e2 	bhi.w	83a88 <__divdi3+0x290>
   838c4:	2300      	movs	r3, #0
   838c6:	2201      	movs	r2, #1
   838c8:	e7e8      	b.n	8389c <__divdi3+0xa4>
   838ca:	b912      	cbnz	r2, 838d2 <__divdi3+0xda>
   838cc:	2301      	movs	r3, #1
   838ce:	fbb3 f5f2 	udiv	r5, r3, r2
   838d2:	fab5 f285 	clz	r2, r5
   838d6:	2a00      	cmp	r2, #0
   838d8:	d13a      	bne.n	83950 <__divdi3+0x158>
   838da:	1b7f      	subs	r7, r7, r5
   838dc:	0c28      	lsrs	r0, r5, #16
   838de:	fa1f fc85 	uxth.w	ip, r5
   838e2:	2301      	movs	r3, #1
   838e4:	fbb7 f1f0 	udiv	r1, r7, r0
   838e8:	fb00 7711 	mls	r7, r0, r1, r7
   838ec:	fb0c f201 	mul.w	r2, ip, r1
   838f0:	ea4f 4816 	mov.w	r8, r6, lsr #16
   838f4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   838f8:	42ba      	cmp	r2, r7
   838fa:	d907      	bls.n	8390c <__divdi3+0x114>
   838fc:	197f      	adds	r7, r7, r5
   838fe:	f101 38ff 	add.w	r8, r1, #4294967295
   83902:	d202      	bcs.n	8390a <__divdi3+0x112>
   83904:	42ba      	cmp	r2, r7
   83906:	f200 80c4 	bhi.w	83a92 <__divdi3+0x29a>
   8390a:	4641      	mov	r1, r8
   8390c:	1abf      	subs	r7, r7, r2
   8390e:	fbb7 f2f0 	udiv	r2, r7, r0
   83912:	fb00 7012 	mls	r0, r0, r2, r7
   83916:	fb0c fc02 	mul.w	ip, ip, r2
   8391a:	b2b6      	uxth	r6, r6
   8391c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83920:	4584      	cmp	ip, r0
   83922:	d907      	bls.n	83934 <__divdi3+0x13c>
   83924:	1940      	adds	r0, r0, r5
   83926:	f102 37ff 	add.w	r7, r2, #4294967295
   8392a:	d202      	bcs.n	83932 <__divdi3+0x13a>
   8392c:	4584      	cmp	ip, r0
   8392e:	f200 80ae 	bhi.w	83a8e <__divdi3+0x296>
   83932:	463a      	mov	r2, r7
   83934:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83938:	e7b0      	b.n	8389c <__divdi3+0xa4>
   8393a:	43e4      	mvns	r4, r4
   8393c:	4252      	negs	r2, r2
   8393e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83942:	e762      	b.n	8380a <__divdi3+0x12>
   83944:	4240      	negs	r0, r0
   83946:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8394a:	f04f 34ff 	mov.w	r4, #4294967295
   8394e:	e759      	b.n	83804 <__divdi3+0xc>
   83950:	4095      	lsls	r5, r2
   83952:	f1c2 0920 	rsb	r9, r2, #32
   83956:	fa27 f109 	lsr.w	r1, r7, r9
   8395a:	fa26 f909 	lsr.w	r9, r6, r9
   8395e:	4097      	lsls	r7, r2
   83960:	0c28      	lsrs	r0, r5, #16
   83962:	fbb1 f8f0 	udiv	r8, r1, r0
   83966:	fb00 1118 	mls	r1, r0, r8, r1
   8396a:	fa1f fc85 	uxth.w	ip, r5
   8396e:	fb0c f308 	mul.w	r3, ip, r8
   83972:	ea49 0907 	orr.w	r9, r9, r7
   83976:	ea4f 4719 	mov.w	r7, r9, lsr #16
   8397a:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   8397e:	428b      	cmp	r3, r1
   83980:	fa06 f602 	lsl.w	r6, r6, r2
   83984:	d908      	bls.n	83998 <__divdi3+0x1a0>
   83986:	1949      	adds	r1, r1, r5
   83988:	f108 32ff 	add.w	r2, r8, #4294967295
   8398c:	d27a      	bcs.n	83a84 <__divdi3+0x28c>
   8398e:	428b      	cmp	r3, r1
   83990:	d978      	bls.n	83a84 <__divdi3+0x28c>
   83992:	f1a8 0802 	sub.w	r8, r8, #2
   83996:	4429      	add	r1, r5
   83998:	1ac9      	subs	r1, r1, r3
   8399a:	fbb1 f3f0 	udiv	r3, r1, r0
   8399e:	fb00 1713 	mls	r7, r0, r3, r1
   839a2:	fb0c f203 	mul.w	r2, ip, r3
   839a6:	fa1f f989 	uxth.w	r9, r9
   839aa:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   839ae:	42ba      	cmp	r2, r7
   839b0:	d907      	bls.n	839c2 <__divdi3+0x1ca>
   839b2:	197f      	adds	r7, r7, r5
   839b4:	f103 31ff 	add.w	r1, r3, #4294967295
   839b8:	d260      	bcs.n	83a7c <__divdi3+0x284>
   839ba:	42ba      	cmp	r2, r7
   839bc:	d95e      	bls.n	83a7c <__divdi3+0x284>
   839be:	3b02      	subs	r3, #2
   839c0:	442f      	add	r7, r5
   839c2:	1abf      	subs	r7, r7, r2
   839c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   839c8:	e78c      	b.n	838e4 <__divdi3+0xec>
   839ca:	f1c8 0220 	rsb	r2, r8, #32
   839ce:	fa25 f102 	lsr.w	r1, r5, r2
   839d2:	fa03 fc08 	lsl.w	ip, r3, r8
   839d6:	fa27 f302 	lsr.w	r3, r7, r2
   839da:	fa20 f202 	lsr.w	r2, r0, r2
   839de:	fa07 f708 	lsl.w	r7, r7, r8
   839e2:	ea41 0c0c 	orr.w	ip, r1, ip
   839e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
   839ea:	fbb3 f1f9 	udiv	r1, r3, r9
   839ee:	fb09 3311 	mls	r3, r9, r1, r3
   839f2:	fa1f fa8c 	uxth.w	sl, ip
   839f6:	fb0a fb01 	mul.w	fp, sl, r1
   839fa:	4317      	orrs	r7, r2
   839fc:	0c3a      	lsrs	r2, r7, #16
   839fe:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83a02:	459b      	cmp	fp, r3
   83a04:	fa05 f008 	lsl.w	r0, r5, r8
   83a08:	d908      	bls.n	83a1c <__divdi3+0x224>
   83a0a:	eb13 030c 	adds.w	r3, r3, ip
   83a0e:	f101 32ff 	add.w	r2, r1, #4294967295
   83a12:	d235      	bcs.n	83a80 <__divdi3+0x288>
   83a14:	459b      	cmp	fp, r3
   83a16:	d933      	bls.n	83a80 <__divdi3+0x288>
   83a18:	3902      	subs	r1, #2
   83a1a:	4463      	add	r3, ip
   83a1c:	ebcb 0303 	rsb	r3, fp, r3
   83a20:	fbb3 f2f9 	udiv	r2, r3, r9
   83a24:	fb09 3312 	mls	r3, r9, r2, r3
   83a28:	fb0a fa02 	mul.w	sl, sl, r2
   83a2c:	b2bf      	uxth	r7, r7
   83a2e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83a32:	45ba      	cmp	sl, r7
   83a34:	d908      	bls.n	83a48 <__divdi3+0x250>
   83a36:	eb17 070c 	adds.w	r7, r7, ip
   83a3a:	f102 33ff 	add.w	r3, r2, #4294967295
   83a3e:	d21b      	bcs.n	83a78 <__divdi3+0x280>
   83a40:	45ba      	cmp	sl, r7
   83a42:	d919      	bls.n	83a78 <__divdi3+0x280>
   83a44:	3a02      	subs	r2, #2
   83a46:	4467      	add	r7, ip
   83a48:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83a4c:	fba5 0100 	umull	r0, r1, r5, r0
   83a50:	ebca 0707 	rsb	r7, sl, r7
   83a54:	428f      	cmp	r7, r1
   83a56:	f04f 0300 	mov.w	r3, #0
   83a5a:	d30a      	bcc.n	83a72 <__divdi3+0x27a>
   83a5c:	d005      	beq.n	83a6a <__divdi3+0x272>
   83a5e:	462a      	mov	r2, r5
   83a60:	e71c      	b.n	8389c <__divdi3+0xa4>
   83a62:	4662      	mov	r2, ip
   83a64:	e6fd      	b.n	83862 <__divdi3+0x6a>
   83a66:	463b      	mov	r3, r7
   83a68:	e710      	b.n	8388c <__divdi3+0x94>
   83a6a:	fa06 f608 	lsl.w	r6, r6, r8
   83a6e:	4286      	cmp	r6, r0
   83a70:	d2f5      	bcs.n	83a5e <__divdi3+0x266>
   83a72:	1e6a      	subs	r2, r5, #1
   83a74:	2300      	movs	r3, #0
   83a76:	e711      	b.n	8389c <__divdi3+0xa4>
   83a78:	461a      	mov	r2, r3
   83a7a:	e7e5      	b.n	83a48 <__divdi3+0x250>
   83a7c:	460b      	mov	r3, r1
   83a7e:	e7a0      	b.n	839c2 <__divdi3+0x1ca>
   83a80:	4611      	mov	r1, r2
   83a82:	e7cb      	b.n	83a1c <__divdi3+0x224>
   83a84:	4690      	mov	r8, r2
   83a86:	e787      	b.n	83998 <__divdi3+0x1a0>
   83a88:	4643      	mov	r3, r8
   83a8a:	4642      	mov	r2, r8
   83a8c:	e706      	b.n	8389c <__divdi3+0xa4>
   83a8e:	3a02      	subs	r2, #2
   83a90:	e750      	b.n	83934 <__divdi3+0x13c>
   83a92:	3902      	subs	r1, #2
   83a94:	442f      	add	r7, r5
   83a96:	e739      	b.n	8390c <__divdi3+0x114>

00083a98 <__udivdi3>:
   83a98:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83a9c:	4614      	mov	r4, r2
   83a9e:	4605      	mov	r5, r0
   83aa0:	460e      	mov	r6, r1
   83aa2:	2b00      	cmp	r3, #0
   83aa4:	d143      	bne.n	83b2e <__udivdi3+0x96>
   83aa6:	428a      	cmp	r2, r1
   83aa8:	d953      	bls.n	83b52 <__udivdi3+0xba>
   83aaa:	fab2 f782 	clz	r7, r2
   83aae:	b157      	cbz	r7, 83ac6 <__udivdi3+0x2e>
   83ab0:	f1c7 0620 	rsb	r6, r7, #32
   83ab4:	fa20 f606 	lsr.w	r6, r0, r6
   83ab8:	fa01 f307 	lsl.w	r3, r1, r7
   83abc:	fa02 f407 	lsl.w	r4, r2, r7
   83ac0:	fa00 f507 	lsl.w	r5, r0, r7
   83ac4:	431e      	orrs	r6, r3
   83ac6:	0c21      	lsrs	r1, r4, #16
   83ac8:	fbb6 f2f1 	udiv	r2, r6, r1
   83acc:	fb01 6612 	mls	r6, r1, r2, r6
   83ad0:	b2a0      	uxth	r0, r4
   83ad2:	fb00 f302 	mul.w	r3, r0, r2
   83ad6:	0c2f      	lsrs	r7, r5, #16
   83ad8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83adc:	42b3      	cmp	r3, r6
   83ade:	d909      	bls.n	83af4 <__udivdi3+0x5c>
   83ae0:	1936      	adds	r6, r6, r4
   83ae2:	f102 37ff 	add.w	r7, r2, #4294967295
   83ae6:	f080 80fd 	bcs.w	83ce4 <__udivdi3+0x24c>
   83aea:	42b3      	cmp	r3, r6
   83aec:	f240 80fa 	bls.w	83ce4 <__udivdi3+0x24c>
   83af0:	3a02      	subs	r2, #2
   83af2:	4426      	add	r6, r4
   83af4:	1af6      	subs	r6, r6, r3
   83af6:	fbb6 f3f1 	udiv	r3, r6, r1
   83afa:	fb01 6113 	mls	r1, r1, r3, r6
   83afe:	fb00 f003 	mul.w	r0, r0, r3
   83b02:	b2ad      	uxth	r5, r5
   83b04:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83b08:	4288      	cmp	r0, r1
   83b0a:	d908      	bls.n	83b1e <__udivdi3+0x86>
   83b0c:	1909      	adds	r1, r1, r4
   83b0e:	f103 36ff 	add.w	r6, r3, #4294967295
   83b12:	f080 80e9 	bcs.w	83ce8 <__udivdi3+0x250>
   83b16:	4288      	cmp	r0, r1
   83b18:	f240 80e6 	bls.w	83ce8 <__udivdi3+0x250>
   83b1c:	3b02      	subs	r3, #2
   83b1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83b22:	2300      	movs	r3, #0
   83b24:	4610      	mov	r0, r2
   83b26:	4619      	mov	r1, r3
   83b28:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b2c:	4770      	bx	lr
   83b2e:	428b      	cmp	r3, r1
   83b30:	d84c      	bhi.n	83bcc <__udivdi3+0x134>
   83b32:	fab3 f683 	clz	r6, r3
   83b36:	2e00      	cmp	r6, #0
   83b38:	d14f      	bne.n	83bda <__udivdi3+0x142>
   83b3a:	428b      	cmp	r3, r1
   83b3c:	d302      	bcc.n	83b44 <__udivdi3+0xac>
   83b3e:	4282      	cmp	r2, r0
   83b40:	f200 80dd 	bhi.w	83cfe <__udivdi3+0x266>
   83b44:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b48:	2300      	movs	r3, #0
   83b4a:	2201      	movs	r2, #1
   83b4c:	4610      	mov	r0, r2
   83b4e:	4619      	mov	r1, r3
   83b50:	4770      	bx	lr
   83b52:	b912      	cbnz	r2, 83b5a <__udivdi3+0xc2>
   83b54:	2401      	movs	r4, #1
   83b56:	fbb4 f4f2 	udiv	r4, r4, r2
   83b5a:	fab4 f284 	clz	r2, r4
   83b5e:	2a00      	cmp	r2, #0
   83b60:	f040 8082 	bne.w	83c68 <__udivdi3+0x1d0>
   83b64:	1b09      	subs	r1, r1, r4
   83b66:	0c26      	lsrs	r6, r4, #16
   83b68:	b2a7      	uxth	r7, r4
   83b6a:	2301      	movs	r3, #1
   83b6c:	fbb1 f0f6 	udiv	r0, r1, r6
   83b70:	fb06 1110 	mls	r1, r6, r0, r1
   83b74:	fb07 f200 	mul.w	r2, r7, r0
   83b78:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83b7c:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83b80:	428a      	cmp	r2, r1
   83b82:	d907      	bls.n	83b94 <__udivdi3+0xfc>
   83b84:	1909      	adds	r1, r1, r4
   83b86:	f100 3cff 	add.w	ip, r0, #4294967295
   83b8a:	d202      	bcs.n	83b92 <__udivdi3+0xfa>
   83b8c:	428a      	cmp	r2, r1
   83b8e:	f200 80c8 	bhi.w	83d22 <__udivdi3+0x28a>
   83b92:	4660      	mov	r0, ip
   83b94:	1a89      	subs	r1, r1, r2
   83b96:	fbb1 f2f6 	udiv	r2, r1, r6
   83b9a:	fb06 1112 	mls	r1, r6, r2, r1
   83b9e:	fb07 f702 	mul.w	r7, r7, r2
   83ba2:	b2ad      	uxth	r5, r5
   83ba4:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83ba8:	42af      	cmp	r7, r5
   83baa:	d908      	bls.n	83bbe <__udivdi3+0x126>
   83bac:	192c      	adds	r4, r5, r4
   83bae:	f102 31ff 	add.w	r1, r2, #4294967295
   83bb2:	f080 809b 	bcs.w	83cec <__udivdi3+0x254>
   83bb6:	42a7      	cmp	r7, r4
   83bb8:	f240 8098 	bls.w	83cec <__udivdi3+0x254>
   83bbc:	3a02      	subs	r2, #2
   83bbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83bc2:	4610      	mov	r0, r2
   83bc4:	4619      	mov	r1, r3
   83bc6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83bca:	4770      	bx	lr
   83bcc:	2300      	movs	r3, #0
   83bce:	461a      	mov	r2, r3
   83bd0:	4610      	mov	r0, r2
   83bd2:	4619      	mov	r1, r3
   83bd4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83bd8:	4770      	bx	lr
   83bda:	f1c6 0520 	rsb	r5, r6, #32
   83bde:	fa22 f705 	lsr.w	r7, r2, r5
   83be2:	fa03 f406 	lsl.w	r4, r3, r6
   83be6:	fa21 f305 	lsr.w	r3, r1, r5
   83bea:	fa01 fb06 	lsl.w	fp, r1, r6
   83bee:	fa20 f505 	lsr.w	r5, r0, r5
   83bf2:	433c      	orrs	r4, r7
   83bf4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83bf8:	fbb3 fcf8 	udiv	ip, r3, r8
   83bfc:	fb08 331c 	mls	r3, r8, ip, r3
   83c00:	fa1f f984 	uxth.w	r9, r4
   83c04:	fb09 fa0c 	mul.w	sl, r9, ip
   83c08:	ea45 0b0b 	orr.w	fp, r5, fp
   83c0c:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83c10:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83c14:	459a      	cmp	sl, r3
   83c16:	fa02 f206 	lsl.w	r2, r2, r6
   83c1a:	d904      	bls.n	83c26 <__udivdi3+0x18e>
   83c1c:	191b      	adds	r3, r3, r4
   83c1e:	f10c 35ff 	add.w	r5, ip, #4294967295
   83c22:	d36f      	bcc.n	83d04 <__udivdi3+0x26c>
   83c24:	46ac      	mov	ip, r5
   83c26:	ebca 0303 	rsb	r3, sl, r3
   83c2a:	fbb3 f5f8 	udiv	r5, r3, r8
   83c2e:	fb08 3315 	mls	r3, r8, r5, r3
   83c32:	fb09 f905 	mul.w	r9, r9, r5
   83c36:	fa1f fb8b 	uxth.w	fp, fp
   83c3a:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83c3e:	45b9      	cmp	r9, r7
   83c40:	d904      	bls.n	83c4c <__udivdi3+0x1b4>
   83c42:	193f      	adds	r7, r7, r4
   83c44:	f105 33ff 	add.w	r3, r5, #4294967295
   83c48:	d362      	bcc.n	83d10 <__udivdi3+0x278>
   83c4a:	461d      	mov	r5, r3
   83c4c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83c50:	fbac 2302 	umull	r2, r3, ip, r2
   83c54:	ebc9 0707 	rsb	r7, r9, r7
   83c58:	429f      	cmp	r7, r3
   83c5a:	f04f 0500 	mov.w	r5, #0
   83c5e:	d34a      	bcc.n	83cf6 <__udivdi3+0x25e>
   83c60:	d046      	beq.n	83cf0 <__udivdi3+0x258>
   83c62:	4662      	mov	r2, ip
   83c64:	462b      	mov	r3, r5
   83c66:	e75d      	b.n	83b24 <__udivdi3+0x8c>
   83c68:	4094      	lsls	r4, r2
   83c6a:	f1c2 0920 	rsb	r9, r2, #32
   83c6e:	fa21 fc09 	lsr.w	ip, r1, r9
   83c72:	4091      	lsls	r1, r2
   83c74:	fa20 f909 	lsr.w	r9, r0, r9
   83c78:	0c26      	lsrs	r6, r4, #16
   83c7a:	fbbc f8f6 	udiv	r8, ip, r6
   83c7e:	fb06 cc18 	mls	ip, r6, r8, ip
   83c82:	b2a7      	uxth	r7, r4
   83c84:	fb07 f308 	mul.w	r3, r7, r8
   83c88:	ea49 0901 	orr.w	r9, r9, r1
   83c8c:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83c90:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83c94:	4563      	cmp	r3, ip
   83c96:	fa00 f502 	lsl.w	r5, r0, r2
   83c9a:	d909      	bls.n	83cb0 <__udivdi3+0x218>
   83c9c:	eb1c 0c04 	adds.w	ip, ip, r4
   83ca0:	f108 32ff 	add.w	r2, r8, #4294967295
   83ca4:	d23b      	bcs.n	83d1e <__udivdi3+0x286>
   83ca6:	4563      	cmp	r3, ip
   83ca8:	d939      	bls.n	83d1e <__udivdi3+0x286>
   83caa:	f1a8 0802 	sub.w	r8, r8, #2
   83cae:	44a4      	add	ip, r4
   83cb0:	ebc3 0c0c 	rsb	ip, r3, ip
   83cb4:	fbbc f3f6 	udiv	r3, ip, r6
   83cb8:	fb06 c113 	mls	r1, r6, r3, ip
   83cbc:	fb07 f203 	mul.w	r2, r7, r3
   83cc0:	fa1f f989 	uxth.w	r9, r9
   83cc4:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83cc8:	428a      	cmp	r2, r1
   83cca:	d907      	bls.n	83cdc <__udivdi3+0x244>
   83ccc:	1909      	adds	r1, r1, r4
   83cce:	f103 30ff 	add.w	r0, r3, #4294967295
   83cd2:	d222      	bcs.n	83d1a <__udivdi3+0x282>
   83cd4:	428a      	cmp	r2, r1
   83cd6:	d920      	bls.n	83d1a <__udivdi3+0x282>
   83cd8:	3b02      	subs	r3, #2
   83cda:	4421      	add	r1, r4
   83cdc:	1a89      	subs	r1, r1, r2
   83cde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83ce2:	e743      	b.n	83b6c <__udivdi3+0xd4>
   83ce4:	463a      	mov	r2, r7
   83ce6:	e705      	b.n	83af4 <__udivdi3+0x5c>
   83ce8:	4633      	mov	r3, r6
   83cea:	e718      	b.n	83b1e <__udivdi3+0x86>
   83cec:	460a      	mov	r2, r1
   83cee:	e766      	b.n	83bbe <__udivdi3+0x126>
   83cf0:	40b0      	lsls	r0, r6
   83cf2:	4290      	cmp	r0, r2
   83cf4:	d2b5      	bcs.n	83c62 <__udivdi3+0x1ca>
   83cf6:	f10c 32ff 	add.w	r2, ip, #4294967295
   83cfa:	2300      	movs	r3, #0
   83cfc:	e712      	b.n	83b24 <__udivdi3+0x8c>
   83cfe:	4633      	mov	r3, r6
   83d00:	4632      	mov	r2, r6
   83d02:	e70f      	b.n	83b24 <__udivdi3+0x8c>
   83d04:	459a      	cmp	sl, r3
   83d06:	d98d      	bls.n	83c24 <__udivdi3+0x18c>
   83d08:	f1ac 0c02 	sub.w	ip, ip, #2
   83d0c:	4423      	add	r3, r4
   83d0e:	e78a      	b.n	83c26 <__udivdi3+0x18e>
   83d10:	45b9      	cmp	r9, r7
   83d12:	d99a      	bls.n	83c4a <__udivdi3+0x1b2>
   83d14:	3d02      	subs	r5, #2
   83d16:	4427      	add	r7, r4
   83d18:	e798      	b.n	83c4c <__udivdi3+0x1b4>
   83d1a:	4603      	mov	r3, r0
   83d1c:	e7de      	b.n	83cdc <__udivdi3+0x244>
   83d1e:	4690      	mov	r8, r2
   83d20:	e7c6      	b.n	83cb0 <__udivdi3+0x218>
   83d22:	3802      	subs	r0, #2
   83d24:	4421      	add	r1, r4
   83d26:	e735      	b.n	83b94 <__udivdi3+0xfc>
   83d28:	6c696146 	.word	0x6c696146
   83d2c:	74206465 	.word	0x74206465
   83d30:	6e69206f 	.word	0x6e69206f
   83d34:	61697469 	.word	0x61697469
   83d38:	657a696c 	.word	0x657a696c
   83d3c:	73616d20 	.word	0x73616d20
   83d40:	0d726574 	.word	0x0d726574
   83d44:	0000000a 	.word	0x0000000a
   83d48:	74696e49 	.word	0x74696e49
   83d4c:	696c6169 	.word	0x696c6169
   83d50:	2064657a 	.word	0x2064657a
   83d54:	7473616d 	.word	0x7473616d
   83d58:	0a0d7265 	.word	0x0a0d7265
   83d5c:	00000000 	.word	0x00000000
   83d60:	00000043 	.word	0x00000043

00083d64 <_global_impure_ptr>:
   83d64:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   83d74:	46454443 00000000 33323130 37363534     CDEF....01234567
   83d84:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83d94:	0000296c                                l)..

00083d98 <zeroes.6721>:
   83d98:	30303030 30303030 30303030 30303030     0000000000000000

00083da8 <blanks.6720>:
   83da8:	20202020 20202020 20202020 20202020                     

00083db8 <_init>:
   83db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83dba:	bf00      	nop
   83dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83dbe:	bc08      	pop	{r3}
   83dc0:	469e      	mov	lr, r3
   83dc2:	4770      	bx	lr

00083dc4 <__init_array_start>:
   83dc4:	00081dbd 	.word	0x00081dbd

00083dc8 <__frame_dummy_init_array_entry>:
   83dc8:	00080119                                ....

00083dcc <_fini>:
   83dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83dce:	bf00      	nop
   83dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83dd2:	bc08      	pop	{r3}
   83dd4:	469e      	mov	lr, r3
   83dd6:	4770      	bx	lr

00083dd8 <__fini_array_start>:
   83dd8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00083d60 00000000 00000000 00000000     `=..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <lc_ctype_charset>:
20070564:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070584 <__mb_cur_max>:
20070584:	00000001                                ....

20070588 <__malloc_av_>:
	...
20070590:	20070588 20070588 20070590 20070590     ... ... ... ... 
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 

20070990 <__malloc_trim_threshold>:
20070990:	00020000                                ....

20070994 <__malloc_sbrk_base>:
20070994:	ffffffff                                ....

20070998 <__wctomb>:
20070998:	0008352d                                -5..
