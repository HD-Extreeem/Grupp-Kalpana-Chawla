
TestSchema1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007224  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00087224  00087224  0000f224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009dc  20070000  0008722c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000083bc  200709e0  00087c10  000109e0  2**3
                  ALLOC
  4 .stack        00002004  20078d9c  0008ffcc  000109e0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109dc  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010a05  2**0
                  CONTENTS, READONLY
  7 .debug_info   000122e8  00000000  00000000  00010a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003273  00000000  00000000  00022d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008318  00000000  00000000  00025fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e80  00000000  00000000  0002e2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d80  00000000  00000000  0002f153  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a4f6  00000000  00000000  0002fed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012eac  00000000  00000000  0004a3c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00069642  00000000  00000000  0005d275  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002c84  00000000  00000000  000c68b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ada0 	.word	0x2007ada0
   80004:	00082e95 	.word	0x00082e95
   80008:	00082e91 	.word	0x00082e91
   8000c:	00082e91 	.word	0x00082e91
   80010:	00082e91 	.word	0x00082e91
   80014:	00082e91 	.word	0x00082e91
   80018:	00082e91 	.word	0x00082e91
	...
   8002c:	00081409 	.word	0x00081409
   80030:	00082e91 	.word	0x00082e91
   80034:	00000000 	.word	0x00000000
   80038:	00081485 	.word	0x00081485
   8003c:	000814c1 	.word	0x000814c1
   80040:	00082e91 	.word	0x00082e91
   80044:	00082e91 	.word	0x00082e91
   80048:	00082e91 	.word	0x00082e91
   8004c:	00082e91 	.word	0x00082e91
   80050:	00082e91 	.word	0x00082e91
   80054:	00082e91 	.word	0x00082e91
   80058:	00082e91 	.word	0x00082e91
   8005c:	00082e91 	.word	0x00082e91
   80060:	00082e91 	.word	0x00082e91
   80064:	00082e91 	.word	0x00082e91
   80068:	00000000 	.word	0x00000000
   8006c:	00082d01 	.word	0x00082d01
   80070:	00082d15 	.word	0x00082d15
   80074:	00082d29 	.word	0x00082d29
   80078:	00082d3d 	.word	0x00082d3d
	...
   80084:	00082e91 	.word	0x00082e91
   80088:	00082e91 	.word	0x00082e91
   8008c:	00082e91 	.word	0x00082e91
   80090:	00082e91 	.word	0x00082e91
   80094:	00082e91 	.word	0x00082e91
   80098:	00082e91 	.word	0x00082e91
   8009c:	00082e91 	.word	0x00082e91
   800a0:	00082e91 	.word	0x00082e91
   800a4:	00000000 	.word	0x00000000
   800a8:	00082e91 	.word	0x00082e91
   800ac:	00082e91 	.word	0x00082e91
   800b0:	00082e91 	.word	0x00082e91
   800b4:	00082e91 	.word	0x00082e91
   800b8:	00082e91 	.word	0x00082e91
   800bc:	00082e91 	.word	0x00082e91
   800c0:	00082e91 	.word	0x00082e91
   800c4:	00082e91 	.word	0x00082e91
   800c8:	00082e91 	.word	0x00082e91
   800cc:	00082e91 	.word	0x00082e91
   800d0:	00082e91 	.word	0x00082e91
   800d4:	00082e91 	.word	0x00082e91
   800d8:	00082e91 	.word	0x00082e91
   800dc:	00082e91 	.word	0x00082e91
   800e0:	00082e91 	.word	0x00082e91
   800e4:	00082e91 	.word	0x00082e91
   800e8:	00082e91 	.word	0x00082e91
   800ec:	00082e91 	.word	0x00082e91
   800f0:	00082e91 	.word	0x00082e91

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709e0 	.word	0x200709e0
   80110:	00000000 	.word	0x00000000
   80114:	0008722c 	.word	0x0008722c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008722c 	.word	0x0008722c
   8013c:	200709e4 	.word	0x200709e4
   80140:	0008722c 	.word	0x0008722c
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	20078d10 	.word	0x20078d10
   80184:	20078cb4 	.word	0x20078cb4

00080188 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80188:	b4f0      	push	{r4, r5, r6, r7}
   8018a:	b08c      	sub	sp, #48	; 0x30
   8018c:	4607      	mov	r7, r0
   8018e:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80190:	ac01      	add	r4, sp, #4
   80192:	4d12      	ldr	r5, [pc, #72]	; (801dc <pwm_clocks_generate+0x54>)
   80194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   801a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   801a4:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   801a6:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   801a8:	f852 4f04 	ldr.w	r4, [r2, #4]!
   801ac:	fbb6 f4f4 	udiv	r4, r6, r4
   801b0:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   801b4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   801b8:	d903      	bls.n	801c2 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   801ba:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   801bc:	2b0b      	cmp	r3, #11
   801be:	d1f3      	bne.n	801a8 <pwm_clocks_generate+0x20>
   801c0:	e004      	b.n	801cc <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   801c2:	2b0a      	cmp	r3, #10
   801c4:	d805      	bhi.n	801d2 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   801c6:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   801ca:	e004      	b.n	801d6 <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   801cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   801d0:	e001      	b.n	801d6 <pwm_clocks_generate+0x4e>
   801d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   801d6:	b00c      	add	sp, #48	; 0x30
   801d8:	bcf0      	pop	{r4, r5, r6, r7}
   801da:	4770      	bx	lr
   801dc:	00087060 	.word	0x00087060

000801e0 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   801e0:	b570      	push	{r4, r5, r6, lr}
   801e2:	4606      	mov	r6, r0
   801e4:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   801e6:	6808      	ldr	r0, [r1, #0]
   801e8:	b140      	cbz	r0, 801fc <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   801ea:	6889      	ldr	r1, [r1, #8]
   801ec:	4b0b      	ldr	r3, [pc, #44]	; (8021c <pwm_init+0x3c>)
   801ee:	4798      	blx	r3
   801f0:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   801f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   801f6:	4298      	cmp	r0, r3
   801f8:	d101      	bne.n	801fe <pwm_init+0x1e>
   801fa:	e00e      	b.n	8021a <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   801fc:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   801fe:	6860      	ldr	r0, [r4, #4]
   80200:	b140      	cbz	r0, 80214 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80202:	68a1      	ldr	r1, [r4, #8]
   80204:	4b05      	ldr	r3, [pc, #20]	; (8021c <pwm_init+0x3c>)
   80206:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80208:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8020c:	4298      	cmp	r0, r3
   8020e:	d004      	beq.n	8021a <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80210:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80214:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80216:	2000      	movs	r0, #0
   80218:	bd70      	pop	{r4, r5, r6, pc}
}
   8021a:	bd70      	pop	{r4, r5, r6, pc}
   8021c:	00080189 	.word	0x00080189

00080220 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80220:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80222:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80224:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80226:	684a      	ldr	r2, [r1, #4]
   80228:	f002 020f 	and.w	r2, r2, #15
   8022c:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   8022e:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80230:	432c      	orrs	r4, r5
   80232:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80234:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80238:	7d8a      	ldrb	r2, [r1, #22]
   8023a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   8023e:	7dca      	ldrb	r2, [r1, #23]
   80240:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80244:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80246:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   8024a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   8024e:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80252:	68cc      	ldr	r4, [r1, #12]
   80254:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80258:	690c      	ldr	r4, [r1, #16]
   8025a:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   8025e:	7d8a      	ldrb	r2, [r1, #22]
   80260:	b13a      	cbz	r2, 80272 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80262:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80264:	8b4a      	ldrh	r2, [r1, #26]
   80266:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   8026a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   8026e:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80272:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80274:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80278:	409a      	lsls	r2, r3
   8027a:	43d2      	mvns	r2, r2
   8027c:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   8027e:	7fce      	ldrb	r6, [r1, #31]
   80280:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80282:	7f8c      	ldrb	r4, [r1, #30]
   80284:	409c      	lsls	r4, r3
   80286:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8028a:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   8028c:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   8028e:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80290:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80292:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80296:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80298:	f891 4020 	ldrb.w	r4, [r1, #32]
   8029c:	409c      	lsls	r4, r3
   8029e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   802a2:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   802a4:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   802a6:	2201      	movs	r2, #1
   802a8:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   802aa:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   802ae:	b11c      	cbz	r4, 802b8 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   802b0:	6a04      	ldr	r4, [r0, #32]
   802b2:	4314      	orrs	r4, r2
   802b4:	6204      	str	r4, [r0, #32]
   802b6:	e003      	b.n	802c0 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   802b8:	6a04      	ldr	r4, [r0, #32]
   802ba:	ea24 0402 	bic.w	r4, r4, r2
   802be:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   802c0:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   802c4:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   802c6:	6e84      	ldr	r4, [r0, #104]	; 0x68
   802c8:	bf0c      	ite	eq
   802ca:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   802cc:	4394      	bicne	r4, r2
   802ce:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   802d0:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   802d4:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   802d6:	6e84      	ldr	r4, [r0, #104]	; 0x68
   802d8:	bf0c      	ite	eq
   802da:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   802de:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   802e2:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   802e4:	2b03      	cmp	r3, #3
   802e6:	d80c      	bhi.n	80302 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   802e8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   802ea:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   802ec:	22ff      	movs	r2, #255	; 0xff
   802ee:	409a      	lsls	r2, r3
   802f0:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   802f4:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   802f8:	fa01 f303 	lsl.w	r3, r1, r3
   802fc:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   802fe:	66c3      	str	r3, [r0, #108]	; 0x6c
   80300:	e00c      	b.n	8031c <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80302:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80304:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80306:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80308:	22ff      	movs	r2, #255	; 0xff
   8030a:	409a      	lsls	r2, r3
   8030c:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80310:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80314:	fa01 f303 	lsl.w	r3, r1, r3
   80318:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8031a:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   8031c:	2000      	movs	r0, #0
   8031e:	bc70      	pop	{r4, r5, r6}
   80320:	4770      	bx	lr
   80322:	bf00      	nop

00080324 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80324:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   80326:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80328:	690b      	ldr	r3, [r1, #16]
   8032a:	4293      	cmp	r3, r2
   8032c:	d306      	bcc.n	8033c <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   8032e:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80330:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80334:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   80338:	2000      	movs	r0, #0
   8033a:	e001      	b.n	80340 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   8033c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80340:	f85d 4b04 	ldr.w	r4, [sp], #4
   80344:	4770      	bx	lr
   80346:	bf00      	nop

00080348 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80348:	2301      	movs	r3, #1
   8034a:	fa03 f101 	lsl.w	r1, r3, r1
   8034e:	6041      	str	r1, [r0, #4]
   80350:	4770      	bx	lr
   80352:	bf00      	nop

00080354 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80354:	2301      	movs	r3, #1
   80356:	fa03 f101 	lsl.w	r1, r3, r1
   8035a:	6081      	str	r1, [r0, #8]
   8035c:	4770      	bx	lr
   8035e:	bf00      	nop

00080360 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80360:	b5f0      	push	{r4, r5, r6, r7, lr}
   80362:	b083      	sub	sp, #12
   80364:	4604      	mov	r4, r0
   80366:	460d      	mov	r5, r1
	uint32_t val = 0;
   80368:	2300      	movs	r3, #0
   8036a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8036c:	4b1f      	ldr	r3, [pc, #124]	; (803ec <usart_serial_getchar+0x8c>)
   8036e:	4298      	cmp	r0, r3
   80370:	d107      	bne.n	80382 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80372:	461f      	mov	r7, r3
   80374:	4e1e      	ldr	r6, [pc, #120]	; (803f0 <usart_serial_getchar+0x90>)
   80376:	4638      	mov	r0, r7
   80378:	4629      	mov	r1, r5
   8037a:	47b0      	blx	r6
   8037c:	2800      	cmp	r0, #0
   8037e:	d1fa      	bne.n	80376 <usart_serial_getchar+0x16>
   80380:	e019      	b.n	803b6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80382:	4b1c      	ldr	r3, [pc, #112]	; (803f4 <usart_serial_getchar+0x94>)
   80384:	4298      	cmp	r0, r3
   80386:	d109      	bne.n	8039c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80388:	461f      	mov	r7, r3
   8038a:	4e1b      	ldr	r6, [pc, #108]	; (803f8 <usart_serial_getchar+0x98>)
   8038c:	4638      	mov	r0, r7
   8038e:	a901      	add	r1, sp, #4
   80390:	47b0      	blx	r6
   80392:	2800      	cmp	r0, #0
   80394:	d1fa      	bne.n	8038c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80396:	9b01      	ldr	r3, [sp, #4]
   80398:	702b      	strb	r3, [r5, #0]
   8039a:	e019      	b.n	803d0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8039c:	4b17      	ldr	r3, [pc, #92]	; (803fc <usart_serial_getchar+0x9c>)
   8039e:	4298      	cmp	r0, r3
   803a0:	d109      	bne.n	803b6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   803a2:	461e      	mov	r6, r3
   803a4:	4c14      	ldr	r4, [pc, #80]	; (803f8 <usart_serial_getchar+0x98>)
   803a6:	4630      	mov	r0, r6
   803a8:	a901      	add	r1, sp, #4
   803aa:	47a0      	blx	r4
   803ac:	2800      	cmp	r0, #0
   803ae:	d1fa      	bne.n	803a6 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   803b0:	9b01      	ldr	r3, [sp, #4]
   803b2:	702b      	strb	r3, [r5, #0]
   803b4:	e018      	b.n	803e8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   803b6:	4b12      	ldr	r3, [pc, #72]	; (80400 <usart_serial_getchar+0xa0>)
   803b8:	429c      	cmp	r4, r3
   803ba:	d109      	bne.n	803d0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   803bc:	461e      	mov	r6, r3
   803be:	4c0e      	ldr	r4, [pc, #56]	; (803f8 <usart_serial_getchar+0x98>)
   803c0:	4630      	mov	r0, r6
   803c2:	a901      	add	r1, sp, #4
   803c4:	47a0      	blx	r4
   803c6:	2800      	cmp	r0, #0
   803c8:	d1fa      	bne.n	803c0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   803ca:	9b01      	ldr	r3, [sp, #4]
   803cc:	702b      	strb	r3, [r5, #0]
   803ce:	e00b      	b.n	803e8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   803d0:	4b0c      	ldr	r3, [pc, #48]	; (80404 <usart_serial_getchar+0xa4>)
   803d2:	429c      	cmp	r4, r3
   803d4:	d108      	bne.n	803e8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   803d6:	461e      	mov	r6, r3
   803d8:	4c07      	ldr	r4, [pc, #28]	; (803f8 <usart_serial_getchar+0x98>)
   803da:	4630      	mov	r0, r6
   803dc:	a901      	add	r1, sp, #4
   803de:	47a0      	blx	r4
   803e0:	2800      	cmp	r0, #0
   803e2:	d1fa      	bne.n	803da <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   803e4:	9b01      	ldr	r3, [sp, #4]
   803e6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   803e8:	b003      	add	sp, #12
   803ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   803ec:	400e0800 	.word	0x400e0800
   803f0:	00080b6d 	.word	0x00080b6d
   803f4:	40098000 	.word	0x40098000
   803f8:	00080ab9 	.word	0x00080ab9
   803fc:	4009c000 	.word	0x4009c000
   80400:	400a0000 	.word	0x400a0000
   80404:	400a4000 	.word	0x400a4000

00080408 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80408:	b570      	push	{r4, r5, r6, lr}
   8040a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   8040c:	4b21      	ldr	r3, [pc, #132]	; (80494 <usart_serial_putchar+0x8c>)
   8040e:	4298      	cmp	r0, r3
   80410:	d107      	bne.n	80422 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80412:	461e      	mov	r6, r3
   80414:	4d20      	ldr	r5, [pc, #128]	; (80498 <usart_serial_putchar+0x90>)
   80416:	4630      	mov	r0, r6
   80418:	4621      	mov	r1, r4
   8041a:	47a8      	blx	r5
   8041c:	2800      	cmp	r0, #0
   8041e:	d1fa      	bne.n	80416 <usart_serial_putchar+0xe>
   80420:	e02b      	b.n	8047a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80422:	4b1e      	ldr	r3, [pc, #120]	; (8049c <usart_serial_putchar+0x94>)
   80424:	4298      	cmp	r0, r3
   80426:	d107      	bne.n	80438 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80428:	461e      	mov	r6, r3
   8042a:	4d1d      	ldr	r5, [pc, #116]	; (804a0 <usart_serial_putchar+0x98>)
   8042c:	4630      	mov	r0, r6
   8042e:	4621      	mov	r1, r4
   80430:	47a8      	blx	r5
   80432:	2800      	cmp	r0, #0
   80434:	d1fa      	bne.n	8042c <usart_serial_putchar+0x24>
   80436:	e022      	b.n	8047e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80438:	4b1a      	ldr	r3, [pc, #104]	; (804a4 <usart_serial_putchar+0x9c>)
   8043a:	4298      	cmp	r0, r3
   8043c:	d107      	bne.n	8044e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8043e:	461e      	mov	r6, r3
   80440:	4d17      	ldr	r5, [pc, #92]	; (804a0 <usart_serial_putchar+0x98>)
   80442:	4630      	mov	r0, r6
   80444:	4621      	mov	r1, r4
   80446:	47a8      	blx	r5
   80448:	2800      	cmp	r0, #0
   8044a:	d1fa      	bne.n	80442 <usart_serial_putchar+0x3a>
   8044c:	e019      	b.n	80482 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8044e:	4b16      	ldr	r3, [pc, #88]	; (804a8 <usart_serial_putchar+0xa0>)
   80450:	4298      	cmp	r0, r3
   80452:	d107      	bne.n	80464 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80454:	461e      	mov	r6, r3
   80456:	4d12      	ldr	r5, [pc, #72]	; (804a0 <usart_serial_putchar+0x98>)
   80458:	4630      	mov	r0, r6
   8045a:	4621      	mov	r1, r4
   8045c:	47a8      	blx	r5
   8045e:	2800      	cmp	r0, #0
   80460:	d1fa      	bne.n	80458 <usart_serial_putchar+0x50>
   80462:	e010      	b.n	80486 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80464:	4b11      	ldr	r3, [pc, #68]	; (804ac <usart_serial_putchar+0xa4>)
   80466:	4298      	cmp	r0, r3
   80468:	d10f      	bne.n	8048a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8046a:	461e      	mov	r6, r3
   8046c:	4d0c      	ldr	r5, [pc, #48]	; (804a0 <usart_serial_putchar+0x98>)
   8046e:	4630      	mov	r0, r6
   80470:	4621      	mov	r1, r4
   80472:	47a8      	blx	r5
   80474:	2800      	cmp	r0, #0
   80476:	d1fa      	bne.n	8046e <usart_serial_putchar+0x66>
   80478:	e009      	b.n	8048e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8047a:	2001      	movs	r0, #1
   8047c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8047e:	2001      	movs	r0, #1
   80480:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80482:	2001      	movs	r0, #1
   80484:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80486:	2001      	movs	r0, #1
   80488:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8048a:	2000      	movs	r0, #0
   8048c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8048e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80490:	bd70      	pop	{r4, r5, r6, pc}
   80492:	bf00      	nop
   80494:	400e0800 	.word	0x400e0800
   80498:	00080b5d 	.word	0x00080b5d
   8049c:	40098000 	.word	0x40098000
   804a0:	00080aa5 	.word	0x00080aa5
   804a4:	4009c000 	.word	0x4009c000
   804a8:	400a0000 	.word	0x400a0000
   804ac:	400a4000 	.word	0x400a4000

000804b0 <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   804b0:	b530      	push	{r4, r5, lr}
   804b2:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   804b4:	2008      	movs	r0, #8
   804b6:	4d12      	ldr	r5, [pc, #72]	; (80500 <configureConsole+0x50>)
   804b8:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   804ba:	4c12      	ldr	r4, [pc, #72]	; (80504 <configureConsole+0x54>)
   804bc:	4b12      	ldr	r3, [pc, #72]	; (80508 <configureConsole+0x58>)
   804be:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   804c0:	4a12      	ldr	r2, [pc, #72]	; (8050c <configureConsole+0x5c>)
   804c2:	4b13      	ldr	r3, [pc, #76]	; (80510 <configureConsole+0x60>)
   804c4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   804c6:	4a13      	ldr	r2, [pc, #76]	; (80514 <configureConsole+0x64>)
   804c8:	4b13      	ldr	r3, [pc, #76]	; (80518 <configureConsole+0x68>)
   804ca:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   804cc:	4b13      	ldr	r3, [pc, #76]	; (8051c <configureConsole+0x6c>)
   804ce:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   804d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   804d4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   804d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   804da:	9303      	str	r3, [sp, #12]
   804dc:	2008      	movs	r0, #8
   804de:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   804e0:	4620      	mov	r0, r4
   804e2:	a901      	add	r1, sp, #4
   804e4:	4b0e      	ldr	r3, [pc, #56]	; (80520 <configureConsole+0x70>)
   804e6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   804e8:	4d0e      	ldr	r5, [pc, #56]	; (80524 <configureConsole+0x74>)
   804ea:	682b      	ldr	r3, [r5, #0]
   804ec:	6898      	ldr	r0, [r3, #8]
   804ee:	2100      	movs	r1, #0
   804f0:	4c0d      	ldr	r4, [pc, #52]	; (80528 <configureConsole+0x78>)
   804f2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   804f4:	682b      	ldr	r3, [r5, #0]
   804f6:	6858      	ldr	r0, [r3, #4]
   804f8:	2100      	movs	r1, #0
   804fa:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
   804fc:	b005      	add	sp, #20
   804fe:	bd30      	pop	{r4, r5, pc}
   80500:	00082e39 	.word	0x00082e39
   80504:	400e0800 	.word	0x400e0800
   80508:	20078d10 	.word	0x20078d10
   8050c:	00080409 	.word	0x00080409
   80510:	20078d0c 	.word	0x20078d0c
   80514:	00080361 	.word	0x00080361
   80518:	20078cb4 	.word	0x20078cb4
   8051c:	0501bd00 	.word	0x0501bd00
   80520:	00080b25 	.word	0x00080b25
   80524:	200705a0 	.word	0x200705a0
   80528:	00084261 	.word	0x00084261

0008052c <calculateDistance>:
@param Xb the x coordinate for B
@param Ya the y coordinate for A
@param Yb the y coordinate for B
return distance the distance between A and B
**/
double calculateDistance (double Xa, double Ya, double Xb, double Yb){
   8052c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80530:	4606      	mov	r6, r0
   80532:	460f      	mov	r7, r1
   80534:	4614      	mov	r4, r2
   80536:	461d      	mov	r5, r3
	double distance;
	double deltaX = Xb - Xa;
   80538:	f8df a054 	ldr.w	sl, [pc, #84]	; 80590 <calculateDistance+0x64>
   8053c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   80540:	4632      	mov	r2, r6
   80542:	463b      	mov	r3, r7
   80544:	47d0      	blx	sl
   80546:	4680      	mov	r8, r0
   80548:	4689      	mov	r9, r1
	double deltaY = Yb - Ya;
   8054a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   8054e:	4622      	mov	r2, r4
   80550:	462b      	mov	r3, r5
   80552:	47d0      	blx	sl
   80554:	4604      	mov	r4, r0
   80556:	460d      	mov	r5, r1
	distance = sqrt((deltaX*deltaX) + (deltaY*deltaY));
   80558:	f8df a038 	ldr.w	sl, [pc, #56]	; 80594 <calculateDistance+0x68>
   8055c:	f8df b038 	ldr.w	fp, [pc, #56]	; 80598 <calculateDistance+0x6c>
   80560:	4640      	mov	r0, r8
   80562:	4649      	mov	r1, r9
   80564:	4642      	mov	r2, r8
   80566:	464b      	mov	r3, r9
   80568:	47d0      	blx	sl
   8056a:	4606      	mov	r6, r0
   8056c:	460f      	mov	r7, r1
   8056e:	4620      	mov	r0, r4
   80570:	4629      	mov	r1, r5
   80572:	4622      	mov	r2, r4
   80574:	462b      	mov	r3, r5
   80576:	47d0      	blx	sl
   80578:	4602      	mov	r2, r0
   8057a:	460b      	mov	r3, r1
   8057c:	4630      	mov	r0, r6
   8057e:	4639      	mov	r1, r7
   80580:	47d8      	blx	fp
   80582:	4b02      	ldr	r3, [pc, #8]	; (8058c <calculateDistance+0x60>)
   80584:	4798      	blx	r3
	return distance;
}
   80586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8058a:	bf00      	nop
   8058c:	000834a9 	.word	0x000834a9
   80590:	00083731 	.word	0x00083731
   80594:	00083a99 	.word	0x00083a99
   80598:	00083735 	.word	0x00083735
   8059c:	00000000 	.word	0x00000000

000805a0 <calculateAzimuthAngle>:
@param Xb the x coordinate for B
@param Ya the y coordinate for A
@param Yb the y coordinate for B
return azimutAngle the azimuth angle from A to B
**/
double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
   805a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805a4:	4604      	mov	r4, r0
   805a6:	460d      	mov	r5, r1
   805a8:	4616      	mov	r6, r2
   805aa:	461f      	mov	r7, r3
	double azimutAngle = 0;
	double deltaX = Xb-Xa;
   805ac:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 807a4 <calculateAzimuthAngle+0x204>
   805b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   805b4:	4622      	mov	r2, r4
   805b6:	462b      	mov	r3, r5
   805b8:	47c0      	blx	r8
   805ba:	4604      	mov	r4, r0
   805bc:	460d      	mov	r5, r1
	double deltaY = Yb-Ya;
   805be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   805c2:	4632      	mov	r2, r6
   805c4:	463b      	mov	r3, r7
   805c6:	47c0      	blx	r8
   805c8:	4606      	mov	r6, r0
   805ca:	460f      	mov	r7, r1
	
	// if A and B has same coordinates
	if ( (deltaX == 0) && (deltaY == 0) )
   805cc:	4620      	mov	r0, r4
   805ce:	4629      	mov	r1, r5
   805d0:	2200      	movs	r2, #0
   805d2:	2300      	movs	r3, #0
   805d4:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80780 <calculateAzimuthAngle+0x1e0>
   805d8:	47e0      	blx	ip
   805da:	b1a8      	cbz	r0, 80608 <calculateAzimuthAngle+0x68>
   805dc:	4630      	mov	r0, r6
   805de:	4639      	mov	r1, r7
   805e0:	2200      	movs	r2, #0
   805e2:	2300      	movs	r3, #0
   805e4:	4c66      	ldr	r4, [pc, #408]	; (80780 <calculateAzimuthAngle+0x1e0>)
   805e6:	47a0      	blx	r4
   805e8:	2800      	cmp	r0, #0
   805ea:	f040 80aa 	bne.w	80742 <calculateAzimuthAngle+0x1a2>
		azimutAngle = 0;
	}
	// if A and B has same x coordinate
	else if (deltaX == 0)
	{
		if (deltaY>0)
   805ee:	4630      	mov	r0, r6
   805f0:	4639      	mov	r1, r7
   805f2:	2200      	movs	r2, #0
   805f4:	2300      	movs	r3, #0
   805f6:	4c63      	ldr	r4, [pc, #396]	; (80784 <calculateAzimuthAngle+0x1e4>)
   805f8:	47a0      	blx	r4
   805fa:	2800      	cmp	r0, #0
   805fc:	f000 80a5 	beq.w	8074a <calculateAzimuthAngle+0x1aa>
		{
			azimutAngle = 0;
   80600:	2000      	movs	r0, #0
   80602:	2100      	movs	r1, #0
   80604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			azimutAngle = 180;
		}
		
	}
	// if A and B has same y coordinate
	else if (deltaY == 0)
   80608:	4630      	mov	r0, r6
   8060a:	4639      	mov	r1, r7
   8060c:	2200      	movs	r2, #0
   8060e:	2300      	movs	r3, #0
   80610:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80780 <calculateAzimuthAngle+0x1e0>
   80614:	47e0      	blx	ip
   80616:	b160      	cbz	r0, 80632 <calculateAzimuthAngle+0x92>
	{
		if (deltaX>0)
   80618:	4620      	mov	r0, r4
   8061a:	4629      	mov	r1, r5
   8061c:	2200      	movs	r2, #0
   8061e:	2300      	movs	r3, #0
   80620:	4c58      	ldr	r4, [pc, #352]	; (80784 <calculateAzimuthAngle+0x1e4>)
   80622:	47a0      	blx	r4
   80624:	2800      	cmp	r0, #0
   80626:	f000 8094 	beq.w	80752 <calculateAzimuthAngle+0x1b2>
		{
			azimutAngle = 90;
   8062a:	2000      	movs	r0, #0
   8062c:	4956      	ldr	r1, [pc, #344]	; (80788 <calculateAzimuthAngle+0x1e8>)
   8062e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		
	}
	else
	{   // angle is between 0 to 90 degree
		if ( (deltaX > 0) && (deltaY > 0 ) )
   80632:	4620      	mov	r0, r4
   80634:	4629      	mov	r1, r5
   80636:	2200      	movs	r2, #0
   80638:	2300      	movs	r3, #0
   8063a:	f8df c148 	ldr.w	ip, [pc, #328]	; 80784 <calculateAzimuthAngle+0x1e4>
   8063e:	47e0      	blx	ip
   80640:	b1b0      	cbz	r0, 80670 <calculateAzimuthAngle+0xd0>
   80642:	4630      	mov	r0, r6
   80644:	4639      	mov	r1, r7
   80646:	2200      	movs	r2, #0
   80648:	2300      	movs	r3, #0
   8064a:	f8df c138 	ldr.w	ip, [pc, #312]	; 80784 <calculateAzimuthAngle+0x1e4>
   8064e:	47e0      	blx	ip
   80650:	b1b0      	cbz	r0, 80680 <calculateAzimuthAngle+0xe0>
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   80652:	4620      	mov	r0, r4
   80654:	4629      	mov	r1, r5
   80656:	4632      	mov	r2, r6
   80658:	463b      	mov	r3, r7
   8065a:	4c4c      	ldr	r4, [pc, #304]	; (8078c <calculateAzimuthAngle+0x1ec>)
   8065c:	47a0      	blx	r4
   8065e:	4b4c      	ldr	r3, [pc, #304]	; (80790 <calculateAzimuthAngle+0x1f0>)
   80660:	4798      	blx	r3
@param radian the angle value in radian
return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   80662:	a343      	add	r3, pc, #268	; (adr r3, 80770 <calculateAzimuthAngle+0x1d0>)
   80664:	e9d3 2300 	ldrd	r2, r3, [r3]
   80668:	4c4a      	ldr	r4, [pc, #296]	; (80794 <calculateAzimuthAngle+0x1f4>)
   8066a:	47a0      	blx	r4
	}
	else
	{   // angle is between 0 to 90 degree
		if ( (deltaX > 0) && (deltaY > 0 ) )
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   8066c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		// the angle is between 90 to 180 degree
		else if ( (deltaX > 0) && (deltaY < 0 ) )
   80670:	4620      	mov	r0, r4
   80672:	4629      	mov	r1, r5
   80674:	2200      	movs	r2, #0
   80676:	2300      	movs	r3, #0
   80678:	f8df c108 	ldr.w	ip, [pc, #264]	; 80784 <calculateAzimuthAngle+0x1e4>
   8067c:	47e0      	blx	ip
   8067e:	b1d0      	cbz	r0, 806b6 <calculateAzimuthAngle+0x116>
   80680:	4630      	mov	r0, r6
   80682:	4639      	mov	r1, r7
   80684:	2200      	movs	r2, #0
   80686:	2300      	movs	r3, #0
   80688:	f8df c11c 	ldr.w	ip, [pc, #284]	; 807a8 <calculateAzimuthAngle+0x208>
   8068c:	47e0      	blx	ip
   8068e:	b190      	cbz	r0, 806b6 <calculateAzimuthAngle+0x116>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   80690:	4620      	mov	r0, r4
   80692:	4629      	mov	r1, r5
   80694:	4632      	mov	r2, r6
   80696:	463b      	mov	r3, r7
   80698:	4c3c      	ldr	r4, [pc, #240]	; (8078c <calculateAzimuthAngle+0x1ec>)
   8069a:	47a0      	blx	r4
   8069c:	4b3c      	ldr	r3, [pc, #240]	; (80790 <calculateAzimuthAngle+0x1f0>)
   8069e:	4798      	blx	r3
@param radian the angle value in radian
return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   806a0:	a333      	add	r3, pc, #204	; (adr r3, 80770 <calculateAzimuthAngle+0x1d0>)
   806a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   806a6:	4c3b      	ldr	r4, [pc, #236]	; (80794 <calculateAzimuthAngle+0x1f4>)
   806a8:	47a0      	blx	r4
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
		}
		// the angle is between 90 to 180 degree
		else if ( (deltaX > 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   806aa:	2200      	movs	r2, #0
   806ac:	4b3a      	ldr	r3, [pc, #232]	; (80798 <calculateAzimuthAngle+0x1f8>)
   806ae:	4c3b      	ldr	r4, [pc, #236]	; (8079c <calculateAzimuthAngle+0x1fc>)
   806b0:	47a0      	blx	r4
   806b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		// the angle is between 180 to 270 degree
		else if ( (deltaX < 0) && (deltaY < 0 ) )
   806b6:	4620      	mov	r0, r4
   806b8:	4629      	mov	r1, r5
   806ba:	2200      	movs	r2, #0
   806bc:	2300      	movs	r3, #0
   806be:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 807a8 <calculateAzimuthAngle+0x208>
   806c2:	47e0      	blx	ip
   806c4:	b1d0      	cbz	r0, 806fc <calculateAzimuthAngle+0x15c>
   806c6:	4630      	mov	r0, r6
   806c8:	4639      	mov	r1, r7
   806ca:	2200      	movs	r2, #0
   806cc:	2300      	movs	r3, #0
   806ce:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 807a8 <calculateAzimuthAngle+0x208>
   806d2:	47e0      	blx	ip
   806d4:	b1d0      	cbz	r0, 8070c <calculateAzimuthAngle+0x16c>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   806d6:	4620      	mov	r0, r4
   806d8:	4629      	mov	r1, r5
   806da:	4632      	mov	r2, r6
   806dc:	463b      	mov	r3, r7
   806de:	4c2b      	ldr	r4, [pc, #172]	; (8078c <calculateAzimuthAngle+0x1ec>)
   806e0:	47a0      	blx	r4
   806e2:	4b2b      	ldr	r3, [pc, #172]	; (80790 <calculateAzimuthAngle+0x1f0>)
   806e4:	4798      	blx	r3
@param radian the angle value in radian
return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   806e6:	a322      	add	r3, pc, #136	; (adr r3, 80770 <calculateAzimuthAngle+0x1d0>)
   806e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   806ec:	4c29      	ldr	r4, [pc, #164]	; (80794 <calculateAzimuthAngle+0x1f4>)
   806ee:	47a0      	blx	r4
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
		}
		// the angle is between 180 to 270 degree
		else if ( (deltaX < 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   806f0:	2200      	movs	r2, #0
   806f2:	4b29      	ldr	r3, [pc, #164]	; (80798 <calculateAzimuthAngle+0x1f8>)
   806f4:	4c29      	ldr	r4, [pc, #164]	; (8079c <calculateAzimuthAngle+0x1fc>)
   806f6:	47a0      	blx	r4
   806f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		// the angle is between 270 to 360 degree
		else if ( (deltaX < 0) && (deltaY > 0 ) )
   806fc:	4620      	mov	r0, r4
   806fe:	4629      	mov	r1, r5
   80700:	2200      	movs	r2, #0
   80702:	2300      	movs	r3, #0
   80704:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 807a8 <calculateAzimuthAngle+0x208>
   80708:	47e0      	blx	ip
   8070a:	b338      	cbz	r0, 8075c <calculateAzimuthAngle+0x1bc>
   8070c:	4630      	mov	r0, r6
   8070e:	4639      	mov	r1, r7
   80710:	2200      	movs	r2, #0
   80712:	2300      	movs	r3, #0
   80714:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80784 <calculateAzimuthAngle+0x1e4>
   80718:	47e0      	blx	ip
   8071a:	b318      	cbz	r0, 80764 <calculateAzimuthAngle+0x1c4>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   8071c:	4620      	mov	r0, r4
   8071e:	4629      	mov	r1, r5
   80720:	4632      	mov	r2, r6
   80722:	463b      	mov	r3, r7
   80724:	4c19      	ldr	r4, [pc, #100]	; (8078c <calculateAzimuthAngle+0x1ec>)
   80726:	47a0      	blx	r4
   80728:	4b19      	ldr	r3, [pc, #100]	; (80790 <calculateAzimuthAngle+0x1f0>)
   8072a:	4798      	blx	r3
@param radian the angle value in radian
return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   8072c:	a310      	add	r3, pc, #64	; (adr r3, 80770 <calculateAzimuthAngle+0x1d0>)
   8072e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80732:	4c18      	ldr	r4, [pc, #96]	; (80794 <calculateAzimuthAngle+0x1f4>)
   80734:	47a0      	blx	r4
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
		}
		// the angle is between 270 to 360 degree
		else if ( (deltaX < 0) && (deltaY > 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   80736:	2200      	movs	r2, #0
   80738:	4b19      	ldr	r3, [pc, #100]	; (807a0 <calculateAzimuthAngle+0x200>)
   8073a:	4c18      	ldr	r4, [pc, #96]	; (8079c <calculateAzimuthAngle+0x1fc>)
   8073c:	47a0      	blx	r4
   8073e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	double deltaY = Yb-Ya;
	
	// if A and B has same coordinates
	if ( (deltaX == 0) && (deltaY == 0) )
	{
		azimutAngle = 0;
   80742:	2000      	movs	r0, #0
   80744:	2100      	movs	r1, #0
   80746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 0;
		}
		else
		{
			azimutAngle = 180;
   8074a:	2000      	movs	r0, #0
   8074c:	4912      	ldr	r1, [pc, #72]	; (80798 <calculateAzimuthAngle+0x1f8>)
   8074e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 90;
		}
		else
		{
			azimutAngle = 270;
   80752:	a109      	add	r1, pc, #36	; (adr r1, 80778 <calculateAzimuthAngle+0x1d8>)
   80754:	e9d1 0100 	ldrd	r0, r1, [r1]
   80758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
@param Ya the y coordinate for A
@param Yb the y coordinate for B
return azimutAngle the azimuth angle from A to B
**/
double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
	double azimutAngle = 0;
   8075c:	2000      	movs	r0, #0
   8075e:	2100      	movs	r1, #0
   80760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80764:	2000      	movs	r0, #0
   80766:	2100      	movs	r1, #0
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
		}
	}
	
	return azimutAngle;
}
   80768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8076c:	f3af 8000 	nop.w
   80770:	1a63c1f8 	.word	0x1a63c1f8
   80774:	404ca5dc 	.word	0x404ca5dc
   80778:	00000000 	.word	0x00000000
   8077c:	4070e000 	.word	0x4070e000
   80780:	00083f69 	.word	0x00083f69
   80784:	00083fb9 	.word	0x00083fb9
   80788:	40568000 	.word	0x40568000
   8078c:	00083ced 	.word	0x00083ced
   80790:	00083151 	.word	0x00083151
   80794:	00083a99 	.word	0x00083a99
   80798:	40668000 	.word	0x40668000
   8079c:	00083735 	.word	0x00083735
   807a0:	40768000 	.word	0x40768000
   807a4:	00083731 	.word	0x00083731
   807a8:	00083f7d 	.word	0x00083f7d
   807ac:	f3af 8000 	nop.w

000807b0 <calcluteRotationAngle>:
@param Ya the y coordinate for A
@param Yb the x coordinate for B
@param Yc the y coordinate for C
return rotationAngle the rotation angle from A to target C
**/
double calcluteRotationAngle (double Xa, double Ya, double Xb, double Yb, double Xc, double Yc){
   807b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   807b4:	b084      	sub	sp, #16
   807b6:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
   807ba:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
	
	double AoB = calculateAzimuthAngle(Xa, Ya, Xb, Yb);
   807be:	e9cd 4500 	strd	r4, r5, [sp]
   807c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
   807c6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80854 <calcluteRotationAngle+0xa4>
   807ca:	47d0      	blx	sl
   807cc:	4606      	mov	r6, r0
   807ce:	460f      	mov	r7, r1
	double BoC = calculateAzimuthAngle(Xb, Yb, Xc, Yc);
   807d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   807d4:	e9cd 2300 	strd	r2, r3, [sp]
   807d8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   807dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   807e0:	4620      	mov	r0, r4
   807e2:	4629      	mov	r1, r5
   807e4:	4642      	mov	r2, r8
   807e6:	464b      	mov	r3, r9
   807e8:	47d0      	blx	sl
	double rotationAngle = BoC-AoB;
   807ea:	4632      	mov	r2, r6
   807ec:	463b      	mov	r3, r7
   807ee:	4c12      	ldr	r4, [pc, #72]	; (80838 <calcluteRotationAngle+0x88>)
   807f0:	47a0      	blx	r4
   807f2:	4604      	mov	r4, r0
   807f4:	460d      	mov	r5, r1
	if (rotationAngle > 180)
   807f6:	2200      	movs	r2, #0
   807f8:	4b10      	ldr	r3, [pc, #64]	; (8083c <calcluteRotationAngle+0x8c>)
   807fa:	4e11      	ldr	r6, [pc, #68]	; (80840 <calcluteRotationAngle+0x90>)
   807fc:	47b0      	blx	r6
   807fe:	b138      	cbz	r0, 80810 <calcluteRotationAngle+0x60>
	{
		rotationAngle =  rotationAngle - 360;
   80800:	4620      	mov	r0, r4
   80802:	4629      	mov	r1, r5
   80804:	2200      	movs	r2, #0
   80806:	4b0f      	ldr	r3, [pc, #60]	; (80844 <calcluteRotationAngle+0x94>)
   80808:	4c0b      	ldr	r4, [pc, #44]	; (80838 <calcluteRotationAngle+0x88>)
   8080a:	47a0      	blx	r4
   8080c:	4604      	mov	r4, r0
   8080e:	460d      	mov	r5, r1
	}
	if (rotationAngle < -180)
   80810:	4620      	mov	r0, r4
   80812:	4629      	mov	r1, r5
   80814:	2200      	movs	r2, #0
   80816:	4b0c      	ldr	r3, [pc, #48]	; (80848 <calcluteRotationAngle+0x98>)
   80818:	4e0c      	ldr	r6, [pc, #48]	; (8084c <calcluteRotationAngle+0x9c>)
   8081a:	47b0      	blx	r6
   8081c:	b138      	cbz	r0, 8082e <calcluteRotationAngle+0x7e>
	{
		rotationAngle =  rotationAngle + 360;
   8081e:	4620      	mov	r0, r4
   80820:	4629      	mov	r1, r5
   80822:	2200      	movs	r2, #0
   80824:	4b07      	ldr	r3, [pc, #28]	; (80844 <calcluteRotationAngle+0x94>)
   80826:	4c0a      	ldr	r4, [pc, #40]	; (80850 <calcluteRotationAngle+0xa0>)
   80828:	47a0      	blx	r4
   8082a:	4604      	mov	r4, r0
   8082c:	460d      	mov	r5, r1
	}
	return rotationAngle;
   8082e:	4620      	mov	r0, r4
   80830:	4629      	mov	r1, r5
   80832:	b004      	add	sp, #16
   80834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80838:	00083731 	.word	0x00083731
   8083c:	40668000 	.word	0x40668000
   80840:	00083fb9 	.word	0x00083fb9
   80844:	40768000 	.word	0x40768000
   80848:	c0668000 	.word	0xc0668000
   8084c:	00083f7d 	.word	0x00083f7d
   80850:	00083735 	.word	0x00083735
   80854:	000805a1 	.word	0x000805a1

00080858 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   80858:	b538      	push	{r3, r4, r5, lr}
	
	pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   8085a:	2055      	movs	r0, #85	; 0x55
   8085c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80860:	4b0b      	ldr	r3, [pc, #44]	; (80890 <initPin21+0x38>)
   80862:	4798      	blx	r3
	/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
	PWM_pin_21.channel = PWM_CHANNEL_4;
   80864:	4b0b      	ldr	r3, [pc, #44]	; (80894 <initPin21+0x3c>)
   80866:	2404      	movs	r4, #4
   80868:	601c      	str	r4, [r3, #0]
	PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8086a:	220b      	movs	r2, #11
   8086c:	605a      	str	r2, [r3, #4]
	PWM_pin_21.polarity = PWM_LOW;
   8086e:	2200      	movs	r2, #0
   80870:	729a      	strb	r2, [r3, #10]
	PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   80872:	811a      	strh	r2, [r3, #8]
	PWM_pin_21.ul_period = 7500;
   80874:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80878:	6119      	str	r1, [r3, #16]
	PWM_pin_21.ul_duty = 0;
   8087a:	60da      	str	r2, [r3, #12]
	
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   8087c:	4d06      	ldr	r5, [pc, #24]	; (80898 <initPin21+0x40>)
   8087e:	4628      	mov	r0, r5
   80880:	4619      	mov	r1, r3
   80882:	4b06      	ldr	r3, [pc, #24]	; (8089c <initPin21+0x44>)
   80884:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80886:	4628      	mov	r0, r5
   80888:	4621      	mov	r1, r4
   8088a:	4b05      	ldr	r3, [pc, #20]	; (808a0 <initPin21+0x48>)
   8088c:	4798      	blx	r3
   8088e:	bd38      	pop	{r3, r4, r5, pc}
   80890:	00082af9 	.word	0x00082af9
   80894:	20078ce0 	.word	0x20078ce0
   80898:	40094000 	.word	0x40094000
   8089c:	00080221 	.word	0x00080221
   808a0:	00080349 	.word	0x00080349

000808a4 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   808a4:	b538      	push	{r3, r4, r5, lr}
	
	pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   808a6:	2056      	movs	r0, #86	; 0x56
   808a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   808ac:	4b0b      	ldr	r3, [pc, #44]	; (808dc <initPin22+0x38>)
   808ae:	4798      	blx	r3
	/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
	PWM_pin_22.channel = PWM_CHANNEL_5;
   808b0:	4b0b      	ldr	r3, [pc, #44]	; (808e0 <initPin22+0x3c>)
   808b2:	2405      	movs	r4, #5
   808b4:	601c      	str	r4, [r3, #0]
	PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   808b6:	220b      	movs	r2, #11
   808b8:	605a      	str	r2, [r3, #4]
	PWM_pin_22.polarity = PWM_LOW;
   808ba:	2200      	movs	r2, #0
   808bc:	729a      	strb	r2, [r3, #10]
	PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   808be:	811a      	strh	r2, [r3, #8]
	PWM_pin_22.ul_period = 7500;
   808c0:	f641 514c 	movw	r1, #7500	; 0x1d4c
   808c4:	6119      	str	r1, [r3, #16]
	PWM_pin_22.ul_duty = 0;
   808c6:	60da      	str	r2, [r3, #12]
	
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_22);
   808c8:	4d06      	ldr	r5, [pc, #24]	; (808e4 <initPin22+0x40>)
   808ca:	4628      	mov	r0, r5
   808cc:	4619      	mov	r1, r3
   808ce:	4b06      	ldr	r3, [pc, #24]	; (808e8 <initPin22+0x44>)
   808d0:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_5);
   808d2:	4628      	mov	r0, r5
   808d4:	4621      	mov	r1, r4
   808d6:	4b05      	ldr	r3, [pc, #20]	; (808ec <initPin22+0x48>)
   808d8:	4798      	blx	r3
   808da:	bd38      	pop	{r3, r4, r5, pc}
   808dc:	00082af9 	.word	0x00082af9
   808e0:	20078cb8 	.word	0x20078cb8
   808e4:	40094000 	.word	0x40094000
   808e8:	00080221 	.word	0x00080221
   808ec:	00080349 	.word	0x00080349

000808f0 <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   808f0:	b530      	push	{r4, r5, lr}
   808f2:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   808f4:	2024      	movs	r0, #36	; 0x24
   808f6:	4b0d      	ldr	r3, [pc, #52]	; (8092c <PWM_init+0x3c>)
   808f8:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   808fa:	4c0d      	ldr	r4, [pc, #52]	; (80930 <PWM_init+0x40>)
   808fc:	4620      	mov	r0, r4
   808fe:	2104      	movs	r1, #4
   80900:	4d0c      	ldr	r5, [pc, #48]	; (80934 <PWM_init+0x44>)
   80902:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   80904:	4620      	mov	r0, r4
   80906:	2105      	movs	r1, #5
   80908:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   8090a:	4b0b      	ldr	r3, [pc, #44]	; (80938 <PWM_init+0x48>)
   8090c:	9301      	str	r3, [sp, #4]
   8090e:	2300      	movs	r3, #0
   80910:	9302      	str	r3, [sp, #8]
   80912:	4b0a      	ldr	r3, [pc, #40]	; (8093c <PWM_init+0x4c>)
   80914:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   80916:	4620      	mov	r0, r4
   80918:	a901      	add	r1, sp, #4
   8091a:	4b09      	ldr	r3, [pc, #36]	; (80940 <PWM_init+0x50>)
   8091c:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   8091e:	4b09      	ldr	r3, [pc, #36]	; (80944 <PWM_init+0x54>)
   80920:	4798      	blx	r3
	initPin22();
   80922:	4b09      	ldr	r3, [pc, #36]	; (80948 <PWM_init+0x58>)
   80924:	4798      	blx	r3
	
}
   80926:	b005      	add	sp, #20
   80928:	bd30      	pop	{r4, r5, pc}
   8092a:	bf00      	nop
   8092c:	00082e39 	.word	0x00082e39
   80930:	40094000 	.word	0x40094000
   80934:	00080355 	.word	0x00080355
   80938:	000f4240 	.word	0x000f4240
   8093c:	0501bd00 	.word	0x0501bd00
   80940:	000801e1 	.word	0x000801e1
   80944:	00080859 	.word	0x00080859
   80948:	000808a5 	.word	0x000808a5

0008094c <leftWheel>:
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_5);
}
/* This method changes the duty cycle of PWM signal on pin 9. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void leftWheel(uint32_t duty){
   8094c:	b508      	push	{r3, lr}
	if(duty<800){
   8094e:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80952:	d305      	bcc.n	80960 <leftWheel+0x14>
   80954:	f640 0298 	movw	r2, #2200	; 0x898
   80958:	4290      	cmp	r0, r2
   8095a:	bf38      	it	cc
   8095c:	4602      	movcc	r2, r0
   8095e:	e001      	b.n	80964 <leftWheel+0x18>
		duty=800;
   80960:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_21, duty );
   80964:	4802      	ldr	r0, [pc, #8]	; (80970 <leftWheel+0x24>)
   80966:	4903      	ldr	r1, [pc, #12]	; (80974 <leftWheel+0x28>)
   80968:	4b03      	ldr	r3, [pc, #12]	; (80978 <leftWheel+0x2c>)
   8096a:	4798      	blx	r3
   8096c:	bd08      	pop	{r3, pc}
   8096e:	bf00      	nop
   80970:	40094000 	.word	0x40094000
   80974:	20078ce0 	.word	0x20078ce0
   80978:	00080325 	.word	0x00080325

0008097c <rightWheel>:
}

/* This method changes the duty cycle of PWM signal on pin 8. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void rightWheel(uint32_t duty){
   8097c:	b508      	push	{r3, lr}
	
	if(duty<800){
   8097e:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80982:	d305      	bcc.n	80990 <rightWheel+0x14>
   80984:	f640 0298 	movw	r2, #2200	; 0x898
   80988:	4290      	cmp	r0, r2
   8098a:	bf38      	it	cc
   8098c:	4602      	movcc	r2, r0
   8098e:	e001      	b.n	80994 <rightWheel+0x18>
		duty=800;
   80990:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   80994:	4802      	ldr	r0, [pc, #8]	; (809a0 <rightWheel+0x24>)
   80996:	4903      	ldr	r1, [pc, #12]	; (809a4 <rightWheel+0x28>)
   80998:	4b03      	ldr	r3, [pc, #12]	; (809a8 <rightWheel+0x2c>)
   8099a:	4798      	blx	r3
   8099c:	bd08      	pop	{r3, pc}
   8099e:	bf00      	nop
   809a0:	40094000 	.word	0x40094000
   809a4:	20078cb8 	.word	0x20078cb8
   809a8:	00080325 	.word	0x00080325

000809ac <pin12_edge_handler>:
#include <inttypes.h>
#include "StepCounter_ISR.h"
#include "consoleFunctions.h"

void pin12_edge_handler(const uint32_t id, const uint32_t index)
{
   809ac:	b508      	push	{r3, lr}
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   809ae:	4806      	ldr	r0, [pc, #24]	; (809c8 <pin12_edge_handler+0x1c>)
   809b0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   809b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   809b8:	4b04      	ldr	r3, [pc, #16]	; (809cc <pin12_edge_handler+0x20>)
   809ba:	4798      	blx	r3
   809bc:	b118      	cbz	r0, 809c6 <pin12_edge_handler+0x1a>
		//increase the counter value
		counter_2++;
   809be:	4b04      	ldr	r3, [pc, #16]	; (809d0 <pin12_edge_handler+0x24>)
   809c0:	881a      	ldrh	r2, [r3, #0]
   809c2:	3201      	adds	r2, #1
   809c4:	801a      	strh	r2, [r3, #0]
   809c6:	bd08      	pop	{r3, pc}
   809c8:	400e1200 	.word	0x400e1200
   809cc:	00082a05 	.word	0x00082a05
   809d0:	20078d08 	.word	0x20078d08

000809d4 <pin14_edge_handler>:
	}
	
}

void pin14_edge_handler(const uint32_t id, const uint32_t index)
{
   809d4:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   809d6:	4806      	ldr	r0, [pc, #24]	; (809f0 <pin14_edge_handler+0x1c>)
   809d8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   809dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   809e0:	4b04      	ldr	r3, [pc, #16]	; (809f4 <pin14_edge_handler+0x20>)
   809e2:	4798      	blx	r3
   809e4:	b118      	cbz	r0, 809ee <pin14_edge_handler+0x1a>
		//Increase the counter value
		counter_1++;
   809e6:	4b04      	ldr	r3, [pc, #16]	; (809f8 <pin14_edge_handler+0x24>)
   809e8:	881a      	ldrh	r2, [r3, #0]
   809ea:	3201      	adds	r2, #1
   809ec:	801a      	strh	r2, [r3, #0]
   809ee:	bd08      	pop	{r3, pc}
   809f0:	400e1000 	.word	0x400e1000
   809f4:	00082a05 	.word	0x00082a05
   809f8:	20078d0a 	.word	0x20078d0a

000809fc <attach_interupt>:

/*
* Runs one time when program starts.
*/
void attach_interupt(void)
{
   809fc:	b570      	push	{r4, r5, r6, lr}
   809fe:	b082      	sub	sp, #8

	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   80a00:	200c      	movs	r0, #12
   80a02:	4c1a      	ldr	r4, [pc, #104]	; (80a6c <attach_interupt+0x70>)
   80a04:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);
   80a06:	200d      	movs	r0, #13
   80a08:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   80a0a:	4d19      	ldr	r5, [pc, #100]	; (80a70 <attach_interupt+0x74>)
   80a0c:	4628      	mov	r0, r5
   80a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80a12:	2201      	movs	r2, #1
   80a14:	4e17      	ldr	r6, [pc, #92]	; (80a74 <attach_interupt+0x78>)
   80a16:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   80a18:	4c17      	ldr	r4, [pc, #92]	; (80a78 <attach_interupt+0x7c>)
   80a1a:	4620      	mov	r0, r4
   80a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80a20:	2201      	movs	r2, #1
   80a22:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler pin51
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_RISE_EDGE, pin12_edge_handler);
   80a24:	4b15      	ldr	r3, [pc, #84]	; (80a7c <attach_interupt+0x80>)
   80a26:	9300      	str	r3, [sp, #0]
   80a28:	4628      	mov	r0, r5
   80a2a:	210d      	movs	r1, #13
   80a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80a30:	2370      	movs	r3, #112	; 0x70
   80a32:	4e13      	ldr	r6, [pc, #76]	; (80a80 <attach_interupt+0x84>)
   80a34:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler pin53
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_RISE_EDGE, pin14_edge_handler);
   80a36:	4b13      	ldr	r3, [pc, #76]	; (80a84 <attach_interupt+0x88>)
   80a38:	9300      	str	r3, [sp, #0]
   80a3a:	4620      	mov	r0, r4
   80a3c:	210c      	movs	r1, #12
   80a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80a42:	2370      	movs	r3, #112	; 0x70
   80a44:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   80a46:	4628      	mov	r0, r5
   80a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80a4c:	4d0e      	ldr	r5, [pc, #56]	; (80a88 <attach_interupt+0x8c>)
   80a4e:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   80a50:	4620      	mov	r0, r4
   80a52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80a56:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80a58:	4b0c      	ldr	r3, [pc, #48]	; (80a8c <attach_interupt+0x90>)
   80a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80a5e:	601a      	str	r2, [r3, #0]
   80a60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80a64:	601a      	str	r2, [r3, #0]
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);
	// 	NVIC_EnableIRQ((IRQn_Type) ID_USART1);
	// 	usart_enable_interrupt(CONF_UART, UART_IER_RXRDY);

}
   80a66:	b002      	add	sp, #8
   80a68:	bd70      	pop	{r4, r5, r6, pc}
   80a6a:	bf00      	nop
   80a6c:	00082e39 	.word	0x00082e39
   80a70:	400e1200 	.word	0x400e1200
   80a74:	00082a5d 	.word	0x00082a5d
   80a78:	400e1000 	.word	0x400e1000
   80a7c:	000809ad 	.word	0x000809ad
   80a80:	00082cc5 	.word	0x00082cc5
   80a84:	000809d5 	.word	0x000809d5
   80a88:	00082ae9 	.word	0x00082ae9
   80a8c:	e000e100 	.word	0xe000e100

00080a90 <reset_Counter>:
// 		c_counter = 0;
// 	}
// }

void reset_Counter(void){
	counter_1=0;
   80a90:	2300      	movs	r3, #0
   80a92:	4a02      	ldr	r2, [pc, #8]	; (80a9c <reset_Counter+0xc>)
   80a94:	8013      	strh	r3, [r2, #0]
	counter_2=0;
   80a96:	4a02      	ldr	r2, [pc, #8]	; (80aa0 <reset_Counter+0x10>)
   80a98:	8013      	strh	r3, [r2, #0]
   80a9a:	4770      	bx	lr
   80a9c:	20078d0a 	.word	0x20078d0a
   80aa0:	20078d08 	.word	0x20078d08

00080aa4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80aa4:	6943      	ldr	r3, [r0, #20]
   80aa6:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80aaa:	bf1d      	ittte	ne
   80aac:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80ab0:	61c1      	strne	r1, [r0, #28]
	return 0;
   80ab2:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80ab4:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80ab6:	4770      	bx	lr

00080ab8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80ab8:	6943      	ldr	r3, [r0, #20]
   80aba:	f013 0f01 	tst.w	r3, #1
   80abe:	d005      	beq.n	80acc <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80ac0:	6983      	ldr	r3, [r0, #24]
   80ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80ac6:	600b      	str	r3, [r1, #0]

	return 0;
   80ac8:	2000      	movs	r0, #0
   80aca:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80acc:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80ace:	4770      	bx	lr

00080ad0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ad4:	460e      	mov	r6, r1
   80ad6:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80ad8:	3801      	subs	r0, #1
   80ada:	2802      	cmp	r0, #2
   80adc:	d80f      	bhi.n	80afe <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80ade:	b192      	cbz	r2, 80b06 <_write+0x36>
   80ae0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80ae2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80b20 <_write+0x50>
   80ae6:	4f0d      	ldr	r7, [pc, #52]	; (80b1c <_write+0x4c>)
   80ae8:	f8d8 0000 	ldr.w	r0, [r8]
   80aec:	5d31      	ldrb	r1, [r6, r4]
   80aee:	683b      	ldr	r3, [r7, #0]
   80af0:	4798      	blx	r3
   80af2:	2800      	cmp	r0, #0
   80af4:	db0a      	blt.n	80b0c <_write+0x3c>
			return -1;
		}
		++nChars;
   80af6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80af8:	42a5      	cmp	r5, r4
   80afa:	d1f5      	bne.n	80ae8 <_write+0x18>
   80afc:	e00a      	b.n	80b14 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80afe:	f04f 30ff 	mov.w	r0, #4294967295
   80b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80b06:	2000      	movs	r0, #0
   80b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80b0c:	f04f 30ff 	mov.w	r0, #4294967295
   80b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80b14:	4620      	mov	r0, r4
	}
	return nChars;
}
   80b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b1a:	bf00      	nop
   80b1c:	20078d0c 	.word	0x20078d0c
   80b20:	20078d10 	.word	0x20078d10

00080b24 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80b24:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80b26:	23ac      	movs	r3, #172	; 0xac
   80b28:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80b2a:	680a      	ldr	r2, [r1, #0]
   80b2c:	684b      	ldr	r3, [r1, #4]
   80b2e:	fbb2 f3f3 	udiv	r3, r2, r3
   80b32:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80b34:	1e5c      	subs	r4, r3, #1
   80b36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80b3a:	4294      	cmp	r4, r2
   80b3c:	d80a      	bhi.n	80b54 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80b3e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80b40:	688b      	ldr	r3, [r1, #8]
   80b42:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80b44:	f240 2302 	movw	r3, #514	; 0x202
   80b48:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80b4c:	2350      	movs	r3, #80	; 0x50
   80b4e:	6003      	str	r3, [r0, #0]

	return 0;
   80b50:	2000      	movs	r0, #0
   80b52:	e000      	b.n	80b56 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80b54:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80b56:	f85d 4b04 	ldr.w	r4, [sp], #4
   80b5a:	4770      	bx	lr

00080b5c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80b5c:	6943      	ldr	r3, [r0, #20]
   80b5e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80b62:	bf1a      	itte	ne
   80b64:	61c1      	strne	r1, [r0, #28]
	return 0;
   80b66:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80b68:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80b6a:	4770      	bx	lr

00080b6c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80b6c:	6943      	ldr	r3, [r0, #20]
   80b6e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80b72:	bf1d      	ittte	ne
   80b74:	6983      	ldrne	r3, [r0, #24]
   80b76:	700b      	strbne	r3, [r1, #0]
	return 0;
   80b78:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80b7a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80b7c:	4770      	bx	lr
   80b7e:	bf00      	nop

00080b80 <move>:
	}
}



void move (void){
   80b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b84:	b089      	sub	sp, #36	; 0x24
	if (distance < 0)
   80b86:	4b84      	ldr	r3, [pc, #528]	; (80d98 <move+0x218>)
   80b88:	681b      	ldr	r3, [r3, #0]
   80b8a:	2b00      	cmp	r3, #0
	{
		direction =-1;
   80b8c:	bfb4      	ite	lt
   80b8e:	f04f 32ff 	movlt.w	r2, #4294967295
	}
	else
	{
		direction =1;
   80b92:	2201      	movge	r2, #1
   80b94:	4b81      	ldr	r3, [pc, #516]	; (80d9c <move+0x21c>)
   80b96:	601a      	str	r2, [r3, #0]
	}

	totMovement = ((counter_1+counter_2)/2);
   80b98:	4b81      	ldr	r3, [pc, #516]	; (80da0 <move+0x220>)
   80b9a:	881d      	ldrh	r5, [r3, #0]
   80b9c:	4b81      	ldr	r3, [pc, #516]	; (80da4 <move+0x224>)
   80b9e:	881e      	ldrh	r6, [r3, #0]
   80ba0:	eb05 0806 	add.w	r8, r5, r6
   80ba4:	ea4f 0868 	mov.w	r8, r8, asr #1
   80ba8:	4c7f      	ldr	r4, [pc, #508]	; (80da8 <move+0x228>)
   80baa:	4640      	mov	r0, r8
   80bac:	47a0      	blx	r4
   80bae:	e9cd 0100 	strd	r0, r1, [sp]
   80bb2:	4b7e      	ldr	r3, [pc, #504]	; (80dac <move+0x22c>)
   80bb4:	e9c3 0100 	strd	r0, r1, [r3]
	measurementValue = (counter_2-counter_1);// Calculates the error differences
   80bb8:	1b70      	subs	r0, r6, r5
   80bba:	47a0      	blx	r4
   80bbc:	4602      	mov	r2, r0
   80bbe:	460b      	mov	r3, r1
   80bc0:	497b      	ldr	r1, [pc, #492]	; (80db0 <move+0x230>)
   80bc2:	e9c1 2300 	strd	r2, r3, [r1]
	proportionalError = (referenceValue - measurementValue); // Calculates p-controller gain
   80bc6:	497b      	ldr	r1, [pc, #492]	; (80db4 <move+0x234>)
   80bc8:	e9d1 4500 	ldrd	r4, r5, [r1]
   80bcc:	4620      	mov	r0, r4
   80bce:	4629      	mov	r1, r5
   80bd0:	4e79      	ldr	r6, [pc, #484]	; (80db8 <move+0x238>)
   80bd2:	47b0      	blx	r6
   80bd4:	4606      	mov	r6, r0
   80bd6:	460f      	mov	r7, r1
   80bd8:	4b78      	ldr	r3, [pc, #480]	; (80dbc <move+0x23c>)
   80bda:	e9c3 6700 	strd	r6, r7, [r3]
	if ((referenceValue > 0) && (proportionalError < 0))
   80bde:	4620      	mov	r0, r4
   80be0:	4629      	mov	r1, r5
   80be2:	2200      	movs	r2, #0
   80be4:	2300      	movs	r3, #0
   80be6:	4c76      	ldr	r4, [pc, #472]	; (80dc0 <move+0x240>)
   80be8:	47a0      	blx	r4
   80bea:	b1e0      	cbz	r0, 80c26 <move+0xa6>
   80bec:	4630      	mov	r0, r6
   80bee:	4639      	mov	r1, r7
   80bf0:	2200      	movs	r2, #0
   80bf2:	2300      	movs	r3, #0
   80bf4:	4c73      	ldr	r4, [pc, #460]	; (80dc4 <move+0x244>)
   80bf6:	47a0      	blx	r4
   80bf8:	b1a8      	cbz	r0, 80c26 <move+0xa6>
	{
		referenceValue = 0;
   80bfa:	2200      	movs	r2, #0
   80bfc:	2300      	movs	r3, #0
   80bfe:	496d      	ldr	r1, [pc, #436]	; (80db4 <move+0x234>)
   80c00:	e9c1 2300 	strd	r2, r3, [r1]
		proportionalError=0;
   80c04:	496d      	ldr	r1, [pc, #436]	; (80dbc <move+0x23c>)
   80c06:	e9c1 2300 	strd	r2, r3, [r1]
		sum=0;
   80c0a:	2000      	movs	r0, #0
   80c0c:	496e      	ldr	r1, [pc, #440]	; (80dc8 <move+0x248>)
   80c0e:	6008      	str	r0, [r1, #0]
		prevD=0;
   80c10:	496e      	ldr	r1, [pc, #440]	; (80dcc <move+0x24c>)
   80c12:	e9c1 2300 	strd	r2, r3, [r1]
		counter_1 = (counter_1+counter_2)/2;
   80c16:	fa1f f888 	uxth.w	r8, r8
   80c1a:	4b61      	ldr	r3, [pc, #388]	; (80da0 <move+0x220>)
   80c1c:	f8a3 8000 	strh.w	r8, [r3]
		counter_2=counter_1;
   80c20:	4b60      	ldr	r3, [pc, #384]	; (80da4 <move+0x224>)
   80c22:	f8a3 8000 	strh.w	r8, [r3]
	}
	if ((referenceValue < 0) && (proportionalError > 0))
   80c26:	4b63      	ldr	r3, [pc, #396]	; (80db4 <move+0x234>)
   80c28:	e9d3 0100 	ldrd	r0, r1, [r3]
   80c2c:	2200      	movs	r2, #0
   80c2e:	2300      	movs	r3, #0
   80c30:	4c64      	ldr	r4, [pc, #400]	; (80dc4 <move+0x244>)
   80c32:	47a0      	blx	r4
   80c34:	b1e8      	cbz	r0, 80c72 <move+0xf2>
   80c36:	4b61      	ldr	r3, [pc, #388]	; (80dbc <move+0x23c>)
   80c38:	e9d3 0100 	ldrd	r0, r1, [r3]
   80c3c:	2200      	movs	r2, #0
   80c3e:	2300      	movs	r3, #0
   80c40:	4c5f      	ldr	r4, [pc, #380]	; (80dc0 <move+0x240>)
   80c42:	47a0      	blx	r4
   80c44:	b1a8      	cbz	r0, 80c72 <move+0xf2>
	{
		referenceValue = 0;
   80c46:	2200      	movs	r2, #0
   80c48:	2300      	movs	r3, #0
   80c4a:	495a      	ldr	r1, [pc, #360]	; (80db4 <move+0x234>)
   80c4c:	e9c1 2300 	strd	r2, r3, [r1]
		proportionalError=0;
   80c50:	495a      	ldr	r1, [pc, #360]	; (80dbc <move+0x23c>)
   80c52:	e9c1 2300 	strd	r2, r3, [r1]
		sum=0;
   80c56:	2000      	movs	r0, #0
   80c58:	495b      	ldr	r1, [pc, #364]	; (80dc8 <move+0x248>)
   80c5a:	6008      	str	r0, [r1, #0]
		prevD=0;
   80c5c:	495b      	ldr	r1, [pc, #364]	; (80dcc <move+0x24c>)
   80c5e:	e9c1 2300 	strd	r2, r3, [r1]
		counter_1 = (counter_1+counter_2)/2;
   80c62:	494f      	ldr	r1, [pc, #316]	; (80da0 <move+0x220>)
   80c64:	8808      	ldrh	r0, [r1, #0]
   80c66:	4b4f      	ldr	r3, [pc, #316]	; (80da4 <move+0x224>)
   80c68:	881a      	ldrh	r2, [r3, #0]
   80c6a:	4402      	add	r2, r0
   80c6c:	0852      	lsrs	r2, r2, #1
   80c6e:	800a      	strh	r2, [r1, #0]
		counter_2=counter_1;
   80c70:	801a      	strh	r2, [r3, #0]
	}
	sum = (sum + prevD);
   80c72:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80dcc <move+0x24c>
   80c76:	e9d9 6700 	ldrd	r6, r7, [r9]
   80c7a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   80c7e:	4d52      	ldr	r5, [pc, #328]	; (80dc8 <move+0x248>)
   80c80:	4c49      	ldr	r4, [pc, #292]	; (80da8 <move+0x228>)
   80c82:	6828      	ldr	r0, [r5, #0]
   80c84:	47a0      	blx	r4
   80c86:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80e08 <move+0x288>
   80c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80c8e:	47c0      	blx	r8
   80c90:	4b4f      	ldr	r3, [pc, #316]	; (80dd0 <move+0x250>)
   80c92:	4798      	blx	r3
   80c94:	6028      	str	r0, [r5, #0]
	integral= (sum * (dT/Ti));
   80c96:	4b4f      	ldr	r3, [pc, #316]	; (80dd4 <move+0x254>)
   80c98:	e9d3 6700 	ldrd	r6, r7, [r3]
   80c9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   80ca0:	47a0      	blx	r4
   80ca2:	4604      	mov	r4, r0
   80ca4:	460d      	mov	r5, r1
   80ca6:	4e4c      	ldr	r6, [pc, #304]	; (80dd8 <move+0x258>)
   80ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   80cac:	4b4b      	ldr	r3, [pc, #300]	; (80ddc <move+0x25c>)
   80cae:	e9d3 2300 	ldrd	r2, r3, [r3]
   80cb2:	47b0      	blx	r6
   80cb4:	4602      	mov	r2, r0
   80cb6:	460b      	mov	r3, r1
   80cb8:	4f49      	ldr	r7, [pc, #292]	; (80de0 <move+0x260>)
   80cba:	4620      	mov	r0, r4
   80cbc:	4629      	mov	r1, r5
   80cbe:	47b8      	blx	r7
   80cc0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   80cc4:	4b47      	ldr	r3, [pc, #284]	; (80de4 <move+0x264>)
   80cc6:	e9c3 0100 	strd	r0, r1, [r3]
	derivate = ((Td/dT) * (proportionalError-prevD));
   80cca:	4b3c      	ldr	r3, [pc, #240]	; (80dbc <move+0x23c>)
   80ccc:	e9d3 ab00 	ldrd	sl, fp, [r3]
   80cd0:	4b45      	ldr	r3, [pc, #276]	; (80de8 <move+0x268>)
   80cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
   80cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   80cda:	47b0      	blx	r6
   80cdc:	4604      	mov	r4, r0
   80cde:	460d      	mov	r5, r1
   80ce0:	4650      	mov	r0, sl
   80ce2:	4659      	mov	r1, fp
   80ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80ce8:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 80db8 <move+0x238>
   80cec:	47e0      	blx	ip
   80cee:	4602      	mov	r2, r0
   80cf0:	460b      	mov	r3, r1
   80cf2:	4620      	mov	r0, r4
   80cf4:	4629      	mov	r1, r5
   80cf6:	47b8      	blx	r7
   80cf8:	4604      	mov	r4, r0
   80cfa:	460d      	mov	r5, r1
   80cfc:	4b3b      	ldr	r3, [pc, #236]	; (80dec <move+0x26c>)
   80cfe:	e9c3 4500 	strd	r4, r5, [r3]
	controlValue =(K*(proportionalError+integral+ derivate)); //PID
   80d02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   80d06:	4652      	mov	r2, sl
   80d08:	465b      	mov	r3, fp
   80d0a:	47c0      	blx	r8
   80d0c:	4602      	mov	r2, r0
   80d0e:	460b      	mov	r3, r1
   80d10:	4620      	mov	r0, r4
   80d12:	4629      	mov	r1, r5
   80d14:	47c0      	blx	r8
   80d16:	4b36      	ldr	r3, [pc, #216]	; (80df0 <move+0x270>)
   80d18:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d1c:	47b8      	blx	r7
   80d1e:	4604      	mov	r4, r0
   80d20:	460d      	mov	r5, r1
   80d22:	4b34      	ldr	r3, [pc, #208]	; (80df4 <move+0x274>)
   80d24:	e9c3 4500 	strd	r4, r5, [r3]
	prevD=proportionalError;
   80d28:	e9c9 ab00 	strd	sl, fp, [r9]
	//	Check if almost reached the destination to slow down and make a smoother brake
	if (((totMovement/totalPulses)>= 0.90) || ((totMovement/totalPulses)<= 0.05))
   80d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
   80d30:	4b31      	ldr	r3, [pc, #196]	; (80df8 <move+0x278>)
   80d32:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d36:	47b0      	blx	r6
   80d38:	4606      	mov	r6, r0
   80d3a:	460f      	mov	r7, r1
   80d3c:	a312      	add	r3, pc, #72	; (adr r3, 80d88 <move+0x208>)
   80d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d42:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80e0c <move+0x28c>
   80d46:	47e0      	blx	ip
   80d48:	b938      	cbnz	r0, 80d5a <move+0x1da>
   80d4a:	4630      	mov	r0, r6
   80d4c:	4639      	mov	r1, r7
   80d4e:	a310      	add	r3, pc, #64	; (adr r3, 80d90 <move+0x210>)
   80d50:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d54:	4e29      	ldr	r6, [pc, #164]	; (80dfc <move+0x27c>)
   80d56:	47b0      	blx	r6
   80d58:	b118      	cbz	r0, 80d62 <move+0x1e2>
	{
		speed = 130;
   80d5a:	2282      	movs	r2, #130	; 0x82
   80d5c:	4b28      	ldr	r3, [pc, #160]	; (80e00 <move+0x280>)
   80d5e:	801a      	strh	r2, [r3, #0]
   80d60:	e002      	b.n	80d68 <move+0x1e8>
	}
	//Else same speed set
	else
	{
		speed = 200;
   80d62:	22c8      	movs	r2, #200	; 0xc8
   80d64:	4b26      	ldr	r3, [pc, #152]	; (80e00 <move+0x280>)
   80d66:	801a      	strh	r2, [r3, #0]
	}
	if (controlValue>70)
   80d68:	4620      	mov	r0, r4
   80d6a:	4629      	mov	r1, r5
   80d6c:	2200      	movs	r2, #0
   80d6e:	4b25      	ldr	r3, [pc, #148]	; (80e04 <move+0x284>)
   80d70:	4e13      	ldr	r6, [pc, #76]	; (80dc0 <move+0x240>)
   80d72:	47b0      	blx	r6
   80d74:	2800      	cmp	r0, #0
   80d76:	d04b      	beq.n	80e10 <move+0x290>
	{
		controlValue=70;
   80d78:	2200      	movs	r2, #0
   80d7a:	4b22      	ldr	r3, [pc, #136]	; (80e04 <move+0x284>)
   80d7c:	491d      	ldr	r1, [pc, #116]	; (80df4 <move+0x274>)
   80d7e:	e9c1 2300 	strd	r2, r3, [r1]
   80d82:	e051      	b.n	80e28 <move+0x2a8>
   80d84:	f3af 8000 	nop.w
   80d88:	cccccccd 	.word	0xcccccccd
   80d8c:	3feccccc 	.word	0x3feccccc
   80d90:	9999999a 	.word	0x9999999a
   80d94:	3fa99999 	.word	0x3fa99999
   80d98:	20070a18 	.word	0x20070a18
   80d9c:	20070140 	.word	0x20070140
   80da0:	20078d0a 	.word	0x20078d0a
   80da4:	20078d08 	.word	0x20078d08
   80da8:	000839cd 	.word	0x000839cd
   80dac:	20070a38 	.word	0x20070a38
   80db0:	20070a10 	.word	0x20070a10
   80db4:	20070a48 	.word	0x20070a48
   80db8:	00083731 	.word	0x00083731
   80dbc:	20070a28 	.word	0x20070a28
   80dc0:	00083fb9 	.word	0x00083fb9
   80dc4:	00083f7d 	.word	0x00083f7d
   80dc8:	20070a50 	.word	0x20070a50
   80dcc:	20070a30 	.word	0x20070a30
   80dd0:	00083fcd 	.word	0x00083fcd
   80dd4:	20070148 	.word	0x20070148
   80dd8:	00083ced 	.word	0x00083ced
   80ddc:	20070138 	.word	0x20070138
   80de0:	00083a99 	.word	0x00083a99
   80de4:	20070a58 	.word	0x20070a58
   80de8:	20070130 	.word	0x20070130
   80dec:	20070a20 	.word	0x20070a20
   80df0:	20070158 	.word	0x20070158
   80df4:	20070a00 	.word	0x20070a00
   80df8:	20078d88 	.word	0x20078d88
   80dfc:	00083f91 	.word	0x00083f91
   80e00:	20070150 	.word	0x20070150
   80e04:	40518000 	.word	0x40518000
   80e08:	00083735 	.word	0x00083735
   80e0c:	00083fa5 	.word	0x00083fa5
	}
	else if (controlValue<-70)
   80e10:	4620      	mov	r0, r4
   80e12:	4629      	mov	r1, r5
   80e14:	2200      	movs	r2, #0
   80e16:	4b26      	ldr	r3, [pc, #152]	; (80eb0 <move+0x330>)
   80e18:	4c26      	ldr	r4, [pc, #152]	; (80eb4 <move+0x334>)
   80e1a:	47a0      	blx	r4
   80e1c:	b120      	cbz	r0, 80e28 <move+0x2a8>
	{
		controlValue=-70;
   80e1e:	2200      	movs	r2, #0
   80e20:	4b23      	ldr	r3, [pc, #140]	; (80eb0 <move+0x330>)
   80e22:	4925      	ldr	r1, [pc, #148]	; (80eb8 <move+0x338>)
   80e24:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (controlValue)
	{
	}
	rightWheel(1500 + ((speed+controlValue)*direction));//New speed for rightWheel
   80e28:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 80ed4 <move+0x354>
   80e2c:	4e23      	ldr	r6, [pc, #140]	; (80ebc <move+0x33c>)
   80e2e:	f8bb 0000 	ldrh.w	r0, [fp]
   80e32:	47b0      	blx	r6
   80e34:	f8df a080 	ldr.w	sl, [pc, #128]	; 80eb8 <move+0x338>
   80e38:	4f21      	ldr	r7, [pc, #132]	; (80ec0 <move+0x340>)
   80e3a:	e9da 2300 	ldrd	r2, r3, [sl]
   80e3e:	47b8      	blx	r7
   80e40:	4604      	mov	r4, r0
   80e42:	460d      	mov	r5, r1
   80e44:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80ed8 <move+0x358>
   80e48:	f8d9 0000 	ldr.w	r0, [r9]
   80e4c:	47b0      	blx	r6
   80e4e:	4602      	mov	r2, r0
   80e50:	460b      	mov	r3, r1
   80e52:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80edc <move+0x35c>
   80e56:	4620      	mov	r0, r4
   80e58:	4629      	mov	r1, r5
   80e5a:	47c0      	blx	r8
   80e5c:	a312      	add	r3, pc, #72	; (adr r3, 80ea8 <move+0x328>)
   80e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80e62:	47b8      	blx	r7
   80e64:	4c17      	ldr	r4, [pc, #92]	; (80ec4 <move+0x344>)
   80e66:	47a0      	blx	r4
   80e68:	4b17      	ldr	r3, [pc, #92]	; (80ec8 <move+0x348>)
   80e6a:	4798      	blx	r3
	leftWheel( 1500 + ((speed-controlValue)*direction));//New speed for leftWheel
   80e6c:	f8bb 0000 	ldrh.w	r0, [fp]
   80e70:	47b0      	blx	r6
   80e72:	e9da 2300 	ldrd	r2, r3, [sl]
   80e76:	4d15      	ldr	r5, [pc, #84]	; (80ecc <move+0x34c>)
   80e78:	47a8      	blx	r5
   80e7a:	4682      	mov	sl, r0
   80e7c:	468b      	mov	fp, r1
   80e7e:	f8d9 0000 	ldr.w	r0, [r9]
   80e82:	47b0      	blx	r6
   80e84:	4602      	mov	r2, r0
   80e86:	460b      	mov	r3, r1
   80e88:	4650      	mov	r0, sl
   80e8a:	4659      	mov	r1, fp
   80e8c:	47c0      	blx	r8
   80e8e:	a306      	add	r3, pc, #24	; (adr r3, 80ea8 <move+0x328>)
   80e90:	e9d3 2300 	ldrd	r2, r3, [r3]
   80e94:	47b8      	blx	r7
   80e96:	47a0      	blx	r4
   80e98:	4b0d      	ldr	r3, [pc, #52]	; (80ed0 <move+0x350>)
   80e9a:	4798      	blx	r3
	
}
   80e9c:	b009      	add	sp, #36	; 0x24
   80e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80ea2:	bf00      	nop
   80ea4:	f3af 8000 	nop.w
   80ea8:	00000000 	.word	0x00000000
   80eac:	40977000 	.word	0x40977000
   80eb0:	c0518000 	.word	0xc0518000
   80eb4:	00083f7d 	.word	0x00083f7d
   80eb8:	20070a00 	.word	0x20070a00
   80ebc:	000839cd 	.word	0x000839cd
   80ec0:	00083735 	.word	0x00083735
   80ec4:	0008401d 	.word	0x0008401d
   80ec8:	0008097d 	.word	0x0008097d
   80ecc:	00083731 	.word	0x00083731
   80ed0:	0008094d 	.word	0x0008094d
   80ed4:	20070150 	.word	0x20070150
   80ed8:	20070140 	.word	0x20070140
   80edc:	00083a99 	.word	0x00083a99

00080ee0 <task_move>:
int check =0;
typedef enum {START, BEFORE_ROTATE,ROTATE,MOVE,CLOSE,NAVI} states;
states currentState = START;
states nextState ;
void task_move(void *pvParameters)
{
   80ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ee4:	b08b      	sub	sp, #44	; 0x2c
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 100; //Time given for the task to complete work...
	xLastWakeTime = xTaskGetTickCount(); // Initialize the xLastWakeTime variable with the current time.
   80ee6:	4b64      	ldr	r3, [pc, #400]	; (81078 <task_move+0x198>)
   80ee8:	4798      	blx	r3
   80eea:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
				//  stop wheels
				rightWheel(1500);
				leftWheel(1500);
				reset_Counter();
				angle=0;
				totalPulses=0;
   80eee:	2400      	movs	r4, #0
   80ef0:	2500      	movs	r5, #0
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 100; //Time given for the task to complete work...
	xLastWakeTime = xTaskGetTickCount(); // Initialize the xLastWakeTime variable with the current time.
	while (1)
	{
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement); // Wait for the next cycle after have finished everything
   80ef2:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   80ef6:	2164      	movs	r1, #100	; 0x64
   80ef8:	4b60      	ldr	r3, [pc, #384]	; (8107c <task_move+0x19c>)
   80efa:	4798      	blx	r3
		
		switch (currentState)
   80efc:	4b60      	ldr	r3, [pc, #384]	; (81080 <task_move+0x1a0>)
   80efe:	781b      	ldrb	r3, [r3, #0]
   80f00:	2b05      	cmp	r3, #5
   80f02:	f200 8191 	bhi.w	81228 <task_move+0x348>
   80f06:	e8df f013 	tbh	[pc, r3, lsl #1]
   80f0a:	0006      	.short	0x0006
   80f0c:	014e0126 	.word	0x014e0126
   80f10:	018c00d5 	.word	0x018c00d5
   80f14:	007a      	.short	0x007a
		{
			/************************************************************************/
			/*                                                                      */
			/************************************************************************/
			case START:
			printf("START");
   80f16:	485b      	ldr	r0, [pc, #364]	; (81084 <task_move+0x1a4>)
   80f18:	4b5b      	ldr	r3, [pc, #364]	; (81088 <task_move+0x1a8>)
   80f1a:	4798      	blx	r3
			step++;
   80f1c:	4a5b      	ldr	r2, [pc, #364]	; (8108c <task_move+0x1ac>)
   80f1e:	6813      	ldr	r3, [r2, #0]
   80f20:	3301      	adds	r3, #1
   80f22:	6013      	str	r3, [r2, #0]
			if (step==10)
   80f24:	2b0a      	cmp	r3, #10
   80f26:	d10c      	bne.n	80f42 <task_move+0x62>
			{
				coord.targetX=coord.objectA[0];
   80f28:	4959      	ldr	r1, [pc, #356]	; (81090 <task_move+0x1b0>)
   80f2a:	e9d1 230c 	ldrd	r2, r3, [r1, #48]	; 0x30
   80f2e:	e9c1 2308 	strd	r2, r3, [r1, #32]
				coord.targetY=coord.objectA[1];
   80f32:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
   80f36:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				nextState=NAVI;
   80f3a:	2205      	movs	r2, #5
   80f3c:	4b55      	ldr	r3, [pc, #340]	; (81094 <task_move+0x1b4>)
   80f3e:	701a      	strb	r2, [r3, #0]
   80f40:	e172      	b.n	81228 <task_move+0x348>
			}
			else if (step==20)
   80f42:	2b14      	cmp	r3, #20
   80f44:	d11c      	bne.n	80f80 <task_move+0xa0>
			{
				coord.lastX=coord.presentX;
   80f46:	4952      	ldr	r1, [pc, #328]	; (81090 <task_move+0x1b0>)
   80f48:	e9d1 2300 	ldrd	r2, r3, [r1]
   80f4c:	e9c1 2304 	strd	r2, r3, [r1, #16]
				coord.lastY=coord.presentY;
   80f50:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   80f54:	e9c1 2306 	strd	r2, r3, [r1, #24]
				coord.presentX=coord.objectA[0];
   80f58:	e9d1 230c 	ldrd	r2, r3, [r1, #48]	; 0x30
   80f5c:	e9c1 2300 	strd	r2, r3, [r1]
				coord.presentY=coord.objectA[1];
   80f60:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
   80f64:	e9c1 2302 	strd	r2, r3, [r1, #8]
				coord.targetX=coord.objectB[0];
   80f68:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
   80f6c:	e9c1 2308 	strd	r2, r3, [r1, #32]
				coord.targetY=coord.objectB[1];
   80f70:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
   80f74:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				nextState=NAVI;
   80f78:	2205      	movs	r2, #5
   80f7a:	4b46      	ldr	r3, [pc, #280]	; (81094 <task_move+0x1b4>)
   80f7c:	701a      	strb	r2, [r3, #0]
   80f7e:	e153      	b.n	81228 <task_move+0x348>
			}
			else if (step==30)
   80f80:	2b1e      	cmp	r3, #30
   80f82:	d11c      	bne.n	80fbe <task_move+0xde>
			{
				coord.lastX=coord.presentX;
   80f84:	4942      	ldr	r1, [pc, #264]	; (81090 <task_move+0x1b0>)
   80f86:	e9d1 2300 	ldrd	r2, r3, [r1]
   80f8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				coord.lastY=coord.presentY;
   80f8e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   80f92:	e9c1 2306 	strd	r2, r3, [r1, #24]
				coord.presentX=coord.objectB[0];
   80f96:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
   80f9a:	e9c1 2300 	strd	r2, r3, [r1]
				coord.presentY=coord.objectB[1];
   80f9e:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
   80fa2:	e9c1 2302 	strd	r2, r3, [r1, #8]
				coord.targetX=coord.objectC[0];
   80fa6:	e9d1 2314 	ldrd	r2, r3, [r1, #80]	; 0x50
   80faa:	e9c1 2308 	strd	r2, r3, [r1, #32]
				coord.targetY=coord.objectC[1];
   80fae:	e9d1 2316 	ldrd	r2, r3, [r1, #88]	; 0x58
   80fb2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				nextState=NAVI;
   80fb6:	2205      	movs	r2, #5
   80fb8:	4b36      	ldr	r3, [pc, #216]	; (81094 <task_move+0x1b4>)
   80fba:	701a      	strb	r2, [r3, #0]
   80fbc:	e134      	b.n	81228 <task_move+0x348>
			}
			else if (step==40)
   80fbe:	2b28      	cmp	r3, #40	; 0x28
   80fc0:	f040 8132 	bne.w	81228 <task_move+0x348>
			{
				coord.lastX=coord.presentX;
   80fc4:	4932      	ldr	r1, [pc, #200]	; (81090 <task_move+0x1b0>)
   80fc6:	e9d1 2300 	ldrd	r2, r3, [r1]
   80fca:	e9c1 2304 	strd	r2, r3, [r1, #16]
				coord.lastY=coord.presentY;
   80fce:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   80fd2:	e9c1 2306 	strd	r2, r3, [r1, #24]
				coord.presentX=coord.objectC[0];
   80fd6:	e9d1 2314 	ldrd	r2, r3, [r1, #80]	; 0x50
   80fda:	e9c1 2300 	strd	r2, r3, [r1]
				coord.presentY=coord.objectC[1];
   80fde:	e9d1 2316 	ldrd	r2, r3, [r1, #88]	; 0x58
   80fe2:	e9c1 2302 	strd	r2, r3, [r1, #8]
				coord.targetX=coord.objectD[0];
   80fe6:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
   80fea:	e9c1 2308 	strd	r2, r3, [r1, #32]
				coord.targetY=coord.objectD[1];
   80fee:	e9d1 231a 	ldrd	r2, r3, [r1, #104]	; 0x68
   80ff2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				nextState=NAVI;
   80ff6:	2205      	movs	r2, #5
   80ff8:	4b26      	ldr	r3, [pc, #152]	; (81094 <task_move+0x1b4>)
   80ffa:	701a      	strb	r2, [r3, #0]
   80ffc:	e114      	b.n	81228 <task_move+0x348>
			break;
			/************************************************************************/
			/*                                                                      */
			/************************************************************************/
			case NAVI:
			printf("NAVI");
   80ffe:	4826      	ldr	r0, [pc, #152]	; (81098 <task_move+0x1b8>)
   81000:	4f21      	ldr	r7, [pc, #132]	; (81088 <task_move+0x1a8>)
   81002:	47b8      	blx	r7
			angle = calcluteRotationAngle(coord.lastX,coord.lastY,coord.presentX,coord.presentY,coord.targetX,coord.targetY);
   81004:	4e22      	ldr	r6, [pc, #136]	; (81090 <task_move+0x1b0>)
   81006:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   8100a:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
   8100e:	e9d6 ab00 	ldrd	sl, fp, [r6]
   81012:	e9cd ab00 	strd	sl, fp, [sp]
   81016:	e9d6 ab02 	ldrd	sl, fp, [r6, #8]
   8101a:	e9cd ab02 	strd	sl, fp, [sp, #8]
   8101e:	e9d6 ab08 	ldrd	sl, fp, [r6, #32]
   81022:	e9cd ab04 	strd	sl, fp, [sp, #16]
   81026:	e9d6 ab0a 	ldrd	sl, fp, [r6, #40]	; 0x28
   8102a:	e9cd ab06 	strd	sl, fp, [sp, #24]
   8102e:	f8df c078 	ldr.w	ip, [pc, #120]	; 810a8 <task_move+0x1c8>
   81032:	47e0      	blx	ip
   81034:	f8df b074 	ldr.w	fp, [pc, #116]	; 810ac <task_move+0x1cc>
   81038:	47d8      	blx	fp
   8103a:	4601      	mov	r1, r0
   8103c:	4b17      	ldr	r3, [pc, #92]	; (8109c <task_move+0x1bc>)
   8103e:	6018      	str	r0, [r3, #0]
			printf("%d",angle);
   81040:	f8df a06c 	ldr.w	sl, [pc, #108]	; 810b0 <task_move+0x1d0>
   81044:	4650      	mov	r0, sl
   81046:	47b8      	blx	r7
			distance = calculateDistance(coord.presentX,coord.presentY,coord.targetX,coord.targetY);
   81048:	e9d6 0100 	ldrd	r0, r1, [r6]
   8104c:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
   81050:	e9d6 8908 	ldrd	r8, r9, [r6, #32]
   81054:	e9cd 8900 	strd	r8, r9, [sp]
   81058:	e9d6 890a 	ldrd	r8, r9, [r6, #40]	; 0x28
   8105c:	e9cd 8902 	strd	r8, r9, [sp, #8]
   81060:	4e0f      	ldr	r6, [pc, #60]	; (810a0 <task_move+0x1c0>)
   81062:	47b0      	blx	r6
   81064:	47d8      	blx	fp
   81066:	4601      	mov	r1, r0
   81068:	4b0e      	ldr	r3, [pc, #56]	; (810a4 <task_move+0x1c4>)
   8106a:	6018      	str	r0, [r3, #0]
			printf("%d",distance);
   8106c:	4650      	mov	r0, sl
   8106e:	47b8      	blx	r7
			nextState = BEFORE_ROTATE;
   81070:	2201      	movs	r2, #1
   81072:	4b08      	ldr	r3, [pc, #32]	; (81094 <task_move+0x1b4>)
   81074:	701a      	strb	r2, [r3, #0]
			break;
   81076:	e0d7      	b.n	81228 <task_move+0x348>
   81078:	00081ebd 	.word	0x00081ebd
   8107c:	00082111 	.word	0x00082111
   81080:	20070a08 	.word	0x20070a08
   81084:	0008708c 	.word	0x0008708c
   81088:	000840b9 	.word	0x000840b9
   8108c:	20070a40 	.word	0x20070a40
   81090:	20078d18 	.word	0x20078d18
   81094:	20078d90 	.word	0x20078d90
   81098:	00087094 	.word	0x00087094
   8109c:	20070a1c 	.word	0x20070a1c
   810a0:	0008052d 	.word	0x0008052d
   810a4:	20070a18 	.word	0x20070a18
   810a8:	000807b1 	.word	0x000807b1
   810ac:	00083fcd 	.word	0x00083fcd
   810b0:	0008709c 	.word	0x0008709c

			/************************************************************************/
			/*                                                                      */
			/************************************************************************/
			case MOVE:
			printf("MOVE");
   810b4:	4862      	ldr	r0, [pc, #392]	; (81240 <task_move+0x360>)
   810b6:	4b63      	ldr	r3, [pc, #396]	; (81244 <task_move+0x364>)
   810b8:	4798      	blx	r3
// 			if (check==90)
// 			{
// 				angle =-90;
// 				referenceValue = referenceValue - angle/2;
// 			}
			totalPulses = (distance*direction/1.45);
   810ba:	4b63      	ldr	r3, [pc, #396]	; (81248 <task_move+0x368>)
   810bc:	681b      	ldr	r3, [r3, #0]
   810be:	4a63      	ldr	r2, [pc, #396]	; (8124c <task_move+0x36c>)
   810c0:	6810      	ldr	r0, [r2, #0]
   810c2:	fb00 f003 	mul.w	r0, r0, r3
   810c6:	4b62      	ldr	r3, [pc, #392]	; (81250 <task_move+0x370>)
   810c8:	4798      	blx	r3
   810ca:	a35b      	add	r3, pc, #364	; (adr r3, 81238 <task_move+0x358>)
   810cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   810d0:	4e60      	ldr	r6, [pc, #384]	; (81254 <task_move+0x374>)
   810d2:	47b0      	blx	r6
   810d4:	4606      	mov	r6, r0
   810d6:	460f      	mov	r7, r1
   810d8:	4b5f      	ldr	r3, [pc, #380]	; (81258 <task_move+0x378>)
   810da:	e9c3 6700 	strd	r6, r7, [r3]
			if (totMovement+2>=totalPulses)
   810de:	4b5f      	ldr	r3, [pc, #380]	; (8125c <task_move+0x37c>)
   810e0:	e9d3 0100 	ldrd	r0, r1, [r3]
   810e4:	2200      	movs	r2, #0
   810e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   810ea:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 812b8 <task_move+0x3d8>
   810ee:	47e0      	blx	ip
   810f0:	4602      	mov	r2, r0
   810f2:	460b      	mov	r3, r1
   810f4:	4630      	mov	r0, r6
   810f6:	4639      	mov	r1, r7
   810f8:	4e59      	ldr	r6, [pc, #356]	; (81260 <task_move+0x380>)
   810fa:	47b0      	blx	r6
   810fc:	2800      	cmp	r0, #0
   810fe:	d024      	beq.n	8114a <task_move+0x26a>
			{
				rightWheel(1500);//Stop rightWheel
   81100:	f240 50dc 	movw	r0, #1500	; 0x5dc
   81104:	4b57      	ldr	r3, [pc, #348]	; (81264 <task_move+0x384>)
   81106:	4798      	blx	r3
				leftWheel(1500);//Stop leftWheel
   81108:	f240 50dc 	movw	r0, #1500	; 0x5dc
   8110c:	4b56      	ldr	r3, [pc, #344]	; (81268 <task_move+0x388>)
   8110e:	4798      	blx	r3
				controlValue=0;
   81110:	4b56      	ldr	r3, [pc, #344]	; (8126c <task_move+0x38c>)
   81112:	e9c3 4500 	strd	r4, r5, [r3]
				measurementValue=0;
   81116:	4b56      	ldr	r3, [pc, #344]	; (81270 <task_move+0x390>)
   81118:	e9c3 4500 	strd	r4, r5, [r3]
				totMovement=0;
   8111c:	4b4f      	ldr	r3, [pc, #316]	; (8125c <task_move+0x37c>)
   8111e:	e9c3 4500 	strd	r4, r5, [r3]
				proportionalError=0;
   81122:	4b54      	ldr	r3, [pc, #336]	; (81274 <task_move+0x394>)
   81124:	e9c3 4500 	strd	r4, r5, [r3]
				angle=0;
   81128:	2600      	movs	r6, #0
   8112a:	4b53      	ldr	r3, [pc, #332]	; (81278 <task_move+0x398>)
   8112c:	601e      	str	r6, [r3, #0]
				sum=0;
   8112e:	4b53      	ldr	r3, [pc, #332]	; (8127c <task_move+0x39c>)
   81130:	601e      	str	r6, [r3, #0]
				speed = 200;
   81132:	22c8      	movs	r2, #200	; 0xc8
   81134:	4b52      	ldr	r3, [pc, #328]	; (81280 <task_move+0x3a0>)
   81136:	801a      	strh	r2, [r3, #0]
				distance=0;
   81138:	4b43      	ldr	r3, [pc, #268]	; (81248 <task_move+0x368>)
   8113a:	601e      	str	r6, [r3, #0]
				reset_Counter();
   8113c:	4b51      	ldr	r3, [pc, #324]	; (81284 <task_move+0x3a4>)
   8113e:	4798      	blx	r3
				nextState = START;
   81140:	4b51      	ldr	r3, [pc, #324]	; (81288 <task_move+0x3a8>)
   81142:	701e      	strb	r6, [r3, #0]
				wait=0;
   81144:	4b51      	ldr	r3, [pc, #324]	; (8128c <task_move+0x3ac>)
   81146:	601e      	str	r6, [r3, #0]
   81148:	e06e      	b.n	81228 <task_move+0x348>
			}
			else
			{
				move();
   8114a:	4b51      	ldr	r3, [pc, #324]	; (81290 <task_move+0x3b0>)
   8114c:	4798      	blx	r3
				nextState = MOVE;
   8114e:	2203      	movs	r2, #3
   81150:	4b4d      	ldr	r3, [pc, #308]	; (81288 <task_move+0x3a8>)
   81152:	701a      	strb	r2, [r3, #0]
   81154:	e068      	b.n	81228 <task_move+0x348>
			break;
			/************************************************************************/
			/*                                                                      */
			/************************************************************************/
			case BEFORE_ROTATE:
			printf("BEFORE ROTATE");
   81156:	484f      	ldr	r0, [pc, #316]	; (81294 <task_move+0x3b4>)
   81158:	4b3a      	ldr	r3, [pc, #232]	; (81244 <task_move+0x364>)
   8115a:	4798      	blx	r3
			course=1;     // rotation course, 1 to right -1 to left
   8115c:	2201      	movs	r2, #1
   8115e:	4b4e      	ldr	r3, [pc, #312]	; (81298 <task_move+0x3b8>)
   81160:	601a      	str	r2, [r3, #0]
			if (angle<0)
   81162:	4b45      	ldr	r3, [pc, #276]	; (81278 <task_move+0x398>)
   81164:	681b      	ldr	r3, [r3, #0]
   81166:	2b00      	cmp	r3, #0
   81168:	da03      	bge.n	81172 <task_move+0x292>
			{
				course=-1;
   8116a:	f04f 31ff 	mov.w	r1, #4294967295
   8116e:	4a4a      	ldr	r2, [pc, #296]	; (81298 <task_move+0x3b8>)
   81170:	6011      	str	r1, [r2, #0]
			}
			// total number of pulses required for rotation
			totalPulses=((angle*course)/2);
   81172:	4a49      	ldr	r2, [pc, #292]	; (81298 <task_move+0x3b8>)
   81174:	6810      	ldr	r0, [r2, #0]
   81176:	fb00 f003 	mul.w	r0, r0, r3
   8117a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   8117e:	1040      	asrs	r0, r0, #1
   81180:	4b33      	ldr	r3, [pc, #204]	; (81250 <task_move+0x370>)
   81182:	4798      	blx	r3
   81184:	4b34      	ldr	r3, [pc, #208]	; (81258 <task_move+0x378>)
   81186:	e9c3 0100 	strd	r0, r1, [r3]
			rightWheel(1500);
   8118a:	f240 50dc 	movw	r0, #1500	; 0x5dc
   8118e:	4b35      	ldr	r3, [pc, #212]	; (81264 <task_move+0x384>)
   81190:	4798      	blx	r3
			leftWheel(1500);
   81192:	f240 50dc 	movw	r0, #1500	; 0x5dc
   81196:	4b34      	ldr	r3, [pc, #208]	; (81268 <task_move+0x388>)
   81198:	4798      	blx	r3
			reset_Counter();
   8119a:	4b3a      	ldr	r3, [pc, #232]	; (81284 <task_move+0x3a4>)
   8119c:	4798      	blx	r3
			nextState = ROTATE;
   8119e:	2202      	movs	r2, #2
   811a0:	4b39      	ldr	r3, [pc, #228]	; (81288 <task_move+0x3a8>)
   811a2:	701a      	strb	r2, [r3, #0]
			
			break;
   811a4:	e040      	b.n	81228 <task_move+0x348>
			
			/************************************************************************/
			/*                                                                      */
			/************************************************************************/
			case ROTATE:
			printf("ROTATE");
   811a6:	483d      	ldr	r0, [pc, #244]	; (8129c <task_move+0x3bc>)
   811a8:	4b26      	ldr	r3, [pc, #152]	; (81244 <task_move+0x364>)
   811aa:	4798      	blx	r3
			if ((counter_1+counter_2+1) >= totalPulses)
   811ac:	4b3c      	ldr	r3, [pc, #240]	; (812a0 <task_move+0x3c0>)
   811ae:	8818      	ldrh	r0, [r3, #0]
   811b0:	4b3c      	ldr	r3, [pc, #240]	; (812a4 <task_move+0x3c4>)
   811b2:	881b      	ldrh	r3, [r3, #0]
   811b4:	4418      	add	r0, r3
   811b6:	3001      	adds	r0, #1
   811b8:	4b25      	ldr	r3, [pc, #148]	; (81250 <task_move+0x370>)
   811ba:	4798      	blx	r3
   811bc:	4b26      	ldr	r3, [pc, #152]	; (81258 <task_move+0x378>)
   811be:	e9d3 2300 	ldrd	r2, r3, [r3]
   811c2:	4e39      	ldr	r6, [pc, #228]	; (812a8 <task_move+0x3c8>)
   811c4:	47b0      	blx	r6
   811c6:	b1b0      	cbz	r0, 811f6 <task_move+0x316>
			{
				//  stop wheels
				rightWheel(1500);
   811c8:	f240 50dc 	movw	r0, #1500	; 0x5dc
   811cc:	4b25      	ldr	r3, [pc, #148]	; (81264 <task_move+0x384>)
   811ce:	4798      	blx	r3
				leftWheel(1500);
   811d0:	f240 50dc 	movw	r0, #1500	; 0x5dc
   811d4:	4b24      	ldr	r3, [pc, #144]	; (81268 <task_move+0x388>)
   811d6:	4798      	blx	r3
				reset_Counter();
   811d8:	4b2a      	ldr	r3, [pc, #168]	; (81284 <task_move+0x3a4>)
   811da:	4798      	blx	r3
				angle=0;
   811dc:	2200      	movs	r2, #0
   811de:	4b26      	ldr	r3, [pc, #152]	; (81278 <task_move+0x398>)
   811e0:	601a      	str	r2, [r3, #0]
				totalPulses=0;
   811e2:	4b1d      	ldr	r3, [pc, #116]	; (81258 <task_move+0x378>)
   811e4:	e9c3 4500 	strd	r4, r5, [r3]
				totMovement=0;
   811e8:	4b1c      	ldr	r3, [pc, #112]	; (8125c <task_move+0x37c>)
   811ea:	e9c3 4500 	strd	r4, r5, [r3]
				nextState = MOVE;
   811ee:	2203      	movs	r2, #3
   811f0:	4b25      	ldr	r3, [pc, #148]	; (81288 <task_move+0x3a8>)
   811f2:	701a      	strb	r2, [r3, #0]
   811f4:	e018      	b.n	81228 <task_move+0x348>
				
			}
			else
			{
				leftWheel(1500 + ( rotationSpeed*course) );
   811f6:	4f2d      	ldr	r7, [pc, #180]	; (812ac <task_move+0x3cc>)
   811f8:	4e27      	ldr	r6, [pc, #156]	; (81298 <task_move+0x3b8>)
   811fa:	683b      	ldr	r3, [r7, #0]
   811fc:	6832      	ldr	r2, [r6, #0]
   811fe:	fb02 f003 	mul.w	r0, r2, r3
   81202:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   81206:	4b18      	ldr	r3, [pc, #96]	; (81268 <task_move+0x388>)
   81208:	4798      	blx	r3
				rightWheel(1500 - ( rotationSpeed*course) );
   8120a:	683b      	ldr	r3, [r7, #0]
   8120c:	6832      	ldr	r2, [r6, #0]
   8120e:	f240 50dc 	movw	r0, #1500	; 0x5dc
   81212:	fb02 0013 	mls	r0, r2, r3, r0
   81216:	4b13      	ldr	r3, [pc, #76]	; (81264 <task_move+0x384>)
   81218:	4798      	blx	r3
				nextState = ROTATE;
   8121a:	2202      	movs	r2, #2
   8121c:	4b1a      	ldr	r3, [pc, #104]	; (81288 <task_move+0x3a8>)
   8121e:	701a      	strb	r2, [r3, #0]
   81220:	e002      	b.n	81228 <task_move+0x348>
			}
			
			
			break;
			case CLOSE:
			printf("CLOSE");
   81222:	4823      	ldr	r0, [pc, #140]	; (812b0 <task_move+0x3d0>)
   81224:	4b07      	ldr	r3, [pc, #28]	; (81244 <task_move+0x364>)
   81226:	4798      	blx	r3
			
			break;
			
		}
		currentState = nextState;
   81228:	4b17      	ldr	r3, [pc, #92]	; (81288 <task_move+0x3a8>)
   8122a:	781a      	ldrb	r2, [r3, #0]
   8122c:	4b21      	ldr	r3, [pc, #132]	; (812b4 <task_move+0x3d4>)
   8122e:	701a      	strb	r2, [r3, #0]

	}
   81230:	e65f      	b.n	80ef2 <task_move+0x12>
   81232:	bf00      	nop
   81234:	f3af 8000 	nop.w
   81238:	33333333 	.word	0x33333333
   8123c:	3ff73333 	.word	0x3ff73333
   81240:	000870a0 	.word	0x000870a0
   81244:	000840b9 	.word	0x000840b9
   81248:	20070a18 	.word	0x20070a18
   8124c:	20070140 	.word	0x20070140
   81250:	000839cd 	.word	0x000839cd
   81254:	00083ced 	.word	0x00083ced
   81258:	20078d88 	.word	0x20078d88
   8125c:	20070a38 	.word	0x20070a38
   81260:	00083f91 	.word	0x00083f91
   81264:	0008097d 	.word	0x0008097d
   81268:	0008094d 	.word	0x0008094d
   8126c:	20070a00 	.word	0x20070a00
   81270:	20070a10 	.word	0x20070a10
   81274:	20070a28 	.word	0x20070a28
   81278:	20070a1c 	.word	0x20070a1c
   8127c:	20070a50 	.word	0x20070a50
   81280:	20070150 	.word	0x20070150
   81284:	00080a91 	.word	0x00080a91
   81288:	20078d90 	.word	0x20078d90
   8128c:	20070a0c 	.word	0x20070a0c
   81290:	00080b81 	.word	0x00080b81
   81294:	000870a8 	.word	0x000870a8
   81298:	20078d94 	.word	0x20078d94
   8129c:	000870b8 	.word	0x000870b8
   812a0:	20078d0a 	.word	0x20078d0a
   812a4:	20078d08 	.word	0x20078d08
   812a8:	00083fa5 	.word	0x00083fa5
   812ac:	20070144 	.word	0x20070144
   812b0:	000870c0 	.word	0x000870c0
   812b4:	20070a08 	.word	0x20070a08
   812b8:	00083735 	.word	0x00083735
   812bc:	f3af 8000 	nop.w

000812c0 <coordinatesInit>:
	leftWheel( 1500 + ((speed-controlValue)*direction));//New speed for leftWheel
	
}


coordinates coordinatesInit (void){
   812c0:	b470      	push	{r4, r5, r6}
   812c2:	4606      	mov	r6, r0
	coord.presentX = 0;
   812c4:	4916      	ldr	r1, [pc, #88]	; (81320 <coordinatesInit+0x60>)
   812c6:	2200      	movs	r2, #0
   812c8:	2300      	movs	r3, #0
   812ca:	e9c1 2300 	strd	r2, r3, [r1]
	coord.presentY = 0;
   812ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
	coord.lastX = 0;
   812d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	coord.lastY = -100;
   812d6:	2400      	movs	r4, #0
   812d8:	4d12      	ldr	r5, [pc, #72]	; (81324 <coordinatesInit+0x64>)
   812da:	e9c1 4506 	strd	r4, r5, [r1, #24]

	coord.objectA[0] = 0;
   812de:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	coord.objectA[1] = 100;
   812e2:	2400      	movs	r4, #0
   812e4:	4d10      	ldr	r5, [pc, #64]	; (81328 <coordinatesInit+0x68>)
   812e6:	e9c1 450e 	strd	r4, r5, [r1, #56]	; 0x38

	coord.objectB[0] = 100;
   812ea:	e9c1 4510 	strd	r4, r5, [r1, #64]	; 0x40
	coord.objectB[1] = 200;
   812ee:	2400      	movs	r4, #0
   812f0:	4d0e      	ldr	r5, [pc, #56]	; (8132c <coordinatesInit+0x6c>)
   812f2:	e9c1 4512 	strd	r4, r5, [r1, #72]	; 0x48

	coord.objectC[0] = 0;
   812f6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	coord.objectC[1] = 300;
   812fa:	a507      	add	r5, pc, #28	; (adr r5, 81318 <coordinatesInit+0x58>)
   812fc:	e9d5 4500 	ldrd	r4, r5, [r5]
   81300:	e9c1 4516 	strd	r4, r5, [r1, #88]	; 0x58

	coord.objectD[0] = 0;
   81304:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	coord.objectD[1] = 0;
   81308:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
   8130c:	4630      	mov	r0, r6
   8130e:	bc70      	pop	{r4, r5, r6}
   81310:	4770      	bx	lr
   81312:	bf00      	nop
   81314:	f3af 8000 	nop.w
   81318:	00000000 	.word	0x00000000
   8131c:	4072c000 	.word	0x4072c000
   81320:	20078d18 	.word	0x20078d18
   81324:	c0590000 	.word	0xc0590000
   81328:	40590000 	.word	0x40590000
   8132c:	40690000 	.word	0x40690000

00081330 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   81330:	f100 0308 	add.w	r3, r0, #8
   81334:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   81336:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8133a:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   8133c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8133e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   81340:	2300      	movs	r3, #0
   81342:	6003      	str	r3, [r0, #0]
   81344:	4770      	bx	lr
   81346:	bf00      	nop

00081348 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   81348:	2300      	movs	r3, #0
   8134a:	6103      	str	r3, [r0, #16]
   8134c:	4770      	bx	lr
   8134e:	bf00      	nop

00081350 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   81350:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   81352:	685a      	ldr	r2, [r3, #4]
   81354:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81356:	6842      	ldr	r2, [r0, #4]
   81358:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8135a:	685a      	ldr	r2, [r3, #4]
   8135c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8135e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81360:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81362:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81364:	6803      	ldr	r3, [r0, #0]
   81366:	3301      	adds	r3, #1
   81368:	6003      	str	r3, [r0, #0]
   8136a:	4770      	bx	lr

0008136c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   8136c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8136e:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   81370:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81374:	429c      	cmp	r4, r3
   81376:	d101      	bne.n	8137c <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   81378:	6903      	ldr	r3, [r0, #16]
   8137a:	e00c      	b.n	81396 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8137c:	f100 0308 	add.w	r3, r0, #8
   81380:	68c2      	ldr	r2, [r0, #12]
   81382:	8812      	ldrh	r2, [r2, #0]
   81384:	b292      	uxth	r2, r2
   81386:	4294      	cmp	r4, r2
   81388:	d305      	bcc.n	81396 <vListInsert+0x2a>
   8138a:	685b      	ldr	r3, [r3, #4]
   8138c:	685a      	ldr	r2, [r3, #4]
   8138e:	8812      	ldrh	r2, [r2, #0]
   81390:	b292      	uxth	r2, r2
   81392:	4294      	cmp	r4, r2
   81394:	d2f9      	bcs.n	8138a <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   81396:	685a      	ldr	r2, [r3, #4]
   81398:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8139a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8139c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8139e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   813a0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   813a2:	6803      	ldr	r3, [r0, #0]
   813a4:	3301      	adds	r3, #1
   813a6:	6003      	str	r3, [r0, #0]
}
   813a8:	f85d 4b04 	ldr.w	r4, [sp], #4
   813ac:	4770      	bx	lr
   813ae:	bf00      	nop

000813b0 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   813b0:	6843      	ldr	r3, [r0, #4]
   813b2:	6882      	ldr	r2, [r0, #8]
   813b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   813b6:	6883      	ldr	r3, [r0, #8]
   813b8:	6842      	ldr	r2, [r0, #4]
   813ba:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   813bc:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   813be:	685a      	ldr	r2, [r3, #4]
   813c0:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   813c2:	bf04      	itt	eq
   813c4:	6882      	ldreq	r2, [r0, #8]
   813c6:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   813c8:	2200      	movs	r2, #0
   813ca:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   813cc:	681a      	ldr	r2, [r3, #0]
   813ce:	3a01      	subs	r2, #1
   813d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   813d2:	6818      	ldr	r0, [r3, #0]
}
   813d4:	4770      	bx	lr
   813d6:	bf00      	nop

000813d8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   813d8:	4803      	ldr	r0, [pc, #12]	; (813e8 <prvPortStartFirstTask+0x10>)
   813da:	6800      	ldr	r0, [r0, #0]
   813dc:	6800      	ldr	r0, [r0, #0]
   813de:	f380 8808 	msr	MSP, r0
   813e2:	b662      	cpsie	i
   813e4:	df00      	svc	0
   813e6:	bf00      	nop
   813e8:	e000ed08 	.word	0xe000ed08

000813ec <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   813ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   813f0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   813f4:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   813f8:	2300      	movs	r3, #0
   813fa:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   813fe:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   81402:	3840      	subs	r0, #64	; 0x40
   81404:	4770      	bx	lr
   81406:	bf00      	nop

00081408 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81408:	4b06      	ldr	r3, [pc, #24]	; (81424 <pxCurrentTCBConst2>)
   8140a:	6819      	ldr	r1, [r3, #0]
   8140c:	6808      	ldr	r0, [r1, #0]
   8140e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81412:	f380 8809 	msr	PSP, r0
   81416:	f04f 0000 	mov.w	r0, #0
   8141a:	f380 8811 	msr	BASEPRI, r0
   8141e:	f04e 0e0d 	orr.w	lr, lr, #13
   81422:	4770      	bx	lr

00081424 <pxCurrentTCBConst2>:
   81424:	20078b88 	.word	0x20078b88

00081428 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8142c:	4b01      	ldr	r3, [pc, #4]	; (81434 <vPortYieldFromISR+0xc>)
   8142e:	601a      	str	r2, [r3, #0]
   81430:	4770      	bx	lr
   81432:	bf00      	nop
   81434:	e000ed04 	.word	0xe000ed04

00081438 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81438:	f3ef 8011 	mrs	r0, BASEPRI
   8143c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81440:	f381 8811 	msr	BASEPRI, r1
   81444:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   81446:	2000      	movs	r0, #0

00081448 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81448:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   8144a:	4b03      	ldr	r3, [pc, #12]	; (81458 <vPortEnterCritical+0x10>)
   8144c:	4798      	blx	r3
	uxCriticalNesting++;
   8144e:	4b03      	ldr	r3, [pc, #12]	; (8145c <vPortEnterCritical+0x14>)
   81450:	681a      	ldr	r2, [r3, #0]
   81452:	3201      	adds	r2, #1
   81454:	601a      	str	r2, [r3, #0]
   81456:	bd08      	pop	{r3, pc}
   81458:	00081439 	.word	0x00081439
   8145c:	20070160 	.word	0x20070160

00081460 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81460:	f380 8811 	msr	BASEPRI, r0
   81464:	4770      	bx	lr
   81466:	bf00      	nop

00081468 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81468:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   8146a:	4a04      	ldr	r2, [pc, #16]	; (8147c <vPortExitCritical+0x14>)
   8146c:	6813      	ldr	r3, [r2, #0]
   8146e:	3b01      	subs	r3, #1
   81470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   81472:	b913      	cbnz	r3, 8147a <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   81474:	2000      	movs	r0, #0
   81476:	4b02      	ldr	r3, [pc, #8]	; (81480 <vPortExitCritical+0x18>)
   81478:	4798      	blx	r3
   8147a:	bd08      	pop	{r3, pc}
   8147c:	20070160 	.word	0x20070160
   81480:	00081461 	.word	0x00081461

00081484 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81484:	f3ef 8009 	mrs	r0, PSP
   81488:	4b0c      	ldr	r3, [pc, #48]	; (814bc <pxCurrentTCBConst>)
   8148a:	681a      	ldr	r2, [r3, #0]
   8148c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81490:	6010      	str	r0, [r2, #0]
   81492:	e92d 4008 	stmdb	sp!, {r3, lr}
   81496:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8149a:	f380 8811 	msr	BASEPRI, r0
   8149e:	f000 fec5 	bl	8222c <vTaskSwitchContext>
   814a2:	f04f 0000 	mov.w	r0, #0
   814a6:	f380 8811 	msr	BASEPRI, r0
   814aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   814ae:	6819      	ldr	r1, [r3, #0]
   814b0:	6808      	ldr	r0, [r1, #0]
   814b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   814b6:	f380 8809 	msr	PSP, r0
   814ba:	4770      	bx	lr

000814bc <pxCurrentTCBConst>:
   814bc:	20078b88 	.word	0x20078b88

000814c0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   814c0:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   814c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   814c6:	4b05      	ldr	r3, [pc, #20]	; (814dc <SysTick_Handler+0x1c>)
   814c8:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   814ca:	4b05      	ldr	r3, [pc, #20]	; (814e0 <SysTick_Handler+0x20>)
   814cc:	4798      	blx	r3
	{
		vTaskIncrementTick();
   814ce:	4b05      	ldr	r3, [pc, #20]	; (814e4 <SysTick_Handler+0x24>)
   814d0:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   814d2:	2000      	movs	r0, #0
   814d4:	4b04      	ldr	r3, [pc, #16]	; (814e8 <SysTick_Handler+0x28>)
   814d6:	4798      	blx	r3
   814d8:	bd08      	pop	{r3, pc}
   814da:	bf00      	nop
   814dc:	e000ed04 	.word	0xe000ed04
   814e0:	00081439 	.word	0x00081439
   814e4:	00081edd 	.word	0x00081edd
   814e8:	00081461 	.word	0x00081461

000814ec <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   814ec:	4a03      	ldr	r2, [pc, #12]	; (814fc <vPortSetupTimerInterrupt+0x10>)
   814ee:	4b04      	ldr	r3, [pc, #16]	; (81500 <vPortSetupTimerInterrupt+0x14>)
   814f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   814f2:	2207      	movs	r2, #7
   814f4:	3b04      	subs	r3, #4
   814f6:	601a      	str	r2, [r3, #0]
   814f8:	4770      	bx	lr
   814fa:	bf00      	nop
   814fc:	0001481f 	.word	0x0001481f
   81500:	e000e014 	.word	0xe000e014

00081504 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   81504:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   81506:	4b09      	ldr	r3, [pc, #36]	; (8152c <xPortStartScheduler+0x28>)
   81508:	681a      	ldr	r2, [r3, #0]
   8150a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8150e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81510:	681a      	ldr	r2, [r3, #0]
   81512:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   81516:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81518:	4b05      	ldr	r3, [pc, #20]	; (81530 <xPortStartScheduler+0x2c>)
   8151a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   8151c:	2400      	movs	r4, #0
   8151e:	4b05      	ldr	r3, [pc, #20]	; (81534 <xPortStartScheduler+0x30>)
   81520:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   81522:	4b05      	ldr	r3, [pc, #20]	; (81538 <xPortStartScheduler+0x34>)
   81524:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   81526:	4620      	mov	r0, r4
   81528:	bd10      	pop	{r4, pc}
   8152a:	bf00      	nop
   8152c:	e000ed20 	.word	0xe000ed20
   81530:	000814ed 	.word	0x000814ed
   81534:	20070160 	.word	0x20070160
   81538:	000813d9 	.word	0x000813d9

0008153c <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   8153c:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8153e:	4a13      	ldr	r2, [pc, #76]	; (8158c <prvInsertBlockIntoFreeList+0x50>)
   81540:	6813      	ldr	r3, [r2, #0]
   81542:	4283      	cmp	r3, r0
   81544:	d201      	bcs.n	8154a <prvInsertBlockIntoFreeList+0xe>
   81546:	461a      	mov	r2, r3
   81548:	e7fa      	b.n	81540 <prvInsertBlockIntoFreeList+0x4>
   8154a:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8154c:	6854      	ldr	r4, [r2, #4]
   8154e:	1915      	adds	r5, r2, r4
   81550:	4285      	cmp	r5, r0
   81552:	d103      	bne.n	8155c <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   81554:	6868      	ldr	r0, [r5, #4]
   81556:	4404      	add	r4, r0
   81558:	6054      	str	r4, [r2, #4]
   8155a:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   8155c:	6842      	ldr	r2, [r0, #4]
   8155e:	1884      	adds	r4, r0, r2
   81560:	42a3      	cmp	r3, r4
   81562:	d10c      	bne.n	8157e <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   81564:	4c0a      	ldr	r4, [pc, #40]	; (81590 <prvInsertBlockIntoFreeList+0x54>)
   81566:	6824      	ldr	r4, [r4, #0]
   81568:	429c      	cmp	r4, r3
   8156a:	d006      	beq.n	8157a <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   8156c:	685b      	ldr	r3, [r3, #4]
   8156e:	441a      	add	r2, r3
   81570:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   81572:	680b      	ldr	r3, [r1, #0]
   81574:	681b      	ldr	r3, [r3, #0]
   81576:	6003      	str	r3, [r0, #0]
   81578:	e002      	b.n	81580 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8157a:	6003      	str	r3, [r0, #0]
   8157c:	e000      	b.n	81580 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   8157e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81580:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   81582:	bf18      	it	ne
   81584:	6008      	strne	r0, [r1, #0]
	}
}
   81586:	bc30      	pop	{r4, r5}
   81588:	4770      	bx	lr
   8158a:	bf00      	nop
   8158c:	20078a64 	.word	0x20078a64
   81590:	20078a60 	.word	0x20078a60

00081594 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   81594:	b538      	push	{r3, r4, r5, lr}
   81596:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81598:	4b28      	ldr	r3, [pc, #160]	; (8163c <pvPortMalloc+0xa8>)
   8159a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   8159c:	4b28      	ldr	r3, [pc, #160]	; (81640 <pvPortMalloc+0xac>)
   8159e:	681b      	ldr	r3, [r3, #0]
   815a0:	b99b      	cbnz	r3, 815ca <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   815a2:	4a28      	ldr	r2, [pc, #160]	; (81644 <pvPortMalloc+0xb0>)
   815a4:	4b28      	ldr	r3, [pc, #160]	; (81648 <pvPortMalloc+0xb4>)
   815a6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   815a8:	2100      	movs	r1, #0
   815aa:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   815ac:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   815b0:	1898      	adds	r0, r3, r2
   815b2:	4d23      	ldr	r5, [pc, #140]	; (81640 <pvPortMalloc+0xac>)
   815b4:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   815b6:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   815ba:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   815bc:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   815be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   815c0:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   815c2:	4b22      	ldr	r3, [pc, #136]	; (8164c <pvPortMalloc+0xb8>)
   815c4:	681a      	ldr	r2, [r3, #0]
   815c6:	3a10      	subs	r2, #16
   815c8:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   815ca:	2c00      	cmp	r4, #0
   815cc:	d02d      	beq.n	8162a <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   815ce:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   815d2:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   815d6:	bf1c      	itt	ne
   815d8:	f022 0207 	bicne.w	r2, r2, #7
   815dc:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   815de:	1e51      	subs	r1, r2, #1
   815e0:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   815e4:	4299      	cmp	r1, r3
   815e6:	d822      	bhi.n	8162e <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   815e8:	4916      	ldr	r1, [pc, #88]	; (81644 <pvPortMalloc+0xb0>)
   815ea:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   815ec:	6863      	ldr	r3, [r4, #4]
   815ee:	429a      	cmp	r2, r3
   815f0:	d904      	bls.n	815fc <pvPortMalloc+0x68>
   815f2:	6823      	ldr	r3, [r4, #0]
   815f4:	b113      	cbz	r3, 815fc <pvPortMalloc+0x68>
   815f6:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   815f8:	461c      	mov	r4, r3
   815fa:	e7f7      	b.n	815ec <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   815fc:	4b10      	ldr	r3, [pc, #64]	; (81640 <pvPortMalloc+0xac>)
   815fe:	681b      	ldr	r3, [r3, #0]
   81600:	429c      	cmp	r4, r3
   81602:	d016      	beq.n	81632 <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   81604:	680d      	ldr	r5, [r1, #0]
   81606:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81608:	6823      	ldr	r3, [r4, #0]
   8160a:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8160c:	6863      	ldr	r3, [r4, #4]
   8160e:	1a9b      	subs	r3, r3, r2
   81610:	2b20      	cmp	r3, #32
   81612:	d904      	bls.n	8161e <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   81614:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81616:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81618:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   8161a:	4b0d      	ldr	r3, [pc, #52]	; (81650 <pvPortMalloc+0xbc>)
   8161c:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   8161e:	4b0b      	ldr	r3, [pc, #44]	; (8164c <pvPortMalloc+0xb8>)
   81620:	681a      	ldr	r2, [r3, #0]
   81622:	6861      	ldr	r1, [r4, #4]
   81624:	1a52      	subs	r2, r2, r1
   81626:	601a      	str	r2, [r3, #0]
   81628:	e004      	b.n	81634 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   8162a:	2500      	movs	r5, #0
   8162c:	e002      	b.n	81634 <pvPortMalloc+0xa0>
   8162e:	2500      	movs	r5, #0
   81630:	e000      	b.n	81634 <pvPortMalloc+0xa0>
   81632:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   81634:	4b07      	ldr	r3, [pc, #28]	; (81654 <pvPortMalloc+0xc0>)
   81636:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   81638:	4628      	mov	r0, r5
   8163a:	bd38      	pop	{r3, r4, r5, pc}
   8163c:	00081ead 	.word	0x00081ead
   81640:	20078a60 	.word	0x20078a60
   81644:	20078a64 	.word	0x20078a64
   81648:	20070a60 	.word	0x20070a60
   8164c:	20070164 	.word	0x20070164
   81650:	0008153d 	.word	0x0008153d
   81654:	00082009 	.word	0x00082009

00081658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81658:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   8165a:	4604      	mov	r4, r0
   8165c:	b168      	cbz	r0, 8167a <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   8165e:	4b07      	ldr	r3, [pc, #28]	; (8167c <vPortFree+0x24>)
   81660:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   81662:	4b07      	ldr	r3, [pc, #28]	; (81680 <vPortFree+0x28>)
   81664:	6819      	ldr	r1, [r3, #0]
   81666:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   8166a:	440a      	add	r2, r1
   8166c:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   8166e:	f1a4 0010 	sub.w	r0, r4, #16
   81672:	4b04      	ldr	r3, [pc, #16]	; (81684 <vPortFree+0x2c>)
   81674:	4798      	blx	r3
		}
		xTaskResumeAll();
   81676:	4b04      	ldr	r3, [pc, #16]	; (81688 <vPortFree+0x30>)
   81678:	4798      	blx	r3
   8167a:	bd10      	pop	{r4, pc}
   8167c:	00081ead 	.word	0x00081ead
   81680:	20070164 	.word	0x20070164
   81684:	0008153d 	.word	0x0008153d
   81688:	00082009 	.word	0x00082009

0008168c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   8168c:	b510      	push	{r4, lr}
   8168e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   81690:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81692:	b93b      	cbnz	r3, 816a4 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81694:	6803      	ldr	r3, [r0, #0]
   81696:	bb1b      	cbnz	r3, 816e0 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81698:	6840      	ldr	r0, [r0, #4]
   8169a:	4b13      	ldr	r3, [pc, #76]	; (816e8 <prvCopyDataToQueue+0x5c>)
   8169c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8169e:	2300      	movs	r3, #0
   816a0:	6063      	str	r3, [r4, #4]
   816a2:	e01d      	b.n	816e0 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   816a4:	b96a      	cbnz	r2, 816c2 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   816a6:	6880      	ldr	r0, [r0, #8]
   816a8:	461a      	mov	r2, r3
   816aa:	4b10      	ldr	r3, [pc, #64]	; (816ec <prvCopyDataToQueue+0x60>)
   816ac:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   816ae:	68a2      	ldr	r2, [r4, #8]
   816b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   816b2:	4413      	add	r3, r2
   816b4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   816b6:	6862      	ldr	r2, [r4, #4]
   816b8:	4293      	cmp	r3, r2
   816ba:	d311      	bcc.n	816e0 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   816bc:	6823      	ldr	r3, [r4, #0]
   816be:	60a3      	str	r3, [r4, #8]
   816c0:	e00e      	b.n	816e0 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   816c2:	68c0      	ldr	r0, [r0, #12]
   816c4:	461a      	mov	r2, r3
   816c6:	4b09      	ldr	r3, [pc, #36]	; (816ec <prvCopyDataToQueue+0x60>)
   816c8:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   816ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
   816cc:	4252      	negs	r2, r2
   816ce:	68e3      	ldr	r3, [r4, #12]
   816d0:	4413      	add	r3, r2
   816d2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   816d4:	6821      	ldr	r1, [r4, #0]
   816d6:	428b      	cmp	r3, r1
   816d8:	d202      	bcs.n	816e0 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   816da:	6863      	ldr	r3, [r4, #4]
   816dc:	441a      	add	r2, r3
   816de:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   816e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   816e2:	3301      	adds	r3, #1
   816e4:	63a3      	str	r3, [r4, #56]	; 0x38
   816e6:	bd10      	pop	{r4, pc}
   816e8:	00082555 	.word	0x00082555
   816ec:	000840e1 	.word	0x000840e1

000816f0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   816f0:	b538      	push	{r3, r4, r5, lr}
   816f2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   816f4:	6805      	ldr	r5, [r0, #0]
   816f6:	b15d      	cbz	r5, 81710 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   816f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
   816fa:	68c4      	ldr	r4, [r0, #12]
   816fc:	4414      	add	r4, r2
   816fe:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81700:	6840      	ldr	r0, [r0, #4]
   81702:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81704:	bf28      	it	cs
   81706:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81708:	4608      	mov	r0, r1
   8170a:	68d9      	ldr	r1, [r3, #12]
   8170c:	4b01      	ldr	r3, [pc, #4]	; (81714 <prvCopyDataFromQueue+0x24>)
   8170e:	4798      	blx	r3
   81710:	bd38      	pop	{r3, r4, r5, pc}
   81712:	bf00      	nop
   81714:	000840e1 	.word	0x000840e1

00081718 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8171a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   8171c:	4b1d      	ldr	r3, [pc, #116]	; (81794 <prvUnlockQueue+0x7c>)
   8171e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81720:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81722:	2b00      	cmp	r3, #0
   81724:	dd12      	ble.n	8174c <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81726:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81728:	b183      	cbz	r3, 8174c <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8172a:	f104 0624 	add.w	r6, r4, #36	; 0x24
   8172e:	4d1a      	ldr	r5, [pc, #104]	; (81798 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81730:	4f1a      	ldr	r7, [pc, #104]	; (8179c <prvUnlockQueue+0x84>)
   81732:	e001      	b.n	81738 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81734:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81736:	b14b      	cbz	r3, 8174c <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81738:	4630      	mov	r0, r6
   8173a:	47a8      	blx	r5
   8173c:	b100      	cbz	r0, 81740 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   8173e:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81740:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81742:	3b01      	subs	r3, #1
   81744:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81746:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81748:	2b00      	cmp	r3, #0
   8174a:	dcf3      	bgt.n	81734 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   8174c:	f04f 33ff 	mov.w	r3, #4294967295
   81750:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81752:	4b13      	ldr	r3, [pc, #76]	; (817a0 <prvUnlockQueue+0x88>)
   81754:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81756:	4b0f      	ldr	r3, [pc, #60]	; (81794 <prvUnlockQueue+0x7c>)
   81758:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8175a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8175c:	2b00      	cmp	r3, #0
   8175e:	dd12      	ble.n	81786 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81760:	6923      	ldr	r3, [r4, #16]
   81762:	b183      	cbz	r3, 81786 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81764:	f104 0610 	add.w	r6, r4, #16
   81768:	4d0b      	ldr	r5, [pc, #44]	; (81798 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   8176a:	4f0c      	ldr	r7, [pc, #48]	; (8179c <prvUnlockQueue+0x84>)
   8176c:	e001      	b.n	81772 <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8176e:	6923      	ldr	r3, [r4, #16]
   81770:	b14b      	cbz	r3, 81786 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81772:	4630      	mov	r0, r6
   81774:	47a8      	blx	r5
   81776:	b100      	cbz	r0, 8177a <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   81778:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8177a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8177c:	3b01      	subs	r3, #1
   8177e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81780:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81782:	2b00      	cmp	r3, #0
   81784:	dcf3      	bgt.n	8176e <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81786:	f04f 33ff 	mov.w	r3, #4294967295
   8178a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   8178c:	4b04      	ldr	r3, [pc, #16]	; (817a0 <prvUnlockQueue+0x88>)
   8178e:	4798      	blx	r3
   81790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81792:	bf00      	nop
   81794:	00081449 	.word	0x00081449
   81798:	00082369 	.word	0x00082369
   8179c:	000824a1 	.word	0x000824a1
   817a0:	00081469 	.word	0x00081469

000817a4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   817a4:	b538      	push	{r3, r4, r5, lr}
   817a6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   817a8:	4604      	mov	r4, r0
   817aa:	b918      	cbnz	r0, 817b4 <xQueueGenericReset+0x10>
   817ac:	4b16      	ldr	r3, [pc, #88]	; (81808 <xQueueGenericReset+0x64>)
   817ae:	4798      	blx	r3
   817b0:	bf00      	nop
   817b2:	e7fd      	b.n	817b0 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   817b4:	4b15      	ldr	r3, [pc, #84]	; (8180c <xQueueGenericReset+0x68>)
   817b6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   817b8:	6823      	ldr	r3, [r4, #0]
   817ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
   817bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   817be:	fb00 f002 	mul.w	r0, r0, r2
   817c2:	1819      	adds	r1, r3, r0
   817c4:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   817c6:	2100      	movs	r1, #0
   817c8:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   817ca:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   817cc:	1a82      	subs	r2, r0, r2
   817ce:	4413      	add	r3, r2
   817d0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   817d2:	f04f 33ff 	mov.w	r3, #4294967295
   817d6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   817d8:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   817da:	b955      	cbnz	r5, 817f2 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   817dc:	6923      	ldr	r3, [r4, #16]
   817de:	b17b      	cbz	r3, 81800 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   817e0:	f104 0010 	add.w	r0, r4, #16
   817e4:	4b0a      	ldr	r3, [pc, #40]	; (81810 <xQueueGenericReset+0x6c>)
   817e6:	4798      	blx	r3
   817e8:	2801      	cmp	r0, #1
   817ea:	d109      	bne.n	81800 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   817ec:	4b09      	ldr	r3, [pc, #36]	; (81814 <xQueueGenericReset+0x70>)
   817ee:	4798      	blx	r3
   817f0:	e006      	b.n	81800 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   817f2:	f104 0010 	add.w	r0, r4, #16
   817f6:	4d08      	ldr	r5, [pc, #32]	; (81818 <xQueueGenericReset+0x74>)
   817f8:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   817fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
   817fe:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81800:	4b06      	ldr	r3, [pc, #24]	; (8181c <xQueueGenericReset+0x78>)
   81802:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81804:	2001      	movs	r0, #1
   81806:	bd38      	pop	{r3, r4, r5, pc}
   81808:	00081439 	.word	0x00081439
   8180c:	00081449 	.word	0x00081449
   81810:	00082369 	.word	0x00082369
   81814:	00081429 	.word	0x00081429
   81818:	00081331 	.word	0x00081331
   8181c:	00081469 	.word	0x00081469

00081820 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81822:	460d      	mov	r5, r1
   81824:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81826:	4606      	mov	r6, r0
   81828:	b188      	cbz	r0, 8184e <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   8182a:	2050      	movs	r0, #80	; 0x50
   8182c:	4b0e      	ldr	r3, [pc, #56]	; (81868 <xQueueGenericCreate+0x48>)
   8182e:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81830:	4604      	mov	r4, r0
   81832:	b160      	cbz	r0, 8184e <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81834:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81838:	3001      	adds	r0, #1
   8183a:	4b0b      	ldr	r3, [pc, #44]	; (81868 <xQueueGenericCreate+0x48>)
   8183c:	4798      	blx	r3
   8183e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81840:	b940      	cbnz	r0, 81854 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81842:	4620      	mov	r0, r4
   81844:	4b09      	ldr	r3, [pc, #36]	; (8186c <xQueueGenericCreate+0x4c>)
   81846:	4798      	blx	r3
   81848:	e001      	b.n	8184e <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   8184a:	bf00      	nop
   8184c:	e7fd      	b.n	8184a <xQueueGenericCreate+0x2a>
   8184e:	4b08      	ldr	r3, [pc, #32]	; (81870 <xQueueGenericCreate+0x50>)
   81850:	4798      	blx	r3
   81852:	e7fa      	b.n	8184a <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81854:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81856:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81858:	4620      	mov	r0, r4
   8185a:	2101      	movs	r1, #1
   8185c:	4b05      	ldr	r3, [pc, #20]	; (81874 <xQueueGenericCreate+0x54>)
   8185e:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81860:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81864:	4620      	mov	r0, r4
   81866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81868:	00081595 	.word	0x00081595
   8186c:	00081659 	.word	0x00081659
   81870:	00081439 	.word	0x00081439
   81874:	000817a5 	.word	0x000817a5

00081878 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8187c:	b085      	sub	sp, #20
   8187e:	468a      	mov	sl, r1
   81880:	469b      	mov	fp, r3
   81882:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81886:	4604      	mov	r4, r0
   81888:	b918      	cbnz	r0, 81892 <xQueueGenericSend+0x1a>
   8188a:	4b38      	ldr	r3, [pc, #224]	; (8196c <xQueueGenericSend+0xf4>)
   8188c:	4798      	blx	r3
   8188e:	bf00      	nop
   81890:	e7fd      	b.n	8188e <xQueueGenericSend+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81892:	b909      	cbnz	r1, 81898 <xQueueGenericSend+0x20>
   81894:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81896:	b91b      	cbnz	r3, 818a0 <xQueueGenericSend+0x28>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81898:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8189a:	4e35      	ldr	r6, [pc, #212]	; (81970 <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8189c:	4d35      	ldr	r5, [pc, #212]	; (81974 <xQueueGenericSend+0xfc>)
   8189e:	e003      	b.n	818a8 <xQueueGenericSend+0x30>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   818a0:	4b32      	ldr	r3, [pc, #200]	; (8196c <xQueueGenericSend+0xf4>)
   818a2:	4798      	blx	r3
   818a4:	bf00      	nop
   818a6:	e7fd      	b.n	818a4 <xQueueGenericSend+0x2c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   818a8:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   818aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   818ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   818ae:	429a      	cmp	r2, r3
   818b0:	d212      	bcs.n	818d8 <xQueueGenericSend+0x60>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   818b2:	4620      	mov	r0, r4
   818b4:	4651      	mov	r1, sl
   818b6:	465a      	mov	r2, fp
   818b8:	4b2f      	ldr	r3, [pc, #188]	; (81978 <xQueueGenericSend+0x100>)
   818ba:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   818bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   818be:	b13b      	cbz	r3, 818d0 <xQueueGenericSend+0x58>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   818c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   818c4:	4b2d      	ldr	r3, [pc, #180]	; (8197c <xQueueGenericSend+0x104>)
   818c6:	4798      	blx	r3
   818c8:	2801      	cmp	r0, #1
   818ca:	d101      	bne.n	818d0 <xQueueGenericSend+0x58>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   818cc:	4b2c      	ldr	r3, [pc, #176]	; (81980 <xQueueGenericSend+0x108>)
   818ce:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   818d0:	4b28      	ldr	r3, [pc, #160]	; (81974 <xQueueGenericSend+0xfc>)
   818d2:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   818d4:	2001      	movs	r0, #1
   818d6:	e046      	b.n	81966 <xQueueGenericSend+0xee>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   818d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   818dc:	b91b      	cbnz	r3, 818e6 <xQueueGenericSend+0x6e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   818de:	4b25      	ldr	r3, [pc, #148]	; (81974 <xQueueGenericSend+0xfc>)
   818e0:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   818e2:	2000      	movs	r0, #0
   818e4:	e03f      	b.n	81966 <xQueueGenericSend+0xee>
				}
				else if( xEntryTimeSet == pdFALSE )
   818e6:	b91f      	cbnz	r7, 818f0 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   818e8:	a802      	add	r0, sp, #8
   818ea:	4b26      	ldr	r3, [pc, #152]	; (81984 <xQueueGenericSend+0x10c>)
   818ec:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   818ee:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   818f0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   818f2:	4b25      	ldr	r3, [pc, #148]	; (81988 <xQueueGenericSend+0x110>)
   818f4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   818f6:	47b0      	blx	r6
   818f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   818fa:	f1b3 3fff 	cmp.w	r3, #4294967295
   818fe:	bf04      	itt	eq
   81900:	2300      	moveq	r3, #0
   81902:	6463      	streq	r3, [r4, #68]	; 0x44
   81904:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81906:	f1b3 3fff 	cmp.w	r3, #4294967295
   8190a:	bf04      	itt	eq
   8190c:	2300      	moveq	r3, #0
   8190e:	64a3      	streq	r3, [r4, #72]	; 0x48
   81910:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81912:	a802      	add	r0, sp, #8
   81914:	f10d 0106 	add.w	r1, sp, #6
   81918:	4b1c      	ldr	r3, [pc, #112]	; (8198c <xQueueGenericSend+0x114>)
   8191a:	4798      	blx	r3
   8191c:	b9e8      	cbnz	r0, 8195a <xQueueGenericSend+0xe2>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   8191e:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81920:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81924:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81928:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   8192a:	45c1      	cmp	r9, r8
   8192c:	d10f      	bne.n	8194e <xQueueGenericSend+0xd6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8192e:	f104 0010 	add.w	r0, r4, #16
   81932:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81936:	4b16      	ldr	r3, [pc, #88]	; (81990 <xQueueGenericSend+0x118>)
   81938:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   8193a:	4620      	mov	r0, r4
   8193c:	4b15      	ldr	r3, [pc, #84]	; (81994 <xQueueGenericSend+0x11c>)
   8193e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81940:	4b15      	ldr	r3, [pc, #84]	; (81998 <xQueueGenericSend+0x120>)
   81942:	4798      	blx	r3
   81944:	2800      	cmp	r0, #0
   81946:	d1af      	bne.n	818a8 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
   81948:	4b0d      	ldr	r3, [pc, #52]	; (81980 <xQueueGenericSend+0x108>)
   8194a:	4798      	blx	r3
   8194c:	e7ac      	b.n	818a8 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8194e:	4620      	mov	r0, r4
   81950:	4b10      	ldr	r3, [pc, #64]	; (81994 <xQueueGenericSend+0x11c>)
   81952:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81954:	4b10      	ldr	r3, [pc, #64]	; (81998 <xQueueGenericSend+0x120>)
   81956:	4798      	blx	r3
   81958:	e7a6      	b.n	818a8 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   8195a:	4620      	mov	r0, r4
   8195c:	4b0d      	ldr	r3, [pc, #52]	; (81994 <xQueueGenericSend+0x11c>)
   8195e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81960:	4b0d      	ldr	r3, [pc, #52]	; (81998 <xQueueGenericSend+0x120>)
   81962:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81964:	2000      	movs	r0, #0
		}
	}
}
   81966:	b005      	add	sp, #20
   81968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8196c:	00081439 	.word	0x00081439
   81970:	00081449 	.word	0x00081449
   81974:	00081469 	.word	0x00081469
   81978:	0008168d 	.word	0x0008168d
   8197c:	00082369 	.word	0x00082369
   81980:	00081429 	.word	0x00081429
   81984:	000823ed 	.word	0x000823ed
   81988:	00081ead 	.word	0x00081ead
   8198c:	00082415 	.word	0x00082415
   81990:	000822bd 	.word	0x000822bd
   81994:	00081719 	.word	0x00081719
   81998:	00082009 	.word	0x00082009

0008199c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   8199c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   819a0:	460e      	mov	r6, r1
   819a2:	4615      	mov	r5, r2
   819a4:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   819a6:	4604      	mov	r4, r0
   819a8:	b918      	cbnz	r0, 819b2 <xQueueGenericSendFromISR+0x16>
   819aa:	4b1c      	ldr	r3, [pc, #112]	; (81a1c <xQueueGenericSendFromISR+0x80>)
   819ac:	4798      	blx	r3
   819ae:	bf00      	nop
   819b0:	e7fd      	b.n	819ae <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   819b2:	b929      	cbnz	r1, 819c0 <xQueueGenericSendFromISR+0x24>
   819b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   819b6:	b11b      	cbz	r3, 819c0 <xQueueGenericSendFromISR+0x24>
   819b8:	4b18      	ldr	r3, [pc, #96]	; (81a1c <xQueueGenericSendFromISR+0x80>)
   819ba:	4798      	blx	r3
   819bc:	bf00      	nop
   819be:	e7fd      	b.n	819bc <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   819c0:	4b16      	ldr	r3, [pc, #88]	; (81a1c <xQueueGenericSendFromISR+0x80>)
   819c2:	4798      	blx	r3
   819c4:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   819c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   819c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   819ca:	429a      	cmp	r2, r3
   819cc:	d218      	bcs.n	81a00 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   819ce:	4620      	mov	r0, r4
   819d0:	4631      	mov	r1, r6
   819d2:	4642      	mov	r2, r8
   819d4:	4b12      	ldr	r3, [pc, #72]	; (81a20 <xQueueGenericSendFromISR+0x84>)
   819d6:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   819d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   819da:	f1b3 3fff 	cmp.w	r3, #4294967295
   819de:	d10a      	bne.n	819f6 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   819e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   819e2:	b17b      	cbz	r3, 81a04 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   819e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   819e8:	4b0e      	ldr	r3, [pc, #56]	; (81a24 <xQueueGenericSendFromISR+0x88>)
   819ea:	4798      	blx	r3
   819ec:	b160      	cbz	r0, 81a08 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   819ee:	b16d      	cbz	r5, 81a0c <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   819f0:	2401      	movs	r4, #1
   819f2:	602c      	str	r4, [r5, #0]
   819f4:	e00b      	b.n	81a0e <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   819f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   819f8:	3301      	adds	r3, #1
   819fa:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   819fc:	2401      	movs	r4, #1
   819fe:	e006      	b.n	81a0e <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81a00:	2400      	movs	r4, #0
   81a02:	e004      	b.n	81a0e <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81a04:	2401      	movs	r4, #1
   81a06:	e002      	b.n	81a0e <xQueueGenericSendFromISR+0x72>
   81a08:	2401      	movs	r4, #1
   81a0a:	e000      	b.n	81a0e <xQueueGenericSendFromISR+0x72>
   81a0c:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81a0e:	4638      	mov	r0, r7
   81a10:	4b05      	ldr	r3, [pc, #20]	; (81a28 <xQueueGenericSendFromISR+0x8c>)
   81a12:	4798      	blx	r3

	return xReturn;
}
   81a14:	4620      	mov	r0, r4
   81a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a1a:	bf00      	nop
   81a1c:	00081439 	.word	0x00081439
   81a20:	0008168d 	.word	0x0008168d
   81a24:	00082369 	.word	0x00082369
   81a28:	00081461 	.word	0x00081461

00081a2c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a30:	b085      	sub	sp, #20
   81a32:	4689      	mov	r9, r1
   81a34:	469a      	mov	sl, r3
   81a36:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81a3a:	4604      	mov	r4, r0
   81a3c:	b918      	cbnz	r0, 81a46 <xQueueGenericReceive+0x1a>
   81a3e:	4b46      	ldr	r3, [pc, #280]	; (81b58 <xQueueGenericReceive+0x12c>)
   81a40:	4798      	blx	r3
   81a42:	bf00      	nop
   81a44:	e7fd      	b.n	81a42 <xQueueGenericReceive+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81a46:	b909      	cbnz	r1, 81a4c <xQueueGenericReceive+0x20>
   81a48:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81a4a:	b92b      	cbnz	r3, 81a58 <xQueueGenericReceive+0x2c>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81a4c:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81a4e:	4e43      	ldr	r6, [pc, #268]	; (81b5c <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81a50:	f8df b138 	ldr.w	fp, [pc, #312]	; 81b8c <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81a54:	4d42      	ldr	r5, [pc, #264]	; (81b60 <xQueueGenericReceive+0x134>)
   81a56:	e003      	b.n	81a60 <xQueueGenericReceive+0x34>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81a58:	4b3f      	ldr	r3, [pc, #252]	; (81b58 <xQueueGenericReceive+0x12c>)
   81a5a:	4798      	blx	r3
   81a5c:	bf00      	nop
   81a5e:	e7fd      	b.n	81a5c <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81a60:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81a64:	2b00      	cmp	r3, #0
   81a66:	d028      	beq.n	81aba <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81a68:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81a6a:	4620      	mov	r0, r4
   81a6c:	4649      	mov	r1, r9
   81a6e:	4b3d      	ldr	r3, [pc, #244]	; (81b64 <xQueueGenericReceive+0x138>)
   81a70:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81a72:	f1ba 0f00 	cmp.w	sl, #0
   81a76:	d112      	bne.n	81a9e <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81a78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81a7a:	3b01      	subs	r3, #1
   81a7c:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81a7e:	6823      	ldr	r3, [r4, #0]
   81a80:	b913      	cbnz	r3, 81a88 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81a82:	4b39      	ldr	r3, [pc, #228]	; (81b68 <xQueueGenericReceive+0x13c>)
   81a84:	4798      	blx	r3
   81a86:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81a88:	6923      	ldr	r3, [r4, #16]
   81a8a:	b193      	cbz	r3, 81ab2 <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81a8c:	f104 0010 	add.w	r0, r4, #16
   81a90:	4b36      	ldr	r3, [pc, #216]	; (81b6c <xQueueGenericReceive+0x140>)
   81a92:	4798      	blx	r3
   81a94:	2801      	cmp	r0, #1
   81a96:	d10c      	bne.n	81ab2 <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   81a98:	4b35      	ldr	r3, [pc, #212]	; (81b70 <xQueueGenericReceive+0x144>)
   81a9a:	4798      	blx	r3
   81a9c:	e009      	b.n	81ab2 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81a9e:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81aa2:	b133      	cbz	r3, 81ab2 <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81aa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81aa8:	4b30      	ldr	r3, [pc, #192]	; (81b6c <xQueueGenericReceive+0x140>)
   81aaa:	4798      	blx	r3
   81aac:	b108      	cbz	r0, 81ab2 <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81aae:	4b30      	ldr	r3, [pc, #192]	; (81b70 <xQueueGenericReceive+0x144>)
   81ab0:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   81ab2:	4b2b      	ldr	r3, [pc, #172]	; (81b60 <xQueueGenericReceive+0x134>)
   81ab4:	4798      	blx	r3
				return pdPASS;
   81ab6:	2001      	movs	r0, #1
   81ab8:	e04b      	b.n	81b52 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81aba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81abe:	b91b      	cbnz	r3, 81ac8 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81ac0:	4b27      	ldr	r3, [pc, #156]	; (81b60 <xQueueGenericReceive+0x134>)
   81ac2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81ac4:	2000      	movs	r0, #0
   81ac6:	e044      	b.n	81b52 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   81ac8:	b917      	cbnz	r7, 81ad0 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81aca:	a802      	add	r0, sp, #8
   81acc:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81ace:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81ad0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81ad2:	4b28      	ldr	r3, [pc, #160]	; (81b74 <xQueueGenericReceive+0x148>)
   81ad4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81ad6:	47b0      	blx	r6
   81ad8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81ada:	f1b3 3fff 	cmp.w	r3, #4294967295
   81ade:	bf04      	itt	eq
   81ae0:	2300      	moveq	r3, #0
   81ae2:	6463      	streq	r3, [r4, #68]	; 0x44
   81ae4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
   81aea:	bf04      	itt	eq
   81aec:	2300      	moveq	r3, #0
   81aee:	64a3      	streq	r3, [r4, #72]	; 0x48
   81af0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81af2:	a802      	add	r0, sp, #8
   81af4:	f10d 0106 	add.w	r1, sp, #6
   81af8:	4b1f      	ldr	r3, [pc, #124]	; (81b78 <xQueueGenericReceive+0x14c>)
   81afa:	4798      	blx	r3
   81afc:	bb18      	cbnz	r0, 81b46 <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81afe:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81b00:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81b04:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81b06:	f1b8 0f00 	cmp.w	r8, #0
   81b0a:	d116      	bne.n	81b3a <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81b0c:	6823      	ldr	r3, [r4, #0]
   81b0e:	b923      	cbnz	r3, 81b1a <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   81b10:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81b12:	6860      	ldr	r0, [r4, #4]
   81b14:	4b19      	ldr	r3, [pc, #100]	; (81b7c <xQueueGenericReceive+0x150>)
   81b16:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   81b18:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81b1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81b1e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81b22:	4b17      	ldr	r3, [pc, #92]	; (81b80 <xQueueGenericReceive+0x154>)
   81b24:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81b26:	4620      	mov	r0, r4
   81b28:	4b16      	ldr	r3, [pc, #88]	; (81b84 <xQueueGenericReceive+0x158>)
   81b2a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81b2c:	4b16      	ldr	r3, [pc, #88]	; (81b88 <xQueueGenericReceive+0x15c>)
   81b2e:	4798      	blx	r3
   81b30:	2800      	cmp	r0, #0
   81b32:	d195      	bne.n	81a60 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   81b34:	4b0e      	ldr	r3, [pc, #56]	; (81b70 <xQueueGenericReceive+0x144>)
   81b36:	4798      	blx	r3
   81b38:	e792      	b.n	81a60 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81b3a:	4620      	mov	r0, r4
   81b3c:	4b11      	ldr	r3, [pc, #68]	; (81b84 <xQueueGenericReceive+0x158>)
   81b3e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81b40:	4b11      	ldr	r3, [pc, #68]	; (81b88 <xQueueGenericReceive+0x15c>)
   81b42:	4798      	blx	r3
   81b44:	e78c      	b.n	81a60 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81b46:	4620      	mov	r0, r4
   81b48:	4b0e      	ldr	r3, [pc, #56]	; (81b84 <xQueueGenericReceive+0x158>)
   81b4a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81b4c:	4b0e      	ldr	r3, [pc, #56]	; (81b88 <xQueueGenericReceive+0x15c>)
   81b4e:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81b50:	2000      	movs	r0, #0
		}
	}
}
   81b52:	b005      	add	sp, #20
   81b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b58:	00081439 	.word	0x00081439
   81b5c:	00081449 	.word	0x00081449
   81b60:	00081469 	.word	0x00081469
   81b64:	000816f1 	.word	0x000816f1
   81b68:	000824ad 	.word	0x000824ad
   81b6c:	00082369 	.word	0x00082369
   81b70:	00081429 	.word	0x00081429
   81b74:	00081ead 	.word	0x00081ead
   81b78:	00082415 	.word	0x00082415
   81b7c:	000824d9 	.word	0x000824d9
   81b80:	000822bd 	.word	0x000822bd
   81b84:	00081719 	.word	0x00081719
   81b88:	00082009 	.word	0x00082009
   81b8c:	000823ed 	.word	0x000823ed

00081b90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81b90:	b538      	push	{r3, r4, r5, lr}
   81b92:	4604      	mov	r4, r0
   81b94:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81b96:	4b0d      	ldr	r3, [pc, #52]	; (81bcc <vQueueWaitForMessageRestricted+0x3c>)
   81b98:	4798      	blx	r3
   81b9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
   81ba0:	bf04      	itt	eq
   81ba2:	2300      	moveq	r3, #0
   81ba4:	6463      	streq	r3, [r4, #68]	; 0x44
   81ba6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
   81bac:	bf04      	itt	eq
   81bae:	2300      	moveq	r3, #0
   81bb0:	64a3      	streq	r3, [r4, #72]	; 0x48
   81bb2:	4b07      	ldr	r3, [pc, #28]	; (81bd0 <vQueueWaitForMessageRestricted+0x40>)
   81bb4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81bb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81bb8:	b923      	cbnz	r3, 81bc4 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81bba:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81bbe:	4629      	mov	r1, r5
   81bc0:	4b04      	ldr	r3, [pc, #16]	; (81bd4 <vQueueWaitForMessageRestricted+0x44>)
   81bc2:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   81bc4:	4620      	mov	r0, r4
   81bc6:	4b04      	ldr	r3, [pc, #16]	; (81bd8 <vQueueWaitForMessageRestricted+0x48>)
   81bc8:	4798      	blx	r3
   81bca:	bd38      	pop	{r3, r4, r5, pc}
   81bcc:	00081449 	.word	0x00081449
   81bd0:	00081469 	.word	0x00081469
   81bd4:	00082321 	.word	0x00082321
   81bd8:	00081719 	.word	0x00081719

00081bdc <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81bdc:	b510      	push	{r4, lr}
   81bde:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81be0:	4b0f      	ldr	r3, [pc, #60]	; (81c20 <prvAddCurrentTaskToDelayedList+0x44>)
   81be2:	681b      	ldr	r3, [r3, #0]
   81be4:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   81be6:	4b0f      	ldr	r3, [pc, #60]	; (81c24 <prvAddCurrentTaskToDelayedList+0x48>)
   81be8:	881b      	ldrh	r3, [r3, #0]
   81bea:	b29b      	uxth	r3, r3
   81bec:	4298      	cmp	r0, r3
   81bee:	d207      	bcs.n	81c00 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81bf0:	4b0d      	ldr	r3, [pc, #52]	; (81c28 <prvAddCurrentTaskToDelayedList+0x4c>)
   81bf2:	6818      	ldr	r0, [r3, #0]
   81bf4:	4b0a      	ldr	r3, [pc, #40]	; (81c20 <prvAddCurrentTaskToDelayedList+0x44>)
   81bf6:	6819      	ldr	r1, [r3, #0]
   81bf8:	3104      	adds	r1, #4
   81bfa:	4b0c      	ldr	r3, [pc, #48]	; (81c2c <prvAddCurrentTaskToDelayedList+0x50>)
   81bfc:	4798      	blx	r3
   81bfe:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81c00:	4b0b      	ldr	r3, [pc, #44]	; (81c30 <prvAddCurrentTaskToDelayedList+0x54>)
   81c02:	6818      	ldr	r0, [r3, #0]
   81c04:	4b06      	ldr	r3, [pc, #24]	; (81c20 <prvAddCurrentTaskToDelayedList+0x44>)
   81c06:	6819      	ldr	r1, [r3, #0]
   81c08:	3104      	adds	r1, #4
   81c0a:	4b08      	ldr	r3, [pc, #32]	; (81c2c <prvAddCurrentTaskToDelayedList+0x50>)
   81c0c:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81c0e:	4b09      	ldr	r3, [pc, #36]	; (81c34 <prvAddCurrentTaskToDelayedList+0x58>)
   81c10:	881b      	ldrh	r3, [r3, #0]
   81c12:	b29b      	uxth	r3, r3
   81c14:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   81c16:	bf3c      	itt	cc
   81c18:	4b06      	ldrcc	r3, [pc, #24]	; (81c34 <prvAddCurrentTaskToDelayedList+0x58>)
   81c1a:	801c      	strhcc	r4, [r3, #0]
   81c1c:	bd10      	pop	{r4, pc}
   81c1e:	bf00      	nop
   81c20:	20078b88 	.word	0x20078b88
   81c24:	20078ba4 	.word	0x20078ba4
   81c28:	20078ba8 	.word	0x20078ba8
   81c2c:	0008136d 	.word	0x0008136d
   81c30:	20078a84 	.word	0x20078a84
   81c34:	20070168 	.word	0x20070168

00081c38 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81c3c:	460e      	mov	r6, r1
   81c3e:	4617      	mov	r7, r2
   81c40:	469a      	mov	sl, r3
   81c42:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   81c44:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81c48:	4681      	mov	r9, r0
   81c4a:	b918      	cbnz	r0, 81c54 <xTaskGenericCreate+0x1c>
   81c4c:	4b62      	ldr	r3, [pc, #392]	; (81dd8 <xTaskGenericCreate+0x1a0>)
   81c4e:	4798      	blx	r3
   81c50:	bf00      	nop
   81c52:	e7fd      	b.n	81c50 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81c54:	2d09      	cmp	r5, #9
   81c56:	d903      	bls.n	81c60 <xTaskGenericCreate+0x28>
   81c58:	4b5f      	ldr	r3, [pc, #380]	; (81dd8 <xTaskGenericCreate+0x1a0>)
   81c5a:	4798      	blx	r3
   81c5c:	bf00      	nop
   81c5e:	e7fd      	b.n	81c5c <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81c60:	2050      	movs	r0, #80	; 0x50
   81c62:	4b5e      	ldr	r3, [pc, #376]	; (81ddc <xTaskGenericCreate+0x1a4>)
   81c64:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81c66:	4604      	mov	r4, r0
   81c68:	2800      	cmp	r0, #0
   81c6a:	f000 80b1 	beq.w	81dd0 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81c6e:	f1b8 0f00 	cmp.w	r8, #0
   81c72:	f040 80a9 	bne.w	81dc8 <xTaskGenericCreate+0x190>
   81c76:	00b8      	lsls	r0, r7, #2
   81c78:	4b58      	ldr	r3, [pc, #352]	; (81ddc <xTaskGenericCreate+0x1a4>)
   81c7a:	4798      	blx	r3
   81c7c:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81c7e:	b918      	cbnz	r0, 81c88 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81c80:	4620      	mov	r0, r4
   81c82:	4b57      	ldr	r3, [pc, #348]	; (81de0 <xTaskGenericCreate+0x1a8>)
   81c84:	4798      	blx	r3
   81c86:	e0a3      	b.n	81dd0 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81c88:	21a5      	movs	r1, #165	; 0xa5
   81c8a:	00ba      	lsls	r2, r7, #2
   81c8c:	4b55      	ldr	r3, [pc, #340]	; (81de4 <xTaskGenericCreate+0x1ac>)
   81c8e:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81c90:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   81c94:	3f01      	subs	r7, #1
   81c96:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81c98:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81c9c:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81ca0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81ca4:	4631      	mov	r1, r6
   81ca6:	2210      	movs	r2, #16
   81ca8:	4b4f      	ldr	r3, [pc, #316]	; (81de8 <xTaskGenericCreate+0x1b0>)
   81caa:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81cac:	2300      	movs	r3, #0
   81cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   81cb2:	2d09      	cmp	r5, #9
   81cb4:	bf34      	ite	cc
   81cb6:	462e      	movcc	r6, r5
   81cb8:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81cba:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81cbc:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81cbe:	1d27      	adds	r7, r4, #4
   81cc0:	4638      	mov	r0, r7
   81cc2:	f8df 8170 	ldr.w	r8, [pc, #368]	; 81e34 <xTaskGenericCreate+0x1fc>
   81cc6:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81cc8:	f104 0018 	add.w	r0, r4, #24
   81ccc:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81cce:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81cd0:	f1c6 060a 	rsb	r6, r6, #10
   81cd4:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81cd6:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81cd8:	4658      	mov	r0, fp
   81cda:	4649      	mov	r1, r9
   81cdc:	4652      	mov	r2, sl
   81cde:	4b43      	ldr	r3, [pc, #268]	; (81dec <xTaskGenericCreate+0x1b4>)
   81ce0:	4798      	blx	r3
   81ce2:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81ce4:	f010 0f07 	tst.w	r0, #7
   81ce8:	d003      	beq.n	81cf2 <xTaskGenericCreate+0xba>
   81cea:	4b3b      	ldr	r3, [pc, #236]	; (81dd8 <xTaskGenericCreate+0x1a0>)
   81cec:	4798      	blx	r3
   81cee:	bf00      	nop
   81cf0:	e7fd      	b.n	81cee <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   81cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   81cf4:	b103      	cbz	r3, 81cf8 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81cf6:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81cf8:	4b3d      	ldr	r3, [pc, #244]	; (81df0 <xTaskGenericCreate+0x1b8>)
   81cfa:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81cfc:	4b3d      	ldr	r3, [pc, #244]	; (81df4 <xTaskGenericCreate+0x1bc>)
   81cfe:	681a      	ldr	r2, [r3, #0]
   81d00:	3201      	adds	r2, #1
   81d02:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   81d04:	4b3c      	ldr	r3, [pc, #240]	; (81df8 <xTaskGenericCreate+0x1c0>)
   81d06:	681b      	ldr	r3, [r3, #0]
   81d08:	bb2b      	cbnz	r3, 81d56 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   81d0a:	4b3b      	ldr	r3, [pc, #236]	; (81df8 <xTaskGenericCreate+0x1c0>)
   81d0c:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81d0e:	4b39      	ldr	r3, [pc, #228]	; (81df4 <xTaskGenericCreate+0x1bc>)
   81d10:	681b      	ldr	r3, [r3, #0]
   81d12:	2b01      	cmp	r3, #1
   81d14:	d129      	bne.n	81d6a <xTaskGenericCreate+0x132>
   81d16:	4e39      	ldr	r6, [pc, #228]	; (81dfc <xTaskGenericCreate+0x1c4>)
   81d18:	f106 09c8 	add.w	r9, r6, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81d1c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 81e00 <xTaskGenericCreate+0x1c8>
   81d20:	4630      	mov	r0, r6
   81d22:	47c0      	blx	r8
   81d24:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   81d26:	454e      	cmp	r6, r9
   81d28:	d1fa      	bne.n	81d20 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   81d2a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 81e38 <xTaskGenericCreate+0x200>
   81d2e:	4648      	mov	r0, r9
   81d30:	4e33      	ldr	r6, [pc, #204]	; (81e00 <xTaskGenericCreate+0x1c8>)
   81d32:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81d34:	f8df 8104 	ldr.w	r8, [pc, #260]	; 81e3c <xTaskGenericCreate+0x204>
   81d38:	4640      	mov	r0, r8
   81d3a:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   81d3c:	4831      	ldr	r0, [pc, #196]	; (81e04 <xTaskGenericCreate+0x1cc>)
   81d3e:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81d40:	4831      	ldr	r0, [pc, #196]	; (81e08 <xTaskGenericCreate+0x1d0>)
   81d42:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81d44:	4831      	ldr	r0, [pc, #196]	; (81e0c <xTaskGenericCreate+0x1d4>)
   81d46:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   81d48:	4b31      	ldr	r3, [pc, #196]	; (81e10 <xTaskGenericCreate+0x1d8>)
   81d4a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81d4e:	4b31      	ldr	r3, [pc, #196]	; (81e14 <xTaskGenericCreate+0x1dc>)
   81d50:	f8c3 8000 	str.w	r8, [r3]
   81d54:	e009      	b.n	81d6a <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   81d56:	4b30      	ldr	r3, [pc, #192]	; (81e18 <xTaskGenericCreate+0x1e0>)
   81d58:	681b      	ldr	r3, [r3, #0]
   81d5a:	b933      	cbnz	r3, 81d6a <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81d5c:	4b26      	ldr	r3, [pc, #152]	; (81df8 <xTaskGenericCreate+0x1c0>)
   81d5e:	681b      	ldr	r3, [r3, #0]
   81d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81d62:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   81d64:	bf24      	itt	cs
   81d66:	4b24      	ldrcs	r3, [pc, #144]	; (81df8 <xTaskGenericCreate+0x1c0>)
   81d68:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81d6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81d6c:	4a2b      	ldr	r2, [pc, #172]	; (81e1c <xTaskGenericCreate+0x1e4>)
   81d6e:	6812      	ldr	r2, [r2, #0]
   81d70:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81d72:	bf84      	itt	hi
   81d74:	4a29      	ldrhi	r2, [pc, #164]	; (81e1c <xTaskGenericCreate+0x1e4>)
   81d76:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81d78:	4a29      	ldr	r2, [pc, #164]	; (81e20 <xTaskGenericCreate+0x1e8>)
   81d7a:	6811      	ldr	r1, [r2, #0]
   81d7c:	6461      	str	r1, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   81d7e:	3101      	adds	r1, #1
   81d80:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81d82:	4a28      	ldr	r2, [pc, #160]	; (81e24 <xTaskGenericCreate+0x1ec>)
   81d84:	6812      	ldr	r2, [r2, #0]
   81d86:	4293      	cmp	r3, r2
   81d88:	bf84      	itt	hi
   81d8a:	4a26      	ldrhi	r2, [pc, #152]	; (81e24 <xTaskGenericCreate+0x1ec>)
   81d8c:	6013      	strhi	r3, [r2, #0]
   81d8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d92:	481a      	ldr	r0, [pc, #104]	; (81dfc <xTaskGenericCreate+0x1c4>)
   81d94:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81d98:	4639      	mov	r1, r7
   81d9a:	4b23      	ldr	r3, [pc, #140]	; (81e28 <xTaskGenericCreate+0x1f0>)
   81d9c:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81d9e:	4b23      	ldr	r3, [pc, #140]	; (81e2c <xTaskGenericCreate+0x1f4>)
   81da0:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81da2:	4b1d      	ldr	r3, [pc, #116]	; (81e18 <xTaskGenericCreate+0x1e0>)
   81da4:	681b      	ldr	r3, [r3, #0]
   81da6:	b14b      	cbz	r3, 81dbc <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81da8:	4b13      	ldr	r3, [pc, #76]	; (81df8 <xTaskGenericCreate+0x1c0>)
   81daa:	681b      	ldr	r3, [r3, #0]
   81dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81dae:	429d      	cmp	r5, r3
   81db0:	d907      	bls.n	81dc2 <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   81db2:	4b1f      	ldr	r3, [pc, #124]	; (81e30 <xTaskGenericCreate+0x1f8>)
   81db4:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   81db6:	2001      	movs	r0, #1
   81db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81dbc:	2001      	movs	r0, #1
   81dbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81dc2:	2001      	movs	r0, #1
   81dc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81dc8:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   81dcc:	4640      	mov	r0, r8
   81dce:	e75b      	b.n	81c88 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81dd0:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81dd8:	00081439 	.word	0x00081439
   81ddc:	00081595 	.word	0x00081595
   81de0:	00081659 	.word	0x00081659
   81de4:	000841cd 	.word	0x000841cd
   81de8:	000843d1 	.word	0x000843d1
   81dec:	000813ed 	.word	0x000813ed
   81df0:	00081449 	.word	0x00081449
   81df4:	20078bc8 	.word	0x20078bc8
   81df8:	20078b88 	.word	0x20078b88
   81dfc:	20078abc 	.word	0x20078abc
   81e00:	00081331 	.word	0x00081331
   81e04:	20078b8c 	.word	0x20078b8c
   81e08:	20078a90 	.word	0x20078a90
   81e0c:	20078a70 	.word	0x20078a70
   81e10:	20078a84 	.word	0x20078a84
   81e14:	20078ba8 	.word	0x20078ba8
   81e18:	20078a88 	.word	0x20078a88
   81e1c:	20078bcc 	.word	0x20078bcc
   81e20:	20078bac 	.word	0x20078bac
   81e24:	20078ab8 	.word	0x20078ab8
   81e28:	00081351 	.word	0x00081351
   81e2c:	00081469 	.word	0x00081469
   81e30:	00081429 	.word	0x00081429
   81e34:	00081349 	.word	0x00081349
   81e38:	20078bb0 	.word	0x20078bb0
   81e3c:	20078aa4 	.word	0x20078aa4

00081e40 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81e40:	b510      	push	{r4, lr}
   81e42:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81e44:	2300      	movs	r3, #0
   81e46:	9300      	str	r3, [sp, #0]
   81e48:	9301      	str	r3, [sp, #4]
   81e4a:	9302      	str	r3, [sp, #8]
   81e4c:	9303      	str	r3, [sp, #12]
   81e4e:	480f      	ldr	r0, [pc, #60]	; (81e8c <vTaskStartScheduler+0x4c>)
   81e50:	490f      	ldr	r1, [pc, #60]	; (81e90 <vTaskStartScheduler+0x50>)
   81e52:	f44f 7280 	mov.w	r2, #256	; 0x100
   81e56:	4c0f      	ldr	r4, [pc, #60]	; (81e94 <vTaskStartScheduler+0x54>)
   81e58:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81e5a:	2801      	cmp	r0, #1
   81e5c:	d10e      	bne.n	81e7c <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   81e5e:	4b0e      	ldr	r3, [pc, #56]	; (81e98 <vTaskStartScheduler+0x58>)
   81e60:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81e62:	2801      	cmp	r0, #1
   81e64:	d10a      	bne.n	81e7c <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81e66:	4b0d      	ldr	r3, [pc, #52]	; (81e9c <vTaskStartScheduler+0x5c>)
   81e68:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81e6a:	2201      	movs	r2, #1
   81e6c:	4b0c      	ldr	r3, [pc, #48]	; (81ea0 <vTaskStartScheduler+0x60>)
   81e6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81e70:	2200      	movs	r2, #0
   81e72:	4b0c      	ldr	r3, [pc, #48]	; (81ea4 <vTaskStartScheduler+0x64>)
   81e74:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81e76:	4b0c      	ldr	r3, [pc, #48]	; (81ea8 <vTaskStartScheduler+0x68>)
   81e78:	4798      	blx	r3
   81e7a:	e004      	b.n	81e86 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81e7c:	b918      	cbnz	r0, 81e86 <vTaskStartScheduler+0x46>
   81e7e:	4b07      	ldr	r3, [pc, #28]	; (81e9c <vTaskStartScheduler+0x5c>)
   81e80:	4798      	blx	r3
   81e82:	bf00      	nop
   81e84:	e7fd      	b.n	81e82 <vTaskStartScheduler+0x42>
}
   81e86:	b004      	add	sp, #16
   81e88:	bd10      	pop	{r4, pc}
   81e8a:	bf00      	nop
   81e8c:	000821a9 	.word	0x000821a9
   81e90:	000870dc 	.word	0x000870dc
   81e94:	00081c39 	.word	0x00081c39
   81e98:	00082651 	.word	0x00082651
   81e9c:	00081439 	.word	0x00081439
   81ea0:	20078a88 	.word	0x20078a88
   81ea4:	20078ba4 	.word	0x20078ba4
   81ea8:	00081505 	.word	0x00081505

00081eac <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81eac:	4b02      	ldr	r3, [pc, #8]	; (81eb8 <vTaskSuspendAll+0xc>)
   81eae:	681a      	ldr	r2, [r3, #0]
   81eb0:	3201      	adds	r2, #1
   81eb2:	601a      	str	r2, [r3, #0]
   81eb4:	4770      	bx	lr
   81eb6:	bf00      	nop
   81eb8:	20078b84 	.word	0x20078b84

00081ebc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81ebc:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81ebe:	4b04      	ldr	r3, [pc, #16]	; (81ed0 <xTaskGetTickCount+0x14>)
   81ec0:	4798      	blx	r3
	{
		xTicks = xTickCount;
   81ec2:	4b04      	ldr	r3, [pc, #16]	; (81ed4 <xTaskGetTickCount+0x18>)
   81ec4:	881c      	ldrh	r4, [r3, #0]
   81ec6:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   81ec8:	4b03      	ldr	r3, [pc, #12]	; (81ed8 <xTaskGetTickCount+0x1c>)
   81eca:	4798      	blx	r3

	return xTicks;
}
   81ecc:	4620      	mov	r0, r4
   81ece:	bd10      	pop	{r4, pc}
   81ed0:	00081449 	.word	0x00081449
   81ed4:	20078ba4 	.word	0x20078ba4
   81ed8:	00081469 	.word	0x00081469

00081edc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81ee0:	4b3d      	ldr	r3, [pc, #244]	; (81fd8 <vTaskIncrementTick+0xfc>)
   81ee2:	681b      	ldr	r3, [r3, #0]
   81ee4:	2b00      	cmp	r3, #0
   81ee6:	d171      	bne.n	81fcc <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   81ee8:	4b3c      	ldr	r3, [pc, #240]	; (81fdc <vTaskIncrementTick+0x100>)
   81eea:	881a      	ldrh	r2, [r3, #0]
   81eec:	3201      	adds	r2, #1
   81eee:	b292      	uxth	r2, r2
   81ef0:	801a      	strh	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81ef2:	881b      	ldrh	r3, [r3, #0]
   81ef4:	b29b      	uxth	r3, r3
   81ef6:	bb03      	cbnz	r3, 81f3a <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81ef8:	4b39      	ldr	r3, [pc, #228]	; (81fe0 <vTaskIncrementTick+0x104>)
   81efa:	681b      	ldr	r3, [r3, #0]
   81efc:	681b      	ldr	r3, [r3, #0]
   81efe:	b11b      	cbz	r3, 81f08 <vTaskIncrementTick+0x2c>
   81f00:	4b38      	ldr	r3, [pc, #224]	; (81fe4 <vTaskIncrementTick+0x108>)
   81f02:	4798      	blx	r3
   81f04:	bf00      	nop
   81f06:	e7fd      	b.n	81f04 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   81f08:	4b35      	ldr	r3, [pc, #212]	; (81fe0 <vTaskIncrementTick+0x104>)
   81f0a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81f0c:	4a36      	ldr	r2, [pc, #216]	; (81fe8 <vTaskIncrementTick+0x10c>)
   81f0e:	6810      	ldr	r0, [r2, #0]
   81f10:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81f12:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81f14:	4a35      	ldr	r2, [pc, #212]	; (81fec <vTaskIncrementTick+0x110>)
   81f16:	6811      	ldr	r1, [r2, #0]
   81f18:	3101      	adds	r1, #1
   81f1a:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81f1c:	681b      	ldr	r3, [r3, #0]
   81f1e:	681b      	ldr	r3, [r3, #0]
   81f20:	b923      	cbnz	r3, 81f2c <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81f26:	4b32      	ldr	r3, [pc, #200]	; (81ff0 <vTaskIncrementTick+0x114>)
   81f28:	801a      	strh	r2, [r3, #0]
   81f2a:	e006      	b.n	81f3a <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81f2c:	4b2c      	ldr	r3, [pc, #176]	; (81fe0 <vTaskIncrementTick+0x104>)
   81f2e:	681b      	ldr	r3, [r3, #0]
   81f30:	68db      	ldr	r3, [r3, #12]
   81f32:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81f34:	889a      	ldrh	r2, [r3, #4]
   81f36:	4b2e      	ldr	r3, [pc, #184]	; (81ff0 <vTaskIncrementTick+0x114>)
   81f38:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81f3a:	4b28      	ldr	r3, [pc, #160]	; (81fdc <vTaskIncrementTick+0x100>)
   81f3c:	881a      	ldrh	r2, [r3, #0]
   81f3e:	b292      	uxth	r2, r2
   81f40:	4b2b      	ldr	r3, [pc, #172]	; (81ff0 <vTaskIncrementTick+0x114>)
   81f42:	881b      	ldrh	r3, [r3, #0]
   81f44:	b29b      	uxth	r3, r3
   81f46:	429a      	cmp	r2, r3
   81f48:	d344      	bcc.n	81fd4 <vTaskIncrementTick+0xf8>
   81f4a:	4b25      	ldr	r3, [pc, #148]	; (81fe0 <vTaskIncrementTick+0x104>)
   81f4c:	681b      	ldr	r3, [r3, #0]
   81f4e:	681b      	ldr	r3, [r3, #0]
   81f50:	b153      	cbz	r3, 81f68 <vTaskIncrementTick+0x8c>
   81f52:	4b23      	ldr	r3, [pc, #140]	; (81fe0 <vTaskIncrementTick+0x104>)
   81f54:	681b      	ldr	r3, [r3, #0]
   81f56:	68db      	ldr	r3, [r3, #12]
   81f58:	68dc      	ldr	r4, [r3, #12]
   81f5a:	88a3      	ldrh	r3, [r4, #4]
   81f5c:	4a1f      	ldr	r2, [pc, #124]	; (81fdc <vTaskIncrementTick+0x100>)
   81f5e:	8812      	ldrh	r2, [r2, #0]
   81f60:	b292      	uxth	r2, r2
   81f62:	4293      	cmp	r3, r2
   81f64:	d914      	bls.n	81f90 <vTaskIncrementTick+0xb4>
   81f66:	e00f      	b.n	81f88 <vTaskIncrementTick+0xac>
   81f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81f6c:	4b20      	ldr	r3, [pc, #128]	; (81ff0 <vTaskIncrementTick+0x114>)
   81f6e:	801a      	strh	r2, [r3, #0]
   81f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f74:	4b1a      	ldr	r3, [pc, #104]	; (81fe0 <vTaskIncrementTick+0x104>)
   81f76:	681b      	ldr	r3, [r3, #0]
   81f78:	68db      	ldr	r3, [r3, #12]
   81f7a:	68dc      	ldr	r4, [r3, #12]
   81f7c:	88a3      	ldrh	r3, [r4, #4]
   81f7e:	4a17      	ldr	r2, [pc, #92]	; (81fdc <vTaskIncrementTick+0x100>)
   81f80:	8812      	ldrh	r2, [r2, #0]
   81f82:	b292      	uxth	r2, r2
   81f84:	4293      	cmp	r3, r2
   81f86:	d907      	bls.n	81f98 <vTaskIncrementTick+0xbc>
   81f88:	4a19      	ldr	r2, [pc, #100]	; (81ff0 <vTaskIncrementTick+0x114>)
   81f8a:	8013      	strh	r3, [r2, #0]
   81f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f90:	4e18      	ldr	r6, [pc, #96]	; (81ff4 <vTaskIncrementTick+0x118>)
   81f92:	4f19      	ldr	r7, [pc, #100]	; (81ff8 <vTaskIncrementTick+0x11c>)
   81f94:	f8df 806c 	ldr.w	r8, [pc, #108]	; 82004 <vTaskIncrementTick+0x128>
   81f98:	1d25      	adds	r5, r4, #4
   81f9a:	4628      	mov	r0, r5
   81f9c:	47b0      	blx	r6
   81f9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81fa0:	b113      	cbz	r3, 81fa8 <vTaskIncrementTick+0xcc>
   81fa2:	f104 0018 	add.w	r0, r4, #24
   81fa6:	47b0      	blx	r6
   81fa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81faa:	683a      	ldr	r2, [r7, #0]
   81fac:	4293      	cmp	r3, r2
   81fae:	bf88      	it	hi
   81fb0:	603b      	strhi	r3, [r7, #0]
   81fb2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   81fb6:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81fba:	4629      	mov	r1, r5
   81fbc:	4b0f      	ldr	r3, [pc, #60]	; (81ffc <vTaskIncrementTick+0x120>)
   81fbe:	4798      	blx	r3
   81fc0:	4b07      	ldr	r3, [pc, #28]	; (81fe0 <vTaskIncrementTick+0x104>)
   81fc2:	681b      	ldr	r3, [r3, #0]
   81fc4:	681b      	ldr	r3, [r3, #0]
   81fc6:	2b00      	cmp	r3, #0
   81fc8:	d1d4      	bne.n	81f74 <vTaskIncrementTick+0x98>
   81fca:	e7cd      	b.n	81f68 <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
   81fcc:	4b0c      	ldr	r3, [pc, #48]	; (82000 <vTaskIncrementTick+0x124>)
   81fce:	681a      	ldr	r2, [r3, #0]
   81fd0:	3201      	adds	r2, #1
   81fd2:	601a      	str	r2, [r3, #0]
   81fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81fd8:	20078b84 	.word	0x20078b84
   81fdc:	20078ba4 	.word	0x20078ba4
   81fe0:	20078a84 	.word	0x20078a84
   81fe4:	00081439 	.word	0x00081439
   81fe8:	20078ba8 	.word	0x20078ba8
   81fec:	20078ba0 	.word	0x20078ba0
   81ff0:	20070168 	.word	0x20070168
   81ff4:	000813b1 	.word	0x000813b1
   81ff8:	20078ab8 	.word	0x20078ab8
   81ffc:	00081351 	.word	0x00081351
   82000:	20078a6c 	.word	0x20078a6c
   82004:	20078abc 	.word	0x20078abc

00082008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   82008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   8200c:	4b31      	ldr	r3, [pc, #196]	; (820d4 <xTaskResumeAll+0xcc>)
   8200e:	681b      	ldr	r3, [r3, #0]
   82010:	b91b      	cbnz	r3, 8201a <xTaskResumeAll+0x12>
   82012:	4b31      	ldr	r3, [pc, #196]	; (820d8 <xTaskResumeAll+0xd0>)
   82014:	4798      	blx	r3
   82016:	bf00      	nop
   82018:	e7fd      	b.n	82016 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   8201a:	4b30      	ldr	r3, [pc, #192]	; (820dc <xTaskResumeAll+0xd4>)
   8201c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8201e:	4b2d      	ldr	r3, [pc, #180]	; (820d4 <xTaskResumeAll+0xcc>)
   82020:	681a      	ldr	r2, [r3, #0]
   82022:	3a01      	subs	r2, #1
   82024:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82026:	681b      	ldr	r3, [r3, #0]
   82028:	2b00      	cmp	r3, #0
   8202a:	d148      	bne.n	820be <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   8202c:	4b2c      	ldr	r3, [pc, #176]	; (820e0 <xTaskResumeAll+0xd8>)
   8202e:	681b      	ldr	r3, [r3, #0]
   82030:	2b00      	cmp	r3, #0
   82032:	d046      	beq.n	820c2 <xTaskResumeAll+0xba>
   82034:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   82036:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8210c <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   8203a:	4f2a      	ldr	r7, [pc, #168]	; (820e4 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   8203c:	4e2a      	ldr	r6, [pc, #168]	; (820e8 <xTaskResumeAll+0xe0>)
   8203e:	e01d      	b.n	8207c <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   82040:	f8d8 300c 	ldr.w	r3, [r8, #12]
   82044:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   82046:	f104 0018 	add.w	r0, r4, #24
   8204a:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8204c:	f104 0904 	add.w	r9, r4, #4
   82050:	4648      	mov	r0, r9
   82052:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   82054:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82056:	6832      	ldr	r2, [r6, #0]
   82058:	4293      	cmp	r3, r2
   8205a:	bf88      	it	hi
   8205c:	6033      	strhi	r3, [r6, #0]
   8205e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82062:	4822      	ldr	r0, [pc, #136]	; (820ec <xTaskResumeAll+0xe4>)
   82064:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82068:	4649      	mov	r1, r9
   8206a:	4b21      	ldr	r3, [pc, #132]	; (820f0 <xTaskResumeAll+0xe8>)
   8206c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8206e:	4b21      	ldr	r3, [pc, #132]	; (820f4 <xTaskResumeAll+0xec>)
   82070:	681b      	ldr	r3, [r3, #0]
   82072:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   82074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   82076:	429a      	cmp	r2, r3
   82078:	bf28      	it	cs
   8207a:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8207c:	f8d8 3000 	ldr.w	r3, [r8]
   82080:	2b00      	cmp	r3, #0
   82082:	d1dd      	bne.n	82040 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82084:	4b1c      	ldr	r3, [pc, #112]	; (820f8 <xTaskResumeAll+0xf0>)
   82086:	681b      	ldr	r3, [r3, #0]
   82088:	b163      	cbz	r3, 820a4 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8208a:	4b1b      	ldr	r3, [pc, #108]	; (820f8 <xTaskResumeAll+0xf0>)
   8208c:	681b      	ldr	r3, [r3, #0]
   8208e:	b17b      	cbz	r3, 820b0 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   82090:	4d1a      	ldr	r5, [pc, #104]	; (820fc <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   82092:	4c19      	ldr	r4, [pc, #100]	; (820f8 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   82094:	47a8      	blx	r5
						--uxMissedTicks;
   82096:	6823      	ldr	r3, [r4, #0]
   82098:	3b01      	subs	r3, #1
   8209a:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8209c:	6823      	ldr	r3, [r4, #0]
   8209e:	2b00      	cmp	r3, #0
   820a0:	d1f8      	bne.n	82094 <xTaskResumeAll+0x8c>
   820a2:	e005      	b.n	820b0 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   820a4:	2d01      	cmp	r5, #1
   820a6:	d003      	beq.n	820b0 <xTaskResumeAll+0xa8>
   820a8:	4b15      	ldr	r3, [pc, #84]	; (82100 <xTaskResumeAll+0xf8>)
   820aa:	681b      	ldr	r3, [r3, #0]
   820ac:	2b01      	cmp	r3, #1
   820ae:	d10a      	bne.n	820c6 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   820b0:	2200      	movs	r2, #0
   820b2:	4b13      	ldr	r3, [pc, #76]	; (82100 <xTaskResumeAll+0xf8>)
   820b4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   820b6:	4b13      	ldr	r3, [pc, #76]	; (82104 <xTaskResumeAll+0xfc>)
   820b8:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   820ba:	2401      	movs	r4, #1
   820bc:	e004      	b.n	820c8 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   820be:	2400      	movs	r4, #0
   820c0:	e002      	b.n	820c8 <xTaskResumeAll+0xc0>
   820c2:	2400      	movs	r4, #0
   820c4:	e000      	b.n	820c8 <xTaskResumeAll+0xc0>
   820c6:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   820c8:	4b0f      	ldr	r3, [pc, #60]	; (82108 <xTaskResumeAll+0x100>)
   820ca:	4798      	blx	r3

	return xAlreadyYielded;
}
   820cc:	4620      	mov	r0, r4
   820ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   820d2:	bf00      	nop
   820d4:	20078b84 	.word	0x20078b84
   820d8:	00081439 	.word	0x00081439
   820dc:	00081449 	.word	0x00081449
   820e0:	20078bc8 	.word	0x20078bc8
   820e4:	000813b1 	.word	0x000813b1
   820e8:	20078ab8 	.word	0x20078ab8
   820ec:	20078abc 	.word	0x20078abc
   820f0:	00081351 	.word	0x00081351
   820f4:	20078b88 	.word	0x20078b88
   820f8:	20078a6c 	.word	0x20078a6c
   820fc:	00081edd 	.word	0x00081edd
   82100:	20078bc4 	.word	0x20078bc4
   82104:	00081429 	.word	0x00081429
   82108:	00081469 	.word	0x00081469
   8210c:	20078b8c 	.word	0x20078b8c

00082110 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   82110:	b538      	push	{r3, r4, r5, lr}
   82112:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   82114:	4605      	mov	r5, r0
   82116:	b918      	cbnz	r0, 82120 <vTaskDelayUntil+0x10>
   82118:	4b1b      	ldr	r3, [pc, #108]	; (82188 <vTaskDelayUntil+0x78>)
   8211a:	4798      	blx	r3
   8211c:	bf00      	nop
   8211e:	e7fd      	b.n	8211c <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   82120:	b919      	cbnz	r1, 8212a <vTaskDelayUntil+0x1a>
   82122:	4b19      	ldr	r3, [pc, #100]	; (82188 <vTaskDelayUntil+0x78>)
   82124:	4798      	blx	r3
   82126:	bf00      	nop
   82128:	e7fd      	b.n	82126 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   8212a:	4b18      	ldr	r3, [pc, #96]	; (8218c <vTaskDelayUntil+0x7c>)
   8212c:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   8212e:	882b      	ldrh	r3, [r5, #0]
   82130:	441c      	add	r4, r3
   82132:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   82134:	4a16      	ldr	r2, [pc, #88]	; (82190 <vTaskDelayUntil+0x80>)
   82136:	8812      	ldrh	r2, [r2, #0]
   82138:	b292      	uxth	r2, r2
   8213a:	4293      	cmp	r3, r2
   8213c:	d908      	bls.n	82150 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   8213e:	42a3      	cmp	r3, r4
   82140:	d91e      	bls.n	82180 <vTaskDelayUntil+0x70>
   82142:	4b13      	ldr	r3, [pc, #76]	; (82190 <vTaskDelayUntil+0x80>)
   82144:	881b      	ldrh	r3, [r3, #0]
   82146:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82148:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   8214a:	429c      	cmp	r4, r3
   8214c:	d910      	bls.n	82170 <vTaskDelayUntil+0x60>
   8214e:	e007      	b.n	82160 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   82150:	42a3      	cmp	r3, r4
   82152:	d813      	bhi.n	8217c <vTaskDelayUntil+0x6c>
   82154:	4b0e      	ldr	r3, [pc, #56]	; (82190 <vTaskDelayUntil+0x80>)
   82156:	881b      	ldrh	r3, [r3, #0]
   82158:	b29b      	uxth	r3, r3
   8215a:	429c      	cmp	r4, r3
   8215c:	d80e      	bhi.n	8217c <vTaskDelayUntil+0x6c>
   8215e:	e00f      	b.n	82180 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82160:	4b0c      	ldr	r3, [pc, #48]	; (82194 <vTaskDelayUntil+0x84>)
   82162:	6818      	ldr	r0, [r3, #0]
   82164:	3004      	adds	r0, #4
   82166:	4b0c      	ldr	r3, [pc, #48]	; (82198 <vTaskDelayUntil+0x88>)
   82168:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8216a:	4620      	mov	r0, r4
   8216c:	4b0b      	ldr	r3, [pc, #44]	; (8219c <vTaskDelayUntil+0x8c>)
   8216e:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   82170:	4b0b      	ldr	r3, [pc, #44]	; (821a0 <vTaskDelayUntil+0x90>)
   82172:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   82174:	b930      	cbnz	r0, 82184 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   82176:	4b0b      	ldr	r3, [pc, #44]	; (821a4 <vTaskDelayUntil+0x94>)
   82178:	4798      	blx	r3
   8217a:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   8217c:	802c      	strh	r4, [r5, #0]
   8217e:	e7ef      	b.n	82160 <vTaskDelayUntil+0x50>
   82180:	802c      	strh	r4, [r5, #0]
   82182:	e7f5      	b.n	82170 <vTaskDelayUntil+0x60>
   82184:	bd38      	pop	{r3, r4, r5, pc}
   82186:	bf00      	nop
   82188:	00081439 	.word	0x00081439
   8218c:	00081ead 	.word	0x00081ead
   82190:	20078ba4 	.word	0x20078ba4
   82194:	20078b88 	.word	0x20078b88
   82198:	000813b1 	.word	0x000813b1
   8219c:	00081bdd 	.word	0x00081bdd
   821a0:	00082009 	.word	0x00082009
   821a4:	00081429 	.word	0x00081429

000821a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   821a8:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   821aa:	4d15      	ldr	r5, [pc, #84]	; (82200 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   821ac:	4e15      	ldr	r6, [pc, #84]	; (82204 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   821ae:	f8df 8078 	ldr.w	r8, [pc, #120]	; 82228 <prvIdleTask+0x80>
   821b2:	e01c      	b.n	821ee <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   821b4:	4b14      	ldr	r3, [pc, #80]	; (82208 <prvIdleTask+0x60>)
   821b6:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   821b8:	4b14      	ldr	r3, [pc, #80]	; (8220c <prvIdleTask+0x64>)
   821ba:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   821bc:	4b14      	ldr	r3, [pc, #80]	; (82210 <prvIdleTask+0x68>)
   821be:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   821c0:	b1ac      	cbz	r4, 821ee <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   821c2:	4b14      	ldr	r3, [pc, #80]	; (82214 <prvIdleTask+0x6c>)
   821c4:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   821c6:	4b11      	ldr	r3, [pc, #68]	; (8220c <prvIdleTask+0x64>)
   821c8:	68db      	ldr	r3, [r3, #12]
   821ca:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   821cc:	1d20      	adds	r0, r4, #4
   821ce:	4b12      	ldr	r3, [pc, #72]	; (82218 <prvIdleTask+0x70>)
   821d0:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   821d2:	4b12      	ldr	r3, [pc, #72]	; (8221c <prvIdleTask+0x74>)
   821d4:	681a      	ldr	r2, [r3, #0]
   821d6:	3a01      	subs	r2, #1
   821d8:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   821da:	682b      	ldr	r3, [r5, #0]
   821dc:	3b01      	subs	r3, #1
   821de:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   821e0:	4b0f      	ldr	r3, [pc, #60]	; (82220 <prvIdleTask+0x78>)
   821e2:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   821e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   821e6:	4f0f      	ldr	r7, [pc, #60]	; (82224 <prvIdleTask+0x7c>)
   821e8:	47b8      	blx	r7
		vPortFree( pxTCB );
   821ea:	4620      	mov	r0, r4
   821ec:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   821ee:	682b      	ldr	r3, [r5, #0]
   821f0:	2b00      	cmp	r3, #0
   821f2:	d1df      	bne.n	821b4 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   821f4:	6833      	ldr	r3, [r6, #0]
   821f6:	2b01      	cmp	r3, #1
   821f8:	d9f9      	bls.n	821ee <prvIdleTask+0x46>
			{
				taskYIELD();
   821fa:	47c0      	blx	r8
   821fc:	e7f7      	b.n	821ee <prvIdleTask+0x46>
   821fe:	bf00      	nop
   82200:	20078a8c 	.word	0x20078a8c
   82204:	20078abc 	.word	0x20078abc
   82208:	00081ead 	.word	0x00081ead
   8220c:	20078a90 	.word	0x20078a90
   82210:	00082009 	.word	0x00082009
   82214:	00081449 	.word	0x00081449
   82218:	000813b1 	.word	0x000813b1
   8221c:	20078bc8 	.word	0x20078bc8
   82220:	00081469 	.word	0x00081469
   82224:	00081659 	.word	0x00081659
   82228:	00081429 	.word	0x00081429

0008222c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   8222c:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8222e:	4b1d      	ldr	r3, [pc, #116]	; (822a4 <vTaskSwitchContext+0x78>)
   82230:	681b      	ldr	r3, [r3, #0]
   82232:	b95b      	cbnz	r3, 8224c <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82234:	4b1c      	ldr	r3, [pc, #112]	; (822a8 <vTaskSwitchContext+0x7c>)
   82236:	681b      	ldr	r3, [r3, #0]
   82238:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8223c:	009b      	lsls	r3, r3, #2
   8223e:	4a1b      	ldr	r2, [pc, #108]	; (822ac <vTaskSwitchContext+0x80>)
   82240:	58d3      	ldr	r3, [r2, r3]
   82242:	b9cb      	cbnz	r3, 82278 <vTaskSwitchContext+0x4c>
   82244:	4b18      	ldr	r3, [pc, #96]	; (822a8 <vTaskSwitchContext+0x7c>)
   82246:	681b      	ldr	r3, [r3, #0]
   82248:	b953      	cbnz	r3, 82260 <vTaskSwitchContext+0x34>
   8224a:	e005      	b.n	82258 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   8224c:	2201      	movs	r2, #1
   8224e:	4b18      	ldr	r3, [pc, #96]	; (822b0 <vTaskSwitchContext+0x84>)
   82250:	601a      	str	r2, [r3, #0]
   82252:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82254:	681a      	ldr	r2, [r3, #0]
   82256:	b92a      	cbnz	r2, 82264 <vTaskSwitchContext+0x38>
   82258:	4b16      	ldr	r3, [pc, #88]	; (822b4 <vTaskSwitchContext+0x88>)
   8225a:	4798      	blx	r3
   8225c:	bf00      	nop
   8225e:	e7fd      	b.n	8225c <vTaskSwitchContext+0x30>
   82260:	4b11      	ldr	r3, [pc, #68]	; (822a8 <vTaskSwitchContext+0x7c>)
   82262:	4912      	ldr	r1, [pc, #72]	; (822ac <vTaskSwitchContext+0x80>)
   82264:	681a      	ldr	r2, [r3, #0]
   82266:	3a01      	subs	r2, #1
   82268:	601a      	str	r2, [r3, #0]
   8226a:	681a      	ldr	r2, [r3, #0]
   8226c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   82270:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   82274:	2a00      	cmp	r2, #0
   82276:	d0ed      	beq.n	82254 <vTaskSwitchContext+0x28>
   82278:	4b0b      	ldr	r3, [pc, #44]	; (822a8 <vTaskSwitchContext+0x7c>)
   8227a:	681b      	ldr	r3, [r3, #0]
   8227c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82280:	4a0a      	ldr	r2, [pc, #40]	; (822ac <vTaskSwitchContext+0x80>)
   82282:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   82286:	685a      	ldr	r2, [r3, #4]
   82288:	6852      	ldr	r2, [r2, #4]
   8228a:	605a      	str	r2, [r3, #4]
   8228c:	f103 0108 	add.w	r1, r3, #8
   82290:	428a      	cmp	r2, r1
   82292:	bf04      	itt	eq
   82294:	6852      	ldreq	r2, [r2, #4]
   82296:	605a      	streq	r2, [r3, #4]
   82298:	685b      	ldr	r3, [r3, #4]
   8229a:	68da      	ldr	r2, [r3, #12]
   8229c:	4b06      	ldr	r3, [pc, #24]	; (822b8 <vTaskSwitchContext+0x8c>)
   8229e:	601a      	str	r2, [r3, #0]
   822a0:	bd08      	pop	{r3, pc}
   822a2:	bf00      	nop
   822a4:	20078b84 	.word	0x20078b84
   822a8:	20078ab8 	.word	0x20078ab8
   822ac:	20078abc 	.word	0x20078abc
   822b0:	20078bc4 	.word	0x20078bc4
   822b4:	00081439 	.word	0x00081439
   822b8:	20078b88 	.word	0x20078b88

000822bc <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   822bc:	b538      	push	{r3, r4, r5, lr}
   822be:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   822c0:	b918      	cbnz	r0, 822ca <vTaskPlaceOnEventList+0xe>
   822c2:	4b0f      	ldr	r3, [pc, #60]	; (82300 <vTaskPlaceOnEventList+0x44>)
   822c4:	4798      	blx	r3
   822c6:	bf00      	nop
   822c8:	e7fd      	b.n	822c6 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   822ca:	4d0e      	ldr	r5, [pc, #56]	; (82304 <vTaskPlaceOnEventList+0x48>)
   822cc:	6829      	ldr	r1, [r5, #0]
   822ce:	3118      	adds	r1, #24
   822d0:	4b0d      	ldr	r3, [pc, #52]	; (82308 <vTaskPlaceOnEventList+0x4c>)
   822d2:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   822d4:	6828      	ldr	r0, [r5, #0]
   822d6:	3004      	adds	r0, #4
   822d8:	4b0c      	ldr	r3, [pc, #48]	; (8230c <vTaskPlaceOnEventList+0x50>)
   822da:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   822dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   822e0:	429c      	cmp	r4, r3
   822e2:	d105      	bne.n	822f0 <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   822e4:	6829      	ldr	r1, [r5, #0]
   822e6:	480a      	ldr	r0, [pc, #40]	; (82310 <vTaskPlaceOnEventList+0x54>)
   822e8:	3104      	adds	r1, #4
   822ea:	4b0a      	ldr	r3, [pc, #40]	; (82314 <vTaskPlaceOnEventList+0x58>)
   822ec:	4798      	blx	r3
   822ee:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   822f0:	4b09      	ldr	r3, [pc, #36]	; (82318 <vTaskPlaceOnEventList+0x5c>)
   822f2:	8818      	ldrh	r0, [r3, #0]
   822f4:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   822f6:	b280      	uxth	r0, r0
   822f8:	4b08      	ldr	r3, [pc, #32]	; (8231c <vTaskPlaceOnEventList+0x60>)
   822fa:	4798      	blx	r3
   822fc:	bd38      	pop	{r3, r4, r5, pc}
   822fe:	bf00      	nop
   82300:	00081439 	.word	0x00081439
   82304:	20078b88 	.word	0x20078b88
   82308:	0008136d 	.word	0x0008136d
   8230c:	000813b1 	.word	0x000813b1
   82310:	20078a70 	.word	0x20078a70
   82314:	00081351 	.word	0x00081351
   82318:	20078ba4 	.word	0x20078ba4
   8231c:	00081bdd 	.word	0x00081bdd

00082320 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   82320:	b538      	push	{r3, r4, r5, lr}
   82322:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   82324:	b918      	cbnz	r0, 8232e <vTaskPlaceOnEventListRestricted+0xe>
   82326:	4b0a      	ldr	r3, [pc, #40]	; (82350 <vTaskPlaceOnEventListRestricted+0x30>)
   82328:	4798      	blx	r3
   8232a:	bf00      	nop
   8232c:	e7fd      	b.n	8232a <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8232e:	4c09      	ldr	r4, [pc, #36]	; (82354 <vTaskPlaceOnEventListRestricted+0x34>)
   82330:	6821      	ldr	r1, [r4, #0]
   82332:	3118      	adds	r1, #24
   82334:	4b08      	ldr	r3, [pc, #32]	; (82358 <vTaskPlaceOnEventListRestricted+0x38>)
   82336:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82338:	6820      	ldr	r0, [r4, #0]
   8233a:	3004      	adds	r0, #4
   8233c:	4b07      	ldr	r3, [pc, #28]	; (8235c <vTaskPlaceOnEventListRestricted+0x3c>)
   8233e:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   82340:	4b07      	ldr	r3, [pc, #28]	; (82360 <vTaskPlaceOnEventListRestricted+0x40>)
   82342:	8818      	ldrh	r0, [r3, #0]
   82344:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   82346:	b280      	uxth	r0, r0
   82348:	4b06      	ldr	r3, [pc, #24]	; (82364 <vTaskPlaceOnEventListRestricted+0x44>)
   8234a:	4798      	blx	r3
   8234c:	bd38      	pop	{r3, r4, r5, pc}
   8234e:	bf00      	nop
   82350:	00081439 	.word	0x00081439
   82354:	20078b88 	.word	0x20078b88
   82358:	00081351 	.word	0x00081351
   8235c:	000813b1 	.word	0x000813b1
   82360:	20078ba4 	.word	0x20078ba4
   82364:	00081bdd 	.word	0x00081bdd

00082368 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   82368:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8236a:	68c3      	ldr	r3, [r0, #12]
   8236c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8236e:	b91c      	cbnz	r4, 82378 <xTaskRemoveFromEventList+0x10>
   82370:	4b16      	ldr	r3, [pc, #88]	; (823cc <xTaskRemoveFromEventList+0x64>)
   82372:	4798      	blx	r3
   82374:	bf00      	nop
   82376:	e7fd      	b.n	82374 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   82378:	f104 0518 	add.w	r5, r4, #24
   8237c:	4628      	mov	r0, r5
   8237e:	4b14      	ldr	r3, [pc, #80]	; (823d0 <xTaskRemoveFromEventList+0x68>)
   82380:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82382:	4b14      	ldr	r3, [pc, #80]	; (823d4 <xTaskRemoveFromEventList+0x6c>)
   82384:	681b      	ldr	r3, [r3, #0]
   82386:	b99b      	cbnz	r3, 823b0 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   82388:	1d25      	adds	r5, r4, #4
   8238a:	4628      	mov	r0, r5
   8238c:	4b10      	ldr	r3, [pc, #64]	; (823d0 <xTaskRemoveFromEventList+0x68>)
   8238e:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   82390:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82392:	4a11      	ldr	r2, [pc, #68]	; (823d8 <xTaskRemoveFromEventList+0x70>)
   82394:	6812      	ldr	r2, [r2, #0]
   82396:	4293      	cmp	r3, r2
   82398:	bf84      	itt	hi
   8239a:	4a0f      	ldrhi	r2, [pc, #60]	; (823d8 <xTaskRemoveFromEventList+0x70>)
   8239c:	6013      	strhi	r3, [r2, #0]
   8239e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   823a2:	480e      	ldr	r0, [pc, #56]	; (823dc <xTaskRemoveFromEventList+0x74>)
   823a4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   823a8:	4629      	mov	r1, r5
   823aa:	4b0d      	ldr	r3, [pc, #52]	; (823e0 <xTaskRemoveFromEventList+0x78>)
   823ac:	4798      	blx	r3
   823ae:	e003      	b.n	823b8 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   823b0:	480c      	ldr	r0, [pc, #48]	; (823e4 <xTaskRemoveFromEventList+0x7c>)
   823b2:	4629      	mov	r1, r5
   823b4:	4b0a      	ldr	r3, [pc, #40]	; (823e0 <xTaskRemoveFromEventList+0x78>)
   823b6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   823b8:	4b0b      	ldr	r3, [pc, #44]	; (823e8 <xTaskRemoveFromEventList+0x80>)
   823ba:	681b      	ldr	r3, [r3, #0]
   823bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   823be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   823c0:	4298      	cmp	r0, r3
   823c2:	bf34      	ite	cc
   823c4:	2000      	movcc	r0, #0
   823c6:	2001      	movcs	r0, #1
   823c8:	bd38      	pop	{r3, r4, r5, pc}
   823ca:	bf00      	nop
   823cc:	00081439 	.word	0x00081439
   823d0:	000813b1 	.word	0x000813b1
   823d4:	20078b84 	.word	0x20078b84
   823d8:	20078ab8 	.word	0x20078ab8
   823dc:	20078abc 	.word	0x20078abc
   823e0:	00081351 	.word	0x00081351
   823e4:	20078b8c 	.word	0x20078b8c
   823e8:	20078b88 	.word	0x20078b88

000823ec <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   823ec:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   823ee:	b918      	cbnz	r0, 823f8 <vTaskSetTimeOutState+0xc>
   823f0:	4b05      	ldr	r3, [pc, #20]	; (82408 <vTaskSetTimeOutState+0x1c>)
   823f2:	4798      	blx	r3
   823f4:	bf00      	nop
   823f6:	e7fd      	b.n	823f4 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   823f8:	4a04      	ldr	r2, [pc, #16]	; (8240c <vTaskSetTimeOutState+0x20>)
   823fa:	6812      	ldr	r2, [r2, #0]
   823fc:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   823fe:	4a04      	ldr	r2, [pc, #16]	; (82410 <vTaskSetTimeOutState+0x24>)
   82400:	8812      	ldrh	r2, [r2, #0]
   82402:	8082      	strh	r2, [r0, #4]
   82404:	bd08      	pop	{r3, pc}
   82406:	bf00      	nop
   82408:	00081439 	.word	0x00081439
   8240c:	20078ba0 	.word	0x20078ba0
   82410:	20078ba4 	.word	0x20078ba4

00082414 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   82414:	b538      	push	{r3, r4, r5, lr}
   82416:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   82418:	4604      	mov	r4, r0
   8241a:	b918      	cbnz	r0, 82424 <xTaskCheckForTimeOut+0x10>
   8241c:	4b1a      	ldr	r3, [pc, #104]	; (82488 <xTaskCheckForTimeOut+0x74>)
   8241e:	4798      	blx	r3
   82420:	bf00      	nop
   82422:	e7fd      	b.n	82420 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   82424:	b919      	cbnz	r1, 8242e <xTaskCheckForTimeOut+0x1a>
   82426:	4b18      	ldr	r3, [pc, #96]	; (82488 <xTaskCheckForTimeOut+0x74>)
   82428:	4798      	blx	r3
   8242a:	bf00      	nop
   8242c:	e7fd      	b.n	8242a <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   8242e:	4b17      	ldr	r3, [pc, #92]	; (8248c <xTaskCheckForTimeOut+0x78>)
   82430:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   82432:	882b      	ldrh	r3, [r5, #0]
   82434:	f64f 72ff 	movw	r2, #65535	; 0xffff
   82438:	4293      	cmp	r3, r2
   8243a:	d01c      	beq.n	82476 <xTaskCheckForTimeOut+0x62>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   8243c:	4a14      	ldr	r2, [pc, #80]	; (82490 <xTaskCheckForTimeOut+0x7c>)
   8243e:	6811      	ldr	r1, [r2, #0]
   82440:	6822      	ldr	r2, [r4, #0]
   82442:	428a      	cmp	r2, r1
   82444:	d005      	beq.n	82452 <xTaskCheckForTimeOut+0x3e>
   82446:	4a13      	ldr	r2, [pc, #76]	; (82494 <xTaskCheckForTimeOut+0x80>)
   82448:	8812      	ldrh	r2, [r2, #0]
   8244a:	b292      	uxth	r2, r2
   8244c:	88a1      	ldrh	r1, [r4, #4]
   8244e:	4291      	cmp	r1, r2
   82450:	d913      	bls.n	8247a <xTaskCheckForTimeOut+0x66>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   82452:	4a10      	ldr	r2, [pc, #64]	; (82494 <xTaskCheckForTimeOut+0x80>)
   82454:	8811      	ldrh	r1, [r2, #0]
   82456:	88a2      	ldrh	r2, [r4, #4]
   82458:	1a89      	subs	r1, r1, r2
   8245a:	b289      	uxth	r1, r1
   8245c:	428b      	cmp	r3, r1
   8245e:	d90e      	bls.n	8247e <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   82460:	490c      	ldr	r1, [pc, #48]	; (82494 <xTaskCheckForTimeOut+0x80>)
   82462:	8809      	ldrh	r1, [r1, #0]
   82464:	b289      	uxth	r1, r1
   82466:	1a52      	subs	r2, r2, r1
   82468:	4413      	add	r3, r2
   8246a:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8246c:	4620      	mov	r0, r4
   8246e:	4b0a      	ldr	r3, [pc, #40]	; (82498 <xTaskCheckForTimeOut+0x84>)
   82470:	4798      	blx	r3
			xReturn = pdFALSE;
   82472:	2400      	movs	r4, #0
   82474:	e004      	b.n	82480 <xTaskCheckForTimeOut+0x6c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   82476:	2400      	movs	r4, #0
   82478:	e002      	b.n	82480 <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   8247a:	2401      	movs	r4, #1
   8247c:	e000      	b.n	82480 <xTaskCheckForTimeOut+0x6c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   8247e:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   82480:	4b06      	ldr	r3, [pc, #24]	; (8249c <xTaskCheckForTimeOut+0x88>)
   82482:	4798      	blx	r3

	return xReturn;
}
   82484:	4620      	mov	r0, r4
   82486:	bd38      	pop	{r3, r4, r5, pc}
   82488:	00081439 	.word	0x00081439
   8248c:	00081449 	.word	0x00081449
   82490:	20078ba0 	.word	0x20078ba0
   82494:	20078ba4 	.word	0x20078ba4
   82498:	000823ed 	.word	0x000823ed
   8249c:	00081469 	.word	0x00081469

000824a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   824a0:	2201      	movs	r2, #1
   824a2:	4b01      	ldr	r3, [pc, #4]	; (824a8 <vTaskMissedYield+0x8>)
   824a4:	601a      	str	r2, [r3, #0]
   824a6:	4770      	bx	lr
   824a8:	20078bc4 	.word	0x20078bc4

000824ac <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   824ac:	4b01      	ldr	r3, [pc, #4]	; (824b4 <xTaskGetCurrentTaskHandle+0x8>)
   824ae:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   824b0:	4770      	bx	lr
   824b2:	bf00      	nop
   824b4:	20078b88 	.word	0x20078b88

000824b8 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   824b8:	4b05      	ldr	r3, [pc, #20]	; (824d0 <xTaskGetSchedulerState+0x18>)
   824ba:	681b      	ldr	r3, [r3, #0]
   824bc:	b133      	cbz	r3, 824cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   824be:	4b05      	ldr	r3, [pc, #20]	; (824d4 <xTaskGetSchedulerState+0x1c>)
   824c0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   824c2:	2b00      	cmp	r3, #0
   824c4:	bf14      	ite	ne
   824c6:	2002      	movne	r0, #2
   824c8:	2001      	moveq	r0, #1
   824ca:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   824cc:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   824ce:	4770      	bx	lr
   824d0:	20078a88 	.word	0x20078a88
   824d4:	20078b84 	.word	0x20078b84

000824d8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   824d8:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   824da:	4604      	mov	r4, r0
   824dc:	2800      	cmp	r0, #0
   824de:	d02e      	beq.n	8253e <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   824e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   824e2:	4a17      	ldr	r2, [pc, #92]	; (82540 <vTaskPriorityInherit+0x68>)
   824e4:	6812      	ldr	r2, [r2, #0]
   824e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   824e8:	4293      	cmp	r3, r2
   824ea:	d228      	bcs.n	8253e <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   824ec:	4a14      	ldr	r2, [pc, #80]	; (82540 <vTaskPriorityInherit+0x68>)
   824ee:	6812      	ldr	r2, [r2, #0]
   824f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   824f2:	f1c2 020a 	rsb	r2, r2, #10
   824f6:	8302      	strh	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   824f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   824fc:	4a11      	ldr	r2, [pc, #68]	; (82544 <vTaskPriorityInherit+0x6c>)
   824fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   82502:	6942      	ldr	r2, [r0, #20]
   82504:	429a      	cmp	r2, r3
   82506:	d116      	bne.n	82536 <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82508:	1d05      	adds	r5, r0, #4
   8250a:	4628      	mov	r0, r5
   8250c:	4b0e      	ldr	r3, [pc, #56]	; (82548 <vTaskPriorityInherit+0x70>)
   8250e:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82510:	4b0b      	ldr	r3, [pc, #44]	; (82540 <vTaskPriorityInherit+0x68>)
   82512:	681b      	ldr	r3, [r3, #0]
   82514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82516:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   82518:	4a0c      	ldr	r2, [pc, #48]	; (8254c <vTaskPriorityInherit+0x74>)
   8251a:	6812      	ldr	r2, [r2, #0]
   8251c:	4293      	cmp	r3, r2
   8251e:	bf84      	itt	hi
   82520:	4a0a      	ldrhi	r2, [pc, #40]	; (8254c <vTaskPriorityInherit+0x74>)
   82522:	6013      	strhi	r3, [r2, #0]
   82524:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82528:	4806      	ldr	r0, [pc, #24]	; (82544 <vTaskPriorityInherit+0x6c>)
   8252a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8252e:	4629      	mov	r1, r5
   82530:	4b07      	ldr	r3, [pc, #28]	; (82550 <vTaskPriorityInherit+0x78>)
   82532:	4798      	blx	r3
   82534:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82536:	4b02      	ldr	r3, [pc, #8]	; (82540 <vTaskPriorityInherit+0x68>)
   82538:	681b      	ldr	r3, [r3, #0]
   8253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8253c:	62c3      	str	r3, [r0, #44]	; 0x2c
   8253e:	bd38      	pop	{r3, r4, r5, pc}
   82540:	20078b88 	.word	0x20078b88
   82544:	20078abc 	.word	0x20078abc
   82548:	000813b1 	.word	0x000813b1
   8254c:	20078ab8 	.word	0x20078ab8
   82550:	00081351 	.word	0x00081351

00082554 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82554:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   82556:	4604      	mov	r4, r0
   82558:	b1d0      	cbz	r0, 82590 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   8255a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   8255c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8255e:	429a      	cmp	r2, r3
   82560:	d016      	beq.n	82590 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82562:	1d05      	adds	r5, r0, #4
   82564:	4628      	mov	r0, r5
   82566:	4b0b      	ldr	r3, [pc, #44]	; (82594 <vTaskPriorityDisinherit+0x40>)
   82568:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   8256a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   8256c:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   8256e:	f1c3 020a 	rsb	r2, r3, #10
   82572:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82574:	4a08      	ldr	r2, [pc, #32]	; (82598 <vTaskPriorityDisinherit+0x44>)
   82576:	6812      	ldr	r2, [r2, #0]
   82578:	4293      	cmp	r3, r2
   8257a:	bf84      	itt	hi
   8257c:	4a06      	ldrhi	r2, [pc, #24]	; (82598 <vTaskPriorityDisinherit+0x44>)
   8257e:	6013      	strhi	r3, [r2, #0]
   82580:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82584:	4805      	ldr	r0, [pc, #20]	; (8259c <vTaskPriorityDisinherit+0x48>)
   82586:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8258a:	4629      	mov	r1, r5
   8258c:	4b04      	ldr	r3, [pc, #16]	; (825a0 <vTaskPriorityDisinherit+0x4c>)
   8258e:	4798      	blx	r3
   82590:	bd38      	pop	{r3, r4, r5, pc}
   82592:	bf00      	nop
   82594:	000813b1 	.word	0x000813b1
   82598:	20078ab8 	.word	0x20078ab8
   8259c:	20078abc 	.word	0x20078abc
   825a0:	00081351 	.word	0x00081351

000825a4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   825a4:	b510      	push	{r4, lr}
   825a6:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   825a8:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   825aa:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   825ac:	4291      	cmp	r1, r2
   825ae:	d80b      	bhi.n	825c8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   825b0:	1ad3      	subs	r3, r2, r3
   825b2:	8b01      	ldrh	r1, [r0, #24]
   825b4:	b29b      	uxth	r3, r3
   825b6:	4299      	cmp	r1, r3
   825b8:	d911      	bls.n	825de <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   825ba:	4b0b      	ldr	r3, [pc, #44]	; (825e8 <prvInsertTimerInActiveList+0x44>)
   825bc:	6818      	ldr	r0, [r3, #0]
   825be:	1d21      	adds	r1, r4, #4
   825c0:	4b0a      	ldr	r3, [pc, #40]	; (825ec <prvInsertTimerInActiveList+0x48>)
   825c2:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   825c4:	2000      	movs	r0, #0
   825c6:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   825c8:	429a      	cmp	r2, r3
   825ca:	d201      	bcs.n	825d0 <prvInsertTimerInActiveList+0x2c>
   825cc:	4299      	cmp	r1, r3
   825ce:	d208      	bcs.n	825e2 <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   825d0:	4b07      	ldr	r3, [pc, #28]	; (825f0 <prvInsertTimerInActiveList+0x4c>)
   825d2:	6818      	ldr	r0, [r3, #0]
   825d4:	1d21      	adds	r1, r4, #4
   825d6:	4b05      	ldr	r3, [pc, #20]	; (825ec <prvInsertTimerInActiveList+0x48>)
   825d8:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   825da:	2000      	movs	r0, #0
   825dc:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   825de:	2001      	movs	r0, #1
   825e0:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   825e2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   825e4:	bd10      	pop	{r4, pc}
   825e6:	bf00      	nop
   825e8:	20078c04 	.word	0x20078c04
   825ec:	0008136d 	.word	0x0008136d
   825f0:	20078bd0 	.word	0x20078bd0

000825f4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   825f4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   825f6:	4b0d      	ldr	r3, [pc, #52]	; (8262c <prvCheckForValidListAndQueue+0x38>)
   825f8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   825fa:	4b0d      	ldr	r3, [pc, #52]	; (82630 <prvCheckForValidListAndQueue+0x3c>)
   825fc:	681b      	ldr	r3, [r3, #0]
   825fe:	b98b      	cbnz	r3, 82624 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   82600:	4d0c      	ldr	r5, [pc, #48]	; (82634 <prvCheckForValidListAndQueue+0x40>)
   82602:	4628      	mov	r0, r5
   82604:	4e0c      	ldr	r6, [pc, #48]	; (82638 <prvCheckForValidListAndQueue+0x44>)
   82606:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82608:	4c0c      	ldr	r4, [pc, #48]	; (8263c <prvCheckForValidListAndQueue+0x48>)
   8260a:	4620      	mov	r0, r4
   8260c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8260e:	4b0c      	ldr	r3, [pc, #48]	; (82640 <prvCheckForValidListAndQueue+0x4c>)
   82610:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   82612:	4b0c      	ldr	r3, [pc, #48]	; (82644 <prvCheckForValidListAndQueue+0x50>)
   82614:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82616:	2005      	movs	r0, #5
   82618:	210c      	movs	r1, #12
   8261a:	2200      	movs	r2, #0
   8261c:	4b0a      	ldr	r3, [pc, #40]	; (82648 <prvCheckForValidListAndQueue+0x54>)
   8261e:	4798      	blx	r3
   82620:	4b03      	ldr	r3, [pc, #12]	; (82630 <prvCheckForValidListAndQueue+0x3c>)
   82622:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   82624:	4b09      	ldr	r3, [pc, #36]	; (8264c <prvCheckForValidListAndQueue+0x58>)
   82626:	4798      	blx	r3
   82628:	bd70      	pop	{r4, r5, r6, pc}
   8262a:	bf00      	nop
   8262c:	00081449 	.word	0x00081449
   82630:	20078c00 	.word	0x20078c00
   82634:	20078bd4 	.word	0x20078bd4
   82638:	00081331 	.word	0x00081331
   8263c:	20078be8 	.word	0x20078be8
   82640:	20078bd0 	.word	0x20078bd0
   82644:	20078c04 	.word	0x20078c04
   82648:	00081821 	.word	0x00081821
   8264c:	00081469 	.word	0x00081469

00082650 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   82650:	b510      	push	{r4, lr}
   82652:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82654:	4b0b      	ldr	r3, [pc, #44]	; (82684 <xTimerCreateTimerTask+0x34>)
   82656:	4798      	blx	r3

	if( xTimerQueue != NULL )
   82658:	4b0b      	ldr	r3, [pc, #44]	; (82688 <xTimerCreateTimerTask+0x38>)
   8265a:	681b      	ldr	r3, [r3, #0]
   8265c:	b163      	cbz	r3, 82678 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8265e:	2309      	movs	r3, #9
   82660:	9300      	str	r3, [sp, #0]
   82662:	2300      	movs	r3, #0
   82664:	9301      	str	r3, [sp, #4]
   82666:	9302      	str	r3, [sp, #8]
   82668:	9303      	str	r3, [sp, #12]
   8266a:	4808      	ldr	r0, [pc, #32]	; (8268c <xTimerCreateTimerTask+0x3c>)
   8266c:	4908      	ldr	r1, [pc, #32]	; (82690 <xTimerCreateTimerTask+0x40>)
   8266e:	f44f 7200 	mov.w	r2, #512	; 0x200
   82672:	4c08      	ldr	r4, [pc, #32]	; (82694 <xTimerCreateTimerTask+0x44>)
   82674:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82676:	b918      	cbnz	r0, 82680 <xTimerCreateTimerTask+0x30>
   82678:	4b07      	ldr	r3, [pc, #28]	; (82698 <xTimerCreateTimerTask+0x48>)
   8267a:	4798      	blx	r3
   8267c:	bf00      	nop
   8267e:	e7fd      	b.n	8267c <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   82680:	b004      	add	sp, #16
   82682:	bd10      	pop	{r4, pc}
   82684:	000825f5 	.word	0x000825f5
   82688:	20078c00 	.word	0x20078c00
   8268c:	000827b1 	.word	0x000827b1
   82690:	000870e8 	.word	0x000870e8
   82694:	00081c39 	.word	0x00081c39
   82698:	00081439 	.word	0x00081439

0008269c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   8269c:	b510      	push	{r4, lr}
   8269e:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   826a0:	4c10      	ldr	r4, [pc, #64]	; (826e4 <xTimerGenericCommand+0x48>)
   826a2:	6824      	ldr	r4, [r4, #0]
   826a4:	b1d4      	cbz	r4, 826dc <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   826a6:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   826a8:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   826ac:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   826ae:	b973      	cbnz	r3, 826ce <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   826b0:	4b0d      	ldr	r3, [pc, #52]	; (826e8 <xTimerGenericCommand+0x4c>)
   826b2:	4798      	blx	r3
   826b4:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   826b6:	4b0b      	ldr	r3, [pc, #44]	; (826e4 <xTimerGenericCommand+0x48>)
   826b8:	6818      	ldr	r0, [r3, #0]
   826ba:	a901      	add	r1, sp, #4
   826bc:	bf07      	ittee	eq
   826be:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   826c2:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   826c4:	2200      	movne	r2, #0
   826c6:	4613      	movne	r3, r2
   826c8:	4c08      	ldr	r4, [pc, #32]	; (826ec <xTimerGenericCommand+0x50>)
   826ca:	47a0      	blx	r4
   826cc:	e007      	b.n	826de <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   826ce:	4620      	mov	r0, r4
   826d0:	a901      	add	r1, sp, #4
   826d2:	461a      	mov	r2, r3
   826d4:	2300      	movs	r3, #0
   826d6:	4c06      	ldr	r4, [pc, #24]	; (826f0 <xTimerGenericCommand+0x54>)
   826d8:	47a0      	blx	r4
   826da:	e000      	b.n	826de <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   826dc:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   826de:	b004      	add	sp, #16
   826e0:	bd10      	pop	{r4, pc}
   826e2:	bf00      	nop
   826e4:	20078c00 	.word	0x20078c00
   826e8:	000824b9 	.word	0x000824b9
   826ec:	00081879 	.word	0x00081879
   826f0:	0008199d 	.word	0x0008199d

000826f4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   826f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   826f8:	b082      	sub	sp, #8
   826fa:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   826fc:	4b24      	ldr	r3, [pc, #144]	; (82790 <prvSampleTimeNow+0x9c>)
   826fe:	4798      	blx	r3
   82700:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   82702:	4b24      	ldr	r3, [pc, #144]	; (82794 <prvSampleTimeNow+0xa0>)
   82704:	881b      	ldrh	r3, [r3, #0]
   82706:	4283      	cmp	r3, r0
   82708:	d937      	bls.n	8277a <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8270a:	4e23      	ldr	r6, [pc, #140]	; (82798 <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8270c:	4f23      	ldr	r7, [pc, #140]	; (8279c <prvSampleTimeNow+0xa8>)
   8270e:	e027      	b.n	82760 <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82710:	68da      	ldr	r2, [r3, #12]
   82712:	f8b2 a000 	ldrh.w	sl, [r2]
   82716:	fa1f fa8a 	uxth.w	sl, sl

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8271a:	68db      	ldr	r3, [r3, #12]
   8271c:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8271e:	1d25      	adds	r5, r4, #4
   82720:	4628      	mov	r0, r5
   82722:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82724:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82726:	4620      	mov	r0, r4
   82728:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8272a:	69e3      	ldr	r3, [r4, #28]
   8272c:	2b01      	cmp	r3, #1
   8272e:	d117      	bne.n	82760 <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82730:	8b23      	ldrh	r3, [r4, #24]
   82732:	4453      	add	r3, sl
   82734:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   82736:	4553      	cmp	r3, sl
   82738:	d906      	bls.n	82748 <prvSampleTimeNow+0x54>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   8273a:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8273c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8273e:	6830      	ldr	r0, [r6, #0]
   82740:	4629      	mov	r1, r5
   82742:	4b17      	ldr	r3, [pc, #92]	; (827a0 <prvSampleTimeNow+0xac>)
   82744:	4798      	blx	r3
   82746:	e00b      	b.n	82760 <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82748:	2300      	movs	r3, #0
   8274a:	9300      	str	r3, [sp, #0]
   8274c:	4620      	mov	r0, r4
   8274e:	4619      	mov	r1, r3
   82750:	4652      	mov	r2, sl
   82752:	4c14      	ldr	r4, [pc, #80]	; (827a4 <prvSampleTimeNow+0xb0>)
   82754:	47a0      	blx	r4
				configASSERT( xResult );
   82756:	b918      	cbnz	r0, 82760 <prvSampleTimeNow+0x6c>
   82758:	4b13      	ldr	r3, [pc, #76]	; (827a8 <prvSampleTimeNow+0xb4>)
   8275a:	4798      	blx	r3
   8275c:	bf00      	nop
   8275e:	e7fd      	b.n	8275c <prvSampleTimeNow+0x68>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82760:	6833      	ldr	r3, [r6, #0]
   82762:	681a      	ldr	r2, [r3, #0]
   82764:	2a00      	cmp	r2, #0
   82766:	d1d3      	bne.n	82710 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82768:	4a10      	ldr	r2, [pc, #64]	; (827ac <prvSampleTimeNow+0xb8>)
   8276a:	6811      	ldr	r1, [r2, #0]
   8276c:	480a      	ldr	r0, [pc, #40]	; (82798 <prvSampleTimeNow+0xa4>)
   8276e:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82770:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82772:	2301      	movs	r3, #1
   82774:	f8c9 3000 	str.w	r3, [r9]
   82778:	e002      	b.n	82780 <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   8277a:	2300      	movs	r3, #0
   8277c:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   82780:	4b04      	ldr	r3, [pc, #16]	; (82794 <prvSampleTimeNow+0xa0>)
   82782:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   82786:	4640      	mov	r0, r8
   82788:	b002      	add	sp, #8
   8278a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8278e:	bf00      	nop
   82790:	00081ebd 	.word	0x00081ebd
   82794:	20078bfc 	.word	0x20078bfc
   82798:	20078bd0 	.word	0x20078bd0
   8279c:	000813b1 	.word	0x000813b1
   827a0:	0008136d 	.word	0x0008136d
   827a4:	0008269d 	.word	0x0008269d
   827a8:	00081439 	.word	0x00081439
   827ac:	20078c04 	.word	0x20078c04

000827b0 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   827b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   827b4:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   827b6:	4d51      	ldr	r5, [pc, #324]	; (828fc <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   827b8:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8292c <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   827bc:	4b50      	ldr	r3, [pc, #320]	; (82900 <prvTimerTask+0x150>)
   827be:	681b      	ldr	r3, [r3, #0]
   827c0:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   827c2:	2a00      	cmp	r2, #0
   827c4:	f000 8090 	beq.w	828e8 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   827c8:	68db      	ldr	r3, [r3, #12]
   827ca:	881e      	ldrh	r6, [r3, #0]
   827cc:	b2b6      	uxth	r6, r6
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   827ce:	4b4d      	ldr	r3, [pc, #308]	; (82904 <prvTimerTask+0x154>)
   827d0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   827d2:	a803      	add	r0, sp, #12
   827d4:	4b4c      	ldr	r3, [pc, #304]	; (82908 <prvTimerTask+0x158>)
   827d6:	4798      	blx	r3
   827d8:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   827da:	9b03      	ldr	r3, [sp, #12]
   827dc:	2b00      	cmp	r3, #0
   827de:	d132      	bne.n	82846 <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   827e0:	4286      	cmp	r6, r0
   827e2:	d825      	bhi.n	82830 <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   827e4:	4b49      	ldr	r3, [pc, #292]	; (8290c <prvTimerTask+0x15c>)
   827e6:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   827e8:	4b45      	ldr	r3, [pc, #276]	; (82900 <prvTimerTask+0x150>)
   827ea:	681b      	ldr	r3, [r3, #0]
   827ec:	68db      	ldr	r3, [r3, #12]
   827ee:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   827f0:	1d20      	adds	r0, r4, #4
   827f2:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   827f4:	69e3      	ldr	r3, [r4, #28]
   827f6:	2b01      	cmp	r3, #1
   827f8:	d115      	bne.n	82826 <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   827fa:	8b21      	ldrh	r1, [r4, #24]
   827fc:	4431      	add	r1, r6
   827fe:	4620      	mov	r0, r4
   82800:	b289      	uxth	r1, r1
   82802:	463a      	mov	r2, r7
   82804:	4633      	mov	r3, r6
   82806:	4f42      	ldr	r7, [pc, #264]	; (82910 <prvTimerTask+0x160>)
   82808:	47b8      	blx	r7
   8280a:	2801      	cmp	r0, #1
   8280c:	d10b      	bne.n	82826 <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8280e:	2300      	movs	r3, #0
   82810:	9300      	str	r3, [sp, #0]
   82812:	4620      	mov	r0, r4
   82814:	4619      	mov	r1, r3
   82816:	4632      	mov	r2, r6
   82818:	4e3e      	ldr	r6, [pc, #248]	; (82914 <prvTimerTask+0x164>)
   8281a:	47b0      	blx	r6
			configASSERT( xResult );
   8281c:	b918      	cbnz	r0, 82826 <prvTimerTask+0x76>
   8281e:	4b3e      	ldr	r3, [pc, #248]	; (82918 <prvTimerTask+0x168>)
   82820:	4798      	blx	r3
   82822:	bf00      	nop
   82824:	e7fd      	b.n	82822 <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82826:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82828:	4620      	mov	r0, r4
   8282a:	4798      	blx	r3
   8282c:	e00d      	b.n	8284a <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   8282e:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82830:	1bf1      	subs	r1, r6, r7
   82832:	6828      	ldr	r0, [r5, #0]
   82834:	b289      	uxth	r1, r1
   82836:	4b39      	ldr	r3, [pc, #228]	; (8291c <prvTimerTask+0x16c>)
   82838:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   8283a:	4b34      	ldr	r3, [pc, #208]	; (8290c <prvTimerTask+0x15c>)
   8283c:	4798      	blx	r3
   8283e:	b920      	cbnz	r0, 8284a <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82840:	4b37      	ldr	r3, [pc, #220]	; (82920 <prvTimerTask+0x170>)
   82842:	4798      	blx	r3
   82844:	e001      	b.n	8284a <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   82846:	4b31      	ldr	r3, [pc, #196]	; (8290c <prvTimerTask+0x15c>)
   82848:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8284a:	a802      	add	r0, sp, #8
   8284c:	4b2e      	ldr	r3, [pc, #184]	; (82908 <prvTimerTask+0x158>)
   8284e:	4798      	blx	r3
   82850:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82852:	4e34      	ldr	r6, [pc, #208]	; (82924 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82854:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 82910 <prvTimerTask+0x160>
   82858:	e03e      	b.n	828d8 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   8285a:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   8285c:	b11c      	cbz	r4, 82866 <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   8285e:	6961      	ldr	r1, [r4, #20]
   82860:	b109      	cbz	r1, 82866 <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82862:	1d20      	adds	r0, r4, #4
   82864:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   82866:	9903      	ldr	r1, [sp, #12]
   82868:	2902      	cmp	r1, #2
   8286a:	d023      	beq.n	828b4 <prvTimerTask+0x104>
   8286c:	2903      	cmp	r1, #3
   8286e:	d030      	beq.n	828d2 <prvTimerTask+0x122>
   82870:	2900      	cmp	r1, #0
   82872:	d131      	bne.n	828d8 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82874:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82878:	8b21      	ldrh	r1, [r4, #24]
   8287a:	4419      	add	r1, r3
   8287c:	4620      	mov	r0, r4
   8287e:	b289      	uxth	r1, r1
   82880:	463a      	mov	r2, r7
   82882:	47c8      	blx	r9
   82884:	2801      	cmp	r0, #1
   82886:	d127      	bne.n	828d8 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82888:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8288a:	4620      	mov	r0, r4
   8288c:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8288e:	69e3      	ldr	r3, [r4, #28]
   82890:	2b01      	cmp	r3, #1
   82892:	d121      	bne.n	828d8 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82894:	8b22      	ldrh	r2, [r4, #24]
   82896:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   8289a:	441a      	add	r2, r3
   8289c:	2300      	movs	r3, #0
   8289e:	9300      	str	r3, [sp, #0]
   828a0:	4620      	mov	r0, r4
   828a2:	4619      	mov	r1, r3
   828a4:	b292      	uxth	r2, r2
   828a6:	4c1b      	ldr	r4, [pc, #108]	; (82914 <prvTimerTask+0x164>)
   828a8:	47a0      	blx	r4
						configASSERT( xResult );
   828aa:	b9a8      	cbnz	r0, 828d8 <prvTimerTask+0x128>
   828ac:	4b1a      	ldr	r3, [pc, #104]	; (82918 <prvTimerTask+0x168>)
   828ae:	4798      	blx	r3
   828b0:	bf00      	nop
   828b2:	e7fd      	b.n	828b0 <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   828b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   828b8:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   828ba:	b91b      	cbnz	r3, 828c4 <prvTimerTask+0x114>
   828bc:	4b16      	ldr	r3, [pc, #88]	; (82918 <prvTimerTask+0x168>)
   828be:	4798      	blx	r3
   828c0:	bf00      	nop
   828c2:	e7fd      	b.n	828c0 <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   828c4:	18f9      	adds	r1, r7, r3
   828c6:	4620      	mov	r0, r4
   828c8:	b289      	uxth	r1, r1
   828ca:	463a      	mov	r2, r7
   828cc:	463b      	mov	r3, r7
   828ce:	47c8      	blx	r9
   828d0:	e002      	b.n	828d8 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   828d2:	4620      	mov	r0, r4
   828d4:	4b14      	ldr	r3, [pc, #80]	; (82928 <prvTimerTask+0x178>)
   828d6:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   828d8:	6828      	ldr	r0, [r5, #0]
   828da:	a903      	add	r1, sp, #12
   828dc:	2200      	movs	r2, #0
   828de:	4613      	mov	r3, r2
   828e0:	47b0      	blx	r6
   828e2:	2800      	cmp	r0, #0
   828e4:	d1b9      	bne.n	8285a <prvTimerTask+0xaa>
   828e6:	e769      	b.n	827bc <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   828e8:	4b06      	ldr	r3, [pc, #24]	; (82904 <prvTimerTask+0x154>)
   828ea:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   828ec:	a803      	add	r0, sp, #12
   828ee:	4b06      	ldr	r3, [pc, #24]	; (82908 <prvTimerTask+0x158>)
   828f0:	4798      	blx	r3
   828f2:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   828f4:	9b03      	ldr	r3, [sp, #12]
   828f6:	2b00      	cmp	r3, #0
   828f8:	d099      	beq.n	8282e <prvTimerTask+0x7e>
   828fa:	e7a4      	b.n	82846 <prvTimerTask+0x96>
   828fc:	20078c00 	.word	0x20078c00
   82900:	20078bd0 	.word	0x20078bd0
   82904:	00081ead 	.word	0x00081ead
   82908:	000826f5 	.word	0x000826f5
   8290c:	00082009 	.word	0x00082009
   82910:	000825a5 	.word	0x000825a5
   82914:	0008269d 	.word	0x0008269d
   82918:	00081439 	.word	0x00081439
   8291c:	00081b91 	.word	0x00081b91
   82920:	00081429 	.word	0x00081429
   82924:	00081a2d 	.word	0x00081a2d
   82928:	00081659 	.word	0x00081659
   8292c:	000813b1 	.word	0x000813b1

00082930 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82930:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82932:	480e      	ldr	r0, [pc, #56]	; (8296c <sysclk_init+0x3c>)
   82934:	4b0e      	ldr	r3, [pc, #56]	; (82970 <sysclk_init+0x40>)
   82936:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82938:	2000      	movs	r0, #0
   8293a:	213e      	movs	r1, #62	; 0x3e
   8293c:	4b0d      	ldr	r3, [pc, #52]	; (82974 <sysclk_init+0x44>)
   8293e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82940:	4c0d      	ldr	r4, [pc, #52]	; (82978 <sysclk_init+0x48>)
   82942:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82944:	2800      	cmp	r0, #0
   82946:	d0fc      	beq.n	82942 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82948:	4b0c      	ldr	r3, [pc, #48]	; (8297c <sysclk_init+0x4c>)
   8294a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8294c:	4a0c      	ldr	r2, [pc, #48]	; (82980 <sysclk_init+0x50>)
   8294e:	4b0d      	ldr	r3, [pc, #52]	; (82984 <sysclk_init+0x54>)
   82950:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82952:	4c0d      	ldr	r4, [pc, #52]	; (82988 <sysclk_init+0x58>)
   82954:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82956:	2800      	cmp	r0, #0
   82958:	d0fc      	beq.n	82954 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8295a:	2010      	movs	r0, #16
   8295c:	4b0b      	ldr	r3, [pc, #44]	; (8298c <sysclk_init+0x5c>)
   8295e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82960:	4b0b      	ldr	r3, [pc, #44]	; (82990 <sysclk_init+0x60>)
   82962:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82964:	4801      	ldr	r0, [pc, #4]	; (8296c <sysclk_init+0x3c>)
   82966:	4b02      	ldr	r3, [pc, #8]	; (82970 <sysclk_init+0x40>)
   82968:	4798      	blx	r3
   8296a:	bd10      	pop	{r4, pc}
   8296c:	0501bd00 	.word	0x0501bd00
   82970:	200700a5 	.word	0x200700a5
   82974:	00082db5 	.word	0x00082db5
   82978:	00082e09 	.word	0x00082e09
   8297c:	00082e19 	.word	0x00082e19
   82980:	200d3f01 	.word	0x200d3f01
   82984:	400e0600 	.word	0x400e0600
   82988:	00082e29 	.word	0x00082e29
   8298c:	00082d51 	.word	0x00082d51
   82990:	00082f45 	.word	0x00082f45

00082994 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82994:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82996:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8299a:	4b13      	ldr	r3, [pc, #76]	; (829e8 <board_init+0x54>)
   8299c:	605a      	str	r2, [r3, #4]
   8299e:	200b      	movs	r0, #11
   829a0:	4c12      	ldr	r4, [pc, #72]	; (829ec <board_init+0x58>)
   829a2:	47a0      	blx	r4
   829a4:	200c      	movs	r0, #12
   829a6:	47a0      	blx	r4
   829a8:	200d      	movs	r0, #13
   829aa:	47a0      	blx	r4
   829ac:	200e      	movs	r0, #14
   829ae:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   829b0:	203b      	movs	r0, #59	; 0x3b
   829b2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   829b6:	4c0e      	ldr	r4, [pc, #56]	; (829f0 <board_init+0x5c>)
   829b8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   829ba:	2055      	movs	r0, #85	; 0x55
   829bc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   829c0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   829c2:	2056      	movs	r0, #86	; 0x56
   829c4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   829c8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   829ca:	2068      	movs	r0, #104	; 0x68
   829cc:	4909      	ldr	r1, [pc, #36]	; (829f4 <board_init+0x60>)
   829ce:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   829d0:	205c      	movs	r0, #92	; 0x5c
   829d2:	4909      	ldr	r1, [pc, #36]	; (829f8 <board_init+0x64>)
   829d4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   829d6:	4809      	ldr	r0, [pc, #36]	; (829fc <board_init+0x68>)
   829d8:	f44f 7140 	mov.w	r1, #768	; 0x300
   829dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   829e0:	4b07      	ldr	r3, [pc, #28]	; (82a00 <board_init+0x6c>)
   829e2:	4798      	blx	r3
   829e4:	bd10      	pop	{r4, pc}
   829e6:	bf00      	nop
   829e8:	400e1a50 	.word	0x400e1a50
   829ec:	00082e39 	.word	0x00082e39
   829f0:	00082af9 	.word	0x00082af9
   829f4:	28000079 	.word	0x28000079
   829f8:	28000001 	.word	0x28000001
   829fc:	400e0e00 	.word	0x400e0e00
   82a00:	00082bcd 	.word	0x00082bcd

00082a04 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   82a04:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   82a08:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   82a0c:	bf0c      	ite	eq
   82a0e:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   82a10:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   82a12:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   82a14:	bf0c      	ite	eq
   82a16:	2000      	moveq	r0, #0
   82a18:	2001      	movne	r0, #1
   82a1a:	4770      	bx	lr

00082a1c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82a1c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82a1e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82a22:	d016      	beq.n	82a52 <pio_set_peripheral+0x36>
   82a24:	d804      	bhi.n	82a30 <pio_set_peripheral+0x14>
   82a26:	b1c1      	cbz	r1, 82a5a <pio_set_peripheral+0x3e>
   82a28:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82a2c:	d00a      	beq.n	82a44 <pio_set_peripheral+0x28>
   82a2e:	e013      	b.n	82a58 <pio_set_peripheral+0x3c>
   82a30:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82a34:	d011      	beq.n	82a5a <pio_set_peripheral+0x3e>
   82a36:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82a3a:	d00e      	beq.n	82a5a <pio_set_peripheral+0x3e>
   82a3c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82a40:	d10a      	bne.n	82a58 <pio_set_peripheral+0x3c>
   82a42:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82a44:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82a46:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82a48:	400b      	ands	r3, r1
   82a4a:	ea23 0302 	bic.w	r3, r3, r2
   82a4e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82a50:	e002      	b.n	82a58 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82a52:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82a54:	4313      	orrs	r3, r2
   82a56:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82a58:	6042      	str	r2, [r0, #4]
   82a5a:	4770      	bx	lr

00082a5c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82a5c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82a5e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82a62:	bf14      	ite	ne
   82a64:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82a66:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82a68:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82a6c:	bf14      	ite	ne
   82a6e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82a70:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82a72:	f012 0f02 	tst.w	r2, #2
   82a76:	d002      	beq.n	82a7e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82a78:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82a7c:	e004      	b.n	82a88 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82a7e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82a82:	bf18      	it	ne
   82a84:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82a88:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82a8a:	6001      	str	r1, [r0, #0]
   82a8c:	4770      	bx	lr
   82a8e:	bf00      	nop

00082a90 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82a90:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82a92:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82a94:	9c01      	ldr	r4, [sp, #4]
   82a96:	b10c      	cbz	r4, 82a9c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   82a98:	6641      	str	r1, [r0, #100]	; 0x64
   82a9a:	e000      	b.n	82a9e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82a9c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82a9e:	b10b      	cbz	r3, 82aa4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82aa0:	6501      	str	r1, [r0, #80]	; 0x50
   82aa2:	e000      	b.n	82aa6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82aa4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82aa6:	b10a      	cbz	r2, 82aac <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82aa8:	6301      	str	r1, [r0, #48]	; 0x30
   82aaa:	e000      	b.n	82aae <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82aac:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82aae:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82ab0:	6001      	str	r1, [r0, #0]
}
   82ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
   82ab6:	4770      	bx	lr

00082ab8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   82ab8:	f012 0f10 	tst.w	r2, #16
   82abc:	d010      	beq.n	82ae0 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   82abe:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   82ac2:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   82ac6:	bf14      	ite	ne
   82ac8:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   82acc:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   82ad0:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   82ad4:	bf14      	ite	ne
   82ad6:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   82ada:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   82ade:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   82ae0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   82ae4:	4770      	bx	lr
   82ae6:	bf00      	nop

00082ae8 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   82ae8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   82aea:	6401      	str	r1, [r0, #64]	; 0x40
   82aec:	4770      	bx	lr
   82aee:	bf00      	nop

00082af0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82af0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82af2:	4770      	bx	lr

00082af4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82af4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82af6:	4770      	bx	lr

00082af8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82af8:	b570      	push	{r4, r5, r6, lr}
   82afa:	b082      	sub	sp, #8
   82afc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82afe:	0944      	lsrs	r4, r0, #5
   82b00:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   82b04:	f204 7407 	addw	r4, r4, #1799	; 0x707
   82b08:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82b0a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   82b0e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82b12:	d030      	beq.n	82b76 <pio_configure_pin+0x7e>
   82b14:	d806      	bhi.n	82b24 <pio_configure_pin+0x2c>
   82b16:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82b1a:	d00a      	beq.n	82b32 <pio_configure_pin+0x3a>
   82b1c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82b20:	d018      	beq.n	82b54 <pio_configure_pin+0x5c>
   82b22:	e049      	b.n	82bb8 <pio_configure_pin+0xc0>
   82b24:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82b28:	d030      	beq.n	82b8c <pio_configure_pin+0x94>
   82b2a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82b2e:	d02d      	beq.n	82b8c <pio_configure_pin+0x94>
   82b30:	e042      	b.n	82bb8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82b32:	f000 001f 	and.w	r0, r0, #31
   82b36:	2401      	movs	r4, #1
   82b38:	4084      	lsls	r4, r0
   82b3a:	4630      	mov	r0, r6
   82b3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b40:	4622      	mov	r2, r4
   82b42:	4b1f      	ldr	r3, [pc, #124]	; (82bc0 <pio_configure_pin+0xc8>)
   82b44:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82b46:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82b4a:	bf14      	ite	ne
   82b4c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82b4e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82b50:	2001      	movs	r0, #1
   82b52:	e032      	b.n	82bba <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82b54:	f000 001f 	and.w	r0, r0, #31
   82b58:	2401      	movs	r4, #1
   82b5a:	4084      	lsls	r4, r0
   82b5c:	4630      	mov	r0, r6
   82b5e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82b62:	4622      	mov	r2, r4
   82b64:	4b16      	ldr	r3, [pc, #88]	; (82bc0 <pio_configure_pin+0xc8>)
   82b66:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82b68:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82b6c:	bf14      	ite	ne
   82b6e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82b70:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82b72:	2001      	movs	r0, #1
   82b74:	e021      	b.n	82bba <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82b76:	f000 011f 	and.w	r1, r0, #31
   82b7a:	2401      	movs	r4, #1
   82b7c:	4630      	mov	r0, r6
   82b7e:	fa04 f101 	lsl.w	r1, r4, r1
   82b82:	462a      	mov	r2, r5
   82b84:	4b0f      	ldr	r3, [pc, #60]	; (82bc4 <pio_configure_pin+0xcc>)
   82b86:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82b88:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   82b8a:	e016      	b.n	82bba <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82b8c:	f000 011f 	and.w	r1, r0, #31
   82b90:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82b92:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82b96:	ea05 0304 	and.w	r3, r5, r4
   82b9a:	9300      	str	r3, [sp, #0]
   82b9c:	4630      	mov	r0, r6
   82b9e:	fa04 f101 	lsl.w	r1, r4, r1
   82ba2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82ba6:	bf14      	ite	ne
   82ba8:	2200      	movne	r2, #0
   82baa:	2201      	moveq	r2, #1
   82bac:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82bb0:	4d05      	ldr	r5, [pc, #20]	; (82bc8 <pio_configure_pin+0xd0>)
   82bb2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   82bb4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82bb6:	e000      	b.n	82bba <pio_configure_pin+0xc2>

	default:
		return 0;
   82bb8:	2000      	movs	r0, #0
	}

	return 1;
}
   82bba:	b002      	add	sp, #8
   82bbc:	bd70      	pop	{r4, r5, r6, pc}
   82bbe:	bf00      	nop
   82bc0:	00082a1d 	.word	0x00082a1d
   82bc4:	00082a5d 	.word	0x00082a5d
   82bc8:	00082a91 	.word	0x00082a91

00082bcc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   82bce:	b083      	sub	sp, #12
   82bd0:	4607      	mov	r7, r0
   82bd2:	460e      	mov	r6, r1
   82bd4:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82bd6:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   82bda:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82bde:	d026      	beq.n	82c2e <pio_configure_pin_group+0x62>
   82be0:	d806      	bhi.n	82bf0 <pio_configure_pin_group+0x24>
   82be2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82be6:	d00a      	beq.n	82bfe <pio_configure_pin_group+0x32>
   82be8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82bec:	d013      	beq.n	82c16 <pio_configure_pin_group+0x4a>
   82bee:	e034      	b.n	82c5a <pio_configure_pin_group+0x8e>
   82bf0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82bf4:	d01f      	beq.n	82c36 <pio_configure_pin_group+0x6a>
   82bf6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82bfa:	d01c      	beq.n	82c36 <pio_configure_pin_group+0x6a>
   82bfc:	e02d      	b.n	82c5a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82bfe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82c02:	4632      	mov	r2, r6
   82c04:	4b16      	ldr	r3, [pc, #88]	; (82c60 <pio_configure_pin_group+0x94>)
   82c06:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82c08:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82c0c:	bf14      	ite	ne
   82c0e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82c10:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82c12:	2001      	movs	r0, #1
   82c14:	e022      	b.n	82c5c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82c16:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82c1a:	4632      	mov	r2, r6
   82c1c:	4b10      	ldr	r3, [pc, #64]	; (82c60 <pio_configure_pin_group+0x94>)
   82c1e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82c20:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82c24:	bf14      	ite	ne
   82c26:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82c28:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82c2a:	2001      	movs	r0, #1
   82c2c:	e016      	b.n	82c5c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82c2e:	4b0d      	ldr	r3, [pc, #52]	; (82c64 <pio_configure_pin_group+0x98>)
   82c30:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82c32:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82c34:	e012      	b.n	82c5c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82c36:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82c3a:	f005 0301 	and.w	r3, r5, #1
   82c3e:	9300      	str	r3, [sp, #0]
   82c40:	4638      	mov	r0, r7
   82c42:	4631      	mov	r1, r6
   82c44:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82c48:	bf14      	ite	ne
   82c4a:	2200      	movne	r2, #0
   82c4c:	2201      	moveq	r2, #1
   82c4e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82c52:	4c05      	ldr	r4, [pc, #20]	; (82c68 <pio_configure_pin_group+0x9c>)
   82c54:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82c56:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82c58:	e000      	b.n	82c5c <pio_configure_pin_group+0x90>

	default:
		return 0;
   82c5a:	2000      	movs	r0, #0
	}

	return 1;
}
   82c5c:	b003      	add	sp, #12
   82c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82c60:	00082a1d 	.word	0x00082a1d
   82c64:	00082a5d 	.word	0x00082a5d
   82c68:	00082a91 	.word	0x00082a91

00082c6c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82c70:	4604      	mov	r4, r0
   82c72:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82c74:	4b10      	ldr	r3, [pc, #64]	; (82cb8 <pio_handler_process+0x4c>)
   82c76:	4798      	blx	r3
   82c78:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82c7a:	4620      	mov	r0, r4
   82c7c:	4b0f      	ldr	r3, [pc, #60]	; (82cbc <pio_handler_process+0x50>)
   82c7e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82c80:	4005      	ands	r5, r0
   82c82:	d017      	beq.n	82cb4 <pio_handler_process+0x48>
   82c84:	4f0e      	ldr	r7, [pc, #56]	; (82cc0 <pio_handler_process+0x54>)
   82c86:	f107 040c 	add.w	r4, r7, #12
   82c8a:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82c8c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   82c90:	42b3      	cmp	r3, r6
   82c92:	d10a      	bne.n	82caa <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82c94:	f854 1c08 	ldr.w	r1, [r4, #-8]
   82c98:	4229      	tst	r1, r5
   82c9a:	d006      	beq.n	82caa <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82c9c:	6823      	ldr	r3, [r4, #0]
   82c9e:	4630      	mov	r0, r6
   82ca0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82ca2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   82ca6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82caa:	42bc      	cmp	r4, r7
   82cac:	d002      	beq.n	82cb4 <pio_handler_process+0x48>
   82cae:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82cb0:	2d00      	cmp	r5, #0
   82cb2:	d1eb      	bne.n	82c8c <pio_handler_process+0x20>
   82cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82cb8:	00082af1 	.word	0x00082af1
   82cbc:	00082af5 	.word	0x00082af5
   82cc0:	20078c0c 	.word	0x20078c0c

00082cc4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   82cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   82cc6:	4c0b      	ldr	r4, [pc, #44]	; (82cf4 <pio_handler_set+0x30>)
   82cc8:	6824      	ldr	r4, [r4, #0]
   82cca:	2c06      	cmp	r4, #6
   82ccc:	d810      	bhi.n	82cf0 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   82cce:	4f0a      	ldr	r7, [pc, #40]	; (82cf8 <pio_handler_set+0x34>)
   82cd0:	0126      	lsls	r6, r4, #4
   82cd2:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   82cd4:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   82cd6:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   82cd8:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   82cda:	9906      	ldr	r1, [sp, #24]
   82cdc:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   82cde:	3401      	adds	r4, #1
   82ce0:	4904      	ldr	r1, [pc, #16]	; (82cf4 <pio_handler_set+0x30>)
   82ce2:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   82ce4:	4611      	mov	r1, r2
   82ce6:	461a      	mov	r2, r3
   82ce8:	4b04      	ldr	r3, [pc, #16]	; (82cfc <pio_handler_set+0x38>)
   82cea:	4798      	blx	r3

	return 0;
   82cec:	2000      	movs	r0, #0
   82cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   82cf0:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   82cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82cf4:	20078c08 	.word	0x20078c08
   82cf8:	20078c0c 	.word	0x20078c0c
   82cfc:	00082ab9 	.word	0x00082ab9

00082d00 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82d00:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82d02:	4802      	ldr	r0, [pc, #8]	; (82d0c <PIOA_Handler+0xc>)
   82d04:	210b      	movs	r1, #11
   82d06:	4b02      	ldr	r3, [pc, #8]	; (82d10 <PIOA_Handler+0x10>)
   82d08:	4798      	blx	r3
   82d0a:	bd08      	pop	{r3, pc}
   82d0c:	400e0e00 	.word	0x400e0e00
   82d10:	00082c6d 	.word	0x00082c6d

00082d14 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82d14:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82d16:	4802      	ldr	r0, [pc, #8]	; (82d20 <PIOB_Handler+0xc>)
   82d18:	210c      	movs	r1, #12
   82d1a:	4b02      	ldr	r3, [pc, #8]	; (82d24 <PIOB_Handler+0x10>)
   82d1c:	4798      	blx	r3
   82d1e:	bd08      	pop	{r3, pc}
   82d20:	400e1000 	.word	0x400e1000
   82d24:	00082c6d 	.word	0x00082c6d

00082d28 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82d28:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82d2a:	4802      	ldr	r0, [pc, #8]	; (82d34 <PIOC_Handler+0xc>)
   82d2c:	210d      	movs	r1, #13
   82d2e:	4b02      	ldr	r3, [pc, #8]	; (82d38 <PIOC_Handler+0x10>)
   82d30:	4798      	blx	r3
   82d32:	bd08      	pop	{r3, pc}
   82d34:	400e1200 	.word	0x400e1200
   82d38:	00082c6d 	.word	0x00082c6d

00082d3c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82d3c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82d3e:	4802      	ldr	r0, [pc, #8]	; (82d48 <PIOD_Handler+0xc>)
   82d40:	210e      	movs	r1, #14
   82d42:	4b02      	ldr	r3, [pc, #8]	; (82d4c <PIOD_Handler+0x10>)
   82d44:	4798      	blx	r3
   82d46:	bd08      	pop	{r3, pc}
   82d48:	400e1400 	.word	0x400e1400
   82d4c:	00082c6d 	.word	0x00082c6d

00082d50 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82d50:	4b17      	ldr	r3, [pc, #92]	; (82db0 <pmc_switch_mck_to_pllack+0x60>)
   82d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82d54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   82d58:	4310      	orrs	r0, r2
   82d5a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82d5e:	f013 0f08 	tst.w	r3, #8
   82d62:	d109      	bne.n	82d78 <pmc_switch_mck_to_pllack+0x28>
   82d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82d68:	4911      	ldr	r1, [pc, #68]	; (82db0 <pmc_switch_mck_to_pllack+0x60>)
   82d6a:	e001      	b.n	82d70 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82d6c:	3b01      	subs	r3, #1
   82d6e:	d019      	beq.n	82da4 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82d70:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82d72:	f012 0f08 	tst.w	r2, #8
   82d76:	d0f9      	beq.n	82d6c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82d78:	4b0d      	ldr	r3, [pc, #52]	; (82db0 <pmc_switch_mck_to_pllack+0x60>)
   82d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82d7c:	f022 0203 	bic.w	r2, r2, #3
   82d80:	f042 0202 	orr.w	r2, r2, #2
   82d84:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82d86:	6e98      	ldr	r0, [r3, #104]	; 0x68
   82d88:	f010 0008 	ands.w	r0, r0, #8
   82d8c:	d10c      	bne.n	82da8 <pmc_switch_mck_to_pllack+0x58>
   82d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82d92:	4907      	ldr	r1, [pc, #28]	; (82db0 <pmc_switch_mck_to_pllack+0x60>)
   82d94:	e001      	b.n	82d9a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82d96:	3b01      	subs	r3, #1
   82d98:	d008      	beq.n	82dac <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82d9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82d9c:	f012 0f08 	tst.w	r2, #8
   82da0:	d0f9      	beq.n	82d96 <pmc_switch_mck_to_pllack+0x46>
   82da2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82da4:	2001      	movs	r0, #1
   82da6:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82da8:	2000      	movs	r0, #0
   82daa:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82dac:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82dae:	4770      	bx	lr
   82db0:	400e0600 	.word	0x400e0600

00082db4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82db4:	b138      	cbz	r0, 82dc6 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82db6:	4911      	ldr	r1, [pc, #68]	; (82dfc <pmc_switch_mainck_to_xtal+0x48>)
   82db8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82dba:	4a11      	ldr	r2, [pc, #68]	; (82e00 <pmc_switch_mainck_to_xtal+0x4c>)
   82dbc:	401a      	ands	r2, r3
   82dbe:	4b11      	ldr	r3, [pc, #68]	; (82e04 <pmc_switch_mainck_to_xtal+0x50>)
   82dc0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82dc2:	620b      	str	r3, [r1, #32]
   82dc4:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82dc6:	4a0d      	ldr	r2, [pc, #52]	; (82dfc <pmc_switch_mainck_to_xtal+0x48>)
   82dc8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82dca:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82dce:	f023 0303 	bic.w	r3, r3, #3
   82dd2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82dd6:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82dda:	0209      	lsls	r1, r1, #8
   82ddc:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82dde:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82de0:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82de2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82de4:	f013 0f01 	tst.w	r3, #1
   82de8:	d0fb      	beq.n	82de2 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82dea:	4a04      	ldr	r2, [pc, #16]	; (82dfc <pmc_switch_mainck_to_xtal+0x48>)
   82dec:	6a13      	ldr	r3, [r2, #32]
   82dee:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82df6:	6213      	str	r3, [r2, #32]
   82df8:	4770      	bx	lr
   82dfa:	bf00      	nop
   82dfc:	400e0600 	.word	0x400e0600
   82e00:	fec8fffc 	.word	0xfec8fffc
   82e04:	01370002 	.word	0x01370002

00082e08 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82e08:	4b02      	ldr	r3, [pc, #8]	; (82e14 <pmc_osc_is_ready_mainck+0xc>)
   82e0a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82e0c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82e10:	4770      	bx	lr
   82e12:	bf00      	nop
   82e14:	400e0600 	.word	0x400e0600

00082e18 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82e18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82e1c:	4b01      	ldr	r3, [pc, #4]	; (82e24 <pmc_disable_pllack+0xc>)
   82e1e:	629a      	str	r2, [r3, #40]	; 0x28
   82e20:	4770      	bx	lr
   82e22:	bf00      	nop
   82e24:	400e0600 	.word	0x400e0600

00082e28 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82e28:	4b02      	ldr	r3, [pc, #8]	; (82e34 <pmc_is_locked_pllack+0xc>)
   82e2a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82e2c:	f000 0002 	and.w	r0, r0, #2
   82e30:	4770      	bx	lr
   82e32:	bf00      	nop
   82e34:	400e0600 	.word	0x400e0600

00082e38 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82e38:	282c      	cmp	r0, #44	; 0x2c
   82e3a:	d820      	bhi.n	82e7e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   82e3c:	281f      	cmp	r0, #31
   82e3e:	d80d      	bhi.n	82e5c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82e40:	4b12      	ldr	r3, [pc, #72]	; (82e8c <pmc_enable_periph_clk+0x54>)
   82e42:	699a      	ldr	r2, [r3, #24]
   82e44:	2301      	movs	r3, #1
   82e46:	4083      	lsls	r3, r0
   82e48:	401a      	ands	r2, r3
   82e4a:	4293      	cmp	r3, r2
   82e4c:	d019      	beq.n	82e82 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   82e4e:	2301      	movs	r3, #1
   82e50:	fa03 f000 	lsl.w	r0, r3, r0
   82e54:	4b0d      	ldr	r3, [pc, #52]	; (82e8c <pmc_enable_periph_clk+0x54>)
   82e56:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82e58:	2000      	movs	r0, #0
   82e5a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82e5c:	4b0b      	ldr	r3, [pc, #44]	; (82e8c <pmc_enable_periph_clk+0x54>)
   82e5e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   82e62:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82e64:	2301      	movs	r3, #1
   82e66:	4083      	lsls	r3, r0
   82e68:	401a      	ands	r2, r3
   82e6a:	4293      	cmp	r3, r2
   82e6c:	d00b      	beq.n	82e86 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   82e6e:	2301      	movs	r3, #1
   82e70:	fa03 f000 	lsl.w	r0, r3, r0
   82e74:	4b05      	ldr	r3, [pc, #20]	; (82e8c <pmc_enable_periph_clk+0x54>)
   82e76:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   82e7a:	2000      	movs	r0, #0
   82e7c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   82e7e:	2001      	movs	r0, #1
   82e80:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82e82:	2000      	movs	r0, #0
   82e84:	4770      	bx	lr
   82e86:	2000      	movs	r0, #0
}
   82e88:	4770      	bx	lr
   82e8a:	bf00      	nop
   82e8c:	400e0600 	.word	0x400e0600

00082e90 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82e90:	e7fe      	b.n	82e90 <Dummy_Handler>
   82e92:	bf00      	nop

00082e94 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82e94:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82e96:	4b1e      	ldr	r3, [pc, #120]	; (82f10 <Reset_Handler+0x7c>)
   82e98:	4a1e      	ldr	r2, [pc, #120]	; (82f14 <Reset_Handler+0x80>)
   82e9a:	429a      	cmp	r2, r3
   82e9c:	d003      	beq.n	82ea6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   82e9e:	4b1e      	ldr	r3, [pc, #120]	; (82f18 <Reset_Handler+0x84>)
   82ea0:	4a1b      	ldr	r2, [pc, #108]	; (82f10 <Reset_Handler+0x7c>)
   82ea2:	429a      	cmp	r2, r3
   82ea4:	d304      	bcc.n	82eb0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82ea6:	4b1d      	ldr	r3, [pc, #116]	; (82f1c <Reset_Handler+0x88>)
   82ea8:	4a1d      	ldr	r2, [pc, #116]	; (82f20 <Reset_Handler+0x8c>)
   82eaa:	429a      	cmp	r2, r3
   82eac:	d30f      	bcc.n	82ece <Reset_Handler+0x3a>
   82eae:	e01a      	b.n	82ee6 <Reset_Handler+0x52>
   82eb0:	4b1c      	ldr	r3, [pc, #112]	; (82f24 <Reset_Handler+0x90>)
   82eb2:	4c1d      	ldr	r4, [pc, #116]	; (82f28 <Reset_Handler+0x94>)
   82eb4:	1ae4      	subs	r4, r4, r3
   82eb6:	f024 0403 	bic.w	r4, r4, #3
   82eba:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82ebc:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   82ebe:	4814      	ldr	r0, [pc, #80]	; (82f10 <Reset_Handler+0x7c>)
   82ec0:	4914      	ldr	r1, [pc, #80]	; (82f14 <Reset_Handler+0x80>)
   82ec2:	585a      	ldr	r2, [r3, r1]
   82ec4:	501a      	str	r2, [r3, r0]
   82ec6:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82ec8:	42a3      	cmp	r3, r4
   82eca:	d1fa      	bne.n	82ec2 <Reset_Handler+0x2e>
   82ecc:	e7eb      	b.n	82ea6 <Reset_Handler+0x12>
   82ece:	4b17      	ldr	r3, [pc, #92]	; (82f2c <Reset_Handler+0x98>)
   82ed0:	4917      	ldr	r1, [pc, #92]	; (82f30 <Reset_Handler+0x9c>)
   82ed2:	1ac9      	subs	r1, r1, r3
   82ed4:	f021 0103 	bic.w	r1, r1, #3
   82ed8:	1d1a      	adds	r2, r3, #4
   82eda:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   82edc:	2200      	movs	r2, #0
   82ede:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82ee2:	428b      	cmp	r3, r1
   82ee4:	d1fb      	bne.n	82ede <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82ee6:	4a13      	ldr	r2, [pc, #76]	; (82f34 <Reset_Handler+0xa0>)
   82ee8:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   82eec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82ef0:	4911      	ldr	r1, [pc, #68]	; (82f38 <Reset_Handler+0xa4>)
   82ef2:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82ef4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82ef8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   82efc:	d203      	bcs.n	82f06 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82efe:	688a      	ldr	r2, [r1, #8]
   82f00:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82f04:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82f06:	4b0d      	ldr	r3, [pc, #52]	; (82f3c <Reset_Handler+0xa8>)
   82f08:	4798      	blx	r3

	/* Branch to main function */
	main();
   82f0a:	4b0d      	ldr	r3, [pc, #52]	; (82f40 <Reset_Handler+0xac>)
   82f0c:	4798      	blx	r3
   82f0e:	e7fe      	b.n	82f0e <Reset_Handler+0x7a>
   82f10:	20070000 	.word	0x20070000
   82f14:	0008722c 	.word	0x0008722c
   82f18:	200709dc 	.word	0x200709dc
   82f1c:	20078d9c 	.word	0x20078d9c
   82f20:	200709e0 	.word	0x200709e0
   82f24:	20070004 	.word	0x20070004
   82f28:	200709df 	.word	0x200709df
   82f2c:	200709dc 	.word	0x200709dc
   82f30:	20078d97 	.word	0x20078d97
   82f34:	00080000 	.word	0x00080000
   82f38:	e000ed00 	.word	0xe000ed00
   82f3c:	00084069 	.word	0x00084069
   82f40:	000830b1 	.word	0x000830b1

00082f44 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82f44:	4b3e      	ldr	r3, [pc, #248]	; (83040 <SystemCoreClockUpdate+0xfc>)
   82f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82f48:	f003 0303 	and.w	r3, r3, #3
   82f4c:	2b03      	cmp	r3, #3
   82f4e:	d85f      	bhi.n	83010 <SystemCoreClockUpdate+0xcc>
   82f50:	e8df f003 	tbb	[pc, r3]
   82f54:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82f58:	4b3a      	ldr	r3, [pc, #232]	; (83044 <SystemCoreClockUpdate+0x100>)
   82f5a:	695b      	ldr	r3, [r3, #20]
   82f5c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82f60:	bf14      	ite	ne
   82f62:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82f66:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82f6a:	4b37      	ldr	r3, [pc, #220]	; (83048 <SystemCoreClockUpdate+0x104>)
   82f6c:	601a      	str	r2, [r3, #0]
   82f6e:	e04f      	b.n	83010 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82f70:	4b33      	ldr	r3, [pc, #204]	; (83040 <SystemCoreClockUpdate+0xfc>)
   82f72:	6a1b      	ldr	r3, [r3, #32]
   82f74:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82f78:	d003      	beq.n	82f82 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82f7a:	4a34      	ldr	r2, [pc, #208]	; (8304c <SystemCoreClockUpdate+0x108>)
   82f7c:	4b32      	ldr	r3, [pc, #200]	; (83048 <SystemCoreClockUpdate+0x104>)
   82f7e:	601a      	str	r2, [r3, #0]
   82f80:	e046      	b.n	83010 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82f82:	4a33      	ldr	r2, [pc, #204]	; (83050 <SystemCoreClockUpdate+0x10c>)
   82f84:	4b30      	ldr	r3, [pc, #192]	; (83048 <SystemCoreClockUpdate+0x104>)
   82f86:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82f88:	4b2d      	ldr	r3, [pc, #180]	; (83040 <SystemCoreClockUpdate+0xfc>)
   82f8a:	6a1b      	ldr	r3, [r3, #32]
   82f8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82f90:	2b10      	cmp	r3, #16
   82f92:	d002      	beq.n	82f9a <SystemCoreClockUpdate+0x56>
   82f94:	2b20      	cmp	r3, #32
   82f96:	d004      	beq.n	82fa2 <SystemCoreClockUpdate+0x5e>
   82f98:	e03a      	b.n	83010 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82f9a:	4a2e      	ldr	r2, [pc, #184]	; (83054 <SystemCoreClockUpdate+0x110>)
   82f9c:	4b2a      	ldr	r3, [pc, #168]	; (83048 <SystemCoreClockUpdate+0x104>)
   82f9e:	601a      	str	r2, [r3, #0]
				break;
   82fa0:	e036      	b.n	83010 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82fa2:	4a2a      	ldr	r2, [pc, #168]	; (8304c <SystemCoreClockUpdate+0x108>)
   82fa4:	4b28      	ldr	r3, [pc, #160]	; (83048 <SystemCoreClockUpdate+0x104>)
   82fa6:	601a      	str	r2, [r3, #0]
				break;
   82fa8:	e032      	b.n	83010 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82faa:	4b25      	ldr	r3, [pc, #148]	; (83040 <SystemCoreClockUpdate+0xfc>)
   82fac:	6a1b      	ldr	r3, [r3, #32]
   82fae:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82fb2:	d003      	beq.n	82fbc <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82fb4:	4a25      	ldr	r2, [pc, #148]	; (8304c <SystemCoreClockUpdate+0x108>)
   82fb6:	4b24      	ldr	r3, [pc, #144]	; (83048 <SystemCoreClockUpdate+0x104>)
   82fb8:	601a      	str	r2, [r3, #0]
   82fba:	e012      	b.n	82fe2 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82fbc:	4a24      	ldr	r2, [pc, #144]	; (83050 <SystemCoreClockUpdate+0x10c>)
   82fbe:	4b22      	ldr	r3, [pc, #136]	; (83048 <SystemCoreClockUpdate+0x104>)
   82fc0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82fc2:	4b1f      	ldr	r3, [pc, #124]	; (83040 <SystemCoreClockUpdate+0xfc>)
   82fc4:	6a1b      	ldr	r3, [r3, #32]
   82fc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82fca:	2b10      	cmp	r3, #16
   82fcc:	d002      	beq.n	82fd4 <SystemCoreClockUpdate+0x90>
   82fce:	2b20      	cmp	r3, #32
   82fd0:	d004      	beq.n	82fdc <SystemCoreClockUpdate+0x98>
   82fd2:	e006      	b.n	82fe2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82fd4:	4a1f      	ldr	r2, [pc, #124]	; (83054 <SystemCoreClockUpdate+0x110>)
   82fd6:	4b1c      	ldr	r3, [pc, #112]	; (83048 <SystemCoreClockUpdate+0x104>)
   82fd8:	601a      	str	r2, [r3, #0]
				break;
   82fda:	e002      	b.n	82fe2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82fdc:	4a1b      	ldr	r2, [pc, #108]	; (8304c <SystemCoreClockUpdate+0x108>)
   82fde:	4b1a      	ldr	r3, [pc, #104]	; (83048 <SystemCoreClockUpdate+0x104>)
   82fe0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82fe2:	4b17      	ldr	r3, [pc, #92]	; (83040 <SystemCoreClockUpdate+0xfc>)
   82fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82fe6:	f003 0303 	and.w	r3, r3, #3
   82fea:	2b02      	cmp	r3, #2
   82fec:	d10d      	bne.n	8300a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82fee:	4b14      	ldr	r3, [pc, #80]	; (83040 <SystemCoreClockUpdate+0xfc>)
   82ff0:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82ff2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   82ff4:	4b14      	ldr	r3, [pc, #80]	; (83048 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82ff6:	f3c0 400a 	ubfx	r0, r0, #16, #11
   82ffa:	681a      	ldr	r2, [r3, #0]
   82ffc:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83000:	b2c9      	uxtb	r1, r1
   83002:	fbb2 f2f1 	udiv	r2, r2, r1
   83006:	601a      	str	r2, [r3, #0]
   83008:	e002      	b.n	83010 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8300a:	4a13      	ldr	r2, [pc, #76]	; (83058 <SystemCoreClockUpdate+0x114>)
   8300c:	4b0e      	ldr	r3, [pc, #56]	; (83048 <SystemCoreClockUpdate+0x104>)
   8300e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83010:	4b0b      	ldr	r3, [pc, #44]	; (83040 <SystemCoreClockUpdate+0xfc>)
   83012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83014:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83018:	2b70      	cmp	r3, #112	; 0x70
   8301a:	d107      	bne.n	8302c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   8301c:	4b0a      	ldr	r3, [pc, #40]	; (83048 <SystemCoreClockUpdate+0x104>)
   8301e:	681a      	ldr	r2, [r3, #0]
   83020:	490e      	ldr	r1, [pc, #56]	; (8305c <SystemCoreClockUpdate+0x118>)
   83022:	fba1 0202 	umull	r0, r2, r1, r2
   83026:	0852      	lsrs	r2, r2, #1
   83028:	601a      	str	r2, [r3, #0]
   8302a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8302c:	4b04      	ldr	r3, [pc, #16]	; (83040 <SystemCoreClockUpdate+0xfc>)
   8302e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   83030:	4b05      	ldr	r3, [pc, #20]	; (83048 <SystemCoreClockUpdate+0x104>)
   83032:	f3c1 1102 	ubfx	r1, r1, #4, #3
   83036:	681a      	ldr	r2, [r3, #0]
   83038:	40ca      	lsrs	r2, r1
   8303a:	601a      	str	r2, [r3, #0]
   8303c:	4770      	bx	lr
   8303e:	bf00      	nop
   83040:	400e0600 	.word	0x400e0600
   83044:	400e1a10 	.word	0x400e1a10
   83048:	2007016c 	.word	0x2007016c
   8304c:	00b71b00 	.word	0x00b71b00
   83050:	003d0900 	.word	0x003d0900
   83054:	007a1200 	.word	0x007a1200
   83058:	0e4e1c00 	.word	0x0e4e1c00
   8305c:	aaaaaaab 	.word	0xaaaaaaab

00083060 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   83060:	4b09      	ldr	r3, [pc, #36]	; (83088 <_sbrk+0x28>)
   83062:	681b      	ldr	r3, [r3, #0]
   83064:	b913      	cbnz	r3, 8306c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   83066:	4a09      	ldr	r2, [pc, #36]	; (8308c <_sbrk+0x2c>)
   83068:	4b07      	ldr	r3, [pc, #28]	; (83088 <_sbrk+0x28>)
   8306a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8306c:	4b06      	ldr	r3, [pc, #24]	; (83088 <_sbrk+0x28>)
   8306e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   83070:	181a      	adds	r2, r3, r0
   83072:	4907      	ldr	r1, [pc, #28]	; (83090 <_sbrk+0x30>)
   83074:	4291      	cmp	r1, r2
   83076:	db04      	blt.n	83082 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   83078:	4610      	mov	r0, r2
   8307a:	4a03      	ldr	r2, [pc, #12]	; (83088 <_sbrk+0x28>)
   8307c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8307e:	4618      	mov	r0, r3
   83080:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   83082:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   83086:	4770      	bx	lr
   83088:	20078c7c 	.word	0x20078c7c
   8308c:	2007ada0 	.word	0x2007ada0
   83090:	20087ffc 	.word	0x20087ffc

00083094 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   83094:	f04f 30ff 	mov.w	r0, #4294967295
   83098:	4770      	bx	lr
   8309a:	bf00      	nop

0008309c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8309c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   830a0:	604b      	str	r3, [r1, #4]

	return 0;
}
   830a2:	2000      	movs	r0, #0
   830a4:	4770      	bx	lr
   830a6:	bf00      	nop

000830a8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   830a8:	2001      	movs	r0, #1
   830aa:	4770      	bx	lr

000830ac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   830ac:	2000      	movs	r0, #0
   830ae:	4770      	bx	lr

000830b0 <main>:
#include "StepCounter_ISR.h"
#include "PwmFunctions.h"


int main (void)
{
   830b0:	b510      	push	{r4, lr}
   830b2:	b0a0      	sub	sp, #128	; 0x80
	sysclk_init();
   830b4:	4b15      	ldr	r3, [pc, #84]	; (8310c <main+0x5c>)
   830b6:	4798      	blx	r3
	board_init();
   830b8:	4b15      	ldr	r3, [pc, #84]	; (83110 <main+0x60>)
   830ba:	4798      	blx	r3
	configureConsole();
   830bc:	4b15      	ldr	r3, [pc, #84]	; (83114 <main+0x64>)
   830be:	4798      	blx	r3
	attach_interupt();
   830c0:	4b15      	ldr	r3, [pc, #84]	; (83118 <main+0x68>)
   830c2:	4798      	blx	r3
	PWM_init();
   830c4:	4b15      	ldr	r3, [pc, #84]	; (8311c <main+0x6c>)
   830c6:	4798      	blx	r3
	coordinatesInit();
   830c8:	a804      	add	r0, sp, #16
   830ca:	4b15      	ldr	r3, [pc, #84]	; (83120 <main+0x70>)
   830cc:	4798      	blx	r3
	/* Print info in terminal Window*/
	printf("-- %s\n\r", BOARD_NAME);
   830ce:	4815      	ldr	r0, [pc, #84]	; (83124 <main+0x74>)
   830d0:	4915      	ldr	r1, [pc, #84]	; (83128 <main+0x78>)
   830d2:	4c16      	ldr	r4, [pc, #88]	; (8312c <main+0x7c>)
   830d4:	47a0      	blx	r4
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
   830d6:	4816      	ldr	r0, [pc, #88]	; (83130 <main+0x80>)
   830d8:	4916      	ldr	r1, [pc, #88]	; (83134 <main+0x84>)
   830da:	4a17      	ldr	r2, [pc, #92]	; (83138 <main+0x88>)
   830dc:	47a0      	blx	r4
	
	
	/* Create the task with the third priority the task_Move*/
	if (xTaskCreate(task_move, (const signed char * const) "Move", TASK_MOVE_STACK_SIZE, NULL, TASK_MOVE_STACK_PRIORITY, NULL) != pdPASS) {
   830de:	2306      	movs	r3, #6
   830e0:	9300      	str	r3, [sp, #0]
   830e2:	2300      	movs	r3, #0
   830e4:	9301      	str	r3, [sp, #4]
   830e6:	9302      	str	r3, [sp, #8]
   830e8:	9303      	str	r3, [sp, #12]
   830ea:	4814      	ldr	r0, [pc, #80]	; (8313c <main+0x8c>)
   830ec:	4914      	ldr	r1, [pc, #80]	; (83140 <main+0x90>)
   830ee:	f44f 7280 	mov.w	r2, #256	; 0x100
   830f2:	4c14      	ldr	r4, [pc, #80]	; (83144 <main+0x94>)
   830f4:	47a0      	blx	r4
   830f6:	2801      	cmp	r0, #1
   830f8:	d002      	beq.n	83100 <main+0x50>
		printf("Failed to test task_Move task\r\n");
   830fa:	4813      	ldr	r0, [pc, #76]	; (83148 <main+0x98>)
   830fc:	4b0b      	ldr	r3, [pc, #44]	; (8312c <main+0x7c>)
   830fe:	4798      	blx	r3
	// 	if (xTaskCreate(task_unoComm, (const signed char * const) "UNO", TASK_UNO_STACK_SIZE, NULL, TASK_UNO_STACK_PRIORITY, NULL) != pdPASS) {
	// 		printf("Failed to test UnoComm task\r\n");
	// 	}
	
	/* Start the FreeRTOS scheduler running all tasks indefinitely*/
	vTaskStartScheduler();
   83100:	4b12      	ldr	r3, [pc, #72]	; (8314c <main+0x9c>)
   83102:	4798      	blx	r3
}
   83104:	2000      	movs	r0, #0
   83106:	b020      	add	sp, #128	; 0x80
   83108:	bd10      	pop	{r4, pc}
   8310a:	bf00      	nop
   8310c:	00082931 	.word	0x00082931
   83110:	00082995 	.word	0x00082995
   83114:	000804b1 	.word	0x000804b1
   83118:	000809fd 	.word	0x000809fd
   8311c:	000808f1 	.word	0x000808f1
   83120:	000812c1 	.word	0x000812c1
   83124:	000870f0 	.word	0x000870f0
   83128:	000870f8 	.word	0x000870f8
   8312c:	000840b9 	.word	0x000840b9
   83130:	00087108 	.word	0x00087108
   83134:	00087120 	.word	0x00087120
   83138:	0008712c 	.word	0x0008712c
   8313c:	00080ee1 	.word	0x00080ee1
   83140:	00087138 	.word	0x00087138
   83144:	00081c39 	.word	0x00081c39
   83148:	00087140 	.word	0x00087140
   8314c:	00081e41 	.word	0x00081e41

00083150 <atan>:
   83150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83154:	4bb6      	ldr	r3, [pc, #728]	; (83430 <atan+0x2e0>)
   83156:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   8315a:	429e      	cmp	r6, r3
   8315c:	b083      	sub	sp, #12
   8315e:	4604      	mov	r4, r0
   83160:	460d      	mov	r5, r1
   83162:	4689      	mov	r9, r1
   83164:	dd0f      	ble.n	83186 <atan+0x36>
   83166:	49b3      	ldr	r1, [pc, #716]	; (83434 <atan+0x2e4>)
   83168:	428e      	cmp	r6, r1
   8316a:	f300 80b3 	bgt.w	832d4 <atan+0x184>
   8316e:	f000 80ae 	beq.w	832ce <atan+0x17e>
   83172:	f1b9 0f00 	cmp.w	r9, #0
   83176:	f340 80ef 	ble.w	83358 <atan+0x208>
   8317a:	a191      	add	r1, pc, #580	; (adr r1, 833c0 <atan+0x270>)
   8317c:	e9d1 0100 	ldrd	r0, r1, [r1]
   83180:	b003      	add	sp, #12
   83182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83186:	4bac      	ldr	r3, [pc, #688]	; (83438 <atan+0x2e8>)
   83188:	429e      	cmp	r6, r3
   8318a:	f300 80bd 	bgt.w	83308 <atan+0x1b8>
   8318e:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   83192:	429e      	cmp	r6, r3
   83194:	f340 80a7 	ble.w	832e6 <atan+0x196>
   83198:	f04f 3cff 	mov.w	ip, #4294967295
   8319c:	4622      	mov	r2, r4
   8319e:	462b      	mov	r3, r5
   831a0:	4620      	mov	r0, r4
   831a2:	4629      	mov	r1, r5
   831a4:	f8cd c004 	str.w	ip, [sp, #4]
   831a8:	f000 fc76 	bl	83a98 <__aeabi_dmul>
   831ac:	4602      	mov	r2, r0
   831ae:	460b      	mov	r3, r1
   831b0:	4682      	mov	sl, r0
   831b2:	468b      	mov	fp, r1
   831b4:	f000 fc70 	bl	83a98 <__aeabi_dmul>
   831b8:	a383      	add	r3, pc, #524	; (adr r3, 833c8 <atan+0x278>)
   831ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   831be:	4606      	mov	r6, r0
   831c0:	460f      	mov	r7, r1
   831c2:	f000 fc69 	bl	83a98 <__aeabi_dmul>
   831c6:	a382      	add	r3, pc, #520	; (adr r3, 833d0 <atan+0x280>)
   831c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   831cc:	f000 fab2 	bl	83734 <__adddf3>
   831d0:	4632      	mov	r2, r6
   831d2:	463b      	mov	r3, r7
   831d4:	f000 fc60 	bl	83a98 <__aeabi_dmul>
   831d8:	a37f      	add	r3, pc, #508	; (adr r3, 833d8 <atan+0x288>)
   831da:	e9d3 2300 	ldrd	r2, r3, [r3]
   831de:	f000 faa9 	bl	83734 <__adddf3>
   831e2:	4632      	mov	r2, r6
   831e4:	463b      	mov	r3, r7
   831e6:	f000 fc57 	bl	83a98 <__aeabi_dmul>
   831ea:	a37d      	add	r3, pc, #500	; (adr r3, 833e0 <atan+0x290>)
   831ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   831f0:	f000 faa0 	bl	83734 <__adddf3>
   831f4:	4632      	mov	r2, r6
   831f6:	463b      	mov	r3, r7
   831f8:	f000 fc4e 	bl	83a98 <__aeabi_dmul>
   831fc:	a37a      	add	r3, pc, #488	; (adr r3, 833e8 <atan+0x298>)
   831fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   83202:	f000 fa97 	bl	83734 <__adddf3>
   83206:	4632      	mov	r2, r6
   83208:	463b      	mov	r3, r7
   8320a:	f000 fc45 	bl	83a98 <__aeabi_dmul>
   8320e:	a378      	add	r3, pc, #480	; (adr r3, 833f0 <atan+0x2a0>)
   83210:	e9d3 2300 	ldrd	r2, r3, [r3]
   83214:	f000 fa8e 	bl	83734 <__adddf3>
   83218:	4652      	mov	r2, sl
   8321a:	465b      	mov	r3, fp
   8321c:	f000 fc3c 	bl	83a98 <__aeabi_dmul>
   83220:	a375      	add	r3, pc, #468	; (adr r3, 833f8 <atan+0x2a8>)
   83222:	e9d3 2300 	ldrd	r2, r3, [r3]
   83226:	4682      	mov	sl, r0
   83228:	468b      	mov	fp, r1
   8322a:	4630      	mov	r0, r6
   8322c:	4639      	mov	r1, r7
   8322e:	f000 fc33 	bl	83a98 <__aeabi_dmul>
   83232:	a373      	add	r3, pc, #460	; (adr r3, 83400 <atan+0x2b0>)
   83234:	e9d3 2300 	ldrd	r2, r3, [r3]
   83238:	f000 fa7a 	bl	83730 <__aeabi_dsub>
   8323c:	4632      	mov	r2, r6
   8323e:	463b      	mov	r3, r7
   83240:	f000 fc2a 	bl	83a98 <__aeabi_dmul>
   83244:	a370      	add	r3, pc, #448	; (adr r3, 83408 <atan+0x2b8>)
   83246:	e9d3 2300 	ldrd	r2, r3, [r3]
   8324a:	f000 fa71 	bl	83730 <__aeabi_dsub>
   8324e:	4632      	mov	r2, r6
   83250:	463b      	mov	r3, r7
   83252:	f000 fc21 	bl	83a98 <__aeabi_dmul>
   83256:	a36e      	add	r3, pc, #440	; (adr r3, 83410 <atan+0x2c0>)
   83258:	e9d3 2300 	ldrd	r2, r3, [r3]
   8325c:	f000 fa68 	bl	83730 <__aeabi_dsub>
   83260:	4632      	mov	r2, r6
   83262:	463b      	mov	r3, r7
   83264:	f000 fc18 	bl	83a98 <__aeabi_dmul>
   83268:	a36b      	add	r3, pc, #428	; (adr r3, 83418 <atan+0x2c8>)
   8326a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8326e:	f000 fa5f 	bl	83730 <__aeabi_dsub>
   83272:	4632      	mov	r2, r6
   83274:	463b      	mov	r3, r7
   83276:	f000 fc0f 	bl	83a98 <__aeabi_dmul>
   8327a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8327e:	4602      	mov	r2, r0
   83280:	f1bc 3fff 	cmp.w	ip, #4294967295
   83284:	460b      	mov	r3, r1
   83286:	d06b      	beq.n	83360 <atan+0x210>
   83288:	4650      	mov	r0, sl
   8328a:	4659      	mov	r1, fp
   8328c:	ea4f 06cc 	mov.w	r6, ip, lsl #3
   83290:	f000 fa50 	bl	83734 <__adddf3>
   83294:	4622      	mov	r2, r4
   83296:	462b      	mov	r3, r5
   83298:	f000 fbfe 	bl	83a98 <__aeabi_dmul>
   8329c:	4f67      	ldr	r7, [pc, #412]	; (8343c <atan+0x2ec>)
   8329e:	4b68      	ldr	r3, [pc, #416]	; (83440 <atan+0x2f0>)
   832a0:	4437      	add	r7, r6
   832a2:	441e      	add	r6, r3
   832a4:	e9d6 2300 	ldrd	r2, r3, [r6]
   832a8:	f000 fa42 	bl	83730 <__aeabi_dsub>
   832ac:	4622      	mov	r2, r4
   832ae:	462b      	mov	r3, r5
   832b0:	f000 fa3e 	bl	83730 <__aeabi_dsub>
   832b4:	4602      	mov	r2, r0
   832b6:	460b      	mov	r3, r1
   832b8:	e9d7 0100 	ldrd	r0, r1, [r7]
   832bc:	f000 fa38 	bl	83730 <__aeabi_dsub>
   832c0:	f1b9 0f00 	cmp.w	r9, #0
   832c4:	da0c      	bge.n	832e0 <atan+0x190>
   832c6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   832ca:	4629      	mov	r1, r5
   832cc:	e008      	b.n	832e0 <atan+0x190>
   832ce:	2800      	cmp	r0, #0
   832d0:	f43f af4f 	beq.w	83172 <atan+0x22>
   832d4:	4620      	mov	r0, r4
   832d6:	4629      	mov	r1, r5
   832d8:	4622      	mov	r2, r4
   832da:	462b      	mov	r3, r5
   832dc:	f000 fa2a 	bl	83734 <__adddf3>
   832e0:	b003      	add	sp, #12
   832e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832e6:	a34e      	add	r3, pc, #312	; (adr r3, 83420 <atan+0x2d0>)
   832e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   832ec:	f000 fa22 	bl	83734 <__adddf3>
   832f0:	2200      	movs	r2, #0
   832f2:	4b54      	ldr	r3, [pc, #336]	; (83444 <atan+0x2f4>)
   832f4:	f000 fe60 	bl	83fb8 <__aeabi_dcmpgt>
   832f8:	2800      	cmp	r0, #0
   832fa:	f43f af4d 	beq.w	83198 <atan+0x48>
   832fe:	4620      	mov	r0, r4
   83300:	4629      	mov	r1, r5
   83302:	b003      	add	sp, #12
   83304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83308:	f000 f8ca 	bl	834a0 <fabs>
   8330c:	4b4e      	ldr	r3, [pc, #312]	; (83448 <atan+0x2f8>)
   8330e:	4604      	mov	r4, r0
   83310:	429e      	cmp	r6, r3
   83312:	460d      	mov	r5, r1
   83314:	dc33      	bgt.n	8337e <atan+0x22e>
   83316:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   8331a:	429e      	cmp	r6, r3
   8331c:	f300 80a5 	bgt.w	8346a <atan+0x31a>
   83320:	4602      	mov	r2, r0
   83322:	460b      	mov	r3, r1
   83324:	f000 fa06 	bl	83734 <__adddf3>
   83328:	2200      	movs	r2, #0
   8332a:	4b46      	ldr	r3, [pc, #280]	; (83444 <atan+0x2f4>)
   8332c:	f000 fa00 	bl	83730 <__aeabi_dsub>
   83330:	2200      	movs	r2, #0
   83332:	4606      	mov	r6, r0
   83334:	460f      	mov	r7, r1
   83336:	4620      	mov	r0, r4
   83338:	4629      	mov	r1, r5
   8333a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8333e:	f000 f9f9 	bl	83734 <__adddf3>
   83342:	4602      	mov	r2, r0
   83344:	460b      	mov	r3, r1
   83346:	4630      	mov	r0, r6
   83348:	4639      	mov	r1, r7
   8334a:	f000 fccf 	bl	83cec <__aeabi_ddiv>
   8334e:	f04f 0c00 	mov.w	ip, #0
   83352:	4604      	mov	r4, r0
   83354:	460d      	mov	r5, r1
   83356:	e721      	b.n	8319c <atan+0x4c>
   83358:	a133      	add	r1, pc, #204	; (adr r1, 83428 <atan+0x2d8>)
   8335a:	e9d1 0100 	ldrd	r0, r1, [r1]
   8335e:	e7bf      	b.n	832e0 <atan+0x190>
   83360:	4650      	mov	r0, sl
   83362:	4659      	mov	r1, fp
   83364:	f000 f9e6 	bl	83734 <__adddf3>
   83368:	4622      	mov	r2, r4
   8336a:	462b      	mov	r3, r5
   8336c:	f000 fb94 	bl	83a98 <__aeabi_dmul>
   83370:	4602      	mov	r2, r0
   83372:	460b      	mov	r3, r1
   83374:	4620      	mov	r0, r4
   83376:	4629      	mov	r1, r5
   83378:	f000 f9da 	bl	83730 <__aeabi_dsub>
   8337c:	e7b0      	b.n	832e0 <atan+0x190>
   8337e:	4b33      	ldr	r3, [pc, #204]	; (8344c <atan+0x2fc>)
   83380:	429e      	cmp	r6, r3
   83382:	dc67      	bgt.n	83454 <atan+0x304>
   83384:	2200      	movs	r2, #0
   83386:	4b32      	ldr	r3, [pc, #200]	; (83450 <atan+0x300>)
   83388:	f000 f9d2 	bl	83730 <__aeabi_dsub>
   8338c:	2200      	movs	r2, #0
   8338e:	4606      	mov	r6, r0
   83390:	460f      	mov	r7, r1
   83392:	4620      	mov	r0, r4
   83394:	4629      	mov	r1, r5
   83396:	4b2e      	ldr	r3, [pc, #184]	; (83450 <atan+0x300>)
   83398:	f000 fb7e 	bl	83a98 <__aeabi_dmul>
   8339c:	2200      	movs	r2, #0
   8339e:	4b29      	ldr	r3, [pc, #164]	; (83444 <atan+0x2f4>)
   833a0:	f000 f9c8 	bl	83734 <__adddf3>
   833a4:	4602      	mov	r2, r0
   833a6:	460b      	mov	r3, r1
   833a8:	4630      	mov	r0, r6
   833aa:	4639      	mov	r1, r7
   833ac:	f000 fc9e 	bl	83cec <__aeabi_ddiv>
   833b0:	f04f 0c02 	mov.w	ip, #2
   833b4:	4604      	mov	r4, r0
   833b6:	460d      	mov	r5, r1
   833b8:	e6f0      	b.n	8319c <atan+0x4c>
   833ba:	bf00      	nop
   833bc:	f3af 8000 	nop.w
   833c0:	54442d18 	.word	0x54442d18
   833c4:	3ff921fb 	.word	0x3ff921fb
   833c8:	e322da11 	.word	0xe322da11
   833cc:	3f90ad3a 	.word	0x3f90ad3a
   833d0:	24760deb 	.word	0x24760deb
   833d4:	3fa97b4b 	.word	0x3fa97b4b
   833d8:	a0d03d51 	.word	0xa0d03d51
   833dc:	3fb10d66 	.word	0x3fb10d66
   833e0:	c54c206e 	.word	0xc54c206e
   833e4:	3fb745cd 	.word	0x3fb745cd
   833e8:	920083ff 	.word	0x920083ff
   833ec:	3fc24924 	.word	0x3fc24924
   833f0:	5555550d 	.word	0x5555550d
   833f4:	3fd55555 	.word	0x3fd55555
   833f8:	2c6a6c2f 	.word	0x2c6a6c2f
   833fc:	bfa2b444 	.word	0xbfa2b444
   83400:	52defd9a 	.word	0x52defd9a
   83404:	3fadde2d 	.word	0x3fadde2d
   83408:	af749a6d 	.word	0xaf749a6d
   8340c:	3fb3b0f2 	.word	0x3fb3b0f2
   83410:	fe231671 	.word	0xfe231671
   83414:	3fbc71c6 	.word	0x3fbc71c6
   83418:	9998ebc4 	.word	0x9998ebc4
   8341c:	3fc99999 	.word	0x3fc99999
   83420:	8800759c 	.word	0x8800759c
   83424:	7e37e43c 	.word	0x7e37e43c
   83428:	54442d18 	.word	0x54442d18
   8342c:	bff921fb 	.word	0xbff921fb
   83430:	440fffff 	.word	0x440fffff
   83434:	7ff00000 	.word	0x7ff00000
   83438:	3fdbffff 	.word	0x3fdbffff
   8343c:	00087180 	.word	0x00087180
   83440:	00087160 	.word	0x00087160
   83444:	3ff00000 	.word	0x3ff00000
   83448:	3ff2ffff 	.word	0x3ff2ffff
   8344c:	40037fff 	.word	0x40037fff
   83450:	3ff80000 	.word	0x3ff80000
   83454:	4602      	mov	r2, r0
   83456:	460b      	mov	r3, r1
   83458:	2000      	movs	r0, #0
   8345a:	490f      	ldr	r1, [pc, #60]	; (83498 <atan+0x348>)
   8345c:	f000 fc46 	bl	83cec <__aeabi_ddiv>
   83460:	f04f 0c03 	mov.w	ip, #3
   83464:	4604      	mov	r4, r0
   83466:	460d      	mov	r5, r1
   83468:	e698      	b.n	8319c <atan+0x4c>
   8346a:	2200      	movs	r2, #0
   8346c:	4b0b      	ldr	r3, [pc, #44]	; (8349c <atan+0x34c>)
   8346e:	f000 f95f 	bl	83730 <__aeabi_dsub>
   83472:	2200      	movs	r2, #0
   83474:	4606      	mov	r6, r0
   83476:	460f      	mov	r7, r1
   83478:	4620      	mov	r0, r4
   8347a:	4629      	mov	r1, r5
   8347c:	4b07      	ldr	r3, [pc, #28]	; (8349c <atan+0x34c>)
   8347e:	f000 f959 	bl	83734 <__adddf3>
   83482:	4602      	mov	r2, r0
   83484:	460b      	mov	r3, r1
   83486:	4630      	mov	r0, r6
   83488:	4639      	mov	r1, r7
   8348a:	f000 fc2f 	bl	83cec <__aeabi_ddiv>
   8348e:	f04f 0c01 	mov.w	ip, #1
   83492:	4604      	mov	r4, r0
   83494:	460d      	mov	r5, r1
   83496:	e681      	b.n	8319c <atan+0x4c>
   83498:	bff00000 	.word	0xbff00000
   8349c:	3ff00000 	.word	0x3ff00000

000834a0 <fabs>:
   834a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   834a4:	4770      	bx	lr
   834a6:	bf00      	nop

000834a8 <sqrt>:
   834a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   834ac:	b08a      	sub	sp, #40	; 0x28
   834ae:	4604      	mov	r4, r0
   834b0:	460d      	mov	r5, r1
   834b2:	f000 f84f 	bl	83554 <__ieee754_sqrt>
   834b6:	f8df a098 	ldr.w	sl, [pc, #152]	; 83550 <sqrt+0xa8>
   834ba:	4606      	mov	r6, r0
   834bc:	f99a 3000 	ldrsb.w	r3, [sl]
   834c0:	460f      	mov	r7, r1
   834c2:	3301      	adds	r3, #1
   834c4:	d00f      	beq.n	834e6 <sqrt+0x3e>
   834c6:	4620      	mov	r0, r4
   834c8:	4629      	mov	r1, r5
   834ca:	f000 f903 	bl	836d4 <__fpclassifyd>
   834ce:	b150      	cbz	r0, 834e6 <sqrt+0x3e>
   834d0:	f04f 0800 	mov.w	r8, #0
   834d4:	f04f 0900 	mov.w	r9, #0
   834d8:	4642      	mov	r2, r8
   834da:	464b      	mov	r3, r9
   834dc:	4620      	mov	r0, r4
   834de:	4629      	mov	r1, r5
   834e0:	f000 fd4c 	bl	83f7c <__aeabi_dcmplt>
   834e4:	b920      	cbnz	r0, 834f0 <sqrt+0x48>
   834e6:	4630      	mov	r0, r6
   834e8:	4639      	mov	r1, r7
   834ea:	b00a      	add	sp, #40	; 0x28
   834ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   834f0:	4916      	ldr	r1, [pc, #88]	; (8354c <sqrt+0xa4>)
   834f2:	f89a 6000 	ldrb.w	r6, [sl]
   834f6:	2201      	movs	r2, #1
   834f8:	2300      	movs	r3, #0
   834fa:	e9cd 4504 	strd	r4, r5, [sp, #16]
   834fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
   83502:	9101      	str	r1, [sp, #4]
   83504:	9200      	str	r2, [sp, #0]
   83506:	9308      	str	r3, [sp, #32]
   83508:	b966      	cbnz	r6, 83524 <sqrt+0x7c>
   8350a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   8350e:	4668      	mov	r0, sp
   83510:	f000 f908 	bl	83724 <matherr>
   83514:	b180      	cbz	r0, 83538 <sqrt+0x90>
   83516:	9b08      	ldr	r3, [sp, #32]
   83518:	b99b      	cbnz	r3, 83542 <sqrt+0x9a>
   8351a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   8351e:	b00a      	add	sp, #40	; 0x28
   83520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83524:	4640      	mov	r0, r8
   83526:	4649      	mov	r1, r9
   83528:	4642      	mov	r2, r8
   8352a:	464b      	mov	r3, r9
   8352c:	f000 fbde 	bl	83cec <__aeabi_ddiv>
   83530:	2e02      	cmp	r6, #2
   83532:	e9cd 0106 	strd	r0, r1, [sp, #24]
   83536:	d1ea      	bne.n	8350e <sqrt+0x66>
   83538:	f000 fd90 	bl	8405c <__errno>
   8353c:	2321      	movs	r3, #33	; 0x21
   8353e:	6003      	str	r3, [r0, #0]
   83540:	e7e9      	b.n	83516 <sqrt+0x6e>
   83542:	f000 fd8b 	bl	8405c <__errno>
   83546:	9b08      	ldr	r3, [sp, #32]
   83548:	6003      	str	r3, [r0, #0]
   8354a:	e7e6      	b.n	8351a <sqrt+0x72>
   8354c:	000871a0 	.word	0x000871a0
   83550:	20070170 	.word	0x20070170

00083554 <__ieee754_sqrt>:
   83554:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   83558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8355c:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
   83560:	f8df 816c 	ldr.w	r8, [pc, #364]	; 836d0 <__ieee754_sqrt+0x17c>
   83564:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   83568:	45c4      	cmp	ip, r8
   8356a:	4606      	mov	r6, r0
   8356c:	460f      	mov	r7, r1
   8356e:	460b      	mov	r3, r1
   83570:	4602      	mov	r2, r0
   83572:	f000 808f 	beq.w	83694 <__ieee754_sqrt+0x140>
   83576:	2900      	cmp	r1, #0
   83578:	dd6f      	ble.n	8365a <__ieee754_sqrt+0x106>
   8357a:	150f      	asrs	r7, r1, #20
   8357c:	d078      	beq.n	83670 <__ieee754_sqrt+0x11c>
   8357e:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   83582:	f3c3 0313 	ubfx	r3, r3, #0, #20
   83586:	07f9      	lsls	r1, r7, #31
   83588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8358c:	d460      	bmi.n	83650 <__ieee754_sqrt+0xfc>
   8358e:	0fd1      	lsrs	r1, r2, #31
   83590:	f04f 0c00 	mov.w	ip, #0
   83594:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   83598:	107f      	asrs	r7, r7, #1
   8359a:	0052      	lsls	r2, r2, #1
   8359c:	4665      	mov	r5, ip
   8359e:	2016      	movs	r0, #22
   835a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   835a4:	186c      	adds	r4, r5, r1
   835a6:	429c      	cmp	r4, r3
   835a8:	ea4f 76d2 	mov.w	r6, r2, lsr #31
   835ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
   835b0:	dc02      	bgt.n	835b8 <__ieee754_sqrt+0x64>
   835b2:	1b1b      	subs	r3, r3, r4
   835b4:	1865      	adds	r5, r4, r1
   835b6:	448c      	add	ip, r1
   835b8:	3801      	subs	r0, #1
   835ba:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   835be:	ea4f 0151 	mov.w	r1, r1, lsr #1
   835c2:	d1ef      	bne.n	835a4 <__ieee754_sqrt+0x50>
   835c4:	4680      	mov	r8, r0
   835c6:	2620      	movs	r6, #32
   835c8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   835cc:	e009      	b.n	835e2 <__ieee754_sqrt+0x8e>
   835ce:	d023      	beq.n	83618 <__ieee754_sqrt+0xc4>
   835d0:	0fd4      	lsrs	r4, r2, #31
   835d2:	3e01      	subs	r6, #1
   835d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   835d8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   835dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
   835e0:	d01e      	beq.n	83620 <__ieee754_sqrt+0xcc>
   835e2:	42ab      	cmp	r3, r5
   835e4:	eb01 0408 	add.w	r4, r1, r8
   835e8:	ddf1      	ble.n	835ce <__ieee754_sqrt+0x7a>
   835ea:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
   835ee:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
   835f2:	eb04 0801 	add.w	r8, r4, r1
   835f6:	d009      	beq.n	8360c <__ieee754_sqrt+0xb8>
   835f8:	46a9      	mov	r9, r5
   835fa:	1b5b      	subs	r3, r3, r5
   835fc:	4294      	cmp	r4, r2
   835fe:	bf88      	it	hi
   83600:	f103 33ff 	addhi.w	r3, r3, #4294967295
   83604:	1b12      	subs	r2, r2, r4
   83606:	4408      	add	r0, r1
   83608:	464d      	mov	r5, r9
   8360a:	e7e1      	b.n	835d0 <__ieee754_sqrt+0x7c>
   8360c:	f1b8 0f00 	cmp.w	r8, #0
   83610:	dbf2      	blt.n	835f8 <__ieee754_sqrt+0xa4>
   83612:	f105 0901 	add.w	r9, r5, #1
   83616:	e7f0      	b.n	835fa <__ieee754_sqrt+0xa6>
   83618:	4294      	cmp	r4, r2
   8361a:	d9e6      	bls.n	835ea <__ieee754_sqrt+0x96>
   8361c:	461d      	mov	r5, r3
   8361e:	e7d7      	b.n	835d0 <__ieee754_sqrt+0x7c>
   83620:	431a      	orrs	r2, r3
   83622:	d004      	beq.n	8362e <__ieee754_sqrt+0xda>
   83624:	1c43      	adds	r3, r0, #1
   83626:	d041      	beq.n	836ac <__ieee754_sqrt+0x158>
   83628:	f000 0301 	and.w	r3, r0, #1
   8362c:	4418      	add	r0, r3
   8362e:	0846      	lsrs	r6, r0, #1
   83630:	ea4f 036c 	mov.w	r3, ip, asr #1
   83634:	f01c 0f01 	tst.w	ip, #1
   83638:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   8363c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83640:	bf18      	it	ne
   83642:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
   83646:	eb03 5107 	add.w	r1, r3, r7, lsl #20
   8364a:	4630      	mov	r0, r6
   8364c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83650:	0fd1      	lsrs	r1, r2, #31
   83652:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   83656:	0052      	lsls	r2, r2, #1
   83658:	e799      	b.n	8358e <__ieee754_sqrt+0x3a>
   8365a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8365e:	4303      	orrs	r3, r0
   83660:	d022      	beq.n	836a8 <__ieee754_sqrt+0x154>
   83662:	bb51      	cbnz	r1, 836ba <__ieee754_sqrt+0x166>
   83664:	460f      	mov	r7, r1
   83666:	0ad3      	lsrs	r3, r2, #11
   83668:	3f15      	subs	r7, #21
   8366a:	0552      	lsls	r2, r2, #21
   8366c:	2b00      	cmp	r3, #0
   8366e:	d0fa      	beq.n	83666 <__ieee754_sqrt+0x112>
   83670:	f413 1180 	ands.w	r1, r3, #1048576	; 0x100000
   83674:	d11d      	bne.n	836b2 <__ieee754_sqrt+0x15e>
   83676:	005b      	lsls	r3, r3, #1
   83678:	02d8      	lsls	r0, r3, #11
   8367a:	f101 0101 	add.w	r1, r1, #1
   8367e:	d5fa      	bpl.n	83676 <__ieee754_sqrt+0x122>
   83680:	f1c1 0001 	rsb	r0, r1, #1
   83684:	f1c1 0420 	rsb	r4, r1, #32
   83688:	fa22 f404 	lsr.w	r4, r2, r4
   8368c:	4407      	add	r7, r0
   8368e:	408a      	lsls	r2, r1
   83690:	4323      	orrs	r3, r4
   83692:	e774      	b.n	8357e <__ieee754_sqrt+0x2a>
   83694:	4602      	mov	r2, r0
   83696:	460b      	mov	r3, r1
   83698:	f000 f9fe 	bl	83a98 <__aeabi_dmul>
   8369c:	4632      	mov	r2, r6
   8369e:	463b      	mov	r3, r7
   836a0:	f000 f848 	bl	83734 <__adddf3>
   836a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   836a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   836ac:	f10c 0c01 	add.w	ip, ip, #1
   836b0:	e7be      	b.n	83630 <__ieee754_sqrt+0xdc>
   836b2:	2420      	movs	r4, #32
   836b4:	2001      	movs	r0, #1
   836b6:	2100      	movs	r1, #0
   836b8:	e7e6      	b.n	83688 <__ieee754_sqrt+0x134>
   836ba:	4602      	mov	r2, r0
   836bc:	460b      	mov	r3, r1
   836be:	f000 f837 	bl	83730 <__aeabi_dsub>
   836c2:	4602      	mov	r2, r0
   836c4:	460b      	mov	r3, r1
   836c6:	f000 fb11 	bl	83cec <__aeabi_ddiv>
   836ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   836ce:	bf00      	nop
   836d0:	7ff00000 	.word	0x7ff00000

000836d4 <__fpclassifyd>:
   836d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   836d8:	b410      	push	{r4}
   836da:	d008      	beq.n	836ee <__fpclassifyd+0x1a>
   836dc:	4a0f      	ldr	r2, [pc, #60]	; (8371c <__fpclassifyd+0x48>)
   836de:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   836e2:	4294      	cmp	r4, r2
   836e4:	d80a      	bhi.n	836fc <__fpclassifyd+0x28>
   836e6:	2004      	movs	r0, #4
   836e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   836ec:	4770      	bx	lr
   836ee:	2800      	cmp	r0, #0
   836f0:	bf0c      	ite	eq
   836f2:	2002      	moveq	r0, #2
   836f4:	2003      	movne	r0, #3
   836f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   836fa:	4770      	bx	lr
   836fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   83700:	d201      	bcs.n	83706 <__fpclassifyd+0x32>
   83702:	2003      	movs	r0, #3
   83704:	e7f7      	b.n	836f6 <__fpclassifyd+0x22>
   83706:	4a06      	ldr	r2, [pc, #24]	; (83720 <__fpclassifyd+0x4c>)
   83708:	4293      	cmp	r3, r2
   8370a:	d001      	beq.n	83710 <__fpclassifyd+0x3c>
   8370c:	2000      	movs	r0, #0
   8370e:	e7f2      	b.n	836f6 <__fpclassifyd+0x22>
   83710:	f1d0 0001 	rsbs	r0, r0, #1
   83714:	bf38      	it	cc
   83716:	2000      	movcc	r0, #0
   83718:	e7ed      	b.n	836f6 <__fpclassifyd+0x22>
   8371a:	bf00      	nop
   8371c:	7fdfffff 	.word	0x7fdfffff
   83720:	7ff00000 	.word	0x7ff00000

00083724 <matherr>:
   83724:	2000      	movs	r0, #0
   83726:	4770      	bx	lr

00083728 <__aeabi_drsub>:
   83728:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8372c:	e002      	b.n	83734 <__adddf3>
   8372e:	bf00      	nop

00083730 <__aeabi_dsub>:
   83730:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083734 <__adddf3>:
   83734:	b530      	push	{r4, r5, lr}
   83736:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8373a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8373e:	ea94 0f05 	teq	r4, r5
   83742:	bf08      	it	eq
   83744:	ea90 0f02 	teqeq	r0, r2
   83748:	bf1f      	itttt	ne
   8374a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8374e:	ea55 0c02 	orrsne.w	ip, r5, r2
   83752:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83756:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8375a:	f000 80e2 	beq.w	83922 <__adddf3+0x1ee>
   8375e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83762:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83766:	bfb8      	it	lt
   83768:	426d      	neglt	r5, r5
   8376a:	dd0c      	ble.n	83786 <__adddf3+0x52>
   8376c:	442c      	add	r4, r5
   8376e:	ea80 0202 	eor.w	r2, r0, r2
   83772:	ea81 0303 	eor.w	r3, r1, r3
   83776:	ea82 0000 	eor.w	r0, r2, r0
   8377a:	ea83 0101 	eor.w	r1, r3, r1
   8377e:	ea80 0202 	eor.w	r2, r0, r2
   83782:	ea81 0303 	eor.w	r3, r1, r3
   83786:	2d36      	cmp	r5, #54	; 0x36
   83788:	bf88      	it	hi
   8378a:	bd30      	pophi	{r4, r5, pc}
   8378c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83790:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83794:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83798:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8379c:	d002      	beq.n	837a4 <__adddf3+0x70>
   8379e:	4240      	negs	r0, r0
   837a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   837a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   837a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   837ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   837b0:	d002      	beq.n	837b8 <__adddf3+0x84>
   837b2:	4252      	negs	r2, r2
   837b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   837b8:	ea94 0f05 	teq	r4, r5
   837bc:	f000 80a7 	beq.w	8390e <__adddf3+0x1da>
   837c0:	f1a4 0401 	sub.w	r4, r4, #1
   837c4:	f1d5 0e20 	rsbs	lr, r5, #32
   837c8:	db0d      	blt.n	837e6 <__adddf3+0xb2>
   837ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   837ce:	fa22 f205 	lsr.w	r2, r2, r5
   837d2:	1880      	adds	r0, r0, r2
   837d4:	f141 0100 	adc.w	r1, r1, #0
   837d8:	fa03 f20e 	lsl.w	r2, r3, lr
   837dc:	1880      	adds	r0, r0, r2
   837de:	fa43 f305 	asr.w	r3, r3, r5
   837e2:	4159      	adcs	r1, r3
   837e4:	e00e      	b.n	83804 <__adddf3+0xd0>
   837e6:	f1a5 0520 	sub.w	r5, r5, #32
   837ea:	f10e 0e20 	add.w	lr, lr, #32
   837ee:	2a01      	cmp	r2, #1
   837f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   837f4:	bf28      	it	cs
   837f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   837fa:	fa43 f305 	asr.w	r3, r3, r5
   837fe:	18c0      	adds	r0, r0, r3
   83800:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83808:	d507      	bpl.n	8381a <__adddf3+0xe6>
   8380a:	f04f 0e00 	mov.w	lr, #0
   8380e:	f1dc 0c00 	rsbs	ip, ip, #0
   83812:	eb7e 0000 	sbcs.w	r0, lr, r0
   83816:	eb6e 0101 	sbc.w	r1, lr, r1
   8381a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8381e:	d31b      	bcc.n	83858 <__adddf3+0x124>
   83820:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83824:	d30c      	bcc.n	83840 <__adddf3+0x10c>
   83826:	0849      	lsrs	r1, r1, #1
   83828:	ea5f 0030 	movs.w	r0, r0, rrx
   8382c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83830:	f104 0401 	add.w	r4, r4, #1
   83834:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83838:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8383c:	f080 809a 	bcs.w	83974 <__adddf3+0x240>
   83840:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83844:	bf08      	it	eq
   83846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8384a:	f150 0000 	adcs.w	r0, r0, #0
   8384e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83852:	ea41 0105 	orr.w	r1, r1, r5
   83856:	bd30      	pop	{r4, r5, pc}
   83858:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8385c:	4140      	adcs	r0, r0
   8385e:	eb41 0101 	adc.w	r1, r1, r1
   83862:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83866:	f1a4 0401 	sub.w	r4, r4, #1
   8386a:	d1e9      	bne.n	83840 <__adddf3+0x10c>
   8386c:	f091 0f00 	teq	r1, #0
   83870:	bf04      	itt	eq
   83872:	4601      	moveq	r1, r0
   83874:	2000      	moveq	r0, #0
   83876:	fab1 f381 	clz	r3, r1
   8387a:	bf08      	it	eq
   8387c:	3320      	addeq	r3, #32
   8387e:	f1a3 030b 	sub.w	r3, r3, #11
   83882:	f1b3 0220 	subs.w	r2, r3, #32
   83886:	da0c      	bge.n	838a2 <__adddf3+0x16e>
   83888:	320c      	adds	r2, #12
   8388a:	dd08      	ble.n	8389e <__adddf3+0x16a>
   8388c:	f102 0c14 	add.w	ip, r2, #20
   83890:	f1c2 020c 	rsb	r2, r2, #12
   83894:	fa01 f00c 	lsl.w	r0, r1, ip
   83898:	fa21 f102 	lsr.w	r1, r1, r2
   8389c:	e00c      	b.n	838b8 <__adddf3+0x184>
   8389e:	f102 0214 	add.w	r2, r2, #20
   838a2:	bfd8      	it	le
   838a4:	f1c2 0c20 	rsble	ip, r2, #32
   838a8:	fa01 f102 	lsl.w	r1, r1, r2
   838ac:	fa20 fc0c 	lsr.w	ip, r0, ip
   838b0:	bfdc      	itt	le
   838b2:	ea41 010c 	orrle.w	r1, r1, ip
   838b6:	4090      	lslle	r0, r2
   838b8:	1ae4      	subs	r4, r4, r3
   838ba:	bfa2      	ittt	ge
   838bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   838c0:	4329      	orrge	r1, r5
   838c2:	bd30      	popge	{r4, r5, pc}
   838c4:	ea6f 0404 	mvn.w	r4, r4
   838c8:	3c1f      	subs	r4, #31
   838ca:	da1c      	bge.n	83906 <__adddf3+0x1d2>
   838cc:	340c      	adds	r4, #12
   838ce:	dc0e      	bgt.n	838ee <__adddf3+0x1ba>
   838d0:	f104 0414 	add.w	r4, r4, #20
   838d4:	f1c4 0220 	rsb	r2, r4, #32
   838d8:	fa20 f004 	lsr.w	r0, r0, r4
   838dc:	fa01 f302 	lsl.w	r3, r1, r2
   838e0:	ea40 0003 	orr.w	r0, r0, r3
   838e4:	fa21 f304 	lsr.w	r3, r1, r4
   838e8:	ea45 0103 	orr.w	r1, r5, r3
   838ec:	bd30      	pop	{r4, r5, pc}
   838ee:	f1c4 040c 	rsb	r4, r4, #12
   838f2:	f1c4 0220 	rsb	r2, r4, #32
   838f6:	fa20 f002 	lsr.w	r0, r0, r2
   838fa:	fa01 f304 	lsl.w	r3, r1, r4
   838fe:	ea40 0003 	orr.w	r0, r0, r3
   83902:	4629      	mov	r1, r5
   83904:	bd30      	pop	{r4, r5, pc}
   83906:	fa21 f004 	lsr.w	r0, r1, r4
   8390a:	4629      	mov	r1, r5
   8390c:	bd30      	pop	{r4, r5, pc}
   8390e:	f094 0f00 	teq	r4, #0
   83912:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   83916:	bf06      	itte	eq
   83918:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8391c:	3401      	addeq	r4, #1
   8391e:	3d01      	subne	r5, #1
   83920:	e74e      	b.n	837c0 <__adddf3+0x8c>
   83922:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83926:	bf18      	it	ne
   83928:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8392c:	d029      	beq.n	83982 <__adddf3+0x24e>
   8392e:	ea94 0f05 	teq	r4, r5
   83932:	bf08      	it	eq
   83934:	ea90 0f02 	teqeq	r0, r2
   83938:	d005      	beq.n	83946 <__adddf3+0x212>
   8393a:	ea54 0c00 	orrs.w	ip, r4, r0
   8393e:	bf04      	itt	eq
   83940:	4619      	moveq	r1, r3
   83942:	4610      	moveq	r0, r2
   83944:	bd30      	pop	{r4, r5, pc}
   83946:	ea91 0f03 	teq	r1, r3
   8394a:	bf1e      	ittt	ne
   8394c:	2100      	movne	r1, #0
   8394e:	2000      	movne	r0, #0
   83950:	bd30      	popne	{r4, r5, pc}
   83952:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83956:	d105      	bne.n	83964 <__adddf3+0x230>
   83958:	0040      	lsls	r0, r0, #1
   8395a:	4149      	adcs	r1, r1
   8395c:	bf28      	it	cs
   8395e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83962:	bd30      	pop	{r4, r5, pc}
   83964:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83968:	bf3c      	itt	cc
   8396a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8396e:	bd30      	popcc	{r4, r5, pc}
   83970:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83974:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83978:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8397c:	f04f 0000 	mov.w	r0, #0
   83980:	bd30      	pop	{r4, r5, pc}
   83982:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83986:	bf1a      	itte	ne
   83988:	4619      	movne	r1, r3
   8398a:	4610      	movne	r0, r2
   8398c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83990:	bf1c      	itt	ne
   83992:	460b      	movne	r3, r1
   83994:	4602      	movne	r2, r0
   83996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8399a:	bf06      	itte	eq
   8399c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   839a0:	ea91 0f03 	teqeq	r1, r3
   839a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   839a8:	bd30      	pop	{r4, r5, pc}
   839aa:	bf00      	nop

000839ac <__aeabi_ui2d>:
   839ac:	f090 0f00 	teq	r0, #0
   839b0:	bf04      	itt	eq
   839b2:	2100      	moveq	r1, #0
   839b4:	4770      	bxeq	lr
   839b6:	b530      	push	{r4, r5, lr}
   839b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   839bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   839c0:	f04f 0500 	mov.w	r5, #0
   839c4:	f04f 0100 	mov.w	r1, #0
   839c8:	e750      	b.n	8386c <__adddf3+0x138>
   839ca:	bf00      	nop

000839cc <__aeabi_i2d>:
   839cc:	f090 0f00 	teq	r0, #0
   839d0:	bf04      	itt	eq
   839d2:	2100      	moveq	r1, #0
   839d4:	4770      	bxeq	lr
   839d6:	b530      	push	{r4, r5, lr}
   839d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   839dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   839e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   839e4:	bf48      	it	mi
   839e6:	4240      	negmi	r0, r0
   839e8:	f04f 0100 	mov.w	r1, #0
   839ec:	e73e      	b.n	8386c <__adddf3+0x138>
   839ee:	bf00      	nop

000839f0 <__aeabi_f2d>:
   839f0:	0042      	lsls	r2, r0, #1
   839f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   839f6:	ea4f 0131 	mov.w	r1, r1, rrx
   839fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   839fe:	bf1f      	itttt	ne
   83a00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83a04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83a08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83a0c:	4770      	bxne	lr
   83a0e:	f092 0f00 	teq	r2, #0
   83a12:	bf14      	ite	ne
   83a14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83a18:	4770      	bxeq	lr
   83a1a:	b530      	push	{r4, r5, lr}
   83a1c:	f44f 7460 	mov.w	r4, #896	; 0x380
   83a20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83a24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83a28:	e720      	b.n	8386c <__adddf3+0x138>
   83a2a:	bf00      	nop

00083a2c <__aeabi_ul2d>:
   83a2c:	ea50 0201 	orrs.w	r2, r0, r1
   83a30:	bf08      	it	eq
   83a32:	4770      	bxeq	lr
   83a34:	b530      	push	{r4, r5, lr}
   83a36:	f04f 0500 	mov.w	r5, #0
   83a3a:	e00a      	b.n	83a52 <__aeabi_l2d+0x16>

00083a3c <__aeabi_l2d>:
   83a3c:	ea50 0201 	orrs.w	r2, r0, r1
   83a40:	bf08      	it	eq
   83a42:	4770      	bxeq	lr
   83a44:	b530      	push	{r4, r5, lr}
   83a46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   83a4a:	d502      	bpl.n	83a52 <__aeabi_l2d+0x16>
   83a4c:	4240      	negs	r0, r0
   83a4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83a52:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83a56:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83a5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83a5e:	f43f aedc 	beq.w	8381a <__adddf3+0xe6>
   83a62:	f04f 0203 	mov.w	r2, #3
   83a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83a6a:	bf18      	it	ne
   83a6c:	3203      	addne	r2, #3
   83a6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83a72:	bf18      	it	ne
   83a74:	3203      	addne	r2, #3
   83a76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83a7a:	f1c2 0320 	rsb	r3, r2, #32
   83a7e:	fa00 fc03 	lsl.w	ip, r0, r3
   83a82:	fa20 f002 	lsr.w	r0, r0, r2
   83a86:	fa01 fe03 	lsl.w	lr, r1, r3
   83a8a:	ea40 000e 	orr.w	r0, r0, lr
   83a8e:	fa21 f102 	lsr.w	r1, r1, r2
   83a92:	4414      	add	r4, r2
   83a94:	e6c1      	b.n	8381a <__adddf3+0xe6>
   83a96:	bf00      	nop

00083a98 <__aeabi_dmul>:
   83a98:	b570      	push	{r4, r5, r6, lr}
   83a9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83a9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83aa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83aa6:	bf1d      	ittte	ne
   83aa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83aac:	ea94 0f0c 	teqne	r4, ip
   83ab0:	ea95 0f0c 	teqne	r5, ip
   83ab4:	f000 f8de 	bleq	83c74 <__aeabi_dmul+0x1dc>
   83ab8:	442c      	add	r4, r5
   83aba:	ea81 0603 	eor.w	r6, r1, r3
   83abe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   83ac2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   83ac6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   83aca:	bf18      	it	ne
   83acc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83ad8:	d038      	beq.n	83b4c <__aeabi_dmul+0xb4>
   83ada:	fba0 ce02 	umull	ip, lr, r0, r2
   83ade:	f04f 0500 	mov.w	r5, #0
   83ae2:	fbe1 e502 	umlal	lr, r5, r1, r2
   83ae6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   83aea:	fbe0 e503 	umlal	lr, r5, r0, r3
   83aee:	f04f 0600 	mov.w	r6, #0
   83af2:	fbe1 5603 	umlal	r5, r6, r1, r3
   83af6:	f09c 0f00 	teq	ip, #0
   83afa:	bf18      	it	ne
   83afc:	f04e 0e01 	orrne.w	lr, lr, #1
   83b00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83b04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   83b08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83b0c:	d204      	bcs.n	83b18 <__aeabi_dmul+0x80>
   83b0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83b12:	416d      	adcs	r5, r5
   83b14:	eb46 0606 	adc.w	r6, r6, r6
   83b18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83b1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83b20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83b24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   83b28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83b2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83b30:	bf88      	it	hi
   83b32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83b36:	d81e      	bhi.n	83b76 <__aeabi_dmul+0xde>
   83b38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83b3c:	bf08      	it	eq
   83b3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83b42:	f150 0000 	adcs.w	r0, r0, #0
   83b46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83b4a:	bd70      	pop	{r4, r5, r6, pc}
   83b4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83b50:	ea46 0101 	orr.w	r1, r6, r1
   83b54:	ea40 0002 	orr.w	r0, r0, r2
   83b58:	ea81 0103 	eor.w	r1, r1, r3
   83b5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83b60:	bfc2      	ittt	gt
   83b62:	ebd4 050c 	rsbsgt	r5, r4, ip
   83b66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83b6a:	bd70      	popgt	{r4, r5, r6, pc}
   83b6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83b70:	f04f 0e00 	mov.w	lr, #0
   83b74:	3c01      	subs	r4, #1
   83b76:	f300 80ab 	bgt.w	83cd0 <__aeabi_dmul+0x238>
   83b7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   83b7e:	bfde      	ittt	le
   83b80:	2000      	movle	r0, #0
   83b82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   83b86:	bd70      	pople	{r4, r5, r6, pc}
   83b88:	f1c4 0400 	rsb	r4, r4, #0
   83b8c:	3c20      	subs	r4, #32
   83b8e:	da35      	bge.n	83bfc <__aeabi_dmul+0x164>
   83b90:	340c      	adds	r4, #12
   83b92:	dc1b      	bgt.n	83bcc <__aeabi_dmul+0x134>
   83b94:	f104 0414 	add.w	r4, r4, #20
   83b98:	f1c4 0520 	rsb	r5, r4, #32
   83b9c:	fa00 f305 	lsl.w	r3, r0, r5
   83ba0:	fa20 f004 	lsr.w	r0, r0, r4
   83ba4:	fa01 f205 	lsl.w	r2, r1, r5
   83ba8:	ea40 0002 	orr.w	r0, r0, r2
   83bac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83bb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83bb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83bb8:	fa21 f604 	lsr.w	r6, r1, r4
   83bbc:	eb42 0106 	adc.w	r1, r2, r6
   83bc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83bc4:	bf08      	it	eq
   83bc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83bca:	bd70      	pop	{r4, r5, r6, pc}
   83bcc:	f1c4 040c 	rsb	r4, r4, #12
   83bd0:	f1c4 0520 	rsb	r5, r4, #32
   83bd4:	fa00 f304 	lsl.w	r3, r0, r4
   83bd8:	fa20 f005 	lsr.w	r0, r0, r5
   83bdc:	fa01 f204 	lsl.w	r2, r1, r4
   83be0:	ea40 0002 	orr.w	r0, r0, r2
   83be4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83be8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83bec:	f141 0100 	adc.w	r1, r1, #0
   83bf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83bf4:	bf08      	it	eq
   83bf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83bfa:	bd70      	pop	{r4, r5, r6, pc}
   83bfc:	f1c4 0520 	rsb	r5, r4, #32
   83c00:	fa00 f205 	lsl.w	r2, r0, r5
   83c04:	ea4e 0e02 	orr.w	lr, lr, r2
   83c08:	fa20 f304 	lsr.w	r3, r0, r4
   83c0c:	fa01 f205 	lsl.w	r2, r1, r5
   83c10:	ea43 0302 	orr.w	r3, r3, r2
   83c14:	fa21 f004 	lsr.w	r0, r1, r4
   83c18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83c1c:	fa21 f204 	lsr.w	r2, r1, r4
   83c20:	ea20 0002 	bic.w	r0, r0, r2
   83c24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   83c28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83c2c:	bf08      	it	eq
   83c2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83c32:	bd70      	pop	{r4, r5, r6, pc}
   83c34:	f094 0f00 	teq	r4, #0
   83c38:	d10f      	bne.n	83c5a <__aeabi_dmul+0x1c2>
   83c3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83c3e:	0040      	lsls	r0, r0, #1
   83c40:	eb41 0101 	adc.w	r1, r1, r1
   83c44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83c48:	bf08      	it	eq
   83c4a:	3c01      	subeq	r4, #1
   83c4c:	d0f7      	beq.n	83c3e <__aeabi_dmul+0x1a6>
   83c4e:	ea41 0106 	orr.w	r1, r1, r6
   83c52:	f095 0f00 	teq	r5, #0
   83c56:	bf18      	it	ne
   83c58:	4770      	bxne	lr
   83c5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83c5e:	0052      	lsls	r2, r2, #1
   83c60:	eb43 0303 	adc.w	r3, r3, r3
   83c64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   83c68:	bf08      	it	eq
   83c6a:	3d01      	subeq	r5, #1
   83c6c:	d0f7      	beq.n	83c5e <__aeabi_dmul+0x1c6>
   83c6e:	ea43 0306 	orr.w	r3, r3, r6
   83c72:	4770      	bx	lr
   83c74:	ea94 0f0c 	teq	r4, ip
   83c78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83c7c:	bf18      	it	ne
   83c7e:	ea95 0f0c 	teqne	r5, ip
   83c82:	d00c      	beq.n	83c9e <__aeabi_dmul+0x206>
   83c84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83c88:	bf18      	it	ne
   83c8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83c8e:	d1d1      	bne.n	83c34 <__aeabi_dmul+0x19c>
   83c90:	ea81 0103 	eor.w	r1, r1, r3
   83c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83c98:	f04f 0000 	mov.w	r0, #0
   83c9c:	bd70      	pop	{r4, r5, r6, pc}
   83c9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83ca2:	bf06      	itte	eq
   83ca4:	4610      	moveq	r0, r2
   83ca6:	4619      	moveq	r1, r3
   83ca8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83cac:	d019      	beq.n	83ce2 <__aeabi_dmul+0x24a>
   83cae:	ea94 0f0c 	teq	r4, ip
   83cb2:	d102      	bne.n	83cba <__aeabi_dmul+0x222>
   83cb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   83cb8:	d113      	bne.n	83ce2 <__aeabi_dmul+0x24a>
   83cba:	ea95 0f0c 	teq	r5, ip
   83cbe:	d105      	bne.n	83ccc <__aeabi_dmul+0x234>
   83cc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83cc4:	bf1c      	itt	ne
   83cc6:	4610      	movne	r0, r2
   83cc8:	4619      	movne	r1, r3
   83cca:	d10a      	bne.n	83ce2 <__aeabi_dmul+0x24a>
   83ccc:	ea81 0103 	eor.w	r1, r1, r3
   83cd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83cd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83cd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83cdc:	f04f 0000 	mov.w	r0, #0
   83ce0:	bd70      	pop	{r4, r5, r6, pc}
   83ce2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83ce6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   83cea:	bd70      	pop	{r4, r5, r6, pc}

00083cec <__aeabi_ddiv>:
   83cec:	b570      	push	{r4, r5, r6, lr}
   83cee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83cf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83cf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83cfa:	bf1d      	ittte	ne
   83cfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83d00:	ea94 0f0c 	teqne	r4, ip
   83d04:	ea95 0f0c 	teqne	r5, ip
   83d08:	f000 f8a7 	bleq	83e5a <__aeabi_ddiv+0x16e>
   83d0c:	eba4 0405 	sub.w	r4, r4, r5
   83d10:	ea81 0e03 	eor.w	lr, r1, r3
   83d14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83d18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83d1c:	f000 8088 	beq.w	83e30 <__aeabi_ddiv+0x144>
   83d20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83d24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   83d28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83d2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83d30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83d34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   83d38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   83d3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83d40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   83d44:	429d      	cmp	r5, r3
   83d46:	bf08      	it	eq
   83d48:	4296      	cmpeq	r6, r2
   83d4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83d4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   83d52:	d202      	bcs.n	83d5a <__aeabi_ddiv+0x6e>
   83d54:	085b      	lsrs	r3, r3, #1
   83d56:	ea4f 0232 	mov.w	r2, r2, rrx
   83d5a:	1ab6      	subs	r6, r6, r2
   83d5c:	eb65 0503 	sbc.w	r5, r5, r3
   83d60:	085b      	lsrs	r3, r3, #1
   83d62:	ea4f 0232 	mov.w	r2, r2, rrx
   83d66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   83d6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83d6e:	ebb6 0e02 	subs.w	lr, r6, r2
   83d72:	eb75 0e03 	sbcs.w	lr, r5, r3
   83d76:	bf22      	ittt	cs
   83d78:	1ab6      	subcs	r6, r6, r2
   83d7a:	4675      	movcs	r5, lr
   83d7c:	ea40 000c 	orrcs.w	r0, r0, ip
   83d80:	085b      	lsrs	r3, r3, #1
   83d82:	ea4f 0232 	mov.w	r2, r2, rrx
   83d86:	ebb6 0e02 	subs.w	lr, r6, r2
   83d8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   83d8e:	bf22      	ittt	cs
   83d90:	1ab6      	subcs	r6, r6, r2
   83d92:	4675      	movcs	r5, lr
   83d94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83d98:	085b      	lsrs	r3, r3, #1
   83d9a:	ea4f 0232 	mov.w	r2, r2, rrx
   83d9e:	ebb6 0e02 	subs.w	lr, r6, r2
   83da2:	eb75 0e03 	sbcs.w	lr, r5, r3
   83da6:	bf22      	ittt	cs
   83da8:	1ab6      	subcs	r6, r6, r2
   83daa:	4675      	movcs	r5, lr
   83dac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83db0:	085b      	lsrs	r3, r3, #1
   83db2:	ea4f 0232 	mov.w	r2, r2, rrx
   83db6:	ebb6 0e02 	subs.w	lr, r6, r2
   83dba:	eb75 0e03 	sbcs.w	lr, r5, r3
   83dbe:	bf22      	ittt	cs
   83dc0:	1ab6      	subcs	r6, r6, r2
   83dc2:	4675      	movcs	r5, lr
   83dc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83dc8:	ea55 0e06 	orrs.w	lr, r5, r6
   83dcc:	d018      	beq.n	83e00 <__aeabi_ddiv+0x114>
   83dce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83dd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   83dd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   83dda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83dde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83de2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   83de6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   83dea:	d1c0      	bne.n	83d6e <__aeabi_ddiv+0x82>
   83dec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83df0:	d10b      	bne.n	83e0a <__aeabi_ddiv+0x11e>
   83df2:	ea41 0100 	orr.w	r1, r1, r0
   83df6:	f04f 0000 	mov.w	r0, #0
   83dfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   83dfe:	e7b6      	b.n	83d6e <__aeabi_ddiv+0x82>
   83e00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83e04:	bf04      	itt	eq
   83e06:	4301      	orreq	r1, r0
   83e08:	2000      	moveq	r0, #0
   83e0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83e0e:	bf88      	it	hi
   83e10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83e14:	f63f aeaf 	bhi.w	83b76 <__aeabi_dmul+0xde>
   83e18:	ebb5 0c03 	subs.w	ip, r5, r3
   83e1c:	bf04      	itt	eq
   83e1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   83e22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83e26:	f150 0000 	adcs.w	r0, r0, #0
   83e2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83e2e:	bd70      	pop	{r4, r5, r6, pc}
   83e30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83e34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   83e38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   83e3c:	bfc2      	ittt	gt
   83e3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   83e42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83e46:	bd70      	popgt	{r4, r5, r6, pc}
   83e48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83e4c:	f04f 0e00 	mov.w	lr, #0
   83e50:	3c01      	subs	r4, #1
   83e52:	e690      	b.n	83b76 <__aeabi_dmul+0xde>
   83e54:	ea45 0e06 	orr.w	lr, r5, r6
   83e58:	e68d      	b.n	83b76 <__aeabi_dmul+0xde>
   83e5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83e5e:	ea94 0f0c 	teq	r4, ip
   83e62:	bf08      	it	eq
   83e64:	ea95 0f0c 	teqeq	r5, ip
   83e68:	f43f af3b 	beq.w	83ce2 <__aeabi_dmul+0x24a>
   83e6c:	ea94 0f0c 	teq	r4, ip
   83e70:	d10a      	bne.n	83e88 <__aeabi_ddiv+0x19c>
   83e72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83e76:	f47f af34 	bne.w	83ce2 <__aeabi_dmul+0x24a>
   83e7a:	ea95 0f0c 	teq	r5, ip
   83e7e:	f47f af25 	bne.w	83ccc <__aeabi_dmul+0x234>
   83e82:	4610      	mov	r0, r2
   83e84:	4619      	mov	r1, r3
   83e86:	e72c      	b.n	83ce2 <__aeabi_dmul+0x24a>
   83e88:	ea95 0f0c 	teq	r5, ip
   83e8c:	d106      	bne.n	83e9c <__aeabi_ddiv+0x1b0>
   83e8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83e92:	f43f aefd 	beq.w	83c90 <__aeabi_dmul+0x1f8>
   83e96:	4610      	mov	r0, r2
   83e98:	4619      	mov	r1, r3
   83e9a:	e722      	b.n	83ce2 <__aeabi_dmul+0x24a>
   83e9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83ea0:	bf18      	it	ne
   83ea2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83ea6:	f47f aec5 	bne.w	83c34 <__aeabi_dmul+0x19c>
   83eaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83eae:	f47f af0d 	bne.w	83ccc <__aeabi_dmul+0x234>
   83eb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   83eb6:	f47f aeeb 	bne.w	83c90 <__aeabi_dmul+0x1f8>
   83eba:	e712      	b.n	83ce2 <__aeabi_dmul+0x24a>

00083ebc <__gedf2>:
   83ebc:	f04f 3cff 	mov.w	ip, #4294967295
   83ec0:	e006      	b.n	83ed0 <__cmpdf2+0x4>
   83ec2:	bf00      	nop

00083ec4 <__ledf2>:
   83ec4:	f04f 0c01 	mov.w	ip, #1
   83ec8:	e002      	b.n	83ed0 <__cmpdf2+0x4>
   83eca:	bf00      	nop

00083ecc <__cmpdf2>:
   83ecc:	f04f 0c01 	mov.w	ip, #1
   83ed0:	f84d cd04 	str.w	ip, [sp, #-4]!
   83ed4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83ed8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83edc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83ee0:	bf18      	it	ne
   83ee2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   83ee6:	d01b      	beq.n	83f20 <__cmpdf2+0x54>
   83ee8:	b001      	add	sp, #4
   83eea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   83eee:	bf0c      	ite	eq
   83ef0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   83ef4:	ea91 0f03 	teqne	r1, r3
   83ef8:	bf02      	ittt	eq
   83efa:	ea90 0f02 	teqeq	r0, r2
   83efe:	2000      	moveq	r0, #0
   83f00:	4770      	bxeq	lr
   83f02:	f110 0f00 	cmn.w	r0, #0
   83f06:	ea91 0f03 	teq	r1, r3
   83f0a:	bf58      	it	pl
   83f0c:	4299      	cmppl	r1, r3
   83f0e:	bf08      	it	eq
   83f10:	4290      	cmpeq	r0, r2
   83f12:	bf2c      	ite	cs
   83f14:	17d8      	asrcs	r0, r3, #31
   83f16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   83f1a:	f040 0001 	orr.w	r0, r0, #1
   83f1e:	4770      	bx	lr
   83f20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83f24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83f28:	d102      	bne.n	83f30 <__cmpdf2+0x64>
   83f2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   83f2e:	d107      	bne.n	83f40 <__cmpdf2+0x74>
   83f30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83f38:	d1d6      	bne.n	83ee8 <__cmpdf2+0x1c>
   83f3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   83f3e:	d0d3      	beq.n	83ee8 <__cmpdf2+0x1c>
   83f40:	f85d 0b04 	ldr.w	r0, [sp], #4
   83f44:	4770      	bx	lr
   83f46:	bf00      	nop

00083f48 <__aeabi_cdrcmple>:
   83f48:	4684      	mov	ip, r0
   83f4a:	4610      	mov	r0, r2
   83f4c:	4662      	mov	r2, ip
   83f4e:	468c      	mov	ip, r1
   83f50:	4619      	mov	r1, r3
   83f52:	4663      	mov	r3, ip
   83f54:	e000      	b.n	83f58 <__aeabi_cdcmpeq>
   83f56:	bf00      	nop

00083f58 <__aeabi_cdcmpeq>:
   83f58:	b501      	push	{r0, lr}
   83f5a:	f7ff ffb7 	bl	83ecc <__cmpdf2>
   83f5e:	2800      	cmp	r0, #0
   83f60:	bf48      	it	mi
   83f62:	f110 0f00 	cmnmi.w	r0, #0
   83f66:	bd01      	pop	{r0, pc}

00083f68 <__aeabi_dcmpeq>:
   83f68:	f84d ed08 	str.w	lr, [sp, #-8]!
   83f6c:	f7ff fff4 	bl	83f58 <__aeabi_cdcmpeq>
   83f70:	bf0c      	ite	eq
   83f72:	2001      	moveq	r0, #1
   83f74:	2000      	movne	r0, #0
   83f76:	f85d fb08 	ldr.w	pc, [sp], #8
   83f7a:	bf00      	nop

00083f7c <__aeabi_dcmplt>:
   83f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   83f80:	f7ff ffea 	bl	83f58 <__aeabi_cdcmpeq>
   83f84:	bf34      	ite	cc
   83f86:	2001      	movcc	r0, #1
   83f88:	2000      	movcs	r0, #0
   83f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   83f8e:	bf00      	nop

00083f90 <__aeabi_dcmple>:
   83f90:	f84d ed08 	str.w	lr, [sp, #-8]!
   83f94:	f7ff ffe0 	bl	83f58 <__aeabi_cdcmpeq>
   83f98:	bf94      	ite	ls
   83f9a:	2001      	movls	r0, #1
   83f9c:	2000      	movhi	r0, #0
   83f9e:	f85d fb08 	ldr.w	pc, [sp], #8
   83fa2:	bf00      	nop

00083fa4 <__aeabi_dcmpge>:
   83fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   83fa8:	f7ff ffce 	bl	83f48 <__aeabi_cdrcmple>
   83fac:	bf94      	ite	ls
   83fae:	2001      	movls	r0, #1
   83fb0:	2000      	movhi	r0, #0
   83fb2:	f85d fb08 	ldr.w	pc, [sp], #8
   83fb6:	bf00      	nop

00083fb8 <__aeabi_dcmpgt>:
   83fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   83fbc:	f7ff ffc4 	bl	83f48 <__aeabi_cdrcmple>
   83fc0:	bf34      	ite	cc
   83fc2:	2001      	movcc	r0, #1
   83fc4:	2000      	movcs	r0, #0
   83fc6:	f85d fb08 	ldr.w	pc, [sp], #8
   83fca:	bf00      	nop

00083fcc <__aeabi_d2iz>:
   83fcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83fd4:	d215      	bcs.n	84002 <__aeabi_d2iz+0x36>
   83fd6:	d511      	bpl.n	83ffc <__aeabi_d2iz+0x30>
   83fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83fe0:	d912      	bls.n	84008 <__aeabi_d2iz+0x3c>
   83fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83fee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83ff2:	fa23 f002 	lsr.w	r0, r3, r2
   83ff6:	bf18      	it	ne
   83ff8:	4240      	negne	r0, r0
   83ffa:	4770      	bx	lr
   83ffc:	f04f 0000 	mov.w	r0, #0
   84000:	4770      	bx	lr
   84002:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   84006:	d105      	bne.n	84014 <__aeabi_d2iz+0x48>
   84008:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8400c:	bf08      	it	eq
   8400e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   84012:	4770      	bx	lr
   84014:	f04f 0000 	mov.w	r0, #0
   84018:	4770      	bx	lr
   8401a:	bf00      	nop

0008401c <__aeabi_d2uiz>:
   8401c:	004a      	lsls	r2, r1, #1
   8401e:	d211      	bcs.n	84044 <__aeabi_d2uiz+0x28>
   84020:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   84024:	d211      	bcs.n	8404a <__aeabi_d2uiz+0x2e>
   84026:	d50d      	bpl.n	84044 <__aeabi_d2uiz+0x28>
   84028:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8402c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   84030:	d40e      	bmi.n	84050 <__aeabi_d2uiz+0x34>
   84032:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   84036:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8403a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8403e:	fa23 f002 	lsr.w	r0, r3, r2
   84042:	4770      	bx	lr
   84044:	f04f 0000 	mov.w	r0, #0
   84048:	4770      	bx	lr
   8404a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8404e:	d102      	bne.n	84056 <__aeabi_d2uiz+0x3a>
   84050:	f04f 30ff 	mov.w	r0, #4294967295
   84054:	4770      	bx	lr
   84056:	f04f 0000 	mov.w	r0, #0
   8405a:	4770      	bx	lr

0008405c <__errno>:
   8405c:	4b01      	ldr	r3, [pc, #4]	; (84064 <__errno+0x8>)
   8405e:	6818      	ldr	r0, [r3, #0]
   84060:	4770      	bx	lr
   84062:	bf00      	nop
   84064:	200705a0 	.word	0x200705a0

00084068 <__libc_init_array>:
   84068:	b570      	push	{r4, r5, r6, lr}
   8406a:	4e0f      	ldr	r6, [pc, #60]	; (840a8 <__libc_init_array+0x40>)
   8406c:	4d0f      	ldr	r5, [pc, #60]	; (840ac <__libc_init_array+0x44>)
   8406e:	1b76      	subs	r6, r6, r5
   84070:	10b6      	asrs	r6, r6, #2
   84072:	d007      	beq.n	84084 <__libc_init_array+0x1c>
   84074:	3d04      	subs	r5, #4
   84076:	2400      	movs	r4, #0
   84078:	3401      	adds	r4, #1
   8407a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8407e:	4798      	blx	r3
   84080:	42a6      	cmp	r6, r4
   84082:	d1f9      	bne.n	84078 <__libc_init_array+0x10>
   84084:	4e0a      	ldr	r6, [pc, #40]	; (840b0 <__libc_init_array+0x48>)
   84086:	4d0b      	ldr	r5, [pc, #44]	; (840b4 <__libc_init_array+0x4c>)
   84088:	f003 f8ba 	bl	87200 <_init>
   8408c:	1b76      	subs	r6, r6, r5
   8408e:	10b6      	asrs	r6, r6, #2
   84090:	d008      	beq.n	840a4 <__libc_init_array+0x3c>
   84092:	3d04      	subs	r5, #4
   84094:	2400      	movs	r4, #0
   84096:	3401      	adds	r4, #1
   84098:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8409c:	4798      	blx	r3
   8409e:	42a6      	cmp	r6, r4
   840a0:	d1f9      	bne.n	84096 <__libc_init_array+0x2e>
   840a2:	bd70      	pop	{r4, r5, r6, pc}
   840a4:	bd70      	pop	{r4, r5, r6, pc}
   840a6:	bf00      	nop
   840a8:	0008720c 	.word	0x0008720c
   840ac:	0008720c 	.word	0x0008720c
   840b0:	00087214 	.word	0x00087214
   840b4:	0008720c 	.word	0x0008720c

000840b8 <iprintf>:
   840b8:	b40f      	push	{r0, r1, r2, r3}
   840ba:	b510      	push	{r4, lr}
   840bc:	4b07      	ldr	r3, [pc, #28]	; (840dc <iprintf+0x24>)
   840be:	b082      	sub	sp, #8
   840c0:	ac04      	add	r4, sp, #16
   840c2:	f854 2b04 	ldr.w	r2, [r4], #4
   840c6:	6818      	ldr	r0, [r3, #0]
   840c8:	4623      	mov	r3, r4
   840ca:	6881      	ldr	r1, [r0, #8]
   840cc:	9401      	str	r4, [sp, #4]
   840ce:	f000 f9ed 	bl	844ac <_vfiprintf_r>
   840d2:	b002      	add	sp, #8
   840d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   840d8:	b004      	add	sp, #16
   840da:	4770      	bx	lr
   840dc:	200705a0 	.word	0x200705a0

000840e0 <memcpy>:
   840e0:	4684      	mov	ip, r0
   840e2:	ea41 0300 	orr.w	r3, r1, r0
   840e6:	f013 0303 	ands.w	r3, r3, #3
   840ea:	d149      	bne.n	84180 <memcpy+0xa0>
   840ec:	3a40      	subs	r2, #64	; 0x40
   840ee:	d323      	bcc.n	84138 <memcpy+0x58>
   840f0:	680b      	ldr	r3, [r1, #0]
   840f2:	6003      	str	r3, [r0, #0]
   840f4:	684b      	ldr	r3, [r1, #4]
   840f6:	6043      	str	r3, [r0, #4]
   840f8:	688b      	ldr	r3, [r1, #8]
   840fa:	6083      	str	r3, [r0, #8]
   840fc:	68cb      	ldr	r3, [r1, #12]
   840fe:	60c3      	str	r3, [r0, #12]
   84100:	690b      	ldr	r3, [r1, #16]
   84102:	6103      	str	r3, [r0, #16]
   84104:	694b      	ldr	r3, [r1, #20]
   84106:	6143      	str	r3, [r0, #20]
   84108:	698b      	ldr	r3, [r1, #24]
   8410a:	6183      	str	r3, [r0, #24]
   8410c:	69cb      	ldr	r3, [r1, #28]
   8410e:	61c3      	str	r3, [r0, #28]
   84110:	6a0b      	ldr	r3, [r1, #32]
   84112:	6203      	str	r3, [r0, #32]
   84114:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84116:	6243      	str	r3, [r0, #36]	; 0x24
   84118:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8411a:	6283      	str	r3, [r0, #40]	; 0x28
   8411c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8411e:	62c3      	str	r3, [r0, #44]	; 0x2c
   84120:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84122:	6303      	str	r3, [r0, #48]	; 0x30
   84124:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84126:	6343      	str	r3, [r0, #52]	; 0x34
   84128:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8412a:	6383      	str	r3, [r0, #56]	; 0x38
   8412c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8412e:	63c3      	str	r3, [r0, #60]	; 0x3c
   84130:	3040      	adds	r0, #64	; 0x40
   84132:	3140      	adds	r1, #64	; 0x40
   84134:	3a40      	subs	r2, #64	; 0x40
   84136:	d2db      	bcs.n	840f0 <memcpy+0x10>
   84138:	3230      	adds	r2, #48	; 0x30
   8413a:	d30b      	bcc.n	84154 <memcpy+0x74>
   8413c:	680b      	ldr	r3, [r1, #0]
   8413e:	6003      	str	r3, [r0, #0]
   84140:	684b      	ldr	r3, [r1, #4]
   84142:	6043      	str	r3, [r0, #4]
   84144:	688b      	ldr	r3, [r1, #8]
   84146:	6083      	str	r3, [r0, #8]
   84148:	68cb      	ldr	r3, [r1, #12]
   8414a:	60c3      	str	r3, [r0, #12]
   8414c:	3010      	adds	r0, #16
   8414e:	3110      	adds	r1, #16
   84150:	3a10      	subs	r2, #16
   84152:	d2f3      	bcs.n	8413c <memcpy+0x5c>
   84154:	320c      	adds	r2, #12
   84156:	d305      	bcc.n	84164 <memcpy+0x84>
   84158:	f851 3b04 	ldr.w	r3, [r1], #4
   8415c:	f840 3b04 	str.w	r3, [r0], #4
   84160:	3a04      	subs	r2, #4
   84162:	d2f9      	bcs.n	84158 <memcpy+0x78>
   84164:	3204      	adds	r2, #4
   84166:	d008      	beq.n	8417a <memcpy+0x9a>
   84168:	07d2      	lsls	r2, r2, #31
   8416a:	bf1c      	itt	ne
   8416c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84170:	f800 3b01 	strbne.w	r3, [r0], #1
   84174:	d301      	bcc.n	8417a <memcpy+0x9a>
   84176:	880b      	ldrh	r3, [r1, #0]
   84178:	8003      	strh	r3, [r0, #0]
   8417a:	4660      	mov	r0, ip
   8417c:	4770      	bx	lr
   8417e:	bf00      	nop
   84180:	2a08      	cmp	r2, #8
   84182:	d313      	bcc.n	841ac <memcpy+0xcc>
   84184:	078b      	lsls	r3, r1, #30
   84186:	d0b1      	beq.n	840ec <memcpy+0xc>
   84188:	f010 0303 	ands.w	r3, r0, #3
   8418c:	d0ae      	beq.n	840ec <memcpy+0xc>
   8418e:	f1c3 0304 	rsb	r3, r3, #4
   84192:	1ad2      	subs	r2, r2, r3
   84194:	07db      	lsls	r3, r3, #31
   84196:	bf1c      	itt	ne
   84198:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8419c:	f800 3b01 	strbne.w	r3, [r0], #1
   841a0:	d3a4      	bcc.n	840ec <memcpy+0xc>
   841a2:	f831 3b02 	ldrh.w	r3, [r1], #2
   841a6:	f820 3b02 	strh.w	r3, [r0], #2
   841aa:	e79f      	b.n	840ec <memcpy+0xc>
   841ac:	3a04      	subs	r2, #4
   841ae:	d3d9      	bcc.n	84164 <memcpy+0x84>
   841b0:	3a01      	subs	r2, #1
   841b2:	f811 3b01 	ldrb.w	r3, [r1], #1
   841b6:	f800 3b01 	strb.w	r3, [r0], #1
   841ba:	d2f9      	bcs.n	841b0 <memcpy+0xd0>
   841bc:	780b      	ldrb	r3, [r1, #0]
   841be:	7003      	strb	r3, [r0, #0]
   841c0:	784b      	ldrb	r3, [r1, #1]
   841c2:	7043      	strb	r3, [r0, #1]
   841c4:	788b      	ldrb	r3, [r1, #2]
   841c6:	7083      	strb	r3, [r0, #2]
   841c8:	4660      	mov	r0, ip
   841ca:	4770      	bx	lr

000841cc <memset>:
   841cc:	b4f0      	push	{r4, r5, r6, r7}
   841ce:	0784      	lsls	r4, r0, #30
   841d0:	d043      	beq.n	8425a <memset+0x8e>
   841d2:	1e54      	subs	r4, r2, #1
   841d4:	2a00      	cmp	r2, #0
   841d6:	d03e      	beq.n	84256 <memset+0x8a>
   841d8:	b2cd      	uxtb	r5, r1
   841da:	4603      	mov	r3, r0
   841dc:	e003      	b.n	841e6 <memset+0x1a>
   841de:	1e62      	subs	r2, r4, #1
   841e0:	2c00      	cmp	r4, #0
   841e2:	d038      	beq.n	84256 <memset+0x8a>
   841e4:	4614      	mov	r4, r2
   841e6:	f803 5b01 	strb.w	r5, [r3], #1
   841ea:	079a      	lsls	r2, r3, #30
   841ec:	d1f7      	bne.n	841de <memset+0x12>
   841ee:	2c03      	cmp	r4, #3
   841f0:	d92a      	bls.n	84248 <memset+0x7c>
   841f2:	b2cd      	uxtb	r5, r1
   841f4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   841f8:	2c0f      	cmp	r4, #15
   841fa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   841fe:	d915      	bls.n	8422c <memset+0x60>
   84200:	f1a4 0710 	sub.w	r7, r4, #16
   84204:	093f      	lsrs	r7, r7, #4
   84206:	f103 0610 	add.w	r6, r3, #16
   8420a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8420e:	461a      	mov	r2, r3
   84210:	6015      	str	r5, [r2, #0]
   84212:	6055      	str	r5, [r2, #4]
   84214:	6095      	str	r5, [r2, #8]
   84216:	60d5      	str	r5, [r2, #12]
   84218:	3210      	adds	r2, #16
   8421a:	42b2      	cmp	r2, r6
   8421c:	d1f8      	bne.n	84210 <memset+0x44>
   8421e:	f004 040f 	and.w	r4, r4, #15
   84222:	3701      	adds	r7, #1
   84224:	2c03      	cmp	r4, #3
   84226:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8422a:	d90d      	bls.n	84248 <memset+0x7c>
   8422c:	461e      	mov	r6, r3
   8422e:	4622      	mov	r2, r4
   84230:	3a04      	subs	r2, #4
   84232:	2a03      	cmp	r2, #3
   84234:	f846 5b04 	str.w	r5, [r6], #4
   84238:	d8fa      	bhi.n	84230 <memset+0x64>
   8423a:	1f22      	subs	r2, r4, #4
   8423c:	f022 0203 	bic.w	r2, r2, #3
   84240:	3204      	adds	r2, #4
   84242:	4413      	add	r3, r2
   84244:	f004 0403 	and.w	r4, r4, #3
   84248:	b12c      	cbz	r4, 84256 <memset+0x8a>
   8424a:	b2c9      	uxtb	r1, r1
   8424c:	441c      	add	r4, r3
   8424e:	f803 1b01 	strb.w	r1, [r3], #1
   84252:	42a3      	cmp	r3, r4
   84254:	d1fb      	bne.n	8424e <memset+0x82>
   84256:	bcf0      	pop	{r4, r5, r6, r7}
   84258:	4770      	bx	lr
   8425a:	4614      	mov	r4, r2
   8425c:	4603      	mov	r3, r0
   8425e:	e7c6      	b.n	841ee <memset+0x22>

00084260 <setbuf>:
   84260:	2900      	cmp	r1, #0
   84262:	bf0c      	ite	eq
   84264:	2202      	moveq	r2, #2
   84266:	2200      	movne	r2, #0
   84268:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8426c:	f000 b800 	b.w	84270 <setvbuf>

00084270 <setvbuf>:
   84270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84274:	4d3c      	ldr	r5, [pc, #240]	; (84368 <setvbuf+0xf8>)
   84276:	4604      	mov	r4, r0
   84278:	682d      	ldr	r5, [r5, #0]
   8427a:	4688      	mov	r8, r1
   8427c:	4616      	mov	r6, r2
   8427e:	461f      	mov	r7, r3
   84280:	b115      	cbz	r5, 84288 <setvbuf+0x18>
   84282:	6bab      	ldr	r3, [r5, #56]	; 0x38
   84284:	2b00      	cmp	r3, #0
   84286:	d04f      	beq.n	84328 <setvbuf+0xb8>
   84288:	2e02      	cmp	r6, #2
   8428a:	d830      	bhi.n	842ee <setvbuf+0x7e>
   8428c:	2f00      	cmp	r7, #0
   8428e:	db2e      	blt.n	842ee <setvbuf+0x7e>
   84290:	4628      	mov	r0, r5
   84292:	4621      	mov	r1, r4
   84294:	f001 f888 	bl	853a8 <_fflush_r>
   84298:	89a3      	ldrh	r3, [r4, #12]
   8429a:	2200      	movs	r2, #0
   8429c:	6062      	str	r2, [r4, #4]
   8429e:	61a2      	str	r2, [r4, #24]
   842a0:	061a      	lsls	r2, r3, #24
   842a2:	d428      	bmi.n	842f6 <setvbuf+0x86>
   842a4:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   842a8:	b29b      	uxth	r3, r3
   842aa:	2e02      	cmp	r6, #2
   842ac:	81a3      	strh	r3, [r4, #12]
   842ae:	d02d      	beq.n	8430c <setvbuf+0x9c>
   842b0:	f1b8 0f00 	cmp.w	r8, #0
   842b4:	d03c      	beq.n	84330 <setvbuf+0xc0>
   842b6:	2e01      	cmp	r6, #1
   842b8:	d013      	beq.n	842e2 <setvbuf+0x72>
   842ba:	b29b      	uxth	r3, r3
   842bc:	f003 0008 	and.w	r0, r3, #8
   842c0:	4a2a      	ldr	r2, [pc, #168]	; (8436c <setvbuf+0xfc>)
   842c2:	b280      	uxth	r0, r0
   842c4:	63ea      	str	r2, [r5, #60]	; 0x3c
   842c6:	f8c4 8000 	str.w	r8, [r4]
   842ca:	f8c4 8010 	str.w	r8, [r4, #16]
   842ce:	6167      	str	r7, [r4, #20]
   842d0:	b178      	cbz	r0, 842f2 <setvbuf+0x82>
   842d2:	f013 0f03 	tst.w	r3, #3
   842d6:	bf18      	it	ne
   842d8:	2700      	movne	r7, #0
   842da:	60a7      	str	r7, [r4, #8]
   842dc:	2000      	movs	r0, #0
   842de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   842e2:	f043 0301 	orr.w	r3, r3, #1
   842e6:	427a      	negs	r2, r7
   842e8:	81a3      	strh	r3, [r4, #12]
   842ea:	61a2      	str	r2, [r4, #24]
   842ec:	e7e5      	b.n	842ba <setvbuf+0x4a>
   842ee:	f04f 30ff 	mov.w	r0, #4294967295
   842f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   842f6:	4628      	mov	r0, r5
   842f8:	6921      	ldr	r1, [r4, #16]
   842fa:	f001 f9b5 	bl	85668 <_free_r>
   842fe:	89a3      	ldrh	r3, [r4, #12]
   84300:	2e02      	cmp	r6, #2
   84302:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   84306:	b29b      	uxth	r3, r3
   84308:	81a3      	strh	r3, [r4, #12]
   8430a:	d1d1      	bne.n	842b0 <setvbuf+0x40>
   8430c:	2000      	movs	r0, #0
   8430e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84312:	f043 0302 	orr.w	r3, r3, #2
   84316:	2500      	movs	r5, #0
   84318:	2101      	movs	r1, #1
   8431a:	81a3      	strh	r3, [r4, #12]
   8431c:	60a5      	str	r5, [r4, #8]
   8431e:	6022      	str	r2, [r4, #0]
   84320:	6122      	str	r2, [r4, #16]
   84322:	6161      	str	r1, [r4, #20]
   84324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84328:	4628      	mov	r0, r5
   8432a:	f001 f859 	bl	853e0 <__sinit>
   8432e:	e7ab      	b.n	84288 <setvbuf+0x18>
   84330:	2f00      	cmp	r7, #0
   84332:	bf08      	it	eq
   84334:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   84338:	4638      	mov	r0, r7
   8433a:	f001 fc8b 	bl	85c54 <malloc>
   8433e:	4680      	mov	r8, r0
   84340:	b128      	cbz	r0, 8434e <setvbuf+0xde>
   84342:	89a3      	ldrh	r3, [r4, #12]
   84344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84348:	b29b      	uxth	r3, r3
   8434a:	81a3      	strh	r3, [r4, #12]
   8434c:	e7b3      	b.n	842b6 <setvbuf+0x46>
   8434e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   84352:	f001 fc7f 	bl	85c54 <malloc>
   84356:	4680      	mov	r8, r0
   84358:	b918      	cbnz	r0, 84362 <setvbuf+0xf2>
   8435a:	89a3      	ldrh	r3, [r4, #12]
   8435c:	f04f 30ff 	mov.w	r0, #4294967295
   84360:	e7d5      	b.n	8430e <setvbuf+0x9e>
   84362:	f44f 6780 	mov.w	r7, #1024	; 0x400
   84366:	e7ec      	b.n	84342 <setvbuf+0xd2>
   84368:	200705a0 	.word	0x200705a0
   8436c:	000853d5 	.word	0x000853d5

00084370 <strlen>:
   84370:	f020 0103 	bic.w	r1, r0, #3
   84374:	f010 0003 	ands.w	r0, r0, #3
   84378:	f1c0 0000 	rsb	r0, r0, #0
   8437c:	f851 3b04 	ldr.w	r3, [r1], #4
   84380:	f100 0c04 	add.w	ip, r0, #4
   84384:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84388:	f06f 0200 	mvn.w	r2, #0
   8438c:	bf1c      	itt	ne
   8438e:	fa22 f20c 	lsrne.w	r2, r2, ip
   84392:	4313      	orrne	r3, r2
   84394:	f04f 0c01 	mov.w	ip, #1
   84398:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8439c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   843a0:	eba3 020c 	sub.w	r2, r3, ip
   843a4:	ea22 0203 	bic.w	r2, r2, r3
   843a8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   843ac:	bf04      	itt	eq
   843ae:	f851 3b04 	ldreq.w	r3, [r1], #4
   843b2:	3004      	addeq	r0, #4
   843b4:	d0f4      	beq.n	843a0 <strlen+0x30>
   843b6:	f013 0fff 	tst.w	r3, #255	; 0xff
   843ba:	bf1f      	itttt	ne
   843bc:	3001      	addne	r0, #1
   843be:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   843c2:	3001      	addne	r0, #1
   843c4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   843c8:	bf18      	it	ne
   843ca:	3001      	addne	r0, #1
   843cc:	4770      	bx	lr
   843ce:	bf00      	nop

000843d0 <strncpy>:
   843d0:	ea40 0301 	orr.w	r3, r0, r1
   843d4:	079b      	lsls	r3, r3, #30
   843d6:	b470      	push	{r4, r5, r6}
   843d8:	d12a      	bne.n	84430 <strncpy+0x60>
   843da:	2a03      	cmp	r2, #3
   843dc:	d928      	bls.n	84430 <strncpy+0x60>
   843de:	460c      	mov	r4, r1
   843e0:	4603      	mov	r3, r0
   843e2:	4621      	mov	r1, r4
   843e4:	f854 5b04 	ldr.w	r5, [r4], #4
   843e8:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   843ec:	ea26 0605 	bic.w	r6, r6, r5
   843f0:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   843f4:	d105      	bne.n	84402 <strncpy+0x32>
   843f6:	3a04      	subs	r2, #4
   843f8:	2a03      	cmp	r2, #3
   843fa:	f843 5b04 	str.w	r5, [r3], #4
   843fe:	4621      	mov	r1, r4
   84400:	d8ef      	bhi.n	843e2 <strncpy+0x12>
   84402:	b19a      	cbz	r2, 8442c <strncpy+0x5c>
   84404:	780c      	ldrb	r4, [r1, #0]
   84406:	3a01      	subs	r2, #1
   84408:	701c      	strb	r4, [r3, #0]
   8440a:	3301      	adds	r3, #1
   8440c:	b13c      	cbz	r4, 8441e <strncpy+0x4e>
   8440e:	b16a      	cbz	r2, 8442c <strncpy+0x5c>
   84410:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   84414:	3a01      	subs	r2, #1
   84416:	f803 4b01 	strb.w	r4, [r3], #1
   8441a:	2c00      	cmp	r4, #0
   8441c:	d1f7      	bne.n	8440e <strncpy+0x3e>
   8441e:	b12a      	cbz	r2, 8442c <strncpy+0x5c>
   84420:	441a      	add	r2, r3
   84422:	2100      	movs	r1, #0
   84424:	f803 1b01 	strb.w	r1, [r3], #1
   84428:	4293      	cmp	r3, r2
   8442a:	d1fb      	bne.n	84424 <strncpy+0x54>
   8442c:	bc70      	pop	{r4, r5, r6}
   8442e:	4770      	bx	lr
   84430:	4603      	mov	r3, r0
   84432:	e7e6      	b.n	84402 <strncpy+0x32>

00084434 <__sprint_r.part.0>:
   84434:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   84436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8443a:	049c      	lsls	r4, r3, #18
   8443c:	460e      	mov	r6, r1
   8443e:	4680      	mov	r8, r0
   84440:	4691      	mov	r9, r2
   84442:	d52a      	bpl.n	8449a <__sprint_r.part.0+0x66>
   84444:	6893      	ldr	r3, [r2, #8]
   84446:	6812      	ldr	r2, [r2, #0]
   84448:	f102 0a08 	add.w	sl, r2, #8
   8444c:	b31b      	cbz	r3, 84496 <__sprint_r.part.0+0x62>
   8444e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   84452:	08bf      	lsrs	r7, r7, #2
   84454:	d017      	beq.n	84486 <__sprint_r.part.0+0x52>
   84456:	3d04      	subs	r5, #4
   84458:	2400      	movs	r4, #0
   8445a:	e001      	b.n	84460 <__sprint_r.part.0+0x2c>
   8445c:	42a7      	cmp	r7, r4
   8445e:	d010      	beq.n	84482 <__sprint_r.part.0+0x4e>
   84460:	4640      	mov	r0, r8
   84462:	f855 1f04 	ldr.w	r1, [r5, #4]!
   84466:	4632      	mov	r2, r6
   84468:	f001 f850 	bl	8550c <_fputwc_r>
   8446c:	1c43      	adds	r3, r0, #1
   8446e:	f104 0401 	add.w	r4, r4, #1
   84472:	d1f3      	bne.n	8445c <__sprint_r.part.0+0x28>
   84474:	2300      	movs	r3, #0
   84476:	f8c9 3008 	str.w	r3, [r9, #8]
   8447a:	f8c9 3004 	str.w	r3, [r9, #4]
   8447e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84482:	f8d9 3008 	ldr.w	r3, [r9, #8]
   84486:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8448a:	f8c9 3008 	str.w	r3, [r9, #8]
   8448e:	f10a 0a08 	add.w	sl, sl, #8
   84492:	2b00      	cmp	r3, #0
   84494:	d1db      	bne.n	8444e <__sprint_r.part.0+0x1a>
   84496:	2000      	movs	r0, #0
   84498:	e7ec      	b.n	84474 <__sprint_r.part.0+0x40>
   8449a:	f001 f9b1 	bl	85800 <__sfvwrite_r>
   8449e:	2300      	movs	r3, #0
   844a0:	f8c9 3008 	str.w	r3, [r9, #8]
   844a4:	f8c9 3004 	str.w	r3, [r9, #4]
   844a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000844ac <_vfiprintf_r>:
   844ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   844b0:	b0b1      	sub	sp, #196	; 0xc4
   844b2:	461c      	mov	r4, r3
   844b4:	9102      	str	r1, [sp, #8]
   844b6:	4690      	mov	r8, r2
   844b8:	9308      	str	r3, [sp, #32]
   844ba:	9006      	str	r0, [sp, #24]
   844bc:	b118      	cbz	r0, 844c6 <_vfiprintf_r+0x1a>
   844be:	6b83      	ldr	r3, [r0, #56]	; 0x38
   844c0:	2b00      	cmp	r3, #0
   844c2:	f000 80e8 	beq.w	84696 <_vfiprintf_r+0x1ea>
   844c6:	9d02      	ldr	r5, [sp, #8]
   844c8:	89ab      	ldrh	r3, [r5, #12]
   844ca:	b29a      	uxth	r2, r3
   844cc:	0490      	lsls	r0, r2, #18
   844ce:	d407      	bmi.n	844e0 <_vfiprintf_r+0x34>
   844d0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   844d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   844d6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   844da:	81ab      	strh	r3, [r5, #12]
   844dc:	b29a      	uxth	r2, r3
   844de:	6669      	str	r1, [r5, #100]	; 0x64
   844e0:	0711      	lsls	r1, r2, #28
   844e2:	f140 80b7 	bpl.w	84654 <_vfiprintf_r+0x1a8>
   844e6:	f8dd b008 	ldr.w	fp, [sp, #8]
   844ea:	f8db 3010 	ldr.w	r3, [fp, #16]
   844ee:	2b00      	cmp	r3, #0
   844f0:	f000 80b0 	beq.w	84654 <_vfiprintf_r+0x1a8>
   844f4:	f002 021a 	and.w	r2, r2, #26
   844f8:	2a0a      	cmp	r2, #10
   844fa:	f000 80b7 	beq.w	8466c <_vfiprintf_r+0x1c0>
   844fe:	2300      	movs	r3, #0
   84500:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   84504:	930a      	str	r3, [sp, #40]	; 0x28
   84506:	9315      	str	r3, [sp, #84]	; 0x54
   84508:	9314      	str	r3, [sp, #80]	; 0x50
   8450a:	9309      	str	r3, [sp, #36]	; 0x24
   8450c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   84510:	464e      	mov	r6, r9
   84512:	f898 3000 	ldrb.w	r3, [r8]
   84516:	2b00      	cmp	r3, #0
   84518:	f000 84c8 	beq.w	84eac <_vfiprintf_r+0xa00>
   8451c:	2b25      	cmp	r3, #37	; 0x25
   8451e:	f000 84c5 	beq.w	84eac <_vfiprintf_r+0xa00>
   84522:	f108 0201 	add.w	r2, r8, #1
   84526:	e001      	b.n	8452c <_vfiprintf_r+0x80>
   84528:	2b25      	cmp	r3, #37	; 0x25
   8452a:	d004      	beq.n	84536 <_vfiprintf_r+0x8a>
   8452c:	7813      	ldrb	r3, [r2, #0]
   8452e:	4614      	mov	r4, r2
   84530:	3201      	adds	r2, #1
   84532:	2b00      	cmp	r3, #0
   84534:	d1f8      	bne.n	84528 <_vfiprintf_r+0x7c>
   84536:	ebc8 0504 	rsb	r5, r8, r4
   8453a:	b195      	cbz	r5, 84562 <_vfiprintf_r+0xb6>
   8453c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8453e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84540:	3301      	adds	r3, #1
   84542:	442a      	add	r2, r5
   84544:	2b07      	cmp	r3, #7
   84546:	f8c6 8000 	str.w	r8, [r6]
   8454a:	6075      	str	r5, [r6, #4]
   8454c:	9215      	str	r2, [sp, #84]	; 0x54
   8454e:	9314      	str	r3, [sp, #80]	; 0x50
   84550:	dd7b      	ble.n	8464a <_vfiprintf_r+0x19e>
   84552:	2a00      	cmp	r2, #0
   84554:	f040 84d5 	bne.w	84f02 <_vfiprintf_r+0xa56>
   84558:	9809      	ldr	r0, [sp, #36]	; 0x24
   8455a:	9214      	str	r2, [sp, #80]	; 0x50
   8455c:	4428      	add	r0, r5
   8455e:	464e      	mov	r6, r9
   84560:	9009      	str	r0, [sp, #36]	; 0x24
   84562:	7823      	ldrb	r3, [r4, #0]
   84564:	2b00      	cmp	r3, #0
   84566:	f000 83ed 	beq.w	84d44 <_vfiprintf_r+0x898>
   8456a:	2100      	movs	r1, #0
   8456c:	f04f 0200 	mov.w	r2, #0
   84570:	f04f 3cff 	mov.w	ip, #4294967295
   84574:	7863      	ldrb	r3, [r4, #1]
   84576:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8457a:	9104      	str	r1, [sp, #16]
   8457c:	468a      	mov	sl, r1
   8457e:	f104 0801 	add.w	r8, r4, #1
   84582:	4608      	mov	r0, r1
   84584:	4665      	mov	r5, ip
   84586:	f108 0801 	add.w	r8, r8, #1
   8458a:	f1a3 0220 	sub.w	r2, r3, #32
   8458e:	2a58      	cmp	r2, #88	; 0x58
   84590:	f200 82d9 	bhi.w	84b46 <_vfiprintf_r+0x69a>
   84594:	e8df f012 	tbh	[pc, r2, lsl #1]
   84598:	02d702cb 	.word	0x02d702cb
   8459c:	02d202d7 	.word	0x02d202d7
   845a0:	02d702d7 	.word	0x02d702d7
   845a4:	02d702d7 	.word	0x02d702d7
   845a8:	02d702d7 	.word	0x02d702d7
   845ac:	028f0282 	.word	0x028f0282
   845b0:	008402d7 	.word	0x008402d7
   845b4:	02d70293 	.word	0x02d70293
   845b8:	0196012b 	.word	0x0196012b
   845bc:	01960196 	.word	0x01960196
   845c0:	01960196 	.word	0x01960196
   845c4:	01960196 	.word	0x01960196
   845c8:	01960196 	.word	0x01960196
   845cc:	02d702d7 	.word	0x02d702d7
   845d0:	02d702d7 	.word	0x02d702d7
   845d4:	02d702d7 	.word	0x02d702d7
   845d8:	02d702d7 	.word	0x02d702d7
   845dc:	02d702d7 	.word	0x02d702d7
   845e0:	02d70130 	.word	0x02d70130
   845e4:	02d702d7 	.word	0x02d702d7
   845e8:	02d702d7 	.word	0x02d702d7
   845ec:	02d702d7 	.word	0x02d702d7
   845f0:	02d702d7 	.word	0x02d702d7
   845f4:	017b02d7 	.word	0x017b02d7
   845f8:	02d702d7 	.word	0x02d702d7
   845fc:	02d702d7 	.word	0x02d702d7
   84600:	01a402d7 	.word	0x01a402d7
   84604:	02d702d7 	.word	0x02d702d7
   84608:	02d701bf 	.word	0x02d701bf
   8460c:	02d702d7 	.word	0x02d702d7
   84610:	02d702d7 	.word	0x02d702d7
   84614:	02d702d7 	.word	0x02d702d7
   84618:	02d702d7 	.word	0x02d702d7
   8461c:	01e402d7 	.word	0x01e402d7
   84620:	02d701fa 	.word	0x02d701fa
   84624:	02d702d7 	.word	0x02d702d7
   84628:	01fa0216 	.word	0x01fa0216
   8462c:	02d702d7 	.word	0x02d702d7
   84630:	02d7021b 	.word	0x02d7021b
   84634:	00890228 	.word	0x00890228
   84638:	027d0266 	.word	0x027d0266
   8463c:	023a02d7 	.word	0x023a02d7
   84640:	011902d7 	.word	0x011902d7
   84644:	02d702d7 	.word	0x02d702d7
   84648:	02af      	.short	0x02af
   8464a:	3608      	adds	r6, #8
   8464c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8464e:	4428      	add	r0, r5
   84650:	9009      	str	r0, [sp, #36]	; 0x24
   84652:	e786      	b.n	84562 <_vfiprintf_r+0xb6>
   84654:	9806      	ldr	r0, [sp, #24]
   84656:	9902      	ldr	r1, [sp, #8]
   84658:	f000 fd90 	bl	8517c <__swsetup_r>
   8465c:	b9b0      	cbnz	r0, 8468c <_vfiprintf_r+0x1e0>
   8465e:	9d02      	ldr	r5, [sp, #8]
   84660:	89aa      	ldrh	r2, [r5, #12]
   84662:	f002 021a 	and.w	r2, r2, #26
   84666:	2a0a      	cmp	r2, #10
   84668:	f47f af49 	bne.w	844fe <_vfiprintf_r+0x52>
   8466c:	f8dd b008 	ldr.w	fp, [sp, #8]
   84670:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   84674:	2b00      	cmp	r3, #0
   84676:	f6ff af42 	blt.w	844fe <_vfiprintf_r+0x52>
   8467a:	9806      	ldr	r0, [sp, #24]
   8467c:	4659      	mov	r1, fp
   8467e:	4642      	mov	r2, r8
   84680:	4623      	mov	r3, r4
   84682:	f000 fd3d 	bl	85100 <__sbprintf>
   84686:	b031      	add	sp, #196	; 0xc4
   84688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8468c:	f04f 30ff 	mov.w	r0, #4294967295
   84690:	b031      	add	sp, #196	; 0xc4
   84692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84696:	f000 fea3 	bl	853e0 <__sinit>
   8469a:	e714      	b.n	844c6 <_vfiprintf_r+0x1a>
   8469c:	4240      	negs	r0, r0
   8469e:	9308      	str	r3, [sp, #32]
   846a0:	f04a 0a04 	orr.w	sl, sl, #4
   846a4:	f898 3000 	ldrb.w	r3, [r8]
   846a8:	e76d      	b.n	84586 <_vfiprintf_r+0xda>
   846aa:	f01a 0320 	ands.w	r3, sl, #32
   846ae:	9004      	str	r0, [sp, #16]
   846b0:	46ac      	mov	ip, r5
   846b2:	f000 80f4 	beq.w	8489e <_vfiprintf_r+0x3f2>
   846b6:	f8dd b020 	ldr.w	fp, [sp, #32]
   846ba:	f10b 0307 	add.w	r3, fp, #7
   846be:	f023 0307 	bic.w	r3, r3, #7
   846c2:	f103 0408 	add.w	r4, r3, #8
   846c6:	9408      	str	r4, [sp, #32]
   846c8:	e9d3 4500 	ldrd	r4, r5, [r3]
   846cc:	2300      	movs	r3, #0
   846ce:	f04f 0000 	mov.w	r0, #0
   846d2:	2100      	movs	r1, #0
   846d4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   846d8:	f8cd c014 	str.w	ip, [sp, #20]
   846dc:	9107      	str	r1, [sp, #28]
   846de:	f1bc 0f00 	cmp.w	ip, #0
   846e2:	bfa8      	it	ge
   846e4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   846e8:	ea54 0205 	orrs.w	r2, r4, r5
   846ec:	f040 80ad 	bne.w	8484a <_vfiprintf_r+0x39e>
   846f0:	f1bc 0f00 	cmp.w	ip, #0
   846f4:	f040 80a9 	bne.w	8484a <_vfiprintf_r+0x39e>
   846f8:	2b00      	cmp	r3, #0
   846fa:	f040 83c0 	bne.w	84e7e <_vfiprintf_r+0x9d2>
   846fe:	f01a 0f01 	tst.w	sl, #1
   84702:	f000 83bc 	beq.w	84e7e <_vfiprintf_r+0x9d2>
   84706:	2330      	movs	r3, #48	; 0x30
   84708:	af30      	add	r7, sp, #192	; 0xc0
   8470a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8470e:	ebc7 0409 	rsb	r4, r7, r9
   84712:	9405      	str	r4, [sp, #20]
   84714:	f8dd b014 	ldr.w	fp, [sp, #20]
   84718:	9c07      	ldr	r4, [sp, #28]
   8471a:	45e3      	cmp	fp, ip
   8471c:	bfb8      	it	lt
   8471e:	46e3      	movlt	fp, ip
   84720:	f8cd b00c 	str.w	fp, [sp, #12]
   84724:	b11c      	cbz	r4, 8472e <_vfiprintf_r+0x282>
   84726:	f10b 0b01 	add.w	fp, fp, #1
   8472a:	f8cd b00c 	str.w	fp, [sp, #12]
   8472e:	f01a 0502 	ands.w	r5, sl, #2
   84732:	9507      	str	r5, [sp, #28]
   84734:	d005      	beq.n	84742 <_vfiprintf_r+0x296>
   84736:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8473a:	f10b 0b02 	add.w	fp, fp, #2
   8473e:	f8cd b00c 	str.w	fp, [sp, #12]
   84742:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   84746:	930b      	str	r3, [sp, #44]	; 0x2c
   84748:	f040 821b 	bne.w	84b82 <_vfiprintf_r+0x6d6>
   8474c:	9d04      	ldr	r5, [sp, #16]
   8474e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84752:	ebcb 0405 	rsb	r4, fp, r5
   84756:	2c00      	cmp	r4, #0
   84758:	f340 8213 	ble.w	84b82 <_vfiprintf_r+0x6d6>
   8475c:	2c10      	cmp	r4, #16
   8475e:	f340 8489 	ble.w	85074 <_vfiprintf_r+0xbc8>
   84762:	4dbe      	ldr	r5, [pc, #760]	; (84a5c <_vfiprintf_r+0x5b0>)
   84764:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84766:	462b      	mov	r3, r5
   84768:	9814      	ldr	r0, [sp, #80]	; 0x50
   8476a:	4625      	mov	r5, r4
   8476c:	f04f 0b10 	mov.w	fp, #16
   84770:	4664      	mov	r4, ip
   84772:	46b4      	mov	ip, r6
   84774:	461e      	mov	r6, r3
   84776:	e006      	b.n	84786 <_vfiprintf_r+0x2da>
   84778:	1c83      	adds	r3, r0, #2
   8477a:	f10c 0c08 	add.w	ip, ip, #8
   8477e:	4608      	mov	r0, r1
   84780:	3d10      	subs	r5, #16
   84782:	2d10      	cmp	r5, #16
   84784:	dd11      	ble.n	847aa <_vfiprintf_r+0x2fe>
   84786:	1c41      	adds	r1, r0, #1
   84788:	3210      	adds	r2, #16
   8478a:	2907      	cmp	r1, #7
   8478c:	9215      	str	r2, [sp, #84]	; 0x54
   8478e:	e88c 0840 	stmia.w	ip, {r6, fp}
   84792:	9114      	str	r1, [sp, #80]	; 0x50
   84794:	ddf0      	ble.n	84778 <_vfiprintf_r+0x2cc>
   84796:	2a00      	cmp	r2, #0
   84798:	f040 81e6 	bne.w	84b68 <_vfiprintf_r+0x6bc>
   8479c:	3d10      	subs	r5, #16
   8479e:	2d10      	cmp	r5, #16
   847a0:	f04f 0301 	mov.w	r3, #1
   847a4:	4610      	mov	r0, r2
   847a6:	46cc      	mov	ip, r9
   847a8:	dced      	bgt.n	84786 <_vfiprintf_r+0x2da>
   847aa:	4631      	mov	r1, r6
   847ac:	4666      	mov	r6, ip
   847ae:	46a4      	mov	ip, r4
   847b0:	462c      	mov	r4, r5
   847b2:	460d      	mov	r5, r1
   847b4:	4422      	add	r2, r4
   847b6:	2b07      	cmp	r3, #7
   847b8:	9215      	str	r2, [sp, #84]	; 0x54
   847ba:	6035      	str	r5, [r6, #0]
   847bc:	6074      	str	r4, [r6, #4]
   847be:	9314      	str	r3, [sp, #80]	; 0x50
   847c0:	f300 836d 	bgt.w	84e9e <_vfiprintf_r+0x9f2>
   847c4:	3608      	adds	r6, #8
   847c6:	1c59      	adds	r1, r3, #1
   847c8:	e1de      	b.n	84b88 <_vfiprintf_r+0x6dc>
   847ca:	f01a 0f20 	tst.w	sl, #32
   847ce:	9004      	str	r0, [sp, #16]
   847d0:	46ac      	mov	ip, r5
   847d2:	f000 808d 	beq.w	848f0 <_vfiprintf_r+0x444>
   847d6:	9d08      	ldr	r5, [sp, #32]
   847d8:	1deb      	adds	r3, r5, #7
   847da:	f023 0307 	bic.w	r3, r3, #7
   847de:	f103 0b08 	add.w	fp, r3, #8
   847e2:	e9d3 4500 	ldrd	r4, r5, [r3]
   847e6:	f8cd b020 	str.w	fp, [sp, #32]
   847ea:	2301      	movs	r3, #1
   847ec:	e76f      	b.n	846ce <_vfiprintf_r+0x222>
   847ee:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   847f2:	f898 3000 	ldrb.w	r3, [r8]
   847f6:	e6c6      	b.n	84586 <_vfiprintf_r+0xda>
   847f8:	f04a 0a10 	orr.w	sl, sl, #16
   847fc:	f01a 0f20 	tst.w	sl, #32
   84800:	9004      	str	r0, [sp, #16]
   84802:	46ac      	mov	ip, r5
   84804:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84808:	f000 80c8 	beq.w	8499c <_vfiprintf_r+0x4f0>
   8480c:	9c08      	ldr	r4, [sp, #32]
   8480e:	1de1      	adds	r1, r4, #7
   84810:	f021 0107 	bic.w	r1, r1, #7
   84814:	e9d1 2300 	ldrd	r2, r3, [r1]
   84818:	3108      	adds	r1, #8
   8481a:	9108      	str	r1, [sp, #32]
   8481c:	4614      	mov	r4, r2
   8481e:	461d      	mov	r5, r3
   84820:	2a00      	cmp	r2, #0
   84822:	f173 0b00 	sbcs.w	fp, r3, #0
   84826:	f2c0 83ce 	blt.w	84fc6 <_vfiprintf_r+0xb1a>
   8482a:	f1bc 0f00 	cmp.w	ip, #0
   8482e:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   84832:	bfa8      	it	ge
   84834:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   84838:	ea54 0205 	orrs.w	r2, r4, r5
   8483c:	9007      	str	r0, [sp, #28]
   8483e:	f8cd c014 	str.w	ip, [sp, #20]
   84842:	f04f 0301 	mov.w	r3, #1
   84846:	f43f af53 	beq.w	846f0 <_vfiprintf_r+0x244>
   8484a:	2b01      	cmp	r3, #1
   8484c:	f000 8319 	beq.w	84e82 <_vfiprintf_r+0x9d6>
   84850:	2b02      	cmp	r3, #2
   84852:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   84856:	f040 824c 	bne.w	84cf2 <_vfiprintf_r+0x846>
   8485a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8485e:	4619      	mov	r1, r3
   84860:	f004 000f 	and.w	r0, r4, #15
   84864:	0922      	lsrs	r2, r4, #4
   84866:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8486a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   8486e:	092b      	lsrs	r3, r5, #4
   84870:	7008      	strb	r0, [r1, #0]
   84872:	ea52 0003 	orrs.w	r0, r2, r3
   84876:	460f      	mov	r7, r1
   84878:	4614      	mov	r4, r2
   8487a:	461d      	mov	r5, r3
   8487c:	f101 31ff 	add.w	r1, r1, #4294967295
   84880:	d1ee      	bne.n	84860 <_vfiprintf_r+0x3b4>
   84882:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   84886:	ebc7 0309 	rsb	r3, r7, r9
   8488a:	9305      	str	r3, [sp, #20]
   8488c:	e742      	b.n	84714 <_vfiprintf_r+0x268>
   8488e:	f04a 0a10 	orr.w	sl, sl, #16
   84892:	f01a 0320 	ands.w	r3, sl, #32
   84896:	9004      	str	r0, [sp, #16]
   84898:	46ac      	mov	ip, r5
   8489a:	f47f af0c 	bne.w	846b6 <_vfiprintf_r+0x20a>
   8489e:	f01a 0210 	ands.w	r2, sl, #16
   848a2:	f040 8311 	bne.w	84ec8 <_vfiprintf_r+0xa1c>
   848a6:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   848aa:	f000 830d 	beq.w	84ec8 <_vfiprintf_r+0xa1c>
   848ae:	f8dd b020 	ldr.w	fp, [sp, #32]
   848b2:	4613      	mov	r3, r2
   848b4:	f8bb 4000 	ldrh.w	r4, [fp]
   848b8:	f10b 0b04 	add.w	fp, fp, #4
   848bc:	2500      	movs	r5, #0
   848be:	f8cd b020 	str.w	fp, [sp, #32]
   848c2:	e704      	b.n	846ce <_vfiprintf_r+0x222>
   848c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   848c8:	2000      	movs	r0, #0
   848ca:	f818 3b01 	ldrb.w	r3, [r8], #1
   848ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   848d2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   848d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   848da:	2a09      	cmp	r2, #9
   848dc:	d9f5      	bls.n	848ca <_vfiprintf_r+0x41e>
   848de:	e654      	b.n	8458a <_vfiprintf_r+0xde>
   848e0:	f04a 0a10 	orr.w	sl, sl, #16
   848e4:	f01a 0f20 	tst.w	sl, #32
   848e8:	9004      	str	r0, [sp, #16]
   848ea:	46ac      	mov	ip, r5
   848ec:	f47f af73 	bne.w	847d6 <_vfiprintf_r+0x32a>
   848f0:	f01a 0f10 	tst.w	sl, #16
   848f4:	f040 82ef 	bne.w	84ed6 <_vfiprintf_r+0xa2a>
   848f8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   848fc:	f000 82eb 	beq.w	84ed6 <_vfiprintf_r+0xa2a>
   84900:	f8dd b020 	ldr.w	fp, [sp, #32]
   84904:	2500      	movs	r5, #0
   84906:	f8bb 4000 	ldrh.w	r4, [fp]
   8490a:	f10b 0b04 	add.w	fp, fp, #4
   8490e:	2301      	movs	r3, #1
   84910:	f8cd b020 	str.w	fp, [sp, #32]
   84914:	e6db      	b.n	846ce <_vfiprintf_r+0x222>
   84916:	46ac      	mov	ip, r5
   84918:	4d51      	ldr	r5, [pc, #324]	; (84a60 <_vfiprintf_r+0x5b4>)
   8491a:	f01a 0f20 	tst.w	sl, #32
   8491e:	9004      	str	r0, [sp, #16]
   84920:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84924:	950a      	str	r5, [sp, #40]	; 0x28
   84926:	f000 80f0 	beq.w	84b0a <_vfiprintf_r+0x65e>
   8492a:	9d08      	ldr	r5, [sp, #32]
   8492c:	1dea      	adds	r2, r5, #7
   8492e:	f022 0207 	bic.w	r2, r2, #7
   84932:	f102 0b08 	add.w	fp, r2, #8
   84936:	f8cd b020 	str.w	fp, [sp, #32]
   8493a:	e9d2 4500 	ldrd	r4, r5, [r2]
   8493e:	f01a 0f01 	tst.w	sl, #1
   84942:	f000 82aa 	beq.w	84e9a <_vfiprintf_r+0x9ee>
   84946:	ea54 0b05 	orrs.w	fp, r4, r5
   8494a:	f000 82a6 	beq.w	84e9a <_vfiprintf_r+0x9ee>
   8494e:	2230      	movs	r2, #48	; 0x30
   84950:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   84954:	f04a 0a02 	orr.w	sl, sl, #2
   84958:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8495c:	2302      	movs	r3, #2
   8495e:	e6b6      	b.n	846ce <_vfiprintf_r+0x222>
   84960:	9b08      	ldr	r3, [sp, #32]
   84962:	f8dd b020 	ldr.w	fp, [sp, #32]
   84966:	681b      	ldr	r3, [r3, #0]
   84968:	2401      	movs	r4, #1
   8496a:	f04f 0500 	mov.w	r5, #0
   8496e:	f10b 0b04 	add.w	fp, fp, #4
   84972:	9004      	str	r0, [sp, #16]
   84974:	9403      	str	r4, [sp, #12]
   84976:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8497a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8497e:	f8cd b020 	str.w	fp, [sp, #32]
   84982:	9405      	str	r4, [sp, #20]
   84984:	af16      	add	r7, sp, #88	; 0x58
   84986:	f04f 0c00 	mov.w	ip, #0
   8498a:	e6d0      	b.n	8472e <_vfiprintf_r+0x282>
   8498c:	f01a 0f20 	tst.w	sl, #32
   84990:	9004      	str	r0, [sp, #16]
   84992:	46ac      	mov	ip, r5
   84994:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84998:	f47f af38 	bne.w	8480c <_vfiprintf_r+0x360>
   8499c:	f01a 0f10 	tst.w	sl, #16
   849a0:	f040 82a7 	bne.w	84ef2 <_vfiprintf_r+0xa46>
   849a4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   849a8:	f000 82a3 	beq.w	84ef2 <_vfiprintf_r+0xa46>
   849ac:	f8dd b020 	ldr.w	fp, [sp, #32]
   849b0:	f9bb 4000 	ldrsh.w	r4, [fp]
   849b4:	f10b 0b04 	add.w	fp, fp, #4
   849b8:	17e5      	asrs	r5, r4, #31
   849ba:	4622      	mov	r2, r4
   849bc:	462b      	mov	r3, r5
   849be:	f8cd b020 	str.w	fp, [sp, #32]
   849c2:	e72d      	b.n	84820 <_vfiprintf_r+0x374>
   849c4:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   849c8:	f898 3000 	ldrb.w	r3, [r8]
   849cc:	e5db      	b.n	84586 <_vfiprintf_r+0xda>
   849ce:	f898 3000 	ldrb.w	r3, [r8]
   849d2:	4642      	mov	r2, r8
   849d4:	2b6c      	cmp	r3, #108	; 0x6c
   849d6:	bf03      	ittte	eq
   849d8:	f108 0801 	addeq.w	r8, r8, #1
   849dc:	f04a 0a20 	orreq.w	sl, sl, #32
   849e0:	7853      	ldrbeq	r3, [r2, #1]
   849e2:	f04a 0a10 	orrne.w	sl, sl, #16
   849e6:	e5ce      	b.n	84586 <_vfiprintf_r+0xda>
   849e8:	f01a 0f20 	tst.w	sl, #32
   849ec:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   849f0:	f000 82f7 	beq.w	84fe2 <_vfiprintf_r+0xb36>
   849f4:	9c08      	ldr	r4, [sp, #32]
   849f6:	6821      	ldr	r1, [r4, #0]
   849f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   849fa:	17e5      	asrs	r5, r4, #31
   849fc:	462b      	mov	r3, r5
   849fe:	9d08      	ldr	r5, [sp, #32]
   84a00:	4622      	mov	r2, r4
   84a02:	3504      	adds	r5, #4
   84a04:	9508      	str	r5, [sp, #32]
   84a06:	e9c1 2300 	strd	r2, r3, [r1]
   84a0a:	e582      	b.n	84512 <_vfiprintf_r+0x66>
   84a0c:	9c08      	ldr	r4, [sp, #32]
   84a0e:	46ac      	mov	ip, r5
   84a10:	6827      	ldr	r7, [r4, #0]
   84a12:	f04f 0500 	mov.w	r5, #0
   84a16:	9004      	str	r0, [sp, #16]
   84a18:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   84a1c:	3404      	adds	r4, #4
   84a1e:	2f00      	cmp	r7, #0
   84a20:	f000 8332 	beq.w	85088 <_vfiprintf_r+0xbdc>
   84a24:	f1bc 0f00 	cmp.w	ip, #0
   84a28:	4638      	mov	r0, r7
   84a2a:	f2c0 8307 	blt.w	8503c <_vfiprintf_r+0xb90>
   84a2e:	4662      	mov	r2, ip
   84a30:	2100      	movs	r1, #0
   84a32:	f8cd c004 	str.w	ip, [sp, #4]
   84a36:	f001 fbb1 	bl	8619c <memchr>
   84a3a:	f8dd c004 	ldr.w	ip, [sp, #4]
   84a3e:	2800      	cmp	r0, #0
   84a40:	f000 833a 	beq.w	850b8 <_vfiprintf_r+0xc0c>
   84a44:	1bc0      	subs	r0, r0, r7
   84a46:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   84a4a:	4560      	cmp	r0, ip
   84a4c:	bfa8      	it	ge
   84a4e:	4660      	movge	r0, ip
   84a50:	9005      	str	r0, [sp, #20]
   84a52:	9408      	str	r4, [sp, #32]
   84a54:	9507      	str	r5, [sp, #28]
   84a56:	f04f 0c00 	mov.w	ip, #0
   84a5a:	e65b      	b.n	84714 <_vfiprintf_r+0x268>
   84a5c:	000871f0 	.word	0x000871f0
   84a60:	000871b0 	.word	0x000871b0
   84a64:	9b08      	ldr	r3, [sp, #32]
   84a66:	f8dd b020 	ldr.w	fp, [sp, #32]
   84a6a:	9004      	str	r0, [sp, #16]
   84a6c:	48b2      	ldr	r0, [pc, #712]	; (84d38 <_vfiprintf_r+0x88c>)
   84a6e:	681c      	ldr	r4, [r3, #0]
   84a70:	2230      	movs	r2, #48	; 0x30
   84a72:	2378      	movs	r3, #120	; 0x78
   84a74:	f10b 0b04 	add.w	fp, fp, #4
   84a78:	46ac      	mov	ip, r5
   84a7a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   84a7e:	f04a 0a02 	orr.w	sl, sl, #2
   84a82:	f8cd b020 	str.w	fp, [sp, #32]
   84a86:	2500      	movs	r5, #0
   84a88:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   84a8c:	900a      	str	r0, [sp, #40]	; 0x28
   84a8e:	2302      	movs	r3, #2
   84a90:	e61d      	b.n	846ce <_vfiprintf_r+0x222>
   84a92:	f04a 0a20 	orr.w	sl, sl, #32
   84a96:	f898 3000 	ldrb.w	r3, [r8]
   84a9a:	e574      	b.n	84586 <_vfiprintf_r+0xda>
   84a9c:	f8dd b020 	ldr.w	fp, [sp, #32]
   84aa0:	f8db 0000 	ldr.w	r0, [fp]
   84aa4:	f10b 0304 	add.w	r3, fp, #4
   84aa8:	2800      	cmp	r0, #0
   84aaa:	f6ff adf7 	blt.w	8469c <_vfiprintf_r+0x1f0>
   84aae:	9308      	str	r3, [sp, #32]
   84ab0:	f898 3000 	ldrb.w	r3, [r8]
   84ab4:	e567      	b.n	84586 <_vfiprintf_r+0xda>
   84ab6:	f898 3000 	ldrb.w	r3, [r8]
   84aba:	212b      	movs	r1, #43	; 0x2b
   84abc:	e563      	b.n	84586 <_vfiprintf_r+0xda>
   84abe:	f898 3000 	ldrb.w	r3, [r8]
   84ac2:	f108 0401 	add.w	r4, r8, #1
   84ac6:	2b2a      	cmp	r3, #42	; 0x2a
   84ac8:	f000 8305 	beq.w	850d6 <_vfiprintf_r+0xc2a>
   84acc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84ad0:	2a09      	cmp	r2, #9
   84ad2:	bf98      	it	ls
   84ad4:	2500      	movls	r5, #0
   84ad6:	f200 82fa 	bhi.w	850ce <_vfiprintf_r+0xc22>
   84ada:	f814 3b01 	ldrb.w	r3, [r4], #1
   84ade:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84ae2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   84ae6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84aea:	2a09      	cmp	r2, #9
   84aec:	d9f5      	bls.n	84ada <_vfiprintf_r+0x62e>
   84aee:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   84af2:	46a0      	mov	r8, r4
   84af4:	e549      	b.n	8458a <_vfiprintf_r+0xde>
   84af6:	4c90      	ldr	r4, [pc, #576]	; (84d38 <_vfiprintf_r+0x88c>)
   84af8:	f01a 0f20 	tst.w	sl, #32
   84afc:	9004      	str	r0, [sp, #16]
   84afe:	46ac      	mov	ip, r5
   84b00:	940a      	str	r4, [sp, #40]	; 0x28
   84b02:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84b06:	f47f af10 	bne.w	8492a <_vfiprintf_r+0x47e>
   84b0a:	f01a 0f10 	tst.w	sl, #16
   84b0e:	f040 81ea 	bne.w	84ee6 <_vfiprintf_r+0xa3a>
   84b12:	f01a 0f40 	tst.w	sl, #64	; 0x40
   84b16:	f000 81e6 	beq.w	84ee6 <_vfiprintf_r+0xa3a>
   84b1a:	f8dd b020 	ldr.w	fp, [sp, #32]
   84b1e:	2500      	movs	r5, #0
   84b20:	f8bb 4000 	ldrh.w	r4, [fp]
   84b24:	f10b 0b04 	add.w	fp, fp, #4
   84b28:	f8cd b020 	str.w	fp, [sp, #32]
   84b2c:	e707      	b.n	8493e <_vfiprintf_r+0x492>
   84b2e:	f898 3000 	ldrb.w	r3, [r8]
   84b32:	2900      	cmp	r1, #0
   84b34:	f47f ad27 	bne.w	84586 <_vfiprintf_r+0xda>
   84b38:	2120      	movs	r1, #32
   84b3a:	e524      	b.n	84586 <_vfiprintf_r+0xda>
   84b3c:	f04a 0a01 	orr.w	sl, sl, #1
   84b40:	f898 3000 	ldrb.w	r3, [r8]
   84b44:	e51f      	b.n	84586 <_vfiprintf_r+0xda>
   84b46:	9004      	str	r0, [sp, #16]
   84b48:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84b4c:	2b00      	cmp	r3, #0
   84b4e:	f000 80f9 	beq.w	84d44 <_vfiprintf_r+0x898>
   84b52:	2501      	movs	r5, #1
   84b54:	f04f 0b00 	mov.w	fp, #0
   84b58:	9503      	str	r5, [sp, #12]
   84b5a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   84b5e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   84b62:	9505      	str	r5, [sp, #20]
   84b64:	af16      	add	r7, sp, #88	; 0x58
   84b66:	e70e      	b.n	84986 <_vfiprintf_r+0x4da>
   84b68:	9806      	ldr	r0, [sp, #24]
   84b6a:	9902      	ldr	r1, [sp, #8]
   84b6c:	aa13      	add	r2, sp, #76	; 0x4c
   84b6e:	f7ff fc61 	bl	84434 <__sprint_r.part.0>
   84b72:	2800      	cmp	r0, #0
   84b74:	f040 80ed 	bne.w	84d52 <_vfiprintf_r+0x8a6>
   84b78:	9814      	ldr	r0, [sp, #80]	; 0x50
   84b7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84b7c:	1c43      	adds	r3, r0, #1
   84b7e:	46cc      	mov	ip, r9
   84b80:	e5fe      	b.n	84780 <_vfiprintf_r+0x2d4>
   84b82:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84b84:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84b86:	1c59      	adds	r1, r3, #1
   84b88:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   84b8c:	b168      	cbz	r0, 84baa <_vfiprintf_r+0x6fe>
   84b8e:	3201      	adds	r2, #1
   84b90:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   84b94:	2301      	movs	r3, #1
   84b96:	2907      	cmp	r1, #7
   84b98:	9215      	str	r2, [sp, #84]	; 0x54
   84b9a:	9114      	str	r1, [sp, #80]	; 0x50
   84b9c:	e886 0009 	stmia.w	r6, {r0, r3}
   84ba0:	f300 8160 	bgt.w	84e64 <_vfiprintf_r+0x9b8>
   84ba4:	460b      	mov	r3, r1
   84ba6:	3608      	adds	r6, #8
   84ba8:	3101      	adds	r1, #1
   84baa:	9c07      	ldr	r4, [sp, #28]
   84bac:	b164      	cbz	r4, 84bc8 <_vfiprintf_r+0x71c>
   84bae:	3202      	adds	r2, #2
   84bb0:	a812      	add	r0, sp, #72	; 0x48
   84bb2:	2302      	movs	r3, #2
   84bb4:	2907      	cmp	r1, #7
   84bb6:	9215      	str	r2, [sp, #84]	; 0x54
   84bb8:	9114      	str	r1, [sp, #80]	; 0x50
   84bba:	e886 0009 	stmia.w	r6, {r0, r3}
   84bbe:	f300 8157 	bgt.w	84e70 <_vfiprintf_r+0x9c4>
   84bc2:	460b      	mov	r3, r1
   84bc4:	3608      	adds	r6, #8
   84bc6:	3101      	adds	r1, #1
   84bc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84bca:	2d80      	cmp	r5, #128	; 0x80
   84bcc:	f000 8101 	beq.w	84dd2 <_vfiprintf_r+0x926>
   84bd0:	9d05      	ldr	r5, [sp, #20]
   84bd2:	ebc5 040c 	rsb	r4, r5, ip
   84bd6:	2c00      	cmp	r4, #0
   84bd8:	dd2f      	ble.n	84c3a <_vfiprintf_r+0x78e>
   84bda:	2c10      	cmp	r4, #16
   84bdc:	4d57      	ldr	r5, [pc, #348]	; (84d3c <_vfiprintf_r+0x890>)
   84bde:	dd22      	ble.n	84c26 <_vfiprintf_r+0x77a>
   84be0:	4630      	mov	r0, r6
   84be2:	f04f 0b10 	mov.w	fp, #16
   84be6:	462e      	mov	r6, r5
   84be8:	4625      	mov	r5, r4
   84bea:	9c06      	ldr	r4, [sp, #24]
   84bec:	e006      	b.n	84bfc <_vfiprintf_r+0x750>
   84bee:	f103 0c02 	add.w	ip, r3, #2
   84bf2:	3008      	adds	r0, #8
   84bf4:	460b      	mov	r3, r1
   84bf6:	3d10      	subs	r5, #16
   84bf8:	2d10      	cmp	r5, #16
   84bfa:	dd10      	ble.n	84c1e <_vfiprintf_r+0x772>
   84bfc:	1c59      	adds	r1, r3, #1
   84bfe:	3210      	adds	r2, #16
   84c00:	2907      	cmp	r1, #7
   84c02:	9215      	str	r2, [sp, #84]	; 0x54
   84c04:	e880 0840 	stmia.w	r0, {r6, fp}
   84c08:	9114      	str	r1, [sp, #80]	; 0x50
   84c0a:	ddf0      	ble.n	84bee <_vfiprintf_r+0x742>
   84c0c:	2a00      	cmp	r2, #0
   84c0e:	d163      	bne.n	84cd8 <_vfiprintf_r+0x82c>
   84c10:	3d10      	subs	r5, #16
   84c12:	2d10      	cmp	r5, #16
   84c14:	f04f 0c01 	mov.w	ip, #1
   84c18:	4613      	mov	r3, r2
   84c1a:	4648      	mov	r0, r9
   84c1c:	dcee      	bgt.n	84bfc <_vfiprintf_r+0x750>
   84c1e:	462c      	mov	r4, r5
   84c20:	4661      	mov	r1, ip
   84c22:	4635      	mov	r5, r6
   84c24:	4606      	mov	r6, r0
   84c26:	4422      	add	r2, r4
   84c28:	2907      	cmp	r1, #7
   84c2a:	9215      	str	r2, [sp, #84]	; 0x54
   84c2c:	6035      	str	r5, [r6, #0]
   84c2e:	6074      	str	r4, [r6, #4]
   84c30:	9114      	str	r1, [sp, #80]	; 0x50
   84c32:	f300 80c1 	bgt.w	84db8 <_vfiprintf_r+0x90c>
   84c36:	3608      	adds	r6, #8
   84c38:	3101      	adds	r1, #1
   84c3a:	9d05      	ldr	r5, [sp, #20]
   84c3c:	2907      	cmp	r1, #7
   84c3e:	442a      	add	r2, r5
   84c40:	9215      	str	r2, [sp, #84]	; 0x54
   84c42:	6037      	str	r7, [r6, #0]
   84c44:	6075      	str	r5, [r6, #4]
   84c46:	9114      	str	r1, [sp, #80]	; 0x50
   84c48:	f340 80c1 	ble.w	84dce <_vfiprintf_r+0x922>
   84c4c:	2a00      	cmp	r2, #0
   84c4e:	f040 8130 	bne.w	84eb2 <_vfiprintf_r+0xa06>
   84c52:	9214      	str	r2, [sp, #80]	; 0x50
   84c54:	464e      	mov	r6, r9
   84c56:	f01a 0f04 	tst.w	sl, #4
   84c5a:	f000 808b 	beq.w	84d74 <_vfiprintf_r+0x8c8>
   84c5e:	9d04      	ldr	r5, [sp, #16]
   84c60:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84c64:	ebcb 0405 	rsb	r4, fp, r5
   84c68:	2c00      	cmp	r4, #0
   84c6a:	f340 8083 	ble.w	84d74 <_vfiprintf_r+0x8c8>
   84c6e:	2c10      	cmp	r4, #16
   84c70:	f340 821e 	ble.w	850b0 <_vfiprintf_r+0xc04>
   84c74:	9914      	ldr	r1, [sp, #80]	; 0x50
   84c76:	4d32      	ldr	r5, [pc, #200]	; (84d40 <_vfiprintf_r+0x894>)
   84c78:	2710      	movs	r7, #16
   84c7a:	f8dd a018 	ldr.w	sl, [sp, #24]
   84c7e:	f8dd b008 	ldr.w	fp, [sp, #8]
   84c82:	e005      	b.n	84c90 <_vfiprintf_r+0x7e4>
   84c84:	1c88      	adds	r0, r1, #2
   84c86:	3608      	adds	r6, #8
   84c88:	4619      	mov	r1, r3
   84c8a:	3c10      	subs	r4, #16
   84c8c:	2c10      	cmp	r4, #16
   84c8e:	dd10      	ble.n	84cb2 <_vfiprintf_r+0x806>
   84c90:	1c4b      	adds	r3, r1, #1
   84c92:	3210      	adds	r2, #16
   84c94:	2b07      	cmp	r3, #7
   84c96:	9215      	str	r2, [sp, #84]	; 0x54
   84c98:	e886 00a0 	stmia.w	r6, {r5, r7}
   84c9c:	9314      	str	r3, [sp, #80]	; 0x50
   84c9e:	ddf1      	ble.n	84c84 <_vfiprintf_r+0x7d8>
   84ca0:	2a00      	cmp	r2, #0
   84ca2:	d17d      	bne.n	84da0 <_vfiprintf_r+0x8f4>
   84ca4:	3c10      	subs	r4, #16
   84ca6:	2c10      	cmp	r4, #16
   84ca8:	f04f 0001 	mov.w	r0, #1
   84cac:	4611      	mov	r1, r2
   84cae:	464e      	mov	r6, r9
   84cb0:	dcee      	bgt.n	84c90 <_vfiprintf_r+0x7e4>
   84cb2:	4422      	add	r2, r4
   84cb4:	2807      	cmp	r0, #7
   84cb6:	9215      	str	r2, [sp, #84]	; 0x54
   84cb8:	6035      	str	r5, [r6, #0]
   84cba:	6074      	str	r4, [r6, #4]
   84cbc:	9014      	str	r0, [sp, #80]	; 0x50
   84cbe:	dd59      	ble.n	84d74 <_vfiprintf_r+0x8c8>
   84cc0:	2a00      	cmp	r2, #0
   84cc2:	d14f      	bne.n	84d64 <_vfiprintf_r+0x8b8>
   84cc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84cc6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84cca:	9d04      	ldr	r5, [sp, #16]
   84ccc:	45ab      	cmp	fp, r5
   84cce:	bfac      	ite	ge
   84cd0:	445c      	addge	r4, fp
   84cd2:	1964      	addlt	r4, r4, r5
   84cd4:	9409      	str	r4, [sp, #36]	; 0x24
   84cd6:	e05e      	b.n	84d96 <_vfiprintf_r+0x8ea>
   84cd8:	4620      	mov	r0, r4
   84cda:	9902      	ldr	r1, [sp, #8]
   84cdc:	aa13      	add	r2, sp, #76	; 0x4c
   84cde:	f7ff fba9 	bl	84434 <__sprint_r.part.0>
   84ce2:	2800      	cmp	r0, #0
   84ce4:	d135      	bne.n	84d52 <_vfiprintf_r+0x8a6>
   84ce6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84ce8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84cea:	f103 0c01 	add.w	ip, r3, #1
   84cee:	4648      	mov	r0, r9
   84cf0:	e781      	b.n	84bf6 <_vfiprintf_r+0x74a>
   84cf2:	08e0      	lsrs	r0, r4, #3
   84cf4:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   84cf8:	f004 0207 	and.w	r2, r4, #7
   84cfc:	08e9      	lsrs	r1, r5, #3
   84cfe:	3230      	adds	r2, #48	; 0x30
   84d00:	ea50 0b01 	orrs.w	fp, r0, r1
   84d04:	461f      	mov	r7, r3
   84d06:	701a      	strb	r2, [r3, #0]
   84d08:	4604      	mov	r4, r0
   84d0a:	460d      	mov	r5, r1
   84d0c:	f103 33ff 	add.w	r3, r3, #4294967295
   84d10:	d1ef      	bne.n	84cf2 <_vfiprintf_r+0x846>
   84d12:	f01a 0f01 	tst.w	sl, #1
   84d16:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   84d1a:	4639      	mov	r1, r7
   84d1c:	f000 80b9 	beq.w	84e92 <_vfiprintf_r+0x9e6>
   84d20:	2a30      	cmp	r2, #48	; 0x30
   84d22:	f43f acf4 	beq.w	8470e <_vfiprintf_r+0x262>
   84d26:	461f      	mov	r7, r3
   84d28:	ebc7 0509 	rsb	r5, r7, r9
   84d2c:	2330      	movs	r3, #48	; 0x30
   84d2e:	9505      	str	r5, [sp, #20]
   84d30:	f801 3c01 	strb.w	r3, [r1, #-1]
   84d34:	e4ee      	b.n	84714 <_vfiprintf_r+0x268>
   84d36:	bf00      	nop
   84d38:	000871c4 	.word	0x000871c4
   84d3c:	000871e0 	.word	0x000871e0
   84d40:	000871f0 	.word	0x000871f0
   84d44:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84d46:	b123      	cbz	r3, 84d52 <_vfiprintf_r+0x8a6>
   84d48:	9806      	ldr	r0, [sp, #24]
   84d4a:	9902      	ldr	r1, [sp, #8]
   84d4c:	aa13      	add	r2, sp, #76	; 0x4c
   84d4e:	f7ff fb71 	bl	84434 <__sprint_r.part.0>
   84d52:	9c02      	ldr	r4, [sp, #8]
   84d54:	89a3      	ldrh	r3, [r4, #12]
   84d56:	065b      	lsls	r3, r3, #25
   84d58:	f53f ac98 	bmi.w	8468c <_vfiprintf_r+0x1e0>
   84d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
   84d5e:	b031      	add	sp, #196	; 0xc4
   84d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d64:	9806      	ldr	r0, [sp, #24]
   84d66:	9902      	ldr	r1, [sp, #8]
   84d68:	aa13      	add	r2, sp, #76	; 0x4c
   84d6a:	f7ff fb63 	bl	84434 <__sprint_r.part.0>
   84d6e:	2800      	cmp	r0, #0
   84d70:	d1ef      	bne.n	84d52 <_vfiprintf_r+0x8a6>
   84d72:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84d74:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84d76:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84d7a:	9d04      	ldr	r5, [sp, #16]
   84d7c:	45ab      	cmp	fp, r5
   84d7e:	bfac      	ite	ge
   84d80:	445c      	addge	r4, fp
   84d82:	1964      	addlt	r4, r4, r5
   84d84:	9409      	str	r4, [sp, #36]	; 0x24
   84d86:	b132      	cbz	r2, 84d96 <_vfiprintf_r+0x8ea>
   84d88:	9806      	ldr	r0, [sp, #24]
   84d8a:	9902      	ldr	r1, [sp, #8]
   84d8c:	aa13      	add	r2, sp, #76	; 0x4c
   84d8e:	f7ff fb51 	bl	84434 <__sprint_r.part.0>
   84d92:	2800      	cmp	r0, #0
   84d94:	d1dd      	bne.n	84d52 <_vfiprintf_r+0x8a6>
   84d96:	2000      	movs	r0, #0
   84d98:	9014      	str	r0, [sp, #80]	; 0x50
   84d9a:	464e      	mov	r6, r9
   84d9c:	f7ff bbb9 	b.w	84512 <_vfiprintf_r+0x66>
   84da0:	4650      	mov	r0, sl
   84da2:	4659      	mov	r1, fp
   84da4:	aa13      	add	r2, sp, #76	; 0x4c
   84da6:	f7ff fb45 	bl	84434 <__sprint_r.part.0>
   84daa:	2800      	cmp	r0, #0
   84dac:	d1d1      	bne.n	84d52 <_vfiprintf_r+0x8a6>
   84dae:	9914      	ldr	r1, [sp, #80]	; 0x50
   84db0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84db2:	1c48      	adds	r0, r1, #1
   84db4:	464e      	mov	r6, r9
   84db6:	e768      	b.n	84c8a <_vfiprintf_r+0x7de>
   84db8:	2a00      	cmp	r2, #0
   84dba:	f040 80f7 	bne.w	84fac <_vfiprintf_r+0xb00>
   84dbe:	9c05      	ldr	r4, [sp, #20]
   84dc0:	2301      	movs	r3, #1
   84dc2:	9720      	str	r7, [sp, #128]	; 0x80
   84dc4:	9421      	str	r4, [sp, #132]	; 0x84
   84dc6:	9415      	str	r4, [sp, #84]	; 0x54
   84dc8:	4622      	mov	r2, r4
   84dca:	9314      	str	r3, [sp, #80]	; 0x50
   84dcc:	464e      	mov	r6, r9
   84dce:	3608      	adds	r6, #8
   84dd0:	e741      	b.n	84c56 <_vfiprintf_r+0x7aa>
   84dd2:	9d04      	ldr	r5, [sp, #16]
   84dd4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84dd8:	ebcb 0405 	rsb	r4, fp, r5
   84ddc:	2c00      	cmp	r4, #0
   84dde:	f77f aef7 	ble.w	84bd0 <_vfiprintf_r+0x724>
   84de2:	2c10      	cmp	r4, #16
   84de4:	4da6      	ldr	r5, [pc, #664]	; (85080 <_vfiprintf_r+0xbd4>)
   84de6:	f340 8170 	ble.w	850ca <_vfiprintf_r+0xc1e>
   84dea:	4629      	mov	r1, r5
   84dec:	f04f 0b10 	mov.w	fp, #16
   84df0:	4625      	mov	r5, r4
   84df2:	4664      	mov	r4, ip
   84df4:	46b4      	mov	ip, r6
   84df6:	460e      	mov	r6, r1
   84df8:	e006      	b.n	84e08 <_vfiprintf_r+0x95c>
   84dfa:	1c98      	adds	r0, r3, #2
   84dfc:	f10c 0c08 	add.w	ip, ip, #8
   84e00:	460b      	mov	r3, r1
   84e02:	3d10      	subs	r5, #16
   84e04:	2d10      	cmp	r5, #16
   84e06:	dd0f      	ble.n	84e28 <_vfiprintf_r+0x97c>
   84e08:	1c59      	adds	r1, r3, #1
   84e0a:	3210      	adds	r2, #16
   84e0c:	2907      	cmp	r1, #7
   84e0e:	9215      	str	r2, [sp, #84]	; 0x54
   84e10:	e88c 0840 	stmia.w	ip, {r6, fp}
   84e14:	9114      	str	r1, [sp, #80]	; 0x50
   84e16:	ddf0      	ble.n	84dfa <_vfiprintf_r+0x94e>
   84e18:	b9ba      	cbnz	r2, 84e4a <_vfiprintf_r+0x99e>
   84e1a:	3d10      	subs	r5, #16
   84e1c:	2d10      	cmp	r5, #16
   84e1e:	f04f 0001 	mov.w	r0, #1
   84e22:	4613      	mov	r3, r2
   84e24:	46cc      	mov	ip, r9
   84e26:	dcef      	bgt.n	84e08 <_vfiprintf_r+0x95c>
   84e28:	4633      	mov	r3, r6
   84e2a:	4666      	mov	r6, ip
   84e2c:	46a4      	mov	ip, r4
   84e2e:	462c      	mov	r4, r5
   84e30:	461d      	mov	r5, r3
   84e32:	4422      	add	r2, r4
   84e34:	2807      	cmp	r0, #7
   84e36:	9215      	str	r2, [sp, #84]	; 0x54
   84e38:	6035      	str	r5, [r6, #0]
   84e3a:	6074      	str	r4, [r6, #4]
   84e3c:	9014      	str	r0, [sp, #80]	; 0x50
   84e3e:	f300 80af 	bgt.w	84fa0 <_vfiprintf_r+0xaf4>
   84e42:	3608      	adds	r6, #8
   84e44:	1c41      	adds	r1, r0, #1
   84e46:	4603      	mov	r3, r0
   84e48:	e6c2      	b.n	84bd0 <_vfiprintf_r+0x724>
   84e4a:	9806      	ldr	r0, [sp, #24]
   84e4c:	9902      	ldr	r1, [sp, #8]
   84e4e:	aa13      	add	r2, sp, #76	; 0x4c
   84e50:	f7ff faf0 	bl	84434 <__sprint_r.part.0>
   84e54:	2800      	cmp	r0, #0
   84e56:	f47f af7c 	bne.w	84d52 <_vfiprintf_r+0x8a6>
   84e5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84e5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84e5e:	1c58      	adds	r0, r3, #1
   84e60:	46cc      	mov	ip, r9
   84e62:	e7ce      	b.n	84e02 <_vfiprintf_r+0x956>
   84e64:	2a00      	cmp	r2, #0
   84e66:	d179      	bne.n	84f5c <_vfiprintf_r+0xab0>
   84e68:	4619      	mov	r1, r3
   84e6a:	464e      	mov	r6, r9
   84e6c:	4613      	mov	r3, r2
   84e6e:	e69c      	b.n	84baa <_vfiprintf_r+0x6fe>
   84e70:	2a00      	cmp	r2, #0
   84e72:	f040 8084 	bne.w	84f7e <_vfiprintf_r+0xad2>
   84e76:	2101      	movs	r1, #1
   84e78:	4613      	mov	r3, r2
   84e7a:	464e      	mov	r6, r9
   84e7c:	e6a4      	b.n	84bc8 <_vfiprintf_r+0x71c>
   84e7e:	464f      	mov	r7, r9
   84e80:	e448      	b.n	84714 <_vfiprintf_r+0x268>
   84e82:	2d00      	cmp	r5, #0
   84e84:	bf08      	it	eq
   84e86:	2c0a      	cmpeq	r4, #10
   84e88:	d246      	bcs.n	84f18 <_vfiprintf_r+0xa6c>
   84e8a:	3430      	adds	r4, #48	; 0x30
   84e8c:	af30      	add	r7, sp, #192	; 0xc0
   84e8e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   84e92:	ebc7 0309 	rsb	r3, r7, r9
   84e96:	9305      	str	r3, [sp, #20]
   84e98:	e43c      	b.n	84714 <_vfiprintf_r+0x268>
   84e9a:	2302      	movs	r3, #2
   84e9c:	e417      	b.n	846ce <_vfiprintf_r+0x222>
   84e9e:	2a00      	cmp	r2, #0
   84ea0:	f040 80af 	bne.w	85002 <_vfiprintf_r+0xb56>
   84ea4:	4613      	mov	r3, r2
   84ea6:	2101      	movs	r1, #1
   84ea8:	464e      	mov	r6, r9
   84eaa:	e66d      	b.n	84b88 <_vfiprintf_r+0x6dc>
   84eac:	4644      	mov	r4, r8
   84eae:	f7ff bb58 	b.w	84562 <_vfiprintf_r+0xb6>
   84eb2:	9806      	ldr	r0, [sp, #24]
   84eb4:	9902      	ldr	r1, [sp, #8]
   84eb6:	aa13      	add	r2, sp, #76	; 0x4c
   84eb8:	f7ff fabc 	bl	84434 <__sprint_r.part.0>
   84ebc:	2800      	cmp	r0, #0
   84ebe:	f47f af48 	bne.w	84d52 <_vfiprintf_r+0x8a6>
   84ec2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84ec4:	464e      	mov	r6, r9
   84ec6:	e6c6      	b.n	84c56 <_vfiprintf_r+0x7aa>
   84ec8:	9d08      	ldr	r5, [sp, #32]
   84eca:	682c      	ldr	r4, [r5, #0]
   84ecc:	3504      	adds	r5, #4
   84ece:	9508      	str	r5, [sp, #32]
   84ed0:	2500      	movs	r5, #0
   84ed2:	f7ff bbfc 	b.w	846ce <_vfiprintf_r+0x222>
   84ed6:	9d08      	ldr	r5, [sp, #32]
   84ed8:	2301      	movs	r3, #1
   84eda:	682c      	ldr	r4, [r5, #0]
   84edc:	3504      	adds	r5, #4
   84ede:	9508      	str	r5, [sp, #32]
   84ee0:	2500      	movs	r5, #0
   84ee2:	f7ff bbf4 	b.w	846ce <_vfiprintf_r+0x222>
   84ee6:	9d08      	ldr	r5, [sp, #32]
   84ee8:	682c      	ldr	r4, [r5, #0]
   84eea:	3504      	adds	r5, #4
   84eec:	9508      	str	r5, [sp, #32]
   84eee:	2500      	movs	r5, #0
   84ef0:	e525      	b.n	8493e <_vfiprintf_r+0x492>
   84ef2:	9d08      	ldr	r5, [sp, #32]
   84ef4:	682c      	ldr	r4, [r5, #0]
   84ef6:	3504      	adds	r5, #4
   84ef8:	9508      	str	r5, [sp, #32]
   84efa:	17e5      	asrs	r5, r4, #31
   84efc:	4622      	mov	r2, r4
   84efe:	462b      	mov	r3, r5
   84f00:	e48e      	b.n	84820 <_vfiprintf_r+0x374>
   84f02:	9806      	ldr	r0, [sp, #24]
   84f04:	9902      	ldr	r1, [sp, #8]
   84f06:	aa13      	add	r2, sp, #76	; 0x4c
   84f08:	f7ff fa94 	bl	84434 <__sprint_r.part.0>
   84f0c:	2800      	cmp	r0, #0
   84f0e:	f47f af20 	bne.w	84d52 <_vfiprintf_r+0x8a6>
   84f12:	464e      	mov	r6, r9
   84f14:	f7ff bb9a 	b.w	8464c <_vfiprintf_r+0x1a0>
   84f18:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   84f1c:	9603      	str	r6, [sp, #12]
   84f1e:	465e      	mov	r6, fp
   84f20:	46e3      	mov	fp, ip
   84f22:	4620      	mov	r0, r4
   84f24:	4629      	mov	r1, r5
   84f26:	220a      	movs	r2, #10
   84f28:	2300      	movs	r3, #0
   84f2a:	f001 fdb9 	bl	86aa0 <__aeabi_uldivmod>
   84f2e:	3230      	adds	r2, #48	; 0x30
   84f30:	7032      	strb	r2, [r6, #0]
   84f32:	4620      	mov	r0, r4
   84f34:	4629      	mov	r1, r5
   84f36:	220a      	movs	r2, #10
   84f38:	2300      	movs	r3, #0
   84f3a:	f001 fdb1 	bl	86aa0 <__aeabi_uldivmod>
   84f3e:	4604      	mov	r4, r0
   84f40:	460d      	mov	r5, r1
   84f42:	ea54 0005 	orrs.w	r0, r4, r5
   84f46:	4637      	mov	r7, r6
   84f48:	f106 36ff 	add.w	r6, r6, #4294967295
   84f4c:	d1e9      	bne.n	84f22 <_vfiprintf_r+0xa76>
   84f4e:	ebc7 0309 	rsb	r3, r7, r9
   84f52:	46dc      	mov	ip, fp
   84f54:	9e03      	ldr	r6, [sp, #12]
   84f56:	9305      	str	r3, [sp, #20]
   84f58:	f7ff bbdc 	b.w	84714 <_vfiprintf_r+0x268>
   84f5c:	9806      	ldr	r0, [sp, #24]
   84f5e:	9902      	ldr	r1, [sp, #8]
   84f60:	aa13      	add	r2, sp, #76	; 0x4c
   84f62:	f8cd c004 	str.w	ip, [sp, #4]
   84f66:	f7ff fa65 	bl	84434 <__sprint_r.part.0>
   84f6a:	f8dd c004 	ldr.w	ip, [sp, #4]
   84f6e:	2800      	cmp	r0, #0
   84f70:	f47f aeef 	bne.w	84d52 <_vfiprintf_r+0x8a6>
   84f74:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84f76:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84f78:	1c59      	adds	r1, r3, #1
   84f7a:	464e      	mov	r6, r9
   84f7c:	e615      	b.n	84baa <_vfiprintf_r+0x6fe>
   84f7e:	9806      	ldr	r0, [sp, #24]
   84f80:	9902      	ldr	r1, [sp, #8]
   84f82:	aa13      	add	r2, sp, #76	; 0x4c
   84f84:	f8cd c004 	str.w	ip, [sp, #4]
   84f88:	f7ff fa54 	bl	84434 <__sprint_r.part.0>
   84f8c:	f8dd c004 	ldr.w	ip, [sp, #4]
   84f90:	2800      	cmp	r0, #0
   84f92:	f47f aede 	bne.w	84d52 <_vfiprintf_r+0x8a6>
   84f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84f98:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84f9a:	1c59      	adds	r1, r3, #1
   84f9c:	464e      	mov	r6, r9
   84f9e:	e613      	b.n	84bc8 <_vfiprintf_r+0x71c>
   84fa0:	2a00      	cmp	r2, #0
   84fa2:	d156      	bne.n	85052 <_vfiprintf_r+0xba6>
   84fa4:	2101      	movs	r1, #1
   84fa6:	4613      	mov	r3, r2
   84fa8:	464e      	mov	r6, r9
   84faa:	e611      	b.n	84bd0 <_vfiprintf_r+0x724>
   84fac:	9806      	ldr	r0, [sp, #24]
   84fae:	9902      	ldr	r1, [sp, #8]
   84fb0:	aa13      	add	r2, sp, #76	; 0x4c
   84fb2:	f7ff fa3f 	bl	84434 <__sprint_r.part.0>
   84fb6:	2800      	cmp	r0, #0
   84fb8:	f47f aecb 	bne.w	84d52 <_vfiprintf_r+0x8a6>
   84fbc:	9914      	ldr	r1, [sp, #80]	; 0x50
   84fbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84fc0:	3101      	adds	r1, #1
   84fc2:	464e      	mov	r6, r9
   84fc4:	e639      	b.n	84c3a <_vfiprintf_r+0x78e>
   84fc6:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   84fca:	4264      	negs	r4, r4
   84fcc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84fd0:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   84fd4:	f8cd b01c 	str.w	fp, [sp, #28]
   84fd8:	f8cd c014 	str.w	ip, [sp, #20]
   84fdc:	2301      	movs	r3, #1
   84fde:	f7ff bb7e 	b.w	846de <_vfiprintf_r+0x232>
   84fe2:	f01a 0f10 	tst.w	sl, #16
   84fe6:	d11d      	bne.n	85024 <_vfiprintf_r+0xb78>
   84fe8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   84fec:	d058      	beq.n	850a0 <_vfiprintf_r+0xbf4>
   84fee:	9d08      	ldr	r5, [sp, #32]
   84ff0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   84ff4:	682b      	ldr	r3, [r5, #0]
   84ff6:	3504      	adds	r5, #4
   84ff8:	9508      	str	r5, [sp, #32]
   84ffa:	f8a3 b000 	strh.w	fp, [r3]
   84ffe:	f7ff ba88 	b.w	84512 <_vfiprintf_r+0x66>
   85002:	9806      	ldr	r0, [sp, #24]
   85004:	9902      	ldr	r1, [sp, #8]
   85006:	aa13      	add	r2, sp, #76	; 0x4c
   85008:	f8cd c004 	str.w	ip, [sp, #4]
   8500c:	f7ff fa12 	bl	84434 <__sprint_r.part.0>
   85010:	f8dd c004 	ldr.w	ip, [sp, #4]
   85014:	2800      	cmp	r0, #0
   85016:	f47f ae9c 	bne.w	84d52 <_vfiprintf_r+0x8a6>
   8501a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8501c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8501e:	1c59      	adds	r1, r3, #1
   85020:	464e      	mov	r6, r9
   85022:	e5b1      	b.n	84b88 <_vfiprintf_r+0x6dc>
   85024:	f8dd b020 	ldr.w	fp, [sp, #32]
   85028:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8502a:	f8db 3000 	ldr.w	r3, [fp]
   8502e:	f10b 0b04 	add.w	fp, fp, #4
   85032:	f8cd b020 	str.w	fp, [sp, #32]
   85036:	601c      	str	r4, [r3, #0]
   85038:	f7ff ba6b 	b.w	84512 <_vfiprintf_r+0x66>
   8503c:	9408      	str	r4, [sp, #32]
   8503e:	f7ff f997 	bl	84370 <strlen>
   85042:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   85046:	9005      	str	r0, [sp, #20]
   85048:	9407      	str	r4, [sp, #28]
   8504a:	f04f 0c00 	mov.w	ip, #0
   8504e:	f7ff bb61 	b.w	84714 <_vfiprintf_r+0x268>
   85052:	9806      	ldr	r0, [sp, #24]
   85054:	9902      	ldr	r1, [sp, #8]
   85056:	aa13      	add	r2, sp, #76	; 0x4c
   85058:	f8cd c004 	str.w	ip, [sp, #4]
   8505c:	f7ff f9ea 	bl	84434 <__sprint_r.part.0>
   85060:	f8dd c004 	ldr.w	ip, [sp, #4]
   85064:	2800      	cmp	r0, #0
   85066:	f47f ae74 	bne.w	84d52 <_vfiprintf_r+0x8a6>
   8506a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8506c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8506e:	1c59      	adds	r1, r3, #1
   85070:	464e      	mov	r6, r9
   85072:	e5ad      	b.n	84bd0 <_vfiprintf_r+0x724>
   85074:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85076:	9a15      	ldr	r2, [sp, #84]	; 0x54
   85078:	3301      	adds	r3, #1
   8507a:	4d02      	ldr	r5, [pc, #8]	; (85084 <_vfiprintf_r+0xbd8>)
   8507c:	f7ff bb9a 	b.w	847b4 <_vfiprintf_r+0x308>
   85080:	000871e0 	.word	0x000871e0
   85084:	000871f0 	.word	0x000871f0
   85088:	f1bc 0f06 	cmp.w	ip, #6
   8508c:	bf34      	ite	cc
   8508e:	4663      	movcc	r3, ip
   85090:	2306      	movcs	r3, #6
   85092:	9408      	str	r4, [sp, #32]
   85094:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   85098:	9305      	str	r3, [sp, #20]
   8509a:	9403      	str	r4, [sp, #12]
   8509c:	4f16      	ldr	r7, [pc, #88]	; (850f8 <_vfiprintf_r+0xc4c>)
   8509e:	e472      	b.n	84986 <_vfiprintf_r+0x4da>
   850a0:	9c08      	ldr	r4, [sp, #32]
   850a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   850a4:	6823      	ldr	r3, [r4, #0]
   850a6:	3404      	adds	r4, #4
   850a8:	9408      	str	r4, [sp, #32]
   850aa:	601d      	str	r5, [r3, #0]
   850ac:	f7ff ba31 	b.w	84512 <_vfiprintf_r+0x66>
   850b0:	9814      	ldr	r0, [sp, #80]	; 0x50
   850b2:	4d12      	ldr	r5, [pc, #72]	; (850fc <_vfiprintf_r+0xc50>)
   850b4:	3001      	adds	r0, #1
   850b6:	e5fc      	b.n	84cb2 <_vfiprintf_r+0x806>
   850b8:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   850bc:	f8cd c014 	str.w	ip, [sp, #20]
   850c0:	9507      	str	r5, [sp, #28]
   850c2:	9408      	str	r4, [sp, #32]
   850c4:	4684      	mov	ip, r0
   850c6:	f7ff bb25 	b.w	84714 <_vfiprintf_r+0x268>
   850ca:	4608      	mov	r0, r1
   850cc:	e6b1      	b.n	84e32 <_vfiprintf_r+0x986>
   850ce:	46a0      	mov	r8, r4
   850d0:	2500      	movs	r5, #0
   850d2:	f7ff ba5a 	b.w	8458a <_vfiprintf_r+0xde>
   850d6:	f8dd b020 	ldr.w	fp, [sp, #32]
   850da:	f898 3001 	ldrb.w	r3, [r8, #1]
   850de:	f8db 5000 	ldr.w	r5, [fp]
   850e2:	f10b 0204 	add.w	r2, fp, #4
   850e6:	2d00      	cmp	r5, #0
   850e8:	9208      	str	r2, [sp, #32]
   850ea:	46a0      	mov	r8, r4
   850ec:	f6bf aa4b 	bge.w	84586 <_vfiprintf_r+0xda>
   850f0:	f04f 35ff 	mov.w	r5, #4294967295
   850f4:	f7ff ba47 	b.w	84586 <_vfiprintf_r+0xda>
   850f8:	000871d8 	.word	0x000871d8
   850fc:	000871f0 	.word	0x000871f0

00085100 <__sbprintf>:
   85100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85104:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   85106:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8510a:	4688      	mov	r8, r1
   8510c:	9719      	str	r7, [sp, #100]	; 0x64
   8510e:	f8d8 701c 	ldr.w	r7, [r8, #28]
   85112:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   85116:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   8511a:	9707      	str	r7, [sp, #28]
   8511c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   85120:	ac1a      	add	r4, sp, #104	; 0x68
   85122:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85126:	f02a 0a02 	bic.w	sl, sl, #2
   8512a:	2600      	movs	r6, #0
   8512c:	4669      	mov	r1, sp
   8512e:	9400      	str	r4, [sp, #0]
   85130:	9404      	str	r4, [sp, #16]
   85132:	9502      	str	r5, [sp, #8]
   85134:	9505      	str	r5, [sp, #20]
   85136:	f8ad a00c 	strh.w	sl, [sp, #12]
   8513a:	f8ad 900e 	strh.w	r9, [sp, #14]
   8513e:	9709      	str	r7, [sp, #36]	; 0x24
   85140:	9606      	str	r6, [sp, #24]
   85142:	4605      	mov	r5, r0
   85144:	f7ff f9b2 	bl	844ac <_vfiprintf_r>
   85148:	1e04      	subs	r4, r0, #0
   8514a:	db07      	blt.n	8515c <__sbprintf+0x5c>
   8514c:	4628      	mov	r0, r5
   8514e:	4669      	mov	r1, sp
   85150:	f000 f92a 	bl	853a8 <_fflush_r>
   85154:	42b0      	cmp	r0, r6
   85156:	bf18      	it	ne
   85158:	f04f 34ff 	movne.w	r4, #4294967295
   8515c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   85160:	065b      	lsls	r3, r3, #25
   85162:	d505      	bpl.n	85170 <__sbprintf+0x70>
   85164:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   85168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8516c:	f8a8 300c 	strh.w	r3, [r8, #12]
   85170:	4620      	mov	r0, r4
   85172:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   85176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8517a:	bf00      	nop

0008517c <__swsetup_r>:
   8517c:	4b2f      	ldr	r3, [pc, #188]	; (8523c <__swsetup_r+0xc0>)
   8517e:	b570      	push	{r4, r5, r6, lr}
   85180:	4606      	mov	r6, r0
   85182:	6818      	ldr	r0, [r3, #0]
   85184:	460c      	mov	r4, r1
   85186:	b110      	cbz	r0, 8518e <__swsetup_r+0x12>
   85188:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8518a:	2a00      	cmp	r2, #0
   8518c:	d036      	beq.n	851fc <__swsetup_r+0x80>
   8518e:	89a5      	ldrh	r5, [r4, #12]
   85190:	b2ab      	uxth	r3, r5
   85192:	0719      	lsls	r1, r3, #28
   85194:	d50c      	bpl.n	851b0 <__swsetup_r+0x34>
   85196:	6922      	ldr	r2, [r4, #16]
   85198:	b1aa      	cbz	r2, 851c6 <__swsetup_r+0x4a>
   8519a:	f013 0101 	ands.w	r1, r3, #1
   8519e:	d01e      	beq.n	851de <__swsetup_r+0x62>
   851a0:	6963      	ldr	r3, [r4, #20]
   851a2:	2100      	movs	r1, #0
   851a4:	425b      	negs	r3, r3
   851a6:	61a3      	str	r3, [r4, #24]
   851a8:	60a1      	str	r1, [r4, #8]
   851aa:	b1f2      	cbz	r2, 851ea <__swsetup_r+0x6e>
   851ac:	2000      	movs	r0, #0
   851ae:	bd70      	pop	{r4, r5, r6, pc}
   851b0:	06da      	lsls	r2, r3, #27
   851b2:	d53a      	bpl.n	8522a <__swsetup_r+0xae>
   851b4:	075b      	lsls	r3, r3, #29
   851b6:	d424      	bmi.n	85202 <__swsetup_r+0x86>
   851b8:	6922      	ldr	r2, [r4, #16]
   851ba:	f045 0308 	orr.w	r3, r5, #8
   851be:	81a3      	strh	r3, [r4, #12]
   851c0:	b29b      	uxth	r3, r3
   851c2:	2a00      	cmp	r2, #0
   851c4:	d1e9      	bne.n	8519a <__swsetup_r+0x1e>
   851c6:	f403 7120 	and.w	r1, r3, #640	; 0x280
   851ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   851ce:	d0e4      	beq.n	8519a <__swsetup_r+0x1e>
   851d0:	4630      	mov	r0, r6
   851d2:	4621      	mov	r1, r4
   851d4:	f000 fcce 	bl	85b74 <__smakebuf_r>
   851d8:	89a3      	ldrh	r3, [r4, #12]
   851da:	6922      	ldr	r2, [r4, #16]
   851dc:	e7dd      	b.n	8519a <__swsetup_r+0x1e>
   851de:	0798      	lsls	r0, r3, #30
   851e0:	bf58      	it	pl
   851e2:	6961      	ldrpl	r1, [r4, #20]
   851e4:	60a1      	str	r1, [r4, #8]
   851e6:	2a00      	cmp	r2, #0
   851e8:	d1e0      	bne.n	851ac <__swsetup_r+0x30>
   851ea:	89a3      	ldrh	r3, [r4, #12]
   851ec:	061a      	lsls	r2, r3, #24
   851ee:	d5dd      	bpl.n	851ac <__swsetup_r+0x30>
   851f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   851f4:	81a3      	strh	r3, [r4, #12]
   851f6:	f04f 30ff 	mov.w	r0, #4294967295
   851fa:	bd70      	pop	{r4, r5, r6, pc}
   851fc:	f000 f8f0 	bl	853e0 <__sinit>
   85200:	e7c5      	b.n	8518e <__swsetup_r+0x12>
   85202:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85204:	b149      	cbz	r1, 8521a <__swsetup_r+0x9e>
   85206:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8520a:	4299      	cmp	r1, r3
   8520c:	d003      	beq.n	85216 <__swsetup_r+0x9a>
   8520e:	4630      	mov	r0, r6
   85210:	f000 fa2a 	bl	85668 <_free_r>
   85214:	89a5      	ldrh	r5, [r4, #12]
   85216:	2300      	movs	r3, #0
   85218:	6323      	str	r3, [r4, #48]	; 0x30
   8521a:	6922      	ldr	r2, [r4, #16]
   8521c:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   85220:	2100      	movs	r1, #0
   85222:	b2ad      	uxth	r5, r5
   85224:	6022      	str	r2, [r4, #0]
   85226:	6061      	str	r1, [r4, #4]
   85228:	e7c7      	b.n	851ba <__swsetup_r+0x3e>
   8522a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8522e:	2309      	movs	r3, #9
   85230:	6033      	str	r3, [r6, #0]
   85232:	f04f 30ff 	mov.w	r0, #4294967295
   85236:	81a5      	strh	r5, [r4, #12]
   85238:	bd70      	pop	{r4, r5, r6, pc}
   8523a:	bf00      	nop
   8523c:	200705a0 	.word	0x200705a0

00085240 <register_fini>:
   85240:	4b02      	ldr	r3, [pc, #8]	; (8524c <register_fini+0xc>)
   85242:	b113      	cbz	r3, 8524a <register_fini+0xa>
   85244:	4802      	ldr	r0, [pc, #8]	; (85250 <register_fini+0x10>)
   85246:	f000 b805 	b.w	85254 <atexit>
   8524a:	4770      	bx	lr
   8524c:	00000000 	.word	0x00000000
   85250:	000854dd 	.word	0x000854dd

00085254 <atexit>:
   85254:	4601      	mov	r1, r0
   85256:	2000      	movs	r0, #0
   85258:	4602      	mov	r2, r0
   8525a:	4603      	mov	r3, r0
   8525c:	f001 bb24 	b.w	868a8 <__register_exitproc>

00085260 <__sflush_r>:
   85260:	898b      	ldrh	r3, [r1, #12]
   85262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85266:	b29a      	uxth	r2, r3
   85268:	460d      	mov	r5, r1
   8526a:	0711      	lsls	r1, r2, #28
   8526c:	4680      	mov	r8, r0
   8526e:	d43c      	bmi.n	852ea <__sflush_r+0x8a>
   85270:	686a      	ldr	r2, [r5, #4]
   85272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85276:	2a00      	cmp	r2, #0
   85278:	81ab      	strh	r3, [r5, #12]
   8527a:	dd59      	ble.n	85330 <__sflush_r+0xd0>
   8527c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8527e:	2c00      	cmp	r4, #0
   85280:	d04b      	beq.n	8531a <__sflush_r+0xba>
   85282:	b29b      	uxth	r3, r3
   85284:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   85288:	2100      	movs	r1, #0
   8528a:	b292      	uxth	r2, r2
   8528c:	f8d8 6000 	ldr.w	r6, [r8]
   85290:	f8c8 1000 	str.w	r1, [r8]
   85294:	2a00      	cmp	r2, #0
   85296:	d04f      	beq.n	85338 <__sflush_r+0xd8>
   85298:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8529a:	075f      	lsls	r7, r3, #29
   8529c:	d505      	bpl.n	852aa <__sflush_r+0x4a>
   8529e:	6869      	ldr	r1, [r5, #4]
   852a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   852a2:	1a52      	subs	r2, r2, r1
   852a4:	b10b      	cbz	r3, 852aa <__sflush_r+0x4a>
   852a6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   852a8:	1ad2      	subs	r2, r2, r3
   852aa:	4640      	mov	r0, r8
   852ac:	69e9      	ldr	r1, [r5, #28]
   852ae:	2300      	movs	r3, #0
   852b0:	47a0      	blx	r4
   852b2:	1c44      	adds	r4, r0, #1
   852b4:	d04a      	beq.n	8534c <__sflush_r+0xec>
   852b6:	89ab      	ldrh	r3, [r5, #12]
   852b8:	692a      	ldr	r2, [r5, #16]
   852ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   852be:	b29b      	uxth	r3, r3
   852c0:	2100      	movs	r1, #0
   852c2:	602a      	str	r2, [r5, #0]
   852c4:	04da      	lsls	r2, r3, #19
   852c6:	81ab      	strh	r3, [r5, #12]
   852c8:	6069      	str	r1, [r5, #4]
   852ca:	d44c      	bmi.n	85366 <__sflush_r+0x106>
   852cc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   852ce:	f8c8 6000 	str.w	r6, [r8]
   852d2:	b311      	cbz	r1, 8531a <__sflush_r+0xba>
   852d4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   852d8:	4299      	cmp	r1, r3
   852da:	d002      	beq.n	852e2 <__sflush_r+0x82>
   852dc:	4640      	mov	r0, r8
   852de:	f000 f9c3 	bl	85668 <_free_r>
   852e2:	2000      	movs	r0, #0
   852e4:	6328      	str	r0, [r5, #48]	; 0x30
   852e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   852ea:	692e      	ldr	r6, [r5, #16]
   852ec:	b1ae      	cbz	r6, 8531a <__sflush_r+0xba>
   852ee:	0791      	lsls	r1, r2, #30
   852f0:	682c      	ldr	r4, [r5, #0]
   852f2:	bf0c      	ite	eq
   852f4:	696b      	ldreq	r3, [r5, #20]
   852f6:	2300      	movne	r3, #0
   852f8:	602e      	str	r6, [r5, #0]
   852fa:	1ba4      	subs	r4, r4, r6
   852fc:	60ab      	str	r3, [r5, #8]
   852fe:	e00a      	b.n	85316 <__sflush_r+0xb6>
   85300:	4632      	mov	r2, r6
   85302:	4623      	mov	r3, r4
   85304:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   85306:	4640      	mov	r0, r8
   85308:	69e9      	ldr	r1, [r5, #28]
   8530a:	47b8      	blx	r7
   8530c:	2800      	cmp	r0, #0
   8530e:	ebc0 0404 	rsb	r4, r0, r4
   85312:	4406      	add	r6, r0
   85314:	dd04      	ble.n	85320 <__sflush_r+0xc0>
   85316:	2c00      	cmp	r4, #0
   85318:	dcf2      	bgt.n	85300 <__sflush_r+0xa0>
   8531a:	2000      	movs	r0, #0
   8531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85320:	89ab      	ldrh	r3, [r5, #12]
   85322:	f04f 30ff 	mov.w	r0, #4294967295
   85326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8532a:	81ab      	strh	r3, [r5, #12]
   8532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85330:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   85332:	2a00      	cmp	r2, #0
   85334:	dca2      	bgt.n	8527c <__sflush_r+0x1c>
   85336:	e7f0      	b.n	8531a <__sflush_r+0xba>
   85338:	2301      	movs	r3, #1
   8533a:	4640      	mov	r0, r8
   8533c:	69e9      	ldr	r1, [r5, #28]
   8533e:	47a0      	blx	r4
   85340:	1c43      	adds	r3, r0, #1
   85342:	4602      	mov	r2, r0
   85344:	d01e      	beq.n	85384 <__sflush_r+0x124>
   85346:	89ab      	ldrh	r3, [r5, #12]
   85348:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8534a:	e7a6      	b.n	8529a <__sflush_r+0x3a>
   8534c:	f8d8 3000 	ldr.w	r3, [r8]
   85350:	b95b      	cbnz	r3, 8536a <__sflush_r+0x10a>
   85352:	89aa      	ldrh	r2, [r5, #12]
   85354:	6929      	ldr	r1, [r5, #16]
   85356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8535a:	b292      	uxth	r2, r2
   8535c:	606b      	str	r3, [r5, #4]
   8535e:	04d3      	lsls	r3, r2, #19
   85360:	81aa      	strh	r2, [r5, #12]
   85362:	6029      	str	r1, [r5, #0]
   85364:	d5b2      	bpl.n	852cc <__sflush_r+0x6c>
   85366:	6528      	str	r0, [r5, #80]	; 0x50
   85368:	e7b0      	b.n	852cc <__sflush_r+0x6c>
   8536a:	2b1d      	cmp	r3, #29
   8536c:	d001      	beq.n	85372 <__sflush_r+0x112>
   8536e:	2b16      	cmp	r3, #22
   85370:	d113      	bne.n	8539a <__sflush_r+0x13a>
   85372:	89a9      	ldrh	r1, [r5, #12]
   85374:	692b      	ldr	r3, [r5, #16]
   85376:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   8537a:	2200      	movs	r2, #0
   8537c:	81a9      	strh	r1, [r5, #12]
   8537e:	602b      	str	r3, [r5, #0]
   85380:	606a      	str	r2, [r5, #4]
   85382:	e7a3      	b.n	852cc <__sflush_r+0x6c>
   85384:	f8d8 3000 	ldr.w	r3, [r8]
   85388:	2b00      	cmp	r3, #0
   8538a:	d0dc      	beq.n	85346 <__sflush_r+0xe6>
   8538c:	2b1d      	cmp	r3, #29
   8538e:	d001      	beq.n	85394 <__sflush_r+0x134>
   85390:	2b16      	cmp	r3, #22
   85392:	d1c5      	bne.n	85320 <__sflush_r+0xc0>
   85394:	f8c8 6000 	str.w	r6, [r8]
   85398:	e7bf      	b.n	8531a <__sflush_r+0xba>
   8539a:	89ab      	ldrh	r3, [r5, #12]
   8539c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   853a0:	81ab      	strh	r3, [r5, #12]
   853a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   853a6:	bf00      	nop

000853a8 <_fflush_r>:
   853a8:	b510      	push	{r4, lr}
   853aa:	4604      	mov	r4, r0
   853ac:	b082      	sub	sp, #8
   853ae:	b108      	cbz	r0, 853b4 <_fflush_r+0xc>
   853b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   853b2:	b153      	cbz	r3, 853ca <_fflush_r+0x22>
   853b4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   853b8:	b908      	cbnz	r0, 853be <_fflush_r+0x16>
   853ba:	b002      	add	sp, #8
   853bc:	bd10      	pop	{r4, pc}
   853be:	4620      	mov	r0, r4
   853c0:	b002      	add	sp, #8
   853c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   853c6:	f7ff bf4b 	b.w	85260 <__sflush_r>
   853ca:	9101      	str	r1, [sp, #4]
   853cc:	f000 f808 	bl	853e0 <__sinit>
   853d0:	9901      	ldr	r1, [sp, #4]
   853d2:	e7ef      	b.n	853b4 <_fflush_r+0xc>

000853d4 <_cleanup_r>:
   853d4:	4901      	ldr	r1, [pc, #4]	; (853dc <_cleanup_r+0x8>)
   853d6:	f000 bb9f 	b.w	85b18 <_fwalk>
   853da:	bf00      	nop
   853dc:	000869f5 	.word	0x000869f5

000853e0 <__sinit>:
   853e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   853e4:	6b84      	ldr	r4, [r0, #56]	; 0x38
   853e6:	b083      	sub	sp, #12
   853e8:	4607      	mov	r7, r0
   853ea:	2c00      	cmp	r4, #0
   853ec:	d165      	bne.n	854ba <__sinit+0xda>
   853ee:	687d      	ldr	r5, [r7, #4]
   853f0:	4833      	ldr	r0, [pc, #204]	; (854c0 <__sinit+0xe0>)
   853f2:	2304      	movs	r3, #4
   853f4:	2103      	movs	r1, #3
   853f6:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   853fa:	63f8      	str	r0, [r7, #60]	; 0x3c
   853fc:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   85400:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   85404:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   85408:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8540c:	81ab      	strh	r3, [r5, #12]
   8540e:	602c      	str	r4, [r5, #0]
   85410:	606c      	str	r4, [r5, #4]
   85412:	60ac      	str	r4, [r5, #8]
   85414:	666c      	str	r4, [r5, #100]	; 0x64
   85416:	81ec      	strh	r4, [r5, #14]
   85418:	612c      	str	r4, [r5, #16]
   8541a:	616c      	str	r4, [r5, #20]
   8541c:	61ac      	str	r4, [r5, #24]
   8541e:	4621      	mov	r1, r4
   85420:	2208      	movs	r2, #8
   85422:	f7fe fed3 	bl	841cc <memset>
   85426:	f8df b09c 	ldr.w	fp, [pc, #156]	; 854c4 <__sinit+0xe4>
   8542a:	68be      	ldr	r6, [r7, #8]
   8542c:	f8df a098 	ldr.w	sl, [pc, #152]	; 854c8 <__sinit+0xe8>
   85430:	f8df 9098 	ldr.w	r9, [pc, #152]	; 854cc <__sinit+0xec>
   85434:	f8df 8098 	ldr.w	r8, [pc, #152]	; 854d0 <__sinit+0xf0>
   85438:	2301      	movs	r3, #1
   8543a:	2209      	movs	r2, #9
   8543c:	61ed      	str	r5, [r5, #28]
   8543e:	f8c5 b020 	str.w	fp, [r5, #32]
   85442:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85446:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8544a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8544e:	4621      	mov	r1, r4
   85450:	81f3      	strh	r3, [r6, #14]
   85452:	81b2      	strh	r2, [r6, #12]
   85454:	6034      	str	r4, [r6, #0]
   85456:	6074      	str	r4, [r6, #4]
   85458:	60b4      	str	r4, [r6, #8]
   8545a:	6674      	str	r4, [r6, #100]	; 0x64
   8545c:	6134      	str	r4, [r6, #16]
   8545e:	6174      	str	r4, [r6, #20]
   85460:	61b4      	str	r4, [r6, #24]
   85462:	2208      	movs	r2, #8
   85464:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   85468:	9301      	str	r3, [sp, #4]
   8546a:	f7fe feaf 	bl	841cc <memset>
   8546e:	68fd      	ldr	r5, [r7, #12]
   85470:	2012      	movs	r0, #18
   85472:	2202      	movs	r2, #2
   85474:	61f6      	str	r6, [r6, #28]
   85476:	f8c6 b020 	str.w	fp, [r6, #32]
   8547a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8547e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   85482:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   85486:	4621      	mov	r1, r4
   85488:	81a8      	strh	r0, [r5, #12]
   8548a:	81ea      	strh	r2, [r5, #14]
   8548c:	602c      	str	r4, [r5, #0]
   8548e:	606c      	str	r4, [r5, #4]
   85490:	60ac      	str	r4, [r5, #8]
   85492:	666c      	str	r4, [r5, #100]	; 0x64
   85494:	612c      	str	r4, [r5, #16]
   85496:	616c      	str	r4, [r5, #20]
   85498:	61ac      	str	r4, [r5, #24]
   8549a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8549e:	2208      	movs	r2, #8
   854a0:	f7fe fe94 	bl	841cc <memset>
   854a4:	9b01      	ldr	r3, [sp, #4]
   854a6:	61ed      	str	r5, [r5, #28]
   854a8:	f8c5 b020 	str.w	fp, [r5, #32]
   854ac:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   854b0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   854b4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   854b8:	63bb      	str	r3, [r7, #56]	; 0x38
   854ba:	b003      	add	sp, #12
   854bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   854c0:	000853d5 	.word	0x000853d5
   854c4:	000866e9 	.word	0x000866e9
   854c8:	0008670d 	.word	0x0008670d
   854cc:	00086745 	.word	0x00086745
   854d0:	00086765 	.word	0x00086765

000854d4 <__sfp_lock_acquire>:
   854d4:	4770      	bx	lr
   854d6:	bf00      	nop

000854d8 <__sfp_lock_release>:
   854d8:	4770      	bx	lr
   854da:	bf00      	nop

000854dc <__libc_fini_array>:
   854dc:	b538      	push	{r3, r4, r5, lr}
   854de:	4d09      	ldr	r5, [pc, #36]	; (85504 <__libc_fini_array+0x28>)
   854e0:	4c09      	ldr	r4, [pc, #36]	; (85508 <__libc_fini_array+0x2c>)
   854e2:	1b64      	subs	r4, r4, r5
   854e4:	10a4      	asrs	r4, r4, #2
   854e6:	bf18      	it	ne
   854e8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   854ec:	d005      	beq.n	854fa <__libc_fini_array+0x1e>
   854ee:	3c01      	subs	r4, #1
   854f0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   854f4:	4798      	blx	r3
   854f6:	2c00      	cmp	r4, #0
   854f8:	d1f9      	bne.n	854ee <__libc_fini_array+0x12>
   854fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   854fe:	f001 be89 	b.w	87214 <_fini>
   85502:	bf00      	nop
   85504:	00087220 	.word	0x00087220
   85508:	00087224 	.word	0x00087224

0008550c <_fputwc_r>:
   8550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85510:	8993      	ldrh	r3, [r2, #12]
   85512:	460f      	mov	r7, r1
   85514:	0499      	lsls	r1, r3, #18
   85516:	b082      	sub	sp, #8
   85518:	4614      	mov	r4, r2
   8551a:	4680      	mov	r8, r0
   8551c:	d406      	bmi.n	8552c <_fputwc_r+0x20>
   8551e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   85520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   85524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85528:	81a3      	strh	r3, [r4, #12]
   8552a:	6662      	str	r2, [r4, #100]	; 0x64
   8552c:	f000 fb1c 	bl	85b68 <__locale_mb_cur_max>
   85530:	2801      	cmp	r0, #1
   85532:	d03e      	beq.n	855b2 <_fputwc_r+0xa6>
   85534:	463a      	mov	r2, r7
   85536:	4640      	mov	r0, r8
   85538:	a901      	add	r1, sp, #4
   8553a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8553e:	f001 f969 	bl	86814 <_wcrtomb_r>
   85542:	1c42      	adds	r2, r0, #1
   85544:	4606      	mov	r6, r0
   85546:	d02d      	beq.n	855a4 <_fputwc_r+0x98>
   85548:	2800      	cmp	r0, #0
   8554a:	d03a      	beq.n	855c2 <_fputwc_r+0xb6>
   8554c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85550:	2500      	movs	r5, #0
   85552:	e009      	b.n	85568 <_fputwc_r+0x5c>
   85554:	6823      	ldr	r3, [r4, #0]
   85556:	7019      	strb	r1, [r3, #0]
   85558:	6823      	ldr	r3, [r4, #0]
   8555a:	3301      	adds	r3, #1
   8555c:	6023      	str	r3, [r4, #0]
   8555e:	3501      	adds	r5, #1
   85560:	42b5      	cmp	r5, r6
   85562:	d22e      	bcs.n	855c2 <_fputwc_r+0xb6>
   85564:	ab01      	add	r3, sp, #4
   85566:	5ce9      	ldrb	r1, [r5, r3]
   85568:	68a3      	ldr	r3, [r4, #8]
   8556a:	3b01      	subs	r3, #1
   8556c:	2b00      	cmp	r3, #0
   8556e:	60a3      	str	r3, [r4, #8]
   85570:	daf0      	bge.n	85554 <_fputwc_r+0x48>
   85572:	69a2      	ldr	r2, [r4, #24]
   85574:	4293      	cmp	r3, r2
   85576:	db06      	blt.n	85586 <_fputwc_r+0x7a>
   85578:	6823      	ldr	r3, [r4, #0]
   8557a:	7019      	strb	r1, [r3, #0]
   8557c:	6823      	ldr	r3, [r4, #0]
   8557e:	7819      	ldrb	r1, [r3, #0]
   85580:	3301      	adds	r3, #1
   85582:	290a      	cmp	r1, #10
   85584:	d1ea      	bne.n	8555c <_fputwc_r+0x50>
   85586:	4640      	mov	r0, r8
   85588:	4622      	mov	r2, r4
   8558a:	f001 f8ef 	bl	8676c <__swbuf_r>
   8558e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   85592:	4258      	negs	r0, r3
   85594:	4158      	adcs	r0, r3
   85596:	2800      	cmp	r0, #0
   85598:	d0e1      	beq.n	8555e <_fputwc_r+0x52>
   8559a:	f04f 30ff 	mov.w	r0, #4294967295
   8559e:	b002      	add	sp, #8
   855a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   855a4:	89a3      	ldrh	r3, [r4, #12]
   855a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   855aa:	81a3      	strh	r3, [r4, #12]
   855ac:	b002      	add	sp, #8
   855ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   855b2:	1e7b      	subs	r3, r7, #1
   855b4:	2bfe      	cmp	r3, #254	; 0xfe
   855b6:	d8bd      	bhi.n	85534 <_fputwc_r+0x28>
   855b8:	b2f9      	uxtb	r1, r7
   855ba:	4606      	mov	r6, r0
   855bc:	f88d 1004 	strb.w	r1, [sp, #4]
   855c0:	e7c6      	b.n	85550 <_fputwc_r+0x44>
   855c2:	4638      	mov	r0, r7
   855c4:	b002      	add	sp, #8
   855c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   855ca:	bf00      	nop

000855cc <_malloc_trim_r>:
   855cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   855ce:	4d23      	ldr	r5, [pc, #140]	; (8565c <_malloc_trim_r+0x90>)
   855d0:	460f      	mov	r7, r1
   855d2:	4604      	mov	r4, r0
   855d4:	f000 fe92 	bl	862fc <__malloc_lock>
   855d8:	68ab      	ldr	r3, [r5, #8]
   855da:	685e      	ldr	r6, [r3, #4]
   855dc:	f026 0603 	bic.w	r6, r6, #3
   855e0:	1bf1      	subs	r1, r6, r7
   855e2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   855e6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   855ea:	f021 010f 	bic.w	r1, r1, #15
   855ee:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   855f2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   855f6:	db07      	blt.n	85608 <_malloc_trim_r+0x3c>
   855f8:	4620      	mov	r0, r4
   855fa:	2100      	movs	r1, #0
   855fc:	f001 f862 	bl	866c4 <_sbrk_r>
   85600:	68ab      	ldr	r3, [r5, #8]
   85602:	4433      	add	r3, r6
   85604:	4298      	cmp	r0, r3
   85606:	d004      	beq.n	85612 <_malloc_trim_r+0x46>
   85608:	4620      	mov	r0, r4
   8560a:	f000 fe79 	bl	86300 <__malloc_unlock>
   8560e:	2000      	movs	r0, #0
   85610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85612:	4620      	mov	r0, r4
   85614:	4279      	negs	r1, r7
   85616:	f001 f855 	bl	866c4 <_sbrk_r>
   8561a:	3001      	adds	r0, #1
   8561c:	d00d      	beq.n	8563a <_malloc_trim_r+0x6e>
   8561e:	4b10      	ldr	r3, [pc, #64]	; (85660 <_malloc_trim_r+0x94>)
   85620:	68aa      	ldr	r2, [r5, #8]
   85622:	6819      	ldr	r1, [r3, #0]
   85624:	1bf6      	subs	r6, r6, r7
   85626:	f046 0601 	orr.w	r6, r6, #1
   8562a:	4620      	mov	r0, r4
   8562c:	1bc9      	subs	r1, r1, r7
   8562e:	6056      	str	r6, [r2, #4]
   85630:	6019      	str	r1, [r3, #0]
   85632:	f000 fe65 	bl	86300 <__malloc_unlock>
   85636:	2001      	movs	r0, #1
   85638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8563a:	4620      	mov	r0, r4
   8563c:	2100      	movs	r1, #0
   8563e:	f001 f841 	bl	866c4 <_sbrk_r>
   85642:	68ab      	ldr	r3, [r5, #8]
   85644:	1ac2      	subs	r2, r0, r3
   85646:	2a0f      	cmp	r2, #15
   85648:	ddde      	ble.n	85608 <_malloc_trim_r+0x3c>
   8564a:	4d06      	ldr	r5, [pc, #24]	; (85664 <_malloc_trim_r+0x98>)
   8564c:	4904      	ldr	r1, [pc, #16]	; (85660 <_malloc_trim_r+0x94>)
   8564e:	682d      	ldr	r5, [r5, #0]
   85650:	f042 0201 	orr.w	r2, r2, #1
   85654:	1b40      	subs	r0, r0, r5
   85656:	605a      	str	r2, [r3, #4]
   85658:	6008      	str	r0, [r1, #0]
   8565a:	e7d5      	b.n	85608 <_malloc_trim_r+0x3c>
   8565c:	200705c8 	.word	0x200705c8
   85660:	20078c8c 	.word	0x20078c8c
   85664:	200709d4 	.word	0x200709d4

00085668 <_free_r>:
   85668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8566c:	460d      	mov	r5, r1
   8566e:	4606      	mov	r6, r0
   85670:	2900      	cmp	r1, #0
   85672:	d055      	beq.n	85720 <_free_r+0xb8>
   85674:	f000 fe42 	bl	862fc <__malloc_lock>
   85678:	f855 1c04 	ldr.w	r1, [r5, #-4]
   8567c:	f8df c170 	ldr.w	ip, [pc, #368]	; 857f0 <_free_r+0x188>
   85680:	f1a5 0408 	sub.w	r4, r5, #8
   85684:	f021 0301 	bic.w	r3, r1, #1
   85688:	18e2      	adds	r2, r4, r3
   8568a:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8568e:	6857      	ldr	r7, [r2, #4]
   85690:	4290      	cmp	r0, r2
   85692:	f027 0703 	bic.w	r7, r7, #3
   85696:	d068      	beq.n	8576a <_free_r+0x102>
   85698:	f011 0101 	ands.w	r1, r1, #1
   8569c:	6057      	str	r7, [r2, #4]
   8569e:	d032      	beq.n	85706 <_free_r+0x9e>
   856a0:	2100      	movs	r1, #0
   856a2:	19d0      	adds	r0, r2, r7
   856a4:	6840      	ldr	r0, [r0, #4]
   856a6:	07c0      	lsls	r0, r0, #31
   856a8:	d406      	bmi.n	856b8 <_free_r+0x50>
   856aa:	443b      	add	r3, r7
   856ac:	6890      	ldr	r0, [r2, #8]
   856ae:	2900      	cmp	r1, #0
   856b0:	d04d      	beq.n	8574e <_free_r+0xe6>
   856b2:	68d2      	ldr	r2, [r2, #12]
   856b4:	60c2      	str	r2, [r0, #12]
   856b6:	6090      	str	r0, [r2, #8]
   856b8:	f043 0201 	orr.w	r2, r3, #1
   856bc:	6062      	str	r2, [r4, #4]
   856be:	50e3      	str	r3, [r4, r3]
   856c0:	b9e1      	cbnz	r1, 856fc <_free_r+0x94>
   856c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   856c6:	d32d      	bcc.n	85724 <_free_r+0xbc>
   856c8:	0a5a      	lsrs	r2, r3, #9
   856ca:	2a04      	cmp	r2, #4
   856cc:	d869      	bhi.n	857a2 <_free_r+0x13a>
   856ce:	0998      	lsrs	r0, r3, #6
   856d0:	3038      	adds	r0, #56	; 0x38
   856d2:	0041      	lsls	r1, r0, #1
   856d4:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   856d8:	f8dc 2008 	ldr.w	r2, [ip, #8]
   856dc:	4944      	ldr	r1, [pc, #272]	; (857f0 <_free_r+0x188>)
   856de:	4562      	cmp	r2, ip
   856e0:	d065      	beq.n	857ae <_free_r+0x146>
   856e2:	6851      	ldr	r1, [r2, #4]
   856e4:	f021 0103 	bic.w	r1, r1, #3
   856e8:	428b      	cmp	r3, r1
   856ea:	d202      	bcs.n	856f2 <_free_r+0x8a>
   856ec:	6892      	ldr	r2, [r2, #8]
   856ee:	4594      	cmp	ip, r2
   856f0:	d1f7      	bne.n	856e2 <_free_r+0x7a>
   856f2:	68d3      	ldr	r3, [r2, #12]
   856f4:	60e3      	str	r3, [r4, #12]
   856f6:	60a2      	str	r2, [r4, #8]
   856f8:	609c      	str	r4, [r3, #8]
   856fa:	60d4      	str	r4, [r2, #12]
   856fc:	4630      	mov	r0, r6
   856fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85702:	f000 bdfd 	b.w	86300 <__malloc_unlock>
   85706:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8570a:	f10c 0808 	add.w	r8, ip, #8
   8570e:	1b64      	subs	r4, r4, r5
   85710:	68a0      	ldr	r0, [r4, #8]
   85712:	442b      	add	r3, r5
   85714:	4540      	cmp	r0, r8
   85716:	d042      	beq.n	8579e <_free_r+0x136>
   85718:	68e5      	ldr	r5, [r4, #12]
   8571a:	60c5      	str	r5, [r0, #12]
   8571c:	60a8      	str	r0, [r5, #8]
   8571e:	e7c0      	b.n	856a2 <_free_r+0x3a>
   85720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85724:	08db      	lsrs	r3, r3, #3
   85726:	109a      	asrs	r2, r3, #2
   85728:	2001      	movs	r0, #1
   8572a:	4090      	lsls	r0, r2
   8572c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   85730:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   85734:	689a      	ldr	r2, [r3, #8]
   85736:	4301      	orrs	r1, r0
   85738:	60a2      	str	r2, [r4, #8]
   8573a:	60e3      	str	r3, [r4, #12]
   8573c:	f8cc 1004 	str.w	r1, [ip, #4]
   85740:	4630      	mov	r0, r6
   85742:	609c      	str	r4, [r3, #8]
   85744:	60d4      	str	r4, [r2, #12]
   85746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8574a:	f000 bdd9 	b.w	86300 <__malloc_unlock>
   8574e:	4d29      	ldr	r5, [pc, #164]	; (857f4 <_free_r+0x18c>)
   85750:	42a8      	cmp	r0, r5
   85752:	d1ae      	bne.n	856b2 <_free_r+0x4a>
   85754:	f043 0201 	orr.w	r2, r3, #1
   85758:	f8cc 4014 	str.w	r4, [ip, #20]
   8575c:	f8cc 4010 	str.w	r4, [ip, #16]
   85760:	60e0      	str	r0, [r4, #12]
   85762:	60a0      	str	r0, [r4, #8]
   85764:	6062      	str	r2, [r4, #4]
   85766:	50e3      	str	r3, [r4, r3]
   85768:	e7c8      	b.n	856fc <_free_r+0x94>
   8576a:	441f      	add	r7, r3
   8576c:	07cb      	lsls	r3, r1, #31
   8576e:	d407      	bmi.n	85780 <_free_r+0x118>
   85770:	f855 1c08 	ldr.w	r1, [r5, #-8]
   85774:	1a64      	subs	r4, r4, r1
   85776:	68e3      	ldr	r3, [r4, #12]
   85778:	68a2      	ldr	r2, [r4, #8]
   8577a:	440f      	add	r7, r1
   8577c:	60d3      	str	r3, [r2, #12]
   8577e:	609a      	str	r2, [r3, #8]
   85780:	4b1d      	ldr	r3, [pc, #116]	; (857f8 <_free_r+0x190>)
   85782:	f047 0201 	orr.w	r2, r7, #1
   85786:	681b      	ldr	r3, [r3, #0]
   85788:	6062      	str	r2, [r4, #4]
   8578a:	429f      	cmp	r7, r3
   8578c:	f8cc 4008 	str.w	r4, [ip, #8]
   85790:	d3b4      	bcc.n	856fc <_free_r+0x94>
   85792:	4b1a      	ldr	r3, [pc, #104]	; (857fc <_free_r+0x194>)
   85794:	4630      	mov	r0, r6
   85796:	6819      	ldr	r1, [r3, #0]
   85798:	f7ff ff18 	bl	855cc <_malloc_trim_r>
   8579c:	e7ae      	b.n	856fc <_free_r+0x94>
   8579e:	2101      	movs	r1, #1
   857a0:	e77f      	b.n	856a2 <_free_r+0x3a>
   857a2:	2a14      	cmp	r2, #20
   857a4:	d80b      	bhi.n	857be <_free_r+0x156>
   857a6:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   857aa:	0041      	lsls	r1, r0, #1
   857ac:	e792      	b.n	856d4 <_free_r+0x6c>
   857ae:	1080      	asrs	r0, r0, #2
   857b0:	2501      	movs	r5, #1
   857b2:	4085      	lsls	r5, r0
   857b4:	6848      	ldr	r0, [r1, #4]
   857b6:	4613      	mov	r3, r2
   857b8:	4328      	orrs	r0, r5
   857ba:	6048      	str	r0, [r1, #4]
   857bc:	e79a      	b.n	856f4 <_free_r+0x8c>
   857be:	2a54      	cmp	r2, #84	; 0x54
   857c0:	d803      	bhi.n	857ca <_free_r+0x162>
   857c2:	0b18      	lsrs	r0, r3, #12
   857c4:	306e      	adds	r0, #110	; 0x6e
   857c6:	0041      	lsls	r1, r0, #1
   857c8:	e784      	b.n	856d4 <_free_r+0x6c>
   857ca:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   857ce:	d803      	bhi.n	857d8 <_free_r+0x170>
   857d0:	0bd8      	lsrs	r0, r3, #15
   857d2:	3077      	adds	r0, #119	; 0x77
   857d4:	0041      	lsls	r1, r0, #1
   857d6:	e77d      	b.n	856d4 <_free_r+0x6c>
   857d8:	f240 5154 	movw	r1, #1364	; 0x554
   857dc:	428a      	cmp	r2, r1
   857de:	d803      	bhi.n	857e8 <_free_r+0x180>
   857e0:	0c98      	lsrs	r0, r3, #18
   857e2:	307c      	adds	r0, #124	; 0x7c
   857e4:	0041      	lsls	r1, r0, #1
   857e6:	e775      	b.n	856d4 <_free_r+0x6c>
   857e8:	21fc      	movs	r1, #252	; 0xfc
   857ea:	207e      	movs	r0, #126	; 0x7e
   857ec:	e772      	b.n	856d4 <_free_r+0x6c>
   857ee:	bf00      	nop
   857f0:	200705c8 	.word	0x200705c8
   857f4:	200705d0 	.word	0x200705d0
   857f8:	200709d0 	.word	0x200709d0
   857fc:	20078c88 	.word	0x20078c88

00085800 <__sfvwrite_r>:
   85800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85804:	6893      	ldr	r3, [r2, #8]
   85806:	b083      	sub	sp, #12
   85808:	4616      	mov	r6, r2
   8580a:	4681      	mov	r9, r0
   8580c:	460c      	mov	r4, r1
   8580e:	b32b      	cbz	r3, 8585c <__sfvwrite_r+0x5c>
   85810:	898b      	ldrh	r3, [r1, #12]
   85812:	0719      	lsls	r1, r3, #28
   85814:	d526      	bpl.n	85864 <__sfvwrite_r+0x64>
   85816:	6922      	ldr	r2, [r4, #16]
   85818:	b322      	cbz	r2, 85864 <__sfvwrite_r+0x64>
   8581a:	f003 0202 	and.w	r2, r3, #2
   8581e:	b292      	uxth	r2, r2
   85820:	6835      	ldr	r5, [r6, #0]
   85822:	2a00      	cmp	r2, #0
   85824:	d02c      	beq.n	85880 <__sfvwrite_r+0x80>
   85826:	f04f 0a00 	mov.w	sl, #0
   8582a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 85b14 <__sfvwrite_r+0x314>
   8582e:	46d0      	mov	r8, sl
   85830:	45d8      	cmp	r8, fp
   85832:	bf34      	ite	cc
   85834:	4643      	movcc	r3, r8
   85836:	465b      	movcs	r3, fp
   85838:	4652      	mov	r2, sl
   8583a:	4648      	mov	r0, r9
   8583c:	f1b8 0f00 	cmp.w	r8, #0
   85840:	d04f      	beq.n	858e2 <__sfvwrite_r+0xe2>
   85842:	69e1      	ldr	r1, [r4, #28]
   85844:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85846:	47b8      	blx	r7
   85848:	2800      	cmp	r0, #0
   8584a:	dd56      	ble.n	858fa <__sfvwrite_r+0xfa>
   8584c:	68b3      	ldr	r3, [r6, #8]
   8584e:	4482      	add	sl, r0
   85850:	1a1b      	subs	r3, r3, r0
   85852:	ebc0 0808 	rsb	r8, r0, r8
   85856:	60b3      	str	r3, [r6, #8]
   85858:	2b00      	cmp	r3, #0
   8585a:	d1e9      	bne.n	85830 <__sfvwrite_r+0x30>
   8585c:	2000      	movs	r0, #0
   8585e:	b003      	add	sp, #12
   85860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85864:	4648      	mov	r0, r9
   85866:	4621      	mov	r1, r4
   85868:	f7ff fc88 	bl	8517c <__swsetup_r>
   8586c:	2800      	cmp	r0, #0
   8586e:	f040 8148 	bne.w	85b02 <__sfvwrite_r+0x302>
   85872:	89a3      	ldrh	r3, [r4, #12]
   85874:	6835      	ldr	r5, [r6, #0]
   85876:	f003 0202 	and.w	r2, r3, #2
   8587a:	b292      	uxth	r2, r2
   8587c:	2a00      	cmp	r2, #0
   8587e:	d1d2      	bne.n	85826 <__sfvwrite_r+0x26>
   85880:	f013 0a01 	ands.w	sl, r3, #1
   85884:	d142      	bne.n	8590c <__sfvwrite_r+0x10c>
   85886:	46d0      	mov	r8, sl
   85888:	f1b8 0f00 	cmp.w	r8, #0
   8588c:	d023      	beq.n	858d6 <__sfvwrite_r+0xd6>
   8588e:	059a      	lsls	r2, r3, #22
   85890:	68a7      	ldr	r7, [r4, #8]
   85892:	d576      	bpl.n	85982 <__sfvwrite_r+0x182>
   85894:	45b8      	cmp	r8, r7
   85896:	f0c0 80a4 	bcc.w	859e2 <__sfvwrite_r+0x1e2>
   8589a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8589e:	f040 80b2 	bne.w	85a06 <__sfvwrite_r+0x206>
   858a2:	6820      	ldr	r0, [r4, #0]
   858a4:	46bb      	mov	fp, r7
   858a6:	4651      	mov	r1, sl
   858a8:	465a      	mov	r2, fp
   858aa:	f000 fcc1 	bl	86230 <memmove>
   858ae:	68a2      	ldr	r2, [r4, #8]
   858b0:	6821      	ldr	r1, [r4, #0]
   858b2:	1bd2      	subs	r2, r2, r7
   858b4:	eb01 030b 	add.w	r3, r1, fp
   858b8:	60a2      	str	r2, [r4, #8]
   858ba:	6023      	str	r3, [r4, #0]
   858bc:	4642      	mov	r2, r8
   858be:	68b3      	ldr	r3, [r6, #8]
   858c0:	4492      	add	sl, r2
   858c2:	1a9b      	subs	r3, r3, r2
   858c4:	ebc2 0808 	rsb	r8, r2, r8
   858c8:	60b3      	str	r3, [r6, #8]
   858ca:	2b00      	cmp	r3, #0
   858cc:	d0c6      	beq.n	8585c <__sfvwrite_r+0x5c>
   858ce:	89a3      	ldrh	r3, [r4, #12]
   858d0:	f1b8 0f00 	cmp.w	r8, #0
   858d4:	d1db      	bne.n	8588e <__sfvwrite_r+0x8e>
   858d6:	f8d5 a000 	ldr.w	sl, [r5]
   858da:	f8d5 8004 	ldr.w	r8, [r5, #4]
   858de:	3508      	adds	r5, #8
   858e0:	e7d2      	b.n	85888 <__sfvwrite_r+0x88>
   858e2:	f8d5 a000 	ldr.w	sl, [r5]
   858e6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   858ea:	3508      	adds	r5, #8
   858ec:	e7a0      	b.n	85830 <__sfvwrite_r+0x30>
   858ee:	4648      	mov	r0, r9
   858f0:	4621      	mov	r1, r4
   858f2:	f7ff fd59 	bl	853a8 <_fflush_r>
   858f6:	2800      	cmp	r0, #0
   858f8:	d059      	beq.n	859ae <__sfvwrite_r+0x1ae>
   858fa:	89a3      	ldrh	r3, [r4, #12]
   858fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85900:	f04f 30ff 	mov.w	r0, #4294967295
   85904:	81a3      	strh	r3, [r4, #12]
   85906:	b003      	add	sp, #12
   85908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8590c:	4692      	mov	sl, r2
   8590e:	9201      	str	r2, [sp, #4]
   85910:	4693      	mov	fp, r2
   85912:	4690      	mov	r8, r2
   85914:	f1b8 0f00 	cmp.w	r8, #0
   85918:	d02b      	beq.n	85972 <__sfvwrite_r+0x172>
   8591a:	9f01      	ldr	r7, [sp, #4]
   8591c:	2f00      	cmp	r7, #0
   8591e:	d064      	beq.n	859ea <__sfvwrite_r+0x1ea>
   85920:	6820      	ldr	r0, [r4, #0]
   85922:	6921      	ldr	r1, [r4, #16]
   85924:	45c2      	cmp	sl, r8
   85926:	bf34      	ite	cc
   85928:	4653      	movcc	r3, sl
   8592a:	4643      	movcs	r3, r8
   8592c:	4288      	cmp	r0, r1
   8592e:	461f      	mov	r7, r3
   85930:	f8d4 c008 	ldr.w	ip, [r4, #8]
   85934:	6962      	ldr	r2, [r4, #20]
   85936:	d903      	bls.n	85940 <__sfvwrite_r+0x140>
   85938:	4494      	add	ip, r2
   8593a:	4563      	cmp	r3, ip
   8593c:	f300 80ae 	bgt.w	85a9c <__sfvwrite_r+0x29c>
   85940:	4293      	cmp	r3, r2
   85942:	db36      	blt.n	859b2 <__sfvwrite_r+0x1b2>
   85944:	4613      	mov	r3, r2
   85946:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85948:	4648      	mov	r0, r9
   8594a:	69e1      	ldr	r1, [r4, #28]
   8594c:	465a      	mov	r2, fp
   8594e:	47b8      	blx	r7
   85950:	1e07      	subs	r7, r0, #0
   85952:	ddd2      	ble.n	858fa <__sfvwrite_r+0xfa>
   85954:	ebba 0a07 	subs.w	sl, sl, r7
   85958:	d03a      	beq.n	859d0 <__sfvwrite_r+0x1d0>
   8595a:	68b3      	ldr	r3, [r6, #8]
   8595c:	44bb      	add	fp, r7
   8595e:	1bdb      	subs	r3, r3, r7
   85960:	ebc7 0808 	rsb	r8, r7, r8
   85964:	60b3      	str	r3, [r6, #8]
   85966:	2b00      	cmp	r3, #0
   85968:	f43f af78 	beq.w	8585c <__sfvwrite_r+0x5c>
   8596c:	f1b8 0f00 	cmp.w	r8, #0
   85970:	d1d3      	bne.n	8591a <__sfvwrite_r+0x11a>
   85972:	2700      	movs	r7, #0
   85974:	f8d5 b000 	ldr.w	fp, [r5]
   85978:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8597c:	9701      	str	r7, [sp, #4]
   8597e:	3508      	adds	r5, #8
   85980:	e7c8      	b.n	85914 <__sfvwrite_r+0x114>
   85982:	6820      	ldr	r0, [r4, #0]
   85984:	6923      	ldr	r3, [r4, #16]
   85986:	4298      	cmp	r0, r3
   85988:	d802      	bhi.n	85990 <__sfvwrite_r+0x190>
   8598a:	6963      	ldr	r3, [r4, #20]
   8598c:	4598      	cmp	r8, r3
   8598e:	d272      	bcs.n	85a76 <__sfvwrite_r+0x276>
   85990:	45b8      	cmp	r8, r7
   85992:	bf38      	it	cc
   85994:	4647      	movcc	r7, r8
   85996:	463a      	mov	r2, r7
   85998:	4651      	mov	r1, sl
   8599a:	f000 fc49 	bl	86230 <memmove>
   8599e:	68a3      	ldr	r3, [r4, #8]
   859a0:	6822      	ldr	r2, [r4, #0]
   859a2:	1bdb      	subs	r3, r3, r7
   859a4:	443a      	add	r2, r7
   859a6:	60a3      	str	r3, [r4, #8]
   859a8:	6022      	str	r2, [r4, #0]
   859aa:	2b00      	cmp	r3, #0
   859ac:	d09f      	beq.n	858ee <__sfvwrite_r+0xee>
   859ae:	463a      	mov	r2, r7
   859b0:	e785      	b.n	858be <__sfvwrite_r+0xbe>
   859b2:	461a      	mov	r2, r3
   859b4:	4659      	mov	r1, fp
   859b6:	9300      	str	r3, [sp, #0]
   859b8:	f000 fc3a 	bl	86230 <memmove>
   859bc:	9b00      	ldr	r3, [sp, #0]
   859be:	68a1      	ldr	r1, [r4, #8]
   859c0:	6822      	ldr	r2, [r4, #0]
   859c2:	1ac9      	subs	r1, r1, r3
   859c4:	ebba 0a07 	subs.w	sl, sl, r7
   859c8:	4413      	add	r3, r2
   859ca:	60a1      	str	r1, [r4, #8]
   859cc:	6023      	str	r3, [r4, #0]
   859ce:	d1c4      	bne.n	8595a <__sfvwrite_r+0x15a>
   859d0:	4648      	mov	r0, r9
   859d2:	4621      	mov	r1, r4
   859d4:	f7ff fce8 	bl	853a8 <_fflush_r>
   859d8:	2800      	cmp	r0, #0
   859da:	d18e      	bne.n	858fa <__sfvwrite_r+0xfa>
   859dc:	f8cd a004 	str.w	sl, [sp, #4]
   859e0:	e7bb      	b.n	8595a <__sfvwrite_r+0x15a>
   859e2:	6820      	ldr	r0, [r4, #0]
   859e4:	4647      	mov	r7, r8
   859e6:	46c3      	mov	fp, r8
   859e8:	e75d      	b.n	858a6 <__sfvwrite_r+0xa6>
   859ea:	4658      	mov	r0, fp
   859ec:	210a      	movs	r1, #10
   859ee:	4642      	mov	r2, r8
   859f0:	f000 fbd4 	bl	8619c <memchr>
   859f4:	2800      	cmp	r0, #0
   859f6:	d07f      	beq.n	85af8 <__sfvwrite_r+0x2f8>
   859f8:	f100 0a01 	add.w	sl, r0, #1
   859fc:	2701      	movs	r7, #1
   859fe:	ebcb 0a0a 	rsb	sl, fp, sl
   85a02:	9701      	str	r7, [sp, #4]
   85a04:	e78c      	b.n	85920 <__sfvwrite_r+0x120>
   85a06:	6822      	ldr	r2, [r4, #0]
   85a08:	6921      	ldr	r1, [r4, #16]
   85a0a:	6967      	ldr	r7, [r4, #20]
   85a0c:	ebc1 0c02 	rsb	ip, r1, r2
   85a10:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   85a14:	f10c 0201 	add.w	r2, ip, #1
   85a18:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   85a1c:	4442      	add	r2, r8
   85a1e:	107f      	asrs	r7, r7, #1
   85a20:	4297      	cmp	r7, r2
   85a22:	bf34      	ite	cc
   85a24:	4617      	movcc	r7, r2
   85a26:	463a      	movcs	r2, r7
   85a28:	055b      	lsls	r3, r3, #21
   85a2a:	d54f      	bpl.n	85acc <__sfvwrite_r+0x2cc>
   85a2c:	4611      	mov	r1, r2
   85a2e:	4648      	mov	r0, r9
   85a30:	f8cd c000 	str.w	ip, [sp]
   85a34:	f000 f916 	bl	85c64 <_malloc_r>
   85a38:	f8dd c000 	ldr.w	ip, [sp]
   85a3c:	4683      	mov	fp, r0
   85a3e:	2800      	cmp	r0, #0
   85a40:	d062      	beq.n	85b08 <__sfvwrite_r+0x308>
   85a42:	4662      	mov	r2, ip
   85a44:	6921      	ldr	r1, [r4, #16]
   85a46:	f8cd c000 	str.w	ip, [sp]
   85a4a:	f7fe fb49 	bl	840e0 <memcpy>
   85a4e:	89a2      	ldrh	r2, [r4, #12]
   85a50:	f8dd c000 	ldr.w	ip, [sp]
   85a54:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   85a58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85a5c:	81a2      	strh	r2, [r4, #12]
   85a5e:	eb0b 000c 	add.w	r0, fp, ip
   85a62:	ebcc 0207 	rsb	r2, ip, r7
   85a66:	f8c4 b010 	str.w	fp, [r4, #16]
   85a6a:	6167      	str	r7, [r4, #20]
   85a6c:	6020      	str	r0, [r4, #0]
   85a6e:	60a2      	str	r2, [r4, #8]
   85a70:	4647      	mov	r7, r8
   85a72:	46c3      	mov	fp, r8
   85a74:	e717      	b.n	858a6 <__sfvwrite_r+0xa6>
   85a76:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   85a7a:	4590      	cmp	r8, r2
   85a7c:	bf38      	it	cc
   85a7e:	4642      	movcc	r2, r8
   85a80:	fb92 f2f3 	sdiv	r2, r2, r3
   85a84:	fb02 f303 	mul.w	r3, r2, r3
   85a88:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85a8a:	4648      	mov	r0, r9
   85a8c:	69e1      	ldr	r1, [r4, #28]
   85a8e:	4652      	mov	r2, sl
   85a90:	47b8      	blx	r7
   85a92:	2800      	cmp	r0, #0
   85a94:	f77f af31 	ble.w	858fa <__sfvwrite_r+0xfa>
   85a98:	4602      	mov	r2, r0
   85a9a:	e710      	b.n	858be <__sfvwrite_r+0xbe>
   85a9c:	4662      	mov	r2, ip
   85a9e:	4659      	mov	r1, fp
   85aa0:	f8cd c000 	str.w	ip, [sp]
   85aa4:	f000 fbc4 	bl	86230 <memmove>
   85aa8:	f8dd c000 	ldr.w	ip, [sp]
   85aac:	6823      	ldr	r3, [r4, #0]
   85aae:	4648      	mov	r0, r9
   85ab0:	4463      	add	r3, ip
   85ab2:	6023      	str	r3, [r4, #0]
   85ab4:	4621      	mov	r1, r4
   85ab6:	f8cd c000 	str.w	ip, [sp]
   85aba:	f7ff fc75 	bl	853a8 <_fflush_r>
   85abe:	f8dd c000 	ldr.w	ip, [sp]
   85ac2:	2800      	cmp	r0, #0
   85ac4:	f47f af19 	bne.w	858fa <__sfvwrite_r+0xfa>
   85ac8:	4667      	mov	r7, ip
   85aca:	e743      	b.n	85954 <__sfvwrite_r+0x154>
   85acc:	4648      	mov	r0, r9
   85ace:	f8cd c000 	str.w	ip, [sp]
   85ad2:	f000 fc17 	bl	86304 <_realloc_r>
   85ad6:	f8dd c000 	ldr.w	ip, [sp]
   85ada:	4683      	mov	fp, r0
   85adc:	2800      	cmp	r0, #0
   85ade:	d1be      	bne.n	85a5e <__sfvwrite_r+0x25e>
   85ae0:	4648      	mov	r0, r9
   85ae2:	6921      	ldr	r1, [r4, #16]
   85ae4:	f7ff fdc0 	bl	85668 <_free_r>
   85ae8:	89a3      	ldrh	r3, [r4, #12]
   85aea:	220c      	movs	r2, #12
   85aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85af0:	b29b      	uxth	r3, r3
   85af2:	f8c9 2000 	str.w	r2, [r9]
   85af6:	e701      	b.n	858fc <__sfvwrite_r+0xfc>
   85af8:	2701      	movs	r7, #1
   85afa:	f108 0a01 	add.w	sl, r8, #1
   85afe:	9701      	str	r7, [sp, #4]
   85b00:	e70e      	b.n	85920 <__sfvwrite_r+0x120>
   85b02:	f04f 30ff 	mov.w	r0, #4294967295
   85b06:	e6aa      	b.n	8585e <__sfvwrite_r+0x5e>
   85b08:	230c      	movs	r3, #12
   85b0a:	f8c9 3000 	str.w	r3, [r9]
   85b0e:	89a3      	ldrh	r3, [r4, #12]
   85b10:	e6f4      	b.n	858fc <__sfvwrite_r+0xfc>
   85b12:	bf00      	nop
   85b14:	7ffffc00 	.word	0x7ffffc00

00085b18 <_fwalk>:
   85b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85b1c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   85b20:	4688      	mov	r8, r1
   85b22:	d019      	beq.n	85b58 <_fwalk+0x40>
   85b24:	2600      	movs	r6, #0
   85b26:	687d      	ldr	r5, [r7, #4]
   85b28:	68bc      	ldr	r4, [r7, #8]
   85b2a:	3d01      	subs	r5, #1
   85b2c:	d40e      	bmi.n	85b4c <_fwalk+0x34>
   85b2e:	89a3      	ldrh	r3, [r4, #12]
   85b30:	3d01      	subs	r5, #1
   85b32:	2b01      	cmp	r3, #1
   85b34:	d906      	bls.n	85b44 <_fwalk+0x2c>
   85b36:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   85b3a:	4620      	mov	r0, r4
   85b3c:	3301      	adds	r3, #1
   85b3e:	d001      	beq.n	85b44 <_fwalk+0x2c>
   85b40:	47c0      	blx	r8
   85b42:	4306      	orrs	r6, r0
   85b44:	1c6b      	adds	r3, r5, #1
   85b46:	f104 0468 	add.w	r4, r4, #104	; 0x68
   85b4a:	d1f0      	bne.n	85b2e <_fwalk+0x16>
   85b4c:	683f      	ldr	r7, [r7, #0]
   85b4e:	2f00      	cmp	r7, #0
   85b50:	d1e9      	bne.n	85b26 <_fwalk+0xe>
   85b52:	4630      	mov	r0, r6
   85b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85b58:	463e      	mov	r6, r7
   85b5a:	4630      	mov	r0, r6
   85b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085b60 <__locale_charset>:
   85b60:	4800      	ldr	r0, [pc, #0]	; (85b64 <__locale_charset+0x4>)
   85b62:	4770      	bx	lr
   85b64:	200705a4 	.word	0x200705a4

00085b68 <__locale_mb_cur_max>:
   85b68:	4b01      	ldr	r3, [pc, #4]	; (85b70 <__locale_mb_cur_max+0x8>)
   85b6a:	6818      	ldr	r0, [r3, #0]
   85b6c:	4770      	bx	lr
   85b6e:	bf00      	nop
   85b70:	200705c4 	.word	0x200705c4

00085b74 <__smakebuf_r>:
   85b74:	b5f0      	push	{r4, r5, r6, r7, lr}
   85b76:	898b      	ldrh	r3, [r1, #12]
   85b78:	b091      	sub	sp, #68	; 0x44
   85b7a:	b29a      	uxth	r2, r3
   85b7c:	0796      	lsls	r6, r2, #30
   85b7e:	460c      	mov	r4, r1
   85b80:	4605      	mov	r5, r0
   85b82:	d437      	bmi.n	85bf4 <__smakebuf_r+0x80>
   85b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85b88:	2900      	cmp	r1, #0
   85b8a:	db17      	blt.n	85bbc <__smakebuf_r+0x48>
   85b8c:	aa01      	add	r2, sp, #4
   85b8e:	f000 ff39 	bl	86a04 <_fstat_r>
   85b92:	2800      	cmp	r0, #0
   85b94:	db10      	blt.n	85bb8 <__smakebuf_r+0x44>
   85b96:	9b02      	ldr	r3, [sp, #8]
   85b98:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   85b9c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   85ba0:	424f      	negs	r7, r1
   85ba2:	414f      	adcs	r7, r1
   85ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   85ba8:	d02c      	beq.n	85c04 <__smakebuf_r+0x90>
   85baa:	89a3      	ldrh	r3, [r4, #12]
   85bac:	f44f 6680 	mov.w	r6, #1024	; 0x400
   85bb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85bb4:	81a3      	strh	r3, [r4, #12]
   85bb6:	e00b      	b.n	85bd0 <__smakebuf_r+0x5c>
   85bb8:	89a3      	ldrh	r3, [r4, #12]
   85bba:	b29a      	uxth	r2, r3
   85bbc:	f012 0f80 	tst.w	r2, #128	; 0x80
   85bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85bc4:	81a3      	strh	r3, [r4, #12]
   85bc6:	bf14      	ite	ne
   85bc8:	2640      	movne	r6, #64	; 0x40
   85bca:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   85bce:	2700      	movs	r7, #0
   85bd0:	4628      	mov	r0, r5
   85bd2:	4631      	mov	r1, r6
   85bd4:	f000 f846 	bl	85c64 <_malloc_r>
   85bd8:	89a3      	ldrh	r3, [r4, #12]
   85bda:	2800      	cmp	r0, #0
   85bdc:	d029      	beq.n	85c32 <__smakebuf_r+0xbe>
   85bde:	4a1b      	ldr	r2, [pc, #108]	; (85c4c <__smakebuf_r+0xd8>)
   85be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85be4:	63ea      	str	r2, [r5, #60]	; 0x3c
   85be6:	81a3      	strh	r3, [r4, #12]
   85be8:	6020      	str	r0, [r4, #0]
   85bea:	6120      	str	r0, [r4, #16]
   85bec:	6166      	str	r6, [r4, #20]
   85bee:	b9a7      	cbnz	r7, 85c1a <__smakebuf_r+0xa6>
   85bf0:	b011      	add	sp, #68	; 0x44
   85bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85bf4:	f101 0343 	add.w	r3, r1, #67	; 0x43
   85bf8:	2201      	movs	r2, #1
   85bfa:	600b      	str	r3, [r1, #0]
   85bfc:	610b      	str	r3, [r1, #16]
   85bfe:	614a      	str	r2, [r1, #20]
   85c00:	b011      	add	sp, #68	; 0x44
   85c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85c04:	4a12      	ldr	r2, [pc, #72]	; (85c50 <__smakebuf_r+0xdc>)
   85c06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   85c08:	4293      	cmp	r3, r2
   85c0a:	d1ce      	bne.n	85baa <__smakebuf_r+0x36>
   85c0c:	89a3      	ldrh	r3, [r4, #12]
   85c0e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   85c12:	4333      	orrs	r3, r6
   85c14:	81a3      	strh	r3, [r4, #12]
   85c16:	64e6      	str	r6, [r4, #76]	; 0x4c
   85c18:	e7da      	b.n	85bd0 <__smakebuf_r+0x5c>
   85c1a:	4628      	mov	r0, r5
   85c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85c20:	f000 ff04 	bl	86a2c <_isatty_r>
   85c24:	2800      	cmp	r0, #0
   85c26:	d0e3      	beq.n	85bf0 <__smakebuf_r+0x7c>
   85c28:	89a3      	ldrh	r3, [r4, #12]
   85c2a:	f043 0301 	orr.w	r3, r3, #1
   85c2e:	81a3      	strh	r3, [r4, #12]
   85c30:	e7de      	b.n	85bf0 <__smakebuf_r+0x7c>
   85c32:	059a      	lsls	r2, r3, #22
   85c34:	d4dc      	bmi.n	85bf0 <__smakebuf_r+0x7c>
   85c36:	f104 0243 	add.w	r2, r4, #67	; 0x43
   85c3a:	f043 0302 	orr.w	r3, r3, #2
   85c3e:	2101      	movs	r1, #1
   85c40:	81a3      	strh	r3, [r4, #12]
   85c42:	6022      	str	r2, [r4, #0]
   85c44:	6122      	str	r2, [r4, #16]
   85c46:	6161      	str	r1, [r4, #20]
   85c48:	e7d2      	b.n	85bf0 <__smakebuf_r+0x7c>
   85c4a:	bf00      	nop
   85c4c:	000853d5 	.word	0x000853d5
   85c50:	00086745 	.word	0x00086745

00085c54 <malloc>:
   85c54:	4b02      	ldr	r3, [pc, #8]	; (85c60 <malloc+0xc>)
   85c56:	4601      	mov	r1, r0
   85c58:	6818      	ldr	r0, [r3, #0]
   85c5a:	f000 b803 	b.w	85c64 <_malloc_r>
   85c5e:	bf00      	nop
   85c60:	200705a0 	.word	0x200705a0

00085c64 <_malloc_r>:
   85c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85c68:	f101 050b 	add.w	r5, r1, #11
   85c6c:	2d16      	cmp	r5, #22
   85c6e:	b083      	sub	sp, #12
   85c70:	4606      	mov	r6, r0
   85c72:	d927      	bls.n	85cc4 <_malloc_r+0x60>
   85c74:	f035 0507 	bics.w	r5, r5, #7
   85c78:	d427      	bmi.n	85cca <_malloc_r+0x66>
   85c7a:	42a9      	cmp	r1, r5
   85c7c:	d825      	bhi.n	85cca <_malloc_r+0x66>
   85c7e:	4630      	mov	r0, r6
   85c80:	f000 fb3c 	bl	862fc <__malloc_lock>
   85c84:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   85c88:	d226      	bcs.n	85cd8 <_malloc_r+0x74>
   85c8a:	4fc1      	ldr	r7, [pc, #772]	; (85f90 <_malloc_r+0x32c>)
   85c8c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   85c90:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   85c94:	68dc      	ldr	r4, [r3, #12]
   85c96:	429c      	cmp	r4, r3
   85c98:	f000 81d2 	beq.w	86040 <_malloc_r+0x3dc>
   85c9c:	6863      	ldr	r3, [r4, #4]
   85c9e:	68e2      	ldr	r2, [r4, #12]
   85ca0:	f023 0303 	bic.w	r3, r3, #3
   85ca4:	4423      	add	r3, r4
   85ca6:	6858      	ldr	r0, [r3, #4]
   85ca8:	68a1      	ldr	r1, [r4, #8]
   85caa:	f040 0501 	orr.w	r5, r0, #1
   85cae:	60ca      	str	r2, [r1, #12]
   85cb0:	4630      	mov	r0, r6
   85cb2:	6091      	str	r1, [r2, #8]
   85cb4:	605d      	str	r5, [r3, #4]
   85cb6:	f000 fb23 	bl	86300 <__malloc_unlock>
   85cba:	3408      	adds	r4, #8
   85cbc:	4620      	mov	r0, r4
   85cbe:	b003      	add	sp, #12
   85cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85cc4:	2510      	movs	r5, #16
   85cc6:	42a9      	cmp	r1, r5
   85cc8:	d9d9      	bls.n	85c7e <_malloc_r+0x1a>
   85cca:	2400      	movs	r4, #0
   85ccc:	230c      	movs	r3, #12
   85cce:	4620      	mov	r0, r4
   85cd0:	6033      	str	r3, [r6, #0]
   85cd2:	b003      	add	sp, #12
   85cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85cd8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   85cdc:	f000 8089 	beq.w	85df2 <_malloc_r+0x18e>
   85ce0:	f1bc 0f04 	cmp.w	ip, #4
   85ce4:	f200 8160 	bhi.w	85fa8 <_malloc_r+0x344>
   85ce8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   85cec:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   85cf0:	ea4f 014c 	mov.w	r1, ip, lsl #1
   85cf4:	4fa6      	ldr	r7, [pc, #664]	; (85f90 <_malloc_r+0x32c>)
   85cf6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   85cfa:	68cc      	ldr	r4, [r1, #12]
   85cfc:	42a1      	cmp	r1, r4
   85cfe:	d105      	bne.n	85d0c <_malloc_r+0xa8>
   85d00:	e00c      	b.n	85d1c <_malloc_r+0xb8>
   85d02:	2b00      	cmp	r3, #0
   85d04:	da79      	bge.n	85dfa <_malloc_r+0x196>
   85d06:	68e4      	ldr	r4, [r4, #12]
   85d08:	42a1      	cmp	r1, r4
   85d0a:	d007      	beq.n	85d1c <_malloc_r+0xb8>
   85d0c:	6862      	ldr	r2, [r4, #4]
   85d0e:	f022 0203 	bic.w	r2, r2, #3
   85d12:	1b53      	subs	r3, r2, r5
   85d14:	2b0f      	cmp	r3, #15
   85d16:	ddf4      	ble.n	85d02 <_malloc_r+0x9e>
   85d18:	f10c 3cff 	add.w	ip, ip, #4294967295
   85d1c:	f10c 0c01 	add.w	ip, ip, #1
   85d20:	4b9b      	ldr	r3, [pc, #620]	; (85f90 <_malloc_r+0x32c>)
   85d22:	693c      	ldr	r4, [r7, #16]
   85d24:	f103 0e08 	add.w	lr, r3, #8
   85d28:	4574      	cmp	r4, lr
   85d2a:	f000 817e 	beq.w	8602a <_malloc_r+0x3c6>
   85d2e:	6861      	ldr	r1, [r4, #4]
   85d30:	f021 0103 	bic.w	r1, r1, #3
   85d34:	1b4a      	subs	r2, r1, r5
   85d36:	2a0f      	cmp	r2, #15
   85d38:	f300 8164 	bgt.w	86004 <_malloc_r+0x3a0>
   85d3c:	2a00      	cmp	r2, #0
   85d3e:	f8c3 e014 	str.w	lr, [r3, #20]
   85d42:	f8c3 e010 	str.w	lr, [r3, #16]
   85d46:	da69      	bge.n	85e1c <_malloc_r+0x1b8>
   85d48:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   85d4c:	f080 813a 	bcs.w	85fc4 <_malloc_r+0x360>
   85d50:	08c9      	lsrs	r1, r1, #3
   85d52:	108a      	asrs	r2, r1, #2
   85d54:	f04f 0801 	mov.w	r8, #1
   85d58:	fa08 f802 	lsl.w	r8, r8, r2
   85d5c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   85d60:	685a      	ldr	r2, [r3, #4]
   85d62:	6888      	ldr	r0, [r1, #8]
   85d64:	ea48 0202 	orr.w	r2, r8, r2
   85d68:	60a0      	str	r0, [r4, #8]
   85d6a:	60e1      	str	r1, [r4, #12]
   85d6c:	605a      	str	r2, [r3, #4]
   85d6e:	608c      	str	r4, [r1, #8]
   85d70:	60c4      	str	r4, [r0, #12]
   85d72:	ea4f 03ac 	mov.w	r3, ip, asr #2
   85d76:	2001      	movs	r0, #1
   85d78:	4098      	lsls	r0, r3
   85d7a:	4290      	cmp	r0, r2
   85d7c:	d85b      	bhi.n	85e36 <_malloc_r+0x1d2>
   85d7e:	4202      	tst	r2, r0
   85d80:	d106      	bne.n	85d90 <_malloc_r+0x12c>
   85d82:	f02c 0c03 	bic.w	ip, ip, #3
   85d86:	0040      	lsls	r0, r0, #1
   85d88:	4202      	tst	r2, r0
   85d8a:	f10c 0c04 	add.w	ip, ip, #4
   85d8e:	d0fa      	beq.n	85d86 <_malloc_r+0x122>
   85d90:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   85d94:	4644      	mov	r4, r8
   85d96:	46e1      	mov	r9, ip
   85d98:	68e3      	ldr	r3, [r4, #12]
   85d9a:	429c      	cmp	r4, r3
   85d9c:	d107      	bne.n	85dae <_malloc_r+0x14a>
   85d9e:	e146      	b.n	8602e <_malloc_r+0x3ca>
   85da0:	2a00      	cmp	r2, #0
   85da2:	f280 8157 	bge.w	86054 <_malloc_r+0x3f0>
   85da6:	68db      	ldr	r3, [r3, #12]
   85da8:	429c      	cmp	r4, r3
   85daa:	f000 8140 	beq.w	8602e <_malloc_r+0x3ca>
   85dae:	6859      	ldr	r1, [r3, #4]
   85db0:	f021 0103 	bic.w	r1, r1, #3
   85db4:	1b4a      	subs	r2, r1, r5
   85db6:	2a0f      	cmp	r2, #15
   85db8:	ddf2      	ble.n	85da0 <_malloc_r+0x13c>
   85dba:	461c      	mov	r4, r3
   85dbc:	f854 cf08 	ldr.w	ip, [r4, #8]!
   85dc0:	68d9      	ldr	r1, [r3, #12]
   85dc2:	f045 0901 	orr.w	r9, r5, #1
   85dc6:	f042 0801 	orr.w	r8, r2, #1
   85dca:	441d      	add	r5, r3
   85dcc:	f8c3 9004 	str.w	r9, [r3, #4]
   85dd0:	4630      	mov	r0, r6
   85dd2:	f8cc 100c 	str.w	r1, [ip, #12]
   85dd6:	f8c1 c008 	str.w	ip, [r1, #8]
   85dda:	617d      	str	r5, [r7, #20]
   85ddc:	613d      	str	r5, [r7, #16]
   85dde:	f8c5 e00c 	str.w	lr, [r5, #12]
   85de2:	f8c5 e008 	str.w	lr, [r5, #8]
   85de6:	f8c5 8004 	str.w	r8, [r5, #4]
   85dea:	50aa      	str	r2, [r5, r2]
   85dec:	f000 fa88 	bl	86300 <__malloc_unlock>
   85df0:	e764      	b.n	85cbc <_malloc_r+0x58>
   85df2:	217e      	movs	r1, #126	; 0x7e
   85df4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   85df8:	e77c      	b.n	85cf4 <_malloc_r+0x90>
   85dfa:	4422      	add	r2, r4
   85dfc:	6850      	ldr	r0, [r2, #4]
   85dfe:	68e3      	ldr	r3, [r4, #12]
   85e00:	68a1      	ldr	r1, [r4, #8]
   85e02:	f040 0501 	orr.w	r5, r0, #1
   85e06:	60cb      	str	r3, [r1, #12]
   85e08:	4630      	mov	r0, r6
   85e0a:	6099      	str	r1, [r3, #8]
   85e0c:	6055      	str	r5, [r2, #4]
   85e0e:	f000 fa77 	bl	86300 <__malloc_unlock>
   85e12:	3408      	adds	r4, #8
   85e14:	4620      	mov	r0, r4
   85e16:	b003      	add	sp, #12
   85e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e1c:	4421      	add	r1, r4
   85e1e:	684b      	ldr	r3, [r1, #4]
   85e20:	4630      	mov	r0, r6
   85e22:	f043 0301 	orr.w	r3, r3, #1
   85e26:	604b      	str	r3, [r1, #4]
   85e28:	f000 fa6a 	bl	86300 <__malloc_unlock>
   85e2c:	3408      	adds	r4, #8
   85e2e:	4620      	mov	r0, r4
   85e30:	b003      	add	sp, #12
   85e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e36:	68bc      	ldr	r4, [r7, #8]
   85e38:	6863      	ldr	r3, [r4, #4]
   85e3a:	f023 0903 	bic.w	r9, r3, #3
   85e3e:	45a9      	cmp	r9, r5
   85e40:	d304      	bcc.n	85e4c <_malloc_r+0x1e8>
   85e42:	ebc5 0309 	rsb	r3, r5, r9
   85e46:	2b0f      	cmp	r3, #15
   85e48:	f300 8091 	bgt.w	85f6e <_malloc_r+0x30a>
   85e4c:	4b51      	ldr	r3, [pc, #324]	; (85f94 <_malloc_r+0x330>)
   85e4e:	4a52      	ldr	r2, [pc, #328]	; (85f98 <_malloc_r+0x334>)
   85e50:	6819      	ldr	r1, [r3, #0]
   85e52:	6813      	ldr	r3, [r2, #0]
   85e54:	eb05 0a01 	add.w	sl, r5, r1
   85e58:	3301      	adds	r3, #1
   85e5a:	eb04 0b09 	add.w	fp, r4, r9
   85e5e:	f000 8161 	beq.w	86124 <_malloc_r+0x4c0>
   85e62:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   85e66:	f10a 0a0f 	add.w	sl, sl, #15
   85e6a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   85e6e:	f02a 0a0f 	bic.w	sl, sl, #15
   85e72:	4630      	mov	r0, r6
   85e74:	4651      	mov	r1, sl
   85e76:	9201      	str	r2, [sp, #4]
   85e78:	f000 fc24 	bl	866c4 <_sbrk_r>
   85e7c:	f1b0 3fff 	cmp.w	r0, #4294967295
   85e80:	4680      	mov	r8, r0
   85e82:	9a01      	ldr	r2, [sp, #4]
   85e84:	f000 8101 	beq.w	8608a <_malloc_r+0x426>
   85e88:	4583      	cmp	fp, r0
   85e8a:	f200 80fb 	bhi.w	86084 <_malloc_r+0x420>
   85e8e:	f8df c114 	ldr.w	ip, [pc, #276]	; 85fa4 <_malloc_r+0x340>
   85e92:	45c3      	cmp	fp, r8
   85e94:	f8dc 3000 	ldr.w	r3, [ip]
   85e98:	4453      	add	r3, sl
   85e9a:	f8cc 3000 	str.w	r3, [ip]
   85e9e:	f000 814a 	beq.w	86136 <_malloc_r+0x4d2>
   85ea2:	6812      	ldr	r2, [r2, #0]
   85ea4:	493c      	ldr	r1, [pc, #240]	; (85f98 <_malloc_r+0x334>)
   85ea6:	3201      	adds	r2, #1
   85ea8:	bf1b      	ittet	ne
   85eaa:	ebcb 0b08 	rsbne	fp, fp, r8
   85eae:	445b      	addne	r3, fp
   85eb0:	f8c1 8000 	streq.w	r8, [r1]
   85eb4:	f8cc 3000 	strne.w	r3, [ip]
   85eb8:	f018 0307 	ands.w	r3, r8, #7
   85ebc:	f000 8114 	beq.w	860e8 <_malloc_r+0x484>
   85ec0:	f1c3 0208 	rsb	r2, r3, #8
   85ec4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   85ec8:	4490      	add	r8, r2
   85eca:	3308      	adds	r3, #8
   85ecc:	44c2      	add	sl, r8
   85ece:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   85ed2:	ebca 0a03 	rsb	sl, sl, r3
   85ed6:	4651      	mov	r1, sl
   85ed8:	4630      	mov	r0, r6
   85eda:	f8cd c004 	str.w	ip, [sp, #4]
   85ede:	f000 fbf1 	bl	866c4 <_sbrk_r>
   85ee2:	1c43      	adds	r3, r0, #1
   85ee4:	f8dd c004 	ldr.w	ip, [sp, #4]
   85ee8:	f000 8135 	beq.w	86156 <_malloc_r+0x4f2>
   85eec:	ebc8 0200 	rsb	r2, r8, r0
   85ef0:	4452      	add	r2, sl
   85ef2:	f042 0201 	orr.w	r2, r2, #1
   85ef6:	f8dc 3000 	ldr.w	r3, [ip]
   85efa:	42bc      	cmp	r4, r7
   85efc:	4453      	add	r3, sl
   85efe:	f8c7 8008 	str.w	r8, [r7, #8]
   85f02:	f8cc 3000 	str.w	r3, [ip]
   85f06:	f8c8 2004 	str.w	r2, [r8, #4]
   85f0a:	f8df a098 	ldr.w	sl, [pc, #152]	; 85fa4 <_malloc_r+0x340>
   85f0e:	d015      	beq.n	85f3c <_malloc_r+0x2d8>
   85f10:	f1b9 0f0f 	cmp.w	r9, #15
   85f14:	f240 80eb 	bls.w	860ee <_malloc_r+0x48a>
   85f18:	6861      	ldr	r1, [r4, #4]
   85f1a:	f1a9 020c 	sub.w	r2, r9, #12
   85f1e:	f022 0207 	bic.w	r2, r2, #7
   85f22:	f001 0101 	and.w	r1, r1, #1
   85f26:	ea42 0e01 	orr.w	lr, r2, r1
   85f2a:	2005      	movs	r0, #5
   85f2c:	18a1      	adds	r1, r4, r2
   85f2e:	2a0f      	cmp	r2, #15
   85f30:	f8c4 e004 	str.w	lr, [r4, #4]
   85f34:	6048      	str	r0, [r1, #4]
   85f36:	6088      	str	r0, [r1, #8]
   85f38:	f200 8111 	bhi.w	8615e <_malloc_r+0x4fa>
   85f3c:	4a17      	ldr	r2, [pc, #92]	; (85f9c <_malloc_r+0x338>)
   85f3e:	68bc      	ldr	r4, [r7, #8]
   85f40:	6811      	ldr	r1, [r2, #0]
   85f42:	428b      	cmp	r3, r1
   85f44:	bf88      	it	hi
   85f46:	6013      	strhi	r3, [r2, #0]
   85f48:	4a15      	ldr	r2, [pc, #84]	; (85fa0 <_malloc_r+0x33c>)
   85f4a:	6811      	ldr	r1, [r2, #0]
   85f4c:	428b      	cmp	r3, r1
   85f4e:	bf88      	it	hi
   85f50:	6013      	strhi	r3, [r2, #0]
   85f52:	6862      	ldr	r2, [r4, #4]
   85f54:	f022 0203 	bic.w	r2, r2, #3
   85f58:	4295      	cmp	r5, r2
   85f5a:	ebc5 0302 	rsb	r3, r5, r2
   85f5e:	d801      	bhi.n	85f64 <_malloc_r+0x300>
   85f60:	2b0f      	cmp	r3, #15
   85f62:	dc04      	bgt.n	85f6e <_malloc_r+0x30a>
   85f64:	4630      	mov	r0, r6
   85f66:	f000 f9cb 	bl	86300 <__malloc_unlock>
   85f6a:	2400      	movs	r4, #0
   85f6c:	e6a6      	b.n	85cbc <_malloc_r+0x58>
   85f6e:	f045 0201 	orr.w	r2, r5, #1
   85f72:	f043 0301 	orr.w	r3, r3, #1
   85f76:	4425      	add	r5, r4
   85f78:	6062      	str	r2, [r4, #4]
   85f7a:	4630      	mov	r0, r6
   85f7c:	60bd      	str	r5, [r7, #8]
   85f7e:	606b      	str	r3, [r5, #4]
   85f80:	f000 f9be 	bl	86300 <__malloc_unlock>
   85f84:	3408      	adds	r4, #8
   85f86:	4620      	mov	r0, r4
   85f88:	b003      	add	sp, #12
   85f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85f8e:	bf00      	nop
   85f90:	200705c8 	.word	0x200705c8
   85f94:	20078c88 	.word	0x20078c88
   85f98:	200709d4 	.word	0x200709d4
   85f9c:	20078c84 	.word	0x20078c84
   85fa0:	20078c80 	.word	0x20078c80
   85fa4:	20078c8c 	.word	0x20078c8c
   85fa8:	f1bc 0f14 	cmp.w	ip, #20
   85fac:	d961      	bls.n	86072 <_malloc_r+0x40e>
   85fae:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   85fb2:	f200 808f 	bhi.w	860d4 <_malloc_r+0x470>
   85fb6:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   85fba:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   85fbe:	ea4f 014c 	mov.w	r1, ip, lsl #1
   85fc2:	e697      	b.n	85cf4 <_malloc_r+0x90>
   85fc4:	0a4b      	lsrs	r3, r1, #9
   85fc6:	2b04      	cmp	r3, #4
   85fc8:	d958      	bls.n	8607c <_malloc_r+0x418>
   85fca:	2b14      	cmp	r3, #20
   85fcc:	f200 80ad 	bhi.w	8612a <_malloc_r+0x4c6>
   85fd0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   85fd4:	0050      	lsls	r0, r2, #1
   85fd6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   85fda:	6883      	ldr	r3, [r0, #8]
   85fdc:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 86198 <_malloc_r+0x534>
   85fe0:	4283      	cmp	r3, r0
   85fe2:	f000 808a 	beq.w	860fa <_malloc_r+0x496>
   85fe6:	685a      	ldr	r2, [r3, #4]
   85fe8:	f022 0203 	bic.w	r2, r2, #3
   85fec:	4291      	cmp	r1, r2
   85fee:	d202      	bcs.n	85ff6 <_malloc_r+0x392>
   85ff0:	689b      	ldr	r3, [r3, #8]
   85ff2:	4298      	cmp	r0, r3
   85ff4:	d1f7      	bne.n	85fe6 <_malloc_r+0x382>
   85ff6:	68d9      	ldr	r1, [r3, #12]
   85ff8:	687a      	ldr	r2, [r7, #4]
   85ffa:	60e1      	str	r1, [r4, #12]
   85ffc:	60a3      	str	r3, [r4, #8]
   85ffe:	608c      	str	r4, [r1, #8]
   86000:	60dc      	str	r4, [r3, #12]
   86002:	e6b6      	b.n	85d72 <_malloc_r+0x10e>
   86004:	f045 0701 	orr.w	r7, r5, #1
   86008:	f042 0101 	orr.w	r1, r2, #1
   8600c:	4425      	add	r5, r4
   8600e:	6067      	str	r7, [r4, #4]
   86010:	4630      	mov	r0, r6
   86012:	615d      	str	r5, [r3, #20]
   86014:	611d      	str	r5, [r3, #16]
   86016:	f8c5 e00c 	str.w	lr, [r5, #12]
   8601a:	f8c5 e008 	str.w	lr, [r5, #8]
   8601e:	6069      	str	r1, [r5, #4]
   86020:	50aa      	str	r2, [r5, r2]
   86022:	3408      	adds	r4, #8
   86024:	f000 f96c 	bl	86300 <__malloc_unlock>
   86028:	e648      	b.n	85cbc <_malloc_r+0x58>
   8602a:	685a      	ldr	r2, [r3, #4]
   8602c:	e6a1      	b.n	85d72 <_malloc_r+0x10e>
   8602e:	f109 0901 	add.w	r9, r9, #1
   86032:	f019 0f03 	tst.w	r9, #3
   86036:	f104 0408 	add.w	r4, r4, #8
   8603a:	f47f aead 	bne.w	85d98 <_malloc_r+0x134>
   8603e:	e02d      	b.n	8609c <_malloc_r+0x438>
   86040:	f104 0308 	add.w	r3, r4, #8
   86044:	6964      	ldr	r4, [r4, #20]
   86046:	42a3      	cmp	r3, r4
   86048:	bf08      	it	eq
   8604a:	f10c 0c02 	addeq.w	ip, ip, #2
   8604e:	f43f ae67 	beq.w	85d20 <_malloc_r+0xbc>
   86052:	e623      	b.n	85c9c <_malloc_r+0x38>
   86054:	4419      	add	r1, r3
   86056:	6848      	ldr	r0, [r1, #4]
   86058:	461c      	mov	r4, r3
   8605a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8605e:	68db      	ldr	r3, [r3, #12]
   86060:	f040 0501 	orr.w	r5, r0, #1
   86064:	604d      	str	r5, [r1, #4]
   86066:	4630      	mov	r0, r6
   86068:	60d3      	str	r3, [r2, #12]
   8606a:	609a      	str	r2, [r3, #8]
   8606c:	f000 f948 	bl	86300 <__malloc_unlock>
   86070:	e624      	b.n	85cbc <_malloc_r+0x58>
   86072:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   86076:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8607a:	e63b      	b.n	85cf4 <_malloc_r+0x90>
   8607c:	098a      	lsrs	r2, r1, #6
   8607e:	3238      	adds	r2, #56	; 0x38
   86080:	0050      	lsls	r0, r2, #1
   86082:	e7a8      	b.n	85fd6 <_malloc_r+0x372>
   86084:	42bc      	cmp	r4, r7
   86086:	f43f af02 	beq.w	85e8e <_malloc_r+0x22a>
   8608a:	68bc      	ldr	r4, [r7, #8]
   8608c:	6862      	ldr	r2, [r4, #4]
   8608e:	f022 0203 	bic.w	r2, r2, #3
   86092:	e761      	b.n	85f58 <_malloc_r+0x2f4>
   86094:	f8d8 8000 	ldr.w	r8, [r8]
   86098:	4598      	cmp	r8, r3
   8609a:	d17a      	bne.n	86192 <_malloc_r+0x52e>
   8609c:	f01c 0f03 	tst.w	ip, #3
   860a0:	f1a8 0308 	sub.w	r3, r8, #8
   860a4:	f10c 3cff 	add.w	ip, ip, #4294967295
   860a8:	d1f4      	bne.n	86094 <_malloc_r+0x430>
   860aa:	687b      	ldr	r3, [r7, #4]
   860ac:	ea23 0300 	bic.w	r3, r3, r0
   860b0:	607b      	str	r3, [r7, #4]
   860b2:	0040      	lsls	r0, r0, #1
   860b4:	4298      	cmp	r0, r3
   860b6:	f63f aebe 	bhi.w	85e36 <_malloc_r+0x1d2>
   860ba:	2800      	cmp	r0, #0
   860bc:	f43f aebb 	beq.w	85e36 <_malloc_r+0x1d2>
   860c0:	4203      	tst	r3, r0
   860c2:	46cc      	mov	ip, r9
   860c4:	f47f ae64 	bne.w	85d90 <_malloc_r+0x12c>
   860c8:	0040      	lsls	r0, r0, #1
   860ca:	4203      	tst	r3, r0
   860cc:	f10c 0c04 	add.w	ip, ip, #4
   860d0:	d0fa      	beq.n	860c8 <_malloc_r+0x464>
   860d2:	e65d      	b.n	85d90 <_malloc_r+0x12c>
   860d4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   860d8:	d819      	bhi.n	8610e <_malloc_r+0x4aa>
   860da:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   860de:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   860e2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   860e6:	e605      	b.n	85cf4 <_malloc_r+0x90>
   860e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   860ec:	e6ee      	b.n	85ecc <_malloc_r+0x268>
   860ee:	2301      	movs	r3, #1
   860f0:	f8c8 3004 	str.w	r3, [r8, #4]
   860f4:	4644      	mov	r4, r8
   860f6:	2200      	movs	r2, #0
   860f8:	e72e      	b.n	85f58 <_malloc_r+0x2f4>
   860fa:	1092      	asrs	r2, r2, #2
   860fc:	2001      	movs	r0, #1
   860fe:	4090      	lsls	r0, r2
   86100:	f8d8 2004 	ldr.w	r2, [r8, #4]
   86104:	4619      	mov	r1, r3
   86106:	4302      	orrs	r2, r0
   86108:	f8c8 2004 	str.w	r2, [r8, #4]
   8610c:	e775      	b.n	85ffa <_malloc_r+0x396>
   8610e:	f240 5354 	movw	r3, #1364	; 0x554
   86112:	459c      	cmp	ip, r3
   86114:	d81b      	bhi.n	8614e <_malloc_r+0x4ea>
   86116:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   8611a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8611e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86122:	e5e7      	b.n	85cf4 <_malloc_r+0x90>
   86124:	f10a 0a10 	add.w	sl, sl, #16
   86128:	e6a3      	b.n	85e72 <_malloc_r+0x20e>
   8612a:	2b54      	cmp	r3, #84	; 0x54
   8612c:	d81f      	bhi.n	8616e <_malloc_r+0x50a>
   8612e:	0b0a      	lsrs	r2, r1, #12
   86130:	326e      	adds	r2, #110	; 0x6e
   86132:	0050      	lsls	r0, r2, #1
   86134:	e74f      	b.n	85fd6 <_malloc_r+0x372>
   86136:	f3cb 010b 	ubfx	r1, fp, #0, #12
   8613a:	2900      	cmp	r1, #0
   8613c:	f47f aeb1 	bne.w	85ea2 <_malloc_r+0x23e>
   86140:	eb0a 0109 	add.w	r1, sl, r9
   86144:	68ba      	ldr	r2, [r7, #8]
   86146:	f041 0101 	orr.w	r1, r1, #1
   8614a:	6051      	str	r1, [r2, #4]
   8614c:	e6f6      	b.n	85f3c <_malloc_r+0x2d8>
   8614e:	21fc      	movs	r1, #252	; 0xfc
   86150:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   86154:	e5ce      	b.n	85cf4 <_malloc_r+0x90>
   86156:	2201      	movs	r2, #1
   86158:	f04f 0a00 	mov.w	sl, #0
   8615c:	e6cb      	b.n	85ef6 <_malloc_r+0x292>
   8615e:	f104 0108 	add.w	r1, r4, #8
   86162:	4630      	mov	r0, r6
   86164:	f7ff fa80 	bl	85668 <_free_r>
   86168:	f8da 3000 	ldr.w	r3, [sl]
   8616c:	e6e6      	b.n	85f3c <_malloc_r+0x2d8>
   8616e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86172:	d803      	bhi.n	8617c <_malloc_r+0x518>
   86174:	0bca      	lsrs	r2, r1, #15
   86176:	3277      	adds	r2, #119	; 0x77
   86178:	0050      	lsls	r0, r2, #1
   8617a:	e72c      	b.n	85fd6 <_malloc_r+0x372>
   8617c:	f240 5254 	movw	r2, #1364	; 0x554
   86180:	4293      	cmp	r3, r2
   86182:	d803      	bhi.n	8618c <_malloc_r+0x528>
   86184:	0c8a      	lsrs	r2, r1, #18
   86186:	327c      	adds	r2, #124	; 0x7c
   86188:	0050      	lsls	r0, r2, #1
   8618a:	e724      	b.n	85fd6 <_malloc_r+0x372>
   8618c:	20fc      	movs	r0, #252	; 0xfc
   8618e:	227e      	movs	r2, #126	; 0x7e
   86190:	e721      	b.n	85fd6 <_malloc_r+0x372>
   86192:	687b      	ldr	r3, [r7, #4]
   86194:	e78d      	b.n	860b2 <_malloc_r+0x44e>
   86196:	bf00      	nop
   86198:	200705c8 	.word	0x200705c8

0008619c <memchr>:
   8619c:	0783      	lsls	r3, r0, #30
   8619e:	b470      	push	{r4, r5, r6}
   861a0:	b2c9      	uxtb	r1, r1
   861a2:	d040      	beq.n	86226 <memchr+0x8a>
   861a4:	1e54      	subs	r4, r2, #1
   861a6:	b32a      	cbz	r2, 861f4 <memchr+0x58>
   861a8:	7803      	ldrb	r3, [r0, #0]
   861aa:	428b      	cmp	r3, r1
   861ac:	d023      	beq.n	861f6 <memchr+0x5a>
   861ae:	1c43      	adds	r3, r0, #1
   861b0:	e004      	b.n	861bc <memchr+0x20>
   861b2:	b1fc      	cbz	r4, 861f4 <memchr+0x58>
   861b4:	7805      	ldrb	r5, [r0, #0]
   861b6:	4614      	mov	r4, r2
   861b8:	428d      	cmp	r5, r1
   861ba:	d01c      	beq.n	861f6 <memchr+0x5a>
   861bc:	f013 0f03 	tst.w	r3, #3
   861c0:	4618      	mov	r0, r3
   861c2:	f104 32ff 	add.w	r2, r4, #4294967295
   861c6:	f103 0301 	add.w	r3, r3, #1
   861ca:	d1f2      	bne.n	861b2 <memchr+0x16>
   861cc:	2c03      	cmp	r4, #3
   861ce:	d814      	bhi.n	861fa <memchr+0x5e>
   861d0:	1e65      	subs	r5, r4, #1
   861d2:	b354      	cbz	r4, 8622a <memchr+0x8e>
   861d4:	7803      	ldrb	r3, [r0, #0]
   861d6:	428b      	cmp	r3, r1
   861d8:	d00d      	beq.n	861f6 <memchr+0x5a>
   861da:	1c42      	adds	r2, r0, #1
   861dc:	2300      	movs	r3, #0
   861de:	e002      	b.n	861e6 <memchr+0x4a>
   861e0:	7804      	ldrb	r4, [r0, #0]
   861e2:	428c      	cmp	r4, r1
   861e4:	d007      	beq.n	861f6 <memchr+0x5a>
   861e6:	42ab      	cmp	r3, r5
   861e8:	4610      	mov	r0, r2
   861ea:	f103 0301 	add.w	r3, r3, #1
   861ee:	f102 0201 	add.w	r2, r2, #1
   861f2:	d1f5      	bne.n	861e0 <memchr+0x44>
   861f4:	2000      	movs	r0, #0
   861f6:	bc70      	pop	{r4, r5, r6}
   861f8:	4770      	bx	lr
   861fa:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   861fe:	4603      	mov	r3, r0
   86200:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   86204:	681a      	ldr	r2, [r3, #0]
   86206:	4618      	mov	r0, r3
   86208:	4072      	eors	r2, r6
   8620a:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   8620e:	ea25 0202 	bic.w	r2, r5, r2
   86212:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   86216:	f103 0304 	add.w	r3, r3, #4
   8621a:	d1d9      	bne.n	861d0 <memchr+0x34>
   8621c:	3c04      	subs	r4, #4
   8621e:	2c03      	cmp	r4, #3
   86220:	4618      	mov	r0, r3
   86222:	d8ef      	bhi.n	86204 <memchr+0x68>
   86224:	e7d4      	b.n	861d0 <memchr+0x34>
   86226:	4614      	mov	r4, r2
   86228:	e7d0      	b.n	861cc <memchr+0x30>
   8622a:	4620      	mov	r0, r4
   8622c:	e7e3      	b.n	861f6 <memchr+0x5a>
   8622e:	bf00      	nop

00086230 <memmove>:
   86230:	4288      	cmp	r0, r1
   86232:	b4f0      	push	{r4, r5, r6, r7}
   86234:	d910      	bls.n	86258 <memmove+0x28>
   86236:	188c      	adds	r4, r1, r2
   86238:	42a0      	cmp	r0, r4
   8623a:	d20d      	bcs.n	86258 <memmove+0x28>
   8623c:	1885      	adds	r5, r0, r2
   8623e:	1e53      	subs	r3, r2, #1
   86240:	b142      	cbz	r2, 86254 <memmove+0x24>
   86242:	4621      	mov	r1, r4
   86244:	462a      	mov	r2, r5
   86246:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   8624a:	3b01      	subs	r3, #1
   8624c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   86250:	1c5c      	adds	r4, r3, #1
   86252:	d1f8      	bne.n	86246 <memmove+0x16>
   86254:	bcf0      	pop	{r4, r5, r6, r7}
   86256:	4770      	bx	lr
   86258:	2a0f      	cmp	r2, #15
   8625a:	d944      	bls.n	862e6 <memmove+0xb6>
   8625c:	ea40 0301 	orr.w	r3, r0, r1
   86260:	079b      	lsls	r3, r3, #30
   86262:	d144      	bne.n	862ee <memmove+0xbe>
   86264:	f1a2 0710 	sub.w	r7, r2, #16
   86268:	093f      	lsrs	r7, r7, #4
   8626a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8626e:	3610      	adds	r6, #16
   86270:	460c      	mov	r4, r1
   86272:	4603      	mov	r3, r0
   86274:	6825      	ldr	r5, [r4, #0]
   86276:	3310      	adds	r3, #16
   86278:	f843 5c10 	str.w	r5, [r3, #-16]
   8627c:	6865      	ldr	r5, [r4, #4]
   8627e:	3410      	adds	r4, #16
   86280:	f843 5c0c 	str.w	r5, [r3, #-12]
   86284:	f854 5c08 	ldr.w	r5, [r4, #-8]
   86288:	f843 5c08 	str.w	r5, [r3, #-8]
   8628c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   86290:	f843 5c04 	str.w	r5, [r3, #-4]
   86294:	42b3      	cmp	r3, r6
   86296:	d1ed      	bne.n	86274 <memmove+0x44>
   86298:	1c7b      	adds	r3, r7, #1
   8629a:	f002 0c0f 	and.w	ip, r2, #15
   8629e:	011b      	lsls	r3, r3, #4
   862a0:	f1bc 0f03 	cmp.w	ip, #3
   862a4:	4419      	add	r1, r3
   862a6:	4403      	add	r3, r0
   862a8:	d923      	bls.n	862f2 <memmove+0xc2>
   862aa:	460e      	mov	r6, r1
   862ac:	461d      	mov	r5, r3
   862ae:	4664      	mov	r4, ip
   862b0:	f856 7b04 	ldr.w	r7, [r6], #4
   862b4:	3c04      	subs	r4, #4
   862b6:	2c03      	cmp	r4, #3
   862b8:	f845 7b04 	str.w	r7, [r5], #4
   862bc:	d8f8      	bhi.n	862b0 <memmove+0x80>
   862be:	f1ac 0404 	sub.w	r4, ip, #4
   862c2:	f024 0403 	bic.w	r4, r4, #3
   862c6:	3404      	adds	r4, #4
   862c8:	f002 0203 	and.w	r2, r2, #3
   862cc:	4423      	add	r3, r4
   862ce:	4421      	add	r1, r4
   862d0:	2a00      	cmp	r2, #0
   862d2:	d0bf      	beq.n	86254 <memmove+0x24>
   862d4:	441a      	add	r2, r3
   862d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   862da:	f803 4b01 	strb.w	r4, [r3], #1
   862de:	4293      	cmp	r3, r2
   862e0:	d1f9      	bne.n	862d6 <memmove+0xa6>
   862e2:	bcf0      	pop	{r4, r5, r6, r7}
   862e4:	4770      	bx	lr
   862e6:	4603      	mov	r3, r0
   862e8:	2a00      	cmp	r2, #0
   862ea:	d1f3      	bne.n	862d4 <memmove+0xa4>
   862ec:	e7b2      	b.n	86254 <memmove+0x24>
   862ee:	4603      	mov	r3, r0
   862f0:	e7f0      	b.n	862d4 <memmove+0xa4>
   862f2:	4662      	mov	r2, ip
   862f4:	2a00      	cmp	r2, #0
   862f6:	d1ed      	bne.n	862d4 <memmove+0xa4>
   862f8:	e7ac      	b.n	86254 <memmove+0x24>
   862fa:	bf00      	nop

000862fc <__malloc_lock>:
   862fc:	4770      	bx	lr
   862fe:	bf00      	nop

00086300 <__malloc_unlock>:
   86300:	4770      	bx	lr
   86302:	bf00      	nop

00086304 <_realloc_r>:
   86304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86308:	460c      	mov	r4, r1
   8630a:	b083      	sub	sp, #12
   8630c:	4690      	mov	r8, r2
   8630e:	4681      	mov	r9, r0
   86310:	2900      	cmp	r1, #0
   86312:	f000 80ba 	beq.w	8648a <_realloc_r+0x186>
   86316:	f7ff fff1 	bl	862fc <__malloc_lock>
   8631a:	f108 060b 	add.w	r6, r8, #11
   8631e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86322:	2e16      	cmp	r6, #22
   86324:	f023 0503 	bic.w	r5, r3, #3
   86328:	f1a4 0708 	sub.w	r7, r4, #8
   8632c:	d84b      	bhi.n	863c6 <_realloc_r+0xc2>
   8632e:	2110      	movs	r1, #16
   86330:	460e      	mov	r6, r1
   86332:	45b0      	cmp	r8, r6
   86334:	d84c      	bhi.n	863d0 <_realloc_r+0xcc>
   86336:	428d      	cmp	r5, r1
   86338:	da51      	bge.n	863de <_realloc_r+0xda>
   8633a:	f8df b384 	ldr.w	fp, [pc, #900]	; 866c0 <_realloc_r+0x3bc>
   8633e:	1978      	adds	r0, r7, r5
   86340:	f8db e008 	ldr.w	lr, [fp, #8]
   86344:	4586      	cmp	lr, r0
   86346:	f000 80a6 	beq.w	86496 <_realloc_r+0x192>
   8634a:	6842      	ldr	r2, [r0, #4]
   8634c:	f022 0c01 	bic.w	ip, r2, #1
   86350:	4484      	add	ip, r0
   86352:	f8dc c004 	ldr.w	ip, [ip, #4]
   86356:	f01c 0f01 	tst.w	ip, #1
   8635a:	d054      	beq.n	86406 <_realloc_r+0x102>
   8635c:	2200      	movs	r2, #0
   8635e:	4610      	mov	r0, r2
   86360:	07db      	lsls	r3, r3, #31
   86362:	d46f      	bmi.n	86444 <_realloc_r+0x140>
   86364:	f854 3c08 	ldr.w	r3, [r4, #-8]
   86368:	ebc3 0a07 	rsb	sl, r3, r7
   8636c:	f8da 3004 	ldr.w	r3, [sl, #4]
   86370:	f023 0303 	bic.w	r3, r3, #3
   86374:	442b      	add	r3, r5
   86376:	2800      	cmp	r0, #0
   86378:	d062      	beq.n	86440 <_realloc_r+0x13c>
   8637a:	4570      	cmp	r0, lr
   8637c:	f000 80e9 	beq.w	86552 <_realloc_r+0x24e>
   86380:	eb02 0e03 	add.w	lr, r2, r3
   86384:	458e      	cmp	lr, r1
   86386:	db5b      	blt.n	86440 <_realloc_r+0x13c>
   86388:	68c3      	ldr	r3, [r0, #12]
   8638a:	6882      	ldr	r2, [r0, #8]
   8638c:	46d0      	mov	r8, sl
   8638e:	60d3      	str	r3, [r2, #12]
   86390:	609a      	str	r2, [r3, #8]
   86392:	f858 1f08 	ldr.w	r1, [r8, #8]!
   86396:	f8da 300c 	ldr.w	r3, [sl, #12]
   8639a:	1f2a      	subs	r2, r5, #4
   8639c:	2a24      	cmp	r2, #36	; 0x24
   8639e:	60cb      	str	r3, [r1, #12]
   863a0:	6099      	str	r1, [r3, #8]
   863a2:	f200 8123 	bhi.w	865ec <_realloc_r+0x2e8>
   863a6:	2a13      	cmp	r2, #19
   863a8:	f240 80b0 	bls.w	8650c <_realloc_r+0x208>
   863ac:	6823      	ldr	r3, [r4, #0]
   863ae:	2a1b      	cmp	r2, #27
   863b0:	f8ca 3008 	str.w	r3, [sl, #8]
   863b4:	6863      	ldr	r3, [r4, #4]
   863b6:	f8ca 300c 	str.w	r3, [sl, #12]
   863ba:	f200 812b 	bhi.w	86614 <_realloc_r+0x310>
   863be:	3408      	adds	r4, #8
   863c0:	f10a 0310 	add.w	r3, sl, #16
   863c4:	e0a3      	b.n	8650e <_realloc_r+0x20a>
   863c6:	f026 0607 	bic.w	r6, r6, #7
   863ca:	2e00      	cmp	r6, #0
   863cc:	4631      	mov	r1, r6
   863ce:	dab0      	bge.n	86332 <_realloc_r+0x2e>
   863d0:	230c      	movs	r3, #12
   863d2:	2000      	movs	r0, #0
   863d4:	f8c9 3000 	str.w	r3, [r9]
   863d8:	b003      	add	sp, #12
   863da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   863de:	46a0      	mov	r8, r4
   863e0:	1baa      	subs	r2, r5, r6
   863e2:	2a0f      	cmp	r2, #15
   863e4:	f003 0301 	and.w	r3, r3, #1
   863e8:	d81a      	bhi.n	86420 <_realloc_r+0x11c>
   863ea:	432b      	orrs	r3, r5
   863ec:	607b      	str	r3, [r7, #4]
   863ee:	443d      	add	r5, r7
   863f0:	686b      	ldr	r3, [r5, #4]
   863f2:	f043 0301 	orr.w	r3, r3, #1
   863f6:	606b      	str	r3, [r5, #4]
   863f8:	4648      	mov	r0, r9
   863fa:	f7ff ff81 	bl	86300 <__malloc_unlock>
   863fe:	4640      	mov	r0, r8
   86400:	b003      	add	sp, #12
   86402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86406:	f022 0203 	bic.w	r2, r2, #3
   8640a:	eb02 0c05 	add.w	ip, r2, r5
   8640e:	458c      	cmp	ip, r1
   86410:	dba6      	blt.n	86360 <_realloc_r+0x5c>
   86412:	68c2      	ldr	r2, [r0, #12]
   86414:	6881      	ldr	r1, [r0, #8]
   86416:	46a0      	mov	r8, r4
   86418:	60ca      	str	r2, [r1, #12]
   8641a:	4665      	mov	r5, ip
   8641c:	6091      	str	r1, [r2, #8]
   8641e:	e7df      	b.n	863e0 <_realloc_r+0xdc>
   86420:	19b9      	adds	r1, r7, r6
   86422:	4333      	orrs	r3, r6
   86424:	f042 0001 	orr.w	r0, r2, #1
   86428:	607b      	str	r3, [r7, #4]
   8642a:	440a      	add	r2, r1
   8642c:	6048      	str	r0, [r1, #4]
   8642e:	6853      	ldr	r3, [r2, #4]
   86430:	3108      	adds	r1, #8
   86432:	f043 0301 	orr.w	r3, r3, #1
   86436:	6053      	str	r3, [r2, #4]
   86438:	4648      	mov	r0, r9
   8643a:	f7ff f915 	bl	85668 <_free_r>
   8643e:	e7db      	b.n	863f8 <_realloc_r+0xf4>
   86440:	428b      	cmp	r3, r1
   86442:	da33      	bge.n	864ac <_realloc_r+0x1a8>
   86444:	4641      	mov	r1, r8
   86446:	4648      	mov	r0, r9
   86448:	f7ff fc0c 	bl	85c64 <_malloc_r>
   8644c:	4680      	mov	r8, r0
   8644e:	2800      	cmp	r0, #0
   86450:	d0d2      	beq.n	863f8 <_realloc_r+0xf4>
   86452:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86456:	f1a0 0108 	sub.w	r1, r0, #8
   8645a:	f023 0201 	bic.w	r2, r3, #1
   8645e:	443a      	add	r2, r7
   86460:	4291      	cmp	r1, r2
   86462:	f000 80bc 	beq.w	865de <_realloc_r+0x2da>
   86466:	1f2a      	subs	r2, r5, #4
   86468:	2a24      	cmp	r2, #36	; 0x24
   8646a:	d86e      	bhi.n	8654a <_realloc_r+0x246>
   8646c:	2a13      	cmp	r2, #19
   8646e:	d842      	bhi.n	864f6 <_realloc_r+0x1f2>
   86470:	4603      	mov	r3, r0
   86472:	4622      	mov	r2, r4
   86474:	6811      	ldr	r1, [r2, #0]
   86476:	6019      	str	r1, [r3, #0]
   86478:	6851      	ldr	r1, [r2, #4]
   8647a:	6059      	str	r1, [r3, #4]
   8647c:	6892      	ldr	r2, [r2, #8]
   8647e:	609a      	str	r2, [r3, #8]
   86480:	4621      	mov	r1, r4
   86482:	4648      	mov	r0, r9
   86484:	f7ff f8f0 	bl	85668 <_free_r>
   86488:	e7b6      	b.n	863f8 <_realloc_r+0xf4>
   8648a:	4611      	mov	r1, r2
   8648c:	b003      	add	sp, #12
   8648e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86492:	f7ff bbe7 	b.w	85c64 <_malloc_r>
   86496:	f8de 2004 	ldr.w	r2, [lr, #4]
   8649a:	f106 0c10 	add.w	ip, r6, #16
   8649e:	f022 0203 	bic.w	r2, r2, #3
   864a2:	1950      	adds	r0, r2, r5
   864a4:	4560      	cmp	r0, ip
   864a6:	da3d      	bge.n	86524 <_realloc_r+0x220>
   864a8:	4670      	mov	r0, lr
   864aa:	e759      	b.n	86360 <_realloc_r+0x5c>
   864ac:	46d0      	mov	r8, sl
   864ae:	f858 0f08 	ldr.w	r0, [r8, #8]!
   864b2:	f8da 100c 	ldr.w	r1, [sl, #12]
   864b6:	1f2a      	subs	r2, r5, #4
   864b8:	2a24      	cmp	r2, #36	; 0x24
   864ba:	60c1      	str	r1, [r0, #12]
   864bc:	6088      	str	r0, [r1, #8]
   864be:	f200 80a0 	bhi.w	86602 <_realloc_r+0x2fe>
   864c2:	2a13      	cmp	r2, #19
   864c4:	f240 809b 	bls.w	865fe <_realloc_r+0x2fa>
   864c8:	6821      	ldr	r1, [r4, #0]
   864ca:	2a1b      	cmp	r2, #27
   864cc:	f8ca 1008 	str.w	r1, [sl, #8]
   864d0:	6861      	ldr	r1, [r4, #4]
   864d2:	f8ca 100c 	str.w	r1, [sl, #12]
   864d6:	f200 80b2 	bhi.w	8663e <_realloc_r+0x33a>
   864da:	3408      	adds	r4, #8
   864dc:	f10a 0210 	add.w	r2, sl, #16
   864e0:	6821      	ldr	r1, [r4, #0]
   864e2:	461d      	mov	r5, r3
   864e4:	6011      	str	r1, [r2, #0]
   864e6:	6861      	ldr	r1, [r4, #4]
   864e8:	4657      	mov	r7, sl
   864ea:	6051      	str	r1, [r2, #4]
   864ec:	68a3      	ldr	r3, [r4, #8]
   864ee:	6093      	str	r3, [r2, #8]
   864f0:	f8da 3004 	ldr.w	r3, [sl, #4]
   864f4:	e774      	b.n	863e0 <_realloc_r+0xdc>
   864f6:	6823      	ldr	r3, [r4, #0]
   864f8:	2a1b      	cmp	r2, #27
   864fa:	6003      	str	r3, [r0, #0]
   864fc:	6863      	ldr	r3, [r4, #4]
   864fe:	6043      	str	r3, [r0, #4]
   86500:	d862      	bhi.n	865c8 <_realloc_r+0x2c4>
   86502:	f100 0308 	add.w	r3, r0, #8
   86506:	f104 0208 	add.w	r2, r4, #8
   8650a:	e7b3      	b.n	86474 <_realloc_r+0x170>
   8650c:	4643      	mov	r3, r8
   8650e:	6822      	ldr	r2, [r4, #0]
   86510:	4675      	mov	r5, lr
   86512:	601a      	str	r2, [r3, #0]
   86514:	6862      	ldr	r2, [r4, #4]
   86516:	4657      	mov	r7, sl
   86518:	605a      	str	r2, [r3, #4]
   8651a:	68a2      	ldr	r2, [r4, #8]
   8651c:	609a      	str	r2, [r3, #8]
   8651e:	f8da 3004 	ldr.w	r3, [sl, #4]
   86522:	e75d      	b.n	863e0 <_realloc_r+0xdc>
   86524:	1b83      	subs	r3, r0, r6
   86526:	4437      	add	r7, r6
   86528:	f043 0301 	orr.w	r3, r3, #1
   8652c:	f8cb 7008 	str.w	r7, [fp, #8]
   86530:	607b      	str	r3, [r7, #4]
   86532:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86536:	4648      	mov	r0, r9
   86538:	f003 0301 	and.w	r3, r3, #1
   8653c:	431e      	orrs	r6, r3
   8653e:	f844 6c04 	str.w	r6, [r4, #-4]
   86542:	f7ff fedd 	bl	86300 <__malloc_unlock>
   86546:	4620      	mov	r0, r4
   86548:	e75a      	b.n	86400 <_realloc_r+0xfc>
   8654a:	4621      	mov	r1, r4
   8654c:	f7ff fe70 	bl	86230 <memmove>
   86550:	e796      	b.n	86480 <_realloc_r+0x17c>
   86552:	eb02 0c03 	add.w	ip, r2, r3
   86556:	f106 0210 	add.w	r2, r6, #16
   8655a:	4594      	cmp	ip, r2
   8655c:	f6ff af70 	blt.w	86440 <_realloc_r+0x13c>
   86560:	4657      	mov	r7, sl
   86562:	f857 1f08 	ldr.w	r1, [r7, #8]!
   86566:	f8da 300c 	ldr.w	r3, [sl, #12]
   8656a:	1f2a      	subs	r2, r5, #4
   8656c:	2a24      	cmp	r2, #36	; 0x24
   8656e:	60cb      	str	r3, [r1, #12]
   86570:	6099      	str	r1, [r3, #8]
   86572:	f200 8086 	bhi.w	86682 <_realloc_r+0x37e>
   86576:	2a13      	cmp	r2, #19
   86578:	d977      	bls.n	8666a <_realloc_r+0x366>
   8657a:	6823      	ldr	r3, [r4, #0]
   8657c:	2a1b      	cmp	r2, #27
   8657e:	f8ca 3008 	str.w	r3, [sl, #8]
   86582:	6863      	ldr	r3, [r4, #4]
   86584:	f8ca 300c 	str.w	r3, [sl, #12]
   86588:	f200 8084 	bhi.w	86694 <_realloc_r+0x390>
   8658c:	3408      	adds	r4, #8
   8658e:	f10a 0310 	add.w	r3, sl, #16
   86592:	6822      	ldr	r2, [r4, #0]
   86594:	601a      	str	r2, [r3, #0]
   86596:	6862      	ldr	r2, [r4, #4]
   86598:	605a      	str	r2, [r3, #4]
   8659a:	68a2      	ldr	r2, [r4, #8]
   8659c:	609a      	str	r2, [r3, #8]
   8659e:	ebc6 020c 	rsb	r2, r6, ip
   865a2:	eb0a 0306 	add.w	r3, sl, r6
   865a6:	f042 0201 	orr.w	r2, r2, #1
   865aa:	f8cb 3008 	str.w	r3, [fp, #8]
   865ae:	605a      	str	r2, [r3, #4]
   865b0:	f8da 3004 	ldr.w	r3, [sl, #4]
   865b4:	4648      	mov	r0, r9
   865b6:	f003 0301 	and.w	r3, r3, #1
   865ba:	431e      	orrs	r6, r3
   865bc:	f8ca 6004 	str.w	r6, [sl, #4]
   865c0:	f7ff fe9e 	bl	86300 <__malloc_unlock>
   865c4:	4638      	mov	r0, r7
   865c6:	e71b      	b.n	86400 <_realloc_r+0xfc>
   865c8:	68a3      	ldr	r3, [r4, #8]
   865ca:	2a24      	cmp	r2, #36	; 0x24
   865cc:	6083      	str	r3, [r0, #8]
   865ce:	68e3      	ldr	r3, [r4, #12]
   865d0:	60c3      	str	r3, [r0, #12]
   865d2:	d02b      	beq.n	8662c <_realloc_r+0x328>
   865d4:	f100 0310 	add.w	r3, r0, #16
   865d8:	f104 0210 	add.w	r2, r4, #16
   865dc:	e74a      	b.n	86474 <_realloc_r+0x170>
   865de:	f850 2c04 	ldr.w	r2, [r0, #-4]
   865e2:	46a0      	mov	r8, r4
   865e4:	f022 0203 	bic.w	r2, r2, #3
   865e8:	4415      	add	r5, r2
   865ea:	e6f9      	b.n	863e0 <_realloc_r+0xdc>
   865ec:	4621      	mov	r1, r4
   865ee:	4640      	mov	r0, r8
   865f0:	4675      	mov	r5, lr
   865f2:	4657      	mov	r7, sl
   865f4:	f7ff fe1c 	bl	86230 <memmove>
   865f8:	f8da 3004 	ldr.w	r3, [sl, #4]
   865fc:	e6f0      	b.n	863e0 <_realloc_r+0xdc>
   865fe:	4642      	mov	r2, r8
   86600:	e76e      	b.n	864e0 <_realloc_r+0x1dc>
   86602:	4621      	mov	r1, r4
   86604:	4640      	mov	r0, r8
   86606:	461d      	mov	r5, r3
   86608:	4657      	mov	r7, sl
   8660a:	f7ff fe11 	bl	86230 <memmove>
   8660e:	f8da 3004 	ldr.w	r3, [sl, #4]
   86612:	e6e5      	b.n	863e0 <_realloc_r+0xdc>
   86614:	68a3      	ldr	r3, [r4, #8]
   86616:	2a24      	cmp	r2, #36	; 0x24
   86618:	f8ca 3010 	str.w	r3, [sl, #16]
   8661c:	68e3      	ldr	r3, [r4, #12]
   8661e:	f8ca 3014 	str.w	r3, [sl, #20]
   86622:	d018      	beq.n	86656 <_realloc_r+0x352>
   86624:	3410      	adds	r4, #16
   86626:	f10a 0318 	add.w	r3, sl, #24
   8662a:	e770      	b.n	8650e <_realloc_r+0x20a>
   8662c:	6922      	ldr	r2, [r4, #16]
   8662e:	f100 0318 	add.w	r3, r0, #24
   86632:	6102      	str	r2, [r0, #16]
   86634:	6961      	ldr	r1, [r4, #20]
   86636:	f104 0218 	add.w	r2, r4, #24
   8663a:	6141      	str	r1, [r0, #20]
   8663c:	e71a      	b.n	86474 <_realloc_r+0x170>
   8663e:	68a1      	ldr	r1, [r4, #8]
   86640:	2a24      	cmp	r2, #36	; 0x24
   86642:	f8ca 1010 	str.w	r1, [sl, #16]
   86646:	68e1      	ldr	r1, [r4, #12]
   86648:	f8ca 1014 	str.w	r1, [sl, #20]
   8664c:	d00f      	beq.n	8666e <_realloc_r+0x36a>
   8664e:	3410      	adds	r4, #16
   86650:	f10a 0218 	add.w	r2, sl, #24
   86654:	e744      	b.n	864e0 <_realloc_r+0x1dc>
   86656:	6922      	ldr	r2, [r4, #16]
   86658:	f10a 0320 	add.w	r3, sl, #32
   8665c:	f8ca 2018 	str.w	r2, [sl, #24]
   86660:	6962      	ldr	r2, [r4, #20]
   86662:	3418      	adds	r4, #24
   86664:	f8ca 201c 	str.w	r2, [sl, #28]
   86668:	e751      	b.n	8650e <_realloc_r+0x20a>
   8666a:	463b      	mov	r3, r7
   8666c:	e791      	b.n	86592 <_realloc_r+0x28e>
   8666e:	6921      	ldr	r1, [r4, #16]
   86670:	f10a 0220 	add.w	r2, sl, #32
   86674:	f8ca 1018 	str.w	r1, [sl, #24]
   86678:	6961      	ldr	r1, [r4, #20]
   8667a:	3418      	adds	r4, #24
   8667c:	f8ca 101c 	str.w	r1, [sl, #28]
   86680:	e72e      	b.n	864e0 <_realloc_r+0x1dc>
   86682:	4621      	mov	r1, r4
   86684:	4638      	mov	r0, r7
   86686:	f8cd c004 	str.w	ip, [sp, #4]
   8668a:	f7ff fdd1 	bl	86230 <memmove>
   8668e:	f8dd c004 	ldr.w	ip, [sp, #4]
   86692:	e784      	b.n	8659e <_realloc_r+0x29a>
   86694:	68a3      	ldr	r3, [r4, #8]
   86696:	2a24      	cmp	r2, #36	; 0x24
   86698:	f8ca 3010 	str.w	r3, [sl, #16]
   8669c:	68e3      	ldr	r3, [r4, #12]
   8669e:	f8ca 3014 	str.w	r3, [sl, #20]
   866a2:	d003      	beq.n	866ac <_realloc_r+0x3a8>
   866a4:	3410      	adds	r4, #16
   866a6:	f10a 0318 	add.w	r3, sl, #24
   866aa:	e772      	b.n	86592 <_realloc_r+0x28e>
   866ac:	6922      	ldr	r2, [r4, #16]
   866ae:	f10a 0320 	add.w	r3, sl, #32
   866b2:	f8ca 2018 	str.w	r2, [sl, #24]
   866b6:	6962      	ldr	r2, [r4, #20]
   866b8:	3418      	adds	r4, #24
   866ba:	f8ca 201c 	str.w	r2, [sl, #28]
   866be:	e768      	b.n	86592 <_realloc_r+0x28e>
   866c0:	200705c8 	.word	0x200705c8

000866c4 <_sbrk_r>:
   866c4:	b538      	push	{r3, r4, r5, lr}
   866c6:	4c07      	ldr	r4, [pc, #28]	; (866e4 <_sbrk_r+0x20>)
   866c8:	2300      	movs	r3, #0
   866ca:	4605      	mov	r5, r0
   866cc:	4608      	mov	r0, r1
   866ce:	6023      	str	r3, [r4, #0]
   866d0:	f7fc fcc6 	bl	83060 <_sbrk>
   866d4:	1c43      	adds	r3, r0, #1
   866d6:	d000      	beq.n	866da <_sbrk_r+0x16>
   866d8:	bd38      	pop	{r3, r4, r5, pc}
   866da:	6823      	ldr	r3, [r4, #0]
   866dc:	2b00      	cmp	r3, #0
   866de:	d0fb      	beq.n	866d8 <_sbrk_r+0x14>
   866e0:	602b      	str	r3, [r5, #0]
   866e2:	bd38      	pop	{r3, r4, r5, pc}
   866e4:	20078d98 	.word	0x20078d98

000866e8 <__sread>:
   866e8:	b510      	push	{r4, lr}
   866ea:	460c      	mov	r4, r1
   866ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   866f0:	f000 f9c2 	bl	86a78 <_read_r>
   866f4:	2800      	cmp	r0, #0
   866f6:	db03      	blt.n	86700 <__sread+0x18>
   866f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   866fa:	4403      	add	r3, r0
   866fc:	6523      	str	r3, [r4, #80]	; 0x50
   866fe:	bd10      	pop	{r4, pc}
   86700:	89a3      	ldrh	r3, [r4, #12]
   86702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86706:	81a3      	strh	r3, [r4, #12]
   86708:	bd10      	pop	{r4, pc}
   8670a:	bf00      	nop

0008670c <__swrite>:
   8670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86710:	460c      	mov	r4, r1
   86712:	8989      	ldrh	r1, [r1, #12]
   86714:	461d      	mov	r5, r3
   86716:	05cb      	lsls	r3, r1, #23
   86718:	4616      	mov	r6, r2
   8671a:	4607      	mov	r7, r0
   8671c:	d506      	bpl.n	8672c <__swrite+0x20>
   8671e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86722:	2200      	movs	r2, #0
   86724:	2302      	movs	r3, #2
   86726:	f000 f993 	bl	86a50 <_lseek_r>
   8672a:	89a1      	ldrh	r1, [r4, #12]
   8672c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86730:	81a1      	strh	r1, [r4, #12]
   86732:	4638      	mov	r0, r7
   86734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86738:	4632      	mov	r2, r6
   8673a:	462b      	mov	r3, r5
   8673c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86740:	f000 b89e 	b.w	86880 <_write_r>

00086744 <__sseek>:
   86744:	b510      	push	{r4, lr}
   86746:	460c      	mov	r4, r1
   86748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8674c:	f000 f980 	bl	86a50 <_lseek_r>
   86750:	89a3      	ldrh	r3, [r4, #12]
   86752:	1c42      	adds	r2, r0, #1
   86754:	bf0e      	itee	eq
   86756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8675a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8675e:	6520      	strne	r0, [r4, #80]	; 0x50
   86760:	81a3      	strh	r3, [r4, #12]
   86762:	bd10      	pop	{r4, pc}

00086764 <__sclose>:
   86764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86768:	f000 b8f2 	b.w	86950 <_close_r>

0008676c <__swbuf_r>:
   8676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8676e:	460d      	mov	r5, r1
   86770:	4614      	mov	r4, r2
   86772:	4607      	mov	r7, r0
   86774:	b110      	cbz	r0, 8677c <__swbuf_r+0x10>
   86776:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86778:	2b00      	cmp	r3, #0
   8677a:	d048      	beq.n	8680e <__swbuf_r+0xa2>
   8677c:	89a2      	ldrh	r2, [r4, #12]
   8677e:	69a0      	ldr	r0, [r4, #24]
   86780:	b293      	uxth	r3, r2
   86782:	60a0      	str	r0, [r4, #8]
   86784:	0718      	lsls	r0, r3, #28
   86786:	d538      	bpl.n	867fa <__swbuf_r+0x8e>
   86788:	6926      	ldr	r6, [r4, #16]
   8678a:	2e00      	cmp	r6, #0
   8678c:	d035      	beq.n	867fa <__swbuf_r+0x8e>
   8678e:	0499      	lsls	r1, r3, #18
   86790:	b2ed      	uxtb	r5, r5
   86792:	d515      	bpl.n	867c0 <__swbuf_r+0x54>
   86794:	6823      	ldr	r3, [r4, #0]
   86796:	6962      	ldr	r2, [r4, #20]
   86798:	1b9e      	subs	r6, r3, r6
   8679a:	4296      	cmp	r6, r2
   8679c:	da1c      	bge.n	867d8 <__swbuf_r+0x6c>
   8679e:	3601      	adds	r6, #1
   867a0:	68a2      	ldr	r2, [r4, #8]
   867a2:	1c59      	adds	r1, r3, #1
   867a4:	3a01      	subs	r2, #1
   867a6:	60a2      	str	r2, [r4, #8]
   867a8:	6021      	str	r1, [r4, #0]
   867aa:	701d      	strb	r5, [r3, #0]
   867ac:	6963      	ldr	r3, [r4, #20]
   867ae:	42b3      	cmp	r3, r6
   867b0:	d01a      	beq.n	867e8 <__swbuf_r+0x7c>
   867b2:	89a3      	ldrh	r3, [r4, #12]
   867b4:	07db      	lsls	r3, r3, #31
   867b6:	d501      	bpl.n	867bc <__swbuf_r+0x50>
   867b8:	2d0a      	cmp	r5, #10
   867ba:	d015      	beq.n	867e8 <__swbuf_r+0x7c>
   867bc:	4628      	mov	r0, r5
   867be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   867c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   867c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   867c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   867ca:	6663      	str	r3, [r4, #100]	; 0x64
   867cc:	6823      	ldr	r3, [r4, #0]
   867ce:	81a2      	strh	r2, [r4, #12]
   867d0:	6962      	ldr	r2, [r4, #20]
   867d2:	1b9e      	subs	r6, r3, r6
   867d4:	4296      	cmp	r6, r2
   867d6:	dbe2      	blt.n	8679e <__swbuf_r+0x32>
   867d8:	4638      	mov	r0, r7
   867da:	4621      	mov	r1, r4
   867dc:	f7fe fde4 	bl	853a8 <_fflush_r>
   867e0:	b940      	cbnz	r0, 867f4 <__swbuf_r+0x88>
   867e2:	6823      	ldr	r3, [r4, #0]
   867e4:	2601      	movs	r6, #1
   867e6:	e7db      	b.n	867a0 <__swbuf_r+0x34>
   867e8:	4638      	mov	r0, r7
   867ea:	4621      	mov	r1, r4
   867ec:	f7fe fddc 	bl	853a8 <_fflush_r>
   867f0:	2800      	cmp	r0, #0
   867f2:	d0e3      	beq.n	867bc <__swbuf_r+0x50>
   867f4:	f04f 30ff 	mov.w	r0, #4294967295
   867f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   867fa:	4638      	mov	r0, r7
   867fc:	4621      	mov	r1, r4
   867fe:	f7fe fcbd 	bl	8517c <__swsetup_r>
   86802:	2800      	cmp	r0, #0
   86804:	d1f6      	bne.n	867f4 <__swbuf_r+0x88>
   86806:	89a2      	ldrh	r2, [r4, #12]
   86808:	6926      	ldr	r6, [r4, #16]
   8680a:	b293      	uxth	r3, r2
   8680c:	e7bf      	b.n	8678e <__swbuf_r+0x22>
   8680e:	f7fe fde7 	bl	853e0 <__sinit>
   86812:	e7b3      	b.n	8677c <__swbuf_r+0x10>

00086814 <_wcrtomb_r>:
   86814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86818:	461e      	mov	r6, r3
   8681a:	b086      	sub	sp, #24
   8681c:	460c      	mov	r4, r1
   8681e:	4605      	mov	r5, r0
   86820:	4617      	mov	r7, r2
   86822:	4b0f      	ldr	r3, [pc, #60]	; (86860 <_wcrtomb_r+0x4c>)
   86824:	b191      	cbz	r1, 8684c <_wcrtomb_r+0x38>
   86826:	f8d3 8000 	ldr.w	r8, [r3]
   8682a:	f7ff f999 	bl	85b60 <__locale_charset>
   8682e:	9600      	str	r6, [sp, #0]
   86830:	4603      	mov	r3, r0
   86832:	4621      	mov	r1, r4
   86834:	463a      	mov	r2, r7
   86836:	4628      	mov	r0, r5
   86838:	47c0      	blx	r8
   8683a:	1c43      	adds	r3, r0, #1
   8683c:	d103      	bne.n	86846 <_wcrtomb_r+0x32>
   8683e:	2200      	movs	r2, #0
   86840:	238a      	movs	r3, #138	; 0x8a
   86842:	6032      	str	r2, [r6, #0]
   86844:	602b      	str	r3, [r5, #0]
   86846:	b006      	add	sp, #24
   86848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8684c:	681f      	ldr	r7, [r3, #0]
   8684e:	f7ff f987 	bl	85b60 <__locale_charset>
   86852:	9600      	str	r6, [sp, #0]
   86854:	4603      	mov	r3, r0
   86856:	4622      	mov	r2, r4
   86858:	4628      	mov	r0, r5
   8685a:	a903      	add	r1, sp, #12
   8685c:	47b8      	blx	r7
   8685e:	e7ec      	b.n	8683a <_wcrtomb_r+0x26>
   86860:	200709d8 	.word	0x200709d8

00086864 <__ascii_wctomb>:
   86864:	b121      	cbz	r1, 86870 <__ascii_wctomb+0xc>
   86866:	2aff      	cmp	r2, #255	; 0xff
   86868:	d804      	bhi.n	86874 <__ascii_wctomb+0x10>
   8686a:	700a      	strb	r2, [r1, #0]
   8686c:	2001      	movs	r0, #1
   8686e:	4770      	bx	lr
   86870:	4608      	mov	r0, r1
   86872:	4770      	bx	lr
   86874:	238a      	movs	r3, #138	; 0x8a
   86876:	6003      	str	r3, [r0, #0]
   86878:	f04f 30ff 	mov.w	r0, #4294967295
   8687c:	4770      	bx	lr
   8687e:	bf00      	nop

00086880 <_write_r>:
   86880:	b570      	push	{r4, r5, r6, lr}
   86882:	4c08      	ldr	r4, [pc, #32]	; (868a4 <_write_r+0x24>)
   86884:	4606      	mov	r6, r0
   86886:	2500      	movs	r5, #0
   86888:	4608      	mov	r0, r1
   8688a:	4611      	mov	r1, r2
   8688c:	461a      	mov	r2, r3
   8688e:	6025      	str	r5, [r4, #0]
   86890:	f7fa f91e 	bl	80ad0 <_write>
   86894:	1c43      	adds	r3, r0, #1
   86896:	d000      	beq.n	8689a <_write_r+0x1a>
   86898:	bd70      	pop	{r4, r5, r6, pc}
   8689a:	6823      	ldr	r3, [r4, #0]
   8689c:	2b00      	cmp	r3, #0
   8689e:	d0fb      	beq.n	86898 <_write_r+0x18>
   868a0:	6033      	str	r3, [r6, #0]
   868a2:	bd70      	pop	{r4, r5, r6, pc}
   868a4:	20078d98 	.word	0x20078d98

000868a8 <__register_exitproc>:
   868a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   868aa:	4c27      	ldr	r4, [pc, #156]	; (86948 <__register_exitproc+0xa0>)
   868ac:	b085      	sub	sp, #20
   868ae:	6826      	ldr	r6, [r4, #0]
   868b0:	4607      	mov	r7, r0
   868b2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   868b6:	2c00      	cmp	r4, #0
   868b8:	d040      	beq.n	8693c <__register_exitproc+0x94>
   868ba:	6865      	ldr	r5, [r4, #4]
   868bc:	2d1f      	cmp	r5, #31
   868be:	dd1e      	ble.n	868fe <__register_exitproc+0x56>
   868c0:	4822      	ldr	r0, [pc, #136]	; (8694c <__register_exitproc+0xa4>)
   868c2:	b918      	cbnz	r0, 868cc <__register_exitproc+0x24>
   868c4:	f04f 30ff 	mov.w	r0, #4294967295
   868c8:	b005      	add	sp, #20
   868ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   868cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   868d0:	9103      	str	r1, [sp, #12]
   868d2:	9202      	str	r2, [sp, #8]
   868d4:	9301      	str	r3, [sp, #4]
   868d6:	f7ff f9bd 	bl	85c54 <malloc>
   868da:	9903      	ldr	r1, [sp, #12]
   868dc:	4604      	mov	r4, r0
   868de:	9a02      	ldr	r2, [sp, #8]
   868e0:	9b01      	ldr	r3, [sp, #4]
   868e2:	2800      	cmp	r0, #0
   868e4:	d0ee      	beq.n	868c4 <__register_exitproc+0x1c>
   868e6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   868ea:	2000      	movs	r0, #0
   868ec:	6025      	str	r5, [r4, #0]
   868ee:	6060      	str	r0, [r4, #4]
   868f0:	4605      	mov	r5, r0
   868f2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   868f6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   868fa:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   868fe:	b93f      	cbnz	r7, 86910 <__register_exitproc+0x68>
   86900:	1c6b      	adds	r3, r5, #1
   86902:	2000      	movs	r0, #0
   86904:	3502      	adds	r5, #2
   86906:	6063      	str	r3, [r4, #4]
   86908:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   8690c:	b005      	add	sp, #20
   8690e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86910:	2601      	movs	r6, #1
   86912:	40ae      	lsls	r6, r5
   86914:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   86918:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   8691c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   86920:	2f02      	cmp	r7, #2
   86922:	ea42 0206 	orr.w	r2, r2, r6
   86926:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8692a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8692e:	d1e7      	bne.n	86900 <__register_exitproc+0x58>
   86930:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86934:	431e      	orrs	r6, r3
   86936:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8693a:	e7e1      	b.n	86900 <__register_exitproc+0x58>
   8693c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   86940:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86944:	e7b9      	b.n	868ba <__register_exitproc+0x12>
   86946:	bf00      	nop
   86948:	000871ac 	.word	0x000871ac
   8694c:	00085c55 	.word	0x00085c55

00086950 <_close_r>:
   86950:	b538      	push	{r3, r4, r5, lr}
   86952:	4c07      	ldr	r4, [pc, #28]	; (86970 <_close_r+0x20>)
   86954:	2300      	movs	r3, #0
   86956:	4605      	mov	r5, r0
   86958:	4608      	mov	r0, r1
   8695a:	6023      	str	r3, [r4, #0]
   8695c:	f7fc fb9a 	bl	83094 <_close>
   86960:	1c43      	adds	r3, r0, #1
   86962:	d000      	beq.n	86966 <_close_r+0x16>
   86964:	bd38      	pop	{r3, r4, r5, pc}
   86966:	6823      	ldr	r3, [r4, #0]
   86968:	2b00      	cmp	r3, #0
   8696a:	d0fb      	beq.n	86964 <_close_r+0x14>
   8696c:	602b      	str	r3, [r5, #0]
   8696e:	bd38      	pop	{r3, r4, r5, pc}
   86970:	20078d98 	.word	0x20078d98

00086974 <_fclose_r>:
   86974:	b570      	push	{r4, r5, r6, lr}
   86976:	460c      	mov	r4, r1
   86978:	4605      	mov	r5, r0
   8697a:	b131      	cbz	r1, 8698a <_fclose_r+0x16>
   8697c:	b110      	cbz	r0, 86984 <_fclose_r+0x10>
   8697e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86980:	2b00      	cmp	r3, #0
   86982:	d02f      	beq.n	869e4 <_fclose_r+0x70>
   86984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86988:	b90b      	cbnz	r3, 8698e <_fclose_r+0x1a>
   8698a:	2000      	movs	r0, #0
   8698c:	bd70      	pop	{r4, r5, r6, pc}
   8698e:	4628      	mov	r0, r5
   86990:	4621      	mov	r1, r4
   86992:	f7fe fd09 	bl	853a8 <_fflush_r>
   86996:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   86998:	4606      	mov	r6, r0
   8699a:	b133      	cbz	r3, 869aa <_fclose_r+0x36>
   8699c:	4628      	mov	r0, r5
   8699e:	69e1      	ldr	r1, [r4, #28]
   869a0:	4798      	blx	r3
   869a2:	2800      	cmp	r0, #0
   869a4:	bfb8      	it	lt
   869a6:	f04f 36ff 	movlt.w	r6, #4294967295
   869aa:	89a3      	ldrh	r3, [r4, #12]
   869ac:	061b      	lsls	r3, r3, #24
   869ae:	d41c      	bmi.n	869ea <_fclose_r+0x76>
   869b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   869b2:	b141      	cbz	r1, 869c6 <_fclose_r+0x52>
   869b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   869b8:	4299      	cmp	r1, r3
   869ba:	d002      	beq.n	869c2 <_fclose_r+0x4e>
   869bc:	4628      	mov	r0, r5
   869be:	f7fe fe53 	bl	85668 <_free_r>
   869c2:	2300      	movs	r3, #0
   869c4:	6323      	str	r3, [r4, #48]	; 0x30
   869c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   869c8:	b121      	cbz	r1, 869d4 <_fclose_r+0x60>
   869ca:	4628      	mov	r0, r5
   869cc:	f7fe fe4c 	bl	85668 <_free_r>
   869d0:	2300      	movs	r3, #0
   869d2:	6463      	str	r3, [r4, #68]	; 0x44
   869d4:	f7fe fd7e 	bl	854d4 <__sfp_lock_acquire>
   869d8:	2300      	movs	r3, #0
   869da:	81a3      	strh	r3, [r4, #12]
   869dc:	f7fe fd7c 	bl	854d8 <__sfp_lock_release>
   869e0:	4630      	mov	r0, r6
   869e2:	bd70      	pop	{r4, r5, r6, pc}
   869e4:	f7fe fcfc 	bl	853e0 <__sinit>
   869e8:	e7cc      	b.n	86984 <_fclose_r+0x10>
   869ea:	4628      	mov	r0, r5
   869ec:	6921      	ldr	r1, [r4, #16]
   869ee:	f7fe fe3b 	bl	85668 <_free_r>
   869f2:	e7dd      	b.n	869b0 <_fclose_r+0x3c>

000869f4 <fclose>:
   869f4:	4b02      	ldr	r3, [pc, #8]	; (86a00 <fclose+0xc>)
   869f6:	4601      	mov	r1, r0
   869f8:	6818      	ldr	r0, [r3, #0]
   869fa:	f7ff bfbb 	b.w	86974 <_fclose_r>
   869fe:	bf00      	nop
   86a00:	200705a0 	.word	0x200705a0

00086a04 <_fstat_r>:
   86a04:	b538      	push	{r3, r4, r5, lr}
   86a06:	4c08      	ldr	r4, [pc, #32]	; (86a28 <_fstat_r+0x24>)
   86a08:	2300      	movs	r3, #0
   86a0a:	4605      	mov	r5, r0
   86a0c:	4608      	mov	r0, r1
   86a0e:	4611      	mov	r1, r2
   86a10:	6023      	str	r3, [r4, #0]
   86a12:	f7fc fb43 	bl	8309c <_fstat>
   86a16:	1c43      	adds	r3, r0, #1
   86a18:	d000      	beq.n	86a1c <_fstat_r+0x18>
   86a1a:	bd38      	pop	{r3, r4, r5, pc}
   86a1c:	6823      	ldr	r3, [r4, #0]
   86a1e:	2b00      	cmp	r3, #0
   86a20:	d0fb      	beq.n	86a1a <_fstat_r+0x16>
   86a22:	602b      	str	r3, [r5, #0]
   86a24:	bd38      	pop	{r3, r4, r5, pc}
   86a26:	bf00      	nop
   86a28:	20078d98 	.word	0x20078d98

00086a2c <_isatty_r>:
   86a2c:	b538      	push	{r3, r4, r5, lr}
   86a2e:	4c07      	ldr	r4, [pc, #28]	; (86a4c <_isatty_r+0x20>)
   86a30:	2300      	movs	r3, #0
   86a32:	4605      	mov	r5, r0
   86a34:	4608      	mov	r0, r1
   86a36:	6023      	str	r3, [r4, #0]
   86a38:	f7fc fb36 	bl	830a8 <_isatty>
   86a3c:	1c43      	adds	r3, r0, #1
   86a3e:	d000      	beq.n	86a42 <_isatty_r+0x16>
   86a40:	bd38      	pop	{r3, r4, r5, pc}
   86a42:	6823      	ldr	r3, [r4, #0]
   86a44:	2b00      	cmp	r3, #0
   86a46:	d0fb      	beq.n	86a40 <_isatty_r+0x14>
   86a48:	602b      	str	r3, [r5, #0]
   86a4a:	bd38      	pop	{r3, r4, r5, pc}
   86a4c:	20078d98 	.word	0x20078d98

00086a50 <_lseek_r>:
   86a50:	b570      	push	{r4, r5, r6, lr}
   86a52:	4c08      	ldr	r4, [pc, #32]	; (86a74 <_lseek_r+0x24>)
   86a54:	4606      	mov	r6, r0
   86a56:	2500      	movs	r5, #0
   86a58:	4608      	mov	r0, r1
   86a5a:	4611      	mov	r1, r2
   86a5c:	461a      	mov	r2, r3
   86a5e:	6025      	str	r5, [r4, #0]
   86a60:	f7fc fb24 	bl	830ac <_lseek>
   86a64:	1c43      	adds	r3, r0, #1
   86a66:	d000      	beq.n	86a6a <_lseek_r+0x1a>
   86a68:	bd70      	pop	{r4, r5, r6, pc}
   86a6a:	6823      	ldr	r3, [r4, #0]
   86a6c:	2b00      	cmp	r3, #0
   86a6e:	d0fb      	beq.n	86a68 <_lseek_r+0x18>
   86a70:	6033      	str	r3, [r6, #0]
   86a72:	bd70      	pop	{r4, r5, r6, pc}
   86a74:	20078d98 	.word	0x20078d98

00086a78 <_read_r>:
   86a78:	b570      	push	{r4, r5, r6, lr}
   86a7a:	4c08      	ldr	r4, [pc, #32]	; (86a9c <_read_r+0x24>)
   86a7c:	4606      	mov	r6, r0
   86a7e:	2500      	movs	r5, #0
   86a80:	4608      	mov	r0, r1
   86a82:	4611      	mov	r1, r2
   86a84:	461a      	mov	r2, r3
   86a86:	6025      	str	r5, [r4, #0]
   86a88:	f7f9 fb5e 	bl	80148 <_read>
   86a8c:	1c43      	adds	r3, r0, #1
   86a8e:	d000      	beq.n	86a92 <_read_r+0x1a>
   86a90:	bd70      	pop	{r4, r5, r6, pc}
   86a92:	6823      	ldr	r3, [r4, #0]
   86a94:	2b00      	cmp	r3, #0
   86a96:	d0fb      	beq.n	86a90 <_read_r+0x18>
   86a98:	6033      	str	r3, [r6, #0]
   86a9a:	bd70      	pop	{r4, r5, r6, pc}
   86a9c:	20078d98 	.word	0x20078d98

00086aa0 <__aeabi_uldivmod>:
   86aa0:	b94b      	cbnz	r3, 86ab6 <__aeabi_uldivmod+0x16>
   86aa2:	b942      	cbnz	r2, 86ab6 <__aeabi_uldivmod+0x16>
   86aa4:	2900      	cmp	r1, #0
   86aa6:	bf08      	it	eq
   86aa8:	2800      	cmpeq	r0, #0
   86aaa:	d002      	beq.n	86ab2 <__aeabi_uldivmod+0x12>
   86aac:	f04f 31ff 	mov.w	r1, #4294967295
   86ab0:	4608      	mov	r0, r1
   86ab2:	f000 b83b 	b.w	86b2c <__aeabi_idiv0>
   86ab6:	b082      	sub	sp, #8
   86ab8:	46ec      	mov	ip, sp
   86aba:	e92d 5000 	stmdb	sp!, {ip, lr}
   86abe:	f000 f81d 	bl	86afc <__gnu_uldivmod_helper>
   86ac2:	f8dd e004 	ldr.w	lr, [sp, #4]
   86ac6:	b002      	add	sp, #8
   86ac8:	bc0c      	pop	{r2, r3}
   86aca:	4770      	bx	lr

00086acc <__gnu_ldivmod_helper>:
   86acc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   86ad0:	9e08      	ldr	r6, [sp, #32]
   86ad2:	4614      	mov	r4, r2
   86ad4:	461d      	mov	r5, r3
   86ad6:	4680      	mov	r8, r0
   86ad8:	4689      	mov	r9, r1
   86ada:	f000 f829 	bl	86b30 <__divdi3>
   86ade:	fb04 f301 	mul.w	r3, r4, r1
   86ae2:	fba4 ab00 	umull	sl, fp, r4, r0
   86ae6:	fb00 3205 	mla	r2, r0, r5, r3
   86aea:	4493      	add	fp, r2
   86aec:	ebb8 080a 	subs.w	r8, r8, sl
   86af0:	eb69 090b 	sbc.w	r9, r9, fp
   86af4:	e9c6 8900 	strd	r8, r9, [r6]
   86af8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00086afc <__gnu_uldivmod_helper>:
   86afc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   86b00:	9e08      	ldr	r6, [sp, #32]
   86b02:	4614      	mov	r4, r2
   86b04:	461d      	mov	r5, r3
   86b06:	4680      	mov	r8, r0
   86b08:	4689      	mov	r9, r1
   86b0a:	f000 f961 	bl	86dd0 <__udivdi3>
   86b0e:	fb00 f505 	mul.w	r5, r0, r5
   86b12:	fba0 ab04 	umull	sl, fp, r0, r4
   86b16:	fb04 5401 	mla	r4, r4, r1, r5
   86b1a:	44a3      	add	fp, r4
   86b1c:	ebb8 080a 	subs.w	r8, r8, sl
   86b20:	eb69 090b 	sbc.w	r9, r9, fp
   86b24:	e9c6 8900 	strd	r8, r9, [r6]
   86b28:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00086b2c <__aeabi_idiv0>:
   86b2c:	4770      	bx	lr
   86b2e:	bf00      	nop

00086b30 <__divdi3>:
   86b30:	2900      	cmp	r1, #0
   86b32:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86b36:	f2c0 80a1 	blt.w	86c7c <__divdi3+0x14c>
   86b3a:	2400      	movs	r4, #0
   86b3c:	2b00      	cmp	r3, #0
   86b3e:	f2c0 8098 	blt.w	86c72 <__divdi3+0x142>
   86b42:	4615      	mov	r5, r2
   86b44:	4606      	mov	r6, r0
   86b46:	460f      	mov	r7, r1
   86b48:	2b00      	cmp	r3, #0
   86b4a:	d13f      	bne.n	86bcc <__divdi3+0x9c>
   86b4c:	428a      	cmp	r2, r1
   86b4e:	d958      	bls.n	86c02 <__divdi3+0xd2>
   86b50:	fab2 f382 	clz	r3, r2
   86b54:	b14b      	cbz	r3, 86b6a <__divdi3+0x3a>
   86b56:	f1c3 0220 	rsb	r2, r3, #32
   86b5a:	fa01 f703 	lsl.w	r7, r1, r3
   86b5e:	fa20 f202 	lsr.w	r2, r0, r2
   86b62:	409d      	lsls	r5, r3
   86b64:	fa00 f603 	lsl.w	r6, r0, r3
   86b68:	4317      	orrs	r7, r2
   86b6a:	0c29      	lsrs	r1, r5, #16
   86b6c:	fbb7 f2f1 	udiv	r2, r7, r1
   86b70:	fb01 7712 	mls	r7, r1, r2, r7
   86b74:	b2a8      	uxth	r0, r5
   86b76:	fb00 f302 	mul.w	r3, r0, r2
   86b7a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   86b7e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   86b82:	42bb      	cmp	r3, r7
   86b84:	d909      	bls.n	86b9a <__divdi3+0x6a>
   86b86:	197f      	adds	r7, r7, r5
   86b88:	f102 3cff 	add.w	ip, r2, #4294967295
   86b8c:	f080 8105 	bcs.w	86d9a <__divdi3+0x26a>
   86b90:	42bb      	cmp	r3, r7
   86b92:	f240 8102 	bls.w	86d9a <__divdi3+0x26a>
   86b96:	3a02      	subs	r2, #2
   86b98:	442f      	add	r7, r5
   86b9a:	1aff      	subs	r7, r7, r3
   86b9c:	fbb7 f3f1 	udiv	r3, r7, r1
   86ba0:	fb01 7113 	mls	r1, r1, r3, r7
   86ba4:	fb00 f003 	mul.w	r0, r0, r3
   86ba8:	b2b6      	uxth	r6, r6
   86baa:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   86bae:	4288      	cmp	r0, r1
   86bb0:	d908      	bls.n	86bc4 <__divdi3+0x94>
   86bb2:	1949      	adds	r1, r1, r5
   86bb4:	f103 37ff 	add.w	r7, r3, #4294967295
   86bb8:	f080 80f1 	bcs.w	86d9e <__divdi3+0x26e>
   86bbc:	4288      	cmp	r0, r1
   86bbe:	f240 80ee 	bls.w	86d9e <__divdi3+0x26e>
   86bc2:	3b02      	subs	r3, #2
   86bc4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   86bc8:	2300      	movs	r3, #0
   86bca:	e003      	b.n	86bd4 <__divdi3+0xa4>
   86bcc:	428b      	cmp	r3, r1
   86bce:	d90a      	bls.n	86be6 <__divdi3+0xb6>
   86bd0:	2300      	movs	r3, #0
   86bd2:	461a      	mov	r2, r3
   86bd4:	4610      	mov	r0, r2
   86bd6:	4619      	mov	r1, r3
   86bd8:	b114      	cbz	r4, 86be0 <__divdi3+0xb0>
   86bda:	4240      	negs	r0, r0
   86bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   86be0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86be4:	4770      	bx	lr
   86be6:	fab3 f883 	clz	r8, r3
   86bea:	f1b8 0f00 	cmp.w	r8, #0
   86bee:	f040 8088 	bne.w	86d02 <__divdi3+0x1d2>
   86bf2:	428b      	cmp	r3, r1
   86bf4:	d302      	bcc.n	86bfc <__divdi3+0xcc>
   86bf6:	4282      	cmp	r2, r0
   86bf8:	f200 80e2 	bhi.w	86dc0 <__divdi3+0x290>
   86bfc:	2300      	movs	r3, #0
   86bfe:	2201      	movs	r2, #1
   86c00:	e7e8      	b.n	86bd4 <__divdi3+0xa4>
   86c02:	b912      	cbnz	r2, 86c0a <__divdi3+0xda>
   86c04:	2301      	movs	r3, #1
   86c06:	fbb3 f5f2 	udiv	r5, r3, r2
   86c0a:	fab5 f285 	clz	r2, r5
   86c0e:	2a00      	cmp	r2, #0
   86c10:	d13a      	bne.n	86c88 <__divdi3+0x158>
   86c12:	1b7f      	subs	r7, r7, r5
   86c14:	0c28      	lsrs	r0, r5, #16
   86c16:	fa1f fc85 	uxth.w	ip, r5
   86c1a:	2301      	movs	r3, #1
   86c1c:	fbb7 f1f0 	udiv	r1, r7, r0
   86c20:	fb00 7711 	mls	r7, r0, r1, r7
   86c24:	fb0c f201 	mul.w	r2, ip, r1
   86c28:	ea4f 4816 	mov.w	r8, r6, lsr #16
   86c2c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   86c30:	42ba      	cmp	r2, r7
   86c32:	d907      	bls.n	86c44 <__divdi3+0x114>
   86c34:	197f      	adds	r7, r7, r5
   86c36:	f101 38ff 	add.w	r8, r1, #4294967295
   86c3a:	d202      	bcs.n	86c42 <__divdi3+0x112>
   86c3c:	42ba      	cmp	r2, r7
   86c3e:	f200 80c4 	bhi.w	86dca <__divdi3+0x29a>
   86c42:	4641      	mov	r1, r8
   86c44:	1abf      	subs	r7, r7, r2
   86c46:	fbb7 f2f0 	udiv	r2, r7, r0
   86c4a:	fb00 7012 	mls	r0, r0, r2, r7
   86c4e:	fb0c fc02 	mul.w	ip, ip, r2
   86c52:	b2b6      	uxth	r6, r6
   86c54:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   86c58:	4584      	cmp	ip, r0
   86c5a:	d907      	bls.n	86c6c <__divdi3+0x13c>
   86c5c:	1940      	adds	r0, r0, r5
   86c5e:	f102 37ff 	add.w	r7, r2, #4294967295
   86c62:	d202      	bcs.n	86c6a <__divdi3+0x13a>
   86c64:	4584      	cmp	ip, r0
   86c66:	f200 80ae 	bhi.w	86dc6 <__divdi3+0x296>
   86c6a:	463a      	mov	r2, r7
   86c6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   86c70:	e7b0      	b.n	86bd4 <__divdi3+0xa4>
   86c72:	43e4      	mvns	r4, r4
   86c74:	4252      	negs	r2, r2
   86c76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   86c7a:	e762      	b.n	86b42 <__divdi3+0x12>
   86c7c:	4240      	negs	r0, r0
   86c7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   86c82:	f04f 34ff 	mov.w	r4, #4294967295
   86c86:	e759      	b.n	86b3c <__divdi3+0xc>
   86c88:	4095      	lsls	r5, r2
   86c8a:	f1c2 0920 	rsb	r9, r2, #32
   86c8e:	fa27 f109 	lsr.w	r1, r7, r9
   86c92:	fa26 f909 	lsr.w	r9, r6, r9
   86c96:	4097      	lsls	r7, r2
   86c98:	0c28      	lsrs	r0, r5, #16
   86c9a:	fbb1 f8f0 	udiv	r8, r1, r0
   86c9e:	fb00 1118 	mls	r1, r0, r8, r1
   86ca2:	fa1f fc85 	uxth.w	ip, r5
   86ca6:	fb0c f308 	mul.w	r3, ip, r8
   86caa:	ea49 0907 	orr.w	r9, r9, r7
   86cae:	ea4f 4719 	mov.w	r7, r9, lsr #16
   86cb2:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   86cb6:	428b      	cmp	r3, r1
   86cb8:	fa06 f602 	lsl.w	r6, r6, r2
   86cbc:	d908      	bls.n	86cd0 <__divdi3+0x1a0>
   86cbe:	1949      	adds	r1, r1, r5
   86cc0:	f108 32ff 	add.w	r2, r8, #4294967295
   86cc4:	d27a      	bcs.n	86dbc <__divdi3+0x28c>
   86cc6:	428b      	cmp	r3, r1
   86cc8:	d978      	bls.n	86dbc <__divdi3+0x28c>
   86cca:	f1a8 0802 	sub.w	r8, r8, #2
   86cce:	4429      	add	r1, r5
   86cd0:	1ac9      	subs	r1, r1, r3
   86cd2:	fbb1 f3f0 	udiv	r3, r1, r0
   86cd6:	fb00 1713 	mls	r7, r0, r3, r1
   86cda:	fb0c f203 	mul.w	r2, ip, r3
   86cde:	fa1f f989 	uxth.w	r9, r9
   86ce2:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   86ce6:	42ba      	cmp	r2, r7
   86ce8:	d907      	bls.n	86cfa <__divdi3+0x1ca>
   86cea:	197f      	adds	r7, r7, r5
   86cec:	f103 31ff 	add.w	r1, r3, #4294967295
   86cf0:	d260      	bcs.n	86db4 <__divdi3+0x284>
   86cf2:	42ba      	cmp	r2, r7
   86cf4:	d95e      	bls.n	86db4 <__divdi3+0x284>
   86cf6:	3b02      	subs	r3, #2
   86cf8:	442f      	add	r7, r5
   86cfa:	1abf      	subs	r7, r7, r2
   86cfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   86d00:	e78c      	b.n	86c1c <__divdi3+0xec>
   86d02:	f1c8 0220 	rsb	r2, r8, #32
   86d06:	fa25 f102 	lsr.w	r1, r5, r2
   86d0a:	fa03 fc08 	lsl.w	ip, r3, r8
   86d0e:	fa27 f302 	lsr.w	r3, r7, r2
   86d12:	fa20 f202 	lsr.w	r2, r0, r2
   86d16:	fa07 f708 	lsl.w	r7, r7, r8
   86d1a:	ea41 0c0c 	orr.w	ip, r1, ip
   86d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   86d22:	fbb3 f1f9 	udiv	r1, r3, r9
   86d26:	fb09 3311 	mls	r3, r9, r1, r3
   86d2a:	fa1f fa8c 	uxth.w	sl, ip
   86d2e:	fb0a fb01 	mul.w	fp, sl, r1
   86d32:	4317      	orrs	r7, r2
   86d34:	0c3a      	lsrs	r2, r7, #16
   86d36:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   86d3a:	459b      	cmp	fp, r3
   86d3c:	fa05 f008 	lsl.w	r0, r5, r8
   86d40:	d908      	bls.n	86d54 <__divdi3+0x224>
   86d42:	eb13 030c 	adds.w	r3, r3, ip
   86d46:	f101 32ff 	add.w	r2, r1, #4294967295
   86d4a:	d235      	bcs.n	86db8 <__divdi3+0x288>
   86d4c:	459b      	cmp	fp, r3
   86d4e:	d933      	bls.n	86db8 <__divdi3+0x288>
   86d50:	3902      	subs	r1, #2
   86d52:	4463      	add	r3, ip
   86d54:	ebcb 0303 	rsb	r3, fp, r3
   86d58:	fbb3 f2f9 	udiv	r2, r3, r9
   86d5c:	fb09 3312 	mls	r3, r9, r2, r3
   86d60:	fb0a fa02 	mul.w	sl, sl, r2
   86d64:	b2bf      	uxth	r7, r7
   86d66:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   86d6a:	45ba      	cmp	sl, r7
   86d6c:	d908      	bls.n	86d80 <__divdi3+0x250>
   86d6e:	eb17 070c 	adds.w	r7, r7, ip
   86d72:	f102 33ff 	add.w	r3, r2, #4294967295
   86d76:	d21b      	bcs.n	86db0 <__divdi3+0x280>
   86d78:	45ba      	cmp	sl, r7
   86d7a:	d919      	bls.n	86db0 <__divdi3+0x280>
   86d7c:	3a02      	subs	r2, #2
   86d7e:	4467      	add	r7, ip
   86d80:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   86d84:	fba5 0100 	umull	r0, r1, r5, r0
   86d88:	ebca 0707 	rsb	r7, sl, r7
   86d8c:	428f      	cmp	r7, r1
   86d8e:	f04f 0300 	mov.w	r3, #0
   86d92:	d30a      	bcc.n	86daa <__divdi3+0x27a>
   86d94:	d005      	beq.n	86da2 <__divdi3+0x272>
   86d96:	462a      	mov	r2, r5
   86d98:	e71c      	b.n	86bd4 <__divdi3+0xa4>
   86d9a:	4662      	mov	r2, ip
   86d9c:	e6fd      	b.n	86b9a <__divdi3+0x6a>
   86d9e:	463b      	mov	r3, r7
   86da0:	e710      	b.n	86bc4 <__divdi3+0x94>
   86da2:	fa06 f608 	lsl.w	r6, r6, r8
   86da6:	4286      	cmp	r6, r0
   86da8:	d2f5      	bcs.n	86d96 <__divdi3+0x266>
   86daa:	1e6a      	subs	r2, r5, #1
   86dac:	2300      	movs	r3, #0
   86dae:	e711      	b.n	86bd4 <__divdi3+0xa4>
   86db0:	461a      	mov	r2, r3
   86db2:	e7e5      	b.n	86d80 <__divdi3+0x250>
   86db4:	460b      	mov	r3, r1
   86db6:	e7a0      	b.n	86cfa <__divdi3+0x1ca>
   86db8:	4611      	mov	r1, r2
   86dba:	e7cb      	b.n	86d54 <__divdi3+0x224>
   86dbc:	4690      	mov	r8, r2
   86dbe:	e787      	b.n	86cd0 <__divdi3+0x1a0>
   86dc0:	4643      	mov	r3, r8
   86dc2:	4642      	mov	r2, r8
   86dc4:	e706      	b.n	86bd4 <__divdi3+0xa4>
   86dc6:	3a02      	subs	r2, #2
   86dc8:	e750      	b.n	86c6c <__divdi3+0x13c>
   86dca:	3902      	subs	r1, #2
   86dcc:	442f      	add	r7, r5
   86dce:	e739      	b.n	86c44 <__divdi3+0x114>

00086dd0 <__udivdi3>:
   86dd0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86dd4:	4614      	mov	r4, r2
   86dd6:	4605      	mov	r5, r0
   86dd8:	460e      	mov	r6, r1
   86dda:	2b00      	cmp	r3, #0
   86ddc:	d143      	bne.n	86e66 <__udivdi3+0x96>
   86dde:	428a      	cmp	r2, r1
   86de0:	d953      	bls.n	86e8a <__udivdi3+0xba>
   86de2:	fab2 f782 	clz	r7, r2
   86de6:	b157      	cbz	r7, 86dfe <__udivdi3+0x2e>
   86de8:	f1c7 0620 	rsb	r6, r7, #32
   86dec:	fa20 f606 	lsr.w	r6, r0, r6
   86df0:	fa01 f307 	lsl.w	r3, r1, r7
   86df4:	fa02 f407 	lsl.w	r4, r2, r7
   86df8:	fa00 f507 	lsl.w	r5, r0, r7
   86dfc:	431e      	orrs	r6, r3
   86dfe:	0c21      	lsrs	r1, r4, #16
   86e00:	fbb6 f2f1 	udiv	r2, r6, r1
   86e04:	fb01 6612 	mls	r6, r1, r2, r6
   86e08:	b2a0      	uxth	r0, r4
   86e0a:	fb00 f302 	mul.w	r3, r0, r2
   86e0e:	0c2f      	lsrs	r7, r5, #16
   86e10:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   86e14:	42b3      	cmp	r3, r6
   86e16:	d909      	bls.n	86e2c <__udivdi3+0x5c>
   86e18:	1936      	adds	r6, r6, r4
   86e1a:	f102 37ff 	add.w	r7, r2, #4294967295
   86e1e:	f080 80fd 	bcs.w	8701c <__udivdi3+0x24c>
   86e22:	42b3      	cmp	r3, r6
   86e24:	f240 80fa 	bls.w	8701c <__udivdi3+0x24c>
   86e28:	3a02      	subs	r2, #2
   86e2a:	4426      	add	r6, r4
   86e2c:	1af6      	subs	r6, r6, r3
   86e2e:	fbb6 f3f1 	udiv	r3, r6, r1
   86e32:	fb01 6113 	mls	r1, r1, r3, r6
   86e36:	fb00 f003 	mul.w	r0, r0, r3
   86e3a:	b2ad      	uxth	r5, r5
   86e3c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   86e40:	4288      	cmp	r0, r1
   86e42:	d908      	bls.n	86e56 <__udivdi3+0x86>
   86e44:	1909      	adds	r1, r1, r4
   86e46:	f103 36ff 	add.w	r6, r3, #4294967295
   86e4a:	f080 80e9 	bcs.w	87020 <__udivdi3+0x250>
   86e4e:	4288      	cmp	r0, r1
   86e50:	f240 80e6 	bls.w	87020 <__udivdi3+0x250>
   86e54:	3b02      	subs	r3, #2
   86e56:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   86e5a:	2300      	movs	r3, #0
   86e5c:	4610      	mov	r0, r2
   86e5e:	4619      	mov	r1, r3
   86e60:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86e64:	4770      	bx	lr
   86e66:	428b      	cmp	r3, r1
   86e68:	d84c      	bhi.n	86f04 <__udivdi3+0x134>
   86e6a:	fab3 f683 	clz	r6, r3
   86e6e:	2e00      	cmp	r6, #0
   86e70:	d14f      	bne.n	86f12 <__udivdi3+0x142>
   86e72:	428b      	cmp	r3, r1
   86e74:	d302      	bcc.n	86e7c <__udivdi3+0xac>
   86e76:	4282      	cmp	r2, r0
   86e78:	f200 80dd 	bhi.w	87036 <__udivdi3+0x266>
   86e7c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86e80:	2300      	movs	r3, #0
   86e82:	2201      	movs	r2, #1
   86e84:	4610      	mov	r0, r2
   86e86:	4619      	mov	r1, r3
   86e88:	4770      	bx	lr
   86e8a:	b912      	cbnz	r2, 86e92 <__udivdi3+0xc2>
   86e8c:	2401      	movs	r4, #1
   86e8e:	fbb4 f4f2 	udiv	r4, r4, r2
   86e92:	fab4 f284 	clz	r2, r4
   86e96:	2a00      	cmp	r2, #0
   86e98:	f040 8082 	bne.w	86fa0 <__udivdi3+0x1d0>
   86e9c:	1b09      	subs	r1, r1, r4
   86e9e:	0c26      	lsrs	r6, r4, #16
   86ea0:	b2a7      	uxth	r7, r4
   86ea2:	2301      	movs	r3, #1
   86ea4:	fbb1 f0f6 	udiv	r0, r1, r6
   86ea8:	fb06 1110 	mls	r1, r6, r0, r1
   86eac:	fb07 f200 	mul.w	r2, r7, r0
   86eb0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86eb4:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   86eb8:	428a      	cmp	r2, r1
   86eba:	d907      	bls.n	86ecc <__udivdi3+0xfc>
   86ebc:	1909      	adds	r1, r1, r4
   86ebe:	f100 3cff 	add.w	ip, r0, #4294967295
   86ec2:	d202      	bcs.n	86eca <__udivdi3+0xfa>
   86ec4:	428a      	cmp	r2, r1
   86ec6:	f200 80c8 	bhi.w	8705a <__udivdi3+0x28a>
   86eca:	4660      	mov	r0, ip
   86ecc:	1a89      	subs	r1, r1, r2
   86ece:	fbb1 f2f6 	udiv	r2, r1, r6
   86ed2:	fb06 1112 	mls	r1, r6, r2, r1
   86ed6:	fb07 f702 	mul.w	r7, r7, r2
   86eda:	b2ad      	uxth	r5, r5
   86edc:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   86ee0:	42af      	cmp	r7, r5
   86ee2:	d908      	bls.n	86ef6 <__udivdi3+0x126>
   86ee4:	192c      	adds	r4, r5, r4
   86ee6:	f102 31ff 	add.w	r1, r2, #4294967295
   86eea:	f080 809b 	bcs.w	87024 <__udivdi3+0x254>
   86eee:	42a7      	cmp	r7, r4
   86ef0:	f240 8098 	bls.w	87024 <__udivdi3+0x254>
   86ef4:	3a02      	subs	r2, #2
   86ef6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   86efa:	4610      	mov	r0, r2
   86efc:	4619      	mov	r1, r3
   86efe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86f02:	4770      	bx	lr
   86f04:	2300      	movs	r3, #0
   86f06:	461a      	mov	r2, r3
   86f08:	4610      	mov	r0, r2
   86f0a:	4619      	mov	r1, r3
   86f0c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   86f10:	4770      	bx	lr
   86f12:	f1c6 0520 	rsb	r5, r6, #32
   86f16:	fa22 f705 	lsr.w	r7, r2, r5
   86f1a:	fa03 f406 	lsl.w	r4, r3, r6
   86f1e:	fa21 f305 	lsr.w	r3, r1, r5
   86f22:	fa01 fb06 	lsl.w	fp, r1, r6
   86f26:	fa20 f505 	lsr.w	r5, r0, r5
   86f2a:	433c      	orrs	r4, r7
   86f2c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86f30:	fbb3 fcf8 	udiv	ip, r3, r8
   86f34:	fb08 331c 	mls	r3, r8, ip, r3
   86f38:	fa1f f984 	uxth.w	r9, r4
   86f3c:	fb09 fa0c 	mul.w	sl, r9, ip
   86f40:	ea45 0b0b 	orr.w	fp, r5, fp
   86f44:	ea4f 451b 	mov.w	r5, fp, lsr #16
   86f48:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   86f4c:	459a      	cmp	sl, r3
   86f4e:	fa02 f206 	lsl.w	r2, r2, r6
   86f52:	d904      	bls.n	86f5e <__udivdi3+0x18e>
   86f54:	191b      	adds	r3, r3, r4
   86f56:	f10c 35ff 	add.w	r5, ip, #4294967295
   86f5a:	d36f      	bcc.n	8703c <__udivdi3+0x26c>
   86f5c:	46ac      	mov	ip, r5
   86f5e:	ebca 0303 	rsb	r3, sl, r3
   86f62:	fbb3 f5f8 	udiv	r5, r3, r8
   86f66:	fb08 3315 	mls	r3, r8, r5, r3
   86f6a:	fb09 f905 	mul.w	r9, r9, r5
   86f6e:	fa1f fb8b 	uxth.w	fp, fp
   86f72:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   86f76:	45b9      	cmp	r9, r7
   86f78:	d904      	bls.n	86f84 <__udivdi3+0x1b4>
   86f7a:	193f      	adds	r7, r7, r4
   86f7c:	f105 33ff 	add.w	r3, r5, #4294967295
   86f80:	d362      	bcc.n	87048 <__udivdi3+0x278>
   86f82:	461d      	mov	r5, r3
   86f84:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   86f88:	fbac 2302 	umull	r2, r3, ip, r2
   86f8c:	ebc9 0707 	rsb	r7, r9, r7
   86f90:	429f      	cmp	r7, r3
   86f92:	f04f 0500 	mov.w	r5, #0
   86f96:	d34a      	bcc.n	8702e <__udivdi3+0x25e>
   86f98:	d046      	beq.n	87028 <__udivdi3+0x258>
   86f9a:	4662      	mov	r2, ip
   86f9c:	462b      	mov	r3, r5
   86f9e:	e75d      	b.n	86e5c <__udivdi3+0x8c>
   86fa0:	4094      	lsls	r4, r2
   86fa2:	f1c2 0920 	rsb	r9, r2, #32
   86fa6:	fa21 fc09 	lsr.w	ip, r1, r9
   86faa:	4091      	lsls	r1, r2
   86fac:	fa20 f909 	lsr.w	r9, r0, r9
   86fb0:	0c26      	lsrs	r6, r4, #16
   86fb2:	fbbc f8f6 	udiv	r8, ip, r6
   86fb6:	fb06 cc18 	mls	ip, r6, r8, ip
   86fba:	b2a7      	uxth	r7, r4
   86fbc:	fb07 f308 	mul.w	r3, r7, r8
   86fc0:	ea49 0901 	orr.w	r9, r9, r1
   86fc4:	ea4f 4119 	mov.w	r1, r9, lsr #16
   86fc8:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   86fcc:	4563      	cmp	r3, ip
   86fce:	fa00 f502 	lsl.w	r5, r0, r2
   86fd2:	d909      	bls.n	86fe8 <__udivdi3+0x218>
   86fd4:	eb1c 0c04 	adds.w	ip, ip, r4
   86fd8:	f108 32ff 	add.w	r2, r8, #4294967295
   86fdc:	d23b      	bcs.n	87056 <__udivdi3+0x286>
   86fde:	4563      	cmp	r3, ip
   86fe0:	d939      	bls.n	87056 <__udivdi3+0x286>
   86fe2:	f1a8 0802 	sub.w	r8, r8, #2
   86fe6:	44a4      	add	ip, r4
   86fe8:	ebc3 0c0c 	rsb	ip, r3, ip
   86fec:	fbbc f3f6 	udiv	r3, ip, r6
   86ff0:	fb06 c113 	mls	r1, r6, r3, ip
   86ff4:	fb07 f203 	mul.w	r2, r7, r3
   86ff8:	fa1f f989 	uxth.w	r9, r9
   86ffc:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   87000:	428a      	cmp	r2, r1
   87002:	d907      	bls.n	87014 <__udivdi3+0x244>
   87004:	1909      	adds	r1, r1, r4
   87006:	f103 30ff 	add.w	r0, r3, #4294967295
   8700a:	d222      	bcs.n	87052 <__udivdi3+0x282>
   8700c:	428a      	cmp	r2, r1
   8700e:	d920      	bls.n	87052 <__udivdi3+0x282>
   87010:	3b02      	subs	r3, #2
   87012:	4421      	add	r1, r4
   87014:	1a89      	subs	r1, r1, r2
   87016:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8701a:	e743      	b.n	86ea4 <__udivdi3+0xd4>
   8701c:	463a      	mov	r2, r7
   8701e:	e705      	b.n	86e2c <__udivdi3+0x5c>
   87020:	4633      	mov	r3, r6
   87022:	e718      	b.n	86e56 <__udivdi3+0x86>
   87024:	460a      	mov	r2, r1
   87026:	e766      	b.n	86ef6 <__udivdi3+0x126>
   87028:	40b0      	lsls	r0, r6
   8702a:	4290      	cmp	r0, r2
   8702c:	d2b5      	bcs.n	86f9a <__udivdi3+0x1ca>
   8702e:	f10c 32ff 	add.w	r2, ip, #4294967295
   87032:	2300      	movs	r3, #0
   87034:	e712      	b.n	86e5c <__udivdi3+0x8c>
   87036:	4633      	mov	r3, r6
   87038:	4632      	mov	r2, r6
   8703a:	e70f      	b.n	86e5c <__udivdi3+0x8c>
   8703c:	459a      	cmp	sl, r3
   8703e:	d98d      	bls.n	86f5c <__udivdi3+0x18c>
   87040:	f1ac 0c02 	sub.w	ip, ip, #2
   87044:	4423      	add	r3, r4
   87046:	e78a      	b.n	86f5e <__udivdi3+0x18e>
   87048:	45b9      	cmp	r9, r7
   8704a:	d99a      	bls.n	86f82 <__udivdi3+0x1b2>
   8704c:	3d02      	subs	r5, #2
   8704e:	4427      	add	r7, r4
   87050:	e798      	b.n	86f84 <__udivdi3+0x1b4>
   87052:	4603      	mov	r3, r0
   87054:	e7de      	b.n	87014 <__udivdi3+0x244>
   87056:	4690      	mov	r8, r2
   87058:	e7c6      	b.n	86fe8 <__udivdi3+0x218>
   8705a:	3802      	subs	r0, #2
   8705c:	4421      	add	r1, r4
   8705e:	e735      	b.n	86ecc <__udivdi3+0xfc>
   87060:	00000001 	.word	0x00000001
   87064:	00000002 	.word	0x00000002
   87068:	00000004 	.word	0x00000004
   8706c:	00000008 	.word	0x00000008
   87070:	00000010 	.word	0x00000010
   87074:	00000020 	.word	0x00000020
   87078:	00000040 	.word	0x00000040
   8707c:	00000080 	.word	0x00000080
   87080:	00000100 	.word	0x00000100
   87084:	00000200 	.word	0x00000200
   87088:	00000400 	.word	0x00000400
   8708c:	52415453 	.word	0x52415453
   87090:	00000054 	.word	0x00000054
   87094:	4956414e 	.word	0x4956414e
   87098:	00000000 	.word	0x00000000
   8709c:	00006425 	.word	0x00006425
   870a0:	45564f4d 	.word	0x45564f4d
   870a4:	00000000 	.word	0x00000000
   870a8:	4f464542 	.word	0x4f464542
   870ac:	52204552 	.word	0x52204552
   870b0:	5441544f 	.word	0x5441544f
   870b4:	00000045 	.word	0x00000045
   870b8:	41544f52 	.word	0x41544f52
   870bc:	00004554 	.word	0x00004554
   870c0:	534f4c43 	.word	0x534f4c43
   870c4:	00000045 	.word	0x00000045
   870c8:	09097325 	.word	0x09097325
   870cc:	25096325 	.word	0x25096325
   870d0:	75250975 	.word	0x75250975
   870d4:	0d752509 	.word	0x0d752509
   870d8:	0000000a 	.word	0x0000000a
   870dc:	454c4449 	.word	0x454c4449
   870e0:	00000000 	.word	0x00000000
   870e4:	00000a0d 	.word	0x00000a0d
   870e8:	20726d54 	.word	0x20726d54
   870ec:	00637653 	.word	0x00637653
   870f0:	25202d2d 	.word	0x25202d2d
   870f4:	000d0a73 	.word	0x000d0a73
   870f8:	75647241 	.word	0x75647241
   870fc:	206f6e69 	.word	0x206f6e69
   87100:	2f657544 	.word	0x2f657544
   87104:	00000058 	.word	0x00000058
   87108:	43202d2d 	.word	0x43202d2d
   8710c:	69706d6f 	.word	0x69706d6f
   87110:	3a64656c 	.word	0x3a64656c
   87114:	20732520 	.word	0x20732520
   87118:	2d207325 	.word	0x2d207325
   8711c:	000d0a2d 	.word	0x000d0a2d
   87120:	2079614d 	.word	0x2079614d
   87124:	32203231 	.word	0x32203231
   87128:	00373130 	.word	0x00373130
   8712c:	353a3930 	.word	0x353a3930
   87130:	34313a34 	.word	0x34313a34
   87134:	00000000 	.word	0x00000000
   87138:	65766f4d 	.word	0x65766f4d
   8713c:	00000000 	.word	0x00000000
   87140:	6c696146 	.word	0x6c696146
   87144:	74206465 	.word	0x74206465
   87148:	6574206f 	.word	0x6574206f
   8714c:	74207473 	.word	0x74207473
   87150:	5f6b7361 	.word	0x5f6b7361
   87154:	65766f4d 	.word	0x65766f4d
   87158:	73617420 	.word	0x73617420
   8715c:	000a0d6b 	.word	0x000a0d6b

00087160 <atanlo>:
   87160:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   87170:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00087180 <atanhi>:
   87180:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   87190:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
   871a0:	74727173 00000000 00000043              sqrt....C...

000871ac <_global_impure_ptr>:
   871ac:	20070178 33323130 37363534 42413938     x.. 0123456789AB
   871bc:	46454443 00000000 33323130 37363534     CDEF....01234567
   871cc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   871dc:	0000296c                                l)..

000871e0 <zeroes.6721>:
   871e0:	30303030 30303030 30303030 30303030     0000000000000000

000871f0 <blanks.6720>:
   871f0:	20202020 20202020 20202020 20202020                     

00087200 <_init>:
   87200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87202:	bf00      	nop
   87204:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87206:	bc08      	pop	{r3}
   87208:	469e      	mov	lr, r3
   8720a:	4770      	bx	lr

0008720c <__init_array_start>:
   8720c:	00085241 	.word	0x00085241

00087210 <__frame_dummy_init_array_entry>:
   87210:	00080119                                ....

00087214 <_fini>:
   87214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87216:	bf00      	nop
   87218:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8721a:	bc08      	pop	{r3}
   8721c:	469e      	mov	lr, r3
   8721e:	4770      	bx	lr

00087220 <__fini_array_start>:
   87220:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007016c 	.word	0x2007016c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f
2007012c:	00000000 	.word	0x00000000

20070130 <Td>:
20070130:	e5604189 3fab22d0                       .A`..".?

20070138 <Ti>:
20070138:	b851eb85 3fcb851e                       ..Q....?

20070140 <direction>:
20070140:	00000001                                ....

20070144 <rotationSpeed>:
20070144:	0000005a                                Z...

20070148 <dT>:
20070148:	9999999a 3fb99999                       .......?

20070150 <speed>:
20070150:	000000c8 00000000                       ........

20070158 <K>:
20070158:	00000000 40040000                       .......@

20070160 <uxCriticalNesting>:
20070160:	aaaaaaaa                                ....

20070164 <xFreeBytesRemaining>:
20070164:	00008000                                ....

20070168 <xNextTaskUnblockTime>:
20070168:	0000ffff                                ....

2007016c <SystemCoreClock>:
2007016c:	003d0900                                ..=.

20070170 <__fdlib_version>:
20070170:	00000001 00000000                       ........

20070178 <impure_data>:
20070178:	00000000 20070464 200704cc 20070534     ....d.. ... 4.. 
	...
200701ac:	000871a8 00000000 00000000 00000000     .q..............
	...
20070220:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070230:	0005deec 0000000b 00000000 00000000     ................
	...

200705a0 <_impure_ptr>:
200705a0:	20070178                                x.. 

200705a4 <lc_ctype_charset>:
200705a4:	49435341 00000049 00000000 00000000     ASCII...........
	...

200705c4 <__mb_cur_max>:
200705c4:	00000001                                ....

200705c8 <__malloc_av_>:
	...
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 

200709d0 <__malloc_trim_threshold>:
200709d0:	00020000                                ....

200709d4 <__malloc_sbrk_base>:
200709d4:	ffffffff                                ....

200709d8 <__wctomb>:
200709d8:	00086865                                eh..
