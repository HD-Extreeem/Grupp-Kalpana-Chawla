
TestSchema1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047b4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000847b4  000847b4  0000c7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  000847bc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000260  200709a4  00085160  000109a4  2**2
                  ALLOC
  4 .stack        00002004  20070c04  000853c0  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   00011fd5  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003196  00000000  00000000  000229fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007100  00000000  00000000  00025b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e58  00000000  00000000  0002cc93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d10  00000000  00000000  0002daeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b19b  00000000  00000000  0002e7fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001471d  00000000  00000000  00049996  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000689a7  00000000  00000000  0005e0b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000029fc  00000000  00000000  000c6a5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072c08 	.word	0x20072c08
   80004:	000813fd 	.word	0x000813fd
   80008:	000813f9 	.word	0x000813f9
   8000c:	000813f9 	.word	0x000813f9
   80010:	000813f9 	.word	0x000813f9
   80014:	000813f9 	.word	0x000813f9
   80018:	000813f9 	.word	0x000813f9
	...
   8002c:	00080c1d 	.word	0x00080c1d
   80030:	000813f9 	.word	0x000813f9
   80034:	00000000 	.word	0x00000000
   80038:	00080c55 	.word	0x00080c55
   8003c:	00080c91 	.word	0x00080c91
   80040:	000813f9 	.word	0x000813f9
   80044:	000813f9 	.word	0x000813f9
   80048:	000813f9 	.word	0x000813f9
   8004c:	000813f9 	.word	0x000813f9
   80050:	000813f9 	.word	0x000813f9
   80054:	000813f9 	.word	0x000813f9
   80058:	000813f9 	.word	0x000813f9
   8005c:	000813f9 	.word	0x000813f9
   80060:	000813f9 	.word	0x000813f9
   80064:	000813f9 	.word	0x000813f9
   80068:	00000000 	.word	0x00000000
   8006c:	00081269 	.word	0x00081269
   80070:	0008127d 	.word	0x0008127d
   80074:	00081291 	.word	0x00081291
   80078:	000812a5 	.word	0x000812a5
	...
   80084:	000813f9 	.word	0x000813f9
   80088:	000813f9 	.word	0x000813f9
   8008c:	000813f9 	.word	0x000813f9
   80090:	000813f9 	.word	0x000813f9
   80094:	000813f9 	.word	0x000813f9
   80098:	000813f9 	.word	0x000813f9
   8009c:	000813f9 	.word	0x000813f9
   800a0:	000813f9 	.word	0x000813f9
   800a4:	00000000 	.word	0x00000000
   800a8:	000813f9 	.word	0x000813f9
   800ac:	000813f9 	.word	0x000813f9
   800b0:	000813f9 	.word	0x000813f9
   800b4:	000813f9 	.word	0x000813f9
   800b8:	000813f9 	.word	0x000813f9
   800bc:	000813f9 	.word	0x000813f9
   800c0:	000813f9 	.word	0x000813f9
   800c4:	000813f9 	.word	0x000813f9
   800c8:	000813f9 	.word	0x000813f9
   800cc:	000813f9 	.word	0x000813f9
   800d0:	000813f9 	.word	0x000813f9
   800d4:	000813f9 	.word	0x000813f9
   800d8:	000813f9 	.word	0x000813f9
   800dc:	000813f9 	.word	0x000813f9
   800e0:	000813f9 	.word	0x000813f9
   800e4:	000813f9 	.word	0x000813f9
   800e8:	000813f9 	.word	0x000813f9
   800ec:	000813f9 	.word	0x000813f9
   800f0:	000813f9 	.word	0x000813f9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	000847bc 	.word	0x000847bc

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000847bc 	.word	0x000847bc
   8013c:	200709a8 	.word	0x200709a8
   80140:	000847bc 	.word	0x000847bc
   80144:	00000000 	.word	0x00000000

00080148 <arlo_nav_init>:
	
	return pick_up_status_t;
}

void arlo_nav_init(uint16_t *object_buffer)
{
   80148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8014a:	4605      	mov	r5, r0
	/* Get coordinate for sock */
	twi_nav_init(0x52, tx_nav_buffer, rx_nav_buffer);
   8014c:	4f16      	ldr	r7, [pc, #88]	; (801a8 <arlo_nav_init+0x60>)
   8014e:	4c17      	ldr	r4, [pc, #92]	; (801ac <arlo_nav_init+0x64>)
   80150:	2052      	movs	r0, #82	; 0x52
   80152:	4639      	mov	r1, r7
   80154:	4622      	mov	r2, r4
   80156:	4e16      	ldr	r6, [pc, #88]	; (801b0 <arlo_nav_init+0x68>)
   80158:	47b0      	blx	r6
	
	/* Convert uint8_t to uint16_t */
	object_buffer[0] = (uint16_t) ((rx_nav_buffer[1] << 8) | (rx_nav_buffer[2] << 0));
   8015a:	7862      	ldrb	r2, [r4, #1]
   8015c:	78a3      	ldrb	r3, [r4, #2]
   8015e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80162:	802b      	strh	r3, [r5, #0]
	object_buffer[1] = (uint16_t) ((rx_nav_buffer[3] << 8) | (rx_nav_buffer[4] << 0));
   80164:	78e2      	ldrb	r2, [r4, #3]
   80166:	7923      	ldrb	r3, [r4, #4]
   80168:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8016c:	806b      	strh	r3, [r5, #2]
	
	/* Get coordinate for cube */
	twi_nav_init(0x53, tx_nav_buffer, rx_nav_buffer);
   8016e:	2053      	movs	r0, #83	; 0x53
   80170:	4639      	mov	r1, r7
   80172:	4622      	mov	r2, r4
   80174:	47b0      	blx	r6
	
	/* Convert uint8_t to uint16_t */
	object_buffer[2] = (uint16_t) ((rx_nav_buffer[1] << 8) | (rx_nav_buffer[2] << 0));
   80176:	7862      	ldrb	r2, [r4, #1]
   80178:	78a3      	ldrb	r3, [r4, #2]
   8017a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8017e:	80ab      	strh	r3, [r5, #4]
	object_buffer[3] = (uint16_t) ((rx_nav_buffer[3] << 8) | (rx_nav_buffer[4] << 0));
   80180:	78e2      	ldrb	r2, [r4, #3]
   80182:	7923      	ldrb	r3, [r4, #4]
   80184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80188:	80eb      	strh	r3, [r5, #6]
		
	/* Get coordinate for glass */
	twi_nav_init(0x54, tx_nav_buffer, rx_nav_buffer);
   8018a:	2054      	movs	r0, #84	; 0x54
   8018c:	4639      	mov	r1, r7
   8018e:	4622      	mov	r2, r4
   80190:	47b0      	blx	r6
	
	/* Convert uint8_t to uint16_t */
	object_buffer[4] = (uint16_t) ((rx_nav_buffer[1] << 8) | (rx_nav_buffer[2] << 0));
   80192:	7862      	ldrb	r2, [r4, #1]
   80194:	78a3      	ldrb	r3, [r4, #2]
   80196:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8019a:	812b      	strh	r3, [r5, #8]
	object_buffer[5] = (uint16_t) ((rx_nav_buffer[3] << 8) | (rx_nav_buffer[4] << 0));
   8019c:	78e2      	ldrb	r2, [r4, #3]
   8019e:	7923      	ldrb	r3, [r4, #4]
   801a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   801a4:	816b      	strh	r3, [r5, #10]
   801a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   801a8:	200709c0 	.word	0x200709c0
   801ac:	200709c4 	.word	0x200709c4
   801b0:	00080739 	.word	0x00080739

000801b4 <arlo_init>:
uint8_t rx_nav_buffer[RX_NAV_LENGTH] = {0};

uint16_t object_buffer[6] = {0};

void arlo_init()
{
   801b4:	b538      	push	{r3, r4, r5, lr}
	// ioport_init();
	twi_init();
   801b6:	4b0a      	ldr	r3, [pc, #40]	; (801e0 <arlo_init+0x2c>)
   801b8:	4798      	blx	r3
	
	/* Initializes arm */
	// arlo_arm_init();
	
	/* Initializes nav-system */
	arlo_nav_init(object_buffer);
   801ba:	4c0a      	ldr	r4, [pc, #40]	; (801e4 <arlo_init+0x30>)
   801bc:	4620      	mov	r0, r4
   801be:	4b0a      	ldr	r3, [pc, #40]	; (801e8 <arlo_init+0x34>)
   801c0:	4798      	blx	r3
	
	printf("Position for sock: %d, %d\r\n", object_buffer[0], object_buffer[1]);
   801c2:	480a      	ldr	r0, [pc, #40]	; (801ec <arlo_init+0x38>)
   801c4:	8821      	ldrh	r1, [r4, #0]
   801c6:	8862      	ldrh	r2, [r4, #2]
   801c8:	4d09      	ldr	r5, [pc, #36]	; (801f0 <arlo_init+0x3c>)
   801ca:	47a8      	blx	r5
	printf("Position for cube: %d, %d\r\n", object_buffer[2], object_buffer[3]);
   801cc:	4809      	ldr	r0, [pc, #36]	; (801f4 <arlo_init+0x40>)
   801ce:	88a1      	ldrh	r1, [r4, #4]
   801d0:	88e2      	ldrh	r2, [r4, #6]
   801d2:	47a8      	blx	r5
	printf("Position for glass: %d, %d\r\n", object_buffer[4], object_buffer[5]);
   801d4:	4808      	ldr	r0, [pc, #32]	; (801f8 <arlo_init+0x44>)
   801d6:	8921      	ldrh	r1, [r4, #8]
   801d8:	8962      	ldrh	r2, [r4, #10]
   801da:	47a8      	blx	r5
   801dc:	bd38      	pop	{r3, r4, r5, pc}
   801de:	bf00      	nop
   801e0:	00080655 	.word	0x00080655
   801e4:	200709cc 	.word	0x200709cc
   801e8:	00080149 	.word	0x00080149
   801ec:	0008464c 	.word	0x0008464c
   801f0:	000816dd 	.word	0x000816dd
   801f4:	00084668 	.word	0x00084668
   801f8:	00084684 	.word	0x00084684

000801fc <arlo_get_position>:
	object_buffer[4] = (uint16_t) ((rx_nav_buffer[1] << 8) | (rx_nav_buffer[2] << 0));
	object_buffer[5] = (uint16_t) ((rx_nav_buffer[3] << 8) | (rx_nav_buffer[4] << 0));
}

void arlo_get_position(uint16_t *position_buffer)
{
   801fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80200:	4605      	mov	r5, r0
	/* Get first coordinate (x-coordinate) */
	tx_nav_buffer[0] = 0x50;
   80202:	4e15      	ldr	r6, [pc, #84]	; (80258 <arlo_get_position+0x5c>)
   80204:	2350      	movs	r3, #80	; 0x50
   80206:	7033      	strb	r3, [r6, #0]
	
	twi_send_packet(tx_nav_buffer, SLAVE_ADDR_NAV);
   80208:	4630      	mov	r0, r6
   8020a:	2103      	movs	r1, #3
   8020c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80264 <arlo_get_position+0x68>
   80210:	47c0      	blx	r8
	twi_request_packet(rx_nav_buffer, SLAVE_ADDR_NAV);
   80212:	4c12      	ldr	r4, [pc, #72]	; (8025c <arlo_get_position+0x60>)
   80214:	4620      	mov	r0, r4
   80216:	2103      	movs	r1, #3
   80218:	4f11      	ldr	r7, [pc, #68]	; (80260 <arlo_get_position+0x64>)
   8021a:	47b8      	blx	r7
	
	/* Convert uint8_t to uint16_t */
	position_buffer[0] = (uint16_t) ((rx_nav_buffer[1] << 8) | (rx_nav_buffer[2] << 0));
   8021c:	7862      	ldrb	r2, [r4, #1]
   8021e:	78a3      	ldrb	r3, [r4, #2]
   80220:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80224:	802b      	strh	r3, [r5, #0]
	position_buffer[1] = (uint16_t) ((rx_nav_buffer[3] << 8) | (rx_nav_buffer[4] << 0));
   80226:	78e2      	ldrb	r2, [r4, #3]
   80228:	7923      	ldrb	r3, [r4, #4]
   8022a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8022e:	806b      	strh	r3, [r5, #2]
	
	/* Get second coordinate (y-coordinate) */
	tx_nav_buffer[0] = 0x51;
   80230:	2351      	movs	r3, #81	; 0x51
   80232:	7033      	strb	r3, [r6, #0]
	
	twi_send_packet(tx_nav_buffer, SLAVE_ADDR_NAV);
   80234:	4630      	mov	r0, r6
   80236:	2103      	movs	r1, #3
   80238:	47c0      	blx	r8
	twi_request_packet(rx_nav_buffer, SLAVE_ADDR_NAV);
   8023a:	4620      	mov	r0, r4
   8023c:	2103      	movs	r1, #3
   8023e:	47b8      	blx	r7
	
	/* Convert uint8_t to uint16_t */
	position_buffer[2] = (uint16_t) ((rx_nav_buffer[1] << 8) | (rx_nav_buffer[2] << 0));
   80240:	7862      	ldrb	r2, [r4, #1]
   80242:	78a3      	ldrb	r3, [r4, #2]
   80244:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80248:	80ab      	strh	r3, [r5, #4]
	position_buffer[3] = (uint16_t) ((rx_nav_buffer[3] << 8) | (rx_nav_buffer[4] << 0));
   8024a:	78e2      	ldrb	r2, [r4, #3]
   8024c:	7923      	ldrb	r3, [r4, #4]
   8024e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80252:	80eb      	strh	r3, [r5, #6]
   80254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80258:	200709c0 	.word	0x200709c0
   8025c:	200709c4 	.word	0x200709c4
   80260:	000806e9 	.word	0x000806e9
   80264:	000806a1 	.word	0x000806a1

00080268 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8026c:	460c      	mov	r4, r1
   8026e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80270:	b960      	cbnz	r0, 8028c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80272:	2a00      	cmp	r2, #0
   80274:	dd0e      	ble.n	80294 <_read+0x2c>
   80276:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80278:	4e09      	ldr	r6, [pc, #36]	; (802a0 <_read+0x38>)
   8027a:	4d0a      	ldr	r5, [pc, #40]	; (802a4 <_read+0x3c>)
   8027c:	6830      	ldr	r0, [r6, #0]
   8027e:	4621      	mov	r1, r4
   80280:	682b      	ldr	r3, [r5, #0]
   80282:	4798      	blx	r3
		ptr++;
   80284:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80286:	42bc      	cmp	r4, r7
   80288:	d1f8      	bne.n	8027c <_read+0x14>
   8028a:	e006      	b.n	8029a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8028c:	f04f 30ff 	mov.w	r0, #4294967295
   80290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80294:	2000      	movs	r0, #0
   80296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8029a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8029c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802a0:	20070bfc 	.word	0x20070bfc
   802a4:	20070b78 	.word	0x20070b78

000802a8 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   802a8:	b4f0      	push	{r4, r5, r6, r7}
   802aa:	b08c      	sub	sp, #48	; 0x30
   802ac:	4607      	mov	r7, r0
   802ae:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   802b0:	ac01      	add	r4, sp, #4
   802b2:	4d12      	ldr	r5, [pc, #72]	; (802fc <pwm_clocks_generate+0x54>)
   802b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   802b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   802b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   802ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   802bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   802c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   802c4:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   802c6:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   802c8:	f852 4f04 	ldr.w	r4, [r2, #4]!
   802cc:	fbb6 f4f4 	udiv	r4, r6, r4
   802d0:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   802d4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   802d8:	d903      	bls.n	802e2 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   802da:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   802dc:	2b0b      	cmp	r3, #11
   802de:	d1f3      	bne.n	802c8 <pwm_clocks_generate+0x20>
   802e0:	e004      	b.n	802ec <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   802e2:	2b0a      	cmp	r3, #10
   802e4:	d805      	bhi.n	802f2 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   802e6:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   802ea:	e004      	b.n	802f6 <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   802ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
   802f0:	e001      	b.n	802f6 <pwm_clocks_generate+0x4e>
   802f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   802f6:	b00c      	add	sp, #48	; 0x30
   802f8:	bcf0      	pop	{r4, r5, r6, r7}
   802fa:	4770      	bx	lr
   802fc:	000846a4 	.word	0x000846a4

00080300 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80300:	b570      	push	{r4, r5, r6, lr}
   80302:	4606      	mov	r6, r0
   80304:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80306:	6808      	ldr	r0, [r1, #0]
   80308:	b140      	cbz	r0, 8031c <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8030a:	6889      	ldr	r1, [r1, #8]
   8030c:	4b0b      	ldr	r3, [pc, #44]	; (8033c <pwm_init+0x3c>)
   8030e:	4798      	blx	r3
   80310:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80312:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80316:	4298      	cmp	r0, r3
   80318:	d101      	bne.n	8031e <pwm_init+0x1e>
   8031a:	e00e      	b.n	8033a <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   8031c:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   8031e:	6860      	ldr	r0, [r4, #4]
   80320:	b140      	cbz	r0, 80334 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80322:	68a1      	ldr	r1, [r4, #8]
   80324:	4b05      	ldr	r3, [pc, #20]	; (8033c <pwm_init+0x3c>)
   80326:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80328:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8032c:	4298      	cmp	r0, r3
   8032e:	d004      	beq.n	8033a <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80330:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80334:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80336:	2000      	movs	r0, #0
   80338:	bd70      	pop	{r4, r5, r6, pc}
}
   8033a:	bd70      	pop	{r4, r5, r6, pc}
   8033c:	000802a9 	.word	0x000802a9

00080340 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80340:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80342:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80344:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80346:	684a      	ldr	r2, [r1, #4]
   80348:	f002 020f 	and.w	r2, r2, #15
   8034c:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   8034e:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80350:	432c      	orrs	r4, r5
   80352:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80354:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80358:	7d8a      	ldrb	r2, [r1, #22]
   8035a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   8035e:	7dca      	ldrb	r2, [r1, #23]
   80360:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80364:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80366:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   8036a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   8036e:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80372:	68cc      	ldr	r4, [r1, #12]
   80374:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80378:	690c      	ldr	r4, [r1, #16]
   8037a:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   8037e:	7d8a      	ldrb	r2, [r1, #22]
   80380:	b13a      	cbz	r2, 80392 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80382:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80384:	8b4a      	ldrh	r2, [r1, #26]
   80386:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   8038a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   8038e:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80392:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80394:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80398:	409a      	lsls	r2, r3
   8039a:	43d2      	mvns	r2, r2
   8039c:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   8039e:	7fce      	ldrb	r6, [r1, #31]
   803a0:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   803a2:	7f8c      	ldrb	r4, [r1, #30]
   803a4:	409c      	lsls	r4, r3
   803a6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   803aa:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   803ac:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   803ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
   803b0:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   803b2:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   803b6:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   803b8:	f891 4020 	ldrb.w	r4, [r1, #32]
   803bc:	409c      	lsls	r4, r3
   803be:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   803c2:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   803c4:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   803c6:	2201      	movs	r2, #1
   803c8:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   803ca:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   803ce:	b11c      	cbz	r4, 803d8 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   803d0:	6a04      	ldr	r4, [r0, #32]
   803d2:	4314      	orrs	r4, r2
   803d4:	6204      	str	r4, [r0, #32]
   803d6:	e003      	b.n	803e0 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   803d8:	6a04      	ldr	r4, [r0, #32]
   803da:	ea24 0402 	bic.w	r4, r4, r2
   803de:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   803e0:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   803e4:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   803e6:	6e84      	ldr	r4, [r0, #104]	; 0x68
   803e8:	bf0c      	ite	eq
   803ea:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   803ec:	4394      	bicne	r4, r2
   803ee:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   803f0:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   803f4:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   803f6:	6e84      	ldr	r4, [r0, #104]	; 0x68
   803f8:	bf0c      	ite	eq
   803fa:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   803fe:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80402:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80404:	2b03      	cmp	r3, #3
   80406:	d80c      	bhi.n	80422 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80408:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8040a:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   8040c:	22ff      	movs	r2, #255	; 0xff
   8040e:	409a      	lsls	r2, r3
   80410:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80414:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80418:	fa01 f303 	lsl.w	r3, r1, r3
   8041c:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8041e:	66c3      	str	r3, [r0, #108]	; 0x6c
   80420:	e00c      	b.n	8043c <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80422:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80424:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80426:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80428:	22ff      	movs	r2, #255	; 0xff
   8042a:	409a      	lsls	r2, r3
   8042c:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80430:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80434:	fa01 f303 	lsl.w	r3, r1, r3
   80438:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8043a:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   8043c:	2000      	movs	r0, #0
   8043e:	bc70      	pop	{r4, r5, r6}
   80440:	4770      	bx	lr
   80442:	bf00      	nop

00080444 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80444:	2301      	movs	r3, #1
   80446:	fa03 f101 	lsl.w	r1, r3, r1
   8044a:	6041      	str	r1, [r0, #4]
   8044c:	4770      	bx	lr
   8044e:	bf00      	nop

00080450 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80450:	2301      	movs	r3, #1
   80452:	fa03 f101 	lsl.w	r1, r3, r1
   80456:	6081      	str	r1, [r0, #8]
   80458:	4770      	bx	lr
   8045a:	bf00      	nop

0008045c <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8045c:	4b0f      	ldr	r3, [pc, #60]	; (8049c <twi_set_speed+0x40>)
   8045e:	4299      	cmp	r1, r3
   80460:	d819      	bhi.n	80496 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80462:	0049      	lsls	r1, r1, #1
   80464:	fbb2 f2f1 	udiv	r2, r2, r1
   80468:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8046a:	2aff      	cmp	r2, #255	; 0xff
   8046c:	d907      	bls.n	8047e <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8046e:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   80470:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   80472:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80474:	2aff      	cmp	r2, #255	; 0xff
   80476:	d903      	bls.n	80480 <twi_set_speed+0x24>
   80478:	2b07      	cmp	r3, #7
   8047a:	d1f9      	bne.n	80470 <twi_set_speed+0x14>
   8047c:	e000      	b.n	80480 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8047e:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80480:	0211      	lsls	r1, r2, #8
   80482:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   80484:	041b      	lsls	r3, r3, #16
   80486:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8048a:	430b      	orrs	r3, r1
   8048c:	b2d2      	uxtb	r2, r2
   8048e:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   80490:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   80492:	2000      	movs	r0, #0
   80494:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   80496:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   80498:	4770      	bx	lr
   8049a:	bf00      	nop
   8049c:	00061a80 	.word	0x00061a80

000804a0 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   804a0:	b538      	push	{r3, r4, r5, lr}
   804a2:	4604      	mov	r4, r0
   804a4:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   804a6:	f04f 33ff 	mov.w	r3, #4294967295
   804aa:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   804ac:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   804ae:	2380      	movs	r3, #128	; 0x80
   804b0:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   804b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   804b4:	2308      	movs	r3, #8
   804b6:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   804b8:	2320      	movs	r3, #32
   804ba:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   804bc:	2304      	movs	r3, #4
   804be:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   804c0:	6849      	ldr	r1, [r1, #4]
   804c2:	682a      	ldr	r2, [r5, #0]
   804c4:	4b05      	ldr	r3, [pc, #20]	; (804dc <twi_master_init+0x3c>)
   804c6:	4798      	blx	r3
   804c8:	2801      	cmp	r0, #1
   804ca:	bf14      	ite	ne
   804cc:	2000      	movne	r0, #0
   804ce:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   804d0:	7a6b      	ldrb	r3, [r5, #9]
   804d2:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   804d4:	bf04      	itt	eq
   804d6:	2340      	moveq	r3, #64	; 0x40
   804d8:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   804da:	bd38      	pop	{r3, r4, r5, pc}
   804dc:	0008045d 	.word	0x0008045d

000804e0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   804e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   804e4:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   804e6:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   804e8:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   804ea:	2b00      	cmp	r3, #0
   804ec:	d049      	beq.n	80582 <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   804ee:	2200      	movs	r2, #0
   804f0:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   804f2:	6848      	ldr	r0, [r1, #4]
   804f4:	0200      	lsls	r0, r0, #8
   804f6:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   804fa:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   804fe:	7c0d      	ldrb	r5, [r1, #16]
   80500:	042d      	lsls	r5, r5, #16
   80502:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   80506:	4328      	orrs	r0, r5
   80508:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   8050a:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8050c:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   8050e:	b15a      	cbz	r2, 80528 <twi_master_read+0x48>
		return 0;

	val = addr[0];
   80510:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   80512:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   80514:	bfc4      	itt	gt
   80516:	784d      	ldrbgt	r5, [r1, #1]
   80518:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   8051c:	2a02      	cmp	r2, #2
   8051e:	dd04      	ble.n	8052a <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   80520:	788a      	ldrb	r2, [r1, #2]
   80522:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   80526:	e000      	b.n	8052a <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80528:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8052a:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   8052c:	2b01      	cmp	r3, #1
   8052e:	d104      	bne.n	8053a <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   80530:	2203      	movs	r2, #3
   80532:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   80534:	f04f 0c01 	mov.w	ip, #1
   80538:	e02b      	b.n	80592 <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   8053a:	2201      	movs	r2, #1
   8053c:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   8053e:	f04f 0c00 	mov.w	ip, #0
   80542:	e026      	b.n	80592 <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80544:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80546:	f411 7f80 	tst.w	r1, #256	; 0x100
   8054a:	d11c      	bne.n	80586 <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   8054c:	1e55      	subs	r5, r2, #1
   8054e:	b1e2      	cbz	r2, 8058a <twi_master_read+0xaa>
   80550:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   80552:	2b01      	cmp	r3, #1
   80554:	d105      	bne.n	80562 <twi_master_read+0x82>
   80556:	f1bc 0f00 	cmp.w	ip, #0
   8055a:	d102      	bne.n	80562 <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   8055c:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   80560:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   80562:	f011 0f02 	tst.w	r1, #2
   80566:	d004      	beq.n	80572 <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   80568:	6b22      	ldr	r2, [r4, #48]	; 0x30
   8056a:	7032      	strb	r2, [r6, #0]

		cnt--;
   8056c:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   8056e:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   80570:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   80572:	2b00      	cmp	r3, #0
   80574:	d1e6      	bne.n	80544 <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80576:	6a23      	ldr	r3, [r4, #32]
   80578:	f013 0f01 	tst.w	r3, #1
   8057c:	d0fb      	beq.n	80576 <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   8057e:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   80580:	e014      	b.n	805ac <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   80582:	2001      	movs	r0, #1
   80584:	e012      	b.n	805ac <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80586:	2005      	movs	r0, #5
   80588:	e010      	b.n	805ac <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   8058a:	2009      	movs	r0, #9
   8058c:	e00e      	b.n	805ac <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8058e:	2005      	movs	r0, #5
   80590:	e00c      	b.n	805ac <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80592:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80594:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   80598:	d1f9      	bne.n	8058e <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   8059a:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   8059e:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   805a2:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   805a6:	f643 2798 	movw	r7, #15000	; 0x3a98
   805aa:	e7d2      	b.n	80552 <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   805ac:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   805b0:	4770      	bx	lr
   805b2:	bf00      	nop

000805b4 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{	
   805b4:	b470      	push	{r4, r5, r6}
   805b6:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   805b8:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   805ba:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   805bc:	2a00      	cmp	r2, #0
   805be:	d03f      	beq.n	80640 <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}
	
	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   805c0:	2400      	movs	r4, #0
   805c2:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   805c4:	7c0e      	ldrb	r6, [r1, #16]
   805c6:	0436      	lsls	r6, r6, #16
   805c8:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   805cc:	684d      	ldr	r5, [r1, #4]
   805ce:	022d      	lsls	r5, r5, #8
   805d0:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}
	
	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   805d4:	4335      	orrs	r5, r6
   805d6:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   805d8:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   805da:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   805dc:	b15c      	cbz	r4, 805f6 <twi_master_write+0x42>
		return 0;

	val = addr[0];
   805de:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   805e0:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   805e2:	bfc4      	itt	gt
   805e4:	784e      	ldrbgt	r6, [r1, #1]
   805e6:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   805ea:	2c02      	cmp	r4, #2
   805ec:	dd04      	ble.n	805f8 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   805ee:	7889      	ldrb	r1, [r1, #2]
   805f0:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   805f4:	e000      	b.n	805f8 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   805f6:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   805f8:	60dd      	str	r5, [r3, #12]
   805fa:	e00b      	b.n	80614 <twi_master_write+0x60>
		
	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   805fc:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   805fe:	f411 7f80 	tst.w	r1, #256	; 0x100
   80602:	d11f      	bne.n	80644 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80604:	f011 0f04 	tst.w	r1, #4
   80608:	d0f8      	beq.n	805fc <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   8060a:	f810 1b01 	ldrb.w	r1, [r0], #1
   8060e:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
		
	/* Send all bytes */
	while (cnt > 0) {
   80610:	3a01      	subs	r2, #1
   80612:	d007      	beq.n	80624 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   80614:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80616:	f411 7f80 	tst.w	r1, #256	; 0x100
   8061a:	d115      	bne.n	80648 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   8061c:	f011 0f04 	tst.w	r1, #4
   80620:	d1f3      	bne.n	8060a <twi_master_write+0x56>
   80622:	e7eb      	b.n	805fc <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   80624:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   80626:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   8062a:	d10f      	bne.n	8064c <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   8062c:	f012 0f04 	tst.w	r2, #4
   80630:	d0f8      	beq.n	80624 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   80632:	2202      	movs	r2, #2
   80634:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80636:	6a1a      	ldr	r2, [r3, #32]
   80638:	f012 0f01 	tst.w	r2, #1
   8063c:	d0fb      	beq.n	80636 <twi_master_write+0x82>
   8063e:	e006      	b.n	8064e <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   80640:	2001      	movs	r0, #1
   80642:	e004      	b.n	8064e <twi_master_write+0x9a>
		
	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80644:	2005      	movs	r0, #5
   80646:	e002      	b.n	8064e <twi_master_write+0x9a>
   80648:	2005      	movs	r0, #5
   8064a:	e000      	b.n	8064e <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8064c:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   8064e:	bc70      	pop	{r4, r5, r6}
   80650:	4770      	bx	lr
   80652:	bf00      	nop

00080654 <twi_init>:

twi_package_t tx_packet;
twi_package_t rx_packet;

void twi_init()
{
   80654:	b500      	push	{lr}
   80656:	b085      	sub	sp, #20
	/* Initializes TWI master options */
	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   80658:	4b0a      	ldr	r3, [pc, #40]	; (80684 <twi_init+0x30>)
   8065a:	9302      	str	r3, [sp, #8]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   8065c:	4b0a      	ldr	r3, [pc, #40]	; (80688 <twi_init+0x34>)
   8065e:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   80660:	2300      	movs	r3, #0
   80662:	f88d 300d 	strb.w	r3, [sp, #13]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80666:	2016      	movs	r0, #22
   80668:	4b08      	ldr	r3, [pc, #32]	; (8068c <twi_init+0x38>)
   8066a:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   8066c:	4808      	ldr	r0, [pc, #32]	; (80690 <twi_init+0x3c>)
   8066e:	a901      	add	r1, sp, #4
   80670:	4b08      	ldr	r3, [pc, #32]	; (80694 <twi_init+0x40>)
   80672:	4798      	blx	r3
	
	/* Initializes the TWI master driver */
	if (twi_master_setup(TWI_PORT, &opt) == TWI_SUCCESS)
   80674:	b910      	cbnz	r0, 8067c <twi_init+0x28>
	{
		printf("Master initialized\r\n");
   80676:	4808      	ldr	r0, [pc, #32]	; (80698 <twi_init+0x44>)
   80678:	4b08      	ldr	r3, [pc, #32]	; (8069c <twi_init+0x48>)
   8067a:	4798      	blx	r3
	}
}
   8067c:	b005      	add	sp, #20
   8067e:	f85d fb04 	ldr.w	pc, [sp], #4
   80682:	bf00      	nop
   80684:	000186a0 	.word	0x000186a0
   80688:	0501bd00 	.word	0x0501bd00
   8068c:	000813a1 	.word	0x000813a1
   80690:	4008c000 	.word	0x4008c000
   80694:	000804a1 	.word	0x000804a1
   80698:	000846d0 	.word	0x000846d0
   8069c:	000816dd 	.word	0x000816dd

000806a0 <twi_send_packet>:

void twi_send_packet(uint8_t *tx_buffer, uint8_t recipient_addr)
{
   806a0:	b570      	push	{r4, r5, r6, lr}
   806a2:	4604      	mov	r4, r0
   806a4:	460d      	mov	r5, r1
	printf("Sending: %d, %d, %d\r\n", tx_buffer[0], tx_buffer[1], tx_buffer[2]);
   806a6:	480b      	ldr	r0, [pc, #44]	; (806d4 <twi_send_packet+0x34>)
   806a8:	7821      	ldrb	r1, [r4, #0]
   806aa:	7862      	ldrb	r2, [r4, #1]
   806ac:	78a3      	ldrb	r3, [r4, #2]
   806ae:	4e0a      	ldr	r6, [pc, #40]	; (806d8 <twi_send_packet+0x38>)
   806b0:	47b0      	blx	r6
	
	uint8_t data_length = 0;
	if (recipient_addr == SLAVE_ADDR_ARM)
	{
		data_length = TX_ARM_LENGTH;
   806b2:	2d02      	cmp	r5, #2
   806b4:	bf14      	ite	ne
   806b6:	2101      	movne	r1, #1
   806b8:	2103      	moveq	r1, #3
	else
	{
		data_length = TX_NAV_LENGTH;
	}
	
	tx_packet.addr[0] = 0;							// TWI slave memory address data MSB
   806ba:	4b08      	ldr	r3, [pc, #32]	; (806dc <twi_send_packet+0x3c>)
   806bc:	2200      	movs	r2, #0
   806be:	701a      	strb	r2, [r3, #0]
	tx_packet.addr[1] = 0;							// TWI slave memory address data LSB
   806c0:	705a      	strb	r2, [r3, #1]
	tx_packet.addr_length = 0;						// TWI slave memory address data size
   806c2:	605a      	str	r2, [r3, #4]
	tx_packet.chip = recipient_addr;				// TWI slave bus address
   806c4:	741d      	strb	r5, [r3, #16]
	tx_packet.buffer = (void*) tx_buffer;			// transfer data source buffer
   806c6:	609c      	str	r4, [r3, #8]
	tx_packet.length = data_length;					// transfer data size (bytes)
   806c8:	60d9      	str	r1, [r3, #12]

	/* Performs a multi-byte write access then checks the result */
	uint32_t status = twi_master_write(TWI_PORT, &tx_packet);
   806ca:	4805      	ldr	r0, [pc, #20]	; (806e0 <twi_send_packet+0x40>)
   806cc:	4619      	mov	r1, r3
   806ce:	4b05      	ldr	r3, [pc, #20]	; (806e4 <twi_send_packet+0x44>)
   806d0:	4798      	blx	r3
   806d2:	bd70      	pop	{r4, r5, r6, pc}
   806d4:	000846e8 	.word	0x000846e8
   806d8:	000816dd 	.word	0x000816dd
   806dc:	20070b7c 	.word	0x20070b7c
   806e0:	4008c000 	.word	0x4008c000
   806e4:	000805b5 	.word	0x000805b5

000806e8 <twi_request_packet>:
	// printf("Status: %d\r\n", (int) status);
}

void twi_request_packet(uint8_t *rx_buffer, uint8_t recipient_addr)
{
   806e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   806ea:	4607      	mov	r7, r0
	uint8_t data_length = 0;
	if (recipient_addr == SLAVE_ADDR_ARM)
	{
		data_length = RX_ARM_LENGTH;
   806ec:	2902      	cmp	r1, #2
   806ee:	bf14      	ite	ne
   806f0:	2005      	movne	r0, #5
   806f2:	2003      	moveq	r0, #3
	else 
	{
		data_length = RX_NAV_LENGTH;
	}
	
	rx_packet.addr[0] = 0;							// TWI slave memory address data MSB
   806f4:	4b0b      	ldr	r3, [pc, #44]	; (80724 <twi_request_packet+0x3c>)
   806f6:	2200      	movs	r2, #0
   806f8:	701a      	strb	r2, [r3, #0]
	rx_packet.addr[1] = 0;							// TWI slave memory address data LSB
   806fa:	705a      	strb	r2, [r3, #1]
	rx_packet.addr_length = 0;						// TWI slave memory address data size
   806fc:	605a      	str	r2, [r3, #4]
	rx_packet.chip = recipient_addr;				// TWI slave bus address
   806fe:	7419      	strb	r1, [r3, #16]
	rx_packet.buffer = (void*) rx_buffer;			// transfer data source buffer
   80700:	609f      	str	r7, [r3, #8]
	rx_packet.length = data_length;					// transfer data size (bytes)
   80702:	60d8      	str	r0, [r3, #12]
	
	/* Performs a multi-byte read access then checks the result */
	while (twi_master_read(TWI_PORT, &rx_packet) != TWI_SUCCESS);
   80704:	4e08      	ldr	r6, [pc, #32]	; (80728 <twi_request_packet+0x40>)
   80706:	461d      	mov	r5, r3
   80708:	4c08      	ldr	r4, [pc, #32]	; (8072c <twi_request_packet+0x44>)
   8070a:	4630      	mov	r0, r6
   8070c:	4629      	mov	r1, r5
   8070e:	47a0      	blx	r4
   80710:	2800      	cmp	r0, #0
   80712:	d1fa      	bne.n	8070a <twi_request_packet+0x22>
	// indicate();
	
	printf("Sending: %d, %d, %d\r\n", rx_buffer[0], rx_buffer[1], rx_buffer[2]);
   80714:	4806      	ldr	r0, [pc, #24]	; (80730 <twi_request_packet+0x48>)
   80716:	7839      	ldrb	r1, [r7, #0]
   80718:	787a      	ldrb	r2, [r7, #1]
   8071a:	78bb      	ldrb	r3, [r7, #2]
   8071c:	4c05      	ldr	r4, [pc, #20]	; (80734 <twi_request_packet+0x4c>)
   8071e:	47a0      	blx	r4
   80720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80722:	bf00      	nop
   80724:	20070b90 	.word	0x20070b90
   80728:	4008c000 	.word	0x4008c000
   8072c:	000804e1 	.word	0x000804e1
   80730:	000846e8 	.word	0x000846e8
   80734:	000816dd 	.word	0x000816dd

00080738 <twi_nav_init>:
	twi_send_packet(tx_buffer, SLAVE_ADDR_ARM);
	twi_request_packet(rx_buffer, SLAVE_ADDR_ARM);
}

void twi_nav_init(uint8_t object_id, uint8_t *tx_nav_buffer, uint8_t *rx_nav_buffer)
{
   80738:	b510      	push	{r4, lr}
   8073a:	4614      	mov	r4, r2
	tx_nav_buffer[0] = object_id;
   8073c:	7008      	strb	r0, [r1, #0]

	twi_send_packet(tx_nav_buffer, SLAVE_ADDR_NAV);
   8073e:	4608      	mov	r0, r1
   80740:	2103      	movs	r1, #3
   80742:	4b03      	ldr	r3, [pc, #12]	; (80750 <twi_nav_init+0x18>)
   80744:	4798      	blx	r3
	twi_request_packet(rx_nav_buffer, SLAVE_ADDR_NAV);
   80746:	4620      	mov	r0, r4
   80748:	2103      	movs	r1, #3
   8074a:	4b02      	ldr	r3, [pc, #8]	; (80754 <twi_nav_init+0x1c>)
   8074c:	4798      	blx	r3
   8074e:	bd10      	pop	{r4, pc}
   80750:	000806a1 	.word	0x000806a1
   80754:	000806e9 	.word	0x000806e9

00080758 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80758:	b5f0      	push	{r4, r5, r6, r7, lr}
   8075a:	b083      	sub	sp, #12
   8075c:	4604      	mov	r4, r0
   8075e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80760:	2300      	movs	r3, #0
   80762:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80764:	4b1f      	ldr	r3, [pc, #124]	; (807e4 <usart_serial_getchar+0x8c>)
   80766:	4298      	cmp	r0, r3
   80768:	d107      	bne.n	8077a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8076a:	461f      	mov	r7, r3
   8076c:	4e1e      	ldr	r6, [pc, #120]	; (807e8 <usart_serial_getchar+0x90>)
   8076e:	4638      	mov	r0, r7
   80770:	4629      	mov	r1, r5
   80772:	47b0      	blx	r6
   80774:	2800      	cmp	r0, #0
   80776:	d1fa      	bne.n	8076e <usart_serial_getchar+0x16>
   80778:	e019      	b.n	807ae <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8077a:	4b1c      	ldr	r3, [pc, #112]	; (807ec <usart_serial_getchar+0x94>)
   8077c:	4298      	cmp	r0, r3
   8077e:	d109      	bne.n	80794 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80780:	461f      	mov	r7, r3
   80782:	4e1b      	ldr	r6, [pc, #108]	; (807f0 <usart_serial_getchar+0x98>)
   80784:	4638      	mov	r0, r7
   80786:	a901      	add	r1, sp, #4
   80788:	47b0      	blx	r6
   8078a:	2800      	cmp	r0, #0
   8078c:	d1fa      	bne.n	80784 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8078e:	9b01      	ldr	r3, [sp, #4]
   80790:	702b      	strb	r3, [r5, #0]
   80792:	e019      	b.n	807c8 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80794:	4b17      	ldr	r3, [pc, #92]	; (807f4 <usart_serial_getchar+0x9c>)
   80796:	4298      	cmp	r0, r3
   80798:	d109      	bne.n	807ae <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8079a:	461e      	mov	r6, r3
   8079c:	4c14      	ldr	r4, [pc, #80]	; (807f0 <usart_serial_getchar+0x98>)
   8079e:	4630      	mov	r0, r6
   807a0:	a901      	add	r1, sp, #4
   807a2:	47a0      	blx	r4
   807a4:	2800      	cmp	r0, #0
   807a6:	d1fa      	bne.n	8079e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   807a8:	9b01      	ldr	r3, [sp, #4]
   807aa:	702b      	strb	r3, [r5, #0]
   807ac:	e018      	b.n	807e0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   807ae:	4b12      	ldr	r3, [pc, #72]	; (807f8 <usart_serial_getchar+0xa0>)
   807b0:	429c      	cmp	r4, r3
   807b2:	d109      	bne.n	807c8 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   807b4:	461e      	mov	r6, r3
   807b6:	4c0e      	ldr	r4, [pc, #56]	; (807f0 <usart_serial_getchar+0x98>)
   807b8:	4630      	mov	r0, r6
   807ba:	a901      	add	r1, sp, #4
   807bc:	47a0      	blx	r4
   807be:	2800      	cmp	r0, #0
   807c0:	d1fa      	bne.n	807b8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   807c2:	9b01      	ldr	r3, [sp, #4]
   807c4:	702b      	strb	r3, [r5, #0]
   807c6:	e00b      	b.n	807e0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   807c8:	4b0c      	ldr	r3, [pc, #48]	; (807fc <usart_serial_getchar+0xa4>)
   807ca:	429c      	cmp	r4, r3
   807cc:	d108      	bne.n	807e0 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   807ce:	461e      	mov	r6, r3
   807d0:	4c07      	ldr	r4, [pc, #28]	; (807f0 <usart_serial_getchar+0x98>)
   807d2:	4630      	mov	r0, r6
   807d4:	a901      	add	r1, sp, #4
   807d6:	47a0      	blx	r4
   807d8:	2800      	cmp	r0, #0
   807da:	d1fa      	bne.n	807d2 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   807dc:	9b01      	ldr	r3, [sp, #4]
   807de:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   807e0:	b003      	add	sp, #12
   807e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   807e4:	400e0800 	.word	0x400e0800
   807e8:	00080bc5 	.word	0x00080bc5
   807ec:	40098000 	.word	0x40098000
   807f0:	00080b11 	.word	0x00080b11
   807f4:	4009c000 	.word	0x4009c000
   807f8:	400a0000 	.word	0x400a0000
   807fc:	400a4000 	.word	0x400a4000

00080800 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80800:	b570      	push	{r4, r5, r6, lr}
   80802:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80804:	4b21      	ldr	r3, [pc, #132]	; (8088c <usart_serial_putchar+0x8c>)
   80806:	4298      	cmp	r0, r3
   80808:	d107      	bne.n	8081a <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8080a:	461e      	mov	r6, r3
   8080c:	4d20      	ldr	r5, [pc, #128]	; (80890 <usart_serial_putchar+0x90>)
   8080e:	4630      	mov	r0, r6
   80810:	4621      	mov	r1, r4
   80812:	47a8      	blx	r5
   80814:	2800      	cmp	r0, #0
   80816:	d1fa      	bne.n	8080e <usart_serial_putchar+0xe>
   80818:	e02b      	b.n	80872 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8081a:	4b1e      	ldr	r3, [pc, #120]	; (80894 <usart_serial_putchar+0x94>)
   8081c:	4298      	cmp	r0, r3
   8081e:	d107      	bne.n	80830 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80820:	461e      	mov	r6, r3
   80822:	4d1d      	ldr	r5, [pc, #116]	; (80898 <usart_serial_putchar+0x98>)
   80824:	4630      	mov	r0, r6
   80826:	4621      	mov	r1, r4
   80828:	47a8      	blx	r5
   8082a:	2800      	cmp	r0, #0
   8082c:	d1fa      	bne.n	80824 <usart_serial_putchar+0x24>
   8082e:	e022      	b.n	80876 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80830:	4b1a      	ldr	r3, [pc, #104]	; (8089c <usart_serial_putchar+0x9c>)
   80832:	4298      	cmp	r0, r3
   80834:	d107      	bne.n	80846 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80836:	461e      	mov	r6, r3
   80838:	4d17      	ldr	r5, [pc, #92]	; (80898 <usart_serial_putchar+0x98>)
   8083a:	4630      	mov	r0, r6
   8083c:	4621      	mov	r1, r4
   8083e:	47a8      	blx	r5
   80840:	2800      	cmp	r0, #0
   80842:	d1fa      	bne.n	8083a <usart_serial_putchar+0x3a>
   80844:	e019      	b.n	8087a <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80846:	4b16      	ldr	r3, [pc, #88]	; (808a0 <usart_serial_putchar+0xa0>)
   80848:	4298      	cmp	r0, r3
   8084a:	d107      	bne.n	8085c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   8084c:	461e      	mov	r6, r3
   8084e:	4d12      	ldr	r5, [pc, #72]	; (80898 <usart_serial_putchar+0x98>)
   80850:	4630      	mov	r0, r6
   80852:	4621      	mov	r1, r4
   80854:	47a8      	blx	r5
   80856:	2800      	cmp	r0, #0
   80858:	d1fa      	bne.n	80850 <usart_serial_putchar+0x50>
   8085a:	e010      	b.n	8087e <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8085c:	4b11      	ldr	r3, [pc, #68]	; (808a4 <usart_serial_putchar+0xa4>)
   8085e:	4298      	cmp	r0, r3
   80860:	d10f      	bne.n	80882 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80862:	461e      	mov	r6, r3
   80864:	4d0c      	ldr	r5, [pc, #48]	; (80898 <usart_serial_putchar+0x98>)
   80866:	4630      	mov	r0, r6
   80868:	4621      	mov	r1, r4
   8086a:	47a8      	blx	r5
   8086c:	2800      	cmp	r0, #0
   8086e:	d1fa      	bne.n	80866 <usart_serial_putchar+0x66>
   80870:	e009      	b.n	80886 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80872:	2001      	movs	r0, #1
   80874:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80876:	2001      	movs	r0, #1
   80878:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8087a:	2001      	movs	r0, #1
   8087c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8087e:	2001      	movs	r0, #1
   80880:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80882:	2000      	movs	r0, #0
   80884:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80886:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80888:	bd70      	pop	{r4, r5, r6, pc}
   8088a:	bf00      	nop
   8088c:	400e0800 	.word	0x400e0800
   80890:	00080bb5 	.word	0x00080bb5
   80894:	40098000 	.word	0x40098000
   80898:	00080afd 	.word	0x00080afd
   8089c:	4009c000 	.word	0x4009c000
   808a0:	400a0000 	.word	0x400a0000
   808a4:	400a4000 	.word	0x400a4000

000808a8 <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   808a8:	b530      	push	{r4, r5, lr}
   808aa:	b085      	sub	sp, #20
   808ac:	2008      	movs	r0, #8
   808ae:	4d12      	ldr	r5, [pc, #72]	; (808f8 <configureConsole+0x50>)
   808b0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   808b2:	4c12      	ldr	r4, [pc, #72]	; (808fc <configureConsole+0x54>)
   808b4:	4b12      	ldr	r3, [pc, #72]	; (80900 <configureConsole+0x58>)
   808b6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   808b8:	4a12      	ldr	r2, [pc, #72]	; (80904 <configureConsole+0x5c>)
   808ba:	4b13      	ldr	r3, [pc, #76]	; (80908 <configureConsole+0x60>)
   808bc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   808be:	4a13      	ldr	r2, [pc, #76]	; (8090c <configureConsole+0x64>)
   808c0:	4b13      	ldr	r3, [pc, #76]	; (80910 <configureConsole+0x68>)
   808c2:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   808c4:	4b13      	ldr	r3, [pc, #76]	; (80914 <configureConsole+0x6c>)
   808c6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   808c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   808cc:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   808ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808d2:	9303      	str	r3, [sp, #12]
   808d4:	2008      	movs	r0, #8
   808d6:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   808d8:	4620      	mov	r0, r4
   808da:	a901      	add	r1, sp, #4
   808dc:	4b0e      	ldr	r3, [pc, #56]	; (80918 <configureConsole+0x70>)
   808de:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   808e0:	4d0e      	ldr	r5, [pc, #56]	; (8091c <configureConsole+0x74>)
   808e2:	682b      	ldr	r3, [r5, #0]
   808e4:	6898      	ldr	r0, [r3, #8]
   808e6:	2100      	movs	r1, #0
   808e8:	4c0d      	ldr	r4, [pc, #52]	; (80920 <configureConsole+0x78>)
   808ea:	47a0      	blx	r4
	setbuf(stdin, NULL);
   808ec:	682b      	ldr	r3, [r5, #0]
   808ee:	6858      	ldr	r0, [r3, #4]
   808f0:	2100      	movs	r1, #0
   808f2:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
   808f4:	b005      	add	sp, #20
   808f6:	bd30      	pop	{r4, r5, pc}
   808f8:	000813a1 	.word	0x000813a1
   808fc:	400e0800 	.word	0x400e0800
   80900:	20070bfc 	.word	0x20070bfc
   80904:	00080801 	.word	0x00080801
   80908:	20070bf8 	.word	0x20070bf8
   8090c:	00080759 	.word	0x00080759
   80910:	20070b78 	.word	0x20070b78
   80914:	0501bd00 	.word	0x0501bd00
   80918:	00080b7d 	.word	0x00080b7d
   8091c:	20070568 	.word	0x20070568
   80920:	00081885 	.word	0x00081885

00080924 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   80924:	b538      	push	{r3, r4, r5, lr}
	
	pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   80926:	2055      	movs	r0, #85	; 0x55
   80928:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8092c:	4b0b      	ldr	r3, [pc, #44]	; (8095c <initPin21+0x38>)
   8092e:	4798      	blx	r3
	/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
	PWM_pin_21.channel = PWM_CHANNEL_4;
   80930:	4b0b      	ldr	r3, [pc, #44]	; (80960 <initPin21+0x3c>)
   80932:	2404      	movs	r4, #4
   80934:	601c      	str	r4, [r3, #0]
	PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80936:	220b      	movs	r2, #11
   80938:	605a      	str	r2, [r3, #4]
	PWM_pin_21.polarity = PWM_LOW;
   8093a:	2200      	movs	r2, #0
   8093c:	729a      	strb	r2, [r3, #10]
	PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   8093e:	811a      	strh	r2, [r3, #8]
	PWM_pin_21.ul_period = 7500;
   80940:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80944:	6119      	str	r1, [r3, #16]
	PWM_pin_21.ul_duty = 0;
   80946:	60da      	str	r2, [r3, #12]
	
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   80948:	4d06      	ldr	r5, [pc, #24]	; (80964 <initPin21+0x40>)
   8094a:	4628      	mov	r0, r5
   8094c:	4619      	mov	r1, r3
   8094e:	4b06      	ldr	r3, [pc, #24]	; (80968 <initPin21+0x44>)
   80950:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80952:	4628      	mov	r0, r5
   80954:	4621      	mov	r1, r4
   80956:	4b05      	ldr	r3, [pc, #20]	; (8096c <initPin21+0x48>)
   80958:	4798      	blx	r3
   8095a:	bd38      	pop	{r3, r4, r5, pc}
   8095c:	00081061 	.word	0x00081061
   80960:	20070bcc 	.word	0x20070bcc
   80964:	40094000 	.word	0x40094000
   80968:	00080341 	.word	0x00080341
   8096c:	00080445 	.word	0x00080445

00080970 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   80970:	b538      	push	{r3, r4, r5, lr}
	
	pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   80972:	2056      	movs	r0, #86	; 0x56
   80974:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80978:	4b0b      	ldr	r3, [pc, #44]	; (809a8 <initPin22+0x38>)
   8097a:	4798      	blx	r3
	/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
	PWM_pin_22.channel = PWM_CHANNEL_5;
   8097c:	4b0b      	ldr	r3, [pc, #44]	; (809ac <initPin22+0x3c>)
   8097e:	2405      	movs	r4, #5
   80980:	601c      	str	r4, [r3, #0]
	PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80982:	220b      	movs	r2, #11
   80984:	605a      	str	r2, [r3, #4]
	PWM_pin_22.polarity = PWM_LOW;
   80986:	2200      	movs	r2, #0
   80988:	729a      	strb	r2, [r3, #10]
	PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   8098a:	811a      	strh	r2, [r3, #8]
	PWM_pin_22.ul_period = 7500;
   8098c:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80990:	6119      	str	r1, [r3, #16]
	PWM_pin_22.ul_duty = 0;
   80992:	60da      	str	r2, [r3, #12]
	
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_22);
   80994:	4d06      	ldr	r5, [pc, #24]	; (809b0 <initPin22+0x40>)
   80996:	4628      	mov	r0, r5
   80998:	4619      	mov	r1, r3
   8099a:	4b06      	ldr	r3, [pc, #24]	; (809b4 <initPin22+0x44>)
   8099c:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_5);
   8099e:	4628      	mov	r0, r5
   809a0:	4621      	mov	r1, r4
   809a2:	4b05      	ldr	r3, [pc, #20]	; (809b8 <initPin22+0x48>)
   809a4:	4798      	blx	r3
   809a6:	bd38      	pop	{r3, r4, r5, pc}
   809a8:	00081061 	.word	0x00081061
   809ac:	20070ba4 	.word	0x20070ba4
   809b0:	40094000 	.word	0x40094000
   809b4:	00080341 	.word	0x00080341
   809b8:	00080445 	.word	0x00080445

000809bc <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   809bc:	b530      	push	{r4, r5, lr}
   809be:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   809c0:	2024      	movs	r0, #36	; 0x24
   809c2:	4b0d      	ldr	r3, [pc, #52]	; (809f8 <PWM_init+0x3c>)
   809c4:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   809c6:	4c0d      	ldr	r4, [pc, #52]	; (809fc <PWM_init+0x40>)
   809c8:	4620      	mov	r0, r4
   809ca:	2104      	movs	r1, #4
   809cc:	4d0c      	ldr	r5, [pc, #48]	; (80a00 <PWM_init+0x44>)
   809ce:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   809d0:	4620      	mov	r0, r4
   809d2:	2105      	movs	r1, #5
   809d4:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   809d6:	4b0b      	ldr	r3, [pc, #44]	; (80a04 <PWM_init+0x48>)
   809d8:	9301      	str	r3, [sp, #4]
   809da:	2300      	movs	r3, #0
   809dc:	9302      	str	r3, [sp, #8]
   809de:	4b0a      	ldr	r3, [pc, #40]	; (80a08 <PWM_init+0x4c>)
   809e0:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   809e2:	4620      	mov	r0, r4
   809e4:	a901      	add	r1, sp, #4
   809e6:	4b09      	ldr	r3, [pc, #36]	; (80a0c <PWM_init+0x50>)
   809e8:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   809ea:	4b09      	ldr	r3, [pc, #36]	; (80a10 <PWM_init+0x54>)
   809ec:	4798      	blx	r3
	initPin22();
   809ee:	4b09      	ldr	r3, [pc, #36]	; (80a14 <PWM_init+0x58>)
   809f0:	4798      	blx	r3
	
}
   809f2:	b005      	add	sp, #20
   809f4:	bd30      	pop	{r4, r5, pc}
   809f6:	bf00      	nop
   809f8:	000813a1 	.word	0x000813a1
   809fc:	40094000 	.word	0x40094000
   80a00:	00080451 	.word	0x00080451
   80a04:	000f4240 	.word	0x000f4240
   80a08:	0501bd00 	.word	0x0501bd00
   80a0c:	00080301 	.word	0x00080301
   80a10:	00080925 	.word	0x00080925
   80a14:	00080971 	.word	0x00080971

00080a18 <pin12_edge_handler>:
#include <inttypes.h>
#include "StepCounter_ISR.h"
#include "consoleFunctions.h"

void pin12_edge_handler(const uint32_t id, const uint32_t index)
{
   80a18:	b508      	push	{r3, lr}
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   80a1a:	4806      	ldr	r0, [pc, #24]	; (80a34 <pin12_edge_handler+0x1c>)
   80a1c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80a20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80a24:	4b04      	ldr	r3, [pc, #16]	; (80a38 <pin12_edge_handler+0x20>)
   80a26:	4798      	blx	r3
   80a28:	b118      	cbz	r0, 80a32 <pin12_edge_handler+0x1a>
		//increase the counter value
		counter_2++;
   80a2a:	4b04      	ldr	r3, [pc, #16]	; (80a3c <pin12_edge_handler+0x24>)
   80a2c:	881a      	ldrh	r2, [r3, #0]
   80a2e:	3201      	adds	r2, #1
   80a30:	801a      	strh	r2, [r3, #0]
   80a32:	bd08      	pop	{r3, pc}
   80a34:	400e1200 	.word	0x400e1200
   80a38:	00080f6d 	.word	0x00080f6d
   80a3c:	20070bf4 	.word	0x20070bf4

00080a40 <pin14_edge_handler>:
	}
	
}

void pin14_edge_handler(const uint32_t id, const uint32_t index)
{
   80a40:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   80a42:	4806      	ldr	r0, [pc, #24]	; (80a5c <pin14_edge_handler+0x1c>)
   80a44:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80a48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80a4c:	4b04      	ldr	r3, [pc, #16]	; (80a60 <pin14_edge_handler+0x20>)
   80a4e:	4798      	blx	r3
   80a50:	b118      	cbz	r0, 80a5a <pin14_edge_handler+0x1a>
		//Increase the counter value
		counter_1++;
   80a52:	4b04      	ldr	r3, [pc, #16]	; (80a64 <pin14_edge_handler+0x24>)
   80a54:	881a      	ldrh	r2, [r3, #0]
   80a56:	3201      	adds	r2, #1
   80a58:	801a      	strh	r2, [r3, #0]
   80a5a:	bd08      	pop	{r3, pc}
   80a5c:	400e1000 	.word	0x400e1000
   80a60:	00080f6d 	.word	0x00080f6d
   80a64:	20070bf6 	.word	0x20070bf6

00080a68 <attach_interupt>:

/*
* Runs one time when program starts.
*/
void attach_interupt(void)
{
   80a68:	b570      	push	{r4, r5, r6, lr}
   80a6a:	b082      	sub	sp, #8

	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   80a6c:	200c      	movs	r0, #12
   80a6e:	4c1a      	ldr	r4, [pc, #104]	; (80ad8 <attach_interupt+0x70>)
   80a70:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);
   80a72:	200d      	movs	r0, #13
   80a74:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   80a76:	4d19      	ldr	r5, [pc, #100]	; (80adc <attach_interupt+0x74>)
   80a78:	4628      	mov	r0, r5
   80a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80a7e:	2201      	movs	r2, #1
   80a80:	4e17      	ldr	r6, [pc, #92]	; (80ae0 <attach_interupt+0x78>)
   80a82:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   80a84:	4c17      	ldr	r4, [pc, #92]	; (80ae4 <attach_interupt+0x7c>)
   80a86:	4620      	mov	r0, r4
   80a88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80a8c:	2201      	movs	r2, #1
   80a8e:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler pin51
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_RISE_EDGE, pin12_edge_handler);
   80a90:	4b15      	ldr	r3, [pc, #84]	; (80ae8 <attach_interupt+0x80>)
   80a92:	9300      	str	r3, [sp, #0]
   80a94:	4628      	mov	r0, r5
   80a96:	210d      	movs	r1, #13
   80a98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80a9c:	2370      	movs	r3, #112	; 0x70
   80a9e:	4e13      	ldr	r6, [pc, #76]	; (80aec <attach_interupt+0x84>)
   80aa0:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler pin53
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_RISE_EDGE, pin14_edge_handler);
   80aa2:	4b13      	ldr	r3, [pc, #76]	; (80af0 <attach_interupt+0x88>)
   80aa4:	9300      	str	r3, [sp, #0]
   80aa6:	4620      	mov	r0, r4
   80aa8:	210c      	movs	r1, #12
   80aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80aae:	2370      	movs	r3, #112	; 0x70
   80ab0:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   80ab2:	4628      	mov	r0, r5
   80ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80ab8:	4d0e      	ldr	r5, [pc, #56]	; (80af4 <attach_interupt+0x8c>)
   80aba:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   80abc:	4620      	mov	r0, r4
   80abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80ac2:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80ac4:	4b0c      	ldr	r3, [pc, #48]	; (80af8 <attach_interupt+0x90>)
   80ac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80aca:	601a      	str	r2, [r3, #0]
   80acc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80ad0:	601a      	str	r2, [r3, #0]
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);
	// 	NVIC_EnableIRQ((IRQn_Type) ID_USART1);
	// 	usart_enable_interrupt(CONF_UART, UART_IER_RXRDY);

}
   80ad2:	b002      	add	sp, #8
   80ad4:	bd70      	pop	{r4, r5, r6, pc}
   80ad6:	bf00      	nop
   80ad8:	000813a1 	.word	0x000813a1
   80adc:	400e1200 	.word	0x400e1200
   80ae0:	00080fc5 	.word	0x00080fc5
   80ae4:	400e1000 	.word	0x400e1000
   80ae8:	00080a19 	.word	0x00080a19
   80aec:	0008122d 	.word	0x0008122d
   80af0:	00080a41 	.word	0x00080a41
   80af4:	00081051 	.word	0x00081051
   80af8:	e000e100 	.word	0xe000e100

00080afc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80afc:	6943      	ldr	r3, [r0, #20]
   80afe:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80b02:	bf1d      	ittte	ne
   80b04:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80b08:	61c1      	strne	r1, [r0, #28]
	return 0;
   80b0a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80b0c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80b0e:	4770      	bx	lr

00080b10 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80b10:	6943      	ldr	r3, [r0, #20]
   80b12:	f013 0f01 	tst.w	r3, #1
   80b16:	d005      	beq.n	80b24 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80b18:	6983      	ldr	r3, [r0, #24]
   80b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80b1e:	600b      	str	r3, [r1, #0]

	return 0;
   80b20:	2000      	movs	r0, #0
   80b22:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80b24:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80b26:	4770      	bx	lr

00080b28 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80b2c:	460e      	mov	r6, r1
   80b2e:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80b30:	3801      	subs	r0, #1
   80b32:	2802      	cmp	r0, #2
   80b34:	d80f      	bhi.n	80b56 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80b36:	b192      	cbz	r2, 80b5e <_write+0x36>
   80b38:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80b3a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80b78 <_write+0x50>
   80b3e:	4f0d      	ldr	r7, [pc, #52]	; (80b74 <_write+0x4c>)
   80b40:	f8d8 0000 	ldr.w	r0, [r8]
   80b44:	5d31      	ldrb	r1, [r6, r4]
   80b46:	683b      	ldr	r3, [r7, #0]
   80b48:	4798      	blx	r3
   80b4a:	2800      	cmp	r0, #0
   80b4c:	db0a      	blt.n	80b64 <_write+0x3c>
			return -1;
		}
		++nChars;
   80b4e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80b50:	42a5      	cmp	r5, r4
   80b52:	d1f5      	bne.n	80b40 <_write+0x18>
   80b54:	e00a      	b.n	80b6c <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80b56:	f04f 30ff 	mov.w	r0, #4294967295
   80b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80b5e:	2000      	movs	r0, #0
   80b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80b64:	f04f 30ff 	mov.w	r0, #4294967295
   80b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80b6c:	4620      	mov	r0, r4
	}
	return nChars;
}
   80b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b72:	bf00      	nop
   80b74:	20070bf8 	.word	0x20070bf8
   80b78:	20070bfc 	.word	0x20070bfc

00080b7c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80b7c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80b7e:	23ac      	movs	r3, #172	; 0xac
   80b80:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80b82:	680a      	ldr	r2, [r1, #0]
   80b84:	684b      	ldr	r3, [r1, #4]
   80b86:	fbb2 f3f3 	udiv	r3, r2, r3
   80b8a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80b8c:	1e5c      	subs	r4, r3, #1
   80b8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80b92:	4294      	cmp	r4, r2
   80b94:	d80a      	bhi.n	80bac <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80b96:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80b98:	688b      	ldr	r3, [r1, #8]
   80b9a:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80b9c:	f240 2302 	movw	r3, #514	; 0x202
   80ba0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80ba4:	2350      	movs	r3, #80	; 0x50
   80ba6:	6003      	str	r3, [r0, #0]

	return 0;
   80ba8:	2000      	movs	r0, #0
   80baa:	e000      	b.n	80bae <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80bac:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80bae:	f85d 4b04 	ldr.w	r4, [sp], #4
   80bb2:	4770      	bx	lr

00080bb4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80bb4:	6943      	ldr	r3, [r0, #20]
   80bb6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80bba:	bf1a      	itte	ne
   80bbc:	61c1      	strne	r1, [r0, #28]
	return 0;
   80bbe:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80bc0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80bc2:	4770      	bx	lr

00080bc4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80bc4:	6943      	ldr	r3, [r0, #20]
   80bc6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80bca:	bf1d      	ittte	ne
   80bcc:	6983      	ldrne	r3, [r0, #24]
   80bce:	700b      	strbne	r3, [r1, #0]
	return 0;
   80bd0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80bd2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80bd4:	4770      	bx	lr
   80bd6:	bf00      	nop

00080bd8 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80bd8:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80bda:	685a      	ldr	r2, [r3, #4]
   80bdc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80bde:	6842      	ldr	r2, [r0, #4]
   80be0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80be2:	685a      	ldr	r2, [r3, #4]
   80be4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80be6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80be8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80bea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80bec:	6803      	ldr	r3, [r0, #0]
   80bee:	3301      	adds	r3, #1
   80bf0:	6003      	str	r3, [r0, #0]
   80bf2:	4770      	bx	lr

00080bf4 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80bf4:	6843      	ldr	r3, [r0, #4]
   80bf6:	6882      	ldr	r2, [r0, #8]
   80bf8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80bfa:	6883      	ldr	r3, [r0, #8]
   80bfc:	6842      	ldr	r2, [r0, #4]
   80bfe:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80c00:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80c02:	685a      	ldr	r2, [r3, #4]
   80c04:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80c06:	bf04      	itt	eq
   80c08:	6882      	ldreq	r2, [r0, #8]
   80c0a:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80c0c:	2200      	movs	r2, #0
   80c0e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80c10:	681a      	ldr	r2, [r3, #0]
   80c12:	3a01      	subs	r2, #1
   80c14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80c16:	6818      	ldr	r0, [r3, #0]
}
   80c18:	4770      	bx	lr
   80c1a:	bf00      	nop

00080c1c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80c1c:	4b06      	ldr	r3, [pc, #24]	; (80c38 <pxCurrentTCBConst2>)
   80c1e:	6819      	ldr	r1, [r3, #0]
   80c20:	6808      	ldr	r0, [r1, #0]
   80c22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80c26:	f380 8809 	msr	PSP, r0
   80c2a:	f04f 0000 	mov.w	r0, #0
   80c2e:	f380 8811 	msr	BASEPRI, r0
   80c32:	f04e 0e0d 	orr.w	lr, lr, #13
   80c36:	4770      	bx	lr

00080c38 <pxCurrentTCBConst2>:
   80c38:	20070ab0 	.word	0x20070ab0

00080c3c <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80c3c:	f3ef 8011 	mrs	r0, BASEPRI
   80c40:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80c44:	f381 8811 	msr	BASEPRI, r1
   80c48:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80c4a:	2000      	movs	r0, #0

00080c4c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80c4c:	f380 8811 	msr	BASEPRI, r0
   80c50:	4770      	bx	lr
   80c52:	bf00      	nop

00080c54 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80c54:	f3ef 8009 	mrs	r0, PSP
   80c58:	4b0c      	ldr	r3, [pc, #48]	; (80c8c <pxCurrentTCBConst>)
   80c5a:	681a      	ldr	r2, [r3, #0]
   80c5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80c60:	6010      	str	r0, [r2, #0]
   80c62:	e92d 4008 	stmdb	sp!, {r3, lr}
   80c66:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80c6a:	f380 8811 	msr	BASEPRI, r0
   80c6e:	f000 f8bb 	bl	80de8 <vTaskSwitchContext>
   80c72:	f04f 0000 	mov.w	r0, #0
   80c76:	f380 8811 	msr	BASEPRI, r0
   80c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80c7e:	6819      	ldr	r1, [r3, #0]
   80c80:	6808      	ldr	r0, [r1, #0]
   80c82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80c86:	f380 8809 	msr	PSP, r0
   80c8a:	4770      	bx	lr

00080c8c <pxCurrentTCBConst>:
   80c8c:	20070ab0 	.word	0x20070ab0

00080c90 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80c90:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80c96:	4b05      	ldr	r3, [pc, #20]	; (80cac <SysTick_Handler+0x1c>)
   80c98:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80c9a:	4b05      	ldr	r3, [pc, #20]	; (80cb0 <SysTick_Handler+0x20>)
   80c9c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80c9e:	4b05      	ldr	r3, [pc, #20]	; (80cb4 <SysTick_Handler+0x24>)
   80ca0:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80ca2:	2000      	movs	r0, #0
   80ca4:	4b04      	ldr	r3, [pc, #16]	; (80cb8 <SysTick_Handler+0x28>)
   80ca6:	4798      	blx	r3
   80ca8:	bd08      	pop	{r3, pc}
   80caa:	bf00      	nop
   80cac:	e000ed04 	.word	0xe000ed04
   80cb0:	00080c3d 	.word	0x00080c3d
   80cb4:	00080cbd 	.word	0x00080cbd
   80cb8:	00080c4d 	.word	0x00080c4d

00080cbc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   80cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80cc0:	4b3d      	ldr	r3, [pc, #244]	; (80db8 <vTaskIncrementTick+0xfc>)
   80cc2:	681b      	ldr	r3, [r3, #0]
   80cc4:	2b00      	cmp	r3, #0
   80cc6:	d171      	bne.n	80dac <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   80cc8:	4b3c      	ldr	r3, [pc, #240]	; (80dbc <vTaskIncrementTick+0x100>)
   80cca:	881a      	ldrh	r2, [r3, #0]
   80ccc:	3201      	adds	r2, #1
   80cce:	b292      	uxth	r2, r2
   80cd0:	801a      	strh	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80cd2:	881b      	ldrh	r3, [r3, #0]
   80cd4:	b29b      	uxth	r3, r3
   80cd6:	bb03      	cbnz	r3, 80d1a <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80cd8:	4b39      	ldr	r3, [pc, #228]	; (80dc0 <vTaskIncrementTick+0x104>)
   80cda:	681b      	ldr	r3, [r3, #0]
   80cdc:	681b      	ldr	r3, [r3, #0]
   80cde:	b11b      	cbz	r3, 80ce8 <vTaskIncrementTick+0x2c>
   80ce0:	4b38      	ldr	r3, [pc, #224]	; (80dc4 <vTaskIncrementTick+0x108>)
   80ce2:	4798      	blx	r3
   80ce4:	bf00      	nop
   80ce6:	e7fd      	b.n	80ce4 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   80ce8:	4b35      	ldr	r3, [pc, #212]	; (80dc0 <vTaskIncrementTick+0x104>)
   80cea:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80cec:	4a36      	ldr	r2, [pc, #216]	; (80dc8 <vTaskIncrementTick+0x10c>)
   80cee:	6810      	ldr	r0, [r2, #0]
   80cf0:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80cf2:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80cf4:	4a35      	ldr	r2, [pc, #212]	; (80dcc <vTaskIncrementTick+0x110>)
   80cf6:	6811      	ldr	r1, [r2, #0]
   80cf8:	3101      	adds	r1, #1
   80cfa:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80cfc:	681b      	ldr	r3, [r3, #0]
   80cfe:	681b      	ldr	r3, [r3, #0]
   80d00:	b923      	cbnz	r3, 80d0c <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80d06:	4b32      	ldr	r3, [pc, #200]	; (80dd0 <vTaskIncrementTick+0x114>)
   80d08:	801a      	strh	r2, [r3, #0]
   80d0a:	e006      	b.n	80d1a <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80d0c:	4b2c      	ldr	r3, [pc, #176]	; (80dc0 <vTaskIncrementTick+0x104>)
   80d0e:	681b      	ldr	r3, [r3, #0]
   80d10:	68db      	ldr	r3, [r3, #12]
   80d12:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80d14:	889a      	ldrh	r2, [r3, #4]
   80d16:	4b2e      	ldr	r3, [pc, #184]	; (80dd0 <vTaskIncrementTick+0x114>)
   80d18:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80d1a:	4b28      	ldr	r3, [pc, #160]	; (80dbc <vTaskIncrementTick+0x100>)
   80d1c:	881a      	ldrh	r2, [r3, #0]
   80d1e:	b292      	uxth	r2, r2
   80d20:	4b2b      	ldr	r3, [pc, #172]	; (80dd0 <vTaskIncrementTick+0x114>)
   80d22:	881b      	ldrh	r3, [r3, #0]
   80d24:	b29b      	uxth	r3, r3
   80d26:	429a      	cmp	r2, r3
   80d28:	d344      	bcc.n	80db4 <vTaskIncrementTick+0xf8>
   80d2a:	4b25      	ldr	r3, [pc, #148]	; (80dc0 <vTaskIncrementTick+0x104>)
   80d2c:	681b      	ldr	r3, [r3, #0]
   80d2e:	681b      	ldr	r3, [r3, #0]
   80d30:	b153      	cbz	r3, 80d48 <vTaskIncrementTick+0x8c>
   80d32:	4b23      	ldr	r3, [pc, #140]	; (80dc0 <vTaskIncrementTick+0x104>)
   80d34:	681b      	ldr	r3, [r3, #0]
   80d36:	68db      	ldr	r3, [r3, #12]
   80d38:	68dc      	ldr	r4, [r3, #12]
   80d3a:	88a3      	ldrh	r3, [r4, #4]
   80d3c:	4a1f      	ldr	r2, [pc, #124]	; (80dbc <vTaskIncrementTick+0x100>)
   80d3e:	8812      	ldrh	r2, [r2, #0]
   80d40:	b292      	uxth	r2, r2
   80d42:	4293      	cmp	r3, r2
   80d44:	d914      	bls.n	80d70 <vTaskIncrementTick+0xb4>
   80d46:	e00f      	b.n	80d68 <vTaskIncrementTick+0xac>
   80d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80d4c:	4b20      	ldr	r3, [pc, #128]	; (80dd0 <vTaskIncrementTick+0x114>)
   80d4e:	801a      	strh	r2, [r3, #0]
   80d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d54:	4b1a      	ldr	r3, [pc, #104]	; (80dc0 <vTaskIncrementTick+0x104>)
   80d56:	681b      	ldr	r3, [r3, #0]
   80d58:	68db      	ldr	r3, [r3, #12]
   80d5a:	68dc      	ldr	r4, [r3, #12]
   80d5c:	88a3      	ldrh	r3, [r4, #4]
   80d5e:	4a17      	ldr	r2, [pc, #92]	; (80dbc <vTaskIncrementTick+0x100>)
   80d60:	8812      	ldrh	r2, [r2, #0]
   80d62:	b292      	uxth	r2, r2
   80d64:	4293      	cmp	r3, r2
   80d66:	d907      	bls.n	80d78 <vTaskIncrementTick+0xbc>
   80d68:	4a19      	ldr	r2, [pc, #100]	; (80dd0 <vTaskIncrementTick+0x114>)
   80d6a:	8013      	strh	r3, [r2, #0]
   80d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d70:	4e18      	ldr	r6, [pc, #96]	; (80dd4 <vTaskIncrementTick+0x118>)
   80d72:	4f19      	ldr	r7, [pc, #100]	; (80dd8 <vTaskIncrementTick+0x11c>)
   80d74:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80de4 <vTaskIncrementTick+0x128>
   80d78:	1d25      	adds	r5, r4, #4
   80d7a:	4628      	mov	r0, r5
   80d7c:	47b0      	blx	r6
   80d7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80d80:	b113      	cbz	r3, 80d88 <vTaskIncrementTick+0xcc>
   80d82:	f104 0018 	add.w	r0, r4, #24
   80d86:	47b0      	blx	r6
   80d88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   80d8a:	683a      	ldr	r2, [r7, #0]
   80d8c:	4293      	cmp	r3, r2
   80d8e:	bf88      	it	hi
   80d90:	603b      	strhi	r3, [r7, #0]
   80d92:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   80d96:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80d9a:	4629      	mov	r1, r5
   80d9c:	4b0f      	ldr	r3, [pc, #60]	; (80ddc <vTaskIncrementTick+0x120>)
   80d9e:	4798      	blx	r3
   80da0:	4b07      	ldr	r3, [pc, #28]	; (80dc0 <vTaskIncrementTick+0x104>)
   80da2:	681b      	ldr	r3, [r3, #0]
   80da4:	681b      	ldr	r3, [r3, #0]
   80da6:	2b00      	cmp	r3, #0
   80da8:	d1d4      	bne.n	80d54 <vTaskIncrementTick+0x98>
   80daa:	e7cd      	b.n	80d48 <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
   80dac:	4b0c      	ldr	r3, [pc, #48]	; (80de0 <vTaskIncrementTick+0x124>)
   80dae:	681a      	ldr	r2, [r3, #0]
   80db0:	3201      	adds	r2, #1
   80db2:	601a      	str	r2, [r3, #0]
   80db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80db8:	20070aac 	.word	0x20070aac
   80dbc:	20070ab8 	.word	0x20070ab8
   80dc0:	200709dc 	.word	0x200709dc
   80dc4:	00080c3d 	.word	0x00080c3d
   80dc8:	20070abc 	.word	0x20070abc
   80dcc:	20070ab4 	.word	0x20070ab4
   80dd0:	20070138 	.word	0x20070138
   80dd4:	00080bf5 	.word	0x00080bf5
   80dd8:	200709e0 	.word	0x200709e0
   80ddc:	00080bd9 	.word	0x00080bd9
   80de0:	200709d8 	.word	0x200709d8
   80de4:	200709e4 	.word	0x200709e4

00080de8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   80de8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   80dea:	4b1d      	ldr	r3, [pc, #116]	; (80e60 <vTaskSwitchContext+0x78>)
   80dec:	681b      	ldr	r3, [r3, #0]
   80dee:	b95b      	cbnz	r3, 80e08 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80df0:	4b1c      	ldr	r3, [pc, #112]	; (80e64 <vTaskSwitchContext+0x7c>)
   80df2:	681b      	ldr	r3, [r3, #0]
   80df4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80df8:	009b      	lsls	r3, r3, #2
   80dfa:	4a1b      	ldr	r2, [pc, #108]	; (80e68 <vTaskSwitchContext+0x80>)
   80dfc:	58d3      	ldr	r3, [r2, r3]
   80dfe:	b9cb      	cbnz	r3, 80e34 <vTaskSwitchContext+0x4c>
   80e00:	4b18      	ldr	r3, [pc, #96]	; (80e64 <vTaskSwitchContext+0x7c>)
   80e02:	681b      	ldr	r3, [r3, #0]
   80e04:	b953      	cbnz	r3, 80e1c <vTaskSwitchContext+0x34>
   80e06:	e005      	b.n	80e14 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   80e08:	2201      	movs	r2, #1
   80e0a:	4b18      	ldr	r3, [pc, #96]	; (80e6c <vTaskSwitchContext+0x84>)
   80e0c:	601a      	str	r2, [r3, #0]
   80e0e:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80e10:	681a      	ldr	r2, [r3, #0]
   80e12:	b92a      	cbnz	r2, 80e20 <vTaskSwitchContext+0x38>
   80e14:	4b16      	ldr	r3, [pc, #88]	; (80e70 <vTaskSwitchContext+0x88>)
   80e16:	4798      	blx	r3
   80e18:	bf00      	nop
   80e1a:	e7fd      	b.n	80e18 <vTaskSwitchContext+0x30>
   80e1c:	4b11      	ldr	r3, [pc, #68]	; (80e64 <vTaskSwitchContext+0x7c>)
   80e1e:	4912      	ldr	r1, [pc, #72]	; (80e68 <vTaskSwitchContext+0x80>)
   80e20:	681a      	ldr	r2, [r3, #0]
   80e22:	3a01      	subs	r2, #1
   80e24:	601a      	str	r2, [r3, #0]
   80e26:	681a      	ldr	r2, [r3, #0]
   80e28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80e2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80e30:	2a00      	cmp	r2, #0
   80e32:	d0ed      	beq.n	80e10 <vTaskSwitchContext+0x28>
   80e34:	4b0b      	ldr	r3, [pc, #44]	; (80e64 <vTaskSwitchContext+0x7c>)
   80e36:	681b      	ldr	r3, [r3, #0]
   80e38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80e3c:	4a0a      	ldr	r2, [pc, #40]	; (80e68 <vTaskSwitchContext+0x80>)
   80e3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80e42:	685a      	ldr	r2, [r3, #4]
   80e44:	6852      	ldr	r2, [r2, #4]
   80e46:	605a      	str	r2, [r3, #4]
   80e48:	f103 0108 	add.w	r1, r3, #8
   80e4c:	428a      	cmp	r2, r1
   80e4e:	bf04      	itt	eq
   80e50:	6852      	ldreq	r2, [r2, #4]
   80e52:	605a      	streq	r2, [r3, #4]
   80e54:	685b      	ldr	r3, [r3, #4]
   80e56:	68da      	ldr	r2, [r3, #12]
   80e58:	4b06      	ldr	r3, [pc, #24]	; (80e74 <vTaskSwitchContext+0x8c>)
   80e5a:	601a      	str	r2, [r3, #0]
   80e5c:	bd08      	pop	{r3, pc}
   80e5e:	bf00      	nop
   80e60:	20070aac 	.word	0x20070aac
   80e64:	200709e0 	.word	0x200709e0
   80e68:	200709e4 	.word	0x200709e4
   80e6c:	20070ac0 	.word	0x20070ac0
   80e70:	00080c3d 	.word	0x00080c3d
   80e74:	20070ab0 	.word	0x20070ab0

00080e78 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80e78:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80e7a:	480e      	ldr	r0, [pc, #56]	; (80eb4 <sysclk_init+0x3c>)
   80e7c:	4b0e      	ldr	r3, [pc, #56]	; (80eb8 <sysclk_init+0x40>)
   80e7e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80e80:	2000      	movs	r0, #0
   80e82:	213e      	movs	r1, #62	; 0x3e
   80e84:	4b0d      	ldr	r3, [pc, #52]	; (80ebc <sysclk_init+0x44>)
   80e86:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80e88:	4c0d      	ldr	r4, [pc, #52]	; (80ec0 <sysclk_init+0x48>)
   80e8a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80e8c:	2800      	cmp	r0, #0
   80e8e:	d0fc      	beq.n	80e8a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80e90:	4b0c      	ldr	r3, [pc, #48]	; (80ec4 <sysclk_init+0x4c>)
   80e92:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80e94:	4a0c      	ldr	r2, [pc, #48]	; (80ec8 <sysclk_init+0x50>)
   80e96:	4b0d      	ldr	r3, [pc, #52]	; (80ecc <sysclk_init+0x54>)
   80e98:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80e9a:	4c0d      	ldr	r4, [pc, #52]	; (80ed0 <sysclk_init+0x58>)
   80e9c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80e9e:	2800      	cmp	r0, #0
   80ea0:	d0fc      	beq.n	80e9c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80ea2:	2010      	movs	r0, #16
   80ea4:	4b0b      	ldr	r3, [pc, #44]	; (80ed4 <sysclk_init+0x5c>)
   80ea6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80ea8:	4b0b      	ldr	r3, [pc, #44]	; (80ed8 <sysclk_init+0x60>)
   80eaa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80eac:	4801      	ldr	r0, [pc, #4]	; (80eb4 <sysclk_init+0x3c>)
   80eae:	4b02      	ldr	r3, [pc, #8]	; (80eb8 <sysclk_init+0x40>)
   80eb0:	4798      	blx	r3
   80eb2:	bd10      	pop	{r4, pc}
   80eb4:	0501bd00 	.word	0x0501bd00
   80eb8:	200700b1 	.word	0x200700b1
   80ebc:	0008131d 	.word	0x0008131d
   80ec0:	00081371 	.word	0x00081371
   80ec4:	00081381 	.word	0x00081381
   80ec8:	200d3f01 	.word	0x200d3f01
   80ecc:	400e0600 	.word	0x400e0600
   80ed0:	00081391 	.word	0x00081391
   80ed4:	000812b9 	.word	0x000812b9
   80ed8:	000814ad 	.word	0x000814ad

00080edc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80edc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80ede:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80ee2:	4b1b      	ldr	r3, [pc, #108]	; (80f50 <board_init+0x74>)
   80ee4:	605a      	str	r2, [r3, #4]
   80ee6:	200b      	movs	r0, #11
   80ee8:	4c1a      	ldr	r4, [pc, #104]	; (80f54 <board_init+0x78>)
   80eea:	47a0      	blx	r4
   80eec:	200c      	movs	r0, #12
   80eee:	47a0      	blx	r4
   80ef0:	200d      	movs	r0, #13
   80ef2:	47a0      	blx	r4
   80ef4:	200e      	movs	r0, #14
   80ef6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80ef8:	203b      	movs	r0, #59	; 0x3b
   80efa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80efe:	4c16      	ldr	r4, [pc, #88]	; (80f58 <board_init+0x7c>)
   80f00:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80f02:	2055      	movs	r0, #85	; 0x55
   80f04:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f08:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80f0a:	2056      	movs	r0, #86	; 0x56
   80f0c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f10:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80f12:	2068      	movs	r0, #104	; 0x68
   80f14:	4911      	ldr	r1, [pc, #68]	; (80f5c <board_init+0x80>)
   80f16:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80f18:	205c      	movs	r0, #92	; 0x5c
   80f1a:	4911      	ldr	r1, [pc, #68]	; (80f60 <board_init+0x84>)
   80f1c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80f1e:	4811      	ldr	r0, [pc, #68]	; (80f64 <board_init+0x88>)
   80f20:	f44f 7140 	mov.w	r1, #768	; 0x300
   80f24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80f28:	4b0f      	ldr	r3, [pc, #60]	; (80f68 <board_init+0x8c>)
   80f2a:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   80f2c:	2011      	movs	r0, #17
   80f2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f32:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   80f34:	2012      	movs	r0, #18
   80f36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f3a:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80f3c:	202b      	movs	r0, #43	; 0x2b
   80f3e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f42:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80f44:	202a      	movs	r0, #42	; 0x2a
   80f46:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f4a:	47a0      	blx	r4
   80f4c:	bd10      	pop	{r4, pc}
   80f4e:	bf00      	nop
   80f50:	400e1a50 	.word	0x400e1a50
   80f54:	000813a1 	.word	0x000813a1
   80f58:	00081061 	.word	0x00081061
   80f5c:	28000079 	.word	0x28000079
   80f60:	28000001 	.word	0x28000001
   80f64:	400e0e00 	.word	0x400e0e00
   80f68:	00081135 	.word	0x00081135

00080f6c <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80f6c:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80f70:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   80f74:	bf0c      	ite	eq
   80f76:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   80f78:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   80f7a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   80f7c:	bf0c      	ite	eq
   80f7e:	2000      	moveq	r0, #0
   80f80:	2001      	movne	r0, #1
   80f82:	4770      	bx	lr

00080f84 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80f84:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80f86:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80f8a:	d016      	beq.n	80fba <pio_set_peripheral+0x36>
   80f8c:	d804      	bhi.n	80f98 <pio_set_peripheral+0x14>
   80f8e:	b1c1      	cbz	r1, 80fc2 <pio_set_peripheral+0x3e>
   80f90:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80f94:	d00a      	beq.n	80fac <pio_set_peripheral+0x28>
   80f96:	e013      	b.n	80fc0 <pio_set_peripheral+0x3c>
   80f98:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80f9c:	d011      	beq.n	80fc2 <pio_set_peripheral+0x3e>
   80f9e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80fa2:	d00e      	beq.n	80fc2 <pio_set_peripheral+0x3e>
   80fa4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80fa8:	d10a      	bne.n	80fc0 <pio_set_peripheral+0x3c>
   80faa:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80fac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80fae:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80fb0:	400b      	ands	r3, r1
   80fb2:	ea23 0302 	bic.w	r3, r3, r2
   80fb6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80fb8:	e002      	b.n	80fc0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80fba:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80fbc:	4313      	orrs	r3, r2
   80fbe:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80fc0:	6042      	str	r2, [r0, #4]
   80fc2:	4770      	bx	lr

00080fc4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80fc4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80fc6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80fca:	bf14      	ite	ne
   80fcc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80fce:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80fd0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80fd4:	bf14      	ite	ne
   80fd6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80fd8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80fda:	f012 0f02 	tst.w	r2, #2
   80fde:	d002      	beq.n	80fe6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80fe0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80fe4:	e004      	b.n	80ff0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80fe6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80fea:	bf18      	it	ne
   80fec:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80ff0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80ff2:	6001      	str	r1, [r0, #0]
   80ff4:	4770      	bx	lr
   80ff6:	bf00      	nop

00080ff8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80ff8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80ffa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ffc:	9c01      	ldr	r4, [sp, #4]
   80ffe:	b10c      	cbz	r4, 81004 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81000:	6641      	str	r1, [r0, #100]	; 0x64
   81002:	e000      	b.n	81006 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81004:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81006:	b10b      	cbz	r3, 8100c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81008:	6501      	str	r1, [r0, #80]	; 0x50
   8100a:	e000      	b.n	8100e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8100c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8100e:	b10a      	cbz	r2, 81014 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81010:	6301      	str	r1, [r0, #48]	; 0x30
   81012:	e000      	b.n	81016 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81014:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81016:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81018:	6001      	str	r1, [r0, #0]
}
   8101a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8101e:	4770      	bx	lr

00081020 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   81020:	f012 0f10 	tst.w	r2, #16
   81024:	d010      	beq.n	81048 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   81026:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8102a:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   8102e:	bf14      	ite	ne
   81030:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   81034:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   81038:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   8103c:	bf14      	ite	ne
   8103e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   81042:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   81046:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   81048:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   8104c:	4770      	bx	lr
   8104e:	bf00      	nop

00081050 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   81050:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   81052:	6401      	str	r1, [r0, #64]	; 0x40
   81054:	4770      	bx	lr
   81056:	bf00      	nop

00081058 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81058:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8105a:	4770      	bx	lr

0008105c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8105c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8105e:	4770      	bx	lr

00081060 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81060:	b570      	push	{r4, r5, r6, lr}
   81062:	b082      	sub	sp, #8
   81064:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81066:	0944      	lsrs	r4, r0, #5
   81068:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   8106c:	f204 7407 	addw	r4, r4, #1799	; 0x707
   81070:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81072:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   81076:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8107a:	d030      	beq.n	810de <pio_configure_pin+0x7e>
   8107c:	d806      	bhi.n	8108c <pio_configure_pin+0x2c>
   8107e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   81082:	d00a      	beq.n	8109a <pio_configure_pin+0x3a>
   81084:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81088:	d018      	beq.n	810bc <pio_configure_pin+0x5c>
   8108a:	e049      	b.n	81120 <pio_configure_pin+0xc0>
   8108c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81090:	d030      	beq.n	810f4 <pio_configure_pin+0x94>
   81092:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81096:	d02d      	beq.n	810f4 <pio_configure_pin+0x94>
   81098:	e042      	b.n	81120 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8109a:	f000 001f 	and.w	r0, r0, #31
   8109e:	2401      	movs	r4, #1
   810a0:	4084      	lsls	r4, r0
   810a2:	4630      	mov	r0, r6
   810a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810a8:	4622      	mov	r2, r4
   810aa:	4b1f      	ldr	r3, [pc, #124]	; (81128 <pio_configure_pin+0xc8>)
   810ac:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   810ae:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   810b2:	bf14      	ite	ne
   810b4:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   810b6:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   810b8:	2001      	movs	r0, #1
   810ba:	e032      	b.n	81122 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   810bc:	f000 001f 	and.w	r0, r0, #31
   810c0:	2401      	movs	r4, #1
   810c2:	4084      	lsls	r4, r0
   810c4:	4630      	mov	r0, r6
   810c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   810ca:	4622      	mov	r2, r4
   810cc:	4b16      	ldr	r3, [pc, #88]	; (81128 <pio_configure_pin+0xc8>)
   810ce:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   810d0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   810d4:	bf14      	ite	ne
   810d6:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   810d8:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   810da:	2001      	movs	r0, #1
   810dc:	e021      	b.n	81122 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   810de:	f000 011f 	and.w	r1, r0, #31
   810e2:	2401      	movs	r4, #1
   810e4:	4630      	mov	r0, r6
   810e6:	fa04 f101 	lsl.w	r1, r4, r1
   810ea:	462a      	mov	r2, r5
   810ec:	4b0f      	ldr	r3, [pc, #60]	; (8112c <pio_configure_pin+0xcc>)
   810ee:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   810f0:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   810f2:	e016      	b.n	81122 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   810f4:	f000 011f 	and.w	r1, r0, #31
   810f8:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   810fa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   810fe:	ea05 0304 	and.w	r3, r5, r4
   81102:	9300      	str	r3, [sp, #0]
   81104:	4630      	mov	r0, r6
   81106:	fa04 f101 	lsl.w	r1, r4, r1
   8110a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8110e:	bf14      	ite	ne
   81110:	2200      	movne	r2, #0
   81112:	2201      	moveq	r2, #1
   81114:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81118:	4d05      	ldr	r5, [pc, #20]	; (81130 <pio_configure_pin+0xd0>)
   8111a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8111c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8111e:	e000      	b.n	81122 <pio_configure_pin+0xc2>

	default:
		return 0;
   81120:	2000      	movs	r0, #0
	}

	return 1;
}
   81122:	b002      	add	sp, #8
   81124:	bd70      	pop	{r4, r5, r6, pc}
   81126:	bf00      	nop
   81128:	00080f85 	.word	0x00080f85
   8112c:	00080fc5 	.word	0x00080fc5
   81130:	00080ff9 	.word	0x00080ff9

00081134 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81134:	b5f0      	push	{r4, r5, r6, r7, lr}
   81136:	b083      	sub	sp, #12
   81138:	4607      	mov	r7, r0
   8113a:	460e      	mov	r6, r1
   8113c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8113e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   81142:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81146:	d026      	beq.n	81196 <pio_configure_pin_group+0x62>
   81148:	d806      	bhi.n	81158 <pio_configure_pin_group+0x24>
   8114a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8114e:	d00a      	beq.n	81166 <pio_configure_pin_group+0x32>
   81150:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81154:	d013      	beq.n	8117e <pio_configure_pin_group+0x4a>
   81156:	e034      	b.n	811c2 <pio_configure_pin_group+0x8e>
   81158:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8115c:	d01f      	beq.n	8119e <pio_configure_pin_group+0x6a>
   8115e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81162:	d01c      	beq.n	8119e <pio_configure_pin_group+0x6a>
   81164:	e02d      	b.n	811c2 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81166:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8116a:	4632      	mov	r2, r6
   8116c:	4b16      	ldr	r3, [pc, #88]	; (811c8 <pio_configure_pin_group+0x94>)
   8116e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81170:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81174:	bf14      	ite	ne
   81176:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81178:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8117a:	2001      	movs	r0, #1
   8117c:	e022      	b.n	811c4 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8117e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81182:	4632      	mov	r2, r6
   81184:	4b10      	ldr	r3, [pc, #64]	; (811c8 <pio_configure_pin_group+0x94>)
   81186:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81188:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8118c:	bf14      	ite	ne
   8118e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81190:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81192:	2001      	movs	r0, #1
   81194:	e016      	b.n	811c4 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81196:	4b0d      	ldr	r3, [pc, #52]	; (811cc <pio_configure_pin_group+0x98>)
   81198:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8119a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8119c:	e012      	b.n	811c4 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8119e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   811a2:	f005 0301 	and.w	r3, r5, #1
   811a6:	9300      	str	r3, [sp, #0]
   811a8:	4638      	mov	r0, r7
   811aa:	4631      	mov	r1, r6
   811ac:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   811b0:	bf14      	ite	ne
   811b2:	2200      	movne	r2, #0
   811b4:	2201      	moveq	r2, #1
   811b6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   811ba:	4c05      	ldr	r4, [pc, #20]	; (811d0 <pio_configure_pin_group+0x9c>)
   811bc:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   811be:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   811c0:	e000      	b.n	811c4 <pio_configure_pin_group+0x90>

	default:
		return 0;
   811c2:	2000      	movs	r0, #0
	}

	return 1;
}
   811c4:	b003      	add	sp, #12
   811c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   811c8:	00080f85 	.word	0x00080f85
   811cc:	00080fc5 	.word	0x00080fc5
   811d0:	00080ff9 	.word	0x00080ff9

000811d4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   811d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   811d8:	4604      	mov	r4, r0
   811da:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   811dc:	4b10      	ldr	r3, [pc, #64]	; (81220 <pio_handler_process+0x4c>)
   811de:	4798      	blx	r3
   811e0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   811e2:	4620      	mov	r0, r4
   811e4:	4b0f      	ldr	r3, [pc, #60]	; (81224 <pio_handler_process+0x50>)
   811e6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   811e8:	4005      	ands	r5, r0
   811ea:	d017      	beq.n	8121c <pio_handler_process+0x48>
   811ec:	4f0e      	ldr	r7, [pc, #56]	; (81228 <pio_handler_process+0x54>)
   811ee:	f107 040c 	add.w	r4, r7, #12
   811f2:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   811f4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   811f8:	42b3      	cmp	r3, r6
   811fa:	d10a      	bne.n	81212 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   811fc:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81200:	4229      	tst	r1, r5
   81202:	d006      	beq.n	81212 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81204:	6823      	ldr	r3, [r4, #0]
   81206:	4630      	mov	r0, r6
   81208:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8120a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8120e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81212:	42bc      	cmp	r4, r7
   81214:	d002      	beq.n	8121c <pio_handler_process+0x48>
   81216:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81218:	2d00      	cmp	r5, #0
   8121a:	d1eb      	bne.n	811f4 <pio_handler_process+0x20>
   8121c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81220:	00081059 	.word	0x00081059
   81224:	0008105d 	.word	0x0008105d
   81228:	20070ac8 	.word	0x20070ac8

0008122c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   8122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8122e:	4c0b      	ldr	r4, [pc, #44]	; (8125c <pio_handler_set+0x30>)
   81230:	6824      	ldr	r4, [r4, #0]
   81232:	2c06      	cmp	r4, #6
   81234:	d810      	bhi.n	81258 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   81236:	4f0a      	ldr	r7, [pc, #40]	; (81260 <pio_handler_set+0x34>)
   81238:	0126      	lsls	r6, r4, #4
   8123a:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   8123c:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   8123e:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   81240:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   81242:	9906      	ldr	r1, [sp, #24]
   81244:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   81246:	3401      	adds	r4, #1
   81248:	4904      	ldr	r1, [pc, #16]	; (8125c <pio_handler_set+0x30>)
   8124a:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   8124c:	4611      	mov	r1, r2
   8124e:	461a      	mov	r2, r3
   81250:	4b04      	ldr	r3, [pc, #16]	; (81264 <pio_handler_set+0x38>)
   81252:	4798      	blx	r3

	return 0;
   81254:	2000      	movs	r0, #0
   81256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   81258:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   8125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8125c:	20070ac4 	.word	0x20070ac4
   81260:	20070ac8 	.word	0x20070ac8
   81264:	00081021 	.word	0x00081021

00081268 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81268:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8126a:	4802      	ldr	r0, [pc, #8]	; (81274 <PIOA_Handler+0xc>)
   8126c:	210b      	movs	r1, #11
   8126e:	4b02      	ldr	r3, [pc, #8]	; (81278 <PIOA_Handler+0x10>)
   81270:	4798      	blx	r3
   81272:	bd08      	pop	{r3, pc}
   81274:	400e0e00 	.word	0x400e0e00
   81278:	000811d5 	.word	0x000811d5

0008127c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8127c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8127e:	4802      	ldr	r0, [pc, #8]	; (81288 <PIOB_Handler+0xc>)
   81280:	210c      	movs	r1, #12
   81282:	4b02      	ldr	r3, [pc, #8]	; (8128c <PIOB_Handler+0x10>)
   81284:	4798      	blx	r3
   81286:	bd08      	pop	{r3, pc}
   81288:	400e1000 	.word	0x400e1000
   8128c:	000811d5 	.word	0x000811d5

00081290 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81290:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81292:	4802      	ldr	r0, [pc, #8]	; (8129c <PIOC_Handler+0xc>)
   81294:	210d      	movs	r1, #13
   81296:	4b02      	ldr	r3, [pc, #8]	; (812a0 <PIOC_Handler+0x10>)
   81298:	4798      	blx	r3
   8129a:	bd08      	pop	{r3, pc}
   8129c:	400e1200 	.word	0x400e1200
   812a0:	000811d5 	.word	0x000811d5

000812a4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   812a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   812a6:	4802      	ldr	r0, [pc, #8]	; (812b0 <PIOD_Handler+0xc>)
   812a8:	210e      	movs	r1, #14
   812aa:	4b02      	ldr	r3, [pc, #8]	; (812b4 <PIOD_Handler+0x10>)
   812ac:	4798      	blx	r3
   812ae:	bd08      	pop	{r3, pc}
   812b0:	400e1400 	.word	0x400e1400
   812b4:	000811d5 	.word	0x000811d5

000812b8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   812b8:	4b17      	ldr	r3, [pc, #92]	; (81318 <pmc_switch_mck_to_pllack+0x60>)
   812ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   812bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   812c0:	4310      	orrs	r0, r2
   812c2:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   812c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   812c6:	f013 0f08 	tst.w	r3, #8
   812ca:	d109      	bne.n	812e0 <pmc_switch_mck_to_pllack+0x28>
   812cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   812d0:	4911      	ldr	r1, [pc, #68]	; (81318 <pmc_switch_mck_to_pllack+0x60>)
   812d2:	e001      	b.n	812d8 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   812d4:	3b01      	subs	r3, #1
   812d6:	d019      	beq.n	8130c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   812d8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   812da:	f012 0f08 	tst.w	r2, #8
   812de:	d0f9      	beq.n	812d4 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   812e0:	4b0d      	ldr	r3, [pc, #52]	; (81318 <pmc_switch_mck_to_pllack+0x60>)
   812e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   812e4:	f022 0203 	bic.w	r2, r2, #3
   812e8:	f042 0202 	orr.w	r2, r2, #2
   812ec:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   812ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
   812f0:	f010 0008 	ands.w	r0, r0, #8
   812f4:	d10c      	bne.n	81310 <pmc_switch_mck_to_pllack+0x58>
   812f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   812fa:	4907      	ldr	r1, [pc, #28]	; (81318 <pmc_switch_mck_to_pllack+0x60>)
   812fc:	e001      	b.n	81302 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   812fe:	3b01      	subs	r3, #1
   81300:	d008      	beq.n	81314 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81302:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81304:	f012 0f08 	tst.w	r2, #8
   81308:	d0f9      	beq.n	812fe <pmc_switch_mck_to_pllack+0x46>
   8130a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8130c:	2001      	movs	r0, #1
   8130e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81310:	2000      	movs	r0, #0
   81312:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81314:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81316:	4770      	bx	lr
   81318:	400e0600 	.word	0x400e0600

0008131c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8131c:	b138      	cbz	r0, 8132e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8131e:	4911      	ldr	r1, [pc, #68]	; (81364 <pmc_switch_mainck_to_xtal+0x48>)
   81320:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81322:	4a11      	ldr	r2, [pc, #68]	; (81368 <pmc_switch_mainck_to_xtal+0x4c>)
   81324:	401a      	ands	r2, r3
   81326:	4b11      	ldr	r3, [pc, #68]	; (8136c <pmc_switch_mainck_to_xtal+0x50>)
   81328:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8132a:	620b      	str	r3, [r1, #32]
   8132c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8132e:	4a0d      	ldr	r2, [pc, #52]	; (81364 <pmc_switch_mainck_to_xtal+0x48>)
   81330:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81332:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81336:	f023 0303 	bic.w	r3, r3, #3
   8133a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8133e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81342:	0209      	lsls	r1, r1, #8
   81344:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81346:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81348:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8134a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8134c:	f013 0f01 	tst.w	r3, #1
   81350:	d0fb      	beq.n	8134a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81352:	4a04      	ldr	r2, [pc, #16]	; (81364 <pmc_switch_mainck_to_xtal+0x48>)
   81354:	6a13      	ldr	r3, [r2, #32]
   81356:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8135a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8135e:	6213      	str	r3, [r2, #32]
   81360:	4770      	bx	lr
   81362:	bf00      	nop
   81364:	400e0600 	.word	0x400e0600
   81368:	fec8fffc 	.word	0xfec8fffc
   8136c:	01370002 	.word	0x01370002

00081370 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81370:	4b02      	ldr	r3, [pc, #8]	; (8137c <pmc_osc_is_ready_mainck+0xc>)
   81372:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81374:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81378:	4770      	bx	lr
   8137a:	bf00      	nop
   8137c:	400e0600 	.word	0x400e0600

00081380 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81380:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81384:	4b01      	ldr	r3, [pc, #4]	; (8138c <pmc_disable_pllack+0xc>)
   81386:	629a      	str	r2, [r3, #40]	; 0x28
   81388:	4770      	bx	lr
   8138a:	bf00      	nop
   8138c:	400e0600 	.word	0x400e0600

00081390 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81390:	4b02      	ldr	r3, [pc, #8]	; (8139c <pmc_is_locked_pllack+0xc>)
   81392:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81394:	f000 0002 	and.w	r0, r0, #2
   81398:	4770      	bx	lr
   8139a:	bf00      	nop
   8139c:	400e0600 	.word	0x400e0600

000813a0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   813a0:	282c      	cmp	r0, #44	; 0x2c
   813a2:	d820      	bhi.n	813e6 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   813a4:	281f      	cmp	r0, #31
   813a6:	d80d      	bhi.n	813c4 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   813a8:	4b12      	ldr	r3, [pc, #72]	; (813f4 <pmc_enable_periph_clk+0x54>)
   813aa:	699a      	ldr	r2, [r3, #24]
   813ac:	2301      	movs	r3, #1
   813ae:	4083      	lsls	r3, r0
   813b0:	401a      	ands	r2, r3
   813b2:	4293      	cmp	r3, r2
   813b4:	d019      	beq.n	813ea <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   813b6:	2301      	movs	r3, #1
   813b8:	fa03 f000 	lsl.w	r0, r3, r0
   813bc:	4b0d      	ldr	r3, [pc, #52]	; (813f4 <pmc_enable_periph_clk+0x54>)
   813be:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   813c0:	2000      	movs	r0, #0
   813c2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   813c4:	4b0b      	ldr	r3, [pc, #44]	; (813f4 <pmc_enable_periph_clk+0x54>)
   813c6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   813ca:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   813cc:	2301      	movs	r3, #1
   813ce:	4083      	lsls	r3, r0
   813d0:	401a      	ands	r2, r3
   813d2:	4293      	cmp	r3, r2
   813d4:	d00b      	beq.n	813ee <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   813d6:	2301      	movs	r3, #1
   813d8:	fa03 f000 	lsl.w	r0, r3, r0
   813dc:	4b05      	ldr	r3, [pc, #20]	; (813f4 <pmc_enable_periph_clk+0x54>)
   813de:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   813e2:	2000      	movs	r0, #0
   813e4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   813e6:	2001      	movs	r0, #1
   813e8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   813ea:	2000      	movs	r0, #0
   813ec:	4770      	bx	lr
   813ee:	2000      	movs	r0, #0
}
   813f0:	4770      	bx	lr
   813f2:	bf00      	nop
   813f4:	400e0600 	.word	0x400e0600

000813f8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   813f8:	e7fe      	b.n	813f8 <Dummy_Handler>
   813fa:	bf00      	nop

000813fc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   813fc:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   813fe:	4b1e      	ldr	r3, [pc, #120]	; (81478 <Reset_Handler+0x7c>)
   81400:	4a1e      	ldr	r2, [pc, #120]	; (8147c <Reset_Handler+0x80>)
   81402:	429a      	cmp	r2, r3
   81404:	d003      	beq.n	8140e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81406:	4b1e      	ldr	r3, [pc, #120]	; (81480 <Reset_Handler+0x84>)
   81408:	4a1b      	ldr	r2, [pc, #108]	; (81478 <Reset_Handler+0x7c>)
   8140a:	429a      	cmp	r2, r3
   8140c:	d304      	bcc.n	81418 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8140e:	4b1d      	ldr	r3, [pc, #116]	; (81484 <Reset_Handler+0x88>)
   81410:	4a1d      	ldr	r2, [pc, #116]	; (81488 <Reset_Handler+0x8c>)
   81412:	429a      	cmp	r2, r3
   81414:	d30f      	bcc.n	81436 <Reset_Handler+0x3a>
   81416:	e01a      	b.n	8144e <Reset_Handler+0x52>
   81418:	4b1c      	ldr	r3, [pc, #112]	; (8148c <Reset_Handler+0x90>)
   8141a:	4c1d      	ldr	r4, [pc, #116]	; (81490 <Reset_Handler+0x94>)
   8141c:	1ae4      	subs	r4, r4, r3
   8141e:	f024 0403 	bic.w	r4, r4, #3
   81422:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81424:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81426:	4814      	ldr	r0, [pc, #80]	; (81478 <Reset_Handler+0x7c>)
   81428:	4914      	ldr	r1, [pc, #80]	; (8147c <Reset_Handler+0x80>)
   8142a:	585a      	ldr	r2, [r3, r1]
   8142c:	501a      	str	r2, [r3, r0]
   8142e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81430:	42a3      	cmp	r3, r4
   81432:	d1fa      	bne.n	8142a <Reset_Handler+0x2e>
   81434:	e7eb      	b.n	8140e <Reset_Handler+0x12>
   81436:	4b17      	ldr	r3, [pc, #92]	; (81494 <Reset_Handler+0x98>)
   81438:	4917      	ldr	r1, [pc, #92]	; (81498 <Reset_Handler+0x9c>)
   8143a:	1ac9      	subs	r1, r1, r3
   8143c:	f021 0103 	bic.w	r1, r1, #3
   81440:	1d1a      	adds	r2, r3, #4
   81442:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81444:	2200      	movs	r2, #0
   81446:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8144a:	428b      	cmp	r3, r1
   8144c:	d1fb      	bne.n	81446 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8144e:	4a13      	ldr	r2, [pc, #76]	; (8149c <Reset_Handler+0xa0>)
   81450:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81454:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81458:	4911      	ldr	r1, [pc, #68]	; (814a0 <Reset_Handler+0xa4>)
   8145a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8145c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81460:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81464:	d203      	bcs.n	8146e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81466:	688a      	ldr	r2, [r1, #8]
   81468:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8146c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8146e:	4b0d      	ldr	r3, [pc, #52]	; (814a4 <Reset_Handler+0xa8>)
   81470:	4798      	blx	r3

	/* Branch to main function */
	main();
   81472:	4b0d      	ldr	r3, [pc, #52]	; (814a8 <Reset_Handler+0xac>)
   81474:	4798      	blx	r3
   81476:	e7fe      	b.n	81476 <Reset_Handler+0x7a>
   81478:	20070000 	.word	0x20070000
   8147c:	000847bc 	.word	0x000847bc
   81480:	200709a4 	.word	0x200709a4
   81484:	20070c04 	.word	0x20070c04
   81488:	200709a4 	.word	0x200709a4
   8148c:	20070004 	.word	0x20070004
   81490:	200709a7 	.word	0x200709a7
   81494:	200709a0 	.word	0x200709a0
   81498:	20070bff 	.word	0x20070bff
   8149c:	00080000 	.word	0x00080000
   814a0:	e000ed00 	.word	0xe000ed00
   814a4:	0008168d 	.word	0x0008168d
   814a8:	00081619 	.word	0x00081619

000814ac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   814ac:	4b3e      	ldr	r3, [pc, #248]	; (815a8 <SystemCoreClockUpdate+0xfc>)
   814ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   814b0:	f003 0303 	and.w	r3, r3, #3
   814b4:	2b03      	cmp	r3, #3
   814b6:	d85f      	bhi.n	81578 <SystemCoreClockUpdate+0xcc>
   814b8:	e8df f003 	tbb	[pc, r3]
   814bc:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   814c0:	4b3a      	ldr	r3, [pc, #232]	; (815ac <SystemCoreClockUpdate+0x100>)
   814c2:	695b      	ldr	r3, [r3, #20]
   814c4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   814c8:	bf14      	ite	ne
   814ca:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   814ce:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   814d2:	4b37      	ldr	r3, [pc, #220]	; (815b0 <SystemCoreClockUpdate+0x104>)
   814d4:	601a      	str	r2, [r3, #0]
   814d6:	e04f      	b.n	81578 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   814d8:	4b33      	ldr	r3, [pc, #204]	; (815a8 <SystemCoreClockUpdate+0xfc>)
   814da:	6a1b      	ldr	r3, [r3, #32]
   814dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   814e0:	d003      	beq.n	814ea <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   814e2:	4a34      	ldr	r2, [pc, #208]	; (815b4 <SystemCoreClockUpdate+0x108>)
   814e4:	4b32      	ldr	r3, [pc, #200]	; (815b0 <SystemCoreClockUpdate+0x104>)
   814e6:	601a      	str	r2, [r3, #0]
   814e8:	e046      	b.n	81578 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   814ea:	4a33      	ldr	r2, [pc, #204]	; (815b8 <SystemCoreClockUpdate+0x10c>)
   814ec:	4b30      	ldr	r3, [pc, #192]	; (815b0 <SystemCoreClockUpdate+0x104>)
   814ee:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   814f0:	4b2d      	ldr	r3, [pc, #180]	; (815a8 <SystemCoreClockUpdate+0xfc>)
   814f2:	6a1b      	ldr	r3, [r3, #32]
   814f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   814f8:	2b10      	cmp	r3, #16
   814fa:	d002      	beq.n	81502 <SystemCoreClockUpdate+0x56>
   814fc:	2b20      	cmp	r3, #32
   814fe:	d004      	beq.n	8150a <SystemCoreClockUpdate+0x5e>
   81500:	e03a      	b.n	81578 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81502:	4a2e      	ldr	r2, [pc, #184]	; (815bc <SystemCoreClockUpdate+0x110>)
   81504:	4b2a      	ldr	r3, [pc, #168]	; (815b0 <SystemCoreClockUpdate+0x104>)
   81506:	601a      	str	r2, [r3, #0]
				break;
   81508:	e036      	b.n	81578 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8150a:	4a2a      	ldr	r2, [pc, #168]	; (815b4 <SystemCoreClockUpdate+0x108>)
   8150c:	4b28      	ldr	r3, [pc, #160]	; (815b0 <SystemCoreClockUpdate+0x104>)
   8150e:	601a      	str	r2, [r3, #0]
				break;
   81510:	e032      	b.n	81578 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81512:	4b25      	ldr	r3, [pc, #148]	; (815a8 <SystemCoreClockUpdate+0xfc>)
   81514:	6a1b      	ldr	r3, [r3, #32]
   81516:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8151a:	d003      	beq.n	81524 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8151c:	4a25      	ldr	r2, [pc, #148]	; (815b4 <SystemCoreClockUpdate+0x108>)
   8151e:	4b24      	ldr	r3, [pc, #144]	; (815b0 <SystemCoreClockUpdate+0x104>)
   81520:	601a      	str	r2, [r3, #0]
   81522:	e012      	b.n	8154a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81524:	4a24      	ldr	r2, [pc, #144]	; (815b8 <SystemCoreClockUpdate+0x10c>)
   81526:	4b22      	ldr	r3, [pc, #136]	; (815b0 <SystemCoreClockUpdate+0x104>)
   81528:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8152a:	4b1f      	ldr	r3, [pc, #124]	; (815a8 <SystemCoreClockUpdate+0xfc>)
   8152c:	6a1b      	ldr	r3, [r3, #32]
   8152e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81532:	2b10      	cmp	r3, #16
   81534:	d002      	beq.n	8153c <SystemCoreClockUpdate+0x90>
   81536:	2b20      	cmp	r3, #32
   81538:	d004      	beq.n	81544 <SystemCoreClockUpdate+0x98>
   8153a:	e006      	b.n	8154a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8153c:	4a1f      	ldr	r2, [pc, #124]	; (815bc <SystemCoreClockUpdate+0x110>)
   8153e:	4b1c      	ldr	r3, [pc, #112]	; (815b0 <SystemCoreClockUpdate+0x104>)
   81540:	601a      	str	r2, [r3, #0]
				break;
   81542:	e002      	b.n	8154a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81544:	4a1b      	ldr	r2, [pc, #108]	; (815b4 <SystemCoreClockUpdate+0x108>)
   81546:	4b1a      	ldr	r3, [pc, #104]	; (815b0 <SystemCoreClockUpdate+0x104>)
   81548:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8154a:	4b17      	ldr	r3, [pc, #92]	; (815a8 <SystemCoreClockUpdate+0xfc>)
   8154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8154e:	f003 0303 	and.w	r3, r3, #3
   81552:	2b02      	cmp	r3, #2
   81554:	d10d      	bne.n	81572 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81556:	4b14      	ldr	r3, [pc, #80]	; (815a8 <SystemCoreClockUpdate+0xfc>)
   81558:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8155a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   8155c:	4b14      	ldr	r3, [pc, #80]	; (815b0 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8155e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81562:	681a      	ldr	r2, [r3, #0]
   81564:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81568:	b2c9      	uxtb	r1, r1
   8156a:	fbb2 f2f1 	udiv	r2, r2, r1
   8156e:	601a      	str	r2, [r3, #0]
   81570:	e002      	b.n	81578 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81572:	4a13      	ldr	r2, [pc, #76]	; (815c0 <SystemCoreClockUpdate+0x114>)
   81574:	4b0e      	ldr	r3, [pc, #56]	; (815b0 <SystemCoreClockUpdate+0x104>)
   81576:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81578:	4b0b      	ldr	r3, [pc, #44]	; (815a8 <SystemCoreClockUpdate+0xfc>)
   8157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8157c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81580:	2b70      	cmp	r3, #112	; 0x70
   81582:	d107      	bne.n	81594 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81584:	4b0a      	ldr	r3, [pc, #40]	; (815b0 <SystemCoreClockUpdate+0x104>)
   81586:	681a      	ldr	r2, [r3, #0]
   81588:	490e      	ldr	r1, [pc, #56]	; (815c4 <SystemCoreClockUpdate+0x118>)
   8158a:	fba1 0202 	umull	r0, r2, r1, r2
   8158e:	0852      	lsrs	r2, r2, #1
   81590:	601a      	str	r2, [r3, #0]
   81592:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81594:	4b04      	ldr	r3, [pc, #16]	; (815a8 <SystemCoreClockUpdate+0xfc>)
   81596:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81598:	4b05      	ldr	r3, [pc, #20]	; (815b0 <SystemCoreClockUpdate+0x104>)
   8159a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   8159e:	681a      	ldr	r2, [r3, #0]
   815a0:	40ca      	lsrs	r2, r1
   815a2:	601a      	str	r2, [r3, #0]
   815a4:	4770      	bx	lr
   815a6:	bf00      	nop
   815a8:	400e0600 	.word	0x400e0600
   815ac:	400e1a10 	.word	0x400e1a10
   815b0:	2007013c 	.word	0x2007013c
   815b4:	00b71b00 	.word	0x00b71b00
   815b8:	003d0900 	.word	0x003d0900
   815bc:	007a1200 	.word	0x007a1200
   815c0:	0e4e1c00 	.word	0x0e4e1c00
   815c4:	aaaaaaab 	.word	0xaaaaaaab

000815c8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   815c8:	4b09      	ldr	r3, [pc, #36]	; (815f0 <_sbrk+0x28>)
   815ca:	681b      	ldr	r3, [r3, #0]
   815cc:	b913      	cbnz	r3, 815d4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   815ce:	4a09      	ldr	r2, [pc, #36]	; (815f4 <_sbrk+0x2c>)
   815d0:	4b07      	ldr	r3, [pc, #28]	; (815f0 <_sbrk+0x28>)
   815d2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   815d4:	4b06      	ldr	r3, [pc, #24]	; (815f0 <_sbrk+0x28>)
   815d6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   815d8:	181a      	adds	r2, r3, r0
   815da:	4907      	ldr	r1, [pc, #28]	; (815f8 <_sbrk+0x30>)
   815dc:	4291      	cmp	r1, r2
   815de:	db04      	blt.n	815ea <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   815e0:	4610      	mov	r0, r2
   815e2:	4a03      	ldr	r2, [pc, #12]	; (815f0 <_sbrk+0x28>)
   815e4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   815e6:	4618      	mov	r0, r3
   815e8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   815ea:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   815ee:	4770      	bx	lr
   815f0:	20070b38 	.word	0x20070b38
   815f4:	20072c08 	.word	0x20072c08
   815f8:	20087ffc 	.word	0x20087ffc

000815fc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   815fc:	f04f 30ff 	mov.w	r0, #4294967295
   81600:	4770      	bx	lr
   81602:	bf00      	nop

00081604 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81608:	604b      	str	r3, [r1, #4]

	return 0;
}
   8160a:	2000      	movs	r0, #0
   8160c:	4770      	bx	lr
   8160e:	bf00      	nop

00081610 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81610:	2001      	movs	r0, #1
   81612:	4770      	bx	lr

00081614 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81614:	2000      	movs	r0, #0
   81616:	4770      	bx	lr

00081618 <main>:
 xTaskHandle xTaskCoordinate=NULL;

uint16_t pos_buffer[4] = {0}; 

int main (void)
{
   81618:	b580      	push	{r7, lr}
	sysclk_init();
   8161a:	4b0f      	ldr	r3, [pc, #60]	; (81658 <main+0x40>)
   8161c:	4798      	blx	r3
	board_init();
   8161e:	4b0f      	ldr	r3, [pc, #60]	; (8165c <main+0x44>)
   81620:	4798      	blx	r3
	configureConsole();
   81622:	4b0f      	ldr	r3, [pc, #60]	; (81660 <main+0x48>)
   81624:	4798      	blx	r3
	attach_interupt();
   81626:	4b0f      	ldr	r3, [pc, #60]	; (81664 <main+0x4c>)
   81628:	4798      	blx	r3
	PWM_init();
   8162a:	4b0f      	ldr	r3, [pc, #60]	; (81668 <main+0x50>)
   8162c:	4798      	blx	r3
	
	/* Arlo robot initialization */
	arlo_init();
   8162e:	4b0f      	ldr	r3, [pc, #60]	; (8166c <main+0x54>)
   81630:	4798      	blx	r3
	// coordinatesInit();
	
	while(1)
	{
		arlo_get_position(pos_buffer);
   81632:	4c0f      	ldr	r4, [pc, #60]	; (81670 <main+0x58>)
   81634:	4f0f      	ldr	r7, [pc, #60]	; (81674 <main+0x5c>)
		printf("Position (x1, y1): %d, %d\r\n", pos_buffer[0], pos_buffer[1]);
   81636:	4e10      	ldr	r6, [pc, #64]	; (81678 <main+0x60>)
	arlo_init();
	// coordinatesInit();
	
	while(1)
	{
		arlo_get_position(pos_buffer);
   81638:	4620      	mov	r0, r4
   8163a:	47b8      	blx	r7
		printf("Position (x1, y1): %d, %d\r\n", pos_buffer[0], pos_buffer[1]);
   8163c:	4630      	mov	r0, r6
   8163e:	8821      	ldrh	r1, [r4, #0]
   81640:	8862      	ldrh	r2, [r4, #2]
   81642:	4d0e      	ldr	r5, [pc, #56]	; (8167c <main+0x64>)
   81644:	47a8      	blx	r5
		printf("Position (x2, y2): %d, %d\r\n", pos_buffer[2], pos_buffer[3]);
   81646:	480e      	ldr	r0, [pc, #56]	; (81680 <main+0x68>)
   81648:	88a1      	ldrh	r1, [r4, #4]
   8164a:	88e2      	ldrh	r2, [r4, #6]
   8164c:	47a8      	blx	r5
		
		delay_ms(800);
   8164e:	480d      	ldr	r0, [pc, #52]	; (81684 <main+0x6c>)
   81650:	4b0d      	ldr	r3, [pc, #52]	; (81688 <main+0x70>)
   81652:	4798      	blx	r3
   81654:	e7f0      	b.n	81638 <main+0x20>
   81656:	bf00      	nop
   81658:	00080e79 	.word	0x00080e79
   8165c:	00080edd 	.word	0x00080edd
   81660:	000808a9 	.word	0x000808a9
   81664:	00080a69 	.word	0x00080a69
   81668:	000809bd 	.word	0x000809bd
   8166c:	000801b5 	.word	0x000801b5
   81670:	20070b3c 	.word	0x20070b3c
   81674:	000801fd 	.word	0x000801fd
   81678:	00084700 	.word	0x00084700
   8167c:	000816dd 	.word	0x000816dd
   81680:	0008471c 	.word	0x0008471c
   81684:	00493e00 	.word	0x00493e00
   81688:	20070001 	.word	0x20070001

0008168c <__libc_init_array>:
   8168c:	b570      	push	{r4, r5, r6, lr}
   8168e:	4e0f      	ldr	r6, [pc, #60]	; (816cc <__libc_init_array+0x40>)
   81690:	4d0f      	ldr	r5, [pc, #60]	; (816d0 <__libc_init_array+0x44>)
   81692:	1b76      	subs	r6, r6, r5
   81694:	10b6      	asrs	r6, r6, #2
   81696:	d007      	beq.n	816a8 <__libc_init_array+0x1c>
   81698:	3d04      	subs	r5, #4
   8169a:	2400      	movs	r4, #0
   8169c:	3401      	adds	r4, #1
   8169e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   816a2:	4798      	blx	r3
   816a4:	42a6      	cmp	r6, r4
   816a6:	d1f9      	bne.n	8169c <__libc_init_array+0x10>
   816a8:	4e0a      	ldr	r6, [pc, #40]	; (816d4 <__libc_init_array+0x48>)
   816aa:	4d0b      	ldr	r5, [pc, #44]	; (816d8 <__libc_init_array+0x4c>)
   816ac:	f003 f870 	bl	84790 <_init>
   816b0:	1b76      	subs	r6, r6, r5
   816b2:	10b6      	asrs	r6, r6, #2
   816b4:	d008      	beq.n	816c8 <__libc_init_array+0x3c>
   816b6:	3d04      	subs	r5, #4
   816b8:	2400      	movs	r4, #0
   816ba:	3401      	adds	r4, #1
   816bc:	f855 3f04 	ldr.w	r3, [r5, #4]!
   816c0:	4798      	blx	r3
   816c2:	42a6      	cmp	r6, r4
   816c4:	d1f9      	bne.n	816ba <__libc_init_array+0x2e>
   816c6:	bd70      	pop	{r4, r5, r6, pc}
   816c8:	bd70      	pop	{r4, r5, r6, pc}
   816ca:	bf00      	nop
   816cc:	0008479c 	.word	0x0008479c
   816d0:	0008479c 	.word	0x0008479c
   816d4:	000847a4 	.word	0x000847a4
   816d8:	0008479c 	.word	0x0008479c

000816dc <iprintf>:
   816dc:	b40f      	push	{r0, r1, r2, r3}
   816de:	b510      	push	{r4, lr}
   816e0:	4b07      	ldr	r3, [pc, #28]	; (81700 <iprintf+0x24>)
   816e2:	b082      	sub	sp, #8
   816e4:	ac04      	add	r4, sp, #16
   816e6:	f854 2b04 	ldr.w	r2, [r4], #4
   816ea:	6818      	ldr	r0, [r3, #0]
   816ec:	4623      	mov	r3, r4
   816ee:	6881      	ldr	r1, [r0, #8]
   816f0:	9401      	str	r4, [sp, #4]
   816f2:	f000 f9bb 	bl	81a6c <_vfiprintf_r>
   816f6:	b002      	add	sp, #8
   816f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   816fc:	b004      	add	sp, #16
   816fe:	4770      	bx	lr
   81700:	20070568 	.word	0x20070568

00081704 <memcpy>:
   81704:	4684      	mov	ip, r0
   81706:	ea41 0300 	orr.w	r3, r1, r0
   8170a:	f013 0303 	ands.w	r3, r3, #3
   8170e:	d149      	bne.n	817a4 <memcpy+0xa0>
   81710:	3a40      	subs	r2, #64	; 0x40
   81712:	d323      	bcc.n	8175c <memcpy+0x58>
   81714:	680b      	ldr	r3, [r1, #0]
   81716:	6003      	str	r3, [r0, #0]
   81718:	684b      	ldr	r3, [r1, #4]
   8171a:	6043      	str	r3, [r0, #4]
   8171c:	688b      	ldr	r3, [r1, #8]
   8171e:	6083      	str	r3, [r0, #8]
   81720:	68cb      	ldr	r3, [r1, #12]
   81722:	60c3      	str	r3, [r0, #12]
   81724:	690b      	ldr	r3, [r1, #16]
   81726:	6103      	str	r3, [r0, #16]
   81728:	694b      	ldr	r3, [r1, #20]
   8172a:	6143      	str	r3, [r0, #20]
   8172c:	698b      	ldr	r3, [r1, #24]
   8172e:	6183      	str	r3, [r0, #24]
   81730:	69cb      	ldr	r3, [r1, #28]
   81732:	61c3      	str	r3, [r0, #28]
   81734:	6a0b      	ldr	r3, [r1, #32]
   81736:	6203      	str	r3, [r0, #32]
   81738:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8173a:	6243      	str	r3, [r0, #36]	; 0x24
   8173c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8173e:	6283      	str	r3, [r0, #40]	; 0x28
   81740:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81742:	62c3      	str	r3, [r0, #44]	; 0x2c
   81744:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81746:	6303      	str	r3, [r0, #48]	; 0x30
   81748:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8174a:	6343      	str	r3, [r0, #52]	; 0x34
   8174c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8174e:	6383      	str	r3, [r0, #56]	; 0x38
   81750:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81752:	63c3      	str	r3, [r0, #60]	; 0x3c
   81754:	3040      	adds	r0, #64	; 0x40
   81756:	3140      	adds	r1, #64	; 0x40
   81758:	3a40      	subs	r2, #64	; 0x40
   8175a:	d2db      	bcs.n	81714 <memcpy+0x10>
   8175c:	3230      	adds	r2, #48	; 0x30
   8175e:	d30b      	bcc.n	81778 <memcpy+0x74>
   81760:	680b      	ldr	r3, [r1, #0]
   81762:	6003      	str	r3, [r0, #0]
   81764:	684b      	ldr	r3, [r1, #4]
   81766:	6043      	str	r3, [r0, #4]
   81768:	688b      	ldr	r3, [r1, #8]
   8176a:	6083      	str	r3, [r0, #8]
   8176c:	68cb      	ldr	r3, [r1, #12]
   8176e:	60c3      	str	r3, [r0, #12]
   81770:	3010      	adds	r0, #16
   81772:	3110      	adds	r1, #16
   81774:	3a10      	subs	r2, #16
   81776:	d2f3      	bcs.n	81760 <memcpy+0x5c>
   81778:	320c      	adds	r2, #12
   8177a:	d305      	bcc.n	81788 <memcpy+0x84>
   8177c:	f851 3b04 	ldr.w	r3, [r1], #4
   81780:	f840 3b04 	str.w	r3, [r0], #4
   81784:	3a04      	subs	r2, #4
   81786:	d2f9      	bcs.n	8177c <memcpy+0x78>
   81788:	3204      	adds	r2, #4
   8178a:	d008      	beq.n	8179e <memcpy+0x9a>
   8178c:	07d2      	lsls	r2, r2, #31
   8178e:	bf1c      	itt	ne
   81790:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81794:	f800 3b01 	strbne.w	r3, [r0], #1
   81798:	d301      	bcc.n	8179e <memcpy+0x9a>
   8179a:	880b      	ldrh	r3, [r1, #0]
   8179c:	8003      	strh	r3, [r0, #0]
   8179e:	4660      	mov	r0, ip
   817a0:	4770      	bx	lr
   817a2:	bf00      	nop
   817a4:	2a08      	cmp	r2, #8
   817a6:	d313      	bcc.n	817d0 <memcpy+0xcc>
   817a8:	078b      	lsls	r3, r1, #30
   817aa:	d0b1      	beq.n	81710 <memcpy+0xc>
   817ac:	f010 0303 	ands.w	r3, r0, #3
   817b0:	d0ae      	beq.n	81710 <memcpy+0xc>
   817b2:	f1c3 0304 	rsb	r3, r3, #4
   817b6:	1ad2      	subs	r2, r2, r3
   817b8:	07db      	lsls	r3, r3, #31
   817ba:	bf1c      	itt	ne
   817bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   817c0:	f800 3b01 	strbne.w	r3, [r0], #1
   817c4:	d3a4      	bcc.n	81710 <memcpy+0xc>
   817c6:	f831 3b02 	ldrh.w	r3, [r1], #2
   817ca:	f820 3b02 	strh.w	r3, [r0], #2
   817ce:	e79f      	b.n	81710 <memcpy+0xc>
   817d0:	3a04      	subs	r2, #4
   817d2:	d3d9      	bcc.n	81788 <memcpy+0x84>
   817d4:	3a01      	subs	r2, #1
   817d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   817da:	f800 3b01 	strb.w	r3, [r0], #1
   817de:	d2f9      	bcs.n	817d4 <memcpy+0xd0>
   817e0:	780b      	ldrb	r3, [r1, #0]
   817e2:	7003      	strb	r3, [r0, #0]
   817e4:	784b      	ldrb	r3, [r1, #1]
   817e6:	7043      	strb	r3, [r0, #1]
   817e8:	788b      	ldrb	r3, [r1, #2]
   817ea:	7083      	strb	r3, [r0, #2]
   817ec:	4660      	mov	r0, ip
   817ee:	4770      	bx	lr

000817f0 <memset>:
   817f0:	b4f0      	push	{r4, r5, r6, r7}
   817f2:	0784      	lsls	r4, r0, #30
   817f4:	d043      	beq.n	8187e <memset+0x8e>
   817f6:	1e54      	subs	r4, r2, #1
   817f8:	2a00      	cmp	r2, #0
   817fa:	d03e      	beq.n	8187a <memset+0x8a>
   817fc:	b2cd      	uxtb	r5, r1
   817fe:	4603      	mov	r3, r0
   81800:	e003      	b.n	8180a <memset+0x1a>
   81802:	1e62      	subs	r2, r4, #1
   81804:	2c00      	cmp	r4, #0
   81806:	d038      	beq.n	8187a <memset+0x8a>
   81808:	4614      	mov	r4, r2
   8180a:	f803 5b01 	strb.w	r5, [r3], #1
   8180e:	079a      	lsls	r2, r3, #30
   81810:	d1f7      	bne.n	81802 <memset+0x12>
   81812:	2c03      	cmp	r4, #3
   81814:	d92a      	bls.n	8186c <memset+0x7c>
   81816:	b2cd      	uxtb	r5, r1
   81818:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8181c:	2c0f      	cmp	r4, #15
   8181e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81822:	d915      	bls.n	81850 <memset+0x60>
   81824:	f1a4 0710 	sub.w	r7, r4, #16
   81828:	093f      	lsrs	r7, r7, #4
   8182a:	f103 0610 	add.w	r6, r3, #16
   8182e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81832:	461a      	mov	r2, r3
   81834:	6015      	str	r5, [r2, #0]
   81836:	6055      	str	r5, [r2, #4]
   81838:	6095      	str	r5, [r2, #8]
   8183a:	60d5      	str	r5, [r2, #12]
   8183c:	3210      	adds	r2, #16
   8183e:	42b2      	cmp	r2, r6
   81840:	d1f8      	bne.n	81834 <memset+0x44>
   81842:	f004 040f 	and.w	r4, r4, #15
   81846:	3701      	adds	r7, #1
   81848:	2c03      	cmp	r4, #3
   8184a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8184e:	d90d      	bls.n	8186c <memset+0x7c>
   81850:	461e      	mov	r6, r3
   81852:	4622      	mov	r2, r4
   81854:	3a04      	subs	r2, #4
   81856:	2a03      	cmp	r2, #3
   81858:	f846 5b04 	str.w	r5, [r6], #4
   8185c:	d8fa      	bhi.n	81854 <memset+0x64>
   8185e:	1f22      	subs	r2, r4, #4
   81860:	f022 0203 	bic.w	r2, r2, #3
   81864:	3204      	adds	r2, #4
   81866:	4413      	add	r3, r2
   81868:	f004 0403 	and.w	r4, r4, #3
   8186c:	b12c      	cbz	r4, 8187a <memset+0x8a>
   8186e:	b2c9      	uxtb	r1, r1
   81870:	441c      	add	r4, r3
   81872:	f803 1b01 	strb.w	r1, [r3], #1
   81876:	42a3      	cmp	r3, r4
   81878:	d1fb      	bne.n	81872 <memset+0x82>
   8187a:	bcf0      	pop	{r4, r5, r6, r7}
   8187c:	4770      	bx	lr
   8187e:	4614      	mov	r4, r2
   81880:	4603      	mov	r3, r0
   81882:	e7c6      	b.n	81812 <memset+0x22>

00081884 <setbuf>:
   81884:	2900      	cmp	r1, #0
   81886:	bf0c      	ite	eq
   81888:	2202      	moveq	r2, #2
   8188a:	2200      	movne	r2, #0
   8188c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81890:	f000 b800 	b.w	81894 <setvbuf>

00081894 <setvbuf>:
   81894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81898:	4d3c      	ldr	r5, [pc, #240]	; (8198c <setvbuf+0xf8>)
   8189a:	4604      	mov	r4, r0
   8189c:	682d      	ldr	r5, [r5, #0]
   8189e:	4688      	mov	r8, r1
   818a0:	4616      	mov	r6, r2
   818a2:	461f      	mov	r7, r3
   818a4:	b115      	cbz	r5, 818ac <setvbuf+0x18>
   818a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   818a8:	2b00      	cmp	r3, #0
   818aa:	d04f      	beq.n	8194c <setvbuf+0xb8>
   818ac:	2e02      	cmp	r6, #2
   818ae:	d830      	bhi.n	81912 <setvbuf+0x7e>
   818b0:	2f00      	cmp	r7, #0
   818b2:	db2e      	blt.n	81912 <setvbuf+0x7e>
   818b4:	4628      	mov	r0, r5
   818b6:	4621      	mov	r1, r4
   818b8:	f001 f856 	bl	82968 <_fflush_r>
   818bc:	89a3      	ldrh	r3, [r4, #12]
   818be:	2200      	movs	r2, #0
   818c0:	6062      	str	r2, [r4, #4]
   818c2:	61a2      	str	r2, [r4, #24]
   818c4:	061a      	lsls	r2, r3, #24
   818c6:	d428      	bmi.n	8191a <setvbuf+0x86>
   818c8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   818cc:	b29b      	uxth	r3, r3
   818ce:	2e02      	cmp	r6, #2
   818d0:	81a3      	strh	r3, [r4, #12]
   818d2:	d02d      	beq.n	81930 <setvbuf+0x9c>
   818d4:	f1b8 0f00 	cmp.w	r8, #0
   818d8:	d03c      	beq.n	81954 <setvbuf+0xc0>
   818da:	2e01      	cmp	r6, #1
   818dc:	d013      	beq.n	81906 <setvbuf+0x72>
   818de:	b29b      	uxth	r3, r3
   818e0:	f003 0008 	and.w	r0, r3, #8
   818e4:	4a2a      	ldr	r2, [pc, #168]	; (81990 <setvbuf+0xfc>)
   818e6:	b280      	uxth	r0, r0
   818e8:	63ea      	str	r2, [r5, #60]	; 0x3c
   818ea:	f8c4 8000 	str.w	r8, [r4]
   818ee:	f8c4 8010 	str.w	r8, [r4, #16]
   818f2:	6167      	str	r7, [r4, #20]
   818f4:	b178      	cbz	r0, 81916 <setvbuf+0x82>
   818f6:	f013 0f03 	tst.w	r3, #3
   818fa:	bf18      	it	ne
   818fc:	2700      	movne	r7, #0
   818fe:	60a7      	str	r7, [r4, #8]
   81900:	2000      	movs	r0, #0
   81902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81906:	f043 0301 	orr.w	r3, r3, #1
   8190a:	427a      	negs	r2, r7
   8190c:	81a3      	strh	r3, [r4, #12]
   8190e:	61a2      	str	r2, [r4, #24]
   81910:	e7e5      	b.n	818de <setvbuf+0x4a>
   81912:	f04f 30ff 	mov.w	r0, #4294967295
   81916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8191a:	4628      	mov	r0, r5
   8191c:	6921      	ldr	r1, [r4, #16]
   8191e:	f001 f983 	bl	82c28 <_free_r>
   81922:	89a3      	ldrh	r3, [r4, #12]
   81924:	2e02      	cmp	r6, #2
   81926:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8192a:	b29b      	uxth	r3, r3
   8192c:	81a3      	strh	r3, [r4, #12]
   8192e:	d1d1      	bne.n	818d4 <setvbuf+0x40>
   81930:	2000      	movs	r0, #0
   81932:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81936:	f043 0302 	orr.w	r3, r3, #2
   8193a:	2500      	movs	r5, #0
   8193c:	2101      	movs	r1, #1
   8193e:	81a3      	strh	r3, [r4, #12]
   81940:	60a5      	str	r5, [r4, #8]
   81942:	6022      	str	r2, [r4, #0]
   81944:	6122      	str	r2, [r4, #16]
   81946:	6161      	str	r1, [r4, #20]
   81948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8194c:	4628      	mov	r0, r5
   8194e:	f001 f827 	bl	829a0 <__sinit>
   81952:	e7ab      	b.n	818ac <setvbuf+0x18>
   81954:	2f00      	cmp	r7, #0
   81956:	bf08      	it	eq
   81958:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   8195c:	4638      	mov	r0, r7
   8195e:	f001 fc59 	bl	83214 <malloc>
   81962:	4680      	mov	r8, r0
   81964:	b128      	cbz	r0, 81972 <setvbuf+0xde>
   81966:	89a3      	ldrh	r3, [r4, #12]
   81968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8196c:	b29b      	uxth	r3, r3
   8196e:	81a3      	strh	r3, [r4, #12]
   81970:	e7b3      	b.n	818da <setvbuf+0x46>
   81972:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81976:	f001 fc4d 	bl	83214 <malloc>
   8197a:	4680      	mov	r8, r0
   8197c:	b918      	cbnz	r0, 81986 <setvbuf+0xf2>
   8197e:	89a3      	ldrh	r3, [r4, #12]
   81980:	f04f 30ff 	mov.w	r0, #4294967295
   81984:	e7d5      	b.n	81932 <setvbuf+0x9e>
   81986:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8198a:	e7ec      	b.n	81966 <setvbuf+0xd2>
   8198c:	20070568 	.word	0x20070568
   81990:	00082995 	.word	0x00082995

00081994 <strlen>:
   81994:	f020 0103 	bic.w	r1, r0, #3
   81998:	f010 0003 	ands.w	r0, r0, #3
   8199c:	f1c0 0000 	rsb	r0, r0, #0
   819a0:	f851 3b04 	ldr.w	r3, [r1], #4
   819a4:	f100 0c04 	add.w	ip, r0, #4
   819a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   819ac:	f06f 0200 	mvn.w	r2, #0
   819b0:	bf1c      	itt	ne
   819b2:	fa22 f20c 	lsrne.w	r2, r2, ip
   819b6:	4313      	orrne	r3, r2
   819b8:	f04f 0c01 	mov.w	ip, #1
   819bc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   819c0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   819c4:	eba3 020c 	sub.w	r2, r3, ip
   819c8:	ea22 0203 	bic.w	r2, r2, r3
   819cc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   819d0:	bf04      	itt	eq
   819d2:	f851 3b04 	ldreq.w	r3, [r1], #4
   819d6:	3004      	addeq	r0, #4
   819d8:	d0f4      	beq.n	819c4 <strlen+0x30>
   819da:	f013 0fff 	tst.w	r3, #255	; 0xff
   819de:	bf1f      	itttt	ne
   819e0:	3001      	addne	r0, #1
   819e2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   819e6:	3001      	addne	r0, #1
   819e8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   819ec:	bf18      	it	ne
   819ee:	3001      	addne	r0, #1
   819f0:	4770      	bx	lr
   819f2:	bf00      	nop

000819f4 <__sprint_r.part.0>:
   819f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   819f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   819fa:	049c      	lsls	r4, r3, #18
   819fc:	460e      	mov	r6, r1
   819fe:	4680      	mov	r8, r0
   81a00:	4691      	mov	r9, r2
   81a02:	d52a      	bpl.n	81a5a <__sprint_r.part.0+0x66>
   81a04:	6893      	ldr	r3, [r2, #8]
   81a06:	6812      	ldr	r2, [r2, #0]
   81a08:	f102 0a08 	add.w	sl, r2, #8
   81a0c:	b31b      	cbz	r3, 81a56 <__sprint_r.part.0+0x62>
   81a0e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81a12:	08bf      	lsrs	r7, r7, #2
   81a14:	d017      	beq.n	81a46 <__sprint_r.part.0+0x52>
   81a16:	3d04      	subs	r5, #4
   81a18:	2400      	movs	r4, #0
   81a1a:	e001      	b.n	81a20 <__sprint_r.part.0+0x2c>
   81a1c:	42a7      	cmp	r7, r4
   81a1e:	d010      	beq.n	81a42 <__sprint_r.part.0+0x4e>
   81a20:	4640      	mov	r0, r8
   81a22:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81a26:	4632      	mov	r2, r6
   81a28:	f001 f850 	bl	82acc <_fputwc_r>
   81a2c:	1c43      	adds	r3, r0, #1
   81a2e:	f104 0401 	add.w	r4, r4, #1
   81a32:	d1f3      	bne.n	81a1c <__sprint_r.part.0+0x28>
   81a34:	2300      	movs	r3, #0
   81a36:	f8c9 3008 	str.w	r3, [r9, #8]
   81a3a:	f8c9 3004 	str.w	r3, [r9, #4]
   81a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81a42:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81a46:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81a4a:	f8c9 3008 	str.w	r3, [r9, #8]
   81a4e:	f10a 0a08 	add.w	sl, sl, #8
   81a52:	2b00      	cmp	r3, #0
   81a54:	d1db      	bne.n	81a0e <__sprint_r.part.0+0x1a>
   81a56:	2000      	movs	r0, #0
   81a58:	e7ec      	b.n	81a34 <__sprint_r.part.0+0x40>
   81a5a:	f001 f9b1 	bl	82dc0 <__sfvwrite_r>
   81a5e:	2300      	movs	r3, #0
   81a60:	f8c9 3008 	str.w	r3, [r9, #8]
   81a64:	f8c9 3004 	str.w	r3, [r9, #4]
   81a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081a6c <_vfiprintf_r>:
   81a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a70:	b0b1      	sub	sp, #196	; 0xc4
   81a72:	461c      	mov	r4, r3
   81a74:	9102      	str	r1, [sp, #8]
   81a76:	4690      	mov	r8, r2
   81a78:	9308      	str	r3, [sp, #32]
   81a7a:	9006      	str	r0, [sp, #24]
   81a7c:	b118      	cbz	r0, 81a86 <_vfiprintf_r+0x1a>
   81a7e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81a80:	2b00      	cmp	r3, #0
   81a82:	f000 80e8 	beq.w	81c56 <_vfiprintf_r+0x1ea>
   81a86:	9d02      	ldr	r5, [sp, #8]
   81a88:	89ab      	ldrh	r3, [r5, #12]
   81a8a:	b29a      	uxth	r2, r3
   81a8c:	0490      	lsls	r0, r2, #18
   81a8e:	d407      	bmi.n	81aa0 <_vfiprintf_r+0x34>
   81a90:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81a92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81a96:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81a9a:	81ab      	strh	r3, [r5, #12]
   81a9c:	b29a      	uxth	r2, r3
   81a9e:	6669      	str	r1, [r5, #100]	; 0x64
   81aa0:	0711      	lsls	r1, r2, #28
   81aa2:	f140 80b7 	bpl.w	81c14 <_vfiprintf_r+0x1a8>
   81aa6:	f8dd b008 	ldr.w	fp, [sp, #8]
   81aaa:	f8db 3010 	ldr.w	r3, [fp, #16]
   81aae:	2b00      	cmp	r3, #0
   81ab0:	f000 80b0 	beq.w	81c14 <_vfiprintf_r+0x1a8>
   81ab4:	f002 021a 	and.w	r2, r2, #26
   81ab8:	2a0a      	cmp	r2, #10
   81aba:	f000 80b7 	beq.w	81c2c <_vfiprintf_r+0x1c0>
   81abe:	2300      	movs	r3, #0
   81ac0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81ac4:	930a      	str	r3, [sp, #40]	; 0x28
   81ac6:	9315      	str	r3, [sp, #84]	; 0x54
   81ac8:	9314      	str	r3, [sp, #80]	; 0x50
   81aca:	9309      	str	r3, [sp, #36]	; 0x24
   81acc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81ad0:	464e      	mov	r6, r9
   81ad2:	f898 3000 	ldrb.w	r3, [r8]
   81ad6:	2b00      	cmp	r3, #0
   81ad8:	f000 84c8 	beq.w	8246c <_vfiprintf_r+0xa00>
   81adc:	2b25      	cmp	r3, #37	; 0x25
   81ade:	f000 84c5 	beq.w	8246c <_vfiprintf_r+0xa00>
   81ae2:	f108 0201 	add.w	r2, r8, #1
   81ae6:	e001      	b.n	81aec <_vfiprintf_r+0x80>
   81ae8:	2b25      	cmp	r3, #37	; 0x25
   81aea:	d004      	beq.n	81af6 <_vfiprintf_r+0x8a>
   81aec:	7813      	ldrb	r3, [r2, #0]
   81aee:	4614      	mov	r4, r2
   81af0:	3201      	adds	r2, #1
   81af2:	2b00      	cmp	r3, #0
   81af4:	d1f8      	bne.n	81ae8 <_vfiprintf_r+0x7c>
   81af6:	ebc8 0504 	rsb	r5, r8, r4
   81afa:	b195      	cbz	r5, 81b22 <_vfiprintf_r+0xb6>
   81afc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81afe:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b00:	3301      	adds	r3, #1
   81b02:	442a      	add	r2, r5
   81b04:	2b07      	cmp	r3, #7
   81b06:	f8c6 8000 	str.w	r8, [r6]
   81b0a:	6075      	str	r5, [r6, #4]
   81b0c:	9215      	str	r2, [sp, #84]	; 0x54
   81b0e:	9314      	str	r3, [sp, #80]	; 0x50
   81b10:	dd7b      	ble.n	81c0a <_vfiprintf_r+0x19e>
   81b12:	2a00      	cmp	r2, #0
   81b14:	f040 84d5 	bne.w	824c2 <_vfiprintf_r+0xa56>
   81b18:	9809      	ldr	r0, [sp, #36]	; 0x24
   81b1a:	9214      	str	r2, [sp, #80]	; 0x50
   81b1c:	4428      	add	r0, r5
   81b1e:	464e      	mov	r6, r9
   81b20:	9009      	str	r0, [sp, #36]	; 0x24
   81b22:	7823      	ldrb	r3, [r4, #0]
   81b24:	2b00      	cmp	r3, #0
   81b26:	f000 83ed 	beq.w	82304 <_vfiprintf_r+0x898>
   81b2a:	2100      	movs	r1, #0
   81b2c:	f04f 0200 	mov.w	r2, #0
   81b30:	f04f 3cff 	mov.w	ip, #4294967295
   81b34:	7863      	ldrb	r3, [r4, #1]
   81b36:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   81b3a:	9104      	str	r1, [sp, #16]
   81b3c:	468a      	mov	sl, r1
   81b3e:	f104 0801 	add.w	r8, r4, #1
   81b42:	4608      	mov	r0, r1
   81b44:	4665      	mov	r5, ip
   81b46:	f108 0801 	add.w	r8, r8, #1
   81b4a:	f1a3 0220 	sub.w	r2, r3, #32
   81b4e:	2a58      	cmp	r2, #88	; 0x58
   81b50:	f200 82d9 	bhi.w	82106 <_vfiprintf_r+0x69a>
   81b54:	e8df f012 	tbh	[pc, r2, lsl #1]
   81b58:	02d702cb 	.word	0x02d702cb
   81b5c:	02d202d7 	.word	0x02d202d7
   81b60:	02d702d7 	.word	0x02d702d7
   81b64:	02d702d7 	.word	0x02d702d7
   81b68:	02d702d7 	.word	0x02d702d7
   81b6c:	028f0282 	.word	0x028f0282
   81b70:	008402d7 	.word	0x008402d7
   81b74:	02d70293 	.word	0x02d70293
   81b78:	0196012b 	.word	0x0196012b
   81b7c:	01960196 	.word	0x01960196
   81b80:	01960196 	.word	0x01960196
   81b84:	01960196 	.word	0x01960196
   81b88:	01960196 	.word	0x01960196
   81b8c:	02d702d7 	.word	0x02d702d7
   81b90:	02d702d7 	.word	0x02d702d7
   81b94:	02d702d7 	.word	0x02d702d7
   81b98:	02d702d7 	.word	0x02d702d7
   81b9c:	02d702d7 	.word	0x02d702d7
   81ba0:	02d70130 	.word	0x02d70130
   81ba4:	02d702d7 	.word	0x02d702d7
   81ba8:	02d702d7 	.word	0x02d702d7
   81bac:	02d702d7 	.word	0x02d702d7
   81bb0:	02d702d7 	.word	0x02d702d7
   81bb4:	017b02d7 	.word	0x017b02d7
   81bb8:	02d702d7 	.word	0x02d702d7
   81bbc:	02d702d7 	.word	0x02d702d7
   81bc0:	01a402d7 	.word	0x01a402d7
   81bc4:	02d702d7 	.word	0x02d702d7
   81bc8:	02d701bf 	.word	0x02d701bf
   81bcc:	02d702d7 	.word	0x02d702d7
   81bd0:	02d702d7 	.word	0x02d702d7
   81bd4:	02d702d7 	.word	0x02d702d7
   81bd8:	02d702d7 	.word	0x02d702d7
   81bdc:	01e402d7 	.word	0x01e402d7
   81be0:	02d701fa 	.word	0x02d701fa
   81be4:	02d702d7 	.word	0x02d702d7
   81be8:	01fa0216 	.word	0x01fa0216
   81bec:	02d702d7 	.word	0x02d702d7
   81bf0:	02d7021b 	.word	0x02d7021b
   81bf4:	00890228 	.word	0x00890228
   81bf8:	027d0266 	.word	0x027d0266
   81bfc:	023a02d7 	.word	0x023a02d7
   81c00:	011902d7 	.word	0x011902d7
   81c04:	02d702d7 	.word	0x02d702d7
   81c08:	02af      	.short	0x02af
   81c0a:	3608      	adds	r6, #8
   81c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
   81c0e:	4428      	add	r0, r5
   81c10:	9009      	str	r0, [sp, #36]	; 0x24
   81c12:	e786      	b.n	81b22 <_vfiprintf_r+0xb6>
   81c14:	9806      	ldr	r0, [sp, #24]
   81c16:	9902      	ldr	r1, [sp, #8]
   81c18:	f000 fd90 	bl	8273c <__swsetup_r>
   81c1c:	b9b0      	cbnz	r0, 81c4c <_vfiprintf_r+0x1e0>
   81c1e:	9d02      	ldr	r5, [sp, #8]
   81c20:	89aa      	ldrh	r2, [r5, #12]
   81c22:	f002 021a 	and.w	r2, r2, #26
   81c26:	2a0a      	cmp	r2, #10
   81c28:	f47f af49 	bne.w	81abe <_vfiprintf_r+0x52>
   81c2c:	f8dd b008 	ldr.w	fp, [sp, #8]
   81c30:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81c34:	2b00      	cmp	r3, #0
   81c36:	f6ff af42 	blt.w	81abe <_vfiprintf_r+0x52>
   81c3a:	9806      	ldr	r0, [sp, #24]
   81c3c:	4659      	mov	r1, fp
   81c3e:	4642      	mov	r2, r8
   81c40:	4623      	mov	r3, r4
   81c42:	f000 fd3d 	bl	826c0 <__sbprintf>
   81c46:	b031      	add	sp, #196	; 0xc4
   81c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c4c:	f04f 30ff 	mov.w	r0, #4294967295
   81c50:	b031      	add	sp, #196	; 0xc4
   81c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c56:	f000 fea3 	bl	829a0 <__sinit>
   81c5a:	e714      	b.n	81a86 <_vfiprintf_r+0x1a>
   81c5c:	4240      	negs	r0, r0
   81c5e:	9308      	str	r3, [sp, #32]
   81c60:	f04a 0a04 	orr.w	sl, sl, #4
   81c64:	f898 3000 	ldrb.w	r3, [r8]
   81c68:	e76d      	b.n	81b46 <_vfiprintf_r+0xda>
   81c6a:	f01a 0320 	ands.w	r3, sl, #32
   81c6e:	9004      	str	r0, [sp, #16]
   81c70:	46ac      	mov	ip, r5
   81c72:	f000 80f4 	beq.w	81e5e <_vfiprintf_r+0x3f2>
   81c76:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c7a:	f10b 0307 	add.w	r3, fp, #7
   81c7e:	f023 0307 	bic.w	r3, r3, #7
   81c82:	f103 0408 	add.w	r4, r3, #8
   81c86:	9408      	str	r4, [sp, #32]
   81c88:	e9d3 4500 	ldrd	r4, r5, [r3]
   81c8c:	2300      	movs	r3, #0
   81c8e:	f04f 0000 	mov.w	r0, #0
   81c92:	2100      	movs	r1, #0
   81c94:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   81c98:	f8cd c014 	str.w	ip, [sp, #20]
   81c9c:	9107      	str	r1, [sp, #28]
   81c9e:	f1bc 0f00 	cmp.w	ip, #0
   81ca2:	bfa8      	it	ge
   81ca4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81ca8:	ea54 0205 	orrs.w	r2, r4, r5
   81cac:	f040 80ad 	bne.w	81e0a <_vfiprintf_r+0x39e>
   81cb0:	f1bc 0f00 	cmp.w	ip, #0
   81cb4:	f040 80a9 	bne.w	81e0a <_vfiprintf_r+0x39e>
   81cb8:	2b00      	cmp	r3, #0
   81cba:	f040 83c0 	bne.w	8243e <_vfiprintf_r+0x9d2>
   81cbe:	f01a 0f01 	tst.w	sl, #1
   81cc2:	f000 83bc 	beq.w	8243e <_vfiprintf_r+0x9d2>
   81cc6:	2330      	movs	r3, #48	; 0x30
   81cc8:	af30      	add	r7, sp, #192	; 0xc0
   81cca:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81cce:	ebc7 0409 	rsb	r4, r7, r9
   81cd2:	9405      	str	r4, [sp, #20]
   81cd4:	f8dd b014 	ldr.w	fp, [sp, #20]
   81cd8:	9c07      	ldr	r4, [sp, #28]
   81cda:	45e3      	cmp	fp, ip
   81cdc:	bfb8      	it	lt
   81cde:	46e3      	movlt	fp, ip
   81ce0:	f8cd b00c 	str.w	fp, [sp, #12]
   81ce4:	b11c      	cbz	r4, 81cee <_vfiprintf_r+0x282>
   81ce6:	f10b 0b01 	add.w	fp, fp, #1
   81cea:	f8cd b00c 	str.w	fp, [sp, #12]
   81cee:	f01a 0502 	ands.w	r5, sl, #2
   81cf2:	9507      	str	r5, [sp, #28]
   81cf4:	d005      	beq.n	81d02 <_vfiprintf_r+0x296>
   81cf6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81cfa:	f10b 0b02 	add.w	fp, fp, #2
   81cfe:	f8cd b00c 	str.w	fp, [sp, #12]
   81d02:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81d06:	930b      	str	r3, [sp, #44]	; 0x2c
   81d08:	f040 821b 	bne.w	82142 <_vfiprintf_r+0x6d6>
   81d0c:	9d04      	ldr	r5, [sp, #16]
   81d0e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81d12:	ebcb 0405 	rsb	r4, fp, r5
   81d16:	2c00      	cmp	r4, #0
   81d18:	f340 8213 	ble.w	82142 <_vfiprintf_r+0x6d6>
   81d1c:	2c10      	cmp	r4, #16
   81d1e:	f340 8489 	ble.w	82634 <_vfiprintf_r+0xbc8>
   81d22:	4dbe      	ldr	r5, [pc, #760]	; (8201c <_vfiprintf_r+0x5b0>)
   81d24:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d26:	462b      	mov	r3, r5
   81d28:	9814      	ldr	r0, [sp, #80]	; 0x50
   81d2a:	4625      	mov	r5, r4
   81d2c:	f04f 0b10 	mov.w	fp, #16
   81d30:	4664      	mov	r4, ip
   81d32:	46b4      	mov	ip, r6
   81d34:	461e      	mov	r6, r3
   81d36:	e006      	b.n	81d46 <_vfiprintf_r+0x2da>
   81d38:	1c83      	adds	r3, r0, #2
   81d3a:	f10c 0c08 	add.w	ip, ip, #8
   81d3e:	4608      	mov	r0, r1
   81d40:	3d10      	subs	r5, #16
   81d42:	2d10      	cmp	r5, #16
   81d44:	dd11      	ble.n	81d6a <_vfiprintf_r+0x2fe>
   81d46:	1c41      	adds	r1, r0, #1
   81d48:	3210      	adds	r2, #16
   81d4a:	2907      	cmp	r1, #7
   81d4c:	9215      	str	r2, [sp, #84]	; 0x54
   81d4e:	e88c 0840 	stmia.w	ip, {r6, fp}
   81d52:	9114      	str	r1, [sp, #80]	; 0x50
   81d54:	ddf0      	ble.n	81d38 <_vfiprintf_r+0x2cc>
   81d56:	2a00      	cmp	r2, #0
   81d58:	f040 81e6 	bne.w	82128 <_vfiprintf_r+0x6bc>
   81d5c:	3d10      	subs	r5, #16
   81d5e:	2d10      	cmp	r5, #16
   81d60:	f04f 0301 	mov.w	r3, #1
   81d64:	4610      	mov	r0, r2
   81d66:	46cc      	mov	ip, r9
   81d68:	dced      	bgt.n	81d46 <_vfiprintf_r+0x2da>
   81d6a:	4631      	mov	r1, r6
   81d6c:	4666      	mov	r6, ip
   81d6e:	46a4      	mov	ip, r4
   81d70:	462c      	mov	r4, r5
   81d72:	460d      	mov	r5, r1
   81d74:	4422      	add	r2, r4
   81d76:	2b07      	cmp	r3, #7
   81d78:	9215      	str	r2, [sp, #84]	; 0x54
   81d7a:	6035      	str	r5, [r6, #0]
   81d7c:	6074      	str	r4, [r6, #4]
   81d7e:	9314      	str	r3, [sp, #80]	; 0x50
   81d80:	f300 836d 	bgt.w	8245e <_vfiprintf_r+0x9f2>
   81d84:	3608      	adds	r6, #8
   81d86:	1c59      	adds	r1, r3, #1
   81d88:	e1de      	b.n	82148 <_vfiprintf_r+0x6dc>
   81d8a:	f01a 0f20 	tst.w	sl, #32
   81d8e:	9004      	str	r0, [sp, #16]
   81d90:	46ac      	mov	ip, r5
   81d92:	f000 808d 	beq.w	81eb0 <_vfiprintf_r+0x444>
   81d96:	9d08      	ldr	r5, [sp, #32]
   81d98:	1deb      	adds	r3, r5, #7
   81d9a:	f023 0307 	bic.w	r3, r3, #7
   81d9e:	f103 0b08 	add.w	fp, r3, #8
   81da2:	e9d3 4500 	ldrd	r4, r5, [r3]
   81da6:	f8cd b020 	str.w	fp, [sp, #32]
   81daa:	2301      	movs	r3, #1
   81dac:	e76f      	b.n	81c8e <_vfiprintf_r+0x222>
   81dae:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81db2:	f898 3000 	ldrb.w	r3, [r8]
   81db6:	e6c6      	b.n	81b46 <_vfiprintf_r+0xda>
   81db8:	f04a 0a10 	orr.w	sl, sl, #16
   81dbc:	f01a 0f20 	tst.w	sl, #32
   81dc0:	9004      	str	r0, [sp, #16]
   81dc2:	46ac      	mov	ip, r5
   81dc4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81dc8:	f000 80c8 	beq.w	81f5c <_vfiprintf_r+0x4f0>
   81dcc:	9c08      	ldr	r4, [sp, #32]
   81dce:	1de1      	adds	r1, r4, #7
   81dd0:	f021 0107 	bic.w	r1, r1, #7
   81dd4:	e9d1 2300 	ldrd	r2, r3, [r1]
   81dd8:	3108      	adds	r1, #8
   81dda:	9108      	str	r1, [sp, #32]
   81ddc:	4614      	mov	r4, r2
   81dde:	461d      	mov	r5, r3
   81de0:	2a00      	cmp	r2, #0
   81de2:	f173 0b00 	sbcs.w	fp, r3, #0
   81de6:	f2c0 83ce 	blt.w	82586 <_vfiprintf_r+0xb1a>
   81dea:	f1bc 0f00 	cmp.w	ip, #0
   81dee:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81df2:	bfa8      	it	ge
   81df4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81df8:	ea54 0205 	orrs.w	r2, r4, r5
   81dfc:	9007      	str	r0, [sp, #28]
   81dfe:	f8cd c014 	str.w	ip, [sp, #20]
   81e02:	f04f 0301 	mov.w	r3, #1
   81e06:	f43f af53 	beq.w	81cb0 <_vfiprintf_r+0x244>
   81e0a:	2b01      	cmp	r3, #1
   81e0c:	f000 8319 	beq.w	82442 <_vfiprintf_r+0x9d6>
   81e10:	2b02      	cmp	r3, #2
   81e12:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81e16:	f040 824c 	bne.w	822b2 <_vfiprintf_r+0x846>
   81e1a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81e1e:	4619      	mov	r1, r3
   81e20:	f004 000f 	and.w	r0, r4, #15
   81e24:	0922      	lsrs	r2, r4, #4
   81e26:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81e2a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81e2e:	092b      	lsrs	r3, r5, #4
   81e30:	7008      	strb	r0, [r1, #0]
   81e32:	ea52 0003 	orrs.w	r0, r2, r3
   81e36:	460f      	mov	r7, r1
   81e38:	4614      	mov	r4, r2
   81e3a:	461d      	mov	r5, r3
   81e3c:	f101 31ff 	add.w	r1, r1, #4294967295
   81e40:	d1ee      	bne.n	81e20 <_vfiprintf_r+0x3b4>
   81e42:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81e46:	ebc7 0309 	rsb	r3, r7, r9
   81e4a:	9305      	str	r3, [sp, #20]
   81e4c:	e742      	b.n	81cd4 <_vfiprintf_r+0x268>
   81e4e:	f04a 0a10 	orr.w	sl, sl, #16
   81e52:	f01a 0320 	ands.w	r3, sl, #32
   81e56:	9004      	str	r0, [sp, #16]
   81e58:	46ac      	mov	ip, r5
   81e5a:	f47f af0c 	bne.w	81c76 <_vfiprintf_r+0x20a>
   81e5e:	f01a 0210 	ands.w	r2, sl, #16
   81e62:	f040 8311 	bne.w	82488 <_vfiprintf_r+0xa1c>
   81e66:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   81e6a:	f000 830d 	beq.w	82488 <_vfiprintf_r+0xa1c>
   81e6e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81e72:	4613      	mov	r3, r2
   81e74:	f8bb 4000 	ldrh.w	r4, [fp]
   81e78:	f10b 0b04 	add.w	fp, fp, #4
   81e7c:	2500      	movs	r5, #0
   81e7e:	f8cd b020 	str.w	fp, [sp, #32]
   81e82:	e704      	b.n	81c8e <_vfiprintf_r+0x222>
   81e84:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81e88:	2000      	movs	r0, #0
   81e8a:	f818 3b01 	ldrb.w	r3, [r8], #1
   81e8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81e92:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81e96:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81e9a:	2a09      	cmp	r2, #9
   81e9c:	d9f5      	bls.n	81e8a <_vfiprintf_r+0x41e>
   81e9e:	e654      	b.n	81b4a <_vfiprintf_r+0xde>
   81ea0:	f04a 0a10 	orr.w	sl, sl, #16
   81ea4:	f01a 0f20 	tst.w	sl, #32
   81ea8:	9004      	str	r0, [sp, #16]
   81eaa:	46ac      	mov	ip, r5
   81eac:	f47f af73 	bne.w	81d96 <_vfiprintf_r+0x32a>
   81eb0:	f01a 0f10 	tst.w	sl, #16
   81eb4:	f040 82ef 	bne.w	82496 <_vfiprintf_r+0xa2a>
   81eb8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81ebc:	f000 82eb 	beq.w	82496 <_vfiprintf_r+0xa2a>
   81ec0:	f8dd b020 	ldr.w	fp, [sp, #32]
   81ec4:	2500      	movs	r5, #0
   81ec6:	f8bb 4000 	ldrh.w	r4, [fp]
   81eca:	f10b 0b04 	add.w	fp, fp, #4
   81ece:	2301      	movs	r3, #1
   81ed0:	f8cd b020 	str.w	fp, [sp, #32]
   81ed4:	e6db      	b.n	81c8e <_vfiprintf_r+0x222>
   81ed6:	46ac      	mov	ip, r5
   81ed8:	4d51      	ldr	r5, [pc, #324]	; (82020 <_vfiprintf_r+0x5b4>)
   81eda:	f01a 0f20 	tst.w	sl, #32
   81ede:	9004      	str	r0, [sp, #16]
   81ee0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81ee4:	950a      	str	r5, [sp, #40]	; 0x28
   81ee6:	f000 80f0 	beq.w	820ca <_vfiprintf_r+0x65e>
   81eea:	9d08      	ldr	r5, [sp, #32]
   81eec:	1dea      	adds	r2, r5, #7
   81eee:	f022 0207 	bic.w	r2, r2, #7
   81ef2:	f102 0b08 	add.w	fp, r2, #8
   81ef6:	f8cd b020 	str.w	fp, [sp, #32]
   81efa:	e9d2 4500 	ldrd	r4, r5, [r2]
   81efe:	f01a 0f01 	tst.w	sl, #1
   81f02:	f000 82aa 	beq.w	8245a <_vfiprintf_r+0x9ee>
   81f06:	ea54 0b05 	orrs.w	fp, r4, r5
   81f0a:	f000 82a6 	beq.w	8245a <_vfiprintf_r+0x9ee>
   81f0e:	2230      	movs	r2, #48	; 0x30
   81f10:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81f14:	f04a 0a02 	orr.w	sl, sl, #2
   81f18:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81f1c:	2302      	movs	r3, #2
   81f1e:	e6b6      	b.n	81c8e <_vfiprintf_r+0x222>
   81f20:	9b08      	ldr	r3, [sp, #32]
   81f22:	f8dd b020 	ldr.w	fp, [sp, #32]
   81f26:	681b      	ldr	r3, [r3, #0]
   81f28:	2401      	movs	r4, #1
   81f2a:	f04f 0500 	mov.w	r5, #0
   81f2e:	f10b 0b04 	add.w	fp, fp, #4
   81f32:	9004      	str	r0, [sp, #16]
   81f34:	9403      	str	r4, [sp, #12]
   81f36:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81f3a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81f3e:	f8cd b020 	str.w	fp, [sp, #32]
   81f42:	9405      	str	r4, [sp, #20]
   81f44:	af16      	add	r7, sp, #88	; 0x58
   81f46:	f04f 0c00 	mov.w	ip, #0
   81f4a:	e6d0      	b.n	81cee <_vfiprintf_r+0x282>
   81f4c:	f01a 0f20 	tst.w	sl, #32
   81f50:	9004      	str	r0, [sp, #16]
   81f52:	46ac      	mov	ip, r5
   81f54:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81f58:	f47f af38 	bne.w	81dcc <_vfiprintf_r+0x360>
   81f5c:	f01a 0f10 	tst.w	sl, #16
   81f60:	f040 82a7 	bne.w	824b2 <_vfiprintf_r+0xa46>
   81f64:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81f68:	f000 82a3 	beq.w	824b2 <_vfiprintf_r+0xa46>
   81f6c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81f70:	f9bb 4000 	ldrsh.w	r4, [fp]
   81f74:	f10b 0b04 	add.w	fp, fp, #4
   81f78:	17e5      	asrs	r5, r4, #31
   81f7a:	4622      	mov	r2, r4
   81f7c:	462b      	mov	r3, r5
   81f7e:	f8cd b020 	str.w	fp, [sp, #32]
   81f82:	e72d      	b.n	81de0 <_vfiprintf_r+0x374>
   81f84:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81f88:	f898 3000 	ldrb.w	r3, [r8]
   81f8c:	e5db      	b.n	81b46 <_vfiprintf_r+0xda>
   81f8e:	f898 3000 	ldrb.w	r3, [r8]
   81f92:	4642      	mov	r2, r8
   81f94:	2b6c      	cmp	r3, #108	; 0x6c
   81f96:	bf03      	ittte	eq
   81f98:	f108 0801 	addeq.w	r8, r8, #1
   81f9c:	f04a 0a20 	orreq.w	sl, sl, #32
   81fa0:	7853      	ldrbeq	r3, [r2, #1]
   81fa2:	f04a 0a10 	orrne.w	sl, sl, #16
   81fa6:	e5ce      	b.n	81b46 <_vfiprintf_r+0xda>
   81fa8:	f01a 0f20 	tst.w	sl, #32
   81fac:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81fb0:	f000 82f7 	beq.w	825a2 <_vfiprintf_r+0xb36>
   81fb4:	9c08      	ldr	r4, [sp, #32]
   81fb6:	6821      	ldr	r1, [r4, #0]
   81fb8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81fba:	17e5      	asrs	r5, r4, #31
   81fbc:	462b      	mov	r3, r5
   81fbe:	9d08      	ldr	r5, [sp, #32]
   81fc0:	4622      	mov	r2, r4
   81fc2:	3504      	adds	r5, #4
   81fc4:	9508      	str	r5, [sp, #32]
   81fc6:	e9c1 2300 	strd	r2, r3, [r1]
   81fca:	e582      	b.n	81ad2 <_vfiprintf_r+0x66>
   81fcc:	9c08      	ldr	r4, [sp, #32]
   81fce:	46ac      	mov	ip, r5
   81fd0:	6827      	ldr	r7, [r4, #0]
   81fd2:	f04f 0500 	mov.w	r5, #0
   81fd6:	9004      	str	r0, [sp, #16]
   81fd8:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81fdc:	3404      	adds	r4, #4
   81fde:	2f00      	cmp	r7, #0
   81fe0:	f000 8332 	beq.w	82648 <_vfiprintf_r+0xbdc>
   81fe4:	f1bc 0f00 	cmp.w	ip, #0
   81fe8:	4638      	mov	r0, r7
   81fea:	f2c0 8307 	blt.w	825fc <_vfiprintf_r+0xb90>
   81fee:	4662      	mov	r2, ip
   81ff0:	2100      	movs	r1, #0
   81ff2:	f8cd c004 	str.w	ip, [sp, #4]
   81ff6:	f001 fbb1 	bl	8375c <memchr>
   81ffa:	f8dd c004 	ldr.w	ip, [sp, #4]
   81ffe:	2800      	cmp	r0, #0
   82000:	f000 833a 	beq.w	82678 <_vfiprintf_r+0xc0c>
   82004:	1bc0      	subs	r0, r0, r7
   82006:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8200a:	4560      	cmp	r0, ip
   8200c:	bfa8      	it	ge
   8200e:	4660      	movge	r0, ip
   82010:	9005      	str	r0, [sp, #20]
   82012:	9408      	str	r4, [sp, #32]
   82014:	9507      	str	r5, [sp, #28]
   82016:	f04f 0c00 	mov.w	ip, #0
   8201a:	e65b      	b.n	81cd4 <_vfiprintf_r+0x268>
   8201c:	00084780 	.word	0x00084780
   82020:	00084740 	.word	0x00084740
   82024:	9b08      	ldr	r3, [sp, #32]
   82026:	f8dd b020 	ldr.w	fp, [sp, #32]
   8202a:	9004      	str	r0, [sp, #16]
   8202c:	48b2      	ldr	r0, [pc, #712]	; (822f8 <_vfiprintf_r+0x88c>)
   8202e:	681c      	ldr	r4, [r3, #0]
   82030:	2230      	movs	r2, #48	; 0x30
   82032:	2378      	movs	r3, #120	; 0x78
   82034:	f10b 0b04 	add.w	fp, fp, #4
   82038:	46ac      	mov	ip, r5
   8203a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8203e:	f04a 0a02 	orr.w	sl, sl, #2
   82042:	f8cd b020 	str.w	fp, [sp, #32]
   82046:	2500      	movs	r5, #0
   82048:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8204c:	900a      	str	r0, [sp, #40]	; 0x28
   8204e:	2302      	movs	r3, #2
   82050:	e61d      	b.n	81c8e <_vfiprintf_r+0x222>
   82052:	f04a 0a20 	orr.w	sl, sl, #32
   82056:	f898 3000 	ldrb.w	r3, [r8]
   8205a:	e574      	b.n	81b46 <_vfiprintf_r+0xda>
   8205c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82060:	f8db 0000 	ldr.w	r0, [fp]
   82064:	f10b 0304 	add.w	r3, fp, #4
   82068:	2800      	cmp	r0, #0
   8206a:	f6ff adf7 	blt.w	81c5c <_vfiprintf_r+0x1f0>
   8206e:	9308      	str	r3, [sp, #32]
   82070:	f898 3000 	ldrb.w	r3, [r8]
   82074:	e567      	b.n	81b46 <_vfiprintf_r+0xda>
   82076:	f898 3000 	ldrb.w	r3, [r8]
   8207a:	212b      	movs	r1, #43	; 0x2b
   8207c:	e563      	b.n	81b46 <_vfiprintf_r+0xda>
   8207e:	f898 3000 	ldrb.w	r3, [r8]
   82082:	f108 0401 	add.w	r4, r8, #1
   82086:	2b2a      	cmp	r3, #42	; 0x2a
   82088:	f000 8305 	beq.w	82696 <_vfiprintf_r+0xc2a>
   8208c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82090:	2a09      	cmp	r2, #9
   82092:	bf98      	it	ls
   82094:	2500      	movls	r5, #0
   82096:	f200 82fa 	bhi.w	8268e <_vfiprintf_r+0xc22>
   8209a:	f814 3b01 	ldrb.w	r3, [r4], #1
   8209e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   820a2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   820a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   820aa:	2a09      	cmp	r2, #9
   820ac:	d9f5      	bls.n	8209a <_vfiprintf_r+0x62e>
   820ae:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   820b2:	46a0      	mov	r8, r4
   820b4:	e549      	b.n	81b4a <_vfiprintf_r+0xde>
   820b6:	4c90      	ldr	r4, [pc, #576]	; (822f8 <_vfiprintf_r+0x88c>)
   820b8:	f01a 0f20 	tst.w	sl, #32
   820bc:	9004      	str	r0, [sp, #16]
   820be:	46ac      	mov	ip, r5
   820c0:	940a      	str	r4, [sp, #40]	; 0x28
   820c2:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   820c6:	f47f af10 	bne.w	81eea <_vfiprintf_r+0x47e>
   820ca:	f01a 0f10 	tst.w	sl, #16
   820ce:	f040 81ea 	bne.w	824a6 <_vfiprintf_r+0xa3a>
   820d2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   820d6:	f000 81e6 	beq.w	824a6 <_vfiprintf_r+0xa3a>
   820da:	f8dd b020 	ldr.w	fp, [sp, #32]
   820de:	2500      	movs	r5, #0
   820e0:	f8bb 4000 	ldrh.w	r4, [fp]
   820e4:	f10b 0b04 	add.w	fp, fp, #4
   820e8:	f8cd b020 	str.w	fp, [sp, #32]
   820ec:	e707      	b.n	81efe <_vfiprintf_r+0x492>
   820ee:	f898 3000 	ldrb.w	r3, [r8]
   820f2:	2900      	cmp	r1, #0
   820f4:	f47f ad27 	bne.w	81b46 <_vfiprintf_r+0xda>
   820f8:	2120      	movs	r1, #32
   820fa:	e524      	b.n	81b46 <_vfiprintf_r+0xda>
   820fc:	f04a 0a01 	orr.w	sl, sl, #1
   82100:	f898 3000 	ldrb.w	r3, [r8]
   82104:	e51f      	b.n	81b46 <_vfiprintf_r+0xda>
   82106:	9004      	str	r0, [sp, #16]
   82108:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8210c:	2b00      	cmp	r3, #0
   8210e:	f000 80f9 	beq.w	82304 <_vfiprintf_r+0x898>
   82112:	2501      	movs	r5, #1
   82114:	f04f 0b00 	mov.w	fp, #0
   82118:	9503      	str	r5, [sp, #12]
   8211a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8211e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82122:	9505      	str	r5, [sp, #20]
   82124:	af16      	add	r7, sp, #88	; 0x58
   82126:	e70e      	b.n	81f46 <_vfiprintf_r+0x4da>
   82128:	9806      	ldr	r0, [sp, #24]
   8212a:	9902      	ldr	r1, [sp, #8]
   8212c:	aa13      	add	r2, sp, #76	; 0x4c
   8212e:	f7ff fc61 	bl	819f4 <__sprint_r.part.0>
   82132:	2800      	cmp	r0, #0
   82134:	f040 80ed 	bne.w	82312 <_vfiprintf_r+0x8a6>
   82138:	9814      	ldr	r0, [sp, #80]	; 0x50
   8213a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8213c:	1c43      	adds	r3, r0, #1
   8213e:	46cc      	mov	ip, r9
   82140:	e5fe      	b.n	81d40 <_vfiprintf_r+0x2d4>
   82142:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82144:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82146:	1c59      	adds	r1, r3, #1
   82148:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8214c:	b168      	cbz	r0, 8216a <_vfiprintf_r+0x6fe>
   8214e:	3201      	adds	r2, #1
   82150:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   82154:	2301      	movs	r3, #1
   82156:	2907      	cmp	r1, #7
   82158:	9215      	str	r2, [sp, #84]	; 0x54
   8215a:	9114      	str	r1, [sp, #80]	; 0x50
   8215c:	e886 0009 	stmia.w	r6, {r0, r3}
   82160:	f300 8160 	bgt.w	82424 <_vfiprintf_r+0x9b8>
   82164:	460b      	mov	r3, r1
   82166:	3608      	adds	r6, #8
   82168:	3101      	adds	r1, #1
   8216a:	9c07      	ldr	r4, [sp, #28]
   8216c:	b164      	cbz	r4, 82188 <_vfiprintf_r+0x71c>
   8216e:	3202      	adds	r2, #2
   82170:	a812      	add	r0, sp, #72	; 0x48
   82172:	2302      	movs	r3, #2
   82174:	2907      	cmp	r1, #7
   82176:	9215      	str	r2, [sp, #84]	; 0x54
   82178:	9114      	str	r1, [sp, #80]	; 0x50
   8217a:	e886 0009 	stmia.w	r6, {r0, r3}
   8217e:	f300 8157 	bgt.w	82430 <_vfiprintf_r+0x9c4>
   82182:	460b      	mov	r3, r1
   82184:	3608      	adds	r6, #8
   82186:	3101      	adds	r1, #1
   82188:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8218a:	2d80      	cmp	r5, #128	; 0x80
   8218c:	f000 8101 	beq.w	82392 <_vfiprintf_r+0x926>
   82190:	9d05      	ldr	r5, [sp, #20]
   82192:	ebc5 040c 	rsb	r4, r5, ip
   82196:	2c00      	cmp	r4, #0
   82198:	dd2f      	ble.n	821fa <_vfiprintf_r+0x78e>
   8219a:	2c10      	cmp	r4, #16
   8219c:	4d57      	ldr	r5, [pc, #348]	; (822fc <_vfiprintf_r+0x890>)
   8219e:	dd22      	ble.n	821e6 <_vfiprintf_r+0x77a>
   821a0:	4630      	mov	r0, r6
   821a2:	f04f 0b10 	mov.w	fp, #16
   821a6:	462e      	mov	r6, r5
   821a8:	4625      	mov	r5, r4
   821aa:	9c06      	ldr	r4, [sp, #24]
   821ac:	e006      	b.n	821bc <_vfiprintf_r+0x750>
   821ae:	f103 0c02 	add.w	ip, r3, #2
   821b2:	3008      	adds	r0, #8
   821b4:	460b      	mov	r3, r1
   821b6:	3d10      	subs	r5, #16
   821b8:	2d10      	cmp	r5, #16
   821ba:	dd10      	ble.n	821de <_vfiprintf_r+0x772>
   821bc:	1c59      	adds	r1, r3, #1
   821be:	3210      	adds	r2, #16
   821c0:	2907      	cmp	r1, #7
   821c2:	9215      	str	r2, [sp, #84]	; 0x54
   821c4:	e880 0840 	stmia.w	r0, {r6, fp}
   821c8:	9114      	str	r1, [sp, #80]	; 0x50
   821ca:	ddf0      	ble.n	821ae <_vfiprintf_r+0x742>
   821cc:	2a00      	cmp	r2, #0
   821ce:	d163      	bne.n	82298 <_vfiprintf_r+0x82c>
   821d0:	3d10      	subs	r5, #16
   821d2:	2d10      	cmp	r5, #16
   821d4:	f04f 0c01 	mov.w	ip, #1
   821d8:	4613      	mov	r3, r2
   821da:	4648      	mov	r0, r9
   821dc:	dcee      	bgt.n	821bc <_vfiprintf_r+0x750>
   821de:	462c      	mov	r4, r5
   821e0:	4661      	mov	r1, ip
   821e2:	4635      	mov	r5, r6
   821e4:	4606      	mov	r6, r0
   821e6:	4422      	add	r2, r4
   821e8:	2907      	cmp	r1, #7
   821ea:	9215      	str	r2, [sp, #84]	; 0x54
   821ec:	6035      	str	r5, [r6, #0]
   821ee:	6074      	str	r4, [r6, #4]
   821f0:	9114      	str	r1, [sp, #80]	; 0x50
   821f2:	f300 80c1 	bgt.w	82378 <_vfiprintf_r+0x90c>
   821f6:	3608      	adds	r6, #8
   821f8:	3101      	adds	r1, #1
   821fa:	9d05      	ldr	r5, [sp, #20]
   821fc:	2907      	cmp	r1, #7
   821fe:	442a      	add	r2, r5
   82200:	9215      	str	r2, [sp, #84]	; 0x54
   82202:	6037      	str	r7, [r6, #0]
   82204:	6075      	str	r5, [r6, #4]
   82206:	9114      	str	r1, [sp, #80]	; 0x50
   82208:	f340 80c1 	ble.w	8238e <_vfiprintf_r+0x922>
   8220c:	2a00      	cmp	r2, #0
   8220e:	f040 8130 	bne.w	82472 <_vfiprintf_r+0xa06>
   82212:	9214      	str	r2, [sp, #80]	; 0x50
   82214:	464e      	mov	r6, r9
   82216:	f01a 0f04 	tst.w	sl, #4
   8221a:	f000 808b 	beq.w	82334 <_vfiprintf_r+0x8c8>
   8221e:	9d04      	ldr	r5, [sp, #16]
   82220:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82224:	ebcb 0405 	rsb	r4, fp, r5
   82228:	2c00      	cmp	r4, #0
   8222a:	f340 8083 	ble.w	82334 <_vfiprintf_r+0x8c8>
   8222e:	2c10      	cmp	r4, #16
   82230:	f340 821e 	ble.w	82670 <_vfiprintf_r+0xc04>
   82234:	9914      	ldr	r1, [sp, #80]	; 0x50
   82236:	4d32      	ldr	r5, [pc, #200]	; (82300 <_vfiprintf_r+0x894>)
   82238:	2710      	movs	r7, #16
   8223a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8223e:	f8dd b008 	ldr.w	fp, [sp, #8]
   82242:	e005      	b.n	82250 <_vfiprintf_r+0x7e4>
   82244:	1c88      	adds	r0, r1, #2
   82246:	3608      	adds	r6, #8
   82248:	4619      	mov	r1, r3
   8224a:	3c10      	subs	r4, #16
   8224c:	2c10      	cmp	r4, #16
   8224e:	dd10      	ble.n	82272 <_vfiprintf_r+0x806>
   82250:	1c4b      	adds	r3, r1, #1
   82252:	3210      	adds	r2, #16
   82254:	2b07      	cmp	r3, #7
   82256:	9215      	str	r2, [sp, #84]	; 0x54
   82258:	e886 00a0 	stmia.w	r6, {r5, r7}
   8225c:	9314      	str	r3, [sp, #80]	; 0x50
   8225e:	ddf1      	ble.n	82244 <_vfiprintf_r+0x7d8>
   82260:	2a00      	cmp	r2, #0
   82262:	d17d      	bne.n	82360 <_vfiprintf_r+0x8f4>
   82264:	3c10      	subs	r4, #16
   82266:	2c10      	cmp	r4, #16
   82268:	f04f 0001 	mov.w	r0, #1
   8226c:	4611      	mov	r1, r2
   8226e:	464e      	mov	r6, r9
   82270:	dcee      	bgt.n	82250 <_vfiprintf_r+0x7e4>
   82272:	4422      	add	r2, r4
   82274:	2807      	cmp	r0, #7
   82276:	9215      	str	r2, [sp, #84]	; 0x54
   82278:	6035      	str	r5, [r6, #0]
   8227a:	6074      	str	r4, [r6, #4]
   8227c:	9014      	str	r0, [sp, #80]	; 0x50
   8227e:	dd59      	ble.n	82334 <_vfiprintf_r+0x8c8>
   82280:	2a00      	cmp	r2, #0
   82282:	d14f      	bne.n	82324 <_vfiprintf_r+0x8b8>
   82284:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82286:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8228a:	9d04      	ldr	r5, [sp, #16]
   8228c:	45ab      	cmp	fp, r5
   8228e:	bfac      	ite	ge
   82290:	445c      	addge	r4, fp
   82292:	1964      	addlt	r4, r4, r5
   82294:	9409      	str	r4, [sp, #36]	; 0x24
   82296:	e05e      	b.n	82356 <_vfiprintf_r+0x8ea>
   82298:	4620      	mov	r0, r4
   8229a:	9902      	ldr	r1, [sp, #8]
   8229c:	aa13      	add	r2, sp, #76	; 0x4c
   8229e:	f7ff fba9 	bl	819f4 <__sprint_r.part.0>
   822a2:	2800      	cmp	r0, #0
   822a4:	d135      	bne.n	82312 <_vfiprintf_r+0x8a6>
   822a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   822a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   822aa:	f103 0c01 	add.w	ip, r3, #1
   822ae:	4648      	mov	r0, r9
   822b0:	e781      	b.n	821b6 <_vfiprintf_r+0x74a>
   822b2:	08e0      	lsrs	r0, r4, #3
   822b4:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   822b8:	f004 0207 	and.w	r2, r4, #7
   822bc:	08e9      	lsrs	r1, r5, #3
   822be:	3230      	adds	r2, #48	; 0x30
   822c0:	ea50 0b01 	orrs.w	fp, r0, r1
   822c4:	461f      	mov	r7, r3
   822c6:	701a      	strb	r2, [r3, #0]
   822c8:	4604      	mov	r4, r0
   822ca:	460d      	mov	r5, r1
   822cc:	f103 33ff 	add.w	r3, r3, #4294967295
   822d0:	d1ef      	bne.n	822b2 <_vfiprintf_r+0x846>
   822d2:	f01a 0f01 	tst.w	sl, #1
   822d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   822da:	4639      	mov	r1, r7
   822dc:	f000 80b9 	beq.w	82452 <_vfiprintf_r+0x9e6>
   822e0:	2a30      	cmp	r2, #48	; 0x30
   822e2:	f43f acf4 	beq.w	81cce <_vfiprintf_r+0x262>
   822e6:	461f      	mov	r7, r3
   822e8:	ebc7 0509 	rsb	r5, r7, r9
   822ec:	2330      	movs	r3, #48	; 0x30
   822ee:	9505      	str	r5, [sp, #20]
   822f0:	f801 3c01 	strb.w	r3, [r1, #-1]
   822f4:	e4ee      	b.n	81cd4 <_vfiprintf_r+0x268>
   822f6:	bf00      	nop
   822f8:	00084754 	.word	0x00084754
   822fc:	00084770 	.word	0x00084770
   82300:	00084780 	.word	0x00084780
   82304:	9b15      	ldr	r3, [sp, #84]	; 0x54
   82306:	b123      	cbz	r3, 82312 <_vfiprintf_r+0x8a6>
   82308:	9806      	ldr	r0, [sp, #24]
   8230a:	9902      	ldr	r1, [sp, #8]
   8230c:	aa13      	add	r2, sp, #76	; 0x4c
   8230e:	f7ff fb71 	bl	819f4 <__sprint_r.part.0>
   82312:	9c02      	ldr	r4, [sp, #8]
   82314:	89a3      	ldrh	r3, [r4, #12]
   82316:	065b      	lsls	r3, r3, #25
   82318:	f53f ac98 	bmi.w	81c4c <_vfiprintf_r+0x1e0>
   8231c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8231e:	b031      	add	sp, #196	; 0xc4
   82320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82324:	9806      	ldr	r0, [sp, #24]
   82326:	9902      	ldr	r1, [sp, #8]
   82328:	aa13      	add	r2, sp, #76	; 0x4c
   8232a:	f7ff fb63 	bl	819f4 <__sprint_r.part.0>
   8232e:	2800      	cmp	r0, #0
   82330:	d1ef      	bne.n	82312 <_vfiprintf_r+0x8a6>
   82332:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82334:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82336:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8233a:	9d04      	ldr	r5, [sp, #16]
   8233c:	45ab      	cmp	fp, r5
   8233e:	bfac      	ite	ge
   82340:	445c      	addge	r4, fp
   82342:	1964      	addlt	r4, r4, r5
   82344:	9409      	str	r4, [sp, #36]	; 0x24
   82346:	b132      	cbz	r2, 82356 <_vfiprintf_r+0x8ea>
   82348:	9806      	ldr	r0, [sp, #24]
   8234a:	9902      	ldr	r1, [sp, #8]
   8234c:	aa13      	add	r2, sp, #76	; 0x4c
   8234e:	f7ff fb51 	bl	819f4 <__sprint_r.part.0>
   82352:	2800      	cmp	r0, #0
   82354:	d1dd      	bne.n	82312 <_vfiprintf_r+0x8a6>
   82356:	2000      	movs	r0, #0
   82358:	9014      	str	r0, [sp, #80]	; 0x50
   8235a:	464e      	mov	r6, r9
   8235c:	f7ff bbb9 	b.w	81ad2 <_vfiprintf_r+0x66>
   82360:	4650      	mov	r0, sl
   82362:	4659      	mov	r1, fp
   82364:	aa13      	add	r2, sp, #76	; 0x4c
   82366:	f7ff fb45 	bl	819f4 <__sprint_r.part.0>
   8236a:	2800      	cmp	r0, #0
   8236c:	d1d1      	bne.n	82312 <_vfiprintf_r+0x8a6>
   8236e:	9914      	ldr	r1, [sp, #80]	; 0x50
   82370:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82372:	1c48      	adds	r0, r1, #1
   82374:	464e      	mov	r6, r9
   82376:	e768      	b.n	8224a <_vfiprintf_r+0x7de>
   82378:	2a00      	cmp	r2, #0
   8237a:	f040 80f7 	bne.w	8256c <_vfiprintf_r+0xb00>
   8237e:	9c05      	ldr	r4, [sp, #20]
   82380:	2301      	movs	r3, #1
   82382:	9720      	str	r7, [sp, #128]	; 0x80
   82384:	9421      	str	r4, [sp, #132]	; 0x84
   82386:	9415      	str	r4, [sp, #84]	; 0x54
   82388:	4622      	mov	r2, r4
   8238a:	9314      	str	r3, [sp, #80]	; 0x50
   8238c:	464e      	mov	r6, r9
   8238e:	3608      	adds	r6, #8
   82390:	e741      	b.n	82216 <_vfiprintf_r+0x7aa>
   82392:	9d04      	ldr	r5, [sp, #16]
   82394:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82398:	ebcb 0405 	rsb	r4, fp, r5
   8239c:	2c00      	cmp	r4, #0
   8239e:	f77f aef7 	ble.w	82190 <_vfiprintf_r+0x724>
   823a2:	2c10      	cmp	r4, #16
   823a4:	4da6      	ldr	r5, [pc, #664]	; (82640 <_vfiprintf_r+0xbd4>)
   823a6:	f340 8170 	ble.w	8268a <_vfiprintf_r+0xc1e>
   823aa:	4629      	mov	r1, r5
   823ac:	f04f 0b10 	mov.w	fp, #16
   823b0:	4625      	mov	r5, r4
   823b2:	4664      	mov	r4, ip
   823b4:	46b4      	mov	ip, r6
   823b6:	460e      	mov	r6, r1
   823b8:	e006      	b.n	823c8 <_vfiprintf_r+0x95c>
   823ba:	1c98      	adds	r0, r3, #2
   823bc:	f10c 0c08 	add.w	ip, ip, #8
   823c0:	460b      	mov	r3, r1
   823c2:	3d10      	subs	r5, #16
   823c4:	2d10      	cmp	r5, #16
   823c6:	dd0f      	ble.n	823e8 <_vfiprintf_r+0x97c>
   823c8:	1c59      	adds	r1, r3, #1
   823ca:	3210      	adds	r2, #16
   823cc:	2907      	cmp	r1, #7
   823ce:	9215      	str	r2, [sp, #84]	; 0x54
   823d0:	e88c 0840 	stmia.w	ip, {r6, fp}
   823d4:	9114      	str	r1, [sp, #80]	; 0x50
   823d6:	ddf0      	ble.n	823ba <_vfiprintf_r+0x94e>
   823d8:	b9ba      	cbnz	r2, 8240a <_vfiprintf_r+0x99e>
   823da:	3d10      	subs	r5, #16
   823dc:	2d10      	cmp	r5, #16
   823de:	f04f 0001 	mov.w	r0, #1
   823e2:	4613      	mov	r3, r2
   823e4:	46cc      	mov	ip, r9
   823e6:	dcef      	bgt.n	823c8 <_vfiprintf_r+0x95c>
   823e8:	4633      	mov	r3, r6
   823ea:	4666      	mov	r6, ip
   823ec:	46a4      	mov	ip, r4
   823ee:	462c      	mov	r4, r5
   823f0:	461d      	mov	r5, r3
   823f2:	4422      	add	r2, r4
   823f4:	2807      	cmp	r0, #7
   823f6:	9215      	str	r2, [sp, #84]	; 0x54
   823f8:	6035      	str	r5, [r6, #0]
   823fa:	6074      	str	r4, [r6, #4]
   823fc:	9014      	str	r0, [sp, #80]	; 0x50
   823fe:	f300 80af 	bgt.w	82560 <_vfiprintf_r+0xaf4>
   82402:	3608      	adds	r6, #8
   82404:	1c41      	adds	r1, r0, #1
   82406:	4603      	mov	r3, r0
   82408:	e6c2      	b.n	82190 <_vfiprintf_r+0x724>
   8240a:	9806      	ldr	r0, [sp, #24]
   8240c:	9902      	ldr	r1, [sp, #8]
   8240e:	aa13      	add	r2, sp, #76	; 0x4c
   82410:	f7ff faf0 	bl	819f4 <__sprint_r.part.0>
   82414:	2800      	cmp	r0, #0
   82416:	f47f af7c 	bne.w	82312 <_vfiprintf_r+0x8a6>
   8241a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8241c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8241e:	1c58      	adds	r0, r3, #1
   82420:	46cc      	mov	ip, r9
   82422:	e7ce      	b.n	823c2 <_vfiprintf_r+0x956>
   82424:	2a00      	cmp	r2, #0
   82426:	d179      	bne.n	8251c <_vfiprintf_r+0xab0>
   82428:	4619      	mov	r1, r3
   8242a:	464e      	mov	r6, r9
   8242c:	4613      	mov	r3, r2
   8242e:	e69c      	b.n	8216a <_vfiprintf_r+0x6fe>
   82430:	2a00      	cmp	r2, #0
   82432:	f040 8084 	bne.w	8253e <_vfiprintf_r+0xad2>
   82436:	2101      	movs	r1, #1
   82438:	4613      	mov	r3, r2
   8243a:	464e      	mov	r6, r9
   8243c:	e6a4      	b.n	82188 <_vfiprintf_r+0x71c>
   8243e:	464f      	mov	r7, r9
   82440:	e448      	b.n	81cd4 <_vfiprintf_r+0x268>
   82442:	2d00      	cmp	r5, #0
   82444:	bf08      	it	eq
   82446:	2c0a      	cmpeq	r4, #10
   82448:	d246      	bcs.n	824d8 <_vfiprintf_r+0xa6c>
   8244a:	3430      	adds	r4, #48	; 0x30
   8244c:	af30      	add	r7, sp, #192	; 0xc0
   8244e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   82452:	ebc7 0309 	rsb	r3, r7, r9
   82456:	9305      	str	r3, [sp, #20]
   82458:	e43c      	b.n	81cd4 <_vfiprintf_r+0x268>
   8245a:	2302      	movs	r3, #2
   8245c:	e417      	b.n	81c8e <_vfiprintf_r+0x222>
   8245e:	2a00      	cmp	r2, #0
   82460:	f040 80af 	bne.w	825c2 <_vfiprintf_r+0xb56>
   82464:	4613      	mov	r3, r2
   82466:	2101      	movs	r1, #1
   82468:	464e      	mov	r6, r9
   8246a:	e66d      	b.n	82148 <_vfiprintf_r+0x6dc>
   8246c:	4644      	mov	r4, r8
   8246e:	f7ff bb58 	b.w	81b22 <_vfiprintf_r+0xb6>
   82472:	9806      	ldr	r0, [sp, #24]
   82474:	9902      	ldr	r1, [sp, #8]
   82476:	aa13      	add	r2, sp, #76	; 0x4c
   82478:	f7ff fabc 	bl	819f4 <__sprint_r.part.0>
   8247c:	2800      	cmp	r0, #0
   8247e:	f47f af48 	bne.w	82312 <_vfiprintf_r+0x8a6>
   82482:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82484:	464e      	mov	r6, r9
   82486:	e6c6      	b.n	82216 <_vfiprintf_r+0x7aa>
   82488:	9d08      	ldr	r5, [sp, #32]
   8248a:	682c      	ldr	r4, [r5, #0]
   8248c:	3504      	adds	r5, #4
   8248e:	9508      	str	r5, [sp, #32]
   82490:	2500      	movs	r5, #0
   82492:	f7ff bbfc 	b.w	81c8e <_vfiprintf_r+0x222>
   82496:	9d08      	ldr	r5, [sp, #32]
   82498:	2301      	movs	r3, #1
   8249a:	682c      	ldr	r4, [r5, #0]
   8249c:	3504      	adds	r5, #4
   8249e:	9508      	str	r5, [sp, #32]
   824a0:	2500      	movs	r5, #0
   824a2:	f7ff bbf4 	b.w	81c8e <_vfiprintf_r+0x222>
   824a6:	9d08      	ldr	r5, [sp, #32]
   824a8:	682c      	ldr	r4, [r5, #0]
   824aa:	3504      	adds	r5, #4
   824ac:	9508      	str	r5, [sp, #32]
   824ae:	2500      	movs	r5, #0
   824b0:	e525      	b.n	81efe <_vfiprintf_r+0x492>
   824b2:	9d08      	ldr	r5, [sp, #32]
   824b4:	682c      	ldr	r4, [r5, #0]
   824b6:	3504      	adds	r5, #4
   824b8:	9508      	str	r5, [sp, #32]
   824ba:	17e5      	asrs	r5, r4, #31
   824bc:	4622      	mov	r2, r4
   824be:	462b      	mov	r3, r5
   824c0:	e48e      	b.n	81de0 <_vfiprintf_r+0x374>
   824c2:	9806      	ldr	r0, [sp, #24]
   824c4:	9902      	ldr	r1, [sp, #8]
   824c6:	aa13      	add	r2, sp, #76	; 0x4c
   824c8:	f7ff fa94 	bl	819f4 <__sprint_r.part.0>
   824cc:	2800      	cmp	r0, #0
   824ce:	f47f af20 	bne.w	82312 <_vfiprintf_r+0x8a6>
   824d2:	464e      	mov	r6, r9
   824d4:	f7ff bb9a 	b.w	81c0c <_vfiprintf_r+0x1a0>
   824d8:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   824dc:	9603      	str	r6, [sp, #12]
   824de:	465e      	mov	r6, fp
   824e0:	46e3      	mov	fp, ip
   824e2:	4620      	mov	r0, r4
   824e4:	4629      	mov	r1, r5
   824e6:	220a      	movs	r2, #10
   824e8:	2300      	movs	r3, #0
   824ea:	f001 fdb9 	bl	84060 <__aeabi_uldivmod>
   824ee:	3230      	adds	r2, #48	; 0x30
   824f0:	7032      	strb	r2, [r6, #0]
   824f2:	4620      	mov	r0, r4
   824f4:	4629      	mov	r1, r5
   824f6:	220a      	movs	r2, #10
   824f8:	2300      	movs	r3, #0
   824fa:	f001 fdb1 	bl	84060 <__aeabi_uldivmod>
   824fe:	4604      	mov	r4, r0
   82500:	460d      	mov	r5, r1
   82502:	ea54 0005 	orrs.w	r0, r4, r5
   82506:	4637      	mov	r7, r6
   82508:	f106 36ff 	add.w	r6, r6, #4294967295
   8250c:	d1e9      	bne.n	824e2 <_vfiprintf_r+0xa76>
   8250e:	ebc7 0309 	rsb	r3, r7, r9
   82512:	46dc      	mov	ip, fp
   82514:	9e03      	ldr	r6, [sp, #12]
   82516:	9305      	str	r3, [sp, #20]
   82518:	f7ff bbdc 	b.w	81cd4 <_vfiprintf_r+0x268>
   8251c:	9806      	ldr	r0, [sp, #24]
   8251e:	9902      	ldr	r1, [sp, #8]
   82520:	aa13      	add	r2, sp, #76	; 0x4c
   82522:	f8cd c004 	str.w	ip, [sp, #4]
   82526:	f7ff fa65 	bl	819f4 <__sprint_r.part.0>
   8252a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8252e:	2800      	cmp	r0, #0
   82530:	f47f aeef 	bne.w	82312 <_vfiprintf_r+0x8a6>
   82534:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82536:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82538:	1c59      	adds	r1, r3, #1
   8253a:	464e      	mov	r6, r9
   8253c:	e615      	b.n	8216a <_vfiprintf_r+0x6fe>
   8253e:	9806      	ldr	r0, [sp, #24]
   82540:	9902      	ldr	r1, [sp, #8]
   82542:	aa13      	add	r2, sp, #76	; 0x4c
   82544:	f8cd c004 	str.w	ip, [sp, #4]
   82548:	f7ff fa54 	bl	819f4 <__sprint_r.part.0>
   8254c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82550:	2800      	cmp	r0, #0
   82552:	f47f aede 	bne.w	82312 <_vfiprintf_r+0x8a6>
   82556:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82558:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8255a:	1c59      	adds	r1, r3, #1
   8255c:	464e      	mov	r6, r9
   8255e:	e613      	b.n	82188 <_vfiprintf_r+0x71c>
   82560:	2a00      	cmp	r2, #0
   82562:	d156      	bne.n	82612 <_vfiprintf_r+0xba6>
   82564:	2101      	movs	r1, #1
   82566:	4613      	mov	r3, r2
   82568:	464e      	mov	r6, r9
   8256a:	e611      	b.n	82190 <_vfiprintf_r+0x724>
   8256c:	9806      	ldr	r0, [sp, #24]
   8256e:	9902      	ldr	r1, [sp, #8]
   82570:	aa13      	add	r2, sp, #76	; 0x4c
   82572:	f7ff fa3f 	bl	819f4 <__sprint_r.part.0>
   82576:	2800      	cmp	r0, #0
   82578:	f47f aecb 	bne.w	82312 <_vfiprintf_r+0x8a6>
   8257c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8257e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82580:	3101      	adds	r1, #1
   82582:	464e      	mov	r6, r9
   82584:	e639      	b.n	821fa <_vfiprintf_r+0x78e>
   82586:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8258a:	4264      	negs	r4, r4
   8258c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82590:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82594:	f8cd b01c 	str.w	fp, [sp, #28]
   82598:	f8cd c014 	str.w	ip, [sp, #20]
   8259c:	2301      	movs	r3, #1
   8259e:	f7ff bb7e 	b.w	81c9e <_vfiprintf_r+0x232>
   825a2:	f01a 0f10 	tst.w	sl, #16
   825a6:	d11d      	bne.n	825e4 <_vfiprintf_r+0xb78>
   825a8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   825ac:	d058      	beq.n	82660 <_vfiprintf_r+0xbf4>
   825ae:	9d08      	ldr	r5, [sp, #32]
   825b0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   825b4:	682b      	ldr	r3, [r5, #0]
   825b6:	3504      	adds	r5, #4
   825b8:	9508      	str	r5, [sp, #32]
   825ba:	f8a3 b000 	strh.w	fp, [r3]
   825be:	f7ff ba88 	b.w	81ad2 <_vfiprintf_r+0x66>
   825c2:	9806      	ldr	r0, [sp, #24]
   825c4:	9902      	ldr	r1, [sp, #8]
   825c6:	aa13      	add	r2, sp, #76	; 0x4c
   825c8:	f8cd c004 	str.w	ip, [sp, #4]
   825cc:	f7ff fa12 	bl	819f4 <__sprint_r.part.0>
   825d0:	f8dd c004 	ldr.w	ip, [sp, #4]
   825d4:	2800      	cmp	r0, #0
   825d6:	f47f ae9c 	bne.w	82312 <_vfiprintf_r+0x8a6>
   825da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   825dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   825de:	1c59      	adds	r1, r3, #1
   825e0:	464e      	mov	r6, r9
   825e2:	e5b1      	b.n	82148 <_vfiprintf_r+0x6dc>
   825e4:	f8dd b020 	ldr.w	fp, [sp, #32]
   825e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   825ea:	f8db 3000 	ldr.w	r3, [fp]
   825ee:	f10b 0b04 	add.w	fp, fp, #4
   825f2:	f8cd b020 	str.w	fp, [sp, #32]
   825f6:	601c      	str	r4, [r3, #0]
   825f8:	f7ff ba6b 	b.w	81ad2 <_vfiprintf_r+0x66>
   825fc:	9408      	str	r4, [sp, #32]
   825fe:	f7ff f9c9 	bl	81994 <strlen>
   82602:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   82606:	9005      	str	r0, [sp, #20]
   82608:	9407      	str	r4, [sp, #28]
   8260a:	f04f 0c00 	mov.w	ip, #0
   8260e:	f7ff bb61 	b.w	81cd4 <_vfiprintf_r+0x268>
   82612:	9806      	ldr	r0, [sp, #24]
   82614:	9902      	ldr	r1, [sp, #8]
   82616:	aa13      	add	r2, sp, #76	; 0x4c
   82618:	f8cd c004 	str.w	ip, [sp, #4]
   8261c:	f7ff f9ea 	bl	819f4 <__sprint_r.part.0>
   82620:	f8dd c004 	ldr.w	ip, [sp, #4]
   82624:	2800      	cmp	r0, #0
   82626:	f47f ae74 	bne.w	82312 <_vfiprintf_r+0x8a6>
   8262a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8262c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8262e:	1c59      	adds	r1, r3, #1
   82630:	464e      	mov	r6, r9
   82632:	e5ad      	b.n	82190 <_vfiprintf_r+0x724>
   82634:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82636:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82638:	3301      	adds	r3, #1
   8263a:	4d02      	ldr	r5, [pc, #8]	; (82644 <_vfiprintf_r+0xbd8>)
   8263c:	f7ff bb9a 	b.w	81d74 <_vfiprintf_r+0x308>
   82640:	00084770 	.word	0x00084770
   82644:	00084780 	.word	0x00084780
   82648:	f1bc 0f06 	cmp.w	ip, #6
   8264c:	bf34      	ite	cc
   8264e:	4663      	movcc	r3, ip
   82650:	2306      	movcs	r3, #6
   82652:	9408      	str	r4, [sp, #32]
   82654:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82658:	9305      	str	r3, [sp, #20]
   8265a:	9403      	str	r4, [sp, #12]
   8265c:	4f16      	ldr	r7, [pc, #88]	; (826b8 <_vfiprintf_r+0xc4c>)
   8265e:	e472      	b.n	81f46 <_vfiprintf_r+0x4da>
   82660:	9c08      	ldr	r4, [sp, #32]
   82662:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82664:	6823      	ldr	r3, [r4, #0]
   82666:	3404      	adds	r4, #4
   82668:	9408      	str	r4, [sp, #32]
   8266a:	601d      	str	r5, [r3, #0]
   8266c:	f7ff ba31 	b.w	81ad2 <_vfiprintf_r+0x66>
   82670:	9814      	ldr	r0, [sp, #80]	; 0x50
   82672:	4d12      	ldr	r5, [pc, #72]	; (826bc <_vfiprintf_r+0xc50>)
   82674:	3001      	adds	r0, #1
   82676:	e5fc      	b.n	82272 <_vfiprintf_r+0x806>
   82678:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8267c:	f8cd c014 	str.w	ip, [sp, #20]
   82680:	9507      	str	r5, [sp, #28]
   82682:	9408      	str	r4, [sp, #32]
   82684:	4684      	mov	ip, r0
   82686:	f7ff bb25 	b.w	81cd4 <_vfiprintf_r+0x268>
   8268a:	4608      	mov	r0, r1
   8268c:	e6b1      	b.n	823f2 <_vfiprintf_r+0x986>
   8268e:	46a0      	mov	r8, r4
   82690:	2500      	movs	r5, #0
   82692:	f7ff ba5a 	b.w	81b4a <_vfiprintf_r+0xde>
   82696:	f8dd b020 	ldr.w	fp, [sp, #32]
   8269a:	f898 3001 	ldrb.w	r3, [r8, #1]
   8269e:	f8db 5000 	ldr.w	r5, [fp]
   826a2:	f10b 0204 	add.w	r2, fp, #4
   826a6:	2d00      	cmp	r5, #0
   826a8:	9208      	str	r2, [sp, #32]
   826aa:	46a0      	mov	r8, r4
   826ac:	f6bf aa4b 	bge.w	81b46 <_vfiprintf_r+0xda>
   826b0:	f04f 35ff 	mov.w	r5, #4294967295
   826b4:	f7ff ba47 	b.w	81b46 <_vfiprintf_r+0xda>
   826b8:	00084768 	.word	0x00084768
   826bc:	00084780 	.word	0x00084780

000826c0 <__sbprintf>:
   826c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   826c4:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   826c6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   826ca:	4688      	mov	r8, r1
   826cc:	9719      	str	r7, [sp, #100]	; 0x64
   826ce:	f8d8 701c 	ldr.w	r7, [r8, #28]
   826d2:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   826d6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   826da:	9707      	str	r7, [sp, #28]
   826dc:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   826e0:	ac1a      	add	r4, sp, #104	; 0x68
   826e2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   826e6:	f02a 0a02 	bic.w	sl, sl, #2
   826ea:	2600      	movs	r6, #0
   826ec:	4669      	mov	r1, sp
   826ee:	9400      	str	r4, [sp, #0]
   826f0:	9404      	str	r4, [sp, #16]
   826f2:	9502      	str	r5, [sp, #8]
   826f4:	9505      	str	r5, [sp, #20]
   826f6:	f8ad a00c 	strh.w	sl, [sp, #12]
   826fa:	f8ad 900e 	strh.w	r9, [sp, #14]
   826fe:	9709      	str	r7, [sp, #36]	; 0x24
   82700:	9606      	str	r6, [sp, #24]
   82702:	4605      	mov	r5, r0
   82704:	f7ff f9b2 	bl	81a6c <_vfiprintf_r>
   82708:	1e04      	subs	r4, r0, #0
   8270a:	db07      	blt.n	8271c <__sbprintf+0x5c>
   8270c:	4628      	mov	r0, r5
   8270e:	4669      	mov	r1, sp
   82710:	f000 f92a 	bl	82968 <_fflush_r>
   82714:	42b0      	cmp	r0, r6
   82716:	bf18      	it	ne
   82718:	f04f 34ff 	movne.w	r4, #4294967295
   8271c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82720:	065b      	lsls	r3, r3, #25
   82722:	d505      	bpl.n	82730 <__sbprintf+0x70>
   82724:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8272c:	f8a8 300c 	strh.w	r3, [r8, #12]
   82730:	4620      	mov	r0, r4
   82732:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8273a:	bf00      	nop

0008273c <__swsetup_r>:
   8273c:	4b2f      	ldr	r3, [pc, #188]	; (827fc <__swsetup_r+0xc0>)
   8273e:	b570      	push	{r4, r5, r6, lr}
   82740:	4606      	mov	r6, r0
   82742:	6818      	ldr	r0, [r3, #0]
   82744:	460c      	mov	r4, r1
   82746:	b110      	cbz	r0, 8274e <__swsetup_r+0x12>
   82748:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8274a:	2a00      	cmp	r2, #0
   8274c:	d036      	beq.n	827bc <__swsetup_r+0x80>
   8274e:	89a5      	ldrh	r5, [r4, #12]
   82750:	b2ab      	uxth	r3, r5
   82752:	0719      	lsls	r1, r3, #28
   82754:	d50c      	bpl.n	82770 <__swsetup_r+0x34>
   82756:	6922      	ldr	r2, [r4, #16]
   82758:	b1aa      	cbz	r2, 82786 <__swsetup_r+0x4a>
   8275a:	f013 0101 	ands.w	r1, r3, #1
   8275e:	d01e      	beq.n	8279e <__swsetup_r+0x62>
   82760:	6963      	ldr	r3, [r4, #20]
   82762:	2100      	movs	r1, #0
   82764:	425b      	negs	r3, r3
   82766:	61a3      	str	r3, [r4, #24]
   82768:	60a1      	str	r1, [r4, #8]
   8276a:	b1f2      	cbz	r2, 827aa <__swsetup_r+0x6e>
   8276c:	2000      	movs	r0, #0
   8276e:	bd70      	pop	{r4, r5, r6, pc}
   82770:	06da      	lsls	r2, r3, #27
   82772:	d53a      	bpl.n	827ea <__swsetup_r+0xae>
   82774:	075b      	lsls	r3, r3, #29
   82776:	d424      	bmi.n	827c2 <__swsetup_r+0x86>
   82778:	6922      	ldr	r2, [r4, #16]
   8277a:	f045 0308 	orr.w	r3, r5, #8
   8277e:	81a3      	strh	r3, [r4, #12]
   82780:	b29b      	uxth	r3, r3
   82782:	2a00      	cmp	r2, #0
   82784:	d1e9      	bne.n	8275a <__swsetup_r+0x1e>
   82786:	f403 7120 	and.w	r1, r3, #640	; 0x280
   8278a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8278e:	d0e4      	beq.n	8275a <__swsetup_r+0x1e>
   82790:	4630      	mov	r0, r6
   82792:	4621      	mov	r1, r4
   82794:	f000 fcce 	bl	83134 <__smakebuf_r>
   82798:	89a3      	ldrh	r3, [r4, #12]
   8279a:	6922      	ldr	r2, [r4, #16]
   8279c:	e7dd      	b.n	8275a <__swsetup_r+0x1e>
   8279e:	0798      	lsls	r0, r3, #30
   827a0:	bf58      	it	pl
   827a2:	6961      	ldrpl	r1, [r4, #20]
   827a4:	60a1      	str	r1, [r4, #8]
   827a6:	2a00      	cmp	r2, #0
   827a8:	d1e0      	bne.n	8276c <__swsetup_r+0x30>
   827aa:	89a3      	ldrh	r3, [r4, #12]
   827ac:	061a      	lsls	r2, r3, #24
   827ae:	d5dd      	bpl.n	8276c <__swsetup_r+0x30>
   827b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   827b4:	81a3      	strh	r3, [r4, #12]
   827b6:	f04f 30ff 	mov.w	r0, #4294967295
   827ba:	bd70      	pop	{r4, r5, r6, pc}
   827bc:	f000 f8f0 	bl	829a0 <__sinit>
   827c0:	e7c5      	b.n	8274e <__swsetup_r+0x12>
   827c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   827c4:	b149      	cbz	r1, 827da <__swsetup_r+0x9e>
   827c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   827ca:	4299      	cmp	r1, r3
   827cc:	d003      	beq.n	827d6 <__swsetup_r+0x9a>
   827ce:	4630      	mov	r0, r6
   827d0:	f000 fa2a 	bl	82c28 <_free_r>
   827d4:	89a5      	ldrh	r5, [r4, #12]
   827d6:	2300      	movs	r3, #0
   827d8:	6323      	str	r3, [r4, #48]	; 0x30
   827da:	6922      	ldr	r2, [r4, #16]
   827dc:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   827e0:	2100      	movs	r1, #0
   827e2:	b2ad      	uxth	r5, r5
   827e4:	6022      	str	r2, [r4, #0]
   827e6:	6061      	str	r1, [r4, #4]
   827e8:	e7c7      	b.n	8277a <__swsetup_r+0x3e>
   827ea:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   827ee:	2309      	movs	r3, #9
   827f0:	6033      	str	r3, [r6, #0]
   827f2:	f04f 30ff 	mov.w	r0, #4294967295
   827f6:	81a5      	strh	r5, [r4, #12]
   827f8:	bd70      	pop	{r4, r5, r6, pc}
   827fa:	bf00      	nop
   827fc:	20070568 	.word	0x20070568

00082800 <register_fini>:
   82800:	4b02      	ldr	r3, [pc, #8]	; (8280c <register_fini+0xc>)
   82802:	b113      	cbz	r3, 8280a <register_fini+0xa>
   82804:	4802      	ldr	r0, [pc, #8]	; (82810 <register_fini+0x10>)
   82806:	f000 b805 	b.w	82814 <atexit>
   8280a:	4770      	bx	lr
   8280c:	00000000 	.word	0x00000000
   82810:	00082a9d 	.word	0x00082a9d

00082814 <atexit>:
   82814:	4601      	mov	r1, r0
   82816:	2000      	movs	r0, #0
   82818:	4602      	mov	r2, r0
   8281a:	4603      	mov	r3, r0
   8281c:	f001 bb24 	b.w	83e68 <__register_exitproc>

00082820 <__sflush_r>:
   82820:	898b      	ldrh	r3, [r1, #12]
   82822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82826:	b29a      	uxth	r2, r3
   82828:	460d      	mov	r5, r1
   8282a:	0711      	lsls	r1, r2, #28
   8282c:	4680      	mov	r8, r0
   8282e:	d43c      	bmi.n	828aa <__sflush_r+0x8a>
   82830:	686a      	ldr	r2, [r5, #4]
   82832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82836:	2a00      	cmp	r2, #0
   82838:	81ab      	strh	r3, [r5, #12]
   8283a:	dd59      	ble.n	828f0 <__sflush_r+0xd0>
   8283c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8283e:	2c00      	cmp	r4, #0
   82840:	d04b      	beq.n	828da <__sflush_r+0xba>
   82842:	b29b      	uxth	r3, r3
   82844:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82848:	2100      	movs	r1, #0
   8284a:	b292      	uxth	r2, r2
   8284c:	f8d8 6000 	ldr.w	r6, [r8]
   82850:	f8c8 1000 	str.w	r1, [r8]
   82854:	2a00      	cmp	r2, #0
   82856:	d04f      	beq.n	828f8 <__sflush_r+0xd8>
   82858:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8285a:	075f      	lsls	r7, r3, #29
   8285c:	d505      	bpl.n	8286a <__sflush_r+0x4a>
   8285e:	6869      	ldr	r1, [r5, #4]
   82860:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82862:	1a52      	subs	r2, r2, r1
   82864:	b10b      	cbz	r3, 8286a <__sflush_r+0x4a>
   82866:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82868:	1ad2      	subs	r2, r2, r3
   8286a:	4640      	mov	r0, r8
   8286c:	69e9      	ldr	r1, [r5, #28]
   8286e:	2300      	movs	r3, #0
   82870:	47a0      	blx	r4
   82872:	1c44      	adds	r4, r0, #1
   82874:	d04a      	beq.n	8290c <__sflush_r+0xec>
   82876:	89ab      	ldrh	r3, [r5, #12]
   82878:	692a      	ldr	r2, [r5, #16]
   8287a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8287e:	b29b      	uxth	r3, r3
   82880:	2100      	movs	r1, #0
   82882:	602a      	str	r2, [r5, #0]
   82884:	04da      	lsls	r2, r3, #19
   82886:	81ab      	strh	r3, [r5, #12]
   82888:	6069      	str	r1, [r5, #4]
   8288a:	d44c      	bmi.n	82926 <__sflush_r+0x106>
   8288c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8288e:	f8c8 6000 	str.w	r6, [r8]
   82892:	b311      	cbz	r1, 828da <__sflush_r+0xba>
   82894:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82898:	4299      	cmp	r1, r3
   8289a:	d002      	beq.n	828a2 <__sflush_r+0x82>
   8289c:	4640      	mov	r0, r8
   8289e:	f000 f9c3 	bl	82c28 <_free_r>
   828a2:	2000      	movs	r0, #0
   828a4:	6328      	str	r0, [r5, #48]	; 0x30
   828a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828aa:	692e      	ldr	r6, [r5, #16]
   828ac:	b1ae      	cbz	r6, 828da <__sflush_r+0xba>
   828ae:	0791      	lsls	r1, r2, #30
   828b0:	682c      	ldr	r4, [r5, #0]
   828b2:	bf0c      	ite	eq
   828b4:	696b      	ldreq	r3, [r5, #20]
   828b6:	2300      	movne	r3, #0
   828b8:	602e      	str	r6, [r5, #0]
   828ba:	1ba4      	subs	r4, r4, r6
   828bc:	60ab      	str	r3, [r5, #8]
   828be:	e00a      	b.n	828d6 <__sflush_r+0xb6>
   828c0:	4632      	mov	r2, r6
   828c2:	4623      	mov	r3, r4
   828c4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   828c6:	4640      	mov	r0, r8
   828c8:	69e9      	ldr	r1, [r5, #28]
   828ca:	47b8      	blx	r7
   828cc:	2800      	cmp	r0, #0
   828ce:	ebc0 0404 	rsb	r4, r0, r4
   828d2:	4406      	add	r6, r0
   828d4:	dd04      	ble.n	828e0 <__sflush_r+0xc0>
   828d6:	2c00      	cmp	r4, #0
   828d8:	dcf2      	bgt.n	828c0 <__sflush_r+0xa0>
   828da:	2000      	movs	r0, #0
   828dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828e0:	89ab      	ldrh	r3, [r5, #12]
   828e2:	f04f 30ff 	mov.w	r0, #4294967295
   828e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   828ea:	81ab      	strh	r3, [r5, #12]
   828ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828f0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   828f2:	2a00      	cmp	r2, #0
   828f4:	dca2      	bgt.n	8283c <__sflush_r+0x1c>
   828f6:	e7f0      	b.n	828da <__sflush_r+0xba>
   828f8:	2301      	movs	r3, #1
   828fa:	4640      	mov	r0, r8
   828fc:	69e9      	ldr	r1, [r5, #28]
   828fe:	47a0      	blx	r4
   82900:	1c43      	adds	r3, r0, #1
   82902:	4602      	mov	r2, r0
   82904:	d01e      	beq.n	82944 <__sflush_r+0x124>
   82906:	89ab      	ldrh	r3, [r5, #12]
   82908:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8290a:	e7a6      	b.n	8285a <__sflush_r+0x3a>
   8290c:	f8d8 3000 	ldr.w	r3, [r8]
   82910:	b95b      	cbnz	r3, 8292a <__sflush_r+0x10a>
   82912:	89aa      	ldrh	r2, [r5, #12]
   82914:	6929      	ldr	r1, [r5, #16]
   82916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8291a:	b292      	uxth	r2, r2
   8291c:	606b      	str	r3, [r5, #4]
   8291e:	04d3      	lsls	r3, r2, #19
   82920:	81aa      	strh	r2, [r5, #12]
   82922:	6029      	str	r1, [r5, #0]
   82924:	d5b2      	bpl.n	8288c <__sflush_r+0x6c>
   82926:	6528      	str	r0, [r5, #80]	; 0x50
   82928:	e7b0      	b.n	8288c <__sflush_r+0x6c>
   8292a:	2b1d      	cmp	r3, #29
   8292c:	d001      	beq.n	82932 <__sflush_r+0x112>
   8292e:	2b16      	cmp	r3, #22
   82930:	d113      	bne.n	8295a <__sflush_r+0x13a>
   82932:	89a9      	ldrh	r1, [r5, #12]
   82934:	692b      	ldr	r3, [r5, #16]
   82936:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   8293a:	2200      	movs	r2, #0
   8293c:	81a9      	strh	r1, [r5, #12]
   8293e:	602b      	str	r3, [r5, #0]
   82940:	606a      	str	r2, [r5, #4]
   82942:	e7a3      	b.n	8288c <__sflush_r+0x6c>
   82944:	f8d8 3000 	ldr.w	r3, [r8]
   82948:	2b00      	cmp	r3, #0
   8294a:	d0dc      	beq.n	82906 <__sflush_r+0xe6>
   8294c:	2b1d      	cmp	r3, #29
   8294e:	d001      	beq.n	82954 <__sflush_r+0x134>
   82950:	2b16      	cmp	r3, #22
   82952:	d1c5      	bne.n	828e0 <__sflush_r+0xc0>
   82954:	f8c8 6000 	str.w	r6, [r8]
   82958:	e7bf      	b.n	828da <__sflush_r+0xba>
   8295a:	89ab      	ldrh	r3, [r5, #12]
   8295c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82960:	81ab      	strh	r3, [r5, #12]
   82962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82966:	bf00      	nop

00082968 <_fflush_r>:
   82968:	b510      	push	{r4, lr}
   8296a:	4604      	mov	r4, r0
   8296c:	b082      	sub	sp, #8
   8296e:	b108      	cbz	r0, 82974 <_fflush_r+0xc>
   82970:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82972:	b153      	cbz	r3, 8298a <_fflush_r+0x22>
   82974:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82978:	b908      	cbnz	r0, 8297e <_fflush_r+0x16>
   8297a:	b002      	add	sp, #8
   8297c:	bd10      	pop	{r4, pc}
   8297e:	4620      	mov	r0, r4
   82980:	b002      	add	sp, #8
   82982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82986:	f7ff bf4b 	b.w	82820 <__sflush_r>
   8298a:	9101      	str	r1, [sp, #4]
   8298c:	f000 f808 	bl	829a0 <__sinit>
   82990:	9901      	ldr	r1, [sp, #4]
   82992:	e7ef      	b.n	82974 <_fflush_r+0xc>

00082994 <_cleanup_r>:
   82994:	4901      	ldr	r1, [pc, #4]	; (8299c <_cleanup_r+0x8>)
   82996:	f000 bb9f 	b.w	830d8 <_fwalk>
   8299a:	bf00      	nop
   8299c:	00083fb5 	.word	0x00083fb5

000829a0 <__sinit>:
   829a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   829a4:	6b84      	ldr	r4, [r0, #56]	; 0x38
   829a6:	b083      	sub	sp, #12
   829a8:	4607      	mov	r7, r0
   829aa:	2c00      	cmp	r4, #0
   829ac:	d165      	bne.n	82a7a <__sinit+0xda>
   829ae:	687d      	ldr	r5, [r7, #4]
   829b0:	4833      	ldr	r0, [pc, #204]	; (82a80 <__sinit+0xe0>)
   829b2:	2304      	movs	r3, #4
   829b4:	2103      	movs	r1, #3
   829b6:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   829ba:	63f8      	str	r0, [r7, #60]	; 0x3c
   829bc:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   829c0:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   829c4:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   829c8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   829cc:	81ab      	strh	r3, [r5, #12]
   829ce:	602c      	str	r4, [r5, #0]
   829d0:	606c      	str	r4, [r5, #4]
   829d2:	60ac      	str	r4, [r5, #8]
   829d4:	666c      	str	r4, [r5, #100]	; 0x64
   829d6:	81ec      	strh	r4, [r5, #14]
   829d8:	612c      	str	r4, [r5, #16]
   829da:	616c      	str	r4, [r5, #20]
   829dc:	61ac      	str	r4, [r5, #24]
   829de:	4621      	mov	r1, r4
   829e0:	2208      	movs	r2, #8
   829e2:	f7fe ff05 	bl	817f0 <memset>
   829e6:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82a84 <__sinit+0xe4>
   829ea:	68be      	ldr	r6, [r7, #8]
   829ec:	f8df a098 	ldr.w	sl, [pc, #152]	; 82a88 <__sinit+0xe8>
   829f0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82a8c <__sinit+0xec>
   829f4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82a90 <__sinit+0xf0>
   829f8:	2301      	movs	r3, #1
   829fa:	2209      	movs	r2, #9
   829fc:	61ed      	str	r5, [r5, #28]
   829fe:	f8c5 b020 	str.w	fp, [r5, #32]
   82a02:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82a06:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82a0a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82a0e:	4621      	mov	r1, r4
   82a10:	81f3      	strh	r3, [r6, #14]
   82a12:	81b2      	strh	r2, [r6, #12]
   82a14:	6034      	str	r4, [r6, #0]
   82a16:	6074      	str	r4, [r6, #4]
   82a18:	60b4      	str	r4, [r6, #8]
   82a1a:	6674      	str	r4, [r6, #100]	; 0x64
   82a1c:	6134      	str	r4, [r6, #16]
   82a1e:	6174      	str	r4, [r6, #20]
   82a20:	61b4      	str	r4, [r6, #24]
   82a22:	2208      	movs	r2, #8
   82a24:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82a28:	9301      	str	r3, [sp, #4]
   82a2a:	f7fe fee1 	bl	817f0 <memset>
   82a2e:	68fd      	ldr	r5, [r7, #12]
   82a30:	2012      	movs	r0, #18
   82a32:	2202      	movs	r2, #2
   82a34:	61f6      	str	r6, [r6, #28]
   82a36:	f8c6 b020 	str.w	fp, [r6, #32]
   82a3a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82a3e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82a42:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82a46:	4621      	mov	r1, r4
   82a48:	81a8      	strh	r0, [r5, #12]
   82a4a:	81ea      	strh	r2, [r5, #14]
   82a4c:	602c      	str	r4, [r5, #0]
   82a4e:	606c      	str	r4, [r5, #4]
   82a50:	60ac      	str	r4, [r5, #8]
   82a52:	666c      	str	r4, [r5, #100]	; 0x64
   82a54:	612c      	str	r4, [r5, #16]
   82a56:	616c      	str	r4, [r5, #20]
   82a58:	61ac      	str	r4, [r5, #24]
   82a5a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82a5e:	2208      	movs	r2, #8
   82a60:	f7fe fec6 	bl	817f0 <memset>
   82a64:	9b01      	ldr	r3, [sp, #4]
   82a66:	61ed      	str	r5, [r5, #28]
   82a68:	f8c5 b020 	str.w	fp, [r5, #32]
   82a6c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82a70:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82a74:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82a78:	63bb      	str	r3, [r7, #56]	; 0x38
   82a7a:	b003      	add	sp, #12
   82a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a80:	00082995 	.word	0x00082995
   82a84:	00083ca9 	.word	0x00083ca9
   82a88:	00083ccd 	.word	0x00083ccd
   82a8c:	00083d05 	.word	0x00083d05
   82a90:	00083d25 	.word	0x00083d25

00082a94 <__sfp_lock_acquire>:
   82a94:	4770      	bx	lr
   82a96:	bf00      	nop

00082a98 <__sfp_lock_release>:
   82a98:	4770      	bx	lr
   82a9a:	bf00      	nop

00082a9c <__libc_fini_array>:
   82a9c:	b538      	push	{r3, r4, r5, lr}
   82a9e:	4d09      	ldr	r5, [pc, #36]	; (82ac4 <__libc_fini_array+0x28>)
   82aa0:	4c09      	ldr	r4, [pc, #36]	; (82ac8 <__libc_fini_array+0x2c>)
   82aa2:	1b64      	subs	r4, r4, r5
   82aa4:	10a4      	asrs	r4, r4, #2
   82aa6:	bf18      	it	ne
   82aa8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82aac:	d005      	beq.n	82aba <__libc_fini_array+0x1e>
   82aae:	3c01      	subs	r4, #1
   82ab0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82ab4:	4798      	blx	r3
   82ab6:	2c00      	cmp	r4, #0
   82ab8:	d1f9      	bne.n	82aae <__libc_fini_array+0x12>
   82aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82abe:	f001 be71 	b.w	847a4 <_fini>
   82ac2:	bf00      	nop
   82ac4:	000847b0 	.word	0x000847b0
   82ac8:	000847b4 	.word	0x000847b4

00082acc <_fputwc_r>:
   82acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82ad0:	8993      	ldrh	r3, [r2, #12]
   82ad2:	460f      	mov	r7, r1
   82ad4:	0499      	lsls	r1, r3, #18
   82ad6:	b082      	sub	sp, #8
   82ad8:	4614      	mov	r4, r2
   82ada:	4680      	mov	r8, r0
   82adc:	d406      	bmi.n	82aec <_fputwc_r+0x20>
   82ade:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82ae0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82ae8:	81a3      	strh	r3, [r4, #12]
   82aea:	6662      	str	r2, [r4, #100]	; 0x64
   82aec:	f000 fb1c 	bl	83128 <__locale_mb_cur_max>
   82af0:	2801      	cmp	r0, #1
   82af2:	d03e      	beq.n	82b72 <_fputwc_r+0xa6>
   82af4:	463a      	mov	r2, r7
   82af6:	4640      	mov	r0, r8
   82af8:	a901      	add	r1, sp, #4
   82afa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82afe:	f001 f969 	bl	83dd4 <_wcrtomb_r>
   82b02:	1c42      	adds	r2, r0, #1
   82b04:	4606      	mov	r6, r0
   82b06:	d02d      	beq.n	82b64 <_fputwc_r+0x98>
   82b08:	2800      	cmp	r0, #0
   82b0a:	d03a      	beq.n	82b82 <_fputwc_r+0xb6>
   82b0c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82b10:	2500      	movs	r5, #0
   82b12:	e009      	b.n	82b28 <_fputwc_r+0x5c>
   82b14:	6823      	ldr	r3, [r4, #0]
   82b16:	7019      	strb	r1, [r3, #0]
   82b18:	6823      	ldr	r3, [r4, #0]
   82b1a:	3301      	adds	r3, #1
   82b1c:	6023      	str	r3, [r4, #0]
   82b1e:	3501      	adds	r5, #1
   82b20:	42b5      	cmp	r5, r6
   82b22:	d22e      	bcs.n	82b82 <_fputwc_r+0xb6>
   82b24:	ab01      	add	r3, sp, #4
   82b26:	5ce9      	ldrb	r1, [r5, r3]
   82b28:	68a3      	ldr	r3, [r4, #8]
   82b2a:	3b01      	subs	r3, #1
   82b2c:	2b00      	cmp	r3, #0
   82b2e:	60a3      	str	r3, [r4, #8]
   82b30:	daf0      	bge.n	82b14 <_fputwc_r+0x48>
   82b32:	69a2      	ldr	r2, [r4, #24]
   82b34:	4293      	cmp	r3, r2
   82b36:	db06      	blt.n	82b46 <_fputwc_r+0x7a>
   82b38:	6823      	ldr	r3, [r4, #0]
   82b3a:	7019      	strb	r1, [r3, #0]
   82b3c:	6823      	ldr	r3, [r4, #0]
   82b3e:	7819      	ldrb	r1, [r3, #0]
   82b40:	3301      	adds	r3, #1
   82b42:	290a      	cmp	r1, #10
   82b44:	d1ea      	bne.n	82b1c <_fputwc_r+0x50>
   82b46:	4640      	mov	r0, r8
   82b48:	4622      	mov	r2, r4
   82b4a:	f001 f8ef 	bl	83d2c <__swbuf_r>
   82b4e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82b52:	4258      	negs	r0, r3
   82b54:	4158      	adcs	r0, r3
   82b56:	2800      	cmp	r0, #0
   82b58:	d0e1      	beq.n	82b1e <_fputwc_r+0x52>
   82b5a:	f04f 30ff 	mov.w	r0, #4294967295
   82b5e:	b002      	add	sp, #8
   82b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b64:	89a3      	ldrh	r3, [r4, #12]
   82b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82b6a:	81a3      	strh	r3, [r4, #12]
   82b6c:	b002      	add	sp, #8
   82b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b72:	1e7b      	subs	r3, r7, #1
   82b74:	2bfe      	cmp	r3, #254	; 0xfe
   82b76:	d8bd      	bhi.n	82af4 <_fputwc_r+0x28>
   82b78:	b2f9      	uxtb	r1, r7
   82b7a:	4606      	mov	r6, r0
   82b7c:	f88d 1004 	strb.w	r1, [sp, #4]
   82b80:	e7c6      	b.n	82b10 <_fputwc_r+0x44>
   82b82:	4638      	mov	r0, r7
   82b84:	b002      	add	sp, #8
   82b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b8a:	bf00      	nop

00082b8c <_malloc_trim_r>:
   82b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82b8e:	4d23      	ldr	r5, [pc, #140]	; (82c1c <_malloc_trim_r+0x90>)
   82b90:	460f      	mov	r7, r1
   82b92:	4604      	mov	r4, r0
   82b94:	f000 fe92 	bl	838bc <__malloc_lock>
   82b98:	68ab      	ldr	r3, [r5, #8]
   82b9a:	685e      	ldr	r6, [r3, #4]
   82b9c:	f026 0603 	bic.w	r6, r6, #3
   82ba0:	1bf1      	subs	r1, r6, r7
   82ba2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82ba6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82baa:	f021 010f 	bic.w	r1, r1, #15
   82bae:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82bb2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82bb6:	db07      	blt.n	82bc8 <_malloc_trim_r+0x3c>
   82bb8:	4620      	mov	r0, r4
   82bba:	2100      	movs	r1, #0
   82bbc:	f001 f862 	bl	83c84 <_sbrk_r>
   82bc0:	68ab      	ldr	r3, [r5, #8]
   82bc2:	4433      	add	r3, r6
   82bc4:	4298      	cmp	r0, r3
   82bc6:	d004      	beq.n	82bd2 <_malloc_trim_r+0x46>
   82bc8:	4620      	mov	r0, r4
   82bca:	f000 fe79 	bl	838c0 <__malloc_unlock>
   82bce:	2000      	movs	r0, #0
   82bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bd2:	4620      	mov	r0, r4
   82bd4:	4279      	negs	r1, r7
   82bd6:	f001 f855 	bl	83c84 <_sbrk_r>
   82bda:	3001      	adds	r0, #1
   82bdc:	d00d      	beq.n	82bfa <_malloc_trim_r+0x6e>
   82bde:	4b10      	ldr	r3, [pc, #64]	; (82c20 <_malloc_trim_r+0x94>)
   82be0:	68aa      	ldr	r2, [r5, #8]
   82be2:	6819      	ldr	r1, [r3, #0]
   82be4:	1bf6      	subs	r6, r6, r7
   82be6:	f046 0601 	orr.w	r6, r6, #1
   82bea:	4620      	mov	r0, r4
   82bec:	1bc9      	subs	r1, r1, r7
   82bee:	6056      	str	r6, [r2, #4]
   82bf0:	6019      	str	r1, [r3, #0]
   82bf2:	f000 fe65 	bl	838c0 <__malloc_unlock>
   82bf6:	2001      	movs	r0, #1
   82bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bfa:	4620      	mov	r0, r4
   82bfc:	2100      	movs	r1, #0
   82bfe:	f001 f841 	bl	83c84 <_sbrk_r>
   82c02:	68ab      	ldr	r3, [r5, #8]
   82c04:	1ac2      	subs	r2, r0, r3
   82c06:	2a0f      	cmp	r2, #15
   82c08:	ddde      	ble.n	82bc8 <_malloc_trim_r+0x3c>
   82c0a:	4d06      	ldr	r5, [pc, #24]	; (82c24 <_malloc_trim_r+0x98>)
   82c0c:	4904      	ldr	r1, [pc, #16]	; (82c20 <_malloc_trim_r+0x94>)
   82c0e:	682d      	ldr	r5, [r5, #0]
   82c10:	f042 0201 	orr.w	r2, r2, #1
   82c14:	1b40      	subs	r0, r0, r5
   82c16:	605a      	str	r2, [r3, #4]
   82c18:	6008      	str	r0, [r1, #0]
   82c1a:	e7d5      	b.n	82bc8 <_malloc_trim_r+0x3c>
   82c1c:	20070590 	.word	0x20070590
   82c20:	20070b50 	.word	0x20070b50
   82c24:	2007099c 	.word	0x2007099c

00082c28 <_free_r>:
   82c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82c2c:	460d      	mov	r5, r1
   82c2e:	4606      	mov	r6, r0
   82c30:	2900      	cmp	r1, #0
   82c32:	d055      	beq.n	82ce0 <_free_r+0xb8>
   82c34:	f000 fe42 	bl	838bc <__malloc_lock>
   82c38:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82c3c:	f8df c170 	ldr.w	ip, [pc, #368]	; 82db0 <_free_r+0x188>
   82c40:	f1a5 0408 	sub.w	r4, r5, #8
   82c44:	f021 0301 	bic.w	r3, r1, #1
   82c48:	18e2      	adds	r2, r4, r3
   82c4a:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82c4e:	6857      	ldr	r7, [r2, #4]
   82c50:	4290      	cmp	r0, r2
   82c52:	f027 0703 	bic.w	r7, r7, #3
   82c56:	d068      	beq.n	82d2a <_free_r+0x102>
   82c58:	f011 0101 	ands.w	r1, r1, #1
   82c5c:	6057      	str	r7, [r2, #4]
   82c5e:	d032      	beq.n	82cc6 <_free_r+0x9e>
   82c60:	2100      	movs	r1, #0
   82c62:	19d0      	adds	r0, r2, r7
   82c64:	6840      	ldr	r0, [r0, #4]
   82c66:	07c0      	lsls	r0, r0, #31
   82c68:	d406      	bmi.n	82c78 <_free_r+0x50>
   82c6a:	443b      	add	r3, r7
   82c6c:	6890      	ldr	r0, [r2, #8]
   82c6e:	2900      	cmp	r1, #0
   82c70:	d04d      	beq.n	82d0e <_free_r+0xe6>
   82c72:	68d2      	ldr	r2, [r2, #12]
   82c74:	60c2      	str	r2, [r0, #12]
   82c76:	6090      	str	r0, [r2, #8]
   82c78:	f043 0201 	orr.w	r2, r3, #1
   82c7c:	6062      	str	r2, [r4, #4]
   82c7e:	50e3      	str	r3, [r4, r3]
   82c80:	b9e1      	cbnz	r1, 82cbc <_free_r+0x94>
   82c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82c86:	d32d      	bcc.n	82ce4 <_free_r+0xbc>
   82c88:	0a5a      	lsrs	r2, r3, #9
   82c8a:	2a04      	cmp	r2, #4
   82c8c:	d869      	bhi.n	82d62 <_free_r+0x13a>
   82c8e:	0998      	lsrs	r0, r3, #6
   82c90:	3038      	adds	r0, #56	; 0x38
   82c92:	0041      	lsls	r1, r0, #1
   82c94:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82c98:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82c9c:	4944      	ldr	r1, [pc, #272]	; (82db0 <_free_r+0x188>)
   82c9e:	4562      	cmp	r2, ip
   82ca0:	d065      	beq.n	82d6e <_free_r+0x146>
   82ca2:	6851      	ldr	r1, [r2, #4]
   82ca4:	f021 0103 	bic.w	r1, r1, #3
   82ca8:	428b      	cmp	r3, r1
   82caa:	d202      	bcs.n	82cb2 <_free_r+0x8a>
   82cac:	6892      	ldr	r2, [r2, #8]
   82cae:	4594      	cmp	ip, r2
   82cb0:	d1f7      	bne.n	82ca2 <_free_r+0x7a>
   82cb2:	68d3      	ldr	r3, [r2, #12]
   82cb4:	60e3      	str	r3, [r4, #12]
   82cb6:	60a2      	str	r2, [r4, #8]
   82cb8:	609c      	str	r4, [r3, #8]
   82cba:	60d4      	str	r4, [r2, #12]
   82cbc:	4630      	mov	r0, r6
   82cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82cc2:	f000 bdfd 	b.w	838c0 <__malloc_unlock>
   82cc6:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82cca:	f10c 0808 	add.w	r8, ip, #8
   82cce:	1b64      	subs	r4, r4, r5
   82cd0:	68a0      	ldr	r0, [r4, #8]
   82cd2:	442b      	add	r3, r5
   82cd4:	4540      	cmp	r0, r8
   82cd6:	d042      	beq.n	82d5e <_free_r+0x136>
   82cd8:	68e5      	ldr	r5, [r4, #12]
   82cda:	60c5      	str	r5, [r0, #12]
   82cdc:	60a8      	str	r0, [r5, #8]
   82cde:	e7c0      	b.n	82c62 <_free_r+0x3a>
   82ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ce4:	08db      	lsrs	r3, r3, #3
   82ce6:	109a      	asrs	r2, r3, #2
   82ce8:	2001      	movs	r0, #1
   82cea:	4090      	lsls	r0, r2
   82cec:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82cf0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82cf4:	689a      	ldr	r2, [r3, #8]
   82cf6:	4301      	orrs	r1, r0
   82cf8:	60a2      	str	r2, [r4, #8]
   82cfa:	60e3      	str	r3, [r4, #12]
   82cfc:	f8cc 1004 	str.w	r1, [ip, #4]
   82d00:	4630      	mov	r0, r6
   82d02:	609c      	str	r4, [r3, #8]
   82d04:	60d4      	str	r4, [r2, #12]
   82d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82d0a:	f000 bdd9 	b.w	838c0 <__malloc_unlock>
   82d0e:	4d29      	ldr	r5, [pc, #164]	; (82db4 <_free_r+0x18c>)
   82d10:	42a8      	cmp	r0, r5
   82d12:	d1ae      	bne.n	82c72 <_free_r+0x4a>
   82d14:	f043 0201 	orr.w	r2, r3, #1
   82d18:	f8cc 4014 	str.w	r4, [ip, #20]
   82d1c:	f8cc 4010 	str.w	r4, [ip, #16]
   82d20:	60e0      	str	r0, [r4, #12]
   82d22:	60a0      	str	r0, [r4, #8]
   82d24:	6062      	str	r2, [r4, #4]
   82d26:	50e3      	str	r3, [r4, r3]
   82d28:	e7c8      	b.n	82cbc <_free_r+0x94>
   82d2a:	441f      	add	r7, r3
   82d2c:	07cb      	lsls	r3, r1, #31
   82d2e:	d407      	bmi.n	82d40 <_free_r+0x118>
   82d30:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82d34:	1a64      	subs	r4, r4, r1
   82d36:	68e3      	ldr	r3, [r4, #12]
   82d38:	68a2      	ldr	r2, [r4, #8]
   82d3a:	440f      	add	r7, r1
   82d3c:	60d3      	str	r3, [r2, #12]
   82d3e:	609a      	str	r2, [r3, #8]
   82d40:	4b1d      	ldr	r3, [pc, #116]	; (82db8 <_free_r+0x190>)
   82d42:	f047 0201 	orr.w	r2, r7, #1
   82d46:	681b      	ldr	r3, [r3, #0]
   82d48:	6062      	str	r2, [r4, #4]
   82d4a:	429f      	cmp	r7, r3
   82d4c:	f8cc 4008 	str.w	r4, [ip, #8]
   82d50:	d3b4      	bcc.n	82cbc <_free_r+0x94>
   82d52:	4b1a      	ldr	r3, [pc, #104]	; (82dbc <_free_r+0x194>)
   82d54:	4630      	mov	r0, r6
   82d56:	6819      	ldr	r1, [r3, #0]
   82d58:	f7ff ff18 	bl	82b8c <_malloc_trim_r>
   82d5c:	e7ae      	b.n	82cbc <_free_r+0x94>
   82d5e:	2101      	movs	r1, #1
   82d60:	e77f      	b.n	82c62 <_free_r+0x3a>
   82d62:	2a14      	cmp	r2, #20
   82d64:	d80b      	bhi.n	82d7e <_free_r+0x156>
   82d66:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82d6a:	0041      	lsls	r1, r0, #1
   82d6c:	e792      	b.n	82c94 <_free_r+0x6c>
   82d6e:	1080      	asrs	r0, r0, #2
   82d70:	2501      	movs	r5, #1
   82d72:	4085      	lsls	r5, r0
   82d74:	6848      	ldr	r0, [r1, #4]
   82d76:	4613      	mov	r3, r2
   82d78:	4328      	orrs	r0, r5
   82d7a:	6048      	str	r0, [r1, #4]
   82d7c:	e79a      	b.n	82cb4 <_free_r+0x8c>
   82d7e:	2a54      	cmp	r2, #84	; 0x54
   82d80:	d803      	bhi.n	82d8a <_free_r+0x162>
   82d82:	0b18      	lsrs	r0, r3, #12
   82d84:	306e      	adds	r0, #110	; 0x6e
   82d86:	0041      	lsls	r1, r0, #1
   82d88:	e784      	b.n	82c94 <_free_r+0x6c>
   82d8a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82d8e:	d803      	bhi.n	82d98 <_free_r+0x170>
   82d90:	0bd8      	lsrs	r0, r3, #15
   82d92:	3077      	adds	r0, #119	; 0x77
   82d94:	0041      	lsls	r1, r0, #1
   82d96:	e77d      	b.n	82c94 <_free_r+0x6c>
   82d98:	f240 5154 	movw	r1, #1364	; 0x554
   82d9c:	428a      	cmp	r2, r1
   82d9e:	d803      	bhi.n	82da8 <_free_r+0x180>
   82da0:	0c98      	lsrs	r0, r3, #18
   82da2:	307c      	adds	r0, #124	; 0x7c
   82da4:	0041      	lsls	r1, r0, #1
   82da6:	e775      	b.n	82c94 <_free_r+0x6c>
   82da8:	21fc      	movs	r1, #252	; 0xfc
   82daa:	207e      	movs	r0, #126	; 0x7e
   82dac:	e772      	b.n	82c94 <_free_r+0x6c>
   82dae:	bf00      	nop
   82db0:	20070590 	.word	0x20070590
   82db4:	20070598 	.word	0x20070598
   82db8:	20070998 	.word	0x20070998
   82dbc:	20070b4c 	.word	0x20070b4c

00082dc0 <__sfvwrite_r>:
   82dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82dc4:	6893      	ldr	r3, [r2, #8]
   82dc6:	b083      	sub	sp, #12
   82dc8:	4616      	mov	r6, r2
   82dca:	4681      	mov	r9, r0
   82dcc:	460c      	mov	r4, r1
   82dce:	b32b      	cbz	r3, 82e1c <__sfvwrite_r+0x5c>
   82dd0:	898b      	ldrh	r3, [r1, #12]
   82dd2:	0719      	lsls	r1, r3, #28
   82dd4:	d526      	bpl.n	82e24 <__sfvwrite_r+0x64>
   82dd6:	6922      	ldr	r2, [r4, #16]
   82dd8:	b322      	cbz	r2, 82e24 <__sfvwrite_r+0x64>
   82dda:	f003 0202 	and.w	r2, r3, #2
   82dde:	b292      	uxth	r2, r2
   82de0:	6835      	ldr	r5, [r6, #0]
   82de2:	2a00      	cmp	r2, #0
   82de4:	d02c      	beq.n	82e40 <__sfvwrite_r+0x80>
   82de6:	f04f 0a00 	mov.w	sl, #0
   82dea:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 830d4 <__sfvwrite_r+0x314>
   82dee:	46d0      	mov	r8, sl
   82df0:	45d8      	cmp	r8, fp
   82df2:	bf34      	ite	cc
   82df4:	4643      	movcc	r3, r8
   82df6:	465b      	movcs	r3, fp
   82df8:	4652      	mov	r2, sl
   82dfa:	4648      	mov	r0, r9
   82dfc:	f1b8 0f00 	cmp.w	r8, #0
   82e00:	d04f      	beq.n	82ea2 <__sfvwrite_r+0xe2>
   82e02:	69e1      	ldr	r1, [r4, #28]
   82e04:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82e06:	47b8      	blx	r7
   82e08:	2800      	cmp	r0, #0
   82e0a:	dd56      	ble.n	82eba <__sfvwrite_r+0xfa>
   82e0c:	68b3      	ldr	r3, [r6, #8]
   82e0e:	4482      	add	sl, r0
   82e10:	1a1b      	subs	r3, r3, r0
   82e12:	ebc0 0808 	rsb	r8, r0, r8
   82e16:	60b3      	str	r3, [r6, #8]
   82e18:	2b00      	cmp	r3, #0
   82e1a:	d1e9      	bne.n	82df0 <__sfvwrite_r+0x30>
   82e1c:	2000      	movs	r0, #0
   82e1e:	b003      	add	sp, #12
   82e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e24:	4648      	mov	r0, r9
   82e26:	4621      	mov	r1, r4
   82e28:	f7ff fc88 	bl	8273c <__swsetup_r>
   82e2c:	2800      	cmp	r0, #0
   82e2e:	f040 8148 	bne.w	830c2 <__sfvwrite_r+0x302>
   82e32:	89a3      	ldrh	r3, [r4, #12]
   82e34:	6835      	ldr	r5, [r6, #0]
   82e36:	f003 0202 	and.w	r2, r3, #2
   82e3a:	b292      	uxth	r2, r2
   82e3c:	2a00      	cmp	r2, #0
   82e3e:	d1d2      	bne.n	82de6 <__sfvwrite_r+0x26>
   82e40:	f013 0a01 	ands.w	sl, r3, #1
   82e44:	d142      	bne.n	82ecc <__sfvwrite_r+0x10c>
   82e46:	46d0      	mov	r8, sl
   82e48:	f1b8 0f00 	cmp.w	r8, #0
   82e4c:	d023      	beq.n	82e96 <__sfvwrite_r+0xd6>
   82e4e:	059a      	lsls	r2, r3, #22
   82e50:	68a7      	ldr	r7, [r4, #8]
   82e52:	d576      	bpl.n	82f42 <__sfvwrite_r+0x182>
   82e54:	45b8      	cmp	r8, r7
   82e56:	f0c0 80a4 	bcc.w	82fa2 <__sfvwrite_r+0x1e2>
   82e5a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82e5e:	f040 80b2 	bne.w	82fc6 <__sfvwrite_r+0x206>
   82e62:	6820      	ldr	r0, [r4, #0]
   82e64:	46bb      	mov	fp, r7
   82e66:	4651      	mov	r1, sl
   82e68:	465a      	mov	r2, fp
   82e6a:	f000 fcc1 	bl	837f0 <memmove>
   82e6e:	68a2      	ldr	r2, [r4, #8]
   82e70:	6821      	ldr	r1, [r4, #0]
   82e72:	1bd2      	subs	r2, r2, r7
   82e74:	eb01 030b 	add.w	r3, r1, fp
   82e78:	60a2      	str	r2, [r4, #8]
   82e7a:	6023      	str	r3, [r4, #0]
   82e7c:	4642      	mov	r2, r8
   82e7e:	68b3      	ldr	r3, [r6, #8]
   82e80:	4492      	add	sl, r2
   82e82:	1a9b      	subs	r3, r3, r2
   82e84:	ebc2 0808 	rsb	r8, r2, r8
   82e88:	60b3      	str	r3, [r6, #8]
   82e8a:	2b00      	cmp	r3, #0
   82e8c:	d0c6      	beq.n	82e1c <__sfvwrite_r+0x5c>
   82e8e:	89a3      	ldrh	r3, [r4, #12]
   82e90:	f1b8 0f00 	cmp.w	r8, #0
   82e94:	d1db      	bne.n	82e4e <__sfvwrite_r+0x8e>
   82e96:	f8d5 a000 	ldr.w	sl, [r5]
   82e9a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82e9e:	3508      	adds	r5, #8
   82ea0:	e7d2      	b.n	82e48 <__sfvwrite_r+0x88>
   82ea2:	f8d5 a000 	ldr.w	sl, [r5]
   82ea6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82eaa:	3508      	adds	r5, #8
   82eac:	e7a0      	b.n	82df0 <__sfvwrite_r+0x30>
   82eae:	4648      	mov	r0, r9
   82eb0:	4621      	mov	r1, r4
   82eb2:	f7ff fd59 	bl	82968 <_fflush_r>
   82eb6:	2800      	cmp	r0, #0
   82eb8:	d059      	beq.n	82f6e <__sfvwrite_r+0x1ae>
   82eba:	89a3      	ldrh	r3, [r4, #12]
   82ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82ec0:	f04f 30ff 	mov.w	r0, #4294967295
   82ec4:	81a3      	strh	r3, [r4, #12]
   82ec6:	b003      	add	sp, #12
   82ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ecc:	4692      	mov	sl, r2
   82ece:	9201      	str	r2, [sp, #4]
   82ed0:	4693      	mov	fp, r2
   82ed2:	4690      	mov	r8, r2
   82ed4:	f1b8 0f00 	cmp.w	r8, #0
   82ed8:	d02b      	beq.n	82f32 <__sfvwrite_r+0x172>
   82eda:	9f01      	ldr	r7, [sp, #4]
   82edc:	2f00      	cmp	r7, #0
   82ede:	d064      	beq.n	82faa <__sfvwrite_r+0x1ea>
   82ee0:	6820      	ldr	r0, [r4, #0]
   82ee2:	6921      	ldr	r1, [r4, #16]
   82ee4:	45c2      	cmp	sl, r8
   82ee6:	bf34      	ite	cc
   82ee8:	4653      	movcc	r3, sl
   82eea:	4643      	movcs	r3, r8
   82eec:	4288      	cmp	r0, r1
   82eee:	461f      	mov	r7, r3
   82ef0:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82ef4:	6962      	ldr	r2, [r4, #20]
   82ef6:	d903      	bls.n	82f00 <__sfvwrite_r+0x140>
   82ef8:	4494      	add	ip, r2
   82efa:	4563      	cmp	r3, ip
   82efc:	f300 80ae 	bgt.w	8305c <__sfvwrite_r+0x29c>
   82f00:	4293      	cmp	r3, r2
   82f02:	db36      	blt.n	82f72 <__sfvwrite_r+0x1b2>
   82f04:	4613      	mov	r3, r2
   82f06:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82f08:	4648      	mov	r0, r9
   82f0a:	69e1      	ldr	r1, [r4, #28]
   82f0c:	465a      	mov	r2, fp
   82f0e:	47b8      	blx	r7
   82f10:	1e07      	subs	r7, r0, #0
   82f12:	ddd2      	ble.n	82eba <__sfvwrite_r+0xfa>
   82f14:	ebba 0a07 	subs.w	sl, sl, r7
   82f18:	d03a      	beq.n	82f90 <__sfvwrite_r+0x1d0>
   82f1a:	68b3      	ldr	r3, [r6, #8]
   82f1c:	44bb      	add	fp, r7
   82f1e:	1bdb      	subs	r3, r3, r7
   82f20:	ebc7 0808 	rsb	r8, r7, r8
   82f24:	60b3      	str	r3, [r6, #8]
   82f26:	2b00      	cmp	r3, #0
   82f28:	f43f af78 	beq.w	82e1c <__sfvwrite_r+0x5c>
   82f2c:	f1b8 0f00 	cmp.w	r8, #0
   82f30:	d1d3      	bne.n	82eda <__sfvwrite_r+0x11a>
   82f32:	2700      	movs	r7, #0
   82f34:	f8d5 b000 	ldr.w	fp, [r5]
   82f38:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82f3c:	9701      	str	r7, [sp, #4]
   82f3e:	3508      	adds	r5, #8
   82f40:	e7c8      	b.n	82ed4 <__sfvwrite_r+0x114>
   82f42:	6820      	ldr	r0, [r4, #0]
   82f44:	6923      	ldr	r3, [r4, #16]
   82f46:	4298      	cmp	r0, r3
   82f48:	d802      	bhi.n	82f50 <__sfvwrite_r+0x190>
   82f4a:	6963      	ldr	r3, [r4, #20]
   82f4c:	4598      	cmp	r8, r3
   82f4e:	d272      	bcs.n	83036 <__sfvwrite_r+0x276>
   82f50:	45b8      	cmp	r8, r7
   82f52:	bf38      	it	cc
   82f54:	4647      	movcc	r7, r8
   82f56:	463a      	mov	r2, r7
   82f58:	4651      	mov	r1, sl
   82f5a:	f000 fc49 	bl	837f0 <memmove>
   82f5e:	68a3      	ldr	r3, [r4, #8]
   82f60:	6822      	ldr	r2, [r4, #0]
   82f62:	1bdb      	subs	r3, r3, r7
   82f64:	443a      	add	r2, r7
   82f66:	60a3      	str	r3, [r4, #8]
   82f68:	6022      	str	r2, [r4, #0]
   82f6a:	2b00      	cmp	r3, #0
   82f6c:	d09f      	beq.n	82eae <__sfvwrite_r+0xee>
   82f6e:	463a      	mov	r2, r7
   82f70:	e785      	b.n	82e7e <__sfvwrite_r+0xbe>
   82f72:	461a      	mov	r2, r3
   82f74:	4659      	mov	r1, fp
   82f76:	9300      	str	r3, [sp, #0]
   82f78:	f000 fc3a 	bl	837f0 <memmove>
   82f7c:	9b00      	ldr	r3, [sp, #0]
   82f7e:	68a1      	ldr	r1, [r4, #8]
   82f80:	6822      	ldr	r2, [r4, #0]
   82f82:	1ac9      	subs	r1, r1, r3
   82f84:	ebba 0a07 	subs.w	sl, sl, r7
   82f88:	4413      	add	r3, r2
   82f8a:	60a1      	str	r1, [r4, #8]
   82f8c:	6023      	str	r3, [r4, #0]
   82f8e:	d1c4      	bne.n	82f1a <__sfvwrite_r+0x15a>
   82f90:	4648      	mov	r0, r9
   82f92:	4621      	mov	r1, r4
   82f94:	f7ff fce8 	bl	82968 <_fflush_r>
   82f98:	2800      	cmp	r0, #0
   82f9a:	d18e      	bne.n	82eba <__sfvwrite_r+0xfa>
   82f9c:	f8cd a004 	str.w	sl, [sp, #4]
   82fa0:	e7bb      	b.n	82f1a <__sfvwrite_r+0x15a>
   82fa2:	6820      	ldr	r0, [r4, #0]
   82fa4:	4647      	mov	r7, r8
   82fa6:	46c3      	mov	fp, r8
   82fa8:	e75d      	b.n	82e66 <__sfvwrite_r+0xa6>
   82faa:	4658      	mov	r0, fp
   82fac:	210a      	movs	r1, #10
   82fae:	4642      	mov	r2, r8
   82fb0:	f000 fbd4 	bl	8375c <memchr>
   82fb4:	2800      	cmp	r0, #0
   82fb6:	d07f      	beq.n	830b8 <__sfvwrite_r+0x2f8>
   82fb8:	f100 0a01 	add.w	sl, r0, #1
   82fbc:	2701      	movs	r7, #1
   82fbe:	ebcb 0a0a 	rsb	sl, fp, sl
   82fc2:	9701      	str	r7, [sp, #4]
   82fc4:	e78c      	b.n	82ee0 <__sfvwrite_r+0x120>
   82fc6:	6822      	ldr	r2, [r4, #0]
   82fc8:	6921      	ldr	r1, [r4, #16]
   82fca:	6967      	ldr	r7, [r4, #20]
   82fcc:	ebc1 0c02 	rsb	ip, r1, r2
   82fd0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82fd4:	f10c 0201 	add.w	r2, ip, #1
   82fd8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82fdc:	4442      	add	r2, r8
   82fde:	107f      	asrs	r7, r7, #1
   82fe0:	4297      	cmp	r7, r2
   82fe2:	bf34      	ite	cc
   82fe4:	4617      	movcc	r7, r2
   82fe6:	463a      	movcs	r2, r7
   82fe8:	055b      	lsls	r3, r3, #21
   82fea:	d54f      	bpl.n	8308c <__sfvwrite_r+0x2cc>
   82fec:	4611      	mov	r1, r2
   82fee:	4648      	mov	r0, r9
   82ff0:	f8cd c000 	str.w	ip, [sp]
   82ff4:	f000 f916 	bl	83224 <_malloc_r>
   82ff8:	f8dd c000 	ldr.w	ip, [sp]
   82ffc:	4683      	mov	fp, r0
   82ffe:	2800      	cmp	r0, #0
   83000:	d062      	beq.n	830c8 <__sfvwrite_r+0x308>
   83002:	4662      	mov	r2, ip
   83004:	6921      	ldr	r1, [r4, #16]
   83006:	f8cd c000 	str.w	ip, [sp]
   8300a:	f7fe fb7b 	bl	81704 <memcpy>
   8300e:	89a2      	ldrh	r2, [r4, #12]
   83010:	f8dd c000 	ldr.w	ip, [sp]
   83014:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83018:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8301c:	81a2      	strh	r2, [r4, #12]
   8301e:	eb0b 000c 	add.w	r0, fp, ip
   83022:	ebcc 0207 	rsb	r2, ip, r7
   83026:	f8c4 b010 	str.w	fp, [r4, #16]
   8302a:	6167      	str	r7, [r4, #20]
   8302c:	6020      	str	r0, [r4, #0]
   8302e:	60a2      	str	r2, [r4, #8]
   83030:	4647      	mov	r7, r8
   83032:	46c3      	mov	fp, r8
   83034:	e717      	b.n	82e66 <__sfvwrite_r+0xa6>
   83036:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8303a:	4590      	cmp	r8, r2
   8303c:	bf38      	it	cc
   8303e:	4642      	movcc	r2, r8
   83040:	fb92 f2f3 	sdiv	r2, r2, r3
   83044:	fb02 f303 	mul.w	r3, r2, r3
   83048:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8304a:	4648      	mov	r0, r9
   8304c:	69e1      	ldr	r1, [r4, #28]
   8304e:	4652      	mov	r2, sl
   83050:	47b8      	blx	r7
   83052:	2800      	cmp	r0, #0
   83054:	f77f af31 	ble.w	82eba <__sfvwrite_r+0xfa>
   83058:	4602      	mov	r2, r0
   8305a:	e710      	b.n	82e7e <__sfvwrite_r+0xbe>
   8305c:	4662      	mov	r2, ip
   8305e:	4659      	mov	r1, fp
   83060:	f8cd c000 	str.w	ip, [sp]
   83064:	f000 fbc4 	bl	837f0 <memmove>
   83068:	f8dd c000 	ldr.w	ip, [sp]
   8306c:	6823      	ldr	r3, [r4, #0]
   8306e:	4648      	mov	r0, r9
   83070:	4463      	add	r3, ip
   83072:	6023      	str	r3, [r4, #0]
   83074:	4621      	mov	r1, r4
   83076:	f8cd c000 	str.w	ip, [sp]
   8307a:	f7ff fc75 	bl	82968 <_fflush_r>
   8307e:	f8dd c000 	ldr.w	ip, [sp]
   83082:	2800      	cmp	r0, #0
   83084:	f47f af19 	bne.w	82eba <__sfvwrite_r+0xfa>
   83088:	4667      	mov	r7, ip
   8308a:	e743      	b.n	82f14 <__sfvwrite_r+0x154>
   8308c:	4648      	mov	r0, r9
   8308e:	f8cd c000 	str.w	ip, [sp]
   83092:	f000 fc17 	bl	838c4 <_realloc_r>
   83096:	f8dd c000 	ldr.w	ip, [sp]
   8309a:	4683      	mov	fp, r0
   8309c:	2800      	cmp	r0, #0
   8309e:	d1be      	bne.n	8301e <__sfvwrite_r+0x25e>
   830a0:	4648      	mov	r0, r9
   830a2:	6921      	ldr	r1, [r4, #16]
   830a4:	f7ff fdc0 	bl	82c28 <_free_r>
   830a8:	89a3      	ldrh	r3, [r4, #12]
   830aa:	220c      	movs	r2, #12
   830ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   830b0:	b29b      	uxth	r3, r3
   830b2:	f8c9 2000 	str.w	r2, [r9]
   830b6:	e701      	b.n	82ebc <__sfvwrite_r+0xfc>
   830b8:	2701      	movs	r7, #1
   830ba:	f108 0a01 	add.w	sl, r8, #1
   830be:	9701      	str	r7, [sp, #4]
   830c0:	e70e      	b.n	82ee0 <__sfvwrite_r+0x120>
   830c2:	f04f 30ff 	mov.w	r0, #4294967295
   830c6:	e6aa      	b.n	82e1e <__sfvwrite_r+0x5e>
   830c8:	230c      	movs	r3, #12
   830ca:	f8c9 3000 	str.w	r3, [r9]
   830ce:	89a3      	ldrh	r3, [r4, #12]
   830d0:	e6f4      	b.n	82ebc <__sfvwrite_r+0xfc>
   830d2:	bf00      	nop
   830d4:	7ffffc00 	.word	0x7ffffc00

000830d8 <_fwalk>:
   830d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   830dc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   830e0:	4688      	mov	r8, r1
   830e2:	d019      	beq.n	83118 <_fwalk+0x40>
   830e4:	2600      	movs	r6, #0
   830e6:	687d      	ldr	r5, [r7, #4]
   830e8:	68bc      	ldr	r4, [r7, #8]
   830ea:	3d01      	subs	r5, #1
   830ec:	d40e      	bmi.n	8310c <_fwalk+0x34>
   830ee:	89a3      	ldrh	r3, [r4, #12]
   830f0:	3d01      	subs	r5, #1
   830f2:	2b01      	cmp	r3, #1
   830f4:	d906      	bls.n	83104 <_fwalk+0x2c>
   830f6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   830fa:	4620      	mov	r0, r4
   830fc:	3301      	adds	r3, #1
   830fe:	d001      	beq.n	83104 <_fwalk+0x2c>
   83100:	47c0      	blx	r8
   83102:	4306      	orrs	r6, r0
   83104:	1c6b      	adds	r3, r5, #1
   83106:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8310a:	d1f0      	bne.n	830ee <_fwalk+0x16>
   8310c:	683f      	ldr	r7, [r7, #0]
   8310e:	2f00      	cmp	r7, #0
   83110:	d1e9      	bne.n	830e6 <_fwalk+0xe>
   83112:	4630      	mov	r0, r6
   83114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83118:	463e      	mov	r6, r7
   8311a:	4630      	mov	r0, r6
   8311c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083120 <__locale_charset>:
   83120:	4800      	ldr	r0, [pc, #0]	; (83124 <__locale_charset+0x4>)
   83122:	4770      	bx	lr
   83124:	2007056c 	.word	0x2007056c

00083128 <__locale_mb_cur_max>:
   83128:	4b01      	ldr	r3, [pc, #4]	; (83130 <__locale_mb_cur_max+0x8>)
   8312a:	6818      	ldr	r0, [r3, #0]
   8312c:	4770      	bx	lr
   8312e:	bf00      	nop
   83130:	2007058c 	.word	0x2007058c

00083134 <__smakebuf_r>:
   83134:	b5f0      	push	{r4, r5, r6, r7, lr}
   83136:	898b      	ldrh	r3, [r1, #12]
   83138:	b091      	sub	sp, #68	; 0x44
   8313a:	b29a      	uxth	r2, r3
   8313c:	0796      	lsls	r6, r2, #30
   8313e:	460c      	mov	r4, r1
   83140:	4605      	mov	r5, r0
   83142:	d437      	bmi.n	831b4 <__smakebuf_r+0x80>
   83144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83148:	2900      	cmp	r1, #0
   8314a:	db17      	blt.n	8317c <__smakebuf_r+0x48>
   8314c:	aa01      	add	r2, sp, #4
   8314e:	f000 ff39 	bl	83fc4 <_fstat_r>
   83152:	2800      	cmp	r0, #0
   83154:	db10      	blt.n	83178 <__smakebuf_r+0x44>
   83156:	9b02      	ldr	r3, [sp, #8]
   83158:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8315c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   83160:	424f      	negs	r7, r1
   83162:	414f      	adcs	r7, r1
   83164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   83168:	d02c      	beq.n	831c4 <__smakebuf_r+0x90>
   8316a:	89a3      	ldrh	r3, [r4, #12]
   8316c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83170:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83174:	81a3      	strh	r3, [r4, #12]
   83176:	e00b      	b.n	83190 <__smakebuf_r+0x5c>
   83178:	89a3      	ldrh	r3, [r4, #12]
   8317a:	b29a      	uxth	r2, r3
   8317c:	f012 0f80 	tst.w	r2, #128	; 0x80
   83180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83184:	81a3      	strh	r3, [r4, #12]
   83186:	bf14      	ite	ne
   83188:	2640      	movne	r6, #64	; 0x40
   8318a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8318e:	2700      	movs	r7, #0
   83190:	4628      	mov	r0, r5
   83192:	4631      	mov	r1, r6
   83194:	f000 f846 	bl	83224 <_malloc_r>
   83198:	89a3      	ldrh	r3, [r4, #12]
   8319a:	2800      	cmp	r0, #0
   8319c:	d029      	beq.n	831f2 <__smakebuf_r+0xbe>
   8319e:	4a1b      	ldr	r2, [pc, #108]	; (8320c <__smakebuf_r+0xd8>)
   831a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   831a4:	63ea      	str	r2, [r5, #60]	; 0x3c
   831a6:	81a3      	strh	r3, [r4, #12]
   831a8:	6020      	str	r0, [r4, #0]
   831aa:	6120      	str	r0, [r4, #16]
   831ac:	6166      	str	r6, [r4, #20]
   831ae:	b9a7      	cbnz	r7, 831da <__smakebuf_r+0xa6>
   831b0:	b011      	add	sp, #68	; 0x44
   831b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   831b4:	f101 0343 	add.w	r3, r1, #67	; 0x43
   831b8:	2201      	movs	r2, #1
   831ba:	600b      	str	r3, [r1, #0]
   831bc:	610b      	str	r3, [r1, #16]
   831be:	614a      	str	r2, [r1, #20]
   831c0:	b011      	add	sp, #68	; 0x44
   831c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   831c4:	4a12      	ldr	r2, [pc, #72]	; (83210 <__smakebuf_r+0xdc>)
   831c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   831c8:	4293      	cmp	r3, r2
   831ca:	d1ce      	bne.n	8316a <__smakebuf_r+0x36>
   831cc:	89a3      	ldrh	r3, [r4, #12]
   831ce:	f44f 6680 	mov.w	r6, #1024	; 0x400
   831d2:	4333      	orrs	r3, r6
   831d4:	81a3      	strh	r3, [r4, #12]
   831d6:	64e6      	str	r6, [r4, #76]	; 0x4c
   831d8:	e7da      	b.n	83190 <__smakebuf_r+0x5c>
   831da:	4628      	mov	r0, r5
   831dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   831e0:	f000 ff04 	bl	83fec <_isatty_r>
   831e4:	2800      	cmp	r0, #0
   831e6:	d0e3      	beq.n	831b0 <__smakebuf_r+0x7c>
   831e8:	89a3      	ldrh	r3, [r4, #12]
   831ea:	f043 0301 	orr.w	r3, r3, #1
   831ee:	81a3      	strh	r3, [r4, #12]
   831f0:	e7de      	b.n	831b0 <__smakebuf_r+0x7c>
   831f2:	059a      	lsls	r2, r3, #22
   831f4:	d4dc      	bmi.n	831b0 <__smakebuf_r+0x7c>
   831f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   831fa:	f043 0302 	orr.w	r3, r3, #2
   831fe:	2101      	movs	r1, #1
   83200:	81a3      	strh	r3, [r4, #12]
   83202:	6022      	str	r2, [r4, #0]
   83204:	6122      	str	r2, [r4, #16]
   83206:	6161      	str	r1, [r4, #20]
   83208:	e7d2      	b.n	831b0 <__smakebuf_r+0x7c>
   8320a:	bf00      	nop
   8320c:	00082995 	.word	0x00082995
   83210:	00083d05 	.word	0x00083d05

00083214 <malloc>:
   83214:	4b02      	ldr	r3, [pc, #8]	; (83220 <malloc+0xc>)
   83216:	4601      	mov	r1, r0
   83218:	6818      	ldr	r0, [r3, #0]
   8321a:	f000 b803 	b.w	83224 <_malloc_r>
   8321e:	bf00      	nop
   83220:	20070568 	.word	0x20070568

00083224 <_malloc_r>:
   83224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83228:	f101 050b 	add.w	r5, r1, #11
   8322c:	2d16      	cmp	r5, #22
   8322e:	b083      	sub	sp, #12
   83230:	4606      	mov	r6, r0
   83232:	d927      	bls.n	83284 <_malloc_r+0x60>
   83234:	f035 0507 	bics.w	r5, r5, #7
   83238:	d427      	bmi.n	8328a <_malloc_r+0x66>
   8323a:	42a9      	cmp	r1, r5
   8323c:	d825      	bhi.n	8328a <_malloc_r+0x66>
   8323e:	4630      	mov	r0, r6
   83240:	f000 fb3c 	bl	838bc <__malloc_lock>
   83244:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   83248:	d226      	bcs.n	83298 <_malloc_r+0x74>
   8324a:	4fc1      	ldr	r7, [pc, #772]	; (83550 <_malloc_r+0x32c>)
   8324c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   83250:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   83254:	68dc      	ldr	r4, [r3, #12]
   83256:	429c      	cmp	r4, r3
   83258:	f000 81d2 	beq.w	83600 <_malloc_r+0x3dc>
   8325c:	6863      	ldr	r3, [r4, #4]
   8325e:	68e2      	ldr	r2, [r4, #12]
   83260:	f023 0303 	bic.w	r3, r3, #3
   83264:	4423      	add	r3, r4
   83266:	6858      	ldr	r0, [r3, #4]
   83268:	68a1      	ldr	r1, [r4, #8]
   8326a:	f040 0501 	orr.w	r5, r0, #1
   8326e:	60ca      	str	r2, [r1, #12]
   83270:	4630      	mov	r0, r6
   83272:	6091      	str	r1, [r2, #8]
   83274:	605d      	str	r5, [r3, #4]
   83276:	f000 fb23 	bl	838c0 <__malloc_unlock>
   8327a:	3408      	adds	r4, #8
   8327c:	4620      	mov	r0, r4
   8327e:	b003      	add	sp, #12
   83280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83284:	2510      	movs	r5, #16
   83286:	42a9      	cmp	r1, r5
   83288:	d9d9      	bls.n	8323e <_malloc_r+0x1a>
   8328a:	2400      	movs	r4, #0
   8328c:	230c      	movs	r3, #12
   8328e:	4620      	mov	r0, r4
   83290:	6033      	str	r3, [r6, #0]
   83292:	b003      	add	sp, #12
   83294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83298:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   8329c:	f000 8089 	beq.w	833b2 <_malloc_r+0x18e>
   832a0:	f1bc 0f04 	cmp.w	ip, #4
   832a4:	f200 8160 	bhi.w	83568 <_malloc_r+0x344>
   832a8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   832ac:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   832b0:	ea4f 014c 	mov.w	r1, ip, lsl #1
   832b4:	4fa6      	ldr	r7, [pc, #664]	; (83550 <_malloc_r+0x32c>)
   832b6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   832ba:	68cc      	ldr	r4, [r1, #12]
   832bc:	42a1      	cmp	r1, r4
   832be:	d105      	bne.n	832cc <_malloc_r+0xa8>
   832c0:	e00c      	b.n	832dc <_malloc_r+0xb8>
   832c2:	2b00      	cmp	r3, #0
   832c4:	da79      	bge.n	833ba <_malloc_r+0x196>
   832c6:	68e4      	ldr	r4, [r4, #12]
   832c8:	42a1      	cmp	r1, r4
   832ca:	d007      	beq.n	832dc <_malloc_r+0xb8>
   832cc:	6862      	ldr	r2, [r4, #4]
   832ce:	f022 0203 	bic.w	r2, r2, #3
   832d2:	1b53      	subs	r3, r2, r5
   832d4:	2b0f      	cmp	r3, #15
   832d6:	ddf4      	ble.n	832c2 <_malloc_r+0x9e>
   832d8:	f10c 3cff 	add.w	ip, ip, #4294967295
   832dc:	f10c 0c01 	add.w	ip, ip, #1
   832e0:	4b9b      	ldr	r3, [pc, #620]	; (83550 <_malloc_r+0x32c>)
   832e2:	693c      	ldr	r4, [r7, #16]
   832e4:	f103 0e08 	add.w	lr, r3, #8
   832e8:	4574      	cmp	r4, lr
   832ea:	f000 817e 	beq.w	835ea <_malloc_r+0x3c6>
   832ee:	6861      	ldr	r1, [r4, #4]
   832f0:	f021 0103 	bic.w	r1, r1, #3
   832f4:	1b4a      	subs	r2, r1, r5
   832f6:	2a0f      	cmp	r2, #15
   832f8:	f300 8164 	bgt.w	835c4 <_malloc_r+0x3a0>
   832fc:	2a00      	cmp	r2, #0
   832fe:	f8c3 e014 	str.w	lr, [r3, #20]
   83302:	f8c3 e010 	str.w	lr, [r3, #16]
   83306:	da69      	bge.n	833dc <_malloc_r+0x1b8>
   83308:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8330c:	f080 813a 	bcs.w	83584 <_malloc_r+0x360>
   83310:	08c9      	lsrs	r1, r1, #3
   83312:	108a      	asrs	r2, r1, #2
   83314:	f04f 0801 	mov.w	r8, #1
   83318:	fa08 f802 	lsl.w	r8, r8, r2
   8331c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   83320:	685a      	ldr	r2, [r3, #4]
   83322:	6888      	ldr	r0, [r1, #8]
   83324:	ea48 0202 	orr.w	r2, r8, r2
   83328:	60a0      	str	r0, [r4, #8]
   8332a:	60e1      	str	r1, [r4, #12]
   8332c:	605a      	str	r2, [r3, #4]
   8332e:	608c      	str	r4, [r1, #8]
   83330:	60c4      	str	r4, [r0, #12]
   83332:	ea4f 03ac 	mov.w	r3, ip, asr #2
   83336:	2001      	movs	r0, #1
   83338:	4098      	lsls	r0, r3
   8333a:	4290      	cmp	r0, r2
   8333c:	d85b      	bhi.n	833f6 <_malloc_r+0x1d2>
   8333e:	4202      	tst	r2, r0
   83340:	d106      	bne.n	83350 <_malloc_r+0x12c>
   83342:	f02c 0c03 	bic.w	ip, ip, #3
   83346:	0040      	lsls	r0, r0, #1
   83348:	4202      	tst	r2, r0
   8334a:	f10c 0c04 	add.w	ip, ip, #4
   8334e:	d0fa      	beq.n	83346 <_malloc_r+0x122>
   83350:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   83354:	4644      	mov	r4, r8
   83356:	46e1      	mov	r9, ip
   83358:	68e3      	ldr	r3, [r4, #12]
   8335a:	429c      	cmp	r4, r3
   8335c:	d107      	bne.n	8336e <_malloc_r+0x14a>
   8335e:	e146      	b.n	835ee <_malloc_r+0x3ca>
   83360:	2a00      	cmp	r2, #0
   83362:	f280 8157 	bge.w	83614 <_malloc_r+0x3f0>
   83366:	68db      	ldr	r3, [r3, #12]
   83368:	429c      	cmp	r4, r3
   8336a:	f000 8140 	beq.w	835ee <_malloc_r+0x3ca>
   8336e:	6859      	ldr	r1, [r3, #4]
   83370:	f021 0103 	bic.w	r1, r1, #3
   83374:	1b4a      	subs	r2, r1, r5
   83376:	2a0f      	cmp	r2, #15
   83378:	ddf2      	ble.n	83360 <_malloc_r+0x13c>
   8337a:	461c      	mov	r4, r3
   8337c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   83380:	68d9      	ldr	r1, [r3, #12]
   83382:	f045 0901 	orr.w	r9, r5, #1
   83386:	f042 0801 	orr.w	r8, r2, #1
   8338a:	441d      	add	r5, r3
   8338c:	f8c3 9004 	str.w	r9, [r3, #4]
   83390:	4630      	mov	r0, r6
   83392:	f8cc 100c 	str.w	r1, [ip, #12]
   83396:	f8c1 c008 	str.w	ip, [r1, #8]
   8339a:	617d      	str	r5, [r7, #20]
   8339c:	613d      	str	r5, [r7, #16]
   8339e:	f8c5 e00c 	str.w	lr, [r5, #12]
   833a2:	f8c5 e008 	str.w	lr, [r5, #8]
   833a6:	f8c5 8004 	str.w	r8, [r5, #4]
   833aa:	50aa      	str	r2, [r5, r2]
   833ac:	f000 fa88 	bl	838c0 <__malloc_unlock>
   833b0:	e764      	b.n	8327c <_malloc_r+0x58>
   833b2:	217e      	movs	r1, #126	; 0x7e
   833b4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   833b8:	e77c      	b.n	832b4 <_malloc_r+0x90>
   833ba:	4422      	add	r2, r4
   833bc:	6850      	ldr	r0, [r2, #4]
   833be:	68e3      	ldr	r3, [r4, #12]
   833c0:	68a1      	ldr	r1, [r4, #8]
   833c2:	f040 0501 	orr.w	r5, r0, #1
   833c6:	60cb      	str	r3, [r1, #12]
   833c8:	4630      	mov	r0, r6
   833ca:	6099      	str	r1, [r3, #8]
   833cc:	6055      	str	r5, [r2, #4]
   833ce:	f000 fa77 	bl	838c0 <__malloc_unlock>
   833d2:	3408      	adds	r4, #8
   833d4:	4620      	mov	r0, r4
   833d6:	b003      	add	sp, #12
   833d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833dc:	4421      	add	r1, r4
   833de:	684b      	ldr	r3, [r1, #4]
   833e0:	4630      	mov	r0, r6
   833e2:	f043 0301 	orr.w	r3, r3, #1
   833e6:	604b      	str	r3, [r1, #4]
   833e8:	f000 fa6a 	bl	838c0 <__malloc_unlock>
   833ec:	3408      	adds	r4, #8
   833ee:	4620      	mov	r0, r4
   833f0:	b003      	add	sp, #12
   833f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833f6:	68bc      	ldr	r4, [r7, #8]
   833f8:	6863      	ldr	r3, [r4, #4]
   833fa:	f023 0903 	bic.w	r9, r3, #3
   833fe:	45a9      	cmp	r9, r5
   83400:	d304      	bcc.n	8340c <_malloc_r+0x1e8>
   83402:	ebc5 0309 	rsb	r3, r5, r9
   83406:	2b0f      	cmp	r3, #15
   83408:	f300 8091 	bgt.w	8352e <_malloc_r+0x30a>
   8340c:	4b51      	ldr	r3, [pc, #324]	; (83554 <_malloc_r+0x330>)
   8340e:	4a52      	ldr	r2, [pc, #328]	; (83558 <_malloc_r+0x334>)
   83410:	6819      	ldr	r1, [r3, #0]
   83412:	6813      	ldr	r3, [r2, #0]
   83414:	eb05 0a01 	add.w	sl, r5, r1
   83418:	3301      	adds	r3, #1
   8341a:	eb04 0b09 	add.w	fp, r4, r9
   8341e:	f000 8161 	beq.w	836e4 <_malloc_r+0x4c0>
   83422:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   83426:	f10a 0a0f 	add.w	sl, sl, #15
   8342a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8342e:	f02a 0a0f 	bic.w	sl, sl, #15
   83432:	4630      	mov	r0, r6
   83434:	4651      	mov	r1, sl
   83436:	9201      	str	r2, [sp, #4]
   83438:	f000 fc24 	bl	83c84 <_sbrk_r>
   8343c:	f1b0 3fff 	cmp.w	r0, #4294967295
   83440:	4680      	mov	r8, r0
   83442:	9a01      	ldr	r2, [sp, #4]
   83444:	f000 8101 	beq.w	8364a <_malloc_r+0x426>
   83448:	4583      	cmp	fp, r0
   8344a:	f200 80fb 	bhi.w	83644 <_malloc_r+0x420>
   8344e:	f8df c114 	ldr.w	ip, [pc, #276]	; 83564 <_malloc_r+0x340>
   83452:	45c3      	cmp	fp, r8
   83454:	f8dc 3000 	ldr.w	r3, [ip]
   83458:	4453      	add	r3, sl
   8345a:	f8cc 3000 	str.w	r3, [ip]
   8345e:	f000 814a 	beq.w	836f6 <_malloc_r+0x4d2>
   83462:	6812      	ldr	r2, [r2, #0]
   83464:	493c      	ldr	r1, [pc, #240]	; (83558 <_malloc_r+0x334>)
   83466:	3201      	adds	r2, #1
   83468:	bf1b      	ittet	ne
   8346a:	ebcb 0b08 	rsbne	fp, fp, r8
   8346e:	445b      	addne	r3, fp
   83470:	f8c1 8000 	streq.w	r8, [r1]
   83474:	f8cc 3000 	strne.w	r3, [ip]
   83478:	f018 0307 	ands.w	r3, r8, #7
   8347c:	f000 8114 	beq.w	836a8 <_malloc_r+0x484>
   83480:	f1c3 0208 	rsb	r2, r3, #8
   83484:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   83488:	4490      	add	r8, r2
   8348a:	3308      	adds	r3, #8
   8348c:	44c2      	add	sl, r8
   8348e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   83492:	ebca 0a03 	rsb	sl, sl, r3
   83496:	4651      	mov	r1, sl
   83498:	4630      	mov	r0, r6
   8349a:	f8cd c004 	str.w	ip, [sp, #4]
   8349e:	f000 fbf1 	bl	83c84 <_sbrk_r>
   834a2:	1c43      	adds	r3, r0, #1
   834a4:	f8dd c004 	ldr.w	ip, [sp, #4]
   834a8:	f000 8135 	beq.w	83716 <_malloc_r+0x4f2>
   834ac:	ebc8 0200 	rsb	r2, r8, r0
   834b0:	4452      	add	r2, sl
   834b2:	f042 0201 	orr.w	r2, r2, #1
   834b6:	f8dc 3000 	ldr.w	r3, [ip]
   834ba:	42bc      	cmp	r4, r7
   834bc:	4453      	add	r3, sl
   834be:	f8c7 8008 	str.w	r8, [r7, #8]
   834c2:	f8cc 3000 	str.w	r3, [ip]
   834c6:	f8c8 2004 	str.w	r2, [r8, #4]
   834ca:	f8df a098 	ldr.w	sl, [pc, #152]	; 83564 <_malloc_r+0x340>
   834ce:	d015      	beq.n	834fc <_malloc_r+0x2d8>
   834d0:	f1b9 0f0f 	cmp.w	r9, #15
   834d4:	f240 80eb 	bls.w	836ae <_malloc_r+0x48a>
   834d8:	6861      	ldr	r1, [r4, #4]
   834da:	f1a9 020c 	sub.w	r2, r9, #12
   834de:	f022 0207 	bic.w	r2, r2, #7
   834e2:	f001 0101 	and.w	r1, r1, #1
   834e6:	ea42 0e01 	orr.w	lr, r2, r1
   834ea:	2005      	movs	r0, #5
   834ec:	18a1      	adds	r1, r4, r2
   834ee:	2a0f      	cmp	r2, #15
   834f0:	f8c4 e004 	str.w	lr, [r4, #4]
   834f4:	6048      	str	r0, [r1, #4]
   834f6:	6088      	str	r0, [r1, #8]
   834f8:	f200 8111 	bhi.w	8371e <_malloc_r+0x4fa>
   834fc:	4a17      	ldr	r2, [pc, #92]	; (8355c <_malloc_r+0x338>)
   834fe:	68bc      	ldr	r4, [r7, #8]
   83500:	6811      	ldr	r1, [r2, #0]
   83502:	428b      	cmp	r3, r1
   83504:	bf88      	it	hi
   83506:	6013      	strhi	r3, [r2, #0]
   83508:	4a15      	ldr	r2, [pc, #84]	; (83560 <_malloc_r+0x33c>)
   8350a:	6811      	ldr	r1, [r2, #0]
   8350c:	428b      	cmp	r3, r1
   8350e:	bf88      	it	hi
   83510:	6013      	strhi	r3, [r2, #0]
   83512:	6862      	ldr	r2, [r4, #4]
   83514:	f022 0203 	bic.w	r2, r2, #3
   83518:	4295      	cmp	r5, r2
   8351a:	ebc5 0302 	rsb	r3, r5, r2
   8351e:	d801      	bhi.n	83524 <_malloc_r+0x300>
   83520:	2b0f      	cmp	r3, #15
   83522:	dc04      	bgt.n	8352e <_malloc_r+0x30a>
   83524:	4630      	mov	r0, r6
   83526:	f000 f9cb 	bl	838c0 <__malloc_unlock>
   8352a:	2400      	movs	r4, #0
   8352c:	e6a6      	b.n	8327c <_malloc_r+0x58>
   8352e:	f045 0201 	orr.w	r2, r5, #1
   83532:	f043 0301 	orr.w	r3, r3, #1
   83536:	4425      	add	r5, r4
   83538:	6062      	str	r2, [r4, #4]
   8353a:	4630      	mov	r0, r6
   8353c:	60bd      	str	r5, [r7, #8]
   8353e:	606b      	str	r3, [r5, #4]
   83540:	f000 f9be 	bl	838c0 <__malloc_unlock>
   83544:	3408      	adds	r4, #8
   83546:	4620      	mov	r0, r4
   83548:	b003      	add	sp, #12
   8354a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8354e:	bf00      	nop
   83550:	20070590 	.word	0x20070590
   83554:	20070b4c 	.word	0x20070b4c
   83558:	2007099c 	.word	0x2007099c
   8355c:	20070b48 	.word	0x20070b48
   83560:	20070b44 	.word	0x20070b44
   83564:	20070b50 	.word	0x20070b50
   83568:	f1bc 0f14 	cmp.w	ip, #20
   8356c:	d961      	bls.n	83632 <_malloc_r+0x40e>
   8356e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   83572:	f200 808f 	bhi.w	83694 <_malloc_r+0x470>
   83576:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8357a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8357e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83582:	e697      	b.n	832b4 <_malloc_r+0x90>
   83584:	0a4b      	lsrs	r3, r1, #9
   83586:	2b04      	cmp	r3, #4
   83588:	d958      	bls.n	8363c <_malloc_r+0x418>
   8358a:	2b14      	cmp	r3, #20
   8358c:	f200 80ad 	bhi.w	836ea <_malloc_r+0x4c6>
   83590:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   83594:	0050      	lsls	r0, r2, #1
   83596:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8359a:	6883      	ldr	r3, [r0, #8]
   8359c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83758 <_malloc_r+0x534>
   835a0:	4283      	cmp	r3, r0
   835a2:	f000 808a 	beq.w	836ba <_malloc_r+0x496>
   835a6:	685a      	ldr	r2, [r3, #4]
   835a8:	f022 0203 	bic.w	r2, r2, #3
   835ac:	4291      	cmp	r1, r2
   835ae:	d202      	bcs.n	835b6 <_malloc_r+0x392>
   835b0:	689b      	ldr	r3, [r3, #8]
   835b2:	4298      	cmp	r0, r3
   835b4:	d1f7      	bne.n	835a6 <_malloc_r+0x382>
   835b6:	68d9      	ldr	r1, [r3, #12]
   835b8:	687a      	ldr	r2, [r7, #4]
   835ba:	60e1      	str	r1, [r4, #12]
   835bc:	60a3      	str	r3, [r4, #8]
   835be:	608c      	str	r4, [r1, #8]
   835c0:	60dc      	str	r4, [r3, #12]
   835c2:	e6b6      	b.n	83332 <_malloc_r+0x10e>
   835c4:	f045 0701 	orr.w	r7, r5, #1
   835c8:	f042 0101 	orr.w	r1, r2, #1
   835cc:	4425      	add	r5, r4
   835ce:	6067      	str	r7, [r4, #4]
   835d0:	4630      	mov	r0, r6
   835d2:	615d      	str	r5, [r3, #20]
   835d4:	611d      	str	r5, [r3, #16]
   835d6:	f8c5 e00c 	str.w	lr, [r5, #12]
   835da:	f8c5 e008 	str.w	lr, [r5, #8]
   835de:	6069      	str	r1, [r5, #4]
   835e0:	50aa      	str	r2, [r5, r2]
   835e2:	3408      	adds	r4, #8
   835e4:	f000 f96c 	bl	838c0 <__malloc_unlock>
   835e8:	e648      	b.n	8327c <_malloc_r+0x58>
   835ea:	685a      	ldr	r2, [r3, #4]
   835ec:	e6a1      	b.n	83332 <_malloc_r+0x10e>
   835ee:	f109 0901 	add.w	r9, r9, #1
   835f2:	f019 0f03 	tst.w	r9, #3
   835f6:	f104 0408 	add.w	r4, r4, #8
   835fa:	f47f aead 	bne.w	83358 <_malloc_r+0x134>
   835fe:	e02d      	b.n	8365c <_malloc_r+0x438>
   83600:	f104 0308 	add.w	r3, r4, #8
   83604:	6964      	ldr	r4, [r4, #20]
   83606:	42a3      	cmp	r3, r4
   83608:	bf08      	it	eq
   8360a:	f10c 0c02 	addeq.w	ip, ip, #2
   8360e:	f43f ae67 	beq.w	832e0 <_malloc_r+0xbc>
   83612:	e623      	b.n	8325c <_malloc_r+0x38>
   83614:	4419      	add	r1, r3
   83616:	6848      	ldr	r0, [r1, #4]
   83618:	461c      	mov	r4, r3
   8361a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8361e:	68db      	ldr	r3, [r3, #12]
   83620:	f040 0501 	orr.w	r5, r0, #1
   83624:	604d      	str	r5, [r1, #4]
   83626:	4630      	mov	r0, r6
   83628:	60d3      	str	r3, [r2, #12]
   8362a:	609a      	str	r2, [r3, #8]
   8362c:	f000 f948 	bl	838c0 <__malloc_unlock>
   83630:	e624      	b.n	8327c <_malloc_r+0x58>
   83632:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83636:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8363a:	e63b      	b.n	832b4 <_malloc_r+0x90>
   8363c:	098a      	lsrs	r2, r1, #6
   8363e:	3238      	adds	r2, #56	; 0x38
   83640:	0050      	lsls	r0, r2, #1
   83642:	e7a8      	b.n	83596 <_malloc_r+0x372>
   83644:	42bc      	cmp	r4, r7
   83646:	f43f af02 	beq.w	8344e <_malloc_r+0x22a>
   8364a:	68bc      	ldr	r4, [r7, #8]
   8364c:	6862      	ldr	r2, [r4, #4]
   8364e:	f022 0203 	bic.w	r2, r2, #3
   83652:	e761      	b.n	83518 <_malloc_r+0x2f4>
   83654:	f8d8 8000 	ldr.w	r8, [r8]
   83658:	4598      	cmp	r8, r3
   8365a:	d17a      	bne.n	83752 <_malloc_r+0x52e>
   8365c:	f01c 0f03 	tst.w	ip, #3
   83660:	f1a8 0308 	sub.w	r3, r8, #8
   83664:	f10c 3cff 	add.w	ip, ip, #4294967295
   83668:	d1f4      	bne.n	83654 <_malloc_r+0x430>
   8366a:	687b      	ldr	r3, [r7, #4]
   8366c:	ea23 0300 	bic.w	r3, r3, r0
   83670:	607b      	str	r3, [r7, #4]
   83672:	0040      	lsls	r0, r0, #1
   83674:	4298      	cmp	r0, r3
   83676:	f63f aebe 	bhi.w	833f6 <_malloc_r+0x1d2>
   8367a:	2800      	cmp	r0, #0
   8367c:	f43f aebb 	beq.w	833f6 <_malloc_r+0x1d2>
   83680:	4203      	tst	r3, r0
   83682:	46cc      	mov	ip, r9
   83684:	f47f ae64 	bne.w	83350 <_malloc_r+0x12c>
   83688:	0040      	lsls	r0, r0, #1
   8368a:	4203      	tst	r3, r0
   8368c:	f10c 0c04 	add.w	ip, ip, #4
   83690:	d0fa      	beq.n	83688 <_malloc_r+0x464>
   83692:	e65d      	b.n	83350 <_malloc_r+0x12c>
   83694:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83698:	d819      	bhi.n	836ce <_malloc_r+0x4aa>
   8369a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8369e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   836a2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   836a6:	e605      	b.n	832b4 <_malloc_r+0x90>
   836a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   836ac:	e6ee      	b.n	8348c <_malloc_r+0x268>
   836ae:	2301      	movs	r3, #1
   836b0:	f8c8 3004 	str.w	r3, [r8, #4]
   836b4:	4644      	mov	r4, r8
   836b6:	2200      	movs	r2, #0
   836b8:	e72e      	b.n	83518 <_malloc_r+0x2f4>
   836ba:	1092      	asrs	r2, r2, #2
   836bc:	2001      	movs	r0, #1
   836be:	4090      	lsls	r0, r2
   836c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   836c4:	4619      	mov	r1, r3
   836c6:	4302      	orrs	r2, r0
   836c8:	f8c8 2004 	str.w	r2, [r8, #4]
   836cc:	e775      	b.n	835ba <_malloc_r+0x396>
   836ce:	f240 5354 	movw	r3, #1364	; 0x554
   836d2:	459c      	cmp	ip, r3
   836d4:	d81b      	bhi.n	8370e <_malloc_r+0x4ea>
   836d6:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   836da:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   836de:	ea4f 014c 	mov.w	r1, ip, lsl #1
   836e2:	e5e7      	b.n	832b4 <_malloc_r+0x90>
   836e4:	f10a 0a10 	add.w	sl, sl, #16
   836e8:	e6a3      	b.n	83432 <_malloc_r+0x20e>
   836ea:	2b54      	cmp	r3, #84	; 0x54
   836ec:	d81f      	bhi.n	8372e <_malloc_r+0x50a>
   836ee:	0b0a      	lsrs	r2, r1, #12
   836f0:	326e      	adds	r2, #110	; 0x6e
   836f2:	0050      	lsls	r0, r2, #1
   836f4:	e74f      	b.n	83596 <_malloc_r+0x372>
   836f6:	f3cb 010b 	ubfx	r1, fp, #0, #12
   836fa:	2900      	cmp	r1, #0
   836fc:	f47f aeb1 	bne.w	83462 <_malloc_r+0x23e>
   83700:	eb0a 0109 	add.w	r1, sl, r9
   83704:	68ba      	ldr	r2, [r7, #8]
   83706:	f041 0101 	orr.w	r1, r1, #1
   8370a:	6051      	str	r1, [r2, #4]
   8370c:	e6f6      	b.n	834fc <_malloc_r+0x2d8>
   8370e:	21fc      	movs	r1, #252	; 0xfc
   83710:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83714:	e5ce      	b.n	832b4 <_malloc_r+0x90>
   83716:	2201      	movs	r2, #1
   83718:	f04f 0a00 	mov.w	sl, #0
   8371c:	e6cb      	b.n	834b6 <_malloc_r+0x292>
   8371e:	f104 0108 	add.w	r1, r4, #8
   83722:	4630      	mov	r0, r6
   83724:	f7ff fa80 	bl	82c28 <_free_r>
   83728:	f8da 3000 	ldr.w	r3, [sl]
   8372c:	e6e6      	b.n	834fc <_malloc_r+0x2d8>
   8372e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83732:	d803      	bhi.n	8373c <_malloc_r+0x518>
   83734:	0bca      	lsrs	r2, r1, #15
   83736:	3277      	adds	r2, #119	; 0x77
   83738:	0050      	lsls	r0, r2, #1
   8373a:	e72c      	b.n	83596 <_malloc_r+0x372>
   8373c:	f240 5254 	movw	r2, #1364	; 0x554
   83740:	4293      	cmp	r3, r2
   83742:	d803      	bhi.n	8374c <_malloc_r+0x528>
   83744:	0c8a      	lsrs	r2, r1, #18
   83746:	327c      	adds	r2, #124	; 0x7c
   83748:	0050      	lsls	r0, r2, #1
   8374a:	e724      	b.n	83596 <_malloc_r+0x372>
   8374c:	20fc      	movs	r0, #252	; 0xfc
   8374e:	227e      	movs	r2, #126	; 0x7e
   83750:	e721      	b.n	83596 <_malloc_r+0x372>
   83752:	687b      	ldr	r3, [r7, #4]
   83754:	e78d      	b.n	83672 <_malloc_r+0x44e>
   83756:	bf00      	nop
   83758:	20070590 	.word	0x20070590

0008375c <memchr>:
   8375c:	0783      	lsls	r3, r0, #30
   8375e:	b470      	push	{r4, r5, r6}
   83760:	b2c9      	uxtb	r1, r1
   83762:	d040      	beq.n	837e6 <memchr+0x8a>
   83764:	1e54      	subs	r4, r2, #1
   83766:	b32a      	cbz	r2, 837b4 <memchr+0x58>
   83768:	7803      	ldrb	r3, [r0, #0]
   8376a:	428b      	cmp	r3, r1
   8376c:	d023      	beq.n	837b6 <memchr+0x5a>
   8376e:	1c43      	adds	r3, r0, #1
   83770:	e004      	b.n	8377c <memchr+0x20>
   83772:	b1fc      	cbz	r4, 837b4 <memchr+0x58>
   83774:	7805      	ldrb	r5, [r0, #0]
   83776:	4614      	mov	r4, r2
   83778:	428d      	cmp	r5, r1
   8377a:	d01c      	beq.n	837b6 <memchr+0x5a>
   8377c:	f013 0f03 	tst.w	r3, #3
   83780:	4618      	mov	r0, r3
   83782:	f104 32ff 	add.w	r2, r4, #4294967295
   83786:	f103 0301 	add.w	r3, r3, #1
   8378a:	d1f2      	bne.n	83772 <memchr+0x16>
   8378c:	2c03      	cmp	r4, #3
   8378e:	d814      	bhi.n	837ba <memchr+0x5e>
   83790:	1e65      	subs	r5, r4, #1
   83792:	b354      	cbz	r4, 837ea <memchr+0x8e>
   83794:	7803      	ldrb	r3, [r0, #0]
   83796:	428b      	cmp	r3, r1
   83798:	d00d      	beq.n	837b6 <memchr+0x5a>
   8379a:	1c42      	adds	r2, r0, #1
   8379c:	2300      	movs	r3, #0
   8379e:	e002      	b.n	837a6 <memchr+0x4a>
   837a0:	7804      	ldrb	r4, [r0, #0]
   837a2:	428c      	cmp	r4, r1
   837a4:	d007      	beq.n	837b6 <memchr+0x5a>
   837a6:	42ab      	cmp	r3, r5
   837a8:	4610      	mov	r0, r2
   837aa:	f103 0301 	add.w	r3, r3, #1
   837ae:	f102 0201 	add.w	r2, r2, #1
   837b2:	d1f5      	bne.n	837a0 <memchr+0x44>
   837b4:	2000      	movs	r0, #0
   837b6:	bc70      	pop	{r4, r5, r6}
   837b8:	4770      	bx	lr
   837ba:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   837be:	4603      	mov	r3, r0
   837c0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   837c4:	681a      	ldr	r2, [r3, #0]
   837c6:	4618      	mov	r0, r3
   837c8:	4072      	eors	r2, r6
   837ca:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   837ce:	ea25 0202 	bic.w	r2, r5, r2
   837d2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   837d6:	f103 0304 	add.w	r3, r3, #4
   837da:	d1d9      	bne.n	83790 <memchr+0x34>
   837dc:	3c04      	subs	r4, #4
   837de:	2c03      	cmp	r4, #3
   837e0:	4618      	mov	r0, r3
   837e2:	d8ef      	bhi.n	837c4 <memchr+0x68>
   837e4:	e7d4      	b.n	83790 <memchr+0x34>
   837e6:	4614      	mov	r4, r2
   837e8:	e7d0      	b.n	8378c <memchr+0x30>
   837ea:	4620      	mov	r0, r4
   837ec:	e7e3      	b.n	837b6 <memchr+0x5a>
   837ee:	bf00      	nop

000837f0 <memmove>:
   837f0:	4288      	cmp	r0, r1
   837f2:	b4f0      	push	{r4, r5, r6, r7}
   837f4:	d910      	bls.n	83818 <memmove+0x28>
   837f6:	188c      	adds	r4, r1, r2
   837f8:	42a0      	cmp	r0, r4
   837fa:	d20d      	bcs.n	83818 <memmove+0x28>
   837fc:	1885      	adds	r5, r0, r2
   837fe:	1e53      	subs	r3, r2, #1
   83800:	b142      	cbz	r2, 83814 <memmove+0x24>
   83802:	4621      	mov	r1, r4
   83804:	462a      	mov	r2, r5
   83806:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   8380a:	3b01      	subs	r3, #1
   8380c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83810:	1c5c      	adds	r4, r3, #1
   83812:	d1f8      	bne.n	83806 <memmove+0x16>
   83814:	bcf0      	pop	{r4, r5, r6, r7}
   83816:	4770      	bx	lr
   83818:	2a0f      	cmp	r2, #15
   8381a:	d944      	bls.n	838a6 <memmove+0xb6>
   8381c:	ea40 0301 	orr.w	r3, r0, r1
   83820:	079b      	lsls	r3, r3, #30
   83822:	d144      	bne.n	838ae <memmove+0xbe>
   83824:	f1a2 0710 	sub.w	r7, r2, #16
   83828:	093f      	lsrs	r7, r7, #4
   8382a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8382e:	3610      	adds	r6, #16
   83830:	460c      	mov	r4, r1
   83832:	4603      	mov	r3, r0
   83834:	6825      	ldr	r5, [r4, #0]
   83836:	3310      	adds	r3, #16
   83838:	f843 5c10 	str.w	r5, [r3, #-16]
   8383c:	6865      	ldr	r5, [r4, #4]
   8383e:	3410      	adds	r4, #16
   83840:	f843 5c0c 	str.w	r5, [r3, #-12]
   83844:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83848:	f843 5c08 	str.w	r5, [r3, #-8]
   8384c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83850:	f843 5c04 	str.w	r5, [r3, #-4]
   83854:	42b3      	cmp	r3, r6
   83856:	d1ed      	bne.n	83834 <memmove+0x44>
   83858:	1c7b      	adds	r3, r7, #1
   8385a:	f002 0c0f 	and.w	ip, r2, #15
   8385e:	011b      	lsls	r3, r3, #4
   83860:	f1bc 0f03 	cmp.w	ip, #3
   83864:	4419      	add	r1, r3
   83866:	4403      	add	r3, r0
   83868:	d923      	bls.n	838b2 <memmove+0xc2>
   8386a:	460e      	mov	r6, r1
   8386c:	461d      	mov	r5, r3
   8386e:	4664      	mov	r4, ip
   83870:	f856 7b04 	ldr.w	r7, [r6], #4
   83874:	3c04      	subs	r4, #4
   83876:	2c03      	cmp	r4, #3
   83878:	f845 7b04 	str.w	r7, [r5], #4
   8387c:	d8f8      	bhi.n	83870 <memmove+0x80>
   8387e:	f1ac 0404 	sub.w	r4, ip, #4
   83882:	f024 0403 	bic.w	r4, r4, #3
   83886:	3404      	adds	r4, #4
   83888:	f002 0203 	and.w	r2, r2, #3
   8388c:	4423      	add	r3, r4
   8388e:	4421      	add	r1, r4
   83890:	2a00      	cmp	r2, #0
   83892:	d0bf      	beq.n	83814 <memmove+0x24>
   83894:	441a      	add	r2, r3
   83896:	f811 4b01 	ldrb.w	r4, [r1], #1
   8389a:	f803 4b01 	strb.w	r4, [r3], #1
   8389e:	4293      	cmp	r3, r2
   838a0:	d1f9      	bne.n	83896 <memmove+0xa6>
   838a2:	bcf0      	pop	{r4, r5, r6, r7}
   838a4:	4770      	bx	lr
   838a6:	4603      	mov	r3, r0
   838a8:	2a00      	cmp	r2, #0
   838aa:	d1f3      	bne.n	83894 <memmove+0xa4>
   838ac:	e7b2      	b.n	83814 <memmove+0x24>
   838ae:	4603      	mov	r3, r0
   838b0:	e7f0      	b.n	83894 <memmove+0xa4>
   838b2:	4662      	mov	r2, ip
   838b4:	2a00      	cmp	r2, #0
   838b6:	d1ed      	bne.n	83894 <memmove+0xa4>
   838b8:	e7ac      	b.n	83814 <memmove+0x24>
   838ba:	bf00      	nop

000838bc <__malloc_lock>:
   838bc:	4770      	bx	lr
   838be:	bf00      	nop

000838c0 <__malloc_unlock>:
   838c0:	4770      	bx	lr
   838c2:	bf00      	nop

000838c4 <_realloc_r>:
   838c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   838c8:	460c      	mov	r4, r1
   838ca:	b083      	sub	sp, #12
   838cc:	4690      	mov	r8, r2
   838ce:	4681      	mov	r9, r0
   838d0:	2900      	cmp	r1, #0
   838d2:	f000 80ba 	beq.w	83a4a <_realloc_r+0x186>
   838d6:	f7ff fff1 	bl	838bc <__malloc_lock>
   838da:	f108 060b 	add.w	r6, r8, #11
   838de:	f854 3c04 	ldr.w	r3, [r4, #-4]
   838e2:	2e16      	cmp	r6, #22
   838e4:	f023 0503 	bic.w	r5, r3, #3
   838e8:	f1a4 0708 	sub.w	r7, r4, #8
   838ec:	d84b      	bhi.n	83986 <_realloc_r+0xc2>
   838ee:	2110      	movs	r1, #16
   838f0:	460e      	mov	r6, r1
   838f2:	45b0      	cmp	r8, r6
   838f4:	d84c      	bhi.n	83990 <_realloc_r+0xcc>
   838f6:	428d      	cmp	r5, r1
   838f8:	da51      	bge.n	8399e <_realloc_r+0xda>
   838fa:	f8df b384 	ldr.w	fp, [pc, #900]	; 83c80 <_realloc_r+0x3bc>
   838fe:	1978      	adds	r0, r7, r5
   83900:	f8db e008 	ldr.w	lr, [fp, #8]
   83904:	4586      	cmp	lr, r0
   83906:	f000 80a6 	beq.w	83a56 <_realloc_r+0x192>
   8390a:	6842      	ldr	r2, [r0, #4]
   8390c:	f022 0c01 	bic.w	ip, r2, #1
   83910:	4484      	add	ip, r0
   83912:	f8dc c004 	ldr.w	ip, [ip, #4]
   83916:	f01c 0f01 	tst.w	ip, #1
   8391a:	d054      	beq.n	839c6 <_realloc_r+0x102>
   8391c:	2200      	movs	r2, #0
   8391e:	4610      	mov	r0, r2
   83920:	07db      	lsls	r3, r3, #31
   83922:	d46f      	bmi.n	83a04 <_realloc_r+0x140>
   83924:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83928:	ebc3 0a07 	rsb	sl, r3, r7
   8392c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83930:	f023 0303 	bic.w	r3, r3, #3
   83934:	442b      	add	r3, r5
   83936:	2800      	cmp	r0, #0
   83938:	d062      	beq.n	83a00 <_realloc_r+0x13c>
   8393a:	4570      	cmp	r0, lr
   8393c:	f000 80e9 	beq.w	83b12 <_realloc_r+0x24e>
   83940:	eb02 0e03 	add.w	lr, r2, r3
   83944:	458e      	cmp	lr, r1
   83946:	db5b      	blt.n	83a00 <_realloc_r+0x13c>
   83948:	68c3      	ldr	r3, [r0, #12]
   8394a:	6882      	ldr	r2, [r0, #8]
   8394c:	46d0      	mov	r8, sl
   8394e:	60d3      	str	r3, [r2, #12]
   83950:	609a      	str	r2, [r3, #8]
   83952:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83956:	f8da 300c 	ldr.w	r3, [sl, #12]
   8395a:	1f2a      	subs	r2, r5, #4
   8395c:	2a24      	cmp	r2, #36	; 0x24
   8395e:	60cb      	str	r3, [r1, #12]
   83960:	6099      	str	r1, [r3, #8]
   83962:	f200 8123 	bhi.w	83bac <_realloc_r+0x2e8>
   83966:	2a13      	cmp	r2, #19
   83968:	f240 80b0 	bls.w	83acc <_realloc_r+0x208>
   8396c:	6823      	ldr	r3, [r4, #0]
   8396e:	2a1b      	cmp	r2, #27
   83970:	f8ca 3008 	str.w	r3, [sl, #8]
   83974:	6863      	ldr	r3, [r4, #4]
   83976:	f8ca 300c 	str.w	r3, [sl, #12]
   8397a:	f200 812b 	bhi.w	83bd4 <_realloc_r+0x310>
   8397e:	3408      	adds	r4, #8
   83980:	f10a 0310 	add.w	r3, sl, #16
   83984:	e0a3      	b.n	83ace <_realloc_r+0x20a>
   83986:	f026 0607 	bic.w	r6, r6, #7
   8398a:	2e00      	cmp	r6, #0
   8398c:	4631      	mov	r1, r6
   8398e:	dab0      	bge.n	838f2 <_realloc_r+0x2e>
   83990:	230c      	movs	r3, #12
   83992:	2000      	movs	r0, #0
   83994:	f8c9 3000 	str.w	r3, [r9]
   83998:	b003      	add	sp, #12
   8399a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8399e:	46a0      	mov	r8, r4
   839a0:	1baa      	subs	r2, r5, r6
   839a2:	2a0f      	cmp	r2, #15
   839a4:	f003 0301 	and.w	r3, r3, #1
   839a8:	d81a      	bhi.n	839e0 <_realloc_r+0x11c>
   839aa:	432b      	orrs	r3, r5
   839ac:	607b      	str	r3, [r7, #4]
   839ae:	443d      	add	r5, r7
   839b0:	686b      	ldr	r3, [r5, #4]
   839b2:	f043 0301 	orr.w	r3, r3, #1
   839b6:	606b      	str	r3, [r5, #4]
   839b8:	4648      	mov	r0, r9
   839ba:	f7ff ff81 	bl	838c0 <__malloc_unlock>
   839be:	4640      	mov	r0, r8
   839c0:	b003      	add	sp, #12
   839c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   839c6:	f022 0203 	bic.w	r2, r2, #3
   839ca:	eb02 0c05 	add.w	ip, r2, r5
   839ce:	458c      	cmp	ip, r1
   839d0:	dba6      	blt.n	83920 <_realloc_r+0x5c>
   839d2:	68c2      	ldr	r2, [r0, #12]
   839d4:	6881      	ldr	r1, [r0, #8]
   839d6:	46a0      	mov	r8, r4
   839d8:	60ca      	str	r2, [r1, #12]
   839da:	4665      	mov	r5, ip
   839dc:	6091      	str	r1, [r2, #8]
   839de:	e7df      	b.n	839a0 <_realloc_r+0xdc>
   839e0:	19b9      	adds	r1, r7, r6
   839e2:	4333      	orrs	r3, r6
   839e4:	f042 0001 	orr.w	r0, r2, #1
   839e8:	607b      	str	r3, [r7, #4]
   839ea:	440a      	add	r2, r1
   839ec:	6048      	str	r0, [r1, #4]
   839ee:	6853      	ldr	r3, [r2, #4]
   839f0:	3108      	adds	r1, #8
   839f2:	f043 0301 	orr.w	r3, r3, #1
   839f6:	6053      	str	r3, [r2, #4]
   839f8:	4648      	mov	r0, r9
   839fa:	f7ff f915 	bl	82c28 <_free_r>
   839fe:	e7db      	b.n	839b8 <_realloc_r+0xf4>
   83a00:	428b      	cmp	r3, r1
   83a02:	da33      	bge.n	83a6c <_realloc_r+0x1a8>
   83a04:	4641      	mov	r1, r8
   83a06:	4648      	mov	r0, r9
   83a08:	f7ff fc0c 	bl	83224 <_malloc_r>
   83a0c:	4680      	mov	r8, r0
   83a0e:	2800      	cmp	r0, #0
   83a10:	d0d2      	beq.n	839b8 <_realloc_r+0xf4>
   83a12:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83a16:	f1a0 0108 	sub.w	r1, r0, #8
   83a1a:	f023 0201 	bic.w	r2, r3, #1
   83a1e:	443a      	add	r2, r7
   83a20:	4291      	cmp	r1, r2
   83a22:	f000 80bc 	beq.w	83b9e <_realloc_r+0x2da>
   83a26:	1f2a      	subs	r2, r5, #4
   83a28:	2a24      	cmp	r2, #36	; 0x24
   83a2a:	d86e      	bhi.n	83b0a <_realloc_r+0x246>
   83a2c:	2a13      	cmp	r2, #19
   83a2e:	d842      	bhi.n	83ab6 <_realloc_r+0x1f2>
   83a30:	4603      	mov	r3, r0
   83a32:	4622      	mov	r2, r4
   83a34:	6811      	ldr	r1, [r2, #0]
   83a36:	6019      	str	r1, [r3, #0]
   83a38:	6851      	ldr	r1, [r2, #4]
   83a3a:	6059      	str	r1, [r3, #4]
   83a3c:	6892      	ldr	r2, [r2, #8]
   83a3e:	609a      	str	r2, [r3, #8]
   83a40:	4621      	mov	r1, r4
   83a42:	4648      	mov	r0, r9
   83a44:	f7ff f8f0 	bl	82c28 <_free_r>
   83a48:	e7b6      	b.n	839b8 <_realloc_r+0xf4>
   83a4a:	4611      	mov	r1, r2
   83a4c:	b003      	add	sp, #12
   83a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83a52:	f7ff bbe7 	b.w	83224 <_malloc_r>
   83a56:	f8de 2004 	ldr.w	r2, [lr, #4]
   83a5a:	f106 0c10 	add.w	ip, r6, #16
   83a5e:	f022 0203 	bic.w	r2, r2, #3
   83a62:	1950      	adds	r0, r2, r5
   83a64:	4560      	cmp	r0, ip
   83a66:	da3d      	bge.n	83ae4 <_realloc_r+0x220>
   83a68:	4670      	mov	r0, lr
   83a6a:	e759      	b.n	83920 <_realloc_r+0x5c>
   83a6c:	46d0      	mov	r8, sl
   83a6e:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83a72:	f8da 100c 	ldr.w	r1, [sl, #12]
   83a76:	1f2a      	subs	r2, r5, #4
   83a78:	2a24      	cmp	r2, #36	; 0x24
   83a7a:	60c1      	str	r1, [r0, #12]
   83a7c:	6088      	str	r0, [r1, #8]
   83a7e:	f200 80a0 	bhi.w	83bc2 <_realloc_r+0x2fe>
   83a82:	2a13      	cmp	r2, #19
   83a84:	f240 809b 	bls.w	83bbe <_realloc_r+0x2fa>
   83a88:	6821      	ldr	r1, [r4, #0]
   83a8a:	2a1b      	cmp	r2, #27
   83a8c:	f8ca 1008 	str.w	r1, [sl, #8]
   83a90:	6861      	ldr	r1, [r4, #4]
   83a92:	f8ca 100c 	str.w	r1, [sl, #12]
   83a96:	f200 80b2 	bhi.w	83bfe <_realloc_r+0x33a>
   83a9a:	3408      	adds	r4, #8
   83a9c:	f10a 0210 	add.w	r2, sl, #16
   83aa0:	6821      	ldr	r1, [r4, #0]
   83aa2:	461d      	mov	r5, r3
   83aa4:	6011      	str	r1, [r2, #0]
   83aa6:	6861      	ldr	r1, [r4, #4]
   83aa8:	4657      	mov	r7, sl
   83aaa:	6051      	str	r1, [r2, #4]
   83aac:	68a3      	ldr	r3, [r4, #8]
   83aae:	6093      	str	r3, [r2, #8]
   83ab0:	f8da 3004 	ldr.w	r3, [sl, #4]
   83ab4:	e774      	b.n	839a0 <_realloc_r+0xdc>
   83ab6:	6823      	ldr	r3, [r4, #0]
   83ab8:	2a1b      	cmp	r2, #27
   83aba:	6003      	str	r3, [r0, #0]
   83abc:	6863      	ldr	r3, [r4, #4]
   83abe:	6043      	str	r3, [r0, #4]
   83ac0:	d862      	bhi.n	83b88 <_realloc_r+0x2c4>
   83ac2:	f100 0308 	add.w	r3, r0, #8
   83ac6:	f104 0208 	add.w	r2, r4, #8
   83aca:	e7b3      	b.n	83a34 <_realloc_r+0x170>
   83acc:	4643      	mov	r3, r8
   83ace:	6822      	ldr	r2, [r4, #0]
   83ad0:	4675      	mov	r5, lr
   83ad2:	601a      	str	r2, [r3, #0]
   83ad4:	6862      	ldr	r2, [r4, #4]
   83ad6:	4657      	mov	r7, sl
   83ad8:	605a      	str	r2, [r3, #4]
   83ada:	68a2      	ldr	r2, [r4, #8]
   83adc:	609a      	str	r2, [r3, #8]
   83ade:	f8da 3004 	ldr.w	r3, [sl, #4]
   83ae2:	e75d      	b.n	839a0 <_realloc_r+0xdc>
   83ae4:	1b83      	subs	r3, r0, r6
   83ae6:	4437      	add	r7, r6
   83ae8:	f043 0301 	orr.w	r3, r3, #1
   83aec:	f8cb 7008 	str.w	r7, [fp, #8]
   83af0:	607b      	str	r3, [r7, #4]
   83af2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83af6:	4648      	mov	r0, r9
   83af8:	f003 0301 	and.w	r3, r3, #1
   83afc:	431e      	orrs	r6, r3
   83afe:	f844 6c04 	str.w	r6, [r4, #-4]
   83b02:	f7ff fedd 	bl	838c0 <__malloc_unlock>
   83b06:	4620      	mov	r0, r4
   83b08:	e75a      	b.n	839c0 <_realloc_r+0xfc>
   83b0a:	4621      	mov	r1, r4
   83b0c:	f7ff fe70 	bl	837f0 <memmove>
   83b10:	e796      	b.n	83a40 <_realloc_r+0x17c>
   83b12:	eb02 0c03 	add.w	ip, r2, r3
   83b16:	f106 0210 	add.w	r2, r6, #16
   83b1a:	4594      	cmp	ip, r2
   83b1c:	f6ff af70 	blt.w	83a00 <_realloc_r+0x13c>
   83b20:	4657      	mov	r7, sl
   83b22:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83b26:	f8da 300c 	ldr.w	r3, [sl, #12]
   83b2a:	1f2a      	subs	r2, r5, #4
   83b2c:	2a24      	cmp	r2, #36	; 0x24
   83b2e:	60cb      	str	r3, [r1, #12]
   83b30:	6099      	str	r1, [r3, #8]
   83b32:	f200 8086 	bhi.w	83c42 <_realloc_r+0x37e>
   83b36:	2a13      	cmp	r2, #19
   83b38:	d977      	bls.n	83c2a <_realloc_r+0x366>
   83b3a:	6823      	ldr	r3, [r4, #0]
   83b3c:	2a1b      	cmp	r2, #27
   83b3e:	f8ca 3008 	str.w	r3, [sl, #8]
   83b42:	6863      	ldr	r3, [r4, #4]
   83b44:	f8ca 300c 	str.w	r3, [sl, #12]
   83b48:	f200 8084 	bhi.w	83c54 <_realloc_r+0x390>
   83b4c:	3408      	adds	r4, #8
   83b4e:	f10a 0310 	add.w	r3, sl, #16
   83b52:	6822      	ldr	r2, [r4, #0]
   83b54:	601a      	str	r2, [r3, #0]
   83b56:	6862      	ldr	r2, [r4, #4]
   83b58:	605a      	str	r2, [r3, #4]
   83b5a:	68a2      	ldr	r2, [r4, #8]
   83b5c:	609a      	str	r2, [r3, #8]
   83b5e:	ebc6 020c 	rsb	r2, r6, ip
   83b62:	eb0a 0306 	add.w	r3, sl, r6
   83b66:	f042 0201 	orr.w	r2, r2, #1
   83b6a:	f8cb 3008 	str.w	r3, [fp, #8]
   83b6e:	605a      	str	r2, [r3, #4]
   83b70:	f8da 3004 	ldr.w	r3, [sl, #4]
   83b74:	4648      	mov	r0, r9
   83b76:	f003 0301 	and.w	r3, r3, #1
   83b7a:	431e      	orrs	r6, r3
   83b7c:	f8ca 6004 	str.w	r6, [sl, #4]
   83b80:	f7ff fe9e 	bl	838c0 <__malloc_unlock>
   83b84:	4638      	mov	r0, r7
   83b86:	e71b      	b.n	839c0 <_realloc_r+0xfc>
   83b88:	68a3      	ldr	r3, [r4, #8]
   83b8a:	2a24      	cmp	r2, #36	; 0x24
   83b8c:	6083      	str	r3, [r0, #8]
   83b8e:	68e3      	ldr	r3, [r4, #12]
   83b90:	60c3      	str	r3, [r0, #12]
   83b92:	d02b      	beq.n	83bec <_realloc_r+0x328>
   83b94:	f100 0310 	add.w	r3, r0, #16
   83b98:	f104 0210 	add.w	r2, r4, #16
   83b9c:	e74a      	b.n	83a34 <_realloc_r+0x170>
   83b9e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83ba2:	46a0      	mov	r8, r4
   83ba4:	f022 0203 	bic.w	r2, r2, #3
   83ba8:	4415      	add	r5, r2
   83baa:	e6f9      	b.n	839a0 <_realloc_r+0xdc>
   83bac:	4621      	mov	r1, r4
   83bae:	4640      	mov	r0, r8
   83bb0:	4675      	mov	r5, lr
   83bb2:	4657      	mov	r7, sl
   83bb4:	f7ff fe1c 	bl	837f0 <memmove>
   83bb8:	f8da 3004 	ldr.w	r3, [sl, #4]
   83bbc:	e6f0      	b.n	839a0 <_realloc_r+0xdc>
   83bbe:	4642      	mov	r2, r8
   83bc0:	e76e      	b.n	83aa0 <_realloc_r+0x1dc>
   83bc2:	4621      	mov	r1, r4
   83bc4:	4640      	mov	r0, r8
   83bc6:	461d      	mov	r5, r3
   83bc8:	4657      	mov	r7, sl
   83bca:	f7ff fe11 	bl	837f0 <memmove>
   83bce:	f8da 3004 	ldr.w	r3, [sl, #4]
   83bd2:	e6e5      	b.n	839a0 <_realloc_r+0xdc>
   83bd4:	68a3      	ldr	r3, [r4, #8]
   83bd6:	2a24      	cmp	r2, #36	; 0x24
   83bd8:	f8ca 3010 	str.w	r3, [sl, #16]
   83bdc:	68e3      	ldr	r3, [r4, #12]
   83bde:	f8ca 3014 	str.w	r3, [sl, #20]
   83be2:	d018      	beq.n	83c16 <_realloc_r+0x352>
   83be4:	3410      	adds	r4, #16
   83be6:	f10a 0318 	add.w	r3, sl, #24
   83bea:	e770      	b.n	83ace <_realloc_r+0x20a>
   83bec:	6922      	ldr	r2, [r4, #16]
   83bee:	f100 0318 	add.w	r3, r0, #24
   83bf2:	6102      	str	r2, [r0, #16]
   83bf4:	6961      	ldr	r1, [r4, #20]
   83bf6:	f104 0218 	add.w	r2, r4, #24
   83bfa:	6141      	str	r1, [r0, #20]
   83bfc:	e71a      	b.n	83a34 <_realloc_r+0x170>
   83bfe:	68a1      	ldr	r1, [r4, #8]
   83c00:	2a24      	cmp	r2, #36	; 0x24
   83c02:	f8ca 1010 	str.w	r1, [sl, #16]
   83c06:	68e1      	ldr	r1, [r4, #12]
   83c08:	f8ca 1014 	str.w	r1, [sl, #20]
   83c0c:	d00f      	beq.n	83c2e <_realloc_r+0x36a>
   83c0e:	3410      	adds	r4, #16
   83c10:	f10a 0218 	add.w	r2, sl, #24
   83c14:	e744      	b.n	83aa0 <_realloc_r+0x1dc>
   83c16:	6922      	ldr	r2, [r4, #16]
   83c18:	f10a 0320 	add.w	r3, sl, #32
   83c1c:	f8ca 2018 	str.w	r2, [sl, #24]
   83c20:	6962      	ldr	r2, [r4, #20]
   83c22:	3418      	adds	r4, #24
   83c24:	f8ca 201c 	str.w	r2, [sl, #28]
   83c28:	e751      	b.n	83ace <_realloc_r+0x20a>
   83c2a:	463b      	mov	r3, r7
   83c2c:	e791      	b.n	83b52 <_realloc_r+0x28e>
   83c2e:	6921      	ldr	r1, [r4, #16]
   83c30:	f10a 0220 	add.w	r2, sl, #32
   83c34:	f8ca 1018 	str.w	r1, [sl, #24]
   83c38:	6961      	ldr	r1, [r4, #20]
   83c3a:	3418      	adds	r4, #24
   83c3c:	f8ca 101c 	str.w	r1, [sl, #28]
   83c40:	e72e      	b.n	83aa0 <_realloc_r+0x1dc>
   83c42:	4621      	mov	r1, r4
   83c44:	4638      	mov	r0, r7
   83c46:	f8cd c004 	str.w	ip, [sp, #4]
   83c4a:	f7ff fdd1 	bl	837f0 <memmove>
   83c4e:	f8dd c004 	ldr.w	ip, [sp, #4]
   83c52:	e784      	b.n	83b5e <_realloc_r+0x29a>
   83c54:	68a3      	ldr	r3, [r4, #8]
   83c56:	2a24      	cmp	r2, #36	; 0x24
   83c58:	f8ca 3010 	str.w	r3, [sl, #16]
   83c5c:	68e3      	ldr	r3, [r4, #12]
   83c5e:	f8ca 3014 	str.w	r3, [sl, #20]
   83c62:	d003      	beq.n	83c6c <_realloc_r+0x3a8>
   83c64:	3410      	adds	r4, #16
   83c66:	f10a 0318 	add.w	r3, sl, #24
   83c6a:	e772      	b.n	83b52 <_realloc_r+0x28e>
   83c6c:	6922      	ldr	r2, [r4, #16]
   83c6e:	f10a 0320 	add.w	r3, sl, #32
   83c72:	f8ca 2018 	str.w	r2, [sl, #24]
   83c76:	6962      	ldr	r2, [r4, #20]
   83c78:	3418      	adds	r4, #24
   83c7a:	f8ca 201c 	str.w	r2, [sl, #28]
   83c7e:	e768      	b.n	83b52 <_realloc_r+0x28e>
   83c80:	20070590 	.word	0x20070590

00083c84 <_sbrk_r>:
   83c84:	b538      	push	{r3, r4, r5, lr}
   83c86:	4c07      	ldr	r4, [pc, #28]	; (83ca4 <_sbrk_r+0x20>)
   83c88:	2300      	movs	r3, #0
   83c8a:	4605      	mov	r5, r0
   83c8c:	4608      	mov	r0, r1
   83c8e:	6023      	str	r3, [r4, #0]
   83c90:	f7fd fc9a 	bl	815c8 <_sbrk>
   83c94:	1c43      	adds	r3, r0, #1
   83c96:	d000      	beq.n	83c9a <_sbrk_r+0x16>
   83c98:	bd38      	pop	{r3, r4, r5, pc}
   83c9a:	6823      	ldr	r3, [r4, #0]
   83c9c:	2b00      	cmp	r3, #0
   83c9e:	d0fb      	beq.n	83c98 <_sbrk_r+0x14>
   83ca0:	602b      	str	r3, [r5, #0]
   83ca2:	bd38      	pop	{r3, r4, r5, pc}
   83ca4:	20070c00 	.word	0x20070c00

00083ca8 <__sread>:
   83ca8:	b510      	push	{r4, lr}
   83caa:	460c      	mov	r4, r1
   83cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83cb0:	f000 f9c2 	bl	84038 <_read_r>
   83cb4:	2800      	cmp	r0, #0
   83cb6:	db03      	blt.n	83cc0 <__sread+0x18>
   83cb8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83cba:	4403      	add	r3, r0
   83cbc:	6523      	str	r3, [r4, #80]	; 0x50
   83cbe:	bd10      	pop	{r4, pc}
   83cc0:	89a3      	ldrh	r3, [r4, #12]
   83cc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83cc6:	81a3      	strh	r3, [r4, #12]
   83cc8:	bd10      	pop	{r4, pc}
   83cca:	bf00      	nop

00083ccc <__swrite>:
   83ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83cd0:	460c      	mov	r4, r1
   83cd2:	8989      	ldrh	r1, [r1, #12]
   83cd4:	461d      	mov	r5, r3
   83cd6:	05cb      	lsls	r3, r1, #23
   83cd8:	4616      	mov	r6, r2
   83cda:	4607      	mov	r7, r0
   83cdc:	d506      	bpl.n	83cec <__swrite+0x20>
   83cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83ce2:	2200      	movs	r2, #0
   83ce4:	2302      	movs	r3, #2
   83ce6:	f000 f993 	bl	84010 <_lseek_r>
   83cea:	89a1      	ldrh	r1, [r4, #12]
   83cec:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83cf0:	81a1      	strh	r1, [r4, #12]
   83cf2:	4638      	mov	r0, r7
   83cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83cf8:	4632      	mov	r2, r6
   83cfa:	462b      	mov	r3, r5
   83cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83d00:	f000 b89e 	b.w	83e40 <_write_r>

00083d04 <__sseek>:
   83d04:	b510      	push	{r4, lr}
   83d06:	460c      	mov	r4, r1
   83d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83d0c:	f000 f980 	bl	84010 <_lseek_r>
   83d10:	89a3      	ldrh	r3, [r4, #12]
   83d12:	1c42      	adds	r2, r0, #1
   83d14:	bf0e      	itee	eq
   83d16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83d1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83d1e:	6520      	strne	r0, [r4, #80]	; 0x50
   83d20:	81a3      	strh	r3, [r4, #12]
   83d22:	bd10      	pop	{r4, pc}

00083d24 <__sclose>:
   83d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83d28:	f000 b8f2 	b.w	83f10 <_close_r>

00083d2c <__swbuf_r>:
   83d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83d2e:	460d      	mov	r5, r1
   83d30:	4614      	mov	r4, r2
   83d32:	4607      	mov	r7, r0
   83d34:	b110      	cbz	r0, 83d3c <__swbuf_r+0x10>
   83d36:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83d38:	2b00      	cmp	r3, #0
   83d3a:	d048      	beq.n	83dce <__swbuf_r+0xa2>
   83d3c:	89a2      	ldrh	r2, [r4, #12]
   83d3e:	69a0      	ldr	r0, [r4, #24]
   83d40:	b293      	uxth	r3, r2
   83d42:	60a0      	str	r0, [r4, #8]
   83d44:	0718      	lsls	r0, r3, #28
   83d46:	d538      	bpl.n	83dba <__swbuf_r+0x8e>
   83d48:	6926      	ldr	r6, [r4, #16]
   83d4a:	2e00      	cmp	r6, #0
   83d4c:	d035      	beq.n	83dba <__swbuf_r+0x8e>
   83d4e:	0499      	lsls	r1, r3, #18
   83d50:	b2ed      	uxtb	r5, r5
   83d52:	d515      	bpl.n	83d80 <__swbuf_r+0x54>
   83d54:	6823      	ldr	r3, [r4, #0]
   83d56:	6962      	ldr	r2, [r4, #20]
   83d58:	1b9e      	subs	r6, r3, r6
   83d5a:	4296      	cmp	r6, r2
   83d5c:	da1c      	bge.n	83d98 <__swbuf_r+0x6c>
   83d5e:	3601      	adds	r6, #1
   83d60:	68a2      	ldr	r2, [r4, #8]
   83d62:	1c59      	adds	r1, r3, #1
   83d64:	3a01      	subs	r2, #1
   83d66:	60a2      	str	r2, [r4, #8]
   83d68:	6021      	str	r1, [r4, #0]
   83d6a:	701d      	strb	r5, [r3, #0]
   83d6c:	6963      	ldr	r3, [r4, #20]
   83d6e:	42b3      	cmp	r3, r6
   83d70:	d01a      	beq.n	83da8 <__swbuf_r+0x7c>
   83d72:	89a3      	ldrh	r3, [r4, #12]
   83d74:	07db      	lsls	r3, r3, #31
   83d76:	d501      	bpl.n	83d7c <__swbuf_r+0x50>
   83d78:	2d0a      	cmp	r5, #10
   83d7a:	d015      	beq.n	83da8 <__swbuf_r+0x7c>
   83d7c:	4628      	mov	r0, r5
   83d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83d82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83d86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83d8a:	6663      	str	r3, [r4, #100]	; 0x64
   83d8c:	6823      	ldr	r3, [r4, #0]
   83d8e:	81a2      	strh	r2, [r4, #12]
   83d90:	6962      	ldr	r2, [r4, #20]
   83d92:	1b9e      	subs	r6, r3, r6
   83d94:	4296      	cmp	r6, r2
   83d96:	dbe2      	blt.n	83d5e <__swbuf_r+0x32>
   83d98:	4638      	mov	r0, r7
   83d9a:	4621      	mov	r1, r4
   83d9c:	f7fe fde4 	bl	82968 <_fflush_r>
   83da0:	b940      	cbnz	r0, 83db4 <__swbuf_r+0x88>
   83da2:	6823      	ldr	r3, [r4, #0]
   83da4:	2601      	movs	r6, #1
   83da6:	e7db      	b.n	83d60 <__swbuf_r+0x34>
   83da8:	4638      	mov	r0, r7
   83daa:	4621      	mov	r1, r4
   83dac:	f7fe fddc 	bl	82968 <_fflush_r>
   83db0:	2800      	cmp	r0, #0
   83db2:	d0e3      	beq.n	83d7c <__swbuf_r+0x50>
   83db4:	f04f 30ff 	mov.w	r0, #4294967295
   83db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83dba:	4638      	mov	r0, r7
   83dbc:	4621      	mov	r1, r4
   83dbe:	f7fe fcbd 	bl	8273c <__swsetup_r>
   83dc2:	2800      	cmp	r0, #0
   83dc4:	d1f6      	bne.n	83db4 <__swbuf_r+0x88>
   83dc6:	89a2      	ldrh	r2, [r4, #12]
   83dc8:	6926      	ldr	r6, [r4, #16]
   83dca:	b293      	uxth	r3, r2
   83dcc:	e7bf      	b.n	83d4e <__swbuf_r+0x22>
   83dce:	f7fe fde7 	bl	829a0 <__sinit>
   83dd2:	e7b3      	b.n	83d3c <__swbuf_r+0x10>

00083dd4 <_wcrtomb_r>:
   83dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83dd8:	461e      	mov	r6, r3
   83dda:	b086      	sub	sp, #24
   83ddc:	460c      	mov	r4, r1
   83dde:	4605      	mov	r5, r0
   83de0:	4617      	mov	r7, r2
   83de2:	4b0f      	ldr	r3, [pc, #60]	; (83e20 <_wcrtomb_r+0x4c>)
   83de4:	b191      	cbz	r1, 83e0c <_wcrtomb_r+0x38>
   83de6:	f8d3 8000 	ldr.w	r8, [r3]
   83dea:	f7ff f999 	bl	83120 <__locale_charset>
   83dee:	9600      	str	r6, [sp, #0]
   83df0:	4603      	mov	r3, r0
   83df2:	4621      	mov	r1, r4
   83df4:	463a      	mov	r2, r7
   83df6:	4628      	mov	r0, r5
   83df8:	47c0      	blx	r8
   83dfa:	1c43      	adds	r3, r0, #1
   83dfc:	d103      	bne.n	83e06 <_wcrtomb_r+0x32>
   83dfe:	2200      	movs	r2, #0
   83e00:	238a      	movs	r3, #138	; 0x8a
   83e02:	6032      	str	r2, [r6, #0]
   83e04:	602b      	str	r3, [r5, #0]
   83e06:	b006      	add	sp, #24
   83e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e0c:	681f      	ldr	r7, [r3, #0]
   83e0e:	f7ff f987 	bl	83120 <__locale_charset>
   83e12:	9600      	str	r6, [sp, #0]
   83e14:	4603      	mov	r3, r0
   83e16:	4622      	mov	r2, r4
   83e18:	4628      	mov	r0, r5
   83e1a:	a903      	add	r1, sp, #12
   83e1c:	47b8      	blx	r7
   83e1e:	e7ec      	b.n	83dfa <_wcrtomb_r+0x26>
   83e20:	200709a0 	.word	0x200709a0

00083e24 <__ascii_wctomb>:
   83e24:	b121      	cbz	r1, 83e30 <__ascii_wctomb+0xc>
   83e26:	2aff      	cmp	r2, #255	; 0xff
   83e28:	d804      	bhi.n	83e34 <__ascii_wctomb+0x10>
   83e2a:	700a      	strb	r2, [r1, #0]
   83e2c:	2001      	movs	r0, #1
   83e2e:	4770      	bx	lr
   83e30:	4608      	mov	r0, r1
   83e32:	4770      	bx	lr
   83e34:	238a      	movs	r3, #138	; 0x8a
   83e36:	6003      	str	r3, [r0, #0]
   83e38:	f04f 30ff 	mov.w	r0, #4294967295
   83e3c:	4770      	bx	lr
   83e3e:	bf00      	nop

00083e40 <_write_r>:
   83e40:	b570      	push	{r4, r5, r6, lr}
   83e42:	4c08      	ldr	r4, [pc, #32]	; (83e64 <_write_r+0x24>)
   83e44:	4606      	mov	r6, r0
   83e46:	2500      	movs	r5, #0
   83e48:	4608      	mov	r0, r1
   83e4a:	4611      	mov	r1, r2
   83e4c:	461a      	mov	r2, r3
   83e4e:	6025      	str	r5, [r4, #0]
   83e50:	f7fc fe6a 	bl	80b28 <_write>
   83e54:	1c43      	adds	r3, r0, #1
   83e56:	d000      	beq.n	83e5a <_write_r+0x1a>
   83e58:	bd70      	pop	{r4, r5, r6, pc}
   83e5a:	6823      	ldr	r3, [r4, #0]
   83e5c:	2b00      	cmp	r3, #0
   83e5e:	d0fb      	beq.n	83e58 <_write_r+0x18>
   83e60:	6033      	str	r3, [r6, #0]
   83e62:	bd70      	pop	{r4, r5, r6, pc}
   83e64:	20070c00 	.word	0x20070c00

00083e68 <__register_exitproc>:
   83e68:	b5f0      	push	{r4, r5, r6, r7, lr}
   83e6a:	4c27      	ldr	r4, [pc, #156]	; (83f08 <__register_exitproc+0xa0>)
   83e6c:	b085      	sub	sp, #20
   83e6e:	6826      	ldr	r6, [r4, #0]
   83e70:	4607      	mov	r7, r0
   83e72:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83e76:	2c00      	cmp	r4, #0
   83e78:	d040      	beq.n	83efc <__register_exitproc+0x94>
   83e7a:	6865      	ldr	r5, [r4, #4]
   83e7c:	2d1f      	cmp	r5, #31
   83e7e:	dd1e      	ble.n	83ebe <__register_exitproc+0x56>
   83e80:	4822      	ldr	r0, [pc, #136]	; (83f0c <__register_exitproc+0xa4>)
   83e82:	b918      	cbnz	r0, 83e8c <__register_exitproc+0x24>
   83e84:	f04f 30ff 	mov.w	r0, #4294967295
   83e88:	b005      	add	sp, #20
   83e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83e8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83e90:	9103      	str	r1, [sp, #12]
   83e92:	9202      	str	r2, [sp, #8]
   83e94:	9301      	str	r3, [sp, #4]
   83e96:	f7ff f9bd 	bl	83214 <malloc>
   83e9a:	9903      	ldr	r1, [sp, #12]
   83e9c:	4604      	mov	r4, r0
   83e9e:	9a02      	ldr	r2, [sp, #8]
   83ea0:	9b01      	ldr	r3, [sp, #4]
   83ea2:	2800      	cmp	r0, #0
   83ea4:	d0ee      	beq.n	83e84 <__register_exitproc+0x1c>
   83ea6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83eaa:	2000      	movs	r0, #0
   83eac:	6025      	str	r5, [r4, #0]
   83eae:	6060      	str	r0, [r4, #4]
   83eb0:	4605      	mov	r5, r0
   83eb2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83eb6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83eba:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83ebe:	b93f      	cbnz	r7, 83ed0 <__register_exitproc+0x68>
   83ec0:	1c6b      	adds	r3, r5, #1
   83ec2:	2000      	movs	r0, #0
   83ec4:	3502      	adds	r5, #2
   83ec6:	6063      	str	r3, [r4, #4]
   83ec8:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83ecc:	b005      	add	sp, #20
   83ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83ed0:	2601      	movs	r6, #1
   83ed2:	40ae      	lsls	r6, r5
   83ed4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83ed8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83edc:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83ee0:	2f02      	cmp	r7, #2
   83ee2:	ea42 0206 	orr.w	r2, r2, r6
   83ee6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83eea:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83eee:	d1e7      	bne.n	83ec0 <__register_exitproc+0x58>
   83ef0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83ef4:	431e      	orrs	r6, r3
   83ef6:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83efa:	e7e1      	b.n	83ec0 <__register_exitproc+0x58>
   83efc:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83f00:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83f04:	e7b9      	b.n	83e7a <__register_exitproc+0x12>
   83f06:	bf00      	nop
   83f08:	0008473c 	.word	0x0008473c
   83f0c:	00083215 	.word	0x00083215

00083f10 <_close_r>:
   83f10:	b538      	push	{r3, r4, r5, lr}
   83f12:	4c07      	ldr	r4, [pc, #28]	; (83f30 <_close_r+0x20>)
   83f14:	2300      	movs	r3, #0
   83f16:	4605      	mov	r5, r0
   83f18:	4608      	mov	r0, r1
   83f1a:	6023      	str	r3, [r4, #0]
   83f1c:	f7fd fb6e 	bl	815fc <_close>
   83f20:	1c43      	adds	r3, r0, #1
   83f22:	d000      	beq.n	83f26 <_close_r+0x16>
   83f24:	bd38      	pop	{r3, r4, r5, pc}
   83f26:	6823      	ldr	r3, [r4, #0]
   83f28:	2b00      	cmp	r3, #0
   83f2a:	d0fb      	beq.n	83f24 <_close_r+0x14>
   83f2c:	602b      	str	r3, [r5, #0]
   83f2e:	bd38      	pop	{r3, r4, r5, pc}
   83f30:	20070c00 	.word	0x20070c00

00083f34 <_fclose_r>:
   83f34:	b570      	push	{r4, r5, r6, lr}
   83f36:	460c      	mov	r4, r1
   83f38:	4605      	mov	r5, r0
   83f3a:	b131      	cbz	r1, 83f4a <_fclose_r+0x16>
   83f3c:	b110      	cbz	r0, 83f44 <_fclose_r+0x10>
   83f3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83f40:	2b00      	cmp	r3, #0
   83f42:	d02f      	beq.n	83fa4 <_fclose_r+0x70>
   83f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83f48:	b90b      	cbnz	r3, 83f4e <_fclose_r+0x1a>
   83f4a:	2000      	movs	r0, #0
   83f4c:	bd70      	pop	{r4, r5, r6, pc}
   83f4e:	4628      	mov	r0, r5
   83f50:	4621      	mov	r1, r4
   83f52:	f7fe fd09 	bl	82968 <_fflush_r>
   83f56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83f58:	4606      	mov	r6, r0
   83f5a:	b133      	cbz	r3, 83f6a <_fclose_r+0x36>
   83f5c:	4628      	mov	r0, r5
   83f5e:	69e1      	ldr	r1, [r4, #28]
   83f60:	4798      	blx	r3
   83f62:	2800      	cmp	r0, #0
   83f64:	bfb8      	it	lt
   83f66:	f04f 36ff 	movlt.w	r6, #4294967295
   83f6a:	89a3      	ldrh	r3, [r4, #12]
   83f6c:	061b      	lsls	r3, r3, #24
   83f6e:	d41c      	bmi.n	83faa <_fclose_r+0x76>
   83f70:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83f72:	b141      	cbz	r1, 83f86 <_fclose_r+0x52>
   83f74:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83f78:	4299      	cmp	r1, r3
   83f7a:	d002      	beq.n	83f82 <_fclose_r+0x4e>
   83f7c:	4628      	mov	r0, r5
   83f7e:	f7fe fe53 	bl	82c28 <_free_r>
   83f82:	2300      	movs	r3, #0
   83f84:	6323      	str	r3, [r4, #48]	; 0x30
   83f86:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83f88:	b121      	cbz	r1, 83f94 <_fclose_r+0x60>
   83f8a:	4628      	mov	r0, r5
   83f8c:	f7fe fe4c 	bl	82c28 <_free_r>
   83f90:	2300      	movs	r3, #0
   83f92:	6463      	str	r3, [r4, #68]	; 0x44
   83f94:	f7fe fd7e 	bl	82a94 <__sfp_lock_acquire>
   83f98:	2300      	movs	r3, #0
   83f9a:	81a3      	strh	r3, [r4, #12]
   83f9c:	f7fe fd7c 	bl	82a98 <__sfp_lock_release>
   83fa0:	4630      	mov	r0, r6
   83fa2:	bd70      	pop	{r4, r5, r6, pc}
   83fa4:	f7fe fcfc 	bl	829a0 <__sinit>
   83fa8:	e7cc      	b.n	83f44 <_fclose_r+0x10>
   83faa:	4628      	mov	r0, r5
   83fac:	6921      	ldr	r1, [r4, #16]
   83fae:	f7fe fe3b 	bl	82c28 <_free_r>
   83fb2:	e7dd      	b.n	83f70 <_fclose_r+0x3c>

00083fb4 <fclose>:
   83fb4:	4b02      	ldr	r3, [pc, #8]	; (83fc0 <fclose+0xc>)
   83fb6:	4601      	mov	r1, r0
   83fb8:	6818      	ldr	r0, [r3, #0]
   83fba:	f7ff bfbb 	b.w	83f34 <_fclose_r>
   83fbe:	bf00      	nop
   83fc0:	20070568 	.word	0x20070568

00083fc4 <_fstat_r>:
   83fc4:	b538      	push	{r3, r4, r5, lr}
   83fc6:	4c08      	ldr	r4, [pc, #32]	; (83fe8 <_fstat_r+0x24>)
   83fc8:	2300      	movs	r3, #0
   83fca:	4605      	mov	r5, r0
   83fcc:	4608      	mov	r0, r1
   83fce:	4611      	mov	r1, r2
   83fd0:	6023      	str	r3, [r4, #0]
   83fd2:	f7fd fb17 	bl	81604 <_fstat>
   83fd6:	1c43      	adds	r3, r0, #1
   83fd8:	d000      	beq.n	83fdc <_fstat_r+0x18>
   83fda:	bd38      	pop	{r3, r4, r5, pc}
   83fdc:	6823      	ldr	r3, [r4, #0]
   83fde:	2b00      	cmp	r3, #0
   83fe0:	d0fb      	beq.n	83fda <_fstat_r+0x16>
   83fe2:	602b      	str	r3, [r5, #0]
   83fe4:	bd38      	pop	{r3, r4, r5, pc}
   83fe6:	bf00      	nop
   83fe8:	20070c00 	.word	0x20070c00

00083fec <_isatty_r>:
   83fec:	b538      	push	{r3, r4, r5, lr}
   83fee:	4c07      	ldr	r4, [pc, #28]	; (8400c <_isatty_r+0x20>)
   83ff0:	2300      	movs	r3, #0
   83ff2:	4605      	mov	r5, r0
   83ff4:	4608      	mov	r0, r1
   83ff6:	6023      	str	r3, [r4, #0]
   83ff8:	f7fd fb0a 	bl	81610 <_isatty>
   83ffc:	1c43      	adds	r3, r0, #1
   83ffe:	d000      	beq.n	84002 <_isatty_r+0x16>
   84000:	bd38      	pop	{r3, r4, r5, pc}
   84002:	6823      	ldr	r3, [r4, #0]
   84004:	2b00      	cmp	r3, #0
   84006:	d0fb      	beq.n	84000 <_isatty_r+0x14>
   84008:	602b      	str	r3, [r5, #0]
   8400a:	bd38      	pop	{r3, r4, r5, pc}
   8400c:	20070c00 	.word	0x20070c00

00084010 <_lseek_r>:
   84010:	b570      	push	{r4, r5, r6, lr}
   84012:	4c08      	ldr	r4, [pc, #32]	; (84034 <_lseek_r+0x24>)
   84014:	4606      	mov	r6, r0
   84016:	2500      	movs	r5, #0
   84018:	4608      	mov	r0, r1
   8401a:	4611      	mov	r1, r2
   8401c:	461a      	mov	r2, r3
   8401e:	6025      	str	r5, [r4, #0]
   84020:	f7fd faf8 	bl	81614 <_lseek>
   84024:	1c43      	adds	r3, r0, #1
   84026:	d000      	beq.n	8402a <_lseek_r+0x1a>
   84028:	bd70      	pop	{r4, r5, r6, pc}
   8402a:	6823      	ldr	r3, [r4, #0]
   8402c:	2b00      	cmp	r3, #0
   8402e:	d0fb      	beq.n	84028 <_lseek_r+0x18>
   84030:	6033      	str	r3, [r6, #0]
   84032:	bd70      	pop	{r4, r5, r6, pc}
   84034:	20070c00 	.word	0x20070c00

00084038 <_read_r>:
   84038:	b570      	push	{r4, r5, r6, lr}
   8403a:	4c08      	ldr	r4, [pc, #32]	; (8405c <_read_r+0x24>)
   8403c:	4606      	mov	r6, r0
   8403e:	2500      	movs	r5, #0
   84040:	4608      	mov	r0, r1
   84042:	4611      	mov	r1, r2
   84044:	461a      	mov	r2, r3
   84046:	6025      	str	r5, [r4, #0]
   84048:	f7fc f90e 	bl	80268 <_read>
   8404c:	1c43      	adds	r3, r0, #1
   8404e:	d000      	beq.n	84052 <_read_r+0x1a>
   84050:	bd70      	pop	{r4, r5, r6, pc}
   84052:	6823      	ldr	r3, [r4, #0]
   84054:	2b00      	cmp	r3, #0
   84056:	d0fb      	beq.n	84050 <_read_r+0x18>
   84058:	6033      	str	r3, [r6, #0]
   8405a:	bd70      	pop	{r4, r5, r6, pc}
   8405c:	20070c00 	.word	0x20070c00

00084060 <__aeabi_uldivmod>:
   84060:	b94b      	cbnz	r3, 84076 <__aeabi_uldivmod+0x16>
   84062:	b942      	cbnz	r2, 84076 <__aeabi_uldivmod+0x16>
   84064:	2900      	cmp	r1, #0
   84066:	bf08      	it	eq
   84068:	2800      	cmpeq	r0, #0
   8406a:	d002      	beq.n	84072 <__aeabi_uldivmod+0x12>
   8406c:	f04f 31ff 	mov.w	r1, #4294967295
   84070:	4608      	mov	r0, r1
   84072:	f000 b83b 	b.w	840ec <__aeabi_idiv0>
   84076:	b082      	sub	sp, #8
   84078:	46ec      	mov	ip, sp
   8407a:	e92d 5000 	stmdb	sp!, {ip, lr}
   8407e:	f000 f81d 	bl	840bc <__gnu_uldivmod_helper>
   84082:	f8dd e004 	ldr.w	lr, [sp, #4]
   84086:	b002      	add	sp, #8
   84088:	bc0c      	pop	{r2, r3}
   8408a:	4770      	bx	lr

0008408c <__gnu_ldivmod_helper>:
   8408c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84090:	9e08      	ldr	r6, [sp, #32]
   84092:	4614      	mov	r4, r2
   84094:	461d      	mov	r5, r3
   84096:	4680      	mov	r8, r0
   84098:	4689      	mov	r9, r1
   8409a:	f000 f829 	bl	840f0 <__divdi3>
   8409e:	fb04 f301 	mul.w	r3, r4, r1
   840a2:	fba4 ab00 	umull	sl, fp, r4, r0
   840a6:	fb00 3205 	mla	r2, r0, r5, r3
   840aa:	4493      	add	fp, r2
   840ac:	ebb8 080a 	subs.w	r8, r8, sl
   840b0:	eb69 090b 	sbc.w	r9, r9, fp
   840b4:	e9c6 8900 	strd	r8, r9, [r6]
   840b8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000840bc <__gnu_uldivmod_helper>:
   840bc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   840c0:	9e08      	ldr	r6, [sp, #32]
   840c2:	4614      	mov	r4, r2
   840c4:	461d      	mov	r5, r3
   840c6:	4680      	mov	r8, r0
   840c8:	4689      	mov	r9, r1
   840ca:	f000 f961 	bl	84390 <__udivdi3>
   840ce:	fb00 f505 	mul.w	r5, r0, r5
   840d2:	fba0 ab04 	umull	sl, fp, r0, r4
   840d6:	fb04 5401 	mla	r4, r4, r1, r5
   840da:	44a3      	add	fp, r4
   840dc:	ebb8 080a 	subs.w	r8, r8, sl
   840e0:	eb69 090b 	sbc.w	r9, r9, fp
   840e4:	e9c6 8900 	strd	r8, r9, [r6]
   840e8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000840ec <__aeabi_idiv0>:
   840ec:	4770      	bx	lr
   840ee:	bf00      	nop

000840f0 <__divdi3>:
   840f0:	2900      	cmp	r1, #0
   840f2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   840f6:	f2c0 80a1 	blt.w	8423c <__divdi3+0x14c>
   840fa:	2400      	movs	r4, #0
   840fc:	2b00      	cmp	r3, #0
   840fe:	f2c0 8098 	blt.w	84232 <__divdi3+0x142>
   84102:	4615      	mov	r5, r2
   84104:	4606      	mov	r6, r0
   84106:	460f      	mov	r7, r1
   84108:	2b00      	cmp	r3, #0
   8410a:	d13f      	bne.n	8418c <__divdi3+0x9c>
   8410c:	428a      	cmp	r2, r1
   8410e:	d958      	bls.n	841c2 <__divdi3+0xd2>
   84110:	fab2 f382 	clz	r3, r2
   84114:	b14b      	cbz	r3, 8412a <__divdi3+0x3a>
   84116:	f1c3 0220 	rsb	r2, r3, #32
   8411a:	fa01 f703 	lsl.w	r7, r1, r3
   8411e:	fa20 f202 	lsr.w	r2, r0, r2
   84122:	409d      	lsls	r5, r3
   84124:	fa00 f603 	lsl.w	r6, r0, r3
   84128:	4317      	orrs	r7, r2
   8412a:	0c29      	lsrs	r1, r5, #16
   8412c:	fbb7 f2f1 	udiv	r2, r7, r1
   84130:	fb01 7712 	mls	r7, r1, r2, r7
   84134:	b2a8      	uxth	r0, r5
   84136:	fb00 f302 	mul.w	r3, r0, r2
   8413a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8413e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   84142:	42bb      	cmp	r3, r7
   84144:	d909      	bls.n	8415a <__divdi3+0x6a>
   84146:	197f      	adds	r7, r7, r5
   84148:	f102 3cff 	add.w	ip, r2, #4294967295
   8414c:	f080 8105 	bcs.w	8435a <__divdi3+0x26a>
   84150:	42bb      	cmp	r3, r7
   84152:	f240 8102 	bls.w	8435a <__divdi3+0x26a>
   84156:	3a02      	subs	r2, #2
   84158:	442f      	add	r7, r5
   8415a:	1aff      	subs	r7, r7, r3
   8415c:	fbb7 f3f1 	udiv	r3, r7, r1
   84160:	fb01 7113 	mls	r1, r1, r3, r7
   84164:	fb00 f003 	mul.w	r0, r0, r3
   84168:	b2b6      	uxth	r6, r6
   8416a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   8416e:	4288      	cmp	r0, r1
   84170:	d908      	bls.n	84184 <__divdi3+0x94>
   84172:	1949      	adds	r1, r1, r5
   84174:	f103 37ff 	add.w	r7, r3, #4294967295
   84178:	f080 80f1 	bcs.w	8435e <__divdi3+0x26e>
   8417c:	4288      	cmp	r0, r1
   8417e:	f240 80ee 	bls.w	8435e <__divdi3+0x26e>
   84182:	3b02      	subs	r3, #2
   84184:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84188:	2300      	movs	r3, #0
   8418a:	e003      	b.n	84194 <__divdi3+0xa4>
   8418c:	428b      	cmp	r3, r1
   8418e:	d90a      	bls.n	841a6 <__divdi3+0xb6>
   84190:	2300      	movs	r3, #0
   84192:	461a      	mov	r2, r3
   84194:	4610      	mov	r0, r2
   84196:	4619      	mov	r1, r3
   84198:	b114      	cbz	r4, 841a0 <__divdi3+0xb0>
   8419a:	4240      	negs	r0, r0
   8419c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   841a0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   841a4:	4770      	bx	lr
   841a6:	fab3 f883 	clz	r8, r3
   841aa:	f1b8 0f00 	cmp.w	r8, #0
   841ae:	f040 8088 	bne.w	842c2 <__divdi3+0x1d2>
   841b2:	428b      	cmp	r3, r1
   841b4:	d302      	bcc.n	841bc <__divdi3+0xcc>
   841b6:	4282      	cmp	r2, r0
   841b8:	f200 80e2 	bhi.w	84380 <__divdi3+0x290>
   841bc:	2300      	movs	r3, #0
   841be:	2201      	movs	r2, #1
   841c0:	e7e8      	b.n	84194 <__divdi3+0xa4>
   841c2:	b912      	cbnz	r2, 841ca <__divdi3+0xda>
   841c4:	2301      	movs	r3, #1
   841c6:	fbb3 f5f2 	udiv	r5, r3, r2
   841ca:	fab5 f285 	clz	r2, r5
   841ce:	2a00      	cmp	r2, #0
   841d0:	d13a      	bne.n	84248 <__divdi3+0x158>
   841d2:	1b7f      	subs	r7, r7, r5
   841d4:	0c28      	lsrs	r0, r5, #16
   841d6:	fa1f fc85 	uxth.w	ip, r5
   841da:	2301      	movs	r3, #1
   841dc:	fbb7 f1f0 	udiv	r1, r7, r0
   841e0:	fb00 7711 	mls	r7, r0, r1, r7
   841e4:	fb0c f201 	mul.w	r2, ip, r1
   841e8:	ea4f 4816 	mov.w	r8, r6, lsr #16
   841ec:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   841f0:	42ba      	cmp	r2, r7
   841f2:	d907      	bls.n	84204 <__divdi3+0x114>
   841f4:	197f      	adds	r7, r7, r5
   841f6:	f101 38ff 	add.w	r8, r1, #4294967295
   841fa:	d202      	bcs.n	84202 <__divdi3+0x112>
   841fc:	42ba      	cmp	r2, r7
   841fe:	f200 80c4 	bhi.w	8438a <__divdi3+0x29a>
   84202:	4641      	mov	r1, r8
   84204:	1abf      	subs	r7, r7, r2
   84206:	fbb7 f2f0 	udiv	r2, r7, r0
   8420a:	fb00 7012 	mls	r0, r0, r2, r7
   8420e:	fb0c fc02 	mul.w	ip, ip, r2
   84212:	b2b6      	uxth	r6, r6
   84214:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   84218:	4584      	cmp	ip, r0
   8421a:	d907      	bls.n	8422c <__divdi3+0x13c>
   8421c:	1940      	adds	r0, r0, r5
   8421e:	f102 37ff 	add.w	r7, r2, #4294967295
   84222:	d202      	bcs.n	8422a <__divdi3+0x13a>
   84224:	4584      	cmp	ip, r0
   84226:	f200 80ae 	bhi.w	84386 <__divdi3+0x296>
   8422a:	463a      	mov	r2, r7
   8422c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   84230:	e7b0      	b.n	84194 <__divdi3+0xa4>
   84232:	43e4      	mvns	r4, r4
   84234:	4252      	negs	r2, r2
   84236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8423a:	e762      	b.n	84102 <__divdi3+0x12>
   8423c:	4240      	negs	r0, r0
   8423e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84242:	f04f 34ff 	mov.w	r4, #4294967295
   84246:	e759      	b.n	840fc <__divdi3+0xc>
   84248:	4095      	lsls	r5, r2
   8424a:	f1c2 0920 	rsb	r9, r2, #32
   8424e:	fa27 f109 	lsr.w	r1, r7, r9
   84252:	fa26 f909 	lsr.w	r9, r6, r9
   84256:	4097      	lsls	r7, r2
   84258:	0c28      	lsrs	r0, r5, #16
   8425a:	fbb1 f8f0 	udiv	r8, r1, r0
   8425e:	fb00 1118 	mls	r1, r0, r8, r1
   84262:	fa1f fc85 	uxth.w	ip, r5
   84266:	fb0c f308 	mul.w	r3, ip, r8
   8426a:	ea49 0907 	orr.w	r9, r9, r7
   8426e:	ea4f 4719 	mov.w	r7, r9, lsr #16
   84272:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   84276:	428b      	cmp	r3, r1
   84278:	fa06 f602 	lsl.w	r6, r6, r2
   8427c:	d908      	bls.n	84290 <__divdi3+0x1a0>
   8427e:	1949      	adds	r1, r1, r5
   84280:	f108 32ff 	add.w	r2, r8, #4294967295
   84284:	d27a      	bcs.n	8437c <__divdi3+0x28c>
   84286:	428b      	cmp	r3, r1
   84288:	d978      	bls.n	8437c <__divdi3+0x28c>
   8428a:	f1a8 0802 	sub.w	r8, r8, #2
   8428e:	4429      	add	r1, r5
   84290:	1ac9      	subs	r1, r1, r3
   84292:	fbb1 f3f0 	udiv	r3, r1, r0
   84296:	fb00 1713 	mls	r7, r0, r3, r1
   8429a:	fb0c f203 	mul.w	r2, ip, r3
   8429e:	fa1f f989 	uxth.w	r9, r9
   842a2:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   842a6:	42ba      	cmp	r2, r7
   842a8:	d907      	bls.n	842ba <__divdi3+0x1ca>
   842aa:	197f      	adds	r7, r7, r5
   842ac:	f103 31ff 	add.w	r1, r3, #4294967295
   842b0:	d260      	bcs.n	84374 <__divdi3+0x284>
   842b2:	42ba      	cmp	r2, r7
   842b4:	d95e      	bls.n	84374 <__divdi3+0x284>
   842b6:	3b02      	subs	r3, #2
   842b8:	442f      	add	r7, r5
   842ba:	1abf      	subs	r7, r7, r2
   842bc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   842c0:	e78c      	b.n	841dc <__divdi3+0xec>
   842c2:	f1c8 0220 	rsb	r2, r8, #32
   842c6:	fa25 f102 	lsr.w	r1, r5, r2
   842ca:	fa03 fc08 	lsl.w	ip, r3, r8
   842ce:	fa27 f302 	lsr.w	r3, r7, r2
   842d2:	fa20 f202 	lsr.w	r2, r0, r2
   842d6:	fa07 f708 	lsl.w	r7, r7, r8
   842da:	ea41 0c0c 	orr.w	ip, r1, ip
   842de:	ea4f 491c 	mov.w	r9, ip, lsr #16
   842e2:	fbb3 f1f9 	udiv	r1, r3, r9
   842e6:	fb09 3311 	mls	r3, r9, r1, r3
   842ea:	fa1f fa8c 	uxth.w	sl, ip
   842ee:	fb0a fb01 	mul.w	fp, sl, r1
   842f2:	4317      	orrs	r7, r2
   842f4:	0c3a      	lsrs	r2, r7, #16
   842f6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   842fa:	459b      	cmp	fp, r3
   842fc:	fa05 f008 	lsl.w	r0, r5, r8
   84300:	d908      	bls.n	84314 <__divdi3+0x224>
   84302:	eb13 030c 	adds.w	r3, r3, ip
   84306:	f101 32ff 	add.w	r2, r1, #4294967295
   8430a:	d235      	bcs.n	84378 <__divdi3+0x288>
   8430c:	459b      	cmp	fp, r3
   8430e:	d933      	bls.n	84378 <__divdi3+0x288>
   84310:	3902      	subs	r1, #2
   84312:	4463      	add	r3, ip
   84314:	ebcb 0303 	rsb	r3, fp, r3
   84318:	fbb3 f2f9 	udiv	r2, r3, r9
   8431c:	fb09 3312 	mls	r3, r9, r2, r3
   84320:	fb0a fa02 	mul.w	sl, sl, r2
   84324:	b2bf      	uxth	r7, r7
   84326:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   8432a:	45ba      	cmp	sl, r7
   8432c:	d908      	bls.n	84340 <__divdi3+0x250>
   8432e:	eb17 070c 	adds.w	r7, r7, ip
   84332:	f102 33ff 	add.w	r3, r2, #4294967295
   84336:	d21b      	bcs.n	84370 <__divdi3+0x280>
   84338:	45ba      	cmp	sl, r7
   8433a:	d919      	bls.n	84370 <__divdi3+0x280>
   8433c:	3a02      	subs	r2, #2
   8433e:	4467      	add	r7, ip
   84340:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   84344:	fba5 0100 	umull	r0, r1, r5, r0
   84348:	ebca 0707 	rsb	r7, sl, r7
   8434c:	428f      	cmp	r7, r1
   8434e:	f04f 0300 	mov.w	r3, #0
   84352:	d30a      	bcc.n	8436a <__divdi3+0x27a>
   84354:	d005      	beq.n	84362 <__divdi3+0x272>
   84356:	462a      	mov	r2, r5
   84358:	e71c      	b.n	84194 <__divdi3+0xa4>
   8435a:	4662      	mov	r2, ip
   8435c:	e6fd      	b.n	8415a <__divdi3+0x6a>
   8435e:	463b      	mov	r3, r7
   84360:	e710      	b.n	84184 <__divdi3+0x94>
   84362:	fa06 f608 	lsl.w	r6, r6, r8
   84366:	4286      	cmp	r6, r0
   84368:	d2f5      	bcs.n	84356 <__divdi3+0x266>
   8436a:	1e6a      	subs	r2, r5, #1
   8436c:	2300      	movs	r3, #0
   8436e:	e711      	b.n	84194 <__divdi3+0xa4>
   84370:	461a      	mov	r2, r3
   84372:	e7e5      	b.n	84340 <__divdi3+0x250>
   84374:	460b      	mov	r3, r1
   84376:	e7a0      	b.n	842ba <__divdi3+0x1ca>
   84378:	4611      	mov	r1, r2
   8437a:	e7cb      	b.n	84314 <__divdi3+0x224>
   8437c:	4690      	mov	r8, r2
   8437e:	e787      	b.n	84290 <__divdi3+0x1a0>
   84380:	4643      	mov	r3, r8
   84382:	4642      	mov	r2, r8
   84384:	e706      	b.n	84194 <__divdi3+0xa4>
   84386:	3a02      	subs	r2, #2
   84388:	e750      	b.n	8422c <__divdi3+0x13c>
   8438a:	3902      	subs	r1, #2
   8438c:	442f      	add	r7, r5
   8438e:	e739      	b.n	84204 <__divdi3+0x114>

00084390 <__udivdi3>:
   84390:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84394:	4614      	mov	r4, r2
   84396:	4605      	mov	r5, r0
   84398:	460e      	mov	r6, r1
   8439a:	2b00      	cmp	r3, #0
   8439c:	d143      	bne.n	84426 <__udivdi3+0x96>
   8439e:	428a      	cmp	r2, r1
   843a0:	d953      	bls.n	8444a <__udivdi3+0xba>
   843a2:	fab2 f782 	clz	r7, r2
   843a6:	b157      	cbz	r7, 843be <__udivdi3+0x2e>
   843a8:	f1c7 0620 	rsb	r6, r7, #32
   843ac:	fa20 f606 	lsr.w	r6, r0, r6
   843b0:	fa01 f307 	lsl.w	r3, r1, r7
   843b4:	fa02 f407 	lsl.w	r4, r2, r7
   843b8:	fa00 f507 	lsl.w	r5, r0, r7
   843bc:	431e      	orrs	r6, r3
   843be:	0c21      	lsrs	r1, r4, #16
   843c0:	fbb6 f2f1 	udiv	r2, r6, r1
   843c4:	fb01 6612 	mls	r6, r1, r2, r6
   843c8:	b2a0      	uxth	r0, r4
   843ca:	fb00 f302 	mul.w	r3, r0, r2
   843ce:	0c2f      	lsrs	r7, r5, #16
   843d0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   843d4:	42b3      	cmp	r3, r6
   843d6:	d909      	bls.n	843ec <__udivdi3+0x5c>
   843d8:	1936      	adds	r6, r6, r4
   843da:	f102 37ff 	add.w	r7, r2, #4294967295
   843de:	f080 80fd 	bcs.w	845dc <__udivdi3+0x24c>
   843e2:	42b3      	cmp	r3, r6
   843e4:	f240 80fa 	bls.w	845dc <__udivdi3+0x24c>
   843e8:	3a02      	subs	r2, #2
   843ea:	4426      	add	r6, r4
   843ec:	1af6      	subs	r6, r6, r3
   843ee:	fbb6 f3f1 	udiv	r3, r6, r1
   843f2:	fb01 6113 	mls	r1, r1, r3, r6
   843f6:	fb00 f003 	mul.w	r0, r0, r3
   843fa:	b2ad      	uxth	r5, r5
   843fc:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   84400:	4288      	cmp	r0, r1
   84402:	d908      	bls.n	84416 <__udivdi3+0x86>
   84404:	1909      	adds	r1, r1, r4
   84406:	f103 36ff 	add.w	r6, r3, #4294967295
   8440a:	f080 80e9 	bcs.w	845e0 <__udivdi3+0x250>
   8440e:	4288      	cmp	r0, r1
   84410:	f240 80e6 	bls.w	845e0 <__udivdi3+0x250>
   84414:	3b02      	subs	r3, #2
   84416:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8441a:	2300      	movs	r3, #0
   8441c:	4610      	mov	r0, r2
   8441e:	4619      	mov	r1, r3
   84420:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84424:	4770      	bx	lr
   84426:	428b      	cmp	r3, r1
   84428:	d84c      	bhi.n	844c4 <__udivdi3+0x134>
   8442a:	fab3 f683 	clz	r6, r3
   8442e:	2e00      	cmp	r6, #0
   84430:	d14f      	bne.n	844d2 <__udivdi3+0x142>
   84432:	428b      	cmp	r3, r1
   84434:	d302      	bcc.n	8443c <__udivdi3+0xac>
   84436:	4282      	cmp	r2, r0
   84438:	f200 80dd 	bhi.w	845f6 <__udivdi3+0x266>
   8443c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84440:	2300      	movs	r3, #0
   84442:	2201      	movs	r2, #1
   84444:	4610      	mov	r0, r2
   84446:	4619      	mov	r1, r3
   84448:	4770      	bx	lr
   8444a:	b912      	cbnz	r2, 84452 <__udivdi3+0xc2>
   8444c:	2401      	movs	r4, #1
   8444e:	fbb4 f4f2 	udiv	r4, r4, r2
   84452:	fab4 f284 	clz	r2, r4
   84456:	2a00      	cmp	r2, #0
   84458:	f040 8082 	bne.w	84560 <__udivdi3+0x1d0>
   8445c:	1b09      	subs	r1, r1, r4
   8445e:	0c26      	lsrs	r6, r4, #16
   84460:	b2a7      	uxth	r7, r4
   84462:	2301      	movs	r3, #1
   84464:	fbb1 f0f6 	udiv	r0, r1, r6
   84468:	fb06 1110 	mls	r1, r6, r0, r1
   8446c:	fb07 f200 	mul.w	r2, r7, r0
   84470:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84474:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   84478:	428a      	cmp	r2, r1
   8447a:	d907      	bls.n	8448c <__udivdi3+0xfc>
   8447c:	1909      	adds	r1, r1, r4
   8447e:	f100 3cff 	add.w	ip, r0, #4294967295
   84482:	d202      	bcs.n	8448a <__udivdi3+0xfa>
   84484:	428a      	cmp	r2, r1
   84486:	f200 80c8 	bhi.w	8461a <__udivdi3+0x28a>
   8448a:	4660      	mov	r0, ip
   8448c:	1a89      	subs	r1, r1, r2
   8448e:	fbb1 f2f6 	udiv	r2, r1, r6
   84492:	fb06 1112 	mls	r1, r6, r2, r1
   84496:	fb07 f702 	mul.w	r7, r7, r2
   8449a:	b2ad      	uxth	r5, r5
   8449c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   844a0:	42af      	cmp	r7, r5
   844a2:	d908      	bls.n	844b6 <__udivdi3+0x126>
   844a4:	192c      	adds	r4, r5, r4
   844a6:	f102 31ff 	add.w	r1, r2, #4294967295
   844aa:	f080 809b 	bcs.w	845e4 <__udivdi3+0x254>
   844ae:	42a7      	cmp	r7, r4
   844b0:	f240 8098 	bls.w	845e4 <__udivdi3+0x254>
   844b4:	3a02      	subs	r2, #2
   844b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   844ba:	4610      	mov	r0, r2
   844bc:	4619      	mov	r1, r3
   844be:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   844c2:	4770      	bx	lr
   844c4:	2300      	movs	r3, #0
   844c6:	461a      	mov	r2, r3
   844c8:	4610      	mov	r0, r2
   844ca:	4619      	mov	r1, r3
   844cc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   844d0:	4770      	bx	lr
   844d2:	f1c6 0520 	rsb	r5, r6, #32
   844d6:	fa22 f705 	lsr.w	r7, r2, r5
   844da:	fa03 f406 	lsl.w	r4, r3, r6
   844de:	fa21 f305 	lsr.w	r3, r1, r5
   844e2:	fa01 fb06 	lsl.w	fp, r1, r6
   844e6:	fa20 f505 	lsr.w	r5, r0, r5
   844ea:	433c      	orrs	r4, r7
   844ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
   844f0:	fbb3 fcf8 	udiv	ip, r3, r8
   844f4:	fb08 331c 	mls	r3, r8, ip, r3
   844f8:	fa1f f984 	uxth.w	r9, r4
   844fc:	fb09 fa0c 	mul.w	sl, r9, ip
   84500:	ea45 0b0b 	orr.w	fp, r5, fp
   84504:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84508:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8450c:	459a      	cmp	sl, r3
   8450e:	fa02 f206 	lsl.w	r2, r2, r6
   84512:	d904      	bls.n	8451e <__udivdi3+0x18e>
   84514:	191b      	adds	r3, r3, r4
   84516:	f10c 35ff 	add.w	r5, ip, #4294967295
   8451a:	d36f      	bcc.n	845fc <__udivdi3+0x26c>
   8451c:	46ac      	mov	ip, r5
   8451e:	ebca 0303 	rsb	r3, sl, r3
   84522:	fbb3 f5f8 	udiv	r5, r3, r8
   84526:	fb08 3315 	mls	r3, r8, r5, r3
   8452a:	fb09 f905 	mul.w	r9, r9, r5
   8452e:	fa1f fb8b 	uxth.w	fp, fp
   84532:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   84536:	45b9      	cmp	r9, r7
   84538:	d904      	bls.n	84544 <__udivdi3+0x1b4>
   8453a:	193f      	adds	r7, r7, r4
   8453c:	f105 33ff 	add.w	r3, r5, #4294967295
   84540:	d362      	bcc.n	84608 <__udivdi3+0x278>
   84542:	461d      	mov	r5, r3
   84544:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   84548:	fbac 2302 	umull	r2, r3, ip, r2
   8454c:	ebc9 0707 	rsb	r7, r9, r7
   84550:	429f      	cmp	r7, r3
   84552:	f04f 0500 	mov.w	r5, #0
   84556:	d34a      	bcc.n	845ee <__udivdi3+0x25e>
   84558:	d046      	beq.n	845e8 <__udivdi3+0x258>
   8455a:	4662      	mov	r2, ip
   8455c:	462b      	mov	r3, r5
   8455e:	e75d      	b.n	8441c <__udivdi3+0x8c>
   84560:	4094      	lsls	r4, r2
   84562:	f1c2 0920 	rsb	r9, r2, #32
   84566:	fa21 fc09 	lsr.w	ip, r1, r9
   8456a:	4091      	lsls	r1, r2
   8456c:	fa20 f909 	lsr.w	r9, r0, r9
   84570:	0c26      	lsrs	r6, r4, #16
   84572:	fbbc f8f6 	udiv	r8, ip, r6
   84576:	fb06 cc18 	mls	ip, r6, r8, ip
   8457a:	b2a7      	uxth	r7, r4
   8457c:	fb07 f308 	mul.w	r3, r7, r8
   84580:	ea49 0901 	orr.w	r9, r9, r1
   84584:	ea4f 4119 	mov.w	r1, r9, lsr #16
   84588:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   8458c:	4563      	cmp	r3, ip
   8458e:	fa00 f502 	lsl.w	r5, r0, r2
   84592:	d909      	bls.n	845a8 <__udivdi3+0x218>
   84594:	eb1c 0c04 	adds.w	ip, ip, r4
   84598:	f108 32ff 	add.w	r2, r8, #4294967295
   8459c:	d23b      	bcs.n	84616 <__udivdi3+0x286>
   8459e:	4563      	cmp	r3, ip
   845a0:	d939      	bls.n	84616 <__udivdi3+0x286>
   845a2:	f1a8 0802 	sub.w	r8, r8, #2
   845a6:	44a4      	add	ip, r4
   845a8:	ebc3 0c0c 	rsb	ip, r3, ip
   845ac:	fbbc f3f6 	udiv	r3, ip, r6
   845b0:	fb06 c113 	mls	r1, r6, r3, ip
   845b4:	fb07 f203 	mul.w	r2, r7, r3
   845b8:	fa1f f989 	uxth.w	r9, r9
   845bc:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   845c0:	428a      	cmp	r2, r1
   845c2:	d907      	bls.n	845d4 <__udivdi3+0x244>
   845c4:	1909      	adds	r1, r1, r4
   845c6:	f103 30ff 	add.w	r0, r3, #4294967295
   845ca:	d222      	bcs.n	84612 <__udivdi3+0x282>
   845cc:	428a      	cmp	r2, r1
   845ce:	d920      	bls.n	84612 <__udivdi3+0x282>
   845d0:	3b02      	subs	r3, #2
   845d2:	4421      	add	r1, r4
   845d4:	1a89      	subs	r1, r1, r2
   845d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   845da:	e743      	b.n	84464 <__udivdi3+0xd4>
   845dc:	463a      	mov	r2, r7
   845de:	e705      	b.n	843ec <__udivdi3+0x5c>
   845e0:	4633      	mov	r3, r6
   845e2:	e718      	b.n	84416 <__udivdi3+0x86>
   845e4:	460a      	mov	r2, r1
   845e6:	e766      	b.n	844b6 <__udivdi3+0x126>
   845e8:	40b0      	lsls	r0, r6
   845ea:	4290      	cmp	r0, r2
   845ec:	d2b5      	bcs.n	8455a <__udivdi3+0x1ca>
   845ee:	f10c 32ff 	add.w	r2, ip, #4294967295
   845f2:	2300      	movs	r3, #0
   845f4:	e712      	b.n	8441c <__udivdi3+0x8c>
   845f6:	4633      	mov	r3, r6
   845f8:	4632      	mov	r2, r6
   845fa:	e70f      	b.n	8441c <__udivdi3+0x8c>
   845fc:	459a      	cmp	sl, r3
   845fe:	d98d      	bls.n	8451c <__udivdi3+0x18c>
   84600:	f1ac 0c02 	sub.w	ip, ip, #2
   84604:	4423      	add	r3, r4
   84606:	e78a      	b.n	8451e <__udivdi3+0x18e>
   84608:	45b9      	cmp	r9, r7
   8460a:	d99a      	bls.n	84542 <__udivdi3+0x1b2>
   8460c:	3d02      	subs	r5, #2
   8460e:	4427      	add	r7, r4
   84610:	e798      	b.n	84544 <__udivdi3+0x1b4>
   84612:	4603      	mov	r3, r0
   84614:	e7de      	b.n	845d4 <__udivdi3+0x244>
   84616:	4690      	mov	r8, r2
   84618:	e7c6      	b.n	845a8 <__udivdi3+0x218>
   8461a:	3802      	subs	r0, #2
   8461c:	4421      	add	r1, r4
   8461e:	e735      	b.n	8448c <__udivdi3+0xfc>
   84620:	206d7241 	.word	0x206d7241
   84624:	74696e69 	.word	0x74696e69
   84628:	696c6169 	.word	0x696c6169
   8462c:	3f64657a 	.word	0x3f64657a
   84630:	00000a0d 	.word	0x00000a0d
   84634:	6b636950 	.word	0x6b636950
   84638:	20707520 	.word	0x20707520
   8463c:	74617473 	.word	0x74617473
   84640:	203a7375 	.word	0x203a7375
   84644:	0a0d6425 	.word	0x0a0d6425
   84648:	00000000 	.word	0x00000000
   8464c:	69736f50 	.word	0x69736f50
   84650:	6e6f6974 	.word	0x6e6f6974
   84654:	726f6620 	.word	0x726f6620
   84658:	636f7320 	.word	0x636f7320
   8465c:	25203a6b 	.word	0x25203a6b
   84660:	25202c64 	.word	0x25202c64
   84664:	000a0d64 	.word	0x000a0d64
   84668:	69736f50 	.word	0x69736f50
   8466c:	6e6f6974 	.word	0x6e6f6974
   84670:	726f6620 	.word	0x726f6620
   84674:	62756320 	.word	0x62756320
   84678:	25203a65 	.word	0x25203a65
   8467c:	25202c64 	.word	0x25202c64
   84680:	000a0d64 	.word	0x000a0d64
   84684:	69736f50 	.word	0x69736f50
   84688:	6e6f6974 	.word	0x6e6f6974
   8468c:	726f6620 	.word	0x726f6620
   84690:	616c6720 	.word	0x616c6720
   84694:	203a7373 	.word	0x203a7373
   84698:	202c6425 	.word	0x202c6425
   8469c:	0a0d6425 	.word	0x0a0d6425
   846a0:	00000000 	.word	0x00000000
   846a4:	00000001 	.word	0x00000001
   846a8:	00000002 	.word	0x00000002
   846ac:	00000004 	.word	0x00000004
   846b0:	00000008 	.word	0x00000008
   846b4:	00000010 	.word	0x00000010
   846b8:	00000020 	.word	0x00000020
   846bc:	00000040 	.word	0x00000040
   846c0:	00000080 	.word	0x00000080
   846c4:	00000100 	.word	0x00000100
   846c8:	00000200 	.word	0x00000200
   846cc:	00000400 	.word	0x00000400
   846d0:	7473614d 	.word	0x7473614d
   846d4:	69207265 	.word	0x69207265
   846d8:	6974696e 	.word	0x6974696e
   846dc:	7a696c61 	.word	0x7a696c61
   846e0:	0a0d6465 	.word	0x0a0d6465
   846e4:	00000000 	.word	0x00000000
   846e8:	646e6553 	.word	0x646e6553
   846ec:	3a676e69 	.word	0x3a676e69
   846f0:	2c642520 	.word	0x2c642520
   846f4:	2c642520 	.word	0x2c642520
   846f8:	0d642520 	.word	0x0d642520
   846fc:	0000000a 	.word	0x0000000a
   84700:	69736f50 	.word	0x69736f50
   84704:	6e6f6974 	.word	0x6e6f6974
   84708:	31782820 	.word	0x31782820
   8470c:	3179202c 	.word	0x3179202c
   84710:	25203a29 	.word	0x25203a29
   84714:	25202c64 	.word	0x25202c64
   84718:	000a0d64 	.word	0x000a0d64
   8471c:	69736f50 	.word	0x69736f50
   84720:	6e6f6974 	.word	0x6e6f6974
   84724:	32782820 	.word	0x32782820
   84728:	3279202c 	.word	0x3279202c
   8472c:	25203a29 	.word	0x25203a29
   84730:	25202c64 	.word	0x25202c64
   84734:	000a0d64 	.word	0x000a0d64
   84738:	00000043 	.word	0x00000043

0008473c <_global_impure_ptr>:
   8473c:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   8474c:	46454443 00000000 33323130 37363534     CDEF....01234567
   8475c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8476c:	0000296c                                l)..

00084770 <zeroes.6721>:
   84770:	30303030 30303030 30303030 30303030     0000000000000000

00084780 <blanks.6720>:
   84780:	20202020 20202020 20202020 20202020                     

00084790 <_init>:
   84790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84792:	bf00      	nop
   84794:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84796:	bc08      	pop	{r3}
   84798:	469e      	mov	lr, r3
   8479a:	4770      	bx	lr

0008479c <__init_array_start>:
   8479c:	00082801 	.word	0x00082801

000847a0 <__frame_dummy_init_array_entry>:
   847a0:	00080119                                ....

000847a4 <_fini>:
   847a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   847a6:	bf00      	nop
   847a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   847aa:	bc08      	pop	{r3}
   847ac:	469e      	mov	lr, r3
   847ae:	4770      	bx	lr

000847b0 <__fini_array_start>:
   847b0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <xNextTaskUnblockTime>:
20070138:	0000ffff                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00084738 00000000 00000000 00000000     8G..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00083e25                                %>..
