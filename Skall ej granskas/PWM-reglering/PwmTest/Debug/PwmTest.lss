
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000488c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008488c  0008488c  0000c88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b4  20070000  00084894  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001d8  200709b4  00085248  000109b4  2**2
                  ALLOC
  4 .stack        00002004  20070b8c  00085420  000109b4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109b4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109dd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000fa0d  00000000  00000000  00010a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000029af  00000000  00000000  00020445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004ef0  00000000  00000000  00022df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b70  00000000  00000000  00027ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a28  00000000  00000000  00028854  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000190e5  00000000  00000000  0002927c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011d40  00000000  00000000  00042361  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00061486  00000000  00000000  000540a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002288  00000000  00000000  000b5528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b90 	.word	0x20072b90
   80004:	00080f3d 	.word	0x00080f3d
   80008:	00080f39 	.word	0x00080f39
   8000c:	00080f39 	.word	0x00080f39
   80010:	00080f39 	.word	0x00080f39
   80014:	00080f39 	.word	0x00080f39
   80018:	00080f39 	.word	0x00080f39
	...
   8002c:	00080f39 	.word	0x00080f39
   80030:	00080f39 	.word	0x00080f39
   80034:	00000000 	.word	0x00000000
   80038:	00080f39 	.word	0x00080f39
   8003c:	00080f39 	.word	0x00080f39
   80040:	00080f39 	.word	0x00080f39
   80044:	00080f39 	.word	0x00080f39
   80048:	00080f39 	.word	0x00080f39
   8004c:	00080f39 	.word	0x00080f39
   80050:	00080f39 	.word	0x00080f39
   80054:	00080f39 	.word	0x00080f39
   80058:	00080f39 	.word	0x00080f39
   8005c:	00080f39 	.word	0x00080f39
   80060:	00080f39 	.word	0x00080f39
   80064:	00080f39 	.word	0x00080f39
   80068:	00000000 	.word	0x00000000
   8006c:	00080cb9 	.word	0x00080cb9
   80070:	00080ccd 	.word	0x00080ccd
   80074:	00080ce1 	.word	0x00080ce1
   80078:	00080cf5 	.word	0x00080cf5
	...
   80084:	000803b1 	.word	0x000803b1
   80088:	00080f39 	.word	0x00080f39
   8008c:	00080f39 	.word	0x00080f39
   80090:	00080f39 	.word	0x00080f39
   80094:	00080f39 	.word	0x00080f39
   80098:	00080f39 	.word	0x00080f39
   8009c:	00080f39 	.word	0x00080f39
   800a0:	00080f39 	.word	0x00080f39
   800a4:	00000000 	.word	0x00000000
   800a8:	00080f39 	.word	0x00080f39
   800ac:	00080f39 	.word	0x00080f39
   800b0:	00080f39 	.word	0x00080f39
   800b4:	00080f39 	.word	0x00080f39
   800b8:	00080f39 	.word	0x00080f39
   800bc:	00080f39 	.word	0x00080f39
   800c0:	00080f39 	.word	0x00080f39
   800c4:	00080f39 	.word	0x00080f39
   800c8:	00080f39 	.word	0x00080f39
   800cc:	00080f39 	.word	0x00080f39
   800d0:	00080f39 	.word	0x00080f39
   800d4:	00080f39 	.word	0x00080f39
   800d8:	00080f39 	.word	0x00080f39
   800dc:	00080f39 	.word	0x00080f39
   800e0:	00080f39 	.word	0x00080f39
   800e4:	00080f39 	.word	0x00080f39
   800e8:	00080f39 	.word	0x00080f39
   800ec:	00080f39 	.word	0x00080f39
   800f0:	00080f39 	.word	0x00080f39

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709b4 	.word	0x200709b4
   80110:	00000000 	.word	0x00000000
   80114:	00084894 	.word	0x00084894

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084894 	.word	0x00084894
   8013c:	200709b8 	.word	0x200709b8
   80140:	00084894 	.word	0x00084894
   80144:	00000000 	.word	0x00000000

00080148 <main>:
// int e=0;
// double kp = 2;
// uint16_t speed = 1700;

int main(void)
{
   80148:	b580      	push	{r7, lr}
	/* Initialize the SAM system */
	SystemInit();
   8014a:	4b15      	ldr	r3, [pc, #84]	; (801a0 <main+0x58>)
   8014c:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   8014e:	4b15      	ldr	r3, [pc, #84]	; (801a4 <main+0x5c>)
   80150:	4798      	blx	r3
	configureConsole();
   80152:	4b15      	ldr	r3, [pc, #84]	; (801a8 <main+0x60>)
   80154:	4798      	blx	r3
	configInterrupts();
   80156:	4b15      	ldr	r3, [pc, #84]	; (801ac <main+0x64>)
   80158:	4798      	blx	r3
	PWM_init();
   8015a:	4b15      	ldr	r3, [pc, #84]	; (801b0 <main+0x68>)
   8015c:	4798      	blx	r3
	printf("Startar");
   8015e:	4815      	ldr	r0, [pc, #84]	; (801b4 <main+0x6c>)
   80160:	4b15      	ldr	r3, [pc, #84]	; (801b8 <main+0x70>)
   80162:	4798      	blx	r3
	delay_s(3);
   80164:	4f15      	ldr	r7, [pc, #84]	; (801bc <main+0x74>)
   80166:	4638      	mov	r0, r7
   80168:	4e15      	ldr	r6, [pc, #84]	; (801c0 <main+0x78>)
   8016a:	47b0      	blx	r6
 	pwm_pin_22(1700);
   8016c:	f240 60a4 	movw	r0, #1700	; 0x6a4
   80170:	4d14      	ldr	r5, [pc, #80]	; (801c4 <main+0x7c>)
   80172:	47a8      	blx	r5
 	pwm_pin_21(1700);
   80174:	f240 60a4 	movw	r0, #1700	; 0x6a4
   80178:	4c13      	ldr	r4, [pc, #76]	; (801c8 <main+0x80>)
   8017a:	47a0      	blx	r4
   delay_s(3);
   8017c:	4638      	mov	r0, r7
   8017e:	47b0      	blx	r6
   pwm_pin_22(1500);
   80180:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80184:	47a8      	blx	r5
   pwm_pin_21(1500);
   80186:	f240 50dc 	movw	r0, #1500	; 0x5dc
   8018a:	47a0      	blx	r4
	while (1)
	{
		  move(0,-30);
   8018c:	4e0f      	ldr	r6, [pc, #60]	; (801cc <main+0x84>)
		  delay_s(3);
   8018e:	463d      	mov	r5, r7
   80190:	4c0b      	ldr	r4, [pc, #44]	; (801c0 <main+0x78>)
   delay_s(3);
   pwm_pin_22(1500);
   pwm_pin_21(1500);
	while (1)
	{
		  move(0,-30);
   80192:	2000      	movs	r0, #0
   80194:	f06f 011d 	mvn.w	r1, #29
   80198:	47b0      	blx	r6
		  delay_s(3);
   8019a:	4628      	mov	r0, r5
   8019c:	47a0      	blx	r4
   8019e:	e7f8      	b.n	80192 <main+0x4a>
   801a0:	2007000d 	.word	0x2007000d
   801a4:	0008093d 	.word	0x0008093d
   801a8:	0008056d 	.word	0x0008056d
   801ac:	0008063d 	.word	0x0008063d
   801b0:	00080861 	.word	0x00080861
   801b4:	000847b4 	.word	0x000847b4
   801b8:	00081871 	.word	0x00081871
   801bc:	0112a880 	.word	0x0112a880
   801c0:	20070001 	.word	0x20070001
   801c4:	000808fd 	.word	0x000808fd
   801c8:	000808bd 	.word	0x000808bd
   801cc:	000806e5 	.word	0x000806e5

000801d0 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   801d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801d4:	b083      	sub	sp, #12
   801d6:	4605      	mov	r5, r0
	while (len) {
   801d8:	4690      	mov	r8, r2
   801da:	2a00      	cmp	r2, #0
   801dc:	d047      	beq.n	8026e <usart_serial_read_packet+0x9e>
   801de:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801e0:	4f25      	ldr	r7, [pc, #148]	; (80278 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   801e2:	4c26      	ldr	r4, [pc, #152]	; (8027c <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801e4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80290 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   801e8:	f8df b094 	ldr.w	fp, [pc, #148]	; 80280 <usart_serial_read_packet+0xb0>
   801ec:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   801f0:	2300      	movs	r3, #0
   801f2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801f4:	4b22      	ldr	r3, [pc, #136]	; (80280 <usart_serial_read_packet+0xb0>)
   801f6:	429d      	cmp	r5, r3
   801f8:	d106      	bne.n	80208 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   801fa:	4658      	mov	r0, fp
   801fc:	4649      	mov	r1, r9
   801fe:	4b21      	ldr	r3, [pc, #132]	; (80284 <usart_serial_read_packet+0xb4>)
   80200:	4798      	blx	r3
   80202:	2800      	cmp	r0, #0
   80204:	d1f9      	bne.n	801fa <usart_serial_read_packet+0x2a>
   80206:	e019      	b.n	8023c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80208:	4b1f      	ldr	r3, [pc, #124]	; (80288 <usart_serial_read_packet+0xb8>)
   8020a:	429d      	cmp	r5, r3
   8020c:	d109      	bne.n	80222 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8020e:	4699      	mov	r9, r3
   80210:	4648      	mov	r0, r9
   80212:	a901      	add	r1, sp, #4
   80214:	47a0      	blx	r4
   80216:	2800      	cmp	r0, #0
   80218:	d1fa      	bne.n	80210 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   8021a:	9b01      	ldr	r3, [sp, #4]
   8021c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80220:	e017      	b.n	80252 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80222:	4b1a      	ldr	r3, [pc, #104]	; (8028c <usart_serial_read_packet+0xbc>)
   80224:	429d      	cmp	r5, r3
   80226:	d109      	bne.n	8023c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80228:	4699      	mov	r9, r3
   8022a:	4648      	mov	r0, r9
   8022c:	a901      	add	r1, sp, #4
   8022e:	47a0      	blx	r4
   80230:	2800      	cmp	r0, #0
   80232:	d1fa      	bne.n	8022a <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80234:	9b01      	ldr	r3, [sp, #4]
   80236:	f806 3c01 	strb.w	r3, [r6, #-1]
   8023a:	e014      	b.n	80266 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8023c:	4555      	cmp	r5, sl
   8023e:	d108      	bne.n	80252 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80240:	4650      	mov	r0, sl
   80242:	a901      	add	r1, sp, #4
   80244:	47a0      	blx	r4
   80246:	2800      	cmp	r0, #0
   80248:	d1fa      	bne.n	80240 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   8024a:	9b01      	ldr	r3, [sp, #4]
   8024c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80250:	e009      	b.n	80266 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80252:	42bd      	cmp	r5, r7
   80254:	d107      	bne.n	80266 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80256:	4638      	mov	r0, r7
   80258:	a901      	add	r1, sp, #4
   8025a:	47a0      	blx	r4
   8025c:	2800      	cmp	r0, #0
   8025e:	d1fa      	bne.n	80256 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80260:	9b01      	ldr	r3, [sp, #4]
   80262:	f806 3c01 	strb.w	r3, [r6, #-1]
   80266:	3601      	adds	r6, #1
   80268:	f1b8 0801 	subs.w	r8, r8, #1
   8026c:	d1be      	bne.n	801ec <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8026e:	2000      	movs	r0, #0
   80270:	b003      	add	sp, #12
   80272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80276:	bf00      	nop
   80278:	400a4000 	.word	0x400a4000
   8027c:	00080399 	.word	0x00080399
   80280:	400e0800 	.word	0x400e0800
   80284:	00080371 	.word	0x00080371
   80288:	40098000 	.word	0x40098000
   8028c:	4009c000 	.word	0x4009c000
   80290:	400a0000 	.word	0x400a0000

00080294 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80298:	460c      	mov	r4, r1
   8029a:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   8029c:	b960      	cbnz	r0, 802b8 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8029e:	2a00      	cmp	r2, #0
   802a0:	dd0e      	ble.n	802c0 <_read+0x2c>
   802a2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   802a4:	4e09      	ldr	r6, [pc, #36]	; (802cc <_read+0x38>)
   802a6:	4d0a      	ldr	r5, [pc, #40]	; (802d0 <_read+0x3c>)
   802a8:	6830      	ldr	r0, [r6, #0]
   802aa:	4621      	mov	r1, r4
   802ac:	682b      	ldr	r3, [r5, #0]
   802ae:	4798      	blx	r3
		ptr++;
   802b0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   802b2:	42bc      	cmp	r4, r7
   802b4:	d1f8      	bne.n	802a8 <_read+0x14>
   802b6:	e006      	b.n	802c6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   802b8:	f04f 30ff 	mov.w	r0, #4294967295
   802bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   802c0:	2000      	movs	r0, #0
   802c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   802c6:	4640      	mov	r0, r8
	}
	return nChars;
}
   802c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802cc:	20070b34 	.word	0x20070b34
   802d0:	20070b2c 	.word	0x20070b2c

000802d4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   802d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802d8:	460e      	mov	r6, r1
   802da:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   802dc:	3801      	subs	r0, #1
   802de:	2802      	cmp	r0, #2
   802e0:	d80f      	bhi.n	80302 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   802e2:	b192      	cbz	r2, 8030a <_write+0x36>
   802e4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802e6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80324 <_write+0x50>
   802ea:	4f0d      	ldr	r7, [pc, #52]	; (80320 <_write+0x4c>)
   802ec:	f8d8 0000 	ldr.w	r0, [r8]
   802f0:	5d31      	ldrb	r1, [r6, r4]
   802f2:	683b      	ldr	r3, [r7, #0]
   802f4:	4798      	blx	r3
   802f6:	2800      	cmp	r0, #0
   802f8:	db0a      	blt.n	80310 <_write+0x3c>
			return -1;
		}
		++nChars;
   802fa:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802fc:	42a5      	cmp	r5, r4
   802fe:	d1f5      	bne.n	802ec <_write+0x18>
   80300:	e00a      	b.n	80318 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80302:	f04f 30ff 	mov.w	r0, #4294967295
   80306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8030a:	2000      	movs	r0, #0
   8030c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80310:	f04f 30ff 	mov.w	r0, #4294967295
   80314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80318:	4620      	mov	r0, r4
	}
	return nChars;
}
   8031a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8031e:	bf00      	nop
   80320:	20070b30 	.word	0x20070b30
   80324:	20070b34 	.word	0x20070b34

00080328 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80328:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8032a:	23ac      	movs	r3, #172	; 0xac
   8032c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8032e:	680a      	ldr	r2, [r1, #0]
   80330:	684b      	ldr	r3, [r1, #4]
   80332:	fbb2 f3f3 	udiv	r3, r2, r3
   80336:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80338:	1e5c      	subs	r4, r3, #1
   8033a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8033e:	4294      	cmp	r4, r2
   80340:	d80a      	bhi.n	80358 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80342:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80344:	688b      	ldr	r3, [r1, #8]
   80346:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80348:	f240 2302 	movw	r3, #514	; 0x202
   8034c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80350:	2350      	movs	r3, #80	; 0x50
   80352:	6003      	str	r3, [r0, #0]

	return 0;
   80354:	2000      	movs	r0, #0
   80356:	e000      	b.n	8035a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80358:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8035a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8035e:	4770      	bx	lr

00080360 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80360:	6943      	ldr	r3, [r0, #20]
   80362:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80366:	bf1a      	itte	ne
   80368:	61c1      	strne	r1, [r0, #28]
	return 0;
   8036a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8036c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8036e:	4770      	bx	lr

00080370 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80370:	6943      	ldr	r3, [r0, #20]
   80372:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80376:	bf1d      	ittte	ne
   80378:	6983      	ldrne	r3, [r0, #24]
   8037a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8037c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8037e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80380:	4770      	bx	lr
   80382:	bf00      	nop

00080384 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80384:	6943      	ldr	r3, [r0, #20]
   80386:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8038a:	bf1d      	ittte	ne
   8038c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80390:	61c1      	strne	r1, [r0, #28]
	return 0;
   80392:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80394:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80396:	4770      	bx	lr

00080398 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80398:	6943      	ldr	r3, [r0, #20]
   8039a:	f013 0f01 	tst.w	r3, #1
   8039e:	d005      	beq.n	803ac <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   803a0:	6983      	ldr	r3, [r0, #24]
   803a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   803a6:	600b      	str	r3, [r1, #0]

	return 0;
   803a8:	2000      	movs	r0, #0
   803aa:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   803ac:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   803ae:	4770      	bx	lr

000803b0 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   803b0:	b500      	push	{lr}
   803b2:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   803b4:	4813      	ldr	r0, [pc, #76]	; (80404 <USART0_Handler+0x54>)
   803b6:	f10d 0107 	add.w	r1, sp, #7
   803ba:	2201      	movs	r2, #1
   803bc:	4b12      	ldr	r3, [pc, #72]	; (80408 <USART0_Handler+0x58>)
   803be:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   803c0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   803c2:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   803c6:	2200      	movs	r2, #0
   803c8:	4b10      	ldr	r3, [pc, #64]	; (8040c <USART0_Handler+0x5c>)
   803ca:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   803cc:	4b10      	ldr	r3, [pc, #64]	; (80410 <USART0_Handler+0x60>)
   803ce:	781a      	ldrb	r2, [r3, #0]
   803d0:	3201      	adds	r2, #1
   803d2:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   803d4:	4b0f      	ldr	r3, [pc, #60]	; (80414 <USART0_Handler+0x64>)
   803d6:	781b      	ldrb	r3, [r3, #0]
   803d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803dc:	4a0e      	ldr	r2, [pc, #56]	; (80418 <USART0_Handler+0x68>)
   803de:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   803e0:	2b9b      	cmp	r3, #155	; 0x9b
   803e2:	d103      	bne.n	803ec <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   803e4:	2200      	movs	r2, #0
   803e6:	4b0b      	ldr	r3, [pc, #44]	; (80414 <USART0_Handler+0x64>)
   803e8:	701a      	strb	r2, [r3, #0]
   803ea:	e002      	b.n	803f2 <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   803ec:	3301      	adds	r3, #1
   803ee:	4a09      	ldr	r2, [pc, #36]	; (80414 <USART0_Handler+0x64>)
   803f0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   803f2:	2201      	movs	r2, #1
   803f4:	4b05      	ldr	r3, [pc, #20]	; (8040c <USART0_Handler+0x5c>)
   803f6:	701a      	strb	r2, [r3, #0]
   803f8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   803fc:	b662      	cpsie	i
}
   803fe:	b003      	add	sp, #12
   80400:	f85d fb04 	ldr.w	pc, [sp], #4
   80404:	40098000 	.word	0x40098000
   80408:	000801d1 	.word	0x000801d1
   8040c:	20070146 	.word	0x20070146
   80410:	20070a6d 	.word	0x20070a6d
   80414:	20070a6c 	.word	0x20070a6c
   80418:	200709d0 	.word	0x200709d0

0008041c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8041c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8041e:	b083      	sub	sp, #12
   80420:	4604      	mov	r4, r0
   80422:	460d      	mov	r5, r1
	uint32_t val = 0;
   80424:	2300      	movs	r3, #0
   80426:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80428:	4b1f      	ldr	r3, [pc, #124]	; (804a8 <usart_serial_getchar+0x8c>)
   8042a:	4298      	cmp	r0, r3
   8042c:	d107      	bne.n	8043e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8042e:	461f      	mov	r7, r3
   80430:	4e1e      	ldr	r6, [pc, #120]	; (804ac <usart_serial_getchar+0x90>)
   80432:	4638      	mov	r0, r7
   80434:	4629      	mov	r1, r5
   80436:	47b0      	blx	r6
   80438:	2800      	cmp	r0, #0
   8043a:	d1fa      	bne.n	80432 <usart_serial_getchar+0x16>
   8043c:	e019      	b.n	80472 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8043e:	4b1c      	ldr	r3, [pc, #112]	; (804b0 <usart_serial_getchar+0x94>)
   80440:	4298      	cmp	r0, r3
   80442:	d109      	bne.n	80458 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80444:	461f      	mov	r7, r3
   80446:	4e1b      	ldr	r6, [pc, #108]	; (804b4 <usart_serial_getchar+0x98>)
   80448:	4638      	mov	r0, r7
   8044a:	a901      	add	r1, sp, #4
   8044c:	47b0      	blx	r6
   8044e:	2800      	cmp	r0, #0
   80450:	d1fa      	bne.n	80448 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80452:	9b01      	ldr	r3, [sp, #4]
   80454:	702b      	strb	r3, [r5, #0]
   80456:	e019      	b.n	8048c <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80458:	4b17      	ldr	r3, [pc, #92]	; (804b8 <usart_serial_getchar+0x9c>)
   8045a:	4298      	cmp	r0, r3
   8045c:	d109      	bne.n	80472 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8045e:	461e      	mov	r6, r3
   80460:	4c14      	ldr	r4, [pc, #80]	; (804b4 <usart_serial_getchar+0x98>)
   80462:	4630      	mov	r0, r6
   80464:	a901      	add	r1, sp, #4
   80466:	47a0      	blx	r4
   80468:	2800      	cmp	r0, #0
   8046a:	d1fa      	bne.n	80462 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   8046c:	9b01      	ldr	r3, [sp, #4]
   8046e:	702b      	strb	r3, [r5, #0]
   80470:	e018      	b.n	804a4 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80472:	4b12      	ldr	r3, [pc, #72]	; (804bc <usart_serial_getchar+0xa0>)
   80474:	429c      	cmp	r4, r3
   80476:	d109      	bne.n	8048c <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80478:	461e      	mov	r6, r3
   8047a:	4c0e      	ldr	r4, [pc, #56]	; (804b4 <usart_serial_getchar+0x98>)
   8047c:	4630      	mov	r0, r6
   8047e:	a901      	add	r1, sp, #4
   80480:	47a0      	blx	r4
   80482:	2800      	cmp	r0, #0
   80484:	d1fa      	bne.n	8047c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80486:	9b01      	ldr	r3, [sp, #4]
   80488:	702b      	strb	r3, [r5, #0]
   8048a:	e00b      	b.n	804a4 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8048c:	4b0c      	ldr	r3, [pc, #48]	; (804c0 <usart_serial_getchar+0xa4>)
   8048e:	429c      	cmp	r4, r3
   80490:	d108      	bne.n	804a4 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80492:	461e      	mov	r6, r3
   80494:	4c07      	ldr	r4, [pc, #28]	; (804b4 <usart_serial_getchar+0x98>)
   80496:	4630      	mov	r0, r6
   80498:	a901      	add	r1, sp, #4
   8049a:	47a0      	blx	r4
   8049c:	2800      	cmp	r0, #0
   8049e:	d1fa      	bne.n	80496 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   804a0:	9b01      	ldr	r3, [sp, #4]
   804a2:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   804a4:	b003      	add	sp, #12
   804a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   804a8:	400e0800 	.word	0x400e0800
   804ac:	00080371 	.word	0x00080371
   804b0:	40098000 	.word	0x40098000
   804b4:	00080399 	.word	0x00080399
   804b8:	4009c000 	.word	0x4009c000
   804bc:	400a0000 	.word	0x400a0000
   804c0:	400a4000 	.word	0x400a4000

000804c4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   804c4:	b570      	push	{r4, r5, r6, lr}
   804c6:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   804c8:	4b21      	ldr	r3, [pc, #132]	; (80550 <usart_serial_putchar+0x8c>)
   804ca:	4298      	cmp	r0, r3
   804cc:	d107      	bne.n	804de <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   804ce:	461e      	mov	r6, r3
   804d0:	4d20      	ldr	r5, [pc, #128]	; (80554 <usart_serial_putchar+0x90>)
   804d2:	4630      	mov	r0, r6
   804d4:	4621      	mov	r1, r4
   804d6:	47a8      	blx	r5
   804d8:	2800      	cmp	r0, #0
   804da:	d1fa      	bne.n	804d2 <usart_serial_putchar+0xe>
   804dc:	e02b      	b.n	80536 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   804de:	4b1e      	ldr	r3, [pc, #120]	; (80558 <usart_serial_putchar+0x94>)
   804e0:	4298      	cmp	r0, r3
   804e2:	d107      	bne.n	804f4 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   804e4:	461e      	mov	r6, r3
   804e6:	4d1d      	ldr	r5, [pc, #116]	; (8055c <usart_serial_putchar+0x98>)
   804e8:	4630      	mov	r0, r6
   804ea:	4621      	mov	r1, r4
   804ec:	47a8      	blx	r5
   804ee:	2800      	cmp	r0, #0
   804f0:	d1fa      	bne.n	804e8 <usart_serial_putchar+0x24>
   804f2:	e022      	b.n	8053a <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   804f4:	4b1a      	ldr	r3, [pc, #104]	; (80560 <usart_serial_putchar+0x9c>)
   804f6:	4298      	cmp	r0, r3
   804f8:	d107      	bne.n	8050a <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   804fa:	461e      	mov	r6, r3
   804fc:	4d17      	ldr	r5, [pc, #92]	; (8055c <usart_serial_putchar+0x98>)
   804fe:	4630      	mov	r0, r6
   80500:	4621      	mov	r1, r4
   80502:	47a8      	blx	r5
   80504:	2800      	cmp	r0, #0
   80506:	d1fa      	bne.n	804fe <usart_serial_putchar+0x3a>
   80508:	e019      	b.n	8053e <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8050a:	4b16      	ldr	r3, [pc, #88]	; (80564 <usart_serial_putchar+0xa0>)
   8050c:	4298      	cmp	r0, r3
   8050e:	d107      	bne.n	80520 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80510:	461e      	mov	r6, r3
   80512:	4d12      	ldr	r5, [pc, #72]	; (8055c <usart_serial_putchar+0x98>)
   80514:	4630      	mov	r0, r6
   80516:	4621      	mov	r1, r4
   80518:	47a8      	blx	r5
   8051a:	2800      	cmp	r0, #0
   8051c:	d1fa      	bne.n	80514 <usart_serial_putchar+0x50>
   8051e:	e010      	b.n	80542 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80520:	4b11      	ldr	r3, [pc, #68]	; (80568 <usart_serial_putchar+0xa4>)
   80522:	4298      	cmp	r0, r3
   80524:	d10f      	bne.n	80546 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80526:	461e      	mov	r6, r3
   80528:	4d0c      	ldr	r5, [pc, #48]	; (8055c <usart_serial_putchar+0x98>)
   8052a:	4630      	mov	r0, r6
   8052c:	4621      	mov	r1, r4
   8052e:	47a8      	blx	r5
   80530:	2800      	cmp	r0, #0
   80532:	d1fa      	bne.n	8052a <usart_serial_putchar+0x66>
   80534:	e009      	b.n	8054a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80536:	2001      	movs	r0, #1
   80538:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8053a:	2001      	movs	r0, #1
   8053c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8053e:	2001      	movs	r0, #1
   80540:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80542:	2001      	movs	r0, #1
   80544:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80546:	2000      	movs	r0, #0
   80548:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8054a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8054c:	bd70      	pop	{r4, r5, r6, pc}
   8054e:	bf00      	nop
   80550:	400e0800 	.word	0x400e0800
   80554:	00080361 	.word	0x00080361
   80558:	40098000 	.word	0x40098000
   8055c:	00080385 	.word	0x00080385
   80560:	4009c000 	.word	0x4009c000
   80564:	400a0000 	.word	0x400a0000
   80568:	400a4000 	.word	0x400a4000

0008056c <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   8056c:	b530      	push	{r4, r5, lr}
   8056e:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80570:	2008      	movs	r0, #8
   80572:	4d13      	ldr	r5, [pc, #76]	; (805c0 <configureConsole+0x54>)
   80574:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80576:	4c13      	ldr	r4, [pc, #76]	; (805c4 <configureConsole+0x58>)
   80578:	4b13      	ldr	r3, [pc, #76]	; (805c8 <configureConsole+0x5c>)
   8057a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8057c:	4a13      	ldr	r2, [pc, #76]	; (805cc <configureConsole+0x60>)
   8057e:	4b14      	ldr	r3, [pc, #80]	; (805d0 <configureConsole+0x64>)
   80580:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80582:	4a14      	ldr	r2, [pc, #80]	; (805d4 <configureConsole+0x68>)
   80584:	4b14      	ldr	r3, [pc, #80]	; (805d8 <configureConsole+0x6c>)
   80586:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80588:	4b14      	ldr	r3, [pc, #80]	; (805dc <configureConsole+0x70>)
   8058a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8058c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80590:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80592:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80596:	9303      	str	r3, [sp, #12]
   80598:	2008      	movs	r0, #8
   8059a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8059c:	4620      	mov	r0, r4
   8059e:	a901      	add	r1, sp, #4
   805a0:	4b0f      	ldr	r3, [pc, #60]	; (805e0 <configureConsole+0x74>)
   805a2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   805a4:	4d0f      	ldr	r5, [pc, #60]	; (805e4 <configureConsole+0x78>)
   805a6:	682b      	ldr	r3, [r5, #0]
   805a8:	6898      	ldr	r0, [r3, #8]
   805aa:	2100      	movs	r1, #0
   805ac:	4c0e      	ldr	r4, [pc, #56]	; (805e8 <configureConsole+0x7c>)
   805ae:	47a0      	blx	r4
	setbuf(stdin, NULL);
   805b0:	682b      	ldr	r3, [r5, #0]
   805b2:	6858      	ldr	r0, [r3, #4]
   805b4:	2100      	movs	r1, #0
   805b6:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   805b8:	2000      	movs	r0, #0
   805ba:	b005      	add	sp, #20
   805bc:	bd30      	pop	{r4, r5, pc}
   805be:	bf00      	nop
   805c0:	00080d09 	.word	0x00080d09
   805c4:	400e0800 	.word	0x400e0800
   805c8:	20070b34 	.word	0x20070b34
   805cc:	000804c5 	.word	0x000804c5
   805d0:	20070b30 	.word	0x20070b30
   805d4:	0008041d 	.word	0x0008041d
   805d8:	20070b2c 	.word	0x20070b2c
   805dc:	0501bd00 	.word	0x0501bd00
   805e0:	00080329 	.word	0x00080329
   805e4:	20070578 	.word	0x20070578
   805e8:	0008192d 	.word	0x0008192d

000805ec <pin12_edge_handler>:
	

}

// Handler which calls when pin 53 is toggle.  
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   805ec:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   805ee:	4806      	ldr	r0, [pc, #24]	; (80608 <pin12_edge_handler+0x1c>)
   805f0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   805f8:	4b04      	ldr	r3, [pc, #16]	; (8060c <pin12_edge_handler+0x20>)
   805fa:	4798      	blx	r3
   805fc:	b118      	cbz	r0, 80606 <pin12_edge_handler+0x1a>
		//increase the counter value
		counter_1++;
   805fe:	4b04      	ldr	r3, [pc, #16]	; (80610 <pin12_edge_handler+0x24>)
   80600:	881a      	ldrh	r2, [r3, #0]
   80602:	3201      	adds	r2, #1
   80604:	801a      	strh	r2, [r3, #0]
   80606:	bd08      	pop	{r3, pc}
   80608:	400e1200 	.word	0x400e1200
   8060c:	000809bd 	.word	0x000809bd
   80610:	20070a6e 	.word	0x20070a6e

00080614 <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}	
}

// Handler which calls when pin 51 is toggle. 
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   80614:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   80616:	4806      	ldr	r0, [pc, #24]	; (80630 <pin14_edge_handler+0x1c>)
   80618:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8061c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80620:	4b04      	ldr	r3, [pc, #16]	; (80634 <pin14_edge_handler+0x20>)
   80622:	4798      	blx	r3
   80624:	b118      	cbz	r0, 8062e <pin14_edge_handler+0x1a>
	//Increase the counter value
			counter_2++;
   80626:	4b04      	ldr	r3, [pc, #16]	; (80638 <pin14_edge_handler+0x24>)
   80628:	881a      	ldrh	r2, [r3, #0]
   8062a:	3201      	adds	r2, #1
   8062c:	801a      	strh	r2, [r3, #0]
   8062e:	bd08      	pop	{r3, pc}
   80630:	400e1000 	.word	0x400e1000
   80634:	000809bd 	.word	0x000809bd
   80638:	20070a70 	.word	0x20070a70

0008063c <configInterrupts>:
// Counter for Arlo Robot encoders for right and left wheel
 uint16_t counter_1 = 0;
 uint16_t counter_2 = 0;


void configInterrupts(void){
   8063c:	b570      	push	{r4, r5, r6, lr}
   8063e:	b082      	sub	sp, #8
	
	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   80640:	200c      	movs	r0, #12
   80642:	4c1a      	ldr	r4, [pc, #104]	; (806ac <configInterrupts+0x70>)
   80644:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);	
   80646:	200d      	movs	r0, #13
   80648:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   8064a:	4d19      	ldr	r5, [pc, #100]	; (806b0 <configInterrupts+0x74>)
   8064c:	4628      	mov	r0, r5
   8064e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80652:	2201      	movs	r2, #1
   80654:	4e17      	ldr	r6, [pc, #92]	; (806b4 <configInterrupts+0x78>)
   80656:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   80658:	4c17      	ldr	r4, [pc, #92]	; (806b8 <configInterrupts+0x7c>)
   8065a:	4620      	mov	r0, r4
   8065c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80660:	2201      	movs	r2, #1
   80662:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   80664:	4b15      	ldr	r3, [pc, #84]	; (806bc <configInterrupts+0x80>)
   80666:	9300      	str	r3, [sp, #0]
   80668:	4628      	mov	r0, r5
   8066a:	210d      	movs	r1, #13
   8066c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80670:	2340      	movs	r3, #64	; 0x40
   80672:	4e13      	ldr	r6, [pc, #76]	; (806c0 <configInterrupts+0x84>)
   80674:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   80676:	4b13      	ldr	r3, [pc, #76]	; (806c4 <configInterrupts+0x88>)
   80678:	9300      	str	r3, [sp, #0]
   8067a:	4620      	mov	r0, r4
   8067c:	210c      	movs	r1, #12
   8067e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80682:	2340      	movs	r3, #64	; 0x40
   80684:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   80686:	4628      	mov	r0, r5
   80688:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8068c:	4d0e      	ldr	r5, [pc, #56]	; (806c8 <configInterrupts+0x8c>)
   8068e:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   80690:	4620      	mov	r0, r4
   80692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80696:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80698:	4b0c      	ldr	r3, [pc, #48]	; (806cc <configInterrupts+0x90>)
   8069a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8069e:	601a      	str	r2, [r3, #0]
   806a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   806a4:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);
	

}
   806a6:	b002      	add	sp, #8
   806a8:	bd70      	pop	{r4, r5, r6, pc}
   806aa:	bf00      	nop
   806ac:	00080d09 	.word	0x00080d09
   806b0:	400e1200 	.word	0x400e1200
   806b4:	00080a15 	.word	0x00080a15
   806b8:	400e1000 	.word	0x400e1000
   806bc:	000805ed 	.word	0x000805ed
   806c0:	00080c7d 	.word	0x00080c7d
   806c4:	00080615 	.word	0x00080615
   806c8:	00080aa1 	.word	0x00080aa1
   806cc:	e000e100 	.word	0xe000e100

000806d0 <reset_Counter>:
			//printf("\n c2 = %d",counter_2);
	}
}

void reset_Counter(void){
	counter_1=0;
   806d0:	2300      	movs	r3, #0
   806d2:	4a02      	ldr	r2, [pc, #8]	; (806dc <reset_Counter+0xc>)
   806d4:	8013      	strh	r3, [r2, #0]
	counter_2=0;
   806d6:	4a02      	ldr	r2, [pc, #8]	; (806e0 <reset_Counter+0x10>)
   806d8:	8013      	strh	r3, [r2, #0]
   806da:	4770      	bx	lr
   806dc:	20070a6e 	.word	0x20070a6e
   806e0:	20070a70 	.word	0x20070a70

000806e4 <move>:
int s_value=0;
int e=1;
double kp = 1;
uint16_t speed = 1500;

void move(int distance, int degree){
   806e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((degree>0)||(degree<0))
   806e8:	2900      	cmp	r1, #0
   806ea:	d047      	beq.n	8077c <move+0x98>
	{
	setPoint = (degree/2);
   806ec:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
   806f0:	105b      	asrs	r3, r3, #1
   806f2:	4a23      	ldr	r2, [pc, #140]	; (80780 <move+0x9c>)
   806f4:	6013      	str	r3, [r2, #0]
	while (1)
	{
		printf("e_value: %d\n",e);
   806f6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 807c4 <move+0xe0>
   806fa:	4d22      	ldr	r5, [pc, #136]	; (80784 <move+0xa0>)
   806fc:	4f22      	ldr	r7, [pc, #136]	; (80788 <move+0xa4>)
   806fe:	4640      	mov	r0, r8
   80700:	6829      	ldr	r1, [r5, #0]
   80702:	47b8      	blx	r7
		m_value = (counter_2-counter_1);
   80704:	4b21      	ldr	r3, [pc, #132]	; (8078c <move+0xa8>)
   80706:	881c      	ldrh	r4, [r3, #0]
   80708:	4b21      	ldr	r3, [pc, #132]	; (80790 <move+0xac>)
   8070a:	881b      	ldrh	r3, [r3, #0]
   8070c:	1ae4      	subs	r4, r4, r3
   8070e:	4b21      	ldr	r3, [pc, #132]	; (80794 <move+0xb0>)
   80710:	601c      	str	r4, [r3, #0]
		e = (setPoint - m_value);
   80712:	4b1b      	ldr	r3, [pc, #108]	; (80780 <move+0x9c>)
   80714:	681b      	ldr	r3, [r3, #0]
   80716:	1b1c      	subs	r4, r3, r4
   80718:	602c      	str	r4, [r5, #0]
		s_value = (kp*e);
   8071a:	4620      	mov	r0, r4
   8071c:	4b1e      	ldr	r3, [pc, #120]	; (80798 <move+0xb4>)
   8071e:	4798      	blx	r3
   80720:	4b1e      	ldr	r3, [pc, #120]	; (8079c <move+0xb8>)
   80722:	e9d3 2300 	ldrd	r2, r3, [r3]
   80726:	4e1e      	ldr	r6, [pc, #120]	; (807a0 <move+0xbc>)
   80728:	47b0      	blx	r6
   8072a:	4b1e      	ldr	r3, [pc, #120]	; (807a4 <move+0xc0>)
   8072c:	4798      	blx	r3
		if (s_value<100)
   8072e:	2863      	cmp	r0, #99	; 0x63
   80730:	dd02      	ble.n	80738 <move+0x54>
	while (1)
	{
		printf("e_value: %d\n",e);
		m_value = (counter_2-counter_1);
		e = (setPoint - m_value);
		s_value = (kp*e);
   80732:	4a1d      	ldr	r2, [pc, #116]	; (807a8 <move+0xc4>)
   80734:	6010      	str	r0, [r2, #0]
   80736:	e002      	b.n	8073e <move+0x5a>
		if (s_value<100)
		{
			s_value=100;
   80738:	2264      	movs	r2, #100	; 0x64
   8073a:	4b1b      	ldr	r3, [pc, #108]	; (807a8 <move+0xc4>)
   8073c:	601a      	str	r2, [r3, #0]
		}
		
		printf("e_value: %d\n",e);
   8073e:	4640      	mov	r0, r8
   80740:	4621      	mov	r1, r4
   80742:	47b8      	blx	r7
		pwm_pin_21((speed+s_value));
   80744:	4e19      	ldr	r6, [pc, #100]	; (807ac <move+0xc8>)
   80746:	8830      	ldrh	r0, [r6, #0]
   80748:	4c17      	ldr	r4, [pc, #92]	; (807a8 <move+0xc4>)
   8074a:	6823      	ldr	r3, [r4, #0]
   8074c:	4418      	add	r0, r3
   8074e:	4b18      	ldr	r3, [pc, #96]	; (807b0 <move+0xcc>)
   80750:	4798      	blx	r3
		pwm_pin_22((speed-s_value));
   80752:	8830      	ldrh	r0, [r6, #0]
   80754:	6823      	ldr	r3, [r4, #0]
   80756:	1ac0      	subs	r0, r0, r3
   80758:	4b16      	ldr	r3, [pc, #88]	; (807b4 <move+0xd0>)
   8075a:	4798      	blx	r3
		delay_us(46200);
   8075c:	4816      	ldr	r0, [pc, #88]	; (807b8 <move+0xd4>)
   8075e:	4b17      	ldr	r3, [pc, #92]	; (807bc <move+0xd8>)
   80760:	4798      	blx	r3
		if (e==0)
   80762:	682b      	ldr	r3, [r5, #0]
   80764:	2b00      	cmp	r3, #0
   80766:	d1ca      	bne.n	806fe <move+0x1a>
		{
			pwm_pin_21(1500);
   80768:	f240 50dc 	movw	r0, #1500	; 0x5dc
   8076c:	4b10      	ldr	r3, [pc, #64]	; (807b0 <move+0xcc>)
   8076e:	4798      	blx	r3
			pwm_pin_22(1500);
   80770:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80774:	4b0f      	ldr	r3, [pc, #60]	; (807b4 <move+0xd0>)
   80776:	4798      	blx	r3
			reset_Counter();
   80778:	4b11      	ldr	r3, [pc, #68]	; (807c0 <move+0xdc>)
   8077a:	4798      	blx	r3
   8077c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80780:	20070a7c 	.word	0x20070a7c
   80784:	20070140 	.word	0x20070140
   80788:	00081871 	.word	0x00081871
   8078c:	20070a70 	.word	0x20070a70
   80790:	20070a6e 	.word	0x20070a6e
   80794:	20070a78 	.word	0x20070a78
   80798:	000812e1 	.word	0x000812e1
   8079c:	20070138 	.word	0x20070138
   807a0:	000813ad 	.word	0x000813ad
   807a4:	000817d1 	.word	0x000817d1
   807a8:	20070a74 	.word	0x20070a74
   807ac:	20070144 	.word	0x20070144
   807b0:	000808bd 	.word	0x000808bd
   807b4:	000808fd 	.word	0x000808fd
   807b8:	00043ad0 	.word	0x00043ad0
   807bc:	20070001 	.word	0x20070001
   807c0:	000806d1 	.word	0x000806d1
   807c4:	000847bc 	.word	0x000847bc

000807c8 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   807c8:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   807ca:	2055      	movs	r0, #85	; 0x55
   807cc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807d0:	4b0b      	ldr	r3, [pc, #44]	; (80800 <initPin21+0x38>)
   807d2:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   807d4:	4b0b      	ldr	r3, [pc, #44]	; (80804 <initPin21+0x3c>)
   807d6:	2404      	movs	r4, #4
   807d8:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   807da:	220b      	movs	r2, #11
   807dc:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   807de:	2200      	movs	r2, #0
   807e0:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   807e2:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 8000;
   807e4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   807e8:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   807ea:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   807ec:	4d06      	ldr	r5, [pc, #24]	; (80808 <initPin21+0x40>)
   807ee:	4628      	mov	r0, r5
   807f0:	4619      	mov	r1, r3
   807f2:	4b06      	ldr	r3, [pc, #24]	; (8080c <initPin21+0x44>)
   807f4:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   807f6:	4628      	mov	r0, r5
   807f8:	4621      	mov	r1, r4
   807fa:	4b05      	ldr	r3, [pc, #20]	; (80810 <initPin21+0x48>)
   807fc:	4798      	blx	r3
   807fe:	bd38      	pop	{r3, r4, r5, pc}
   80800:	00080ab1 	.word	0x00080ab1
   80804:	20070b60 	.word	0x20070b60
   80808:	40094000 	.word	0x40094000
   8080c:	00080df9 	.word	0x00080df9
   80810:	00080f21 	.word	0x00080f21

00080814 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   80814:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   80816:	2056      	movs	r0, #86	; 0x56
   80818:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8081c:	4b0b      	ldr	r3, [pc, #44]	; (8084c <initPin22+0x38>)
   8081e:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   80820:	4b0b      	ldr	r3, [pc, #44]	; (80850 <initPin22+0x3c>)
   80822:	2405      	movs	r4, #5
   80824:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80826:	220b      	movs	r2, #11
   80828:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   8082a:	2200      	movs	r2, #0
   8082c:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   8082e:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 8000;
   80830:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   80834:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   80836:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   80838:	4d06      	ldr	r5, [pc, #24]	; (80854 <initPin22+0x40>)
   8083a:	4628      	mov	r0, r5
   8083c:	4619      	mov	r1, r3
   8083e:	4b06      	ldr	r3, [pc, #24]	; (80858 <initPin22+0x44>)
   80840:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   80842:	4628      	mov	r0, r5
   80844:	4621      	mov	r1, r4
   80846:	4b05      	ldr	r3, [pc, #20]	; (8085c <initPin22+0x48>)
   80848:	4798      	blx	r3
   8084a:	bd38      	pop	{r3, r4, r5, pc}
   8084c:	00080ab1 	.word	0x00080ab1
   80850:	20070b38 	.word	0x20070b38
   80854:	40094000 	.word	0x40094000
   80858:	00080df9 	.word	0x00080df9
   8085c:	00080f21 	.word	0x00080f21

00080860 <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   80860:	b530      	push	{r4, r5, lr}
   80862:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   80864:	2024      	movs	r0, #36	; 0x24
   80866:	4b0d      	ldr	r3, [pc, #52]	; (8089c <PWM_init+0x3c>)
   80868:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   8086a:	4c0d      	ldr	r4, [pc, #52]	; (808a0 <PWM_init+0x40>)
   8086c:	4620      	mov	r0, r4
   8086e:	2104      	movs	r1, #4
   80870:	4d0c      	ldr	r5, [pc, #48]	; (808a4 <PWM_init+0x44>)
   80872:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   80874:	4620      	mov	r0, r4
   80876:	2105      	movs	r1, #5
   80878:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   8087a:	4b0b      	ldr	r3, [pc, #44]	; (808a8 <PWM_init+0x48>)
   8087c:	9301      	str	r3, [sp, #4]
   8087e:	2300      	movs	r3, #0
   80880:	9302      	str	r3, [sp, #8]
   80882:	4b0a      	ldr	r3, [pc, #40]	; (808ac <PWM_init+0x4c>)
   80884:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   80886:	4620      	mov	r0, r4
   80888:	a901      	add	r1, sp, #4
   8088a:	4b09      	ldr	r3, [pc, #36]	; (808b0 <PWM_init+0x50>)
   8088c:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   8088e:	4b09      	ldr	r3, [pc, #36]	; (808b4 <PWM_init+0x54>)
   80890:	4798      	blx	r3
	initPin22();
   80892:	4b09      	ldr	r3, [pc, #36]	; (808b8 <PWM_init+0x58>)
   80894:	4798      	blx	r3
	
}
   80896:	b005      	add	sp, #20
   80898:	bd30      	pop	{r4, r5, pc}
   8089a:	bf00      	nop
   8089c:	00080d09 	.word	0x00080d09
   808a0:	40094000 	.word	0x40094000
   808a4:	00080f2d 	.word	0x00080f2d
   808a8:	000f4240 	.word	0x000f4240
   808ac:	0501bd00 	.word	0x0501bd00
   808b0:	00080db9 	.word	0x00080db9
   808b4:	000807c9 	.word	0x000807c9
   808b8:	00080815 	.word	0x00080815

000808bc <pwm_pin_21>:
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
}
 /* This method changes the duty cycle of PWM signal on pin 9. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void pwm_pin_21(uint32_t duty){
   808bc:	b510      	push	{r4, lr}
	if(duty<800){
   808be:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   808c2:	d305      	bcc.n	808d0 <pwm_pin_21+0x14>
   808c4:	f640 0498 	movw	r4, #2200	; 0x898
   808c8:	42a0      	cmp	r0, r4
   808ca:	bf38      	it	cc
   808cc:	4604      	movcc	r4, r0
   808ce:	e001      	b.n	808d4 <pwm_pin_21+0x18>
		duty=800;
   808d0:	f44f 7448 	mov.w	r4, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_21, 2 );
   808d4:	4804      	ldr	r0, [pc, #16]	; (808e8 <pwm_pin_21+0x2c>)
   808d6:	4905      	ldr	r1, [pc, #20]	; (808ec <pwm_pin_21+0x30>)
   808d8:	2202      	movs	r2, #2
   808da:	4b05      	ldr	r3, [pc, #20]	; (808f0 <pwm_pin_21+0x34>)
   808dc:	4798      	blx	r3
	printf("duty21: %u\n",duty);
   808de:	4805      	ldr	r0, [pc, #20]	; (808f4 <pwm_pin_21+0x38>)
   808e0:	4621      	mov	r1, r4
   808e2:	4b05      	ldr	r3, [pc, #20]	; (808f8 <pwm_pin_21+0x3c>)
   808e4:	4798      	blx	r3
   808e6:	bd10      	pop	{r4, pc}
   808e8:	40094000 	.word	0x40094000
   808ec:	20070b60 	.word	0x20070b60
   808f0:	00080efd 	.word	0x00080efd
   808f4:	000847cc 	.word	0x000847cc
   808f8:	00081871 	.word	0x00081871

000808fc <pwm_pin_22>:
}

 /* This method changes the duty cycle of PWM signal on pin 8. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void pwm_pin_22(uint32_t duty){
   808fc:	b510      	push	{r4, lr}
	
	if(duty<800){
   808fe:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80902:	d305      	bcc.n	80910 <pwm_pin_22+0x14>
   80904:	f640 0498 	movw	r4, #2200	; 0x898
   80908:	42a0      	cmp	r0, r4
   8090a:	bf38      	it	cc
   8090c:	4604      	movcc	r4, r0
   8090e:	e001      	b.n	80914 <pwm_pin_22+0x18>
		duty=800;
   80910:	f44f 7448 	mov.w	r4, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   80914:	4804      	ldr	r0, [pc, #16]	; (80928 <pwm_pin_22+0x2c>)
   80916:	4905      	ldr	r1, [pc, #20]	; (8092c <pwm_pin_22+0x30>)
   80918:	4622      	mov	r2, r4
   8091a:	4b05      	ldr	r3, [pc, #20]	; (80930 <pwm_pin_22+0x34>)
   8091c:	4798      	blx	r3
	printf("duty22: %u\n",duty);
   8091e:	4805      	ldr	r0, [pc, #20]	; (80934 <pwm_pin_22+0x38>)
   80920:	4621      	mov	r1, r4
   80922:	4b05      	ldr	r3, [pc, #20]	; (80938 <pwm_pin_22+0x3c>)
   80924:	4798      	blx	r3
   80926:	bd10      	pop	{r4, pc}
   80928:	40094000 	.word	0x40094000
   8092c:	20070b38 	.word	0x20070b38
   80930:	00080efd 	.word	0x00080efd
   80934:	000847d8 	.word	0x000847d8
   80938:	00081871 	.word	0x00081871

0008093c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8093c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8093e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80942:	4b17      	ldr	r3, [pc, #92]	; (809a0 <board_init+0x64>)
   80944:	605a      	str	r2, [r3, #4]
   80946:	200b      	movs	r0, #11
   80948:	4c16      	ldr	r4, [pc, #88]	; (809a4 <board_init+0x68>)
   8094a:	47a0      	blx	r4
   8094c:	200c      	movs	r0, #12
   8094e:	47a0      	blx	r4
   80950:	200d      	movs	r0, #13
   80952:	47a0      	blx	r4
   80954:	200e      	movs	r0, #14
   80956:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80958:	203b      	movs	r0, #59	; 0x3b
   8095a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8095e:	4c12      	ldr	r4, [pc, #72]	; (809a8 <board_init+0x6c>)
   80960:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80962:	2055      	movs	r0, #85	; 0x55
   80964:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80968:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8096a:	2056      	movs	r0, #86	; 0x56
   8096c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80970:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80972:	2068      	movs	r0, #104	; 0x68
   80974:	490d      	ldr	r1, [pc, #52]	; (809ac <board_init+0x70>)
   80976:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80978:	205c      	movs	r0, #92	; 0x5c
   8097a:	490d      	ldr	r1, [pc, #52]	; (809b0 <board_init+0x74>)
   8097c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8097e:	480d      	ldr	r0, [pc, #52]	; (809b4 <board_init+0x78>)
   80980:	f44f 7140 	mov.w	r1, #768	; 0x300
   80984:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80988:	4b0b      	ldr	r3, [pc, #44]	; (809b8 <board_init+0x7c>)
   8098a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8098c:	202b      	movs	r0, #43	; 0x2b
   8098e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80992:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80994:	202a      	movs	r0, #42	; 0x2a
   80996:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8099a:	47a0      	blx	r4
   8099c:	bd10      	pop	{r4, pc}
   8099e:	bf00      	nop
   809a0:	400e1a50 	.word	0x400e1a50
   809a4:	00080d09 	.word	0x00080d09
   809a8:	00080ab1 	.word	0x00080ab1
   809ac:	28000079 	.word	0x28000079
   809b0:	28000001 	.word	0x28000001
   809b4:	400e0e00 	.word	0x400e0e00
   809b8:	00080b85 	.word	0x00080b85

000809bc <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   809bc:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   809c0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   809c4:	bf0c      	ite	eq
   809c6:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   809c8:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   809ca:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   809cc:	bf0c      	ite	eq
   809ce:	2000      	moveq	r0, #0
   809d0:	2001      	movne	r0, #1
   809d2:	4770      	bx	lr

000809d4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   809d4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   809d6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   809da:	d016      	beq.n	80a0a <pio_set_peripheral+0x36>
   809dc:	d804      	bhi.n	809e8 <pio_set_peripheral+0x14>
   809de:	b1c1      	cbz	r1, 80a12 <pio_set_peripheral+0x3e>
   809e0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   809e4:	d00a      	beq.n	809fc <pio_set_peripheral+0x28>
   809e6:	e013      	b.n	80a10 <pio_set_peripheral+0x3c>
   809e8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   809ec:	d011      	beq.n	80a12 <pio_set_peripheral+0x3e>
   809ee:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   809f2:	d00e      	beq.n	80a12 <pio_set_peripheral+0x3e>
   809f4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   809f8:	d10a      	bne.n	80a10 <pio_set_peripheral+0x3c>
   809fa:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   809fc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   809fe:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80a00:	400b      	ands	r3, r1
   80a02:	ea23 0302 	bic.w	r3, r3, r2
   80a06:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80a08:	e002      	b.n	80a10 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80a0a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80a0c:	4313      	orrs	r3, r2
   80a0e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80a10:	6042      	str	r2, [r0, #4]
   80a12:	4770      	bx	lr

00080a14 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80a14:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a16:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80a1a:	bf14      	ite	ne
   80a1c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a1e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80a20:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80a24:	bf14      	ite	ne
   80a26:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80a28:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80a2a:	f012 0f02 	tst.w	r2, #2
   80a2e:	d002      	beq.n	80a36 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80a30:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80a34:	e004      	b.n	80a40 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80a36:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80a3a:	bf18      	it	ne
   80a3c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80a40:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80a42:	6001      	str	r1, [r0, #0]
   80a44:	4770      	bx	lr
   80a46:	bf00      	nop

00080a48 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80a48:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80a4a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a4c:	9c01      	ldr	r4, [sp, #4]
   80a4e:	b10c      	cbz	r4, 80a54 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80a50:	6641      	str	r1, [r0, #100]	; 0x64
   80a52:	e000      	b.n	80a56 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a54:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80a56:	b10b      	cbz	r3, 80a5c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80a58:	6501      	str	r1, [r0, #80]	; 0x50
   80a5a:	e000      	b.n	80a5e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80a5c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80a5e:	b10a      	cbz	r2, 80a64 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80a60:	6301      	str	r1, [r0, #48]	; 0x30
   80a62:	e000      	b.n	80a66 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80a64:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80a66:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80a68:	6001      	str	r1, [r0, #0]
}
   80a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
   80a6e:	4770      	bx	lr

00080a70 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   80a70:	f012 0f10 	tst.w	r2, #16
   80a74:	d010      	beq.n	80a98 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   80a76:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80a7a:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   80a7e:	bf14      	ite	ne
   80a80:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80a84:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   80a88:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   80a8c:	bf14      	ite	ne
   80a8e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   80a92:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80a96:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   80a98:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop

00080aa0 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   80aa0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   80aa2:	6401      	str	r1, [r0, #64]	; 0x40
   80aa4:	4770      	bx	lr
   80aa6:	bf00      	nop

00080aa8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80aa8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80aaa:	4770      	bx	lr

00080aac <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80aac:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80aae:	4770      	bx	lr

00080ab0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80ab0:	b570      	push	{r4, r5, r6, lr}
   80ab2:	b082      	sub	sp, #8
   80ab4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80ab6:	0944      	lsrs	r4, r0, #5
   80ab8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80abc:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80ac0:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80ac2:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80ac6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80aca:	d030      	beq.n	80b2e <pio_configure_pin+0x7e>
   80acc:	d806      	bhi.n	80adc <pio_configure_pin+0x2c>
   80ace:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80ad2:	d00a      	beq.n	80aea <pio_configure_pin+0x3a>
   80ad4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80ad8:	d018      	beq.n	80b0c <pio_configure_pin+0x5c>
   80ada:	e049      	b.n	80b70 <pio_configure_pin+0xc0>
   80adc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80ae0:	d030      	beq.n	80b44 <pio_configure_pin+0x94>
   80ae2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80ae6:	d02d      	beq.n	80b44 <pio_configure_pin+0x94>
   80ae8:	e042      	b.n	80b70 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80aea:	f000 001f 	and.w	r0, r0, #31
   80aee:	2401      	movs	r4, #1
   80af0:	4084      	lsls	r4, r0
   80af2:	4630      	mov	r0, r6
   80af4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80af8:	4622      	mov	r2, r4
   80afa:	4b1f      	ldr	r3, [pc, #124]	; (80b78 <pio_configure_pin+0xc8>)
   80afc:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80afe:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b02:	bf14      	ite	ne
   80b04:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b06:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b08:	2001      	movs	r0, #1
   80b0a:	e032      	b.n	80b72 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80b0c:	f000 001f 	and.w	r0, r0, #31
   80b10:	2401      	movs	r4, #1
   80b12:	4084      	lsls	r4, r0
   80b14:	4630      	mov	r0, r6
   80b16:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b1a:	4622      	mov	r2, r4
   80b1c:	4b16      	ldr	r3, [pc, #88]	; (80b78 <pio_configure_pin+0xc8>)
   80b1e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b20:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b24:	bf14      	ite	ne
   80b26:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b28:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b2a:	2001      	movs	r0, #1
   80b2c:	e021      	b.n	80b72 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80b2e:	f000 011f 	and.w	r1, r0, #31
   80b32:	2401      	movs	r4, #1
   80b34:	4630      	mov	r0, r6
   80b36:	fa04 f101 	lsl.w	r1, r4, r1
   80b3a:	462a      	mov	r2, r5
   80b3c:	4b0f      	ldr	r3, [pc, #60]	; (80b7c <pio_configure_pin+0xcc>)
   80b3e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b40:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80b42:	e016      	b.n	80b72 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80b44:	f000 011f 	and.w	r1, r0, #31
   80b48:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b4a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80b4e:	ea05 0304 	and.w	r3, r5, r4
   80b52:	9300      	str	r3, [sp, #0]
   80b54:	4630      	mov	r0, r6
   80b56:	fa04 f101 	lsl.w	r1, r4, r1
   80b5a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b5e:	bf14      	ite	ne
   80b60:	2200      	movne	r2, #0
   80b62:	2201      	moveq	r2, #1
   80b64:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b68:	4d05      	ldr	r5, [pc, #20]	; (80b80 <pio_configure_pin+0xd0>)
   80b6a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80b6c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80b6e:	e000      	b.n	80b72 <pio_configure_pin+0xc2>

	default:
		return 0;
   80b70:	2000      	movs	r0, #0
	}

	return 1;
}
   80b72:	b002      	add	sp, #8
   80b74:	bd70      	pop	{r4, r5, r6, pc}
   80b76:	bf00      	nop
   80b78:	000809d5 	.word	0x000809d5
   80b7c:	00080a15 	.word	0x00080a15
   80b80:	00080a49 	.word	0x00080a49

00080b84 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b86:	b083      	sub	sp, #12
   80b88:	4607      	mov	r7, r0
   80b8a:	460e      	mov	r6, r1
   80b8c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80b8e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80b92:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80b96:	d026      	beq.n	80be6 <pio_configure_pin_group+0x62>
   80b98:	d806      	bhi.n	80ba8 <pio_configure_pin_group+0x24>
   80b9a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80b9e:	d00a      	beq.n	80bb6 <pio_configure_pin_group+0x32>
   80ba0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80ba4:	d013      	beq.n	80bce <pio_configure_pin_group+0x4a>
   80ba6:	e034      	b.n	80c12 <pio_configure_pin_group+0x8e>
   80ba8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80bac:	d01f      	beq.n	80bee <pio_configure_pin_group+0x6a>
   80bae:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80bb2:	d01c      	beq.n	80bee <pio_configure_pin_group+0x6a>
   80bb4:	e02d      	b.n	80c12 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80bb6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bba:	4632      	mov	r2, r6
   80bbc:	4b16      	ldr	r3, [pc, #88]	; (80c18 <pio_configure_pin_group+0x94>)
   80bbe:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80bc0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80bc4:	bf14      	ite	ne
   80bc6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80bc8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80bca:	2001      	movs	r0, #1
   80bcc:	e022      	b.n	80c14 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80bce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80bd2:	4632      	mov	r2, r6
   80bd4:	4b10      	ldr	r3, [pc, #64]	; (80c18 <pio_configure_pin_group+0x94>)
   80bd6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80bd8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80bdc:	bf14      	ite	ne
   80bde:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80be0:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80be2:	2001      	movs	r0, #1
   80be4:	e016      	b.n	80c14 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80be6:	4b0d      	ldr	r3, [pc, #52]	; (80c1c <pio_configure_pin_group+0x98>)
   80be8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80bea:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80bec:	e012      	b.n	80c14 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80bee:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80bf2:	f005 0301 	and.w	r3, r5, #1
   80bf6:	9300      	str	r3, [sp, #0]
   80bf8:	4638      	mov	r0, r7
   80bfa:	4631      	mov	r1, r6
   80bfc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80c00:	bf14      	ite	ne
   80c02:	2200      	movne	r2, #0
   80c04:	2201      	moveq	r2, #1
   80c06:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80c0a:	4c05      	ldr	r4, [pc, #20]	; (80c20 <pio_configure_pin_group+0x9c>)
   80c0c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80c0e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80c10:	e000      	b.n	80c14 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80c12:	2000      	movs	r0, #0
	}

	return 1;
}
   80c14:	b003      	add	sp, #12
   80c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c18:	000809d5 	.word	0x000809d5
   80c1c:	00080a15 	.word	0x00080a15
   80c20:	00080a49 	.word	0x00080a49

00080c24 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80c28:	4604      	mov	r4, r0
   80c2a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80c2c:	4b10      	ldr	r3, [pc, #64]	; (80c70 <pio_handler_process+0x4c>)
   80c2e:	4798      	blx	r3
   80c30:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80c32:	4620      	mov	r0, r4
   80c34:	4b0f      	ldr	r3, [pc, #60]	; (80c74 <pio_handler_process+0x50>)
   80c36:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80c38:	4005      	ands	r5, r0
   80c3a:	d017      	beq.n	80c6c <pio_handler_process+0x48>
   80c3c:	4f0e      	ldr	r7, [pc, #56]	; (80c78 <pio_handler_process+0x54>)
   80c3e:	f107 040c 	add.w	r4, r7, #12
   80c42:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80c44:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80c48:	42b3      	cmp	r3, r6
   80c4a:	d10a      	bne.n	80c62 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80c4c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80c50:	4229      	tst	r1, r5
   80c52:	d006      	beq.n	80c62 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80c54:	6823      	ldr	r3, [r4, #0]
   80c56:	4630      	mov	r0, r6
   80c58:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80c5a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80c5e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80c62:	42bc      	cmp	r4, r7
   80c64:	d002      	beq.n	80c6c <pio_handler_process+0x48>
   80c66:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80c68:	2d00      	cmp	r5, #0
   80c6a:	d1eb      	bne.n	80c44 <pio_handler_process+0x20>
   80c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c70:	00080aa9 	.word	0x00080aa9
   80c74:	00080aad 	.word	0x00080aad
   80c78:	20070a84 	.word	0x20070a84

00080c7c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80c7e:	4c0b      	ldr	r4, [pc, #44]	; (80cac <pio_handler_set+0x30>)
   80c80:	6824      	ldr	r4, [r4, #0]
   80c82:	2c06      	cmp	r4, #6
   80c84:	d810      	bhi.n	80ca8 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   80c86:	4f0a      	ldr	r7, [pc, #40]	; (80cb0 <pio_handler_set+0x34>)
   80c88:	0126      	lsls	r6, r4, #4
   80c8a:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   80c8c:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   80c8e:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   80c90:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   80c92:	9906      	ldr	r1, [sp, #24]
   80c94:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   80c96:	3401      	adds	r4, #1
   80c98:	4904      	ldr	r1, [pc, #16]	; (80cac <pio_handler_set+0x30>)
   80c9a:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80c9c:	4611      	mov	r1, r2
   80c9e:	461a      	mov	r2, r3
   80ca0:	4b04      	ldr	r3, [pc, #16]	; (80cb4 <pio_handler_set+0x38>)
   80ca2:	4798      	blx	r3

	return 0;
   80ca4:	2000      	movs	r0, #0
   80ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80ca8:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80cac:	20070a80 	.word	0x20070a80
   80cb0:	20070a84 	.word	0x20070a84
   80cb4:	00080a71 	.word	0x00080a71

00080cb8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80cb8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80cba:	4802      	ldr	r0, [pc, #8]	; (80cc4 <PIOA_Handler+0xc>)
   80cbc:	210b      	movs	r1, #11
   80cbe:	4b02      	ldr	r3, [pc, #8]	; (80cc8 <PIOA_Handler+0x10>)
   80cc0:	4798      	blx	r3
   80cc2:	bd08      	pop	{r3, pc}
   80cc4:	400e0e00 	.word	0x400e0e00
   80cc8:	00080c25 	.word	0x00080c25

00080ccc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80ccc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80cce:	4802      	ldr	r0, [pc, #8]	; (80cd8 <PIOB_Handler+0xc>)
   80cd0:	210c      	movs	r1, #12
   80cd2:	4b02      	ldr	r3, [pc, #8]	; (80cdc <PIOB_Handler+0x10>)
   80cd4:	4798      	blx	r3
   80cd6:	bd08      	pop	{r3, pc}
   80cd8:	400e1000 	.word	0x400e1000
   80cdc:	00080c25 	.word	0x00080c25

00080ce0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80ce0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80ce2:	4802      	ldr	r0, [pc, #8]	; (80cec <PIOC_Handler+0xc>)
   80ce4:	210d      	movs	r1, #13
   80ce6:	4b02      	ldr	r3, [pc, #8]	; (80cf0 <PIOC_Handler+0x10>)
   80ce8:	4798      	blx	r3
   80cea:	bd08      	pop	{r3, pc}
   80cec:	400e1200 	.word	0x400e1200
   80cf0:	00080c25 	.word	0x00080c25

00080cf4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80cf4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80cf6:	4802      	ldr	r0, [pc, #8]	; (80d00 <PIOD_Handler+0xc>)
   80cf8:	210e      	movs	r1, #14
   80cfa:	4b02      	ldr	r3, [pc, #8]	; (80d04 <PIOD_Handler+0x10>)
   80cfc:	4798      	blx	r3
   80cfe:	bd08      	pop	{r3, pc}
   80d00:	400e1400 	.word	0x400e1400
   80d04:	00080c25 	.word	0x00080c25

00080d08 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80d08:	282c      	cmp	r0, #44	; 0x2c
   80d0a:	d820      	bhi.n	80d4e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80d0c:	281f      	cmp	r0, #31
   80d0e:	d80d      	bhi.n	80d2c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80d10:	4b12      	ldr	r3, [pc, #72]	; (80d5c <pmc_enable_periph_clk+0x54>)
   80d12:	699a      	ldr	r2, [r3, #24]
   80d14:	2301      	movs	r3, #1
   80d16:	4083      	lsls	r3, r0
   80d18:	401a      	ands	r2, r3
   80d1a:	4293      	cmp	r3, r2
   80d1c:	d019      	beq.n	80d52 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80d1e:	2301      	movs	r3, #1
   80d20:	fa03 f000 	lsl.w	r0, r3, r0
   80d24:	4b0d      	ldr	r3, [pc, #52]	; (80d5c <pmc_enable_periph_clk+0x54>)
   80d26:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80d28:	2000      	movs	r0, #0
   80d2a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80d2c:	4b0b      	ldr	r3, [pc, #44]	; (80d5c <pmc_enable_periph_clk+0x54>)
   80d2e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80d32:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80d34:	2301      	movs	r3, #1
   80d36:	4083      	lsls	r3, r0
   80d38:	401a      	ands	r2, r3
   80d3a:	4293      	cmp	r3, r2
   80d3c:	d00b      	beq.n	80d56 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80d3e:	2301      	movs	r3, #1
   80d40:	fa03 f000 	lsl.w	r0, r3, r0
   80d44:	4b05      	ldr	r3, [pc, #20]	; (80d5c <pmc_enable_periph_clk+0x54>)
   80d46:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80d4a:	2000      	movs	r0, #0
   80d4c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80d4e:	2001      	movs	r0, #1
   80d50:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80d52:	2000      	movs	r0, #0
   80d54:	4770      	bx	lr
   80d56:	2000      	movs	r0, #0
}
   80d58:	4770      	bx	lr
   80d5a:	bf00      	nop
   80d5c:	400e0600 	.word	0x400e0600

00080d60 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80d60:	b4f0      	push	{r4, r5, r6, r7}
   80d62:	b08c      	sub	sp, #48	; 0x30
   80d64:	4607      	mov	r7, r0
   80d66:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80d68:	ac01      	add	r4, sp, #4
   80d6a:	4d12      	ldr	r5, [pc, #72]	; (80db4 <pwm_clocks_generate+0x54>)
   80d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80d74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80d7c:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80d7e:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80d80:	f852 4f04 	ldr.w	r4, [r2, #4]!
   80d84:	fbb6 f4f4 	udiv	r4, r6, r4
   80d88:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80d8c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   80d90:	d903      	bls.n	80d9a <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   80d92:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80d94:	2b0b      	cmp	r3, #11
   80d96:	d1f3      	bne.n	80d80 <pwm_clocks_generate+0x20>
   80d98:	e004      	b.n	80da4 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80d9a:	2b0a      	cmp	r3, #10
   80d9c:	d805      	bhi.n	80daa <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   80d9e:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   80da2:	e004      	b.n	80dae <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80da4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80da8:	e001      	b.n	80dae <pwm_clocks_generate+0x4e>
   80daa:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   80dae:	b00c      	add	sp, #48	; 0x30
   80db0:	bcf0      	pop	{r4, r5, r6, r7}
   80db2:	4770      	bx	lr
   80db4:	000847e4 	.word	0x000847e4

00080db8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80db8:	b570      	push	{r4, r5, r6, lr}
   80dba:	4606      	mov	r6, r0
   80dbc:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80dbe:	6808      	ldr	r0, [r1, #0]
   80dc0:	b140      	cbz	r0, 80dd4 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80dc2:	6889      	ldr	r1, [r1, #8]
   80dc4:	4b0b      	ldr	r3, [pc, #44]	; (80df4 <pwm_init+0x3c>)
   80dc6:	4798      	blx	r3
   80dc8:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80dce:	4298      	cmp	r0, r3
   80dd0:	d101      	bne.n	80dd6 <pwm_init+0x1e>
   80dd2:	e00e      	b.n	80df2 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80dd4:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80dd6:	6860      	ldr	r0, [r4, #4]
   80dd8:	b140      	cbz	r0, 80dec <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80dda:	68a1      	ldr	r1, [r4, #8]
   80ddc:	4b05      	ldr	r3, [pc, #20]	; (80df4 <pwm_init+0x3c>)
   80dde:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80de4:	4298      	cmp	r0, r3
   80de6:	d004      	beq.n	80df2 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80de8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80dec:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80dee:	2000      	movs	r0, #0
   80df0:	bd70      	pop	{r4, r5, r6, pc}
}
   80df2:	bd70      	pop	{r4, r5, r6, pc}
   80df4:	00080d61 	.word	0x00080d61

00080df8 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80df8:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80dfa:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80dfc:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80dfe:	684a      	ldr	r2, [r1, #4]
   80e00:	f002 020f 	and.w	r2, r2, #15
   80e04:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80e06:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80e08:	432c      	orrs	r4, r5
   80e0a:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80e0c:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80e10:	7d8a      	ldrb	r2, [r1, #22]
   80e12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80e16:	7dca      	ldrb	r2, [r1, #23]
   80e18:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80e1c:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80e1e:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   80e22:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80e26:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80e2a:	68cc      	ldr	r4, [r1, #12]
   80e2c:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80e30:	690c      	ldr	r4, [r1, #16]
   80e32:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80e36:	7d8a      	ldrb	r2, [r1, #22]
   80e38:	b13a      	cbz	r2, 80e4a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80e3a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80e3c:	8b4a      	ldrh	r2, [r1, #26]
   80e3e:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80e42:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   80e46:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80e4a:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80e4c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80e50:	409a      	lsls	r2, r3
   80e52:	43d2      	mvns	r2, r2
   80e54:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80e56:	7fce      	ldrb	r6, [r1, #31]
   80e58:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80e5a:	7f8c      	ldrb	r4, [r1, #30]
   80e5c:	409c      	lsls	r4, r3
   80e5e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80e62:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80e64:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80e66:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80e68:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80e6a:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80e6e:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80e70:	f891 4020 	ldrb.w	r4, [r1, #32]
   80e74:	409c      	lsls	r4, r3
   80e76:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80e7a:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80e7c:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80e7e:	2201      	movs	r2, #1
   80e80:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80e82:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80e86:	b11c      	cbz	r4, 80e90 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80e88:	6a04      	ldr	r4, [r0, #32]
   80e8a:	4314      	orrs	r4, r2
   80e8c:	6204      	str	r4, [r0, #32]
   80e8e:	e003      	b.n	80e98 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80e90:	6a04      	ldr	r4, [r0, #32]
   80e92:	ea24 0402 	bic.w	r4, r4, r2
   80e96:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80e98:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80e9c:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80e9e:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80ea0:	bf0c      	ite	eq
   80ea2:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80ea4:	4394      	bicne	r4, r2
   80ea6:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80ea8:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80eac:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80eae:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80eb0:	bf0c      	ite	eq
   80eb2:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80eb6:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80eba:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80ebc:	2b03      	cmp	r3, #3
   80ebe:	d80c      	bhi.n	80eda <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80ec0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80ec2:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80ec4:	22ff      	movs	r2, #255	; 0xff
   80ec6:	409a      	lsls	r2, r3
   80ec8:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80ecc:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80ed0:	fa01 f303 	lsl.w	r3, r1, r3
   80ed4:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80ed6:	66c3      	str	r3, [r0, #108]	; 0x6c
   80ed8:	e00c      	b.n	80ef4 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80eda:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80edc:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80ede:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80ee0:	22ff      	movs	r2, #255	; 0xff
   80ee2:	409a      	lsls	r2, r3
   80ee4:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80ee8:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80eec:	fa01 f303 	lsl.w	r3, r1, r3
   80ef0:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80ef2:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80ef4:	2000      	movs	r0, #0
   80ef6:	bc70      	pop	{r4, r5, r6}
   80ef8:	4770      	bx	lr
   80efa:	bf00      	nop

00080efc <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80efc:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   80efe:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80f00:	690b      	ldr	r3, [r1, #16]
   80f02:	4293      	cmp	r3, r2
   80f04:	d306      	bcc.n	80f14 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80f06:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80f08:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80f0c:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   80f10:	2000      	movs	r0, #0
   80f12:	e001      	b.n	80f18 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80f14:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80f18:	f85d 4b04 	ldr.w	r4, [sp], #4
   80f1c:	4770      	bx	lr
   80f1e:	bf00      	nop

00080f20 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80f20:	2301      	movs	r3, #1
   80f22:	fa03 f101 	lsl.w	r1, r3, r1
   80f26:	6041      	str	r1, [r0, #4]
   80f28:	4770      	bx	lr
   80f2a:	bf00      	nop

00080f2c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80f2c:	2301      	movs	r3, #1
   80f2e:	fa03 f101 	lsl.w	r1, r3, r1
   80f32:	6081      	str	r1, [r0, #8]
   80f34:	4770      	bx	lr
   80f36:	bf00      	nop

00080f38 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80f38:	e7fe      	b.n	80f38 <Dummy_Handler>
   80f3a:	bf00      	nop

00080f3c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80f3c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80f3e:	4b1e      	ldr	r3, [pc, #120]	; (80fb8 <Reset_Handler+0x7c>)
   80f40:	4a1e      	ldr	r2, [pc, #120]	; (80fbc <Reset_Handler+0x80>)
   80f42:	429a      	cmp	r2, r3
   80f44:	d003      	beq.n	80f4e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80f46:	4b1e      	ldr	r3, [pc, #120]	; (80fc0 <Reset_Handler+0x84>)
   80f48:	4a1b      	ldr	r2, [pc, #108]	; (80fb8 <Reset_Handler+0x7c>)
   80f4a:	429a      	cmp	r2, r3
   80f4c:	d304      	bcc.n	80f58 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80f4e:	4b1d      	ldr	r3, [pc, #116]	; (80fc4 <Reset_Handler+0x88>)
   80f50:	4a1d      	ldr	r2, [pc, #116]	; (80fc8 <Reset_Handler+0x8c>)
   80f52:	429a      	cmp	r2, r3
   80f54:	d30f      	bcc.n	80f76 <Reset_Handler+0x3a>
   80f56:	e01a      	b.n	80f8e <Reset_Handler+0x52>
   80f58:	4b1c      	ldr	r3, [pc, #112]	; (80fcc <Reset_Handler+0x90>)
   80f5a:	4c1d      	ldr	r4, [pc, #116]	; (80fd0 <Reset_Handler+0x94>)
   80f5c:	1ae4      	subs	r4, r4, r3
   80f5e:	f024 0403 	bic.w	r4, r4, #3
   80f62:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80f64:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80f66:	4814      	ldr	r0, [pc, #80]	; (80fb8 <Reset_Handler+0x7c>)
   80f68:	4914      	ldr	r1, [pc, #80]	; (80fbc <Reset_Handler+0x80>)
   80f6a:	585a      	ldr	r2, [r3, r1]
   80f6c:	501a      	str	r2, [r3, r0]
   80f6e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80f70:	42a3      	cmp	r3, r4
   80f72:	d1fa      	bne.n	80f6a <Reset_Handler+0x2e>
   80f74:	e7eb      	b.n	80f4e <Reset_Handler+0x12>
   80f76:	4b17      	ldr	r3, [pc, #92]	; (80fd4 <Reset_Handler+0x98>)
   80f78:	4917      	ldr	r1, [pc, #92]	; (80fd8 <Reset_Handler+0x9c>)
   80f7a:	1ac9      	subs	r1, r1, r3
   80f7c:	f021 0103 	bic.w	r1, r1, #3
   80f80:	1d1a      	adds	r2, r3, #4
   80f82:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80f84:	2200      	movs	r2, #0
   80f86:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80f8a:	428b      	cmp	r3, r1
   80f8c:	d1fb      	bne.n	80f86 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80f8e:	4a13      	ldr	r2, [pc, #76]	; (80fdc <Reset_Handler+0xa0>)
   80f90:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80f94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80f98:	4911      	ldr	r1, [pc, #68]	; (80fe0 <Reset_Handler+0xa4>)
   80f9a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80f9c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80fa0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80fa4:	d203      	bcs.n	80fae <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80fa6:	688a      	ldr	r2, [r1, #8]
   80fa8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80fac:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80fae:	4b0d      	ldr	r3, [pc, #52]	; (80fe4 <Reset_Handler+0xa8>)
   80fb0:	4798      	blx	r3

	/* Branch to main function */
	main();
   80fb2:	4b0d      	ldr	r3, [pc, #52]	; (80fe8 <Reset_Handler+0xac>)
   80fb4:	4798      	blx	r3
   80fb6:	e7fe      	b.n	80fb6 <Reset_Handler+0x7a>
   80fb8:	20070000 	.word	0x20070000
   80fbc:	00084894 	.word	0x00084894
   80fc0:	200709b4 	.word	0x200709b4
   80fc4:	20070b8c 	.word	0x20070b8c
   80fc8:	200709b4 	.word	0x200709b4
   80fcc:	20070004 	.word	0x20070004
   80fd0:	200709b7 	.word	0x200709b7
   80fd4:	200709b0 	.word	0x200709b0
   80fd8:	20070b87 	.word	0x20070b87
   80fdc:	00080000 	.word	0x00080000
   80fe0:	e000ed00 	.word	0xe000ed00
   80fe4:	00081821 	.word	0x00081821
   80fe8:	00080149 	.word	0x00080149

00080fec <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80fec:	4b09      	ldr	r3, [pc, #36]	; (81014 <_sbrk+0x28>)
   80fee:	681b      	ldr	r3, [r3, #0]
   80ff0:	b913      	cbnz	r3, 80ff8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80ff2:	4a09      	ldr	r2, [pc, #36]	; (81018 <_sbrk+0x2c>)
   80ff4:	4b07      	ldr	r3, [pc, #28]	; (81014 <_sbrk+0x28>)
   80ff6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80ff8:	4b06      	ldr	r3, [pc, #24]	; (81014 <_sbrk+0x28>)
   80ffa:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80ffc:	181a      	adds	r2, r3, r0
   80ffe:	4907      	ldr	r1, [pc, #28]	; (8101c <_sbrk+0x30>)
   81000:	4291      	cmp	r1, r2
   81002:	db04      	blt.n	8100e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81004:	4610      	mov	r0, r2
   81006:	4a03      	ldr	r2, [pc, #12]	; (81014 <_sbrk+0x28>)
   81008:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8100a:	4618      	mov	r0, r3
   8100c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   8100e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81012:	4770      	bx	lr
   81014:	20070af4 	.word	0x20070af4
   81018:	20072b90 	.word	0x20072b90
   8101c:	20087ffc 	.word	0x20087ffc

00081020 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81020:	f04f 30ff 	mov.w	r0, #4294967295
   81024:	4770      	bx	lr
   81026:	bf00      	nop

00081028 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8102c:	604b      	str	r3, [r1, #4]

	return 0;
}
   8102e:	2000      	movs	r0, #0
   81030:	4770      	bx	lr
   81032:	bf00      	nop

00081034 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81034:	2001      	movs	r0, #1
   81036:	4770      	bx	lr

00081038 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81038:	2000      	movs	r0, #0
   8103a:	4770      	bx	lr

0008103c <__aeabi_drsub>:
   8103c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81040:	e002      	b.n	81048 <__adddf3>
   81042:	bf00      	nop

00081044 <__aeabi_dsub>:
   81044:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081048 <__adddf3>:
   81048:	b530      	push	{r4, r5, lr}
   8104a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8104e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81052:	ea94 0f05 	teq	r4, r5
   81056:	bf08      	it	eq
   81058:	ea90 0f02 	teqeq	r0, r2
   8105c:	bf1f      	itttt	ne
   8105e:	ea54 0c00 	orrsne.w	ip, r4, r0
   81062:	ea55 0c02 	orrsne.w	ip, r5, r2
   81066:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8106a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8106e:	f000 80e2 	beq.w	81236 <__adddf3+0x1ee>
   81072:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81076:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8107a:	bfb8      	it	lt
   8107c:	426d      	neglt	r5, r5
   8107e:	dd0c      	ble.n	8109a <__adddf3+0x52>
   81080:	442c      	add	r4, r5
   81082:	ea80 0202 	eor.w	r2, r0, r2
   81086:	ea81 0303 	eor.w	r3, r1, r3
   8108a:	ea82 0000 	eor.w	r0, r2, r0
   8108e:	ea83 0101 	eor.w	r1, r3, r1
   81092:	ea80 0202 	eor.w	r2, r0, r2
   81096:	ea81 0303 	eor.w	r3, r1, r3
   8109a:	2d36      	cmp	r5, #54	; 0x36
   8109c:	bf88      	it	hi
   8109e:	bd30      	pophi	{r4, r5, pc}
   810a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   810a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   810a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   810ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   810b0:	d002      	beq.n	810b8 <__adddf3+0x70>
   810b2:	4240      	negs	r0, r0
   810b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   810b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   810bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   810c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   810c4:	d002      	beq.n	810cc <__adddf3+0x84>
   810c6:	4252      	negs	r2, r2
   810c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   810cc:	ea94 0f05 	teq	r4, r5
   810d0:	f000 80a7 	beq.w	81222 <__adddf3+0x1da>
   810d4:	f1a4 0401 	sub.w	r4, r4, #1
   810d8:	f1d5 0e20 	rsbs	lr, r5, #32
   810dc:	db0d      	blt.n	810fa <__adddf3+0xb2>
   810de:	fa02 fc0e 	lsl.w	ip, r2, lr
   810e2:	fa22 f205 	lsr.w	r2, r2, r5
   810e6:	1880      	adds	r0, r0, r2
   810e8:	f141 0100 	adc.w	r1, r1, #0
   810ec:	fa03 f20e 	lsl.w	r2, r3, lr
   810f0:	1880      	adds	r0, r0, r2
   810f2:	fa43 f305 	asr.w	r3, r3, r5
   810f6:	4159      	adcs	r1, r3
   810f8:	e00e      	b.n	81118 <__adddf3+0xd0>
   810fa:	f1a5 0520 	sub.w	r5, r5, #32
   810fe:	f10e 0e20 	add.w	lr, lr, #32
   81102:	2a01      	cmp	r2, #1
   81104:	fa03 fc0e 	lsl.w	ip, r3, lr
   81108:	bf28      	it	cs
   8110a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8110e:	fa43 f305 	asr.w	r3, r3, r5
   81112:	18c0      	adds	r0, r0, r3
   81114:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81118:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8111c:	d507      	bpl.n	8112e <__adddf3+0xe6>
   8111e:	f04f 0e00 	mov.w	lr, #0
   81122:	f1dc 0c00 	rsbs	ip, ip, #0
   81126:	eb7e 0000 	sbcs.w	r0, lr, r0
   8112a:	eb6e 0101 	sbc.w	r1, lr, r1
   8112e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81132:	d31b      	bcc.n	8116c <__adddf3+0x124>
   81134:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81138:	d30c      	bcc.n	81154 <__adddf3+0x10c>
   8113a:	0849      	lsrs	r1, r1, #1
   8113c:	ea5f 0030 	movs.w	r0, r0, rrx
   81140:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81144:	f104 0401 	add.w	r4, r4, #1
   81148:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8114c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81150:	f080 809a 	bcs.w	81288 <__adddf3+0x240>
   81154:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81158:	bf08      	it	eq
   8115a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8115e:	f150 0000 	adcs.w	r0, r0, #0
   81162:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81166:	ea41 0105 	orr.w	r1, r1, r5
   8116a:	bd30      	pop	{r4, r5, pc}
   8116c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81170:	4140      	adcs	r0, r0
   81172:	eb41 0101 	adc.w	r1, r1, r1
   81176:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8117a:	f1a4 0401 	sub.w	r4, r4, #1
   8117e:	d1e9      	bne.n	81154 <__adddf3+0x10c>
   81180:	f091 0f00 	teq	r1, #0
   81184:	bf04      	itt	eq
   81186:	4601      	moveq	r1, r0
   81188:	2000      	moveq	r0, #0
   8118a:	fab1 f381 	clz	r3, r1
   8118e:	bf08      	it	eq
   81190:	3320      	addeq	r3, #32
   81192:	f1a3 030b 	sub.w	r3, r3, #11
   81196:	f1b3 0220 	subs.w	r2, r3, #32
   8119a:	da0c      	bge.n	811b6 <__adddf3+0x16e>
   8119c:	320c      	adds	r2, #12
   8119e:	dd08      	ble.n	811b2 <__adddf3+0x16a>
   811a0:	f102 0c14 	add.w	ip, r2, #20
   811a4:	f1c2 020c 	rsb	r2, r2, #12
   811a8:	fa01 f00c 	lsl.w	r0, r1, ip
   811ac:	fa21 f102 	lsr.w	r1, r1, r2
   811b0:	e00c      	b.n	811cc <__adddf3+0x184>
   811b2:	f102 0214 	add.w	r2, r2, #20
   811b6:	bfd8      	it	le
   811b8:	f1c2 0c20 	rsble	ip, r2, #32
   811bc:	fa01 f102 	lsl.w	r1, r1, r2
   811c0:	fa20 fc0c 	lsr.w	ip, r0, ip
   811c4:	bfdc      	itt	le
   811c6:	ea41 010c 	orrle.w	r1, r1, ip
   811ca:	4090      	lslle	r0, r2
   811cc:	1ae4      	subs	r4, r4, r3
   811ce:	bfa2      	ittt	ge
   811d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   811d4:	4329      	orrge	r1, r5
   811d6:	bd30      	popge	{r4, r5, pc}
   811d8:	ea6f 0404 	mvn.w	r4, r4
   811dc:	3c1f      	subs	r4, #31
   811de:	da1c      	bge.n	8121a <__adddf3+0x1d2>
   811e0:	340c      	adds	r4, #12
   811e2:	dc0e      	bgt.n	81202 <__adddf3+0x1ba>
   811e4:	f104 0414 	add.w	r4, r4, #20
   811e8:	f1c4 0220 	rsb	r2, r4, #32
   811ec:	fa20 f004 	lsr.w	r0, r0, r4
   811f0:	fa01 f302 	lsl.w	r3, r1, r2
   811f4:	ea40 0003 	orr.w	r0, r0, r3
   811f8:	fa21 f304 	lsr.w	r3, r1, r4
   811fc:	ea45 0103 	orr.w	r1, r5, r3
   81200:	bd30      	pop	{r4, r5, pc}
   81202:	f1c4 040c 	rsb	r4, r4, #12
   81206:	f1c4 0220 	rsb	r2, r4, #32
   8120a:	fa20 f002 	lsr.w	r0, r0, r2
   8120e:	fa01 f304 	lsl.w	r3, r1, r4
   81212:	ea40 0003 	orr.w	r0, r0, r3
   81216:	4629      	mov	r1, r5
   81218:	bd30      	pop	{r4, r5, pc}
   8121a:	fa21 f004 	lsr.w	r0, r1, r4
   8121e:	4629      	mov	r1, r5
   81220:	bd30      	pop	{r4, r5, pc}
   81222:	f094 0f00 	teq	r4, #0
   81226:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8122a:	bf06      	itte	eq
   8122c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81230:	3401      	addeq	r4, #1
   81232:	3d01      	subne	r5, #1
   81234:	e74e      	b.n	810d4 <__adddf3+0x8c>
   81236:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8123a:	bf18      	it	ne
   8123c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81240:	d029      	beq.n	81296 <__adddf3+0x24e>
   81242:	ea94 0f05 	teq	r4, r5
   81246:	bf08      	it	eq
   81248:	ea90 0f02 	teqeq	r0, r2
   8124c:	d005      	beq.n	8125a <__adddf3+0x212>
   8124e:	ea54 0c00 	orrs.w	ip, r4, r0
   81252:	bf04      	itt	eq
   81254:	4619      	moveq	r1, r3
   81256:	4610      	moveq	r0, r2
   81258:	bd30      	pop	{r4, r5, pc}
   8125a:	ea91 0f03 	teq	r1, r3
   8125e:	bf1e      	ittt	ne
   81260:	2100      	movne	r1, #0
   81262:	2000      	movne	r0, #0
   81264:	bd30      	popne	{r4, r5, pc}
   81266:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8126a:	d105      	bne.n	81278 <__adddf3+0x230>
   8126c:	0040      	lsls	r0, r0, #1
   8126e:	4149      	adcs	r1, r1
   81270:	bf28      	it	cs
   81272:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81276:	bd30      	pop	{r4, r5, pc}
   81278:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8127c:	bf3c      	itt	cc
   8127e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81282:	bd30      	popcc	{r4, r5, pc}
   81284:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81288:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8128c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81290:	f04f 0000 	mov.w	r0, #0
   81294:	bd30      	pop	{r4, r5, pc}
   81296:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8129a:	bf1a      	itte	ne
   8129c:	4619      	movne	r1, r3
   8129e:	4610      	movne	r0, r2
   812a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   812a4:	bf1c      	itt	ne
   812a6:	460b      	movne	r3, r1
   812a8:	4602      	movne	r2, r0
   812aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   812ae:	bf06      	itte	eq
   812b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   812b4:	ea91 0f03 	teqeq	r1, r3
   812b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   812bc:	bd30      	pop	{r4, r5, pc}
   812be:	bf00      	nop

000812c0 <__aeabi_ui2d>:
   812c0:	f090 0f00 	teq	r0, #0
   812c4:	bf04      	itt	eq
   812c6:	2100      	moveq	r1, #0
   812c8:	4770      	bxeq	lr
   812ca:	b530      	push	{r4, r5, lr}
   812cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   812d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   812d4:	f04f 0500 	mov.w	r5, #0
   812d8:	f04f 0100 	mov.w	r1, #0
   812dc:	e750      	b.n	81180 <__adddf3+0x138>
   812de:	bf00      	nop

000812e0 <__aeabi_i2d>:
   812e0:	f090 0f00 	teq	r0, #0
   812e4:	bf04      	itt	eq
   812e6:	2100      	moveq	r1, #0
   812e8:	4770      	bxeq	lr
   812ea:	b530      	push	{r4, r5, lr}
   812ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   812f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   812f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   812f8:	bf48      	it	mi
   812fa:	4240      	negmi	r0, r0
   812fc:	f04f 0100 	mov.w	r1, #0
   81300:	e73e      	b.n	81180 <__adddf3+0x138>
   81302:	bf00      	nop

00081304 <__aeabi_f2d>:
   81304:	0042      	lsls	r2, r0, #1
   81306:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8130a:	ea4f 0131 	mov.w	r1, r1, rrx
   8130e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81312:	bf1f      	itttt	ne
   81314:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81318:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8131c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81320:	4770      	bxne	lr
   81322:	f092 0f00 	teq	r2, #0
   81326:	bf14      	ite	ne
   81328:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8132c:	4770      	bxeq	lr
   8132e:	b530      	push	{r4, r5, lr}
   81330:	f44f 7460 	mov.w	r4, #896	; 0x380
   81334:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81338:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8133c:	e720      	b.n	81180 <__adddf3+0x138>
   8133e:	bf00      	nop

00081340 <__aeabi_ul2d>:
   81340:	ea50 0201 	orrs.w	r2, r0, r1
   81344:	bf08      	it	eq
   81346:	4770      	bxeq	lr
   81348:	b530      	push	{r4, r5, lr}
   8134a:	f04f 0500 	mov.w	r5, #0
   8134e:	e00a      	b.n	81366 <__aeabi_l2d+0x16>

00081350 <__aeabi_l2d>:
   81350:	ea50 0201 	orrs.w	r2, r0, r1
   81354:	bf08      	it	eq
   81356:	4770      	bxeq	lr
   81358:	b530      	push	{r4, r5, lr}
   8135a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8135e:	d502      	bpl.n	81366 <__aeabi_l2d+0x16>
   81360:	4240      	negs	r0, r0
   81362:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81366:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8136a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8136e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81372:	f43f aedc 	beq.w	8112e <__adddf3+0xe6>
   81376:	f04f 0203 	mov.w	r2, #3
   8137a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8137e:	bf18      	it	ne
   81380:	3203      	addne	r2, #3
   81382:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81386:	bf18      	it	ne
   81388:	3203      	addne	r2, #3
   8138a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8138e:	f1c2 0320 	rsb	r3, r2, #32
   81392:	fa00 fc03 	lsl.w	ip, r0, r3
   81396:	fa20 f002 	lsr.w	r0, r0, r2
   8139a:	fa01 fe03 	lsl.w	lr, r1, r3
   8139e:	ea40 000e 	orr.w	r0, r0, lr
   813a2:	fa21 f102 	lsr.w	r1, r1, r2
   813a6:	4414      	add	r4, r2
   813a8:	e6c1      	b.n	8112e <__adddf3+0xe6>
   813aa:	bf00      	nop

000813ac <__aeabi_dmul>:
   813ac:	b570      	push	{r4, r5, r6, lr}
   813ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   813b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   813b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   813ba:	bf1d      	ittte	ne
   813bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   813c0:	ea94 0f0c 	teqne	r4, ip
   813c4:	ea95 0f0c 	teqne	r5, ip
   813c8:	f000 f8de 	bleq	81588 <__aeabi_dmul+0x1dc>
   813cc:	442c      	add	r4, r5
   813ce:	ea81 0603 	eor.w	r6, r1, r3
   813d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   813d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   813da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   813de:	bf18      	it	ne
   813e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   813e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   813e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   813ec:	d038      	beq.n	81460 <__aeabi_dmul+0xb4>
   813ee:	fba0 ce02 	umull	ip, lr, r0, r2
   813f2:	f04f 0500 	mov.w	r5, #0
   813f6:	fbe1 e502 	umlal	lr, r5, r1, r2
   813fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   813fe:	fbe0 e503 	umlal	lr, r5, r0, r3
   81402:	f04f 0600 	mov.w	r6, #0
   81406:	fbe1 5603 	umlal	r5, r6, r1, r3
   8140a:	f09c 0f00 	teq	ip, #0
   8140e:	bf18      	it	ne
   81410:	f04e 0e01 	orrne.w	lr, lr, #1
   81414:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81418:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8141c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81420:	d204      	bcs.n	8142c <__aeabi_dmul+0x80>
   81422:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81426:	416d      	adcs	r5, r5
   81428:	eb46 0606 	adc.w	r6, r6, r6
   8142c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81430:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81434:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81438:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8143c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81440:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81444:	bf88      	it	hi
   81446:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8144a:	d81e      	bhi.n	8148a <__aeabi_dmul+0xde>
   8144c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81450:	bf08      	it	eq
   81452:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81456:	f150 0000 	adcs.w	r0, r0, #0
   8145a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8145e:	bd70      	pop	{r4, r5, r6, pc}
   81460:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81464:	ea46 0101 	orr.w	r1, r6, r1
   81468:	ea40 0002 	orr.w	r0, r0, r2
   8146c:	ea81 0103 	eor.w	r1, r1, r3
   81470:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81474:	bfc2      	ittt	gt
   81476:	ebd4 050c 	rsbsgt	r5, r4, ip
   8147a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8147e:	bd70      	popgt	{r4, r5, r6, pc}
   81480:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81484:	f04f 0e00 	mov.w	lr, #0
   81488:	3c01      	subs	r4, #1
   8148a:	f300 80ab 	bgt.w	815e4 <__aeabi_dmul+0x238>
   8148e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81492:	bfde      	ittt	le
   81494:	2000      	movle	r0, #0
   81496:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8149a:	bd70      	pople	{r4, r5, r6, pc}
   8149c:	f1c4 0400 	rsb	r4, r4, #0
   814a0:	3c20      	subs	r4, #32
   814a2:	da35      	bge.n	81510 <__aeabi_dmul+0x164>
   814a4:	340c      	adds	r4, #12
   814a6:	dc1b      	bgt.n	814e0 <__aeabi_dmul+0x134>
   814a8:	f104 0414 	add.w	r4, r4, #20
   814ac:	f1c4 0520 	rsb	r5, r4, #32
   814b0:	fa00 f305 	lsl.w	r3, r0, r5
   814b4:	fa20 f004 	lsr.w	r0, r0, r4
   814b8:	fa01 f205 	lsl.w	r2, r1, r5
   814bc:	ea40 0002 	orr.w	r0, r0, r2
   814c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   814c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   814c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   814cc:	fa21 f604 	lsr.w	r6, r1, r4
   814d0:	eb42 0106 	adc.w	r1, r2, r6
   814d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   814d8:	bf08      	it	eq
   814da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   814de:	bd70      	pop	{r4, r5, r6, pc}
   814e0:	f1c4 040c 	rsb	r4, r4, #12
   814e4:	f1c4 0520 	rsb	r5, r4, #32
   814e8:	fa00 f304 	lsl.w	r3, r0, r4
   814ec:	fa20 f005 	lsr.w	r0, r0, r5
   814f0:	fa01 f204 	lsl.w	r2, r1, r4
   814f4:	ea40 0002 	orr.w	r0, r0, r2
   814f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   814fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81500:	f141 0100 	adc.w	r1, r1, #0
   81504:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81508:	bf08      	it	eq
   8150a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8150e:	bd70      	pop	{r4, r5, r6, pc}
   81510:	f1c4 0520 	rsb	r5, r4, #32
   81514:	fa00 f205 	lsl.w	r2, r0, r5
   81518:	ea4e 0e02 	orr.w	lr, lr, r2
   8151c:	fa20 f304 	lsr.w	r3, r0, r4
   81520:	fa01 f205 	lsl.w	r2, r1, r5
   81524:	ea43 0302 	orr.w	r3, r3, r2
   81528:	fa21 f004 	lsr.w	r0, r1, r4
   8152c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81530:	fa21 f204 	lsr.w	r2, r1, r4
   81534:	ea20 0002 	bic.w	r0, r0, r2
   81538:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8153c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81540:	bf08      	it	eq
   81542:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81546:	bd70      	pop	{r4, r5, r6, pc}
   81548:	f094 0f00 	teq	r4, #0
   8154c:	d10f      	bne.n	8156e <__aeabi_dmul+0x1c2>
   8154e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81552:	0040      	lsls	r0, r0, #1
   81554:	eb41 0101 	adc.w	r1, r1, r1
   81558:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8155c:	bf08      	it	eq
   8155e:	3c01      	subeq	r4, #1
   81560:	d0f7      	beq.n	81552 <__aeabi_dmul+0x1a6>
   81562:	ea41 0106 	orr.w	r1, r1, r6
   81566:	f095 0f00 	teq	r5, #0
   8156a:	bf18      	it	ne
   8156c:	4770      	bxne	lr
   8156e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81572:	0052      	lsls	r2, r2, #1
   81574:	eb43 0303 	adc.w	r3, r3, r3
   81578:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8157c:	bf08      	it	eq
   8157e:	3d01      	subeq	r5, #1
   81580:	d0f7      	beq.n	81572 <__aeabi_dmul+0x1c6>
   81582:	ea43 0306 	orr.w	r3, r3, r6
   81586:	4770      	bx	lr
   81588:	ea94 0f0c 	teq	r4, ip
   8158c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81590:	bf18      	it	ne
   81592:	ea95 0f0c 	teqne	r5, ip
   81596:	d00c      	beq.n	815b2 <__aeabi_dmul+0x206>
   81598:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8159c:	bf18      	it	ne
   8159e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   815a2:	d1d1      	bne.n	81548 <__aeabi_dmul+0x19c>
   815a4:	ea81 0103 	eor.w	r1, r1, r3
   815a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   815ac:	f04f 0000 	mov.w	r0, #0
   815b0:	bd70      	pop	{r4, r5, r6, pc}
   815b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   815b6:	bf06      	itte	eq
   815b8:	4610      	moveq	r0, r2
   815ba:	4619      	moveq	r1, r3
   815bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   815c0:	d019      	beq.n	815f6 <__aeabi_dmul+0x24a>
   815c2:	ea94 0f0c 	teq	r4, ip
   815c6:	d102      	bne.n	815ce <__aeabi_dmul+0x222>
   815c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   815cc:	d113      	bne.n	815f6 <__aeabi_dmul+0x24a>
   815ce:	ea95 0f0c 	teq	r5, ip
   815d2:	d105      	bne.n	815e0 <__aeabi_dmul+0x234>
   815d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   815d8:	bf1c      	itt	ne
   815da:	4610      	movne	r0, r2
   815dc:	4619      	movne	r1, r3
   815de:	d10a      	bne.n	815f6 <__aeabi_dmul+0x24a>
   815e0:	ea81 0103 	eor.w	r1, r1, r3
   815e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   815e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   815ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   815f0:	f04f 0000 	mov.w	r0, #0
   815f4:	bd70      	pop	{r4, r5, r6, pc}
   815f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   815fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   815fe:	bd70      	pop	{r4, r5, r6, pc}

00081600 <__aeabi_ddiv>:
   81600:	b570      	push	{r4, r5, r6, lr}
   81602:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8160a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8160e:	bf1d      	ittte	ne
   81610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81614:	ea94 0f0c 	teqne	r4, ip
   81618:	ea95 0f0c 	teqne	r5, ip
   8161c:	f000 f8a7 	bleq	8176e <__aeabi_ddiv+0x16e>
   81620:	eba4 0405 	sub.w	r4, r4, r5
   81624:	ea81 0e03 	eor.w	lr, r1, r3
   81628:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8162c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81630:	f000 8088 	beq.w	81744 <__aeabi_ddiv+0x144>
   81634:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81638:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8163c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81640:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81644:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81648:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8164c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81650:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81654:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81658:	429d      	cmp	r5, r3
   8165a:	bf08      	it	eq
   8165c:	4296      	cmpeq	r6, r2
   8165e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81662:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81666:	d202      	bcs.n	8166e <__aeabi_ddiv+0x6e>
   81668:	085b      	lsrs	r3, r3, #1
   8166a:	ea4f 0232 	mov.w	r2, r2, rrx
   8166e:	1ab6      	subs	r6, r6, r2
   81670:	eb65 0503 	sbc.w	r5, r5, r3
   81674:	085b      	lsrs	r3, r3, #1
   81676:	ea4f 0232 	mov.w	r2, r2, rrx
   8167a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8167e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81682:	ebb6 0e02 	subs.w	lr, r6, r2
   81686:	eb75 0e03 	sbcs.w	lr, r5, r3
   8168a:	bf22      	ittt	cs
   8168c:	1ab6      	subcs	r6, r6, r2
   8168e:	4675      	movcs	r5, lr
   81690:	ea40 000c 	orrcs.w	r0, r0, ip
   81694:	085b      	lsrs	r3, r3, #1
   81696:	ea4f 0232 	mov.w	r2, r2, rrx
   8169a:	ebb6 0e02 	subs.w	lr, r6, r2
   8169e:	eb75 0e03 	sbcs.w	lr, r5, r3
   816a2:	bf22      	ittt	cs
   816a4:	1ab6      	subcs	r6, r6, r2
   816a6:	4675      	movcs	r5, lr
   816a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   816ac:	085b      	lsrs	r3, r3, #1
   816ae:	ea4f 0232 	mov.w	r2, r2, rrx
   816b2:	ebb6 0e02 	subs.w	lr, r6, r2
   816b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   816ba:	bf22      	ittt	cs
   816bc:	1ab6      	subcs	r6, r6, r2
   816be:	4675      	movcs	r5, lr
   816c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   816c4:	085b      	lsrs	r3, r3, #1
   816c6:	ea4f 0232 	mov.w	r2, r2, rrx
   816ca:	ebb6 0e02 	subs.w	lr, r6, r2
   816ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   816d2:	bf22      	ittt	cs
   816d4:	1ab6      	subcs	r6, r6, r2
   816d6:	4675      	movcs	r5, lr
   816d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   816dc:	ea55 0e06 	orrs.w	lr, r5, r6
   816e0:	d018      	beq.n	81714 <__aeabi_ddiv+0x114>
   816e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   816e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   816ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   816ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   816f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   816f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   816fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   816fe:	d1c0      	bne.n	81682 <__aeabi_ddiv+0x82>
   81700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81704:	d10b      	bne.n	8171e <__aeabi_ddiv+0x11e>
   81706:	ea41 0100 	orr.w	r1, r1, r0
   8170a:	f04f 0000 	mov.w	r0, #0
   8170e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81712:	e7b6      	b.n	81682 <__aeabi_ddiv+0x82>
   81714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81718:	bf04      	itt	eq
   8171a:	4301      	orreq	r1, r0
   8171c:	2000      	moveq	r0, #0
   8171e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81722:	bf88      	it	hi
   81724:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81728:	f63f aeaf 	bhi.w	8148a <__aeabi_dmul+0xde>
   8172c:	ebb5 0c03 	subs.w	ip, r5, r3
   81730:	bf04      	itt	eq
   81732:	ebb6 0c02 	subseq.w	ip, r6, r2
   81736:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8173a:	f150 0000 	adcs.w	r0, r0, #0
   8173e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81742:	bd70      	pop	{r4, r5, r6, pc}
   81744:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81748:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8174c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81750:	bfc2      	ittt	gt
   81752:	ebd4 050c 	rsbsgt	r5, r4, ip
   81756:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8175a:	bd70      	popgt	{r4, r5, r6, pc}
   8175c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81760:	f04f 0e00 	mov.w	lr, #0
   81764:	3c01      	subs	r4, #1
   81766:	e690      	b.n	8148a <__aeabi_dmul+0xde>
   81768:	ea45 0e06 	orr.w	lr, r5, r6
   8176c:	e68d      	b.n	8148a <__aeabi_dmul+0xde>
   8176e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81772:	ea94 0f0c 	teq	r4, ip
   81776:	bf08      	it	eq
   81778:	ea95 0f0c 	teqeq	r5, ip
   8177c:	f43f af3b 	beq.w	815f6 <__aeabi_dmul+0x24a>
   81780:	ea94 0f0c 	teq	r4, ip
   81784:	d10a      	bne.n	8179c <__aeabi_ddiv+0x19c>
   81786:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8178a:	f47f af34 	bne.w	815f6 <__aeabi_dmul+0x24a>
   8178e:	ea95 0f0c 	teq	r5, ip
   81792:	f47f af25 	bne.w	815e0 <__aeabi_dmul+0x234>
   81796:	4610      	mov	r0, r2
   81798:	4619      	mov	r1, r3
   8179a:	e72c      	b.n	815f6 <__aeabi_dmul+0x24a>
   8179c:	ea95 0f0c 	teq	r5, ip
   817a0:	d106      	bne.n	817b0 <__aeabi_ddiv+0x1b0>
   817a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   817a6:	f43f aefd 	beq.w	815a4 <__aeabi_dmul+0x1f8>
   817aa:	4610      	mov	r0, r2
   817ac:	4619      	mov	r1, r3
   817ae:	e722      	b.n	815f6 <__aeabi_dmul+0x24a>
   817b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   817b4:	bf18      	it	ne
   817b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   817ba:	f47f aec5 	bne.w	81548 <__aeabi_dmul+0x19c>
   817be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   817c2:	f47f af0d 	bne.w	815e0 <__aeabi_dmul+0x234>
   817c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   817ca:	f47f aeeb 	bne.w	815a4 <__aeabi_dmul+0x1f8>
   817ce:	e712      	b.n	815f6 <__aeabi_dmul+0x24a>

000817d0 <__aeabi_d2iz>:
   817d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   817d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   817d8:	d215      	bcs.n	81806 <__aeabi_d2iz+0x36>
   817da:	d511      	bpl.n	81800 <__aeabi_d2iz+0x30>
   817dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   817e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   817e4:	d912      	bls.n	8180c <__aeabi_d2iz+0x3c>
   817e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   817ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   817ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   817f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   817f6:	fa23 f002 	lsr.w	r0, r3, r2
   817fa:	bf18      	it	ne
   817fc:	4240      	negne	r0, r0
   817fe:	4770      	bx	lr
   81800:	f04f 0000 	mov.w	r0, #0
   81804:	4770      	bx	lr
   81806:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8180a:	d105      	bne.n	81818 <__aeabi_d2iz+0x48>
   8180c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81810:	bf08      	it	eq
   81812:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81816:	4770      	bx	lr
   81818:	f04f 0000 	mov.w	r0, #0
   8181c:	4770      	bx	lr
   8181e:	bf00      	nop

00081820 <__libc_init_array>:
   81820:	b570      	push	{r4, r5, r6, lr}
   81822:	4e0f      	ldr	r6, [pc, #60]	; (81860 <__libc_init_array+0x40>)
   81824:	4d0f      	ldr	r5, [pc, #60]	; (81864 <__libc_init_array+0x44>)
   81826:	1b76      	subs	r6, r6, r5
   81828:	10b6      	asrs	r6, r6, #2
   8182a:	d007      	beq.n	8183c <__libc_init_array+0x1c>
   8182c:	3d04      	subs	r5, #4
   8182e:	2400      	movs	r4, #0
   81830:	3401      	adds	r4, #1
   81832:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81836:	4798      	blx	r3
   81838:	42a6      	cmp	r6, r4
   8183a:	d1f9      	bne.n	81830 <__libc_init_array+0x10>
   8183c:	4e0a      	ldr	r6, [pc, #40]	; (81868 <__libc_init_array+0x48>)
   8183e:	4d0b      	ldr	r5, [pc, #44]	; (8186c <__libc_init_array+0x4c>)
   81840:	f003 f812 	bl	84868 <_init>
   81844:	1b76      	subs	r6, r6, r5
   81846:	10b6      	asrs	r6, r6, #2
   81848:	d008      	beq.n	8185c <__libc_init_array+0x3c>
   8184a:	3d04      	subs	r5, #4
   8184c:	2400      	movs	r4, #0
   8184e:	3401      	adds	r4, #1
   81850:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81854:	4798      	blx	r3
   81856:	42a6      	cmp	r6, r4
   81858:	d1f9      	bne.n	8184e <__libc_init_array+0x2e>
   8185a:	bd70      	pop	{r4, r5, r6, pc}
   8185c:	bd70      	pop	{r4, r5, r6, pc}
   8185e:	bf00      	nop
   81860:	00084874 	.word	0x00084874
   81864:	00084874 	.word	0x00084874
   81868:	0008487c 	.word	0x0008487c
   8186c:	00084874 	.word	0x00084874

00081870 <iprintf>:
   81870:	b40f      	push	{r0, r1, r2, r3}
   81872:	b510      	push	{r4, lr}
   81874:	4b07      	ldr	r3, [pc, #28]	; (81894 <iprintf+0x24>)
   81876:	b082      	sub	sp, #8
   81878:	ac04      	add	r4, sp, #16
   8187a:	f854 2b04 	ldr.w	r2, [r4], #4
   8187e:	6818      	ldr	r0, [r3, #0]
   81880:	4623      	mov	r3, r4
   81882:	6881      	ldr	r1, [r0, #8]
   81884:	9401      	str	r4, [sp, #4]
   81886:	f000 f945 	bl	81b14 <_vfiprintf_r>
   8188a:	b002      	add	sp, #8
   8188c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81890:	b004      	add	sp, #16
   81892:	4770      	bx	lr
   81894:	20070578 	.word	0x20070578

00081898 <memset>:
   81898:	b4f0      	push	{r4, r5, r6, r7}
   8189a:	0784      	lsls	r4, r0, #30
   8189c:	d043      	beq.n	81926 <memset+0x8e>
   8189e:	1e54      	subs	r4, r2, #1
   818a0:	2a00      	cmp	r2, #0
   818a2:	d03e      	beq.n	81922 <memset+0x8a>
   818a4:	b2cd      	uxtb	r5, r1
   818a6:	4603      	mov	r3, r0
   818a8:	e003      	b.n	818b2 <memset+0x1a>
   818aa:	1e62      	subs	r2, r4, #1
   818ac:	2c00      	cmp	r4, #0
   818ae:	d038      	beq.n	81922 <memset+0x8a>
   818b0:	4614      	mov	r4, r2
   818b2:	f803 5b01 	strb.w	r5, [r3], #1
   818b6:	079a      	lsls	r2, r3, #30
   818b8:	d1f7      	bne.n	818aa <memset+0x12>
   818ba:	2c03      	cmp	r4, #3
   818bc:	d92a      	bls.n	81914 <memset+0x7c>
   818be:	b2cd      	uxtb	r5, r1
   818c0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   818c4:	2c0f      	cmp	r4, #15
   818c6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   818ca:	d915      	bls.n	818f8 <memset+0x60>
   818cc:	f1a4 0710 	sub.w	r7, r4, #16
   818d0:	093f      	lsrs	r7, r7, #4
   818d2:	f103 0610 	add.w	r6, r3, #16
   818d6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   818da:	461a      	mov	r2, r3
   818dc:	6015      	str	r5, [r2, #0]
   818de:	6055      	str	r5, [r2, #4]
   818e0:	6095      	str	r5, [r2, #8]
   818e2:	60d5      	str	r5, [r2, #12]
   818e4:	3210      	adds	r2, #16
   818e6:	42b2      	cmp	r2, r6
   818e8:	d1f8      	bne.n	818dc <memset+0x44>
   818ea:	f004 040f 	and.w	r4, r4, #15
   818ee:	3701      	adds	r7, #1
   818f0:	2c03      	cmp	r4, #3
   818f2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   818f6:	d90d      	bls.n	81914 <memset+0x7c>
   818f8:	461e      	mov	r6, r3
   818fa:	4622      	mov	r2, r4
   818fc:	3a04      	subs	r2, #4
   818fe:	2a03      	cmp	r2, #3
   81900:	f846 5b04 	str.w	r5, [r6], #4
   81904:	d8fa      	bhi.n	818fc <memset+0x64>
   81906:	1f22      	subs	r2, r4, #4
   81908:	f022 0203 	bic.w	r2, r2, #3
   8190c:	3204      	adds	r2, #4
   8190e:	4413      	add	r3, r2
   81910:	f004 0403 	and.w	r4, r4, #3
   81914:	b12c      	cbz	r4, 81922 <memset+0x8a>
   81916:	b2c9      	uxtb	r1, r1
   81918:	441c      	add	r4, r3
   8191a:	f803 1b01 	strb.w	r1, [r3], #1
   8191e:	42a3      	cmp	r3, r4
   81920:	d1fb      	bne.n	8191a <memset+0x82>
   81922:	bcf0      	pop	{r4, r5, r6, r7}
   81924:	4770      	bx	lr
   81926:	4614      	mov	r4, r2
   81928:	4603      	mov	r3, r0
   8192a:	e7c6      	b.n	818ba <memset+0x22>

0008192c <setbuf>:
   8192c:	2900      	cmp	r1, #0
   8192e:	bf0c      	ite	eq
   81930:	2202      	moveq	r2, #2
   81932:	2200      	movne	r2, #0
   81934:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81938:	f000 b800 	b.w	8193c <setvbuf>

0008193c <setvbuf>:
   8193c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81940:	4d3c      	ldr	r5, [pc, #240]	; (81a34 <setvbuf+0xf8>)
   81942:	4604      	mov	r4, r0
   81944:	682d      	ldr	r5, [r5, #0]
   81946:	4688      	mov	r8, r1
   81948:	4616      	mov	r6, r2
   8194a:	461f      	mov	r7, r3
   8194c:	b115      	cbz	r5, 81954 <setvbuf+0x18>
   8194e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81950:	2b00      	cmp	r3, #0
   81952:	d04f      	beq.n	819f4 <setvbuf+0xb8>
   81954:	2e02      	cmp	r6, #2
   81956:	d830      	bhi.n	819ba <setvbuf+0x7e>
   81958:	2f00      	cmp	r7, #0
   8195a:	db2e      	blt.n	819ba <setvbuf+0x7e>
   8195c:	4628      	mov	r0, r5
   8195e:	4621      	mov	r1, r4
   81960:	f001 f856 	bl	82a10 <_fflush_r>
   81964:	89a3      	ldrh	r3, [r4, #12]
   81966:	2200      	movs	r2, #0
   81968:	6062      	str	r2, [r4, #4]
   8196a:	61a2      	str	r2, [r4, #24]
   8196c:	061a      	lsls	r2, r3, #24
   8196e:	d428      	bmi.n	819c2 <setvbuf+0x86>
   81970:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81974:	b29b      	uxth	r3, r3
   81976:	2e02      	cmp	r6, #2
   81978:	81a3      	strh	r3, [r4, #12]
   8197a:	d02d      	beq.n	819d8 <setvbuf+0x9c>
   8197c:	f1b8 0f00 	cmp.w	r8, #0
   81980:	d03c      	beq.n	819fc <setvbuf+0xc0>
   81982:	2e01      	cmp	r6, #1
   81984:	d013      	beq.n	819ae <setvbuf+0x72>
   81986:	b29b      	uxth	r3, r3
   81988:	f003 0008 	and.w	r0, r3, #8
   8198c:	4a2a      	ldr	r2, [pc, #168]	; (81a38 <setvbuf+0xfc>)
   8198e:	b280      	uxth	r0, r0
   81990:	63ea      	str	r2, [r5, #60]	; 0x3c
   81992:	f8c4 8000 	str.w	r8, [r4]
   81996:	f8c4 8010 	str.w	r8, [r4, #16]
   8199a:	6167      	str	r7, [r4, #20]
   8199c:	b178      	cbz	r0, 819be <setvbuf+0x82>
   8199e:	f013 0f03 	tst.w	r3, #3
   819a2:	bf18      	it	ne
   819a4:	2700      	movne	r7, #0
   819a6:	60a7      	str	r7, [r4, #8]
   819a8:	2000      	movs	r0, #0
   819aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   819ae:	f043 0301 	orr.w	r3, r3, #1
   819b2:	427a      	negs	r2, r7
   819b4:	81a3      	strh	r3, [r4, #12]
   819b6:	61a2      	str	r2, [r4, #24]
   819b8:	e7e5      	b.n	81986 <setvbuf+0x4a>
   819ba:	f04f 30ff 	mov.w	r0, #4294967295
   819be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   819c2:	4628      	mov	r0, r5
   819c4:	6921      	ldr	r1, [r4, #16]
   819c6:	f001 f983 	bl	82cd0 <_free_r>
   819ca:	89a3      	ldrh	r3, [r4, #12]
   819cc:	2e02      	cmp	r6, #2
   819ce:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   819d2:	b29b      	uxth	r3, r3
   819d4:	81a3      	strh	r3, [r4, #12]
   819d6:	d1d1      	bne.n	8197c <setvbuf+0x40>
   819d8:	2000      	movs	r0, #0
   819da:	f104 0243 	add.w	r2, r4, #67	; 0x43
   819de:	f043 0302 	orr.w	r3, r3, #2
   819e2:	2500      	movs	r5, #0
   819e4:	2101      	movs	r1, #1
   819e6:	81a3      	strh	r3, [r4, #12]
   819e8:	60a5      	str	r5, [r4, #8]
   819ea:	6022      	str	r2, [r4, #0]
   819ec:	6122      	str	r2, [r4, #16]
   819ee:	6161      	str	r1, [r4, #20]
   819f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   819f4:	4628      	mov	r0, r5
   819f6:	f001 f827 	bl	82a48 <__sinit>
   819fa:	e7ab      	b.n	81954 <setvbuf+0x18>
   819fc:	2f00      	cmp	r7, #0
   819fe:	bf08      	it	eq
   81a00:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81a04:	4638      	mov	r0, r7
   81a06:	f001 fc59 	bl	832bc <malloc>
   81a0a:	4680      	mov	r8, r0
   81a0c:	b128      	cbz	r0, 81a1a <setvbuf+0xde>
   81a0e:	89a3      	ldrh	r3, [r4, #12]
   81a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81a14:	b29b      	uxth	r3, r3
   81a16:	81a3      	strh	r3, [r4, #12]
   81a18:	e7b3      	b.n	81982 <setvbuf+0x46>
   81a1a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81a1e:	f001 fc4d 	bl	832bc <malloc>
   81a22:	4680      	mov	r8, r0
   81a24:	b918      	cbnz	r0, 81a2e <setvbuf+0xf2>
   81a26:	89a3      	ldrh	r3, [r4, #12]
   81a28:	f04f 30ff 	mov.w	r0, #4294967295
   81a2c:	e7d5      	b.n	819da <setvbuf+0x9e>
   81a2e:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81a32:	e7ec      	b.n	81a0e <setvbuf+0xd2>
   81a34:	20070578 	.word	0x20070578
   81a38:	00082a3d 	.word	0x00082a3d

00081a3c <strlen>:
   81a3c:	f020 0103 	bic.w	r1, r0, #3
   81a40:	f010 0003 	ands.w	r0, r0, #3
   81a44:	f1c0 0000 	rsb	r0, r0, #0
   81a48:	f851 3b04 	ldr.w	r3, [r1], #4
   81a4c:	f100 0c04 	add.w	ip, r0, #4
   81a50:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81a54:	f06f 0200 	mvn.w	r2, #0
   81a58:	bf1c      	itt	ne
   81a5a:	fa22 f20c 	lsrne.w	r2, r2, ip
   81a5e:	4313      	orrne	r3, r2
   81a60:	f04f 0c01 	mov.w	ip, #1
   81a64:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81a68:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81a6c:	eba3 020c 	sub.w	r2, r3, ip
   81a70:	ea22 0203 	bic.w	r2, r2, r3
   81a74:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81a78:	bf04      	itt	eq
   81a7a:	f851 3b04 	ldreq.w	r3, [r1], #4
   81a7e:	3004      	addeq	r0, #4
   81a80:	d0f4      	beq.n	81a6c <strlen+0x30>
   81a82:	f013 0fff 	tst.w	r3, #255	; 0xff
   81a86:	bf1f      	itttt	ne
   81a88:	3001      	addne	r0, #1
   81a8a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   81a8e:	3001      	addne	r0, #1
   81a90:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   81a94:	bf18      	it	ne
   81a96:	3001      	addne	r0, #1
   81a98:	4770      	bx	lr
   81a9a:	bf00      	nop

00081a9c <__sprint_r.part.0>:
   81a9c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81aa2:	049c      	lsls	r4, r3, #18
   81aa4:	460e      	mov	r6, r1
   81aa6:	4680      	mov	r8, r0
   81aa8:	4691      	mov	r9, r2
   81aaa:	d52a      	bpl.n	81b02 <__sprint_r.part.0+0x66>
   81aac:	6893      	ldr	r3, [r2, #8]
   81aae:	6812      	ldr	r2, [r2, #0]
   81ab0:	f102 0a08 	add.w	sl, r2, #8
   81ab4:	b31b      	cbz	r3, 81afe <__sprint_r.part.0+0x62>
   81ab6:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81aba:	08bf      	lsrs	r7, r7, #2
   81abc:	d017      	beq.n	81aee <__sprint_r.part.0+0x52>
   81abe:	3d04      	subs	r5, #4
   81ac0:	2400      	movs	r4, #0
   81ac2:	e001      	b.n	81ac8 <__sprint_r.part.0+0x2c>
   81ac4:	42a7      	cmp	r7, r4
   81ac6:	d010      	beq.n	81aea <__sprint_r.part.0+0x4e>
   81ac8:	4640      	mov	r0, r8
   81aca:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81ace:	4632      	mov	r2, r6
   81ad0:	f001 f850 	bl	82b74 <_fputwc_r>
   81ad4:	1c43      	adds	r3, r0, #1
   81ad6:	f104 0401 	add.w	r4, r4, #1
   81ada:	d1f3      	bne.n	81ac4 <__sprint_r.part.0+0x28>
   81adc:	2300      	movs	r3, #0
   81ade:	f8c9 3008 	str.w	r3, [r9, #8]
   81ae2:	f8c9 3004 	str.w	r3, [r9, #4]
   81ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81aea:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81aee:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81af2:	f8c9 3008 	str.w	r3, [r9, #8]
   81af6:	f10a 0a08 	add.w	sl, sl, #8
   81afa:	2b00      	cmp	r3, #0
   81afc:	d1db      	bne.n	81ab6 <__sprint_r.part.0+0x1a>
   81afe:	2000      	movs	r0, #0
   81b00:	e7ec      	b.n	81adc <__sprint_r.part.0+0x40>
   81b02:	f001 f9b1 	bl	82e68 <__sfvwrite_r>
   81b06:	2300      	movs	r3, #0
   81b08:	f8c9 3008 	str.w	r3, [r9, #8]
   81b0c:	f8c9 3004 	str.w	r3, [r9, #4]
   81b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081b14 <_vfiprintf_r>:
   81b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81b18:	b0b1      	sub	sp, #196	; 0xc4
   81b1a:	461c      	mov	r4, r3
   81b1c:	9102      	str	r1, [sp, #8]
   81b1e:	4690      	mov	r8, r2
   81b20:	9308      	str	r3, [sp, #32]
   81b22:	9006      	str	r0, [sp, #24]
   81b24:	b118      	cbz	r0, 81b2e <_vfiprintf_r+0x1a>
   81b26:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81b28:	2b00      	cmp	r3, #0
   81b2a:	f000 80e8 	beq.w	81cfe <_vfiprintf_r+0x1ea>
   81b2e:	9d02      	ldr	r5, [sp, #8]
   81b30:	89ab      	ldrh	r3, [r5, #12]
   81b32:	b29a      	uxth	r2, r3
   81b34:	0490      	lsls	r0, r2, #18
   81b36:	d407      	bmi.n	81b48 <_vfiprintf_r+0x34>
   81b38:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81b3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81b3e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81b42:	81ab      	strh	r3, [r5, #12]
   81b44:	b29a      	uxth	r2, r3
   81b46:	6669      	str	r1, [r5, #100]	; 0x64
   81b48:	0711      	lsls	r1, r2, #28
   81b4a:	f140 80b7 	bpl.w	81cbc <_vfiprintf_r+0x1a8>
   81b4e:	f8dd b008 	ldr.w	fp, [sp, #8]
   81b52:	f8db 3010 	ldr.w	r3, [fp, #16]
   81b56:	2b00      	cmp	r3, #0
   81b58:	f000 80b0 	beq.w	81cbc <_vfiprintf_r+0x1a8>
   81b5c:	f002 021a 	and.w	r2, r2, #26
   81b60:	2a0a      	cmp	r2, #10
   81b62:	f000 80b7 	beq.w	81cd4 <_vfiprintf_r+0x1c0>
   81b66:	2300      	movs	r3, #0
   81b68:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81b6c:	930a      	str	r3, [sp, #40]	; 0x28
   81b6e:	9315      	str	r3, [sp, #84]	; 0x54
   81b70:	9314      	str	r3, [sp, #80]	; 0x50
   81b72:	9309      	str	r3, [sp, #36]	; 0x24
   81b74:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81b78:	464e      	mov	r6, r9
   81b7a:	f898 3000 	ldrb.w	r3, [r8]
   81b7e:	2b00      	cmp	r3, #0
   81b80:	f000 84c8 	beq.w	82514 <_vfiprintf_r+0xa00>
   81b84:	2b25      	cmp	r3, #37	; 0x25
   81b86:	f000 84c5 	beq.w	82514 <_vfiprintf_r+0xa00>
   81b8a:	f108 0201 	add.w	r2, r8, #1
   81b8e:	e001      	b.n	81b94 <_vfiprintf_r+0x80>
   81b90:	2b25      	cmp	r3, #37	; 0x25
   81b92:	d004      	beq.n	81b9e <_vfiprintf_r+0x8a>
   81b94:	7813      	ldrb	r3, [r2, #0]
   81b96:	4614      	mov	r4, r2
   81b98:	3201      	adds	r2, #1
   81b9a:	2b00      	cmp	r3, #0
   81b9c:	d1f8      	bne.n	81b90 <_vfiprintf_r+0x7c>
   81b9e:	ebc8 0504 	rsb	r5, r8, r4
   81ba2:	b195      	cbz	r5, 81bca <_vfiprintf_r+0xb6>
   81ba4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81ba6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ba8:	3301      	adds	r3, #1
   81baa:	442a      	add	r2, r5
   81bac:	2b07      	cmp	r3, #7
   81bae:	f8c6 8000 	str.w	r8, [r6]
   81bb2:	6075      	str	r5, [r6, #4]
   81bb4:	9215      	str	r2, [sp, #84]	; 0x54
   81bb6:	9314      	str	r3, [sp, #80]	; 0x50
   81bb8:	dd7b      	ble.n	81cb2 <_vfiprintf_r+0x19e>
   81bba:	2a00      	cmp	r2, #0
   81bbc:	f040 84d5 	bne.w	8256a <_vfiprintf_r+0xa56>
   81bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
   81bc2:	9214      	str	r2, [sp, #80]	; 0x50
   81bc4:	4428      	add	r0, r5
   81bc6:	464e      	mov	r6, r9
   81bc8:	9009      	str	r0, [sp, #36]	; 0x24
   81bca:	7823      	ldrb	r3, [r4, #0]
   81bcc:	2b00      	cmp	r3, #0
   81bce:	f000 83ed 	beq.w	823ac <_vfiprintf_r+0x898>
   81bd2:	2100      	movs	r1, #0
   81bd4:	f04f 0200 	mov.w	r2, #0
   81bd8:	f04f 3cff 	mov.w	ip, #4294967295
   81bdc:	7863      	ldrb	r3, [r4, #1]
   81bde:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   81be2:	9104      	str	r1, [sp, #16]
   81be4:	468a      	mov	sl, r1
   81be6:	f104 0801 	add.w	r8, r4, #1
   81bea:	4608      	mov	r0, r1
   81bec:	4665      	mov	r5, ip
   81bee:	f108 0801 	add.w	r8, r8, #1
   81bf2:	f1a3 0220 	sub.w	r2, r3, #32
   81bf6:	2a58      	cmp	r2, #88	; 0x58
   81bf8:	f200 82d9 	bhi.w	821ae <_vfiprintf_r+0x69a>
   81bfc:	e8df f012 	tbh	[pc, r2, lsl #1]
   81c00:	02d702cb 	.word	0x02d702cb
   81c04:	02d202d7 	.word	0x02d202d7
   81c08:	02d702d7 	.word	0x02d702d7
   81c0c:	02d702d7 	.word	0x02d702d7
   81c10:	02d702d7 	.word	0x02d702d7
   81c14:	028f0282 	.word	0x028f0282
   81c18:	008402d7 	.word	0x008402d7
   81c1c:	02d70293 	.word	0x02d70293
   81c20:	0196012b 	.word	0x0196012b
   81c24:	01960196 	.word	0x01960196
   81c28:	01960196 	.word	0x01960196
   81c2c:	01960196 	.word	0x01960196
   81c30:	01960196 	.word	0x01960196
   81c34:	02d702d7 	.word	0x02d702d7
   81c38:	02d702d7 	.word	0x02d702d7
   81c3c:	02d702d7 	.word	0x02d702d7
   81c40:	02d702d7 	.word	0x02d702d7
   81c44:	02d702d7 	.word	0x02d702d7
   81c48:	02d70130 	.word	0x02d70130
   81c4c:	02d702d7 	.word	0x02d702d7
   81c50:	02d702d7 	.word	0x02d702d7
   81c54:	02d702d7 	.word	0x02d702d7
   81c58:	02d702d7 	.word	0x02d702d7
   81c5c:	017b02d7 	.word	0x017b02d7
   81c60:	02d702d7 	.word	0x02d702d7
   81c64:	02d702d7 	.word	0x02d702d7
   81c68:	01a402d7 	.word	0x01a402d7
   81c6c:	02d702d7 	.word	0x02d702d7
   81c70:	02d701bf 	.word	0x02d701bf
   81c74:	02d702d7 	.word	0x02d702d7
   81c78:	02d702d7 	.word	0x02d702d7
   81c7c:	02d702d7 	.word	0x02d702d7
   81c80:	02d702d7 	.word	0x02d702d7
   81c84:	01e402d7 	.word	0x01e402d7
   81c88:	02d701fa 	.word	0x02d701fa
   81c8c:	02d702d7 	.word	0x02d702d7
   81c90:	01fa0216 	.word	0x01fa0216
   81c94:	02d702d7 	.word	0x02d702d7
   81c98:	02d7021b 	.word	0x02d7021b
   81c9c:	00890228 	.word	0x00890228
   81ca0:	027d0266 	.word	0x027d0266
   81ca4:	023a02d7 	.word	0x023a02d7
   81ca8:	011902d7 	.word	0x011902d7
   81cac:	02d702d7 	.word	0x02d702d7
   81cb0:	02af      	.short	0x02af
   81cb2:	3608      	adds	r6, #8
   81cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
   81cb6:	4428      	add	r0, r5
   81cb8:	9009      	str	r0, [sp, #36]	; 0x24
   81cba:	e786      	b.n	81bca <_vfiprintf_r+0xb6>
   81cbc:	9806      	ldr	r0, [sp, #24]
   81cbe:	9902      	ldr	r1, [sp, #8]
   81cc0:	f000 fd90 	bl	827e4 <__swsetup_r>
   81cc4:	b9b0      	cbnz	r0, 81cf4 <_vfiprintf_r+0x1e0>
   81cc6:	9d02      	ldr	r5, [sp, #8]
   81cc8:	89aa      	ldrh	r2, [r5, #12]
   81cca:	f002 021a 	and.w	r2, r2, #26
   81cce:	2a0a      	cmp	r2, #10
   81cd0:	f47f af49 	bne.w	81b66 <_vfiprintf_r+0x52>
   81cd4:	f8dd b008 	ldr.w	fp, [sp, #8]
   81cd8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81cdc:	2b00      	cmp	r3, #0
   81cde:	f6ff af42 	blt.w	81b66 <_vfiprintf_r+0x52>
   81ce2:	9806      	ldr	r0, [sp, #24]
   81ce4:	4659      	mov	r1, fp
   81ce6:	4642      	mov	r2, r8
   81ce8:	4623      	mov	r3, r4
   81cea:	f000 fd3d 	bl	82768 <__sbprintf>
   81cee:	b031      	add	sp, #196	; 0xc4
   81cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81cf4:	f04f 30ff 	mov.w	r0, #4294967295
   81cf8:	b031      	add	sp, #196	; 0xc4
   81cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81cfe:	f000 fea3 	bl	82a48 <__sinit>
   81d02:	e714      	b.n	81b2e <_vfiprintf_r+0x1a>
   81d04:	4240      	negs	r0, r0
   81d06:	9308      	str	r3, [sp, #32]
   81d08:	f04a 0a04 	orr.w	sl, sl, #4
   81d0c:	f898 3000 	ldrb.w	r3, [r8]
   81d10:	e76d      	b.n	81bee <_vfiprintf_r+0xda>
   81d12:	f01a 0320 	ands.w	r3, sl, #32
   81d16:	9004      	str	r0, [sp, #16]
   81d18:	46ac      	mov	ip, r5
   81d1a:	f000 80f4 	beq.w	81f06 <_vfiprintf_r+0x3f2>
   81d1e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81d22:	f10b 0307 	add.w	r3, fp, #7
   81d26:	f023 0307 	bic.w	r3, r3, #7
   81d2a:	f103 0408 	add.w	r4, r3, #8
   81d2e:	9408      	str	r4, [sp, #32]
   81d30:	e9d3 4500 	ldrd	r4, r5, [r3]
   81d34:	2300      	movs	r3, #0
   81d36:	f04f 0000 	mov.w	r0, #0
   81d3a:	2100      	movs	r1, #0
   81d3c:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   81d40:	f8cd c014 	str.w	ip, [sp, #20]
   81d44:	9107      	str	r1, [sp, #28]
   81d46:	f1bc 0f00 	cmp.w	ip, #0
   81d4a:	bfa8      	it	ge
   81d4c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81d50:	ea54 0205 	orrs.w	r2, r4, r5
   81d54:	f040 80ad 	bne.w	81eb2 <_vfiprintf_r+0x39e>
   81d58:	f1bc 0f00 	cmp.w	ip, #0
   81d5c:	f040 80a9 	bne.w	81eb2 <_vfiprintf_r+0x39e>
   81d60:	2b00      	cmp	r3, #0
   81d62:	f040 83c0 	bne.w	824e6 <_vfiprintf_r+0x9d2>
   81d66:	f01a 0f01 	tst.w	sl, #1
   81d6a:	f000 83bc 	beq.w	824e6 <_vfiprintf_r+0x9d2>
   81d6e:	2330      	movs	r3, #48	; 0x30
   81d70:	af30      	add	r7, sp, #192	; 0xc0
   81d72:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81d76:	ebc7 0409 	rsb	r4, r7, r9
   81d7a:	9405      	str	r4, [sp, #20]
   81d7c:	f8dd b014 	ldr.w	fp, [sp, #20]
   81d80:	9c07      	ldr	r4, [sp, #28]
   81d82:	45e3      	cmp	fp, ip
   81d84:	bfb8      	it	lt
   81d86:	46e3      	movlt	fp, ip
   81d88:	f8cd b00c 	str.w	fp, [sp, #12]
   81d8c:	b11c      	cbz	r4, 81d96 <_vfiprintf_r+0x282>
   81d8e:	f10b 0b01 	add.w	fp, fp, #1
   81d92:	f8cd b00c 	str.w	fp, [sp, #12]
   81d96:	f01a 0502 	ands.w	r5, sl, #2
   81d9a:	9507      	str	r5, [sp, #28]
   81d9c:	d005      	beq.n	81daa <_vfiprintf_r+0x296>
   81d9e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81da2:	f10b 0b02 	add.w	fp, fp, #2
   81da6:	f8cd b00c 	str.w	fp, [sp, #12]
   81daa:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81dae:	930b      	str	r3, [sp, #44]	; 0x2c
   81db0:	f040 821b 	bne.w	821ea <_vfiprintf_r+0x6d6>
   81db4:	9d04      	ldr	r5, [sp, #16]
   81db6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81dba:	ebcb 0405 	rsb	r4, fp, r5
   81dbe:	2c00      	cmp	r4, #0
   81dc0:	f340 8213 	ble.w	821ea <_vfiprintf_r+0x6d6>
   81dc4:	2c10      	cmp	r4, #16
   81dc6:	f340 8489 	ble.w	826dc <_vfiprintf_r+0xbc8>
   81dca:	4dbe      	ldr	r5, [pc, #760]	; (820c4 <_vfiprintf_r+0x5b0>)
   81dcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81dce:	462b      	mov	r3, r5
   81dd0:	9814      	ldr	r0, [sp, #80]	; 0x50
   81dd2:	4625      	mov	r5, r4
   81dd4:	f04f 0b10 	mov.w	fp, #16
   81dd8:	4664      	mov	r4, ip
   81dda:	46b4      	mov	ip, r6
   81ddc:	461e      	mov	r6, r3
   81dde:	e006      	b.n	81dee <_vfiprintf_r+0x2da>
   81de0:	1c83      	adds	r3, r0, #2
   81de2:	f10c 0c08 	add.w	ip, ip, #8
   81de6:	4608      	mov	r0, r1
   81de8:	3d10      	subs	r5, #16
   81dea:	2d10      	cmp	r5, #16
   81dec:	dd11      	ble.n	81e12 <_vfiprintf_r+0x2fe>
   81dee:	1c41      	adds	r1, r0, #1
   81df0:	3210      	adds	r2, #16
   81df2:	2907      	cmp	r1, #7
   81df4:	9215      	str	r2, [sp, #84]	; 0x54
   81df6:	e88c 0840 	stmia.w	ip, {r6, fp}
   81dfa:	9114      	str	r1, [sp, #80]	; 0x50
   81dfc:	ddf0      	ble.n	81de0 <_vfiprintf_r+0x2cc>
   81dfe:	2a00      	cmp	r2, #0
   81e00:	f040 81e6 	bne.w	821d0 <_vfiprintf_r+0x6bc>
   81e04:	3d10      	subs	r5, #16
   81e06:	2d10      	cmp	r5, #16
   81e08:	f04f 0301 	mov.w	r3, #1
   81e0c:	4610      	mov	r0, r2
   81e0e:	46cc      	mov	ip, r9
   81e10:	dced      	bgt.n	81dee <_vfiprintf_r+0x2da>
   81e12:	4631      	mov	r1, r6
   81e14:	4666      	mov	r6, ip
   81e16:	46a4      	mov	ip, r4
   81e18:	462c      	mov	r4, r5
   81e1a:	460d      	mov	r5, r1
   81e1c:	4422      	add	r2, r4
   81e1e:	2b07      	cmp	r3, #7
   81e20:	9215      	str	r2, [sp, #84]	; 0x54
   81e22:	6035      	str	r5, [r6, #0]
   81e24:	6074      	str	r4, [r6, #4]
   81e26:	9314      	str	r3, [sp, #80]	; 0x50
   81e28:	f300 836d 	bgt.w	82506 <_vfiprintf_r+0x9f2>
   81e2c:	3608      	adds	r6, #8
   81e2e:	1c59      	adds	r1, r3, #1
   81e30:	e1de      	b.n	821f0 <_vfiprintf_r+0x6dc>
   81e32:	f01a 0f20 	tst.w	sl, #32
   81e36:	9004      	str	r0, [sp, #16]
   81e38:	46ac      	mov	ip, r5
   81e3a:	f000 808d 	beq.w	81f58 <_vfiprintf_r+0x444>
   81e3e:	9d08      	ldr	r5, [sp, #32]
   81e40:	1deb      	adds	r3, r5, #7
   81e42:	f023 0307 	bic.w	r3, r3, #7
   81e46:	f103 0b08 	add.w	fp, r3, #8
   81e4a:	e9d3 4500 	ldrd	r4, r5, [r3]
   81e4e:	f8cd b020 	str.w	fp, [sp, #32]
   81e52:	2301      	movs	r3, #1
   81e54:	e76f      	b.n	81d36 <_vfiprintf_r+0x222>
   81e56:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81e5a:	f898 3000 	ldrb.w	r3, [r8]
   81e5e:	e6c6      	b.n	81bee <_vfiprintf_r+0xda>
   81e60:	f04a 0a10 	orr.w	sl, sl, #16
   81e64:	f01a 0f20 	tst.w	sl, #32
   81e68:	9004      	str	r0, [sp, #16]
   81e6a:	46ac      	mov	ip, r5
   81e6c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81e70:	f000 80c8 	beq.w	82004 <_vfiprintf_r+0x4f0>
   81e74:	9c08      	ldr	r4, [sp, #32]
   81e76:	1de1      	adds	r1, r4, #7
   81e78:	f021 0107 	bic.w	r1, r1, #7
   81e7c:	e9d1 2300 	ldrd	r2, r3, [r1]
   81e80:	3108      	adds	r1, #8
   81e82:	9108      	str	r1, [sp, #32]
   81e84:	4614      	mov	r4, r2
   81e86:	461d      	mov	r5, r3
   81e88:	2a00      	cmp	r2, #0
   81e8a:	f173 0b00 	sbcs.w	fp, r3, #0
   81e8e:	f2c0 83ce 	blt.w	8262e <_vfiprintf_r+0xb1a>
   81e92:	f1bc 0f00 	cmp.w	ip, #0
   81e96:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81e9a:	bfa8      	it	ge
   81e9c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81ea0:	ea54 0205 	orrs.w	r2, r4, r5
   81ea4:	9007      	str	r0, [sp, #28]
   81ea6:	f8cd c014 	str.w	ip, [sp, #20]
   81eaa:	f04f 0301 	mov.w	r3, #1
   81eae:	f43f af53 	beq.w	81d58 <_vfiprintf_r+0x244>
   81eb2:	2b01      	cmp	r3, #1
   81eb4:	f000 8319 	beq.w	824ea <_vfiprintf_r+0x9d6>
   81eb8:	2b02      	cmp	r3, #2
   81eba:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81ebe:	f040 824c 	bne.w	8235a <_vfiprintf_r+0x846>
   81ec2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81ec6:	4619      	mov	r1, r3
   81ec8:	f004 000f 	and.w	r0, r4, #15
   81ecc:	0922      	lsrs	r2, r4, #4
   81ece:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81ed2:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81ed6:	092b      	lsrs	r3, r5, #4
   81ed8:	7008      	strb	r0, [r1, #0]
   81eda:	ea52 0003 	orrs.w	r0, r2, r3
   81ede:	460f      	mov	r7, r1
   81ee0:	4614      	mov	r4, r2
   81ee2:	461d      	mov	r5, r3
   81ee4:	f101 31ff 	add.w	r1, r1, #4294967295
   81ee8:	d1ee      	bne.n	81ec8 <_vfiprintf_r+0x3b4>
   81eea:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81eee:	ebc7 0309 	rsb	r3, r7, r9
   81ef2:	9305      	str	r3, [sp, #20]
   81ef4:	e742      	b.n	81d7c <_vfiprintf_r+0x268>
   81ef6:	f04a 0a10 	orr.w	sl, sl, #16
   81efa:	f01a 0320 	ands.w	r3, sl, #32
   81efe:	9004      	str	r0, [sp, #16]
   81f00:	46ac      	mov	ip, r5
   81f02:	f47f af0c 	bne.w	81d1e <_vfiprintf_r+0x20a>
   81f06:	f01a 0210 	ands.w	r2, sl, #16
   81f0a:	f040 8311 	bne.w	82530 <_vfiprintf_r+0xa1c>
   81f0e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   81f12:	f000 830d 	beq.w	82530 <_vfiprintf_r+0xa1c>
   81f16:	f8dd b020 	ldr.w	fp, [sp, #32]
   81f1a:	4613      	mov	r3, r2
   81f1c:	f8bb 4000 	ldrh.w	r4, [fp]
   81f20:	f10b 0b04 	add.w	fp, fp, #4
   81f24:	2500      	movs	r5, #0
   81f26:	f8cd b020 	str.w	fp, [sp, #32]
   81f2a:	e704      	b.n	81d36 <_vfiprintf_r+0x222>
   81f2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81f30:	2000      	movs	r0, #0
   81f32:	f818 3b01 	ldrb.w	r3, [r8], #1
   81f36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81f3a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81f3e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81f42:	2a09      	cmp	r2, #9
   81f44:	d9f5      	bls.n	81f32 <_vfiprintf_r+0x41e>
   81f46:	e654      	b.n	81bf2 <_vfiprintf_r+0xde>
   81f48:	f04a 0a10 	orr.w	sl, sl, #16
   81f4c:	f01a 0f20 	tst.w	sl, #32
   81f50:	9004      	str	r0, [sp, #16]
   81f52:	46ac      	mov	ip, r5
   81f54:	f47f af73 	bne.w	81e3e <_vfiprintf_r+0x32a>
   81f58:	f01a 0f10 	tst.w	sl, #16
   81f5c:	f040 82ef 	bne.w	8253e <_vfiprintf_r+0xa2a>
   81f60:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81f64:	f000 82eb 	beq.w	8253e <_vfiprintf_r+0xa2a>
   81f68:	f8dd b020 	ldr.w	fp, [sp, #32]
   81f6c:	2500      	movs	r5, #0
   81f6e:	f8bb 4000 	ldrh.w	r4, [fp]
   81f72:	f10b 0b04 	add.w	fp, fp, #4
   81f76:	2301      	movs	r3, #1
   81f78:	f8cd b020 	str.w	fp, [sp, #32]
   81f7c:	e6db      	b.n	81d36 <_vfiprintf_r+0x222>
   81f7e:	46ac      	mov	ip, r5
   81f80:	4d51      	ldr	r5, [pc, #324]	; (820c8 <_vfiprintf_r+0x5b4>)
   81f82:	f01a 0f20 	tst.w	sl, #32
   81f86:	9004      	str	r0, [sp, #16]
   81f88:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81f8c:	950a      	str	r5, [sp, #40]	; 0x28
   81f8e:	f000 80f0 	beq.w	82172 <_vfiprintf_r+0x65e>
   81f92:	9d08      	ldr	r5, [sp, #32]
   81f94:	1dea      	adds	r2, r5, #7
   81f96:	f022 0207 	bic.w	r2, r2, #7
   81f9a:	f102 0b08 	add.w	fp, r2, #8
   81f9e:	f8cd b020 	str.w	fp, [sp, #32]
   81fa2:	e9d2 4500 	ldrd	r4, r5, [r2]
   81fa6:	f01a 0f01 	tst.w	sl, #1
   81faa:	f000 82aa 	beq.w	82502 <_vfiprintf_r+0x9ee>
   81fae:	ea54 0b05 	orrs.w	fp, r4, r5
   81fb2:	f000 82a6 	beq.w	82502 <_vfiprintf_r+0x9ee>
   81fb6:	2230      	movs	r2, #48	; 0x30
   81fb8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81fbc:	f04a 0a02 	orr.w	sl, sl, #2
   81fc0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81fc4:	2302      	movs	r3, #2
   81fc6:	e6b6      	b.n	81d36 <_vfiprintf_r+0x222>
   81fc8:	9b08      	ldr	r3, [sp, #32]
   81fca:	f8dd b020 	ldr.w	fp, [sp, #32]
   81fce:	681b      	ldr	r3, [r3, #0]
   81fd0:	2401      	movs	r4, #1
   81fd2:	f04f 0500 	mov.w	r5, #0
   81fd6:	f10b 0b04 	add.w	fp, fp, #4
   81fda:	9004      	str	r0, [sp, #16]
   81fdc:	9403      	str	r4, [sp, #12]
   81fde:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81fe2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81fe6:	f8cd b020 	str.w	fp, [sp, #32]
   81fea:	9405      	str	r4, [sp, #20]
   81fec:	af16      	add	r7, sp, #88	; 0x58
   81fee:	f04f 0c00 	mov.w	ip, #0
   81ff2:	e6d0      	b.n	81d96 <_vfiprintf_r+0x282>
   81ff4:	f01a 0f20 	tst.w	sl, #32
   81ff8:	9004      	str	r0, [sp, #16]
   81ffa:	46ac      	mov	ip, r5
   81ffc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82000:	f47f af38 	bne.w	81e74 <_vfiprintf_r+0x360>
   82004:	f01a 0f10 	tst.w	sl, #16
   82008:	f040 82a7 	bne.w	8255a <_vfiprintf_r+0xa46>
   8200c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82010:	f000 82a3 	beq.w	8255a <_vfiprintf_r+0xa46>
   82014:	f8dd b020 	ldr.w	fp, [sp, #32]
   82018:	f9bb 4000 	ldrsh.w	r4, [fp]
   8201c:	f10b 0b04 	add.w	fp, fp, #4
   82020:	17e5      	asrs	r5, r4, #31
   82022:	4622      	mov	r2, r4
   82024:	462b      	mov	r3, r5
   82026:	f8cd b020 	str.w	fp, [sp, #32]
   8202a:	e72d      	b.n	81e88 <_vfiprintf_r+0x374>
   8202c:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   82030:	f898 3000 	ldrb.w	r3, [r8]
   82034:	e5db      	b.n	81bee <_vfiprintf_r+0xda>
   82036:	f898 3000 	ldrb.w	r3, [r8]
   8203a:	4642      	mov	r2, r8
   8203c:	2b6c      	cmp	r3, #108	; 0x6c
   8203e:	bf03      	ittte	eq
   82040:	f108 0801 	addeq.w	r8, r8, #1
   82044:	f04a 0a20 	orreq.w	sl, sl, #32
   82048:	7853      	ldrbeq	r3, [r2, #1]
   8204a:	f04a 0a10 	orrne.w	sl, sl, #16
   8204e:	e5ce      	b.n	81bee <_vfiprintf_r+0xda>
   82050:	f01a 0f20 	tst.w	sl, #32
   82054:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82058:	f000 82f7 	beq.w	8264a <_vfiprintf_r+0xb36>
   8205c:	9c08      	ldr	r4, [sp, #32]
   8205e:	6821      	ldr	r1, [r4, #0]
   82060:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82062:	17e5      	asrs	r5, r4, #31
   82064:	462b      	mov	r3, r5
   82066:	9d08      	ldr	r5, [sp, #32]
   82068:	4622      	mov	r2, r4
   8206a:	3504      	adds	r5, #4
   8206c:	9508      	str	r5, [sp, #32]
   8206e:	e9c1 2300 	strd	r2, r3, [r1]
   82072:	e582      	b.n	81b7a <_vfiprintf_r+0x66>
   82074:	9c08      	ldr	r4, [sp, #32]
   82076:	46ac      	mov	ip, r5
   82078:	6827      	ldr	r7, [r4, #0]
   8207a:	f04f 0500 	mov.w	r5, #0
   8207e:	9004      	str	r0, [sp, #16]
   82080:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82084:	3404      	adds	r4, #4
   82086:	2f00      	cmp	r7, #0
   82088:	f000 8332 	beq.w	826f0 <_vfiprintf_r+0xbdc>
   8208c:	f1bc 0f00 	cmp.w	ip, #0
   82090:	4638      	mov	r0, r7
   82092:	f2c0 8307 	blt.w	826a4 <_vfiprintf_r+0xb90>
   82096:	4662      	mov	r2, ip
   82098:	2100      	movs	r1, #0
   8209a:	f8cd c004 	str.w	ip, [sp, #4]
   8209e:	f001 fbb1 	bl	83804 <memchr>
   820a2:	f8dd c004 	ldr.w	ip, [sp, #4]
   820a6:	2800      	cmp	r0, #0
   820a8:	f000 833a 	beq.w	82720 <_vfiprintf_r+0xc0c>
   820ac:	1bc0      	subs	r0, r0, r7
   820ae:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   820b2:	4560      	cmp	r0, ip
   820b4:	bfa8      	it	ge
   820b6:	4660      	movge	r0, ip
   820b8:	9005      	str	r0, [sp, #20]
   820ba:	9408      	str	r4, [sp, #32]
   820bc:	9507      	str	r5, [sp, #28]
   820be:	f04f 0c00 	mov.w	ip, #0
   820c2:	e65b      	b.n	81d7c <_vfiprintf_r+0x268>
   820c4:	00084858 	.word	0x00084858
   820c8:	00084818 	.word	0x00084818
   820cc:	9b08      	ldr	r3, [sp, #32]
   820ce:	f8dd b020 	ldr.w	fp, [sp, #32]
   820d2:	9004      	str	r0, [sp, #16]
   820d4:	48b2      	ldr	r0, [pc, #712]	; (823a0 <_vfiprintf_r+0x88c>)
   820d6:	681c      	ldr	r4, [r3, #0]
   820d8:	2230      	movs	r2, #48	; 0x30
   820da:	2378      	movs	r3, #120	; 0x78
   820dc:	f10b 0b04 	add.w	fp, fp, #4
   820e0:	46ac      	mov	ip, r5
   820e2:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   820e6:	f04a 0a02 	orr.w	sl, sl, #2
   820ea:	f8cd b020 	str.w	fp, [sp, #32]
   820ee:	2500      	movs	r5, #0
   820f0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   820f4:	900a      	str	r0, [sp, #40]	; 0x28
   820f6:	2302      	movs	r3, #2
   820f8:	e61d      	b.n	81d36 <_vfiprintf_r+0x222>
   820fa:	f04a 0a20 	orr.w	sl, sl, #32
   820fe:	f898 3000 	ldrb.w	r3, [r8]
   82102:	e574      	b.n	81bee <_vfiprintf_r+0xda>
   82104:	f8dd b020 	ldr.w	fp, [sp, #32]
   82108:	f8db 0000 	ldr.w	r0, [fp]
   8210c:	f10b 0304 	add.w	r3, fp, #4
   82110:	2800      	cmp	r0, #0
   82112:	f6ff adf7 	blt.w	81d04 <_vfiprintf_r+0x1f0>
   82116:	9308      	str	r3, [sp, #32]
   82118:	f898 3000 	ldrb.w	r3, [r8]
   8211c:	e567      	b.n	81bee <_vfiprintf_r+0xda>
   8211e:	f898 3000 	ldrb.w	r3, [r8]
   82122:	212b      	movs	r1, #43	; 0x2b
   82124:	e563      	b.n	81bee <_vfiprintf_r+0xda>
   82126:	f898 3000 	ldrb.w	r3, [r8]
   8212a:	f108 0401 	add.w	r4, r8, #1
   8212e:	2b2a      	cmp	r3, #42	; 0x2a
   82130:	f000 8305 	beq.w	8273e <_vfiprintf_r+0xc2a>
   82134:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82138:	2a09      	cmp	r2, #9
   8213a:	bf98      	it	ls
   8213c:	2500      	movls	r5, #0
   8213e:	f200 82fa 	bhi.w	82736 <_vfiprintf_r+0xc22>
   82142:	f814 3b01 	ldrb.w	r3, [r4], #1
   82146:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8214a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8214e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82152:	2a09      	cmp	r2, #9
   82154:	d9f5      	bls.n	82142 <_vfiprintf_r+0x62e>
   82156:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   8215a:	46a0      	mov	r8, r4
   8215c:	e549      	b.n	81bf2 <_vfiprintf_r+0xde>
   8215e:	4c90      	ldr	r4, [pc, #576]	; (823a0 <_vfiprintf_r+0x88c>)
   82160:	f01a 0f20 	tst.w	sl, #32
   82164:	9004      	str	r0, [sp, #16]
   82166:	46ac      	mov	ip, r5
   82168:	940a      	str	r4, [sp, #40]	; 0x28
   8216a:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8216e:	f47f af10 	bne.w	81f92 <_vfiprintf_r+0x47e>
   82172:	f01a 0f10 	tst.w	sl, #16
   82176:	f040 81ea 	bne.w	8254e <_vfiprintf_r+0xa3a>
   8217a:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8217e:	f000 81e6 	beq.w	8254e <_vfiprintf_r+0xa3a>
   82182:	f8dd b020 	ldr.w	fp, [sp, #32]
   82186:	2500      	movs	r5, #0
   82188:	f8bb 4000 	ldrh.w	r4, [fp]
   8218c:	f10b 0b04 	add.w	fp, fp, #4
   82190:	f8cd b020 	str.w	fp, [sp, #32]
   82194:	e707      	b.n	81fa6 <_vfiprintf_r+0x492>
   82196:	f898 3000 	ldrb.w	r3, [r8]
   8219a:	2900      	cmp	r1, #0
   8219c:	f47f ad27 	bne.w	81bee <_vfiprintf_r+0xda>
   821a0:	2120      	movs	r1, #32
   821a2:	e524      	b.n	81bee <_vfiprintf_r+0xda>
   821a4:	f04a 0a01 	orr.w	sl, sl, #1
   821a8:	f898 3000 	ldrb.w	r3, [r8]
   821ac:	e51f      	b.n	81bee <_vfiprintf_r+0xda>
   821ae:	9004      	str	r0, [sp, #16]
   821b0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   821b4:	2b00      	cmp	r3, #0
   821b6:	f000 80f9 	beq.w	823ac <_vfiprintf_r+0x898>
   821ba:	2501      	movs	r5, #1
   821bc:	f04f 0b00 	mov.w	fp, #0
   821c0:	9503      	str	r5, [sp, #12]
   821c2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   821c6:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   821ca:	9505      	str	r5, [sp, #20]
   821cc:	af16      	add	r7, sp, #88	; 0x58
   821ce:	e70e      	b.n	81fee <_vfiprintf_r+0x4da>
   821d0:	9806      	ldr	r0, [sp, #24]
   821d2:	9902      	ldr	r1, [sp, #8]
   821d4:	aa13      	add	r2, sp, #76	; 0x4c
   821d6:	f7ff fc61 	bl	81a9c <__sprint_r.part.0>
   821da:	2800      	cmp	r0, #0
   821dc:	f040 80ed 	bne.w	823ba <_vfiprintf_r+0x8a6>
   821e0:	9814      	ldr	r0, [sp, #80]	; 0x50
   821e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   821e4:	1c43      	adds	r3, r0, #1
   821e6:	46cc      	mov	ip, r9
   821e8:	e5fe      	b.n	81de8 <_vfiprintf_r+0x2d4>
   821ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   821ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   821ee:	1c59      	adds	r1, r3, #1
   821f0:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   821f4:	b168      	cbz	r0, 82212 <_vfiprintf_r+0x6fe>
   821f6:	3201      	adds	r2, #1
   821f8:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   821fc:	2301      	movs	r3, #1
   821fe:	2907      	cmp	r1, #7
   82200:	9215      	str	r2, [sp, #84]	; 0x54
   82202:	9114      	str	r1, [sp, #80]	; 0x50
   82204:	e886 0009 	stmia.w	r6, {r0, r3}
   82208:	f300 8160 	bgt.w	824cc <_vfiprintf_r+0x9b8>
   8220c:	460b      	mov	r3, r1
   8220e:	3608      	adds	r6, #8
   82210:	3101      	adds	r1, #1
   82212:	9c07      	ldr	r4, [sp, #28]
   82214:	b164      	cbz	r4, 82230 <_vfiprintf_r+0x71c>
   82216:	3202      	adds	r2, #2
   82218:	a812      	add	r0, sp, #72	; 0x48
   8221a:	2302      	movs	r3, #2
   8221c:	2907      	cmp	r1, #7
   8221e:	9215      	str	r2, [sp, #84]	; 0x54
   82220:	9114      	str	r1, [sp, #80]	; 0x50
   82222:	e886 0009 	stmia.w	r6, {r0, r3}
   82226:	f300 8157 	bgt.w	824d8 <_vfiprintf_r+0x9c4>
   8222a:	460b      	mov	r3, r1
   8222c:	3608      	adds	r6, #8
   8222e:	3101      	adds	r1, #1
   82230:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82232:	2d80      	cmp	r5, #128	; 0x80
   82234:	f000 8101 	beq.w	8243a <_vfiprintf_r+0x926>
   82238:	9d05      	ldr	r5, [sp, #20]
   8223a:	ebc5 040c 	rsb	r4, r5, ip
   8223e:	2c00      	cmp	r4, #0
   82240:	dd2f      	ble.n	822a2 <_vfiprintf_r+0x78e>
   82242:	2c10      	cmp	r4, #16
   82244:	4d57      	ldr	r5, [pc, #348]	; (823a4 <_vfiprintf_r+0x890>)
   82246:	dd22      	ble.n	8228e <_vfiprintf_r+0x77a>
   82248:	4630      	mov	r0, r6
   8224a:	f04f 0b10 	mov.w	fp, #16
   8224e:	462e      	mov	r6, r5
   82250:	4625      	mov	r5, r4
   82252:	9c06      	ldr	r4, [sp, #24]
   82254:	e006      	b.n	82264 <_vfiprintf_r+0x750>
   82256:	f103 0c02 	add.w	ip, r3, #2
   8225a:	3008      	adds	r0, #8
   8225c:	460b      	mov	r3, r1
   8225e:	3d10      	subs	r5, #16
   82260:	2d10      	cmp	r5, #16
   82262:	dd10      	ble.n	82286 <_vfiprintf_r+0x772>
   82264:	1c59      	adds	r1, r3, #1
   82266:	3210      	adds	r2, #16
   82268:	2907      	cmp	r1, #7
   8226a:	9215      	str	r2, [sp, #84]	; 0x54
   8226c:	e880 0840 	stmia.w	r0, {r6, fp}
   82270:	9114      	str	r1, [sp, #80]	; 0x50
   82272:	ddf0      	ble.n	82256 <_vfiprintf_r+0x742>
   82274:	2a00      	cmp	r2, #0
   82276:	d163      	bne.n	82340 <_vfiprintf_r+0x82c>
   82278:	3d10      	subs	r5, #16
   8227a:	2d10      	cmp	r5, #16
   8227c:	f04f 0c01 	mov.w	ip, #1
   82280:	4613      	mov	r3, r2
   82282:	4648      	mov	r0, r9
   82284:	dcee      	bgt.n	82264 <_vfiprintf_r+0x750>
   82286:	462c      	mov	r4, r5
   82288:	4661      	mov	r1, ip
   8228a:	4635      	mov	r5, r6
   8228c:	4606      	mov	r6, r0
   8228e:	4422      	add	r2, r4
   82290:	2907      	cmp	r1, #7
   82292:	9215      	str	r2, [sp, #84]	; 0x54
   82294:	6035      	str	r5, [r6, #0]
   82296:	6074      	str	r4, [r6, #4]
   82298:	9114      	str	r1, [sp, #80]	; 0x50
   8229a:	f300 80c1 	bgt.w	82420 <_vfiprintf_r+0x90c>
   8229e:	3608      	adds	r6, #8
   822a0:	3101      	adds	r1, #1
   822a2:	9d05      	ldr	r5, [sp, #20]
   822a4:	2907      	cmp	r1, #7
   822a6:	442a      	add	r2, r5
   822a8:	9215      	str	r2, [sp, #84]	; 0x54
   822aa:	6037      	str	r7, [r6, #0]
   822ac:	6075      	str	r5, [r6, #4]
   822ae:	9114      	str	r1, [sp, #80]	; 0x50
   822b0:	f340 80c1 	ble.w	82436 <_vfiprintf_r+0x922>
   822b4:	2a00      	cmp	r2, #0
   822b6:	f040 8130 	bne.w	8251a <_vfiprintf_r+0xa06>
   822ba:	9214      	str	r2, [sp, #80]	; 0x50
   822bc:	464e      	mov	r6, r9
   822be:	f01a 0f04 	tst.w	sl, #4
   822c2:	f000 808b 	beq.w	823dc <_vfiprintf_r+0x8c8>
   822c6:	9d04      	ldr	r5, [sp, #16]
   822c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   822cc:	ebcb 0405 	rsb	r4, fp, r5
   822d0:	2c00      	cmp	r4, #0
   822d2:	f340 8083 	ble.w	823dc <_vfiprintf_r+0x8c8>
   822d6:	2c10      	cmp	r4, #16
   822d8:	f340 821e 	ble.w	82718 <_vfiprintf_r+0xc04>
   822dc:	9914      	ldr	r1, [sp, #80]	; 0x50
   822de:	4d32      	ldr	r5, [pc, #200]	; (823a8 <_vfiprintf_r+0x894>)
   822e0:	2710      	movs	r7, #16
   822e2:	f8dd a018 	ldr.w	sl, [sp, #24]
   822e6:	f8dd b008 	ldr.w	fp, [sp, #8]
   822ea:	e005      	b.n	822f8 <_vfiprintf_r+0x7e4>
   822ec:	1c88      	adds	r0, r1, #2
   822ee:	3608      	adds	r6, #8
   822f0:	4619      	mov	r1, r3
   822f2:	3c10      	subs	r4, #16
   822f4:	2c10      	cmp	r4, #16
   822f6:	dd10      	ble.n	8231a <_vfiprintf_r+0x806>
   822f8:	1c4b      	adds	r3, r1, #1
   822fa:	3210      	adds	r2, #16
   822fc:	2b07      	cmp	r3, #7
   822fe:	9215      	str	r2, [sp, #84]	; 0x54
   82300:	e886 00a0 	stmia.w	r6, {r5, r7}
   82304:	9314      	str	r3, [sp, #80]	; 0x50
   82306:	ddf1      	ble.n	822ec <_vfiprintf_r+0x7d8>
   82308:	2a00      	cmp	r2, #0
   8230a:	d17d      	bne.n	82408 <_vfiprintf_r+0x8f4>
   8230c:	3c10      	subs	r4, #16
   8230e:	2c10      	cmp	r4, #16
   82310:	f04f 0001 	mov.w	r0, #1
   82314:	4611      	mov	r1, r2
   82316:	464e      	mov	r6, r9
   82318:	dcee      	bgt.n	822f8 <_vfiprintf_r+0x7e4>
   8231a:	4422      	add	r2, r4
   8231c:	2807      	cmp	r0, #7
   8231e:	9215      	str	r2, [sp, #84]	; 0x54
   82320:	6035      	str	r5, [r6, #0]
   82322:	6074      	str	r4, [r6, #4]
   82324:	9014      	str	r0, [sp, #80]	; 0x50
   82326:	dd59      	ble.n	823dc <_vfiprintf_r+0x8c8>
   82328:	2a00      	cmp	r2, #0
   8232a:	d14f      	bne.n	823cc <_vfiprintf_r+0x8b8>
   8232c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8232e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82332:	9d04      	ldr	r5, [sp, #16]
   82334:	45ab      	cmp	fp, r5
   82336:	bfac      	ite	ge
   82338:	445c      	addge	r4, fp
   8233a:	1964      	addlt	r4, r4, r5
   8233c:	9409      	str	r4, [sp, #36]	; 0x24
   8233e:	e05e      	b.n	823fe <_vfiprintf_r+0x8ea>
   82340:	4620      	mov	r0, r4
   82342:	9902      	ldr	r1, [sp, #8]
   82344:	aa13      	add	r2, sp, #76	; 0x4c
   82346:	f7ff fba9 	bl	81a9c <__sprint_r.part.0>
   8234a:	2800      	cmp	r0, #0
   8234c:	d135      	bne.n	823ba <_vfiprintf_r+0x8a6>
   8234e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82350:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82352:	f103 0c01 	add.w	ip, r3, #1
   82356:	4648      	mov	r0, r9
   82358:	e781      	b.n	8225e <_vfiprintf_r+0x74a>
   8235a:	08e0      	lsrs	r0, r4, #3
   8235c:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   82360:	f004 0207 	and.w	r2, r4, #7
   82364:	08e9      	lsrs	r1, r5, #3
   82366:	3230      	adds	r2, #48	; 0x30
   82368:	ea50 0b01 	orrs.w	fp, r0, r1
   8236c:	461f      	mov	r7, r3
   8236e:	701a      	strb	r2, [r3, #0]
   82370:	4604      	mov	r4, r0
   82372:	460d      	mov	r5, r1
   82374:	f103 33ff 	add.w	r3, r3, #4294967295
   82378:	d1ef      	bne.n	8235a <_vfiprintf_r+0x846>
   8237a:	f01a 0f01 	tst.w	sl, #1
   8237e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   82382:	4639      	mov	r1, r7
   82384:	f000 80b9 	beq.w	824fa <_vfiprintf_r+0x9e6>
   82388:	2a30      	cmp	r2, #48	; 0x30
   8238a:	f43f acf4 	beq.w	81d76 <_vfiprintf_r+0x262>
   8238e:	461f      	mov	r7, r3
   82390:	ebc7 0509 	rsb	r5, r7, r9
   82394:	2330      	movs	r3, #48	; 0x30
   82396:	9505      	str	r5, [sp, #20]
   82398:	f801 3c01 	strb.w	r3, [r1, #-1]
   8239c:	e4ee      	b.n	81d7c <_vfiprintf_r+0x268>
   8239e:	bf00      	nop
   823a0:	0008482c 	.word	0x0008482c
   823a4:	00084848 	.word	0x00084848
   823a8:	00084858 	.word	0x00084858
   823ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   823ae:	b123      	cbz	r3, 823ba <_vfiprintf_r+0x8a6>
   823b0:	9806      	ldr	r0, [sp, #24]
   823b2:	9902      	ldr	r1, [sp, #8]
   823b4:	aa13      	add	r2, sp, #76	; 0x4c
   823b6:	f7ff fb71 	bl	81a9c <__sprint_r.part.0>
   823ba:	9c02      	ldr	r4, [sp, #8]
   823bc:	89a3      	ldrh	r3, [r4, #12]
   823be:	065b      	lsls	r3, r3, #25
   823c0:	f53f ac98 	bmi.w	81cf4 <_vfiprintf_r+0x1e0>
   823c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   823c6:	b031      	add	sp, #196	; 0xc4
   823c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823cc:	9806      	ldr	r0, [sp, #24]
   823ce:	9902      	ldr	r1, [sp, #8]
   823d0:	aa13      	add	r2, sp, #76	; 0x4c
   823d2:	f7ff fb63 	bl	81a9c <__sprint_r.part.0>
   823d6:	2800      	cmp	r0, #0
   823d8:	d1ef      	bne.n	823ba <_vfiprintf_r+0x8a6>
   823da:	9a15      	ldr	r2, [sp, #84]	; 0x54
   823dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   823de:	f8dd b00c 	ldr.w	fp, [sp, #12]
   823e2:	9d04      	ldr	r5, [sp, #16]
   823e4:	45ab      	cmp	fp, r5
   823e6:	bfac      	ite	ge
   823e8:	445c      	addge	r4, fp
   823ea:	1964      	addlt	r4, r4, r5
   823ec:	9409      	str	r4, [sp, #36]	; 0x24
   823ee:	b132      	cbz	r2, 823fe <_vfiprintf_r+0x8ea>
   823f0:	9806      	ldr	r0, [sp, #24]
   823f2:	9902      	ldr	r1, [sp, #8]
   823f4:	aa13      	add	r2, sp, #76	; 0x4c
   823f6:	f7ff fb51 	bl	81a9c <__sprint_r.part.0>
   823fa:	2800      	cmp	r0, #0
   823fc:	d1dd      	bne.n	823ba <_vfiprintf_r+0x8a6>
   823fe:	2000      	movs	r0, #0
   82400:	9014      	str	r0, [sp, #80]	; 0x50
   82402:	464e      	mov	r6, r9
   82404:	f7ff bbb9 	b.w	81b7a <_vfiprintf_r+0x66>
   82408:	4650      	mov	r0, sl
   8240a:	4659      	mov	r1, fp
   8240c:	aa13      	add	r2, sp, #76	; 0x4c
   8240e:	f7ff fb45 	bl	81a9c <__sprint_r.part.0>
   82412:	2800      	cmp	r0, #0
   82414:	d1d1      	bne.n	823ba <_vfiprintf_r+0x8a6>
   82416:	9914      	ldr	r1, [sp, #80]	; 0x50
   82418:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8241a:	1c48      	adds	r0, r1, #1
   8241c:	464e      	mov	r6, r9
   8241e:	e768      	b.n	822f2 <_vfiprintf_r+0x7de>
   82420:	2a00      	cmp	r2, #0
   82422:	f040 80f7 	bne.w	82614 <_vfiprintf_r+0xb00>
   82426:	9c05      	ldr	r4, [sp, #20]
   82428:	2301      	movs	r3, #1
   8242a:	9720      	str	r7, [sp, #128]	; 0x80
   8242c:	9421      	str	r4, [sp, #132]	; 0x84
   8242e:	9415      	str	r4, [sp, #84]	; 0x54
   82430:	4622      	mov	r2, r4
   82432:	9314      	str	r3, [sp, #80]	; 0x50
   82434:	464e      	mov	r6, r9
   82436:	3608      	adds	r6, #8
   82438:	e741      	b.n	822be <_vfiprintf_r+0x7aa>
   8243a:	9d04      	ldr	r5, [sp, #16]
   8243c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82440:	ebcb 0405 	rsb	r4, fp, r5
   82444:	2c00      	cmp	r4, #0
   82446:	f77f aef7 	ble.w	82238 <_vfiprintf_r+0x724>
   8244a:	2c10      	cmp	r4, #16
   8244c:	4da6      	ldr	r5, [pc, #664]	; (826e8 <_vfiprintf_r+0xbd4>)
   8244e:	f340 8170 	ble.w	82732 <_vfiprintf_r+0xc1e>
   82452:	4629      	mov	r1, r5
   82454:	f04f 0b10 	mov.w	fp, #16
   82458:	4625      	mov	r5, r4
   8245a:	4664      	mov	r4, ip
   8245c:	46b4      	mov	ip, r6
   8245e:	460e      	mov	r6, r1
   82460:	e006      	b.n	82470 <_vfiprintf_r+0x95c>
   82462:	1c98      	adds	r0, r3, #2
   82464:	f10c 0c08 	add.w	ip, ip, #8
   82468:	460b      	mov	r3, r1
   8246a:	3d10      	subs	r5, #16
   8246c:	2d10      	cmp	r5, #16
   8246e:	dd0f      	ble.n	82490 <_vfiprintf_r+0x97c>
   82470:	1c59      	adds	r1, r3, #1
   82472:	3210      	adds	r2, #16
   82474:	2907      	cmp	r1, #7
   82476:	9215      	str	r2, [sp, #84]	; 0x54
   82478:	e88c 0840 	stmia.w	ip, {r6, fp}
   8247c:	9114      	str	r1, [sp, #80]	; 0x50
   8247e:	ddf0      	ble.n	82462 <_vfiprintf_r+0x94e>
   82480:	b9ba      	cbnz	r2, 824b2 <_vfiprintf_r+0x99e>
   82482:	3d10      	subs	r5, #16
   82484:	2d10      	cmp	r5, #16
   82486:	f04f 0001 	mov.w	r0, #1
   8248a:	4613      	mov	r3, r2
   8248c:	46cc      	mov	ip, r9
   8248e:	dcef      	bgt.n	82470 <_vfiprintf_r+0x95c>
   82490:	4633      	mov	r3, r6
   82492:	4666      	mov	r6, ip
   82494:	46a4      	mov	ip, r4
   82496:	462c      	mov	r4, r5
   82498:	461d      	mov	r5, r3
   8249a:	4422      	add	r2, r4
   8249c:	2807      	cmp	r0, #7
   8249e:	9215      	str	r2, [sp, #84]	; 0x54
   824a0:	6035      	str	r5, [r6, #0]
   824a2:	6074      	str	r4, [r6, #4]
   824a4:	9014      	str	r0, [sp, #80]	; 0x50
   824a6:	f300 80af 	bgt.w	82608 <_vfiprintf_r+0xaf4>
   824aa:	3608      	adds	r6, #8
   824ac:	1c41      	adds	r1, r0, #1
   824ae:	4603      	mov	r3, r0
   824b0:	e6c2      	b.n	82238 <_vfiprintf_r+0x724>
   824b2:	9806      	ldr	r0, [sp, #24]
   824b4:	9902      	ldr	r1, [sp, #8]
   824b6:	aa13      	add	r2, sp, #76	; 0x4c
   824b8:	f7ff faf0 	bl	81a9c <__sprint_r.part.0>
   824bc:	2800      	cmp	r0, #0
   824be:	f47f af7c 	bne.w	823ba <_vfiprintf_r+0x8a6>
   824c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   824c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   824c6:	1c58      	adds	r0, r3, #1
   824c8:	46cc      	mov	ip, r9
   824ca:	e7ce      	b.n	8246a <_vfiprintf_r+0x956>
   824cc:	2a00      	cmp	r2, #0
   824ce:	d179      	bne.n	825c4 <_vfiprintf_r+0xab0>
   824d0:	4619      	mov	r1, r3
   824d2:	464e      	mov	r6, r9
   824d4:	4613      	mov	r3, r2
   824d6:	e69c      	b.n	82212 <_vfiprintf_r+0x6fe>
   824d8:	2a00      	cmp	r2, #0
   824da:	f040 8084 	bne.w	825e6 <_vfiprintf_r+0xad2>
   824de:	2101      	movs	r1, #1
   824e0:	4613      	mov	r3, r2
   824e2:	464e      	mov	r6, r9
   824e4:	e6a4      	b.n	82230 <_vfiprintf_r+0x71c>
   824e6:	464f      	mov	r7, r9
   824e8:	e448      	b.n	81d7c <_vfiprintf_r+0x268>
   824ea:	2d00      	cmp	r5, #0
   824ec:	bf08      	it	eq
   824ee:	2c0a      	cmpeq	r4, #10
   824f0:	d246      	bcs.n	82580 <_vfiprintf_r+0xa6c>
   824f2:	3430      	adds	r4, #48	; 0x30
   824f4:	af30      	add	r7, sp, #192	; 0xc0
   824f6:	f807 4d41 	strb.w	r4, [r7, #-65]!
   824fa:	ebc7 0309 	rsb	r3, r7, r9
   824fe:	9305      	str	r3, [sp, #20]
   82500:	e43c      	b.n	81d7c <_vfiprintf_r+0x268>
   82502:	2302      	movs	r3, #2
   82504:	e417      	b.n	81d36 <_vfiprintf_r+0x222>
   82506:	2a00      	cmp	r2, #0
   82508:	f040 80af 	bne.w	8266a <_vfiprintf_r+0xb56>
   8250c:	4613      	mov	r3, r2
   8250e:	2101      	movs	r1, #1
   82510:	464e      	mov	r6, r9
   82512:	e66d      	b.n	821f0 <_vfiprintf_r+0x6dc>
   82514:	4644      	mov	r4, r8
   82516:	f7ff bb58 	b.w	81bca <_vfiprintf_r+0xb6>
   8251a:	9806      	ldr	r0, [sp, #24]
   8251c:	9902      	ldr	r1, [sp, #8]
   8251e:	aa13      	add	r2, sp, #76	; 0x4c
   82520:	f7ff fabc 	bl	81a9c <__sprint_r.part.0>
   82524:	2800      	cmp	r0, #0
   82526:	f47f af48 	bne.w	823ba <_vfiprintf_r+0x8a6>
   8252a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8252c:	464e      	mov	r6, r9
   8252e:	e6c6      	b.n	822be <_vfiprintf_r+0x7aa>
   82530:	9d08      	ldr	r5, [sp, #32]
   82532:	682c      	ldr	r4, [r5, #0]
   82534:	3504      	adds	r5, #4
   82536:	9508      	str	r5, [sp, #32]
   82538:	2500      	movs	r5, #0
   8253a:	f7ff bbfc 	b.w	81d36 <_vfiprintf_r+0x222>
   8253e:	9d08      	ldr	r5, [sp, #32]
   82540:	2301      	movs	r3, #1
   82542:	682c      	ldr	r4, [r5, #0]
   82544:	3504      	adds	r5, #4
   82546:	9508      	str	r5, [sp, #32]
   82548:	2500      	movs	r5, #0
   8254a:	f7ff bbf4 	b.w	81d36 <_vfiprintf_r+0x222>
   8254e:	9d08      	ldr	r5, [sp, #32]
   82550:	682c      	ldr	r4, [r5, #0]
   82552:	3504      	adds	r5, #4
   82554:	9508      	str	r5, [sp, #32]
   82556:	2500      	movs	r5, #0
   82558:	e525      	b.n	81fa6 <_vfiprintf_r+0x492>
   8255a:	9d08      	ldr	r5, [sp, #32]
   8255c:	682c      	ldr	r4, [r5, #0]
   8255e:	3504      	adds	r5, #4
   82560:	9508      	str	r5, [sp, #32]
   82562:	17e5      	asrs	r5, r4, #31
   82564:	4622      	mov	r2, r4
   82566:	462b      	mov	r3, r5
   82568:	e48e      	b.n	81e88 <_vfiprintf_r+0x374>
   8256a:	9806      	ldr	r0, [sp, #24]
   8256c:	9902      	ldr	r1, [sp, #8]
   8256e:	aa13      	add	r2, sp, #76	; 0x4c
   82570:	f7ff fa94 	bl	81a9c <__sprint_r.part.0>
   82574:	2800      	cmp	r0, #0
   82576:	f47f af20 	bne.w	823ba <_vfiprintf_r+0x8a6>
   8257a:	464e      	mov	r6, r9
   8257c:	f7ff bb9a 	b.w	81cb4 <_vfiprintf_r+0x1a0>
   82580:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   82584:	9603      	str	r6, [sp, #12]
   82586:	465e      	mov	r6, fp
   82588:	46e3      	mov	fp, ip
   8258a:	4620      	mov	r0, r4
   8258c:	4629      	mov	r1, r5
   8258e:	220a      	movs	r2, #10
   82590:	2300      	movs	r3, #0
   82592:	f001 fe2f 	bl	841f4 <__aeabi_uldivmod>
   82596:	3230      	adds	r2, #48	; 0x30
   82598:	7032      	strb	r2, [r6, #0]
   8259a:	4620      	mov	r0, r4
   8259c:	4629      	mov	r1, r5
   8259e:	220a      	movs	r2, #10
   825a0:	2300      	movs	r3, #0
   825a2:	f001 fe27 	bl	841f4 <__aeabi_uldivmod>
   825a6:	4604      	mov	r4, r0
   825a8:	460d      	mov	r5, r1
   825aa:	ea54 0005 	orrs.w	r0, r4, r5
   825ae:	4637      	mov	r7, r6
   825b0:	f106 36ff 	add.w	r6, r6, #4294967295
   825b4:	d1e9      	bne.n	8258a <_vfiprintf_r+0xa76>
   825b6:	ebc7 0309 	rsb	r3, r7, r9
   825ba:	46dc      	mov	ip, fp
   825bc:	9e03      	ldr	r6, [sp, #12]
   825be:	9305      	str	r3, [sp, #20]
   825c0:	f7ff bbdc 	b.w	81d7c <_vfiprintf_r+0x268>
   825c4:	9806      	ldr	r0, [sp, #24]
   825c6:	9902      	ldr	r1, [sp, #8]
   825c8:	aa13      	add	r2, sp, #76	; 0x4c
   825ca:	f8cd c004 	str.w	ip, [sp, #4]
   825ce:	f7ff fa65 	bl	81a9c <__sprint_r.part.0>
   825d2:	f8dd c004 	ldr.w	ip, [sp, #4]
   825d6:	2800      	cmp	r0, #0
   825d8:	f47f aeef 	bne.w	823ba <_vfiprintf_r+0x8a6>
   825dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   825de:	9a15      	ldr	r2, [sp, #84]	; 0x54
   825e0:	1c59      	adds	r1, r3, #1
   825e2:	464e      	mov	r6, r9
   825e4:	e615      	b.n	82212 <_vfiprintf_r+0x6fe>
   825e6:	9806      	ldr	r0, [sp, #24]
   825e8:	9902      	ldr	r1, [sp, #8]
   825ea:	aa13      	add	r2, sp, #76	; 0x4c
   825ec:	f8cd c004 	str.w	ip, [sp, #4]
   825f0:	f7ff fa54 	bl	81a9c <__sprint_r.part.0>
   825f4:	f8dd c004 	ldr.w	ip, [sp, #4]
   825f8:	2800      	cmp	r0, #0
   825fa:	f47f aede 	bne.w	823ba <_vfiprintf_r+0x8a6>
   825fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82600:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82602:	1c59      	adds	r1, r3, #1
   82604:	464e      	mov	r6, r9
   82606:	e613      	b.n	82230 <_vfiprintf_r+0x71c>
   82608:	2a00      	cmp	r2, #0
   8260a:	d156      	bne.n	826ba <_vfiprintf_r+0xba6>
   8260c:	2101      	movs	r1, #1
   8260e:	4613      	mov	r3, r2
   82610:	464e      	mov	r6, r9
   82612:	e611      	b.n	82238 <_vfiprintf_r+0x724>
   82614:	9806      	ldr	r0, [sp, #24]
   82616:	9902      	ldr	r1, [sp, #8]
   82618:	aa13      	add	r2, sp, #76	; 0x4c
   8261a:	f7ff fa3f 	bl	81a9c <__sprint_r.part.0>
   8261e:	2800      	cmp	r0, #0
   82620:	f47f aecb 	bne.w	823ba <_vfiprintf_r+0x8a6>
   82624:	9914      	ldr	r1, [sp, #80]	; 0x50
   82626:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82628:	3101      	adds	r1, #1
   8262a:	464e      	mov	r6, r9
   8262c:	e639      	b.n	822a2 <_vfiprintf_r+0x78e>
   8262e:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   82632:	4264      	negs	r4, r4
   82634:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82638:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   8263c:	f8cd b01c 	str.w	fp, [sp, #28]
   82640:	f8cd c014 	str.w	ip, [sp, #20]
   82644:	2301      	movs	r3, #1
   82646:	f7ff bb7e 	b.w	81d46 <_vfiprintf_r+0x232>
   8264a:	f01a 0f10 	tst.w	sl, #16
   8264e:	d11d      	bne.n	8268c <_vfiprintf_r+0xb78>
   82650:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82654:	d058      	beq.n	82708 <_vfiprintf_r+0xbf4>
   82656:	9d08      	ldr	r5, [sp, #32]
   82658:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   8265c:	682b      	ldr	r3, [r5, #0]
   8265e:	3504      	adds	r5, #4
   82660:	9508      	str	r5, [sp, #32]
   82662:	f8a3 b000 	strh.w	fp, [r3]
   82666:	f7ff ba88 	b.w	81b7a <_vfiprintf_r+0x66>
   8266a:	9806      	ldr	r0, [sp, #24]
   8266c:	9902      	ldr	r1, [sp, #8]
   8266e:	aa13      	add	r2, sp, #76	; 0x4c
   82670:	f8cd c004 	str.w	ip, [sp, #4]
   82674:	f7ff fa12 	bl	81a9c <__sprint_r.part.0>
   82678:	f8dd c004 	ldr.w	ip, [sp, #4]
   8267c:	2800      	cmp	r0, #0
   8267e:	f47f ae9c 	bne.w	823ba <_vfiprintf_r+0x8a6>
   82682:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82684:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82686:	1c59      	adds	r1, r3, #1
   82688:	464e      	mov	r6, r9
   8268a:	e5b1      	b.n	821f0 <_vfiprintf_r+0x6dc>
   8268c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82690:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82692:	f8db 3000 	ldr.w	r3, [fp]
   82696:	f10b 0b04 	add.w	fp, fp, #4
   8269a:	f8cd b020 	str.w	fp, [sp, #32]
   8269e:	601c      	str	r4, [r3, #0]
   826a0:	f7ff ba6b 	b.w	81b7a <_vfiprintf_r+0x66>
   826a4:	9408      	str	r4, [sp, #32]
   826a6:	f7ff f9c9 	bl	81a3c <strlen>
   826aa:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   826ae:	9005      	str	r0, [sp, #20]
   826b0:	9407      	str	r4, [sp, #28]
   826b2:	f04f 0c00 	mov.w	ip, #0
   826b6:	f7ff bb61 	b.w	81d7c <_vfiprintf_r+0x268>
   826ba:	9806      	ldr	r0, [sp, #24]
   826bc:	9902      	ldr	r1, [sp, #8]
   826be:	aa13      	add	r2, sp, #76	; 0x4c
   826c0:	f8cd c004 	str.w	ip, [sp, #4]
   826c4:	f7ff f9ea 	bl	81a9c <__sprint_r.part.0>
   826c8:	f8dd c004 	ldr.w	ip, [sp, #4]
   826cc:	2800      	cmp	r0, #0
   826ce:	f47f ae74 	bne.w	823ba <_vfiprintf_r+0x8a6>
   826d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   826d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   826d6:	1c59      	adds	r1, r3, #1
   826d8:	464e      	mov	r6, r9
   826da:	e5ad      	b.n	82238 <_vfiprintf_r+0x724>
   826dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   826de:	9a15      	ldr	r2, [sp, #84]	; 0x54
   826e0:	3301      	adds	r3, #1
   826e2:	4d02      	ldr	r5, [pc, #8]	; (826ec <_vfiprintf_r+0xbd8>)
   826e4:	f7ff bb9a 	b.w	81e1c <_vfiprintf_r+0x308>
   826e8:	00084848 	.word	0x00084848
   826ec:	00084858 	.word	0x00084858
   826f0:	f1bc 0f06 	cmp.w	ip, #6
   826f4:	bf34      	ite	cc
   826f6:	4663      	movcc	r3, ip
   826f8:	2306      	movcs	r3, #6
   826fa:	9408      	str	r4, [sp, #32]
   826fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82700:	9305      	str	r3, [sp, #20]
   82702:	9403      	str	r4, [sp, #12]
   82704:	4f16      	ldr	r7, [pc, #88]	; (82760 <_vfiprintf_r+0xc4c>)
   82706:	e472      	b.n	81fee <_vfiprintf_r+0x4da>
   82708:	9c08      	ldr	r4, [sp, #32]
   8270a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8270c:	6823      	ldr	r3, [r4, #0]
   8270e:	3404      	adds	r4, #4
   82710:	9408      	str	r4, [sp, #32]
   82712:	601d      	str	r5, [r3, #0]
   82714:	f7ff ba31 	b.w	81b7a <_vfiprintf_r+0x66>
   82718:	9814      	ldr	r0, [sp, #80]	; 0x50
   8271a:	4d12      	ldr	r5, [pc, #72]	; (82764 <_vfiprintf_r+0xc50>)
   8271c:	3001      	adds	r0, #1
   8271e:	e5fc      	b.n	8231a <_vfiprintf_r+0x806>
   82720:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82724:	f8cd c014 	str.w	ip, [sp, #20]
   82728:	9507      	str	r5, [sp, #28]
   8272a:	9408      	str	r4, [sp, #32]
   8272c:	4684      	mov	ip, r0
   8272e:	f7ff bb25 	b.w	81d7c <_vfiprintf_r+0x268>
   82732:	4608      	mov	r0, r1
   82734:	e6b1      	b.n	8249a <_vfiprintf_r+0x986>
   82736:	46a0      	mov	r8, r4
   82738:	2500      	movs	r5, #0
   8273a:	f7ff ba5a 	b.w	81bf2 <_vfiprintf_r+0xde>
   8273e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82742:	f898 3001 	ldrb.w	r3, [r8, #1]
   82746:	f8db 5000 	ldr.w	r5, [fp]
   8274a:	f10b 0204 	add.w	r2, fp, #4
   8274e:	2d00      	cmp	r5, #0
   82750:	9208      	str	r2, [sp, #32]
   82752:	46a0      	mov	r8, r4
   82754:	f6bf aa4b 	bge.w	81bee <_vfiprintf_r+0xda>
   82758:	f04f 35ff 	mov.w	r5, #4294967295
   8275c:	f7ff ba47 	b.w	81bee <_vfiprintf_r+0xda>
   82760:	00084840 	.word	0x00084840
   82764:	00084858 	.word	0x00084858

00082768 <__sbprintf>:
   82768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8276c:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   8276e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82772:	4688      	mov	r8, r1
   82774:	9719      	str	r7, [sp, #100]	; 0x64
   82776:	f8d8 701c 	ldr.w	r7, [r8, #28]
   8277a:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   8277e:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   82782:	9707      	str	r7, [sp, #28]
   82784:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   82788:	ac1a      	add	r4, sp, #104	; 0x68
   8278a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8278e:	f02a 0a02 	bic.w	sl, sl, #2
   82792:	2600      	movs	r6, #0
   82794:	4669      	mov	r1, sp
   82796:	9400      	str	r4, [sp, #0]
   82798:	9404      	str	r4, [sp, #16]
   8279a:	9502      	str	r5, [sp, #8]
   8279c:	9505      	str	r5, [sp, #20]
   8279e:	f8ad a00c 	strh.w	sl, [sp, #12]
   827a2:	f8ad 900e 	strh.w	r9, [sp, #14]
   827a6:	9709      	str	r7, [sp, #36]	; 0x24
   827a8:	9606      	str	r6, [sp, #24]
   827aa:	4605      	mov	r5, r0
   827ac:	f7ff f9b2 	bl	81b14 <_vfiprintf_r>
   827b0:	1e04      	subs	r4, r0, #0
   827b2:	db07      	blt.n	827c4 <__sbprintf+0x5c>
   827b4:	4628      	mov	r0, r5
   827b6:	4669      	mov	r1, sp
   827b8:	f000 f92a 	bl	82a10 <_fflush_r>
   827bc:	42b0      	cmp	r0, r6
   827be:	bf18      	it	ne
   827c0:	f04f 34ff 	movne.w	r4, #4294967295
   827c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   827c8:	065b      	lsls	r3, r3, #25
   827ca:	d505      	bpl.n	827d8 <__sbprintf+0x70>
   827cc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   827d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   827d4:	f8a8 300c 	strh.w	r3, [r8, #12]
   827d8:	4620      	mov	r0, r4
   827da:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   827de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   827e2:	bf00      	nop

000827e4 <__swsetup_r>:
   827e4:	4b2f      	ldr	r3, [pc, #188]	; (828a4 <__swsetup_r+0xc0>)
   827e6:	b570      	push	{r4, r5, r6, lr}
   827e8:	4606      	mov	r6, r0
   827ea:	6818      	ldr	r0, [r3, #0]
   827ec:	460c      	mov	r4, r1
   827ee:	b110      	cbz	r0, 827f6 <__swsetup_r+0x12>
   827f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   827f2:	2a00      	cmp	r2, #0
   827f4:	d036      	beq.n	82864 <__swsetup_r+0x80>
   827f6:	89a5      	ldrh	r5, [r4, #12]
   827f8:	b2ab      	uxth	r3, r5
   827fa:	0719      	lsls	r1, r3, #28
   827fc:	d50c      	bpl.n	82818 <__swsetup_r+0x34>
   827fe:	6922      	ldr	r2, [r4, #16]
   82800:	b1aa      	cbz	r2, 8282e <__swsetup_r+0x4a>
   82802:	f013 0101 	ands.w	r1, r3, #1
   82806:	d01e      	beq.n	82846 <__swsetup_r+0x62>
   82808:	6963      	ldr	r3, [r4, #20]
   8280a:	2100      	movs	r1, #0
   8280c:	425b      	negs	r3, r3
   8280e:	61a3      	str	r3, [r4, #24]
   82810:	60a1      	str	r1, [r4, #8]
   82812:	b1f2      	cbz	r2, 82852 <__swsetup_r+0x6e>
   82814:	2000      	movs	r0, #0
   82816:	bd70      	pop	{r4, r5, r6, pc}
   82818:	06da      	lsls	r2, r3, #27
   8281a:	d53a      	bpl.n	82892 <__swsetup_r+0xae>
   8281c:	075b      	lsls	r3, r3, #29
   8281e:	d424      	bmi.n	8286a <__swsetup_r+0x86>
   82820:	6922      	ldr	r2, [r4, #16]
   82822:	f045 0308 	orr.w	r3, r5, #8
   82826:	81a3      	strh	r3, [r4, #12]
   82828:	b29b      	uxth	r3, r3
   8282a:	2a00      	cmp	r2, #0
   8282c:	d1e9      	bne.n	82802 <__swsetup_r+0x1e>
   8282e:	f403 7120 	and.w	r1, r3, #640	; 0x280
   82832:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82836:	d0e4      	beq.n	82802 <__swsetup_r+0x1e>
   82838:	4630      	mov	r0, r6
   8283a:	4621      	mov	r1, r4
   8283c:	f000 fcce 	bl	831dc <__smakebuf_r>
   82840:	89a3      	ldrh	r3, [r4, #12]
   82842:	6922      	ldr	r2, [r4, #16]
   82844:	e7dd      	b.n	82802 <__swsetup_r+0x1e>
   82846:	0798      	lsls	r0, r3, #30
   82848:	bf58      	it	pl
   8284a:	6961      	ldrpl	r1, [r4, #20]
   8284c:	60a1      	str	r1, [r4, #8]
   8284e:	2a00      	cmp	r2, #0
   82850:	d1e0      	bne.n	82814 <__swsetup_r+0x30>
   82852:	89a3      	ldrh	r3, [r4, #12]
   82854:	061a      	lsls	r2, r3, #24
   82856:	d5dd      	bpl.n	82814 <__swsetup_r+0x30>
   82858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8285c:	81a3      	strh	r3, [r4, #12]
   8285e:	f04f 30ff 	mov.w	r0, #4294967295
   82862:	bd70      	pop	{r4, r5, r6, pc}
   82864:	f000 f8f0 	bl	82a48 <__sinit>
   82868:	e7c5      	b.n	827f6 <__swsetup_r+0x12>
   8286a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8286c:	b149      	cbz	r1, 82882 <__swsetup_r+0x9e>
   8286e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82872:	4299      	cmp	r1, r3
   82874:	d003      	beq.n	8287e <__swsetup_r+0x9a>
   82876:	4630      	mov	r0, r6
   82878:	f000 fa2a 	bl	82cd0 <_free_r>
   8287c:	89a5      	ldrh	r5, [r4, #12]
   8287e:	2300      	movs	r3, #0
   82880:	6323      	str	r3, [r4, #48]	; 0x30
   82882:	6922      	ldr	r2, [r4, #16]
   82884:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   82888:	2100      	movs	r1, #0
   8288a:	b2ad      	uxth	r5, r5
   8288c:	6022      	str	r2, [r4, #0]
   8288e:	6061      	str	r1, [r4, #4]
   82890:	e7c7      	b.n	82822 <__swsetup_r+0x3e>
   82892:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   82896:	2309      	movs	r3, #9
   82898:	6033      	str	r3, [r6, #0]
   8289a:	f04f 30ff 	mov.w	r0, #4294967295
   8289e:	81a5      	strh	r5, [r4, #12]
   828a0:	bd70      	pop	{r4, r5, r6, pc}
   828a2:	bf00      	nop
   828a4:	20070578 	.word	0x20070578

000828a8 <register_fini>:
   828a8:	4b02      	ldr	r3, [pc, #8]	; (828b4 <register_fini+0xc>)
   828aa:	b113      	cbz	r3, 828b2 <register_fini+0xa>
   828ac:	4802      	ldr	r0, [pc, #8]	; (828b8 <register_fini+0x10>)
   828ae:	f000 b805 	b.w	828bc <atexit>
   828b2:	4770      	bx	lr
   828b4:	00000000 	.word	0x00000000
   828b8:	00082b45 	.word	0x00082b45

000828bc <atexit>:
   828bc:	4601      	mov	r1, r0
   828be:	2000      	movs	r0, #0
   828c0:	4602      	mov	r2, r0
   828c2:	4603      	mov	r3, r0
   828c4:	f001 bb9a 	b.w	83ffc <__register_exitproc>

000828c8 <__sflush_r>:
   828c8:	898b      	ldrh	r3, [r1, #12]
   828ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828ce:	b29a      	uxth	r2, r3
   828d0:	460d      	mov	r5, r1
   828d2:	0711      	lsls	r1, r2, #28
   828d4:	4680      	mov	r8, r0
   828d6:	d43c      	bmi.n	82952 <__sflush_r+0x8a>
   828d8:	686a      	ldr	r2, [r5, #4]
   828da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   828de:	2a00      	cmp	r2, #0
   828e0:	81ab      	strh	r3, [r5, #12]
   828e2:	dd59      	ble.n	82998 <__sflush_r+0xd0>
   828e4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   828e6:	2c00      	cmp	r4, #0
   828e8:	d04b      	beq.n	82982 <__sflush_r+0xba>
   828ea:	b29b      	uxth	r3, r3
   828ec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   828f0:	2100      	movs	r1, #0
   828f2:	b292      	uxth	r2, r2
   828f4:	f8d8 6000 	ldr.w	r6, [r8]
   828f8:	f8c8 1000 	str.w	r1, [r8]
   828fc:	2a00      	cmp	r2, #0
   828fe:	d04f      	beq.n	829a0 <__sflush_r+0xd8>
   82900:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82902:	075f      	lsls	r7, r3, #29
   82904:	d505      	bpl.n	82912 <__sflush_r+0x4a>
   82906:	6869      	ldr	r1, [r5, #4]
   82908:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8290a:	1a52      	subs	r2, r2, r1
   8290c:	b10b      	cbz	r3, 82912 <__sflush_r+0x4a>
   8290e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82910:	1ad2      	subs	r2, r2, r3
   82912:	4640      	mov	r0, r8
   82914:	69e9      	ldr	r1, [r5, #28]
   82916:	2300      	movs	r3, #0
   82918:	47a0      	blx	r4
   8291a:	1c44      	adds	r4, r0, #1
   8291c:	d04a      	beq.n	829b4 <__sflush_r+0xec>
   8291e:	89ab      	ldrh	r3, [r5, #12]
   82920:	692a      	ldr	r2, [r5, #16]
   82922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82926:	b29b      	uxth	r3, r3
   82928:	2100      	movs	r1, #0
   8292a:	602a      	str	r2, [r5, #0]
   8292c:	04da      	lsls	r2, r3, #19
   8292e:	81ab      	strh	r3, [r5, #12]
   82930:	6069      	str	r1, [r5, #4]
   82932:	d44c      	bmi.n	829ce <__sflush_r+0x106>
   82934:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82936:	f8c8 6000 	str.w	r6, [r8]
   8293a:	b311      	cbz	r1, 82982 <__sflush_r+0xba>
   8293c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82940:	4299      	cmp	r1, r3
   82942:	d002      	beq.n	8294a <__sflush_r+0x82>
   82944:	4640      	mov	r0, r8
   82946:	f000 f9c3 	bl	82cd0 <_free_r>
   8294a:	2000      	movs	r0, #0
   8294c:	6328      	str	r0, [r5, #48]	; 0x30
   8294e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82952:	692e      	ldr	r6, [r5, #16]
   82954:	b1ae      	cbz	r6, 82982 <__sflush_r+0xba>
   82956:	0791      	lsls	r1, r2, #30
   82958:	682c      	ldr	r4, [r5, #0]
   8295a:	bf0c      	ite	eq
   8295c:	696b      	ldreq	r3, [r5, #20]
   8295e:	2300      	movne	r3, #0
   82960:	602e      	str	r6, [r5, #0]
   82962:	1ba4      	subs	r4, r4, r6
   82964:	60ab      	str	r3, [r5, #8]
   82966:	e00a      	b.n	8297e <__sflush_r+0xb6>
   82968:	4632      	mov	r2, r6
   8296a:	4623      	mov	r3, r4
   8296c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8296e:	4640      	mov	r0, r8
   82970:	69e9      	ldr	r1, [r5, #28]
   82972:	47b8      	blx	r7
   82974:	2800      	cmp	r0, #0
   82976:	ebc0 0404 	rsb	r4, r0, r4
   8297a:	4406      	add	r6, r0
   8297c:	dd04      	ble.n	82988 <__sflush_r+0xc0>
   8297e:	2c00      	cmp	r4, #0
   82980:	dcf2      	bgt.n	82968 <__sflush_r+0xa0>
   82982:	2000      	movs	r0, #0
   82984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82988:	89ab      	ldrh	r3, [r5, #12]
   8298a:	f04f 30ff 	mov.w	r0, #4294967295
   8298e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82992:	81ab      	strh	r3, [r5, #12]
   82994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82998:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8299a:	2a00      	cmp	r2, #0
   8299c:	dca2      	bgt.n	828e4 <__sflush_r+0x1c>
   8299e:	e7f0      	b.n	82982 <__sflush_r+0xba>
   829a0:	2301      	movs	r3, #1
   829a2:	4640      	mov	r0, r8
   829a4:	69e9      	ldr	r1, [r5, #28]
   829a6:	47a0      	blx	r4
   829a8:	1c43      	adds	r3, r0, #1
   829aa:	4602      	mov	r2, r0
   829ac:	d01e      	beq.n	829ec <__sflush_r+0x124>
   829ae:	89ab      	ldrh	r3, [r5, #12]
   829b0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   829b2:	e7a6      	b.n	82902 <__sflush_r+0x3a>
   829b4:	f8d8 3000 	ldr.w	r3, [r8]
   829b8:	b95b      	cbnz	r3, 829d2 <__sflush_r+0x10a>
   829ba:	89aa      	ldrh	r2, [r5, #12]
   829bc:	6929      	ldr	r1, [r5, #16]
   829be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   829c2:	b292      	uxth	r2, r2
   829c4:	606b      	str	r3, [r5, #4]
   829c6:	04d3      	lsls	r3, r2, #19
   829c8:	81aa      	strh	r2, [r5, #12]
   829ca:	6029      	str	r1, [r5, #0]
   829cc:	d5b2      	bpl.n	82934 <__sflush_r+0x6c>
   829ce:	6528      	str	r0, [r5, #80]	; 0x50
   829d0:	e7b0      	b.n	82934 <__sflush_r+0x6c>
   829d2:	2b1d      	cmp	r3, #29
   829d4:	d001      	beq.n	829da <__sflush_r+0x112>
   829d6:	2b16      	cmp	r3, #22
   829d8:	d113      	bne.n	82a02 <__sflush_r+0x13a>
   829da:	89a9      	ldrh	r1, [r5, #12]
   829dc:	692b      	ldr	r3, [r5, #16]
   829de:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   829e2:	2200      	movs	r2, #0
   829e4:	81a9      	strh	r1, [r5, #12]
   829e6:	602b      	str	r3, [r5, #0]
   829e8:	606a      	str	r2, [r5, #4]
   829ea:	e7a3      	b.n	82934 <__sflush_r+0x6c>
   829ec:	f8d8 3000 	ldr.w	r3, [r8]
   829f0:	2b00      	cmp	r3, #0
   829f2:	d0dc      	beq.n	829ae <__sflush_r+0xe6>
   829f4:	2b1d      	cmp	r3, #29
   829f6:	d001      	beq.n	829fc <__sflush_r+0x134>
   829f8:	2b16      	cmp	r3, #22
   829fa:	d1c5      	bne.n	82988 <__sflush_r+0xc0>
   829fc:	f8c8 6000 	str.w	r6, [r8]
   82a00:	e7bf      	b.n	82982 <__sflush_r+0xba>
   82a02:	89ab      	ldrh	r3, [r5, #12]
   82a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82a08:	81ab      	strh	r3, [r5, #12]
   82a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a0e:	bf00      	nop

00082a10 <_fflush_r>:
   82a10:	b510      	push	{r4, lr}
   82a12:	4604      	mov	r4, r0
   82a14:	b082      	sub	sp, #8
   82a16:	b108      	cbz	r0, 82a1c <_fflush_r+0xc>
   82a18:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82a1a:	b153      	cbz	r3, 82a32 <_fflush_r+0x22>
   82a1c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82a20:	b908      	cbnz	r0, 82a26 <_fflush_r+0x16>
   82a22:	b002      	add	sp, #8
   82a24:	bd10      	pop	{r4, pc}
   82a26:	4620      	mov	r0, r4
   82a28:	b002      	add	sp, #8
   82a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82a2e:	f7ff bf4b 	b.w	828c8 <__sflush_r>
   82a32:	9101      	str	r1, [sp, #4]
   82a34:	f000 f808 	bl	82a48 <__sinit>
   82a38:	9901      	ldr	r1, [sp, #4]
   82a3a:	e7ef      	b.n	82a1c <_fflush_r+0xc>

00082a3c <_cleanup_r>:
   82a3c:	4901      	ldr	r1, [pc, #4]	; (82a44 <_cleanup_r+0x8>)
   82a3e:	f000 bb9f 	b.w	83180 <_fwalk>
   82a42:	bf00      	nop
   82a44:	00084149 	.word	0x00084149

00082a48 <__sinit>:
   82a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a4c:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82a4e:	b083      	sub	sp, #12
   82a50:	4607      	mov	r7, r0
   82a52:	2c00      	cmp	r4, #0
   82a54:	d165      	bne.n	82b22 <__sinit+0xda>
   82a56:	687d      	ldr	r5, [r7, #4]
   82a58:	4833      	ldr	r0, [pc, #204]	; (82b28 <__sinit+0xe0>)
   82a5a:	2304      	movs	r3, #4
   82a5c:	2103      	movs	r1, #3
   82a5e:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82a62:	63f8      	str	r0, [r7, #60]	; 0x3c
   82a64:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82a68:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82a6c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82a70:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82a74:	81ab      	strh	r3, [r5, #12]
   82a76:	602c      	str	r4, [r5, #0]
   82a78:	606c      	str	r4, [r5, #4]
   82a7a:	60ac      	str	r4, [r5, #8]
   82a7c:	666c      	str	r4, [r5, #100]	; 0x64
   82a7e:	81ec      	strh	r4, [r5, #14]
   82a80:	612c      	str	r4, [r5, #16]
   82a82:	616c      	str	r4, [r5, #20]
   82a84:	61ac      	str	r4, [r5, #24]
   82a86:	4621      	mov	r1, r4
   82a88:	2208      	movs	r2, #8
   82a8a:	f7fe ff05 	bl	81898 <memset>
   82a8e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82b2c <__sinit+0xe4>
   82a92:	68be      	ldr	r6, [r7, #8]
   82a94:	f8df a098 	ldr.w	sl, [pc, #152]	; 82b30 <__sinit+0xe8>
   82a98:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82b34 <__sinit+0xec>
   82a9c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82b38 <__sinit+0xf0>
   82aa0:	2301      	movs	r3, #1
   82aa2:	2209      	movs	r2, #9
   82aa4:	61ed      	str	r5, [r5, #28]
   82aa6:	f8c5 b020 	str.w	fp, [r5, #32]
   82aaa:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82aae:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82ab2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82ab6:	4621      	mov	r1, r4
   82ab8:	81f3      	strh	r3, [r6, #14]
   82aba:	81b2      	strh	r2, [r6, #12]
   82abc:	6034      	str	r4, [r6, #0]
   82abe:	6074      	str	r4, [r6, #4]
   82ac0:	60b4      	str	r4, [r6, #8]
   82ac2:	6674      	str	r4, [r6, #100]	; 0x64
   82ac4:	6134      	str	r4, [r6, #16]
   82ac6:	6174      	str	r4, [r6, #20]
   82ac8:	61b4      	str	r4, [r6, #24]
   82aca:	2208      	movs	r2, #8
   82acc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82ad0:	9301      	str	r3, [sp, #4]
   82ad2:	f7fe fee1 	bl	81898 <memset>
   82ad6:	68fd      	ldr	r5, [r7, #12]
   82ad8:	2012      	movs	r0, #18
   82ada:	2202      	movs	r2, #2
   82adc:	61f6      	str	r6, [r6, #28]
   82ade:	f8c6 b020 	str.w	fp, [r6, #32]
   82ae2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82ae6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82aea:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82aee:	4621      	mov	r1, r4
   82af0:	81a8      	strh	r0, [r5, #12]
   82af2:	81ea      	strh	r2, [r5, #14]
   82af4:	602c      	str	r4, [r5, #0]
   82af6:	606c      	str	r4, [r5, #4]
   82af8:	60ac      	str	r4, [r5, #8]
   82afa:	666c      	str	r4, [r5, #100]	; 0x64
   82afc:	612c      	str	r4, [r5, #16]
   82afe:	616c      	str	r4, [r5, #20]
   82b00:	61ac      	str	r4, [r5, #24]
   82b02:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82b06:	2208      	movs	r2, #8
   82b08:	f7fe fec6 	bl	81898 <memset>
   82b0c:	9b01      	ldr	r3, [sp, #4]
   82b0e:	61ed      	str	r5, [r5, #28]
   82b10:	f8c5 b020 	str.w	fp, [r5, #32]
   82b14:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82b18:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82b1c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82b20:	63bb      	str	r3, [r7, #56]	; 0x38
   82b22:	b003      	add	sp, #12
   82b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b28:	00082a3d 	.word	0x00082a3d
   82b2c:	00083e3d 	.word	0x00083e3d
   82b30:	00083e61 	.word	0x00083e61
   82b34:	00083e99 	.word	0x00083e99
   82b38:	00083eb9 	.word	0x00083eb9

00082b3c <__sfp_lock_acquire>:
   82b3c:	4770      	bx	lr
   82b3e:	bf00      	nop

00082b40 <__sfp_lock_release>:
   82b40:	4770      	bx	lr
   82b42:	bf00      	nop

00082b44 <__libc_fini_array>:
   82b44:	b538      	push	{r3, r4, r5, lr}
   82b46:	4d09      	ldr	r5, [pc, #36]	; (82b6c <__libc_fini_array+0x28>)
   82b48:	4c09      	ldr	r4, [pc, #36]	; (82b70 <__libc_fini_array+0x2c>)
   82b4a:	1b64      	subs	r4, r4, r5
   82b4c:	10a4      	asrs	r4, r4, #2
   82b4e:	bf18      	it	ne
   82b50:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82b54:	d005      	beq.n	82b62 <__libc_fini_array+0x1e>
   82b56:	3c01      	subs	r4, #1
   82b58:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82b5c:	4798      	blx	r3
   82b5e:	2c00      	cmp	r4, #0
   82b60:	d1f9      	bne.n	82b56 <__libc_fini_array+0x12>
   82b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82b66:	f001 be89 	b.w	8487c <_fini>
   82b6a:	bf00      	nop
   82b6c:	00084888 	.word	0x00084888
   82b70:	0008488c 	.word	0x0008488c

00082b74 <_fputwc_r>:
   82b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82b78:	8993      	ldrh	r3, [r2, #12]
   82b7a:	460f      	mov	r7, r1
   82b7c:	0499      	lsls	r1, r3, #18
   82b7e:	b082      	sub	sp, #8
   82b80:	4614      	mov	r4, r2
   82b82:	4680      	mov	r8, r0
   82b84:	d406      	bmi.n	82b94 <_fputwc_r+0x20>
   82b86:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82b88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82b90:	81a3      	strh	r3, [r4, #12]
   82b92:	6662      	str	r2, [r4, #100]	; 0x64
   82b94:	f000 fb1c 	bl	831d0 <__locale_mb_cur_max>
   82b98:	2801      	cmp	r0, #1
   82b9a:	d03e      	beq.n	82c1a <_fputwc_r+0xa6>
   82b9c:	463a      	mov	r2, r7
   82b9e:	4640      	mov	r0, r8
   82ba0:	a901      	add	r1, sp, #4
   82ba2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82ba6:	f001 f9df 	bl	83f68 <_wcrtomb_r>
   82baa:	1c42      	adds	r2, r0, #1
   82bac:	4606      	mov	r6, r0
   82bae:	d02d      	beq.n	82c0c <_fputwc_r+0x98>
   82bb0:	2800      	cmp	r0, #0
   82bb2:	d03a      	beq.n	82c2a <_fputwc_r+0xb6>
   82bb4:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82bb8:	2500      	movs	r5, #0
   82bba:	e009      	b.n	82bd0 <_fputwc_r+0x5c>
   82bbc:	6823      	ldr	r3, [r4, #0]
   82bbe:	7019      	strb	r1, [r3, #0]
   82bc0:	6823      	ldr	r3, [r4, #0]
   82bc2:	3301      	adds	r3, #1
   82bc4:	6023      	str	r3, [r4, #0]
   82bc6:	3501      	adds	r5, #1
   82bc8:	42b5      	cmp	r5, r6
   82bca:	d22e      	bcs.n	82c2a <_fputwc_r+0xb6>
   82bcc:	ab01      	add	r3, sp, #4
   82bce:	5ce9      	ldrb	r1, [r5, r3]
   82bd0:	68a3      	ldr	r3, [r4, #8]
   82bd2:	3b01      	subs	r3, #1
   82bd4:	2b00      	cmp	r3, #0
   82bd6:	60a3      	str	r3, [r4, #8]
   82bd8:	daf0      	bge.n	82bbc <_fputwc_r+0x48>
   82bda:	69a2      	ldr	r2, [r4, #24]
   82bdc:	4293      	cmp	r3, r2
   82bde:	db06      	blt.n	82bee <_fputwc_r+0x7a>
   82be0:	6823      	ldr	r3, [r4, #0]
   82be2:	7019      	strb	r1, [r3, #0]
   82be4:	6823      	ldr	r3, [r4, #0]
   82be6:	7819      	ldrb	r1, [r3, #0]
   82be8:	3301      	adds	r3, #1
   82bea:	290a      	cmp	r1, #10
   82bec:	d1ea      	bne.n	82bc4 <_fputwc_r+0x50>
   82bee:	4640      	mov	r0, r8
   82bf0:	4622      	mov	r2, r4
   82bf2:	f001 f965 	bl	83ec0 <__swbuf_r>
   82bf6:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82bfa:	4258      	negs	r0, r3
   82bfc:	4158      	adcs	r0, r3
   82bfe:	2800      	cmp	r0, #0
   82c00:	d0e1      	beq.n	82bc6 <_fputwc_r+0x52>
   82c02:	f04f 30ff 	mov.w	r0, #4294967295
   82c06:	b002      	add	sp, #8
   82c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c0c:	89a3      	ldrh	r3, [r4, #12]
   82c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82c12:	81a3      	strh	r3, [r4, #12]
   82c14:	b002      	add	sp, #8
   82c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c1a:	1e7b      	subs	r3, r7, #1
   82c1c:	2bfe      	cmp	r3, #254	; 0xfe
   82c1e:	d8bd      	bhi.n	82b9c <_fputwc_r+0x28>
   82c20:	b2f9      	uxtb	r1, r7
   82c22:	4606      	mov	r6, r0
   82c24:	f88d 1004 	strb.w	r1, [sp, #4]
   82c28:	e7c6      	b.n	82bb8 <_fputwc_r+0x44>
   82c2a:	4638      	mov	r0, r7
   82c2c:	b002      	add	sp, #8
   82c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c32:	bf00      	nop

00082c34 <_malloc_trim_r>:
   82c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82c36:	4d23      	ldr	r5, [pc, #140]	; (82cc4 <_malloc_trim_r+0x90>)
   82c38:	460f      	mov	r7, r1
   82c3a:	4604      	mov	r4, r0
   82c3c:	f000 ff08 	bl	83a50 <__malloc_lock>
   82c40:	68ab      	ldr	r3, [r5, #8]
   82c42:	685e      	ldr	r6, [r3, #4]
   82c44:	f026 0603 	bic.w	r6, r6, #3
   82c48:	1bf1      	subs	r1, r6, r7
   82c4a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82c4e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82c52:	f021 010f 	bic.w	r1, r1, #15
   82c56:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82c5a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82c5e:	db07      	blt.n	82c70 <_malloc_trim_r+0x3c>
   82c60:	4620      	mov	r0, r4
   82c62:	2100      	movs	r1, #0
   82c64:	f001 f8d8 	bl	83e18 <_sbrk_r>
   82c68:	68ab      	ldr	r3, [r5, #8]
   82c6a:	4433      	add	r3, r6
   82c6c:	4298      	cmp	r0, r3
   82c6e:	d004      	beq.n	82c7a <_malloc_trim_r+0x46>
   82c70:	4620      	mov	r0, r4
   82c72:	f000 feef 	bl	83a54 <__malloc_unlock>
   82c76:	2000      	movs	r0, #0
   82c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c7a:	4620      	mov	r0, r4
   82c7c:	4279      	negs	r1, r7
   82c7e:	f001 f8cb 	bl	83e18 <_sbrk_r>
   82c82:	3001      	adds	r0, #1
   82c84:	d00d      	beq.n	82ca2 <_malloc_trim_r+0x6e>
   82c86:	4b10      	ldr	r3, [pc, #64]	; (82cc8 <_malloc_trim_r+0x94>)
   82c88:	68aa      	ldr	r2, [r5, #8]
   82c8a:	6819      	ldr	r1, [r3, #0]
   82c8c:	1bf6      	subs	r6, r6, r7
   82c8e:	f046 0601 	orr.w	r6, r6, #1
   82c92:	4620      	mov	r0, r4
   82c94:	1bc9      	subs	r1, r1, r7
   82c96:	6056      	str	r6, [r2, #4]
   82c98:	6019      	str	r1, [r3, #0]
   82c9a:	f000 fedb 	bl	83a54 <__malloc_unlock>
   82c9e:	2001      	movs	r0, #1
   82ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ca2:	4620      	mov	r0, r4
   82ca4:	2100      	movs	r1, #0
   82ca6:	f001 f8b7 	bl	83e18 <_sbrk_r>
   82caa:	68ab      	ldr	r3, [r5, #8]
   82cac:	1ac2      	subs	r2, r0, r3
   82cae:	2a0f      	cmp	r2, #15
   82cb0:	ddde      	ble.n	82c70 <_malloc_trim_r+0x3c>
   82cb2:	4d06      	ldr	r5, [pc, #24]	; (82ccc <_malloc_trim_r+0x98>)
   82cb4:	4904      	ldr	r1, [pc, #16]	; (82cc8 <_malloc_trim_r+0x94>)
   82cb6:	682d      	ldr	r5, [r5, #0]
   82cb8:	f042 0201 	orr.w	r2, r2, #1
   82cbc:	1b40      	subs	r0, r0, r5
   82cbe:	605a      	str	r2, [r3, #4]
   82cc0:	6008      	str	r0, [r1, #0]
   82cc2:	e7d5      	b.n	82c70 <_malloc_trim_r+0x3c>
   82cc4:	200705a0 	.word	0x200705a0
   82cc8:	20070b04 	.word	0x20070b04
   82ccc:	200709ac 	.word	0x200709ac

00082cd0 <_free_r>:
   82cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82cd4:	460d      	mov	r5, r1
   82cd6:	4606      	mov	r6, r0
   82cd8:	2900      	cmp	r1, #0
   82cda:	d055      	beq.n	82d88 <_free_r+0xb8>
   82cdc:	f000 feb8 	bl	83a50 <__malloc_lock>
   82ce0:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82ce4:	f8df c170 	ldr.w	ip, [pc, #368]	; 82e58 <_free_r+0x188>
   82ce8:	f1a5 0408 	sub.w	r4, r5, #8
   82cec:	f021 0301 	bic.w	r3, r1, #1
   82cf0:	18e2      	adds	r2, r4, r3
   82cf2:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82cf6:	6857      	ldr	r7, [r2, #4]
   82cf8:	4290      	cmp	r0, r2
   82cfa:	f027 0703 	bic.w	r7, r7, #3
   82cfe:	d068      	beq.n	82dd2 <_free_r+0x102>
   82d00:	f011 0101 	ands.w	r1, r1, #1
   82d04:	6057      	str	r7, [r2, #4]
   82d06:	d032      	beq.n	82d6e <_free_r+0x9e>
   82d08:	2100      	movs	r1, #0
   82d0a:	19d0      	adds	r0, r2, r7
   82d0c:	6840      	ldr	r0, [r0, #4]
   82d0e:	07c0      	lsls	r0, r0, #31
   82d10:	d406      	bmi.n	82d20 <_free_r+0x50>
   82d12:	443b      	add	r3, r7
   82d14:	6890      	ldr	r0, [r2, #8]
   82d16:	2900      	cmp	r1, #0
   82d18:	d04d      	beq.n	82db6 <_free_r+0xe6>
   82d1a:	68d2      	ldr	r2, [r2, #12]
   82d1c:	60c2      	str	r2, [r0, #12]
   82d1e:	6090      	str	r0, [r2, #8]
   82d20:	f043 0201 	orr.w	r2, r3, #1
   82d24:	6062      	str	r2, [r4, #4]
   82d26:	50e3      	str	r3, [r4, r3]
   82d28:	b9e1      	cbnz	r1, 82d64 <_free_r+0x94>
   82d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82d2e:	d32d      	bcc.n	82d8c <_free_r+0xbc>
   82d30:	0a5a      	lsrs	r2, r3, #9
   82d32:	2a04      	cmp	r2, #4
   82d34:	d869      	bhi.n	82e0a <_free_r+0x13a>
   82d36:	0998      	lsrs	r0, r3, #6
   82d38:	3038      	adds	r0, #56	; 0x38
   82d3a:	0041      	lsls	r1, r0, #1
   82d3c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82d40:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82d44:	4944      	ldr	r1, [pc, #272]	; (82e58 <_free_r+0x188>)
   82d46:	4562      	cmp	r2, ip
   82d48:	d065      	beq.n	82e16 <_free_r+0x146>
   82d4a:	6851      	ldr	r1, [r2, #4]
   82d4c:	f021 0103 	bic.w	r1, r1, #3
   82d50:	428b      	cmp	r3, r1
   82d52:	d202      	bcs.n	82d5a <_free_r+0x8a>
   82d54:	6892      	ldr	r2, [r2, #8]
   82d56:	4594      	cmp	ip, r2
   82d58:	d1f7      	bne.n	82d4a <_free_r+0x7a>
   82d5a:	68d3      	ldr	r3, [r2, #12]
   82d5c:	60e3      	str	r3, [r4, #12]
   82d5e:	60a2      	str	r2, [r4, #8]
   82d60:	609c      	str	r4, [r3, #8]
   82d62:	60d4      	str	r4, [r2, #12]
   82d64:	4630      	mov	r0, r6
   82d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82d6a:	f000 be73 	b.w	83a54 <__malloc_unlock>
   82d6e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82d72:	f10c 0808 	add.w	r8, ip, #8
   82d76:	1b64      	subs	r4, r4, r5
   82d78:	68a0      	ldr	r0, [r4, #8]
   82d7a:	442b      	add	r3, r5
   82d7c:	4540      	cmp	r0, r8
   82d7e:	d042      	beq.n	82e06 <_free_r+0x136>
   82d80:	68e5      	ldr	r5, [r4, #12]
   82d82:	60c5      	str	r5, [r0, #12]
   82d84:	60a8      	str	r0, [r5, #8]
   82d86:	e7c0      	b.n	82d0a <_free_r+0x3a>
   82d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d8c:	08db      	lsrs	r3, r3, #3
   82d8e:	109a      	asrs	r2, r3, #2
   82d90:	2001      	movs	r0, #1
   82d92:	4090      	lsls	r0, r2
   82d94:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82d98:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82d9c:	689a      	ldr	r2, [r3, #8]
   82d9e:	4301      	orrs	r1, r0
   82da0:	60a2      	str	r2, [r4, #8]
   82da2:	60e3      	str	r3, [r4, #12]
   82da4:	f8cc 1004 	str.w	r1, [ip, #4]
   82da8:	4630      	mov	r0, r6
   82daa:	609c      	str	r4, [r3, #8]
   82dac:	60d4      	str	r4, [r2, #12]
   82dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82db2:	f000 be4f 	b.w	83a54 <__malloc_unlock>
   82db6:	4d29      	ldr	r5, [pc, #164]	; (82e5c <_free_r+0x18c>)
   82db8:	42a8      	cmp	r0, r5
   82dba:	d1ae      	bne.n	82d1a <_free_r+0x4a>
   82dbc:	f043 0201 	orr.w	r2, r3, #1
   82dc0:	f8cc 4014 	str.w	r4, [ip, #20]
   82dc4:	f8cc 4010 	str.w	r4, [ip, #16]
   82dc8:	60e0      	str	r0, [r4, #12]
   82dca:	60a0      	str	r0, [r4, #8]
   82dcc:	6062      	str	r2, [r4, #4]
   82dce:	50e3      	str	r3, [r4, r3]
   82dd0:	e7c8      	b.n	82d64 <_free_r+0x94>
   82dd2:	441f      	add	r7, r3
   82dd4:	07cb      	lsls	r3, r1, #31
   82dd6:	d407      	bmi.n	82de8 <_free_r+0x118>
   82dd8:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82ddc:	1a64      	subs	r4, r4, r1
   82dde:	68e3      	ldr	r3, [r4, #12]
   82de0:	68a2      	ldr	r2, [r4, #8]
   82de2:	440f      	add	r7, r1
   82de4:	60d3      	str	r3, [r2, #12]
   82de6:	609a      	str	r2, [r3, #8]
   82de8:	4b1d      	ldr	r3, [pc, #116]	; (82e60 <_free_r+0x190>)
   82dea:	f047 0201 	orr.w	r2, r7, #1
   82dee:	681b      	ldr	r3, [r3, #0]
   82df0:	6062      	str	r2, [r4, #4]
   82df2:	429f      	cmp	r7, r3
   82df4:	f8cc 4008 	str.w	r4, [ip, #8]
   82df8:	d3b4      	bcc.n	82d64 <_free_r+0x94>
   82dfa:	4b1a      	ldr	r3, [pc, #104]	; (82e64 <_free_r+0x194>)
   82dfc:	4630      	mov	r0, r6
   82dfe:	6819      	ldr	r1, [r3, #0]
   82e00:	f7ff ff18 	bl	82c34 <_malloc_trim_r>
   82e04:	e7ae      	b.n	82d64 <_free_r+0x94>
   82e06:	2101      	movs	r1, #1
   82e08:	e77f      	b.n	82d0a <_free_r+0x3a>
   82e0a:	2a14      	cmp	r2, #20
   82e0c:	d80b      	bhi.n	82e26 <_free_r+0x156>
   82e0e:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82e12:	0041      	lsls	r1, r0, #1
   82e14:	e792      	b.n	82d3c <_free_r+0x6c>
   82e16:	1080      	asrs	r0, r0, #2
   82e18:	2501      	movs	r5, #1
   82e1a:	4085      	lsls	r5, r0
   82e1c:	6848      	ldr	r0, [r1, #4]
   82e1e:	4613      	mov	r3, r2
   82e20:	4328      	orrs	r0, r5
   82e22:	6048      	str	r0, [r1, #4]
   82e24:	e79a      	b.n	82d5c <_free_r+0x8c>
   82e26:	2a54      	cmp	r2, #84	; 0x54
   82e28:	d803      	bhi.n	82e32 <_free_r+0x162>
   82e2a:	0b18      	lsrs	r0, r3, #12
   82e2c:	306e      	adds	r0, #110	; 0x6e
   82e2e:	0041      	lsls	r1, r0, #1
   82e30:	e784      	b.n	82d3c <_free_r+0x6c>
   82e32:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82e36:	d803      	bhi.n	82e40 <_free_r+0x170>
   82e38:	0bd8      	lsrs	r0, r3, #15
   82e3a:	3077      	adds	r0, #119	; 0x77
   82e3c:	0041      	lsls	r1, r0, #1
   82e3e:	e77d      	b.n	82d3c <_free_r+0x6c>
   82e40:	f240 5154 	movw	r1, #1364	; 0x554
   82e44:	428a      	cmp	r2, r1
   82e46:	d803      	bhi.n	82e50 <_free_r+0x180>
   82e48:	0c98      	lsrs	r0, r3, #18
   82e4a:	307c      	adds	r0, #124	; 0x7c
   82e4c:	0041      	lsls	r1, r0, #1
   82e4e:	e775      	b.n	82d3c <_free_r+0x6c>
   82e50:	21fc      	movs	r1, #252	; 0xfc
   82e52:	207e      	movs	r0, #126	; 0x7e
   82e54:	e772      	b.n	82d3c <_free_r+0x6c>
   82e56:	bf00      	nop
   82e58:	200705a0 	.word	0x200705a0
   82e5c:	200705a8 	.word	0x200705a8
   82e60:	200709a8 	.word	0x200709a8
   82e64:	20070b00 	.word	0x20070b00

00082e68 <__sfvwrite_r>:
   82e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82e6c:	6893      	ldr	r3, [r2, #8]
   82e6e:	b083      	sub	sp, #12
   82e70:	4616      	mov	r6, r2
   82e72:	4681      	mov	r9, r0
   82e74:	460c      	mov	r4, r1
   82e76:	b32b      	cbz	r3, 82ec4 <__sfvwrite_r+0x5c>
   82e78:	898b      	ldrh	r3, [r1, #12]
   82e7a:	0719      	lsls	r1, r3, #28
   82e7c:	d526      	bpl.n	82ecc <__sfvwrite_r+0x64>
   82e7e:	6922      	ldr	r2, [r4, #16]
   82e80:	b322      	cbz	r2, 82ecc <__sfvwrite_r+0x64>
   82e82:	f003 0202 	and.w	r2, r3, #2
   82e86:	b292      	uxth	r2, r2
   82e88:	6835      	ldr	r5, [r6, #0]
   82e8a:	2a00      	cmp	r2, #0
   82e8c:	d02c      	beq.n	82ee8 <__sfvwrite_r+0x80>
   82e8e:	f04f 0a00 	mov.w	sl, #0
   82e92:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8317c <__sfvwrite_r+0x314>
   82e96:	46d0      	mov	r8, sl
   82e98:	45d8      	cmp	r8, fp
   82e9a:	bf34      	ite	cc
   82e9c:	4643      	movcc	r3, r8
   82e9e:	465b      	movcs	r3, fp
   82ea0:	4652      	mov	r2, sl
   82ea2:	4648      	mov	r0, r9
   82ea4:	f1b8 0f00 	cmp.w	r8, #0
   82ea8:	d04f      	beq.n	82f4a <__sfvwrite_r+0xe2>
   82eaa:	69e1      	ldr	r1, [r4, #28]
   82eac:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82eae:	47b8      	blx	r7
   82eb0:	2800      	cmp	r0, #0
   82eb2:	dd56      	ble.n	82f62 <__sfvwrite_r+0xfa>
   82eb4:	68b3      	ldr	r3, [r6, #8]
   82eb6:	4482      	add	sl, r0
   82eb8:	1a1b      	subs	r3, r3, r0
   82eba:	ebc0 0808 	rsb	r8, r0, r8
   82ebe:	60b3      	str	r3, [r6, #8]
   82ec0:	2b00      	cmp	r3, #0
   82ec2:	d1e9      	bne.n	82e98 <__sfvwrite_r+0x30>
   82ec4:	2000      	movs	r0, #0
   82ec6:	b003      	add	sp, #12
   82ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ecc:	4648      	mov	r0, r9
   82ece:	4621      	mov	r1, r4
   82ed0:	f7ff fc88 	bl	827e4 <__swsetup_r>
   82ed4:	2800      	cmp	r0, #0
   82ed6:	f040 8148 	bne.w	8316a <__sfvwrite_r+0x302>
   82eda:	89a3      	ldrh	r3, [r4, #12]
   82edc:	6835      	ldr	r5, [r6, #0]
   82ede:	f003 0202 	and.w	r2, r3, #2
   82ee2:	b292      	uxth	r2, r2
   82ee4:	2a00      	cmp	r2, #0
   82ee6:	d1d2      	bne.n	82e8e <__sfvwrite_r+0x26>
   82ee8:	f013 0a01 	ands.w	sl, r3, #1
   82eec:	d142      	bne.n	82f74 <__sfvwrite_r+0x10c>
   82eee:	46d0      	mov	r8, sl
   82ef0:	f1b8 0f00 	cmp.w	r8, #0
   82ef4:	d023      	beq.n	82f3e <__sfvwrite_r+0xd6>
   82ef6:	059a      	lsls	r2, r3, #22
   82ef8:	68a7      	ldr	r7, [r4, #8]
   82efa:	d576      	bpl.n	82fea <__sfvwrite_r+0x182>
   82efc:	45b8      	cmp	r8, r7
   82efe:	f0c0 80a4 	bcc.w	8304a <__sfvwrite_r+0x1e2>
   82f02:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82f06:	f040 80b2 	bne.w	8306e <__sfvwrite_r+0x206>
   82f0a:	6820      	ldr	r0, [r4, #0]
   82f0c:	46bb      	mov	fp, r7
   82f0e:	4651      	mov	r1, sl
   82f10:	465a      	mov	r2, fp
   82f12:	f000 fd37 	bl	83984 <memmove>
   82f16:	68a2      	ldr	r2, [r4, #8]
   82f18:	6821      	ldr	r1, [r4, #0]
   82f1a:	1bd2      	subs	r2, r2, r7
   82f1c:	eb01 030b 	add.w	r3, r1, fp
   82f20:	60a2      	str	r2, [r4, #8]
   82f22:	6023      	str	r3, [r4, #0]
   82f24:	4642      	mov	r2, r8
   82f26:	68b3      	ldr	r3, [r6, #8]
   82f28:	4492      	add	sl, r2
   82f2a:	1a9b      	subs	r3, r3, r2
   82f2c:	ebc2 0808 	rsb	r8, r2, r8
   82f30:	60b3      	str	r3, [r6, #8]
   82f32:	2b00      	cmp	r3, #0
   82f34:	d0c6      	beq.n	82ec4 <__sfvwrite_r+0x5c>
   82f36:	89a3      	ldrh	r3, [r4, #12]
   82f38:	f1b8 0f00 	cmp.w	r8, #0
   82f3c:	d1db      	bne.n	82ef6 <__sfvwrite_r+0x8e>
   82f3e:	f8d5 a000 	ldr.w	sl, [r5]
   82f42:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82f46:	3508      	adds	r5, #8
   82f48:	e7d2      	b.n	82ef0 <__sfvwrite_r+0x88>
   82f4a:	f8d5 a000 	ldr.w	sl, [r5]
   82f4e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82f52:	3508      	adds	r5, #8
   82f54:	e7a0      	b.n	82e98 <__sfvwrite_r+0x30>
   82f56:	4648      	mov	r0, r9
   82f58:	4621      	mov	r1, r4
   82f5a:	f7ff fd59 	bl	82a10 <_fflush_r>
   82f5e:	2800      	cmp	r0, #0
   82f60:	d059      	beq.n	83016 <__sfvwrite_r+0x1ae>
   82f62:	89a3      	ldrh	r3, [r4, #12]
   82f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82f68:	f04f 30ff 	mov.w	r0, #4294967295
   82f6c:	81a3      	strh	r3, [r4, #12]
   82f6e:	b003      	add	sp, #12
   82f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f74:	4692      	mov	sl, r2
   82f76:	9201      	str	r2, [sp, #4]
   82f78:	4693      	mov	fp, r2
   82f7a:	4690      	mov	r8, r2
   82f7c:	f1b8 0f00 	cmp.w	r8, #0
   82f80:	d02b      	beq.n	82fda <__sfvwrite_r+0x172>
   82f82:	9f01      	ldr	r7, [sp, #4]
   82f84:	2f00      	cmp	r7, #0
   82f86:	d064      	beq.n	83052 <__sfvwrite_r+0x1ea>
   82f88:	6820      	ldr	r0, [r4, #0]
   82f8a:	6921      	ldr	r1, [r4, #16]
   82f8c:	45c2      	cmp	sl, r8
   82f8e:	bf34      	ite	cc
   82f90:	4653      	movcc	r3, sl
   82f92:	4643      	movcs	r3, r8
   82f94:	4288      	cmp	r0, r1
   82f96:	461f      	mov	r7, r3
   82f98:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82f9c:	6962      	ldr	r2, [r4, #20]
   82f9e:	d903      	bls.n	82fa8 <__sfvwrite_r+0x140>
   82fa0:	4494      	add	ip, r2
   82fa2:	4563      	cmp	r3, ip
   82fa4:	f300 80ae 	bgt.w	83104 <__sfvwrite_r+0x29c>
   82fa8:	4293      	cmp	r3, r2
   82faa:	db36      	blt.n	8301a <__sfvwrite_r+0x1b2>
   82fac:	4613      	mov	r3, r2
   82fae:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82fb0:	4648      	mov	r0, r9
   82fb2:	69e1      	ldr	r1, [r4, #28]
   82fb4:	465a      	mov	r2, fp
   82fb6:	47b8      	blx	r7
   82fb8:	1e07      	subs	r7, r0, #0
   82fba:	ddd2      	ble.n	82f62 <__sfvwrite_r+0xfa>
   82fbc:	ebba 0a07 	subs.w	sl, sl, r7
   82fc0:	d03a      	beq.n	83038 <__sfvwrite_r+0x1d0>
   82fc2:	68b3      	ldr	r3, [r6, #8]
   82fc4:	44bb      	add	fp, r7
   82fc6:	1bdb      	subs	r3, r3, r7
   82fc8:	ebc7 0808 	rsb	r8, r7, r8
   82fcc:	60b3      	str	r3, [r6, #8]
   82fce:	2b00      	cmp	r3, #0
   82fd0:	f43f af78 	beq.w	82ec4 <__sfvwrite_r+0x5c>
   82fd4:	f1b8 0f00 	cmp.w	r8, #0
   82fd8:	d1d3      	bne.n	82f82 <__sfvwrite_r+0x11a>
   82fda:	2700      	movs	r7, #0
   82fdc:	f8d5 b000 	ldr.w	fp, [r5]
   82fe0:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82fe4:	9701      	str	r7, [sp, #4]
   82fe6:	3508      	adds	r5, #8
   82fe8:	e7c8      	b.n	82f7c <__sfvwrite_r+0x114>
   82fea:	6820      	ldr	r0, [r4, #0]
   82fec:	6923      	ldr	r3, [r4, #16]
   82fee:	4298      	cmp	r0, r3
   82ff0:	d802      	bhi.n	82ff8 <__sfvwrite_r+0x190>
   82ff2:	6963      	ldr	r3, [r4, #20]
   82ff4:	4598      	cmp	r8, r3
   82ff6:	d272      	bcs.n	830de <__sfvwrite_r+0x276>
   82ff8:	45b8      	cmp	r8, r7
   82ffa:	bf38      	it	cc
   82ffc:	4647      	movcc	r7, r8
   82ffe:	463a      	mov	r2, r7
   83000:	4651      	mov	r1, sl
   83002:	f000 fcbf 	bl	83984 <memmove>
   83006:	68a3      	ldr	r3, [r4, #8]
   83008:	6822      	ldr	r2, [r4, #0]
   8300a:	1bdb      	subs	r3, r3, r7
   8300c:	443a      	add	r2, r7
   8300e:	60a3      	str	r3, [r4, #8]
   83010:	6022      	str	r2, [r4, #0]
   83012:	2b00      	cmp	r3, #0
   83014:	d09f      	beq.n	82f56 <__sfvwrite_r+0xee>
   83016:	463a      	mov	r2, r7
   83018:	e785      	b.n	82f26 <__sfvwrite_r+0xbe>
   8301a:	461a      	mov	r2, r3
   8301c:	4659      	mov	r1, fp
   8301e:	9300      	str	r3, [sp, #0]
   83020:	f000 fcb0 	bl	83984 <memmove>
   83024:	9b00      	ldr	r3, [sp, #0]
   83026:	68a1      	ldr	r1, [r4, #8]
   83028:	6822      	ldr	r2, [r4, #0]
   8302a:	1ac9      	subs	r1, r1, r3
   8302c:	ebba 0a07 	subs.w	sl, sl, r7
   83030:	4413      	add	r3, r2
   83032:	60a1      	str	r1, [r4, #8]
   83034:	6023      	str	r3, [r4, #0]
   83036:	d1c4      	bne.n	82fc2 <__sfvwrite_r+0x15a>
   83038:	4648      	mov	r0, r9
   8303a:	4621      	mov	r1, r4
   8303c:	f7ff fce8 	bl	82a10 <_fflush_r>
   83040:	2800      	cmp	r0, #0
   83042:	d18e      	bne.n	82f62 <__sfvwrite_r+0xfa>
   83044:	f8cd a004 	str.w	sl, [sp, #4]
   83048:	e7bb      	b.n	82fc2 <__sfvwrite_r+0x15a>
   8304a:	6820      	ldr	r0, [r4, #0]
   8304c:	4647      	mov	r7, r8
   8304e:	46c3      	mov	fp, r8
   83050:	e75d      	b.n	82f0e <__sfvwrite_r+0xa6>
   83052:	4658      	mov	r0, fp
   83054:	210a      	movs	r1, #10
   83056:	4642      	mov	r2, r8
   83058:	f000 fbd4 	bl	83804 <memchr>
   8305c:	2800      	cmp	r0, #0
   8305e:	d07f      	beq.n	83160 <__sfvwrite_r+0x2f8>
   83060:	f100 0a01 	add.w	sl, r0, #1
   83064:	2701      	movs	r7, #1
   83066:	ebcb 0a0a 	rsb	sl, fp, sl
   8306a:	9701      	str	r7, [sp, #4]
   8306c:	e78c      	b.n	82f88 <__sfvwrite_r+0x120>
   8306e:	6822      	ldr	r2, [r4, #0]
   83070:	6921      	ldr	r1, [r4, #16]
   83072:	6967      	ldr	r7, [r4, #20]
   83074:	ebc1 0c02 	rsb	ip, r1, r2
   83078:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8307c:	f10c 0201 	add.w	r2, ip, #1
   83080:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   83084:	4442      	add	r2, r8
   83086:	107f      	asrs	r7, r7, #1
   83088:	4297      	cmp	r7, r2
   8308a:	bf34      	ite	cc
   8308c:	4617      	movcc	r7, r2
   8308e:	463a      	movcs	r2, r7
   83090:	055b      	lsls	r3, r3, #21
   83092:	d54f      	bpl.n	83134 <__sfvwrite_r+0x2cc>
   83094:	4611      	mov	r1, r2
   83096:	4648      	mov	r0, r9
   83098:	f8cd c000 	str.w	ip, [sp]
   8309c:	f000 f916 	bl	832cc <_malloc_r>
   830a0:	f8dd c000 	ldr.w	ip, [sp]
   830a4:	4683      	mov	fp, r0
   830a6:	2800      	cmp	r0, #0
   830a8:	d062      	beq.n	83170 <__sfvwrite_r+0x308>
   830aa:	4662      	mov	r2, ip
   830ac:	6921      	ldr	r1, [r4, #16]
   830ae:	f8cd c000 	str.w	ip, [sp]
   830b2:	f000 fbf1 	bl	83898 <memcpy>
   830b6:	89a2      	ldrh	r2, [r4, #12]
   830b8:	f8dd c000 	ldr.w	ip, [sp]
   830bc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   830c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   830c4:	81a2      	strh	r2, [r4, #12]
   830c6:	eb0b 000c 	add.w	r0, fp, ip
   830ca:	ebcc 0207 	rsb	r2, ip, r7
   830ce:	f8c4 b010 	str.w	fp, [r4, #16]
   830d2:	6167      	str	r7, [r4, #20]
   830d4:	6020      	str	r0, [r4, #0]
   830d6:	60a2      	str	r2, [r4, #8]
   830d8:	4647      	mov	r7, r8
   830da:	46c3      	mov	fp, r8
   830dc:	e717      	b.n	82f0e <__sfvwrite_r+0xa6>
   830de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   830e2:	4590      	cmp	r8, r2
   830e4:	bf38      	it	cc
   830e6:	4642      	movcc	r2, r8
   830e8:	fb92 f2f3 	sdiv	r2, r2, r3
   830ec:	fb02 f303 	mul.w	r3, r2, r3
   830f0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   830f2:	4648      	mov	r0, r9
   830f4:	69e1      	ldr	r1, [r4, #28]
   830f6:	4652      	mov	r2, sl
   830f8:	47b8      	blx	r7
   830fa:	2800      	cmp	r0, #0
   830fc:	f77f af31 	ble.w	82f62 <__sfvwrite_r+0xfa>
   83100:	4602      	mov	r2, r0
   83102:	e710      	b.n	82f26 <__sfvwrite_r+0xbe>
   83104:	4662      	mov	r2, ip
   83106:	4659      	mov	r1, fp
   83108:	f8cd c000 	str.w	ip, [sp]
   8310c:	f000 fc3a 	bl	83984 <memmove>
   83110:	f8dd c000 	ldr.w	ip, [sp]
   83114:	6823      	ldr	r3, [r4, #0]
   83116:	4648      	mov	r0, r9
   83118:	4463      	add	r3, ip
   8311a:	6023      	str	r3, [r4, #0]
   8311c:	4621      	mov	r1, r4
   8311e:	f8cd c000 	str.w	ip, [sp]
   83122:	f7ff fc75 	bl	82a10 <_fflush_r>
   83126:	f8dd c000 	ldr.w	ip, [sp]
   8312a:	2800      	cmp	r0, #0
   8312c:	f47f af19 	bne.w	82f62 <__sfvwrite_r+0xfa>
   83130:	4667      	mov	r7, ip
   83132:	e743      	b.n	82fbc <__sfvwrite_r+0x154>
   83134:	4648      	mov	r0, r9
   83136:	f8cd c000 	str.w	ip, [sp]
   8313a:	f000 fc8d 	bl	83a58 <_realloc_r>
   8313e:	f8dd c000 	ldr.w	ip, [sp]
   83142:	4683      	mov	fp, r0
   83144:	2800      	cmp	r0, #0
   83146:	d1be      	bne.n	830c6 <__sfvwrite_r+0x25e>
   83148:	4648      	mov	r0, r9
   8314a:	6921      	ldr	r1, [r4, #16]
   8314c:	f7ff fdc0 	bl	82cd0 <_free_r>
   83150:	89a3      	ldrh	r3, [r4, #12]
   83152:	220c      	movs	r2, #12
   83154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83158:	b29b      	uxth	r3, r3
   8315a:	f8c9 2000 	str.w	r2, [r9]
   8315e:	e701      	b.n	82f64 <__sfvwrite_r+0xfc>
   83160:	2701      	movs	r7, #1
   83162:	f108 0a01 	add.w	sl, r8, #1
   83166:	9701      	str	r7, [sp, #4]
   83168:	e70e      	b.n	82f88 <__sfvwrite_r+0x120>
   8316a:	f04f 30ff 	mov.w	r0, #4294967295
   8316e:	e6aa      	b.n	82ec6 <__sfvwrite_r+0x5e>
   83170:	230c      	movs	r3, #12
   83172:	f8c9 3000 	str.w	r3, [r9]
   83176:	89a3      	ldrh	r3, [r4, #12]
   83178:	e6f4      	b.n	82f64 <__sfvwrite_r+0xfc>
   8317a:	bf00      	nop
   8317c:	7ffffc00 	.word	0x7ffffc00

00083180 <_fwalk>:
   83180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83184:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   83188:	4688      	mov	r8, r1
   8318a:	d019      	beq.n	831c0 <_fwalk+0x40>
   8318c:	2600      	movs	r6, #0
   8318e:	687d      	ldr	r5, [r7, #4]
   83190:	68bc      	ldr	r4, [r7, #8]
   83192:	3d01      	subs	r5, #1
   83194:	d40e      	bmi.n	831b4 <_fwalk+0x34>
   83196:	89a3      	ldrh	r3, [r4, #12]
   83198:	3d01      	subs	r5, #1
   8319a:	2b01      	cmp	r3, #1
   8319c:	d906      	bls.n	831ac <_fwalk+0x2c>
   8319e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   831a2:	4620      	mov	r0, r4
   831a4:	3301      	adds	r3, #1
   831a6:	d001      	beq.n	831ac <_fwalk+0x2c>
   831a8:	47c0      	blx	r8
   831aa:	4306      	orrs	r6, r0
   831ac:	1c6b      	adds	r3, r5, #1
   831ae:	f104 0468 	add.w	r4, r4, #104	; 0x68
   831b2:	d1f0      	bne.n	83196 <_fwalk+0x16>
   831b4:	683f      	ldr	r7, [r7, #0]
   831b6:	2f00      	cmp	r7, #0
   831b8:	d1e9      	bne.n	8318e <_fwalk+0xe>
   831ba:	4630      	mov	r0, r6
   831bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   831c0:	463e      	mov	r6, r7
   831c2:	4630      	mov	r0, r6
   831c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000831c8 <__locale_charset>:
   831c8:	4800      	ldr	r0, [pc, #0]	; (831cc <__locale_charset+0x4>)
   831ca:	4770      	bx	lr
   831cc:	2007057c 	.word	0x2007057c

000831d0 <__locale_mb_cur_max>:
   831d0:	4b01      	ldr	r3, [pc, #4]	; (831d8 <__locale_mb_cur_max+0x8>)
   831d2:	6818      	ldr	r0, [r3, #0]
   831d4:	4770      	bx	lr
   831d6:	bf00      	nop
   831d8:	2007059c 	.word	0x2007059c

000831dc <__smakebuf_r>:
   831dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   831de:	898b      	ldrh	r3, [r1, #12]
   831e0:	b091      	sub	sp, #68	; 0x44
   831e2:	b29a      	uxth	r2, r3
   831e4:	0796      	lsls	r6, r2, #30
   831e6:	460c      	mov	r4, r1
   831e8:	4605      	mov	r5, r0
   831ea:	d437      	bmi.n	8325c <__smakebuf_r+0x80>
   831ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   831f0:	2900      	cmp	r1, #0
   831f2:	db17      	blt.n	83224 <__smakebuf_r+0x48>
   831f4:	aa01      	add	r2, sp, #4
   831f6:	f000 ffaf 	bl	84158 <_fstat_r>
   831fa:	2800      	cmp	r0, #0
   831fc:	db10      	blt.n	83220 <__smakebuf_r+0x44>
   831fe:	9b02      	ldr	r3, [sp, #8]
   83200:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   83204:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   83208:	424f      	negs	r7, r1
   8320a:	414f      	adcs	r7, r1
   8320c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   83210:	d02c      	beq.n	8326c <__smakebuf_r+0x90>
   83212:	89a3      	ldrh	r3, [r4, #12]
   83214:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83218:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8321c:	81a3      	strh	r3, [r4, #12]
   8321e:	e00b      	b.n	83238 <__smakebuf_r+0x5c>
   83220:	89a3      	ldrh	r3, [r4, #12]
   83222:	b29a      	uxth	r2, r3
   83224:	f012 0f80 	tst.w	r2, #128	; 0x80
   83228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8322c:	81a3      	strh	r3, [r4, #12]
   8322e:	bf14      	ite	ne
   83230:	2640      	movne	r6, #64	; 0x40
   83232:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   83236:	2700      	movs	r7, #0
   83238:	4628      	mov	r0, r5
   8323a:	4631      	mov	r1, r6
   8323c:	f000 f846 	bl	832cc <_malloc_r>
   83240:	89a3      	ldrh	r3, [r4, #12]
   83242:	2800      	cmp	r0, #0
   83244:	d029      	beq.n	8329a <__smakebuf_r+0xbe>
   83246:	4a1b      	ldr	r2, [pc, #108]	; (832b4 <__smakebuf_r+0xd8>)
   83248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8324c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8324e:	81a3      	strh	r3, [r4, #12]
   83250:	6020      	str	r0, [r4, #0]
   83252:	6120      	str	r0, [r4, #16]
   83254:	6166      	str	r6, [r4, #20]
   83256:	b9a7      	cbnz	r7, 83282 <__smakebuf_r+0xa6>
   83258:	b011      	add	sp, #68	; 0x44
   8325a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8325c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   83260:	2201      	movs	r2, #1
   83262:	600b      	str	r3, [r1, #0]
   83264:	610b      	str	r3, [r1, #16]
   83266:	614a      	str	r2, [r1, #20]
   83268:	b011      	add	sp, #68	; 0x44
   8326a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8326c:	4a12      	ldr	r2, [pc, #72]	; (832b8 <__smakebuf_r+0xdc>)
   8326e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   83270:	4293      	cmp	r3, r2
   83272:	d1ce      	bne.n	83212 <__smakebuf_r+0x36>
   83274:	89a3      	ldrh	r3, [r4, #12]
   83276:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8327a:	4333      	orrs	r3, r6
   8327c:	81a3      	strh	r3, [r4, #12]
   8327e:	64e6      	str	r6, [r4, #76]	; 0x4c
   83280:	e7da      	b.n	83238 <__smakebuf_r+0x5c>
   83282:	4628      	mov	r0, r5
   83284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83288:	f000 ff7a 	bl	84180 <_isatty_r>
   8328c:	2800      	cmp	r0, #0
   8328e:	d0e3      	beq.n	83258 <__smakebuf_r+0x7c>
   83290:	89a3      	ldrh	r3, [r4, #12]
   83292:	f043 0301 	orr.w	r3, r3, #1
   83296:	81a3      	strh	r3, [r4, #12]
   83298:	e7de      	b.n	83258 <__smakebuf_r+0x7c>
   8329a:	059a      	lsls	r2, r3, #22
   8329c:	d4dc      	bmi.n	83258 <__smakebuf_r+0x7c>
   8329e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   832a2:	f043 0302 	orr.w	r3, r3, #2
   832a6:	2101      	movs	r1, #1
   832a8:	81a3      	strh	r3, [r4, #12]
   832aa:	6022      	str	r2, [r4, #0]
   832ac:	6122      	str	r2, [r4, #16]
   832ae:	6161      	str	r1, [r4, #20]
   832b0:	e7d2      	b.n	83258 <__smakebuf_r+0x7c>
   832b2:	bf00      	nop
   832b4:	00082a3d 	.word	0x00082a3d
   832b8:	00083e99 	.word	0x00083e99

000832bc <malloc>:
   832bc:	4b02      	ldr	r3, [pc, #8]	; (832c8 <malloc+0xc>)
   832be:	4601      	mov	r1, r0
   832c0:	6818      	ldr	r0, [r3, #0]
   832c2:	f000 b803 	b.w	832cc <_malloc_r>
   832c6:	bf00      	nop
   832c8:	20070578 	.word	0x20070578

000832cc <_malloc_r>:
   832cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   832d0:	f101 050b 	add.w	r5, r1, #11
   832d4:	2d16      	cmp	r5, #22
   832d6:	b083      	sub	sp, #12
   832d8:	4606      	mov	r6, r0
   832da:	d927      	bls.n	8332c <_malloc_r+0x60>
   832dc:	f035 0507 	bics.w	r5, r5, #7
   832e0:	d427      	bmi.n	83332 <_malloc_r+0x66>
   832e2:	42a9      	cmp	r1, r5
   832e4:	d825      	bhi.n	83332 <_malloc_r+0x66>
   832e6:	4630      	mov	r0, r6
   832e8:	f000 fbb2 	bl	83a50 <__malloc_lock>
   832ec:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   832f0:	d226      	bcs.n	83340 <_malloc_r+0x74>
   832f2:	4fc1      	ldr	r7, [pc, #772]	; (835f8 <_malloc_r+0x32c>)
   832f4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   832f8:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   832fc:	68dc      	ldr	r4, [r3, #12]
   832fe:	429c      	cmp	r4, r3
   83300:	f000 81d2 	beq.w	836a8 <_malloc_r+0x3dc>
   83304:	6863      	ldr	r3, [r4, #4]
   83306:	68e2      	ldr	r2, [r4, #12]
   83308:	f023 0303 	bic.w	r3, r3, #3
   8330c:	4423      	add	r3, r4
   8330e:	6858      	ldr	r0, [r3, #4]
   83310:	68a1      	ldr	r1, [r4, #8]
   83312:	f040 0501 	orr.w	r5, r0, #1
   83316:	60ca      	str	r2, [r1, #12]
   83318:	4630      	mov	r0, r6
   8331a:	6091      	str	r1, [r2, #8]
   8331c:	605d      	str	r5, [r3, #4]
   8331e:	f000 fb99 	bl	83a54 <__malloc_unlock>
   83322:	3408      	adds	r4, #8
   83324:	4620      	mov	r0, r4
   83326:	b003      	add	sp, #12
   83328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8332c:	2510      	movs	r5, #16
   8332e:	42a9      	cmp	r1, r5
   83330:	d9d9      	bls.n	832e6 <_malloc_r+0x1a>
   83332:	2400      	movs	r4, #0
   83334:	230c      	movs	r3, #12
   83336:	4620      	mov	r0, r4
   83338:	6033      	str	r3, [r6, #0]
   8333a:	b003      	add	sp, #12
   8333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83340:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   83344:	f000 8089 	beq.w	8345a <_malloc_r+0x18e>
   83348:	f1bc 0f04 	cmp.w	ip, #4
   8334c:	f200 8160 	bhi.w	83610 <_malloc_r+0x344>
   83350:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   83354:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   83358:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8335c:	4fa6      	ldr	r7, [pc, #664]	; (835f8 <_malloc_r+0x32c>)
   8335e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   83362:	68cc      	ldr	r4, [r1, #12]
   83364:	42a1      	cmp	r1, r4
   83366:	d105      	bne.n	83374 <_malloc_r+0xa8>
   83368:	e00c      	b.n	83384 <_malloc_r+0xb8>
   8336a:	2b00      	cmp	r3, #0
   8336c:	da79      	bge.n	83462 <_malloc_r+0x196>
   8336e:	68e4      	ldr	r4, [r4, #12]
   83370:	42a1      	cmp	r1, r4
   83372:	d007      	beq.n	83384 <_malloc_r+0xb8>
   83374:	6862      	ldr	r2, [r4, #4]
   83376:	f022 0203 	bic.w	r2, r2, #3
   8337a:	1b53      	subs	r3, r2, r5
   8337c:	2b0f      	cmp	r3, #15
   8337e:	ddf4      	ble.n	8336a <_malloc_r+0x9e>
   83380:	f10c 3cff 	add.w	ip, ip, #4294967295
   83384:	f10c 0c01 	add.w	ip, ip, #1
   83388:	4b9b      	ldr	r3, [pc, #620]	; (835f8 <_malloc_r+0x32c>)
   8338a:	693c      	ldr	r4, [r7, #16]
   8338c:	f103 0e08 	add.w	lr, r3, #8
   83390:	4574      	cmp	r4, lr
   83392:	f000 817e 	beq.w	83692 <_malloc_r+0x3c6>
   83396:	6861      	ldr	r1, [r4, #4]
   83398:	f021 0103 	bic.w	r1, r1, #3
   8339c:	1b4a      	subs	r2, r1, r5
   8339e:	2a0f      	cmp	r2, #15
   833a0:	f300 8164 	bgt.w	8366c <_malloc_r+0x3a0>
   833a4:	2a00      	cmp	r2, #0
   833a6:	f8c3 e014 	str.w	lr, [r3, #20]
   833aa:	f8c3 e010 	str.w	lr, [r3, #16]
   833ae:	da69      	bge.n	83484 <_malloc_r+0x1b8>
   833b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   833b4:	f080 813a 	bcs.w	8362c <_malloc_r+0x360>
   833b8:	08c9      	lsrs	r1, r1, #3
   833ba:	108a      	asrs	r2, r1, #2
   833bc:	f04f 0801 	mov.w	r8, #1
   833c0:	fa08 f802 	lsl.w	r8, r8, r2
   833c4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   833c8:	685a      	ldr	r2, [r3, #4]
   833ca:	6888      	ldr	r0, [r1, #8]
   833cc:	ea48 0202 	orr.w	r2, r8, r2
   833d0:	60a0      	str	r0, [r4, #8]
   833d2:	60e1      	str	r1, [r4, #12]
   833d4:	605a      	str	r2, [r3, #4]
   833d6:	608c      	str	r4, [r1, #8]
   833d8:	60c4      	str	r4, [r0, #12]
   833da:	ea4f 03ac 	mov.w	r3, ip, asr #2
   833de:	2001      	movs	r0, #1
   833e0:	4098      	lsls	r0, r3
   833e2:	4290      	cmp	r0, r2
   833e4:	d85b      	bhi.n	8349e <_malloc_r+0x1d2>
   833e6:	4202      	tst	r2, r0
   833e8:	d106      	bne.n	833f8 <_malloc_r+0x12c>
   833ea:	f02c 0c03 	bic.w	ip, ip, #3
   833ee:	0040      	lsls	r0, r0, #1
   833f0:	4202      	tst	r2, r0
   833f2:	f10c 0c04 	add.w	ip, ip, #4
   833f6:	d0fa      	beq.n	833ee <_malloc_r+0x122>
   833f8:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   833fc:	4644      	mov	r4, r8
   833fe:	46e1      	mov	r9, ip
   83400:	68e3      	ldr	r3, [r4, #12]
   83402:	429c      	cmp	r4, r3
   83404:	d107      	bne.n	83416 <_malloc_r+0x14a>
   83406:	e146      	b.n	83696 <_malloc_r+0x3ca>
   83408:	2a00      	cmp	r2, #0
   8340a:	f280 8157 	bge.w	836bc <_malloc_r+0x3f0>
   8340e:	68db      	ldr	r3, [r3, #12]
   83410:	429c      	cmp	r4, r3
   83412:	f000 8140 	beq.w	83696 <_malloc_r+0x3ca>
   83416:	6859      	ldr	r1, [r3, #4]
   83418:	f021 0103 	bic.w	r1, r1, #3
   8341c:	1b4a      	subs	r2, r1, r5
   8341e:	2a0f      	cmp	r2, #15
   83420:	ddf2      	ble.n	83408 <_malloc_r+0x13c>
   83422:	461c      	mov	r4, r3
   83424:	f854 cf08 	ldr.w	ip, [r4, #8]!
   83428:	68d9      	ldr	r1, [r3, #12]
   8342a:	f045 0901 	orr.w	r9, r5, #1
   8342e:	f042 0801 	orr.w	r8, r2, #1
   83432:	441d      	add	r5, r3
   83434:	f8c3 9004 	str.w	r9, [r3, #4]
   83438:	4630      	mov	r0, r6
   8343a:	f8cc 100c 	str.w	r1, [ip, #12]
   8343e:	f8c1 c008 	str.w	ip, [r1, #8]
   83442:	617d      	str	r5, [r7, #20]
   83444:	613d      	str	r5, [r7, #16]
   83446:	f8c5 e00c 	str.w	lr, [r5, #12]
   8344a:	f8c5 e008 	str.w	lr, [r5, #8]
   8344e:	f8c5 8004 	str.w	r8, [r5, #4]
   83452:	50aa      	str	r2, [r5, r2]
   83454:	f000 fafe 	bl	83a54 <__malloc_unlock>
   83458:	e764      	b.n	83324 <_malloc_r+0x58>
   8345a:	217e      	movs	r1, #126	; 0x7e
   8345c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   83460:	e77c      	b.n	8335c <_malloc_r+0x90>
   83462:	4422      	add	r2, r4
   83464:	6850      	ldr	r0, [r2, #4]
   83466:	68e3      	ldr	r3, [r4, #12]
   83468:	68a1      	ldr	r1, [r4, #8]
   8346a:	f040 0501 	orr.w	r5, r0, #1
   8346e:	60cb      	str	r3, [r1, #12]
   83470:	4630      	mov	r0, r6
   83472:	6099      	str	r1, [r3, #8]
   83474:	6055      	str	r5, [r2, #4]
   83476:	f000 faed 	bl	83a54 <__malloc_unlock>
   8347a:	3408      	adds	r4, #8
   8347c:	4620      	mov	r0, r4
   8347e:	b003      	add	sp, #12
   83480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83484:	4421      	add	r1, r4
   83486:	684b      	ldr	r3, [r1, #4]
   83488:	4630      	mov	r0, r6
   8348a:	f043 0301 	orr.w	r3, r3, #1
   8348e:	604b      	str	r3, [r1, #4]
   83490:	f000 fae0 	bl	83a54 <__malloc_unlock>
   83494:	3408      	adds	r4, #8
   83496:	4620      	mov	r0, r4
   83498:	b003      	add	sp, #12
   8349a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8349e:	68bc      	ldr	r4, [r7, #8]
   834a0:	6863      	ldr	r3, [r4, #4]
   834a2:	f023 0903 	bic.w	r9, r3, #3
   834a6:	45a9      	cmp	r9, r5
   834a8:	d304      	bcc.n	834b4 <_malloc_r+0x1e8>
   834aa:	ebc5 0309 	rsb	r3, r5, r9
   834ae:	2b0f      	cmp	r3, #15
   834b0:	f300 8091 	bgt.w	835d6 <_malloc_r+0x30a>
   834b4:	4b51      	ldr	r3, [pc, #324]	; (835fc <_malloc_r+0x330>)
   834b6:	4a52      	ldr	r2, [pc, #328]	; (83600 <_malloc_r+0x334>)
   834b8:	6819      	ldr	r1, [r3, #0]
   834ba:	6813      	ldr	r3, [r2, #0]
   834bc:	eb05 0a01 	add.w	sl, r5, r1
   834c0:	3301      	adds	r3, #1
   834c2:	eb04 0b09 	add.w	fp, r4, r9
   834c6:	f000 8161 	beq.w	8378c <_malloc_r+0x4c0>
   834ca:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   834ce:	f10a 0a0f 	add.w	sl, sl, #15
   834d2:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   834d6:	f02a 0a0f 	bic.w	sl, sl, #15
   834da:	4630      	mov	r0, r6
   834dc:	4651      	mov	r1, sl
   834de:	9201      	str	r2, [sp, #4]
   834e0:	f000 fc9a 	bl	83e18 <_sbrk_r>
   834e4:	f1b0 3fff 	cmp.w	r0, #4294967295
   834e8:	4680      	mov	r8, r0
   834ea:	9a01      	ldr	r2, [sp, #4]
   834ec:	f000 8101 	beq.w	836f2 <_malloc_r+0x426>
   834f0:	4583      	cmp	fp, r0
   834f2:	f200 80fb 	bhi.w	836ec <_malloc_r+0x420>
   834f6:	f8df c114 	ldr.w	ip, [pc, #276]	; 8360c <_malloc_r+0x340>
   834fa:	45c3      	cmp	fp, r8
   834fc:	f8dc 3000 	ldr.w	r3, [ip]
   83500:	4453      	add	r3, sl
   83502:	f8cc 3000 	str.w	r3, [ip]
   83506:	f000 814a 	beq.w	8379e <_malloc_r+0x4d2>
   8350a:	6812      	ldr	r2, [r2, #0]
   8350c:	493c      	ldr	r1, [pc, #240]	; (83600 <_malloc_r+0x334>)
   8350e:	3201      	adds	r2, #1
   83510:	bf1b      	ittet	ne
   83512:	ebcb 0b08 	rsbne	fp, fp, r8
   83516:	445b      	addne	r3, fp
   83518:	f8c1 8000 	streq.w	r8, [r1]
   8351c:	f8cc 3000 	strne.w	r3, [ip]
   83520:	f018 0307 	ands.w	r3, r8, #7
   83524:	f000 8114 	beq.w	83750 <_malloc_r+0x484>
   83528:	f1c3 0208 	rsb	r2, r3, #8
   8352c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   83530:	4490      	add	r8, r2
   83532:	3308      	adds	r3, #8
   83534:	44c2      	add	sl, r8
   83536:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   8353a:	ebca 0a03 	rsb	sl, sl, r3
   8353e:	4651      	mov	r1, sl
   83540:	4630      	mov	r0, r6
   83542:	f8cd c004 	str.w	ip, [sp, #4]
   83546:	f000 fc67 	bl	83e18 <_sbrk_r>
   8354a:	1c43      	adds	r3, r0, #1
   8354c:	f8dd c004 	ldr.w	ip, [sp, #4]
   83550:	f000 8135 	beq.w	837be <_malloc_r+0x4f2>
   83554:	ebc8 0200 	rsb	r2, r8, r0
   83558:	4452      	add	r2, sl
   8355a:	f042 0201 	orr.w	r2, r2, #1
   8355e:	f8dc 3000 	ldr.w	r3, [ip]
   83562:	42bc      	cmp	r4, r7
   83564:	4453      	add	r3, sl
   83566:	f8c7 8008 	str.w	r8, [r7, #8]
   8356a:	f8cc 3000 	str.w	r3, [ip]
   8356e:	f8c8 2004 	str.w	r2, [r8, #4]
   83572:	f8df a098 	ldr.w	sl, [pc, #152]	; 8360c <_malloc_r+0x340>
   83576:	d015      	beq.n	835a4 <_malloc_r+0x2d8>
   83578:	f1b9 0f0f 	cmp.w	r9, #15
   8357c:	f240 80eb 	bls.w	83756 <_malloc_r+0x48a>
   83580:	6861      	ldr	r1, [r4, #4]
   83582:	f1a9 020c 	sub.w	r2, r9, #12
   83586:	f022 0207 	bic.w	r2, r2, #7
   8358a:	f001 0101 	and.w	r1, r1, #1
   8358e:	ea42 0e01 	orr.w	lr, r2, r1
   83592:	2005      	movs	r0, #5
   83594:	18a1      	adds	r1, r4, r2
   83596:	2a0f      	cmp	r2, #15
   83598:	f8c4 e004 	str.w	lr, [r4, #4]
   8359c:	6048      	str	r0, [r1, #4]
   8359e:	6088      	str	r0, [r1, #8]
   835a0:	f200 8111 	bhi.w	837c6 <_malloc_r+0x4fa>
   835a4:	4a17      	ldr	r2, [pc, #92]	; (83604 <_malloc_r+0x338>)
   835a6:	68bc      	ldr	r4, [r7, #8]
   835a8:	6811      	ldr	r1, [r2, #0]
   835aa:	428b      	cmp	r3, r1
   835ac:	bf88      	it	hi
   835ae:	6013      	strhi	r3, [r2, #0]
   835b0:	4a15      	ldr	r2, [pc, #84]	; (83608 <_malloc_r+0x33c>)
   835b2:	6811      	ldr	r1, [r2, #0]
   835b4:	428b      	cmp	r3, r1
   835b6:	bf88      	it	hi
   835b8:	6013      	strhi	r3, [r2, #0]
   835ba:	6862      	ldr	r2, [r4, #4]
   835bc:	f022 0203 	bic.w	r2, r2, #3
   835c0:	4295      	cmp	r5, r2
   835c2:	ebc5 0302 	rsb	r3, r5, r2
   835c6:	d801      	bhi.n	835cc <_malloc_r+0x300>
   835c8:	2b0f      	cmp	r3, #15
   835ca:	dc04      	bgt.n	835d6 <_malloc_r+0x30a>
   835cc:	4630      	mov	r0, r6
   835ce:	f000 fa41 	bl	83a54 <__malloc_unlock>
   835d2:	2400      	movs	r4, #0
   835d4:	e6a6      	b.n	83324 <_malloc_r+0x58>
   835d6:	f045 0201 	orr.w	r2, r5, #1
   835da:	f043 0301 	orr.w	r3, r3, #1
   835de:	4425      	add	r5, r4
   835e0:	6062      	str	r2, [r4, #4]
   835e2:	4630      	mov	r0, r6
   835e4:	60bd      	str	r5, [r7, #8]
   835e6:	606b      	str	r3, [r5, #4]
   835e8:	f000 fa34 	bl	83a54 <__malloc_unlock>
   835ec:	3408      	adds	r4, #8
   835ee:	4620      	mov	r0, r4
   835f0:	b003      	add	sp, #12
   835f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835f6:	bf00      	nop
   835f8:	200705a0 	.word	0x200705a0
   835fc:	20070b00 	.word	0x20070b00
   83600:	200709ac 	.word	0x200709ac
   83604:	20070afc 	.word	0x20070afc
   83608:	20070af8 	.word	0x20070af8
   8360c:	20070b04 	.word	0x20070b04
   83610:	f1bc 0f14 	cmp.w	ip, #20
   83614:	d961      	bls.n	836da <_malloc_r+0x40e>
   83616:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   8361a:	f200 808f 	bhi.w	8373c <_malloc_r+0x470>
   8361e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   83622:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   83626:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8362a:	e697      	b.n	8335c <_malloc_r+0x90>
   8362c:	0a4b      	lsrs	r3, r1, #9
   8362e:	2b04      	cmp	r3, #4
   83630:	d958      	bls.n	836e4 <_malloc_r+0x418>
   83632:	2b14      	cmp	r3, #20
   83634:	f200 80ad 	bhi.w	83792 <_malloc_r+0x4c6>
   83638:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8363c:	0050      	lsls	r0, r2, #1
   8363e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   83642:	6883      	ldr	r3, [r0, #8]
   83644:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83800 <_malloc_r+0x534>
   83648:	4283      	cmp	r3, r0
   8364a:	f000 808a 	beq.w	83762 <_malloc_r+0x496>
   8364e:	685a      	ldr	r2, [r3, #4]
   83650:	f022 0203 	bic.w	r2, r2, #3
   83654:	4291      	cmp	r1, r2
   83656:	d202      	bcs.n	8365e <_malloc_r+0x392>
   83658:	689b      	ldr	r3, [r3, #8]
   8365a:	4298      	cmp	r0, r3
   8365c:	d1f7      	bne.n	8364e <_malloc_r+0x382>
   8365e:	68d9      	ldr	r1, [r3, #12]
   83660:	687a      	ldr	r2, [r7, #4]
   83662:	60e1      	str	r1, [r4, #12]
   83664:	60a3      	str	r3, [r4, #8]
   83666:	608c      	str	r4, [r1, #8]
   83668:	60dc      	str	r4, [r3, #12]
   8366a:	e6b6      	b.n	833da <_malloc_r+0x10e>
   8366c:	f045 0701 	orr.w	r7, r5, #1
   83670:	f042 0101 	orr.w	r1, r2, #1
   83674:	4425      	add	r5, r4
   83676:	6067      	str	r7, [r4, #4]
   83678:	4630      	mov	r0, r6
   8367a:	615d      	str	r5, [r3, #20]
   8367c:	611d      	str	r5, [r3, #16]
   8367e:	f8c5 e00c 	str.w	lr, [r5, #12]
   83682:	f8c5 e008 	str.w	lr, [r5, #8]
   83686:	6069      	str	r1, [r5, #4]
   83688:	50aa      	str	r2, [r5, r2]
   8368a:	3408      	adds	r4, #8
   8368c:	f000 f9e2 	bl	83a54 <__malloc_unlock>
   83690:	e648      	b.n	83324 <_malloc_r+0x58>
   83692:	685a      	ldr	r2, [r3, #4]
   83694:	e6a1      	b.n	833da <_malloc_r+0x10e>
   83696:	f109 0901 	add.w	r9, r9, #1
   8369a:	f019 0f03 	tst.w	r9, #3
   8369e:	f104 0408 	add.w	r4, r4, #8
   836a2:	f47f aead 	bne.w	83400 <_malloc_r+0x134>
   836a6:	e02d      	b.n	83704 <_malloc_r+0x438>
   836a8:	f104 0308 	add.w	r3, r4, #8
   836ac:	6964      	ldr	r4, [r4, #20]
   836ae:	42a3      	cmp	r3, r4
   836b0:	bf08      	it	eq
   836b2:	f10c 0c02 	addeq.w	ip, ip, #2
   836b6:	f43f ae67 	beq.w	83388 <_malloc_r+0xbc>
   836ba:	e623      	b.n	83304 <_malloc_r+0x38>
   836bc:	4419      	add	r1, r3
   836be:	6848      	ldr	r0, [r1, #4]
   836c0:	461c      	mov	r4, r3
   836c2:	f854 2f08 	ldr.w	r2, [r4, #8]!
   836c6:	68db      	ldr	r3, [r3, #12]
   836c8:	f040 0501 	orr.w	r5, r0, #1
   836cc:	604d      	str	r5, [r1, #4]
   836ce:	4630      	mov	r0, r6
   836d0:	60d3      	str	r3, [r2, #12]
   836d2:	609a      	str	r2, [r3, #8]
   836d4:	f000 f9be 	bl	83a54 <__malloc_unlock>
   836d8:	e624      	b.n	83324 <_malloc_r+0x58>
   836da:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   836de:	ea4f 014c 	mov.w	r1, ip, lsl #1
   836e2:	e63b      	b.n	8335c <_malloc_r+0x90>
   836e4:	098a      	lsrs	r2, r1, #6
   836e6:	3238      	adds	r2, #56	; 0x38
   836e8:	0050      	lsls	r0, r2, #1
   836ea:	e7a8      	b.n	8363e <_malloc_r+0x372>
   836ec:	42bc      	cmp	r4, r7
   836ee:	f43f af02 	beq.w	834f6 <_malloc_r+0x22a>
   836f2:	68bc      	ldr	r4, [r7, #8]
   836f4:	6862      	ldr	r2, [r4, #4]
   836f6:	f022 0203 	bic.w	r2, r2, #3
   836fa:	e761      	b.n	835c0 <_malloc_r+0x2f4>
   836fc:	f8d8 8000 	ldr.w	r8, [r8]
   83700:	4598      	cmp	r8, r3
   83702:	d17a      	bne.n	837fa <_malloc_r+0x52e>
   83704:	f01c 0f03 	tst.w	ip, #3
   83708:	f1a8 0308 	sub.w	r3, r8, #8
   8370c:	f10c 3cff 	add.w	ip, ip, #4294967295
   83710:	d1f4      	bne.n	836fc <_malloc_r+0x430>
   83712:	687b      	ldr	r3, [r7, #4]
   83714:	ea23 0300 	bic.w	r3, r3, r0
   83718:	607b      	str	r3, [r7, #4]
   8371a:	0040      	lsls	r0, r0, #1
   8371c:	4298      	cmp	r0, r3
   8371e:	f63f aebe 	bhi.w	8349e <_malloc_r+0x1d2>
   83722:	2800      	cmp	r0, #0
   83724:	f43f aebb 	beq.w	8349e <_malloc_r+0x1d2>
   83728:	4203      	tst	r3, r0
   8372a:	46cc      	mov	ip, r9
   8372c:	f47f ae64 	bne.w	833f8 <_malloc_r+0x12c>
   83730:	0040      	lsls	r0, r0, #1
   83732:	4203      	tst	r3, r0
   83734:	f10c 0c04 	add.w	ip, ip, #4
   83738:	d0fa      	beq.n	83730 <_malloc_r+0x464>
   8373a:	e65d      	b.n	833f8 <_malloc_r+0x12c>
   8373c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83740:	d819      	bhi.n	83776 <_malloc_r+0x4aa>
   83742:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   83746:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   8374a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8374e:	e605      	b.n	8335c <_malloc_r+0x90>
   83750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83754:	e6ee      	b.n	83534 <_malloc_r+0x268>
   83756:	2301      	movs	r3, #1
   83758:	f8c8 3004 	str.w	r3, [r8, #4]
   8375c:	4644      	mov	r4, r8
   8375e:	2200      	movs	r2, #0
   83760:	e72e      	b.n	835c0 <_malloc_r+0x2f4>
   83762:	1092      	asrs	r2, r2, #2
   83764:	2001      	movs	r0, #1
   83766:	4090      	lsls	r0, r2
   83768:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8376c:	4619      	mov	r1, r3
   8376e:	4302      	orrs	r2, r0
   83770:	f8c8 2004 	str.w	r2, [r8, #4]
   83774:	e775      	b.n	83662 <_malloc_r+0x396>
   83776:	f240 5354 	movw	r3, #1364	; 0x554
   8377a:	459c      	cmp	ip, r3
   8377c:	d81b      	bhi.n	837b6 <_malloc_r+0x4ea>
   8377e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   83782:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   83786:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8378a:	e5e7      	b.n	8335c <_malloc_r+0x90>
   8378c:	f10a 0a10 	add.w	sl, sl, #16
   83790:	e6a3      	b.n	834da <_malloc_r+0x20e>
   83792:	2b54      	cmp	r3, #84	; 0x54
   83794:	d81f      	bhi.n	837d6 <_malloc_r+0x50a>
   83796:	0b0a      	lsrs	r2, r1, #12
   83798:	326e      	adds	r2, #110	; 0x6e
   8379a:	0050      	lsls	r0, r2, #1
   8379c:	e74f      	b.n	8363e <_malloc_r+0x372>
   8379e:	f3cb 010b 	ubfx	r1, fp, #0, #12
   837a2:	2900      	cmp	r1, #0
   837a4:	f47f aeb1 	bne.w	8350a <_malloc_r+0x23e>
   837a8:	eb0a 0109 	add.w	r1, sl, r9
   837ac:	68ba      	ldr	r2, [r7, #8]
   837ae:	f041 0101 	orr.w	r1, r1, #1
   837b2:	6051      	str	r1, [r2, #4]
   837b4:	e6f6      	b.n	835a4 <_malloc_r+0x2d8>
   837b6:	21fc      	movs	r1, #252	; 0xfc
   837b8:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   837bc:	e5ce      	b.n	8335c <_malloc_r+0x90>
   837be:	2201      	movs	r2, #1
   837c0:	f04f 0a00 	mov.w	sl, #0
   837c4:	e6cb      	b.n	8355e <_malloc_r+0x292>
   837c6:	f104 0108 	add.w	r1, r4, #8
   837ca:	4630      	mov	r0, r6
   837cc:	f7ff fa80 	bl	82cd0 <_free_r>
   837d0:	f8da 3000 	ldr.w	r3, [sl]
   837d4:	e6e6      	b.n	835a4 <_malloc_r+0x2d8>
   837d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   837da:	d803      	bhi.n	837e4 <_malloc_r+0x518>
   837dc:	0bca      	lsrs	r2, r1, #15
   837de:	3277      	adds	r2, #119	; 0x77
   837e0:	0050      	lsls	r0, r2, #1
   837e2:	e72c      	b.n	8363e <_malloc_r+0x372>
   837e4:	f240 5254 	movw	r2, #1364	; 0x554
   837e8:	4293      	cmp	r3, r2
   837ea:	d803      	bhi.n	837f4 <_malloc_r+0x528>
   837ec:	0c8a      	lsrs	r2, r1, #18
   837ee:	327c      	adds	r2, #124	; 0x7c
   837f0:	0050      	lsls	r0, r2, #1
   837f2:	e724      	b.n	8363e <_malloc_r+0x372>
   837f4:	20fc      	movs	r0, #252	; 0xfc
   837f6:	227e      	movs	r2, #126	; 0x7e
   837f8:	e721      	b.n	8363e <_malloc_r+0x372>
   837fa:	687b      	ldr	r3, [r7, #4]
   837fc:	e78d      	b.n	8371a <_malloc_r+0x44e>
   837fe:	bf00      	nop
   83800:	200705a0 	.word	0x200705a0

00083804 <memchr>:
   83804:	0783      	lsls	r3, r0, #30
   83806:	b470      	push	{r4, r5, r6}
   83808:	b2c9      	uxtb	r1, r1
   8380a:	d040      	beq.n	8388e <memchr+0x8a>
   8380c:	1e54      	subs	r4, r2, #1
   8380e:	b32a      	cbz	r2, 8385c <memchr+0x58>
   83810:	7803      	ldrb	r3, [r0, #0]
   83812:	428b      	cmp	r3, r1
   83814:	d023      	beq.n	8385e <memchr+0x5a>
   83816:	1c43      	adds	r3, r0, #1
   83818:	e004      	b.n	83824 <memchr+0x20>
   8381a:	b1fc      	cbz	r4, 8385c <memchr+0x58>
   8381c:	7805      	ldrb	r5, [r0, #0]
   8381e:	4614      	mov	r4, r2
   83820:	428d      	cmp	r5, r1
   83822:	d01c      	beq.n	8385e <memchr+0x5a>
   83824:	f013 0f03 	tst.w	r3, #3
   83828:	4618      	mov	r0, r3
   8382a:	f104 32ff 	add.w	r2, r4, #4294967295
   8382e:	f103 0301 	add.w	r3, r3, #1
   83832:	d1f2      	bne.n	8381a <memchr+0x16>
   83834:	2c03      	cmp	r4, #3
   83836:	d814      	bhi.n	83862 <memchr+0x5e>
   83838:	1e65      	subs	r5, r4, #1
   8383a:	b354      	cbz	r4, 83892 <memchr+0x8e>
   8383c:	7803      	ldrb	r3, [r0, #0]
   8383e:	428b      	cmp	r3, r1
   83840:	d00d      	beq.n	8385e <memchr+0x5a>
   83842:	1c42      	adds	r2, r0, #1
   83844:	2300      	movs	r3, #0
   83846:	e002      	b.n	8384e <memchr+0x4a>
   83848:	7804      	ldrb	r4, [r0, #0]
   8384a:	428c      	cmp	r4, r1
   8384c:	d007      	beq.n	8385e <memchr+0x5a>
   8384e:	42ab      	cmp	r3, r5
   83850:	4610      	mov	r0, r2
   83852:	f103 0301 	add.w	r3, r3, #1
   83856:	f102 0201 	add.w	r2, r2, #1
   8385a:	d1f5      	bne.n	83848 <memchr+0x44>
   8385c:	2000      	movs	r0, #0
   8385e:	bc70      	pop	{r4, r5, r6}
   83860:	4770      	bx	lr
   83862:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   83866:	4603      	mov	r3, r0
   83868:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   8386c:	681a      	ldr	r2, [r3, #0]
   8386e:	4618      	mov	r0, r3
   83870:	4072      	eors	r2, r6
   83872:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   83876:	ea25 0202 	bic.w	r2, r5, r2
   8387a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   8387e:	f103 0304 	add.w	r3, r3, #4
   83882:	d1d9      	bne.n	83838 <memchr+0x34>
   83884:	3c04      	subs	r4, #4
   83886:	2c03      	cmp	r4, #3
   83888:	4618      	mov	r0, r3
   8388a:	d8ef      	bhi.n	8386c <memchr+0x68>
   8388c:	e7d4      	b.n	83838 <memchr+0x34>
   8388e:	4614      	mov	r4, r2
   83890:	e7d0      	b.n	83834 <memchr+0x30>
   83892:	4620      	mov	r0, r4
   83894:	e7e3      	b.n	8385e <memchr+0x5a>
   83896:	bf00      	nop

00083898 <memcpy>:
   83898:	4684      	mov	ip, r0
   8389a:	ea41 0300 	orr.w	r3, r1, r0
   8389e:	f013 0303 	ands.w	r3, r3, #3
   838a2:	d149      	bne.n	83938 <memcpy+0xa0>
   838a4:	3a40      	subs	r2, #64	; 0x40
   838a6:	d323      	bcc.n	838f0 <memcpy+0x58>
   838a8:	680b      	ldr	r3, [r1, #0]
   838aa:	6003      	str	r3, [r0, #0]
   838ac:	684b      	ldr	r3, [r1, #4]
   838ae:	6043      	str	r3, [r0, #4]
   838b0:	688b      	ldr	r3, [r1, #8]
   838b2:	6083      	str	r3, [r0, #8]
   838b4:	68cb      	ldr	r3, [r1, #12]
   838b6:	60c3      	str	r3, [r0, #12]
   838b8:	690b      	ldr	r3, [r1, #16]
   838ba:	6103      	str	r3, [r0, #16]
   838bc:	694b      	ldr	r3, [r1, #20]
   838be:	6143      	str	r3, [r0, #20]
   838c0:	698b      	ldr	r3, [r1, #24]
   838c2:	6183      	str	r3, [r0, #24]
   838c4:	69cb      	ldr	r3, [r1, #28]
   838c6:	61c3      	str	r3, [r0, #28]
   838c8:	6a0b      	ldr	r3, [r1, #32]
   838ca:	6203      	str	r3, [r0, #32]
   838cc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   838ce:	6243      	str	r3, [r0, #36]	; 0x24
   838d0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   838d2:	6283      	str	r3, [r0, #40]	; 0x28
   838d4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   838d6:	62c3      	str	r3, [r0, #44]	; 0x2c
   838d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   838da:	6303      	str	r3, [r0, #48]	; 0x30
   838dc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   838de:	6343      	str	r3, [r0, #52]	; 0x34
   838e0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   838e2:	6383      	str	r3, [r0, #56]	; 0x38
   838e4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   838e6:	63c3      	str	r3, [r0, #60]	; 0x3c
   838e8:	3040      	adds	r0, #64	; 0x40
   838ea:	3140      	adds	r1, #64	; 0x40
   838ec:	3a40      	subs	r2, #64	; 0x40
   838ee:	d2db      	bcs.n	838a8 <memcpy+0x10>
   838f0:	3230      	adds	r2, #48	; 0x30
   838f2:	d30b      	bcc.n	8390c <memcpy+0x74>
   838f4:	680b      	ldr	r3, [r1, #0]
   838f6:	6003      	str	r3, [r0, #0]
   838f8:	684b      	ldr	r3, [r1, #4]
   838fa:	6043      	str	r3, [r0, #4]
   838fc:	688b      	ldr	r3, [r1, #8]
   838fe:	6083      	str	r3, [r0, #8]
   83900:	68cb      	ldr	r3, [r1, #12]
   83902:	60c3      	str	r3, [r0, #12]
   83904:	3010      	adds	r0, #16
   83906:	3110      	adds	r1, #16
   83908:	3a10      	subs	r2, #16
   8390a:	d2f3      	bcs.n	838f4 <memcpy+0x5c>
   8390c:	320c      	adds	r2, #12
   8390e:	d305      	bcc.n	8391c <memcpy+0x84>
   83910:	f851 3b04 	ldr.w	r3, [r1], #4
   83914:	f840 3b04 	str.w	r3, [r0], #4
   83918:	3a04      	subs	r2, #4
   8391a:	d2f9      	bcs.n	83910 <memcpy+0x78>
   8391c:	3204      	adds	r2, #4
   8391e:	d008      	beq.n	83932 <memcpy+0x9a>
   83920:	07d2      	lsls	r2, r2, #31
   83922:	bf1c      	itt	ne
   83924:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83928:	f800 3b01 	strbne.w	r3, [r0], #1
   8392c:	d301      	bcc.n	83932 <memcpy+0x9a>
   8392e:	880b      	ldrh	r3, [r1, #0]
   83930:	8003      	strh	r3, [r0, #0]
   83932:	4660      	mov	r0, ip
   83934:	4770      	bx	lr
   83936:	bf00      	nop
   83938:	2a08      	cmp	r2, #8
   8393a:	d313      	bcc.n	83964 <memcpy+0xcc>
   8393c:	078b      	lsls	r3, r1, #30
   8393e:	d0b1      	beq.n	838a4 <memcpy+0xc>
   83940:	f010 0303 	ands.w	r3, r0, #3
   83944:	d0ae      	beq.n	838a4 <memcpy+0xc>
   83946:	f1c3 0304 	rsb	r3, r3, #4
   8394a:	1ad2      	subs	r2, r2, r3
   8394c:	07db      	lsls	r3, r3, #31
   8394e:	bf1c      	itt	ne
   83950:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83954:	f800 3b01 	strbne.w	r3, [r0], #1
   83958:	d3a4      	bcc.n	838a4 <memcpy+0xc>
   8395a:	f831 3b02 	ldrh.w	r3, [r1], #2
   8395e:	f820 3b02 	strh.w	r3, [r0], #2
   83962:	e79f      	b.n	838a4 <memcpy+0xc>
   83964:	3a04      	subs	r2, #4
   83966:	d3d9      	bcc.n	8391c <memcpy+0x84>
   83968:	3a01      	subs	r2, #1
   8396a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8396e:	f800 3b01 	strb.w	r3, [r0], #1
   83972:	d2f9      	bcs.n	83968 <memcpy+0xd0>
   83974:	780b      	ldrb	r3, [r1, #0]
   83976:	7003      	strb	r3, [r0, #0]
   83978:	784b      	ldrb	r3, [r1, #1]
   8397a:	7043      	strb	r3, [r0, #1]
   8397c:	788b      	ldrb	r3, [r1, #2]
   8397e:	7083      	strb	r3, [r0, #2]
   83980:	4660      	mov	r0, ip
   83982:	4770      	bx	lr

00083984 <memmove>:
   83984:	4288      	cmp	r0, r1
   83986:	b4f0      	push	{r4, r5, r6, r7}
   83988:	d910      	bls.n	839ac <memmove+0x28>
   8398a:	188c      	adds	r4, r1, r2
   8398c:	42a0      	cmp	r0, r4
   8398e:	d20d      	bcs.n	839ac <memmove+0x28>
   83990:	1885      	adds	r5, r0, r2
   83992:	1e53      	subs	r3, r2, #1
   83994:	b142      	cbz	r2, 839a8 <memmove+0x24>
   83996:	4621      	mov	r1, r4
   83998:	462a      	mov	r2, r5
   8399a:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   8399e:	3b01      	subs	r3, #1
   839a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   839a4:	1c5c      	adds	r4, r3, #1
   839a6:	d1f8      	bne.n	8399a <memmove+0x16>
   839a8:	bcf0      	pop	{r4, r5, r6, r7}
   839aa:	4770      	bx	lr
   839ac:	2a0f      	cmp	r2, #15
   839ae:	d944      	bls.n	83a3a <memmove+0xb6>
   839b0:	ea40 0301 	orr.w	r3, r0, r1
   839b4:	079b      	lsls	r3, r3, #30
   839b6:	d144      	bne.n	83a42 <memmove+0xbe>
   839b8:	f1a2 0710 	sub.w	r7, r2, #16
   839bc:	093f      	lsrs	r7, r7, #4
   839be:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   839c2:	3610      	adds	r6, #16
   839c4:	460c      	mov	r4, r1
   839c6:	4603      	mov	r3, r0
   839c8:	6825      	ldr	r5, [r4, #0]
   839ca:	3310      	adds	r3, #16
   839cc:	f843 5c10 	str.w	r5, [r3, #-16]
   839d0:	6865      	ldr	r5, [r4, #4]
   839d2:	3410      	adds	r4, #16
   839d4:	f843 5c0c 	str.w	r5, [r3, #-12]
   839d8:	f854 5c08 	ldr.w	r5, [r4, #-8]
   839dc:	f843 5c08 	str.w	r5, [r3, #-8]
   839e0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   839e4:	f843 5c04 	str.w	r5, [r3, #-4]
   839e8:	42b3      	cmp	r3, r6
   839ea:	d1ed      	bne.n	839c8 <memmove+0x44>
   839ec:	1c7b      	adds	r3, r7, #1
   839ee:	f002 0c0f 	and.w	ip, r2, #15
   839f2:	011b      	lsls	r3, r3, #4
   839f4:	f1bc 0f03 	cmp.w	ip, #3
   839f8:	4419      	add	r1, r3
   839fa:	4403      	add	r3, r0
   839fc:	d923      	bls.n	83a46 <memmove+0xc2>
   839fe:	460e      	mov	r6, r1
   83a00:	461d      	mov	r5, r3
   83a02:	4664      	mov	r4, ip
   83a04:	f856 7b04 	ldr.w	r7, [r6], #4
   83a08:	3c04      	subs	r4, #4
   83a0a:	2c03      	cmp	r4, #3
   83a0c:	f845 7b04 	str.w	r7, [r5], #4
   83a10:	d8f8      	bhi.n	83a04 <memmove+0x80>
   83a12:	f1ac 0404 	sub.w	r4, ip, #4
   83a16:	f024 0403 	bic.w	r4, r4, #3
   83a1a:	3404      	adds	r4, #4
   83a1c:	f002 0203 	and.w	r2, r2, #3
   83a20:	4423      	add	r3, r4
   83a22:	4421      	add	r1, r4
   83a24:	2a00      	cmp	r2, #0
   83a26:	d0bf      	beq.n	839a8 <memmove+0x24>
   83a28:	441a      	add	r2, r3
   83a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
   83a2e:	f803 4b01 	strb.w	r4, [r3], #1
   83a32:	4293      	cmp	r3, r2
   83a34:	d1f9      	bne.n	83a2a <memmove+0xa6>
   83a36:	bcf0      	pop	{r4, r5, r6, r7}
   83a38:	4770      	bx	lr
   83a3a:	4603      	mov	r3, r0
   83a3c:	2a00      	cmp	r2, #0
   83a3e:	d1f3      	bne.n	83a28 <memmove+0xa4>
   83a40:	e7b2      	b.n	839a8 <memmove+0x24>
   83a42:	4603      	mov	r3, r0
   83a44:	e7f0      	b.n	83a28 <memmove+0xa4>
   83a46:	4662      	mov	r2, ip
   83a48:	2a00      	cmp	r2, #0
   83a4a:	d1ed      	bne.n	83a28 <memmove+0xa4>
   83a4c:	e7ac      	b.n	839a8 <memmove+0x24>
   83a4e:	bf00      	nop

00083a50 <__malloc_lock>:
   83a50:	4770      	bx	lr
   83a52:	bf00      	nop

00083a54 <__malloc_unlock>:
   83a54:	4770      	bx	lr
   83a56:	bf00      	nop

00083a58 <_realloc_r>:
   83a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83a5c:	460c      	mov	r4, r1
   83a5e:	b083      	sub	sp, #12
   83a60:	4690      	mov	r8, r2
   83a62:	4681      	mov	r9, r0
   83a64:	2900      	cmp	r1, #0
   83a66:	f000 80ba 	beq.w	83bde <_realloc_r+0x186>
   83a6a:	f7ff fff1 	bl	83a50 <__malloc_lock>
   83a6e:	f108 060b 	add.w	r6, r8, #11
   83a72:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83a76:	2e16      	cmp	r6, #22
   83a78:	f023 0503 	bic.w	r5, r3, #3
   83a7c:	f1a4 0708 	sub.w	r7, r4, #8
   83a80:	d84b      	bhi.n	83b1a <_realloc_r+0xc2>
   83a82:	2110      	movs	r1, #16
   83a84:	460e      	mov	r6, r1
   83a86:	45b0      	cmp	r8, r6
   83a88:	d84c      	bhi.n	83b24 <_realloc_r+0xcc>
   83a8a:	428d      	cmp	r5, r1
   83a8c:	da51      	bge.n	83b32 <_realloc_r+0xda>
   83a8e:	f8df b384 	ldr.w	fp, [pc, #900]	; 83e14 <_realloc_r+0x3bc>
   83a92:	1978      	adds	r0, r7, r5
   83a94:	f8db e008 	ldr.w	lr, [fp, #8]
   83a98:	4586      	cmp	lr, r0
   83a9a:	f000 80a6 	beq.w	83bea <_realloc_r+0x192>
   83a9e:	6842      	ldr	r2, [r0, #4]
   83aa0:	f022 0c01 	bic.w	ip, r2, #1
   83aa4:	4484      	add	ip, r0
   83aa6:	f8dc c004 	ldr.w	ip, [ip, #4]
   83aaa:	f01c 0f01 	tst.w	ip, #1
   83aae:	d054      	beq.n	83b5a <_realloc_r+0x102>
   83ab0:	2200      	movs	r2, #0
   83ab2:	4610      	mov	r0, r2
   83ab4:	07db      	lsls	r3, r3, #31
   83ab6:	d46f      	bmi.n	83b98 <_realloc_r+0x140>
   83ab8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83abc:	ebc3 0a07 	rsb	sl, r3, r7
   83ac0:	f8da 3004 	ldr.w	r3, [sl, #4]
   83ac4:	f023 0303 	bic.w	r3, r3, #3
   83ac8:	442b      	add	r3, r5
   83aca:	2800      	cmp	r0, #0
   83acc:	d062      	beq.n	83b94 <_realloc_r+0x13c>
   83ace:	4570      	cmp	r0, lr
   83ad0:	f000 80e9 	beq.w	83ca6 <_realloc_r+0x24e>
   83ad4:	eb02 0e03 	add.w	lr, r2, r3
   83ad8:	458e      	cmp	lr, r1
   83ada:	db5b      	blt.n	83b94 <_realloc_r+0x13c>
   83adc:	68c3      	ldr	r3, [r0, #12]
   83ade:	6882      	ldr	r2, [r0, #8]
   83ae0:	46d0      	mov	r8, sl
   83ae2:	60d3      	str	r3, [r2, #12]
   83ae4:	609a      	str	r2, [r3, #8]
   83ae6:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83aea:	f8da 300c 	ldr.w	r3, [sl, #12]
   83aee:	1f2a      	subs	r2, r5, #4
   83af0:	2a24      	cmp	r2, #36	; 0x24
   83af2:	60cb      	str	r3, [r1, #12]
   83af4:	6099      	str	r1, [r3, #8]
   83af6:	f200 8123 	bhi.w	83d40 <_realloc_r+0x2e8>
   83afa:	2a13      	cmp	r2, #19
   83afc:	f240 80b0 	bls.w	83c60 <_realloc_r+0x208>
   83b00:	6823      	ldr	r3, [r4, #0]
   83b02:	2a1b      	cmp	r2, #27
   83b04:	f8ca 3008 	str.w	r3, [sl, #8]
   83b08:	6863      	ldr	r3, [r4, #4]
   83b0a:	f8ca 300c 	str.w	r3, [sl, #12]
   83b0e:	f200 812b 	bhi.w	83d68 <_realloc_r+0x310>
   83b12:	3408      	adds	r4, #8
   83b14:	f10a 0310 	add.w	r3, sl, #16
   83b18:	e0a3      	b.n	83c62 <_realloc_r+0x20a>
   83b1a:	f026 0607 	bic.w	r6, r6, #7
   83b1e:	2e00      	cmp	r6, #0
   83b20:	4631      	mov	r1, r6
   83b22:	dab0      	bge.n	83a86 <_realloc_r+0x2e>
   83b24:	230c      	movs	r3, #12
   83b26:	2000      	movs	r0, #0
   83b28:	f8c9 3000 	str.w	r3, [r9]
   83b2c:	b003      	add	sp, #12
   83b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83b32:	46a0      	mov	r8, r4
   83b34:	1baa      	subs	r2, r5, r6
   83b36:	2a0f      	cmp	r2, #15
   83b38:	f003 0301 	and.w	r3, r3, #1
   83b3c:	d81a      	bhi.n	83b74 <_realloc_r+0x11c>
   83b3e:	432b      	orrs	r3, r5
   83b40:	607b      	str	r3, [r7, #4]
   83b42:	443d      	add	r5, r7
   83b44:	686b      	ldr	r3, [r5, #4]
   83b46:	f043 0301 	orr.w	r3, r3, #1
   83b4a:	606b      	str	r3, [r5, #4]
   83b4c:	4648      	mov	r0, r9
   83b4e:	f7ff ff81 	bl	83a54 <__malloc_unlock>
   83b52:	4640      	mov	r0, r8
   83b54:	b003      	add	sp, #12
   83b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83b5a:	f022 0203 	bic.w	r2, r2, #3
   83b5e:	eb02 0c05 	add.w	ip, r2, r5
   83b62:	458c      	cmp	ip, r1
   83b64:	dba6      	blt.n	83ab4 <_realloc_r+0x5c>
   83b66:	68c2      	ldr	r2, [r0, #12]
   83b68:	6881      	ldr	r1, [r0, #8]
   83b6a:	46a0      	mov	r8, r4
   83b6c:	60ca      	str	r2, [r1, #12]
   83b6e:	4665      	mov	r5, ip
   83b70:	6091      	str	r1, [r2, #8]
   83b72:	e7df      	b.n	83b34 <_realloc_r+0xdc>
   83b74:	19b9      	adds	r1, r7, r6
   83b76:	4333      	orrs	r3, r6
   83b78:	f042 0001 	orr.w	r0, r2, #1
   83b7c:	607b      	str	r3, [r7, #4]
   83b7e:	440a      	add	r2, r1
   83b80:	6048      	str	r0, [r1, #4]
   83b82:	6853      	ldr	r3, [r2, #4]
   83b84:	3108      	adds	r1, #8
   83b86:	f043 0301 	orr.w	r3, r3, #1
   83b8a:	6053      	str	r3, [r2, #4]
   83b8c:	4648      	mov	r0, r9
   83b8e:	f7ff f89f 	bl	82cd0 <_free_r>
   83b92:	e7db      	b.n	83b4c <_realloc_r+0xf4>
   83b94:	428b      	cmp	r3, r1
   83b96:	da33      	bge.n	83c00 <_realloc_r+0x1a8>
   83b98:	4641      	mov	r1, r8
   83b9a:	4648      	mov	r0, r9
   83b9c:	f7ff fb96 	bl	832cc <_malloc_r>
   83ba0:	4680      	mov	r8, r0
   83ba2:	2800      	cmp	r0, #0
   83ba4:	d0d2      	beq.n	83b4c <_realloc_r+0xf4>
   83ba6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83baa:	f1a0 0108 	sub.w	r1, r0, #8
   83bae:	f023 0201 	bic.w	r2, r3, #1
   83bb2:	443a      	add	r2, r7
   83bb4:	4291      	cmp	r1, r2
   83bb6:	f000 80bc 	beq.w	83d32 <_realloc_r+0x2da>
   83bba:	1f2a      	subs	r2, r5, #4
   83bbc:	2a24      	cmp	r2, #36	; 0x24
   83bbe:	d86e      	bhi.n	83c9e <_realloc_r+0x246>
   83bc0:	2a13      	cmp	r2, #19
   83bc2:	d842      	bhi.n	83c4a <_realloc_r+0x1f2>
   83bc4:	4603      	mov	r3, r0
   83bc6:	4622      	mov	r2, r4
   83bc8:	6811      	ldr	r1, [r2, #0]
   83bca:	6019      	str	r1, [r3, #0]
   83bcc:	6851      	ldr	r1, [r2, #4]
   83bce:	6059      	str	r1, [r3, #4]
   83bd0:	6892      	ldr	r2, [r2, #8]
   83bd2:	609a      	str	r2, [r3, #8]
   83bd4:	4621      	mov	r1, r4
   83bd6:	4648      	mov	r0, r9
   83bd8:	f7ff f87a 	bl	82cd0 <_free_r>
   83bdc:	e7b6      	b.n	83b4c <_realloc_r+0xf4>
   83bde:	4611      	mov	r1, r2
   83be0:	b003      	add	sp, #12
   83be2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83be6:	f7ff bb71 	b.w	832cc <_malloc_r>
   83bea:	f8de 2004 	ldr.w	r2, [lr, #4]
   83bee:	f106 0c10 	add.w	ip, r6, #16
   83bf2:	f022 0203 	bic.w	r2, r2, #3
   83bf6:	1950      	adds	r0, r2, r5
   83bf8:	4560      	cmp	r0, ip
   83bfa:	da3d      	bge.n	83c78 <_realloc_r+0x220>
   83bfc:	4670      	mov	r0, lr
   83bfe:	e759      	b.n	83ab4 <_realloc_r+0x5c>
   83c00:	46d0      	mov	r8, sl
   83c02:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83c06:	f8da 100c 	ldr.w	r1, [sl, #12]
   83c0a:	1f2a      	subs	r2, r5, #4
   83c0c:	2a24      	cmp	r2, #36	; 0x24
   83c0e:	60c1      	str	r1, [r0, #12]
   83c10:	6088      	str	r0, [r1, #8]
   83c12:	f200 80a0 	bhi.w	83d56 <_realloc_r+0x2fe>
   83c16:	2a13      	cmp	r2, #19
   83c18:	f240 809b 	bls.w	83d52 <_realloc_r+0x2fa>
   83c1c:	6821      	ldr	r1, [r4, #0]
   83c1e:	2a1b      	cmp	r2, #27
   83c20:	f8ca 1008 	str.w	r1, [sl, #8]
   83c24:	6861      	ldr	r1, [r4, #4]
   83c26:	f8ca 100c 	str.w	r1, [sl, #12]
   83c2a:	f200 80b2 	bhi.w	83d92 <_realloc_r+0x33a>
   83c2e:	3408      	adds	r4, #8
   83c30:	f10a 0210 	add.w	r2, sl, #16
   83c34:	6821      	ldr	r1, [r4, #0]
   83c36:	461d      	mov	r5, r3
   83c38:	6011      	str	r1, [r2, #0]
   83c3a:	6861      	ldr	r1, [r4, #4]
   83c3c:	4657      	mov	r7, sl
   83c3e:	6051      	str	r1, [r2, #4]
   83c40:	68a3      	ldr	r3, [r4, #8]
   83c42:	6093      	str	r3, [r2, #8]
   83c44:	f8da 3004 	ldr.w	r3, [sl, #4]
   83c48:	e774      	b.n	83b34 <_realloc_r+0xdc>
   83c4a:	6823      	ldr	r3, [r4, #0]
   83c4c:	2a1b      	cmp	r2, #27
   83c4e:	6003      	str	r3, [r0, #0]
   83c50:	6863      	ldr	r3, [r4, #4]
   83c52:	6043      	str	r3, [r0, #4]
   83c54:	d862      	bhi.n	83d1c <_realloc_r+0x2c4>
   83c56:	f100 0308 	add.w	r3, r0, #8
   83c5a:	f104 0208 	add.w	r2, r4, #8
   83c5e:	e7b3      	b.n	83bc8 <_realloc_r+0x170>
   83c60:	4643      	mov	r3, r8
   83c62:	6822      	ldr	r2, [r4, #0]
   83c64:	4675      	mov	r5, lr
   83c66:	601a      	str	r2, [r3, #0]
   83c68:	6862      	ldr	r2, [r4, #4]
   83c6a:	4657      	mov	r7, sl
   83c6c:	605a      	str	r2, [r3, #4]
   83c6e:	68a2      	ldr	r2, [r4, #8]
   83c70:	609a      	str	r2, [r3, #8]
   83c72:	f8da 3004 	ldr.w	r3, [sl, #4]
   83c76:	e75d      	b.n	83b34 <_realloc_r+0xdc>
   83c78:	1b83      	subs	r3, r0, r6
   83c7a:	4437      	add	r7, r6
   83c7c:	f043 0301 	orr.w	r3, r3, #1
   83c80:	f8cb 7008 	str.w	r7, [fp, #8]
   83c84:	607b      	str	r3, [r7, #4]
   83c86:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83c8a:	4648      	mov	r0, r9
   83c8c:	f003 0301 	and.w	r3, r3, #1
   83c90:	431e      	orrs	r6, r3
   83c92:	f844 6c04 	str.w	r6, [r4, #-4]
   83c96:	f7ff fedd 	bl	83a54 <__malloc_unlock>
   83c9a:	4620      	mov	r0, r4
   83c9c:	e75a      	b.n	83b54 <_realloc_r+0xfc>
   83c9e:	4621      	mov	r1, r4
   83ca0:	f7ff fe70 	bl	83984 <memmove>
   83ca4:	e796      	b.n	83bd4 <_realloc_r+0x17c>
   83ca6:	eb02 0c03 	add.w	ip, r2, r3
   83caa:	f106 0210 	add.w	r2, r6, #16
   83cae:	4594      	cmp	ip, r2
   83cb0:	f6ff af70 	blt.w	83b94 <_realloc_r+0x13c>
   83cb4:	4657      	mov	r7, sl
   83cb6:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83cba:	f8da 300c 	ldr.w	r3, [sl, #12]
   83cbe:	1f2a      	subs	r2, r5, #4
   83cc0:	2a24      	cmp	r2, #36	; 0x24
   83cc2:	60cb      	str	r3, [r1, #12]
   83cc4:	6099      	str	r1, [r3, #8]
   83cc6:	f200 8086 	bhi.w	83dd6 <_realloc_r+0x37e>
   83cca:	2a13      	cmp	r2, #19
   83ccc:	d977      	bls.n	83dbe <_realloc_r+0x366>
   83cce:	6823      	ldr	r3, [r4, #0]
   83cd0:	2a1b      	cmp	r2, #27
   83cd2:	f8ca 3008 	str.w	r3, [sl, #8]
   83cd6:	6863      	ldr	r3, [r4, #4]
   83cd8:	f8ca 300c 	str.w	r3, [sl, #12]
   83cdc:	f200 8084 	bhi.w	83de8 <_realloc_r+0x390>
   83ce0:	3408      	adds	r4, #8
   83ce2:	f10a 0310 	add.w	r3, sl, #16
   83ce6:	6822      	ldr	r2, [r4, #0]
   83ce8:	601a      	str	r2, [r3, #0]
   83cea:	6862      	ldr	r2, [r4, #4]
   83cec:	605a      	str	r2, [r3, #4]
   83cee:	68a2      	ldr	r2, [r4, #8]
   83cf0:	609a      	str	r2, [r3, #8]
   83cf2:	ebc6 020c 	rsb	r2, r6, ip
   83cf6:	eb0a 0306 	add.w	r3, sl, r6
   83cfa:	f042 0201 	orr.w	r2, r2, #1
   83cfe:	f8cb 3008 	str.w	r3, [fp, #8]
   83d02:	605a      	str	r2, [r3, #4]
   83d04:	f8da 3004 	ldr.w	r3, [sl, #4]
   83d08:	4648      	mov	r0, r9
   83d0a:	f003 0301 	and.w	r3, r3, #1
   83d0e:	431e      	orrs	r6, r3
   83d10:	f8ca 6004 	str.w	r6, [sl, #4]
   83d14:	f7ff fe9e 	bl	83a54 <__malloc_unlock>
   83d18:	4638      	mov	r0, r7
   83d1a:	e71b      	b.n	83b54 <_realloc_r+0xfc>
   83d1c:	68a3      	ldr	r3, [r4, #8]
   83d1e:	2a24      	cmp	r2, #36	; 0x24
   83d20:	6083      	str	r3, [r0, #8]
   83d22:	68e3      	ldr	r3, [r4, #12]
   83d24:	60c3      	str	r3, [r0, #12]
   83d26:	d02b      	beq.n	83d80 <_realloc_r+0x328>
   83d28:	f100 0310 	add.w	r3, r0, #16
   83d2c:	f104 0210 	add.w	r2, r4, #16
   83d30:	e74a      	b.n	83bc8 <_realloc_r+0x170>
   83d32:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83d36:	46a0      	mov	r8, r4
   83d38:	f022 0203 	bic.w	r2, r2, #3
   83d3c:	4415      	add	r5, r2
   83d3e:	e6f9      	b.n	83b34 <_realloc_r+0xdc>
   83d40:	4621      	mov	r1, r4
   83d42:	4640      	mov	r0, r8
   83d44:	4675      	mov	r5, lr
   83d46:	4657      	mov	r7, sl
   83d48:	f7ff fe1c 	bl	83984 <memmove>
   83d4c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83d50:	e6f0      	b.n	83b34 <_realloc_r+0xdc>
   83d52:	4642      	mov	r2, r8
   83d54:	e76e      	b.n	83c34 <_realloc_r+0x1dc>
   83d56:	4621      	mov	r1, r4
   83d58:	4640      	mov	r0, r8
   83d5a:	461d      	mov	r5, r3
   83d5c:	4657      	mov	r7, sl
   83d5e:	f7ff fe11 	bl	83984 <memmove>
   83d62:	f8da 3004 	ldr.w	r3, [sl, #4]
   83d66:	e6e5      	b.n	83b34 <_realloc_r+0xdc>
   83d68:	68a3      	ldr	r3, [r4, #8]
   83d6a:	2a24      	cmp	r2, #36	; 0x24
   83d6c:	f8ca 3010 	str.w	r3, [sl, #16]
   83d70:	68e3      	ldr	r3, [r4, #12]
   83d72:	f8ca 3014 	str.w	r3, [sl, #20]
   83d76:	d018      	beq.n	83daa <_realloc_r+0x352>
   83d78:	3410      	adds	r4, #16
   83d7a:	f10a 0318 	add.w	r3, sl, #24
   83d7e:	e770      	b.n	83c62 <_realloc_r+0x20a>
   83d80:	6922      	ldr	r2, [r4, #16]
   83d82:	f100 0318 	add.w	r3, r0, #24
   83d86:	6102      	str	r2, [r0, #16]
   83d88:	6961      	ldr	r1, [r4, #20]
   83d8a:	f104 0218 	add.w	r2, r4, #24
   83d8e:	6141      	str	r1, [r0, #20]
   83d90:	e71a      	b.n	83bc8 <_realloc_r+0x170>
   83d92:	68a1      	ldr	r1, [r4, #8]
   83d94:	2a24      	cmp	r2, #36	; 0x24
   83d96:	f8ca 1010 	str.w	r1, [sl, #16]
   83d9a:	68e1      	ldr	r1, [r4, #12]
   83d9c:	f8ca 1014 	str.w	r1, [sl, #20]
   83da0:	d00f      	beq.n	83dc2 <_realloc_r+0x36a>
   83da2:	3410      	adds	r4, #16
   83da4:	f10a 0218 	add.w	r2, sl, #24
   83da8:	e744      	b.n	83c34 <_realloc_r+0x1dc>
   83daa:	6922      	ldr	r2, [r4, #16]
   83dac:	f10a 0320 	add.w	r3, sl, #32
   83db0:	f8ca 2018 	str.w	r2, [sl, #24]
   83db4:	6962      	ldr	r2, [r4, #20]
   83db6:	3418      	adds	r4, #24
   83db8:	f8ca 201c 	str.w	r2, [sl, #28]
   83dbc:	e751      	b.n	83c62 <_realloc_r+0x20a>
   83dbe:	463b      	mov	r3, r7
   83dc0:	e791      	b.n	83ce6 <_realloc_r+0x28e>
   83dc2:	6921      	ldr	r1, [r4, #16]
   83dc4:	f10a 0220 	add.w	r2, sl, #32
   83dc8:	f8ca 1018 	str.w	r1, [sl, #24]
   83dcc:	6961      	ldr	r1, [r4, #20]
   83dce:	3418      	adds	r4, #24
   83dd0:	f8ca 101c 	str.w	r1, [sl, #28]
   83dd4:	e72e      	b.n	83c34 <_realloc_r+0x1dc>
   83dd6:	4621      	mov	r1, r4
   83dd8:	4638      	mov	r0, r7
   83dda:	f8cd c004 	str.w	ip, [sp, #4]
   83dde:	f7ff fdd1 	bl	83984 <memmove>
   83de2:	f8dd c004 	ldr.w	ip, [sp, #4]
   83de6:	e784      	b.n	83cf2 <_realloc_r+0x29a>
   83de8:	68a3      	ldr	r3, [r4, #8]
   83dea:	2a24      	cmp	r2, #36	; 0x24
   83dec:	f8ca 3010 	str.w	r3, [sl, #16]
   83df0:	68e3      	ldr	r3, [r4, #12]
   83df2:	f8ca 3014 	str.w	r3, [sl, #20]
   83df6:	d003      	beq.n	83e00 <_realloc_r+0x3a8>
   83df8:	3410      	adds	r4, #16
   83dfa:	f10a 0318 	add.w	r3, sl, #24
   83dfe:	e772      	b.n	83ce6 <_realloc_r+0x28e>
   83e00:	6922      	ldr	r2, [r4, #16]
   83e02:	f10a 0320 	add.w	r3, sl, #32
   83e06:	f8ca 2018 	str.w	r2, [sl, #24]
   83e0a:	6962      	ldr	r2, [r4, #20]
   83e0c:	3418      	adds	r4, #24
   83e0e:	f8ca 201c 	str.w	r2, [sl, #28]
   83e12:	e768      	b.n	83ce6 <_realloc_r+0x28e>
   83e14:	200705a0 	.word	0x200705a0

00083e18 <_sbrk_r>:
   83e18:	b538      	push	{r3, r4, r5, lr}
   83e1a:	4c07      	ldr	r4, [pc, #28]	; (83e38 <_sbrk_r+0x20>)
   83e1c:	2300      	movs	r3, #0
   83e1e:	4605      	mov	r5, r0
   83e20:	4608      	mov	r0, r1
   83e22:	6023      	str	r3, [r4, #0]
   83e24:	f7fd f8e2 	bl	80fec <_sbrk>
   83e28:	1c43      	adds	r3, r0, #1
   83e2a:	d000      	beq.n	83e2e <_sbrk_r+0x16>
   83e2c:	bd38      	pop	{r3, r4, r5, pc}
   83e2e:	6823      	ldr	r3, [r4, #0]
   83e30:	2b00      	cmp	r3, #0
   83e32:	d0fb      	beq.n	83e2c <_sbrk_r+0x14>
   83e34:	602b      	str	r3, [r5, #0]
   83e36:	bd38      	pop	{r3, r4, r5, pc}
   83e38:	20070b88 	.word	0x20070b88

00083e3c <__sread>:
   83e3c:	b510      	push	{r4, lr}
   83e3e:	460c      	mov	r4, r1
   83e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83e44:	f000 f9c2 	bl	841cc <_read_r>
   83e48:	2800      	cmp	r0, #0
   83e4a:	db03      	blt.n	83e54 <__sread+0x18>
   83e4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83e4e:	4403      	add	r3, r0
   83e50:	6523      	str	r3, [r4, #80]	; 0x50
   83e52:	bd10      	pop	{r4, pc}
   83e54:	89a3      	ldrh	r3, [r4, #12]
   83e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83e5a:	81a3      	strh	r3, [r4, #12]
   83e5c:	bd10      	pop	{r4, pc}
   83e5e:	bf00      	nop

00083e60 <__swrite>:
   83e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83e64:	460c      	mov	r4, r1
   83e66:	8989      	ldrh	r1, [r1, #12]
   83e68:	461d      	mov	r5, r3
   83e6a:	05cb      	lsls	r3, r1, #23
   83e6c:	4616      	mov	r6, r2
   83e6e:	4607      	mov	r7, r0
   83e70:	d506      	bpl.n	83e80 <__swrite+0x20>
   83e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83e76:	2200      	movs	r2, #0
   83e78:	2302      	movs	r3, #2
   83e7a:	f000 f993 	bl	841a4 <_lseek_r>
   83e7e:	89a1      	ldrh	r1, [r4, #12]
   83e80:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83e84:	81a1      	strh	r1, [r4, #12]
   83e86:	4638      	mov	r0, r7
   83e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83e8c:	4632      	mov	r2, r6
   83e8e:	462b      	mov	r3, r5
   83e90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83e94:	f000 b89e 	b.w	83fd4 <_write_r>

00083e98 <__sseek>:
   83e98:	b510      	push	{r4, lr}
   83e9a:	460c      	mov	r4, r1
   83e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83ea0:	f000 f980 	bl	841a4 <_lseek_r>
   83ea4:	89a3      	ldrh	r3, [r4, #12]
   83ea6:	1c42      	adds	r2, r0, #1
   83ea8:	bf0e      	itee	eq
   83eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83eb2:	6520      	strne	r0, [r4, #80]	; 0x50
   83eb4:	81a3      	strh	r3, [r4, #12]
   83eb6:	bd10      	pop	{r4, pc}

00083eb8 <__sclose>:
   83eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83ebc:	f000 b8f2 	b.w	840a4 <_close_r>

00083ec0 <__swbuf_r>:
   83ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83ec2:	460d      	mov	r5, r1
   83ec4:	4614      	mov	r4, r2
   83ec6:	4607      	mov	r7, r0
   83ec8:	b110      	cbz	r0, 83ed0 <__swbuf_r+0x10>
   83eca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83ecc:	2b00      	cmp	r3, #0
   83ece:	d048      	beq.n	83f62 <__swbuf_r+0xa2>
   83ed0:	89a2      	ldrh	r2, [r4, #12]
   83ed2:	69a0      	ldr	r0, [r4, #24]
   83ed4:	b293      	uxth	r3, r2
   83ed6:	60a0      	str	r0, [r4, #8]
   83ed8:	0718      	lsls	r0, r3, #28
   83eda:	d538      	bpl.n	83f4e <__swbuf_r+0x8e>
   83edc:	6926      	ldr	r6, [r4, #16]
   83ede:	2e00      	cmp	r6, #0
   83ee0:	d035      	beq.n	83f4e <__swbuf_r+0x8e>
   83ee2:	0499      	lsls	r1, r3, #18
   83ee4:	b2ed      	uxtb	r5, r5
   83ee6:	d515      	bpl.n	83f14 <__swbuf_r+0x54>
   83ee8:	6823      	ldr	r3, [r4, #0]
   83eea:	6962      	ldr	r2, [r4, #20]
   83eec:	1b9e      	subs	r6, r3, r6
   83eee:	4296      	cmp	r6, r2
   83ef0:	da1c      	bge.n	83f2c <__swbuf_r+0x6c>
   83ef2:	3601      	adds	r6, #1
   83ef4:	68a2      	ldr	r2, [r4, #8]
   83ef6:	1c59      	adds	r1, r3, #1
   83ef8:	3a01      	subs	r2, #1
   83efa:	60a2      	str	r2, [r4, #8]
   83efc:	6021      	str	r1, [r4, #0]
   83efe:	701d      	strb	r5, [r3, #0]
   83f00:	6963      	ldr	r3, [r4, #20]
   83f02:	42b3      	cmp	r3, r6
   83f04:	d01a      	beq.n	83f3c <__swbuf_r+0x7c>
   83f06:	89a3      	ldrh	r3, [r4, #12]
   83f08:	07db      	lsls	r3, r3, #31
   83f0a:	d501      	bpl.n	83f10 <__swbuf_r+0x50>
   83f0c:	2d0a      	cmp	r5, #10
   83f0e:	d015      	beq.n	83f3c <__swbuf_r+0x7c>
   83f10:	4628      	mov	r0, r5
   83f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83f16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83f1e:	6663      	str	r3, [r4, #100]	; 0x64
   83f20:	6823      	ldr	r3, [r4, #0]
   83f22:	81a2      	strh	r2, [r4, #12]
   83f24:	6962      	ldr	r2, [r4, #20]
   83f26:	1b9e      	subs	r6, r3, r6
   83f28:	4296      	cmp	r6, r2
   83f2a:	dbe2      	blt.n	83ef2 <__swbuf_r+0x32>
   83f2c:	4638      	mov	r0, r7
   83f2e:	4621      	mov	r1, r4
   83f30:	f7fe fd6e 	bl	82a10 <_fflush_r>
   83f34:	b940      	cbnz	r0, 83f48 <__swbuf_r+0x88>
   83f36:	6823      	ldr	r3, [r4, #0]
   83f38:	2601      	movs	r6, #1
   83f3a:	e7db      	b.n	83ef4 <__swbuf_r+0x34>
   83f3c:	4638      	mov	r0, r7
   83f3e:	4621      	mov	r1, r4
   83f40:	f7fe fd66 	bl	82a10 <_fflush_r>
   83f44:	2800      	cmp	r0, #0
   83f46:	d0e3      	beq.n	83f10 <__swbuf_r+0x50>
   83f48:	f04f 30ff 	mov.w	r0, #4294967295
   83f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f4e:	4638      	mov	r0, r7
   83f50:	4621      	mov	r1, r4
   83f52:	f7fe fc47 	bl	827e4 <__swsetup_r>
   83f56:	2800      	cmp	r0, #0
   83f58:	d1f6      	bne.n	83f48 <__swbuf_r+0x88>
   83f5a:	89a2      	ldrh	r2, [r4, #12]
   83f5c:	6926      	ldr	r6, [r4, #16]
   83f5e:	b293      	uxth	r3, r2
   83f60:	e7bf      	b.n	83ee2 <__swbuf_r+0x22>
   83f62:	f7fe fd71 	bl	82a48 <__sinit>
   83f66:	e7b3      	b.n	83ed0 <__swbuf_r+0x10>

00083f68 <_wcrtomb_r>:
   83f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83f6c:	461e      	mov	r6, r3
   83f6e:	b086      	sub	sp, #24
   83f70:	460c      	mov	r4, r1
   83f72:	4605      	mov	r5, r0
   83f74:	4617      	mov	r7, r2
   83f76:	4b0f      	ldr	r3, [pc, #60]	; (83fb4 <_wcrtomb_r+0x4c>)
   83f78:	b191      	cbz	r1, 83fa0 <_wcrtomb_r+0x38>
   83f7a:	f8d3 8000 	ldr.w	r8, [r3]
   83f7e:	f7ff f923 	bl	831c8 <__locale_charset>
   83f82:	9600      	str	r6, [sp, #0]
   83f84:	4603      	mov	r3, r0
   83f86:	4621      	mov	r1, r4
   83f88:	463a      	mov	r2, r7
   83f8a:	4628      	mov	r0, r5
   83f8c:	47c0      	blx	r8
   83f8e:	1c43      	adds	r3, r0, #1
   83f90:	d103      	bne.n	83f9a <_wcrtomb_r+0x32>
   83f92:	2200      	movs	r2, #0
   83f94:	238a      	movs	r3, #138	; 0x8a
   83f96:	6032      	str	r2, [r6, #0]
   83f98:	602b      	str	r3, [r5, #0]
   83f9a:	b006      	add	sp, #24
   83f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83fa0:	681f      	ldr	r7, [r3, #0]
   83fa2:	f7ff f911 	bl	831c8 <__locale_charset>
   83fa6:	9600      	str	r6, [sp, #0]
   83fa8:	4603      	mov	r3, r0
   83faa:	4622      	mov	r2, r4
   83fac:	4628      	mov	r0, r5
   83fae:	a903      	add	r1, sp, #12
   83fb0:	47b8      	blx	r7
   83fb2:	e7ec      	b.n	83f8e <_wcrtomb_r+0x26>
   83fb4:	200709b0 	.word	0x200709b0

00083fb8 <__ascii_wctomb>:
   83fb8:	b121      	cbz	r1, 83fc4 <__ascii_wctomb+0xc>
   83fba:	2aff      	cmp	r2, #255	; 0xff
   83fbc:	d804      	bhi.n	83fc8 <__ascii_wctomb+0x10>
   83fbe:	700a      	strb	r2, [r1, #0]
   83fc0:	2001      	movs	r0, #1
   83fc2:	4770      	bx	lr
   83fc4:	4608      	mov	r0, r1
   83fc6:	4770      	bx	lr
   83fc8:	238a      	movs	r3, #138	; 0x8a
   83fca:	6003      	str	r3, [r0, #0]
   83fcc:	f04f 30ff 	mov.w	r0, #4294967295
   83fd0:	4770      	bx	lr
   83fd2:	bf00      	nop

00083fd4 <_write_r>:
   83fd4:	b570      	push	{r4, r5, r6, lr}
   83fd6:	4c08      	ldr	r4, [pc, #32]	; (83ff8 <_write_r+0x24>)
   83fd8:	4606      	mov	r6, r0
   83fda:	2500      	movs	r5, #0
   83fdc:	4608      	mov	r0, r1
   83fde:	4611      	mov	r1, r2
   83fe0:	461a      	mov	r2, r3
   83fe2:	6025      	str	r5, [r4, #0]
   83fe4:	f7fc f976 	bl	802d4 <_write>
   83fe8:	1c43      	adds	r3, r0, #1
   83fea:	d000      	beq.n	83fee <_write_r+0x1a>
   83fec:	bd70      	pop	{r4, r5, r6, pc}
   83fee:	6823      	ldr	r3, [r4, #0]
   83ff0:	2b00      	cmp	r3, #0
   83ff2:	d0fb      	beq.n	83fec <_write_r+0x18>
   83ff4:	6033      	str	r3, [r6, #0]
   83ff6:	bd70      	pop	{r4, r5, r6, pc}
   83ff8:	20070b88 	.word	0x20070b88

00083ffc <__register_exitproc>:
   83ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   83ffe:	4c27      	ldr	r4, [pc, #156]	; (8409c <__register_exitproc+0xa0>)
   84000:	b085      	sub	sp, #20
   84002:	6826      	ldr	r6, [r4, #0]
   84004:	4607      	mov	r7, r0
   84006:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8400a:	2c00      	cmp	r4, #0
   8400c:	d040      	beq.n	84090 <__register_exitproc+0x94>
   8400e:	6865      	ldr	r5, [r4, #4]
   84010:	2d1f      	cmp	r5, #31
   84012:	dd1e      	ble.n	84052 <__register_exitproc+0x56>
   84014:	4822      	ldr	r0, [pc, #136]	; (840a0 <__register_exitproc+0xa4>)
   84016:	b918      	cbnz	r0, 84020 <__register_exitproc+0x24>
   84018:	f04f 30ff 	mov.w	r0, #4294967295
   8401c:	b005      	add	sp, #20
   8401e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84020:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84024:	9103      	str	r1, [sp, #12]
   84026:	9202      	str	r2, [sp, #8]
   84028:	9301      	str	r3, [sp, #4]
   8402a:	f7ff f947 	bl	832bc <malloc>
   8402e:	9903      	ldr	r1, [sp, #12]
   84030:	4604      	mov	r4, r0
   84032:	9a02      	ldr	r2, [sp, #8]
   84034:	9b01      	ldr	r3, [sp, #4]
   84036:	2800      	cmp	r0, #0
   84038:	d0ee      	beq.n	84018 <__register_exitproc+0x1c>
   8403a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8403e:	2000      	movs	r0, #0
   84040:	6025      	str	r5, [r4, #0]
   84042:	6060      	str	r0, [r4, #4]
   84044:	4605      	mov	r5, r0
   84046:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8404a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8404e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   84052:	b93f      	cbnz	r7, 84064 <__register_exitproc+0x68>
   84054:	1c6b      	adds	r3, r5, #1
   84056:	2000      	movs	r0, #0
   84058:	3502      	adds	r5, #2
   8405a:	6063      	str	r3, [r4, #4]
   8405c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   84060:	b005      	add	sp, #20
   84062:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84064:	2601      	movs	r6, #1
   84066:	40ae      	lsls	r6, r5
   84068:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   8406c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   84070:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   84074:	2f02      	cmp	r7, #2
   84076:	ea42 0206 	orr.w	r2, r2, r6
   8407a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8407e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   84082:	d1e7      	bne.n	84054 <__register_exitproc+0x58>
   84084:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84088:	431e      	orrs	r6, r3
   8408a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8408e:	e7e1      	b.n	84054 <__register_exitproc+0x58>
   84090:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   84094:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84098:	e7b9      	b.n	8400e <__register_exitproc+0x12>
   8409a:	bf00      	nop
   8409c:	00084814 	.word	0x00084814
   840a0:	000832bd 	.word	0x000832bd

000840a4 <_close_r>:
   840a4:	b538      	push	{r3, r4, r5, lr}
   840a6:	4c07      	ldr	r4, [pc, #28]	; (840c4 <_close_r+0x20>)
   840a8:	2300      	movs	r3, #0
   840aa:	4605      	mov	r5, r0
   840ac:	4608      	mov	r0, r1
   840ae:	6023      	str	r3, [r4, #0]
   840b0:	f7fc ffb6 	bl	81020 <_close>
   840b4:	1c43      	adds	r3, r0, #1
   840b6:	d000      	beq.n	840ba <_close_r+0x16>
   840b8:	bd38      	pop	{r3, r4, r5, pc}
   840ba:	6823      	ldr	r3, [r4, #0]
   840bc:	2b00      	cmp	r3, #0
   840be:	d0fb      	beq.n	840b8 <_close_r+0x14>
   840c0:	602b      	str	r3, [r5, #0]
   840c2:	bd38      	pop	{r3, r4, r5, pc}
   840c4:	20070b88 	.word	0x20070b88

000840c8 <_fclose_r>:
   840c8:	b570      	push	{r4, r5, r6, lr}
   840ca:	460c      	mov	r4, r1
   840cc:	4605      	mov	r5, r0
   840ce:	b131      	cbz	r1, 840de <_fclose_r+0x16>
   840d0:	b110      	cbz	r0, 840d8 <_fclose_r+0x10>
   840d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   840d4:	2b00      	cmp	r3, #0
   840d6:	d02f      	beq.n	84138 <_fclose_r+0x70>
   840d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   840dc:	b90b      	cbnz	r3, 840e2 <_fclose_r+0x1a>
   840de:	2000      	movs	r0, #0
   840e0:	bd70      	pop	{r4, r5, r6, pc}
   840e2:	4628      	mov	r0, r5
   840e4:	4621      	mov	r1, r4
   840e6:	f7fe fc93 	bl	82a10 <_fflush_r>
   840ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   840ec:	4606      	mov	r6, r0
   840ee:	b133      	cbz	r3, 840fe <_fclose_r+0x36>
   840f0:	4628      	mov	r0, r5
   840f2:	69e1      	ldr	r1, [r4, #28]
   840f4:	4798      	blx	r3
   840f6:	2800      	cmp	r0, #0
   840f8:	bfb8      	it	lt
   840fa:	f04f 36ff 	movlt.w	r6, #4294967295
   840fe:	89a3      	ldrh	r3, [r4, #12]
   84100:	061b      	lsls	r3, r3, #24
   84102:	d41c      	bmi.n	8413e <_fclose_r+0x76>
   84104:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84106:	b141      	cbz	r1, 8411a <_fclose_r+0x52>
   84108:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8410c:	4299      	cmp	r1, r3
   8410e:	d002      	beq.n	84116 <_fclose_r+0x4e>
   84110:	4628      	mov	r0, r5
   84112:	f7fe fddd 	bl	82cd0 <_free_r>
   84116:	2300      	movs	r3, #0
   84118:	6323      	str	r3, [r4, #48]	; 0x30
   8411a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8411c:	b121      	cbz	r1, 84128 <_fclose_r+0x60>
   8411e:	4628      	mov	r0, r5
   84120:	f7fe fdd6 	bl	82cd0 <_free_r>
   84124:	2300      	movs	r3, #0
   84126:	6463      	str	r3, [r4, #68]	; 0x44
   84128:	f7fe fd08 	bl	82b3c <__sfp_lock_acquire>
   8412c:	2300      	movs	r3, #0
   8412e:	81a3      	strh	r3, [r4, #12]
   84130:	f7fe fd06 	bl	82b40 <__sfp_lock_release>
   84134:	4630      	mov	r0, r6
   84136:	bd70      	pop	{r4, r5, r6, pc}
   84138:	f7fe fc86 	bl	82a48 <__sinit>
   8413c:	e7cc      	b.n	840d8 <_fclose_r+0x10>
   8413e:	4628      	mov	r0, r5
   84140:	6921      	ldr	r1, [r4, #16]
   84142:	f7fe fdc5 	bl	82cd0 <_free_r>
   84146:	e7dd      	b.n	84104 <_fclose_r+0x3c>

00084148 <fclose>:
   84148:	4b02      	ldr	r3, [pc, #8]	; (84154 <fclose+0xc>)
   8414a:	4601      	mov	r1, r0
   8414c:	6818      	ldr	r0, [r3, #0]
   8414e:	f7ff bfbb 	b.w	840c8 <_fclose_r>
   84152:	bf00      	nop
   84154:	20070578 	.word	0x20070578

00084158 <_fstat_r>:
   84158:	b538      	push	{r3, r4, r5, lr}
   8415a:	4c08      	ldr	r4, [pc, #32]	; (8417c <_fstat_r+0x24>)
   8415c:	2300      	movs	r3, #0
   8415e:	4605      	mov	r5, r0
   84160:	4608      	mov	r0, r1
   84162:	4611      	mov	r1, r2
   84164:	6023      	str	r3, [r4, #0]
   84166:	f7fc ff5f 	bl	81028 <_fstat>
   8416a:	1c43      	adds	r3, r0, #1
   8416c:	d000      	beq.n	84170 <_fstat_r+0x18>
   8416e:	bd38      	pop	{r3, r4, r5, pc}
   84170:	6823      	ldr	r3, [r4, #0]
   84172:	2b00      	cmp	r3, #0
   84174:	d0fb      	beq.n	8416e <_fstat_r+0x16>
   84176:	602b      	str	r3, [r5, #0]
   84178:	bd38      	pop	{r3, r4, r5, pc}
   8417a:	bf00      	nop
   8417c:	20070b88 	.word	0x20070b88

00084180 <_isatty_r>:
   84180:	b538      	push	{r3, r4, r5, lr}
   84182:	4c07      	ldr	r4, [pc, #28]	; (841a0 <_isatty_r+0x20>)
   84184:	2300      	movs	r3, #0
   84186:	4605      	mov	r5, r0
   84188:	4608      	mov	r0, r1
   8418a:	6023      	str	r3, [r4, #0]
   8418c:	f7fc ff52 	bl	81034 <_isatty>
   84190:	1c43      	adds	r3, r0, #1
   84192:	d000      	beq.n	84196 <_isatty_r+0x16>
   84194:	bd38      	pop	{r3, r4, r5, pc}
   84196:	6823      	ldr	r3, [r4, #0]
   84198:	2b00      	cmp	r3, #0
   8419a:	d0fb      	beq.n	84194 <_isatty_r+0x14>
   8419c:	602b      	str	r3, [r5, #0]
   8419e:	bd38      	pop	{r3, r4, r5, pc}
   841a0:	20070b88 	.word	0x20070b88

000841a4 <_lseek_r>:
   841a4:	b570      	push	{r4, r5, r6, lr}
   841a6:	4c08      	ldr	r4, [pc, #32]	; (841c8 <_lseek_r+0x24>)
   841a8:	4606      	mov	r6, r0
   841aa:	2500      	movs	r5, #0
   841ac:	4608      	mov	r0, r1
   841ae:	4611      	mov	r1, r2
   841b0:	461a      	mov	r2, r3
   841b2:	6025      	str	r5, [r4, #0]
   841b4:	f7fc ff40 	bl	81038 <_lseek>
   841b8:	1c43      	adds	r3, r0, #1
   841ba:	d000      	beq.n	841be <_lseek_r+0x1a>
   841bc:	bd70      	pop	{r4, r5, r6, pc}
   841be:	6823      	ldr	r3, [r4, #0]
   841c0:	2b00      	cmp	r3, #0
   841c2:	d0fb      	beq.n	841bc <_lseek_r+0x18>
   841c4:	6033      	str	r3, [r6, #0]
   841c6:	bd70      	pop	{r4, r5, r6, pc}
   841c8:	20070b88 	.word	0x20070b88

000841cc <_read_r>:
   841cc:	b570      	push	{r4, r5, r6, lr}
   841ce:	4c08      	ldr	r4, [pc, #32]	; (841f0 <_read_r+0x24>)
   841d0:	4606      	mov	r6, r0
   841d2:	2500      	movs	r5, #0
   841d4:	4608      	mov	r0, r1
   841d6:	4611      	mov	r1, r2
   841d8:	461a      	mov	r2, r3
   841da:	6025      	str	r5, [r4, #0]
   841dc:	f7fc f85a 	bl	80294 <_read>
   841e0:	1c43      	adds	r3, r0, #1
   841e2:	d000      	beq.n	841e6 <_read_r+0x1a>
   841e4:	bd70      	pop	{r4, r5, r6, pc}
   841e6:	6823      	ldr	r3, [r4, #0]
   841e8:	2b00      	cmp	r3, #0
   841ea:	d0fb      	beq.n	841e4 <_read_r+0x18>
   841ec:	6033      	str	r3, [r6, #0]
   841ee:	bd70      	pop	{r4, r5, r6, pc}
   841f0:	20070b88 	.word	0x20070b88

000841f4 <__aeabi_uldivmod>:
   841f4:	b94b      	cbnz	r3, 8420a <__aeabi_uldivmod+0x16>
   841f6:	b942      	cbnz	r2, 8420a <__aeabi_uldivmod+0x16>
   841f8:	2900      	cmp	r1, #0
   841fa:	bf08      	it	eq
   841fc:	2800      	cmpeq	r0, #0
   841fe:	d002      	beq.n	84206 <__aeabi_uldivmod+0x12>
   84200:	f04f 31ff 	mov.w	r1, #4294967295
   84204:	4608      	mov	r0, r1
   84206:	f000 b83b 	b.w	84280 <__aeabi_idiv0>
   8420a:	b082      	sub	sp, #8
   8420c:	46ec      	mov	ip, sp
   8420e:	e92d 5000 	stmdb	sp!, {ip, lr}
   84212:	f000 f81d 	bl	84250 <__gnu_uldivmod_helper>
   84216:	f8dd e004 	ldr.w	lr, [sp, #4]
   8421a:	b002      	add	sp, #8
   8421c:	bc0c      	pop	{r2, r3}
   8421e:	4770      	bx	lr

00084220 <__gnu_ldivmod_helper>:
   84220:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84224:	9e08      	ldr	r6, [sp, #32]
   84226:	4614      	mov	r4, r2
   84228:	461d      	mov	r5, r3
   8422a:	4680      	mov	r8, r0
   8422c:	4689      	mov	r9, r1
   8422e:	f000 f829 	bl	84284 <__divdi3>
   84232:	fb04 f301 	mul.w	r3, r4, r1
   84236:	fba4 ab00 	umull	sl, fp, r4, r0
   8423a:	fb00 3205 	mla	r2, r0, r5, r3
   8423e:	4493      	add	fp, r2
   84240:	ebb8 080a 	subs.w	r8, r8, sl
   84244:	eb69 090b 	sbc.w	r9, r9, fp
   84248:	e9c6 8900 	strd	r8, r9, [r6]
   8424c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084250 <__gnu_uldivmod_helper>:
   84250:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84254:	9e08      	ldr	r6, [sp, #32]
   84256:	4614      	mov	r4, r2
   84258:	461d      	mov	r5, r3
   8425a:	4680      	mov	r8, r0
   8425c:	4689      	mov	r9, r1
   8425e:	f000 f961 	bl	84524 <__udivdi3>
   84262:	fb00 f505 	mul.w	r5, r0, r5
   84266:	fba0 ab04 	umull	sl, fp, r0, r4
   8426a:	fb04 5401 	mla	r4, r4, r1, r5
   8426e:	44a3      	add	fp, r4
   84270:	ebb8 080a 	subs.w	r8, r8, sl
   84274:	eb69 090b 	sbc.w	r9, r9, fp
   84278:	e9c6 8900 	strd	r8, r9, [r6]
   8427c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084280 <__aeabi_idiv0>:
   84280:	4770      	bx	lr
   84282:	bf00      	nop

00084284 <__divdi3>:
   84284:	2900      	cmp	r1, #0
   84286:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8428a:	f2c0 80a1 	blt.w	843d0 <__divdi3+0x14c>
   8428e:	2400      	movs	r4, #0
   84290:	2b00      	cmp	r3, #0
   84292:	f2c0 8098 	blt.w	843c6 <__divdi3+0x142>
   84296:	4615      	mov	r5, r2
   84298:	4606      	mov	r6, r0
   8429a:	460f      	mov	r7, r1
   8429c:	2b00      	cmp	r3, #0
   8429e:	d13f      	bne.n	84320 <__divdi3+0x9c>
   842a0:	428a      	cmp	r2, r1
   842a2:	d958      	bls.n	84356 <__divdi3+0xd2>
   842a4:	fab2 f382 	clz	r3, r2
   842a8:	b14b      	cbz	r3, 842be <__divdi3+0x3a>
   842aa:	f1c3 0220 	rsb	r2, r3, #32
   842ae:	fa01 f703 	lsl.w	r7, r1, r3
   842b2:	fa20 f202 	lsr.w	r2, r0, r2
   842b6:	409d      	lsls	r5, r3
   842b8:	fa00 f603 	lsl.w	r6, r0, r3
   842bc:	4317      	orrs	r7, r2
   842be:	0c29      	lsrs	r1, r5, #16
   842c0:	fbb7 f2f1 	udiv	r2, r7, r1
   842c4:	fb01 7712 	mls	r7, r1, r2, r7
   842c8:	b2a8      	uxth	r0, r5
   842ca:	fb00 f302 	mul.w	r3, r0, r2
   842ce:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   842d2:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   842d6:	42bb      	cmp	r3, r7
   842d8:	d909      	bls.n	842ee <__divdi3+0x6a>
   842da:	197f      	adds	r7, r7, r5
   842dc:	f102 3cff 	add.w	ip, r2, #4294967295
   842e0:	f080 8105 	bcs.w	844ee <__divdi3+0x26a>
   842e4:	42bb      	cmp	r3, r7
   842e6:	f240 8102 	bls.w	844ee <__divdi3+0x26a>
   842ea:	3a02      	subs	r2, #2
   842ec:	442f      	add	r7, r5
   842ee:	1aff      	subs	r7, r7, r3
   842f0:	fbb7 f3f1 	udiv	r3, r7, r1
   842f4:	fb01 7113 	mls	r1, r1, r3, r7
   842f8:	fb00 f003 	mul.w	r0, r0, r3
   842fc:	b2b6      	uxth	r6, r6
   842fe:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   84302:	4288      	cmp	r0, r1
   84304:	d908      	bls.n	84318 <__divdi3+0x94>
   84306:	1949      	adds	r1, r1, r5
   84308:	f103 37ff 	add.w	r7, r3, #4294967295
   8430c:	f080 80f1 	bcs.w	844f2 <__divdi3+0x26e>
   84310:	4288      	cmp	r0, r1
   84312:	f240 80ee 	bls.w	844f2 <__divdi3+0x26e>
   84316:	3b02      	subs	r3, #2
   84318:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8431c:	2300      	movs	r3, #0
   8431e:	e003      	b.n	84328 <__divdi3+0xa4>
   84320:	428b      	cmp	r3, r1
   84322:	d90a      	bls.n	8433a <__divdi3+0xb6>
   84324:	2300      	movs	r3, #0
   84326:	461a      	mov	r2, r3
   84328:	4610      	mov	r0, r2
   8432a:	4619      	mov	r1, r3
   8432c:	b114      	cbz	r4, 84334 <__divdi3+0xb0>
   8432e:	4240      	negs	r0, r0
   84330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84334:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84338:	4770      	bx	lr
   8433a:	fab3 f883 	clz	r8, r3
   8433e:	f1b8 0f00 	cmp.w	r8, #0
   84342:	f040 8088 	bne.w	84456 <__divdi3+0x1d2>
   84346:	428b      	cmp	r3, r1
   84348:	d302      	bcc.n	84350 <__divdi3+0xcc>
   8434a:	4282      	cmp	r2, r0
   8434c:	f200 80e2 	bhi.w	84514 <__divdi3+0x290>
   84350:	2300      	movs	r3, #0
   84352:	2201      	movs	r2, #1
   84354:	e7e8      	b.n	84328 <__divdi3+0xa4>
   84356:	b912      	cbnz	r2, 8435e <__divdi3+0xda>
   84358:	2301      	movs	r3, #1
   8435a:	fbb3 f5f2 	udiv	r5, r3, r2
   8435e:	fab5 f285 	clz	r2, r5
   84362:	2a00      	cmp	r2, #0
   84364:	d13a      	bne.n	843dc <__divdi3+0x158>
   84366:	1b7f      	subs	r7, r7, r5
   84368:	0c28      	lsrs	r0, r5, #16
   8436a:	fa1f fc85 	uxth.w	ip, r5
   8436e:	2301      	movs	r3, #1
   84370:	fbb7 f1f0 	udiv	r1, r7, r0
   84374:	fb00 7711 	mls	r7, r0, r1, r7
   84378:	fb0c f201 	mul.w	r2, ip, r1
   8437c:	ea4f 4816 	mov.w	r8, r6, lsr #16
   84380:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   84384:	42ba      	cmp	r2, r7
   84386:	d907      	bls.n	84398 <__divdi3+0x114>
   84388:	197f      	adds	r7, r7, r5
   8438a:	f101 38ff 	add.w	r8, r1, #4294967295
   8438e:	d202      	bcs.n	84396 <__divdi3+0x112>
   84390:	42ba      	cmp	r2, r7
   84392:	f200 80c4 	bhi.w	8451e <__divdi3+0x29a>
   84396:	4641      	mov	r1, r8
   84398:	1abf      	subs	r7, r7, r2
   8439a:	fbb7 f2f0 	udiv	r2, r7, r0
   8439e:	fb00 7012 	mls	r0, r0, r2, r7
   843a2:	fb0c fc02 	mul.w	ip, ip, r2
   843a6:	b2b6      	uxth	r6, r6
   843a8:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   843ac:	4584      	cmp	ip, r0
   843ae:	d907      	bls.n	843c0 <__divdi3+0x13c>
   843b0:	1940      	adds	r0, r0, r5
   843b2:	f102 37ff 	add.w	r7, r2, #4294967295
   843b6:	d202      	bcs.n	843be <__divdi3+0x13a>
   843b8:	4584      	cmp	ip, r0
   843ba:	f200 80ae 	bhi.w	8451a <__divdi3+0x296>
   843be:	463a      	mov	r2, r7
   843c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   843c4:	e7b0      	b.n	84328 <__divdi3+0xa4>
   843c6:	43e4      	mvns	r4, r4
   843c8:	4252      	negs	r2, r2
   843ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   843ce:	e762      	b.n	84296 <__divdi3+0x12>
   843d0:	4240      	negs	r0, r0
   843d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   843d6:	f04f 34ff 	mov.w	r4, #4294967295
   843da:	e759      	b.n	84290 <__divdi3+0xc>
   843dc:	4095      	lsls	r5, r2
   843de:	f1c2 0920 	rsb	r9, r2, #32
   843e2:	fa27 f109 	lsr.w	r1, r7, r9
   843e6:	fa26 f909 	lsr.w	r9, r6, r9
   843ea:	4097      	lsls	r7, r2
   843ec:	0c28      	lsrs	r0, r5, #16
   843ee:	fbb1 f8f0 	udiv	r8, r1, r0
   843f2:	fb00 1118 	mls	r1, r0, r8, r1
   843f6:	fa1f fc85 	uxth.w	ip, r5
   843fa:	fb0c f308 	mul.w	r3, ip, r8
   843fe:	ea49 0907 	orr.w	r9, r9, r7
   84402:	ea4f 4719 	mov.w	r7, r9, lsr #16
   84406:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   8440a:	428b      	cmp	r3, r1
   8440c:	fa06 f602 	lsl.w	r6, r6, r2
   84410:	d908      	bls.n	84424 <__divdi3+0x1a0>
   84412:	1949      	adds	r1, r1, r5
   84414:	f108 32ff 	add.w	r2, r8, #4294967295
   84418:	d27a      	bcs.n	84510 <__divdi3+0x28c>
   8441a:	428b      	cmp	r3, r1
   8441c:	d978      	bls.n	84510 <__divdi3+0x28c>
   8441e:	f1a8 0802 	sub.w	r8, r8, #2
   84422:	4429      	add	r1, r5
   84424:	1ac9      	subs	r1, r1, r3
   84426:	fbb1 f3f0 	udiv	r3, r1, r0
   8442a:	fb00 1713 	mls	r7, r0, r3, r1
   8442e:	fb0c f203 	mul.w	r2, ip, r3
   84432:	fa1f f989 	uxth.w	r9, r9
   84436:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   8443a:	42ba      	cmp	r2, r7
   8443c:	d907      	bls.n	8444e <__divdi3+0x1ca>
   8443e:	197f      	adds	r7, r7, r5
   84440:	f103 31ff 	add.w	r1, r3, #4294967295
   84444:	d260      	bcs.n	84508 <__divdi3+0x284>
   84446:	42ba      	cmp	r2, r7
   84448:	d95e      	bls.n	84508 <__divdi3+0x284>
   8444a:	3b02      	subs	r3, #2
   8444c:	442f      	add	r7, r5
   8444e:	1abf      	subs	r7, r7, r2
   84450:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84454:	e78c      	b.n	84370 <__divdi3+0xec>
   84456:	f1c8 0220 	rsb	r2, r8, #32
   8445a:	fa25 f102 	lsr.w	r1, r5, r2
   8445e:	fa03 fc08 	lsl.w	ip, r3, r8
   84462:	fa27 f302 	lsr.w	r3, r7, r2
   84466:	fa20 f202 	lsr.w	r2, r0, r2
   8446a:	fa07 f708 	lsl.w	r7, r7, r8
   8446e:	ea41 0c0c 	orr.w	ip, r1, ip
   84472:	ea4f 491c 	mov.w	r9, ip, lsr #16
   84476:	fbb3 f1f9 	udiv	r1, r3, r9
   8447a:	fb09 3311 	mls	r3, r9, r1, r3
   8447e:	fa1f fa8c 	uxth.w	sl, ip
   84482:	fb0a fb01 	mul.w	fp, sl, r1
   84486:	4317      	orrs	r7, r2
   84488:	0c3a      	lsrs	r2, r7, #16
   8448a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   8448e:	459b      	cmp	fp, r3
   84490:	fa05 f008 	lsl.w	r0, r5, r8
   84494:	d908      	bls.n	844a8 <__divdi3+0x224>
   84496:	eb13 030c 	adds.w	r3, r3, ip
   8449a:	f101 32ff 	add.w	r2, r1, #4294967295
   8449e:	d235      	bcs.n	8450c <__divdi3+0x288>
   844a0:	459b      	cmp	fp, r3
   844a2:	d933      	bls.n	8450c <__divdi3+0x288>
   844a4:	3902      	subs	r1, #2
   844a6:	4463      	add	r3, ip
   844a8:	ebcb 0303 	rsb	r3, fp, r3
   844ac:	fbb3 f2f9 	udiv	r2, r3, r9
   844b0:	fb09 3312 	mls	r3, r9, r2, r3
   844b4:	fb0a fa02 	mul.w	sl, sl, r2
   844b8:	b2bf      	uxth	r7, r7
   844ba:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   844be:	45ba      	cmp	sl, r7
   844c0:	d908      	bls.n	844d4 <__divdi3+0x250>
   844c2:	eb17 070c 	adds.w	r7, r7, ip
   844c6:	f102 33ff 	add.w	r3, r2, #4294967295
   844ca:	d21b      	bcs.n	84504 <__divdi3+0x280>
   844cc:	45ba      	cmp	sl, r7
   844ce:	d919      	bls.n	84504 <__divdi3+0x280>
   844d0:	3a02      	subs	r2, #2
   844d2:	4467      	add	r7, ip
   844d4:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   844d8:	fba5 0100 	umull	r0, r1, r5, r0
   844dc:	ebca 0707 	rsb	r7, sl, r7
   844e0:	428f      	cmp	r7, r1
   844e2:	f04f 0300 	mov.w	r3, #0
   844e6:	d30a      	bcc.n	844fe <__divdi3+0x27a>
   844e8:	d005      	beq.n	844f6 <__divdi3+0x272>
   844ea:	462a      	mov	r2, r5
   844ec:	e71c      	b.n	84328 <__divdi3+0xa4>
   844ee:	4662      	mov	r2, ip
   844f0:	e6fd      	b.n	842ee <__divdi3+0x6a>
   844f2:	463b      	mov	r3, r7
   844f4:	e710      	b.n	84318 <__divdi3+0x94>
   844f6:	fa06 f608 	lsl.w	r6, r6, r8
   844fa:	4286      	cmp	r6, r0
   844fc:	d2f5      	bcs.n	844ea <__divdi3+0x266>
   844fe:	1e6a      	subs	r2, r5, #1
   84500:	2300      	movs	r3, #0
   84502:	e711      	b.n	84328 <__divdi3+0xa4>
   84504:	461a      	mov	r2, r3
   84506:	e7e5      	b.n	844d4 <__divdi3+0x250>
   84508:	460b      	mov	r3, r1
   8450a:	e7a0      	b.n	8444e <__divdi3+0x1ca>
   8450c:	4611      	mov	r1, r2
   8450e:	e7cb      	b.n	844a8 <__divdi3+0x224>
   84510:	4690      	mov	r8, r2
   84512:	e787      	b.n	84424 <__divdi3+0x1a0>
   84514:	4643      	mov	r3, r8
   84516:	4642      	mov	r2, r8
   84518:	e706      	b.n	84328 <__divdi3+0xa4>
   8451a:	3a02      	subs	r2, #2
   8451c:	e750      	b.n	843c0 <__divdi3+0x13c>
   8451e:	3902      	subs	r1, #2
   84520:	442f      	add	r7, r5
   84522:	e739      	b.n	84398 <__divdi3+0x114>

00084524 <__udivdi3>:
   84524:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84528:	4614      	mov	r4, r2
   8452a:	4605      	mov	r5, r0
   8452c:	460e      	mov	r6, r1
   8452e:	2b00      	cmp	r3, #0
   84530:	d143      	bne.n	845ba <__udivdi3+0x96>
   84532:	428a      	cmp	r2, r1
   84534:	d953      	bls.n	845de <__udivdi3+0xba>
   84536:	fab2 f782 	clz	r7, r2
   8453a:	b157      	cbz	r7, 84552 <__udivdi3+0x2e>
   8453c:	f1c7 0620 	rsb	r6, r7, #32
   84540:	fa20 f606 	lsr.w	r6, r0, r6
   84544:	fa01 f307 	lsl.w	r3, r1, r7
   84548:	fa02 f407 	lsl.w	r4, r2, r7
   8454c:	fa00 f507 	lsl.w	r5, r0, r7
   84550:	431e      	orrs	r6, r3
   84552:	0c21      	lsrs	r1, r4, #16
   84554:	fbb6 f2f1 	udiv	r2, r6, r1
   84558:	fb01 6612 	mls	r6, r1, r2, r6
   8455c:	b2a0      	uxth	r0, r4
   8455e:	fb00 f302 	mul.w	r3, r0, r2
   84562:	0c2f      	lsrs	r7, r5, #16
   84564:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   84568:	42b3      	cmp	r3, r6
   8456a:	d909      	bls.n	84580 <__udivdi3+0x5c>
   8456c:	1936      	adds	r6, r6, r4
   8456e:	f102 37ff 	add.w	r7, r2, #4294967295
   84572:	f080 80fd 	bcs.w	84770 <__udivdi3+0x24c>
   84576:	42b3      	cmp	r3, r6
   84578:	f240 80fa 	bls.w	84770 <__udivdi3+0x24c>
   8457c:	3a02      	subs	r2, #2
   8457e:	4426      	add	r6, r4
   84580:	1af6      	subs	r6, r6, r3
   84582:	fbb6 f3f1 	udiv	r3, r6, r1
   84586:	fb01 6113 	mls	r1, r1, r3, r6
   8458a:	fb00 f003 	mul.w	r0, r0, r3
   8458e:	b2ad      	uxth	r5, r5
   84590:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   84594:	4288      	cmp	r0, r1
   84596:	d908      	bls.n	845aa <__udivdi3+0x86>
   84598:	1909      	adds	r1, r1, r4
   8459a:	f103 36ff 	add.w	r6, r3, #4294967295
   8459e:	f080 80e9 	bcs.w	84774 <__udivdi3+0x250>
   845a2:	4288      	cmp	r0, r1
   845a4:	f240 80e6 	bls.w	84774 <__udivdi3+0x250>
   845a8:	3b02      	subs	r3, #2
   845aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   845ae:	2300      	movs	r3, #0
   845b0:	4610      	mov	r0, r2
   845b2:	4619      	mov	r1, r3
   845b4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   845b8:	4770      	bx	lr
   845ba:	428b      	cmp	r3, r1
   845bc:	d84c      	bhi.n	84658 <__udivdi3+0x134>
   845be:	fab3 f683 	clz	r6, r3
   845c2:	2e00      	cmp	r6, #0
   845c4:	d14f      	bne.n	84666 <__udivdi3+0x142>
   845c6:	428b      	cmp	r3, r1
   845c8:	d302      	bcc.n	845d0 <__udivdi3+0xac>
   845ca:	4282      	cmp	r2, r0
   845cc:	f200 80dd 	bhi.w	8478a <__udivdi3+0x266>
   845d0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   845d4:	2300      	movs	r3, #0
   845d6:	2201      	movs	r2, #1
   845d8:	4610      	mov	r0, r2
   845da:	4619      	mov	r1, r3
   845dc:	4770      	bx	lr
   845de:	b912      	cbnz	r2, 845e6 <__udivdi3+0xc2>
   845e0:	2401      	movs	r4, #1
   845e2:	fbb4 f4f2 	udiv	r4, r4, r2
   845e6:	fab4 f284 	clz	r2, r4
   845ea:	2a00      	cmp	r2, #0
   845ec:	f040 8082 	bne.w	846f4 <__udivdi3+0x1d0>
   845f0:	1b09      	subs	r1, r1, r4
   845f2:	0c26      	lsrs	r6, r4, #16
   845f4:	b2a7      	uxth	r7, r4
   845f6:	2301      	movs	r3, #1
   845f8:	fbb1 f0f6 	udiv	r0, r1, r6
   845fc:	fb06 1110 	mls	r1, r6, r0, r1
   84600:	fb07 f200 	mul.w	r2, r7, r0
   84604:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84608:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   8460c:	428a      	cmp	r2, r1
   8460e:	d907      	bls.n	84620 <__udivdi3+0xfc>
   84610:	1909      	adds	r1, r1, r4
   84612:	f100 3cff 	add.w	ip, r0, #4294967295
   84616:	d202      	bcs.n	8461e <__udivdi3+0xfa>
   84618:	428a      	cmp	r2, r1
   8461a:	f200 80c8 	bhi.w	847ae <__udivdi3+0x28a>
   8461e:	4660      	mov	r0, ip
   84620:	1a89      	subs	r1, r1, r2
   84622:	fbb1 f2f6 	udiv	r2, r1, r6
   84626:	fb06 1112 	mls	r1, r6, r2, r1
   8462a:	fb07 f702 	mul.w	r7, r7, r2
   8462e:	b2ad      	uxth	r5, r5
   84630:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   84634:	42af      	cmp	r7, r5
   84636:	d908      	bls.n	8464a <__udivdi3+0x126>
   84638:	192c      	adds	r4, r5, r4
   8463a:	f102 31ff 	add.w	r1, r2, #4294967295
   8463e:	f080 809b 	bcs.w	84778 <__udivdi3+0x254>
   84642:	42a7      	cmp	r7, r4
   84644:	f240 8098 	bls.w	84778 <__udivdi3+0x254>
   84648:	3a02      	subs	r2, #2
   8464a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   8464e:	4610      	mov	r0, r2
   84650:	4619      	mov	r1, r3
   84652:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84656:	4770      	bx	lr
   84658:	2300      	movs	r3, #0
   8465a:	461a      	mov	r2, r3
   8465c:	4610      	mov	r0, r2
   8465e:	4619      	mov	r1, r3
   84660:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84664:	4770      	bx	lr
   84666:	f1c6 0520 	rsb	r5, r6, #32
   8466a:	fa22 f705 	lsr.w	r7, r2, r5
   8466e:	fa03 f406 	lsl.w	r4, r3, r6
   84672:	fa21 f305 	lsr.w	r3, r1, r5
   84676:	fa01 fb06 	lsl.w	fp, r1, r6
   8467a:	fa20 f505 	lsr.w	r5, r0, r5
   8467e:	433c      	orrs	r4, r7
   84680:	ea4f 4814 	mov.w	r8, r4, lsr #16
   84684:	fbb3 fcf8 	udiv	ip, r3, r8
   84688:	fb08 331c 	mls	r3, r8, ip, r3
   8468c:	fa1f f984 	uxth.w	r9, r4
   84690:	fb09 fa0c 	mul.w	sl, r9, ip
   84694:	ea45 0b0b 	orr.w	fp, r5, fp
   84698:	ea4f 451b 	mov.w	r5, fp, lsr #16
   8469c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   846a0:	459a      	cmp	sl, r3
   846a2:	fa02 f206 	lsl.w	r2, r2, r6
   846a6:	d904      	bls.n	846b2 <__udivdi3+0x18e>
   846a8:	191b      	adds	r3, r3, r4
   846aa:	f10c 35ff 	add.w	r5, ip, #4294967295
   846ae:	d36f      	bcc.n	84790 <__udivdi3+0x26c>
   846b0:	46ac      	mov	ip, r5
   846b2:	ebca 0303 	rsb	r3, sl, r3
   846b6:	fbb3 f5f8 	udiv	r5, r3, r8
   846ba:	fb08 3315 	mls	r3, r8, r5, r3
   846be:	fb09 f905 	mul.w	r9, r9, r5
   846c2:	fa1f fb8b 	uxth.w	fp, fp
   846c6:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   846ca:	45b9      	cmp	r9, r7
   846cc:	d904      	bls.n	846d8 <__udivdi3+0x1b4>
   846ce:	193f      	adds	r7, r7, r4
   846d0:	f105 33ff 	add.w	r3, r5, #4294967295
   846d4:	d362      	bcc.n	8479c <__udivdi3+0x278>
   846d6:	461d      	mov	r5, r3
   846d8:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   846dc:	fbac 2302 	umull	r2, r3, ip, r2
   846e0:	ebc9 0707 	rsb	r7, r9, r7
   846e4:	429f      	cmp	r7, r3
   846e6:	f04f 0500 	mov.w	r5, #0
   846ea:	d34a      	bcc.n	84782 <__udivdi3+0x25e>
   846ec:	d046      	beq.n	8477c <__udivdi3+0x258>
   846ee:	4662      	mov	r2, ip
   846f0:	462b      	mov	r3, r5
   846f2:	e75d      	b.n	845b0 <__udivdi3+0x8c>
   846f4:	4094      	lsls	r4, r2
   846f6:	f1c2 0920 	rsb	r9, r2, #32
   846fa:	fa21 fc09 	lsr.w	ip, r1, r9
   846fe:	4091      	lsls	r1, r2
   84700:	fa20 f909 	lsr.w	r9, r0, r9
   84704:	0c26      	lsrs	r6, r4, #16
   84706:	fbbc f8f6 	udiv	r8, ip, r6
   8470a:	fb06 cc18 	mls	ip, r6, r8, ip
   8470e:	b2a7      	uxth	r7, r4
   84710:	fb07 f308 	mul.w	r3, r7, r8
   84714:	ea49 0901 	orr.w	r9, r9, r1
   84718:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8471c:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   84720:	4563      	cmp	r3, ip
   84722:	fa00 f502 	lsl.w	r5, r0, r2
   84726:	d909      	bls.n	8473c <__udivdi3+0x218>
   84728:	eb1c 0c04 	adds.w	ip, ip, r4
   8472c:	f108 32ff 	add.w	r2, r8, #4294967295
   84730:	d23b      	bcs.n	847aa <__udivdi3+0x286>
   84732:	4563      	cmp	r3, ip
   84734:	d939      	bls.n	847aa <__udivdi3+0x286>
   84736:	f1a8 0802 	sub.w	r8, r8, #2
   8473a:	44a4      	add	ip, r4
   8473c:	ebc3 0c0c 	rsb	ip, r3, ip
   84740:	fbbc f3f6 	udiv	r3, ip, r6
   84744:	fb06 c113 	mls	r1, r6, r3, ip
   84748:	fb07 f203 	mul.w	r2, r7, r3
   8474c:	fa1f f989 	uxth.w	r9, r9
   84750:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   84754:	428a      	cmp	r2, r1
   84756:	d907      	bls.n	84768 <__udivdi3+0x244>
   84758:	1909      	adds	r1, r1, r4
   8475a:	f103 30ff 	add.w	r0, r3, #4294967295
   8475e:	d222      	bcs.n	847a6 <__udivdi3+0x282>
   84760:	428a      	cmp	r2, r1
   84762:	d920      	bls.n	847a6 <__udivdi3+0x282>
   84764:	3b02      	subs	r3, #2
   84766:	4421      	add	r1, r4
   84768:	1a89      	subs	r1, r1, r2
   8476a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8476e:	e743      	b.n	845f8 <__udivdi3+0xd4>
   84770:	463a      	mov	r2, r7
   84772:	e705      	b.n	84580 <__udivdi3+0x5c>
   84774:	4633      	mov	r3, r6
   84776:	e718      	b.n	845aa <__udivdi3+0x86>
   84778:	460a      	mov	r2, r1
   8477a:	e766      	b.n	8464a <__udivdi3+0x126>
   8477c:	40b0      	lsls	r0, r6
   8477e:	4290      	cmp	r0, r2
   84780:	d2b5      	bcs.n	846ee <__udivdi3+0x1ca>
   84782:	f10c 32ff 	add.w	r2, ip, #4294967295
   84786:	2300      	movs	r3, #0
   84788:	e712      	b.n	845b0 <__udivdi3+0x8c>
   8478a:	4633      	mov	r3, r6
   8478c:	4632      	mov	r2, r6
   8478e:	e70f      	b.n	845b0 <__udivdi3+0x8c>
   84790:	459a      	cmp	sl, r3
   84792:	d98d      	bls.n	846b0 <__udivdi3+0x18c>
   84794:	f1ac 0c02 	sub.w	ip, ip, #2
   84798:	4423      	add	r3, r4
   8479a:	e78a      	b.n	846b2 <__udivdi3+0x18e>
   8479c:	45b9      	cmp	r9, r7
   8479e:	d99a      	bls.n	846d6 <__udivdi3+0x1b2>
   847a0:	3d02      	subs	r5, #2
   847a2:	4427      	add	r7, r4
   847a4:	e798      	b.n	846d8 <__udivdi3+0x1b4>
   847a6:	4603      	mov	r3, r0
   847a8:	e7de      	b.n	84768 <__udivdi3+0x244>
   847aa:	4690      	mov	r8, r2
   847ac:	e7c6      	b.n	8473c <__udivdi3+0x218>
   847ae:	3802      	subs	r0, #2
   847b0:	4421      	add	r1, r4
   847b2:	e735      	b.n	84620 <__udivdi3+0xfc>
   847b4:	72617453 	.word	0x72617453
   847b8:	00726174 	.word	0x00726174
   847bc:	61765f65 	.word	0x61765f65
   847c0:	3a65756c 	.word	0x3a65756c
   847c4:	0a642520 	.word	0x0a642520
   847c8:	00000000 	.word	0x00000000
   847cc:	79747564 	.word	0x79747564
   847d0:	203a3132 	.word	0x203a3132
   847d4:	000a7525 	.word	0x000a7525
   847d8:	79747564 	.word	0x79747564
   847dc:	203a3232 	.word	0x203a3232
   847e0:	000a7525 	.word	0x000a7525
   847e4:	00000001 	.word	0x00000001
   847e8:	00000002 	.word	0x00000002
   847ec:	00000004 	.word	0x00000004
   847f0:	00000008 	.word	0x00000008
   847f4:	00000010 	.word	0x00000010
   847f8:	00000020 	.word	0x00000020
   847fc:	00000040 	.word	0x00000040
   84800:	00000080 	.word	0x00000080
   84804:	00000100 	.word	0x00000100
   84808:	00000200 	.word	0x00000200
   8480c:	00000400 	.word	0x00000400
   84810:	00000043 	.word	0x00000043

00084814 <_global_impure_ptr>:
   84814:	20070150 33323130 37363534 42413938     P.. 0123456789AB
   84824:	46454443 00000000 33323130 37363534     CDEF....01234567
   84834:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84844:	0000296c                                l)..

00084848 <zeroes.6721>:
   84848:	30303030 30303030 30303030 30303030     0000000000000000

00084858 <blanks.6720>:
   84858:	20202020 20202020 20202020 20202020                     

00084868 <_init>:
   84868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8486a:	bf00      	nop
   8486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8486e:	bc08      	pop	{r3}
   84870:	469e      	mov	lr, r3
   84872:	4770      	bx	lr

00084874 <__init_array_start>:
   84874:	000828a9 	.word	0x000828a9

00084878 <__frame_dummy_init_array_entry>:
   84878:	00080119                                ....

0008487c <_fini>:
   8487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8487e:	bf00      	nop
   84880:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84882:	bc08      	pop	{r3}
   84884:	469e      	mov	lr, r3
   84886:	4770      	bx	lr

00084888 <__fini_array_start>:
   84888:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070148 	.word	0x20070148

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <kp>:
20070138:	00000000 3ff00000                       .......?

20070140 <e>:
20070140:	00000001                                ....

20070144 <speed>:
20070144:	000105dc                                         ..

20070146 <g_interrupt_enabled>:
20070146:	09000001                                         ..

20070148 <SystemCoreClock>:
20070148:	003d0900 00000000                       ..=.....

20070150 <impure_data>:
20070150:	00000000 2007043c 200704a4 2007050c     ....<.. ... ... 
	...
20070184:	00084810 00000000 00000000 00000000     .H..............
	...
200701f8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070208:	0005deec 0000000b 00000000 00000000     ................
	...

20070578 <_impure_ptr>:
20070578:	20070150                                P.. 

2007057c <lc_ctype_charset>:
2007057c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007059c <__mb_cur_max>:
2007059c:	00000001                                ....

200705a0 <__malloc_av_>:
	...
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 

200709a8 <__malloc_trim_threshold>:
200709a8:	00020000                                ....

200709ac <__malloc_sbrk_base>:
200709ac:	ffffffff                                ....

200709b0 <__wctomb>:
200709b0:	00083fb9                                .?..
