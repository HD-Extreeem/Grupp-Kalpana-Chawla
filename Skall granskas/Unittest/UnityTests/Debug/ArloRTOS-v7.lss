
ArloRTOS-v7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000555c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008555c  0008555c  0000d55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00085564  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002f4  200709a8  00085f10  000109a8  2**3
                  ALLOC
  4 .stack        00002004  20070c9c  00086204  000109a8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015f64  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003626  00000000  00000000  0002698c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008284  00000000  00000000  00029fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ee8  00000000  00000000  00032236  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d80  00000000  00000000  0003311e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ca18  00000000  00000000  00033e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000169d8  00000000  00000000  000508b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000725a6  00000000  00000000  0006728e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002c74  00000000  00000000  000d9834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072ca0 	.word	0x20072ca0
   80004:	00081dc1 	.word	0x00081dc1
   80008:	00081dbd 	.word	0x00081dbd
   8000c:	00081dbd 	.word	0x00081dbd
   80010:	00081dbd 	.word	0x00081dbd
   80014:	00081dbd 	.word	0x00081dbd
   80018:	00081dbd 	.word	0x00081dbd
	...
   8002c:	000815e1 	.word	0x000815e1
   80030:	00081dbd 	.word	0x00081dbd
   80034:	00000000 	.word	0x00000000
   80038:	00081619 	.word	0x00081619
   8003c:	00081655 	.word	0x00081655
   80040:	00081dbd 	.word	0x00081dbd
   80044:	00081dbd 	.word	0x00081dbd
   80048:	00081dbd 	.word	0x00081dbd
   8004c:	00081dbd 	.word	0x00081dbd
   80050:	00081dbd 	.word	0x00081dbd
   80054:	00081dbd 	.word	0x00081dbd
   80058:	00081dbd 	.word	0x00081dbd
   8005c:	00081dbd 	.word	0x00081dbd
   80060:	00081dbd 	.word	0x00081dbd
   80064:	00081dbd 	.word	0x00081dbd
   80068:	00000000 	.word	0x00000000
   8006c:	00081c2d 	.word	0x00081c2d
   80070:	00081c41 	.word	0x00081c41
   80074:	00081c55 	.word	0x00081c55
   80078:	00081c69 	.word	0x00081c69
	...
   80084:	00081dbd 	.word	0x00081dbd
   80088:	00081dbd 	.word	0x00081dbd
   8008c:	00081dbd 	.word	0x00081dbd
   80090:	00081dbd 	.word	0x00081dbd
   80094:	00081dbd 	.word	0x00081dbd
   80098:	00081dbd 	.word	0x00081dbd
   8009c:	00081dbd 	.word	0x00081dbd
   800a0:	00081dbd 	.word	0x00081dbd
   800a4:	00000000 	.word	0x00000000
   800a8:	00081dbd 	.word	0x00081dbd
   800ac:	00081dbd 	.word	0x00081dbd
   800b0:	00081dbd 	.word	0x00081dbd
   800b4:	00081dbd 	.word	0x00081dbd
   800b8:	00081dbd 	.word	0x00081dbd
   800bc:	00081dbd 	.word	0x00081dbd
   800c0:	00081dbd 	.word	0x00081dbd
   800c4:	00081dbd 	.word	0x00081dbd
   800c8:	00081dbd 	.word	0x00081dbd
   800cc:	00081dbd 	.word	0x00081dbd
   800d0:	00081dbd 	.word	0x00081dbd
   800d4:	00081dbd 	.word	0x00081dbd
   800d8:	00081dbd 	.word	0x00081dbd
   800dc:	00081dbd 	.word	0x00081dbd
   800e0:	00081dbd 	.word	0x00081dbd
   800e4:	00081dbd 	.word	0x00081dbd
   800e8:	00081dbd 	.word	0x00081dbd
   800ec:	00081dbd 	.word	0x00081dbd
   800f0:	00081dbd 	.word	0x00081dbd

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a8 	.word	0x200709a8
   80110:	00000000 	.word	0x00000000
   80114:	00085564 	.word	0x00085564

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00085564 	.word	0x00085564
   8013c:	200709ac 	.word	0x200709ac
   80140:	00085564 	.word	0x00085564
   80144:	00000000 	.word	0x00000000

00080148 <pwm_enable>:
#include "test_pwm.h"

/* This method is used to check if pwm can be enabled by checking set bit
*
*/
void pwm_enable(void){
   80148:	b510      	push	{r4, lr}
   8014a:	b082      	sub	sp, #8
	//Assert that pwm channel 4 & 5 is activated after PwmInit() in main.c
	TEST_ASSERT_EQUAL(((1<<PWM_CHANNEL_5)|(1<<PWM_CHANNEL_4)),pwm_channel_get_status(PWM));
   8014c:	4806      	ldr	r0, [pc, #24]	; (80168 <pwm_enable+0x20>)
   8014e:	4b07      	ldr	r3, [pc, #28]	; (8016c <pwm_enable+0x24>)
   80150:	4798      	blx	r3
   80152:	4601      	mov	r1, r0
   80154:	2394      	movs	r3, #148	; 0x94
   80156:	9300      	str	r3, [sp, #0]
   80158:	2030      	movs	r0, #48	; 0x30
   8015a:	2200      	movs	r2, #0
   8015c:	2312      	movs	r3, #18
   8015e:	4c04      	ldr	r4, [pc, #16]	; (80170 <pwm_enable+0x28>)
   80160:	47a0      	blx	r4
}
   80162:	b002      	add	sp, #8
   80164:	bd10      	pop	{r4, pc}
   80166:	bf00      	nop
   80168:	40094000 	.word	0x40094000
   8016c:	0008102d 	.word	0x0008102d
   80170:	00080b09 	.word	0x00080b09

00080174 <pwm_disable>:
/* This method used to check if pwm channel can be disabled
*
*/
void pwm_disable(void){
   80174:	b530      	push	{r4, r5, lr}
   80176:	b083      	sub	sp, #12
	//Disables the channels and check if 
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   80178:	4c0b      	ldr	r4, [pc, #44]	; (801a8 <pwm_disable+0x34>)
   8017a:	4620      	mov	r0, r4
   8017c:	2104      	movs	r1, #4
   8017e:	4d0b      	ldr	r5, [pc, #44]	; (801ac <pwm_disable+0x38>)
   80180:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   80182:	4620      	mov	r0, r4
   80184:	2105      	movs	r1, #5
   80186:	47a8      	blx	r5
	//delay 1s to let pwm disable channels
	delay_s(1);
   80188:	4809      	ldr	r0, [pc, #36]	; (801b0 <pwm_disable+0x3c>)
   8018a:	4b0a      	ldr	r3, [pc, #40]	; (801b4 <pwm_disable+0x40>)
   8018c:	4798      	blx	r3
	//Assert that pwm is disabled
	TEST_ASSERT_EQUAL(0,pwm_channel_get_status(PWM));
   8018e:	4620      	mov	r0, r4
   80190:	4b09      	ldr	r3, [pc, #36]	; (801b8 <pwm_disable+0x44>)
   80192:	4798      	blx	r3
   80194:	4601      	mov	r1, r0
   80196:	2394      	movs	r3, #148	; 0x94
   80198:	9300      	str	r3, [sp, #0]
   8019a:	2000      	movs	r0, #0
   8019c:	4602      	mov	r2, r0
   8019e:	231e      	movs	r3, #30
   801a0:	4c06      	ldr	r4, [pc, #24]	; (801bc <pwm_disable+0x48>)
   801a2:	47a0      	blx	r4
}
   801a4:	b003      	add	sp, #12
   801a6:	bd30      	pop	{r4, r5, pc}
   801a8:	40094000 	.word	0x40094000
   801ac:	00081021 	.word	0x00081021
   801b0:	005b8d80 	.word	0x005b8d80
   801b4:	20070001 	.word	0x20070001
   801b8:	0008102d 	.word	0x0008102d
   801bc:	00080b09 	.word	0x00080b09

000801c0 <pwm_duty>:

/* This method checks if duty can be set from methods for wheels
*
*/
void pwm_duty(void){
   801c0:	b530      	push	{r4, r5, lr}
   801c2:	b083      	sub	sp, #12
	//Asserts that duty is set when updating duty cycle, should return 0 if set
	TEST_ASSERT_EQUAL(0,rightWheel(1700));
   801c4:	f240 60a4 	movw	r0, #1700	; 0x6a4
   801c8:	4b0a      	ldr	r3, [pc, #40]	; (801f4 <pwm_duty+0x34>)
   801ca:	4798      	blx	r3
   801cc:	4601      	mov	r1, r0
   801ce:	2594      	movs	r5, #148	; 0x94
   801d0:	9500      	str	r5, [sp, #0]
   801d2:	2000      	movs	r0, #0
   801d4:	4602      	mov	r2, r0
   801d6:	2326      	movs	r3, #38	; 0x26
   801d8:	4c07      	ldr	r4, [pc, #28]	; (801f8 <pwm_duty+0x38>)
   801da:	47a0      	blx	r4
	TEST_ASSERT_EQUAL(0,leftWheel(1700));
   801dc:	f240 60a4 	movw	r0, #1700	; 0x6a4
   801e0:	4b06      	ldr	r3, [pc, #24]	; (801fc <pwm_duty+0x3c>)
   801e2:	4798      	blx	r3
   801e4:	4601      	mov	r1, r0
   801e6:	9500      	str	r5, [sp, #0]
   801e8:	2000      	movs	r0, #0
   801ea:	4602      	mov	r2, r0
   801ec:	2327      	movs	r3, #39	; 0x27
   801ee:	47a0      	blx	r4
}
   801f0:	b003      	add	sp, #12
   801f2:	bd30      	pop	{r4, r5, pc}
   801f4:	00081321 	.word	0x00081321
   801f8:	00080b09 	.word	0x00080b09
   801fc:	000812f1 	.word	0x000812f1

00080200 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   80200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80204:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   80206:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   8020a:	d132      	bne.n	80272 <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   8020c:	4b5f      	ldr	r3, [pc, #380]	; (8038c <UnityPrintNumber+0x18c>)
   8020e:	6818      	ldr	r0, [r3, #0]
   80210:	6882      	ldr	r2, [r0, #8]
   80212:	6893      	ldr	r3, [r2, #8]
   80214:	3b01      	subs	r3, #1
   80216:	6093      	str	r3, [r2, #8]
   80218:	2b00      	cmp	r3, #0
   8021a:	da1d      	bge.n	80258 <UnityPrintNumber+0x58>
   8021c:	6882      	ldr	r2, [r0, #8]
   8021e:	6891      	ldr	r1, [r2, #8]
   80220:	6993      	ldr	r3, [r2, #24]
   80222:	4299      	cmp	r1, r3
   80224:	db12      	blt.n	8024c <UnityPrintNumber+0x4c>
   80226:	6813      	ldr	r3, [r2, #0]
   80228:	222d      	movs	r2, #45	; 0x2d
   8022a:	701a      	strb	r2, [r3, #0]
   8022c:	4b57      	ldr	r3, [pc, #348]	; (8038c <UnityPrintNumber+0x18c>)
   8022e:	6818      	ldr	r0, [r3, #0]
   80230:	6882      	ldr	r2, [r0, #8]
   80232:	6813      	ldr	r3, [r2, #0]
   80234:	7819      	ldrb	r1, [r3, #0]
   80236:	290a      	cmp	r1, #10
   80238:	d002      	beq.n	80240 <UnityPrintNumber+0x40>
   8023a:	3301      	adds	r3, #1
   8023c:	6013      	str	r3, [r2, #0]
   8023e:	e04f      	b.n	802e0 <UnityPrintNumber+0xe0>
   80240:	210a      	movs	r1, #10
   80242:	4b53      	ldr	r3, [pc, #332]	; (80390 <UnityPrintNumber+0x190>)
   80244:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80246:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   8024a:	e049      	b.n	802e0 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   8024c:	212d      	movs	r1, #45	; 0x2d
   8024e:	4b50      	ldr	r3, [pc, #320]	; (80390 <UnityPrintNumber+0x190>)
   80250:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80252:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80256:	e043      	b.n	802e0 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80258:	6883      	ldr	r3, [r0, #8]
   8025a:	681b      	ldr	r3, [r3, #0]
   8025c:	222d      	movs	r2, #45	; 0x2d
   8025e:	701a      	strb	r2, [r3, #0]
   80260:	4b4a      	ldr	r3, [pc, #296]	; (8038c <UnityPrintNumber+0x18c>)
   80262:	681b      	ldr	r3, [r3, #0]
   80264:	689b      	ldr	r3, [r3, #8]
   80266:	681a      	ldr	r2, [r3, #0]
   80268:	3201      	adds	r2, #1
   8026a:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8026c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80270:	e036      	b.n	802e0 <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   80272:	2800      	cmp	r0, #0
   80274:	da34      	bge.n	802e0 <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   80276:	4b45      	ldr	r3, [pc, #276]	; (8038c <UnityPrintNumber+0x18c>)
   80278:	6818      	ldr	r0, [r3, #0]
   8027a:	6882      	ldr	r2, [r0, #8]
   8027c:	6893      	ldr	r3, [r2, #8]
   8027e:	3b01      	subs	r3, #1
   80280:	6093      	str	r3, [r2, #8]
   80282:	2b00      	cmp	r3, #0
   80284:	da19      	bge.n	802ba <UnityPrintNumber+0xba>
   80286:	6882      	ldr	r2, [r0, #8]
   80288:	6891      	ldr	r1, [r2, #8]
   8028a:	6993      	ldr	r3, [r2, #24]
   8028c:	4299      	cmp	r1, r3
   8028e:	db10      	blt.n	802b2 <UnityPrintNumber+0xb2>
   80290:	6813      	ldr	r3, [r2, #0]
   80292:	222d      	movs	r2, #45	; 0x2d
   80294:	701a      	strb	r2, [r3, #0]
   80296:	4b3d      	ldr	r3, [pc, #244]	; (8038c <UnityPrintNumber+0x18c>)
   80298:	6818      	ldr	r0, [r3, #0]
   8029a:	6882      	ldr	r2, [r0, #8]
   8029c:	6813      	ldr	r3, [r2, #0]
   8029e:	7819      	ldrb	r1, [r3, #0]
   802a0:	290a      	cmp	r1, #10
   802a2:	d002      	beq.n	802aa <UnityPrintNumber+0xaa>
   802a4:	3301      	adds	r3, #1
   802a6:	6013      	str	r3, [r2, #0]
   802a8:	e011      	b.n	802ce <UnityPrintNumber+0xce>
   802aa:	210a      	movs	r1, #10
   802ac:	4b38      	ldr	r3, [pc, #224]	; (80390 <UnityPrintNumber+0x190>)
   802ae:	4798      	blx	r3
   802b0:	e00d      	b.n	802ce <UnityPrintNumber+0xce>
   802b2:	212d      	movs	r1, #45	; 0x2d
   802b4:	4b36      	ldr	r3, [pc, #216]	; (80390 <UnityPrintNumber+0x190>)
   802b6:	4798      	blx	r3
   802b8:	e009      	b.n	802ce <UnityPrintNumber+0xce>
   802ba:	6883      	ldr	r3, [r0, #8]
   802bc:	681b      	ldr	r3, [r3, #0]
   802be:	222d      	movs	r2, #45	; 0x2d
   802c0:	701a      	strb	r2, [r3, #0]
   802c2:	4b32      	ldr	r3, [pc, #200]	; (8038c <UnityPrintNumber+0x18c>)
   802c4:	681b      	ldr	r3, [r3, #0]
   802c6:	689b      	ldr	r3, [r3, #8]
   802c8:	681a      	ldr	r2, [r3, #0]
   802ca:	3201      	adds	r2, #1
   802cc:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   802ce:	426d      	negs	r5, r5
   802d0:	e006      	b.n	802e0 <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   802d2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   802d6:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   802d8:	429c      	cmp	r4, r3
   802da:	da06      	bge.n	802ea <UnityPrintNumber+0xea>
            divisor = next_divisor;
   802dc:	461c      	mov	r4, r3
   802de:	e000      	b.n	802e2 <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   802e0:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   802e2:	fbb5 f3f4 	udiv	r3, r5, r4
   802e6:	2b09      	cmp	r3, #9
   802e8:	d8f3      	bhi.n	802d2 <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   802ea:	4e28      	ldr	r6, [pc, #160]	; (8038c <UnityPrintNumber+0x18c>)
   802ec:	4f29      	ldr	r7, [pc, #164]	; (80394 <UnityPrintNumber+0x194>)
   802ee:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80390 <UnityPrintNumber+0x190>
   802f2:	6830      	ldr	r0, [r6, #0]
   802f4:	6882      	ldr	r2, [r0, #8]
   802f6:	6893      	ldr	r3, [r2, #8]
   802f8:	3b01      	subs	r3, #1
   802fa:	6093      	str	r3, [r2, #8]
   802fc:	2b00      	cmp	r3, #0
   802fe:	da29      	bge.n	80354 <UnityPrintNumber+0x154>
   80300:	6882      	ldr	r2, [r0, #8]
   80302:	6891      	ldr	r1, [r2, #8]
   80304:	6993      	ldr	r3, [r2, #24]
   80306:	4299      	cmp	r1, r3
   80308:	db17      	blt.n	8033a <UnityPrintNumber+0x13a>
   8030a:	6811      	ldr	r1, [r2, #0]
   8030c:	fbb5 f3f4 	udiv	r3, r5, r4
   80310:	fba7 0203 	umull	r0, r2, r7, r3
   80314:	08d2      	lsrs	r2, r2, #3
   80316:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8031a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8031e:	3330      	adds	r3, #48	; 0x30
   80320:	700b      	strb	r3, [r1, #0]
   80322:	6830      	ldr	r0, [r6, #0]
   80324:	6882      	ldr	r2, [r0, #8]
   80326:	6813      	ldr	r3, [r2, #0]
   80328:	7819      	ldrb	r1, [r3, #0]
   8032a:	290a      	cmp	r1, #10
   8032c:	d002      	beq.n	80334 <UnityPrintNumber+0x134>
   8032e:	3301      	adds	r3, #1
   80330:	6013      	str	r3, [r2, #0]
   80332:	e021      	b.n	80378 <UnityPrintNumber+0x178>
   80334:	210a      	movs	r1, #10
   80336:	47c0      	blx	r8
   80338:	e01e      	b.n	80378 <UnityPrintNumber+0x178>
   8033a:	fbb5 f3f4 	udiv	r3, r5, r4
   8033e:	fba7 e103 	umull	lr, r1, r7, r3
   80342:	08c9      	lsrs	r1, r1, #3
   80344:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80348:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   8034c:	3130      	adds	r1, #48	; 0x30
   8034e:	b2c9      	uxtb	r1, r1
   80350:	47c0      	blx	r8
   80352:	e011      	b.n	80378 <UnityPrintNumber+0x178>
   80354:	6883      	ldr	r3, [r0, #8]
   80356:	6819      	ldr	r1, [r3, #0]
   80358:	fbb5 f3f4 	udiv	r3, r5, r4
   8035c:	fba7 0203 	umull	r0, r2, r7, r3
   80360:	08d2      	lsrs	r2, r2, #3
   80362:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80366:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8036a:	3330      	adds	r3, #48	; 0x30
   8036c:	700b      	strb	r3, [r1, #0]
   8036e:	6833      	ldr	r3, [r6, #0]
   80370:	689b      	ldr	r3, [r3, #8]
   80372:	681a      	ldr	r2, [r3, #0]
   80374:	3201      	adds	r2, #1
   80376:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   80378:	4b07      	ldr	r3, [pc, #28]	; (80398 <UnityPrintNumber+0x198>)
   8037a:	fb83 2304 	smull	r2, r3, r3, r4
   8037e:	17e4      	asrs	r4, r4, #31
   80380:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   80384:	2c00      	cmp	r4, #0
   80386:	dcb4      	bgt.n	802f2 <UnityPrintNumber+0xf2>
}
   80388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8038c:	20070568 	.word	0x20070568
   80390:	000834d1 	.word	0x000834d1
   80394:	cccccccd 	.word	0xcccccccd
   80398:	66666667 	.word	0x66666667

0008039c <UnityPrintNumberUnsigned>:

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumberUnsigned(const _U_UINT number)
{
   8039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803a0:	4607      	mov	r7, r0
    _U_UINT divisor = 1;
   803a2:	2401      	movs	r4, #1
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   803a4:	e005      	b.n	803b2 <UnityPrintNumberUnsigned+0x16>
    {
        next_divisor = divisor * 10;
   803a6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   803aa:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   803ac:	429c      	cmp	r4, r3
   803ae:	d204      	bcs.n	803ba <UnityPrintNumberUnsigned+0x1e>
            divisor = next_divisor;
   803b0:	461c      	mov	r4, r3
{
    _U_UINT divisor = 1;
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   803b2:	fbb7 f3f4 	udiv	r3, r7, r4
   803b6:	2b09      	cmp	r3, #9
   803b8:	d8f5      	bhi.n	803a6 <UnityPrintNumberUnsigned+0xa>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   803ba:	4e27      	ldr	r6, [pc, #156]	; (80458 <UnityPrintNumberUnsigned+0xbc>)
   803bc:	4d27      	ldr	r5, [pc, #156]	; (8045c <UnityPrintNumberUnsigned+0xc0>)
   803be:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80460 <UnityPrintNumberUnsigned+0xc4>
   803c2:	6833      	ldr	r3, [r6, #0]
   803c4:	6899      	ldr	r1, [r3, #8]
   803c6:	688a      	ldr	r2, [r1, #8]
   803c8:	3a01      	subs	r2, #1
   803ca:	608a      	str	r2, [r1, #8]
   803cc:	2a00      	cmp	r2, #0
   803ce:	da2a      	bge.n	80426 <UnityPrintNumberUnsigned+0x8a>
   803d0:	689a      	ldr	r2, [r3, #8]
   803d2:	6890      	ldr	r0, [r2, #8]
   803d4:	6991      	ldr	r1, [r2, #24]
   803d6:	4288      	cmp	r0, r1
   803d8:	db17      	blt.n	8040a <UnityPrintNumberUnsigned+0x6e>
   803da:	6811      	ldr	r1, [r2, #0]
   803dc:	fbb7 f3f4 	udiv	r3, r7, r4
   803e0:	fba5 0203 	umull	r0, r2, r5, r3
   803e4:	08d2      	lsrs	r2, r2, #3
   803e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   803ea:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   803ee:	3330      	adds	r3, #48	; 0x30
   803f0:	700b      	strb	r3, [r1, #0]
   803f2:	6830      	ldr	r0, [r6, #0]
   803f4:	6882      	ldr	r2, [r0, #8]
   803f6:	6813      	ldr	r3, [r2, #0]
   803f8:	7819      	ldrb	r1, [r3, #0]
   803fa:	290a      	cmp	r1, #10
   803fc:	d002      	beq.n	80404 <UnityPrintNumberUnsigned+0x68>
   803fe:	3301      	adds	r3, #1
   80400:	6013      	str	r3, [r2, #0]
   80402:	e022      	b.n	8044a <UnityPrintNumberUnsigned+0xae>
   80404:	210a      	movs	r1, #10
   80406:	47c0      	blx	r8
   80408:	e01f      	b.n	8044a <UnityPrintNumberUnsigned+0xae>
   8040a:	fbb7 f1f4 	udiv	r1, r7, r4
   8040e:	fba5 e001 	umull	lr, r0, r5, r1
   80412:	08c0      	lsrs	r0, r0, #3
   80414:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80418:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
   8041c:	3130      	adds	r1, #48	; 0x30
   8041e:	4618      	mov	r0, r3
   80420:	b2c9      	uxtb	r1, r1
   80422:	47c0      	blx	r8
   80424:	e011      	b.n	8044a <UnityPrintNumberUnsigned+0xae>
   80426:	689b      	ldr	r3, [r3, #8]
   80428:	6819      	ldr	r1, [r3, #0]
   8042a:	fbb7 f3f4 	udiv	r3, r7, r4
   8042e:	fba5 0203 	umull	r0, r2, r5, r3
   80432:	08d2      	lsrs	r2, r2, #3
   80434:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80438:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8043c:	3330      	adds	r3, #48	; 0x30
   8043e:	700b      	strb	r3, [r1, #0]
   80440:	6833      	ldr	r3, [r6, #0]
   80442:	689b      	ldr	r3, [r3, #8]
   80444:	681a      	ldr	r2, [r3, #0]
   80446:	3201      	adds	r2, #1
   80448:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   8044a:	fba5 3404 	umull	r3, r4, r5, r4
    }
    while (divisor > 0);
   8044e:	08e4      	lsrs	r4, r4, #3
   80450:	d1b7      	bne.n	803c2 <UnityPrintNumberUnsigned+0x26>
}
   80452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80456:	bf00      	nop
   80458:	20070568 	.word	0x20070568
   8045c:	cccccccd 	.word	0xcccccccd
   80460:	000834d1 	.word	0x000834d1

00080464 <UnityPrintNumberHex>:

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   80464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80468:	4606      	mov	r6, r0
   8046a:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   8046c:	4b5e      	ldr	r3, [pc, #376]	; (805e8 <UnityPrintNumberHex+0x184>)
   8046e:	6818      	ldr	r0, [r3, #0]
   80470:	6882      	ldr	r2, [r0, #8]
   80472:	6893      	ldr	r3, [r2, #8]
   80474:	3b01      	subs	r3, #1
   80476:	6093      	str	r3, [r2, #8]
   80478:	2b00      	cmp	r3, #0
   8047a:	da19      	bge.n	804b0 <UnityPrintNumberHex+0x4c>
   8047c:	6882      	ldr	r2, [r0, #8]
   8047e:	6891      	ldr	r1, [r2, #8]
   80480:	6993      	ldr	r3, [r2, #24]
   80482:	4299      	cmp	r1, r3
   80484:	db10      	blt.n	804a8 <UnityPrintNumberHex+0x44>
   80486:	6813      	ldr	r3, [r2, #0]
   80488:	2230      	movs	r2, #48	; 0x30
   8048a:	701a      	strb	r2, [r3, #0]
   8048c:	4b56      	ldr	r3, [pc, #344]	; (805e8 <UnityPrintNumberHex+0x184>)
   8048e:	6818      	ldr	r0, [r3, #0]
   80490:	6882      	ldr	r2, [r0, #8]
   80492:	6813      	ldr	r3, [r2, #0]
   80494:	7819      	ldrb	r1, [r3, #0]
   80496:	290a      	cmp	r1, #10
   80498:	d002      	beq.n	804a0 <UnityPrintNumberHex+0x3c>
   8049a:	3301      	adds	r3, #1
   8049c:	6013      	str	r3, [r2, #0]
   8049e:	e011      	b.n	804c4 <UnityPrintNumberHex+0x60>
   804a0:	210a      	movs	r1, #10
   804a2:	4b52      	ldr	r3, [pc, #328]	; (805ec <UnityPrintNumberHex+0x188>)
   804a4:	4798      	blx	r3
   804a6:	e00d      	b.n	804c4 <UnityPrintNumberHex+0x60>
   804a8:	2130      	movs	r1, #48	; 0x30
   804aa:	4b50      	ldr	r3, [pc, #320]	; (805ec <UnityPrintNumberHex+0x188>)
   804ac:	4798      	blx	r3
   804ae:	e009      	b.n	804c4 <UnityPrintNumberHex+0x60>
   804b0:	6883      	ldr	r3, [r0, #8]
   804b2:	681b      	ldr	r3, [r3, #0]
   804b4:	2230      	movs	r2, #48	; 0x30
   804b6:	701a      	strb	r2, [r3, #0]
   804b8:	4b4b      	ldr	r3, [pc, #300]	; (805e8 <UnityPrintNumberHex+0x184>)
   804ba:	681b      	ldr	r3, [r3, #0]
   804bc:	689b      	ldr	r3, [r3, #8]
   804be:	681a      	ldr	r2, [r3, #0]
   804c0:	3201      	adds	r2, #1
   804c2:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   804c4:	4b48      	ldr	r3, [pc, #288]	; (805e8 <UnityPrintNumberHex+0x184>)
   804c6:	6818      	ldr	r0, [r3, #0]
   804c8:	6882      	ldr	r2, [r0, #8]
   804ca:	6893      	ldr	r3, [r2, #8]
   804cc:	3b01      	subs	r3, #1
   804ce:	6093      	str	r3, [r2, #8]
   804d0:	2b00      	cmp	r3, #0
   804d2:	da1b      	bge.n	8050c <UnityPrintNumberHex+0xa8>
   804d4:	6882      	ldr	r2, [r0, #8]
   804d6:	6891      	ldr	r1, [r2, #8]
   804d8:	6993      	ldr	r3, [r2, #24]
   804da:	4299      	cmp	r1, r3
   804dc:	db10      	blt.n	80500 <UnityPrintNumberHex+0x9c>
   804de:	6813      	ldr	r3, [r2, #0]
   804e0:	2278      	movs	r2, #120	; 0x78
   804e2:	701a      	strb	r2, [r3, #0]
   804e4:	4b40      	ldr	r3, [pc, #256]	; (805e8 <UnityPrintNumberHex+0x184>)
   804e6:	6818      	ldr	r0, [r3, #0]
   804e8:	6882      	ldr	r2, [r0, #8]
   804ea:	6813      	ldr	r3, [r2, #0]
   804ec:	7819      	ldrb	r1, [r3, #0]
   804ee:	290a      	cmp	r1, #10
   804f0:	d002      	beq.n	804f8 <UnityPrintNumberHex+0x94>
   804f2:	3301      	adds	r3, #1
   804f4:	6013      	str	r3, [r2, #0]
   804f6:	e006      	b.n	80506 <UnityPrintNumberHex+0xa2>
   804f8:	210a      	movs	r1, #10
   804fa:	4b3c      	ldr	r3, [pc, #240]	; (805ec <UnityPrintNumberHex+0x188>)
   804fc:	4798      	blx	r3
   804fe:	e002      	b.n	80506 <UnityPrintNumberHex+0xa2>
   80500:	2178      	movs	r1, #120	; 0x78
   80502:	4b3a      	ldr	r3, [pc, #232]	; (805ec <UnityPrintNumberHex+0x188>)
   80504:	4798      	blx	r3

    while (nibbles > 0)
   80506:	b964      	cbnz	r4, 80522 <UnityPrintNumberHex+0xbe>
   80508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   8050c:	6883      	ldr	r3, [r0, #8]
   8050e:	681b      	ldr	r3, [r3, #0]
   80510:	2278      	movs	r2, #120	; 0x78
   80512:	701a      	strb	r2, [r3, #0]
   80514:	4b34      	ldr	r3, [pc, #208]	; (805e8 <UnityPrintNumberHex+0x184>)
   80516:	681b      	ldr	r3, [r3, #0]
   80518:	689b      	ldr	r3, [r3, #8]
   8051a:	681a      	ldr	r2, [r3, #0]
   8051c:	3201      	adds	r2, #1
   8051e:	601a      	str	r2, [r3, #0]
   80520:	e7f1      	b.n	80506 <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80522:	4d31      	ldr	r5, [pc, #196]	; (805e8 <UnityPrintNumberHex+0x184>)
   80524:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 805ec <UnityPrintNumberHex+0x188>
   80528:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   8052c:	3c01      	subs	r4, #1
   8052e:	b2e4      	uxtb	r4, r4
   80530:	00a3      	lsls	r3, r4, #2
   80532:	fa26 f303 	lsr.w	r3, r6, r3
   80536:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   8053a:	2b09      	cmp	r3, #9
   8053c:	d828      	bhi.n	80590 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   8053e:	6828      	ldr	r0, [r5, #0]
   80540:	6881      	ldr	r1, [r0, #8]
   80542:	688a      	ldr	r2, [r1, #8]
   80544:	3a01      	subs	r2, #1
   80546:	608a      	str	r2, [r1, #8]
   80548:	2a00      	cmp	r2, #0
   8054a:	da17      	bge.n	8057c <UnityPrintNumberHex+0x118>
   8054c:	6882      	ldr	r2, [r0, #8]
   8054e:	6891      	ldr	r1, [r2, #8]
   80550:	6997      	ldr	r7, [r2, #24]
   80552:	42b9      	cmp	r1, r7
   80554:	db0e      	blt.n	80574 <UnityPrintNumberHex+0x110>
   80556:	6812      	ldr	r2, [r2, #0]
   80558:	3330      	adds	r3, #48	; 0x30
   8055a:	7013      	strb	r3, [r2, #0]
   8055c:	6828      	ldr	r0, [r5, #0]
   8055e:	6882      	ldr	r2, [r0, #8]
   80560:	6813      	ldr	r3, [r2, #0]
   80562:	7819      	ldrb	r1, [r3, #0]
   80564:	290a      	cmp	r1, #10
   80566:	d002      	beq.n	8056e <UnityPrintNumberHex+0x10a>
   80568:	3301      	adds	r3, #1
   8056a:	6013      	str	r3, [r2, #0]
   8056c:	e038      	b.n	805e0 <UnityPrintNumberHex+0x17c>
   8056e:	4641      	mov	r1, r8
   80570:	47c8      	blx	r9
   80572:	e035      	b.n	805e0 <UnityPrintNumberHex+0x17c>
   80574:	f103 0130 	add.w	r1, r3, #48	; 0x30
   80578:	47c8      	blx	r9
   8057a:	e031      	b.n	805e0 <UnityPrintNumberHex+0x17c>
   8057c:	6882      	ldr	r2, [r0, #8]
   8057e:	6812      	ldr	r2, [r2, #0]
   80580:	3330      	adds	r3, #48	; 0x30
   80582:	7013      	strb	r3, [r2, #0]
   80584:	682b      	ldr	r3, [r5, #0]
   80586:	689b      	ldr	r3, [r3, #8]
   80588:	681a      	ldr	r2, [r3, #0]
   8058a:	3201      	adds	r2, #1
   8058c:	601a      	str	r2, [r3, #0]
   8058e:	e027      	b.n	805e0 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80590:	6828      	ldr	r0, [r5, #0]
   80592:	6881      	ldr	r1, [r0, #8]
   80594:	688a      	ldr	r2, [r1, #8]
   80596:	3a01      	subs	r2, #1
   80598:	608a      	str	r2, [r1, #8]
   8059a:	2a00      	cmp	r2, #0
   8059c:	da17      	bge.n	805ce <UnityPrintNumberHex+0x16a>
   8059e:	6882      	ldr	r2, [r0, #8]
   805a0:	6891      	ldr	r1, [r2, #8]
   805a2:	6997      	ldr	r7, [r2, #24]
   805a4:	42b9      	cmp	r1, r7
   805a6:	db0e      	blt.n	805c6 <UnityPrintNumberHex+0x162>
   805a8:	6812      	ldr	r2, [r2, #0]
   805aa:	3337      	adds	r3, #55	; 0x37
   805ac:	7013      	strb	r3, [r2, #0]
   805ae:	6828      	ldr	r0, [r5, #0]
   805b0:	6882      	ldr	r2, [r0, #8]
   805b2:	6813      	ldr	r3, [r2, #0]
   805b4:	7819      	ldrb	r1, [r3, #0]
   805b6:	290a      	cmp	r1, #10
   805b8:	d002      	beq.n	805c0 <UnityPrintNumberHex+0x15c>
   805ba:	3301      	adds	r3, #1
   805bc:	6013      	str	r3, [r2, #0]
   805be:	e00f      	b.n	805e0 <UnityPrintNumberHex+0x17c>
   805c0:	4641      	mov	r1, r8
   805c2:	47c8      	blx	r9
   805c4:	e00c      	b.n	805e0 <UnityPrintNumberHex+0x17c>
   805c6:	f103 0137 	add.w	r1, r3, #55	; 0x37
   805ca:	47c8      	blx	r9
   805cc:	e008      	b.n	805e0 <UnityPrintNumberHex+0x17c>
   805ce:	6882      	ldr	r2, [r0, #8]
   805d0:	6812      	ldr	r2, [r2, #0]
   805d2:	3337      	adds	r3, #55	; 0x37
   805d4:	7013      	strb	r3, [r2, #0]
   805d6:	682b      	ldr	r3, [r5, #0]
   805d8:	689b      	ldr	r3, [r3, #8]
   805da:	681a      	ldr	r2, [r3, #0]
   805dc:	3201      	adds	r2, #1
   805de:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   805e0:	2c00      	cmp	r4, #0
   805e2:	d1a3      	bne.n	8052c <UnityPrintNumberHex+0xc8>
   805e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   805e8:	20070568 	.word	0x20070568
   805ec:	000834d1 	.word	0x000834d1

000805f0 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   805f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   805f2:	2800      	cmp	r0, #0
   805f4:	f000 810a 	beq.w	8080c <UnityPrint+0x21c>
    {
        while (*pch)
   805f8:	7803      	ldrb	r3, [r0, #0]
   805fa:	2b00      	cmp	r3, #0
   805fc:	f000 8106 	beq.w	8080c <UnityPrint+0x21c>
   80600:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80602:	4d83      	ldr	r5, [pc, #524]	; (80810 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80604:	4e83      	ldr	r6, [pc, #524]	; (80814 <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80606:	4f84      	ldr	r7, [pc, #528]	; (80818 <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   80608:	f1a3 0220 	sub.w	r2, r3, #32
   8060c:	b2d2      	uxtb	r2, r2
   8060e:	2a5e      	cmp	r2, #94	; 0x5e
   80610:	d82a      	bhi.n	80668 <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   80612:	6828      	ldr	r0, [r5, #0]
   80614:	6882      	ldr	r2, [r0, #8]
   80616:	6893      	ldr	r3, [r2, #8]
   80618:	3b01      	subs	r3, #1
   8061a:	6093      	str	r3, [r2, #8]
   8061c:	2b00      	cmp	r3, #0
   8061e:	da18      	bge.n	80652 <UnityPrint+0x62>
   80620:	6882      	ldr	r2, [r0, #8]
   80622:	6891      	ldr	r1, [r2, #8]
   80624:	6993      	ldr	r3, [r2, #24]
   80626:	4299      	cmp	r1, r3
   80628:	db0f      	blt.n	8064a <UnityPrint+0x5a>
   8062a:	6813      	ldr	r3, [r2, #0]
   8062c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80630:	701a      	strb	r2, [r3, #0]
   80632:	6828      	ldr	r0, [r5, #0]
   80634:	6882      	ldr	r2, [r0, #8]
   80636:	6813      	ldr	r3, [r2, #0]
   80638:	7819      	ldrb	r1, [r3, #0]
   8063a:	290a      	cmp	r1, #10
   8063c:	d002      	beq.n	80644 <UnityPrint+0x54>
   8063e:	3301      	adds	r3, #1
   80640:	6013      	str	r3, [r2, #0]
   80642:	e0de      	b.n	80802 <UnityPrint+0x212>
   80644:	210a      	movs	r1, #10
   80646:	47b8      	blx	r7
   80648:	e0db      	b.n	80802 <UnityPrint+0x212>
   8064a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   8064e:	47b8      	blx	r7
   80650:	e0d7      	b.n	80802 <UnityPrint+0x212>
   80652:	6883      	ldr	r3, [r0, #8]
   80654:	681b      	ldr	r3, [r3, #0]
   80656:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   8065a:	701a      	strb	r2, [r3, #0]
   8065c:	682b      	ldr	r3, [r5, #0]
   8065e:	689b      	ldr	r3, [r3, #8]
   80660:	681a      	ldr	r2, [r3, #0]
   80662:	3201      	adds	r2, #1
   80664:	601a      	str	r2, [r3, #0]
   80666:	e0cc      	b.n	80802 <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   80668:	2b0d      	cmp	r3, #13
   8066a:	d14e      	bne.n	8070a <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   8066c:	6828      	ldr	r0, [r5, #0]
   8066e:	6882      	ldr	r2, [r0, #8]
   80670:	6893      	ldr	r3, [r2, #8]
   80672:	3b01      	subs	r3, #1
   80674:	6093      	str	r3, [r2, #8]
   80676:	2b00      	cmp	r3, #0
   80678:	da16      	bge.n	806a8 <UnityPrint+0xb8>
   8067a:	6882      	ldr	r2, [r0, #8]
   8067c:	6891      	ldr	r1, [r2, #8]
   8067e:	6993      	ldr	r3, [r2, #24]
   80680:	4299      	cmp	r1, r3
   80682:	db0e      	blt.n	806a2 <UnityPrint+0xb2>
   80684:	6813      	ldr	r3, [r2, #0]
   80686:	225c      	movs	r2, #92	; 0x5c
   80688:	701a      	strb	r2, [r3, #0]
   8068a:	6828      	ldr	r0, [r5, #0]
   8068c:	6882      	ldr	r2, [r0, #8]
   8068e:	6813      	ldr	r3, [r2, #0]
   80690:	7819      	ldrb	r1, [r3, #0]
   80692:	290a      	cmp	r1, #10
   80694:	d002      	beq.n	8069c <UnityPrint+0xac>
   80696:	3301      	adds	r3, #1
   80698:	6013      	str	r3, [r2, #0]
   8069a:	e00e      	b.n	806ba <UnityPrint+0xca>
   8069c:	210a      	movs	r1, #10
   8069e:	47b8      	blx	r7
   806a0:	e00b      	b.n	806ba <UnityPrint+0xca>
   806a2:	215c      	movs	r1, #92	; 0x5c
   806a4:	47b8      	blx	r7
   806a6:	e008      	b.n	806ba <UnityPrint+0xca>
   806a8:	6883      	ldr	r3, [r0, #8]
   806aa:	681b      	ldr	r3, [r3, #0]
   806ac:	225c      	movs	r2, #92	; 0x5c
   806ae:	701a      	strb	r2, [r3, #0]
   806b0:	682b      	ldr	r3, [r5, #0]
   806b2:	689b      	ldr	r3, [r3, #8]
   806b4:	681a      	ldr	r2, [r3, #0]
   806b6:	3201      	adds	r2, #1
   806b8:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   806ba:	6828      	ldr	r0, [r5, #0]
   806bc:	6882      	ldr	r2, [r0, #8]
   806be:	6893      	ldr	r3, [r2, #8]
   806c0:	3b01      	subs	r3, #1
   806c2:	6093      	str	r3, [r2, #8]
   806c4:	2b00      	cmp	r3, #0
   806c6:	da16      	bge.n	806f6 <UnityPrint+0x106>
   806c8:	6882      	ldr	r2, [r0, #8]
   806ca:	6891      	ldr	r1, [r2, #8]
   806cc:	6993      	ldr	r3, [r2, #24]
   806ce:	4299      	cmp	r1, r3
   806d0:	db0e      	blt.n	806f0 <UnityPrint+0x100>
   806d2:	6813      	ldr	r3, [r2, #0]
   806d4:	2272      	movs	r2, #114	; 0x72
   806d6:	701a      	strb	r2, [r3, #0]
   806d8:	6828      	ldr	r0, [r5, #0]
   806da:	6882      	ldr	r2, [r0, #8]
   806dc:	6813      	ldr	r3, [r2, #0]
   806de:	7819      	ldrb	r1, [r3, #0]
   806e0:	290a      	cmp	r1, #10
   806e2:	d002      	beq.n	806ea <UnityPrint+0xfa>
   806e4:	3301      	adds	r3, #1
   806e6:	6013      	str	r3, [r2, #0]
   806e8:	e08b      	b.n	80802 <UnityPrint+0x212>
   806ea:	210a      	movs	r1, #10
   806ec:	47b8      	blx	r7
   806ee:	e088      	b.n	80802 <UnityPrint+0x212>
   806f0:	2172      	movs	r1, #114	; 0x72
   806f2:	47b8      	blx	r7
   806f4:	e085      	b.n	80802 <UnityPrint+0x212>
   806f6:	6883      	ldr	r3, [r0, #8]
   806f8:	681b      	ldr	r3, [r3, #0]
   806fa:	2272      	movs	r2, #114	; 0x72
   806fc:	701a      	strb	r2, [r3, #0]
   806fe:	682b      	ldr	r3, [r5, #0]
   80700:	689b      	ldr	r3, [r3, #8]
   80702:	681a      	ldr	r2, [r3, #0]
   80704:	3201      	adds	r2, #1
   80706:	601a      	str	r2, [r3, #0]
   80708:	e07b      	b.n	80802 <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   8070a:	2b0a      	cmp	r3, #10
   8070c:	d14e      	bne.n	807ac <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   8070e:	6828      	ldr	r0, [r5, #0]
   80710:	6882      	ldr	r2, [r0, #8]
   80712:	6893      	ldr	r3, [r2, #8]
   80714:	3b01      	subs	r3, #1
   80716:	6093      	str	r3, [r2, #8]
   80718:	2b00      	cmp	r3, #0
   8071a:	da16      	bge.n	8074a <UnityPrint+0x15a>
   8071c:	6882      	ldr	r2, [r0, #8]
   8071e:	6891      	ldr	r1, [r2, #8]
   80720:	6993      	ldr	r3, [r2, #24]
   80722:	4299      	cmp	r1, r3
   80724:	db0e      	blt.n	80744 <UnityPrint+0x154>
   80726:	6813      	ldr	r3, [r2, #0]
   80728:	225c      	movs	r2, #92	; 0x5c
   8072a:	701a      	strb	r2, [r3, #0]
   8072c:	6828      	ldr	r0, [r5, #0]
   8072e:	6882      	ldr	r2, [r0, #8]
   80730:	6813      	ldr	r3, [r2, #0]
   80732:	7819      	ldrb	r1, [r3, #0]
   80734:	290a      	cmp	r1, #10
   80736:	d002      	beq.n	8073e <UnityPrint+0x14e>
   80738:	3301      	adds	r3, #1
   8073a:	6013      	str	r3, [r2, #0]
   8073c:	e00e      	b.n	8075c <UnityPrint+0x16c>
   8073e:	210a      	movs	r1, #10
   80740:	47b8      	blx	r7
   80742:	e00b      	b.n	8075c <UnityPrint+0x16c>
   80744:	215c      	movs	r1, #92	; 0x5c
   80746:	47b8      	blx	r7
   80748:	e008      	b.n	8075c <UnityPrint+0x16c>
   8074a:	6883      	ldr	r3, [r0, #8]
   8074c:	681b      	ldr	r3, [r3, #0]
   8074e:	225c      	movs	r2, #92	; 0x5c
   80750:	701a      	strb	r2, [r3, #0]
   80752:	682b      	ldr	r3, [r5, #0]
   80754:	689b      	ldr	r3, [r3, #8]
   80756:	681a      	ldr	r2, [r3, #0]
   80758:	3201      	adds	r2, #1
   8075a:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   8075c:	6828      	ldr	r0, [r5, #0]
   8075e:	6882      	ldr	r2, [r0, #8]
   80760:	6893      	ldr	r3, [r2, #8]
   80762:	3b01      	subs	r3, #1
   80764:	6093      	str	r3, [r2, #8]
   80766:	2b00      	cmp	r3, #0
   80768:	da16      	bge.n	80798 <UnityPrint+0x1a8>
   8076a:	6882      	ldr	r2, [r0, #8]
   8076c:	6891      	ldr	r1, [r2, #8]
   8076e:	6993      	ldr	r3, [r2, #24]
   80770:	4299      	cmp	r1, r3
   80772:	db0e      	blt.n	80792 <UnityPrint+0x1a2>
   80774:	6813      	ldr	r3, [r2, #0]
   80776:	226e      	movs	r2, #110	; 0x6e
   80778:	701a      	strb	r2, [r3, #0]
   8077a:	6828      	ldr	r0, [r5, #0]
   8077c:	6882      	ldr	r2, [r0, #8]
   8077e:	6813      	ldr	r3, [r2, #0]
   80780:	7819      	ldrb	r1, [r3, #0]
   80782:	290a      	cmp	r1, #10
   80784:	d002      	beq.n	8078c <UnityPrint+0x19c>
   80786:	3301      	adds	r3, #1
   80788:	6013      	str	r3, [r2, #0]
   8078a:	e03a      	b.n	80802 <UnityPrint+0x212>
   8078c:	210a      	movs	r1, #10
   8078e:	47b8      	blx	r7
   80790:	e037      	b.n	80802 <UnityPrint+0x212>
   80792:	216e      	movs	r1, #110	; 0x6e
   80794:	47b8      	blx	r7
   80796:	e034      	b.n	80802 <UnityPrint+0x212>
   80798:	6883      	ldr	r3, [r0, #8]
   8079a:	681b      	ldr	r3, [r3, #0]
   8079c:	226e      	movs	r2, #110	; 0x6e
   8079e:	701a      	strb	r2, [r3, #0]
   807a0:	682b      	ldr	r3, [r5, #0]
   807a2:	689b      	ldr	r3, [r3, #8]
   807a4:	681a      	ldr	r2, [r3, #0]
   807a6:	3201      	adds	r2, #1
   807a8:	601a      	str	r2, [r3, #0]
   807aa:	e02a      	b.n	80802 <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   807ac:	6828      	ldr	r0, [r5, #0]
   807ae:	6882      	ldr	r2, [r0, #8]
   807b0:	6893      	ldr	r3, [r2, #8]
   807b2:	3b01      	subs	r3, #1
   807b4:	6093      	str	r3, [r2, #8]
   807b6:	2b00      	cmp	r3, #0
   807b8:	da16      	bge.n	807e8 <UnityPrint+0x1f8>
   807ba:	6882      	ldr	r2, [r0, #8]
   807bc:	6891      	ldr	r1, [r2, #8]
   807be:	6993      	ldr	r3, [r2, #24]
   807c0:	4299      	cmp	r1, r3
   807c2:	db0e      	blt.n	807e2 <UnityPrint+0x1f2>
   807c4:	6813      	ldr	r3, [r2, #0]
   807c6:	225c      	movs	r2, #92	; 0x5c
   807c8:	701a      	strb	r2, [r3, #0]
   807ca:	6828      	ldr	r0, [r5, #0]
   807cc:	6882      	ldr	r2, [r0, #8]
   807ce:	6813      	ldr	r3, [r2, #0]
   807d0:	7819      	ldrb	r1, [r3, #0]
   807d2:	290a      	cmp	r1, #10
   807d4:	d002      	beq.n	807dc <UnityPrint+0x1ec>
   807d6:	3301      	adds	r3, #1
   807d8:	6013      	str	r3, [r2, #0]
   807da:	e00e      	b.n	807fa <UnityPrint+0x20a>
   807dc:	210a      	movs	r1, #10
   807de:	47b8      	blx	r7
   807e0:	e00b      	b.n	807fa <UnityPrint+0x20a>
   807e2:	215c      	movs	r1, #92	; 0x5c
   807e4:	47b8      	blx	r7
   807e6:	e008      	b.n	807fa <UnityPrint+0x20a>
   807e8:	6883      	ldr	r3, [r0, #8]
   807ea:	681b      	ldr	r3, [r3, #0]
   807ec:	225c      	movs	r2, #92	; 0x5c
   807ee:	701a      	strb	r2, [r3, #0]
   807f0:	682b      	ldr	r3, [r5, #0]
   807f2:	689b      	ldr	r3, [r3, #8]
   807f4:	681a      	ldr	r2, [r3, #0]
   807f6:	3201      	adds	r2, #1
   807f8:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   807fa:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   807fe:	2102      	movs	r1, #2
   80800:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   80802:	f814 3b01 	ldrb.w	r3, [r4], #1
   80806:	2b00      	cmp	r3, #0
   80808:	f47f aefe 	bne.w	80608 <UnityPrint+0x18>
   8080c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8080e:	bf00      	nop
   80810:	20070568 	.word	0x20070568
   80814:	00080465 	.word	0x00080465
   80818:	000834d1 	.word	0x000834d1

0008081c <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   8081c:	b538      	push	{r3, r4, r5, lr}
   8081e:	460d      	mov	r5, r1
    UnityPrint(file);
   80820:	4b46      	ldr	r3, [pc, #280]	; (8093c <UnityTestResultsBegin+0x120>)
   80822:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80824:	4b46      	ldr	r3, [pc, #280]	; (80940 <UnityTestResultsBegin+0x124>)
   80826:	6818      	ldr	r0, [r3, #0]
   80828:	6884      	ldr	r4, [r0, #8]
   8082a:	68a2      	ldr	r2, [r4, #8]
   8082c:	3a01      	subs	r2, #1
   8082e:	60a2      	str	r2, [r4, #8]
   80830:	2a00      	cmp	r2, #0
   80832:	da19      	bge.n	80868 <UnityTestResultsBegin+0x4c>
   80834:	6882      	ldr	r2, [r0, #8]
   80836:	6893      	ldr	r3, [r2, #8]
   80838:	6991      	ldr	r1, [r2, #24]
   8083a:	428b      	cmp	r3, r1
   8083c:	db10      	blt.n	80860 <UnityTestResultsBegin+0x44>
   8083e:	6813      	ldr	r3, [r2, #0]
   80840:	223a      	movs	r2, #58	; 0x3a
   80842:	701a      	strb	r2, [r3, #0]
   80844:	4b3e      	ldr	r3, [pc, #248]	; (80940 <UnityTestResultsBegin+0x124>)
   80846:	6818      	ldr	r0, [r3, #0]
   80848:	6882      	ldr	r2, [r0, #8]
   8084a:	6813      	ldr	r3, [r2, #0]
   8084c:	7819      	ldrb	r1, [r3, #0]
   8084e:	290a      	cmp	r1, #10
   80850:	d002      	beq.n	80858 <UnityTestResultsBegin+0x3c>
   80852:	3301      	adds	r3, #1
   80854:	6013      	str	r3, [r2, #0]
   80856:	e011      	b.n	8087c <UnityTestResultsBegin+0x60>
   80858:	210a      	movs	r1, #10
   8085a:	4b3a      	ldr	r3, [pc, #232]	; (80944 <UnityTestResultsBegin+0x128>)
   8085c:	4798      	blx	r3
   8085e:	e00d      	b.n	8087c <UnityTestResultsBegin+0x60>
   80860:	213a      	movs	r1, #58	; 0x3a
   80862:	4b38      	ldr	r3, [pc, #224]	; (80944 <UnityTestResultsBegin+0x128>)
   80864:	4798      	blx	r3
   80866:	e009      	b.n	8087c <UnityTestResultsBegin+0x60>
   80868:	6883      	ldr	r3, [r0, #8]
   8086a:	681b      	ldr	r3, [r3, #0]
   8086c:	223a      	movs	r2, #58	; 0x3a
   8086e:	701a      	strb	r2, [r3, #0]
   80870:	4b33      	ldr	r3, [pc, #204]	; (80940 <UnityTestResultsBegin+0x124>)
   80872:	681b      	ldr	r3, [r3, #0]
   80874:	689b      	ldr	r3, [r3, #8]
   80876:	681a      	ldr	r2, [r3, #0]
   80878:	3201      	adds	r2, #1
   8087a:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   8087c:	4628      	mov	r0, r5
   8087e:	4b32      	ldr	r3, [pc, #200]	; (80948 <UnityTestResultsBegin+0x12c>)
   80880:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80882:	4b2f      	ldr	r3, [pc, #188]	; (80940 <UnityTestResultsBegin+0x124>)
   80884:	6818      	ldr	r0, [r3, #0]
   80886:	6882      	ldr	r2, [r0, #8]
   80888:	6893      	ldr	r3, [r2, #8]
   8088a:	3b01      	subs	r3, #1
   8088c:	6093      	str	r3, [r2, #8]
   8088e:	2b00      	cmp	r3, #0
   80890:	da19      	bge.n	808c6 <UnityTestResultsBegin+0xaa>
   80892:	6882      	ldr	r2, [r0, #8]
   80894:	6891      	ldr	r1, [r2, #8]
   80896:	6993      	ldr	r3, [r2, #24]
   80898:	4299      	cmp	r1, r3
   8089a:	db10      	blt.n	808be <UnityTestResultsBegin+0xa2>
   8089c:	6813      	ldr	r3, [r2, #0]
   8089e:	223a      	movs	r2, #58	; 0x3a
   808a0:	701a      	strb	r2, [r3, #0]
   808a2:	4b27      	ldr	r3, [pc, #156]	; (80940 <UnityTestResultsBegin+0x124>)
   808a4:	6818      	ldr	r0, [r3, #0]
   808a6:	6882      	ldr	r2, [r0, #8]
   808a8:	6813      	ldr	r3, [r2, #0]
   808aa:	7819      	ldrb	r1, [r3, #0]
   808ac:	290a      	cmp	r1, #10
   808ae:	d002      	beq.n	808b6 <UnityTestResultsBegin+0x9a>
   808b0:	3301      	adds	r3, #1
   808b2:	6013      	str	r3, [r2, #0]
   808b4:	e011      	b.n	808da <UnityTestResultsBegin+0xbe>
   808b6:	210a      	movs	r1, #10
   808b8:	4b22      	ldr	r3, [pc, #136]	; (80944 <UnityTestResultsBegin+0x128>)
   808ba:	4798      	blx	r3
   808bc:	e00d      	b.n	808da <UnityTestResultsBegin+0xbe>
   808be:	213a      	movs	r1, #58	; 0x3a
   808c0:	4b20      	ldr	r3, [pc, #128]	; (80944 <UnityTestResultsBegin+0x128>)
   808c2:	4798      	blx	r3
   808c4:	e009      	b.n	808da <UnityTestResultsBegin+0xbe>
   808c6:	6883      	ldr	r3, [r0, #8]
   808c8:	681b      	ldr	r3, [r3, #0]
   808ca:	223a      	movs	r2, #58	; 0x3a
   808cc:	701a      	strb	r2, [r3, #0]
   808ce:	4b1c      	ldr	r3, [pc, #112]	; (80940 <UnityTestResultsBegin+0x124>)
   808d0:	681b      	ldr	r3, [r3, #0]
   808d2:	689b      	ldr	r3, [r3, #8]
   808d4:	681a      	ldr	r2, [r3, #0]
   808d6:	3201      	adds	r2, #1
   808d8:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   808da:	4b1c      	ldr	r3, [pc, #112]	; (8094c <UnityTestResultsBegin+0x130>)
   808dc:	6858      	ldr	r0, [r3, #4]
   808de:	4b17      	ldr	r3, [pc, #92]	; (8093c <UnityTestResultsBegin+0x120>)
   808e0:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   808e2:	4b17      	ldr	r3, [pc, #92]	; (80940 <UnityTestResultsBegin+0x124>)
   808e4:	6818      	ldr	r0, [r3, #0]
   808e6:	6882      	ldr	r2, [r0, #8]
   808e8:	6893      	ldr	r3, [r2, #8]
   808ea:	3b01      	subs	r3, #1
   808ec:	6093      	str	r3, [r2, #8]
   808ee:	2b00      	cmp	r3, #0
   808f0:	da19      	bge.n	80926 <UnityTestResultsBegin+0x10a>
   808f2:	6882      	ldr	r2, [r0, #8]
   808f4:	6891      	ldr	r1, [r2, #8]
   808f6:	6993      	ldr	r3, [r2, #24]
   808f8:	4299      	cmp	r1, r3
   808fa:	db10      	blt.n	8091e <UnityTestResultsBegin+0x102>
   808fc:	6813      	ldr	r3, [r2, #0]
   808fe:	223a      	movs	r2, #58	; 0x3a
   80900:	701a      	strb	r2, [r3, #0]
   80902:	4b0f      	ldr	r3, [pc, #60]	; (80940 <UnityTestResultsBegin+0x124>)
   80904:	6818      	ldr	r0, [r3, #0]
   80906:	6882      	ldr	r2, [r0, #8]
   80908:	6813      	ldr	r3, [r2, #0]
   8090a:	7819      	ldrb	r1, [r3, #0]
   8090c:	290a      	cmp	r1, #10
   8090e:	d002      	beq.n	80916 <UnityTestResultsBegin+0xfa>
   80910:	3301      	adds	r3, #1
   80912:	6013      	str	r3, [r2, #0]
   80914:	bd38      	pop	{r3, r4, r5, pc}
   80916:	210a      	movs	r1, #10
   80918:	4b0a      	ldr	r3, [pc, #40]	; (80944 <UnityTestResultsBegin+0x128>)
   8091a:	4798      	blx	r3
   8091c:	bd38      	pop	{r3, r4, r5, pc}
   8091e:	213a      	movs	r1, #58	; 0x3a
   80920:	4b08      	ldr	r3, [pc, #32]	; (80944 <UnityTestResultsBegin+0x128>)
   80922:	4798      	blx	r3
   80924:	bd38      	pop	{r3, r4, r5, pc}
   80926:	6883      	ldr	r3, [r0, #8]
   80928:	681b      	ldr	r3, [r3, #0]
   8092a:	223a      	movs	r2, #58	; 0x3a
   8092c:	701a      	strb	r2, [r3, #0]
   8092e:	4b04      	ldr	r3, [pc, #16]	; (80940 <UnityTestResultsBegin+0x124>)
   80930:	681b      	ldr	r3, [r3, #0]
   80932:	689b      	ldr	r3, [r3, #8]
   80934:	681a      	ldr	r2, [r3, #0]
   80936:	3201      	adds	r2, #1
   80938:	601a      	str	r2, [r3, #0]
   8093a:	bd38      	pop	{r3, r4, r5, pc}
   8093c:	000805f1 	.word	0x000805f1
   80940:	20070568 	.word	0x20070568
   80944:	000834d1 	.word	0x000834d1
   80948:	00080201 	.word	0x00080201
   8094c:	20070b6c 	.word	0x20070b6c

00080950 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   80950:	b508      	push	{r3, lr}
   80952:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   80954:	4b19      	ldr	r3, [pc, #100]	; (809bc <UnityTestResultsFailBegin+0x6c>)
   80956:	6818      	ldr	r0, [r3, #0]
   80958:	4b19      	ldr	r3, [pc, #100]	; (809c0 <UnityTestResultsFailBegin+0x70>)
   8095a:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   8095c:	4819      	ldr	r0, [pc, #100]	; (809c4 <UnityTestResultsFailBegin+0x74>)
   8095e:	4b1a      	ldr	r3, [pc, #104]	; (809c8 <UnityTestResultsFailBegin+0x78>)
   80960:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80962:	4b1a      	ldr	r3, [pc, #104]	; (809cc <UnityTestResultsFailBegin+0x7c>)
   80964:	6818      	ldr	r0, [r3, #0]
   80966:	6882      	ldr	r2, [r0, #8]
   80968:	6893      	ldr	r3, [r2, #8]
   8096a:	3b01      	subs	r3, #1
   8096c:	6093      	str	r3, [r2, #8]
   8096e:	2b00      	cmp	r3, #0
   80970:	da19      	bge.n	809a6 <UnityTestResultsFailBegin+0x56>
   80972:	6882      	ldr	r2, [r0, #8]
   80974:	6891      	ldr	r1, [r2, #8]
   80976:	6993      	ldr	r3, [r2, #24]
   80978:	4299      	cmp	r1, r3
   8097a:	db10      	blt.n	8099e <UnityTestResultsFailBegin+0x4e>
   8097c:	6813      	ldr	r3, [r2, #0]
   8097e:	223a      	movs	r2, #58	; 0x3a
   80980:	701a      	strb	r2, [r3, #0]
   80982:	4b12      	ldr	r3, [pc, #72]	; (809cc <UnityTestResultsFailBegin+0x7c>)
   80984:	6818      	ldr	r0, [r3, #0]
   80986:	6882      	ldr	r2, [r0, #8]
   80988:	6813      	ldr	r3, [r2, #0]
   8098a:	7819      	ldrb	r1, [r3, #0]
   8098c:	290a      	cmp	r1, #10
   8098e:	d002      	beq.n	80996 <UnityTestResultsFailBegin+0x46>
   80990:	3301      	adds	r3, #1
   80992:	6013      	str	r3, [r2, #0]
   80994:	bd08      	pop	{r3, pc}
   80996:	210a      	movs	r1, #10
   80998:	4b0d      	ldr	r3, [pc, #52]	; (809d0 <UnityTestResultsFailBegin+0x80>)
   8099a:	4798      	blx	r3
   8099c:	bd08      	pop	{r3, pc}
   8099e:	213a      	movs	r1, #58	; 0x3a
   809a0:	4b0b      	ldr	r3, [pc, #44]	; (809d0 <UnityTestResultsFailBegin+0x80>)
   809a2:	4798      	blx	r3
   809a4:	bd08      	pop	{r3, pc}
   809a6:	6883      	ldr	r3, [r0, #8]
   809a8:	681b      	ldr	r3, [r3, #0]
   809aa:	223a      	movs	r2, #58	; 0x3a
   809ac:	701a      	strb	r2, [r3, #0]
   809ae:	4b07      	ldr	r3, [pc, #28]	; (809cc <UnityTestResultsFailBegin+0x7c>)
   809b0:	681b      	ldr	r3, [r3, #0]
   809b2:	689b      	ldr	r3, [r3, #8]
   809b4:	681a      	ldr	r2, [r3, #0]
   809b6:	3201      	adds	r2, #1
   809b8:	601a      	str	r2, [r3, #0]
   809ba:	bd08      	pop	{r3, pc}
   809bc:	20070b6c 	.word	0x20070b6c
   809c0:	0008081d 	.word	0x0008081d
   809c4:	000853e0 	.word	0x000853e0
   809c8:	000805f1 	.word	0x000805f1
   809cc:	20070568 	.word	0x20070568
   809d0:	000834d1 	.word	0x000834d1

000809d4 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   809d4:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   809d6:	4605      	mov	r5, r0
   809d8:	b120      	cbz	r0, 809e4 <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   809da:	4803      	ldr	r0, [pc, #12]	; (809e8 <UnityAddMsgIfSpecified+0x14>)
   809dc:	4c03      	ldr	r4, [pc, #12]	; (809ec <UnityAddMsgIfSpecified+0x18>)
   809de:	47a0      	blx	r4
        UnityPrint(msg);
   809e0:	4628      	mov	r0, r5
   809e2:	47a0      	blx	r4
   809e4:	bd38      	pop	{r3, r4, r5, pc}
   809e6:	bf00      	nop
   809e8:	000853d4 	.word	0x000853d4
   809ec:	000805f1 	.word	0x000805f1

000809f0 <UnityPrintNumberByStyle>:
    }
}

//-----------------------------------------------
void UnityPrintNumberByStyle(const _U_SINT number, const UNITY_DISPLAY_STYLE_T style)
{
   809f0:	b508      	push	{r3, lr}
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   809f2:	f011 0f10 	tst.w	r1, #16
   809f6:	d002      	beq.n	809fe <UnityPrintNumberByStyle+0xe>
    {
        UnityPrintNumber(number);
   809f8:	4b0a      	ldr	r3, [pc, #40]	; (80a24 <UnityPrintNumberByStyle+0x34>)
   809fa:	4798      	blx	r3
   809fc:	bd08      	pop	{r3, pc}
    }
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
   809fe:	f011 0f20 	tst.w	r1, #32
   80a02:	d009      	beq.n	80a18 <UnityPrintNumberByStyle+0x28>
    {
        UnityPrintNumberUnsigned(  (_U_UINT)number  &  UnitySizeMask[((_U_UINT)style & (_U_UINT)0x0F) - 1]  );
   80a04:	f001 010f 	and.w	r1, r1, #15
   80a08:	3901      	subs	r1, #1
   80a0a:	4b07      	ldr	r3, [pc, #28]	; (80a28 <UnityPrintNumberByStyle+0x38>)
   80a0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   80a10:	4018      	ands	r0, r3
   80a12:	4b06      	ldr	r3, [pc, #24]	; (80a2c <UnityPrintNumberByStyle+0x3c>)
   80a14:	4798      	blx	r3
   80a16:	bd08      	pop	{r3, pc}
    }
    else
    {
        UnityPrintNumberHex((_U_UINT)number, (char)((style & 0x000F) << 1));
   80a18:	f001 010f 	and.w	r1, r1, #15
   80a1c:	0049      	lsls	r1, r1, #1
   80a1e:	4b04      	ldr	r3, [pc, #16]	; (80a30 <UnityPrintNumberByStyle+0x40>)
   80a20:	4798      	blx	r3
   80a22:	bd08      	pop	{r3, pc}
   80a24:	00080201 	.word	0x00080201
   80a28:	000853b4 	.word	0x000853b4
   80a2c:	0008039d 	.word	0x0008039d
   80a30:	00080465 	.word	0x00080465

00080a34 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80a34:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80a36:	4802      	ldr	r0, [pc, #8]	; (80a40 <UnityPrintFail+0xc>)
   80a38:	4b02      	ldr	r3, [pc, #8]	; (80a44 <UnityPrintFail+0x10>)
   80a3a:	4798      	blx	r3
   80a3c:	bd08      	pop	{r3, pc}
   80a3e:	bf00      	nop
   80a40:	000853e0 	.word	0x000853e0
   80a44:	000805f1 	.word	0x000805f1

00080a48 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80a48:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80a4a:	4802      	ldr	r0, [pc, #8]	; (80a54 <UnityPrintOk+0xc>)
   80a4c:	4b02      	ldr	r3, [pc, #8]	; (80a58 <UnityPrintOk+0x10>)
   80a4e:	4798      	blx	r3
   80a50:	bd08      	pop	{r3, pc}
   80a52:	bf00      	nop
   80a54:	000853d0 	.word	0x000853d0
   80a58:	000805f1 	.word	0x000805f1

00080a5c <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   80a5c:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80a5e:	4b24      	ldr	r3, [pc, #144]	; (80af0 <UnityConcludeTest+0x94>)
   80a60:	69db      	ldr	r3, [r3, #28]
   80a62:	b123      	cbz	r3, 80a6e <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80a64:	4b22      	ldr	r3, [pc, #136]	; (80af0 <UnityConcludeTest+0x94>)
   80a66:	695a      	ldr	r2, [r3, #20]
   80a68:	3201      	adds	r2, #1
   80a6a:	615a      	str	r2, [r3, #20]
   80a6c:	e00f      	b.n	80a8e <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80a6e:	4b20      	ldr	r3, [pc, #128]	; (80af0 <UnityConcludeTest+0x94>)
   80a70:	699b      	ldr	r3, [r3, #24]
   80a72:	b943      	cbnz	r3, 80a86 <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   80a74:	4b1e      	ldr	r3, [pc, #120]	; (80af0 <UnityConcludeTest+0x94>)
   80a76:	6818      	ldr	r0, [r3, #0]
   80a78:	6899      	ldr	r1, [r3, #8]
   80a7a:	4b1e      	ldr	r3, [pc, #120]	; (80af4 <UnityConcludeTest+0x98>)
   80a7c:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   80a7e:	481e      	ldr	r0, [pc, #120]	; (80af8 <UnityConcludeTest+0x9c>)
   80a80:	4b1e      	ldr	r3, [pc, #120]	; (80afc <UnityConcludeTest+0xa0>)
   80a82:	4798      	blx	r3
   80a84:	e003      	b.n	80a8e <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   80a86:	4b1a      	ldr	r3, [pc, #104]	; (80af0 <UnityConcludeTest+0x94>)
   80a88:	691a      	ldr	r2, [r3, #16]
   80a8a:	3201      	adds	r2, #1
   80a8c:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   80a8e:	4b18      	ldr	r3, [pc, #96]	; (80af0 <UnityConcludeTest+0x94>)
   80a90:	2200      	movs	r2, #0
   80a92:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80a94:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   80a96:	4b1a      	ldr	r3, [pc, #104]	; (80b00 <UnityConcludeTest+0xa4>)
   80a98:	6818      	ldr	r0, [r3, #0]
   80a9a:	6882      	ldr	r2, [r0, #8]
   80a9c:	6893      	ldr	r3, [r2, #8]
   80a9e:	3b01      	subs	r3, #1
   80aa0:	6093      	str	r3, [r2, #8]
   80aa2:	2b00      	cmp	r3, #0
   80aa4:	da19      	bge.n	80ada <UnityConcludeTest+0x7e>
   80aa6:	6882      	ldr	r2, [r0, #8]
   80aa8:	6891      	ldr	r1, [r2, #8]
   80aaa:	6993      	ldr	r3, [r2, #24]
   80aac:	4299      	cmp	r1, r3
   80aae:	db10      	blt.n	80ad2 <UnityConcludeTest+0x76>
   80ab0:	6813      	ldr	r3, [r2, #0]
   80ab2:	220a      	movs	r2, #10
   80ab4:	701a      	strb	r2, [r3, #0]
   80ab6:	4b12      	ldr	r3, [pc, #72]	; (80b00 <UnityConcludeTest+0xa4>)
   80ab8:	6818      	ldr	r0, [r3, #0]
   80aba:	6882      	ldr	r2, [r0, #8]
   80abc:	6813      	ldr	r3, [r2, #0]
   80abe:	7819      	ldrb	r1, [r3, #0]
   80ac0:	290a      	cmp	r1, #10
   80ac2:	d002      	beq.n	80aca <UnityConcludeTest+0x6e>
   80ac4:	3301      	adds	r3, #1
   80ac6:	6013      	str	r3, [r2, #0]
   80ac8:	bd08      	pop	{r3, pc}
   80aca:	210a      	movs	r1, #10
   80acc:	4b0d      	ldr	r3, [pc, #52]	; (80b04 <UnityConcludeTest+0xa8>)
   80ace:	4798      	blx	r3
   80ad0:	bd08      	pop	{r3, pc}
   80ad2:	210a      	movs	r1, #10
   80ad4:	4b0b      	ldr	r3, [pc, #44]	; (80b04 <UnityConcludeTest+0xa8>)
   80ad6:	4798      	blx	r3
   80ad8:	bd08      	pop	{r3, pc}
   80ada:	6883      	ldr	r3, [r0, #8]
   80adc:	681b      	ldr	r3, [r3, #0]
   80ade:	220a      	movs	r2, #10
   80ae0:	701a      	strb	r2, [r3, #0]
   80ae2:	4b07      	ldr	r3, [pc, #28]	; (80b00 <UnityConcludeTest+0xa4>)
   80ae4:	681b      	ldr	r3, [r3, #0]
   80ae6:	689b      	ldr	r3, [r3, #8]
   80ae8:	681a      	ldr	r2, [r3, #0]
   80aea:	3201      	adds	r2, #1
   80aec:	601a      	str	r2, [r3, #0]
   80aee:	bd08      	pop	{r3, pc}
   80af0:	20070b6c 	.word	0x20070b6c
   80af4:	0008081d 	.word	0x0008081d
   80af8:	0008542c 	.word	0x0008542c
   80afc:	000805f1 	.word	0x000805f1
   80b00:	20070568 	.word	0x20070568
   80b04:	000834d1 	.word	0x000834d1

00080b08 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const _U_SINT expected,
                            const _U_SINT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
   80b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80b0c:	4606      	mov	r6, r0
   80b0e:	460d      	mov	r5, r1
   80b10:	4690      	mov	r8, r2
   80b12:	f89d 7020 	ldrb.w	r7, [sp, #32]
    UNITY_SKIP_EXECUTION;
   80b16:	4c11      	ldr	r4, [pc, #68]	; (80b5c <UnityAssertEqualNumber+0x54>)
   80b18:	69a4      	ldr	r4, [r4, #24]
   80b1a:	b9ec      	cbnz	r4, 80b58 <UnityAssertEqualNumber+0x50>
   80b1c:	4c0f      	ldr	r4, [pc, #60]	; (80b5c <UnityAssertEqualNumber+0x54>)
   80b1e:	69e4      	ldr	r4, [r4, #28]
   80b20:	b9d4      	cbnz	r4, 80b58 <UnityAssertEqualNumber+0x50>

    if (expected != actual)
   80b22:	4288      	cmp	r0, r1
   80b24:	d018      	beq.n	80b58 <UnityAssertEqualNumber+0x50>
    {
        UnityTestResultsFailBegin(lineNumber);
   80b26:	4618      	mov	r0, r3
   80b28:	4b0d      	ldr	r3, [pc, #52]	; (80b60 <UnityAssertEqualNumber+0x58>)
   80b2a:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   80b2c:	480d      	ldr	r0, [pc, #52]	; (80b64 <UnityAssertEqualNumber+0x5c>)
   80b2e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80b78 <UnityAssertEqualNumber+0x70>
   80b32:	47c8      	blx	r9
        UnityPrintNumberByStyle(expected, style);
   80b34:	4630      	mov	r0, r6
   80b36:	4639      	mov	r1, r7
   80b38:	4c0b      	ldr	r4, [pc, #44]	; (80b68 <UnityAssertEqualNumber+0x60>)
   80b3a:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   80b3c:	480b      	ldr	r0, [pc, #44]	; (80b6c <UnityAssertEqualNumber+0x64>)
   80b3e:	47c8      	blx	r9
        UnityPrintNumberByStyle(actual, style);
   80b40:	4628      	mov	r0, r5
   80b42:	4639      	mov	r1, r7
   80b44:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   80b46:	4640      	mov	r0, r8
   80b48:	4b09      	ldr	r3, [pc, #36]	; (80b70 <UnityAssertEqualNumber+0x68>)
   80b4a:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   80b4c:	4803      	ldr	r0, [pc, #12]	; (80b5c <UnityAssertEqualNumber+0x54>)
   80b4e:	2101      	movs	r1, #1
   80b50:	6181      	str	r1, [r0, #24]
   80b52:	3020      	adds	r0, #32
   80b54:	4b07      	ldr	r3, [pc, #28]	; (80b74 <UnityAssertEqualNumber+0x6c>)
   80b56:	4798      	blx	r3
   80b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b5c:	20070b6c 	.word	0x20070b6c
   80b60:	00080951 	.word	0x00080951
   80b64:	000853e8 	.word	0x000853e8
   80b68:	000809f1 	.word	0x000809f1
   80b6c:	000853d8 	.word	0x000853d8
   80b70:	000809d5 	.word	0x000809d5
   80b74:	00082619 	.word	0x00082619
   80b78:	000805f1 	.word	0x000805f1

00080b7c <setUp>:

//-----------------------------------------------
#if defined(UNITY_WEAK_ATTRIBUTE)
    void setUp(void);
    void tearDown(void);
    UNITY_WEAK_ATTRIBUTE void setUp(void) { }
   80b7c:	4770      	bx	lr
   80b7e:	bf00      	nop

00080b80 <tearDown>:
    UNITY_WEAK_ATTRIBUTE void tearDown(void) { }
   80b80:	4770      	bx	lr
   80b82:	bf00      	nop

00080b84 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   80b84:	b500      	push	{lr}
   80b86:	b083      	sub	sp, #12
   80b88:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   80b8a:	480e      	ldr	r0, [pc, #56]	; (80bc4 <UnityDefaultTestRun+0x40>)
   80b8c:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   80b8e:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   80b90:	68c3      	ldr	r3, [r0, #12]
   80b92:	3301      	adds	r3, #1
   80b94:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   80b96:	3020      	adds	r0, #32
   80b98:	4b0b      	ldr	r3, [pc, #44]	; (80bc8 <UnityDefaultTestRun+0x44>)
   80b9a:	4798      	blx	r3
   80b9c:	b918      	cbnz	r0, 80ba6 <UnityDefaultTestRun+0x22>
    {
        setUp();
   80b9e:	4b0b      	ldr	r3, [pc, #44]	; (80bcc <UnityDefaultTestRun+0x48>)
   80ba0:	4798      	blx	r3
        Func();
   80ba2:	9b01      	ldr	r3, [sp, #4]
   80ba4:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   80ba6:	480a      	ldr	r0, [pc, #40]	; (80bd0 <UnityDefaultTestRun+0x4c>)
   80ba8:	4b07      	ldr	r3, [pc, #28]	; (80bc8 <UnityDefaultTestRun+0x44>)
   80baa:	4798      	blx	r3
   80bac:	b920      	cbnz	r0, 80bb8 <UnityDefaultTestRun+0x34>
   80bae:	4b05      	ldr	r3, [pc, #20]	; (80bc4 <UnityDefaultTestRun+0x40>)
   80bb0:	69db      	ldr	r3, [r3, #28]
   80bb2:	b90b      	cbnz	r3, 80bb8 <UnityDefaultTestRun+0x34>
    {
        tearDown();
   80bb4:	4b07      	ldr	r3, [pc, #28]	; (80bd4 <UnityDefaultTestRun+0x50>)
   80bb6:	4798      	blx	r3
    }
    UnityConcludeTest();
   80bb8:	4b07      	ldr	r3, [pc, #28]	; (80bd8 <UnityDefaultTestRun+0x54>)
   80bba:	4798      	blx	r3
}
   80bbc:	b003      	add	sp, #12
   80bbe:	f85d fb04 	ldr.w	pc, [sp], #4
   80bc2:	bf00      	nop
   80bc4:	20070b6c 	.word	0x20070b6c
   80bc8:	0008260d 	.word	0x0008260d
   80bcc:	00080b7d 	.word	0x00080b7d
   80bd0:	20070b8c 	.word	0x20070b8c
   80bd4:	00080b81 	.word	0x00080b81
   80bd8:	00080a5d 	.word	0x00080a5d

00080bdc <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   80bdc:	4b05      	ldr	r3, [pc, #20]	; (80bf4 <UnityBegin+0x18>)
   80bde:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   80be0:	2200      	movs	r2, #0
   80be2:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   80be4:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   80be6:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   80be8:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   80bea:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   80bec:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80bee:	61da      	str	r2, [r3, #28]
   80bf0:	4770      	bx	lr
   80bf2:	bf00      	nop
   80bf4:	20070b6c 	.word	0x20070b6c

00080bf8 <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   80bf8:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   80bfa:	4b66      	ldr	r3, [pc, #408]	; (80d94 <UnityEnd+0x19c>)
   80bfc:	6818      	ldr	r0, [r3, #0]
   80bfe:	6882      	ldr	r2, [r0, #8]
   80c00:	6893      	ldr	r3, [r2, #8]
   80c02:	3b01      	subs	r3, #1
   80c04:	6093      	str	r3, [r2, #8]
   80c06:	2b00      	cmp	r3, #0
   80c08:	da19      	bge.n	80c3e <UnityEnd+0x46>
   80c0a:	6882      	ldr	r2, [r0, #8]
   80c0c:	6891      	ldr	r1, [r2, #8]
   80c0e:	6993      	ldr	r3, [r2, #24]
   80c10:	4299      	cmp	r1, r3
   80c12:	db10      	blt.n	80c36 <UnityEnd+0x3e>
   80c14:	6813      	ldr	r3, [r2, #0]
   80c16:	220a      	movs	r2, #10
   80c18:	701a      	strb	r2, [r3, #0]
   80c1a:	4b5e      	ldr	r3, [pc, #376]	; (80d94 <UnityEnd+0x19c>)
   80c1c:	6818      	ldr	r0, [r3, #0]
   80c1e:	6882      	ldr	r2, [r0, #8]
   80c20:	6813      	ldr	r3, [r2, #0]
   80c22:	7819      	ldrb	r1, [r3, #0]
   80c24:	290a      	cmp	r1, #10
   80c26:	d002      	beq.n	80c2e <UnityEnd+0x36>
   80c28:	3301      	adds	r3, #1
   80c2a:	6013      	str	r3, [r2, #0]
   80c2c:	e011      	b.n	80c52 <UnityEnd+0x5a>
   80c2e:	210a      	movs	r1, #10
   80c30:	4b59      	ldr	r3, [pc, #356]	; (80d98 <UnityEnd+0x1a0>)
   80c32:	4798      	blx	r3
   80c34:	e00d      	b.n	80c52 <UnityEnd+0x5a>
   80c36:	210a      	movs	r1, #10
   80c38:	4b57      	ldr	r3, [pc, #348]	; (80d98 <UnityEnd+0x1a0>)
   80c3a:	4798      	blx	r3
   80c3c:	e009      	b.n	80c52 <UnityEnd+0x5a>
   80c3e:	6883      	ldr	r3, [r0, #8]
   80c40:	681b      	ldr	r3, [r3, #0]
   80c42:	220a      	movs	r2, #10
   80c44:	701a      	strb	r2, [r3, #0]
   80c46:	4b53      	ldr	r3, [pc, #332]	; (80d94 <UnityEnd+0x19c>)
   80c48:	681b      	ldr	r3, [r3, #0]
   80c4a:	689b      	ldr	r3, [r3, #8]
   80c4c:	681a      	ldr	r2, [r3, #0]
   80c4e:	3201      	adds	r2, #1
   80c50:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   80c52:	4852      	ldr	r0, [pc, #328]	; (80d9c <UnityEnd+0x1a4>)
   80c54:	4b52      	ldr	r3, [pc, #328]	; (80da0 <UnityEnd+0x1a8>)
   80c56:	4798      	blx	r3
    UNITY_PRINT_EOL;
   80c58:	4b4e      	ldr	r3, [pc, #312]	; (80d94 <UnityEnd+0x19c>)
   80c5a:	6818      	ldr	r0, [r3, #0]
   80c5c:	6882      	ldr	r2, [r0, #8]
   80c5e:	6893      	ldr	r3, [r2, #8]
   80c60:	3b01      	subs	r3, #1
   80c62:	6093      	str	r3, [r2, #8]
   80c64:	2b00      	cmp	r3, #0
   80c66:	da19      	bge.n	80c9c <UnityEnd+0xa4>
   80c68:	6882      	ldr	r2, [r0, #8]
   80c6a:	6891      	ldr	r1, [r2, #8]
   80c6c:	6993      	ldr	r3, [r2, #24]
   80c6e:	4299      	cmp	r1, r3
   80c70:	db10      	blt.n	80c94 <UnityEnd+0x9c>
   80c72:	6813      	ldr	r3, [r2, #0]
   80c74:	220a      	movs	r2, #10
   80c76:	701a      	strb	r2, [r3, #0]
   80c78:	4b46      	ldr	r3, [pc, #280]	; (80d94 <UnityEnd+0x19c>)
   80c7a:	6818      	ldr	r0, [r3, #0]
   80c7c:	6882      	ldr	r2, [r0, #8]
   80c7e:	6813      	ldr	r3, [r2, #0]
   80c80:	7819      	ldrb	r1, [r3, #0]
   80c82:	290a      	cmp	r1, #10
   80c84:	d002      	beq.n	80c8c <UnityEnd+0x94>
   80c86:	3301      	adds	r3, #1
   80c88:	6013      	str	r3, [r2, #0]
   80c8a:	e011      	b.n	80cb0 <UnityEnd+0xb8>
   80c8c:	210a      	movs	r1, #10
   80c8e:	4b42      	ldr	r3, [pc, #264]	; (80d98 <UnityEnd+0x1a0>)
   80c90:	4798      	blx	r3
   80c92:	e00d      	b.n	80cb0 <UnityEnd+0xb8>
   80c94:	210a      	movs	r1, #10
   80c96:	4b40      	ldr	r3, [pc, #256]	; (80d98 <UnityEnd+0x1a0>)
   80c98:	4798      	blx	r3
   80c9a:	e009      	b.n	80cb0 <UnityEnd+0xb8>
   80c9c:	6883      	ldr	r3, [r0, #8]
   80c9e:	681b      	ldr	r3, [r3, #0]
   80ca0:	220a      	movs	r2, #10
   80ca2:	701a      	strb	r2, [r3, #0]
   80ca4:	4b3b      	ldr	r3, [pc, #236]	; (80d94 <UnityEnd+0x19c>)
   80ca6:	681b      	ldr	r3, [r3, #0]
   80ca8:	689b      	ldr	r3, [r3, #8]
   80caa:	681a      	ldr	r2, [r3, #0]
   80cac:	3201      	adds	r2, #1
   80cae:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   80cb0:	4e3c      	ldr	r6, [pc, #240]	; (80da4 <UnityEnd+0x1ac>)
   80cb2:	68f0      	ldr	r0, [r6, #12]
   80cb4:	4d3c      	ldr	r5, [pc, #240]	; (80da8 <UnityEnd+0x1b0>)
   80cb6:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   80cb8:	483c      	ldr	r0, [pc, #240]	; (80dac <UnityEnd+0x1b4>)
   80cba:	4c39      	ldr	r4, [pc, #228]	; (80da0 <UnityEnd+0x1a8>)
   80cbc:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   80cbe:	6930      	ldr	r0, [r6, #16]
   80cc0:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   80cc2:	483b      	ldr	r0, [pc, #236]	; (80db0 <UnityEnd+0x1b8>)
   80cc4:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   80cc6:	6970      	ldr	r0, [r6, #20]
   80cc8:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   80cca:	483a      	ldr	r0, [pc, #232]	; (80db4 <UnityEnd+0x1bc>)
   80ccc:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   80cce:	4b31      	ldr	r3, [pc, #196]	; (80d94 <UnityEnd+0x19c>)
   80cd0:	6818      	ldr	r0, [r3, #0]
   80cd2:	6882      	ldr	r2, [r0, #8]
   80cd4:	6893      	ldr	r3, [r2, #8]
   80cd6:	3b01      	subs	r3, #1
   80cd8:	6093      	str	r3, [r2, #8]
   80cda:	2b00      	cmp	r3, #0
   80cdc:	da19      	bge.n	80d12 <UnityEnd+0x11a>
   80cde:	6882      	ldr	r2, [r0, #8]
   80ce0:	6891      	ldr	r1, [r2, #8]
   80ce2:	6993      	ldr	r3, [r2, #24]
   80ce4:	4299      	cmp	r1, r3
   80ce6:	db10      	blt.n	80d0a <UnityEnd+0x112>
   80ce8:	6813      	ldr	r3, [r2, #0]
   80cea:	220a      	movs	r2, #10
   80cec:	701a      	strb	r2, [r3, #0]
   80cee:	4b29      	ldr	r3, [pc, #164]	; (80d94 <UnityEnd+0x19c>)
   80cf0:	6818      	ldr	r0, [r3, #0]
   80cf2:	6882      	ldr	r2, [r0, #8]
   80cf4:	6813      	ldr	r3, [r2, #0]
   80cf6:	7819      	ldrb	r1, [r3, #0]
   80cf8:	290a      	cmp	r1, #10
   80cfa:	d002      	beq.n	80d02 <UnityEnd+0x10a>
   80cfc:	3301      	adds	r3, #1
   80cfe:	6013      	str	r3, [r2, #0]
   80d00:	e011      	b.n	80d26 <UnityEnd+0x12e>
   80d02:	210a      	movs	r1, #10
   80d04:	4b24      	ldr	r3, [pc, #144]	; (80d98 <UnityEnd+0x1a0>)
   80d06:	4798      	blx	r3
   80d08:	e00d      	b.n	80d26 <UnityEnd+0x12e>
   80d0a:	210a      	movs	r1, #10
   80d0c:	4b22      	ldr	r3, [pc, #136]	; (80d98 <UnityEnd+0x1a0>)
   80d0e:	4798      	blx	r3
   80d10:	e009      	b.n	80d26 <UnityEnd+0x12e>
   80d12:	6883      	ldr	r3, [r0, #8]
   80d14:	681b      	ldr	r3, [r3, #0]
   80d16:	220a      	movs	r2, #10
   80d18:	701a      	strb	r2, [r3, #0]
   80d1a:	4b1e      	ldr	r3, [pc, #120]	; (80d94 <UnityEnd+0x19c>)
   80d1c:	681b      	ldr	r3, [r3, #0]
   80d1e:	689b      	ldr	r3, [r3, #8]
   80d20:	681a      	ldr	r2, [r3, #0]
   80d22:	3201      	adds	r2, #1
   80d24:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   80d26:	4b1f      	ldr	r3, [pc, #124]	; (80da4 <UnityEnd+0x1ac>)
   80d28:	691b      	ldr	r3, [r3, #16]
   80d2a:	b913      	cbnz	r3, 80d32 <UnityEnd+0x13a>
    {
        UnityPrintOk();
   80d2c:	4b22      	ldr	r3, [pc, #136]	; (80db8 <UnityEnd+0x1c0>)
   80d2e:	4798      	blx	r3
   80d30:	e001      	b.n	80d36 <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   80d32:	4b22      	ldr	r3, [pc, #136]	; (80dbc <UnityEnd+0x1c4>)
   80d34:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   80d36:	4b17      	ldr	r3, [pc, #92]	; (80d94 <UnityEnd+0x19c>)
   80d38:	6818      	ldr	r0, [r3, #0]
   80d3a:	6882      	ldr	r2, [r0, #8]
   80d3c:	6893      	ldr	r3, [r2, #8]
   80d3e:	3b01      	subs	r3, #1
   80d40:	6093      	str	r3, [r2, #8]
   80d42:	2b00      	cmp	r3, #0
   80d44:	da19      	bge.n	80d7a <UnityEnd+0x182>
   80d46:	6882      	ldr	r2, [r0, #8]
   80d48:	6891      	ldr	r1, [r2, #8]
   80d4a:	6993      	ldr	r3, [r2, #24]
   80d4c:	4299      	cmp	r1, r3
   80d4e:	db10      	blt.n	80d72 <UnityEnd+0x17a>
   80d50:	6813      	ldr	r3, [r2, #0]
   80d52:	220a      	movs	r2, #10
   80d54:	701a      	strb	r2, [r3, #0]
   80d56:	4b0f      	ldr	r3, [pc, #60]	; (80d94 <UnityEnd+0x19c>)
   80d58:	6818      	ldr	r0, [r3, #0]
   80d5a:	6882      	ldr	r2, [r0, #8]
   80d5c:	6813      	ldr	r3, [r2, #0]
   80d5e:	7819      	ldrb	r1, [r3, #0]
   80d60:	290a      	cmp	r1, #10
   80d62:	d002      	beq.n	80d6a <UnityEnd+0x172>
   80d64:	3301      	adds	r3, #1
   80d66:	6013      	str	r3, [r2, #0]
   80d68:	e011      	b.n	80d8e <UnityEnd+0x196>
   80d6a:	210a      	movs	r1, #10
   80d6c:	4b0a      	ldr	r3, [pc, #40]	; (80d98 <UnityEnd+0x1a0>)
   80d6e:	4798      	blx	r3
   80d70:	e00d      	b.n	80d8e <UnityEnd+0x196>
   80d72:	210a      	movs	r1, #10
   80d74:	4b08      	ldr	r3, [pc, #32]	; (80d98 <UnityEnd+0x1a0>)
   80d76:	4798      	blx	r3
   80d78:	e009      	b.n	80d8e <UnityEnd+0x196>
   80d7a:	6883      	ldr	r3, [r0, #8]
   80d7c:	681b      	ldr	r3, [r3, #0]
   80d7e:	220a      	movs	r2, #10
   80d80:	701a      	strb	r2, [r3, #0]
   80d82:	4b04      	ldr	r3, [pc, #16]	; (80d94 <UnityEnd+0x19c>)
   80d84:	681b      	ldr	r3, [r3, #0]
   80d86:	689b      	ldr	r3, [r3, #8]
   80d88:	681a      	ldr	r2, [r3, #0]
   80d8a:	3201      	adds	r2, #1
   80d8c:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   80d8e:	4b05      	ldr	r3, [pc, #20]	; (80da4 <UnityEnd+0x1ac>)
   80d90:	6918      	ldr	r0, [r3, #16]
   80d92:	bd70      	pop	{r4, r5, r6, pc}
   80d94:	20070568 	.word	0x20070568
   80d98:	000834d1 	.word	0x000834d1
   80d9c:	000853f4 	.word	0x000853f4
   80da0:	000805f1 	.word	0x000805f1
   80da4:	20070b6c 	.word	0x20070b6c
   80da8:	00080201 	.word	0x00080201
   80dac:	00085424 	.word	0x00085424
   80db0:	0008540c 	.word	0x0008540c
   80db4:	00085418 	.word	0x00085418
   80db8:	00080a49 	.word	0x00080a49
   80dbc:	00080a35 	.word	0x00080a35

00080dc0 <arlo_get_object_positions>:
	twi_control_arm(tx_arm_buffer, rx_arm_buffer);
}

void arlo_get_object_positions(int16_t *object_buffer)
{
	object_buffer[0] = sock_x;
   80dc0:	4b0c      	ldr	r3, [pc, #48]	; (80df4 <arlo_get_object_positions+0x34>)
   80dc2:	881b      	ldrh	r3, [r3, #0]
   80dc4:	8003      	strh	r3, [r0, #0]
	object_buffer[1] = sock_y;
   80dc6:	4b0c      	ldr	r3, [pc, #48]	; (80df8 <arlo_get_object_positions+0x38>)
   80dc8:	881b      	ldrh	r3, [r3, #0]
   80dca:	8043      	strh	r3, [r0, #2]
	
	object_buffer[2] = cube_x;
   80dcc:	4b0b      	ldr	r3, [pc, #44]	; (80dfc <arlo_get_object_positions+0x3c>)
   80dce:	881b      	ldrh	r3, [r3, #0]
   80dd0:	8083      	strh	r3, [r0, #4]
	object_buffer[3] = cube_y;
   80dd2:	4b0b      	ldr	r3, [pc, #44]	; (80e00 <arlo_get_object_positions+0x40>)
   80dd4:	881b      	ldrh	r3, [r3, #0]
   80dd6:	80c3      	strh	r3, [r0, #6]
	
	object_buffer[4] = glass_x;
   80dd8:	4b0a      	ldr	r3, [pc, #40]	; (80e04 <arlo_get_object_positions+0x44>)
   80dda:	881b      	ldrh	r3, [r3, #0]
   80ddc:	8103      	strh	r3, [r0, #8]
	object_buffer[5] = glass_y;
   80dde:	4b0a      	ldr	r3, [pc, #40]	; (80e08 <arlo_get_object_positions+0x48>)
   80de0:	881b      	ldrh	r3, [r3, #0]
   80de2:	8143      	strh	r3, [r0, #10]
	
	object_buffer[6] = box_x;
   80de4:	4b09      	ldr	r3, [pc, #36]	; (80e0c <arlo_get_object_positions+0x4c>)
   80de6:	881b      	ldrh	r3, [r3, #0]
   80de8:	8183      	strh	r3, [r0, #12]
	object_buffer[7] = box_y;
   80dea:	4b09      	ldr	r3, [pc, #36]	; (80e10 <arlo_get_object_positions+0x50>)
   80dec:	881b      	ldrh	r3, [r3, #0]
   80dee:	81c3      	strh	r3, [r0, #14]
   80df0:	4770      	bx	lr
   80df2:	bf00      	nop
   80df4:	200709ce 	.word	0x200709ce
   80df8:	200709d0 	.word	0x200709d0
   80dfc:	200709ca 	.word	0x200709ca
   80e00:	200709cc 	.word	0x200709cc
   80e04:	200709c6 	.word	0x200709c6
   80e08:	200709c8 	.word	0x200709c8
   80e0c:	200709c4 	.word	0x200709c4
   80e10:	200709d2 	.word	0x200709d2

00080e14 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80e18:	460c      	mov	r4, r1
   80e1a:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80e1c:	b960      	cbnz	r0, 80e38 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80e1e:	2a00      	cmp	r2, #0
   80e20:	dd0e      	ble.n	80e40 <_read+0x2c>
   80e22:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80e24:	4e09      	ldr	r6, [pc, #36]	; (80e4c <_read+0x38>)
   80e26:	4d0a      	ldr	r5, [pc, #40]	; (80e50 <_read+0x3c>)
   80e28:	6830      	ldr	r0, [r6, #0]
   80e2a:	4621      	mov	r1, r4
   80e2c:	682b      	ldr	r3, [r5, #0]
   80e2e:	4798      	blx	r3
		ptr++;
   80e30:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80e32:	42bc      	cmp	r4, r7
   80e34:	d1f8      	bne.n	80e28 <_read+0x14>
   80e36:	e006      	b.n	80e46 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80e38:	f04f 30ff 	mov.w	r0, #4294967295
   80e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80e40:	2000      	movs	r0, #0
   80e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80e46:	4640      	mov	r0, r8
	}
	return nChars;
}
   80e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e4c:	20070c44 	.word	0x20070c44
   80e50:	20070be8 	.word	0x20070be8

00080e54 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80e54:	b4f0      	push	{r4, r5, r6, r7}
   80e56:	b08c      	sub	sp, #48	; 0x30
   80e58:	4607      	mov	r7, r0
   80e5a:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80e5c:	ac01      	add	r4, sp, #4
   80e5e:	4d12      	ldr	r5, [pc, #72]	; (80ea8 <pwm_clocks_generate+0x54>)
   80e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80e68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80e6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80e70:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80e72:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80e74:	f852 4f04 	ldr.w	r4, [r2, #4]!
   80e78:	fbb6 f4f4 	udiv	r4, r6, r4
   80e7c:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80e80:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   80e84:	d903      	bls.n	80e8e <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   80e86:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80e88:	2b0b      	cmp	r3, #11
   80e8a:	d1f3      	bne.n	80e74 <pwm_clocks_generate+0x20>
   80e8c:	e004      	b.n	80e98 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80e8e:	2b0a      	cmp	r3, #10
   80e90:	d805      	bhi.n	80e9e <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   80e92:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   80e96:	e004      	b.n	80ea2 <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80e98:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80e9c:	e001      	b.n	80ea2 <pwm_clocks_generate+0x4e>
   80e9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   80ea2:	b00c      	add	sp, #48	; 0x30
   80ea4:	bcf0      	pop	{r4, r5, r6, r7}
   80ea6:	4770      	bx	lr
   80ea8:	00085434 	.word	0x00085434

00080eac <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80eac:	b570      	push	{r4, r5, r6, lr}
   80eae:	4606      	mov	r6, r0
   80eb0:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80eb2:	6808      	ldr	r0, [r1, #0]
   80eb4:	b140      	cbz	r0, 80ec8 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80eb6:	6889      	ldr	r1, [r1, #8]
   80eb8:	4b0b      	ldr	r3, [pc, #44]	; (80ee8 <pwm_init+0x3c>)
   80eba:	4798      	blx	r3
   80ebc:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80ec2:	4298      	cmp	r0, r3
   80ec4:	d101      	bne.n	80eca <pwm_init+0x1e>
   80ec6:	e00e      	b.n	80ee6 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80ec8:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80eca:	6860      	ldr	r0, [r4, #4]
   80ecc:	b140      	cbz	r0, 80ee0 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80ece:	68a1      	ldr	r1, [r4, #8]
   80ed0:	4b05      	ldr	r3, [pc, #20]	; (80ee8 <pwm_init+0x3c>)
   80ed2:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80ed8:	4298      	cmp	r0, r3
   80eda:	d004      	beq.n	80ee6 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80edc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80ee0:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80ee2:	2000      	movs	r0, #0
   80ee4:	bd70      	pop	{r4, r5, r6, pc}
}
   80ee6:	bd70      	pop	{r4, r5, r6, pc}
   80ee8:	00080e55 	.word	0x00080e55

00080eec <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80eec:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80eee:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80ef0:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80ef2:	684a      	ldr	r2, [r1, #4]
   80ef4:	f002 020f 	and.w	r2, r2, #15
   80ef8:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80efa:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80efc:	432c      	orrs	r4, r5
   80efe:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80f00:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80f04:	7d8a      	ldrb	r2, [r1, #22]
   80f06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80f0a:	7dca      	ldrb	r2, [r1, #23]
   80f0c:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80f10:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80f12:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   80f16:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80f1a:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80f1e:	68cc      	ldr	r4, [r1, #12]
   80f20:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80f24:	690c      	ldr	r4, [r1, #16]
   80f26:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80f2a:	7d8a      	ldrb	r2, [r1, #22]
   80f2c:	b13a      	cbz	r2, 80f3e <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80f2e:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80f30:	8b4a      	ldrh	r2, [r1, #26]
   80f32:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80f36:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   80f3a:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80f3e:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80f40:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80f44:	409a      	lsls	r2, r3
   80f46:	43d2      	mvns	r2, r2
   80f48:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80f4a:	7fce      	ldrb	r6, [r1, #31]
   80f4c:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80f4e:	7f8c      	ldrb	r4, [r1, #30]
   80f50:	409c      	lsls	r4, r3
   80f52:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80f56:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80f58:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80f5a:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80f5c:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80f5e:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80f62:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80f64:	f891 4020 	ldrb.w	r4, [r1, #32]
   80f68:	409c      	lsls	r4, r3
   80f6a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80f6e:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80f70:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80f72:	2201      	movs	r2, #1
   80f74:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80f76:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80f7a:	b11c      	cbz	r4, 80f84 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80f7c:	6a04      	ldr	r4, [r0, #32]
   80f7e:	4314      	orrs	r4, r2
   80f80:	6204      	str	r4, [r0, #32]
   80f82:	e003      	b.n	80f8c <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80f84:	6a04      	ldr	r4, [r0, #32]
   80f86:	ea24 0402 	bic.w	r4, r4, r2
   80f8a:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80f8c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80f90:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80f92:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80f94:	bf0c      	ite	eq
   80f96:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80f98:	4394      	bicne	r4, r2
   80f9a:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80f9c:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80fa0:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80fa2:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80fa4:	bf0c      	ite	eq
   80fa6:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80faa:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80fae:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80fb0:	2b03      	cmp	r3, #3
   80fb2:	d80c      	bhi.n	80fce <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80fb4:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80fb6:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80fb8:	22ff      	movs	r2, #255	; 0xff
   80fba:	409a      	lsls	r2, r3
   80fbc:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80fc0:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80fc4:	fa01 f303 	lsl.w	r3, r1, r3
   80fc8:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80fca:	66c3      	str	r3, [r0, #108]	; 0x6c
   80fcc:	e00c      	b.n	80fe8 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80fce:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80fd0:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80fd2:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80fd4:	22ff      	movs	r2, #255	; 0xff
   80fd6:	409a      	lsls	r2, r3
   80fd8:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80fdc:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80fe0:	fa01 f303 	lsl.w	r3, r1, r3
   80fe4:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80fe6:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80fe8:	2000      	movs	r0, #0
   80fea:	bc70      	pop	{r4, r5, r6}
   80fec:	4770      	bx	lr
   80fee:	bf00      	nop

00080ff0 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80ff0:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   80ff2:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80ff4:	690b      	ldr	r3, [r1, #16]
   80ff6:	4293      	cmp	r3, r2
   80ff8:	d306      	bcc.n	81008 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80ffa:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80ffc:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   81000:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   81004:	2000      	movs	r0, #0
   81006:	e001      	b.n	8100c <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   81008:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   8100c:	f85d 4b04 	ldr.w	r4, [sp], #4
   81010:	4770      	bx	lr
   81012:	bf00      	nop

00081014 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   81014:	2301      	movs	r3, #1
   81016:	fa03 f101 	lsl.w	r1, r3, r1
   8101a:	6041      	str	r1, [r0, #4]
   8101c:	4770      	bx	lr
   8101e:	bf00      	nop

00081020 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   81020:	2301      	movs	r3, #1
   81022:	fa03 f101 	lsl.w	r1, r3, r1
   81026:	6081      	str	r1, [r0, #8]
   81028:	4770      	bx	lr
   8102a:	bf00      	nop

0008102c <pwm_channel_get_status>:
 *
 * \return Bitmask of enabled PWM channel(s).
 */
uint32_t pwm_channel_get_status(Pwm *p_pwm)
{
	return p_pwm->PWM_SR;
   8102c:	68c0      	ldr	r0, [r0, #12]
}
   8102e:	4770      	bx	lr

00081030 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81030:	b5f0      	push	{r4, r5, r6, r7, lr}
   81032:	b083      	sub	sp, #12
   81034:	4604      	mov	r4, r0
   81036:	460d      	mov	r5, r1
	uint32_t val = 0;
   81038:	2300      	movs	r3, #0
   8103a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8103c:	4b1f      	ldr	r3, [pc, #124]	; (810bc <usart_serial_getchar+0x8c>)
   8103e:	4298      	cmp	r0, r3
   81040:	d107      	bne.n	81052 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   81042:	461f      	mov	r7, r3
   81044:	4e1e      	ldr	r6, [pc, #120]	; (810c0 <usart_serial_getchar+0x90>)
   81046:	4638      	mov	r0, r7
   81048:	4629      	mov	r1, r5
   8104a:	47b0      	blx	r6
   8104c:	2800      	cmp	r0, #0
   8104e:	d1fa      	bne.n	81046 <usart_serial_getchar+0x16>
   81050:	e019      	b.n	81086 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81052:	4b1c      	ldr	r3, [pc, #112]	; (810c4 <usart_serial_getchar+0x94>)
   81054:	4298      	cmp	r0, r3
   81056:	d109      	bne.n	8106c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   81058:	461f      	mov	r7, r3
   8105a:	4e1b      	ldr	r6, [pc, #108]	; (810c8 <usart_serial_getchar+0x98>)
   8105c:	4638      	mov	r0, r7
   8105e:	a901      	add	r1, sp, #4
   81060:	47b0      	blx	r6
   81062:	2800      	cmp	r0, #0
   81064:	d1fa      	bne.n	8105c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   81066:	9b01      	ldr	r3, [sp, #4]
   81068:	702b      	strb	r3, [r5, #0]
   8106a:	e019      	b.n	810a0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8106c:	4b17      	ldr	r3, [pc, #92]	; (810cc <usart_serial_getchar+0x9c>)
   8106e:	4298      	cmp	r0, r3
   81070:	d109      	bne.n	81086 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81072:	461e      	mov	r6, r3
   81074:	4c14      	ldr	r4, [pc, #80]	; (810c8 <usart_serial_getchar+0x98>)
   81076:	4630      	mov	r0, r6
   81078:	a901      	add	r1, sp, #4
   8107a:	47a0      	blx	r4
   8107c:	2800      	cmp	r0, #0
   8107e:	d1fa      	bne.n	81076 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81080:	9b01      	ldr	r3, [sp, #4]
   81082:	702b      	strb	r3, [r5, #0]
   81084:	e018      	b.n	810b8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81086:	4b12      	ldr	r3, [pc, #72]	; (810d0 <usart_serial_getchar+0xa0>)
   81088:	429c      	cmp	r4, r3
   8108a:	d109      	bne.n	810a0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8108c:	461e      	mov	r6, r3
   8108e:	4c0e      	ldr	r4, [pc, #56]	; (810c8 <usart_serial_getchar+0x98>)
   81090:	4630      	mov	r0, r6
   81092:	a901      	add	r1, sp, #4
   81094:	47a0      	blx	r4
   81096:	2800      	cmp	r0, #0
   81098:	d1fa      	bne.n	81090 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8109a:	9b01      	ldr	r3, [sp, #4]
   8109c:	702b      	strb	r3, [r5, #0]
   8109e:	e00b      	b.n	810b8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   810a0:	4b0c      	ldr	r3, [pc, #48]	; (810d4 <usart_serial_getchar+0xa4>)
   810a2:	429c      	cmp	r4, r3
   810a4:	d108      	bne.n	810b8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   810a6:	461e      	mov	r6, r3
   810a8:	4c07      	ldr	r4, [pc, #28]	; (810c8 <usart_serial_getchar+0x98>)
   810aa:	4630      	mov	r0, r6
   810ac:	a901      	add	r1, sp, #4
   810ae:	47a0      	blx	r4
   810b0:	2800      	cmp	r0, #0
   810b2:	d1fa      	bne.n	810aa <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   810b4:	9b01      	ldr	r3, [sp, #4]
   810b6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   810b8:	b003      	add	sp, #12
   810ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   810bc:	400e0800 	.word	0x400e0800
   810c0:	000814fd 	.word	0x000814fd
   810c4:	40098000 	.word	0x40098000
   810c8:	00081449 	.word	0x00081449
   810cc:	4009c000 	.word	0x4009c000
   810d0:	400a0000 	.word	0x400a0000
   810d4:	400a4000 	.word	0x400a4000

000810d8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   810d8:	b570      	push	{r4, r5, r6, lr}
   810da:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   810dc:	4b21      	ldr	r3, [pc, #132]	; (81164 <usart_serial_putchar+0x8c>)
   810de:	4298      	cmp	r0, r3
   810e0:	d107      	bne.n	810f2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   810e2:	461e      	mov	r6, r3
   810e4:	4d20      	ldr	r5, [pc, #128]	; (81168 <usart_serial_putchar+0x90>)
   810e6:	4630      	mov	r0, r6
   810e8:	4621      	mov	r1, r4
   810ea:	47a8      	blx	r5
   810ec:	2800      	cmp	r0, #0
   810ee:	d1fa      	bne.n	810e6 <usart_serial_putchar+0xe>
   810f0:	e02b      	b.n	8114a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   810f2:	4b1e      	ldr	r3, [pc, #120]	; (8116c <usart_serial_putchar+0x94>)
   810f4:	4298      	cmp	r0, r3
   810f6:	d107      	bne.n	81108 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   810f8:	461e      	mov	r6, r3
   810fa:	4d1d      	ldr	r5, [pc, #116]	; (81170 <usart_serial_putchar+0x98>)
   810fc:	4630      	mov	r0, r6
   810fe:	4621      	mov	r1, r4
   81100:	47a8      	blx	r5
   81102:	2800      	cmp	r0, #0
   81104:	d1fa      	bne.n	810fc <usart_serial_putchar+0x24>
   81106:	e022      	b.n	8114e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81108:	4b1a      	ldr	r3, [pc, #104]	; (81174 <usart_serial_putchar+0x9c>)
   8110a:	4298      	cmp	r0, r3
   8110c:	d107      	bne.n	8111e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8110e:	461e      	mov	r6, r3
   81110:	4d17      	ldr	r5, [pc, #92]	; (81170 <usart_serial_putchar+0x98>)
   81112:	4630      	mov	r0, r6
   81114:	4621      	mov	r1, r4
   81116:	47a8      	blx	r5
   81118:	2800      	cmp	r0, #0
   8111a:	d1fa      	bne.n	81112 <usart_serial_putchar+0x3a>
   8111c:	e019      	b.n	81152 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8111e:	4b16      	ldr	r3, [pc, #88]	; (81178 <usart_serial_putchar+0xa0>)
   81120:	4298      	cmp	r0, r3
   81122:	d107      	bne.n	81134 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   81124:	461e      	mov	r6, r3
   81126:	4d12      	ldr	r5, [pc, #72]	; (81170 <usart_serial_putchar+0x98>)
   81128:	4630      	mov	r0, r6
   8112a:	4621      	mov	r1, r4
   8112c:	47a8      	blx	r5
   8112e:	2800      	cmp	r0, #0
   81130:	d1fa      	bne.n	81128 <usart_serial_putchar+0x50>
   81132:	e010      	b.n	81156 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81134:	4b11      	ldr	r3, [pc, #68]	; (8117c <usart_serial_putchar+0xa4>)
   81136:	4298      	cmp	r0, r3
   81138:	d10f      	bne.n	8115a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8113a:	461e      	mov	r6, r3
   8113c:	4d0c      	ldr	r5, [pc, #48]	; (81170 <usart_serial_putchar+0x98>)
   8113e:	4630      	mov	r0, r6
   81140:	4621      	mov	r1, r4
   81142:	47a8      	blx	r5
   81144:	2800      	cmp	r0, #0
   81146:	d1fa      	bne.n	8113e <usart_serial_putchar+0x66>
   81148:	e009      	b.n	8115e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8114a:	2001      	movs	r0, #1
   8114c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8114e:	2001      	movs	r0, #1
   81150:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81152:	2001      	movs	r0, #1
   81154:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81156:	2001      	movs	r0, #1
   81158:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8115a:	2000      	movs	r0, #0
   8115c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8115e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   81160:	bd70      	pop	{r4, r5, r6, pc}
   81162:	bf00      	nop
   81164:	400e0800 	.word	0x400e0800
   81168:	000814ed 	.word	0x000814ed
   8116c:	40098000 	.word	0x40098000
   81170:	00081435 	.word	0x00081435
   81174:	4009c000 	.word	0x4009c000
   81178:	400a0000 	.word	0x400a0000
   8117c:	400a4000 	.word	0x400a4000

00081180 <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

void configureConsole(void)
/* Configuration for printouts, baudrates and paritytype  */
{
   81180:	b530      	push	{r4, r5, lr}
   81182:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81184:	2008      	movs	r0, #8
   81186:	4d12      	ldr	r5, [pc, #72]	; (811d0 <configureConsole+0x50>)
   81188:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8118a:	4c12      	ldr	r4, [pc, #72]	; (811d4 <configureConsole+0x54>)
   8118c:	4b12      	ldr	r3, [pc, #72]	; (811d8 <configureConsole+0x58>)
   8118e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81190:	4a12      	ldr	r2, [pc, #72]	; (811dc <configureConsole+0x5c>)
   81192:	4b13      	ldr	r3, [pc, #76]	; (811e0 <configureConsole+0x60>)
   81194:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81196:	4a13      	ldr	r2, [pc, #76]	; (811e4 <configureConsole+0x64>)
   81198:	4b13      	ldr	r3, [pc, #76]	; (811e8 <configureConsole+0x68>)
   8119a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8119c:	4b13      	ldr	r3, [pc, #76]	; (811ec <configureConsole+0x6c>)
   8119e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   811a0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   811a4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   811a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   811aa:	9303      	str	r3, [sp, #12]
   811ac:	2008      	movs	r0, #8
   811ae:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   811b0:	4620      	mov	r0, r4
   811b2:	a901      	add	r1, sp, #4
   811b4:	4b0e      	ldr	r3, [pc, #56]	; (811f0 <configureConsole+0x70>)
   811b6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   811b8:	4d0e      	ldr	r5, [pc, #56]	; (811f4 <configureConsole+0x74>)
   811ba:	682b      	ldr	r3, [r5, #0]
   811bc:	6898      	ldr	r0, [r3, #8]
   811be:	2100      	movs	r1, #0
   811c0:	4c0d      	ldr	r4, [pc, #52]	; (811f8 <configureConsole+0x78>)
   811c2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   811c4:	682b      	ldr	r3, [r5, #0]
   811c6:	6858      	ldr	r0, [r3, #4]
   811c8:	2100      	movs	r1, #0
   811ca:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY
	};
	/* Configure console UART, and initialize. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
   811cc:	b005      	add	sp, #20
   811ce:	bd30      	pop	{r4, r5, pc}
   811d0:	00081d65 	.word	0x00081d65
   811d4:	400e0800 	.word	0x400e0800
   811d8:	20070c44 	.word	0x20070c44
   811dc:	000810d9 	.word	0x000810d9
   811e0:	20070c40 	.word	0x20070c40
   811e4:	00081031 	.word	0x00081031
   811e8:	20070be8 	.word	0x20070be8
   811ec:	0501bd00 	.word	0x0501bd00
   811f0:	000814b5 	.word	0x000814b5
   811f4:	20070568 	.word	0x20070568
   811f8:	000825fd 	.word	0x000825fd

000811fc <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   811fc:	b538      	push	{r3, r4, r5, lr}
	
	pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   811fe:	2055      	movs	r0, #85	; 0x55
   81200:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81204:	4b0b      	ldr	r3, [pc, #44]	; (81234 <initPin21+0x38>)
   81206:	4798      	blx	r3
	/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
	PWM_pin_21.channel = PWM_CHANNEL_4;
   81208:	4b0b      	ldr	r3, [pc, #44]	; (81238 <initPin21+0x3c>)
   8120a:	2404      	movs	r4, #4
   8120c:	601c      	str	r4, [r3, #0]
	PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8120e:	220b      	movs	r2, #11
   81210:	605a      	str	r2, [r3, #4]
	PWM_pin_21.polarity = PWM_LOW;
   81212:	2200      	movs	r2, #0
   81214:	729a      	strb	r2, [r3, #10]
	PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   81216:	811a      	strh	r2, [r3, #8]
	PWM_pin_21.ul_period = 7500;
   81218:	f641 514c 	movw	r1, #7500	; 0x1d4c
   8121c:	6119      	str	r1, [r3, #16]
	PWM_pin_21.ul_duty = 0;
   8121e:	60da      	str	r2, [r3, #12]
	
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   81220:	4d06      	ldr	r5, [pc, #24]	; (8123c <initPin21+0x40>)
   81222:	4628      	mov	r0, r5
   81224:	4619      	mov	r1, r3
   81226:	4b06      	ldr	r3, [pc, #24]	; (81240 <initPin21+0x44>)
   81228:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   8122a:	4628      	mov	r0, r5
   8122c:	4621      	mov	r1, r4
   8122e:	4b05      	ldr	r3, [pc, #20]	; (81244 <initPin21+0x48>)
   81230:	4798      	blx	r3
   81232:	bd38      	pop	{r3, r4, r5, pc}
   81234:	00081a25 	.word	0x00081a25
   81238:	20070c14 	.word	0x20070c14
   8123c:	40094000 	.word	0x40094000
   81240:	00080eed 	.word	0x00080eed
   81244:	00081015 	.word	0x00081015

00081248 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   81248:	b538      	push	{r3, r4, r5, lr}
	
	pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   8124a:	2056      	movs	r0, #86	; 0x56
   8124c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81250:	4b0b      	ldr	r3, [pc, #44]	; (81280 <initPin22+0x38>)
   81252:	4798      	blx	r3
	/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
	PWM_pin_22.channel = PWM_CHANNEL_5;
   81254:	4b0b      	ldr	r3, [pc, #44]	; (81284 <initPin22+0x3c>)
   81256:	2405      	movs	r4, #5
   81258:	601c      	str	r4, [r3, #0]
	PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8125a:	220b      	movs	r2, #11
   8125c:	605a      	str	r2, [r3, #4]
	PWM_pin_22.polarity = PWM_LOW;
   8125e:	2200      	movs	r2, #0
   81260:	729a      	strb	r2, [r3, #10]
	PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   81262:	811a      	strh	r2, [r3, #8]
	PWM_pin_22.ul_period = 7500;
   81264:	f641 514c 	movw	r1, #7500	; 0x1d4c
   81268:	6119      	str	r1, [r3, #16]
	PWM_pin_22.ul_duty = 0;
   8126a:	60da      	str	r2, [r3, #12]
	
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_22);
   8126c:	4d06      	ldr	r5, [pc, #24]	; (81288 <initPin22+0x40>)
   8126e:	4628      	mov	r0, r5
   81270:	4619      	mov	r1, r3
   81272:	4b06      	ldr	r3, [pc, #24]	; (8128c <initPin22+0x44>)
   81274:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_5);
   81276:	4628      	mov	r0, r5
   81278:	4621      	mov	r1, r4
   8127a:	4b05      	ldr	r3, [pc, #20]	; (81290 <initPin22+0x48>)
   8127c:	4798      	blx	r3
   8127e:	bd38      	pop	{r3, r4, r5, pc}
   81280:	00081a25 	.word	0x00081a25
   81284:	20070bec 	.word	0x20070bec
   81288:	40094000 	.word	0x40094000
   8128c:	00080eed 	.word	0x00080eed
   81290:	00081015 	.word	0x00081015

00081294 <PWM_init>:
/*Define the PWM channel instance in order to configure channel 4 and 5*/
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;

/* This method configure PWM clock   */
void PWM_init(void){
   81294:	b530      	push	{r4, r5, lr}
   81296:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   81298:	2024      	movs	r0, #36	; 0x24
   8129a:	4b0d      	ldr	r3, [pc, #52]	; (812d0 <PWM_init+0x3c>)
   8129c:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   8129e:	4c0d      	ldr	r4, [pc, #52]	; (812d4 <PWM_init+0x40>)
   812a0:	4620      	mov	r0, r4
   812a2:	2104      	movs	r1, #4
   812a4:	4d0c      	ldr	r5, [pc, #48]	; (812d8 <PWM_init+0x44>)
   812a6:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   812a8:	4620      	mov	r0, r4
   812aa:	2105      	movs	r1, #5
   812ac:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   812ae:	4b0b      	ldr	r3, [pc, #44]	; (812dc <PWM_init+0x48>)
   812b0:	9301      	str	r3, [sp, #4]
   812b2:	2300      	movs	r3, #0
   812b4:	9302      	str	r3, [sp, #8]
   812b6:	4b0a      	ldr	r3, [pc, #40]	; (812e0 <PWM_init+0x4c>)
   812b8:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   812ba:	4620      	mov	r0, r4
   812bc:	a901      	add	r1, sp, #4
   812be:	4b09      	ldr	r3, [pc, #36]	; (812e4 <PWM_init+0x50>)
   812c0:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   812c2:	4b09      	ldr	r3, [pc, #36]	; (812e8 <PWM_init+0x54>)
   812c4:	4798      	blx	r3
	initPin22();
   812c6:	4b09      	ldr	r3, [pc, #36]	; (812ec <PWM_init+0x58>)
   812c8:	4798      	blx	r3
	
}
   812ca:	b005      	add	sp, #20
   812cc:	bd30      	pop	{r4, r5, pc}
   812ce:	bf00      	nop
   812d0:	00081d65 	.word	0x00081d65
   812d4:	40094000 	.word	0x40094000
   812d8:	00081021 	.word	0x00081021
   812dc:	000f4240 	.word	0x000f4240
   812e0:	0501bd00 	.word	0x0501bd00
   812e4:	00080ead 	.word	0x00080ead
   812e8:	000811fd 	.word	0x000811fd
   812ec:	00081249 	.word	0x00081249

000812f0 <leftWheel>:
/** This method changes the duty cycle of PWM signal on pin 9. 
*	The duty cycle is limited between 0.8 ms and 2.2 ms  
*
*	@param duty for wheel to be active
**/
int leftWheel(uint32_t duty){
   812f0:	b508      	push	{r3, lr}
	if(duty<800){
   812f2:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   812f6:	d305      	bcc.n	81304 <leftWheel+0x14>
   812f8:	f640 0298 	movw	r2, #2200	; 0x898
   812fc:	4290      	cmp	r0, r2
   812fe:	bf38      	it	cc
   81300:	4602      	movcc	r2, r0
   81302:	e001      	b.n	81308 <leftWheel+0x18>
		duty=800;
   81304:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	return pwm_channel_update_duty(PWM, &PWM_pin_21, duty );
   81308:	4802      	ldr	r0, [pc, #8]	; (81314 <leftWheel+0x24>)
   8130a:	4903      	ldr	r1, [pc, #12]	; (81318 <leftWheel+0x28>)
   8130c:	4b03      	ldr	r3, [pc, #12]	; (8131c <leftWheel+0x2c>)
   8130e:	4798      	blx	r3
}
   81310:	bd08      	pop	{r3, pc}
   81312:	bf00      	nop
   81314:	40094000 	.word	0x40094000
   81318:	20070c14 	.word	0x20070c14
   8131c:	00080ff1 	.word	0x00080ff1

00081320 <rightWheel>:
/** This method changes the duty cycle of PWM signal on pin 8. 
*	The duty cycle is limited between 0.8 ms and 2.2 ms 
*
*	@param duty for wheel to be active 
**/
int rightWheel(uint32_t duty){
   81320:	b508      	push	{r3, lr}
	
	if(duty<800){
   81322:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   81326:	d305      	bcc.n	81334 <rightWheel+0x14>
   81328:	f640 0298 	movw	r2, #2200	; 0x898
   8132c:	4290      	cmp	r0, r2
   8132e:	bf38      	it	cc
   81330:	4602      	movcc	r2, r0
   81332:	e001      	b.n	81338 <rightWheel+0x18>
		duty=800;
   81334:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	return pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   81338:	4802      	ldr	r0, [pc, #8]	; (81344 <rightWheel+0x24>)
   8133a:	4903      	ldr	r1, [pc, #12]	; (81348 <rightWheel+0x28>)
   8133c:	4b03      	ldr	r3, [pc, #12]	; (8134c <rightWheel+0x2c>)
   8133e:	4798      	blx	r3
	
   81340:	bd08      	pop	{r3, pc}
   81342:	bf00      	nop
   81344:	40094000 	.word	0x40094000
   81348:	20070bec 	.word	0x20070bec
   8134c:	00080ff1 	.word	0x00080ff1

00081350 <pin12_edge_handler>:
	increases a counter if rising edge
	@param id for for which port
	@param index for which pin triggered
**/
void pin12_edge_handler(const uint32_t id, const uint32_t index)
{
   81350:	b508      	push	{r3, lr}
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   81352:	4806      	ldr	r0, [pc, #24]	; (8136c <pin12_edge_handler+0x1c>)
   81354:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8135c:	4b04      	ldr	r3, [pc, #16]	; (81370 <pin12_edge_handler+0x20>)
   8135e:	4798      	blx	r3
   81360:	b118      	cbz	r0, 8136a <pin12_edge_handler+0x1a>
		//increase the counter value
		counter_2++;
   81362:	4b04      	ldr	r3, [pc, #16]	; (81374 <pin12_edge_handler+0x24>)
   81364:	881a      	ldrh	r2, [r3, #0]
   81366:	3201      	adds	r2, #1
   81368:	801a      	strh	r2, [r3, #0]
   8136a:	bd08      	pop	{r3, pc}
   8136c:	400e1200 	.word	0x400e1200
   81370:	00081931 	.word	0x00081931
   81374:	20070c3c 	.word	0x20070c3c

00081378 <pin14_edge_handler>:
	increases a counter if rising edge
	@param id for for which port
	@param index for which pin triggered
**/
void pin14_edge_handler(const uint32_t id, const uint32_t index)
{
   81378:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   8137a:	4806      	ldr	r0, [pc, #24]	; (81394 <pin14_edge_handler+0x1c>)
   8137c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81380:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81384:	4b04      	ldr	r3, [pc, #16]	; (81398 <pin14_edge_handler+0x20>)
   81386:	4798      	blx	r3
   81388:	b118      	cbz	r0, 81392 <pin14_edge_handler+0x1a>
		//Increase the counter value
		counter_1++;
   8138a:	4b04      	ldr	r3, [pc, #16]	; (8139c <pin14_edge_handler+0x24>)
   8138c:	881a      	ldrh	r2, [r3, #0]
   8138e:	3201      	adds	r2, #1
   81390:	801a      	strh	r2, [r3, #0]
   81392:	bd08      	pop	{r3, pc}
   81394:	400e1000 	.word	0x400e1000
   81398:	00081931 	.word	0x00081931
   8139c:	20070c3e 	.word	0x20070c3e

000813a0 <attach_interrupt>:
/*
* Runs once, when program starts.
* Configures pins to attach interrupts and when to trigger interrupts
*/
void attach_interrupt(void)
{
   813a0:	b570      	push	{r4, r5, r6, lr}
   813a2:	b082      	sub	sp, #8

	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   813a4:	200c      	movs	r0, #12
   813a6:	4c1a      	ldr	r4, [pc, #104]	; (81410 <attach_interrupt+0x70>)
   813a8:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);
   813aa:	200d      	movs	r0, #13
   813ac:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   813ae:	4d19      	ldr	r5, [pc, #100]	; (81414 <attach_interrupt+0x74>)
   813b0:	4628      	mov	r0, r5
   813b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   813b6:	2201      	movs	r2, #1
   813b8:	4e17      	ldr	r6, [pc, #92]	; (81418 <attach_interrupt+0x78>)
   813ba:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   813bc:	4c17      	ldr	r4, [pc, #92]	; (8141c <attach_interrupt+0x7c>)
   813be:	4620      	mov	r0, r4
   813c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   813c4:	2201      	movs	r2, #1
   813c6:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler pin51
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_RISE_EDGE, pin12_edge_handler);
   813c8:	4b15      	ldr	r3, [pc, #84]	; (81420 <attach_interrupt+0x80>)
   813ca:	9300      	str	r3, [sp, #0]
   813cc:	4628      	mov	r0, r5
   813ce:	210d      	movs	r1, #13
   813d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   813d4:	2370      	movs	r3, #112	; 0x70
   813d6:	4e13      	ldr	r6, [pc, #76]	; (81424 <attach_interrupt+0x84>)
   813d8:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler pin53
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_RISE_EDGE, pin14_edge_handler);
   813da:	4b13      	ldr	r3, [pc, #76]	; (81428 <attach_interrupt+0x88>)
   813dc:	9300      	str	r3, [sp, #0]
   813de:	4620      	mov	r0, r4
   813e0:	210c      	movs	r1, #12
   813e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   813e6:	2370      	movs	r3, #112	; 0x70
   813e8:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   813ea:	4628      	mov	r0, r5
   813ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   813f0:	4d0e      	ldr	r5, [pc, #56]	; (8142c <attach_interrupt+0x8c>)
   813f2:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   813f4:	4620      	mov	r0, r4
   813f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   813fa:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   813fc:	4b0c      	ldr	r3, [pc, #48]	; (81430 <attach_interrupt+0x90>)
   813fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81402:	601a      	str	r2, [r3, #0]
   81404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81408:	601a      	str	r2, [r3, #0]
	//Enable interrupt handling from the PIOC module:
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);
}
   8140a:	b002      	add	sp, #8
   8140c:	bd70      	pop	{r4, r5, r6, pc}
   8140e:	bf00      	nop
   81410:	00081d65 	.word	0x00081d65
   81414:	400e1200 	.word	0x400e1200
   81418:	00081989 	.word	0x00081989
   8141c:	400e1000 	.word	0x400e1000
   81420:	00081351 	.word	0x00081351
   81424:	00081bf1 	.word	0x00081bf1
   81428:	00081379 	.word	0x00081379
   8142c:	00081a15 	.word	0x00081a15
   81430:	e000e100 	.word	0xe000e100

00081434 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81434:	6943      	ldr	r3, [r0, #20]
   81436:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8143a:	bf1d      	ittte	ne
   8143c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   81440:	61c1      	strne	r1, [r0, #28]
	return 0;
   81442:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   81444:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   81446:	4770      	bx	lr

00081448 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81448:	6943      	ldr	r3, [r0, #20]
   8144a:	f013 0f01 	tst.w	r3, #1
   8144e:	d005      	beq.n	8145c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81450:	6983      	ldr	r3, [r0, #24]
   81452:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81456:	600b      	str	r3, [r1, #0]

	return 0;
   81458:	2000      	movs	r0, #0
   8145a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8145c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8145e:	4770      	bx	lr

00081460 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81464:	460e      	mov	r6, r1
   81466:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81468:	3801      	subs	r0, #1
   8146a:	2802      	cmp	r0, #2
   8146c:	d80f      	bhi.n	8148e <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8146e:	b192      	cbz	r2, 81496 <_write+0x36>
   81470:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81472:	f8df 803c 	ldr.w	r8, [pc, #60]	; 814b0 <_write+0x50>
   81476:	4f0d      	ldr	r7, [pc, #52]	; (814ac <_write+0x4c>)
   81478:	f8d8 0000 	ldr.w	r0, [r8]
   8147c:	5d31      	ldrb	r1, [r6, r4]
   8147e:	683b      	ldr	r3, [r7, #0]
   81480:	4798      	blx	r3
   81482:	2800      	cmp	r0, #0
   81484:	db0a      	blt.n	8149c <_write+0x3c>
			return -1;
		}
		++nChars;
   81486:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81488:	42a5      	cmp	r5, r4
   8148a:	d1f5      	bne.n	81478 <_write+0x18>
   8148c:	e00a      	b.n	814a4 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8148e:	f04f 30ff 	mov.w	r0, #4294967295
   81492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   81496:	2000      	movs	r0, #0
   81498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8149c:	f04f 30ff 	mov.w	r0, #4294967295
   814a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   814a4:	4620      	mov	r0, r4
	}
	return nChars;
}
   814a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   814aa:	bf00      	nop
   814ac:	20070c40 	.word	0x20070c40
   814b0:	20070c44 	.word	0x20070c44

000814b4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   814b4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   814b6:	23ac      	movs	r3, #172	; 0xac
   814b8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   814ba:	680a      	ldr	r2, [r1, #0]
   814bc:	684b      	ldr	r3, [r1, #4]
   814be:	fbb2 f3f3 	udiv	r3, r2, r3
   814c2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   814c4:	1e5c      	subs	r4, r3, #1
   814c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   814ca:	4294      	cmp	r4, r2
   814cc:	d80a      	bhi.n	814e4 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   814ce:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   814d0:	688b      	ldr	r3, [r1, #8]
   814d2:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   814d4:	f240 2302 	movw	r3, #514	; 0x202
   814d8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   814dc:	2350      	movs	r3, #80	; 0x50
   814de:	6003      	str	r3, [r0, #0]

	return 0;
   814e0:	2000      	movs	r0, #0
   814e2:	e000      	b.n	814e6 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   814e4:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   814e6:	f85d 4b04 	ldr.w	r4, [sp], #4
   814ea:	4770      	bx	lr

000814ec <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   814ec:	6943      	ldr	r3, [r0, #20]
   814ee:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   814f2:	bf1a      	itte	ne
   814f4:	61c1      	strne	r1, [r0, #28]
	return 0;
   814f6:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   814f8:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   814fa:	4770      	bx	lr

000814fc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   814fc:	6943      	ldr	r3, [r0, #20]
   814fe:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81502:	bf1d      	ittte	ne
   81504:	6983      	ldrne	r3, [r0, #24]
   81506:	700b      	strbne	r3, [r1, #0]
	return 0;
   81508:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8150a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8150c:	4770      	bx	lr
   8150e:	bf00      	nop

00081510 <coordinatesInit>:
}
/** This method initialize the coordinates for the objects and where Arlo stands
*	Positions of objects is got from the positioning system
**/
void coordinatesInit (void)
{
   81510:	b530      	push	{r4, r5, lr}
   81512:	b085      	sub	sp, #20
	int16_t object_buffer[8] = {0}; //arrayy used to be stored coordinates objects
   81514:	2500      	movs	r5, #0
   81516:	9500      	str	r5, [sp, #0]
   81518:	9501      	str	r5, [sp, #4]
   8151a:	9502      	str	r5, [sp, #8]
   8151c:	9503      	str	r5, [sp, #12]
	arlo_get_object_positions(object_buffer); //request coordinates fromn positionings system
   8151e:	4668      	mov	r0, sp
   81520:	4b19      	ldr	r3, [pc, #100]	; (81588 <coordinatesInit+0x78>)
   81522:	4798      	blx	r3

	//Robot platform present positions x and y coordinates
	coord.presentX = 200;
   81524:	4c19      	ldr	r4, [pc, #100]	; (8158c <coordinatesInit+0x7c>)
   81526:	23c8      	movs	r3, #200	; 0xc8
   81528:	8023      	strh	r3, [r4, #0]
	coord.presentY = 0;
   8152a:	8065      	strh	r5, [r4, #2]
	//Robot platform last positions x and y coordinates
	coord.lastX = 200;
   8152c:	80a3      	strh	r3, [r4, #4]
	coord.lastY = -100;
   8152e:	f64f 739c 	movw	r3, #65436	; 0xff9c
   81532:	80e3      	strh	r3, [r4, #6]

	coord.sock[0] = object_buffer[0];//X coordinate sock
   81534:	4d16      	ldr	r5, [pc, #88]	; (81590 <coordinatesInit+0x80>)
   81536:	f9bd 0000 	ldrsh.w	r0, [sp]
   8153a:	47a8      	blx	r5
   8153c:	e9c4 0104 	strd	r0, r1, [r4, #16]
	coord.sock[1] = object_buffer[1];//Y coordinate sock
   81540:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
   81544:	47a8      	blx	r5
   81546:	e9c4 0106 	strd	r0, r1, [r4, #24]

	coord.cube[0] = object_buffer[2];//X coordinate cube
   8154a:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
   8154e:	47a8      	blx	r5
   81550:	e9c4 0108 	strd	r0, r1, [r4, #32]
	coord.cube[1] = object_buffer[3];//Y coordinate cube
   81554:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   81558:	47a8      	blx	r5
   8155a:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

	coord.glass[0] = object_buffer[4];//X coordinate glass
   8155e:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
   81562:	47a8      	blx	r5
   81564:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	coord.glass[1] = object_buffer[5];//Y coordinate glass
   81568:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
   8156c:	47a8      	blx	r5
   8156e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38

	coord.box[0] = 50; //X coordinate box (hardcooded)
   81572:	2200      	movs	r2, #0
   81574:	4b07      	ldr	r3, [pc, #28]	; (81594 <coordinatesInit+0x84>)
   81576:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	coord.box[1] = -10; //Y coordinate box (hardcooded)
   8157a:	2200      	movs	r2, #0
   8157c:	4b06      	ldr	r3, [pc, #24]	; (81598 <coordinatesInit+0x88>)
   8157e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48

	//coord.box[0] = object_buffer[6]; // X coordinate box
	//coord.box[1] = object_buffer[7]; //Y coordinate box
}
   81582:	b005      	add	sp, #20
   81584:	bd30      	pop	{r4, r5, pc}
   81586:	bf00      	nop
   81588:	00080dc1 	.word	0x00080dc1
   8158c:	20070c48 	.word	0x20070c48
   81590:	00082339 	.word	0x00082339
   81594:	40490000 	.word	0x40490000
   81598:	c0240000 	.word	0xc0240000

0008159c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   8159c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8159e:	685a      	ldr	r2, [r3, #4]
   815a0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   815a2:	6842      	ldr	r2, [r0, #4]
   815a4:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   815a6:	685a      	ldr	r2, [r3, #4]
   815a8:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   815aa:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   815ac:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   815ae:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   815b0:	6803      	ldr	r3, [r0, #0]
   815b2:	3301      	adds	r3, #1
   815b4:	6003      	str	r3, [r0, #0]
   815b6:	4770      	bx	lr

000815b8 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   815b8:	6843      	ldr	r3, [r0, #4]
   815ba:	6882      	ldr	r2, [r0, #8]
   815bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   815be:	6883      	ldr	r3, [r0, #8]
   815c0:	6842      	ldr	r2, [r0, #4]
   815c2:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   815c4:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   815c6:	685a      	ldr	r2, [r3, #4]
   815c8:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   815ca:	bf04      	itt	eq
   815cc:	6882      	ldreq	r2, [r0, #8]
   815ce:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   815d0:	2200      	movs	r2, #0
   815d2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   815d4:	681a      	ldr	r2, [r3, #0]
   815d6:	3a01      	subs	r2, #1
   815d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   815da:	6818      	ldr	r0, [r3, #0]
}
   815dc:	4770      	bx	lr
   815de:	bf00      	nop

000815e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   815e0:	4b06      	ldr	r3, [pc, #24]	; (815fc <pxCurrentTCBConst2>)
   815e2:	6819      	ldr	r1, [r3, #0]
   815e4:	6808      	ldr	r0, [r1, #0]
   815e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   815ea:	f380 8809 	msr	PSP, r0
   815ee:	f04f 0000 	mov.w	r0, #0
   815f2:	f380 8811 	msr	BASEPRI, r0
   815f6:	f04e 0e0d 	orr.w	lr, lr, #13
   815fa:	4770      	bx	lr

000815fc <pxCurrentTCBConst2>:
   815fc:	20070aac 	.word	0x20070aac

00081600 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81600:	f3ef 8011 	mrs	r0, BASEPRI
   81604:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81608:	f381 8811 	msr	BASEPRI, r1
   8160c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8160e:	2000      	movs	r0, #0

00081610 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81610:	f380 8811 	msr	BASEPRI, r0
   81614:	4770      	bx	lr
   81616:	bf00      	nop

00081618 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81618:	f3ef 8009 	mrs	r0, PSP
   8161c:	4b0c      	ldr	r3, [pc, #48]	; (81650 <pxCurrentTCBConst>)
   8161e:	681a      	ldr	r2, [r3, #0]
   81620:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81624:	6010      	str	r0, [r2, #0]
   81626:	e92d 4008 	stmdb	sp!, {r3, lr}
   8162a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8162e:	f380 8811 	msr	BASEPRI, r0
   81632:	f000 f8bb 	bl	817ac <vTaskSwitchContext>
   81636:	f04f 0000 	mov.w	r0, #0
   8163a:	f380 8811 	msr	BASEPRI, r0
   8163e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81642:	6819      	ldr	r1, [r3, #0]
   81644:	6808      	ldr	r0, [r1, #0]
   81646:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8164a:	f380 8809 	msr	PSP, r0
   8164e:	4770      	bx	lr

00081650 <pxCurrentTCBConst>:
   81650:	20070aac 	.word	0x20070aac

00081654 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81654:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8165a:	4b05      	ldr	r3, [pc, #20]	; (81670 <SysTick_Handler+0x1c>)
   8165c:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8165e:	4b05      	ldr	r3, [pc, #20]	; (81674 <SysTick_Handler+0x20>)
   81660:	4798      	blx	r3
	{
		vTaskIncrementTick();
   81662:	4b05      	ldr	r3, [pc, #20]	; (81678 <SysTick_Handler+0x24>)
   81664:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81666:	2000      	movs	r0, #0
   81668:	4b04      	ldr	r3, [pc, #16]	; (8167c <SysTick_Handler+0x28>)
   8166a:	4798      	blx	r3
   8166c:	bd08      	pop	{r3, pc}
   8166e:	bf00      	nop
   81670:	e000ed04 	.word	0xe000ed04
   81674:	00081601 	.word	0x00081601
   81678:	00081681 	.word	0x00081681
   8167c:	00081611 	.word	0x00081611

00081680 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81684:	4b3d      	ldr	r3, [pc, #244]	; (8177c <vTaskIncrementTick+0xfc>)
   81686:	681b      	ldr	r3, [r3, #0]
   81688:	2b00      	cmp	r3, #0
   8168a:	d171      	bne.n	81770 <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   8168c:	4b3c      	ldr	r3, [pc, #240]	; (81780 <vTaskIncrementTick+0x100>)
   8168e:	881a      	ldrh	r2, [r3, #0]
   81690:	3201      	adds	r2, #1
   81692:	b292      	uxth	r2, r2
   81694:	801a      	strh	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81696:	881b      	ldrh	r3, [r3, #0]
   81698:	b29b      	uxth	r3, r3
   8169a:	bb03      	cbnz	r3, 816de <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8169c:	4b39      	ldr	r3, [pc, #228]	; (81784 <vTaskIncrementTick+0x104>)
   8169e:	681b      	ldr	r3, [r3, #0]
   816a0:	681b      	ldr	r3, [r3, #0]
   816a2:	b11b      	cbz	r3, 816ac <vTaskIncrementTick+0x2c>
   816a4:	4b38      	ldr	r3, [pc, #224]	; (81788 <vTaskIncrementTick+0x108>)
   816a6:	4798      	blx	r3
   816a8:	bf00      	nop
   816aa:	e7fd      	b.n	816a8 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   816ac:	4b35      	ldr	r3, [pc, #212]	; (81784 <vTaskIncrementTick+0x104>)
   816ae:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   816b0:	4a36      	ldr	r2, [pc, #216]	; (8178c <vTaskIncrementTick+0x10c>)
   816b2:	6810      	ldr	r0, [r2, #0]
   816b4:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   816b6:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   816b8:	4a35      	ldr	r2, [pc, #212]	; (81790 <vTaskIncrementTick+0x110>)
   816ba:	6811      	ldr	r1, [r2, #0]
   816bc:	3101      	adds	r1, #1
   816be:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   816c0:	681b      	ldr	r3, [r3, #0]
   816c2:	681b      	ldr	r3, [r3, #0]
   816c4:	b923      	cbnz	r3, 816d0 <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   816c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   816ca:	4b32      	ldr	r3, [pc, #200]	; (81794 <vTaskIncrementTick+0x114>)
   816cc:	801a      	strh	r2, [r3, #0]
   816ce:	e006      	b.n	816de <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   816d0:	4b2c      	ldr	r3, [pc, #176]	; (81784 <vTaskIncrementTick+0x104>)
   816d2:	681b      	ldr	r3, [r3, #0]
   816d4:	68db      	ldr	r3, [r3, #12]
   816d6:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   816d8:	889a      	ldrh	r2, [r3, #4]
   816da:	4b2e      	ldr	r3, [pc, #184]	; (81794 <vTaskIncrementTick+0x114>)
   816dc:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   816de:	4b28      	ldr	r3, [pc, #160]	; (81780 <vTaskIncrementTick+0x100>)
   816e0:	881a      	ldrh	r2, [r3, #0]
   816e2:	b292      	uxth	r2, r2
   816e4:	4b2b      	ldr	r3, [pc, #172]	; (81794 <vTaskIncrementTick+0x114>)
   816e6:	881b      	ldrh	r3, [r3, #0]
   816e8:	b29b      	uxth	r3, r3
   816ea:	429a      	cmp	r2, r3
   816ec:	d344      	bcc.n	81778 <vTaskIncrementTick+0xf8>
   816ee:	4b25      	ldr	r3, [pc, #148]	; (81784 <vTaskIncrementTick+0x104>)
   816f0:	681b      	ldr	r3, [r3, #0]
   816f2:	681b      	ldr	r3, [r3, #0]
   816f4:	b153      	cbz	r3, 8170c <vTaskIncrementTick+0x8c>
   816f6:	4b23      	ldr	r3, [pc, #140]	; (81784 <vTaskIncrementTick+0x104>)
   816f8:	681b      	ldr	r3, [r3, #0]
   816fa:	68db      	ldr	r3, [r3, #12]
   816fc:	68dc      	ldr	r4, [r3, #12]
   816fe:	88a3      	ldrh	r3, [r4, #4]
   81700:	4a1f      	ldr	r2, [pc, #124]	; (81780 <vTaskIncrementTick+0x100>)
   81702:	8812      	ldrh	r2, [r2, #0]
   81704:	b292      	uxth	r2, r2
   81706:	4293      	cmp	r3, r2
   81708:	d914      	bls.n	81734 <vTaskIncrementTick+0xb4>
   8170a:	e00f      	b.n	8172c <vTaskIncrementTick+0xac>
   8170c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81710:	4b20      	ldr	r3, [pc, #128]	; (81794 <vTaskIncrementTick+0x114>)
   81712:	801a      	strh	r2, [r3, #0]
   81714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81718:	4b1a      	ldr	r3, [pc, #104]	; (81784 <vTaskIncrementTick+0x104>)
   8171a:	681b      	ldr	r3, [r3, #0]
   8171c:	68db      	ldr	r3, [r3, #12]
   8171e:	68dc      	ldr	r4, [r3, #12]
   81720:	88a3      	ldrh	r3, [r4, #4]
   81722:	4a17      	ldr	r2, [pc, #92]	; (81780 <vTaskIncrementTick+0x100>)
   81724:	8812      	ldrh	r2, [r2, #0]
   81726:	b292      	uxth	r2, r2
   81728:	4293      	cmp	r3, r2
   8172a:	d907      	bls.n	8173c <vTaskIncrementTick+0xbc>
   8172c:	4a19      	ldr	r2, [pc, #100]	; (81794 <vTaskIncrementTick+0x114>)
   8172e:	8013      	strh	r3, [r2, #0]
   81730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81734:	4e18      	ldr	r6, [pc, #96]	; (81798 <vTaskIncrementTick+0x118>)
   81736:	4f19      	ldr	r7, [pc, #100]	; (8179c <vTaskIncrementTick+0x11c>)
   81738:	f8df 806c 	ldr.w	r8, [pc, #108]	; 817a8 <vTaskIncrementTick+0x128>
   8173c:	1d25      	adds	r5, r4, #4
   8173e:	4628      	mov	r0, r5
   81740:	47b0      	blx	r6
   81742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81744:	b113      	cbz	r3, 8174c <vTaskIncrementTick+0xcc>
   81746:	f104 0018 	add.w	r0, r4, #24
   8174a:	47b0      	blx	r6
   8174c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8174e:	683a      	ldr	r2, [r7, #0]
   81750:	4293      	cmp	r3, r2
   81752:	bf88      	it	hi
   81754:	603b      	strhi	r3, [r7, #0]
   81756:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   8175a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8175e:	4629      	mov	r1, r5
   81760:	4b0f      	ldr	r3, [pc, #60]	; (817a0 <vTaskIncrementTick+0x120>)
   81762:	4798      	blx	r3
   81764:	4b07      	ldr	r3, [pc, #28]	; (81784 <vTaskIncrementTick+0x104>)
   81766:	681b      	ldr	r3, [r3, #0]
   81768:	681b      	ldr	r3, [r3, #0]
   8176a:	2b00      	cmp	r3, #0
   8176c:	d1d4      	bne.n	81718 <vTaskIncrementTick+0x98>
   8176e:	e7cd      	b.n	8170c <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
   81770:	4b0c      	ldr	r3, [pc, #48]	; (817a4 <vTaskIncrementTick+0x124>)
   81772:	681a      	ldr	r2, [r3, #0]
   81774:	3201      	adds	r2, #1
   81776:	601a      	str	r2, [r3, #0]
   81778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8177c:	20070aa8 	.word	0x20070aa8
   81780:	20070ab4 	.word	0x20070ab4
   81784:	200709d8 	.word	0x200709d8
   81788:	00081601 	.word	0x00081601
   8178c:	20070ab8 	.word	0x20070ab8
   81790:	20070ab0 	.word	0x20070ab0
   81794:	20070138 	.word	0x20070138
   81798:	000815b9 	.word	0x000815b9
   8179c:	200709dc 	.word	0x200709dc
   817a0:	0008159d 	.word	0x0008159d
   817a4:	200709d4 	.word	0x200709d4
   817a8:	200709e0 	.word	0x200709e0

000817ac <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   817ac:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   817ae:	4b1d      	ldr	r3, [pc, #116]	; (81824 <vTaskSwitchContext+0x78>)
   817b0:	681b      	ldr	r3, [r3, #0]
   817b2:	b95b      	cbnz	r3, 817cc <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   817b4:	4b1c      	ldr	r3, [pc, #112]	; (81828 <vTaskSwitchContext+0x7c>)
   817b6:	681b      	ldr	r3, [r3, #0]
   817b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   817bc:	009b      	lsls	r3, r3, #2
   817be:	4a1b      	ldr	r2, [pc, #108]	; (8182c <vTaskSwitchContext+0x80>)
   817c0:	58d3      	ldr	r3, [r2, r3]
   817c2:	b9cb      	cbnz	r3, 817f8 <vTaskSwitchContext+0x4c>
   817c4:	4b18      	ldr	r3, [pc, #96]	; (81828 <vTaskSwitchContext+0x7c>)
   817c6:	681b      	ldr	r3, [r3, #0]
   817c8:	b953      	cbnz	r3, 817e0 <vTaskSwitchContext+0x34>
   817ca:	e005      	b.n	817d8 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   817cc:	2201      	movs	r2, #1
   817ce:	4b18      	ldr	r3, [pc, #96]	; (81830 <vTaskSwitchContext+0x84>)
   817d0:	601a      	str	r2, [r3, #0]
   817d2:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   817d4:	681a      	ldr	r2, [r3, #0]
   817d6:	b92a      	cbnz	r2, 817e4 <vTaskSwitchContext+0x38>
   817d8:	4b16      	ldr	r3, [pc, #88]	; (81834 <vTaskSwitchContext+0x88>)
   817da:	4798      	blx	r3
   817dc:	bf00      	nop
   817de:	e7fd      	b.n	817dc <vTaskSwitchContext+0x30>
   817e0:	4b11      	ldr	r3, [pc, #68]	; (81828 <vTaskSwitchContext+0x7c>)
   817e2:	4912      	ldr	r1, [pc, #72]	; (8182c <vTaskSwitchContext+0x80>)
   817e4:	681a      	ldr	r2, [r3, #0]
   817e6:	3a01      	subs	r2, #1
   817e8:	601a      	str	r2, [r3, #0]
   817ea:	681a      	ldr	r2, [r3, #0]
   817ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   817f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   817f4:	2a00      	cmp	r2, #0
   817f6:	d0ed      	beq.n	817d4 <vTaskSwitchContext+0x28>
   817f8:	4b0b      	ldr	r3, [pc, #44]	; (81828 <vTaskSwitchContext+0x7c>)
   817fa:	681b      	ldr	r3, [r3, #0]
   817fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81800:	4a0a      	ldr	r2, [pc, #40]	; (8182c <vTaskSwitchContext+0x80>)
   81802:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81806:	685a      	ldr	r2, [r3, #4]
   81808:	6852      	ldr	r2, [r2, #4]
   8180a:	605a      	str	r2, [r3, #4]
   8180c:	f103 0108 	add.w	r1, r3, #8
   81810:	428a      	cmp	r2, r1
   81812:	bf04      	itt	eq
   81814:	6852      	ldreq	r2, [r2, #4]
   81816:	605a      	streq	r2, [r3, #4]
   81818:	685b      	ldr	r3, [r3, #4]
   8181a:	68da      	ldr	r2, [r3, #12]
   8181c:	4b06      	ldr	r3, [pc, #24]	; (81838 <vTaskSwitchContext+0x8c>)
   8181e:	601a      	str	r2, [r3, #0]
   81820:	bd08      	pop	{r3, pc}
   81822:	bf00      	nop
   81824:	20070aa8 	.word	0x20070aa8
   81828:	200709dc 	.word	0x200709dc
   8182c:	200709e0 	.word	0x200709e0
   81830:	20070abc 	.word	0x20070abc
   81834:	00081601 	.word	0x00081601
   81838:	20070aac 	.word	0x20070aac

0008183c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8183c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8183e:	480e      	ldr	r0, [pc, #56]	; (81878 <sysclk_init+0x3c>)
   81840:	4b0e      	ldr	r3, [pc, #56]	; (8187c <sysclk_init+0x40>)
   81842:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81844:	2000      	movs	r0, #0
   81846:	213e      	movs	r1, #62	; 0x3e
   81848:	4b0d      	ldr	r3, [pc, #52]	; (81880 <sysclk_init+0x44>)
   8184a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8184c:	4c0d      	ldr	r4, [pc, #52]	; (81884 <sysclk_init+0x48>)
   8184e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81850:	2800      	cmp	r0, #0
   81852:	d0fc      	beq.n	8184e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81854:	4b0c      	ldr	r3, [pc, #48]	; (81888 <sysclk_init+0x4c>)
   81856:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81858:	4a0c      	ldr	r2, [pc, #48]	; (8188c <sysclk_init+0x50>)
   8185a:	4b0d      	ldr	r3, [pc, #52]	; (81890 <sysclk_init+0x54>)
   8185c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8185e:	4c0d      	ldr	r4, [pc, #52]	; (81894 <sysclk_init+0x58>)
   81860:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81862:	2800      	cmp	r0, #0
   81864:	d0fc      	beq.n	81860 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81866:	2010      	movs	r0, #16
   81868:	4b0b      	ldr	r3, [pc, #44]	; (81898 <sysclk_init+0x5c>)
   8186a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8186c:	4b0b      	ldr	r3, [pc, #44]	; (8189c <sysclk_init+0x60>)
   8186e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81870:	4801      	ldr	r0, [pc, #4]	; (81878 <sysclk_init+0x3c>)
   81872:	4b02      	ldr	r3, [pc, #8]	; (8187c <sysclk_init+0x40>)
   81874:	4798      	blx	r3
   81876:	bd10      	pop	{r4, pc}
   81878:	0501bd00 	.word	0x0501bd00
   8187c:	200700b1 	.word	0x200700b1
   81880:	00081ce1 	.word	0x00081ce1
   81884:	00081d35 	.word	0x00081d35
   81888:	00081d45 	.word	0x00081d45
   8188c:	200d3f01 	.word	0x200d3f01
   81890:	400e0600 	.word	0x400e0600
   81894:	00081d55 	.word	0x00081d55
   81898:	00081c7d 	.word	0x00081c7d
   8189c:	00081e71 	.word	0x00081e71

000818a0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   818a0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   818a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   818a6:	4b1b      	ldr	r3, [pc, #108]	; (81914 <board_init+0x74>)
   818a8:	605a      	str	r2, [r3, #4]
   818aa:	200b      	movs	r0, #11
   818ac:	4c1a      	ldr	r4, [pc, #104]	; (81918 <board_init+0x78>)
   818ae:	47a0      	blx	r4
   818b0:	200c      	movs	r0, #12
   818b2:	47a0      	blx	r4
   818b4:	200d      	movs	r0, #13
   818b6:	47a0      	blx	r4
   818b8:	200e      	movs	r0, #14
   818ba:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   818bc:	203b      	movs	r0, #59	; 0x3b
   818be:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818c2:	4c16      	ldr	r4, [pc, #88]	; (8191c <board_init+0x7c>)
   818c4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   818c6:	2055      	movs	r0, #85	; 0x55
   818c8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818cc:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   818ce:	2056      	movs	r0, #86	; 0x56
   818d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818d4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   818d6:	2068      	movs	r0, #104	; 0x68
   818d8:	4911      	ldr	r1, [pc, #68]	; (81920 <board_init+0x80>)
   818da:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   818dc:	205c      	movs	r0, #92	; 0x5c
   818de:	4911      	ldr	r1, [pc, #68]	; (81924 <board_init+0x84>)
   818e0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   818e2:	4811      	ldr	r0, [pc, #68]	; (81928 <board_init+0x88>)
   818e4:	f44f 7140 	mov.w	r1, #768	; 0x300
   818e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   818ec:	4b0f      	ldr	r3, [pc, #60]	; (8192c <board_init+0x8c>)
   818ee:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   818f0:	2011      	movs	r0, #17
   818f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   818f6:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   818f8:	2012      	movs	r0, #18
   818fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   818fe:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81900:	202b      	movs	r0, #43	; 0x2b
   81902:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81906:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81908:	202a      	movs	r0, #42	; 0x2a
   8190a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8190e:	47a0      	blx	r4
   81910:	bd10      	pop	{r4, pc}
   81912:	bf00      	nop
   81914:	400e1a50 	.word	0x400e1a50
   81918:	00081d65 	.word	0x00081d65
   8191c:	00081a25 	.word	0x00081a25
   81920:	28000079 	.word	0x28000079
   81924:	28000001 	.word	0x28000001
   81928:	400e0e00 	.word	0x400e0e00
   8192c:	00081af9 	.word	0x00081af9

00081930 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   81930:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   81934:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   81938:	bf0c      	ite	eq
   8193a:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   8193c:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   8193e:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   81940:	bf0c      	ite	eq
   81942:	2000      	moveq	r0, #0
   81944:	2001      	movne	r0, #1
   81946:	4770      	bx	lr

00081948 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81948:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8194a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8194e:	d016      	beq.n	8197e <pio_set_peripheral+0x36>
   81950:	d804      	bhi.n	8195c <pio_set_peripheral+0x14>
   81952:	b1c1      	cbz	r1, 81986 <pio_set_peripheral+0x3e>
   81954:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81958:	d00a      	beq.n	81970 <pio_set_peripheral+0x28>
   8195a:	e013      	b.n	81984 <pio_set_peripheral+0x3c>
   8195c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81960:	d011      	beq.n	81986 <pio_set_peripheral+0x3e>
   81962:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81966:	d00e      	beq.n	81986 <pio_set_peripheral+0x3e>
   81968:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8196c:	d10a      	bne.n	81984 <pio_set_peripheral+0x3c>
   8196e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81970:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81972:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81974:	400b      	ands	r3, r1
   81976:	ea23 0302 	bic.w	r3, r3, r2
   8197a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8197c:	e002      	b.n	81984 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8197e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81980:	4313      	orrs	r3, r2
   81982:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81984:	6042      	str	r2, [r0, #4]
   81986:	4770      	bx	lr

00081988 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81988:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8198a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8198e:	bf14      	ite	ne
   81990:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81992:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81994:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81998:	bf14      	ite	ne
   8199a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8199c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8199e:	f012 0f02 	tst.w	r2, #2
   819a2:	d002      	beq.n	819aa <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   819a4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   819a8:	e004      	b.n	819b4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   819aa:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   819ae:	bf18      	it	ne
   819b0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   819b4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   819b6:	6001      	str	r1, [r0, #0]
   819b8:	4770      	bx	lr
   819ba:	bf00      	nop

000819bc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   819bc:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   819be:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   819c0:	9c01      	ldr	r4, [sp, #4]
   819c2:	b10c      	cbz	r4, 819c8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   819c4:	6641      	str	r1, [r0, #100]	; 0x64
   819c6:	e000      	b.n	819ca <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   819c8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   819ca:	b10b      	cbz	r3, 819d0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   819cc:	6501      	str	r1, [r0, #80]	; 0x50
   819ce:	e000      	b.n	819d2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   819d0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   819d2:	b10a      	cbz	r2, 819d8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   819d4:	6301      	str	r1, [r0, #48]	; 0x30
   819d6:	e000      	b.n	819da <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   819d8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   819da:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   819dc:	6001      	str	r1, [r0, #0]
}
   819de:	f85d 4b04 	ldr.w	r4, [sp], #4
   819e2:	4770      	bx	lr

000819e4 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   819e4:	f012 0f10 	tst.w	r2, #16
   819e8:	d010      	beq.n	81a0c <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   819ea:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   819ee:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   819f2:	bf14      	ite	ne
   819f4:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   819f8:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   819fc:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   81a00:	bf14      	ite	ne
   81a02:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   81a06:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   81a0a:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   81a0c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   81a10:	4770      	bx	lr
   81a12:	bf00      	nop

00081a14 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   81a14:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   81a16:	6401      	str	r1, [r0, #64]	; 0x40
   81a18:	4770      	bx	lr
   81a1a:	bf00      	nop

00081a1c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81a1c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81a1e:	4770      	bx	lr

00081a20 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81a20:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81a22:	4770      	bx	lr

00081a24 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81a24:	b570      	push	{r4, r5, r6, lr}
   81a26:	b082      	sub	sp, #8
   81a28:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81a2a:	0944      	lsrs	r4, r0, #5
   81a2c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   81a30:	f204 7407 	addw	r4, r4, #1799	; 0x707
   81a34:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81a36:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   81a3a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81a3e:	d030      	beq.n	81aa2 <pio_configure_pin+0x7e>
   81a40:	d806      	bhi.n	81a50 <pio_configure_pin+0x2c>
   81a42:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   81a46:	d00a      	beq.n	81a5e <pio_configure_pin+0x3a>
   81a48:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81a4c:	d018      	beq.n	81a80 <pio_configure_pin+0x5c>
   81a4e:	e049      	b.n	81ae4 <pio_configure_pin+0xc0>
   81a50:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81a54:	d030      	beq.n	81ab8 <pio_configure_pin+0x94>
   81a56:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81a5a:	d02d      	beq.n	81ab8 <pio_configure_pin+0x94>
   81a5c:	e042      	b.n	81ae4 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81a5e:	f000 001f 	and.w	r0, r0, #31
   81a62:	2401      	movs	r4, #1
   81a64:	4084      	lsls	r4, r0
   81a66:	4630      	mov	r0, r6
   81a68:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a6c:	4622      	mov	r2, r4
   81a6e:	4b1f      	ldr	r3, [pc, #124]	; (81aec <pio_configure_pin+0xc8>)
   81a70:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81a72:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81a76:	bf14      	ite	ne
   81a78:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81a7a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81a7c:	2001      	movs	r0, #1
   81a7e:	e032      	b.n	81ae6 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81a80:	f000 001f 	and.w	r0, r0, #31
   81a84:	2401      	movs	r4, #1
   81a86:	4084      	lsls	r4, r0
   81a88:	4630      	mov	r0, r6
   81a8a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81a8e:	4622      	mov	r2, r4
   81a90:	4b16      	ldr	r3, [pc, #88]	; (81aec <pio_configure_pin+0xc8>)
   81a92:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81a94:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81a98:	bf14      	ite	ne
   81a9a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81a9c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81a9e:	2001      	movs	r0, #1
   81aa0:	e021      	b.n	81ae6 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81aa2:	f000 011f 	and.w	r1, r0, #31
   81aa6:	2401      	movs	r4, #1
   81aa8:	4630      	mov	r0, r6
   81aaa:	fa04 f101 	lsl.w	r1, r4, r1
   81aae:	462a      	mov	r2, r5
   81ab0:	4b0f      	ldr	r3, [pc, #60]	; (81af0 <pio_configure_pin+0xcc>)
   81ab2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81ab4:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   81ab6:	e016      	b.n	81ae6 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81ab8:	f000 011f 	and.w	r1, r0, #31
   81abc:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81abe:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81ac2:	ea05 0304 	and.w	r3, r5, r4
   81ac6:	9300      	str	r3, [sp, #0]
   81ac8:	4630      	mov	r0, r6
   81aca:	fa04 f101 	lsl.w	r1, r4, r1
   81ace:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81ad2:	bf14      	ite	ne
   81ad4:	2200      	movne	r2, #0
   81ad6:	2201      	moveq	r2, #1
   81ad8:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81adc:	4d05      	ldr	r5, [pc, #20]	; (81af4 <pio_configure_pin+0xd0>)
   81ade:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   81ae0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81ae2:	e000      	b.n	81ae6 <pio_configure_pin+0xc2>

	default:
		return 0;
   81ae4:	2000      	movs	r0, #0
	}

	return 1;
}
   81ae6:	b002      	add	sp, #8
   81ae8:	bd70      	pop	{r4, r5, r6, pc}
   81aea:	bf00      	nop
   81aec:	00081949 	.word	0x00081949
   81af0:	00081989 	.word	0x00081989
   81af4:	000819bd 	.word	0x000819bd

00081af8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81af8:	b5f0      	push	{r4, r5, r6, r7, lr}
   81afa:	b083      	sub	sp, #12
   81afc:	4607      	mov	r7, r0
   81afe:	460e      	mov	r6, r1
   81b00:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81b02:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   81b06:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81b0a:	d026      	beq.n	81b5a <pio_configure_pin_group+0x62>
   81b0c:	d806      	bhi.n	81b1c <pio_configure_pin_group+0x24>
   81b0e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   81b12:	d00a      	beq.n	81b2a <pio_configure_pin_group+0x32>
   81b14:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81b18:	d013      	beq.n	81b42 <pio_configure_pin_group+0x4a>
   81b1a:	e034      	b.n	81b86 <pio_configure_pin_group+0x8e>
   81b1c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81b20:	d01f      	beq.n	81b62 <pio_configure_pin_group+0x6a>
   81b22:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81b26:	d01c      	beq.n	81b62 <pio_configure_pin_group+0x6a>
   81b28:	e02d      	b.n	81b86 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81b2a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b2e:	4632      	mov	r2, r6
   81b30:	4b16      	ldr	r3, [pc, #88]	; (81b8c <pio_configure_pin_group+0x94>)
   81b32:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81b34:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81b38:	bf14      	ite	ne
   81b3a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81b3c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81b3e:	2001      	movs	r0, #1
   81b40:	e022      	b.n	81b88 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81b42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81b46:	4632      	mov	r2, r6
   81b48:	4b10      	ldr	r3, [pc, #64]	; (81b8c <pio_configure_pin_group+0x94>)
   81b4a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81b4c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81b50:	bf14      	ite	ne
   81b52:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81b54:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81b56:	2001      	movs	r0, #1
   81b58:	e016      	b.n	81b88 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81b5a:	4b0d      	ldr	r3, [pc, #52]	; (81b90 <pio_configure_pin_group+0x98>)
   81b5c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81b5e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81b60:	e012      	b.n	81b88 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81b62:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81b66:	f005 0301 	and.w	r3, r5, #1
   81b6a:	9300      	str	r3, [sp, #0]
   81b6c:	4638      	mov	r0, r7
   81b6e:	4631      	mov	r1, r6
   81b70:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81b74:	bf14      	ite	ne
   81b76:	2200      	movne	r2, #0
   81b78:	2201      	moveq	r2, #1
   81b7a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81b7e:	4c05      	ldr	r4, [pc, #20]	; (81b94 <pio_configure_pin_group+0x9c>)
   81b80:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81b82:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81b84:	e000      	b.n	81b88 <pio_configure_pin_group+0x90>

	default:
		return 0;
   81b86:	2000      	movs	r0, #0
	}

	return 1;
}
   81b88:	b003      	add	sp, #12
   81b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81b8c:	00081949 	.word	0x00081949
   81b90:	00081989 	.word	0x00081989
   81b94:	000819bd 	.word	0x000819bd

00081b98 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81b9c:	4604      	mov	r4, r0
   81b9e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81ba0:	4b10      	ldr	r3, [pc, #64]	; (81be4 <pio_handler_process+0x4c>)
   81ba2:	4798      	blx	r3
   81ba4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81ba6:	4620      	mov	r0, r4
   81ba8:	4b0f      	ldr	r3, [pc, #60]	; (81be8 <pio_handler_process+0x50>)
   81baa:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81bac:	4005      	ands	r5, r0
   81bae:	d017      	beq.n	81be0 <pio_handler_process+0x48>
   81bb0:	4f0e      	ldr	r7, [pc, #56]	; (81bec <pio_handler_process+0x54>)
   81bb2:	f107 040c 	add.w	r4, r7, #12
   81bb6:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81bb8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81bbc:	42b3      	cmp	r3, r6
   81bbe:	d10a      	bne.n	81bd6 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81bc0:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81bc4:	4229      	tst	r1, r5
   81bc6:	d006      	beq.n	81bd6 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81bc8:	6823      	ldr	r3, [r4, #0]
   81bca:	4630      	mov	r0, r6
   81bcc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81bce:	f854 3c08 	ldr.w	r3, [r4, #-8]
   81bd2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81bd6:	42bc      	cmp	r4, r7
   81bd8:	d002      	beq.n	81be0 <pio_handler_process+0x48>
   81bda:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81bdc:	2d00      	cmp	r5, #0
   81bde:	d1eb      	bne.n	81bb8 <pio_handler_process+0x20>
   81be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81be4:	00081a1d 	.word	0x00081a1d
   81be8:	00081a21 	.word	0x00081a21
   81bec:	20070ac4 	.word	0x20070ac4

00081bf0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   81bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   81bf2:	4c0b      	ldr	r4, [pc, #44]	; (81c20 <pio_handler_set+0x30>)
   81bf4:	6824      	ldr	r4, [r4, #0]
   81bf6:	2c06      	cmp	r4, #6
   81bf8:	d810      	bhi.n	81c1c <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   81bfa:	4f0a      	ldr	r7, [pc, #40]	; (81c24 <pio_handler_set+0x34>)
   81bfc:	0126      	lsls	r6, r4, #4
   81bfe:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   81c00:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   81c02:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   81c04:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   81c06:	9906      	ldr	r1, [sp, #24]
   81c08:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   81c0a:	3401      	adds	r4, #1
   81c0c:	4904      	ldr	r1, [pc, #16]	; (81c20 <pio_handler_set+0x30>)
   81c0e:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81c10:	4611      	mov	r1, r2
   81c12:	461a      	mov	r2, r3
   81c14:	4b04      	ldr	r3, [pc, #16]	; (81c28 <pio_handler_set+0x38>)
   81c16:	4798      	blx	r3

	return 0;
   81c18:	2000      	movs	r0, #0
   81c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   81c1c:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   81c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81c20:	20070ac0 	.word	0x20070ac0
   81c24:	20070ac4 	.word	0x20070ac4
   81c28:	000819e5 	.word	0x000819e5

00081c2c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81c2c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81c2e:	4802      	ldr	r0, [pc, #8]	; (81c38 <PIOA_Handler+0xc>)
   81c30:	210b      	movs	r1, #11
   81c32:	4b02      	ldr	r3, [pc, #8]	; (81c3c <PIOA_Handler+0x10>)
   81c34:	4798      	blx	r3
   81c36:	bd08      	pop	{r3, pc}
   81c38:	400e0e00 	.word	0x400e0e00
   81c3c:	00081b99 	.word	0x00081b99

00081c40 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81c40:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81c42:	4802      	ldr	r0, [pc, #8]	; (81c4c <PIOB_Handler+0xc>)
   81c44:	210c      	movs	r1, #12
   81c46:	4b02      	ldr	r3, [pc, #8]	; (81c50 <PIOB_Handler+0x10>)
   81c48:	4798      	blx	r3
   81c4a:	bd08      	pop	{r3, pc}
   81c4c:	400e1000 	.word	0x400e1000
   81c50:	00081b99 	.word	0x00081b99

00081c54 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81c54:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81c56:	4802      	ldr	r0, [pc, #8]	; (81c60 <PIOC_Handler+0xc>)
   81c58:	210d      	movs	r1, #13
   81c5a:	4b02      	ldr	r3, [pc, #8]	; (81c64 <PIOC_Handler+0x10>)
   81c5c:	4798      	blx	r3
   81c5e:	bd08      	pop	{r3, pc}
   81c60:	400e1200 	.word	0x400e1200
   81c64:	00081b99 	.word	0x00081b99

00081c68 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81c68:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81c6a:	4802      	ldr	r0, [pc, #8]	; (81c74 <PIOD_Handler+0xc>)
   81c6c:	210e      	movs	r1, #14
   81c6e:	4b02      	ldr	r3, [pc, #8]	; (81c78 <PIOD_Handler+0x10>)
   81c70:	4798      	blx	r3
   81c72:	bd08      	pop	{r3, pc}
   81c74:	400e1400 	.word	0x400e1400
   81c78:	00081b99 	.word	0x00081b99

00081c7c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81c7c:	4b17      	ldr	r3, [pc, #92]	; (81cdc <pmc_switch_mck_to_pllack+0x60>)
   81c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81c80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   81c84:	4310      	orrs	r0, r2
   81c86:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81c8a:	f013 0f08 	tst.w	r3, #8
   81c8e:	d109      	bne.n	81ca4 <pmc_switch_mck_to_pllack+0x28>
   81c90:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81c94:	4911      	ldr	r1, [pc, #68]	; (81cdc <pmc_switch_mck_to_pllack+0x60>)
   81c96:	e001      	b.n	81c9c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81c98:	3b01      	subs	r3, #1
   81c9a:	d019      	beq.n	81cd0 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81c9c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81c9e:	f012 0f08 	tst.w	r2, #8
   81ca2:	d0f9      	beq.n	81c98 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81ca4:	4b0d      	ldr	r3, [pc, #52]	; (81cdc <pmc_switch_mck_to_pllack+0x60>)
   81ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81ca8:	f022 0203 	bic.w	r2, r2, #3
   81cac:	f042 0202 	orr.w	r2, r2, #2
   81cb0:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81cb2:	6e98      	ldr	r0, [r3, #104]	; 0x68
   81cb4:	f010 0008 	ands.w	r0, r0, #8
   81cb8:	d10c      	bne.n	81cd4 <pmc_switch_mck_to_pllack+0x58>
   81cba:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81cbe:	4907      	ldr	r1, [pc, #28]	; (81cdc <pmc_switch_mck_to_pllack+0x60>)
   81cc0:	e001      	b.n	81cc6 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81cc2:	3b01      	subs	r3, #1
   81cc4:	d008      	beq.n	81cd8 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81cc6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81cc8:	f012 0f08 	tst.w	r2, #8
   81ccc:	d0f9      	beq.n	81cc2 <pmc_switch_mck_to_pllack+0x46>
   81cce:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81cd0:	2001      	movs	r0, #1
   81cd2:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81cd4:	2000      	movs	r0, #0
   81cd6:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81cd8:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81cda:	4770      	bx	lr
   81cdc:	400e0600 	.word	0x400e0600

00081ce0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81ce0:	b138      	cbz	r0, 81cf2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81ce2:	4911      	ldr	r1, [pc, #68]	; (81d28 <pmc_switch_mainck_to_xtal+0x48>)
   81ce4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81ce6:	4a11      	ldr	r2, [pc, #68]	; (81d2c <pmc_switch_mainck_to_xtal+0x4c>)
   81ce8:	401a      	ands	r2, r3
   81cea:	4b11      	ldr	r3, [pc, #68]	; (81d30 <pmc_switch_mainck_to_xtal+0x50>)
   81cec:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81cee:	620b      	str	r3, [r1, #32]
   81cf0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81cf2:	4a0d      	ldr	r2, [pc, #52]	; (81d28 <pmc_switch_mainck_to_xtal+0x48>)
   81cf4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81cf6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81cfa:	f023 0303 	bic.w	r3, r3, #3
   81cfe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81d02:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81d06:	0209      	lsls	r1, r1, #8
   81d08:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81d0a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81d0c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81d0e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81d10:	f013 0f01 	tst.w	r3, #1
   81d14:	d0fb      	beq.n	81d0e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81d16:	4a04      	ldr	r2, [pc, #16]	; (81d28 <pmc_switch_mainck_to_xtal+0x48>)
   81d18:	6a13      	ldr	r3, [r2, #32]
   81d1a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81d22:	6213      	str	r3, [r2, #32]
   81d24:	4770      	bx	lr
   81d26:	bf00      	nop
   81d28:	400e0600 	.word	0x400e0600
   81d2c:	fec8fffc 	.word	0xfec8fffc
   81d30:	01370002 	.word	0x01370002

00081d34 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81d34:	4b02      	ldr	r3, [pc, #8]	; (81d40 <pmc_osc_is_ready_mainck+0xc>)
   81d36:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81d38:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81d3c:	4770      	bx	lr
   81d3e:	bf00      	nop
   81d40:	400e0600 	.word	0x400e0600

00081d44 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81d44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81d48:	4b01      	ldr	r3, [pc, #4]	; (81d50 <pmc_disable_pllack+0xc>)
   81d4a:	629a      	str	r2, [r3, #40]	; 0x28
   81d4c:	4770      	bx	lr
   81d4e:	bf00      	nop
   81d50:	400e0600 	.word	0x400e0600

00081d54 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81d54:	4b02      	ldr	r3, [pc, #8]	; (81d60 <pmc_is_locked_pllack+0xc>)
   81d56:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81d58:	f000 0002 	and.w	r0, r0, #2
   81d5c:	4770      	bx	lr
   81d5e:	bf00      	nop
   81d60:	400e0600 	.word	0x400e0600

00081d64 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81d64:	282c      	cmp	r0, #44	; 0x2c
   81d66:	d820      	bhi.n	81daa <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81d68:	281f      	cmp	r0, #31
   81d6a:	d80d      	bhi.n	81d88 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81d6c:	4b12      	ldr	r3, [pc, #72]	; (81db8 <pmc_enable_periph_clk+0x54>)
   81d6e:	699a      	ldr	r2, [r3, #24]
   81d70:	2301      	movs	r3, #1
   81d72:	4083      	lsls	r3, r0
   81d74:	401a      	ands	r2, r3
   81d76:	4293      	cmp	r3, r2
   81d78:	d019      	beq.n	81dae <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81d7a:	2301      	movs	r3, #1
   81d7c:	fa03 f000 	lsl.w	r0, r3, r0
   81d80:	4b0d      	ldr	r3, [pc, #52]	; (81db8 <pmc_enable_periph_clk+0x54>)
   81d82:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81d84:	2000      	movs	r0, #0
   81d86:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81d88:	4b0b      	ldr	r3, [pc, #44]	; (81db8 <pmc_enable_periph_clk+0x54>)
   81d8a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   81d8e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81d90:	2301      	movs	r3, #1
   81d92:	4083      	lsls	r3, r0
   81d94:	401a      	ands	r2, r3
   81d96:	4293      	cmp	r3, r2
   81d98:	d00b      	beq.n	81db2 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   81d9a:	2301      	movs	r3, #1
   81d9c:	fa03 f000 	lsl.w	r0, r3, r0
   81da0:	4b05      	ldr	r3, [pc, #20]	; (81db8 <pmc_enable_periph_clk+0x54>)
   81da2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81da6:	2000      	movs	r0, #0
   81da8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   81daa:	2001      	movs	r0, #1
   81dac:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81dae:	2000      	movs	r0, #0
   81db0:	4770      	bx	lr
   81db2:	2000      	movs	r0, #0
}
   81db4:	4770      	bx	lr
   81db6:	bf00      	nop
   81db8:	400e0600 	.word	0x400e0600

00081dbc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81dbc:	e7fe      	b.n	81dbc <Dummy_Handler>
   81dbe:	bf00      	nop

00081dc0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81dc0:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81dc2:	4b1e      	ldr	r3, [pc, #120]	; (81e3c <Reset_Handler+0x7c>)
   81dc4:	4a1e      	ldr	r2, [pc, #120]	; (81e40 <Reset_Handler+0x80>)
   81dc6:	429a      	cmp	r2, r3
   81dc8:	d003      	beq.n	81dd2 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81dca:	4b1e      	ldr	r3, [pc, #120]	; (81e44 <Reset_Handler+0x84>)
   81dcc:	4a1b      	ldr	r2, [pc, #108]	; (81e3c <Reset_Handler+0x7c>)
   81dce:	429a      	cmp	r2, r3
   81dd0:	d304      	bcc.n	81ddc <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81dd2:	4b1d      	ldr	r3, [pc, #116]	; (81e48 <Reset_Handler+0x88>)
   81dd4:	4a1d      	ldr	r2, [pc, #116]	; (81e4c <Reset_Handler+0x8c>)
   81dd6:	429a      	cmp	r2, r3
   81dd8:	d30f      	bcc.n	81dfa <Reset_Handler+0x3a>
   81dda:	e01a      	b.n	81e12 <Reset_Handler+0x52>
   81ddc:	4b1c      	ldr	r3, [pc, #112]	; (81e50 <Reset_Handler+0x90>)
   81dde:	4c1d      	ldr	r4, [pc, #116]	; (81e54 <Reset_Handler+0x94>)
   81de0:	1ae4      	subs	r4, r4, r3
   81de2:	f024 0403 	bic.w	r4, r4, #3
   81de6:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81de8:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81dea:	4814      	ldr	r0, [pc, #80]	; (81e3c <Reset_Handler+0x7c>)
   81dec:	4914      	ldr	r1, [pc, #80]	; (81e40 <Reset_Handler+0x80>)
   81dee:	585a      	ldr	r2, [r3, r1]
   81df0:	501a      	str	r2, [r3, r0]
   81df2:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81df4:	42a3      	cmp	r3, r4
   81df6:	d1fa      	bne.n	81dee <Reset_Handler+0x2e>
   81df8:	e7eb      	b.n	81dd2 <Reset_Handler+0x12>
   81dfa:	4b17      	ldr	r3, [pc, #92]	; (81e58 <Reset_Handler+0x98>)
   81dfc:	4917      	ldr	r1, [pc, #92]	; (81e5c <Reset_Handler+0x9c>)
   81dfe:	1ac9      	subs	r1, r1, r3
   81e00:	f021 0103 	bic.w	r1, r1, #3
   81e04:	1d1a      	adds	r2, r3, #4
   81e06:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81e08:	2200      	movs	r2, #0
   81e0a:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81e0e:	428b      	cmp	r3, r1
   81e10:	d1fb      	bne.n	81e0a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81e12:	4a13      	ldr	r2, [pc, #76]	; (81e60 <Reset_Handler+0xa0>)
   81e14:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81e18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81e1c:	4911      	ldr	r1, [pc, #68]	; (81e64 <Reset_Handler+0xa4>)
   81e1e:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81e20:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81e24:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81e28:	d203      	bcs.n	81e32 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81e2a:	688a      	ldr	r2, [r1, #8]
   81e2c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81e30:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81e32:	4b0d      	ldr	r3, [pc, #52]	; (81e68 <Reset_Handler+0xa8>)
   81e34:	4798      	blx	r3

	/* Branch to main function */
	main();
   81e36:	4b0d      	ldr	r3, [pc, #52]	; (81e6c <Reset_Handler+0xac>)
   81e38:	4798      	blx	r3
   81e3a:	e7fe      	b.n	81e3a <Reset_Handler+0x7a>
   81e3c:	20070000 	.word	0x20070000
   81e40:	00085564 	.word	0x00085564
   81e44:	200709a4 	.word	0x200709a4
   81e48:	20070c9c 	.word	0x20070c9c
   81e4c:	200709a8 	.word	0x200709a8
   81e50:	20070004 	.word	0x20070004
   81e54:	200709a7 	.word	0x200709a7
   81e58:	200709a4 	.word	0x200709a4
   81e5c:	20070c97 	.word	0x20070c97
   81e60:	00080000 	.word	0x00080000
   81e64:	e000ed00 	.word	0xe000ed00
   81e68:	00082405 	.word	0x00082405
   81e6c:	00081fdd 	.word	0x00081fdd

00081e70 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81e70:	4b3e      	ldr	r3, [pc, #248]	; (81f6c <SystemCoreClockUpdate+0xfc>)
   81e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81e74:	f003 0303 	and.w	r3, r3, #3
   81e78:	2b03      	cmp	r3, #3
   81e7a:	d85f      	bhi.n	81f3c <SystemCoreClockUpdate+0xcc>
   81e7c:	e8df f003 	tbb	[pc, r3]
   81e80:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81e84:	4b3a      	ldr	r3, [pc, #232]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81e86:	695b      	ldr	r3, [r3, #20]
   81e88:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81e8c:	bf14      	ite	ne
   81e8e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81e92:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81e96:	4b37      	ldr	r3, [pc, #220]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81e98:	601a      	str	r2, [r3, #0]
   81e9a:	e04f      	b.n	81f3c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81e9c:	4b33      	ldr	r3, [pc, #204]	; (81f6c <SystemCoreClockUpdate+0xfc>)
   81e9e:	6a1b      	ldr	r3, [r3, #32]
   81ea0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81ea4:	d003      	beq.n	81eae <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81ea6:	4a34      	ldr	r2, [pc, #208]	; (81f78 <SystemCoreClockUpdate+0x108>)
   81ea8:	4b32      	ldr	r3, [pc, #200]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81eaa:	601a      	str	r2, [r3, #0]
   81eac:	e046      	b.n	81f3c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81eae:	4a33      	ldr	r2, [pc, #204]	; (81f7c <SystemCoreClockUpdate+0x10c>)
   81eb0:	4b30      	ldr	r3, [pc, #192]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81eb2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81eb4:	4b2d      	ldr	r3, [pc, #180]	; (81f6c <SystemCoreClockUpdate+0xfc>)
   81eb6:	6a1b      	ldr	r3, [r3, #32]
   81eb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81ebc:	2b10      	cmp	r3, #16
   81ebe:	d002      	beq.n	81ec6 <SystemCoreClockUpdate+0x56>
   81ec0:	2b20      	cmp	r3, #32
   81ec2:	d004      	beq.n	81ece <SystemCoreClockUpdate+0x5e>
   81ec4:	e03a      	b.n	81f3c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81ec6:	4a2e      	ldr	r2, [pc, #184]	; (81f80 <SystemCoreClockUpdate+0x110>)
   81ec8:	4b2a      	ldr	r3, [pc, #168]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81eca:	601a      	str	r2, [r3, #0]
				break;
   81ecc:	e036      	b.n	81f3c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81ece:	4a2a      	ldr	r2, [pc, #168]	; (81f78 <SystemCoreClockUpdate+0x108>)
   81ed0:	4b28      	ldr	r3, [pc, #160]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81ed2:	601a      	str	r2, [r3, #0]
				break;
   81ed4:	e032      	b.n	81f3c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81ed6:	4b25      	ldr	r3, [pc, #148]	; (81f6c <SystemCoreClockUpdate+0xfc>)
   81ed8:	6a1b      	ldr	r3, [r3, #32]
   81eda:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81ede:	d003      	beq.n	81ee8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81ee0:	4a25      	ldr	r2, [pc, #148]	; (81f78 <SystemCoreClockUpdate+0x108>)
   81ee2:	4b24      	ldr	r3, [pc, #144]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81ee4:	601a      	str	r2, [r3, #0]
   81ee6:	e012      	b.n	81f0e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81ee8:	4a24      	ldr	r2, [pc, #144]	; (81f7c <SystemCoreClockUpdate+0x10c>)
   81eea:	4b22      	ldr	r3, [pc, #136]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81eec:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81eee:	4b1f      	ldr	r3, [pc, #124]	; (81f6c <SystemCoreClockUpdate+0xfc>)
   81ef0:	6a1b      	ldr	r3, [r3, #32]
   81ef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81ef6:	2b10      	cmp	r3, #16
   81ef8:	d002      	beq.n	81f00 <SystemCoreClockUpdate+0x90>
   81efa:	2b20      	cmp	r3, #32
   81efc:	d004      	beq.n	81f08 <SystemCoreClockUpdate+0x98>
   81efe:	e006      	b.n	81f0e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81f00:	4a1f      	ldr	r2, [pc, #124]	; (81f80 <SystemCoreClockUpdate+0x110>)
   81f02:	4b1c      	ldr	r3, [pc, #112]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81f04:	601a      	str	r2, [r3, #0]
				break;
   81f06:	e002      	b.n	81f0e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81f08:	4a1b      	ldr	r2, [pc, #108]	; (81f78 <SystemCoreClockUpdate+0x108>)
   81f0a:	4b1a      	ldr	r3, [pc, #104]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81f0c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81f0e:	4b17      	ldr	r3, [pc, #92]	; (81f6c <SystemCoreClockUpdate+0xfc>)
   81f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81f12:	f003 0303 	and.w	r3, r3, #3
   81f16:	2b02      	cmp	r3, #2
   81f18:	d10d      	bne.n	81f36 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81f1a:	4b14      	ldr	r3, [pc, #80]	; (81f6c <SystemCoreClockUpdate+0xfc>)
   81f1c:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81f1e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81f20:	4b14      	ldr	r3, [pc, #80]	; (81f74 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81f22:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81f26:	681a      	ldr	r2, [r3, #0]
   81f28:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81f2c:	b2c9      	uxtb	r1, r1
   81f2e:	fbb2 f2f1 	udiv	r2, r2, r1
   81f32:	601a      	str	r2, [r3, #0]
   81f34:	e002      	b.n	81f3c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81f36:	4a13      	ldr	r2, [pc, #76]	; (81f84 <SystemCoreClockUpdate+0x114>)
   81f38:	4b0e      	ldr	r3, [pc, #56]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81f3a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81f3c:	4b0b      	ldr	r3, [pc, #44]	; (81f6c <SystemCoreClockUpdate+0xfc>)
   81f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81f44:	2b70      	cmp	r3, #112	; 0x70
   81f46:	d107      	bne.n	81f58 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81f48:	4b0a      	ldr	r3, [pc, #40]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81f4a:	681a      	ldr	r2, [r3, #0]
   81f4c:	490e      	ldr	r1, [pc, #56]	; (81f88 <SystemCoreClockUpdate+0x118>)
   81f4e:	fba1 0202 	umull	r0, r2, r1, r2
   81f52:	0852      	lsrs	r2, r2, #1
   81f54:	601a      	str	r2, [r3, #0]
   81f56:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81f58:	4b04      	ldr	r3, [pc, #16]	; (81f6c <SystemCoreClockUpdate+0xfc>)
   81f5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81f5c:	4b05      	ldr	r3, [pc, #20]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81f5e:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81f62:	681a      	ldr	r2, [r3, #0]
   81f64:	40ca      	lsrs	r2, r1
   81f66:	601a      	str	r2, [r3, #0]
   81f68:	4770      	bx	lr
   81f6a:	bf00      	nop
   81f6c:	400e0600 	.word	0x400e0600
   81f70:	400e1a10 	.word	0x400e1a10
   81f74:	2007013c 	.word	0x2007013c
   81f78:	00b71b00 	.word	0x00b71b00
   81f7c:	003d0900 	.word	0x003d0900
   81f80:	007a1200 	.word	0x007a1200
   81f84:	0e4e1c00 	.word	0x0e4e1c00
   81f88:	aaaaaaab 	.word	0xaaaaaaab

00081f8c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81f8c:	4b09      	ldr	r3, [pc, #36]	; (81fb4 <_sbrk+0x28>)
   81f8e:	681b      	ldr	r3, [r3, #0]
   81f90:	b913      	cbnz	r3, 81f98 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81f92:	4a09      	ldr	r2, [pc, #36]	; (81fb8 <_sbrk+0x2c>)
   81f94:	4b07      	ldr	r3, [pc, #28]	; (81fb4 <_sbrk+0x28>)
   81f96:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81f98:	4b06      	ldr	r3, [pc, #24]	; (81fb4 <_sbrk+0x28>)
   81f9a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81f9c:	181a      	adds	r2, r3, r0
   81f9e:	4907      	ldr	r1, [pc, #28]	; (81fbc <_sbrk+0x30>)
   81fa0:	4291      	cmp	r1, r2
   81fa2:	db04      	blt.n	81fae <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81fa4:	4610      	mov	r0, r2
   81fa6:	4a03      	ldr	r2, [pc, #12]	; (81fb4 <_sbrk+0x28>)
   81fa8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81faa:	4618      	mov	r0, r3
   81fac:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81fae:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81fb2:	4770      	bx	lr
   81fb4:	20070b34 	.word	0x20070b34
   81fb8:	20072ca0 	.word	0x20072ca0
   81fbc:	20087ffc 	.word	0x20087ffc

00081fc0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81fc0:	f04f 30ff 	mov.w	r0, #4294967295
   81fc4:	4770      	bx	lr
   81fc6:	bf00      	nop

00081fc8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81fcc:	604b      	str	r3, [r1, #4]

	return 0;
}
   81fce:	2000      	movs	r0, #0
   81fd0:	4770      	bx	lr
   81fd2:	bf00      	nop

00081fd4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81fd4:	2001      	movs	r0, #1
   81fd6:	4770      	bx	lr

00081fd8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81fd8:	2000      	movs	r0, #0
   81fda:	4770      	bx	lr

00081fdc <main>:
#include "PwmFunctions.h"
#include "conf_board.h"
#include "arlo/Arlo.h"

int main (void)
{
   81fdc:	b510      	push	{r4, lr}
	sysclk_init();
   81fde:	4b15      	ldr	r3, [pc, #84]	; (82034 <main+0x58>)
   81fe0:	4798      	blx	r3
	/* Board initialization, for communication and printouts */
	board_init();
   81fe2:	4b15      	ldr	r3, [pc, #84]	; (82038 <main+0x5c>)
   81fe4:	4798      	blx	r3
	//delay_s(3);
	/* Serial communication initialization, for printouts */
	configureConsole();
   81fe6:	4b15      	ldr	r3, [pc, #84]	; (8203c <main+0x60>)
   81fe8:	4798      	blx	r3
	/* Interrupt initialization */
	attach_interrupt();
   81fea:	4b15      	ldr	r3, [pc, #84]	; (82040 <main+0x64>)
   81fec:	4798      	blx	r3
	/* PWM initialize */
	PWM_init();
   81fee:	4b15      	ldr	r3, [pc, #84]	; (82044 <main+0x68>)
   81ff0:	4798      	blx	r3
	delay_s(3);
   81ff2:	4815      	ldr	r0, [pc, #84]	; (82048 <main+0x6c>)
   81ff4:	4b15      	ldr	r3, [pc, #84]	; (8204c <main+0x70>)
   81ff6:	4798      	blx	r3
	/* Arlo robot initialization */
	//arlo_init();
	coordinatesInit();
   81ff8:	4b15      	ldr	r3, [pc, #84]	; (82050 <main+0x74>)
   81ffa:	4798      	blx	r3
	/* Print info in terminal Window */
	printf("-- %s\n\r", BOARD_NAME);
   81ffc:	4815      	ldr	r0, [pc, #84]	; (82054 <main+0x78>)
   81ffe:	4916      	ldr	r1, [pc, #88]	; (82058 <main+0x7c>)
   82000:	4c16      	ldr	r4, [pc, #88]	; (8205c <main+0x80>)
   82002:	47a0      	blx	r4
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
   82004:	4816      	ldr	r0, [pc, #88]	; (82060 <main+0x84>)
   82006:	4917      	ldr	r1, [pc, #92]	; (82064 <main+0x88>)
   82008:	4a17      	ldr	r2, [pc, #92]	; (82068 <main+0x8c>)
   8200a:	47a0      	blx	r4
	
	UnityBegin("../tests/test_pwm.c");
   8200c:	4817      	ldr	r0, [pc, #92]	; (8206c <main+0x90>)
   8200e:	4b18      	ldr	r3, [pc, #96]	; (82070 <main+0x94>)
   82010:	4798      	blx	r3
	RUN_TEST(pwm_enable,0);
   82012:	4818      	ldr	r0, [pc, #96]	; (82074 <main+0x98>)
   82014:	4918      	ldr	r1, [pc, #96]	; (82078 <main+0x9c>)
   82016:	2200      	movs	r2, #0
   82018:	4c18      	ldr	r4, [pc, #96]	; (8207c <main+0xa0>)
   8201a:	47a0      	blx	r4
	RUN_TEST(pwm_disable,10);
   8201c:	4818      	ldr	r0, [pc, #96]	; (82080 <main+0xa4>)
   8201e:	4919      	ldr	r1, [pc, #100]	; (82084 <main+0xa8>)
   82020:	220a      	movs	r2, #10
   82022:	47a0      	blx	r4
	RUN_TEST(pwm_duty,20);
   82024:	4818      	ldr	r0, [pc, #96]	; (82088 <main+0xac>)
   82026:	4919      	ldr	r1, [pc, #100]	; (8208c <main+0xb0>)
   82028:	2214      	movs	r2, #20
   8202a:	47a0      	blx	r4
	UnityEnd();
   8202c:	4b18      	ldr	r3, [pc, #96]	; (82090 <main+0xb4>)
   8202e:	4798      	blx	r3
	
}
   82030:	2000      	movs	r0, #0
   82032:	bd10      	pop	{r4, pc}
   82034:	0008183d 	.word	0x0008183d
   82038:	000818a1 	.word	0x000818a1
   8203c:	00081181 	.word	0x00081181
   82040:	000813a1 	.word	0x000813a1
   82044:	00081295 	.word	0x00081295
   82048:	0112a880 	.word	0x0112a880
   8204c:	20070001 	.word	0x20070001
   82050:	00081511 	.word	0x00081511
   82054:	00085460 	.word	0x00085460
   82058:	00085468 	.word	0x00085468
   8205c:	00082455 	.word	0x00082455
   82060:	00085478 	.word	0x00085478
   82064:	00085490 	.word	0x00085490
   82068:	0008549c 	.word	0x0008549c
   8206c:	000854a8 	.word	0x000854a8
   82070:	00080bdd 	.word	0x00080bdd
   82074:	00080149 	.word	0x00080149
   82078:	000854bc 	.word	0x000854bc
   8207c:	00080b85 	.word	0x00080b85
   82080:	00080175 	.word	0x00080175
   82084:	000854c8 	.word	0x000854c8
   82088:	000801c1 	.word	0x000801c1
   8208c:	000854d4 	.word	0x000854d4
   82090:	00080bf9 	.word	0x00080bf9

00082094 <__aeabi_drsub>:
   82094:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   82098:	e002      	b.n	820a0 <__adddf3>
   8209a:	bf00      	nop

0008209c <__aeabi_dsub>:
   8209c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000820a0 <__adddf3>:
   820a0:	b530      	push	{r4, r5, lr}
   820a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   820a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   820aa:	ea94 0f05 	teq	r4, r5
   820ae:	bf08      	it	eq
   820b0:	ea90 0f02 	teqeq	r0, r2
   820b4:	bf1f      	itttt	ne
   820b6:	ea54 0c00 	orrsne.w	ip, r4, r0
   820ba:	ea55 0c02 	orrsne.w	ip, r5, r2
   820be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   820c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   820c6:	f000 80e2 	beq.w	8228e <__adddf3+0x1ee>
   820ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   820ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   820d2:	bfb8      	it	lt
   820d4:	426d      	neglt	r5, r5
   820d6:	dd0c      	ble.n	820f2 <__adddf3+0x52>
   820d8:	442c      	add	r4, r5
   820da:	ea80 0202 	eor.w	r2, r0, r2
   820de:	ea81 0303 	eor.w	r3, r1, r3
   820e2:	ea82 0000 	eor.w	r0, r2, r0
   820e6:	ea83 0101 	eor.w	r1, r3, r1
   820ea:	ea80 0202 	eor.w	r2, r0, r2
   820ee:	ea81 0303 	eor.w	r3, r1, r3
   820f2:	2d36      	cmp	r5, #54	; 0x36
   820f4:	bf88      	it	hi
   820f6:	bd30      	pophi	{r4, r5, pc}
   820f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   820fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82100:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82104:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   82108:	d002      	beq.n	82110 <__adddf3+0x70>
   8210a:	4240      	negs	r0, r0
   8210c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82110:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82114:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82118:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8211c:	d002      	beq.n	82124 <__adddf3+0x84>
   8211e:	4252      	negs	r2, r2
   82120:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82124:	ea94 0f05 	teq	r4, r5
   82128:	f000 80a7 	beq.w	8227a <__adddf3+0x1da>
   8212c:	f1a4 0401 	sub.w	r4, r4, #1
   82130:	f1d5 0e20 	rsbs	lr, r5, #32
   82134:	db0d      	blt.n	82152 <__adddf3+0xb2>
   82136:	fa02 fc0e 	lsl.w	ip, r2, lr
   8213a:	fa22 f205 	lsr.w	r2, r2, r5
   8213e:	1880      	adds	r0, r0, r2
   82140:	f141 0100 	adc.w	r1, r1, #0
   82144:	fa03 f20e 	lsl.w	r2, r3, lr
   82148:	1880      	adds	r0, r0, r2
   8214a:	fa43 f305 	asr.w	r3, r3, r5
   8214e:	4159      	adcs	r1, r3
   82150:	e00e      	b.n	82170 <__adddf3+0xd0>
   82152:	f1a5 0520 	sub.w	r5, r5, #32
   82156:	f10e 0e20 	add.w	lr, lr, #32
   8215a:	2a01      	cmp	r2, #1
   8215c:	fa03 fc0e 	lsl.w	ip, r3, lr
   82160:	bf28      	it	cs
   82162:	f04c 0c02 	orrcs.w	ip, ip, #2
   82166:	fa43 f305 	asr.w	r3, r3, r5
   8216a:	18c0      	adds	r0, r0, r3
   8216c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   82170:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82174:	d507      	bpl.n	82186 <__adddf3+0xe6>
   82176:	f04f 0e00 	mov.w	lr, #0
   8217a:	f1dc 0c00 	rsbs	ip, ip, #0
   8217e:	eb7e 0000 	sbcs.w	r0, lr, r0
   82182:	eb6e 0101 	sbc.w	r1, lr, r1
   82186:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8218a:	d31b      	bcc.n	821c4 <__adddf3+0x124>
   8218c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   82190:	d30c      	bcc.n	821ac <__adddf3+0x10c>
   82192:	0849      	lsrs	r1, r1, #1
   82194:	ea5f 0030 	movs.w	r0, r0, rrx
   82198:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8219c:	f104 0401 	add.w	r4, r4, #1
   821a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   821a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   821a8:	f080 809a 	bcs.w	822e0 <__adddf3+0x240>
   821ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   821b0:	bf08      	it	eq
   821b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   821b6:	f150 0000 	adcs.w	r0, r0, #0
   821ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   821be:	ea41 0105 	orr.w	r1, r1, r5
   821c2:	bd30      	pop	{r4, r5, pc}
   821c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   821c8:	4140      	adcs	r0, r0
   821ca:	eb41 0101 	adc.w	r1, r1, r1
   821ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   821d2:	f1a4 0401 	sub.w	r4, r4, #1
   821d6:	d1e9      	bne.n	821ac <__adddf3+0x10c>
   821d8:	f091 0f00 	teq	r1, #0
   821dc:	bf04      	itt	eq
   821de:	4601      	moveq	r1, r0
   821e0:	2000      	moveq	r0, #0
   821e2:	fab1 f381 	clz	r3, r1
   821e6:	bf08      	it	eq
   821e8:	3320      	addeq	r3, #32
   821ea:	f1a3 030b 	sub.w	r3, r3, #11
   821ee:	f1b3 0220 	subs.w	r2, r3, #32
   821f2:	da0c      	bge.n	8220e <__adddf3+0x16e>
   821f4:	320c      	adds	r2, #12
   821f6:	dd08      	ble.n	8220a <__adddf3+0x16a>
   821f8:	f102 0c14 	add.w	ip, r2, #20
   821fc:	f1c2 020c 	rsb	r2, r2, #12
   82200:	fa01 f00c 	lsl.w	r0, r1, ip
   82204:	fa21 f102 	lsr.w	r1, r1, r2
   82208:	e00c      	b.n	82224 <__adddf3+0x184>
   8220a:	f102 0214 	add.w	r2, r2, #20
   8220e:	bfd8      	it	le
   82210:	f1c2 0c20 	rsble	ip, r2, #32
   82214:	fa01 f102 	lsl.w	r1, r1, r2
   82218:	fa20 fc0c 	lsr.w	ip, r0, ip
   8221c:	bfdc      	itt	le
   8221e:	ea41 010c 	orrle.w	r1, r1, ip
   82222:	4090      	lslle	r0, r2
   82224:	1ae4      	subs	r4, r4, r3
   82226:	bfa2      	ittt	ge
   82228:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8222c:	4329      	orrge	r1, r5
   8222e:	bd30      	popge	{r4, r5, pc}
   82230:	ea6f 0404 	mvn.w	r4, r4
   82234:	3c1f      	subs	r4, #31
   82236:	da1c      	bge.n	82272 <__adddf3+0x1d2>
   82238:	340c      	adds	r4, #12
   8223a:	dc0e      	bgt.n	8225a <__adddf3+0x1ba>
   8223c:	f104 0414 	add.w	r4, r4, #20
   82240:	f1c4 0220 	rsb	r2, r4, #32
   82244:	fa20 f004 	lsr.w	r0, r0, r4
   82248:	fa01 f302 	lsl.w	r3, r1, r2
   8224c:	ea40 0003 	orr.w	r0, r0, r3
   82250:	fa21 f304 	lsr.w	r3, r1, r4
   82254:	ea45 0103 	orr.w	r1, r5, r3
   82258:	bd30      	pop	{r4, r5, pc}
   8225a:	f1c4 040c 	rsb	r4, r4, #12
   8225e:	f1c4 0220 	rsb	r2, r4, #32
   82262:	fa20 f002 	lsr.w	r0, r0, r2
   82266:	fa01 f304 	lsl.w	r3, r1, r4
   8226a:	ea40 0003 	orr.w	r0, r0, r3
   8226e:	4629      	mov	r1, r5
   82270:	bd30      	pop	{r4, r5, pc}
   82272:	fa21 f004 	lsr.w	r0, r1, r4
   82276:	4629      	mov	r1, r5
   82278:	bd30      	pop	{r4, r5, pc}
   8227a:	f094 0f00 	teq	r4, #0
   8227e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   82282:	bf06      	itte	eq
   82284:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   82288:	3401      	addeq	r4, #1
   8228a:	3d01      	subne	r5, #1
   8228c:	e74e      	b.n	8212c <__adddf3+0x8c>
   8228e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82292:	bf18      	it	ne
   82294:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82298:	d029      	beq.n	822ee <__adddf3+0x24e>
   8229a:	ea94 0f05 	teq	r4, r5
   8229e:	bf08      	it	eq
   822a0:	ea90 0f02 	teqeq	r0, r2
   822a4:	d005      	beq.n	822b2 <__adddf3+0x212>
   822a6:	ea54 0c00 	orrs.w	ip, r4, r0
   822aa:	bf04      	itt	eq
   822ac:	4619      	moveq	r1, r3
   822ae:	4610      	moveq	r0, r2
   822b0:	bd30      	pop	{r4, r5, pc}
   822b2:	ea91 0f03 	teq	r1, r3
   822b6:	bf1e      	ittt	ne
   822b8:	2100      	movne	r1, #0
   822ba:	2000      	movne	r0, #0
   822bc:	bd30      	popne	{r4, r5, pc}
   822be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   822c2:	d105      	bne.n	822d0 <__adddf3+0x230>
   822c4:	0040      	lsls	r0, r0, #1
   822c6:	4149      	adcs	r1, r1
   822c8:	bf28      	it	cs
   822ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   822ce:	bd30      	pop	{r4, r5, pc}
   822d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   822d4:	bf3c      	itt	cc
   822d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   822da:	bd30      	popcc	{r4, r5, pc}
   822dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   822e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   822e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   822e8:	f04f 0000 	mov.w	r0, #0
   822ec:	bd30      	pop	{r4, r5, pc}
   822ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   822f2:	bf1a      	itte	ne
   822f4:	4619      	movne	r1, r3
   822f6:	4610      	movne	r0, r2
   822f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   822fc:	bf1c      	itt	ne
   822fe:	460b      	movne	r3, r1
   82300:	4602      	movne	r2, r0
   82302:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82306:	bf06      	itte	eq
   82308:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8230c:	ea91 0f03 	teqeq	r1, r3
   82310:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82314:	bd30      	pop	{r4, r5, pc}
   82316:	bf00      	nop

00082318 <__aeabi_ui2d>:
   82318:	f090 0f00 	teq	r0, #0
   8231c:	bf04      	itt	eq
   8231e:	2100      	moveq	r1, #0
   82320:	4770      	bxeq	lr
   82322:	b530      	push	{r4, r5, lr}
   82324:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82328:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8232c:	f04f 0500 	mov.w	r5, #0
   82330:	f04f 0100 	mov.w	r1, #0
   82334:	e750      	b.n	821d8 <__adddf3+0x138>
   82336:	bf00      	nop

00082338 <__aeabi_i2d>:
   82338:	f090 0f00 	teq	r0, #0
   8233c:	bf04      	itt	eq
   8233e:	2100      	moveq	r1, #0
   82340:	4770      	bxeq	lr
   82342:	b530      	push	{r4, r5, lr}
   82344:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82348:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8234c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82350:	bf48      	it	mi
   82352:	4240      	negmi	r0, r0
   82354:	f04f 0100 	mov.w	r1, #0
   82358:	e73e      	b.n	821d8 <__adddf3+0x138>
   8235a:	bf00      	nop

0008235c <__aeabi_f2d>:
   8235c:	0042      	lsls	r2, r0, #1
   8235e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82362:	ea4f 0131 	mov.w	r1, r1, rrx
   82366:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8236a:	bf1f      	itttt	ne
   8236c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   82370:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82374:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   82378:	4770      	bxne	lr
   8237a:	f092 0f00 	teq	r2, #0
   8237e:	bf14      	ite	ne
   82380:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82384:	4770      	bxeq	lr
   82386:	b530      	push	{r4, r5, lr}
   82388:	f44f 7460 	mov.w	r4, #896	; 0x380
   8238c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82390:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82394:	e720      	b.n	821d8 <__adddf3+0x138>
   82396:	bf00      	nop

00082398 <__aeabi_ul2d>:
   82398:	ea50 0201 	orrs.w	r2, r0, r1
   8239c:	bf08      	it	eq
   8239e:	4770      	bxeq	lr
   823a0:	b530      	push	{r4, r5, lr}
   823a2:	f04f 0500 	mov.w	r5, #0
   823a6:	e00a      	b.n	823be <__aeabi_l2d+0x16>

000823a8 <__aeabi_l2d>:
   823a8:	ea50 0201 	orrs.w	r2, r0, r1
   823ac:	bf08      	it	eq
   823ae:	4770      	bxeq	lr
   823b0:	b530      	push	{r4, r5, lr}
   823b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   823b6:	d502      	bpl.n	823be <__aeabi_l2d+0x16>
   823b8:	4240      	negs	r0, r0
   823ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   823be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   823c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   823c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   823ca:	f43f aedc 	beq.w	82186 <__adddf3+0xe6>
   823ce:	f04f 0203 	mov.w	r2, #3
   823d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   823d6:	bf18      	it	ne
   823d8:	3203      	addne	r2, #3
   823da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   823de:	bf18      	it	ne
   823e0:	3203      	addne	r2, #3
   823e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   823e6:	f1c2 0320 	rsb	r3, r2, #32
   823ea:	fa00 fc03 	lsl.w	ip, r0, r3
   823ee:	fa20 f002 	lsr.w	r0, r0, r2
   823f2:	fa01 fe03 	lsl.w	lr, r1, r3
   823f6:	ea40 000e 	orr.w	r0, r0, lr
   823fa:	fa21 f102 	lsr.w	r1, r1, r2
   823fe:	4414      	add	r4, r2
   82400:	e6c1      	b.n	82186 <__adddf3+0xe6>
   82402:	bf00      	nop

00082404 <__libc_init_array>:
   82404:	b570      	push	{r4, r5, r6, lr}
   82406:	4e0f      	ldr	r6, [pc, #60]	; (82444 <__libc_init_array+0x40>)
   82408:	4d0f      	ldr	r5, [pc, #60]	; (82448 <__libc_init_array+0x44>)
   8240a:	1b76      	subs	r6, r6, r5
   8240c:	10b6      	asrs	r6, r6, #2
   8240e:	d007      	beq.n	82420 <__libc_init_array+0x1c>
   82410:	3d04      	subs	r5, #4
   82412:	2400      	movs	r4, #0
   82414:	3401      	adds	r4, #1
   82416:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8241a:	4798      	blx	r3
   8241c:	42a6      	cmp	r6, r4
   8241e:	d1f9      	bne.n	82414 <__libc_init_array+0x10>
   82420:	4e0a      	ldr	r6, [pc, #40]	; (8244c <__libc_init_array+0x48>)
   82422:	4d0b      	ldr	r5, [pc, #44]	; (82450 <__libc_init_array+0x4c>)
   82424:	f003 f888 	bl	85538 <_init>
   82428:	1b76      	subs	r6, r6, r5
   8242a:	10b6      	asrs	r6, r6, #2
   8242c:	d008      	beq.n	82440 <__libc_init_array+0x3c>
   8242e:	3d04      	subs	r5, #4
   82430:	2400      	movs	r4, #0
   82432:	3401      	adds	r4, #1
   82434:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82438:	4798      	blx	r3
   8243a:	42a6      	cmp	r6, r4
   8243c:	d1f9      	bne.n	82432 <__libc_init_array+0x2e>
   8243e:	bd70      	pop	{r4, r5, r6, pc}
   82440:	bd70      	pop	{r4, r5, r6, pc}
   82442:	bf00      	nop
   82444:	00085544 	.word	0x00085544
   82448:	00085544 	.word	0x00085544
   8244c:	0008554c 	.word	0x0008554c
   82450:	00085544 	.word	0x00085544

00082454 <iprintf>:
   82454:	b40f      	push	{r0, r1, r2, r3}
   82456:	b510      	push	{r4, lr}
   82458:	4b07      	ldr	r3, [pc, #28]	; (82478 <iprintf+0x24>)
   8245a:	b082      	sub	sp, #8
   8245c:	ac04      	add	r4, sp, #16
   8245e:	f854 2b04 	ldr.w	r2, [r4], #4
   82462:	6818      	ldr	r0, [r3, #0]
   82464:	4623      	mov	r3, r4
   82466:	6881      	ldr	r1, [r0, #8]
   82468:	9401      	str	r4, [sp, #4]
   8246a:	f000 f9c9 	bl	82800 <_vfiprintf_r>
   8246e:	b002      	add	sp, #8
   82470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82474:	b004      	add	sp, #16
   82476:	4770      	bx	lr
   82478:	20070568 	.word	0x20070568

0008247c <memcpy>:
   8247c:	4684      	mov	ip, r0
   8247e:	ea41 0300 	orr.w	r3, r1, r0
   82482:	f013 0303 	ands.w	r3, r3, #3
   82486:	d149      	bne.n	8251c <memcpy+0xa0>
   82488:	3a40      	subs	r2, #64	; 0x40
   8248a:	d323      	bcc.n	824d4 <memcpy+0x58>
   8248c:	680b      	ldr	r3, [r1, #0]
   8248e:	6003      	str	r3, [r0, #0]
   82490:	684b      	ldr	r3, [r1, #4]
   82492:	6043      	str	r3, [r0, #4]
   82494:	688b      	ldr	r3, [r1, #8]
   82496:	6083      	str	r3, [r0, #8]
   82498:	68cb      	ldr	r3, [r1, #12]
   8249a:	60c3      	str	r3, [r0, #12]
   8249c:	690b      	ldr	r3, [r1, #16]
   8249e:	6103      	str	r3, [r0, #16]
   824a0:	694b      	ldr	r3, [r1, #20]
   824a2:	6143      	str	r3, [r0, #20]
   824a4:	698b      	ldr	r3, [r1, #24]
   824a6:	6183      	str	r3, [r0, #24]
   824a8:	69cb      	ldr	r3, [r1, #28]
   824aa:	61c3      	str	r3, [r0, #28]
   824ac:	6a0b      	ldr	r3, [r1, #32]
   824ae:	6203      	str	r3, [r0, #32]
   824b0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   824b2:	6243      	str	r3, [r0, #36]	; 0x24
   824b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   824b6:	6283      	str	r3, [r0, #40]	; 0x28
   824b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   824ba:	62c3      	str	r3, [r0, #44]	; 0x2c
   824bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   824be:	6303      	str	r3, [r0, #48]	; 0x30
   824c0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   824c2:	6343      	str	r3, [r0, #52]	; 0x34
   824c4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   824c6:	6383      	str	r3, [r0, #56]	; 0x38
   824c8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   824ca:	63c3      	str	r3, [r0, #60]	; 0x3c
   824cc:	3040      	adds	r0, #64	; 0x40
   824ce:	3140      	adds	r1, #64	; 0x40
   824d0:	3a40      	subs	r2, #64	; 0x40
   824d2:	d2db      	bcs.n	8248c <memcpy+0x10>
   824d4:	3230      	adds	r2, #48	; 0x30
   824d6:	d30b      	bcc.n	824f0 <memcpy+0x74>
   824d8:	680b      	ldr	r3, [r1, #0]
   824da:	6003      	str	r3, [r0, #0]
   824dc:	684b      	ldr	r3, [r1, #4]
   824de:	6043      	str	r3, [r0, #4]
   824e0:	688b      	ldr	r3, [r1, #8]
   824e2:	6083      	str	r3, [r0, #8]
   824e4:	68cb      	ldr	r3, [r1, #12]
   824e6:	60c3      	str	r3, [r0, #12]
   824e8:	3010      	adds	r0, #16
   824ea:	3110      	adds	r1, #16
   824ec:	3a10      	subs	r2, #16
   824ee:	d2f3      	bcs.n	824d8 <memcpy+0x5c>
   824f0:	320c      	adds	r2, #12
   824f2:	d305      	bcc.n	82500 <memcpy+0x84>
   824f4:	f851 3b04 	ldr.w	r3, [r1], #4
   824f8:	f840 3b04 	str.w	r3, [r0], #4
   824fc:	3a04      	subs	r2, #4
   824fe:	d2f9      	bcs.n	824f4 <memcpy+0x78>
   82500:	3204      	adds	r2, #4
   82502:	d008      	beq.n	82516 <memcpy+0x9a>
   82504:	07d2      	lsls	r2, r2, #31
   82506:	bf1c      	itt	ne
   82508:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8250c:	f800 3b01 	strbne.w	r3, [r0], #1
   82510:	d301      	bcc.n	82516 <memcpy+0x9a>
   82512:	880b      	ldrh	r3, [r1, #0]
   82514:	8003      	strh	r3, [r0, #0]
   82516:	4660      	mov	r0, ip
   82518:	4770      	bx	lr
   8251a:	bf00      	nop
   8251c:	2a08      	cmp	r2, #8
   8251e:	d313      	bcc.n	82548 <memcpy+0xcc>
   82520:	078b      	lsls	r3, r1, #30
   82522:	d0b1      	beq.n	82488 <memcpy+0xc>
   82524:	f010 0303 	ands.w	r3, r0, #3
   82528:	d0ae      	beq.n	82488 <memcpy+0xc>
   8252a:	f1c3 0304 	rsb	r3, r3, #4
   8252e:	1ad2      	subs	r2, r2, r3
   82530:	07db      	lsls	r3, r3, #31
   82532:	bf1c      	itt	ne
   82534:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82538:	f800 3b01 	strbne.w	r3, [r0], #1
   8253c:	d3a4      	bcc.n	82488 <memcpy+0xc>
   8253e:	f831 3b02 	ldrh.w	r3, [r1], #2
   82542:	f820 3b02 	strh.w	r3, [r0], #2
   82546:	e79f      	b.n	82488 <memcpy+0xc>
   82548:	3a04      	subs	r2, #4
   8254a:	d3d9      	bcc.n	82500 <memcpy+0x84>
   8254c:	3a01      	subs	r2, #1
   8254e:	f811 3b01 	ldrb.w	r3, [r1], #1
   82552:	f800 3b01 	strb.w	r3, [r0], #1
   82556:	d2f9      	bcs.n	8254c <memcpy+0xd0>
   82558:	780b      	ldrb	r3, [r1, #0]
   8255a:	7003      	strb	r3, [r0, #0]
   8255c:	784b      	ldrb	r3, [r1, #1]
   8255e:	7043      	strb	r3, [r0, #1]
   82560:	788b      	ldrb	r3, [r1, #2]
   82562:	7083      	strb	r3, [r0, #2]
   82564:	4660      	mov	r0, ip
   82566:	4770      	bx	lr

00082568 <memset>:
   82568:	b4f0      	push	{r4, r5, r6, r7}
   8256a:	0784      	lsls	r4, r0, #30
   8256c:	d043      	beq.n	825f6 <memset+0x8e>
   8256e:	1e54      	subs	r4, r2, #1
   82570:	2a00      	cmp	r2, #0
   82572:	d03e      	beq.n	825f2 <memset+0x8a>
   82574:	b2cd      	uxtb	r5, r1
   82576:	4603      	mov	r3, r0
   82578:	e003      	b.n	82582 <memset+0x1a>
   8257a:	1e62      	subs	r2, r4, #1
   8257c:	2c00      	cmp	r4, #0
   8257e:	d038      	beq.n	825f2 <memset+0x8a>
   82580:	4614      	mov	r4, r2
   82582:	f803 5b01 	strb.w	r5, [r3], #1
   82586:	079a      	lsls	r2, r3, #30
   82588:	d1f7      	bne.n	8257a <memset+0x12>
   8258a:	2c03      	cmp	r4, #3
   8258c:	d92a      	bls.n	825e4 <memset+0x7c>
   8258e:	b2cd      	uxtb	r5, r1
   82590:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82594:	2c0f      	cmp	r4, #15
   82596:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8259a:	d915      	bls.n	825c8 <memset+0x60>
   8259c:	f1a4 0710 	sub.w	r7, r4, #16
   825a0:	093f      	lsrs	r7, r7, #4
   825a2:	f103 0610 	add.w	r6, r3, #16
   825a6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   825aa:	461a      	mov	r2, r3
   825ac:	6015      	str	r5, [r2, #0]
   825ae:	6055      	str	r5, [r2, #4]
   825b0:	6095      	str	r5, [r2, #8]
   825b2:	60d5      	str	r5, [r2, #12]
   825b4:	3210      	adds	r2, #16
   825b6:	42b2      	cmp	r2, r6
   825b8:	d1f8      	bne.n	825ac <memset+0x44>
   825ba:	f004 040f 	and.w	r4, r4, #15
   825be:	3701      	adds	r7, #1
   825c0:	2c03      	cmp	r4, #3
   825c2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   825c6:	d90d      	bls.n	825e4 <memset+0x7c>
   825c8:	461e      	mov	r6, r3
   825ca:	4622      	mov	r2, r4
   825cc:	3a04      	subs	r2, #4
   825ce:	2a03      	cmp	r2, #3
   825d0:	f846 5b04 	str.w	r5, [r6], #4
   825d4:	d8fa      	bhi.n	825cc <memset+0x64>
   825d6:	1f22      	subs	r2, r4, #4
   825d8:	f022 0203 	bic.w	r2, r2, #3
   825dc:	3204      	adds	r2, #4
   825de:	4413      	add	r3, r2
   825e0:	f004 0403 	and.w	r4, r4, #3
   825e4:	b12c      	cbz	r4, 825f2 <memset+0x8a>
   825e6:	b2c9      	uxtb	r1, r1
   825e8:	441c      	add	r4, r3
   825ea:	f803 1b01 	strb.w	r1, [r3], #1
   825ee:	42a3      	cmp	r3, r4
   825f0:	d1fb      	bne.n	825ea <memset+0x82>
   825f2:	bcf0      	pop	{r4, r5, r6, r7}
   825f4:	4770      	bx	lr
   825f6:	4614      	mov	r4, r2
   825f8:	4603      	mov	r3, r0
   825fa:	e7c6      	b.n	8258a <memset+0x22>

000825fc <setbuf>:
   825fc:	2900      	cmp	r1, #0
   825fe:	bf0c      	ite	eq
   82600:	2202      	moveq	r2, #2
   82602:	2200      	movne	r2, #0
   82604:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82608:	f000 b80e 	b.w	82628 <setvbuf>

0008260c <setjmp>:
   8260c:	46ec      	mov	ip, sp
   8260e:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   82612:	f04f 0000 	mov.w	r0, #0
   82616:	4770      	bx	lr

00082618 <longjmp>:
   82618:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   8261c:	46e5      	mov	sp, ip
   8261e:	0008      	movs	r0, r1
   82620:	bf08      	it	eq
   82622:	2001      	moveq	r0, #1
   82624:	4770      	bx	lr
   82626:	bf00      	nop

00082628 <setvbuf>:
   82628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8262c:	4d3c      	ldr	r5, [pc, #240]	; (82720 <setvbuf+0xf8>)
   8262e:	4604      	mov	r4, r0
   82630:	682d      	ldr	r5, [r5, #0]
   82632:	4688      	mov	r8, r1
   82634:	4616      	mov	r6, r2
   82636:	461f      	mov	r7, r3
   82638:	b115      	cbz	r5, 82640 <setvbuf+0x18>
   8263a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8263c:	2b00      	cmp	r3, #0
   8263e:	d04f      	beq.n	826e0 <setvbuf+0xb8>
   82640:	2e02      	cmp	r6, #2
   82642:	d830      	bhi.n	826a6 <setvbuf+0x7e>
   82644:	2f00      	cmp	r7, #0
   82646:	db2e      	blt.n	826a6 <setvbuf+0x7e>
   82648:	4628      	mov	r0, r5
   8264a:	4621      	mov	r1, r4
   8264c:	f001 f8aa 	bl	837a4 <_fflush_r>
   82650:	89a3      	ldrh	r3, [r4, #12]
   82652:	2200      	movs	r2, #0
   82654:	6062      	str	r2, [r4, #4]
   82656:	61a2      	str	r2, [r4, #24]
   82658:	061a      	lsls	r2, r3, #24
   8265a:	d428      	bmi.n	826ae <setvbuf+0x86>
   8265c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82660:	b29b      	uxth	r3, r3
   82662:	2e02      	cmp	r6, #2
   82664:	81a3      	strh	r3, [r4, #12]
   82666:	d02d      	beq.n	826c4 <setvbuf+0x9c>
   82668:	f1b8 0f00 	cmp.w	r8, #0
   8266c:	d03c      	beq.n	826e8 <setvbuf+0xc0>
   8266e:	2e01      	cmp	r6, #1
   82670:	d013      	beq.n	8269a <setvbuf+0x72>
   82672:	b29b      	uxth	r3, r3
   82674:	f003 0008 	and.w	r0, r3, #8
   82678:	4a2a      	ldr	r2, [pc, #168]	; (82724 <setvbuf+0xfc>)
   8267a:	b280      	uxth	r0, r0
   8267c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8267e:	f8c4 8000 	str.w	r8, [r4]
   82682:	f8c4 8010 	str.w	r8, [r4, #16]
   82686:	6167      	str	r7, [r4, #20]
   82688:	b178      	cbz	r0, 826aa <setvbuf+0x82>
   8268a:	f013 0f03 	tst.w	r3, #3
   8268e:	bf18      	it	ne
   82690:	2700      	movne	r7, #0
   82692:	60a7      	str	r7, [r4, #8]
   82694:	2000      	movs	r0, #0
   82696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8269a:	f043 0301 	orr.w	r3, r3, #1
   8269e:	427a      	negs	r2, r7
   826a0:	81a3      	strh	r3, [r4, #12]
   826a2:	61a2      	str	r2, [r4, #24]
   826a4:	e7e5      	b.n	82672 <setvbuf+0x4a>
   826a6:	f04f 30ff 	mov.w	r0, #4294967295
   826aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826ae:	4628      	mov	r0, r5
   826b0:	6921      	ldr	r1, [r4, #16]
   826b2:	f001 f9d7 	bl	83a64 <_free_r>
   826b6:	89a3      	ldrh	r3, [r4, #12]
   826b8:	2e02      	cmp	r6, #2
   826ba:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   826be:	b29b      	uxth	r3, r3
   826c0:	81a3      	strh	r3, [r4, #12]
   826c2:	d1d1      	bne.n	82668 <setvbuf+0x40>
   826c4:	2000      	movs	r0, #0
   826c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   826ca:	f043 0302 	orr.w	r3, r3, #2
   826ce:	2500      	movs	r5, #0
   826d0:	2101      	movs	r1, #1
   826d2:	81a3      	strh	r3, [r4, #12]
   826d4:	60a5      	str	r5, [r4, #8]
   826d6:	6022      	str	r2, [r4, #0]
   826d8:	6122      	str	r2, [r4, #16]
   826da:	6161      	str	r1, [r4, #20]
   826dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826e0:	4628      	mov	r0, r5
   826e2:	f001 f87b 	bl	837dc <__sinit>
   826e6:	e7ab      	b.n	82640 <setvbuf+0x18>
   826e8:	2f00      	cmp	r7, #0
   826ea:	bf08      	it	eq
   826ec:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   826f0:	4638      	mov	r0, r7
   826f2:	f001 fcad 	bl	84050 <malloc>
   826f6:	4680      	mov	r8, r0
   826f8:	b128      	cbz	r0, 82706 <setvbuf+0xde>
   826fa:	89a3      	ldrh	r3, [r4, #12]
   826fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82700:	b29b      	uxth	r3, r3
   82702:	81a3      	strh	r3, [r4, #12]
   82704:	e7b3      	b.n	8266e <setvbuf+0x46>
   82706:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8270a:	f001 fca1 	bl	84050 <malloc>
   8270e:	4680      	mov	r8, r0
   82710:	b918      	cbnz	r0, 8271a <setvbuf+0xf2>
   82712:	89a3      	ldrh	r3, [r4, #12]
   82714:	f04f 30ff 	mov.w	r0, #4294967295
   82718:	e7d5      	b.n	826c6 <setvbuf+0x9e>
   8271a:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8271e:	e7ec      	b.n	826fa <setvbuf+0xd2>
   82720:	20070568 	.word	0x20070568
   82724:	000837d1 	.word	0x000837d1

00082728 <strlen>:
   82728:	f020 0103 	bic.w	r1, r0, #3
   8272c:	f010 0003 	ands.w	r0, r0, #3
   82730:	f1c0 0000 	rsb	r0, r0, #0
   82734:	f851 3b04 	ldr.w	r3, [r1], #4
   82738:	f100 0c04 	add.w	ip, r0, #4
   8273c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82740:	f06f 0200 	mvn.w	r2, #0
   82744:	bf1c      	itt	ne
   82746:	fa22 f20c 	lsrne.w	r2, r2, ip
   8274a:	4313      	orrne	r3, r2
   8274c:	f04f 0c01 	mov.w	ip, #1
   82750:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82754:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82758:	eba3 020c 	sub.w	r2, r3, ip
   8275c:	ea22 0203 	bic.w	r2, r2, r3
   82760:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82764:	bf04      	itt	eq
   82766:	f851 3b04 	ldreq.w	r3, [r1], #4
   8276a:	3004      	addeq	r0, #4
   8276c:	d0f4      	beq.n	82758 <strlen+0x30>
   8276e:	f013 0fff 	tst.w	r3, #255	; 0xff
   82772:	bf1f      	itttt	ne
   82774:	3001      	addne	r0, #1
   82776:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8277a:	3001      	addne	r0, #1
   8277c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   82780:	bf18      	it	ne
   82782:	3001      	addne	r0, #1
   82784:	4770      	bx	lr
   82786:	bf00      	nop

00082788 <__sprint_r.part.0>:
   82788:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8278a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8278e:	049c      	lsls	r4, r3, #18
   82790:	460e      	mov	r6, r1
   82792:	4680      	mov	r8, r0
   82794:	4691      	mov	r9, r2
   82796:	d52a      	bpl.n	827ee <__sprint_r.part.0+0x66>
   82798:	6893      	ldr	r3, [r2, #8]
   8279a:	6812      	ldr	r2, [r2, #0]
   8279c:	f102 0a08 	add.w	sl, r2, #8
   827a0:	b31b      	cbz	r3, 827ea <__sprint_r.part.0+0x62>
   827a2:	e91a 00a0 	ldmdb	sl, {r5, r7}
   827a6:	08bf      	lsrs	r7, r7, #2
   827a8:	d017      	beq.n	827da <__sprint_r.part.0+0x52>
   827aa:	3d04      	subs	r5, #4
   827ac:	2400      	movs	r4, #0
   827ae:	e001      	b.n	827b4 <__sprint_r.part.0+0x2c>
   827b0:	42a7      	cmp	r7, r4
   827b2:	d010      	beq.n	827d6 <__sprint_r.part.0+0x4e>
   827b4:	4640      	mov	r0, r8
   827b6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   827ba:	4632      	mov	r2, r6
   827bc:	f001 f8a4 	bl	83908 <_fputwc_r>
   827c0:	1c43      	adds	r3, r0, #1
   827c2:	f104 0401 	add.w	r4, r4, #1
   827c6:	d1f3      	bne.n	827b0 <__sprint_r.part.0+0x28>
   827c8:	2300      	movs	r3, #0
   827ca:	f8c9 3008 	str.w	r3, [r9, #8]
   827ce:	f8c9 3004 	str.w	r3, [r9, #4]
   827d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   827d6:	f8d9 3008 	ldr.w	r3, [r9, #8]
   827da:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   827de:	f8c9 3008 	str.w	r3, [r9, #8]
   827e2:	f10a 0a08 	add.w	sl, sl, #8
   827e6:	2b00      	cmp	r3, #0
   827e8:	d1db      	bne.n	827a2 <__sprint_r.part.0+0x1a>
   827ea:	2000      	movs	r0, #0
   827ec:	e7ec      	b.n	827c8 <__sprint_r.part.0+0x40>
   827ee:	f001 fa05 	bl	83bfc <__sfvwrite_r>
   827f2:	2300      	movs	r3, #0
   827f4:	f8c9 3008 	str.w	r3, [r9, #8]
   827f8:	f8c9 3004 	str.w	r3, [r9, #4]
   827fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00082800 <_vfiprintf_r>:
   82800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82804:	b0b1      	sub	sp, #196	; 0xc4
   82806:	461c      	mov	r4, r3
   82808:	9102      	str	r1, [sp, #8]
   8280a:	4690      	mov	r8, r2
   8280c:	9308      	str	r3, [sp, #32]
   8280e:	9006      	str	r0, [sp, #24]
   82810:	b118      	cbz	r0, 8281a <_vfiprintf_r+0x1a>
   82812:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82814:	2b00      	cmp	r3, #0
   82816:	f000 80e8 	beq.w	829ea <_vfiprintf_r+0x1ea>
   8281a:	9d02      	ldr	r5, [sp, #8]
   8281c:	89ab      	ldrh	r3, [r5, #12]
   8281e:	b29a      	uxth	r2, r3
   82820:	0490      	lsls	r0, r2, #18
   82822:	d407      	bmi.n	82834 <_vfiprintf_r+0x34>
   82824:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   82826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8282a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   8282e:	81ab      	strh	r3, [r5, #12]
   82830:	b29a      	uxth	r2, r3
   82832:	6669      	str	r1, [r5, #100]	; 0x64
   82834:	0711      	lsls	r1, r2, #28
   82836:	f140 80b7 	bpl.w	829a8 <_vfiprintf_r+0x1a8>
   8283a:	f8dd b008 	ldr.w	fp, [sp, #8]
   8283e:	f8db 3010 	ldr.w	r3, [fp, #16]
   82842:	2b00      	cmp	r3, #0
   82844:	f000 80b0 	beq.w	829a8 <_vfiprintf_r+0x1a8>
   82848:	f002 021a 	and.w	r2, r2, #26
   8284c:	2a0a      	cmp	r2, #10
   8284e:	f000 80b7 	beq.w	829c0 <_vfiprintf_r+0x1c0>
   82852:	2300      	movs	r3, #0
   82854:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   82858:	930a      	str	r3, [sp, #40]	; 0x28
   8285a:	9315      	str	r3, [sp, #84]	; 0x54
   8285c:	9314      	str	r3, [sp, #80]	; 0x50
   8285e:	9309      	str	r3, [sp, #36]	; 0x24
   82860:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   82864:	464e      	mov	r6, r9
   82866:	f898 3000 	ldrb.w	r3, [r8]
   8286a:	2b00      	cmp	r3, #0
   8286c:	f000 84c8 	beq.w	83200 <_vfiprintf_r+0xa00>
   82870:	2b25      	cmp	r3, #37	; 0x25
   82872:	f000 84c5 	beq.w	83200 <_vfiprintf_r+0xa00>
   82876:	f108 0201 	add.w	r2, r8, #1
   8287a:	e001      	b.n	82880 <_vfiprintf_r+0x80>
   8287c:	2b25      	cmp	r3, #37	; 0x25
   8287e:	d004      	beq.n	8288a <_vfiprintf_r+0x8a>
   82880:	7813      	ldrb	r3, [r2, #0]
   82882:	4614      	mov	r4, r2
   82884:	3201      	adds	r2, #1
   82886:	2b00      	cmp	r3, #0
   82888:	d1f8      	bne.n	8287c <_vfiprintf_r+0x7c>
   8288a:	ebc8 0504 	rsb	r5, r8, r4
   8288e:	b195      	cbz	r5, 828b6 <_vfiprintf_r+0xb6>
   82890:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82892:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82894:	3301      	adds	r3, #1
   82896:	442a      	add	r2, r5
   82898:	2b07      	cmp	r3, #7
   8289a:	f8c6 8000 	str.w	r8, [r6]
   8289e:	6075      	str	r5, [r6, #4]
   828a0:	9215      	str	r2, [sp, #84]	; 0x54
   828a2:	9314      	str	r3, [sp, #80]	; 0x50
   828a4:	dd7b      	ble.n	8299e <_vfiprintf_r+0x19e>
   828a6:	2a00      	cmp	r2, #0
   828a8:	f040 84d5 	bne.w	83256 <_vfiprintf_r+0xa56>
   828ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   828ae:	9214      	str	r2, [sp, #80]	; 0x50
   828b0:	4428      	add	r0, r5
   828b2:	464e      	mov	r6, r9
   828b4:	9009      	str	r0, [sp, #36]	; 0x24
   828b6:	7823      	ldrb	r3, [r4, #0]
   828b8:	2b00      	cmp	r3, #0
   828ba:	f000 83ed 	beq.w	83098 <_vfiprintf_r+0x898>
   828be:	2100      	movs	r1, #0
   828c0:	f04f 0200 	mov.w	r2, #0
   828c4:	f04f 3cff 	mov.w	ip, #4294967295
   828c8:	7863      	ldrb	r3, [r4, #1]
   828ca:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   828ce:	9104      	str	r1, [sp, #16]
   828d0:	468a      	mov	sl, r1
   828d2:	f104 0801 	add.w	r8, r4, #1
   828d6:	4608      	mov	r0, r1
   828d8:	4665      	mov	r5, ip
   828da:	f108 0801 	add.w	r8, r8, #1
   828de:	f1a3 0220 	sub.w	r2, r3, #32
   828e2:	2a58      	cmp	r2, #88	; 0x58
   828e4:	f200 82d9 	bhi.w	82e9a <_vfiprintf_r+0x69a>
   828e8:	e8df f012 	tbh	[pc, r2, lsl #1]
   828ec:	02d702cb 	.word	0x02d702cb
   828f0:	02d202d7 	.word	0x02d202d7
   828f4:	02d702d7 	.word	0x02d702d7
   828f8:	02d702d7 	.word	0x02d702d7
   828fc:	02d702d7 	.word	0x02d702d7
   82900:	028f0282 	.word	0x028f0282
   82904:	008402d7 	.word	0x008402d7
   82908:	02d70293 	.word	0x02d70293
   8290c:	0196012b 	.word	0x0196012b
   82910:	01960196 	.word	0x01960196
   82914:	01960196 	.word	0x01960196
   82918:	01960196 	.word	0x01960196
   8291c:	01960196 	.word	0x01960196
   82920:	02d702d7 	.word	0x02d702d7
   82924:	02d702d7 	.word	0x02d702d7
   82928:	02d702d7 	.word	0x02d702d7
   8292c:	02d702d7 	.word	0x02d702d7
   82930:	02d702d7 	.word	0x02d702d7
   82934:	02d70130 	.word	0x02d70130
   82938:	02d702d7 	.word	0x02d702d7
   8293c:	02d702d7 	.word	0x02d702d7
   82940:	02d702d7 	.word	0x02d702d7
   82944:	02d702d7 	.word	0x02d702d7
   82948:	017b02d7 	.word	0x017b02d7
   8294c:	02d702d7 	.word	0x02d702d7
   82950:	02d702d7 	.word	0x02d702d7
   82954:	01a402d7 	.word	0x01a402d7
   82958:	02d702d7 	.word	0x02d702d7
   8295c:	02d701bf 	.word	0x02d701bf
   82960:	02d702d7 	.word	0x02d702d7
   82964:	02d702d7 	.word	0x02d702d7
   82968:	02d702d7 	.word	0x02d702d7
   8296c:	02d702d7 	.word	0x02d702d7
   82970:	01e402d7 	.word	0x01e402d7
   82974:	02d701fa 	.word	0x02d701fa
   82978:	02d702d7 	.word	0x02d702d7
   8297c:	01fa0216 	.word	0x01fa0216
   82980:	02d702d7 	.word	0x02d702d7
   82984:	02d7021b 	.word	0x02d7021b
   82988:	00890228 	.word	0x00890228
   8298c:	027d0266 	.word	0x027d0266
   82990:	023a02d7 	.word	0x023a02d7
   82994:	011902d7 	.word	0x011902d7
   82998:	02d702d7 	.word	0x02d702d7
   8299c:	02af      	.short	0x02af
   8299e:	3608      	adds	r6, #8
   829a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   829a2:	4428      	add	r0, r5
   829a4:	9009      	str	r0, [sp, #36]	; 0x24
   829a6:	e786      	b.n	828b6 <_vfiprintf_r+0xb6>
   829a8:	9806      	ldr	r0, [sp, #24]
   829aa:	9902      	ldr	r1, [sp, #8]
   829ac:	f000 fde4 	bl	83578 <__swsetup_r>
   829b0:	b9b0      	cbnz	r0, 829e0 <_vfiprintf_r+0x1e0>
   829b2:	9d02      	ldr	r5, [sp, #8]
   829b4:	89aa      	ldrh	r2, [r5, #12]
   829b6:	f002 021a 	and.w	r2, r2, #26
   829ba:	2a0a      	cmp	r2, #10
   829bc:	f47f af49 	bne.w	82852 <_vfiprintf_r+0x52>
   829c0:	f8dd b008 	ldr.w	fp, [sp, #8]
   829c4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   829c8:	2b00      	cmp	r3, #0
   829ca:	f6ff af42 	blt.w	82852 <_vfiprintf_r+0x52>
   829ce:	9806      	ldr	r0, [sp, #24]
   829d0:	4659      	mov	r1, fp
   829d2:	4642      	mov	r2, r8
   829d4:	4623      	mov	r3, r4
   829d6:	f000 fd3d 	bl	83454 <__sbprintf>
   829da:	b031      	add	sp, #196	; 0xc4
   829dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829e0:	f04f 30ff 	mov.w	r0, #4294967295
   829e4:	b031      	add	sp, #196	; 0xc4
   829e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829ea:	f000 fef7 	bl	837dc <__sinit>
   829ee:	e714      	b.n	8281a <_vfiprintf_r+0x1a>
   829f0:	4240      	negs	r0, r0
   829f2:	9308      	str	r3, [sp, #32]
   829f4:	f04a 0a04 	orr.w	sl, sl, #4
   829f8:	f898 3000 	ldrb.w	r3, [r8]
   829fc:	e76d      	b.n	828da <_vfiprintf_r+0xda>
   829fe:	f01a 0320 	ands.w	r3, sl, #32
   82a02:	9004      	str	r0, [sp, #16]
   82a04:	46ac      	mov	ip, r5
   82a06:	f000 80f4 	beq.w	82bf2 <_vfiprintf_r+0x3f2>
   82a0a:	f8dd b020 	ldr.w	fp, [sp, #32]
   82a0e:	f10b 0307 	add.w	r3, fp, #7
   82a12:	f023 0307 	bic.w	r3, r3, #7
   82a16:	f103 0408 	add.w	r4, r3, #8
   82a1a:	9408      	str	r4, [sp, #32]
   82a1c:	e9d3 4500 	ldrd	r4, r5, [r3]
   82a20:	2300      	movs	r3, #0
   82a22:	f04f 0000 	mov.w	r0, #0
   82a26:	2100      	movs	r1, #0
   82a28:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   82a2c:	f8cd c014 	str.w	ip, [sp, #20]
   82a30:	9107      	str	r1, [sp, #28]
   82a32:	f1bc 0f00 	cmp.w	ip, #0
   82a36:	bfa8      	it	ge
   82a38:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82a3c:	ea54 0205 	orrs.w	r2, r4, r5
   82a40:	f040 80ad 	bne.w	82b9e <_vfiprintf_r+0x39e>
   82a44:	f1bc 0f00 	cmp.w	ip, #0
   82a48:	f040 80a9 	bne.w	82b9e <_vfiprintf_r+0x39e>
   82a4c:	2b00      	cmp	r3, #0
   82a4e:	f040 83c0 	bne.w	831d2 <_vfiprintf_r+0x9d2>
   82a52:	f01a 0f01 	tst.w	sl, #1
   82a56:	f000 83bc 	beq.w	831d2 <_vfiprintf_r+0x9d2>
   82a5a:	2330      	movs	r3, #48	; 0x30
   82a5c:	af30      	add	r7, sp, #192	; 0xc0
   82a5e:	f807 3d41 	strb.w	r3, [r7, #-65]!
   82a62:	ebc7 0409 	rsb	r4, r7, r9
   82a66:	9405      	str	r4, [sp, #20]
   82a68:	f8dd b014 	ldr.w	fp, [sp, #20]
   82a6c:	9c07      	ldr	r4, [sp, #28]
   82a6e:	45e3      	cmp	fp, ip
   82a70:	bfb8      	it	lt
   82a72:	46e3      	movlt	fp, ip
   82a74:	f8cd b00c 	str.w	fp, [sp, #12]
   82a78:	b11c      	cbz	r4, 82a82 <_vfiprintf_r+0x282>
   82a7a:	f10b 0b01 	add.w	fp, fp, #1
   82a7e:	f8cd b00c 	str.w	fp, [sp, #12]
   82a82:	f01a 0502 	ands.w	r5, sl, #2
   82a86:	9507      	str	r5, [sp, #28]
   82a88:	d005      	beq.n	82a96 <_vfiprintf_r+0x296>
   82a8a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82a8e:	f10b 0b02 	add.w	fp, fp, #2
   82a92:	f8cd b00c 	str.w	fp, [sp, #12]
   82a96:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   82a9a:	930b      	str	r3, [sp, #44]	; 0x2c
   82a9c:	f040 821b 	bne.w	82ed6 <_vfiprintf_r+0x6d6>
   82aa0:	9d04      	ldr	r5, [sp, #16]
   82aa2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82aa6:	ebcb 0405 	rsb	r4, fp, r5
   82aaa:	2c00      	cmp	r4, #0
   82aac:	f340 8213 	ble.w	82ed6 <_vfiprintf_r+0x6d6>
   82ab0:	2c10      	cmp	r4, #16
   82ab2:	f340 8489 	ble.w	833c8 <_vfiprintf_r+0xbc8>
   82ab6:	4dbe      	ldr	r5, [pc, #760]	; (82db0 <_vfiprintf_r+0x5b0>)
   82ab8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82aba:	462b      	mov	r3, r5
   82abc:	9814      	ldr	r0, [sp, #80]	; 0x50
   82abe:	4625      	mov	r5, r4
   82ac0:	f04f 0b10 	mov.w	fp, #16
   82ac4:	4664      	mov	r4, ip
   82ac6:	46b4      	mov	ip, r6
   82ac8:	461e      	mov	r6, r3
   82aca:	e006      	b.n	82ada <_vfiprintf_r+0x2da>
   82acc:	1c83      	adds	r3, r0, #2
   82ace:	f10c 0c08 	add.w	ip, ip, #8
   82ad2:	4608      	mov	r0, r1
   82ad4:	3d10      	subs	r5, #16
   82ad6:	2d10      	cmp	r5, #16
   82ad8:	dd11      	ble.n	82afe <_vfiprintf_r+0x2fe>
   82ada:	1c41      	adds	r1, r0, #1
   82adc:	3210      	adds	r2, #16
   82ade:	2907      	cmp	r1, #7
   82ae0:	9215      	str	r2, [sp, #84]	; 0x54
   82ae2:	e88c 0840 	stmia.w	ip, {r6, fp}
   82ae6:	9114      	str	r1, [sp, #80]	; 0x50
   82ae8:	ddf0      	ble.n	82acc <_vfiprintf_r+0x2cc>
   82aea:	2a00      	cmp	r2, #0
   82aec:	f040 81e6 	bne.w	82ebc <_vfiprintf_r+0x6bc>
   82af0:	3d10      	subs	r5, #16
   82af2:	2d10      	cmp	r5, #16
   82af4:	f04f 0301 	mov.w	r3, #1
   82af8:	4610      	mov	r0, r2
   82afa:	46cc      	mov	ip, r9
   82afc:	dced      	bgt.n	82ada <_vfiprintf_r+0x2da>
   82afe:	4631      	mov	r1, r6
   82b00:	4666      	mov	r6, ip
   82b02:	46a4      	mov	ip, r4
   82b04:	462c      	mov	r4, r5
   82b06:	460d      	mov	r5, r1
   82b08:	4422      	add	r2, r4
   82b0a:	2b07      	cmp	r3, #7
   82b0c:	9215      	str	r2, [sp, #84]	; 0x54
   82b0e:	6035      	str	r5, [r6, #0]
   82b10:	6074      	str	r4, [r6, #4]
   82b12:	9314      	str	r3, [sp, #80]	; 0x50
   82b14:	f300 836d 	bgt.w	831f2 <_vfiprintf_r+0x9f2>
   82b18:	3608      	adds	r6, #8
   82b1a:	1c59      	adds	r1, r3, #1
   82b1c:	e1de      	b.n	82edc <_vfiprintf_r+0x6dc>
   82b1e:	f01a 0f20 	tst.w	sl, #32
   82b22:	9004      	str	r0, [sp, #16]
   82b24:	46ac      	mov	ip, r5
   82b26:	f000 808d 	beq.w	82c44 <_vfiprintf_r+0x444>
   82b2a:	9d08      	ldr	r5, [sp, #32]
   82b2c:	1deb      	adds	r3, r5, #7
   82b2e:	f023 0307 	bic.w	r3, r3, #7
   82b32:	f103 0b08 	add.w	fp, r3, #8
   82b36:	e9d3 4500 	ldrd	r4, r5, [r3]
   82b3a:	f8cd b020 	str.w	fp, [sp, #32]
   82b3e:	2301      	movs	r3, #1
   82b40:	e76f      	b.n	82a22 <_vfiprintf_r+0x222>
   82b42:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   82b46:	f898 3000 	ldrb.w	r3, [r8]
   82b4a:	e6c6      	b.n	828da <_vfiprintf_r+0xda>
   82b4c:	f04a 0a10 	orr.w	sl, sl, #16
   82b50:	f01a 0f20 	tst.w	sl, #32
   82b54:	9004      	str	r0, [sp, #16]
   82b56:	46ac      	mov	ip, r5
   82b58:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82b5c:	f000 80c8 	beq.w	82cf0 <_vfiprintf_r+0x4f0>
   82b60:	9c08      	ldr	r4, [sp, #32]
   82b62:	1de1      	adds	r1, r4, #7
   82b64:	f021 0107 	bic.w	r1, r1, #7
   82b68:	e9d1 2300 	ldrd	r2, r3, [r1]
   82b6c:	3108      	adds	r1, #8
   82b6e:	9108      	str	r1, [sp, #32]
   82b70:	4614      	mov	r4, r2
   82b72:	461d      	mov	r5, r3
   82b74:	2a00      	cmp	r2, #0
   82b76:	f173 0b00 	sbcs.w	fp, r3, #0
   82b7a:	f2c0 83ce 	blt.w	8331a <_vfiprintf_r+0xb1a>
   82b7e:	f1bc 0f00 	cmp.w	ip, #0
   82b82:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   82b86:	bfa8      	it	ge
   82b88:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82b8c:	ea54 0205 	orrs.w	r2, r4, r5
   82b90:	9007      	str	r0, [sp, #28]
   82b92:	f8cd c014 	str.w	ip, [sp, #20]
   82b96:	f04f 0301 	mov.w	r3, #1
   82b9a:	f43f af53 	beq.w	82a44 <_vfiprintf_r+0x244>
   82b9e:	2b01      	cmp	r3, #1
   82ba0:	f000 8319 	beq.w	831d6 <_vfiprintf_r+0x9d6>
   82ba4:	2b02      	cmp	r3, #2
   82ba6:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   82baa:	f040 824c 	bne.w	83046 <_vfiprintf_r+0x846>
   82bae:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   82bb2:	4619      	mov	r1, r3
   82bb4:	f004 000f 	and.w	r0, r4, #15
   82bb8:	0922      	lsrs	r2, r4, #4
   82bba:	f81b 0000 	ldrb.w	r0, [fp, r0]
   82bbe:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   82bc2:	092b      	lsrs	r3, r5, #4
   82bc4:	7008      	strb	r0, [r1, #0]
   82bc6:	ea52 0003 	orrs.w	r0, r2, r3
   82bca:	460f      	mov	r7, r1
   82bcc:	4614      	mov	r4, r2
   82bce:	461d      	mov	r5, r3
   82bd0:	f101 31ff 	add.w	r1, r1, #4294967295
   82bd4:	d1ee      	bne.n	82bb4 <_vfiprintf_r+0x3b4>
   82bd6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   82bda:	ebc7 0309 	rsb	r3, r7, r9
   82bde:	9305      	str	r3, [sp, #20]
   82be0:	e742      	b.n	82a68 <_vfiprintf_r+0x268>
   82be2:	f04a 0a10 	orr.w	sl, sl, #16
   82be6:	f01a 0320 	ands.w	r3, sl, #32
   82bea:	9004      	str	r0, [sp, #16]
   82bec:	46ac      	mov	ip, r5
   82bee:	f47f af0c 	bne.w	82a0a <_vfiprintf_r+0x20a>
   82bf2:	f01a 0210 	ands.w	r2, sl, #16
   82bf6:	f040 8311 	bne.w	8321c <_vfiprintf_r+0xa1c>
   82bfa:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   82bfe:	f000 830d 	beq.w	8321c <_vfiprintf_r+0xa1c>
   82c02:	f8dd b020 	ldr.w	fp, [sp, #32]
   82c06:	4613      	mov	r3, r2
   82c08:	f8bb 4000 	ldrh.w	r4, [fp]
   82c0c:	f10b 0b04 	add.w	fp, fp, #4
   82c10:	2500      	movs	r5, #0
   82c12:	f8cd b020 	str.w	fp, [sp, #32]
   82c16:	e704      	b.n	82a22 <_vfiprintf_r+0x222>
   82c18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82c1c:	2000      	movs	r0, #0
   82c1e:	f818 3b01 	ldrb.w	r3, [r8], #1
   82c22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   82c26:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   82c2a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82c2e:	2a09      	cmp	r2, #9
   82c30:	d9f5      	bls.n	82c1e <_vfiprintf_r+0x41e>
   82c32:	e654      	b.n	828de <_vfiprintf_r+0xde>
   82c34:	f04a 0a10 	orr.w	sl, sl, #16
   82c38:	f01a 0f20 	tst.w	sl, #32
   82c3c:	9004      	str	r0, [sp, #16]
   82c3e:	46ac      	mov	ip, r5
   82c40:	f47f af73 	bne.w	82b2a <_vfiprintf_r+0x32a>
   82c44:	f01a 0f10 	tst.w	sl, #16
   82c48:	f040 82ef 	bne.w	8322a <_vfiprintf_r+0xa2a>
   82c4c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82c50:	f000 82eb 	beq.w	8322a <_vfiprintf_r+0xa2a>
   82c54:	f8dd b020 	ldr.w	fp, [sp, #32]
   82c58:	2500      	movs	r5, #0
   82c5a:	f8bb 4000 	ldrh.w	r4, [fp]
   82c5e:	f10b 0b04 	add.w	fp, fp, #4
   82c62:	2301      	movs	r3, #1
   82c64:	f8cd b020 	str.w	fp, [sp, #32]
   82c68:	e6db      	b.n	82a22 <_vfiprintf_r+0x222>
   82c6a:	46ac      	mov	ip, r5
   82c6c:	4d51      	ldr	r5, [pc, #324]	; (82db4 <_vfiprintf_r+0x5b4>)
   82c6e:	f01a 0f20 	tst.w	sl, #32
   82c72:	9004      	str	r0, [sp, #16]
   82c74:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82c78:	950a      	str	r5, [sp, #40]	; 0x28
   82c7a:	f000 80f0 	beq.w	82e5e <_vfiprintf_r+0x65e>
   82c7e:	9d08      	ldr	r5, [sp, #32]
   82c80:	1dea      	adds	r2, r5, #7
   82c82:	f022 0207 	bic.w	r2, r2, #7
   82c86:	f102 0b08 	add.w	fp, r2, #8
   82c8a:	f8cd b020 	str.w	fp, [sp, #32]
   82c8e:	e9d2 4500 	ldrd	r4, r5, [r2]
   82c92:	f01a 0f01 	tst.w	sl, #1
   82c96:	f000 82aa 	beq.w	831ee <_vfiprintf_r+0x9ee>
   82c9a:	ea54 0b05 	orrs.w	fp, r4, r5
   82c9e:	f000 82a6 	beq.w	831ee <_vfiprintf_r+0x9ee>
   82ca2:	2230      	movs	r2, #48	; 0x30
   82ca4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   82ca8:	f04a 0a02 	orr.w	sl, sl, #2
   82cac:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82cb0:	2302      	movs	r3, #2
   82cb2:	e6b6      	b.n	82a22 <_vfiprintf_r+0x222>
   82cb4:	9b08      	ldr	r3, [sp, #32]
   82cb6:	f8dd b020 	ldr.w	fp, [sp, #32]
   82cba:	681b      	ldr	r3, [r3, #0]
   82cbc:	2401      	movs	r4, #1
   82cbe:	f04f 0500 	mov.w	r5, #0
   82cc2:	f10b 0b04 	add.w	fp, fp, #4
   82cc6:	9004      	str	r0, [sp, #16]
   82cc8:	9403      	str	r4, [sp, #12]
   82cca:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82cce:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   82cd2:	f8cd b020 	str.w	fp, [sp, #32]
   82cd6:	9405      	str	r4, [sp, #20]
   82cd8:	af16      	add	r7, sp, #88	; 0x58
   82cda:	f04f 0c00 	mov.w	ip, #0
   82cde:	e6d0      	b.n	82a82 <_vfiprintf_r+0x282>
   82ce0:	f01a 0f20 	tst.w	sl, #32
   82ce4:	9004      	str	r0, [sp, #16]
   82ce6:	46ac      	mov	ip, r5
   82ce8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82cec:	f47f af38 	bne.w	82b60 <_vfiprintf_r+0x360>
   82cf0:	f01a 0f10 	tst.w	sl, #16
   82cf4:	f040 82a7 	bne.w	83246 <_vfiprintf_r+0xa46>
   82cf8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82cfc:	f000 82a3 	beq.w	83246 <_vfiprintf_r+0xa46>
   82d00:	f8dd b020 	ldr.w	fp, [sp, #32]
   82d04:	f9bb 4000 	ldrsh.w	r4, [fp]
   82d08:	f10b 0b04 	add.w	fp, fp, #4
   82d0c:	17e5      	asrs	r5, r4, #31
   82d0e:	4622      	mov	r2, r4
   82d10:	462b      	mov	r3, r5
   82d12:	f8cd b020 	str.w	fp, [sp, #32]
   82d16:	e72d      	b.n	82b74 <_vfiprintf_r+0x374>
   82d18:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   82d1c:	f898 3000 	ldrb.w	r3, [r8]
   82d20:	e5db      	b.n	828da <_vfiprintf_r+0xda>
   82d22:	f898 3000 	ldrb.w	r3, [r8]
   82d26:	4642      	mov	r2, r8
   82d28:	2b6c      	cmp	r3, #108	; 0x6c
   82d2a:	bf03      	ittte	eq
   82d2c:	f108 0801 	addeq.w	r8, r8, #1
   82d30:	f04a 0a20 	orreq.w	sl, sl, #32
   82d34:	7853      	ldrbeq	r3, [r2, #1]
   82d36:	f04a 0a10 	orrne.w	sl, sl, #16
   82d3a:	e5ce      	b.n	828da <_vfiprintf_r+0xda>
   82d3c:	f01a 0f20 	tst.w	sl, #32
   82d40:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82d44:	f000 82f7 	beq.w	83336 <_vfiprintf_r+0xb36>
   82d48:	9c08      	ldr	r4, [sp, #32]
   82d4a:	6821      	ldr	r1, [r4, #0]
   82d4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82d4e:	17e5      	asrs	r5, r4, #31
   82d50:	462b      	mov	r3, r5
   82d52:	9d08      	ldr	r5, [sp, #32]
   82d54:	4622      	mov	r2, r4
   82d56:	3504      	adds	r5, #4
   82d58:	9508      	str	r5, [sp, #32]
   82d5a:	e9c1 2300 	strd	r2, r3, [r1]
   82d5e:	e582      	b.n	82866 <_vfiprintf_r+0x66>
   82d60:	9c08      	ldr	r4, [sp, #32]
   82d62:	46ac      	mov	ip, r5
   82d64:	6827      	ldr	r7, [r4, #0]
   82d66:	f04f 0500 	mov.w	r5, #0
   82d6a:	9004      	str	r0, [sp, #16]
   82d6c:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82d70:	3404      	adds	r4, #4
   82d72:	2f00      	cmp	r7, #0
   82d74:	f000 8332 	beq.w	833dc <_vfiprintf_r+0xbdc>
   82d78:	f1bc 0f00 	cmp.w	ip, #0
   82d7c:	4638      	mov	r0, r7
   82d7e:	f2c0 8307 	blt.w	83390 <_vfiprintf_r+0xb90>
   82d82:	4662      	mov	r2, ip
   82d84:	2100      	movs	r1, #0
   82d86:	f8cd c004 	str.w	ip, [sp, #4]
   82d8a:	f001 fc05 	bl	84598 <memchr>
   82d8e:	f8dd c004 	ldr.w	ip, [sp, #4]
   82d92:	2800      	cmp	r0, #0
   82d94:	f000 833a 	beq.w	8340c <_vfiprintf_r+0xc0c>
   82d98:	1bc0      	subs	r0, r0, r7
   82d9a:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82d9e:	4560      	cmp	r0, ip
   82da0:	bfa8      	it	ge
   82da2:	4660      	movge	r0, ip
   82da4:	9005      	str	r0, [sp, #20]
   82da6:	9408      	str	r4, [sp, #32]
   82da8:	9507      	str	r5, [sp, #28]
   82daa:	f04f 0c00 	mov.w	ip, #0
   82dae:	e65b      	b.n	82a68 <_vfiprintf_r+0x268>
   82db0:	00085528 	.word	0x00085528
   82db4:	000854e8 	.word	0x000854e8
   82db8:	9b08      	ldr	r3, [sp, #32]
   82dba:	f8dd b020 	ldr.w	fp, [sp, #32]
   82dbe:	9004      	str	r0, [sp, #16]
   82dc0:	48b2      	ldr	r0, [pc, #712]	; (8308c <_vfiprintf_r+0x88c>)
   82dc2:	681c      	ldr	r4, [r3, #0]
   82dc4:	2230      	movs	r2, #48	; 0x30
   82dc6:	2378      	movs	r3, #120	; 0x78
   82dc8:	f10b 0b04 	add.w	fp, fp, #4
   82dcc:	46ac      	mov	ip, r5
   82dce:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   82dd2:	f04a 0a02 	orr.w	sl, sl, #2
   82dd6:	f8cd b020 	str.w	fp, [sp, #32]
   82dda:	2500      	movs	r5, #0
   82ddc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82de0:	900a      	str	r0, [sp, #40]	; 0x28
   82de2:	2302      	movs	r3, #2
   82de4:	e61d      	b.n	82a22 <_vfiprintf_r+0x222>
   82de6:	f04a 0a20 	orr.w	sl, sl, #32
   82dea:	f898 3000 	ldrb.w	r3, [r8]
   82dee:	e574      	b.n	828da <_vfiprintf_r+0xda>
   82df0:	f8dd b020 	ldr.w	fp, [sp, #32]
   82df4:	f8db 0000 	ldr.w	r0, [fp]
   82df8:	f10b 0304 	add.w	r3, fp, #4
   82dfc:	2800      	cmp	r0, #0
   82dfe:	f6ff adf7 	blt.w	829f0 <_vfiprintf_r+0x1f0>
   82e02:	9308      	str	r3, [sp, #32]
   82e04:	f898 3000 	ldrb.w	r3, [r8]
   82e08:	e567      	b.n	828da <_vfiprintf_r+0xda>
   82e0a:	f898 3000 	ldrb.w	r3, [r8]
   82e0e:	212b      	movs	r1, #43	; 0x2b
   82e10:	e563      	b.n	828da <_vfiprintf_r+0xda>
   82e12:	f898 3000 	ldrb.w	r3, [r8]
   82e16:	f108 0401 	add.w	r4, r8, #1
   82e1a:	2b2a      	cmp	r3, #42	; 0x2a
   82e1c:	f000 8305 	beq.w	8342a <_vfiprintf_r+0xc2a>
   82e20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82e24:	2a09      	cmp	r2, #9
   82e26:	bf98      	it	ls
   82e28:	2500      	movls	r5, #0
   82e2a:	f200 82fa 	bhi.w	83422 <_vfiprintf_r+0xc22>
   82e2e:	f814 3b01 	ldrb.w	r3, [r4], #1
   82e32:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82e36:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   82e3a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82e3e:	2a09      	cmp	r2, #9
   82e40:	d9f5      	bls.n	82e2e <_vfiprintf_r+0x62e>
   82e42:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   82e46:	46a0      	mov	r8, r4
   82e48:	e549      	b.n	828de <_vfiprintf_r+0xde>
   82e4a:	4c90      	ldr	r4, [pc, #576]	; (8308c <_vfiprintf_r+0x88c>)
   82e4c:	f01a 0f20 	tst.w	sl, #32
   82e50:	9004      	str	r0, [sp, #16]
   82e52:	46ac      	mov	ip, r5
   82e54:	940a      	str	r4, [sp, #40]	; 0x28
   82e56:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82e5a:	f47f af10 	bne.w	82c7e <_vfiprintf_r+0x47e>
   82e5e:	f01a 0f10 	tst.w	sl, #16
   82e62:	f040 81ea 	bne.w	8323a <_vfiprintf_r+0xa3a>
   82e66:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82e6a:	f000 81e6 	beq.w	8323a <_vfiprintf_r+0xa3a>
   82e6e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82e72:	2500      	movs	r5, #0
   82e74:	f8bb 4000 	ldrh.w	r4, [fp]
   82e78:	f10b 0b04 	add.w	fp, fp, #4
   82e7c:	f8cd b020 	str.w	fp, [sp, #32]
   82e80:	e707      	b.n	82c92 <_vfiprintf_r+0x492>
   82e82:	f898 3000 	ldrb.w	r3, [r8]
   82e86:	2900      	cmp	r1, #0
   82e88:	f47f ad27 	bne.w	828da <_vfiprintf_r+0xda>
   82e8c:	2120      	movs	r1, #32
   82e8e:	e524      	b.n	828da <_vfiprintf_r+0xda>
   82e90:	f04a 0a01 	orr.w	sl, sl, #1
   82e94:	f898 3000 	ldrb.w	r3, [r8]
   82e98:	e51f      	b.n	828da <_vfiprintf_r+0xda>
   82e9a:	9004      	str	r0, [sp, #16]
   82e9c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82ea0:	2b00      	cmp	r3, #0
   82ea2:	f000 80f9 	beq.w	83098 <_vfiprintf_r+0x898>
   82ea6:	2501      	movs	r5, #1
   82ea8:	f04f 0b00 	mov.w	fp, #0
   82eac:	9503      	str	r5, [sp, #12]
   82eae:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   82eb2:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82eb6:	9505      	str	r5, [sp, #20]
   82eb8:	af16      	add	r7, sp, #88	; 0x58
   82eba:	e70e      	b.n	82cda <_vfiprintf_r+0x4da>
   82ebc:	9806      	ldr	r0, [sp, #24]
   82ebe:	9902      	ldr	r1, [sp, #8]
   82ec0:	aa13      	add	r2, sp, #76	; 0x4c
   82ec2:	f7ff fc61 	bl	82788 <__sprint_r.part.0>
   82ec6:	2800      	cmp	r0, #0
   82ec8:	f040 80ed 	bne.w	830a6 <_vfiprintf_r+0x8a6>
   82ecc:	9814      	ldr	r0, [sp, #80]	; 0x50
   82ece:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82ed0:	1c43      	adds	r3, r0, #1
   82ed2:	46cc      	mov	ip, r9
   82ed4:	e5fe      	b.n	82ad4 <_vfiprintf_r+0x2d4>
   82ed6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82ed8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82eda:	1c59      	adds	r1, r3, #1
   82edc:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   82ee0:	b168      	cbz	r0, 82efe <_vfiprintf_r+0x6fe>
   82ee2:	3201      	adds	r2, #1
   82ee4:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   82ee8:	2301      	movs	r3, #1
   82eea:	2907      	cmp	r1, #7
   82eec:	9215      	str	r2, [sp, #84]	; 0x54
   82eee:	9114      	str	r1, [sp, #80]	; 0x50
   82ef0:	e886 0009 	stmia.w	r6, {r0, r3}
   82ef4:	f300 8160 	bgt.w	831b8 <_vfiprintf_r+0x9b8>
   82ef8:	460b      	mov	r3, r1
   82efa:	3608      	adds	r6, #8
   82efc:	3101      	adds	r1, #1
   82efe:	9c07      	ldr	r4, [sp, #28]
   82f00:	b164      	cbz	r4, 82f1c <_vfiprintf_r+0x71c>
   82f02:	3202      	adds	r2, #2
   82f04:	a812      	add	r0, sp, #72	; 0x48
   82f06:	2302      	movs	r3, #2
   82f08:	2907      	cmp	r1, #7
   82f0a:	9215      	str	r2, [sp, #84]	; 0x54
   82f0c:	9114      	str	r1, [sp, #80]	; 0x50
   82f0e:	e886 0009 	stmia.w	r6, {r0, r3}
   82f12:	f300 8157 	bgt.w	831c4 <_vfiprintf_r+0x9c4>
   82f16:	460b      	mov	r3, r1
   82f18:	3608      	adds	r6, #8
   82f1a:	3101      	adds	r1, #1
   82f1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82f1e:	2d80      	cmp	r5, #128	; 0x80
   82f20:	f000 8101 	beq.w	83126 <_vfiprintf_r+0x926>
   82f24:	9d05      	ldr	r5, [sp, #20]
   82f26:	ebc5 040c 	rsb	r4, r5, ip
   82f2a:	2c00      	cmp	r4, #0
   82f2c:	dd2f      	ble.n	82f8e <_vfiprintf_r+0x78e>
   82f2e:	2c10      	cmp	r4, #16
   82f30:	4d57      	ldr	r5, [pc, #348]	; (83090 <_vfiprintf_r+0x890>)
   82f32:	dd22      	ble.n	82f7a <_vfiprintf_r+0x77a>
   82f34:	4630      	mov	r0, r6
   82f36:	f04f 0b10 	mov.w	fp, #16
   82f3a:	462e      	mov	r6, r5
   82f3c:	4625      	mov	r5, r4
   82f3e:	9c06      	ldr	r4, [sp, #24]
   82f40:	e006      	b.n	82f50 <_vfiprintf_r+0x750>
   82f42:	f103 0c02 	add.w	ip, r3, #2
   82f46:	3008      	adds	r0, #8
   82f48:	460b      	mov	r3, r1
   82f4a:	3d10      	subs	r5, #16
   82f4c:	2d10      	cmp	r5, #16
   82f4e:	dd10      	ble.n	82f72 <_vfiprintf_r+0x772>
   82f50:	1c59      	adds	r1, r3, #1
   82f52:	3210      	adds	r2, #16
   82f54:	2907      	cmp	r1, #7
   82f56:	9215      	str	r2, [sp, #84]	; 0x54
   82f58:	e880 0840 	stmia.w	r0, {r6, fp}
   82f5c:	9114      	str	r1, [sp, #80]	; 0x50
   82f5e:	ddf0      	ble.n	82f42 <_vfiprintf_r+0x742>
   82f60:	2a00      	cmp	r2, #0
   82f62:	d163      	bne.n	8302c <_vfiprintf_r+0x82c>
   82f64:	3d10      	subs	r5, #16
   82f66:	2d10      	cmp	r5, #16
   82f68:	f04f 0c01 	mov.w	ip, #1
   82f6c:	4613      	mov	r3, r2
   82f6e:	4648      	mov	r0, r9
   82f70:	dcee      	bgt.n	82f50 <_vfiprintf_r+0x750>
   82f72:	462c      	mov	r4, r5
   82f74:	4661      	mov	r1, ip
   82f76:	4635      	mov	r5, r6
   82f78:	4606      	mov	r6, r0
   82f7a:	4422      	add	r2, r4
   82f7c:	2907      	cmp	r1, #7
   82f7e:	9215      	str	r2, [sp, #84]	; 0x54
   82f80:	6035      	str	r5, [r6, #0]
   82f82:	6074      	str	r4, [r6, #4]
   82f84:	9114      	str	r1, [sp, #80]	; 0x50
   82f86:	f300 80c1 	bgt.w	8310c <_vfiprintf_r+0x90c>
   82f8a:	3608      	adds	r6, #8
   82f8c:	3101      	adds	r1, #1
   82f8e:	9d05      	ldr	r5, [sp, #20]
   82f90:	2907      	cmp	r1, #7
   82f92:	442a      	add	r2, r5
   82f94:	9215      	str	r2, [sp, #84]	; 0x54
   82f96:	6037      	str	r7, [r6, #0]
   82f98:	6075      	str	r5, [r6, #4]
   82f9a:	9114      	str	r1, [sp, #80]	; 0x50
   82f9c:	f340 80c1 	ble.w	83122 <_vfiprintf_r+0x922>
   82fa0:	2a00      	cmp	r2, #0
   82fa2:	f040 8130 	bne.w	83206 <_vfiprintf_r+0xa06>
   82fa6:	9214      	str	r2, [sp, #80]	; 0x50
   82fa8:	464e      	mov	r6, r9
   82faa:	f01a 0f04 	tst.w	sl, #4
   82fae:	f000 808b 	beq.w	830c8 <_vfiprintf_r+0x8c8>
   82fb2:	9d04      	ldr	r5, [sp, #16]
   82fb4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82fb8:	ebcb 0405 	rsb	r4, fp, r5
   82fbc:	2c00      	cmp	r4, #0
   82fbe:	f340 8083 	ble.w	830c8 <_vfiprintf_r+0x8c8>
   82fc2:	2c10      	cmp	r4, #16
   82fc4:	f340 821e 	ble.w	83404 <_vfiprintf_r+0xc04>
   82fc8:	9914      	ldr	r1, [sp, #80]	; 0x50
   82fca:	4d32      	ldr	r5, [pc, #200]	; (83094 <_vfiprintf_r+0x894>)
   82fcc:	2710      	movs	r7, #16
   82fce:	f8dd a018 	ldr.w	sl, [sp, #24]
   82fd2:	f8dd b008 	ldr.w	fp, [sp, #8]
   82fd6:	e005      	b.n	82fe4 <_vfiprintf_r+0x7e4>
   82fd8:	1c88      	adds	r0, r1, #2
   82fda:	3608      	adds	r6, #8
   82fdc:	4619      	mov	r1, r3
   82fde:	3c10      	subs	r4, #16
   82fe0:	2c10      	cmp	r4, #16
   82fe2:	dd10      	ble.n	83006 <_vfiprintf_r+0x806>
   82fe4:	1c4b      	adds	r3, r1, #1
   82fe6:	3210      	adds	r2, #16
   82fe8:	2b07      	cmp	r3, #7
   82fea:	9215      	str	r2, [sp, #84]	; 0x54
   82fec:	e886 00a0 	stmia.w	r6, {r5, r7}
   82ff0:	9314      	str	r3, [sp, #80]	; 0x50
   82ff2:	ddf1      	ble.n	82fd8 <_vfiprintf_r+0x7d8>
   82ff4:	2a00      	cmp	r2, #0
   82ff6:	d17d      	bne.n	830f4 <_vfiprintf_r+0x8f4>
   82ff8:	3c10      	subs	r4, #16
   82ffa:	2c10      	cmp	r4, #16
   82ffc:	f04f 0001 	mov.w	r0, #1
   83000:	4611      	mov	r1, r2
   83002:	464e      	mov	r6, r9
   83004:	dcee      	bgt.n	82fe4 <_vfiprintf_r+0x7e4>
   83006:	4422      	add	r2, r4
   83008:	2807      	cmp	r0, #7
   8300a:	9215      	str	r2, [sp, #84]	; 0x54
   8300c:	6035      	str	r5, [r6, #0]
   8300e:	6074      	str	r4, [r6, #4]
   83010:	9014      	str	r0, [sp, #80]	; 0x50
   83012:	dd59      	ble.n	830c8 <_vfiprintf_r+0x8c8>
   83014:	2a00      	cmp	r2, #0
   83016:	d14f      	bne.n	830b8 <_vfiprintf_r+0x8b8>
   83018:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8301a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8301e:	9d04      	ldr	r5, [sp, #16]
   83020:	45ab      	cmp	fp, r5
   83022:	bfac      	ite	ge
   83024:	445c      	addge	r4, fp
   83026:	1964      	addlt	r4, r4, r5
   83028:	9409      	str	r4, [sp, #36]	; 0x24
   8302a:	e05e      	b.n	830ea <_vfiprintf_r+0x8ea>
   8302c:	4620      	mov	r0, r4
   8302e:	9902      	ldr	r1, [sp, #8]
   83030:	aa13      	add	r2, sp, #76	; 0x4c
   83032:	f7ff fba9 	bl	82788 <__sprint_r.part.0>
   83036:	2800      	cmp	r0, #0
   83038:	d135      	bne.n	830a6 <_vfiprintf_r+0x8a6>
   8303a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8303c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8303e:	f103 0c01 	add.w	ip, r3, #1
   83042:	4648      	mov	r0, r9
   83044:	e781      	b.n	82f4a <_vfiprintf_r+0x74a>
   83046:	08e0      	lsrs	r0, r4, #3
   83048:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   8304c:	f004 0207 	and.w	r2, r4, #7
   83050:	08e9      	lsrs	r1, r5, #3
   83052:	3230      	adds	r2, #48	; 0x30
   83054:	ea50 0b01 	orrs.w	fp, r0, r1
   83058:	461f      	mov	r7, r3
   8305a:	701a      	strb	r2, [r3, #0]
   8305c:	4604      	mov	r4, r0
   8305e:	460d      	mov	r5, r1
   83060:	f103 33ff 	add.w	r3, r3, #4294967295
   83064:	d1ef      	bne.n	83046 <_vfiprintf_r+0x846>
   83066:	f01a 0f01 	tst.w	sl, #1
   8306a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   8306e:	4639      	mov	r1, r7
   83070:	f000 80b9 	beq.w	831e6 <_vfiprintf_r+0x9e6>
   83074:	2a30      	cmp	r2, #48	; 0x30
   83076:	f43f acf4 	beq.w	82a62 <_vfiprintf_r+0x262>
   8307a:	461f      	mov	r7, r3
   8307c:	ebc7 0509 	rsb	r5, r7, r9
   83080:	2330      	movs	r3, #48	; 0x30
   83082:	9505      	str	r5, [sp, #20]
   83084:	f801 3c01 	strb.w	r3, [r1, #-1]
   83088:	e4ee      	b.n	82a68 <_vfiprintf_r+0x268>
   8308a:	bf00      	nop
   8308c:	000854fc 	.word	0x000854fc
   83090:	00085518 	.word	0x00085518
   83094:	00085528 	.word	0x00085528
   83098:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8309a:	b123      	cbz	r3, 830a6 <_vfiprintf_r+0x8a6>
   8309c:	9806      	ldr	r0, [sp, #24]
   8309e:	9902      	ldr	r1, [sp, #8]
   830a0:	aa13      	add	r2, sp, #76	; 0x4c
   830a2:	f7ff fb71 	bl	82788 <__sprint_r.part.0>
   830a6:	9c02      	ldr	r4, [sp, #8]
   830a8:	89a3      	ldrh	r3, [r4, #12]
   830aa:	065b      	lsls	r3, r3, #25
   830ac:	f53f ac98 	bmi.w	829e0 <_vfiprintf_r+0x1e0>
   830b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   830b2:	b031      	add	sp, #196	; 0xc4
   830b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830b8:	9806      	ldr	r0, [sp, #24]
   830ba:	9902      	ldr	r1, [sp, #8]
   830bc:	aa13      	add	r2, sp, #76	; 0x4c
   830be:	f7ff fb63 	bl	82788 <__sprint_r.part.0>
   830c2:	2800      	cmp	r0, #0
   830c4:	d1ef      	bne.n	830a6 <_vfiprintf_r+0x8a6>
   830c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   830c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   830ca:	f8dd b00c 	ldr.w	fp, [sp, #12]
   830ce:	9d04      	ldr	r5, [sp, #16]
   830d0:	45ab      	cmp	fp, r5
   830d2:	bfac      	ite	ge
   830d4:	445c      	addge	r4, fp
   830d6:	1964      	addlt	r4, r4, r5
   830d8:	9409      	str	r4, [sp, #36]	; 0x24
   830da:	b132      	cbz	r2, 830ea <_vfiprintf_r+0x8ea>
   830dc:	9806      	ldr	r0, [sp, #24]
   830de:	9902      	ldr	r1, [sp, #8]
   830e0:	aa13      	add	r2, sp, #76	; 0x4c
   830e2:	f7ff fb51 	bl	82788 <__sprint_r.part.0>
   830e6:	2800      	cmp	r0, #0
   830e8:	d1dd      	bne.n	830a6 <_vfiprintf_r+0x8a6>
   830ea:	2000      	movs	r0, #0
   830ec:	9014      	str	r0, [sp, #80]	; 0x50
   830ee:	464e      	mov	r6, r9
   830f0:	f7ff bbb9 	b.w	82866 <_vfiprintf_r+0x66>
   830f4:	4650      	mov	r0, sl
   830f6:	4659      	mov	r1, fp
   830f8:	aa13      	add	r2, sp, #76	; 0x4c
   830fa:	f7ff fb45 	bl	82788 <__sprint_r.part.0>
   830fe:	2800      	cmp	r0, #0
   83100:	d1d1      	bne.n	830a6 <_vfiprintf_r+0x8a6>
   83102:	9914      	ldr	r1, [sp, #80]	; 0x50
   83104:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83106:	1c48      	adds	r0, r1, #1
   83108:	464e      	mov	r6, r9
   8310a:	e768      	b.n	82fde <_vfiprintf_r+0x7de>
   8310c:	2a00      	cmp	r2, #0
   8310e:	f040 80f7 	bne.w	83300 <_vfiprintf_r+0xb00>
   83112:	9c05      	ldr	r4, [sp, #20]
   83114:	2301      	movs	r3, #1
   83116:	9720      	str	r7, [sp, #128]	; 0x80
   83118:	9421      	str	r4, [sp, #132]	; 0x84
   8311a:	9415      	str	r4, [sp, #84]	; 0x54
   8311c:	4622      	mov	r2, r4
   8311e:	9314      	str	r3, [sp, #80]	; 0x50
   83120:	464e      	mov	r6, r9
   83122:	3608      	adds	r6, #8
   83124:	e741      	b.n	82faa <_vfiprintf_r+0x7aa>
   83126:	9d04      	ldr	r5, [sp, #16]
   83128:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8312c:	ebcb 0405 	rsb	r4, fp, r5
   83130:	2c00      	cmp	r4, #0
   83132:	f77f aef7 	ble.w	82f24 <_vfiprintf_r+0x724>
   83136:	2c10      	cmp	r4, #16
   83138:	4da6      	ldr	r5, [pc, #664]	; (833d4 <_vfiprintf_r+0xbd4>)
   8313a:	f340 8170 	ble.w	8341e <_vfiprintf_r+0xc1e>
   8313e:	4629      	mov	r1, r5
   83140:	f04f 0b10 	mov.w	fp, #16
   83144:	4625      	mov	r5, r4
   83146:	4664      	mov	r4, ip
   83148:	46b4      	mov	ip, r6
   8314a:	460e      	mov	r6, r1
   8314c:	e006      	b.n	8315c <_vfiprintf_r+0x95c>
   8314e:	1c98      	adds	r0, r3, #2
   83150:	f10c 0c08 	add.w	ip, ip, #8
   83154:	460b      	mov	r3, r1
   83156:	3d10      	subs	r5, #16
   83158:	2d10      	cmp	r5, #16
   8315a:	dd0f      	ble.n	8317c <_vfiprintf_r+0x97c>
   8315c:	1c59      	adds	r1, r3, #1
   8315e:	3210      	adds	r2, #16
   83160:	2907      	cmp	r1, #7
   83162:	9215      	str	r2, [sp, #84]	; 0x54
   83164:	e88c 0840 	stmia.w	ip, {r6, fp}
   83168:	9114      	str	r1, [sp, #80]	; 0x50
   8316a:	ddf0      	ble.n	8314e <_vfiprintf_r+0x94e>
   8316c:	b9ba      	cbnz	r2, 8319e <_vfiprintf_r+0x99e>
   8316e:	3d10      	subs	r5, #16
   83170:	2d10      	cmp	r5, #16
   83172:	f04f 0001 	mov.w	r0, #1
   83176:	4613      	mov	r3, r2
   83178:	46cc      	mov	ip, r9
   8317a:	dcef      	bgt.n	8315c <_vfiprintf_r+0x95c>
   8317c:	4633      	mov	r3, r6
   8317e:	4666      	mov	r6, ip
   83180:	46a4      	mov	ip, r4
   83182:	462c      	mov	r4, r5
   83184:	461d      	mov	r5, r3
   83186:	4422      	add	r2, r4
   83188:	2807      	cmp	r0, #7
   8318a:	9215      	str	r2, [sp, #84]	; 0x54
   8318c:	6035      	str	r5, [r6, #0]
   8318e:	6074      	str	r4, [r6, #4]
   83190:	9014      	str	r0, [sp, #80]	; 0x50
   83192:	f300 80af 	bgt.w	832f4 <_vfiprintf_r+0xaf4>
   83196:	3608      	adds	r6, #8
   83198:	1c41      	adds	r1, r0, #1
   8319a:	4603      	mov	r3, r0
   8319c:	e6c2      	b.n	82f24 <_vfiprintf_r+0x724>
   8319e:	9806      	ldr	r0, [sp, #24]
   831a0:	9902      	ldr	r1, [sp, #8]
   831a2:	aa13      	add	r2, sp, #76	; 0x4c
   831a4:	f7ff faf0 	bl	82788 <__sprint_r.part.0>
   831a8:	2800      	cmp	r0, #0
   831aa:	f47f af7c 	bne.w	830a6 <_vfiprintf_r+0x8a6>
   831ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
   831b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   831b2:	1c58      	adds	r0, r3, #1
   831b4:	46cc      	mov	ip, r9
   831b6:	e7ce      	b.n	83156 <_vfiprintf_r+0x956>
   831b8:	2a00      	cmp	r2, #0
   831ba:	d179      	bne.n	832b0 <_vfiprintf_r+0xab0>
   831bc:	4619      	mov	r1, r3
   831be:	464e      	mov	r6, r9
   831c0:	4613      	mov	r3, r2
   831c2:	e69c      	b.n	82efe <_vfiprintf_r+0x6fe>
   831c4:	2a00      	cmp	r2, #0
   831c6:	f040 8084 	bne.w	832d2 <_vfiprintf_r+0xad2>
   831ca:	2101      	movs	r1, #1
   831cc:	4613      	mov	r3, r2
   831ce:	464e      	mov	r6, r9
   831d0:	e6a4      	b.n	82f1c <_vfiprintf_r+0x71c>
   831d2:	464f      	mov	r7, r9
   831d4:	e448      	b.n	82a68 <_vfiprintf_r+0x268>
   831d6:	2d00      	cmp	r5, #0
   831d8:	bf08      	it	eq
   831da:	2c0a      	cmpeq	r4, #10
   831dc:	d246      	bcs.n	8326c <_vfiprintf_r+0xa6c>
   831de:	3430      	adds	r4, #48	; 0x30
   831e0:	af30      	add	r7, sp, #192	; 0xc0
   831e2:	f807 4d41 	strb.w	r4, [r7, #-65]!
   831e6:	ebc7 0309 	rsb	r3, r7, r9
   831ea:	9305      	str	r3, [sp, #20]
   831ec:	e43c      	b.n	82a68 <_vfiprintf_r+0x268>
   831ee:	2302      	movs	r3, #2
   831f0:	e417      	b.n	82a22 <_vfiprintf_r+0x222>
   831f2:	2a00      	cmp	r2, #0
   831f4:	f040 80af 	bne.w	83356 <_vfiprintf_r+0xb56>
   831f8:	4613      	mov	r3, r2
   831fa:	2101      	movs	r1, #1
   831fc:	464e      	mov	r6, r9
   831fe:	e66d      	b.n	82edc <_vfiprintf_r+0x6dc>
   83200:	4644      	mov	r4, r8
   83202:	f7ff bb58 	b.w	828b6 <_vfiprintf_r+0xb6>
   83206:	9806      	ldr	r0, [sp, #24]
   83208:	9902      	ldr	r1, [sp, #8]
   8320a:	aa13      	add	r2, sp, #76	; 0x4c
   8320c:	f7ff fabc 	bl	82788 <__sprint_r.part.0>
   83210:	2800      	cmp	r0, #0
   83212:	f47f af48 	bne.w	830a6 <_vfiprintf_r+0x8a6>
   83216:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83218:	464e      	mov	r6, r9
   8321a:	e6c6      	b.n	82faa <_vfiprintf_r+0x7aa>
   8321c:	9d08      	ldr	r5, [sp, #32]
   8321e:	682c      	ldr	r4, [r5, #0]
   83220:	3504      	adds	r5, #4
   83222:	9508      	str	r5, [sp, #32]
   83224:	2500      	movs	r5, #0
   83226:	f7ff bbfc 	b.w	82a22 <_vfiprintf_r+0x222>
   8322a:	9d08      	ldr	r5, [sp, #32]
   8322c:	2301      	movs	r3, #1
   8322e:	682c      	ldr	r4, [r5, #0]
   83230:	3504      	adds	r5, #4
   83232:	9508      	str	r5, [sp, #32]
   83234:	2500      	movs	r5, #0
   83236:	f7ff bbf4 	b.w	82a22 <_vfiprintf_r+0x222>
   8323a:	9d08      	ldr	r5, [sp, #32]
   8323c:	682c      	ldr	r4, [r5, #0]
   8323e:	3504      	adds	r5, #4
   83240:	9508      	str	r5, [sp, #32]
   83242:	2500      	movs	r5, #0
   83244:	e525      	b.n	82c92 <_vfiprintf_r+0x492>
   83246:	9d08      	ldr	r5, [sp, #32]
   83248:	682c      	ldr	r4, [r5, #0]
   8324a:	3504      	adds	r5, #4
   8324c:	9508      	str	r5, [sp, #32]
   8324e:	17e5      	asrs	r5, r4, #31
   83250:	4622      	mov	r2, r4
   83252:	462b      	mov	r3, r5
   83254:	e48e      	b.n	82b74 <_vfiprintf_r+0x374>
   83256:	9806      	ldr	r0, [sp, #24]
   83258:	9902      	ldr	r1, [sp, #8]
   8325a:	aa13      	add	r2, sp, #76	; 0x4c
   8325c:	f7ff fa94 	bl	82788 <__sprint_r.part.0>
   83260:	2800      	cmp	r0, #0
   83262:	f47f af20 	bne.w	830a6 <_vfiprintf_r+0x8a6>
   83266:	464e      	mov	r6, r9
   83268:	f7ff bb9a 	b.w	829a0 <_vfiprintf_r+0x1a0>
   8326c:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   83270:	9603      	str	r6, [sp, #12]
   83272:	465e      	mov	r6, fp
   83274:	46e3      	mov	fp, ip
   83276:	4620      	mov	r0, r4
   83278:	4629      	mov	r1, r5
   8327a:	220a      	movs	r2, #10
   8327c:	2300      	movs	r3, #0
   8327e:	f001 fdb9 	bl	84df4 <__aeabi_uldivmod>
   83282:	3230      	adds	r2, #48	; 0x30
   83284:	7032      	strb	r2, [r6, #0]
   83286:	4620      	mov	r0, r4
   83288:	4629      	mov	r1, r5
   8328a:	220a      	movs	r2, #10
   8328c:	2300      	movs	r3, #0
   8328e:	f001 fdb1 	bl	84df4 <__aeabi_uldivmod>
   83292:	4604      	mov	r4, r0
   83294:	460d      	mov	r5, r1
   83296:	ea54 0005 	orrs.w	r0, r4, r5
   8329a:	4637      	mov	r7, r6
   8329c:	f106 36ff 	add.w	r6, r6, #4294967295
   832a0:	d1e9      	bne.n	83276 <_vfiprintf_r+0xa76>
   832a2:	ebc7 0309 	rsb	r3, r7, r9
   832a6:	46dc      	mov	ip, fp
   832a8:	9e03      	ldr	r6, [sp, #12]
   832aa:	9305      	str	r3, [sp, #20]
   832ac:	f7ff bbdc 	b.w	82a68 <_vfiprintf_r+0x268>
   832b0:	9806      	ldr	r0, [sp, #24]
   832b2:	9902      	ldr	r1, [sp, #8]
   832b4:	aa13      	add	r2, sp, #76	; 0x4c
   832b6:	f8cd c004 	str.w	ip, [sp, #4]
   832ba:	f7ff fa65 	bl	82788 <__sprint_r.part.0>
   832be:	f8dd c004 	ldr.w	ip, [sp, #4]
   832c2:	2800      	cmp	r0, #0
   832c4:	f47f aeef 	bne.w	830a6 <_vfiprintf_r+0x8a6>
   832c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   832ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
   832cc:	1c59      	adds	r1, r3, #1
   832ce:	464e      	mov	r6, r9
   832d0:	e615      	b.n	82efe <_vfiprintf_r+0x6fe>
   832d2:	9806      	ldr	r0, [sp, #24]
   832d4:	9902      	ldr	r1, [sp, #8]
   832d6:	aa13      	add	r2, sp, #76	; 0x4c
   832d8:	f8cd c004 	str.w	ip, [sp, #4]
   832dc:	f7ff fa54 	bl	82788 <__sprint_r.part.0>
   832e0:	f8dd c004 	ldr.w	ip, [sp, #4]
   832e4:	2800      	cmp	r0, #0
   832e6:	f47f aede 	bne.w	830a6 <_vfiprintf_r+0x8a6>
   832ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   832ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   832ee:	1c59      	adds	r1, r3, #1
   832f0:	464e      	mov	r6, r9
   832f2:	e613      	b.n	82f1c <_vfiprintf_r+0x71c>
   832f4:	2a00      	cmp	r2, #0
   832f6:	d156      	bne.n	833a6 <_vfiprintf_r+0xba6>
   832f8:	2101      	movs	r1, #1
   832fa:	4613      	mov	r3, r2
   832fc:	464e      	mov	r6, r9
   832fe:	e611      	b.n	82f24 <_vfiprintf_r+0x724>
   83300:	9806      	ldr	r0, [sp, #24]
   83302:	9902      	ldr	r1, [sp, #8]
   83304:	aa13      	add	r2, sp, #76	; 0x4c
   83306:	f7ff fa3f 	bl	82788 <__sprint_r.part.0>
   8330a:	2800      	cmp	r0, #0
   8330c:	f47f aecb 	bne.w	830a6 <_vfiprintf_r+0x8a6>
   83310:	9914      	ldr	r1, [sp, #80]	; 0x50
   83312:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83314:	3101      	adds	r1, #1
   83316:	464e      	mov	r6, r9
   83318:	e639      	b.n	82f8e <_vfiprintf_r+0x78e>
   8331a:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8331e:	4264      	negs	r4, r4
   83320:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   83324:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   83328:	f8cd b01c 	str.w	fp, [sp, #28]
   8332c:	f8cd c014 	str.w	ip, [sp, #20]
   83330:	2301      	movs	r3, #1
   83332:	f7ff bb7e 	b.w	82a32 <_vfiprintf_r+0x232>
   83336:	f01a 0f10 	tst.w	sl, #16
   8333a:	d11d      	bne.n	83378 <_vfiprintf_r+0xb78>
   8333c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83340:	d058      	beq.n	833f4 <_vfiprintf_r+0xbf4>
   83342:	9d08      	ldr	r5, [sp, #32]
   83344:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   83348:	682b      	ldr	r3, [r5, #0]
   8334a:	3504      	adds	r5, #4
   8334c:	9508      	str	r5, [sp, #32]
   8334e:	f8a3 b000 	strh.w	fp, [r3]
   83352:	f7ff ba88 	b.w	82866 <_vfiprintf_r+0x66>
   83356:	9806      	ldr	r0, [sp, #24]
   83358:	9902      	ldr	r1, [sp, #8]
   8335a:	aa13      	add	r2, sp, #76	; 0x4c
   8335c:	f8cd c004 	str.w	ip, [sp, #4]
   83360:	f7ff fa12 	bl	82788 <__sprint_r.part.0>
   83364:	f8dd c004 	ldr.w	ip, [sp, #4]
   83368:	2800      	cmp	r0, #0
   8336a:	f47f ae9c 	bne.w	830a6 <_vfiprintf_r+0x8a6>
   8336e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83370:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83372:	1c59      	adds	r1, r3, #1
   83374:	464e      	mov	r6, r9
   83376:	e5b1      	b.n	82edc <_vfiprintf_r+0x6dc>
   83378:	f8dd b020 	ldr.w	fp, [sp, #32]
   8337c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8337e:	f8db 3000 	ldr.w	r3, [fp]
   83382:	f10b 0b04 	add.w	fp, fp, #4
   83386:	f8cd b020 	str.w	fp, [sp, #32]
   8338a:	601c      	str	r4, [r3, #0]
   8338c:	f7ff ba6b 	b.w	82866 <_vfiprintf_r+0x66>
   83390:	9408      	str	r4, [sp, #32]
   83392:	f7ff f9c9 	bl	82728 <strlen>
   83396:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   8339a:	9005      	str	r0, [sp, #20]
   8339c:	9407      	str	r4, [sp, #28]
   8339e:	f04f 0c00 	mov.w	ip, #0
   833a2:	f7ff bb61 	b.w	82a68 <_vfiprintf_r+0x268>
   833a6:	9806      	ldr	r0, [sp, #24]
   833a8:	9902      	ldr	r1, [sp, #8]
   833aa:	aa13      	add	r2, sp, #76	; 0x4c
   833ac:	f8cd c004 	str.w	ip, [sp, #4]
   833b0:	f7ff f9ea 	bl	82788 <__sprint_r.part.0>
   833b4:	f8dd c004 	ldr.w	ip, [sp, #4]
   833b8:	2800      	cmp	r0, #0
   833ba:	f47f ae74 	bne.w	830a6 <_vfiprintf_r+0x8a6>
   833be:	9b14      	ldr	r3, [sp, #80]	; 0x50
   833c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   833c2:	1c59      	adds	r1, r3, #1
   833c4:	464e      	mov	r6, r9
   833c6:	e5ad      	b.n	82f24 <_vfiprintf_r+0x724>
   833c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   833ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
   833cc:	3301      	adds	r3, #1
   833ce:	4d02      	ldr	r5, [pc, #8]	; (833d8 <_vfiprintf_r+0xbd8>)
   833d0:	f7ff bb9a 	b.w	82b08 <_vfiprintf_r+0x308>
   833d4:	00085518 	.word	0x00085518
   833d8:	00085528 	.word	0x00085528
   833dc:	f1bc 0f06 	cmp.w	ip, #6
   833e0:	bf34      	ite	cc
   833e2:	4663      	movcc	r3, ip
   833e4:	2306      	movcs	r3, #6
   833e6:	9408      	str	r4, [sp, #32]
   833e8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   833ec:	9305      	str	r3, [sp, #20]
   833ee:	9403      	str	r4, [sp, #12]
   833f0:	4f16      	ldr	r7, [pc, #88]	; (8344c <_vfiprintf_r+0xc4c>)
   833f2:	e472      	b.n	82cda <_vfiprintf_r+0x4da>
   833f4:	9c08      	ldr	r4, [sp, #32]
   833f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   833f8:	6823      	ldr	r3, [r4, #0]
   833fa:	3404      	adds	r4, #4
   833fc:	9408      	str	r4, [sp, #32]
   833fe:	601d      	str	r5, [r3, #0]
   83400:	f7ff ba31 	b.w	82866 <_vfiprintf_r+0x66>
   83404:	9814      	ldr	r0, [sp, #80]	; 0x50
   83406:	4d12      	ldr	r5, [pc, #72]	; (83450 <_vfiprintf_r+0xc50>)
   83408:	3001      	adds	r0, #1
   8340a:	e5fc      	b.n	83006 <_vfiprintf_r+0x806>
   8340c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   83410:	f8cd c014 	str.w	ip, [sp, #20]
   83414:	9507      	str	r5, [sp, #28]
   83416:	9408      	str	r4, [sp, #32]
   83418:	4684      	mov	ip, r0
   8341a:	f7ff bb25 	b.w	82a68 <_vfiprintf_r+0x268>
   8341e:	4608      	mov	r0, r1
   83420:	e6b1      	b.n	83186 <_vfiprintf_r+0x986>
   83422:	46a0      	mov	r8, r4
   83424:	2500      	movs	r5, #0
   83426:	f7ff ba5a 	b.w	828de <_vfiprintf_r+0xde>
   8342a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8342e:	f898 3001 	ldrb.w	r3, [r8, #1]
   83432:	f8db 5000 	ldr.w	r5, [fp]
   83436:	f10b 0204 	add.w	r2, fp, #4
   8343a:	2d00      	cmp	r5, #0
   8343c:	9208      	str	r2, [sp, #32]
   8343e:	46a0      	mov	r8, r4
   83440:	f6bf aa4b 	bge.w	828da <_vfiprintf_r+0xda>
   83444:	f04f 35ff 	mov.w	r5, #4294967295
   83448:	f7ff ba47 	b.w	828da <_vfiprintf_r+0xda>
   8344c:	00085510 	.word	0x00085510
   83450:	00085528 	.word	0x00085528

00083454 <__sbprintf>:
   83454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83458:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   8345a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8345e:	4688      	mov	r8, r1
   83460:	9719      	str	r7, [sp, #100]	; 0x64
   83462:	f8d8 701c 	ldr.w	r7, [r8, #28]
   83466:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   8346a:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   8346e:	9707      	str	r7, [sp, #28]
   83470:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   83474:	ac1a      	add	r4, sp, #104	; 0x68
   83476:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8347a:	f02a 0a02 	bic.w	sl, sl, #2
   8347e:	2600      	movs	r6, #0
   83480:	4669      	mov	r1, sp
   83482:	9400      	str	r4, [sp, #0]
   83484:	9404      	str	r4, [sp, #16]
   83486:	9502      	str	r5, [sp, #8]
   83488:	9505      	str	r5, [sp, #20]
   8348a:	f8ad a00c 	strh.w	sl, [sp, #12]
   8348e:	f8ad 900e 	strh.w	r9, [sp, #14]
   83492:	9709      	str	r7, [sp, #36]	; 0x24
   83494:	9606      	str	r6, [sp, #24]
   83496:	4605      	mov	r5, r0
   83498:	f7ff f9b2 	bl	82800 <_vfiprintf_r>
   8349c:	1e04      	subs	r4, r0, #0
   8349e:	db07      	blt.n	834b0 <__sbprintf+0x5c>
   834a0:	4628      	mov	r0, r5
   834a2:	4669      	mov	r1, sp
   834a4:	f000 f97e 	bl	837a4 <_fflush_r>
   834a8:	42b0      	cmp	r0, r6
   834aa:	bf18      	it	ne
   834ac:	f04f 34ff 	movne.w	r4, #4294967295
   834b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   834b4:	065b      	lsls	r3, r3, #25
   834b6:	d505      	bpl.n	834c4 <__sbprintf+0x70>
   834b8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   834bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   834c0:	f8a8 300c 	strh.w	r3, [r8, #12]
   834c4:	4620      	mov	r0, r4
   834c6:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   834ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   834ce:	bf00      	nop

000834d0 <__swbuf_r>:
   834d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   834d2:	460d      	mov	r5, r1
   834d4:	4614      	mov	r4, r2
   834d6:	4607      	mov	r7, r0
   834d8:	b110      	cbz	r0, 834e0 <__swbuf_r+0x10>
   834da:	6b83      	ldr	r3, [r0, #56]	; 0x38
   834dc:	2b00      	cmp	r3, #0
   834de:	d048      	beq.n	83572 <__swbuf_r+0xa2>
   834e0:	89a2      	ldrh	r2, [r4, #12]
   834e2:	69a0      	ldr	r0, [r4, #24]
   834e4:	b293      	uxth	r3, r2
   834e6:	60a0      	str	r0, [r4, #8]
   834e8:	0718      	lsls	r0, r3, #28
   834ea:	d538      	bpl.n	8355e <__swbuf_r+0x8e>
   834ec:	6926      	ldr	r6, [r4, #16]
   834ee:	2e00      	cmp	r6, #0
   834f0:	d035      	beq.n	8355e <__swbuf_r+0x8e>
   834f2:	0499      	lsls	r1, r3, #18
   834f4:	b2ed      	uxtb	r5, r5
   834f6:	d515      	bpl.n	83524 <__swbuf_r+0x54>
   834f8:	6823      	ldr	r3, [r4, #0]
   834fa:	6962      	ldr	r2, [r4, #20]
   834fc:	1b9e      	subs	r6, r3, r6
   834fe:	4296      	cmp	r6, r2
   83500:	da1c      	bge.n	8353c <__swbuf_r+0x6c>
   83502:	3601      	adds	r6, #1
   83504:	68a2      	ldr	r2, [r4, #8]
   83506:	1c59      	adds	r1, r3, #1
   83508:	3a01      	subs	r2, #1
   8350a:	60a2      	str	r2, [r4, #8]
   8350c:	6021      	str	r1, [r4, #0]
   8350e:	701d      	strb	r5, [r3, #0]
   83510:	6963      	ldr	r3, [r4, #20]
   83512:	42b3      	cmp	r3, r6
   83514:	d01a      	beq.n	8354c <__swbuf_r+0x7c>
   83516:	89a3      	ldrh	r3, [r4, #12]
   83518:	07db      	lsls	r3, r3, #31
   8351a:	d501      	bpl.n	83520 <__swbuf_r+0x50>
   8351c:	2d0a      	cmp	r5, #10
   8351e:	d015      	beq.n	8354c <__swbuf_r+0x7c>
   83520:	4628      	mov	r0, r5
   83522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83524:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83526:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8352a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8352e:	6663      	str	r3, [r4, #100]	; 0x64
   83530:	6823      	ldr	r3, [r4, #0]
   83532:	81a2      	strh	r2, [r4, #12]
   83534:	6962      	ldr	r2, [r4, #20]
   83536:	1b9e      	subs	r6, r3, r6
   83538:	4296      	cmp	r6, r2
   8353a:	dbe2      	blt.n	83502 <__swbuf_r+0x32>
   8353c:	4638      	mov	r0, r7
   8353e:	4621      	mov	r1, r4
   83540:	f000 f930 	bl	837a4 <_fflush_r>
   83544:	b940      	cbnz	r0, 83558 <__swbuf_r+0x88>
   83546:	6823      	ldr	r3, [r4, #0]
   83548:	2601      	movs	r6, #1
   8354a:	e7db      	b.n	83504 <__swbuf_r+0x34>
   8354c:	4638      	mov	r0, r7
   8354e:	4621      	mov	r1, r4
   83550:	f000 f928 	bl	837a4 <_fflush_r>
   83554:	2800      	cmp	r0, #0
   83556:	d0e3      	beq.n	83520 <__swbuf_r+0x50>
   83558:	f04f 30ff 	mov.w	r0, #4294967295
   8355c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8355e:	4638      	mov	r0, r7
   83560:	4621      	mov	r1, r4
   83562:	f000 f809 	bl	83578 <__swsetup_r>
   83566:	2800      	cmp	r0, #0
   83568:	d1f6      	bne.n	83558 <__swbuf_r+0x88>
   8356a:	89a2      	ldrh	r2, [r4, #12]
   8356c:	6926      	ldr	r6, [r4, #16]
   8356e:	b293      	uxth	r3, r2
   83570:	e7bf      	b.n	834f2 <__swbuf_r+0x22>
   83572:	f000 f933 	bl	837dc <__sinit>
   83576:	e7b3      	b.n	834e0 <__swbuf_r+0x10>

00083578 <__swsetup_r>:
   83578:	4b2f      	ldr	r3, [pc, #188]	; (83638 <__swsetup_r+0xc0>)
   8357a:	b570      	push	{r4, r5, r6, lr}
   8357c:	4606      	mov	r6, r0
   8357e:	6818      	ldr	r0, [r3, #0]
   83580:	460c      	mov	r4, r1
   83582:	b110      	cbz	r0, 8358a <__swsetup_r+0x12>
   83584:	6b82      	ldr	r2, [r0, #56]	; 0x38
   83586:	2a00      	cmp	r2, #0
   83588:	d036      	beq.n	835f8 <__swsetup_r+0x80>
   8358a:	89a5      	ldrh	r5, [r4, #12]
   8358c:	b2ab      	uxth	r3, r5
   8358e:	0719      	lsls	r1, r3, #28
   83590:	d50c      	bpl.n	835ac <__swsetup_r+0x34>
   83592:	6922      	ldr	r2, [r4, #16]
   83594:	b1aa      	cbz	r2, 835c2 <__swsetup_r+0x4a>
   83596:	f013 0101 	ands.w	r1, r3, #1
   8359a:	d01e      	beq.n	835da <__swsetup_r+0x62>
   8359c:	6963      	ldr	r3, [r4, #20]
   8359e:	2100      	movs	r1, #0
   835a0:	425b      	negs	r3, r3
   835a2:	61a3      	str	r3, [r4, #24]
   835a4:	60a1      	str	r1, [r4, #8]
   835a6:	b1f2      	cbz	r2, 835e6 <__swsetup_r+0x6e>
   835a8:	2000      	movs	r0, #0
   835aa:	bd70      	pop	{r4, r5, r6, pc}
   835ac:	06da      	lsls	r2, r3, #27
   835ae:	d53a      	bpl.n	83626 <__swsetup_r+0xae>
   835b0:	075b      	lsls	r3, r3, #29
   835b2:	d424      	bmi.n	835fe <__swsetup_r+0x86>
   835b4:	6922      	ldr	r2, [r4, #16]
   835b6:	f045 0308 	orr.w	r3, r5, #8
   835ba:	81a3      	strh	r3, [r4, #12]
   835bc:	b29b      	uxth	r3, r3
   835be:	2a00      	cmp	r2, #0
   835c0:	d1e9      	bne.n	83596 <__swsetup_r+0x1e>
   835c2:	f403 7120 	and.w	r1, r3, #640	; 0x280
   835c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   835ca:	d0e4      	beq.n	83596 <__swsetup_r+0x1e>
   835cc:	4630      	mov	r0, r6
   835ce:	4621      	mov	r1, r4
   835d0:	f000 fcce 	bl	83f70 <__smakebuf_r>
   835d4:	89a3      	ldrh	r3, [r4, #12]
   835d6:	6922      	ldr	r2, [r4, #16]
   835d8:	e7dd      	b.n	83596 <__swsetup_r+0x1e>
   835da:	0798      	lsls	r0, r3, #30
   835dc:	bf58      	it	pl
   835de:	6961      	ldrpl	r1, [r4, #20]
   835e0:	60a1      	str	r1, [r4, #8]
   835e2:	2a00      	cmp	r2, #0
   835e4:	d1e0      	bne.n	835a8 <__swsetup_r+0x30>
   835e6:	89a3      	ldrh	r3, [r4, #12]
   835e8:	061a      	lsls	r2, r3, #24
   835ea:	d5dd      	bpl.n	835a8 <__swsetup_r+0x30>
   835ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   835f0:	81a3      	strh	r3, [r4, #12]
   835f2:	f04f 30ff 	mov.w	r0, #4294967295
   835f6:	bd70      	pop	{r4, r5, r6, pc}
   835f8:	f000 f8f0 	bl	837dc <__sinit>
   835fc:	e7c5      	b.n	8358a <__swsetup_r+0x12>
   835fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83600:	b149      	cbz	r1, 83616 <__swsetup_r+0x9e>
   83602:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83606:	4299      	cmp	r1, r3
   83608:	d003      	beq.n	83612 <__swsetup_r+0x9a>
   8360a:	4630      	mov	r0, r6
   8360c:	f000 fa2a 	bl	83a64 <_free_r>
   83610:	89a5      	ldrh	r5, [r4, #12]
   83612:	2300      	movs	r3, #0
   83614:	6323      	str	r3, [r4, #48]	; 0x30
   83616:	6922      	ldr	r2, [r4, #16]
   83618:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   8361c:	2100      	movs	r1, #0
   8361e:	b2ad      	uxth	r5, r5
   83620:	6022      	str	r2, [r4, #0]
   83622:	6061      	str	r1, [r4, #4]
   83624:	e7c7      	b.n	835b6 <__swsetup_r+0x3e>
   83626:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8362a:	2309      	movs	r3, #9
   8362c:	6033      	str	r3, [r6, #0]
   8362e:	f04f 30ff 	mov.w	r0, #4294967295
   83632:	81a5      	strh	r5, [r4, #12]
   83634:	bd70      	pop	{r4, r5, r6, pc}
   83636:	bf00      	nop
   83638:	20070568 	.word	0x20070568

0008363c <register_fini>:
   8363c:	4b02      	ldr	r3, [pc, #8]	; (83648 <register_fini+0xc>)
   8363e:	b113      	cbz	r3, 83646 <register_fini+0xa>
   83640:	4802      	ldr	r0, [pc, #8]	; (8364c <register_fini+0x10>)
   83642:	f000 b805 	b.w	83650 <atexit>
   83646:	4770      	bx	lr
   83648:	00000000 	.word	0x00000000
   8364c:	000838d9 	.word	0x000838d9

00083650 <atexit>:
   83650:	4601      	mov	r1, r0
   83652:	2000      	movs	r0, #0
   83654:	4602      	mov	r2, r0
   83656:	4603      	mov	r3, r0
   83658:	f001 bad0 	b.w	84bfc <__register_exitproc>

0008365c <__sflush_r>:
   8365c:	898b      	ldrh	r3, [r1, #12]
   8365e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83662:	b29a      	uxth	r2, r3
   83664:	460d      	mov	r5, r1
   83666:	0711      	lsls	r1, r2, #28
   83668:	4680      	mov	r8, r0
   8366a:	d43c      	bmi.n	836e6 <__sflush_r+0x8a>
   8366c:	686a      	ldr	r2, [r5, #4]
   8366e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83672:	2a00      	cmp	r2, #0
   83674:	81ab      	strh	r3, [r5, #12]
   83676:	dd59      	ble.n	8372c <__sflush_r+0xd0>
   83678:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8367a:	2c00      	cmp	r4, #0
   8367c:	d04b      	beq.n	83716 <__sflush_r+0xba>
   8367e:	b29b      	uxth	r3, r3
   83680:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   83684:	2100      	movs	r1, #0
   83686:	b292      	uxth	r2, r2
   83688:	f8d8 6000 	ldr.w	r6, [r8]
   8368c:	f8c8 1000 	str.w	r1, [r8]
   83690:	2a00      	cmp	r2, #0
   83692:	d04f      	beq.n	83734 <__sflush_r+0xd8>
   83694:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83696:	075f      	lsls	r7, r3, #29
   83698:	d505      	bpl.n	836a6 <__sflush_r+0x4a>
   8369a:	6869      	ldr	r1, [r5, #4]
   8369c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8369e:	1a52      	subs	r2, r2, r1
   836a0:	b10b      	cbz	r3, 836a6 <__sflush_r+0x4a>
   836a2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   836a4:	1ad2      	subs	r2, r2, r3
   836a6:	4640      	mov	r0, r8
   836a8:	69e9      	ldr	r1, [r5, #28]
   836aa:	2300      	movs	r3, #0
   836ac:	47a0      	blx	r4
   836ae:	1c44      	adds	r4, r0, #1
   836b0:	d04a      	beq.n	83748 <__sflush_r+0xec>
   836b2:	89ab      	ldrh	r3, [r5, #12]
   836b4:	692a      	ldr	r2, [r5, #16]
   836b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   836ba:	b29b      	uxth	r3, r3
   836bc:	2100      	movs	r1, #0
   836be:	602a      	str	r2, [r5, #0]
   836c0:	04da      	lsls	r2, r3, #19
   836c2:	81ab      	strh	r3, [r5, #12]
   836c4:	6069      	str	r1, [r5, #4]
   836c6:	d44c      	bmi.n	83762 <__sflush_r+0x106>
   836c8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   836ca:	f8c8 6000 	str.w	r6, [r8]
   836ce:	b311      	cbz	r1, 83716 <__sflush_r+0xba>
   836d0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   836d4:	4299      	cmp	r1, r3
   836d6:	d002      	beq.n	836de <__sflush_r+0x82>
   836d8:	4640      	mov	r0, r8
   836da:	f000 f9c3 	bl	83a64 <_free_r>
   836de:	2000      	movs	r0, #0
   836e0:	6328      	str	r0, [r5, #48]	; 0x30
   836e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   836e6:	692e      	ldr	r6, [r5, #16]
   836e8:	b1ae      	cbz	r6, 83716 <__sflush_r+0xba>
   836ea:	0791      	lsls	r1, r2, #30
   836ec:	682c      	ldr	r4, [r5, #0]
   836ee:	bf0c      	ite	eq
   836f0:	696b      	ldreq	r3, [r5, #20]
   836f2:	2300      	movne	r3, #0
   836f4:	602e      	str	r6, [r5, #0]
   836f6:	1ba4      	subs	r4, r4, r6
   836f8:	60ab      	str	r3, [r5, #8]
   836fa:	e00a      	b.n	83712 <__sflush_r+0xb6>
   836fc:	4632      	mov	r2, r6
   836fe:	4623      	mov	r3, r4
   83700:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83702:	4640      	mov	r0, r8
   83704:	69e9      	ldr	r1, [r5, #28]
   83706:	47b8      	blx	r7
   83708:	2800      	cmp	r0, #0
   8370a:	ebc0 0404 	rsb	r4, r0, r4
   8370e:	4406      	add	r6, r0
   83710:	dd04      	ble.n	8371c <__sflush_r+0xc0>
   83712:	2c00      	cmp	r4, #0
   83714:	dcf2      	bgt.n	836fc <__sflush_r+0xa0>
   83716:	2000      	movs	r0, #0
   83718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8371c:	89ab      	ldrh	r3, [r5, #12]
   8371e:	f04f 30ff 	mov.w	r0, #4294967295
   83722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83726:	81ab      	strh	r3, [r5, #12]
   83728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8372c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8372e:	2a00      	cmp	r2, #0
   83730:	dca2      	bgt.n	83678 <__sflush_r+0x1c>
   83732:	e7f0      	b.n	83716 <__sflush_r+0xba>
   83734:	2301      	movs	r3, #1
   83736:	4640      	mov	r0, r8
   83738:	69e9      	ldr	r1, [r5, #28]
   8373a:	47a0      	blx	r4
   8373c:	1c43      	adds	r3, r0, #1
   8373e:	4602      	mov	r2, r0
   83740:	d01e      	beq.n	83780 <__sflush_r+0x124>
   83742:	89ab      	ldrh	r3, [r5, #12]
   83744:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83746:	e7a6      	b.n	83696 <__sflush_r+0x3a>
   83748:	f8d8 3000 	ldr.w	r3, [r8]
   8374c:	b95b      	cbnz	r3, 83766 <__sflush_r+0x10a>
   8374e:	89aa      	ldrh	r2, [r5, #12]
   83750:	6929      	ldr	r1, [r5, #16]
   83752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83756:	b292      	uxth	r2, r2
   83758:	606b      	str	r3, [r5, #4]
   8375a:	04d3      	lsls	r3, r2, #19
   8375c:	81aa      	strh	r2, [r5, #12]
   8375e:	6029      	str	r1, [r5, #0]
   83760:	d5b2      	bpl.n	836c8 <__sflush_r+0x6c>
   83762:	6528      	str	r0, [r5, #80]	; 0x50
   83764:	e7b0      	b.n	836c8 <__sflush_r+0x6c>
   83766:	2b1d      	cmp	r3, #29
   83768:	d001      	beq.n	8376e <__sflush_r+0x112>
   8376a:	2b16      	cmp	r3, #22
   8376c:	d113      	bne.n	83796 <__sflush_r+0x13a>
   8376e:	89a9      	ldrh	r1, [r5, #12]
   83770:	692b      	ldr	r3, [r5, #16]
   83772:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   83776:	2200      	movs	r2, #0
   83778:	81a9      	strh	r1, [r5, #12]
   8377a:	602b      	str	r3, [r5, #0]
   8377c:	606a      	str	r2, [r5, #4]
   8377e:	e7a3      	b.n	836c8 <__sflush_r+0x6c>
   83780:	f8d8 3000 	ldr.w	r3, [r8]
   83784:	2b00      	cmp	r3, #0
   83786:	d0dc      	beq.n	83742 <__sflush_r+0xe6>
   83788:	2b1d      	cmp	r3, #29
   8378a:	d001      	beq.n	83790 <__sflush_r+0x134>
   8378c:	2b16      	cmp	r3, #22
   8378e:	d1c5      	bne.n	8371c <__sflush_r+0xc0>
   83790:	f8c8 6000 	str.w	r6, [r8]
   83794:	e7bf      	b.n	83716 <__sflush_r+0xba>
   83796:	89ab      	ldrh	r3, [r5, #12]
   83798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8379c:	81ab      	strh	r3, [r5, #12]
   8379e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   837a2:	bf00      	nop

000837a4 <_fflush_r>:
   837a4:	b510      	push	{r4, lr}
   837a6:	4604      	mov	r4, r0
   837a8:	b082      	sub	sp, #8
   837aa:	b108      	cbz	r0, 837b0 <_fflush_r+0xc>
   837ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
   837ae:	b153      	cbz	r3, 837c6 <_fflush_r+0x22>
   837b0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   837b4:	b908      	cbnz	r0, 837ba <_fflush_r+0x16>
   837b6:	b002      	add	sp, #8
   837b8:	bd10      	pop	{r4, pc}
   837ba:	4620      	mov	r0, r4
   837bc:	b002      	add	sp, #8
   837be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   837c2:	f7ff bf4b 	b.w	8365c <__sflush_r>
   837c6:	9101      	str	r1, [sp, #4]
   837c8:	f000 f808 	bl	837dc <__sinit>
   837cc:	9901      	ldr	r1, [sp, #4]
   837ce:	e7ef      	b.n	837b0 <_fflush_r+0xc>

000837d0 <_cleanup_r>:
   837d0:	4901      	ldr	r1, [pc, #4]	; (837d8 <_cleanup_r+0x8>)
   837d2:	f000 bb9f 	b.w	83f14 <_fwalk>
   837d6:	bf00      	nop
   837d8:	00084d49 	.word	0x00084d49

000837dc <__sinit>:
   837dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   837e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
   837e2:	b083      	sub	sp, #12
   837e4:	4607      	mov	r7, r0
   837e6:	2c00      	cmp	r4, #0
   837e8:	d165      	bne.n	838b6 <__sinit+0xda>
   837ea:	687d      	ldr	r5, [r7, #4]
   837ec:	4833      	ldr	r0, [pc, #204]	; (838bc <__sinit+0xe0>)
   837ee:	2304      	movs	r3, #4
   837f0:	2103      	movs	r1, #3
   837f2:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   837f6:	63f8      	str	r0, [r7, #60]	; 0x3c
   837f8:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   837fc:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   83800:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   83804:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83808:	81ab      	strh	r3, [r5, #12]
   8380a:	602c      	str	r4, [r5, #0]
   8380c:	606c      	str	r4, [r5, #4]
   8380e:	60ac      	str	r4, [r5, #8]
   83810:	666c      	str	r4, [r5, #100]	; 0x64
   83812:	81ec      	strh	r4, [r5, #14]
   83814:	612c      	str	r4, [r5, #16]
   83816:	616c      	str	r4, [r5, #20]
   83818:	61ac      	str	r4, [r5, #24]
   8381a:	4621      	mov	r1, r4
   8381c:	2208      	movs	r2, #8
   8381e:	f7fe fea3 	bl	82568 <memset>
   83822:	f8df b09c 	ldr.w	fp, [pc, #156]	; 838c0 <__sinit+0xe4>
   83826:	68be      	ldr	r6, [r7, #8]
   83828:	f8df a098 	ldr.w	sl, [pc, #152]	; 838c4 <__sinit+0xe8>
   8382c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 838c8 <__sinit+0xec>
   83830:	f8df 8098 	ldr.w	r8, [pc, #152]	; 838cc <__sinit+0xf0>
   83834:	2301      	movs	r3, #1
   83836:	2209      	movs	r2, #9
   83838:	61ed      	str	r5, [r5, #28]
   8383a:	f8c5 b020 	str.w	fp, [r5, #32]
   8383e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83842:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83846:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8384a:	4621      	mov	r1, r4
   8384c:	81f3      	strh	r3, [r6, #14]
   8384e:	81b2      	strh	r2, [r6, #12]
   83850:	6034      	str	r4, [r6, #0]
   83852:	6074      	str	r4, [r6, #4]
   83854:	60b4      	str	r4, [r6, #8]
   83856:	6674      	str	r4, [r6, #100]	; 0x64
   83858:	6134      	str	r4, [r6, #16]
   8385a:	6174      	str	r4, [r6, #20]
   8385c:	61b4      	str	r4, [r6, #24]
   8385e:	2208      	movs	r2, #8
   83860:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   83864:	9301      	str	r3, [sp, #4]
   83866:	f7fe fe7f 	bl	82568 <memset>
   8386a:	68fd      	ldr	r5, [r7, #12]
   8386c:	2012      	movs	r0, #18
   8386e:	2202      	movs	r2, #2
   83870:	61f6      	str	r6, [r6, #28]
   83872:	f8c6 b020 	str.w	fp, [r6, #32]
   83876:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8387a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8387e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   83882:	4621      	mov	r1, r4
   83884:	81a8      	strh	r0, [r5, #12]
   83886:	81ea      	strh	r2, [r5, #14]
   83888:	602c      	str	r4, [r5, #0]
   8388a:	606c      	str	r4, [r5, #4]
   8388c:	60ac      	str	r4, [r5, #8]
   8388e:	666c      	str	r4, [r5, #100]	; 0x64
   83890:	612c      	str	r4, [r5, #16]
   83892:	616c      	str	r4, [r5, #20]
   83894:	61ac      	str	r4, [r5, #24]
   83896:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8389a:	2208      	movs	r2, #8
   8389c:	f7fe fe64 	bl	82568 <memset>
   838a0:	9b01      	ldr	r3, [sp, #4]
   838a2:	61ed      	str	r5, [r5, #28]
   838a4:	f8c5 b020 	str.w	fp, [r5, #32]
   838a8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   838ac:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   838b0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   838b4:	63bb      	str	r3, [r7, #56]	; 0x38
   838b6:	b003      	add	sp, #12
   838b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838bc:	000837d1 	.word	0x000837d1
   838c0:	00084ae5 	.word	0x00084ae5
   838c4:	00084b09 	.word	0x00084b09
   838c8:	00084b41 	.word	0x00084b41
   838cc:	00084b61 	.word	0x00084b61

000838d0 <__sfp_lock_acquire>:
   838d0:	4770      	bx	lr
   838d2:	bf00      	nop

000838d4 <__sfp_lock_release>:
   838d4:	4770      	bx	lr
   838d6:	bf00      	nop

000838d8 <__libc_fini_array>:
   838d8:	b538      	push	{r3, r4, r5, lr}
   838da:	4d09      	ldr	r5, [pc, #36]	; (83900 <__libc_fini_array+0x28>)
   838dc:	4c09      	ldr	r4, [pc, #36]	; (83904 <__libc_fini_array+0x2c>)
   838de:	1b64      	subs	r4, r4, r5
   838e0:	10a4      	asrs	r4, r4, #2
   838e2:	bf18      	it	ne
   838e4:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   838e8:	d005      	beq.n	838f6 <__libc_fini_array+0x1e>
   838ea:	3c01      	subs	r4, #1
   838ec:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   838f0:	4798      	blx	r3
   838f2:	2c00      	cmp	r4, #0
   838f4:	d1f9      	bne.n	838ea <__libc_fini_array+0x12>
   838f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   838fa:	f001 be27 	b.w	8554c <_fini>
   838fe:	bf00      	nop
   83900:	00085558 	.word	0x00085558
   83904:	0008555c 	.word	0x0008555c

00083908 <_fputwc_r>:
   83908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8390c:	8993      	ldrh	r3, [r2, #12]
   8390e:	460f      	mov	r7, r1
   83910:	0499      	lsls	r1, r3, #18
   83912:	b082      	sub	sp, #8
   83914:	4614      	mov	r4, r2
   83916:	4680      	mov	r8, r0
   83918:	d406      	bmi.n	83928 <_fputwc_r+0x20>
   8391a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   8391c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83924:	81a3      	strh	r3, [r4, #12]
   83926:	6662      	str	r2, [r4, #100]	; 0x64
   83928:	f000 fb1c 	bl	83f64 <__locale_mb_cur_max>
   8392c:	2801      	cmp	r0, #1
   8392e:	d03e      	beq.n	839ae <_fputwc_r+0xa6>
   83930:	463a      	mov	r2, r7
   83932:	4640      	mov	r0, r8
   83934:	a901      	add	r1, sp, #4
   83936:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8393a:	f001 f915 	bl	84b68 <_wcrtomb_r>
   8393e:	1c42      	adds	r2, r0, #1
   83940:	4606      	mov	r6, r0
   83942:	d02d      	beq.n	839a0 <_fputwc_r+0x98>
   83944:	2800      	cmp	r0, #0
   83946:	d03a      	beq.n	839be <_fputwc_r+0xb6>
   83948:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8394c:	2500      	movs	r5, #0
   8394e:	e009      	b.n	83964 <_fputwc_r+0x5c>
   83950:	6823      	ldr	r3, [r4, #0]
   83952:	7019      	strb	r1, [r3, #0]
   83954:	6823      	ldr	r3, [r4, #0]
   83956:	3301      	adds	r3, #1
   83958:	6023      	str	r3, [r4, #0]
   8395a:	3501      	adds	r5, #1
   8395c:	42b5      	cmp	r5, r6
   8395e:	d22e      	bcs.n	839be <_fputwc_r+0xb6>
   83960:	ab01      	add	r3, sp, #4
   83962:	5ce9      	ldrb	r1, [r5, r3]
   83964:	68a3      	ldr	r3, [r4, #8]
   83966:	3b01      	subs	r3, #1
   83968:	2b00      	cmp	r3, #0
   8396a:	60a3      	str	r3, [r4, #8]
   8396c:	daf0      	bge.n	83950 <_fputwc_r+0x48>
   8396e:	69a2      	ldr	r2, [r4, #24]
   83970:	4293      	cmp	r3, r2
   83972:	db06      	blt.n	83982 <_fputwc_r+0x7a>
   83974:	6823      	ldr	r3, [r4, #0]
   83976:	7019      	strb	r1, [r3, #0]
   83978:	6823      	ldr	r3, [r4, #0]
   8397a:	7819      	ldrb	r1, [r3, #0]
   8397c:	3301      	adds	r3, #1
   8397e:	290a      	cmp	r1, #10
   83980:	d1ea      	bne.n	83958 <_fputwc_r+0x50>
   83982:	4640      	mov	r0, r8
   83984:	4622      	mov	r2, r4
   83986:	f7ff fda3 	bl	834d0 <__swbuf_r>
   8398a:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8398e:	4258      	negs	r0, r3
   83990:	4158      	adcs	r0, r3
   83992:	2800      	cmp	r0, #0
   83994:	d0e1      	beq.n	8395a <_fputwc_r+0x52>
   83996:	f04f 30ff 	mov.w	r0, #4294967295
   8399a:	b002      	add	sp, #8
   8399c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839a0:	89a3      	ldrh	r3, [r4, #12]
   839a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   839a6:	81a3      	strh	r3, [r4, #12]
   839a8:	b002      	add	sp, #8
   839aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839ae:	1e7b      	subs	r3, r7, #1
   839b0:	2bfe      	cmp	r3, #254	; 0xfe
   839b2:	d8bd      	bhi.n	83930 <_fputwc_r+0x28>
   839b4:	b2f9      	uxtb	r1, r7
   839b6:	4606      	mov	r6, r0
   839b8:	f88d 1004 	strb.w	r1, [sp, #4]
   839bc:	e7c6      	b.n	8394c <_fputwc_r+0x44>
   839be:	4638      	mov	r0, r7
   839c0:	b002      	add	sp, #8
   839c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839c6:	bf00      	nop

000839c8 <_malloc_trim_r>:
   839c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   839ca:	4d23      	ldr	r5, [pc, #140]	; (83a58 <_malloc_trim_r+0x90>)
   839cc:	460f      	mov	r7, r1
   839ce:	4604      	mov	r4, r0
   839d0:	f000 fe92 	bl	846f8 <__malloc_lock>
   839d4:	68ab      	ldr	r3, [r5, #8]
   839d6:	685e      	ldr	r6, [r3, #4]
   839d8:	f026 0603 	bic.w	r6, r6, #3
   839dc:	1bf1      	subs	r1, r6, r7
   839de:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   839e2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   839e6:	f021 010f 	bic.w	r1, r1, #15
   839ea:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   839ee:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   839f2:	db07      	blt.n	83a04 <_malloc_trim_r+0x3c>
   839f4:	4620      	mov	r0, r4
   839f6:	2100      	movs	r1, #0
   839f8:	f001 f862 	bl	84ac0 <_sbrk_r>
   839fc:	68ab      	ldr	r3, [r5, #8]
   839fe:	4433      	add	r3, r6
   83a00:	4298      	cmp	r0, r3
   83a02:	d004      	beq.n	83a0e <_malloc_trim_r+0x46>
   83a04:	4620      	mov	r0, r4
   83a06:	f000 fe79 	bl	846fc <__malloc_unlock>
   83a0a:	2000      	movs	r0, #0
   83a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a0e:	4620      	mov	r0, r4
   83a10:	4279      	negs	r1, r7
   83a12:	f001 f855 	bl	84ac0 <_sbrk_r>
   83a16:	3001      	adds	r0, #1
   83a18:	d00d      	beq.n	83a36 <_malloc_trim_r+0x6e>
   83a1a:	4b10      	ldr	r3, [pc, #64]	; (83a5c <_malloc_trim_r+0x94>)
   83a1c:	68aa      	ldr	r2, [r5, #8]
   83a1e:	6819      	ldr	r1, [r3, #0]
   83a20:	1bf6      	subs	r6, r6, r7
   83a22:	f046 0601 	orr.w	r6, r6, #1
   83a26:	4620      	mov	r0, r4
   83a28:	1bc9      	subs	r1, r1, r7
   83a2a:	6056      	str	r6, [r2, #4]
   83a2c:	6019      	str	r1, [r3, #0]
   83a2e:	f000 fe65 	bl	846fc <__malloc_unlock>
   83a32:	2001      	movs	r0, #1
   83a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a36:	4620      	mov	r0, r4
   83a38:	2100      	movs	r1, #0
   83a3a:	f001 f841 	bl	84ac0 <_sbrk_r>
   83a3e:	68ab      	ldr	r3, [r5, #8]
   83a40:	1ac2      	subs	r2, r0, r3
   83a42:	2a0f      	cmp	r2, #15
   83a44:	ddde      	ble.n	83a04 <_malloc_trim_r+0x3c>
   83a46:	4d06      	ldr	r5, [pc, #24]	; (83a60 <_malloc_trim_r+0x98>)
   83a48:	4904      	ldr	r1, [pc, #16]	; (83a5c <_malloc_trim_r+0x94>)
   83a4a:	682d      	ldr	r5, [r5, #0]
   83a4c:	f042 0201 	orr.w	r2, r2, #1
   83a50:	1b40      	subs	r0, r0, r5
   83a52:	605a      	str	r2, [r3, #4]
   83a54:	6008      	str	r0, [r1, #0]
   83a56:	e7d5      	b.n	83a04 <_malloc_trim_r+0x3c>
   83a58:	20070590 	.word	0x20070590
   83a5c:	20070b44 	.word	0x20070b44
   83a60:	2007099c 	.word	0x2007099c

00083a64 <_free_r>:
   83a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83a68:	460d      	mov	r5, r1
   83a6a:	4606      	mov	r6, r0
   83a6c:	2900      	cmp	r1, #0
   83a6e:	d055      	beq.n	83b1c <_free_r+0xb8>
   83a70:	f000 fe42 	bl	846f8 <__malloc_lock>
   83a74:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83a78:	f8df c170 	ldr.w	ip, [pc, #368]	; 83bec <_free_r+0x188>
   83a7c:	f1a5 0408 	sub.w	r4, r5, #8
   83a80:	f021 0301 	bic.w	r3, r1, #1
   83a84:	18e2      	adds	r2, r4, r3
   83a86:	f8dc 0008 	ldr.w	r0, [ip, #8]
   83a8a:	6857      	ldr	r7, [r2, #4]
   83a8c:	4290      	cmp	r0, r2
   83a8e:	f027 0703 	bic.w	r7, r7, #3
   83a92:	d068      	beq.n	83b66 <_free_r+0x102>
   83a94:	f011 0101 	ands.w	r1, r1, #1
   83a98:	6057      	str	r7, [r2, #4]
   83a9a:	d032      	beq.n	83b02 <_free_r+0x9e>
   83a9c:	2100      	movs	r1, #0
   83a9e:	19d0      	adds	r0, r2, r7
   83aa0:	6840      	ldr	r0, [r0, #4]
   83aa2:	07c0      	lsls	r0, r0, #31
   83aa4:	d406      	bmi.n	83ab4 <_free_r+0x50>
   83aa6:	443b      	add	r3, r7
   83aa8:	6890      	ldr	r0, [r2, #8]
   83aaa:	2900      	cmp	r1, #0
   83aac:	d04d      	beq.n	83b4a <_free_r+0xe6>
   83aae:	68d2      	ldr	r2, [r2, #12]
   83ab0:	60c2      	str	r2, [r0, #12]
   83ab2:	6090      	str	r0, [r2, #8]
   83ab4:	f043 0201 	orr.w	r2, r3, #1
   83ab8:	6062      	str	r2, [r4, #4]
   83aba:	50e3      	str	r3, [r4, r3]
   83abc:	b9e1      	cbnz	r1, 83af8 <_free_r+0x94>
   83abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83ac2:	d32d      	bcc.n	83b20 <_free_r+0xbc>
   83ac4:	0a5a      	lsrs	r2, r3, #9
   83ac6:	2a04      	cmp	r2, #4
   83ac8:	d869      	bhi.n	83b9e <_free_r+0x13a>
   83aca:	0998      	lsrs	r0, r3, #6
   83acc:	3038      	adds	r0, #56	; 0x38
   83ace:	0041      	lsls	r1, r0, #1
   83ad0:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   83ad4:	f8dc 2008 	ldr.w	r2, [ip, #8]
   83ad8:	4944      	ldr	r1, [pc, #272]	; (83bec <_free_r+0x188>)
   83ada:	4562      	cmp	r2, ip
   83adc:	d065      	beq.n	83baa <_free_r+0x146>
   83ade:	6851      	ldr	r1, [r2, #4]
   83ae0:	f021 0103 	bic.w	r1, r1, #3
   83ae4:	428b      	cmp	r3, r1
   83ae6:	d202      	bcs.n	83aee <_free_r+0x8a>
   83ae8:	6892      	ldr	r2, [r2, #8]
   83aea:	4594      	cmp	ip, r2
   83aec:	d1f7      	bne.n	83ade <_free_r+0x7a>
   83aee:	68d3      	ldr	r3, [r2, #12]
   83af0:	60e3      	str	r3, [r4, #12]
   83af2:	60a2      	str	r2, [r4, #8]
   83af4:	609c      	str	r4, [r3, #8]
   83af6:	60d4      	str	r4, [r2, #12]
   83af8:	4630      	mov	r0, r6
   83afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83afe:	f000 bdfd 	b.w	846fc <__malloc_unlock>
   83b02:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83b06:	f10c 0808 	add.w	r8, ip, #8
   83b0a:	1b64      	subs	r4, r4, r5
   83b0c:	68a0      	ldr	r0, [r4, #8]
   83b0e:	442b      	add	r3, r5
   83b10:	4540      	cmp	r0, r8
   83b12:	d042      	beq.n	83b9a <_free_r+0x136>
   83b14:	68e5      	ldr	r5, [r4, #12]
   83b16:	60c5      	str	r5, [r0, #12]
   83b18:	60a8      	str	r0, [r5, #8]
   83b1a:	e7c0      	b.n	83a9e <_free_r+0x3a>
   83b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b20:	08db      	lsrs	r3, r3, #3
   83b22:	109a      	asrs	r2, r3, #2
   83b24:	2001      	movs	r0, #1
   83b26:	4090      	lsls	r0, r2
   83b28:	f8dc 1004 	ldr.w	r1, [ip, #4]
   83b2c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   83b30:	689a      	ldr	r2, [r3, #8]
   83b32:	4301      	orrs	r1, r0
   83b34:	60a2      	str	r2, [r4, #8]
   83b36:	60e3      	str	r3, [r4, #12]
   83b38:	f8cc 1004 	str.w	r1, [ip, #4]
   83b3c:	4630      	mov	r0, r6
   83b3e:	609c      	str	r4, [r3, #8]
   83b40:	60d4      	str	r4, [r2, #12]
   83b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83b46:	f000 bdd9 	b.w	846fc <__malloc_unlock>
   83b4a:	4d29      	ldr	r5, [pc, #164]	; (83bf0 <_free_r+0x18c>)
   83b4c:	42a8      	cmp	r0, r5
   83b4e:	d1ae      	bne.n	83aae <_free_r+0x4a>
   83b50:	f043 0201 	orr.w	r2, r3, #1
   83b54:	f8cc 4014 	str.w	r4, [ip, #20]
   83b58:	f8cc 4010 	str.w	r4, [ip, #16]
   83b5c:	60e0      	str	r0, [r4, #12]
   83b5e:	60a0      	str	r0, [r4, #8]
   83b60:	6062      	str	r2, [r4, #4]
   83b62:	50e3      	str	r3, [r4, r3]
   83b64:	e7c8      	b.n	83af8 <_free_r+0x94>
   83b66:	441f      	add	r7, r3
   83b68:	07cb      	lsls	r3, r1, #31
   83b6a:	d407      	bmi.n	83b7c <_free_r+0x118>
   83b6c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   83b70:	1a64      	subs	r4, r4, r1
   83b72:	68e3      	ldr	r3, [r4, #12]
   83b74:	68a2      	ldr	r2, [r4, #8]
   83b76:	440f      	add	r7, r1
   83b78:	60d3      	str	r3, [r2, #12]
   83b7a:	609a      	str	r2, [r3, #8]
   83b7c:	4b1d      	ldr	r3, [pc, #116]	; (83bf4 <_free_r+0x190>)
   83b7e:	f047 0201 	orr.w	r2, r7, #1
   83b82:	681b      	ldr	r3, [r3, #0]
   83b84:	6062      	str	r2, [r4, #4]
   83b86:	429f      	cmp	r7, r3
   83b88:	f8cc 4008 	str.w	r4, [ip, #8]
   83b8c:	d3b4      	bcc.n	83af8 <_free_r+0x94>
   83b8e:	4b1a      	ldr	r3, [pc, #104]	; (83bf8 <_free_r+0x194>)
   83b90:	4630      	mov	r0, r6
   83b92:	6819      	ldr	r1, [r3, #0]
   83b94:	f7ff ff18 	bl	839c8 <_malloc_trim_r>
   83b98:	e7ae      	b.n	83af8 <_free_r+0x94>
   83b9a:	2101      	movs	r1, #1
   83b9c:	e77f      	b.n	83a9e <_free_r+0x3a>
   83b9e:	2a14      	cmp	r2, #20
   83ba0:	d80b      	bhi.n	83bba <_free_r+0x156>
   83ba2:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   83ba6:	0041      	lsls	r1, r0, #1
   83ba8:	e792      	b.n	83ad0 <_free_r+0x6c>
   83baa:	1080      	asrs	r0, r0, #2
   83bac:	2501      	movs	r5, #1
   83bae:	4085      	lsls	r5, r0
   83bb0:	6848      	ldr	r0, [r1, #4]
   83bb2:	4613      	mov	r3, r2
   83bb4:	4328      	orrs	r0, r5
   83bb6:	6048      	str	r0, [r1, #4]
   83bb8:	e79a      	b.n	83af0 <_free_r+0x8c>
   83bba:	2a54      	cmp	r2, #84	; 0x54
   83bbc:	d803      	bhi.n	83bc6 <_free_r+0x162>
   83bbe:	0b18      	lsrs	r0, r3, #12
   83bc0:	306e      	adds	r0, #110	; 0x6e
   83bc2:	0041      	lsls	r1, r0, #1
   83bc4:	e784      	b.n	83ad0 <_free_r+0x6c>
   83bc6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83bca:	d803      	bhi.n	83bd4 <_free_r+0x170>
   83bcc:	0bd8      	lsrs	r0, r3, #15
   83bce:	3077      	adds	r0, #119	; 0x77
   83bd0:	0041      	lsls	r1, r0, #1
   83bd2:	e77d      	b.n	83ad0 <_free_r+0x6c>
   83bd4:	f240 5154 	movw	r1, #1364	; 0x554
   83bd8:	428a      	cmp	r2, r1
   83bda:	d803      	bhi.n	83be4 <_free_r+0x180>
   83bdc:	0c98      	lsrs	r0, r3, #18
   83bde:	307c      	adds	r0, #124	; 0x7c
   83be0:	0041      	lsls	r1, r0, #1
   83be2:	e775      	b.n	83ad0 <_free_r+0x6c>
   83be4:	21fc      	movs	r1, #252	; 0xfc
   83be6:	207e      	movs	r0, #126	; 0x7e
   83be8:	e772      	b.n	83ad0 <_free_r+0x6c>
   83bea:	bf00      	nop
   83bec:	20070590 	.word	0x20070590
   83bf0:	20070598 	.word	0x20070598
   83bf4:	20070998 	.word	0x20070998
   83bf8:	20070b40 	.word	0x20070b40

00083bfc <__sfvwrite_r>:
   83bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83c00:	6893      	ldr	r3, [r2, #8]
   83c02:	b083      	sub	sp, #12
   83c04:	4616      	mov	r6, r2
   83c06:	4681      	mov	r9, r0
   83c08:	460c      	mov	r4, r1
   83c0a:	b32b      	cbz	r3, 83c58 <__sfvwrite_r+0x5c>
   83c0c:	898b      	ldrh	r3, [r1, #12]
   83c0e:	0719      	lsls	r1, r3, #28
   83c10:	d526      	bpl.n	83c60 <__sfvwrite_r+0x64>
   83c12:	6922      	ldr	r2, [r4, #16]
   83c14:	b322      	cbz	r2, 83c60 <__sfvwrite_r+0x64>
   83c16:	f003 0202 	and.w	r2, r3, #2
   83c1a:	b292      	uxth	r2, r2
   83c1c:	6835      	ldr	r5, [r6, #0]
   83c1e:	2a00      	cmp	r2, #0
   83c20:	d02c      	beq.n	83c7c <__sfvwrite_r+0x80>
   83c22:	f04f 0a00 	mov.w	sl, #0
   83c26:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 83f10 <__sfvwrite_r+0x314>
   83c2a:	46d0      	mov	r8, sl
   83c2c:	45d8      	cmp	r8, fp
   83c2e:	bf34      	ite	cc
   83c30:	4643      	movcc	r3, r8
   83c32:	465b      	movcs	r3, fp
   83c34:	4652      	mov	r2, sl
   83c36:	4648      	mov	r0, r9
   83c38:	f1b8 0f00 	cmp.w	r8, #0
   83c3c:	d04f      	beq.n	83cde <__sfvwrite_r+0xe2>
   83c3e:	69e1      	ldr	r1, [r4, #28]
   83c40:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83c42:	47b8      	blx	r7
   83c44:	2800      	cmp	r0, #0
   83c46:	dd56      	ble.n	83cf6 <__sfvwrite_r+0xfa>
   83c48:	68b3      	ldr	r3, [r6, #8]
   83c4a:	4482      	add	sl, r0
   83c4c:	1a1b      	subs	r3, r3, r0
   83c4e:	ebc0 0808 	rsb	r8, r0, r8
   83c52:	60b3      	str	r3, [r6, #8]
   83c54:	2b00      	cmp	r3, #0
   83c56:	d1e9      	bne.n	83c2c <__sfvwrite_r+0x30>
   83c58:	2000      	movs	r0, #0
   83c5a:	b003      	add	sp, #12
   83c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c60:	4648      	mov	r0, r9
   83c62:	4621      	mov	r1, r4
   83c64:	f7ff fc88 	bl	83578 <__swsetup_r>
   83c68:	2800      	cmp	r0, #0
   83c6a:	f040 8148 	bne.w	83efe <__sfvwrite_r+0x302>
   83c6e:	89a3      	ldrh	r3, [r4, #12]
   83c70:	6835      	ldr	r5, [r6, #0]
   83c72:	f003 0202 	and.w	r2, r3, #2
   83c76:	b292      	uxth	r2, r2
   83c78:	2a00      	cmp	r2, #0
   83c7a:	d1d2      	bne.n	83c22 <__sfvwrite_r+0x26>
   83c7c:	f013 0a01 	ands.w	sl, r3, #1
   83c80:	d142      	bne.n	83d08 <__sfvwrite_r+0x10c>
   83c82:	46d0      	mov	r8, sl
   83c84:	f1b8 0f00 	cmp.w	r8, #0
   83c88:	d023      	beq.n	83cd2 <__sfvwrite_r+0xd6>
   83c8a:	059a      	lsls	r2, r3, #22
   83c8c:	68a7      	ldr	r7, [r4, #8]
   83c8e:	d576      	bpl.n	83d7e <__sfvwrite_r+0x182>
   83c90:	45b8      	cmp	r8, r7
   83c92:	f0c0 80a4 	bcc.w	83dde <__sfvwrite_r+0x1e2>
   83c96:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83c9a:	f040 80b2 	bne.w	83e02 <__sfvwrite_r+0x206>
   83c9e:	6820      	ldr	r0, [r4, #0]
   83ca0:	46bb      	mov	fp, r7
   83ca2:	4651      	mov	r1, sl
   83ca4:	465a      	mov	r2, fp
   83ca6:	f000 fcc1 	bl	8462c <memmove>
   83caa:	68a2      	ldr	r2, [r4, #8]
   83cac:	6821      	ldr	r1, [r4, #0]
   83cae:	1bd2      	subs	r2, r2, r7
   83cb0:	eb01 030b 	add.w	r3, r1, fp
   83cb4:	60a2      	str	r2, [r4, #8]
   83cb6:	6023      	str	r3, [r4, #0]
   83cb8:	4642      	mov	r2, r8
   83cba:	68b3      	ldr	r3, [r6, #8]
   83cbc:	4492      	add	sl, r2
   83cbe:	1a9b      	subs	r3, r3, r2
   83cc0:	ebc2 0808 	rsb	r8, r2, r8
   83cc4:	60b3      	str	r3, [r6, #8]
   83cc6:	2b00      	cmp	r3, #0
   83cc8:	d0c6      	beq.n	83c58 <__sfvwrite_r+0x5c>
   83cca:	89a3      	ldrh	r3, [r4, #12]
   83ccc:	f1b8 0f00 	cmp.w	r8, #0
   83cd0:	d1db      	bne.n	83c8a <__sfvwrite_r+0x8e>
   83cd2:	f8d5 a000 	ldr.w	sl, [r5]
   83cd6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83cda:	3508      	adds	r5, #8
   83cdc:	e7d2      	b.n	83c84 <__sfvwrite_r+0x88>
   83cde:	f8d5 a000 	ldr.w	sl, [r5]
   83ce2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83ce6:	3508      	adds	r5, #8
   83ce8:	e7a0      	b.n	83c2c <__sfvwrite_r+0x30>
   83cea:	4648      	mov	r0, r9
   83cec:	4621      	mov	r1, r4
   83cee:	f7ff fd59 	bl	837a4 <_fflush_r>
   83cf2:	2800      	cmp	r0, #0
   83cf4:	d059      	beq.n	83daa <__sfvwrite_r+0x1ae>
   83cf6:	89a3      	ldrh	r3, [r4, #12]
   83cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83cfc:	f04f 30ff 	mov.w	r0, #4294967295
   83d00:	81a3      	strh	r3, [r4, #12]
   83d02:	b003      	add	sp, #12
   83d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d08:	4692      	mov	sl, r2
   83d0a:	9201      	str	r2, [sp, #4]
   83d0c:	4693      	mov	fp, r2
   83d0e:	4690      	mov	r8, r2
   83d10:	f1b8 0f00 	cmp.w	r8, #0
   83d14:	d02b      	beq.n	83d6e <__sfvwrite_r+0x172>
   83d16:	9f01      	ldr	r7, [sp, #4]
   83d18:	2f00      	cmp	r7, #0
   83d1a:	d064      	beq.n	83de6 <__sfvwrite_r+0x1ea>
   83d1c:	6820      	ldr	r0, [r4, #0]
   83d1e:	6921      	ldr	r1, [r4, #16]
   83d20:	45c2      	cmp	sl, r8
   83d22:	bf34      	ite	cc
   83d24:	4653      	movcc	r3, sl
   83d26:	4643      	movcs	r3, r8
   83d28:	4288      	cmp	r0, r1
   83d2a:	461f      	mov	r7, r3
   83d2c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   83d30:	6962      	ldr	r2, [r4, #20]
   83d32:	d903      	bls.n	83d3c <__sfvwrite_r+0x140>
   83d34:	4494      	add	ip, r2
   83d36:	4563      	cmp	r3, ip
   83d38:	f300 80ae 	bgt.w	83e98 <__sfvwrite_r+0x29c>
   83d3c:	4293      	cmp	r3, r2
   83d3e:	db36      	blt.n	83dae <__sfvwrite_r+0x1b2>
   83d40:	4613      	mov	r3, r2
   83d42:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83d44:	4648      	mov	r0, r9
   83d46:	69e1      	ldr	r1, [r4, #28]
   83d48:	465a      	mov	r2, fp
   83d4a:	47b8      	blx	r7
   83d4c:	1e07      	subs	r7, r0, #0
   83d4e:	ddd2      	ble.n	83cf6 <__sfvwrite_r+0xfa>
   83d50:	ebba 0a07 	subs.w	sl, sl, r7
   83d54:	d03a      	beq.n	83dcc <__sfvwrite_r+0x1d0>
   83d56:	68b3      	ldr	r3, [r6, #8]
   83d58:	44bb      	add	fp, r7
   83d5a:	1bdb      	subs	r3, r3, r7
   83d5c:	ebc7 0808 	rsb	r8, r7, r8
   83d60:	60b3      	str	r3, [r6, #8]
   83d62:	2b00      	cmp	r3, #0
   83d64:	f43f af78 	beq.w	83c58 <__sfvwrite_r+0x5c>
   83d68:	f1b8 0f00 	cmp.w	r8, #0
   83d6c:	d1d3      	bne.n	83d16 <__sfvwrite_r+0x11a>
   83d6e:	2700      	movs	r7, #0
   83d70:	f8d5 b000 	ldr.w	fp, [r5]
   83d74:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83d78:	9701      	str	r7, [sp, #4]
   83d7a:	3508      	adds	r5, #8
   83d7c:	e7c8      	b.n	83d10 <__sfvwrite_r+0x114>
   83d7e:	6820      	ldr	r0, [r4, #0]
   83d80:	6923      	ldr	r3, [r4, #16]
   83d82:	4298      	cmp	r0, r3
   83d84:	d802      	bhi.n	83d8c <__sfvwrite_r+0x190>
   83d86:	6963      	ldr	r3, [r4, #20]
   83d88:	4598      	cmp	r8, r3
   83d8a:	d272      	bcs.n	83e72 <__sfvwrite_r+0x276>
   83d8c:	45b8      	cmp	r8, r7
   83d8e:	bf38      	it	cc
   83d90:	4647      	movcc	r7, r8
   83d92:	463a      	mov	r2, r7
   83d94:	4651      	mov	r1, sl
   83d96:	f000 fc49 	bl	8462c <memmove>
   83d9a:	68a3      	ldr	r3, [r4, #8]
   83d9c:	6822      	ldr	r2, [r4, #0]
   83d9e:	1bdb      	subs	r3, r3, r7
   83da0:	443a      	add	r2, r7
   83da2:	60a3      	str	r3, [r4, #8]
   83da4:	6022      	str	r2, [r4, #0]
   83da6:	2b00      	cmp	r3, #0
   83da8:	d09f      	beq.n	83cea <__sfvwrite_r+0xee>
   83daa:	463a      	mov	r2, r7
   83dac:	e785      	b.n	83cba <__sfvwrite_r+0xbe>
   83dae:	461a      	mov	r2, r3
   83db0:	4659      	mov	r1, fp
   83db2:	9300      	str	r3, [sp, #0]
   83db4:	f000 fc3a 	bl	8462c <memmove>
   83db8:	9b00      	ldr	r3, [sp, #0]
   83dba:	68a1      	ldr	r1, [r4, #8]
   83dbc:	6822      	ldr	r2, [r4, #0]
   83dbe:	1ac9      	subs	r1, r1, r3
   83dc0:	ebba 0a07 	subs.w	sl, sl, r7
   83dc4:	4413      	add	r3, r2
   83dc6:	60a1      	str	r1, [r4, #8]
   83dc8:	6023      	str	r3, [r4, #0]
   83dca:	d1c4      	bne.n	83d56 <__sfvwrite_r+0x15a>
   83dcc:	4648      	mov	r0, r9
   83dce:	4621      	mov	r1, r4
   83dd0:	f7ff fce8 	bl	837a4 <_fflush_r>
   83dd4:	2800      	cmp	r0, #0
   83dd6:	d18e      	bne.n	83cf6 <__sfvwrite_r+0xfa>
   83dd8:	f8cd a004 	str.w	sl, [sp, #4]
   83ddc:	e7bb      	b.n	83d56 <__sfvwrite_r+0x15a>
   83dde:	6820      	ldr	r0, [r4, #0]
   83de0:	4647      	mov	r7, r8
   83de2:	46c3      	mov	fp, r8
   83de4:	e75d      	b.n	83ca2 <__sfvwrite_r+0xa6>
   83de6:	4658      	mov	r0, fp
   83de8:	210a      	movs	r1, #10
   83dea:	4642      	mov	r2, r8
   83dec:	f000 fbd4 	bl	84598 <memchr>
   83df0:	2800      	cmp	r0, #0
   83df2:	d07f      	beq.n	83ef4 <__sfvwrite_r+0x2f8>
   83df4:	f100 0a01 	add.w	sl, r0, #1
   83df8:	2701      	movs	r7, #1
   83dfa:	ebcb 0a0a 	rsb	sl, fp, sl
   83dfe:	9701      	str	r7, [sp, #4]
   83e00:	e78c      	b.n	83d1c <__sfvwrite_r+0x120>
   83e02:	6822      	ldr	r2, [r4, #0]
   83e04:	6921      	ldr	r1, [r4, #16]
   83e06:	6967      	ldr	r7, [r4, #20]
   83e08:	ebc1 0c02 	rsb	ip, r1, r2
   83e0c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   83e10:	f10c 0201 	add.w	r2, ip, #1
   83e14:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   83e18:	4442      	add	r2, r8
   83e1a:	107f      	asrs	r7, r7, #1
   83e1c:	4297      	cmp	r7, r2
   83e1e:	bf34      	ite	cc
   83e20:	4617      	movcc	r7, r2
   83e22:	463a      	movcs	r2, r7
   83e24:	055b      	lsls	r3, r3, #21
   83e26:	d54f      	bpl.n	83ec8 <__sfvwrite_r+0x2cc>
   83e28:	4611      	mov	r1, r2
   83e2a:	4648      	mov	r0, r9
   83e2c:	f8cd c000 	str.w	ip, [sp]
   83e30:	f000 f916 	bl	84060 <_malloc_r>
   83e34:	f8dd c000 	ldr.w	ip, [sp]
   83e38:	4683      	mov	fp, r0
   83e3a:	2800      	cmp	r0, #0
   83e3c:	d062      	beq.n	83f04 <__sfvwrite_r+0x308>
   83e3e:	4662      	mov	r2, ip
   83e40:	6921      	ldr	r1, [r4, #16]
   83e42:	f8cd c000 	str.w	ip, [sp]
   83e46:	f7fe fb19 	bl	8247c <memcpy>
   83e4a:	89a2      	ldrh	r2, [r4, #12]
   83e4c:	f8dd c000 	ldr.w	ip, [sp]
   83e50:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83e54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83e58:	81a2      	strh	r2, [r4, #12]
   83e5a:	eb0b 000c 	add.w	r0, fp, ip
   83e5e:	ebcc 0207 	rsb	r2, ip, r7
   83e62:	f8c4 b010 	str.w	fp, [r4, #16]
   83e66:	6167      	str	r7, [r4, #20]
   83e68:	6020      	str	r0, [r4, #0]
   83e6a:	60a2      	str	r2, [r4, #8]
   83e6c:	4647      	mov	r7, r8
   83e6e:	46c3      	mov	fp, r8
   83e70:	e717      	b.n	83ca2 <__sfvwrite_r+0xa6>
   83e72:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83e76:	4590      	cmp	r8, r2
   83e78:	bf38      	it	cc
   83e7a:	4642      	movcc	r2, r8
   83e7c:	fb92 f2f3 	sdiv	r2, r2, r3
   83e80:	fb02 f303 	mul.w	r3, r2, r3
   83e84:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83e86:	4648      	mov	r0, r9
   83e88:	69e1      	ldr	r1, [r4, #28]
   83e8a:	4652      	mov	r2, sl
   83e8c:	47b8      	blx	r7
   83e8e:	2800      	cmp	r0, #0
   83e90:	f77f af31 	ble.w	83cf6 <__sfvwrite_r+0xfa>
   83e94:	4602      	mov	r2, r0
   83e96:	e710      	b.n	83cba <__sfvwrite_r+0xbe>
   83e98:	4662      	mov	r2, ip
   83e9a:	4659      	mov	r1, fp
   83e9c:	f8cd c000 	str.w	ip, [sp]
   83ea0:	f000 fbc4 	bl	8462c <memmove>
   83ea4:	f8dd c000 	ldr.w	ip, [sp]
   83ea8:	6823      	ldr	r3, [r4, #0]
   83eaa:	4648      	mov	r0, r9
   83eac:	4463      	add	r3, ip
   83eae:	6023      	str	r3, [r4, #0]
   83eb0:	4621      	mov	r1, r4
   83eb2:	f8cd c000 	str.w	ip, [sp]
   83eb6:	f7ff fc75 	bl	837a4 <_fflush_r>
   83eba:	f8dd c000 	ldr.w	ip, [sp]
   83ebe:	2800      	cmp	r0, #0
   83ec0:	f47f af19 	bne.w	83cf6 <__sfvwrite_r+0xfa>
   83ec4:	4667      	mov	r7, ip
   83ec6:	e743      	b.n	83d50 <__sfvwrite_r+0x154>
   83ec8:	4648      	mov	r0, r9
   83eca:	f8cd c000 	str.w	ip, [sp]
   83ece:	f000 fc17 	bl	84700 <_realloc_r>
   83ed2:	f8dd c000 	ldr.w	ip, [sp]
   83ed6:	4683      	mov	fp, r0
   83ed8:	2800      	cmp	r0, #0
   83eda:	d1be      	bne.n	83e5a <__sfvwrite_r+0x25e>
   83edc:	4648      	mov	r0, r9
   83ede:	6921      	ldr	r1, [r4, #16]
   83ee0:	f7ff fdc0 	bl	83a64 <_free_r>
   83ee4:	89a3      	ldrh	r3, [r4, #12]
   83ee6:	220c      	movs	r2, #12
   83ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83eec:	b29b      	uxth	r3, r3
   83eee:	f8c9 2000 	str.w	r2, [r9]
   83ef2:	e701      	b.n	83cf8 <__sfvwrite_r+0xfc>
   83ef4:	2701      	movs	r7, #1
   83ef6:	f108 0a01 	add.w	sl, r8, #1
   83efa:	9701      	str	r7, [sp, #4]
   83efc:	e70e      	b.n	83d1c <__sfvwrite_r+0x120>
   83efe:	f04f 30ff 	mov.w	r0, #4294967295
   83f02:	e6aa      	b.n	83c5a <__sfvwrite_r+0x5e>
   83f04:	230c      	movs	r3, #12
   83f06:	f8c9 3000 	str.w	r3, [r9]
   83f0a:	89a3      	ldrh	r3, [r4, #12]
   83f0c:	e6f4      	b.n	83cf8 <__sfvwrite_r+0xfc>
   83f0e:	bf00      	nop
   83f10:	7ffffc00 	.word	0x7ffffc00

00083f14 <_fwalk>:
   83f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83f18:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   83f1c:	4688      	mov	r8, r1
   83f1e:	d019      	beq.n	83f54 <_fwalk+0x40>
   83f20:	2600      	movs	r6, #0
   83f22:	687d      	ldr	r5, [r7, #4]
   83f24:	68bc      	ldr	r4, [r7, #8]
   83f26:	3d01      	subs	r5, #1
   83f28:	d40e      	bmi.n	83f48 <_fwalk+0x34>
   83f2a:	89a3      	ldrh	r3, [r4, #12]
   83f2c:	3d01      	subs	r5, #1
   83f2e:	2b01      	cmp	r3, #1
   83f30:	d906      	bls.n	83f40 <_fwalk+0x2c>
   83f32:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83f36:	4620      	mov	r0, r4
   83f38:	3301      	adds	r3, #1
   83f3a:	d001      	beq.n	83f40 <_fwalk+0x2c>
   83f3c:	47c0      	blx	r8
   83f3e:	4306      	orrs	r6, r0
   83f40:	1c6b      	adds	r3, r5, #1
   83f42:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83f46:	d1f0      	bne.n	83f2a <_fwalk+0x16>
   83f48:	683f      	ldr	r7, [r7, #0]
   83f4a:	2f00      	cmp	r7, #0
   83f4c:	d1e9      	bne.n	83f22 <_fwalk+0xe>
   83f4e:	4630      	mov	r0, r6
   83f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f54:	463e      	mov	r6, r7
   83f56:	4630      	mov	r0, r6
   83f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083f5c <__locale_charset>:
   83f5c:	4800      	ldr	r0, [pc, #0]	; (83f60 <__locale_charset+0x4>)
   83f5e:	4770      	bx	lr
   83f60:	2007056c 	.word	0x2007056c

00083f64 <__locale_mb_cur_max>:
   83f64:	4b01      	ldr	r3, [pc, #4]	; (83f6c <__locale_mb_cur_max+0x8>)
   83f66:	6818      	ldr	r0, [r3, #0]
   83f68:	4770      	bx	lr
   83f6a:	bf00      	nop
   83f6c:	2007058c 	.word	0x2007058c

00083f70 <__smakebuf_r>:
   83f70:	b5f0      	push	{r4, r5, r6, r7, lr}
   83f72:	898b      	ldrh	r3, [r1, #12]
   83f74:	b091      	sub	sp, #68	; 0x44
   83f76:	b29a      	uxth	r2, r3
   83f78:	0796      	lsls	r6, r2, #30
   83f7a:	460c      	mov	r4, r1
   83f7c:	4605      	mov	r5, r0
   83f7e:	d437      	bmi.n	83ff0 <__smakebuf_r+0x80>
   83f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83f84:	2900      	cmp	r1, #0
   83f86:	db17      	blt.n	83fb8 <__smakebuf_r+0x48>
   83f88:	aa01      	add	r2, sp, #4
   83f8a:	f000 fee5 	bl	84d58 <_fstat_r>
   83f8e:	2800      	cmp	r0, #0
   83f90:	db10      	blt.n	83fb4 <__smakebuf_r+0x44>
   83f92:	9b02      	ldr	r3, [sp, #8]
   83f94:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   83f98:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   83f9c:	424f      	negs	r7, r1
   83f9e:	414f      	adcs	r7, r1
   83fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   83fa4:	d02c      	beq.n	84000 <__smakebuf_r+0x90>
   83fa6:	89a3      	ldrh	r3, [r4, #12]
   83fa8:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83fb0:	81a3      	strh	r3, [r4, #12]
   83fb2:	e00b      	b.n	83fcc <__smakebuf_r+0x5c>
   83fb4:	89a3      	ldrh	r3, [r4, #12]
   83fb6:	b29a      	uxth	r2, r3
   83fb8:	f012 0f80 	tst.w	r2, #128	; 0x80
   83fbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83fc0:	81a3      	strh	r3, [r4, #12]
   83fc2:	bf14      	ite	ne
   83fc4:	2640      	movne	r6, #64	; 0x40
   83fc6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   83fca:	2700      	movs	r7, #0
   83fcc:	4628      	mov	r0, r5
   83fce:	4631      	mov	r1, r6
   83fd0:	f000 f846 	bl	84060 <_malloc_r>
   83fd4:	89a3      	ldrh	r3, [r4, #12]
   83fd6:	2800      	cmp	r0, #0
   83fd8:	d029      	beq.n	8402e <__smakebuf_r+0xbe>
   83fda:	4a1b      	ldr	r2, [pc, #108]	; (84048 <__smakebuf_r+0xd8>)
   83fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83fe0:	63ea      	str	r2, [r5, #60]	; 0x3c
   83fe2:	81a3      	strh	r3, [r4, #12]
   83fe4:	6020      	str	r0, [r4, #0]
   83fe6:	6120      	str	r0, [r4, #16]
   83fe8:	6166      	str	r6, [r4, #20]
   83fea:	b9a7      	cbnz	r7, 84016 <__smakebuf_r+0xa6>
   83fec:	b011      	add	sp, #68	; 0x44
   83fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83ff0:	f101 0343 	add.w	r3, r1, #67	; 0x43
   83ff4:	2201      	movs	r2, #1
   83ff6:	600b      	str	r3, [r1, #0]
   83ff8:	610b      	str	r3, [r1, #16]
   83ffa:	614a      	str	r2, [r1, #20]
   83ffc:	b011      	add	sp, #68	; 0x44
   83ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84000:	4a12      	ldr	r2, [pc, #72]	; (8404c <__smakebuf_r+0xdc>)
   84002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   84004:	4293      	cmp	r3, r2
   84006:	d1ce      	bne.n	83fa6 <__smakebuf_r+0x36>
   84008:	89a3      	ldrh	r3, [r4, #12]
   8400a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8400e:	4333      	orrs	r3, r6
   84010:	81a3      	strh	r3, [r4, #12]
   84012:	64e6      	str	r6, [r4, #76]	; 0x4c
   84014:	e7da      	b.n	83fcc <__smakebuf_r+0x5c>
   84016:	4628      	mov	r0, r5
   84018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8401c:	f000 feb0 	bl	84d80 <_isatty_r>
   84020:	2800      	cmp	r0, #0
   84022:	d0e3      	beq.n	83fec <__smakebuf_r+0x7c>
   84024:	89a3      	ldrh	r3, [r4, #12]
   84026:	f043 0301 	orr.w	r3, r3, #1
   8402a:	81a3      	strh	r3, [r4, #12]
   8402c:	e7de      	b.n	83fec <__smakebuf_r+0x7c>
   8402e:	059a      	lsls	r2, r3, #22
   84030:	d4dc      	bmi.n	83fec <__smakebuf_r+0x7c>
   84032:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84036:	f043 0302 	orr.w	r3, r3, #2
   8403a:	2101      	movs	r1, #1
   8403c:	81a3      	strh	r3, [r4, #12]
   8403e:	6022      	str	r2, [r4, #0]
   84040:	6122      	str	r2, [r4, #16]
   84042:	6161      	str	r1, [r4, #20]
   84044:	e7d2      	b.n	83fec <__smakebuf_r+0x7c>
   84046:	bf00      	nop
   84048:	000837d1 	.word	0x000837d1
   8404c:	00084b41 	.word	0x00084b41

00084050 <malloc>:
   84050:	4b02      	ldr	r3, [pc, #8]	; (8405c <malloc+0xc>)
   84052:	4601      	mov	r1, r0
   84054:	6818      	ldr	r0, [r3, #0]
   84056:	f000 b803 	b.w	84060 <_malloc_r>
   8405a:	bf00      	nop
   8405c:	20070568 	.word	0x20070568

00084060 <_malloc_r>:
   84060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84064:	f101 050b 	add.w	r5, r1, #11
   84068:	2d16      	cmp	r5, #22
   8406a:	b083      	sub	sp, #12
   8406c:	4606      	mov	r6, r0
   8406e:	d927      	bls.n	840c0 <_malloc_r+0x60>
   84070:	f035 0507 	bics.w	r5, r5, #7
   84074:	d427      	bmi.n	840c6 <_malloc_r+0x66>
   84076:	42a9      	cmp	r1, r5
   84078:	d825      	bhi.n	840c6 <_malloc_r+0x66>
   8407a:	4630      	mov	r0, r6
   8407c:	f000 fb3c 	bl	846f8 <__malloc_lock>
   84080:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84084:	d226      	bcs.n	840d4 <_malloc_r+0x74>
   84086:	4fc1      	ldr	r7, [pc, #772]	; (8438c <_malloc_r+0x32c>)
   84088:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   8408c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   84090:	68dc      	ldr	r4, [r3, #12]
   84092:	429c      	cmp	r4, r3
   84094:	f000 81d2 	beq.w	8443c <_malloc_r+0x3dc>
   84098:	6863      	ldr	r3, [r4, #4]
   8409a:	68e2      	ldr	r2, [r4, #12]
   8409c:	f023 0303 	bic.w	r3, r3, #3
   840a0:	4423      	add	r3, r4
   840a2:	6858      	ldr	r0, [r3, #4]
   840a4:	68a1      	ldr	r1, [r4, #8]
   840a6:	f040 0501 	orr.w	r5, r0, #1
   840aa:	60ca      	str	r2, [r1, #12]
   840ac:	4630      	mov	r0, r6
   840ae:	6091      	str	r1, [r2, #8]
   840b0:	605d      	str	r5, [r3, #4]
   840b2:	f000 fb23 	bl	846fc <__malloc_unlock>
   840b6:	3408      	adds	r4, #8
   840b8:	4620      	mov	r0, r4
   840ba:	b003      	add	sp, #12
   840bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   840c0:	2510      	movs	r5, #16
   840c2:	42a9      	cmp	r1, r5
   840c4:	d9d9      	bls.n	8407a <_malloc_r+0x1a>
   840c6:	2400      	movs	r4, #0
   840c8:	230c      	movs	r3, #12
   840ca:	4620      	mov	r0, r4
   840cc:	6033      	str	r3, [r6, #0]
   840ce:	b003      	add	sp, #12
   840d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   840d4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   840d8:	f000 8089 	beq.w	841ee <_malloc_r+0x18e>
   840dc:	f1bc 0f04 	cmp.w	ip, #4
   840e0:	f200 8160 	bhi.w	843a4 <_malloc_r+0x344>
   840e4:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   840e8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   840ec:	ea4f 014c 	mov.w	r1, ip, lsl #1
   840f0:	4fa6      	ldr	r7, [pc, #664]	; (8438c <_malloc_r+0x32c>)
   840f2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   840f6:	68cc      	ldr	r4, [r1, #12]
   840f8:	42a1      	cmp	r1, r4
   840fa:	d105      	bne.n	84108 <_malloc_r+0xa8>
   840fc:	e00c      	b.n	84118 <_malloc_r+0xb8>
   840fe:	2b00      	cmp	r3, #0
   84100:	da79      	bge.n	841f6 <_malloc_r+0x196>
   84102:	68e4      	ldr	r4, [r4, #12]
   84104:	42a1      	cmp	r1, r4
   84106:	d007      	beq.n	84118 <_malloc_r+0xb8>
   84108:	6862      	ldr	r2, [r4, #4]
   8410a:	f022 0203 	bic.w	r2, r2, #3
   8410e:	1b53      	subs	r3, r2, r5
   84110:	2b0f      	cmp	r3, #15
   84112:	ddf4      	ble.n	840fe <_malloc_r+0x9e>
   84114:	f10c 3cff 	add.w	ip, ip, #4294967295
   84118:	f10c 0c01 	add.w	ip, ip, #1
   8411c:	4b9b      	ldr	r3, [pc, #620]	; (8438c <_malloc_r+0x32c>)
   8411e:	693c      	ldr	r4, [r7, #16]
   84120:	f103 0e08 	add.w	lr, r3, #8
   84124:	4574      	cmp	r4, lr
   84126:	f000 817e 	beq.w	84426 <_malloc_r+0x3c6>
   8412a:	6861      	ldr	r1, [r4, #4]
   8412c:	f021 0103 	bic.w	r1, r1, #3
   84130:	1b4a      	subs	r2, r1, r5
   84132:	2a0f      	cmp	r2, #15
   84134:	f300 8164 	bgt.w	84400 <_malloc_r+0x3a0>
   84138:	2a00      	cmp	r2, #0
   8413a:	f8c3 e014 	str.w	lr, [r3, #20]
   8413e:	f8c3 e010 	str.w	lr, [r3, #16]
   84142:	da69      	bge.n	84218 <_malloc_r+0x1b8>
   84144:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   84148:	f080 813a 	bcs.w	843c0 <_malloc_r+0x360>
   8414c:	08c9      	lsrs	r1, r1, #3
   8414e:	108a      	asrs	r2, r1, #2
   84150:	f04f 0801 	mov.w	r8, #1
   84154:	fa08 f802 	lsl.w	r8, r8, r2
   84158:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   8415c:	685a      	ldr	r2, [r3, #4]
   8415e:	6888      	ldr	r0, [r1, #8]
   84160:	ea48 0202 	orr.w	r2, r8, r2
   84164:	60a0      	str	r0, [r4, #8]
   84166:	60e1      	str	r1, [r4, #12]
   84168:	605a      	str	r2, [r3, #4]
   8416a:	608c      	str	r4, [r1, #8]
   8416c:	60c4      	str	r4, [r0, #12]
   8416e:	ea4f 03ac 	mov.w	r3, ip, asr #2
   84172:	2001      	movs	r0, #1
   84174:	4098      	lsls	r0, r3
   84176:	4290      	cmp	r0, r2
   84178:	d85b      	bhi.n	84232 <_malloc_r+0x1d2>
   8417a:	4202      	tst	r2, r0
   8417c:	d106      	bne.n	8418c <_malloc_r+0x12c>
   8417e:	f02c 0c03 	bic.w	ip, ip, #3
   84182:	0040      	lsls	r0, r0, #1
   84184:	4202      	tst	r2, r0
   84186:	f10c 0c04 	add.w	ip, ip, #4
   8418a:	d0fa      	beq.n	84182 <_malloc_r+0x122>
   8418c:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   84190:	4644      	mov	r4, r8
   84192:	46e1      	mov	r9, ip
   84194:	68e3      	ldr	r3, [r4, #12]
   84196:	429c      	cmp	r4, r3
   84198:	d107      	bne.n	841aa <_malloc_r+0x14a>
   8419a:	e146      	b.n	8442a <_malloc_r+0x3ca>
   8419c:	2a00      	cmp	r2, #0
   8419e:	f280 8157 	bge.w	84450 <_malloc_r+0x3f0>
   841a2:	68db      	ldr	r3, [r3, #12]
   841a4:	429c      	cmp	r4, r3
   841a6:	f000 8140 	beq.w	8442a <_malloc_r+0x3ca>
   841aa:	6859      	ldr	r1, [r3, #4]
   841ac:	f021 0103 	bic.w	r1, r1, #3
   841b0:	1b4a      	subs	r2, r1, r5
   841b2:	2a0f      	cmp	r2, #15
   841b4:	ddf2      	ble.n	8419c <_malloc_r+0x13c>
   841b6:	461c      	mov	r4, r3
   841b8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   841bc:	68d9      	ldr	r1, [r3, #12]
   841be:	f045 0901 	orr.w	r9, r5, #1
   841c2:	f042 0801 	orr.w	r8, r2, #1
   841c6:	441d      	add	r5, r3
   841c8:	f8c3 9004 	str.w	r9, [r3, #4]
   841cc:	4630      	mov	r0, r6
   841ce:	f8cc 100c 	str.w	r1, [ip, #12]
   841d2:	f8c1 c008 	str.w	ip, [r1, #8]
   841d6:	617d      	str	r5, [r7, #20]
   841d8:	613d      	str	r5, [r7, #16]
   841da:	f8c5 e00c 	str.w	lr, [r5, #12]
   841de:	f8c5 e008 	str.w	lr, [r5, #8]
   841e2:	f8c5 8004 	str.w	r8, [r5, #4]
   841e6:	50aa      	str	r2, [r5, r2]
   841e8:	f000 fa88 	bl	846fc <__malloc_unlock>
   841ec:	e764      	b.n	840b8 <_malloc_r+0x58>
   841ee:	217e      	movs	r1, #126	; 0x7e
   841f0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   841f4:	e77c      	b.n	840f0 <_malloc_r+0x90>
   841f6:	4422      	add	r2, r4
   841f8:	6850      	ldr	r0, [r2, #4]
   841fa:	68e3      	ldr	r3, [r4, #12]
   841fc:	68a1      	ldr	r1, [r4, #8]
   841fe:	f040 0501 	orr.w	r5, r0, #1
   84202:	60cb      	str	r3, [r1, #12]
   84204:	4630      	mov	r0, r6
   84206:	6099      	str	r1, [r3, #8]
   84208:	6055      	str	r5, [r2, #4]
   8420a:	f000 fa77 	bl	846fc <__malloc_unlock>
   8420e:	3408      	adds	r4, #8
   84210:	4620      	mov	r0, r4
   84212:	b003      	add	sp, #12
   84214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84218:	4421      	add	r1, r4
   8421a:	684b      	ldr	r3, [r1, #4]
   8421c:	4630      	mov	r0, r6
   8421e:	f043 0301 	orr.w	r3, r3, #1
   84222:	604b      	str	r3, [r1, #4]
   84224:	f000 fa6a 	bl	846fc <__malloc_unlock>
   84228:	3408      	adds	r4, #8
   8422a:	4620      	mov	r0, r4
   8422c:	b003      	add	sp, #12
   8422e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84232:	68bc      	ldr	r4, [r7, #8]
   84234:	6863      	ldr	r3, [r4, #4]
   84236:	f023 0903 	bic.w	r9, r3, #3
   8423a:	45a9      	cmp	r9, r5
   8423c:	d304      	bcc.n	84248 <_malloc_r+0x1e8>
   8423e:	ebc5 0309 	rsb	r3, r5, r9
   84242:	2b0f      	cmp	r3, #15
   84244:	f300 8091 	bgt.w	8436a <_malloc_r+0x30a>
   84248:	4b51      	ldr	r3, [pc, #324]	; (84390 <_malloc_r+0x330>)
   8424a:	4a52      	ldr	r2, [pc, #328]	; (84394 <_malloc_r+0x334>)
   8424c:	6819      	ldr	r1, [r3, #0]
   8424e:	6813      	ldr	r3, [r2, #0]
   84250:	eb05 0a01 	add.w	sl, r5, r1
   84254:	3301      	adds	r3, #1
   84256:	eb04 0b09 	add.w	fp, r4, r9
   8425a:	f000 8161 	beq.w	84520 <_malloc_r+0x4c0>
   8425e:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   84262:	f10a 0a0f 	add.w	sl, sl, #15
   84266:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8426a:	f02a 0a0f 	bic.w	sl, sl, #15
   8426e:	4630      	mov	r0, r6
   84270:	4651      	mov	r1, sl
   84272:	9201      	str	r2, [sp, #4]
   84274:	f000 fc24 	bl	84ac0 <_sbrk_r>
   84278:	f1b0 3fff 	cmp.w	r0, #4294967295
   8427c:	4680      	mov	r8, r0
   8427e:	9a01      	ldr	r2, [sp, #4]
   84280:	f000 8101 	beq.w	84486 <_malloc_r+0x426>
   84284:	4583      	cmp	fp, r0
   84286:	f200 80fb 	bhi.w	84480 <_malloc_r+0x420>
   8428a:	f8df c114 	ldr.w	ip, [pc, #276]	; 843a0 <_malloc_r+0x340>
   8428e:	45c3      	cmp	fp, r8
   84290:	f8dc 3000 	ldr.w	r3, [ip]
   84294:	4453      	add	r3, sl
   84296:	f8cc 3000 	str.w	r3, [ip]
   8429a:	f000 814a 	beq.w	84532 <_malloc_r+0x4d2>
   8429e:	6812      	ldr	r2, [r2, #0]
   842a0:	493c      	ldr	r1, [pc, #240]	; (84394 <_malloc_r+0x334>)
   842a2:	3201      	adds	r2, #1
   842a4:	bf1b      	ittet	ne
   842a6:	ebcb 0b08 	rsbne	fp, fp, r8
   842aa:	445b      	addne	r3, fp
   842ac:	f8c1 8000 	streq.w	r8, [r1]
   842b0:	f8cc 3000 	strne.w	r3, [ip]
   842b4:	f018 0307 	ands.w	r3, r8, #7
   842b8:	f000 8114 	beq.w	844e4 <_malloc_r+0x484>
   842bc:	f1c3 0208 	rsb	r2, r3, #8
   842c0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   842c4:	4490      	add	r8, r2
   842c6:	3308      	adds	r3, #8
   842c8:	44c2      	add	sl, r8
   842ca:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   842ce:	ebca 0a03 	rsb	sl, sl, r3
   842d2:	4651      	mov	r1, sl
   842d4:	4630      	mov	r0, r6
   842d6:	f8cd c004 	str.w	ip, [sp, #4]
   842da:	f000 fbf1 	bl	84ac0 <_sbrk_r>
   842de:	1c43      	adds	r3, r0, #1
   842e0:	f8dd c004 	ldr.w	ip, [sp, #4]
   842e4:	f000 8135 	beq.w	84552 <_malloc_r+0x4f2>
   842e8:	ebc8 0200 	rsb	r2, r8, r0
   842ec:	4452      	add	r2, sl
   842ee:	f042 0201 	orr.w	r2, r2, #1
   842f2:	f8dc 3000 	ldr.w	r3, [ip]
   842f6:	42bc      	cmp	r4, r7
   842f8:	4453      	add	r3, sl
   842fa:	f8c7 8008 	str.w	r8, [r7, #8]
   842fe:	f8cc 3000 	str.w	r3, [ip]
   84302:	f8c8 2004 	str.w	r2, [r8, #4]
   84306:	f8df a098 	ldr.w	sl, [pc, #152]	; 843a0 <_malloc_r+0x340>
   8430a:	d015      	beq.n	84338 <_malloc_r+0x2d8>
   8430c:	f1b9 0f0f 	cmp.w	r9, #15
   84310:	f240 80eb 	bls.w	844ea <_malloc_r+0x48a>
   84314:	6861      	ldr	r1, [r4, #4]
   84316:	f1a9 020c 	sub.w	r2, r9, #12
   8431a:	f022 0207 	bic.w	r2, r2, #7
   8431e:	f001 0101 	and.w	r1, r1, #1
   84322:	ea42 0e01 	orr.w	lr, r2, r1
   84326:	2005      	movs	r0, #5
   84328:	18a1      	adds	r1, r4, r2
   8432a:	2a0f      	cmp	r2, #15
   8432c:	f8c4 e004 	str.w	lr, [r4, #4]
   84330:	6048      	str	r0, [r1, #4]
   84332:	6088      	str	r0, [r1, #8]
   84334:	f200 8111 	bhi.w	8455a <_malloc_r+0x4fa>
   84338:	4a17      	ldr	r2, [pc, #92]	; (84398 <_malloc_r+0x338>)
   8433a:	68bc      	ldr	r4, [r7, #8]
   8433c:	6811      	ldr	r1, [r2, #0]
   8433e:	428b      	cmp	r3, r1
   84340:	bf88      	it	hi
   84342:	6013      	strhi	r3, [r2, #0]
   84344:	4a15      	ldr	r2, [pc, #84]	; (8439c <_malloc_r+0x33c>)
   84346:	6811      	ldr	r1, [r2, #0]
   84348:	428b      	cmp	r3, r1
   8434a:	bf88      	it	hi
   8434c:	6013      	strhi	r3, [r2, #0]
   8434e:	6862      	ldr	r2, [r4, #4]
   84350:	f022 0203 	bic.w	r2, r2, #3
   84354:	4295      	cmp	r5, r2
   84356:	ebc5 0302 	rsb	r3, r5, r2
   8435a:	d801      	bhi.n	84360 <_malloc_r+0x300>
   8435c:	2b0f      	cmp	r3, #15
   8435e:	dc04      	bgt.n	8436a <_malloc_r+0x30a>
   84360:	4630      	mov	r0, r6
   84362:	f000 f9cb 	bl	846fc <__malloc_unlock>
   84366:	2400      	movs	r4, #0
   84368:	e6a6      	b.n	840b8 <_malloc_r+0x58>
   8436a:	f045 0201 	orr.w	r2, r5, #1
   8436e:	f043 0301 	orr.w	r3, r3, #1
   84372:	4425      	add	r5, r4
   84374:	6062      	str	r2, [r4, #4]
   84376:	4630      	mov	r0, r6
   84378:	60bd      	str	r5, [r7, #8]
   8437a:	606b      	str	r3, [r5, #4]
   8437c:	f000 f9be 	bl	846fc <__malloc_unlock>
   84380:	3408      	adds	r4, #8
   84382:	4620      	mov	r0, r4
   84384:	b003      	add	sp, #12
   84386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8438a:	bf00      	nop
   8438c:	20070590 	.word	0x20070590
   84390:	20070b40 	.word	0x20070b40
   84394:	2007099c 	.word	0x2007099c
   84398:	20070b3c 	.word	0x20070b3c
   8439c:	20070b38 	.word	0x20070b38
   843a0:	20070b44 	.word	0x20070b44
   843a4:	f1bc 0f14 	cmp.w	ip, #20
   843a8:	d961      	bls.n	8446e <_malloc_r+0x40e>
   843aa:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   843ae:	f200 808f 	bhi.w	844d0 <_malloc_r+0x470>
   843b2:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   843b6:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   843ba:	ea4f 014c 	mov.w	r1, ip, lsl #1
   843be:	e697      	b.n	840f0 <_malloc_r+0x90>
   843c0:	0a4b      	lsrs	r3, r1, #9
   843c2:	2b04      	cmp	r3, #4
   843c4:	d958      	bls.n	84478 <_malloc_r+0x418>
   843c6:	2b14      	cmp	r3, #20
   843c8:	f200 80ad 	bhi.w	84526 <_malloc_r+0x4c6>
   843cc:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   843d0:	0050      	lsls	r0, r2, #1
   843d2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   843d6:	6883      	ldr	r3, [r0, #8]
   843d8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 84594 <_malloc_r+0x534>
   843dc:	4283      	cmp	r3, r0
   843de:	f000 808a 	beq.w	844f6 <_malloc_r+0x496>
   843e2:	685a      	ldr	r2, [r3, #4]
   843e4:	f022 0203 	bic.w	r2, r2, #3
   843e8:	4291      	cmp	r1, r2
   843ea:	d202      	bcs.n	843f2 <_malloc_r+0x392>
   843ec:	689b      	ldr	r3, [r3, #8]
   843ee:	4298      	cmp	r0, r3
   843f0:	d1f7      	bne.n	843e2 <_malloc_r+0x382>
   843f2:	68d9      	ldr	r1, [r3, #12]
   843f4:	687a      	ldr	r2, [r7, #4]
   843f6:	60e1      	str	r1, [r4, #12]
   843f8:	60a3      	str	r3, [r4, #8]
   843fa:	608c      	str	r4, [r1, #8]
   843fc:	60dc      	str	r4, [r3, #12]
   843fe:	e6b6      	b.n	8416e <_malloc_r+0x10e>
   84400:	f045 0701 	orr.w	r7, r5, #1
   84404:	f042 0101 	orr.w	r1, r2, #1
   84408:	4425      	add	r5, r4
   8440a:	6067      	str	r7, [r4, #4]
   8440c:	4630      	mov	r0, r6
   8440e:	615d      	str	r5, [r3, #20]
   84410:	611d      	str	r5, [r3, #16]
   84412:	f8c5 e00c 	str.w	lr, [r5, #12]
   84416:	f8c5 e008 	str.w	lr, [r5, #8]
   8441a:	6069      	str	r1, [r5, #4]
   8441c:	50aa      	str	r2, [r5, r2]
   8441e:	3408      	adds	r4, #8
   84420:	f000 f96c 	bl	846fc <__malloc_unlock>
   84424:	e648      	b.n	840b8 <_malloc_r+0x58>
   84426:	685a      	ldr	r2, [r3, #4]
   84428:	e6a1      	b.n	8416e <_malloc_r+0x10e>
   8442a:	f109 0901 	add.w	r9, r9, #1
   8442e:	f019 0f03 	tst.w	r9, #3
   84432:	f104 0408 	add.w	r4, r4, #8
   84436:	f47f aead 	bne.w	84194 <_malloc_r+0x134>
   8443a:	e02d      	b.n	84498 <_malloc_r+0x438>
   8443c:	f104 0308 	add.w	r3, r4, #8
   84440:	6964      	ldr	r4, [r4, #20]
   84442:	42a3      	cmp	r3, r4
   84444:	bf08      	it	eq
   84446:	f10c 0c02 	addeq.w	ip, ip, #2
   8444a:	f43f ae67 	beq.w	8411c <_malloc_r+0xbc>
   8444e:	e623      	b.n	84098 <_malloc_r+0x38>
   84450:	4419      	add	r1, r3
   84452:	6848      	ldr	r0, [r1, #4]
   84454:	461c      	mov	r4, r3
   84456:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8445a:	68db      	ldr	r3, [r3, #12]
   8445c:	f040 0501 	orr.w	r5, r0, #1
   84460:	604d      	str	r5, [r1, #4]
   84462:	4630      	mov	r0, r6
   84464:	60d3      	str	r3, [r2, #12]
   84466:	609a      	str	r2, [r3, #8]
   84468:	f000 f948 	bl	846fc <__malloc_unlock>
   8446c:	e624      	b.n	840b8 <_malloc_r+0x58>
   8446e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   84472:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84476:	e63b      	b.n	840f0 <_malloc_r+0x90>
   84478:	098a      	lsrs	r2, r1, #6
   8447a:	3238      	adds	r2, #56	; 0x38
   8447c:	0050      	lsls	r0, r2, #1
   8447e:	e7a8      	b.n	843d2 <_malloc_r+0x372>
   84480:	42bc      	cmp	r4, r7
   84482:	f43f af02 	beq.w	8428a <_malloc_r+0x22a>
   84486:	68bc      	ldr	r4, [r7, #8]
   84488:	6862      	ldr	r2, [r4, #4]
   8448a:	f022 0203 	bic.w	r2, r2, #3
   8448e:	e761      	b.n	84354 <_malloc_r+0x2f4>
   84490:	f8d8 8000 	ldr.w	r8, [r8]
   84494:	4598      	cmp	r8, r3
   84496:	d17a      	bne.n	8458e <_malloc_r+0x52e>
   84498:	f01c 0f03 	tst.w	ip, #3
   8449c:	f1a8 0308 	sub.w	r3, r8, #8
   844a0:	f10c 3cff 	add.w	ip, ip, #4294967295
   844a4:	d1f4      	bne.n	84490 <_malloc_r+0x430>
   844a6:	687b      	ldr	r3, [r7, #4]
   844a8:	ea23 0300 	bic.w	r3, r3, r0
   844ac:	607b      	str	r3, [r7, #4]
   844ae:	0040      	lsls	r0, r0, #1
   844b0:	4298      	cmp	r0, r3
   844b2:	f63f aebe 	bhi.w	84232 <_malloc_r+0x1d2>
   844b6:	2800      	cmp	r0, #0
   844b8:	f43f aebb 	beq.w	84232 <_malloc_r+0x1d2>
   844bc:	4203      	tst	r3, r0
   844be:	46cc      	mov	ip, r9
   844c0:	f47f ae64 	bne.w	8418c <_malloc_r+0x12c>
   844c4:	0040      	lsls	r0, r0, #1
   844c6:	4203      	tst	r3, r0
   844c8:	f10c 0c04 	add.w	ip, ip, #4
   844cc:	d0fa      	beq.n	844c4 <_malloc_r+0x464>
   844ce:	e65d      	b.n	8418c <_malloc_r+0x12c>
   844d0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   844d4:	d819      	bhi.n	8450a <_malloc_r+0x4aa>
   844d6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   844da:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   844de:	ea4f 014c 	mov.w	r1, ip, lsl #1
   844e2:	e605      	b.n	840f0 <_malloc_r+0x90>
   844e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   844e8:	e6ee      	b.n	842c8 <_malloc_r+0x268>
   844ea:	2301      	movs	r3, #1
   844ec:	f8c8 3004 	str.w	r3, [r8, #4]
   844f0:	4644      	mov	r4, r8
   844f2:	2200      	movs	r2, #0
   844f4:	e72e      	b.n	84354 <_malloc_r+0x2f4>
   844f6:	1092      	asrs	r2, r2, #2
   844f8:	2001      	movs	r0, #1
   844fa:	4090      	lsls	r0, r2
   844fc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   84500:	4619      	mov	r1, r3
   84502:	4302      	orrs	r2, r0
   84504:	f8c8 2004 	str.w	r2, [r8, #4]
   84508:	e775      	b.n	843f6 <_malloc_r+0x396>
   8450a:	f240 5354 	movw	r3, #1364	; 0x554
   8450e:	459c      	cmp	ip, r3
   84510:	d81b      	bhi.n	8454a <_malloc_r+0x4ea>
   84512:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   84516:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8451a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8451e:	e5e7      	b.n	840f0 <_malloc_r+0x90>
   84520:	f10a 0a10 	add.w	sl, sl, #16
   84524:	e6a3      	b.n	8426e <_malloc_r+0x20e>
   84526:	2b54      	cmp	r3, #84	; 0x54
   84528:	d81f      	bhi.n	8456a <_malloc_r+0x50a>
   8452a:	0b0a      	lsrs	r2, r1, #12
   8452c:	326e      	adds	r2, #110	; 0x6e
   8452e:	0050      	lsls	r0, r2, #1
   84530:	e74f      	b.n	843d2 <_malloc_r+0x372>
   84532:	f3cb 010b 	ubfx	r1, fp, #0, #12
   84536:	2900      	cmp	r1, #0
   84538:	f47f aeb1 	bne.w	8429e <_malloc_r+0x23e>
   8453c:	eb0a 0109 	add.w	r1, sl, r9
   84540:	68ba      	ldr	r2, [r7, #8]
   84542:	f041 0101 	orr.w	r1, r1, #1
   84546:	6051      	str	r1, [r2, #4]
   84548:	e6f6      	b.n	84338 <_malloc_r+0x2d8>
   8454a:	21fc      	movs	r1, #252	; 0xfc
   8454c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   84550:	e5ce      	b.n	840f0 <_malloc_r+0x90>
   84552:	2201      	movs	r2, #1
   84554:	f04f 0a00 	mov.w	sl, #0
   84558:	e6cb      	b.n	842f2 <_malloc_r+0x292>
   8455a:	f104 0108 	add.w	r1, r4, #8
   8455e:	4630      	mov	r0, r6
   84560:	f7ff fa80 	bl	83a64 <_free_r>
   84564:	f8da 3000 	ldr.w	r3, [sl]
   84568:	e6e6      	b.n	84338 <_malloc_r+0x2d8>
   8456a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8456e:	d803      	bhi.n	84578 <_malloc_r+0x518>
   84570:	0bca      	lsrs	r2, r1, #15
   84572:	3277      	adds	r2, #119	; 0x77
   84574:	0050      	lsls	r0, r2, #1
   84576:	e72c      	b.n	843d2 <_malloc_r+0x372>
   84578:	f240 5254 	movw	r2, #1364	; 0x554
   8457c:	4293      	cmp	r3, r2
   8457e:	d803      	bhi.n	84588 <_malloc_r+0x528>
   84580:	0c8a      	lsrs	r2, r1, #18
   84582:	327c      	adds	r2, #124	; 0x7c
   84584:	0050      	lsls	r0, r2, #1
   84586:	e724      	b.n	843d2 <_malloc_r+0x372>
   84588:	20fc      	movs	r0, #252	; 0xfc
   8458a:	227e      	movs	r2, #126	; 0x7e
   8458c:	e721      	b.n	843d2 <_malloc_r+0x372>
   8458e:	687b      	ldr	r3, [r7, #4]
   84590:	e78d      	b.n	844ae <_malloc_r+0x44e>
   84592:	bf00      	nop
   84594:	20070590 	.word	0x20070590

00084598 <memchr>:
   84598:	0783      	lsls	r3, r0, #30
   8459a:	b470      	push	{r4, r5, r6}
   8459c:	b2c9      	uxtb	r1, r1
   8459e:	d040      	beq.n	84622 <memchr+0x8a>
   845a0:	1e54      	subs	r4, r2, #1
   845a2:	b32a      	cbz	r2, 845f0 <memchr+0x58>
   845a4:	7803      	ldrb	r3, [r0, #0]
   845a6:	428b      	cmp	r3, r1
   845a8:	d023      	beq.n	845f2 <memchr+0x5a>
   845aa:	1c43      	adds	r3, r0, #1
   845ac:	e004      	b.n	845b8 <memchr+0x20>
   845ae:	b1fc      	cbz	r4, 845f0 <memchr+0x58>
   845b0:	7805      	ldrb	r5, [r0, #0]
   845b2:	4614      	mov	r4, r2
   845b4:	428d      	cmp	r5, r1
   845b6:	d01c      	beq.n	845f2 <memchr+0x5a>
   845b8:	f013 0f03 	tst.w	r3, #3
   845bc:	4618      	mov	r0, r3
   845be:	f104 32ff 	add.w	r2, r4, #4294967295
   845c2:	f103 0301 	add.w	r3, r3, #1
   845c6:	d1f2      	bne.n	845ae <memchr+0x16>
   845c8:	2c03      	cmp	r4, #3
   845ca:	d814      	bhi.n	845f6 <memchr+0x5e>
   845cc:	1e65      	subs	r5, r4, #1
   845ce:	b354      	cbz	r4, 84626 <memchr+0x8e>
   845d0:	7803      	ldrb	r3, [r0, #0]
   845d2:	428b      	cmp	r3, r1
   845d4:	d00d      	beq.n	845f2 <memchr+0x5a>
   845d6:	1c42      	adds	r2, r0, #1
   845d8:	2300      	movs	r3, #0
   845da:	e002      	b.n	845e2 <memchr+0x4a>
   845dc:	7804      	ldrb	r4, [r0, #0]
   845de:	428c      	cmp	r4, r1
   845e0:	d007      	beq.n	845f2 <memchr+0x5a>
   845e2:	42ab      	cmp	r3, r5
   845e4:	4610      	mov	r0, r2
   845e6:	f103 0301 	add.w	r3, r3, #1
   845ea:	f102 0201 	add.w	r2, r2, #1
   845ee:	d1f5      	bne.n	845dc <memchr+0x44>
   845f0:	2000      	movs	r0, #0
   845f2:	bc70      	pop	{r4, r5, r6}
   845f4:	4770      	bx	lr
   845f6:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   845fa:	4603      	mov	r3, r0
   845fc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   84600:	681a      	ldr	r2, [r3, #0]
   84602:	4618      	mov	r0, r3
   84604:	4072      	eors	r2, r6
   84606:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   8460a:	ea25 0202 	bic.w	r2, r5, r2
   8460e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   84612:	f103 0304 	add.w	r3, r3, #4
   84616:	d1d9      	bne.n	845cc <memchr+0x34>
   84618:	3c04      	subs	r4, #4
   8461a:	2c03      	cmp	r4, #3
   8461c:	4618      	mov	r0, r3
   8461e:	d8ef      	bhi.n	84600 <memchr+0x68>
   84620:	e7d4      	b.n	845cc <memchr+0x34>
   84622:	4614      	mov	r4, r2
   84624:	e7d0      	b.n	845c8 <memchr+0x30>
   84626:	4620      	mov	r0, r4
   84628:	e7e3      	b.n	845f2 <memchr+0x5a>
   8462a:	bf00      	nop

0008462c <memmove>:
   8462c:	4288      	cmp	r0, r1
   8462e:	b4f0      	push	{r4, r5, r6, r7}
   84630:	d910      	bls.n	84654 <memmove+0x28>
   84632:	188c      	adds	r4, r1, r2
   84634:	42a0      	cmp	r0, r4
   84636:	d20d      	bcs.n	84654 <memmove+0x28>
   84638:	1885      	adds	r5, r0, r2
   8463a:	1e53      	subs	r3, r2, #1
   8463c:	b142      	cbz	r2, 84650 <memmove+0x24>
   8463e:	4621      	mov	r1, r4
   84640:	462a      	mov	r2, r5
   84642:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   84646:	3b01      	subs	r3, #1
   84648:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8464c:	1c5c      	adds	r4, r3, #1
   8464e:	d1f8      	bne.n	84642 <memmove+0x16>
   84650:	bcf0      	pop	{r4, r5, r6, r7}
   84652:	4770      	bx	lr
   84654:	2a0f      	cmp	r2, #15
   84656:	d944      	bls.n	846e2 <memmove+0xb6>
   84658:	ea40 0301 	orr.w	r3, r0, r1
   8465c:	079b      	lsls	r3, r3, #30
   8465e:	d144      	bne.n	846ea <memmove+0xbe>
   84660:	f1a2 0710 	sub.w	r7, r2, #16
   84664:	093f      	lsrs	r7, r7, #4
   84666:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8466a:	3610      	adds	r6, #16
   8466c:	460c      	mov	r4, r1
   8466e:	4603      	mov	r3, r0
   84670:	6825      	ldr	r5, [r4, #0]
   84672:	3310      	adds	r3, #16
   84674:	f843 5c10 	str.w	r5, [r3, #-16]
   84678:	6865      	ldr	r5, [r4, #4]
   8467a:	3410      	adds	r4, #16
   8467c:	f843 5c0c 	str.w	r5, [r3, #-12]
   84680:	f854 5c08 	ldr.w	r5, [r4, #-8]
   84684:	f843 5c08 	str.w	r5, [r3, #-8]
   84688:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8468c:	f843 5c04 	str.w	r5, [r3, #-4]
   84690:	42b3      	cmp	r3, r6
   84692:	d1ed      	bne.n	84670 <memmove+0x44>
   84694:	1c7b      	adds	r3, r7, #1
   84696:	f002 0c0f 	and.w	ip, r2, #15
   8469a:	011b      	lsls	r3, r3, #4
   8469c:	f1bc 0f03 	cmp.w	ip, #3
   846a0:	4419      	add	r1, r3
   846a2:	4403      	add	r3, r0
   846a4:	d923      	bls.n	846ee <memmove+0xc2>
   846a6:	460e      	mov	r6, r1
   846a8:	461d      	mov	r5, r3
   846aa:	4664      	mov	r4, ip
   846ac:	f856 7b04 	ldr.w	r7, [r6], #4
   846b0:	3c04      	subs	r4, #4
   846b2:	2c03      	cmp	r4, #3
   846b4:	f845 7b04 	str.w	r7, [r5], #4
   846b8:	d8f8      	bhi.n	846ac <memmove+0x80>
   846ba:	f1ac 0404 	sub.w	r4, ip, #4
   846be:	f024 0403 	bic.w	r4, r4, #3
   846c2:	3404      	adds	r4, #4
   846c4:	f002 0203 	and.w	r2, r2, #3
   846c8:	4423      	add	r3, r4
   846ca:	4421      	add	r1, r4
   846cc:	2a00      	cmp	r2, #0
   846ce:	d0bf      	beq.n	84650 <memmove+0x24>
   846d0:	441a      	add	r2, r3
   846d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   846d6:	f803 4b01 	strb.w	r4, [r3], #1
   846da:	4293      	cmp	r3, r2
   846dc:	d1f9      	bne.n	846d2 <memmove+0xa6>
   846de:	bcf0      	pop	{r4, r5, r6, r7}
   846e0:	4770      	bx	lr
   846e2:	4603      	mov	r3, r0
   846e4:	2a00      	cmp	r2, #0
   846e6:	d1f3      	bne.n	846d0 <memmove+0xa4>
   846e8:	e7b2      	b.n	84650 <memmove+0x24>
   846ea:	4603      	mov	r3, r0
   846ec:	e7f0      	b.n	846d0 <memmove+0xa4>
   846ee:	4662      	mov	r2, ip
   846f0:	2a00      	cmp	r2, #0
   846f2:	d1ed      	bne.n	846d0 <memmove+0xa4>
   846f4:	e7ac      	b.n	84650 <memmove+0x24>
   846f6:	bf00      	nop

000846f8 <__malloc_lock>:
   846f8:	4770      	bx	lr
   846fa:	bf00      	nop

000846fc <__malloc_unlock>:
   846fc:	4770      	bx	lr
   846fe:	bf00      	nop

00084700 <_realloc_r>:
   84700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84704:	460c      	mov	r4, r1
   84706:	b083      	sub	sp, #12
   84708:	4690      	mov	r8, r2
   8470a:	4681      	mov	r9, r0
   8470c:	2900      	cmp	r1, #0
   8470e:	f000 80ba 	beq.w	84886 <_realloc_r+0x186>
   84712:	f7ff fff1 	bl	846f8 <__malloc_lock>
   84716:	f108 060b 	add.w	r6, r8, #11
   8471a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8471e:	2e16      	cmp	r6, #22
   84720:	f023 0503 	bic.w	r5, r3, #3
   84724:	f1a4 0708 	sub.w	r7, r4, #8
   84728:	d84b      	bhi.n	847c2 <_realloc_r+0xc2>
   8472a:	2110      	movs	r1, #16
   8472c:	460e      	mov	r6, r1
   8472e:	45b0      	cmp	r8, r6
   84730:	d84c      	bhi.n	847cc <_realloc_r+0xcc>
   84732:	428d      	cmp	r5, r1
   84734:	da51      	bge.n	847da <_realloc_r+0xda>
   84736:	f8df b384 	ldr.w	fp, [pc, #900]	; 84abc <_realloc_r+0x3bc>
   8473a:	1978      	adds	r0, r7, r5
   8473c:	f8db e008 	ldr.w	lr, [fp, #8]
   84740:	4586      	cmp	lr, r0
   84742:	f000 80a6 	beq.w	84892 <_realloc_r+0x192>
   84746:	6842      	ldr	r2, [r0, #4]
   84748:	f022 0c01 	bic.w	ip, r2, #1
   8474c:	4484      	add	ip, r0
   8474e:	f8dc c004 	ldr.w	ip, [ip, #4]
   84752:	f01c 0f01 	tst.w	ip, #1
   84756:	d054      	beq.n	84802 <_realloc_r+0x102>
   84758:	2200      	movs	r2, #0
   8475a:	4610      	mov	r0, r2
   8475c:	07db      	lsls	r3, r3, #31
   8475e:	d46f      	bmi.n	84840 <_realloc_r+0x140>
   84760:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84764:	ebc3 0a07 	rsb	sl, r3, r7
   84768:	f8da 3004 	ldr.w	r3, [sl, #4]
   8476c:	f023 0303 	bic.w	r3, r3, #3
   84770:	442b      	add	r3, r5
   84772:	2800      	cmp	r0, #0
   84774:	d062      	beq.n	8483c <_realloc_r+0x13c>
   84776:	4570      	cmp	r0, lr
   84778:	f000 80e9 	beq.w	8494e <_realloc_r+0x24e>
   8477c:	eb02 0e03 	add.w	lr, r2, r3
   84780:	458e      	cmp	lr, r1
   84782:	db5b      	blt.n	8483c <_realloc_r+0x13c>
   84784:	68c3      	ldr	r3, [r0, #12]
   84786:	6882      	ldr	r2, [r0, #8]
   84788:	46d0      	mov	r8, sl
   8478a:	60d3      	str	r3, [r2, #12]
   8478c:	609a      	str	r2, [r3, #8]
   8478e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   84792:	f8da 300c 	ldr.w	r3, [sl, #12]
   84796:	1f2a      	subs	r2, r5, #4
   84798:	2a24      	cmp	r2, #36	; 0x24
   8479a:	60cb      	str	r3, [r1, #12]
   8479c:	6099      	str	r1, [r3, #8]
   8479e:	f200 8123 	bhi.w	849e8 <_realloc_r+0x2e8>
   847a2:	2a13      	cmp	r2, #19
   847a4:	f240 80b0 	bls.w	84908 <_realloc_r+0x208>
   847a8:	6823      	ldr	r3, [r4, #0]
   847aa:	2a1b      	cmp	r2, #27
   847ac:	f8ca 3008 	str.w	r3, [sl, #8]
   847b0:	6863      	ldr	r3, [r4, #4]
   847b2:	f8ca 300c 	str.w	r3, [sl, #12]
   847b6:	f200 812b 	bhi.w	84a10 <_realloc_r+0x310>
   847ba:	3408      	adds	r4, #8
   847bc:	f10a 0310 	add.w	r3, sl, #16
   847c0:	e0a3      	b.n	8490a <_realloc_r+0x20a>
   847c2:	f026 0607 	bic.w	r6, r6, #7
   847c6:	2e00      	cmp	r6, #0
   847c8:	4631      	mov	r1, r6
   847ca:	dab0      	bge.n	8472e <_realloc_r+0x2e>
   847cc:	230c      	movs	r3, #12
   847ce:	2000      	movs	r0, #0
   847d0:	f8c9 3000 	str.w	r3, [r9]
   847d4:	b003      	add	sp, #12
   847d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   847da:	46a0      	mov	r8, r4
   847dc:	1baa      	subs	r2, r5, r6
   847de:	2a0f      	cmp	r2, #15
   847e0:	f003 0301 	and.w	r3, r3, #1
   847e4:	d81a      	bhi.n	8481c <_realloc_r+0x11c>
   847e6:	432b      	orrs	r3, r5
   847e8:	607b      	str	r3, [r7, #4]
   847ea:	443d      	add	r5, r7
   847ec:	686b      	ldr	r3, [r5, #4]
   847ee:	f043 0301 	orr.w	r3, r3, #1
   847f2:	606b      	str	r3, [r5, #4]
   847f4:	4648      	mov	r0, r9
   847f6:	f7ff ff81 	bl	846fc <__malloc_unlock>
   847fa:	4640      	mov	r0, r8
   847fc:	b003      	add	sp, #12
   847fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84802:	f022 0203 	bic.w	r2, r2, #3
   84806:	eb02 0c05 	add.w	ip, r2, r5
   8480a:	458c      	cmp	ip, r1
   8480c:	dba6      	blt.n	8475c <_realloc_r+0x5c>
   8480e:	68c2      	ldr	r2, [r0, #12]
   84810:	6881      	ldr	r1, [r0, #8]
   84812:	46a0      	mov	r8, r4
   84814:	60ca      	str	r2, [r1, #12]
   84816:	4665      	mov	r5, ip
   84818:	6091      	str	r1, [r2, #8]
   8481a:	e7df      	b.n	847dc <_realloc_r+0xdc>
   8481c:	19b9      	adds	r1, r7, r6
   8481e:	4333      	orrs	r3, r6
   84820:	f042 0001 	orr.w	r0, r2, #1
   84824:	607b      	str	r3, [r7, #4]
   84826:	440a      	add	r2, r1
   84828:	6048      	str	r0, [r1, #4]
   8482a:	6853      	ldr	r3, [r2, #4]
   8482c:	3108      	adds	r1, #8
   8482e:	f043 0301 	orr.w	r3, r3, #1
   84832:	6053      	str	r3, [r2, #4]
   84834:	4648      	mov	r0, r9
   84836:	f7ff f915 	bl	83a64 <_free_r>
   8483a:	e7db      	b.n	847f4 <_realloc_r+0xf4>
   8483c:	428b      	cmp	r3, r1
   8483e:	da33      	bge.n	848a8 <_realloc_r+0x1a8>
   84840:	4641      	mov	r1, r8
   84842:	4648      	mov	r0, r9
   84844:	f7ff fc0c 	bl	84060 <_malloc_r>
   84848:	4680      	mov	r8, r0
   8484a:	2800      	cmp	r0, #0
   8484c:	d0d2      	beq.n	847f4 <_realloc_r+0xf4>
   8484e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84852:	f1a0 0108 	sub.w	r1, r0, #8
   84856:	f023 0201 	bic.w	r2, r3, #1
   8485a:	443a      	add	r2, r7
   8485c:	4291      	cmp	r1, r2
   8485e:	f000 80bc 	beq.w	849da <_realloc_r+0x2da>
   84862:	1f2a      	subs	r2, r5, #4
   84864:	2a24      	cmp	r2, #36	; 0x24
   84866:	d86e      	bhi.n	84946 <_realloc_r+0x246>
   84868:	2a13      	cmp	r2, #19
   8486a:	d842      	bhi.n	848f2 <_realloc_r+0x1f2>
   8486c:	4603      	mov	r3, r0
   8486e:	4622      	mov	r2, r4
   84870:	6811      	ldr	r1, [r2, #0]
   84872:	6019      	str	r1, [r3, #0]
   84874:	6851      	ldr	r1, [r2, #4]
   84876:	6059      	str	r1, [r3, #4]
   84878:	6892      	ldr	r2, [r2, #8]
   8487a:	609a      	str	r2, [r3, #8]
   8487c:	4621      	mov	r1, r4
   8487e:	4648      	mov	r0, r9
   84880:	f7ff f8f0 	bl	83a64 <_free_r>
   84884:	e7b6      	b.n	847f4 <_realloc_r+0xf4>
   84886:	4611      	mov	r1, r2
   84888:	b003      	add	sp, #12
   8488a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8488e:	f7ff bbe7 	b.w	84060 <_malloc_r>
   84892:	f8de 2004 	ldr.w	r2, [lr, #4]
   84896:	f106 0c10 	add.w	ip, r6, #16
   8489a:	f022 0203 	bic.w	r2, r2, #3
   8489e:	1950      	adds	r0, r2, r5
   848a0:	4560      	cmp	r0, ip
   848a2:	da3d      	bge.n	84920 <_realloc_r+0x220>
   848a4:	4670      	mov	r0, lr
   848a6:	e759      	b.n	8475c <_realloc_r+0x5c>
   848a8:	46d0      	mov	r8, sl
   848aa:	f858 0f08 	ldr.w	r0, [r8, #8]!
   848ae:	f8da 100c 	ldr.w	r1, [sl, #12]
   848b2:	1f2a      	subs	r2, r5, #4
   848b4:	2a24      	cmp	r2, #36	; 0x24
   848b6:	60c1      	str	r1, [r0, #12]
   848b8:	6088      	str	r0, [r1, #8]
   848ba:	f200 80a0 	bhi.w	849fe <_realloc_r+0x2fe>
   848be:	2a13      	cmp	r2, #19
   848c0:	f240 809b 	bls.w	849fa <_realloc_r+0x2fa>
   848c4:	6821      	ldr	r1, [r4, #0]
   848c6:	2a1b      	cmp	r2, #27
   848c8:	f8ca 1008 	str.w	r1, [sl, #8]
   848cc:	6861      	ldr	r1, [r4, #4]
   848ce:	f8ca 100c 	str.w	r1, [sl, #12]
   848d2:	f200 80b2 	bhi.w	84a3a <_realloc_r+0x33a>
   848d6:	3408      	adds	r4, #8
   848d8:	f10a 0210 	add.w	r2, sl, #16
   848dc:	6821      	ldr	r1, [r4, #0]
   848de:	461d      	mov	r5, r3
   848e0:	6011      	str	r1, [r2, #0]
   848e2:	6861      	ldr	r1, [r4, #4]
   848e4:	4657      	mov	r7, sl
   848e6:	6051      	str	r1, [r2, #4]
   848e8:	68a3      	ldr	r3, [r4, #8]
   848ea:	6093      	str	r3, [r2, #8]
   848ec:	f8da 3004 	ldr.w	r3, [sl, #4]
   848f0:	e774      	b.n	847dc <_realloc_r+0xdc>
   848f2:	6823      	ldr	r3, [r4, #0]
   848f4:	2a1b      	cmp	r2, #27
   848f6:	6003      	str	r3, [r0, #0]
   848f8:	6863      	ldr	r3, [r4, #4]
   848fa:	6043      	str	r3, [r0, #4]
   848fc:	d862      	bhi.n	849c4 <_realloc_r+0x2c4>
   848fe:	f100 0308 	add.w	r3, r0, #8
   84902:	f104 0208 	add.w	r2, r4, #8
   84906:	e7b3      	b.n	84870 <_realloc_r+0x170>
   84908:	4643      	mov	r3, r8
   8490a:	6822      	ldr	r2, [r4, #0]
   8490c:	4675      	mov	r5, lr
   8490e:	601a      	str	r2, [r3, #0]
   84910:	6862      	ldr	r2, [r4, #4]
   84912:	4657      	mov	r7, sl
   84914:	605a      	str	r2, [r3, #4]
   84916:	68a2      	ldr	r2, [r4, #8]
   84918:	609a      	str	r2, [r3, #8]
   8491a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8491e:	e75d      	b.n	847dc <_realloc_r+0xdc>
   84920:	1b83      	subs	r3, r0, r6
   84922:	4437      	add	r7, r6
   84924:	f043 0301 	orr.w	r3, r3, #1
   84928:	f8cb 7008 	str.w	r7, [fp, #8]
   8492c:	607b      	str	r3, [r7, #4]
   8492e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84932:	4648      	mov	r0, r9
   84934:	f003 0301 	and.w	r3, r3, #1
   84938:	431e      	orrs	r6, r3
   8493a:	f844 6c04 	str.w	r6, [r4, #-4]
   8493e:	f7ff fedd 	bl	846fc <__malloc_unlock>
   84942:	4620      	mov	r0, r4
   84944:	e75a      	b.n	847fc <_realloc_r+0xfc>
   84946:	4621      	mov	r1, r4
   84948:	f7ff fe70 	bl	8462c <memmove>
   8494c:	e796      	b.n	8487c <_realloc_r+0x17c>
   8494e:	eb02 0c03 	add.w	ip, r2, r3
   84952:	f106 0210 	add.w	r2, r6, #16
   84956:	4594      	cmp	ip, r2
   84958:	f6ff af70 	blt.w	8483c <_realloc_r+0x13c>
   8495c:	4657      	mov	r7, sl
   8495e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84962:	f8da 300c 	ldr.w	r3, [sl, #12]
   84966:	1f2a      	subs	r2, r5, #4
   84968:	2a24      	cmp	r2, #36	; 0x24
   8496a:	60cb      	str	r3, [r1, #12]
   8496c:	6099      	str	r1, [r3, #8]
   8496e:	f200 8086 	bhi.w	84a7e <_realloc_r+0x37e>
   84972:	2a13      	cmp	r2, #19
   84974:	d977      	bls.n	84a66 <_realloc_r+0x366>
   84976:	6823      	ldr	r3, [r4, #0]
   84978:	2a1b      	cmp	r2, #27
   8497a:	f8ca 3008 	str.w	r3, [sl, #8]
   8497e:	6863      	ldr	r3, [r4, #4]
   84980:	f8ca 300c 	str.w	r3, [sl, #12]
   84984:	f200 8084 	bhi.w	84a90 <_realloc_r+0x390>
   84988:	3408      	adds	r4, #8
   8498a:	f10a 0310 	add.w	r3, sl, #16
   8498e:	6822      	ldr	r2, [r4, #0]
   84990:	601a      	str	r2, [r3, #0]
   84992:	6862      	ldr	r2, [r4, #4]
   84994:	605a      	str	r2, [r3, #4]
   84996:	68a2      	ldr	r2, [r4, #8]
   84998:	609a      	str	r2, [r3, #8]
   8499a:	ebc6 020c 	rsb	r2, r6, ip
   8499e:	eb0a 0306 	add.w	r3, sl, r6
   849a2:	f042 0201 	orr.w	r2, r2, #1
   849a6:	f8cb 3008 	str.w	r3, [fp, #8]
   849aa:	605a      	str	r2, [r3, #4]
   849ac:	f8da 3004 	ldr.w	r3, [sl, #4]
   849b0:	4648      	mov	r0, r9
   849b2:	f003 0301 	and.w	r3, r3, #1
   849b6:	431e      	orrs	r6, r3
   849b8:	f8ca 6004 	str.w	r6, [sl, #4]
   849bc:	f7ff fe9e 	bl	846fc <__malloc_unlock>
   849c0:	4638      	mov	r0, r7
   849c2:	e71b      	b.n	847fc <_realloc_r+0xfc>
   849c4:	68a3      	ldr	r3, [r4, #8]
   849c6:	2a24      	cmp	r2, #36	; 0x24
   849c8:	6083      	str	r3, [r0, #8]
   849ca:	68e3      	ldr	r3, [r4, #12]
   849cc:	60c3      	str	r3, [r0, #12]
   849ce:	d02b      	beq.n	84a28 <_realloc_r+0x328>
   849d0:	f100 0310 	add.w	r3, r0, #16
   849d4:	f104 0210 	add.w	r2, r4, #16
   849d8:	e74a      	b.n	84870 <_realloc_r+0x170>
   849da:	f850 2c04 	ldr.w	r2, [r0, #-4]
   849de:	46a0      	mov	r8, r4
   849e0:	f022 0203 	bic.w	r2, r2, #3
   849e4:	4415      	add	r5, r2
   849e6:	e6f9      	b.n	847dc <_realloc_r+0xdc>
   849e8:	4621      	mov	r1, r4
   849ea:	4640      	mov	r0, r8
   849ec:	4675      	mov	r5, lr
   849ee:	4657      	mov	r7, sl
   849f0:	f7ff fe1c 	bl	8462c <memmove>
   849f4:	f8da 3004 	ldr.w	r3, [sl, #4]
   849f8:	e6f0      	b.n	847dc <_realloc_r+0xdc>
   849fa:	4642      	mov	r2, r8
   849fc:	e76e      	b.n	848dc <_realloc_r+0x1dc>
   849fe:	4621      	mov	r1, r4
   84a00:	4640      	mov	r0, r8
   84a02:	461d      	mov	r5, r3
   84a04:	4657      	mov	r7, sl
   84a06:	f7ff fe11 	bl	8462c <memmove>
   84a0a:	f8da 3004 	ldr.w	r3, [sl, #4]
   84a0e:	e6e5      	b.n	847dc <_realloc_r+0xdc>
   84a10:	68a3      	ldr	r3, [r4, #8]
   84a12:	2a24      	cmp	r2, #36	; 0x24
   84a14:	f8ca 3010 	str.w	r3, [sl, #16]
   84a18:	68e3      	ldr	r3, [r4, #12]
   84a1a:	f8ca 3014 	str.w	r3, [sl, #20]
   84a1e:	d018      	beq.n	84a52 <_realloc_r+0x352>
   84a20:	3410      	adds	r4, #16
   84a22:	f10a 0318 	add.w	r3, sl, #24
   84a26:	e770      	b.n	8490a <_realloc_r+0x20a>
   84a28:	6922      	ldr	r2, [r4, #16]
   84a2a:	f100 0318 	add.w	r3, r0, #24
   84a2e:	6102      	str	r2, [r0, #16]
   84a30:	6961      	ldr	r1, [r4, #20]
   84a32:	f104 0218 	add.w	r2, r4, #24
   84a36:	6141      	str	r1, [r0, #20]
   84a38:	e71a      	b.n	84870 <_realloc_r+0x170>
   84a3a:	68a1      	ldr	r1, [r4, #8]
   84a3c:	2a24      	cmp	r2, #36	; 0x24
   84a3e:	f8ca 1010 	str.w	r1, [sl, #16]
   84a42:	68e1      	ldr	r1, [r4, #12]
   84a44:	f8ca 1014 	str.w	r1, [sl, #20]
   84a48:	d00f      	beq.n	84a6a <_realloc_r+0x36a>
   84a4a:	3410      	adds	r4, #16
   84a4c:	f10a 0218 	add.w	r2, sl, #24
   84a50:	e744      	b.n	848dc <_realloc_r+0x1dc>
   84a52:	6922      	ldr	r2, [r4, #16]
   84a54:	f10a 0320 	add.w	r3, sl, #32
   84a58:	f8ca 2018 	str.w	r2, [sl, #24]
   84a5c:	6962      	ldr	r2, [r4, #20]
   84a5e:	3418      	adds	r4, #24
   84a60:	f8ca 201c 	str.w	r2, [sl, #28]
   84a64:	e751      	b.n	8490a <_realloc_r+0x20a>
   84a66:	463b      	mov	r3, r7
   84a68:	e791      	b.n	8498e <_realloc_r+0x28e>
   84a6a:	6921      	ldr	r1, [r4, #16]
   84a6c:	f10a 0220 	add.w	r2, sl, #32
   84a70:	f8ca 1018 	str.w	r1, [sl, #24]
   84a74:	6961      	ldr	r1, [r4, #20]
   84a76:	3418      	adds	r4, #24
   84a78:	f8ca 101c 	str.w	r1, [sl, #28]
   84a7c:	e72e      	b.n	848dc <_realloc_r+0x1dc>
   84a7e:	4621      	mov	r1, r4
   84a80:	4638      	mov	r0, r7
   84a82:	f8cd c004 	str.w	ip, [sp, #4]
   84a86:	f7ff fdd1 	bl	8462c <memmove>
   84a8a:	f8dd c004 	ldr.w	ip, [sp, #4]
   84a8e:	e784      	b.n	8499a <_realloc_r+0x29a>
   84a90:	68a3      	ldr	r3, [r4, #8]
   84a92:	2a24      	cmp	r2, #36	; 0x24
   84a94:	f8ca 3010 	str.w	r3, [sl, #16]
   84a98:	68e3      	ldr	r3, [r4, #12]
   84a9a:	f8ca 3014 	str.w	r3, [sl, #20]
   84a9e:	d003      	beq.n	84aa8 <_realloc_r+0x3a8>
   84aa0:	3410      	adds	r4, #16
   84aa2:	f10a 0318 	add.w	r3, sl, #24
   84aa6:	e772      	b.n	8498e <_realloc_r+0x28e>
   84aa8:	6922      	ldr	r2, [r4, #16]
   84aaa:	f10a 0320 	add.w	r3, sl, #32
   84aae:	f8ca 2018 	str.w	r2, [sl, #24]
   84ab2:	6962      	ldr	r2, [r4, #20]
   84ab4:	3418      	adds	r4, #24
   84ab6:	f8ca 201c 	str.w	r2, [sl, #28]
   84aba:	e768      	b.n	8498e <_realloc_r+0x28e>
   84abc:	20070590 	.word	0x20070590

00084ac0 <_sbrk_r>:
   84ac0:	b538      	push	{r3, r4, r5, lr}
   84ac2:	4c07      	ldr	r4, [pc, #28]	; (84ae0 <_sbrk_r+0x20>)
   84ac4:	2300      	movs	r3, #0
   84ac6:	4605      	mov	r5, r0
   84ac8:	4608      	mov	r0, r1
   84aca:	6023      	str	r3, [r4, #0]
   84acc:	f7fd fa5e 	bl	81f8c <_sbrk>
   84ad0:	1c43      	adds	r3, r0, #1
   84ad2:	d000      	beq.n	84ad6 <_sbrk_r+0x16>
   84ad4:	bd38      	pop	{r3, r4, r5, pc}
   84ad6:	6823      	ldr	r3, [r4, #0]
   84ad8:	2b00      	cmp	r3, #0
   84ada:	d0fb      	beq.n	84ad4 <_sbrk_r+0x14>
   84adc:	602b      	str	r3, [r5, #0]
   84ade:	bd38      	pop	{r3, r4, r5, pc}
   84ae0:	20070c98 	.word	0x20070c98

00084ae4 <__sread>:
   84ae4:	b510      	push	{r4, lr}
   84ae6:	460c      	mov	r4, r1
   84ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84aec:	f000 f96e 	bl	84dcc <_read_r>
   84af0:	2800      	cmp	r0, #0
   84af2:	db03      	blt.n	84afc <__sread+0x18>
   84af4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84af6:	4403      	add	r3, r0
   84af8:	6523      	str	r3, [r4, #80]	; 0x50
   84afa:	bd10      	pop	{r4, pc}
   84afc:	89a3      	ldrh	r3, [r4, #12]
   84afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84b02:	81a3      	strh	r3, [r4, #12]
   84b04:	bd10      	pop	{r4, pc}
   84b06:	bf00      	nop

00084b08 <__swrite>:
   84b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84b0c:	460c      	mov	r4, r1
   84b0e:	8989      	ldrh	r1, [r1, #12]
   84b10:	461d      	mov	r5, r3
   84b12:	05cb      	lsls	r3, r1, #23
   84b14:	4616      	mov	r6, r2
   84b16:	4607      	mov	r7, r0
   84b18:	d506      	bpl.n	84b28 <__swrite+0x20>
   84b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84b1e:	2200      	movs	r2, #0
   84b20:	2302      	movs	r3, #2
   84b22:	f000 f93f 	bl	84da4 <_lseek_r>
   84b26:	89a1      	ldrh	r1, [r4, #12]
   84b28:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84b2c:	81a1      	strh	r1, [r4, #12]
   84b2e:	4638      	mov	r0, r7
   84b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84b34:	4632      	mov	r2, r6
   84b36:	462b      	mov	r3, r5
   84b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84b3c:	f000 b84a 	b.w	84bd4 <_write_r>

00084b40 <__sseek>:
   84b40:	b510      	push	{r4, lr}
   84b42:	460c      	mov	r4, r1
   84b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84b48:	f000 f92c 	bl	84da4 <_lseek_r>
   84b4c:	89a3      	ldrh	r3, [r4, #12]
   84b4e:	1c42      	adds	r2, r0, #1
   84b50:	bf0e      	itee	eq
   84b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84b5a:	6520      	strne	r0, [r4, #80]	; 0x50
   84b5c:	81a3      	strh	r3, [r4, #12]
   84b5e:	bd10      	pop	{r4, pc}

00084b60 <__sclose>:
   84b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84b64:	f000 b89e 	b.w	84ca4 <_close_r>

00084b68 <_wcrtomb_r>:
   84b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84b6c:	461e      	mov	r6, r3
   84b6e:	b086      	sub	sp, #24
   84b70:	460c      	mov	r4, r1
   84b72:	4605      	mov	r5, r0
   84b74:	4617      	mov	r7, r2
   84b76:	4b0f      	ldr	r3, [pc, #60]	; (84bb4 <_wcrtomb_r+0x4c>)
   84b78:	b191      	cbz	r1, 84ba0 <_wcrtomb_r+0x38>
   84b7a:	f8d3 8000 	ldr.w	r8, [r3]
   84b7e:	f7ff f9ed 	bl	83f5c <__locale_charset>
   84b82:	9600      	str	r6, [sp, #0]
   84b84:	4603      	mov	r3, r0
   84b86:	4621      	mov	r1, r4
   84b88:	463a      	mov	r2, r7
   84b8a:	4628      	mov	r0, r5
   84b8c:	47c0      	blx	r8
   84b8e:	1c43      	adds	r3, r0, #1
   84b90:	d103      	bne.n	84b9a <_wcrtomb_r+0x32>
   84b92:	2200      	movs	r2, #0
   84b94:	238a      	movs	r3, #138	; 0x8a
   84b96:	6032      	str	r2, [r6, #0]
   84b98:	602b      	str	r3, [r5, #0]
   84b9a:	b006      	add	sp, #24
   84b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ba0:	681f      	ldr	r7, [r3, #0]
   84ba2:	f7ff f9db 	bl	83f5c <__locale_charset>
   84ba6:	9600      	str	r6, [sp, #0]
   84ba8:	4603      	mov	r3, r0
   84baa:	4622      	mov	r2, r4
   84bac:	4628      	mov	r0, r5
   84bae:	a903      	add	r1, sp, #12
   84bb0:	47b8      	blx	r7
   84bb2:	e7ec      	b.n	84b8e <_wcrtomb_r+0x26>
   84bb4:	200709a0 	.word	0x200709a0

00084bb8 <__ascii_wctomb>:
   84bb8:	b121      	cbz	r1, 84bc4 <__ascii_wctomb+0xc>
   84bba:	2aff      	cmp	r2, #255	; 0xff
   84bbc:	d804      	bhi.n	84bc8 <__ascii_wctomb+0x10>
   84bbe:	700a      	strb	r2, [r1, #0]
   84bc0:	2001      	movs	r0, #1
   84bc2:	4770      	bx	lr
   84bc4:	4608      	mov	r0, r1
   84bc6:	4770      	bx	lr
   84bc8:	238a      	movs	r3, #138	; 0x8a
   84bca:	6003      	str	r3, [r0, #0]
   84bcc:	f04f 30ff 	mov.w	r0, #4294967295
   84bd0:	4770      	bx	lr
   84bd2:	bf00      	nop

00084bd4 <_write_r>:
   84bd4:	b570      	push	{r4, r5, r6, lr}
   84bd6:	4c08      	ldr	r4, [pc, #32]	; (84bf8 <_write_r+0x24>)
   84bd8:	4606      	mov	r6, r0
   84bda:	2500      	movs	r5, #0
   84bdc:	4608      	mov	r0, r1
   84bde:	4611      	mov	r1, r2
   84be0:	461a      	mov	r2, r3
   84be2:	6025      	str	r5, [r4, #0]
   84be4:	f7fc fc3c 	bl	81460 <_write>
   84be8:	1c43      	adds	r3, r0, #1
   84bea:	d000      	beq.n	84bee <_write_r+0x1a>
   84bec:	bd70      	pop	{r4, r5, r6, pc}
   84bee:	6823      	ldr	r3, [r4, #0]
   84bf0:	2b00      	cmp	r3, #0
   84bf2:	d0fb      	beq.n	84bec <_write_r+0x18>
   84bf4:	6033      	str	r3, [r6, #0]
   84bf6:	bd70      	pop	{r4, r5, r6, pc}
   84bf8:	20070c98 	.word	0x20070c98

00084bfc <__register_exitproc>:
   84bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   84bfe:	4c27      	ldr	r4, [pc, #156]	; (84c9c <__register_exitproc+0xa0>)
   84c00:	b085      	sub	sp, #20
   84c02:	6826      	ldr	r6, [r4, #0]
   84c04:	4607      	mov	r7, r0
   84c06:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   84c0a:	2c00      	cmp	r4, #0
   84c0c:	d040      	beq.n	84c90 <__register_exitproc+0x94>
   84c0e:	6865      	ldr	r5, [r4, #4]
   84c10:	2d1f      	cmp	r5, #31
   84c12:	dd1e      	ble.n	84c52 <__register_exitproc+0x56>
   84c14:	4822      	ldr	r0, [pc, #136]	; (84ca0 <__register_exitproc+0xa4>)
   84c16:	b918      	cbnz	r0, 84c20 <__register_exitproc+0x24>
   84c18:	f04f 30ff 	mov.w	r0, #4294967295
   84c1c:	b005      	add	sp, #20
   84c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84c20:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84c24:	9103      	str	r1, [sp, #12]
   84c26:	9202      	str	r2, [sp, #8]
   84c28:	9301      	str	r3, [sp, #4]
   84c2a:	f7ff fa11 	bl	84050 <malloc>
   84c2e:	9903      	ldr	r1, [sp, #12]
   84c30:	4604      	mov	r4, r0
   84c32:	9a02      	ldr	r2, [sp, #8]
   84c34:	9b01      	ldr	r3, [sp, #4]
   84c36:	2800      	cmp	r0, #0
   84c38:	d0ee      	beq.n	84c18 <__register_exitproc+0x1c>
   84c3a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   84c3e:	2000      	movs	r0, #0
   84c40:	6025      	str	r5, [r4, #0]
   84c42:	6060      	str	r0, [r4, #4]
   84c44:	4605      	mov	r5, r0
   84c46:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84c4a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   84c4e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   84c52:	b93f      	cbnz	r7, 84c64 <__register_exitproc+0x68>
   84c54:	1c6b      	adds	r3, r5, #1
   84c56:	2000      	movs	r0, #0
   84c58:	3502      	adds	r5, #2
   84c5a:	6063      	str	r3, [r4, #4]
   84c5c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   84c60:	b005      	add	sp, #20
   84c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84c64:	2601      	movs	r6, #1
   84c66:	40ae      	lsls	r6, r5
   84c68:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84c6c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   84c70:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   84c74:	2f02      	cmp	r7, #2
   84c76:	ea42 0206 	orr.w	r2, r2, r6
   84c7a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   84c7e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   84c82:	d1e7      	bne.n	84c54 <__register_exitproc+0x58>
   84c84:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84c88:	431e      	orrs	r6, r3
   84c8a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   84c8e:	e7e1      	b.n	84c54 <__register_exitproc+0x58>
   84c90:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   84c94:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84c98:	e7b9      	b.n	84c0e <__register_exitproc+0x12>
   84c9a:	bf00      	nop
   84c9c:	000854e4 	.word	0x000854e4
   84ca0:	00084051 	.word	0x00084051

00084ca4 <_close_r>:
   84ca4:	b538      	push	{r3, r4, r5, lr}
   84ca6:	4c07      	ldr	r4, [pc, #28]	; (84cc4 <_close_r+0x20>)
   84ca8:	2300      	movs	r3, #0
   84caa:	4605      	mov	r5, r0
   84cac:	4608      	mov	r0, r1
   84cae:	6023      	str	r3, [r4, #0]
   84cb0:	f7fd f986 	bl	81fc0 <_close>
   84cb4:	1c43      	adds	r3, r0, #1
   84cb6:	d000      	beq.n	84cba <_close_r+0x16>
   84cb8:	bd38      	pop	{r3, r4, r5, pc}
   84cba:	6823      	ldr	r3, [r4, #0]
   84cbc:	2b00      	cmp	r3, #0
   84cbe:	d0fb      	beq.n	84cb8 <_close_r+0x14>
   84cc0:	602b      	str	r3, [r5, #0]
   84cc2:	bd38      	pop	{r3, r4, r5, pc}
   84cc4:	20070c98 	.word	0x20070c98

00084cc8 <_fclose_r>:
   84cc8:	b570      	push	{r4, r5, r6, lr}
   84cca:	460c      	mov	r4, r1
   84ccc:	4605      	mov	r5, r0
   84cce:	b131      	cbz	r1, 84cde <_fclose_r+0x16>
   84cd0:	b110      	cbz	r0, 84cd8 <_fclose_r+0x10>
   84cd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84cd4:	2b00      	cmp	r3, #0
   84cd6:	d02f      	beq.n	84d38 <_fclose_r+0x70>
   84cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84cdc:	b90b      	cbnz	r3, 84ce2 <_fclose_r+0x1a>
   84cde:	2000      	movs	r0, #0
   84ce0:	bd70      	pop	{r4, r5, r6, pc}
   84ce2:	4628      	mov	r0, r5
   84ce4:	4621      	mov	r1, r4
   84ce6:	f7fe fd5d 	bl	837a4 <_fflush_r>
   84cea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84cec:	4606      	mov	r6, r0
   84cee:	b133      	cbz	r3, 84cfe <_fclose_r+0x36>
   84cf0:	4628      	mov	r0, r5
   84cf2:	69e1      	ldr	r1, [r4, #28]
   84cf4:	4798      	blx	r3
   84cf6:	2800      	cmp	r0, #0
   84cf8:	bfb8      	it	lt
   84cfa:	f04f 36ff 	movlt.w	r6, #4294967295
   84cfe:	89a3      	ldrh	r3, [r4, #12]
   84d00:	061b      	lsls	r3, r3, #24
   84d02:	d41c      	bmi.n	84d3e <_fclose_r+0x76>
   84d04:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84d06:	b141      	cbz	r1, 84d1a <_fclose_r+0x52>
   84d08:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84d0c:	4299      	cmp	r1, r3
   84d0e:	d002      	beq.n	84d16 <_fclose_r+0x4e>
   84d10:	4628      	mov	r0, r5
   84d12:	f7fe fea7 	bl	83a64 <_free_r>
   84d16:	2300      	movs	r3, #0
   84d18:	6323      	str	r3, [r4, #48]	; 0x30
   84d1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84d1c:	b121      	cbz	r1, 84d28 <_fclose_r+0x60>
   84d1e:	4628      	mov	r0, r5
   84d20:	f7fe fea0 	bl	83a64 <_free_r>
   84d24:	2300      	movs	r3, #0
   84d26:	6463      	str	r3, [r4, #68]	; 0x44
   84d28:	f7fe fdd2 	bl	838d0 <__sfp_lock_acquire>
   84d2c:	2300      	movs	r3, #0
   84d2e:	81a3      	strh	r3, [r4, #12]
   84d30:	f7fe fdd0 	bl	838d4 <__sfp_lock_release>
   84d34:	4630      	mov	r0, r6
   84d36:	bd70      	pop	{r4, r5, r6, pc}
   84d38:	f7fe fd50 	bl	837dc <__sinit>
   84d3c:	e7cc      	b.n	84cd8 <_fclose_r+0x10>
   84d3e:	4628      	mov	r0, r5
   84d40:	6921      	ldr	r1, [r4, #16]
   84d42:	f7fe fe8f 	bl	83a64 <_free_r>
   84d46:	e7dd      	b.n	84d04 <_fclose_r+0x3c>

00084d48 <fclose>:
   84d48:	4b02      	ldr	r3, [pc, #8]	; (84d54 <fclose+0xc>)
   84d4a:	4601      	mov	r1, r0
   84d4c:	6818      	ldr	r0, [r3, #0]
   84d4e:	f7ff bfbb 	b.w	84cc8 <_fclose_r>
   84d52:	bf00      	nop
   84d54:	20070568 	.word	0x20070568

00084d58 <_fstat_r>:
   84d58:	b538      	push	{r3, r4, r5, lr}
   84d5a:	4c08      	ldr	r4, [pc, #32]	; (84d7c <_fstat_r+0x24>)
   84d5c:	2300      	movs	r3, #0
   84d5e:	4605      	mov	r5, r0
   84d60:	4608      	mov	r0, r1
   84d62:	4611      	mov	r1, r2
   84d64:	6023      	str	r3, [r4, #0]
   84d66:	f7fd f92f 	bl	81fc8 <_fstat>
   84d6a:	1c43      	adds	r3, r0, #1
   84d6c:	d000      	beq.n	84d70 <_fstat_r+0x18>
   84d6e:	bd38      	pop	{r3, r4, r5, pc}
   84d70:	6823      	ldr	r3, [r4, #0]
   84d72:	2b00      	cmp	r3, #0
   84d74:	d0fb      	beq.n	84d6e <_fstat_r+0x16>
   84d76:	602b      	str	r3, [r5, #0]
   84d78:	bd38      	pop	{r3, r4, r5, pc}
   84d7a:	bf00      	nop
   84d7c:	20070c98 	.word	0x20070c98

00084d80 <_isatty_r>:
   84d80:	b538      	push	{r3, r4, r5, lr}
   84d82:	4c07      	ldr	r4, [pc, #28]	; (84da0 <_isatty_r+0x20>)
   84d84:	2300      	movs	r3, #0
   84d86:	4605      	mov	r5, r0
   84d88:	4608      	mov	r0, r1
   84d8a:	6023      	str	r3, [r4, #0]
   84d8c:	f7fd f922 	bl	81fd4 <_isatty>
   84d90:	1c43      	adds	r3, r0, #1
   84d92:	d000      	beq.n	84d96 <_isatty_r+0x16>
   84d94:	bd38      	pop	{r3, r4, r5, pc}
   84d96:	6823      	ldr	r3, [r4, #0]
   84d98:	2b00      	cmp	r3, #0
   84d9a:	d0fb      	beq.n	84d94 <_isatty_r+0x14>
   84d9c:	602b      	str	r3, [r5, #0]
   84d9e:	bd38      	pop	{r3, r4, r5, pc}
   84da0:	20070c98 	.word	0x20070c98

00084da4 <_lseek_r>:
   84da4:	b570      	push	{r4, r5, r6, lr}
   84da6:	4c08      	ldr	r4, [pc, #32]	; (84dc8 <_lseek_r+0x24>)
   84da8:	4606      	mov	r6, r0
   84daa:	2500      	movs	r5, #0
   84dac:	4608      	mov	r0, r1
   84dae:	4611      	mov	r1, r2
   84db0:	461a      	mov	r2, r3
   84db2:	6025      	str	r5, [r4, #0]
   84db4:	f7fd f910 	bl	81fd8 <_lseek>
   84db8:	1c43      	adds	r3, r0, #1
   84dba:	d000      	beq.n	84dbe <_lseek_r+0x1a>
   84dbc:	bd70      	pop	{r4, r5, r6, pc}
   84dbe:	6823      	ldr	r3, [r4, #0]
   84dc0:	2b00      	cmp	r3, #0
   84dc2:	d0fb      	beq.n	84dbc <_lseek_r+0x18>
   84dc4:	6033      	str	r3, [r6, #0]
   84dc6:	bd70      	pop	{r4, r5, r6, pc}
   84dc8:	20070c98 	.word	0x20070c98

00084dcc <_read_r>:
   84dcc:	b570      	push	{r4, r5, r6, lr}
   84dce:	4c08      	ldr	r4, [pc, #32]	; (84df0 <_read_r+0x24>)
   84dd0:	4606      	mov	r6, r0
   84dd2:	2500      	movs	r5, #0
   84dd4:	4608      	mov	r0, r1
   84dd6:	4611      	mov	r1, r2
   84dd8:	461a      	mov	r2, r3
   84dda:	6025      	str	r5, [r4, #0]
   84ddc:	f7fc f81a 	bl	80e14 <_read>
   84de0:	1c43      	adds	r3, r0, #1
   84de2:	d000      	beq.n	84de6 <_read_r+0x1a>
   84de4:	bd70      	pop	{r4, r5, r6, pc}
   84de6:	6823      	ldr	r3, [r4, #0]
   84de8:	2b00      	cmp	r3, #0
   84dea:	d0fb      	beq.n	84de4 <_read_r+0x18>
   84dec:	6033      	str	r3, [r6, #0]
   84dee:	bd70      	pop	{r4, r5, r6, pc}
   84df0:	20070c98 	.word	0x20070c98

00084df4 <__aeabi_uldivmod>:
   84df4:	b94b      	cbnz	r3, 84e0a <__aeabi_uldivmod+0x16>
   84df6:	b942      	cbnz	r2, 84e0a <__aeabi_uldivmod+0x16>
   84df8:	2900      	cmp	r1, #0
   84dfa:	bf08      	it	eq
   84dfc:	2800      	cmpeq	r0, #0
   84dfe:	d002      	beq.n	84e06 <__aeabi_uldivmod+0x12>
   84e00:	f04f 31ff 	mov.w	r1, #4294967295
   84e04:	4608      	mov	r0, r1
   84e06:	f000 b83b 	b.w	84e80 <__aeabi_idiv0>
   84e0a:	b082      	sub	sp, #8
   84e0c:	46ec      	mov	ip, sp
   84e0e:	e92d 5000 	stmdb	sp!, {ip, lr}
   84e12:	f000 f81d 	bl	84e50 <__gnu_uldivmod_helper>
   84e16:	f8dd e004 	ldr.w	lr, [sp, #4]
   84e1a:	b002      	add	sp, #8
   84e1c:	bc0c      	pop	{r2, r3}
   84e1e:	4770      	bx	lr

00084e20 <__gnu_ldivmod_helper>:
   84e20:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84e24:	9e08      	ldr	r6, [sp, #32]
   84e26:	4614      	mov	r4, r2
   84e28:	461d      	mov	r5, r3
   84e2a:	4680      	mov	r8, r0
   84e2c:	4689      	mov	r9, r1
   84e2e:	f000 f829 	bl	84e84 <__divdi3>
   84e32:	fb04 f301 	mul.w	r3, r4, r1
   84e36:	fba4 ab00 	umull	sl, fp, r4, r0
   84e3a:	fb00 3205 	mla	r2, r0, r5, r3
   84e3e:	4493      	add	fp, r2
   84e40:	ebb8 080a 	subs.w	r8, r8, sl
   84e44:	eb69 090b 	sbc.w	r9, r9, fp
   84e48:	e9c6 8900 	strd	r8, r9, [r6]
   84e4c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084e50 <__gnu_uldivmod_helper>:
   84e50:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84e54:	9e08      	ldr	r6, [sp, #32]
   84e56:	4614      	mov	r4, r2
   84e58:	461d      	mov	r5, r3
   84e5a:	4680      	mov	r8, r0
   84e5c:	4689      	mov	r9, r1
   84e5e:	f000 f961 	bl	85124 <__udivdi3>
   84e62:	fb00 f505 	mul.w	r5, r0, r5
   84e66:	fba0 ab04 	umull	sl, fp, r0, r4
   84e6a:	fb04 5401 	mla	r4, r4, r1, r5
   84e6e:	44a3      	add	fp, r4
   84e70:	ebb8 080a 	subs.w	r8, r8, sl
   84e74:	eb69 090b 	sbc.w	r9, r9, fp
   84e78:	e9c6 8900 	strd	r8, r9, [r6]
   84e7c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084e80 <__aeabi_idiv0>:
   84e80:	4770      	bx	lr
   84e82:	bf00      	nop

00084e84 <__divdi3>:
   84e84:	2900      	cmp	r1, #0
   84e86:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84e8a:	f2c0 80a1 	blt.w	84fd0 <__divdi3+0x14c>
   84e8e:	2400      	movs	r4, #0
   84e90:	2b00      	cmp	r3, #0
   84e92:	f2c0 8098 	blt.w	84fc6 <__divdi3+0x142>
   84e96:	4615      	mov	r5, r2
   84e98:	4606      	mov	r6, r0
   84e9a:	460f      	mov	r7, r1
   84e9c:	2b00      	cmp	r3, #0
   84e9e:	d13f      	bne.n	84f20 <__divdi3+0x9c>
   84ea0:	428a      	cmp	r2, r1
   84ea2:	d958      	bls.n	84f56 <__divdi3+0xd2>
   84ea4:	fab2 f382 	clz	r3, r2
   84ea8:	b14b      	cbz	r3, 84ebe <__divdi3+0x3a>
   84eaa:	f1c3 0220 	rsb	r2, r3, #32
   84eae:	fa01 f703 	lsl.w	r7, r1, r3
   84eb2:	fa20 f202 	lsr.w	r2, r0, r2
   84eb6:	409d      	lsls	r5, r3
   84eb8:	fa00 f603 	lsl.w	r6, r0, r3
   84ebc:	4317      	orrs	r7, r2
   84ebe:	0c29      	lsrs	r1, r5, #16
   84ec0:	fbb7 f2f1 	udiv	r2, r7, r1
   84ec4:	fb01 7712 	mls	r7, r1, r2, r7
   84ec8:	b2a8      	uxth	r0, r5
   84eca:	fb00 f302 	mul.w	r3, r0, r2
   84ece:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   84ed2:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   84ed6:	42bb      	cmp	r3, r7
   84ed8:	d909      	bls.n	84eee <__divdi3+0x6a>
   84eda:	197f      	adds	r7, r7, r5
   84edc:	f102 3cff 	add.w	ip, r2, #4294967295
   84ee0:	f080 8105 	bcs.w	850ee <__divdi3+0x26a>
   84ee4:	42bb      	cmp	r3, r7
   84ee6:	f240 8102 	bls.w	850ee <__divdi3+0x26a>
   84eea:	3a02      	subs	r2, #2
   84eec:	442f      	add	r7, r5
   84eee:	1aff      	subs	r7, r7, r3
   84ef0:	fbb7 f3f1 	udiv	r3, r7, r1
   84ef4:	fb01 7113 	mls	r1, r1, r3, r7
   84ef8:	fb00 f003 	mul.w	r0, r0, r3
   84efc:	b2b6      	uxth	r6, r6
   84efe:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   84f02:	4288      	cmp	r0, r1
   84f04:	d908      	bls.n	84f18 <__divdi3+0x94>
   84f06:	1949      	adds	r1, r1, r5
   84f08:	f103 37ff 	add.w	r7, r3, #4294967295
   84f0c:	f080 80f1 	bcs.w	850f2 <__divdi3+0x26e>
   84f10:	4288      	cmp	r0, r1
   84f12:	f240 80ee 	bls.w	850f2 <__divdi3+0x26e>
   84f16:	3b02      	subs	r3, #2
   84f18:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84f1c:	2300      	movs	r3, #0
   84f1e:	e003      	b.n	84f28 <__divdi3+0xa4>
   84f20:	428b      	cmp	r3, r1
   84f22:	d90a      	bls.n	84f3a <__divdi3+0xb6>
   84f24:	2300      	movs	r3, #0
   84f26:	461a      	mov	r2, r3
   84f28:	4610      	mov	r0, r2
   84f2a:	4619      	mov	r1, r3
   84f2c:	b114      	cbz	r4, 84f34 <__divdi3+0xb0>
   84f2e:	4240      	negs	r0, r0
   84f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84f34:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84f38:	4770      	bx	lr
   84f3a:	fab3 f883 	clz	r8, r3
   84f3e:	f1b8 0f00 	cmp.w	r8, #0
   84f42:	f040 8088 	bne.w	85056 <__divdi3+0x1d2>
   84f46:	428b      	cmp	r3, r1
   84f48:	d302      	bcc.n	84f50 <__divdi3+0xcc>
   84f4a:	4282      	cmp	r2, r0
   84f4c:	f200 80e2 	bhi.w	85114 <__divdi3+0x290>
   84f50:	2300      	movs	r3, #0
   84f52:	2201      	movs	r2, #1
   84f54:	e7e8      	b.n	84f28 <__divdi3+0xa4>
   84f56:	b912      	cbnz	r2, 84f5e <__divdi3+0xda>
   84f58:	2301      	movs	r3, #1
   84f5a:	fbb3 f5f2 	udiv	r5, r3, r2
   84f5e:	fab5 f285 	clz	r2, r5
   84f62:	2a00      	cmp	r2, #0
   84f64:	d13a      	bne.n	84fdc <__divdi3+0x158>
   84f66:	1b7f      	subs	r7, r7, r5
   84f68:	0c28      	lsrs	r0, r5, #16
   84f6a:	fa1f fc85 	uxth.w	ip, r5
   84f6e:	2301      	movs	r3, #1
   84f70:	fbb7 f1f0 	udiv	r1, r7, r0
   84f74:	fb00 7711 	mls	r7, r0, r1, r7
   84f78:	fb0c f201 	mul.w	r2, ip, r1
   84f7c:	ea4f 4816 	mov.w	r8, r6, lsr #16
   84f80:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   84f84:	42ba      	cmp	r2, r7
   84f86:	d907      	bls.n	84f98 <__divdi3+0x114>
   84f88:	197f      	adds	r7, r7, r5
   84f8a:	f101 38ff 	add.w	r8, r1, #4294967295
   84f8e:	d202      	bcs.n	84f96 <__divdi3+0x112>
   84f90:	42ba      	cmp	r2, r7
   84f92:	f200 80c4 	bhi.w	8511e <__divdi3+0x29a>
   84f96:	4641      	mov	r1, r8
   84f98:	1abf      	subs	r7, r7, r2
   84f9a:	fbb7 f2f0 	udiv	r2, r7, r0
   84f9e:	fb00 7012 	mls	r0, r0, r2, r7
   84fa2:	fb0c fc02 	mul.w	ip, ip, r2
   84fa6:	b2b6      	uxth	r6, r6
   84fa8:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   84fac:	4584      	cmp	ip, r0
   84fae:	d907      	bls.n	84fc0 <__divdi3+0x13c>
   84fb0:	1940      	adds	r0, r0, r5
   84fb2:	f102 37ff 	add.w	r7, r2, #4294967295
   84fb6:	d202      	bcs.n	84fbe <__divdi3+0x13a>
   84fb8:	4584      	cmp	ip, r0
   84fba:	f200 80ae 	bhi.w	8511a <__divdi3+0x296>
   84fbe:	463a      	mov	r2, r7
   84fc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   84fc4:	e7b0      	b.n	84f28 <__divdi3+0xa4>
   84fc6:	43e4      	mvns	r4, r4
   84fc8:	4252      	negs	r2, r2
   84fca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84fce:	e762      	b.n	84e96 <__divdi3+0x12>
   84fd0:	4240      	negs	r0, r0
   84fd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84fd6:	f04f 34ff 	mov.w	r4, #4294967295
   84fda:	e759      	b.n	84e90 <__divdi3+0xc>
   84fdc:	4095      	lsls	r5, r2
   84fde:	f1c2 0920 	rsb	r9, r2, #32
   84fe2:	fa27 f109 	lsr.w	r1, r7, r9
   84fe6:	fa26 f909 	lsr.w	r9, r6, r9
   84fea:	4097      	lsls	r7, r2
   84fec:	0c28      	lsrs	r0, r5, #16
   84fee:	fbb1 f8f0 	udiv	r8, r1, r0
   84ff2:	fb00 1118 	mls	r1, r0, r8, r1
   84ff6:	fa1f fc85 	uxth.w	ip, r5
   84ffa:	fb0c f308 	mul.w	r3, ip, r8
   84ffe:	ea49 0907 	orr.w	r9, r9, r7
   85002:	ea4f 4719 	mov.w	r7, r9, lsr #16
   85006:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   8500a:	428b      	cmp	r3, r1
   8500c:	fa06 f602 	lsl.w	r6, r6, r2
   85010:	d908      	bls.n	85024 <__divdi3+0x1a0>
   85012:	1949      	adds	r1, r1, r5
   85014:	f108 32ff 	add.w	r2, r8, #4294967295
   85018:	d27a      	bcs.n	85110 <__divdi3+0x28c>
   8501a:	428b      	cmp	r3, r1
   8501c:	d978      	bls.n	85110 <__divdi3+0x28c>
   8501e:	f1a8 0802 	sub.w	r8, r8, #2
   85022:	4429      	add	r1, r5
   85024:	1ac9      	subs	r1, r1, r3
   85026:	fbb1 f3f0 	udiv	r3, r1, r0
   8502a:	fb00 1713 	mls	r7, r0, r3, r1
   8502e:	fb0c f203 	mul.w	r2, ip, r3
   85032:	fa1f f989 	uxth.w	r9, r9
   85036:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   8503a:	42ba      	cmp	r2, r7
   8503c:	d907      	bls.n	8504e <__divdi3+0x1ca>
   8503e:	197f      	adds	r7, r7, r5
   85040:	f103 31ff 	add.w	r1, r3, #4294967295
   85044:	d260      	bcs.n	85108 <__divdi3+0x284>
   85046:	42ba      	cmp	r2, r7
   85048:	d95e      	bls.n	85108 <__divdi3+0x284>
   8504a:	3b02      	subs	r3, #2
   8504c:	442f      	add	r7, r5
   8504e:	1abf      	subs	r7, r7, r2
   85050:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   85054:	e78c      	b.n	84f70 <__divdi3+0xec>
   85056:	f1c8 0220 	rsb	r2, r8, #32
   8505a:	fa25 f102 	lsr.w	r1, r5, r2
   8505e:	fa03 fc08 	lsl.w	ip, r3, r8
   85062:	fa27 f302 	lsr.w	r3, r7, r2
   85066:	fa20 f202 	lsr.w	r2, r0, r2
   8506a:	fa07 f708 	lsl.w	r7, r7, r8
   8506e:	ea41 0c0c 	orr.w	ip, r1, ip
   85072:	ea4f 491c 	mov.w	r9, ip, lsr #16
   85076:	fbb3 f1f9 	udiv	r1, r3, r9
   8507a:	fb09 3311 	mls	r3, r9, r1, r3
   8507e:	fa1f fa8c 	uxth.w	sl, ip
   85082:	fb0a fb01 	mul.w	fp, sl, r1
   85086:	4317      	orrs	r7, r2
   85088:	0c3a      	lsrs	r2, r7, #16
   8508a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   8508e:	459b      	cmp	fp, r3
   85090:	fa05 f008 	lsl.w	r0, r5, r8
   85094:	d908      	bls.n	850a8 <__divdi3+0x224>
   85096:	eb13 030c 	adds.w	r3, r3, ip
   8509a:	f101 32ff 	add.w	r2, r1, #4294967295
   8509e:	d235      	bcs.n	8510c <__divdi3+0x288>
   850a0:	459b      	cmp	fp, r3
   850a2:	d933      	bls.n	8510c <__divdi3+0x288>
   850a4:	3902      	subs	r1, #2
   850a6:	4463      	add	r3, ip
   850a8:	ebcb 0303 	rsb	r3, fp, r3
   850ac:	fbb3 f2f9 	udiv	r2, r3, r9
   850b0:	fb09 3312 	mls	r3, r9, r2, r3
   850b4:	fb0a fa02 	mul.w	sl, sl, r2
   850b8:	b2bf      	uxth	r7, r7
   850ba:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   850be:	45ba      	cmp	sl, r7
   850c0:	d908      	bls.n	850d4 <__divdi3+0x250>
   850c2:	eb17 070c 	adds.w	r7, r7, ip
   850c6:	f102 33ff 	add.w	r3, r2, #4294967295
   850ca:	d21b      	bcs.n	85104 <__divdi3+0x280>
   850cc:	45ba      	cmp	sl, r7
   850ce:	d919      	bls.n	85104 <__divdi3+0x280>
   850d0:	3a02      	subs	r2, #2
   850d2:	4467      	add	r7, ip
   850d4:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   850d8:	fba5 0100 	umull	r0, r1, r5, r0
   850dc:	ebca 0707 	rsb	r7, sl, r7
   850e0:	428f      	cmp	r7, r1
   850e2:	f04f 0300 	mov.w	r3, #0
   850e6:	d30a      	bcc.n	850fe <__divdi3+0x27a>
   850e8:	d005      	beq.n	850f6 <__divdi3+0x272>
   850ea:	462a      	mov	r2, r5
   850ec:	e71c      	b.n	84f28 <__divdi3+0xa4>
   850ee:	4662      	mov	r2, ip
   850f0:	e6fd      	b.n	84eee <__divdi3+0x6a>
   850f2:	463b      	mov	r3, r7
   850f4:	e710      	b.n	84f18 <__divdi3+0x94>
   850f6:	fa06 f608 	lsl.w	r6, r6, r8
   850fa:	4286      	cmp	r6, r0
   850fc:	d2f5      	bcs.n	850ea <__divdi3+0x266>
   850fe:	1e6a      	subs	r2, r5, #1
   85100:	2300      	movs	r3, #0
   85102:	e711      	b.n	84f28 <__divdi3+0xa4>
   85104:	461a      	mov	r2, r3
   85106:	e7e5      	b.n	850d4 <__divdi3+0x250>
   85108:	460b      	mov	r3, r1
   8510a:	e7a0      	b.n	8504e <__divdi3+0x1ca>
   8510c:	4611      	mov	r1, r2
   8510e:	e7cb      	b.n	850a8 <__divdi3+0x224>
   85110:	4690      	mov	r8, r2
   85112:	e787      	b.n	85024 <__divdi3+0x1a0>
   85114:	4643      	mov	r3, r8
   85116:	4642      	mov	r2, r8
   85118:	e706      	b.n	84f28 <__divdi3+0xa4>
   8511a:	3a02      	subs	r2, #2
   8511c:	e750      	b.n	84fc0 <__divdi3+0x13c>
   8511e:	3902      	subs	r1, #2
   85120:	442f      	add	r7, r5
   85122:	e739      	b.n	84f98 <__divdi3+0x114>

00085124 <__udivdi3>:
   85124:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85128:	4614      	mov	r4, r2
   8512a:	4605      	mov	r5, r0
   8512c:	460e      	mov	r6, r1
   8512e:	2b00      	cmp	r3, #0
   85130:	d143      	bne.n	851ba <__udivdi3+0x96>
   85132:	428a      	cmp	r2, r1
   85134:	d953      	bls.n	851de <__udivdi3+0xba>
   85136:	fab2 f782 	clz	r7, r2
   8513a:	b157      	cbz	r7, 85152 <__udivdi3+0x2e>
   8513c:	f1c7 0620 	rsb	r6, r7, #32
   85140:	fa20 f606 	lsr.w	r6, r0, r6
   85144:	fa01 f307 	lsl.w	r3, r1, r7
   85148:	fa02 f407 	lsl.w	r4, r2, r7
   8514c:	fa00 f507 	lsl.w	r5, r0, r7
   85150:	431e      	orrs	r6, r3
   85152:	0c21      	lsrs	r1, r4, #16
   85154:	fbb6 f2f1 	udiv	r2, r6, r1
   85158:	fb01 6612 	mls	r6, r1, r2, r6
   8515c:	b2a0      	uxth	r0, r4
   8515e:	fb00 f302 	mul.w	r3, r0, r2
   85162:	0c2f      	lsrs	r7, r5, #16
   85164:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   85168:	42b3      	cmp	r3, r6
   8516a:	d909      	bls.n	85180 <__udivdi3+0x5c>
   8516c:	1936      	adds	r6, r6, r4
   8516e:	f102 37ff 	add.w	r7, r2, #4294967295
   85172:	f080 80fd 	bcs.w	85370 <__udivdi3+0x24c>
   85176:	42b3      	cmp	r3, r6
   85178:	f240 80fa 	bls.w	85370 <__udivdi3+0x24c>
   8517c:	3a02      	subs	r2, #2
   8517e:	4426      	add	r6, r4
   85180:	1af6      	subs	r6, r6, r3
   85182:	fbb6 f3f1 	udiv	r3, r6, r1
   85186:	fb01 6113 	mls	r1, r1, r3, r6
   8518a:	fb00 f003 	mul.w	r0, r0, r3
   8518e:	b2ad      	uxth	r5, r5
   85190:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   85194:	4288      	cmp	r0, r1
   85196:	d908      	bls.n	851aa <__udivdi3+0x86>
   85198:	1909      	adds	r1, r1, r4
   8519a:	f103 36ff 	add.w	r6, r3, #4294967295
   8519e:	f080 80e9 	bcs.w	85374 <__udivdi3+0x250>
   851a2:	4288      	cmp	r0, r1
   851a4:	f240 80e6 	bls.w	85374 <__udivdi3+0x250>
   851a8:	3b02      	subs	r3, #2
   851aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   851ae:	2300      	movs	r3, #0
   851b0:	4610      	mov	r0, r2
   851b2:	4619      	mov	r1, r3
   851b4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   851b8:	4770      	bx	lr
   851ba:	428b      	cmp	r3, r1
   851bc:	d84c      	bhi.n	85258 <__udivdi3+0x134>
   851be:	fab3 f683 	clz	r6, r3
   851c2:	2e00      	cmp	r6, #0
   851c4:	d14f      	bne.n	85266 <__udivdi3+0x142>
   851c6:	428b      	cmp	r3, r1
   851c8:	d302      	bcc.n	851d0 <__udivdi3+0xac>
   851ca:	4282      	cmp	r2, r0
   851cc:	f200 80dd 	bhi.w	8538a <__udivdi3+0x266>
   851d0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   851d4:	2300      	movs	r3, #0
   851d6:	2201      	movs	r2, #1
   851d8:	4610      	mov	r0, r2
   851da:	4619      	mov	r1, r3
   851dc:	4770      	bx	lr
   851de:	b912      	cbnz	r2, 851e6 <__udivdi3+0xc2>
   851e0:	2401      	movs	r4, #1
   851e2:	fbb4 f4f2 	udiv	r4, r4, r2
   851e6:	fab4 f284 	clz	r2, r4
   851ea:	2a00      	cmp	r2, #0
   851ec:	f040 8082 	bne.w	852f4 <__udivdi3+0x1d0>
   851f0:	1b09      	subs	r1, r1, r4
   851f2:	0c26      	lsrs	r6, r4, #16
   851f4:	b2a7      	uxth	r7, r4
   851f6:	2301      	movs	r3, #1
   851f8:	fbb1 f0f6 	udiv	r0, r1, r6
   851fc:	fb06 1110 	mls	r1, r6, r0, r1
   85200:	fb07 f200 	mul.w	r2, r7, r0
   85204:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   85208:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   8520c:	428a      	cmp	r2, r1
   8520e:	d907      	bls.n	85220 <__udivdi3+0xfc>
   85210:	1909      	adds	r1, r1, r4
   85212:	f100 3cff 	add.w	ip, r0, #4294967295
   85216:	d202      	bcs.n	8521e <__udivdi3+0xfa>
   85218:	428a      	cmp	r2, r1
   8521a:	f200 80c8 	bhi.w	853ae <__udivdi3+0x28a>
   8521e:	4660      	mov	r0, ip
   85220:	1a89      	subs	r1, r1, r2
   85222:	fbb1 f2f6 	udiv	r2, r1, r6
   85226:	fb06 1112 	mls	r1, r6, r2, r1
   8522a:	fb07 f702 	mul.w	r7, r7, r2
   8522e:	b2ad      	uxth	r5, r5
   85230:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   85234:	42af      	cmp	r7, r5
   85236:	d908      	bls.n	8524a <__udivdi3+0x126>
   85238:	192c      	adds	r4, r5, r4
   8523a:	f102 31ff 	add.w	r1, r2, #4294967295
   8523e:	f080 809b 	bcs.w	85378 <__udivdi3+0x254>
   85242:	42a7      	cmp	r7, r4
   85244:	f240 8098 	bls.w	85378 <__udivdi3+0x254>
   85248:	3a02      	subs	r2, #2
   8524a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   8524e:	4610      	mov	r0, r2
   85250:	4619      	mov	r1, r3
   85252:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85256:	4770      	bx	lr
   85258:	2300      	movs	r3, #0
   8525a:	461a      	mov	r2, r3
   8525c:	4610      	mov	r0, r2
   8525e:	4619      	mov	r1, r3
   85260:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85264:	4770      	bx	lr
   85266:	f1c6 0520 	rsb	r5, r6, #32
   8526a:	fa22 f705 	lsr.w	r7, r2, r5
   8526e:	fa03 f406 	lsl.w	r4, r3, r6
   85272:	fa21 f305 	lsr.w	r3, r1, r5
   85276:	fa01 fb06 	lsl.w	fp, r1, r6
   8527a:	fa20 f505 	lsr.w	r5, r0, r5
   8527e:	433c      	orrs	r4, r7
   85280:	ea4f 4814 	mov.w	r8, r4, lsr #16
   85284:	fbb3 fcf8 	udiv	ip, r3, r8
   85288:	fb08 331c 	mls	r3, r8, ip, r3
   8528c:	fa1f f984 	uxth.w	r9, r4
   85290:	fb09 fa0c 	mul.w	sl, r9, ip
   85294:	ea45 0b0b 	orr.w	fp, r5, fp
   85298:	ea4f 451b 	mov.w	r5, fp, lsr #16
   8529c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   852a0:	459a      	cmp	sl, r3
   852a2:	fa02 f206 	lsl.w	r2, r2, r6
   852a6:	d904      	bls.n	852b2 <__udivdi3+0x18e>
   852a8:	191b      	adds	r3, r3, r4
   852aa:	f10c 35ff 	add.w	r5, ip, #4294967295
   852ae:	d36f      	bcc.n	85390 <__udivdi3+0x26c>
   852b0:	46ac      	mov	ip, r5
   852b2:	ebca 0303 	rsb	r3, sl, r3
   852b6:	fbb3 f5f8 	udiv	r5, r3, r8
   852ba:	fb08 3315 	mls	r3, r8, r5, r3
   852be:	fb09 f905 	mul.w	r9, r9, r5
   852c2:	fa1f fb8b 	uxth.w	fp, fp
   852c6:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   852ca:	45b9      	cmp	r9, r7
   852cc:	d904      	bls.n	852d8 <__udivdi3+0x1b4>
   852ce:	193f      	adds	r7, r7, r4
   852d0:	f105 33ff 	add.w	r3, r5, #4294967295
   852d4:	d362      	bcc.n	8539c <__udivdi3+0x278>
   852d6:	461d      	mov	r5, r3
   852d8:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   852dc:	fbac 2302 	umull	r2, r3, ip, r2
   852e0:	ebc9 0707 	rsb	r7, r9, r7
   852e4:	429f      	cmp	r7, r3
   852e6:	f04f 0500 	mov.w	r5, #0
   852ea:	d34a      	bcc.n	85382 <__udivdi3+0x25e>
   852ec:	d046      	beq.n	8537c <__udivdi3+0x258>
   852ee:	4662      	mov	r2, ip
   852f0:	462b      	mov	r3, r5
   852f2:	e75d      	b.n	851b0 <__udivdi3+0x8c>
   852f4:	4094      	lsls	r4, r2
   852f6:	f1c2 0920 	rsb	r9, r2, #32
   852fa:	fa21 fc09 	lsr.w	ip, r1, r9
   852fe:	4091      	lsls	r1, r2
   85300:	fa20 f909 	lsr.w	r9, r0, r9
   85304:	0c26      	lsrs	r6, r4, #16
   85306:	fbbc f8f6 	udiv	r8, ip, r6
   8530a:	fb06 cc18 	mls	ip, r6, r8, ip
   8530e:	b2a7      	uxth	r7, r4
   85310:	fb07 f308 	mul.w	r3, r7, r8
   85314:	ea49 0901 	orr.w	r9, r9, r1
   85318:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8531c:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   85320:	4563      	cmp	r3, ip
   85322:	fa00 f502 	lsl.w	r5, r0, r2
   85326:	d909      	bls.n	8533c <__udivdi3+0x218>
   85328:	eb1c 0c04 	adds.w	ip, ip, r4
   8532c:	f108 32ff 	add.w	r2, r8, #4294967295
   85330:	d23b      	bcs.n	853aa <__udivdi3+0x286>
   85332:	4563      	cmp	r3, ip
   85334:	d939      	bls.n	853aa <__udivdi3+0x286>
   85336:	f1a8 0802 	sub.w	r8, r8, #2
   8533a:	44a4      	add	ip, r4
   8533c:	ebc3 0c0c 	rsb	ip, r3, ip
   85340:	fbbc f3f6 	udiv	r3, ip, r6
   85344:	fb06 c113 	mls	r1, r6, r3, ip
   85348:	fb07 f203 	mul.w	r2, r7, r3
   8534c:	fa1f f989 	uxth.w	r9, r9
   85350:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   85354:	428a      	cmp	r2, r1
   85356:	d907      	bls.n	85368 <__udivdi3+0x244>
   85358:	1909      	adds	r1, r1, r4
   8535a:	f103 30ff 	add.w	r0, r3, #4294967295
   8535e:	d222      	bcs.n	853a6 <__udivdi3+0x282>
   85360:	428a      	cmp	r2, r1
   85362:	d920      	bls.n	853a6 <__udivdi3+0x282>
   85364:	3b02      	subs	r3, #2
   85366:	4421      	add	r1, r4
   85368:	1a89      	subs	r1, r1, r2
   8536a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8536e:	e743      	b.n	851f8 <__udivdi3+0xd4>
   85370:	463a      	mov	r2, r7
   85372:	e705      	b.n	85180 <__udivdi3+0x5c>
   85374:	4633      	mov	r3, r6
   85376:	e718      	b.n	851aa <__udivdi3+0x86>
   85378:	460a      	mov	r2, r1
   8537a:	e766      	b.n	8524a <__udivdi3+0x126>
   8537c:	40b0      	lsls	r0, r6
   8537e:	4290      	cmp	r0, r2
   85380:	d2b5      	bcs.n	852ee <__udivdi3+0x1ca>
   85382:	f10c 32ff 	add.w	r2, ip, #4294967295
   85386:	2300      	movs	r3, #0
   85388:	e712      	b.n	851b0 <__udivdi3+0x8c>
   8538a:	4633      	mov	r3, r6
   8538c:	4632      	mov	r2, r6
   8538e:	e70f      	b.n	851b0 <__udivdi3+0x8c>
   85390:	459a      	cmp	sl, r3
   85392:	d98d      	bls.n	852b0 <__udivdi3+0x18c>
   85394:	f1ac 0c02 	sub.w	ip, ip, #2
   85398:	4423      	add	r3, r4
   8539a:	e78a      	b.n	852b2 <__udivdi3+0x18e>
   8539c:	45b9      	cmp	r9, r7
   8539e:	d99a      	bls.n	852d6 <__udivdi3+0x1b2>
   853a0:	3d02      	subs	r5, #2
   853a2:	4427      	add	r7, r4
   853a4:	e798      	b.n	852d8 <__udivdi3+0x1b4>
   853a6:	4603      	mov	r3, r0
   853a8:	e7de      	b.n	85368 <__udivdi3+0x244>
   853aa:	4690      	mov	r8, r2
   853ac:	e7c6      	b.n	8533c <__udivdi3+0x218>
   853ae:	3802      	subs	r0, #2
   853b0:	4421      	add	r1, r4
   853b2:	e735      	b.n	85220 <__udivdi3+0xfc>

000853b4 <UnitySizeMask>:
   853b4:	00ff 0000 ffff 0000 ffff 0000 ffff ffff     ................
   853c4:	ffff ffff ffff ffff ffff ffff               ............

000853d0 <UnityStrOk>:
   853d0:	4b4f 0000                                   OK..

000853d4 <UnityStrSpacer>:
   853d4:	202e 0000                                   . ..

000853d8 <UnityStrWas>:
   853d8:	5720 7361 0020 0000                          Was ...

000853e0 <UnityStrFail>:
   853e0:	4146 4c49 0000 0000                         FAIL....

000853e8 <UnityStrExpected>:
   853e8:	4520 7078 6365 6574 2064 0000                Expected ..

000853f4 <UnityStrBreaker>:
   853f4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   85404:	2d2d 2d2d 2d2d 002d                         -------.

0008540c <UnityStrResultsFailures>:
   8540c:	4620 6961 756c 6572 2073 0000                Failures ..

00085418 <UnityStrResultsIgnored>:
   85418:	4920 6e67 726f 6465 0020 0000                Ignored ...

00085424 <UnityStrResultsTests>:
   85424:	5420 7365 7374 0020                          Tests .

0008542c <UnityStrPass>:
   8542c:	4150 5353 0000 0000 0001 0000 0002 0000     PASS............
   8543c:	0004 0000 0008 0000 0010 0000 0020 0000     ............ ...
   8544c:	0040 0000 0080 0000 0100 0000 0200 0000     @...............
   8545c:	0400 0000 2d2d 2520 0a73 000d 7241 7564     ....-- %s...Ardu
   8546c:	6e69 206f 7544 2f65 0058 0000 2d2d 4320     ino Due/X...-- C
   8547c:	6d6f 6970 656c 3a64 2520 2073 7325 2d20     ompiled: %s %s -
   8548c:	0a2d 000d 614d 2079 3732 3220 3130 0037     -...May 27 2017.
   8549c:	3531 313a 3a30 3135 0000 0000 2e2e 742f     15:10:51....../t
   854ac:	7365 7374 742f 7365 5f74 7770 2e6d 0063     ests/test_pwm.c.
   854bc:	7770 5f6d 6e65 6261 656c 0000 7770 5f6d     pwm_enable..pwm_
   854cc:	6964 6173 6c62 0065 7770 5f6d 7564 7974     disable.pwm_duty
   854dc:	0000 0000 0043 0000                         ....C...

000854e4 <_global_impure_ptr>:
   854e4:	0140 2007 3130 3332 3534 3736 3938 4241     @.. 0123456789AB
   854f4:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   85504:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   85514:	296c 0000                                   l)..

00085518 <zeroes.6721>:
   85518:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00085528 <blanks.6720>:
   85528:	2020 2020 2020 2020 2020 2020 2020 2020                     

00085538 <_init>:
   85538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8553a:	bf00      	nop
   8553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8553e:	bc08      	pop	{r3}
   85540:	469e      	mov	lr, r3
   85542:	4770      	bx	lr

00085544 <__init_array_start>:
   85544:	0008363d 	.word	0x0008363d

00085548 <__frame_dummy_init_array_entry>:
   85548:	00080119                                ....

0008554c <_fini>:
   8554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8554e:	bf00      	nop
   85550:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85552:	bc08      	pop	{r3}
   85554:	469e      	mov	lr, r3
   85556:	4770      	bx	lr

00085558 <__fini_array_start>:
   85558:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <xNextTaskUnblockTime>:
20070138:	0000ffff                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	000854e0 00000000 00000000 00000000     .T..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00084bb9                                .K..
