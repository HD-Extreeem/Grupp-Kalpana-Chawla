
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047ac  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000847ac  000847ac  0000c7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  000847b4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001cc  200709a4  00085158  000109a4  2**2
                  ALLOC
  4 .stack        00002000  20070b70  00085324  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000f970  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002976  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005156  00000000  00000000  00022d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b78  00000000  00000000  00027e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a30  00000000  00000000  000289dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019135  00000000  00000000  0002940c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011e66  00000000  00000000  00042541  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00061606  00000000  00000000  000543a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000022b0  00000000  00000000  000b59b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b70 	.word	0x20072b70
   80004:	00080e95 	.word	0x00080e95
   80008:	00080e91 	.word	0x00080e91
   8000c:	00080e91 	.word	0x00080e91
   80010:	00080e91 	.word	0x00080e91
   80014:	00080e91 	.word	0x00080e91
   80018:	00080e91 	.word	0x00080e91
	...
   8002c:	00080e91 	.word	0x00080e91
   80030:	00080e91 	.word	0x00080e91
   80034:	00000000 	.word	0x00000000
   80038:	00080e91 	.word	0x00080e91
   8003c:	00080e91 	.word	0x00080e91
   80040:	00080e91 	.word	0x00080e91
   80044:	00080e91 	.word	0x00080e91
   80048:	00080e91 	.word	0x00080e91
   8004c:	00080e91 	.word	0x00080e91
   80050:	00080e91 	.word	0x00080e91
   80054:	00080e91 	.word	0x00080e91
   80058:	00080e91 	.word	0x00080e91
   8005c:	00080e91 	.word	0x00080e91
   80060:	00080e91 	.word	0x00080e91
   80064:	00080e91 	.word	0x00080e91
   80068:	00000000 	.word	0x00000000
   8006c:	00080c11 	.word	0x00080c11
   80070:	00080c25 	.word	0x00080c25
   80074:	00080c39 	.word	0x00080c39
   80078:	00080c4d 	.word	0x00080c4d
	...
   80084:	00080381 	.word	0x00080381
   80088:	00080e91 	.word	0x00080e91
   8008c:	00080e91 	.word	0x00080e91
   80090:	00080e91 	.word	0x00080e91
   80094:	00080e91 	.word	0x00080e91
   80098:	00080e91 	.word	0x00080e91
   8009c:	00080e91 	.word	0x00080e91
   800a0:	00080e91 	.word	0x00080e91
   800a4:	00000000 	.word	0x00000000
   800a8:	00080e91 	.word	0x00080e91
   800ac:	00080e91 	.word	0x00080e91
   800b0:	00080e91 	.word	0x00080e91
   800b4:	00080e91 	.word	0x00080e91
   800b8:	00080e91 	.word	0x00080e91
   800bc:	00080e91 	.word	0x00080e91
   800c0:	00080e91 	.word	0x00080e91
   800c4:	00080e91 	.word	0x00080e91
   800c8:	00080e91 	.word	0x00080e91
   800cc:	00080e91 	.word	0x00080e91
   800d0:	00080e91 	.word	0x00080e91
   800d4:	00080e91 	.word	0x00080e91
   800d8:	00080e91 	.word	0x00080e91
   800dc:	00080e91 	.word	0x00080e91
   800e0:	00080e91 	.word	0x00080e91
   800e4:	00080e91 	.word	0x00080e91
   800e8:	00080e91 	.word	0x00080e91
   800ec:	00080e91 	.word	0x00080e91
   800f0:	00080e91 	.word	0x00080e91

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	000847b4 	.word	0x000847b4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000847b4 	.word	0x000847b4
   8013c:	200709a8 	.word	0x200709a8
   80140:	000847b4 	.word	0x000847b4
   80144:	00000000 	.word	0x00000000

00080148 <main>:
// int e=0;
// double kp = 2;
// uint16_t speed = 1700;

int main(void)
{
   80148:	b508      	push	{r3, lr}
	/* Initialize the SAM system */
	SystemInit();
   8014a:	4b0b      	ldr	r3, [pc, #44]	; (80178 <main+0x30>)
   8014c:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   8014e:	4b0b      	ldr	r3, [pc, #44]	; (8017c <main+0x34>)
   80150:	4798      	blx	r3
	configureConsole();
   80152:	4b0b      	ldr	r3, [pc, #44]	; (80180 <main+0x38>)
   80154:	4798      	blx	r3
	configInterrupts();
   80156:	4b0b      	ldr	r3, [pc, #44]	; (80184 <main+0x3c>)
   80158:	4798      	blx	r3
	PWM_init();
   8015a:	4b0b      	ldr	r3, [pc, #44]	; (80188 <main+0x40>)
   8015c:	4798      	blx	r3
	printf("Startar");
   8015e:	480b      	ldr	r0, [pc, #44]	; (8018c <main+0x44>)
   80160:	4b0b      	ldr	r3, [pc, #44]	; (80190 <main+0x48>)
   80162:	4798      	blx	r3
    delay_s(2);
   80164:	480b      	ldr	r0, [pc, #44]	; (80194 <main+0x4c>)
   80166:	4b0c      	ldr	r3, [pc, #48]	; (80198 <main+0x50>)
   80168:	4798      	blx	r3
	moveTo(100,1);
   8016a:	2064      	movs	r0, #100	; 0x64
   8016c:	2101      	movs	r1, #1
   8016e:	4b0b      	ldr	r3, [pc, #44]	; (8019c <main+0x54>)
   80170:	4798      	blx	r3


		

	
}
   80172:	2000      	movs	r0, #0
   80174:	bd08      	pop	{r3, pc}
   80176:	bf00      	nop
   80178:	2007000d 	.word	0x2007000d
   8017c:	000808a5 	.word	0x000808a5
   80180:	0008053d 	.word	0x0008053d
   80184:	0008060d 	.word	0x0008060d
   80188:	000807e9 	.word	0x000807e9
   8018c:	000846fc 	.word	0x000846fc
   80190:	000817b9 	.word	0x000817b9
   80194:	00b71b00 	.word	0x00b71b00
   80198:	20070001 	.word	0x20070001
   8019c:	000806b9 	.word	0x000806b9

000801a0 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   801a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801a4:	b083      	sub	sp, #12
   801a6:	4605      	mov	r5, r0
	while (len) {
   801a8:	4690      	mov	r8, r2
   801aa:	2a00      	cmp	r2, #0
   801ac:	d047      	beq.n	8023e <usart_serial_read_packet+0x9e>
   801ae:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801b0:	4f25      	ldr	r7, [pc, #148]	; (80248 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   801b2:	4c26      	ldr	r4, [pc, #152]	; (8024c <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801b4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80260 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   801b8:	f8df b094 	ldr.w	fp, [pc, #148]	; 80250 <usart_serial_read_packet+0xb0>
   801bc:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   801c0:	2300      	movs	r3, #0
   801c2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801c4:	4b22      	ldr	r3, [pc, #136]	; (80250 <usart_serial_read_packet+0xb0>)
   801c6:	429d      	cmp	r5, r3
   801c8:	d106      	bne.n	801d8 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   801ca:	4658      	mov	r0, fp
   801cc:	4649      	mov	r1, r9
   801ce:	4b21      	ldr	r3, [pc, #132]	; (80254 <usart_serial_read_packet+0xb4>)
   801d0:	4798      	blx	r3
   801d2:	2800      	cmp	r0, #0
   801d4:	d1f9      	bne.n	801ca <usart_serial_read_packet+0x2a>
   801d6:	e019      	b.n	8020c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801d8:	4b1f      	ldr	r3, [pc, #124]	; (80258 <usart_serial_read_packet+0xb8>)
   801da:	429d      	cmp	r5, r3
   801dc:	d109      	bne.n	801f2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   801de:	4699      	mov	r9, r3
   801e0:	4648      	mov	r0, r9
   801e2:	a901      	add	r1, sp, #4
   801e4:	47a0      	blx	r4
   801e6:	2800      	cmp	r0, #0
   801e8:	d1fa      	bne.n	801e0 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   801ea:	9b01      	ldr	r3, [sp, #4]
   801ec:	f806 3c01 	strb.w	r3, [r6, #-1]
   801f0:	e017      	b.n	80222 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   801f2:	4b1a      	ldr	r3, [pc, #104]	; (8025c <usart_serial_read_packet+0xbc>)
   801f4:	429d      	cmp	r5, r3
   801f6:	d109      	bne.n	8020c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   801f8:	4699      	mov	r9, r3
   801fa:	4648      	mov	r0, r9
   801fc:	a901      	add	r1, sp, #4
   801fe:	47a0      	blx	r4
   80200:	2800      	cmp	r0, #0
   80202:	d1fa      	bne.n	801fa <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80204:	9b01      	ldr	r3, [sp, #4]
   80206:	f806 3c01 	strb.w	r3, [r6, #-1]
   8020a:	e014      	b.n	80236 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8020c:	4555      	cmp	r5, sl
   8020e:	d108      	bne.n	80222 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80210:	4650      	mov	r0, sl
   80212:	a901      	add	r1, sp, #4
   80214:	47a0      	blx	r4
   80216:	2800      	cmp	r0, #0
   80218:	d1fa      	bne.n	80210 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   8021a:	9b01      	ldr	r3, [sp, #4]
   8021c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80220:	e009      	b.n	80236 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80222:	42bd      	cmp	r5, r7
   80224:	d107      	bne.n	80236 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80226:	4638      	mov	r0, r7
   80228:	a901      	add	r1, sp, #4
   8022a:	47a0      	blx	r4
   8022c:	2800      	cmp	r0, #0
   8022e:	d1fa      	bne.n	80226 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80230:	9b01      	ldr	r3, [sp, #4]
   80232:	f806 3c01 	strb.w	r3, [r6, #-1]
   80236:	3601      	adds	r6, #1
   80238:	f1b8 0801 	subs.w	r8, r8, #1
   8023c:	d1be      	bne.n	801bc <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8023e:	2000      	movs	r0, #0
   80240:	b003      	add	sp, #12
   80242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80246:	bf00      	nop
   80248:	400a4000 	.word	0x400a4000
   8024c:	00080369 	.word	0x00080369
   80250:	400e0800 	.word	0x400e0800
   80254:	00080341 	.word	0x00080341
   80258:	40098000 	.word	0x40098000
   8025c:	4009c000 	.word	0x4009c000
   80260:	400a0000 	.word	0x400a0000

00080264 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80268:	460c      	mov	r4, r1
   8026a:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   8026c:	b960      	cbnz	r0, 80288 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8026e:	2a00      	cmp	r2, #0
   80270:	dd0e      	ble.n	80290 <_read+0x2c>
   80272:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80274:	4e09      	ldr	r6, [pc, #36]	; (8029c <_read+0x38>)
   80276:	4d0a      	ldr	r5, [pc, #40]	; (802a0 <_read+0x3c>)
   80278:	6830      	ldr	r0, [r6, #0]
   8027a:	4621      	mov	r1, r4
   8027c:	682b      	ldr	r3, [r5, #0]
   8027e:	4798      	blx	r3
		ptr++;
   80280:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80282:	42bc      	cmp	r4, r7
   80284:	d1f8      	bne.n	80278 <_read+0x14>
   80286:	e006      	b.n	80296 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80288:	f04f 30ff 	mov.w	r0, #4294967295
   8028c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80290:	2000      	movs	r0, #0
   80292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80296:	4640      	mov	r0, r8
	}
	return nChars;
}
   80298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8029c:	20070b18 	.word	0x20070b18
   802a0:	20070b10 	.word	0x20070b10

000802a4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   802a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802a8:	460e      	mov	r6, r1
   802aa:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   802ac:	3801      	subs	r0, #1
   802ae:	2802      	cmp	r0, #2
   802b0:	d80f      	bhi.n	802d2 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   802b2:	b192      	cbz	r2, 802da <_write+0x36>
   802b4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802b6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 802f4 <_write+0x50>
   802ba:	4f0d      	ldr	r7, [pc, #52]	; (802f0 <_write+0x4c>)
   802bc:	f8d8 0000 	ldr.w	r0, [r8]
   802c0:	5d31      	ldrb	r1, [r6, r4]
   802c2:	683b      	ldr	r3, [r7, #0]
   802c4:	4798      	blx	r3
   802c6:	2800      	cmp	r0, #0
   802c8:	db0a      	blt.n	802e0 <_write+0x3c>
			return -1;
		}
		++nChars;
   802ca:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802cc:	42a5      	cmp	r5, r4
   802ce:	d1f5      	bne.n	802bc <_write+0x18>
   802d0:	e00a      	b.n	802e8 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   802d2:	f04f 30ff 	mov.w	r0, #4294967295
   802d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   802da:	2000      	movs	r0, #0
   802dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   802e0:	f04f 30ff 	mov.w	r0, #4294967295
   802e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   802e8:	4620      	mov	r0, r4
	}
	return nChars;
}
   802ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802ee:	bf00      	nop
   802f0:	20070b14 	.word	0x20070b14
   802f4:	20070b18 	.word	0x20070b18

000802f8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802f8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802fa:	23ac      	movs	r3, #172	; 0xac
   802fc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802fe:	680a      	ldr	r2, [r1, #0]
   80300:	684b      	ldr	r3, [r1, #4]
   80302:	fbb2 f3f3 	udiv	r3, r2, r3
   80306:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80308:	1e5c      	subs	r4, r3, #1
   8030a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8030e:	4294      	cmp	r4, r2
   80310:	d80a      	bhi.n	80328 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80312:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80314:	688b      	ldr	r3, [r1, #8]
   80316:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80318:	f240 2302 	movw	r3, #514	; 0x202
   8031c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80320:	2350      	movs	r3, #80	; 0x50
   80322:	6003      	str	r3, [r0, #0]

	return 0;
   80324:	2000      	movs	r0, #0
   80326:	e000      	b.n	8032a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80328:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8032a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8032e:	4770      	bx	lr

00080330 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80330:	6943      	ldr	r3, [r0, #20]
   80332:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80336:	bf1a      	itte	ne
   80338:	61c1      	strne	r1, [r0, #28]
	return 0;
   8033a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8033c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8033e:	4770      	bx	lr

00080340 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80340:	6943      	ldr	r3, [r0, #20]
   80342:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80346:	bf1d      	ittte	ne
   80348:	6983      	ldrne	r3, [r0, #24]
   8034a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8034c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8034e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80350:	4770      	bx	lr
   80352:	bf00      	nop

00080354 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80354:	6943      	ldr	r3, [r0, #20]
   80356:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8035a:	bf1d      	ittte	ne
   8035c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80360:	61c1      	strne	r1, [r0, #28]
	return 0;
   80362:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80364:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80366:	4770      	bx	lr

00080368 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80368:	6943      	ldr	r3, [r0, #20]
   8036a:	f013 0f01 	tst.w	r3, #1
   8036e:	d005      	beq.n	8037c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80370:	6983      	ldr	r3, [r0, #24]
   80372:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80376:	600b      	str	r3, [r1, #0]

	return 0;
   80378:	2000      	movs	r0, #0
   8037a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8037c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8037e:	4770      	bx	lr

00080380 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80380:	b500      	push	{lr}
   80382:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80384:	4813      	ldr	r0, [pc, #76]	; (803d4 <USART0_Handler+0x54>)
   80386:	f10d 0107 	add.w	r1, sp, #7
   8038a:	2201      	movs	r2, #1
   8038c:	4b12      	ldr	r3, [pc, #72]	; (803d8 <USART0_Handler+0x58>)
   8038e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80390:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80392:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80396:	2200      	movs	r2, #0
   80398:	4b10      	ldr	r3, [pc, #64]	; (803dc <USART0_Handler+0x5c>)
   8039a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   8039c:	4b10      	ldr	r3, [pc, #64]	; (803e0 <USART0_Handler+0x60>)
   8039e:	781a      	ldrb	r2, [r3, #0]
   803a0:	3201      	adds	r2, #1
   803a2:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   803a4:	4b0f      	ldr	r3, [pc, #60]	; (803e4 <USART0_Handler+0x64>)
   803a6:	781b      	ldrb	r3, [r3, #0]
   803a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803ac:	4a0e      	ldr	r2, [pc, #56]	; (803e8 <USART0_Handler+0x68>)
   803ae:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   803b0:	2b9b      	cmp	r3, #155	; 0x9b
   803b2:	d103      	bne.n	803bc <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   803b4:	2200      	movs	r2, #0
   803b6:	4b0b      	ldr	r3, [pc, #44]	; (803e4 <USART0_Handler+0x64>)
   803b8:	701a      	strb	r2, [r3, #0]
   803ba:	e002      	b.n	803c2 <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   803bc:	3301      	adds	r3, #1
   803be:	4a09      	ldr	r2, [pc, #36]	; (803e4 <USART0_Handler+0x64>)
   803c0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   803c2:	2201      	movs	r2, #1
   803c4:	4b05      	ldr	r3, [pc, #20]	; (803dc <USART0_Handler+0x5c>)
   803c6:	701a      	strb	r2, [r3, #0]
   803c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   803cc:	b662      	cpsie	i
}
   803ce:	b003      	add	sp, #12
   803d0:	f85d fb04 	ldr.w	pc, [sp], #4
   803d4:	40098000 	.word	0x40098000
   803d8:	000801a1 	.word	0x000801a1
   803dc:	20070138 	.word	0x20070138
   803e0:	20070a5d 	.word	0x20070a5d
   803e4:	20070a5c 	.word	0x20070a5c
   803e8:	200709c0 	.word	0x200709c0

000803ec <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   803ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   803ee:	b083      	sub	sp, #12
   803f0:	4604      	mov	r4, r0
   803f2:	460d      	mov	r5, r1
	uint32_t val = 0;
   803f4:	2300      	movs	r3, #0
   803f6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   803f8:	4b1f      	ldr	r3, [pc, #124]	; (80478 <usart_serial_getchar+0x8c>)
   803fa:	4298      	cmp	r0, r3
   803fc:	d107      	bne.n	8040e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   803fe:	461f      	mov	r7, r3
   80400:	4e1e      	ldr	r6, [pc, #120]	; (8047c <usart_serial_getchar+0x90>)
   80402:	4638      	mov	r0, r7
   80404:	4629      	mov	r1, r5
   80406:	47b0      	blx	r6
   80408:	2800      	cmp	r0, #0
   8040a:	d1fa      	bne.n	80402 <usart_serial_getchar+0x16>
   8040c:	e019      	b.n	80442 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8040e:	4b1c      	ldr	r3, [pc, #112]	; (80480 <usart_serial_getchar+0x94>)
   80410:	4298      	cmp	r0, r3
   80412:	d109      	bne.n	80428 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80414:	461f      	mov	r7, r3
   80416:	4e1b      	ldr	r6, [pc, #108]	; (80484 <usart_serial_getchar+0x98>)
   80418:	4638      	mov	r0, r7
   8041a:	a901      	add	r1, sp, #4
   8041c:	47b0      	blx	r6
   8041e:	2800      	cmp	r0, #0
   80420:	d1fa      	bne.n	80418 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80422:	9b01      	ldr	r3, [sp, #4]
   80424:	702b      	strb	r3, [r5, #0]
   80426:	e019      	b.n	8045c <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80428:	4b17      	ldr	r3, [pc, #92]	; (80488 <usart_serial_getchar+0x9c>)
   8042a:	4298      	cmp	r0, r3
   8042c:	d109      	bne.n	80442 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8042e:	461e      	mov	r6, r3
   80430:	4c14      	ldr	r4, [pc, #80]	; (80484 <usart_serial_getchar+0x98>)
   80432:	4630      	mov	r0, r6
   80434:	a901      	add	r1, sp, #4
   80436:	47a0      	blx	r4
   80438:	2800      	cmp	r0, #0
   8043a:	d1fa      	bne.n	80432 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   8043c:	9b01      	ldr	r3, [sp, #4]
   8043e:	702b      	strb	r3, [r5, #0]
   80440:	e018      	b.n	80474 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80442:	4b12      	ldr	r3, [pc, #72]	; (8048c <usart_serial_getchar+0xa0>)
   80444:	429c      	cmp	r4, r3
   80446:	d109      	bne.n	8045c <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80448:	461e      	mov	r6, r3
   8044a:	4c0e      	ldr	r4, [pc, #56]	; (80484 <usart_serial_getchar+0x98>)
   8044c:	4630      	mov	r0, r6
   8044e:	a901      	add	r1, sp, #4
   80450:	47a0      	blx	r4
   80452:	2800      	cmp	r0, #0
   80454:	d1fa      	bne.n	8044c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80456:	9b01      	ldr	r3, [sp, #4]
   80458:	702b      	strb	r3, [r5, #0]
   8045a:	e00b      	b.n	80474 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8045c:	4b0c      	ldr	r3, [pc, #48]	; (80490 <usart_serial_getchar+0xa4>)
   8045e:	429c      	cmp	r4, r3
   80460:	d108      	bne.n	80474 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80462:	461e      	mov	r6, r3
   80464:	4c07      	ldr	r4, [pc, #28]	; (80484 <usart_serial_getchar+0x98>)
   80466:	4630      	mov	r0, r6
   80468:	a901      	add	r1, sp, #4
   8046a:	47a0      	blx	r4
   8046c:	2800      	cmp	r0, #0
   8046e:	d1fa      	bne.n	80466 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80470:	9b01      	ldr	r3, [sp, #4]
   80472:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80474:	b003      	add	sp, #12
   80476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80478:	400e0800 	.word	0x400e0800
   8047c:	00080341 	.word	0x00080341
   80480:	40098000 	.word	0x40098000
   80484:	00080369 	.word	0x00080369
   80488:	4009c000 	.word	0x4009c000
   8048c:	400a0000 	.word	0x400a0000
   80490:	400a4000 	.word	0x400a4000

00080494 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80494:	b570      	push	{r4, r5, r6, lr}
   80496:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80498:	4b21      	ldr	r3, [pc, #132]	; (80520 <usart_serial_putchar+0x8c>)
   8049a:	4298      	cmp	r0, r3
   8049c:	d107      	bne.n	804ae <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8049e:	461e      	mov	r6, r3
   804a0:	4d20      	ldr	r5, [pc, #128]	; (80524 <usart_serial_putchar+0x90>)
   804a2:	4630      	mov	r0, r6
   804a4:	4621      	mov	r1, r4
   804a6:	47a8      	blx	r5
   804a8:	2800      	cmp	r0, #0
   804aa:	d1fa      	bne.n	804a2 <usart_serial_putchar+0xe>
   804ac:	e02b      	b.n	80506 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   804ae:	4b1e      	ldr	r3, [pc, #120]	; (80528 <usart_serial_putchar+0x94>)
   804b0:	4298      	cmp	r0, r3
   804b2:	d107      	bne.n	804c4 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   804b4:	461e      	mov	r6, r3
   804b6:	4d1d      	ldr	r5, [pc, #116]	; (8052c <usart_serial_putchar+0x98>)
   804b8:	4630      	mov	r0, r6
   804ba:	4621      	mov	r1, r4
   804bc:	47a8      	blx	r5
   804be:	2800      	cmp	r0, #0
   804c0:	d1fa      	bne.n	804b8 <usart_serial_putchar+0x24>
   804c2:	e022      	b.n	8050a <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   804c4:	4b1a      	ldr	r3, [pc, #104]	; (80530 <usart_serial_putchar+0x9c>)
   804c6:	4298      	cmp	r0, r3
   804c8:	d107      	bne.n	804da <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   804ca:	461e      	mov	r6, r3
   804cc:	4d17      	ldr	r5, [pc, #92]	; (8052c <usart_serial_putchar+0x98>)
   804ce:	4630      	mov	r0, r6
   804d0:	4621      	mov	r1, r4
   804d2:	47a8      	blx	r5
   804d4:	2800      	cmp	r0, #0
   804d6:	d1fa      	bne.n	804ce <usart_serial_putchar+0x3a>
   804d8:	e019      	b.n	8050e <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   804da:	4b16      	ldr	r3, [pc, #88]	; (80534 <usart_serial_putchar+0xa0>)
   804dc:	4298      	cmp	r0, r3
   804de:	d107      	bne.n	804f0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   804e0:	461e      	mov	r6, r3
   804e2:	4d12      	ldr	r5, [pc, #72]	; (8052c <usart_serial_putchar+0x98>)
   804e4:	4630      	mov	r0, r6
   804e6:	4621      	mov	r1, r4
   804e8:	47a8      	blx	r5
   804ea:	2800      	cmp	r0, #0
   804ec:	d1fa      	bne.n	804e4 <usart_serial_putchar+0x50>
   804ee:	e010      	b.n	80512 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   804f0:	4b11      	ldr	r3, [pc, #68]	; (80538 <usart_serial_putchar+0xa4>)
   804f2:	4298      	cmp	r0, r3
   804f4:	d10f      	bne.n	80516 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   804f6:	461e      	mov	r6, r3
   804f8:	4d0c      	ldr	r5, [pc, #48]	; (8052c <usart_serial_putchar+0x98>)
   804fa:	4630      	mov	r0, r6
   804fc:	4621      	mov	r1, r4
   804fe:	47a8      	blx	r5
   80500:	2800      	cmp	r0, #0
   80502:	d1fa      	bne.n	804fa <usart_serial_putchar+0x66>
   80504:	e009      	b.n	8051a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80506:	2001      	movs	r0, #1
   80508:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8050a:	2001      	movs	r0, #1
   8050c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8050e:	2001      	movs	r0, #1
   80510:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80512:	2001      	movs	r0, #1
   80514:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80516:	2000      	movs	r0, #0
   80518:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8051a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8051c:	bd70      	pop	{r4, r5, r6, pc}
   8051e:	bf00      	nop
   80520:	400e0800 	.word	0x400e0800
   80524:	00080331 	.word	0x00080331
   80528:	40098000 	.word	0x40098000
   8052c:	00080355 	.word	0x00080355
   80530:	4009c000 	.word	0x4009c000
   80534:	400a0000 	.word	0x400a0000
   80538:	400a4000 	.word	0x400a4000

0008053c <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   8053c:	b530      	push	{r4, r5, lr}
   8053e:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80540:	2008      	movs	r0, #8
   80542:	4d13      	ldr	r5, [pc, #76]	; (80590 <configureConsole+0x54>)
   80544:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80546:	4c13      	ldr	r4, [pc, #76]	; (80594 <configureConsole+0x58>)
   80548:	4b13      	ldr	r3, [pc, #76]	; (80598 <configureConsole+0x5c>)
   8054a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8054c:	4a13      	ldr	r2, [pc, #76]	; (8059c <configureConsole+0x60>)
   8054e:	4b14      	ldr	r3, [pc, #80]	; (805a0 <configureConsole+0x64>)
   80550:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80552:	4a14      	ldr	r2, [pc, #80]	; (805a4 <configureConsole+0x68>)
   80554:	4b14      	ldr	r3, [pc, #80]	; (805a8 <configureConsole+0x6c>)
   80556:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80558:	4b14      	ldr	r3, [pc, #80]	; (805ac <configureConsole+0x70>)
   8055a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8055c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80560:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80562:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80566:	9303      	str	r3, [sp, #12]
   80568:	2008      	movs	r0, #8
   8056a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8056c:	4620      	mov	r0, r4
   8056e:	a901      	add	r1, sp, #4
   80570:	4b0f      	ldr	r3, [pc, #60]	; (805b0 <configureConsole+0x74>)
   80572:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80574:	4d0f      	ldr	r5, [pc, #60]	; (805b4 <configureConsole+0x78>)
   80576:	682b      	ldr	r3, [r5, #0]
   80578:	6898      	ldr	r0, [r3, #8]
   8057a:	2100      	movs	r1, #0
   8057c:	4c0e      	ldr	r4, [pc, #56]	; (805b8 <configureConsole+0x7c>)
   8057e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80580:	682b      	ldr	r3, [r5, #0]
   80582:	6858      	ldr	r0, [r3, #4]
   80584:	2100      	movs	r1, #0
   80586:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   80588:	2000      	movs	r0, #0
   8058a:	b005      	add	sp, #20
   8058c:	bd30      	pop	{r4, r5, pc}
   8058e:	bf00      	nop
   80590:	00080c61 	.word	0x00080c61
   80594:	400e0800 	.word	0x400e0800
   80598:	20070b18 	.word	0x20070b18
   8059c:	00080495 	.word	0x00080495
   805a0:	20070b14 	.word	0x20070b14
   805a4:	000803ed 	.word	0x000803ed
   805a8:	20070b10 	.word	0x20070b10
   805ac:	0501bd00 	.word	0x0501bd00
   805b0:	000802f9 	.word	0x000802f9
   805b4:	20070568 	.word	0x20070568
   805b8:	00081875 	.word	0x00081875

000805bc <pin12_edge_handler>:
	

}

// Handler which calls when pin 53 is toggle.  
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   805bc:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   805be:	4806      	ldr	r0, [pc, #24]	; (805d8 <pin12_edge_handler+0x1c>)
   805c0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   805c8:	4b04      	ldr	r3, [pc, #16]	; (805dc <pin12_edge_handler+0x20>)
   805ca:	4798      	blx	r3
   805cc:	b118      	cbz	r0, 805d6 <pin12_edge_handler+0x1a>
		//increase the counter value
		counter_2++;
   805ce:	4b04      	ldr	r3, [pc, #16]	; (805e0 <pin12_edge_handler+0x24>)
   805d0:	881a      	ldrh	r2, [r3, #0]
   805d2:	3201      	adds	r2, #1
   805d4:	801a      	strh	r2, [r3, #0]
   805d6:	bd08      	pop	{r3, pc}
   805d8:	400e1200 	.word	0x400e1200
   805dc:	00080915 	.word	0x00080915
   805e0:	20070a60 	.word	0x20070a60

000805e4 <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}	
}

// Handler which calls when pin 51 is toggle. 
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   805e4:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   805e6:	4806      	ldr	r0, [pc, #24]	; (80600 <pin14_edge_handler+0x1c>)
   805e8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   805f0:	4b04      	ldr	r3, [pc, #16]	; (80604 <pin14_edge_handler+0x20>)
   805f2:	4798      	blx	r3
   805f4:	b118      	cbz	r0, 805fe <pin14_edge_handler+0x1a>
	//Increase the counter value
			counter_1++;
   805f6:	4b04      	ldr	r3, [pc, #16]	; (80608 <pin14_edge_handler+0x24>)
   805f8:	881a      	ldrh	r2, [r3, #0]
   805fa:	3201      	adds	r2, #1
   805fc:	801a      	strh	r2, [r3, #0]
   805fe:	bd08      	pop	{r3, pc}
   80600:	400e1000 	.word	0x400e1000
   80604:	00080915 	.word	0x00080915
   80608:	20070a5e 	.word	0x20070a5e

0008060c <configInterrupts>:
// Counter for Arlo Robot encoders for right and left wheel
 uint16_t counter_1 = 0;
 uint16_t counter_2 = 0;


void configInterrupts(void){
   8060c:	b570      	push	{r4, r5, r6, lr}
   8060e:	b082      	sub	sp, #8
	
	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   80610:	200c      	movs	r0, #12
   80612:	4c1a      	ldr	r4, [pc, #104]	; (8067c <configInterrupts+0x70>)
   80614:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);	
   80616:	200d      	movs	r0, #13
   80618:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   8061a:	4d19      	ldr	r5, [pc, #100]	; (80680 <configInterrupts+0x74>)
   8061c:	4628      	mov	r0, r5
   8061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80622:	2201      	movs	r2, #1
   80624:	4e17      	ldr	r6, [pc, #92]	; (80684 <configInterrupts+0x78>)
   80626:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   80628:	4c17      	ldr	r4, [pc, #92]	; (80688 <configInterrupts+0x7c>)
   8062a:	4620      	mov	r0, r4
   8062c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80630:	2201      	movs	r2, #1
   80632:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   80634:	4b15      	ldr	r3, [pc, #84]	; (8068c <configInterrupts+0x80>)
   80636:	9300      	str	r3, [sp, #0]
   80638:	4628      	mov	r0, r5
   8063a:	210d      	movs	r1, #13
   8063c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80640:	2340      	movs	r3, #64	; 0x40
   80642:	4e13      	ldr	r6, [pc, #76]	; (80690 <configInterrupts+0x84>)
   80644:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   80646:	4b13      	ldr	r3, [pc, #76]	; (80694 <configInterrupts+0x88>)
   80648:	9300      	str	r3, [sp, #0]
   8064a:	4620      	mov	r0, r4
   8064c:	210c      	movs	r1, #12
   8064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80652:	2340      	movs	r3, #64	; 0x40
   80654:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   80656:	4628      	mov	r0, r5
   80658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8065c:	4d0e      	ldr	r5, [pc, #56]	; (80698 <configInterrupts+0x8c>)
   8065e:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   80660:	4620      	mov	r0, r4
   80662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80666:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80668:	4b0c      	ldr	r3, [pc, #48]	; (8069c <configInterrupts+0x90>)
   8066a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8066e:	601a      	str	r2, [r3, #0]
   80670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80674:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);
	

}
   80676:	b002      	add	sp, #8
   80678:	bd70      	pop	{r4, r5, r6, pc}
   8067a:	bf00      	nop
   8067c:	00080c61 	.word	0x00080c61
   80680:	400e1200 	.word	0x400e1200
   80684:	0008096d 	.word	0x0008096d
   80688:	400e1000 	.word	0x400e1000
   8068c:	000805bd 	.word	0x000805bd
   80690:	00080bd5 	.word	0x00080bd5
   80694:	000805e5 	.word	0x000805e5
   80698:	000809f9 	.word	0x000809f9
   8069c:	e000e100 	.word	0xe000e100

000806a0 <reset_Counter>:
			//printf("\n c2 = %d",counter_2);
	}
}

void reset_Counter(void){
	counter_1=0;
   806a0:	2300      	movs	r3, #0
   806a2:	4a02      	ldr	r2, [pc, #8]	; (806ac <reset_Counter+0xc>)
   806a4:	8013      	strh	r3, [r2, #0]
	counter_2=0;
   806a6:	4a02      	ldr	r2, [pc, #8]	; (806b0 <reset_Counter+0x10>)
   806a8:	8013      	strh	r3, [r2, #0]
   806aa:	4770      	bx	lr
   806ac:	20070a5e 	.word	0x20070a5e
   806b0:	20070a60 	.word	0x20070a60
   806b4:	00000000 	.word	0x00000000

000806b8 <moveTo>:





void moveTo (int distance, int direktion){
   806b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t totalPulses=distance/1.35;
   806bc:	4b1c      	ldr	r3, [pc, #112]	; (80730 <moveTo+0x78>)
   806be:	4798      	blx	r3
   806c0:	a319      	add	r3, pc, #100	; (adr r3, 80728 <moveTo+0x70>)
   806c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   806c6:	4c1b      	ldr	r4, [pc, #108]	; (80734 <moveTo+0x7c>)
   806c8:	47a0      	blx	r4
   806ca:	4b1b      	ldr	r3, [pc, #108]	; (80738 <moveTo+0x80>)
   806cc:	4798      	blx	r3
   806ce:	b284      	uxth	r4, r0
	int measurementValue;
	int controlValue;
	int kp=5;
	int checkValue=-4;
	
	reset_Counter();
   806d0:	4b1a      	ldr	r3, [pc, #104]	; (8073c <moveTo+0x84>)
   806d2:	4798      	blx	r3
	int error=0;
	int referenceValue=0;
	int measurementValue;
	int controlValue;
	int kp=5;
	int checkValue=-4;
   806d4:	f06f 0203 	mvn.w	r2, #3

void moveTo (int distance, int direktion){
    uint16_t totalPulses=distance/1.35;
	uint16_t speed = 1650;
	int error=0;
	int referenceValue=0;
   806d8:	f04f 0c00 	mov.w	ip, #0
	reset_Counter();
	if ( direktion!=1 || direktion!=-1 )
	{
		direktion=1;
	}
	while (counter_1 <= totalPulses)
   806dc:	4e18      	ldr	r6, [pc, #96]	; (80740 <moveTo+0x88>)
//while(1)

{
if (((counter_1+counter_2) - checkValue) >= 4)
   806de:	4d19      	ldr	r5, [pc, #100]	; (80744 <moveTo+0x8c>)
	{
			measurementValue = (counter_2-counter_1);
			error = (referenceValue - measurementValue);
			controlValue = (kp*error);
			rightWheel((speed+controlValue));
   806e0:	4f19      	ldr	r7, [pc, #100]	; (80748 <moveTo+0x90>)
   806e2:	e017      	b.n	80714 <moveTo+0x5c>
	}
	while (counter_1 <= totalPulses)
//while(1)

{
if (((counter_1+counter_2) - checkValue) >= 4)
   806e4:	2a03      	cmp	r2, #3
   806e6:	dd19      	ble.n	8071c <moveTo+0x64>
	{
			measurementValue = (counter_2-counter_1);
   806e8:	1acb      	subs	r3, r1, r3
			error = (referenceValue - measurementValue);
   806ea:	ebc3 080c 	rsb	r8, r3, ip
			controlValue = (kp*error);
   806ee:	eb08 0988 	add.w	r9, r8, r8, lsl #2
			rightWheel((speed+controlValue));
   806f2:	f209 6072 	addw	r0, r9, #1650	; 0x672
   806f6:	47b8      	blx	r7
			leftWheel((speed-controlValue));
   806f8:	f5c9 60ce 	rsb	r0, r9, #1648	; 0x670
   806fc:	3002      	adds	r0, #2
   806fe:	4b13      	ldr	r3, [pc, #76]	; (8074c <moveTo+0x94>)
   80700:	4798      	blx	r3
			referenceValue=(error*-1)/2;
   80702:	f1c8 0800 	rsb	r8, r8, #0
   80706:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   8070a:	ea4f 0c68 	mov.w	ip, r8, asr #1
			//delay_us(46200*3);
			checkValue=counter_1+counter_2;
   8070e:	8832      	ldrh	r2, [r6, #0]
   80710:	882b      	ldrh	r3, [r5, #0]
   80712:	441a      	add	r2, r3
	reset_Counter();
	if ( direktion!=1 || direktion!=-1 )
	{
		direktion=1;
	}
	while (counter_1 <= totalPulses)
   80714:	8833      	ldrh	r3, [r6, #0]
//while(1)

{
if (((counter_1+counter_2) - checkValue) >= 4)
   80716:	8829      	ldrh	r1, [r5, #0]
   80718:	1858      	adds	r0, r3, r1
   8071a:	1a82      	subs	r2, r0, r2
	reset_Counter();
	if ( direktion!=1 || direktion!=-1 )
	{
		direktion=1;
	}
	while (counter_1 <= totalPulses)
   8071c:	429c      	cmp	r4, r3
   8071e:	d2e1      	bcs.n	806e4 <moveTo+0x2c>
			referenceValue=(error*-1)/2;
			//delay_us(46200*3);
			checkValue=counter_1+counter_2;
	}
	}
}
   80720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80724:	f3af 8000 	nop.w
   80728:	9999999a 	.word	0x9999999a
   8072c:	3ff59999 	.word	0x3ff59999
   80730:	00081239 	.word	0x00081239
   80734:	00081559 	.word	0x00081559
   80738:	00081729 	.word	0x00081729
   8073c:	000806a1 	.word	0x000806a1
   80740:	20070a5e 	.word	0x20070a5e
   80744:	20070a60 	.word	0x20070a60
   80748:	00080875 	.word	0x00080875
   8074c:	00080845 	.word	0x00080845

00080750 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   80750:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   80752:	2055      	movs	r0, #85	; 0x55
   80754:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80758:	4b0b      	ldr	r3, [pc, #44]	; (80788 <initPin21+0x38>)
   8075a:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   8075c:	4b0b      	ldr	r3, [pc, #44]	; (8078c <initPin21+0x3c>)
   8075e:	2404      	movs	r4, #4
   80760:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80762:	220b      	movs	r2, #11
   80764:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   80766:	2200      	movs	r2, #0
   80768:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   8076a:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 7500;
   8076c:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80770:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   80772:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   80774:	4d06      	ldr	r5, [pc, #24]	; (80790 <initPin21+0x40>)
   80776:	4628      	mov	r0, r5
   80778:	4619      	mov	r1, r3
   8077a:	4b06      	ldr	r3, [pc, #24]	; (80794 <initPin21+0x44>)
   8077c:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   8077e:	4628      	mov	r0, r5
   80780:	4621      	mov	r1, r4
   80782:	4b05      	ldr	r3, [pc, #20]	; (80798 <initPin21+0x48>)
   80784:	4798      	blx	r3
   80786:	bd38      	pop	{r3, r4, r5, pc}
   80788:	00080a09 	.word	0x00080a09
   8078c:	20070b44 	.word	0x20070b44
   80790:	40094000 	.word	0x40094000
   80794:	00080d51 	.word	0x00080d51
   80798:	00080e79 	.word	0x00080e79

0008079c <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   8079c:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   8079e:	2056      	movs	r0, #86	; 0x56
   807a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807a4:	4b0b      	ldr	r3, [pc, #44]	; (807d4 <initPin22+0x38>)
   807a6:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   807a8:	4b0b      	ldr	r3, [pc, #44]	; (807d8 <initPin22+0x3c>)
   807aa:	2405      	movs	r4, #5
   807ac:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   807ae:	220b      	movs	r2, #11
   807b0:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   807b2:	2200      	movs	r2, #0
   807b4:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   807b6:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 7500;
   807b8:	f641 514c 	movw	r1, #7500	; 0x1d4c
   807bc:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   807be:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   807c0:	4d06      	ldr	r5, [pc, #24]	; (807dc <initPin22+0x40>)
   807c2:	4628      	mov	r0, r5
   807c4:	4619      	mov	r1, r3
   807c6:	4b06      	ldr	r3, [pc, #24]	; (807e0 <initPin22+0x44>)
   807c8:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   807ca:	4628      	mov	r0, r5
   807cc:	4621      	mov	r1, r4
   807ce:	4b05      	ldr	r3, [pc, #20]	; (807e4 <initPin22+0x48>)
   807d0:	4798      	blx	r3
   807d2:	bd38      	pop	{r3, r4, r5, pc}
   807d4:	00080a09 	.word	0x00080a09
   807d8:	20070b1c 	.word	0x20070b1c
   807dc:	40094000 	.word	0x40094000
   807e0:	00080d51 	.word	0x00080d51
   807e4:	00080e79 	.word	0x00080e79

000807e8 <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   807e8:	b530      	push	{r4, r5, lr}
   807ea:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   807ec:	2024      	movs	r0, #36	; 0x24
   807ee:	4b0d      	ldr	r3, [pc, #52]	; (80824 <PWM_init+0x3c>)
   807f0:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   807f2:	4c0d      	ldr	r4, [pc, #52]	; (80828 <PWM_init+0x40>)
   807f4:	4620      	mov	r0, r4
   807f6:	2104      	movs	r1, #4
   807f8:	4d0c      	ldr	r5, [pc, #48]	; (8082c <PWM_init+0x44>)
   807fa:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   807fc:	4620      	mov	r0, r4
   807fe:	2105      	movs	r1, #5
   80800:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   80802:	4b0b      	ldr	r3, [pc, #44]	; (80830 <PWM_init+0x48>)
   80804:	9301      	str	r3, [sp, #4]
   80806:	2300      	movs	r3, #0
   80808:	9302      	str	r3, [sp, #8]
   8080a:	4b0a      	ldr	r3, [pc, #40]	; (80834 <PWM_init+0x4c>)
   8080c:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   8080e:	4620      	mov	r0, r4
   80810:	a901      	add	r1, sp, #4
   80812:	4b09      	ldr	r3, [pc, #36]	; (80838 <PWM_init+0x50>)
   80814:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   80816:	4b09      	ldr	r3, [pc, #36]	; (8083c <PWM_init+0x54>)
   80818:	4798      	blx	r3
	initPin22();
   8081a:	4b09      	ldr	r3, [pc, #36]	; (80840 <PWM_init+0x58>)
   8081c:	4798      	blx	r3
	
}
   8081e:	b005      	add	sp, #20
   80820:	bd30      	pop	{r4, r5, pc}
   80822:	bf00      	nop
   80824:	00080c61 	.word	0x00080c61
   80828:	40094000 	.word	0x40094000
   8082c:	00080e85 	.word	0x00080e85
   80830:	000f4240 	.word	0x000f4240
   80834:	0501bd00 	.word	0x0501bd00
   80838:	00080d11 	.word	0x00080d11
   8083c:	00080751 	.word	0x00080751
   80840:	0008079d 	.word	0x0008079d

00080844 <leftWheel>:
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
}
 /* This method changes the duty cycle of PWM signal on pin 9. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void leftWheel(uint32_t duty){
   80844:	b508      	push	{r3, lr}
	if(duty<800){
   80846:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   8084a:	d305      	bcc.n	80858 <leftWheel+0x14>
   8084c:	f640 0298 	movw	r2, #2200	; 0x898
   80850:	4290      	cmp	r0, r2
   80852:	bf38      	it	cc
   80854:	4602      	movcc	r2, r0
   80856:	e001      	b.n	8085c <leftWheel+0x18>
		duty=800;
   80858:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_21, duty );
   8085c:	4802      	ldr	r0, [pc, #8]	; (80868 <leftWheel+0x24>)
   8085e:	4903      	ldr	r1, [pc, #12]	; (8086c <leftWheel+0x28>)
   80860:	4b03      	ldr	r3, [pc, #12]	; (80870 <leftWheel+0x2c>)
   80862:	4798      	blx	r3
   80864:	bd08      	pop	{r3, pc}
   80866:	bf00      	nop
   80868:	40094000 	.word	0x40094000
   8086c:	20070b44 	.word	0x20070b44
   80870:	00080e55 	.word	0x00080e55

00080874 <rightWheel>:
}

 /* This method changes the duty cycle of PWM signal on pin 8. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void rightWheel(uint32_t duty){
   80874:	b508      	push	{r3, lr}
	
	if(duty<800){
   80876:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   8087a:	d305      	bcc.n	80888 <rightWheel+0x14>
   8087c:	f640 0298 	movw	r2, #2200	; 0x898
   80880:	4290      	cmp	r0, r2
   80882:	bf38      	it	cc
   80884:	4602      	movcc	r2, r0
   80886:	e001      	b.n	8088c <rightWheel+0x18>
		duty=800;
   80888:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   8088c:	4802      	ldr	r0, [pc, #8]	; (80898 <rightWheel+0x24>)
   8088e:	4903      	ldr	r1, [pc, #12]	; (8089c <rightWheel+0x28>)
   80890:	4b03      	ldr	r3, [pc, #12]	; (808a0 <rightWheel+0x2c>)
   80892:	4798      	blx	r3
   80894:	bd08      	pop	{r3, pc}
   80896:	bf00      	nop
   80898:	40094000 	.word	0x40094000
   8089c:	20070b1c 	.word	0x20070b1c
   808a0:	00080e55 	.word	0x00080e55

000808a4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   808a4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   808a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   808aa:	4b13      	ldr	r3, [pc, #76]	; (808f8 <board_init+0x54>)
   808ac:	605a      	str	r2, [r3, #4]
   808ae:	200b      	movs	r0, #11
   808b0:	4c12      	ldr	r4, [pc, #72]	; (808fc <board_init+0x58>)
   808b2:	47a0      	blx	r4
   808b4:	200c      	movs	r0, #12
   808b6:	47a0      	blx	r4
   808b8:	200d      	movs	r0, #13
   808ba:	47a0      	blx	r4
   808bc:	200e      	movs	r0, #14
   808be:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   808c0:	203b      	movs	r0, #59	; 0x3b
   808c2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808c6:	4c0e      	ldr	r4, [pc, #56]	; (80900 <board_init+0x5c>)
   808c8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   808ca:	2055      	movs	r0, #85	; 0x55
   808cc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808d0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   808d2:	2056      	movs	r0, #86	; 0x56
   808d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808d8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   808da:	2068      	movs	r0, #104	; 0x68
   808dc:	4909      	ldr	r1, [pc, #36]	; (80904 <board_init+0x60>)
   808de:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   808e0:	205c      	movs	r0, #92	; 0x5c
   808e2:	4909      	ldr	r1, [pc, #36]	; (80908 <board_init+0x64>)
   808e4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   808e6:	4809      	ldr	r0, [pc, #36]	; (8090c <board_init+0x68>)
   808e8:	f44f 7140 	mov.w	r1, #768	; 0x300
   808ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   808f0:	4b07      	ldr	r3, [pc, #28]	; (80910 <board_init+0x6c>)
   808f2:	4798      	blx	r3
   808f4:	bd10      	pop	{r4, pc}
   808f6:	bf00      	nop
   808f8:	400e1a50 	.word	0x400e1a50
   808fc:	00080c61 	.word	0x00080c61
   80900:	00080a09 	.word	0x00080a09
   80904:	28000079 	.word	0x28000079
   80908:	28000001 	.word	0x28000001
   8090c:	400e0e00 	.word	0x400e0e00
   80910:	00080add 	.word	0x00080add

00080914 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80914:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80918:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   8091c:	bf0c      	ite	eq
   8091e:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   80920:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   80922:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   80924:	bf0c      	ite	eq
   80926:	2000      	moveq	r0, #0
   80928:	2001      	movne	r0, #1
   8092a:	4770      	bx	lr

0008092c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8092c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8092e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80932:	d016      	beq.n	80962 <pio_set_peripheral+0x36>
   80934:	d804      	bhi.n	80940 <pio_set_peripheral+0x14>
   80936:	b1c1      	cbz	r1, 8096a <pio_set_peripheral+0x3e>
   80938:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8093c:	d00a      	beq.n	80954 <pio_set_peripheral+0x28>
   8093e:	e013      	b.n	80968 <pio_set_peripheral+0x3c>
   80940:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80944:	d011      	beq.n	8096a <pio_set_peripheral+0x3e>
   80946:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8094a:	d00e      	beq.n	8096a <pio_set_peripheral+0x3e>
   8094c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80950:	d10a      	bne.n	80968 <pio_set_peripheral+0x3c>
   80952:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80954:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80956:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80958:	400b      	ands	r3, r1
   8095a:	ea23 0302 	bic.w	r3, r3, r2
   8095e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80960:	e002      	b.n	80968 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80962:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80964:	4313      	orrs	r3, r2
   80966:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80968:	6042      	str	r2, [r0, #4]
   8096a:	4770      	bx	lr

0008096c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8096c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8096e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80972:	bf14      	ite	ne
   80974:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80976:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80978:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8097c:	bf14      	ite	ne
   8097e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80980:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80982:	f012 0f02 	tst.w	r2, #2
   80986:	d002      	beq.n	8098e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80988:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8098c:	e004      	b.n	80998 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8098e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80992:	bf18      	it	ne
   80994:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80998:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8099a:	6001      	str	r1, [r0, #0]
   8099c:	4770      	bx	lr
   8099e:	bf00      	nop

000809a0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   809a0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   809a2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809a4:	9c01      	ldr	r4, [sp, #4]
   809a6:	b10c      	cbz	r4, 809ac <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   809a8:	6641      	str	r1, [r0, #100]	; 0x64
   809aa:	e000      	b.n	809ae <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809ac:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   809ae:	b10b      	cbz	r3, 809b4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   809b0:	6501      	str	r1, [r0, #80]	; 0x50
   809b2:	e000      	b.n	809b6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   809b4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   809b6:	b10a      	cbz	r2, 809bc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   809b8:	6301      	str	r1, [r0, #48]	; 0x30
   809ba:	e000      	b.n	809be <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   809bc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   809be:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   809c0:	6001      	str	r1, [r0, #0]
}
   809c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   809c6:	4770      	bx	lr

000809c8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   809c8:	f012 0f10 	tst.w	r2, #16
   809cc:	d010      	beq.n	809f0 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   809ce:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   809d2:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   809d6:	bf14      	ite	ne
   809d8:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   809dc:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   809e0:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   809e4:	bf14      	ite	ne
   809e6:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   809ea:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   809ee:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   809f0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   809f4:	4770      	bx	lr
   809f6:	bf00      	nop

000809f8 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   809f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   809fa:	6401      	str	r1, [r0, #64]	; 0x40
   809fc:	4770      	bx	lr
   809fe:	bf00      	nop

00080a00 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80a00:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80a02:	4770      	bx	lr

00080a04 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80a04:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80a06:	4770      	bx	lr

00080a08 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80a08:	b570      	push	{r4, r5, r6, lr}
   80a0a:	b082      	sub	sp, #8
   80a0c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80a0e:	0944      	lsrs	r4, r0, #5
   80a10:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80a14:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80a18:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80a1a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80a1e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80a22:	d030      	beq.n	80a86 <pio_configure_pin+0x7e>
   80a24:	d806      	bhi.n	80a34 <pio_configure_pin+0x2c>
   80a26:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80a2a:	d00a      	beq.n	80a42 <pio_configure_pin+0x3a>
   80a2c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80a30:	d018      	beq.n	80a64 <pio_configure_pin+0x5c>
   80a32:	e049      	b.n	80ac8 <pio_configure_pin+0xc0>
   80a34:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a38:	d030      	beq.n	80a9c <pio_configure_pin+0x94>
   80a3a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a3e:	d02d      	beq.n	80a9c <pio_configure_pin+0x94>
   80a40:	e042      	b.n	80ac8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80a42:	f000 001f 	and.w	r0, r0, #31
   80a46:	2401      	movs	r4, #1
   80a48:	4084      	lsls	r4, r0
   80a4a:	4630      	mov	r0, r6
   80a4c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a50:	4622      	mov	r2, r4
   80a52:	4b1f      	ldr	r3, [pc, #124]	; (80ad0 <pio_configure_pin+0xc8>)
   80a54:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a56:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a5a:	bf14      	ite	ne
   80a5c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a5e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a60:	2001      	movs	r0, #1
   80a62:	e032      	b.n	80aca <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80a64:	f000 001f 	and.w	r0, r0, #31
   80a68:	2401      	movs	r4, #1
   80a6a:	4084      	lsls	r4, r0
   80a6c:	4630      	mov	r0, r6
   80a6e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a72:	4622      	mov	r2, r4
   80a74:	4b16      	ldr	r3, [pc, #88]	; (80ad0 <pio_configure_pin+0xc8>)
   80a76:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a78:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a7c:	bf14      	ite	ne
   80a7e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a80:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a82:	2001      	movs	r0, #1
   80a84:	e021      	b.n	80aca <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80a86:	f000 011f 	and.w	r1, r0, #31
   80a8a:	2401      	movs	r4, #1
   80a8c:	4630      	mov	r0, r6
   80a8e:	fa04 f101 	lsl.w	r1, r4, r1
   80a92:	462a      	mov	r2, r5
   80a94:	4b0f      	ldr	r3, [pc, #60]	; (80ad4 <pio_configure_pin+0xcc>)
   80a96:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a98:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80a9a:	e016      	b.n	80aca <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80a9c:	f000 011f 	and.w	r1, r0, #31
   80aa0:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80aa2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80aa6:	ea05 0304 	and.w	r3, r5, r4
   80aaa:	9300      	str	r3, [sp, #0]
   80aac:	4630      	mov	r0, r6
   80aae:	fa04 f101 	lsl.w	r1, r4, r1
   80ab2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80ab6:	bf14      	ite	ne
   80ab8:	2200      	movne	r2, #0
   80aba:	2201      	moveq	r2, #1
   80abc:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80ac0:	4d05      	ldr	r5, [pc, #20]	; (80ad8 <pio_configure_pin+0xd0>)
   80ac2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80ac4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80ac6:	e000      	b.n	80aca <pio_configure_pin+0xc2>

	default:
		return 0;
   80ac8:	2000      	movs	r0, #0
	}

	return 1;
}
   80aca:	b002      	add	sp, #8
   80acc:	bd70      	pop	{r4, r5, r6, pc}
   80ace:	bf00      	nop
   80ad0:	0008092d 	.word	0x0008092d
   80ad4:	0008096d 	.word	0x0008096d
   80ad8:	000809a1 	.word	0x000809a1

00080adc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80adc:	b5f0      	push	{r4, r5, r6, r7, lr}
   80ade:	b083      	sub	sp, #12
   80ae0:	4607      	mov	r7, r0
   80ae2:	460e      	mov	r6, r1
   80ae4:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80ae6:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80aea:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80aee:	d026      	beq.n	80b3e <pio_configure_pin_group+0x62>
   80af0:	d806      	bhi.n	80b00 <pio_configure_pin_group+0x24>
   80af2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80af6:	d00a      	beq.n	80b0e <pio_configure_pin_group+0x32>
   80af8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80afc:	d013      	beq.n	80b26 <pio_configure_pin_group+0x4a>
   80afe:	e034      	b.n	80b6a <pio_configure_pin_group+0x8e>
   80b00:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80b04:	d01f      	beq.n	80b46 <pio_configure_pin_group+0x6a>
   80b06:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80b0a:	d01c      	beq.n	80b46 <pio_configure_pin_group+0x6a>
   80b0c:	e02d      	b.n	80b6a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80b0e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b12:	4632      	mov	r2, r6
   80b14:	4b16      	ldr	r3, [pc, #88]	; (80b70 <pio_configure_pin_group+0x94>)
   80b16:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b18:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b1c:	bf14      	ite	ne
   80b1e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b20:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b22:	2001      	movs	r0, #1
   80b24:	e022      	b.n	80b6c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80b26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b2a:	4632      	mov	r2, r6
   80b2c:	4b10      	ldr	r3, [pc, #64]	; (80b70 <pio_configure_pin_group+0x94>)
   80b2e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b30:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b34:	bf14      	ite	ne
   80b36:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b38:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b3a:	2001      	movs	r0, #1
   80b3c:	e016      	b.n	80b6c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80b3e:	4b0d      	ldr	r3, [pc, #52]	; (80b74 <pio_configure_pin_group+0x98>)
   80b40:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b42:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80b44:	e012      	b.n	80b6c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b46:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80b4a:	f005 0301 	and.w	r3, r5, #1
   80b4e:	9300      	str	r3, [sp, #0]
   80b50:	4638      	mov	r0, r7
   80b52:	4631      	mov	r1, r6
   80b54:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b58:	bf14      	ite	ne
   80b5a:	2200      	movne	r2, #0
   80b5c:	2201      	moveq	r2, #1
   80b5e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b62:	4c05      	ldr	r4, [pc, #20]	; (80b78 <pio_configure_pin_group+0x9c>)
   80b64:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80b66:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80b68:	e000      	b.n	80b6c <pio_configure_pin_group+0x90>

	default:
		return 0;
   80b6a:	2000      	movs	r0, #0
	}

	return 1;
}
   80b6c:	b003      	add	sp, #12
   80b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b70:	0008092d 	.word	0x0008092d
   80b74:	0008096d 	.word	0x0008096d
   80b78:	000809a1 	.word	0x000809a1

00080b7c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80b80:	4604      	mov	r4, r0
   80b82:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80b84:	4b10      	ldr	r3, [pc, #64]	; (80bc8 <pio_handler_process+0x4c>)
   80b86:	4798      	blx	r3
   80b88:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80b8a:	4620      	mov	r0, r4
   80b8c:	4b0f      	ldr	r3, [pc, #60]	; (80bcc <pio_handler_process+0x50>)
   80b8e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80b90:	4005      	ands	r5, r0
   80b92:	d017      	beq.n	80bc4 <pio_handler_process+0x48>
   80b94:	4f0e      	ldr	r7, [pc, #56]	; (80bd0 <pio_handler_process+0x54>)
   80b96:	f107 040c 	add.w	r4, r7, #12
   80b9a:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80b9c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80ba0:	42b3      	cmp	r3, r6
   80ba2:	d10a      	bne.n	80bba <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80ba4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80ba8:	4229      	tst	r1, r5
   80baa:	d006      	beq.n	80bba <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80bac:	6823      	ldr	r3, [r4, #0]
   80bae:	4630      	mov	r0, r6
   80bb0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80bb2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80bb6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80bba:	42bc      	cmp	r4, r7
   80bbc:	d002      	beq.n	80bc4 <pio_handler_process+0x48>
   80bbe:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80bc0:	2d00      	cmp	r5, #0
   80bc2:	d1eb      	bne.n	80b9c <pio_handler_process+0x20>
   80bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80bc8:	00080a01 	.word	0x00080a01
   80bcc:	00080a05 	.word	0x00080a05
   80bd0:	20070a68 	.word	0x20070a68

00080bd4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80bd6:	4c0b      	ldr	r4, [pc, #44]	; (80c04 <pio_handler_set+0x30>)
   80bd8:	6824      	ldr	r4, [r4, #0]
   80bda:	2c06      	cmp	r4, #6
   80bdc:	d810      	bhi.n	80c00 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   80bde:	4f0a      	ldr	r7, [pc, #40]	; (80c08 <pio_handler_set+0x34>)
   80be0:	0126      	lsls	r6, r4, #4
   80be2:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   80be4:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   80be6:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   80be8:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   80bea:	9906      	ldr	r1, [sp, #24]
   80bec:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   80bee:	3401      	adds	r4, #1
   80bf0:	4904      	ldr	r1, [pc, #16]	; (80c04 <pio_handler_set+0x30>)
   80bf2:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80bf4:	4611      	mov	r1, r2
   80bf6:	461a      	mov	r2, r3
   80bf8:	4b04      	ldr	r3, [pc, #16]	; (80c0c <pio_handler_set+0x38>)
   80bfa:	4798      	blx	r3

	return 0;
   80bfc:	2000      	movs	r0, #0
   80bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80c00:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c04:	20070a64 	.word	0x20070a64
   80c08:	20070a68 	.word	0x20070a68
   80c0c:	000809c9 	.word	0x000809c9

00080c10 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80c10:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80c12:	4802      	ldr	r0, [pc, #8]	; (80c1c <PIOA_Handler+0xc>)
   80c14:	210b      	movs	r1, #11
   80c16:	4b02      	ldr	r3, [pc, #8]	; (80c20 <PIOA_Handler+0x10>)
   80c18:	4798      	blx	r3
   80c1a:	bd08      	pop	{r3, pc}
   80c1c:	400e0e00 	.word	0x400e0e00
   80c20:	00080b7d 	.word	0x00080b7d

00080c24 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80c24:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80c26:	4802      	ldr	r0, [pc, #8]	; (80c30 <PIOB_Handler+0xc>)
   80c28:	210c      	movs	r1, #12
   80c2a:	4b02      	ldr	r3, [pc, #8]	; (80c34 <PIOB_Handler+0x10>)
   80c2c:	4798      	blx	r3
   80c2e:	bd08      	pop	{r3, pc}
   80c30:	400e1000 	.word	0x400e1000
   80c34:	00080b7d 	.word	0x00080b7d

00080c38 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80c38:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80c3a:	4802      	ldr	r0, [pc, #8]	; (80c44 <PIOC_Handler+0xc>)
   80c3c:	210d      	movs	r1, #13
   80c3e:	4b02      	ldr	r3, [pc, #8]	; (80c48 <PIOC_Handler+0x10>)
   80c40:	4798      	blx	r3
   80c42:	bd08      	pop	{r3, pc}
   80c44:	400e1200 	.word	0x400e1200
   80c48:	00080b7d 	.word	0x00080b7d

00080c4c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80c4c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80c4e:	4802      	ldr	r0, [pc, #8]	; (80c58 <PIOD_Handler+0xc>)
   80c50:	210e      	movs	r1, #14
   80c52:	4b02      	ldr	r3, [pc, #8]	; (80c5c <PIOD_Handler+0x10>)
   80c54:	4798      	blx	r3
   80c56:	bd08      	pop	{r3, pc}
   80c58:	400e1400 	.word	0x400e1400
   80c5c:	00080b7d 	.word	0x00080b7d

00080c60 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c60:	282c      	cmp	r0, #44	; 0x2c
   80c62:	d820      	bhi.n	80ca6 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80c64:	281f      	cmp	r0, #31
   80c66:	d80d      	bhi.n	80c84 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c68:	4b12      	ldr	r3, [pc, #72]	; (80cb4 <pmc_enable_periph_clk+0x54>)
   80c6a:	699a      	ldr	r2, [r3, #24]
   80c6c:	2301      	movs	r3, #1
   80c6e:	4083      	lsls	r3, r0
   80c70:	401a      	ands	r2, r3
   80c72:	4293      	cmp	r3, r2
   80c74:	d019      	beq.n	80caa <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80c76:	2301      	movs	r3, #1
   80c78:	fa03 f000 	lsl.w	r0, r3, r0
   80c7c:	4b0d      	ldr	r3, [pc, #52]	; (80cb4 <pmc_enable_periph_clk+0x54>)
   80c7e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c80:	2000      	movs	r0, #0
   80c82:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c84:	4b0b      	ldr	r3, [pc, #44]	; (80cb4 <pmc_enable_periph_clk+0x54>)
   80c86:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80c8a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c8c:	2301      	movs	r3, #1
   80c8e:	4083      	lsls	r3, r0
   80c90:	401a      	ands	r2, r3
   80c92:	4293      	cmp	r3, r2
   80c94:	d00b      	beq.n	80cae <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80c96:	2301      	movs	r3, #1
   80c98:	fa03 f000 	lsl.w	r0, r3, r0
   80c9c:	4b05      	ldr	r3, [pc, #20]	; (80cb4 <pmc_enable_periph_clk+0x54>)
   80c9e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80ca2:	2000      	movs	r0, #0
   80ca4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80ca6:	2001      	movs	r0, #1
   80ca8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80caa:	2000      	movs	r0, #0
   80cac:	4770      	bx	lr
   80cae:	2000      	movs	r0, #0
}
   80cb0:	4770      	bx	lr
   80cb2:	bf00      	nop
   80cb4:	400e0600 	.word	0x400e0600

00080cb8 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80cb8:	b4f0      	push	{r4, r5, r6, r7}
   80cba:	b08c      	sub	sp, #48	; 0x30
   80cbc:	4607      	mov	r7, r0
   80cbe:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80cc0:	ac01      	add	r4, sp, #4
   80cc2:	4d12      	ldr	r5, [pc, #72]	; (80d0c <pwm_clocks_generate+0x54>)
   80cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80ccc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80cd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80cd4:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80cd6:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80cd8:	f852 4f04 	ldr.w	r4, [r2, #4]!
   80cdc:	fbb6 f4f4 	udiv	r4, r6, r4
   80ce0:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80ce4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   80ce8:	d903      	bls.n	80cf2 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   80cea:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80cec:	2b0b      	cmp	r3, #11
   80cee:	d1f3      	bne.n	80cd8 <pwm_clocks_generate+0x20>
   80cf0:	e004      	b.n	80cfc <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80cf2:	2b0a      	cmp	r3, #10
   80cf4:	d805      	bhi.n	80d02 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   80cf6:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   80cfa:	e004      	b.n	80d06 <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80cfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80d00:	e001      	b.n	80d06 <pwm_clocks_generate+0x4e>
   80d02:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   80d06:	b00c      	add	sp, #48	; 0x30
   80d08:	bcf0      	pop	{r4, r5, r6, r7}
   80d0a:	4770      	bx	lr
   80d0c:	00084704 	.word	0x00084704

00080d10 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80d10:	b570      	push	{r4, r5, r6, lr}
   80d12:	4606      	mov	r6, r0
   80d14:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80d16:	6808      	ldr	r0, [r1, #0]
   80d18:	b140      	cbz	r0, 80d2c <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80d1a:	6889      	ldr	r1, [r1, #8]
   80d1c:	4b0b      	ldr	r3, [pc, #44]	; (80d4c <pwm_init+0x3c>)
   80d1e:	4798      	blx	r3
   80d20:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80d26:	4298      	cmp	r0, r3
   80d28:	d101      	bne.n	80d2e <pwm_init+0x1e>
   80d2a:	e00e      	b.n	80d4a <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80d2c:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80d2e:	6860      	ldr	r0, [r4, #4]
   80d30:	b140      	cbz	r0, 80d44 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80d32:	68a1      	ldr	r1, [r4, #8]
   80d34:	4b05      	ldr	r3, [pc, #20]	; (80d4c <pwm_init+0x3c>)
   80d36:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80d3c:	4298      	cmp	r0, r3
   80d3e:	d004      	beq.n	80d4a <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80d40:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80d44:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80d46:	2000      	movs	r0, #0
   80d48:	bd70      	pop	{r4, r5, r6, pc}
}
   80d4a:	bd70      	pop	{r4, r5, r6, pc}
   80d4c:	00080cb9 	.word	0x00080cb9

00080d50 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80d50:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80d52:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80d54:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80d56:	684a      	ldr	r2, [r1, #4]
   80d58:	f002 020f 	and.w	r2, r2, #15
   80d5c:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80d5e:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80d60:	432c      	orrs	r4, r5
   80d62:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80d64:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80d68:	7d8a      	ldrb	r2, [r1, #22]
   80d6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80d6e:	7dca      	ldrb	r2, [r1, #23]
   80d70:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80d74:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80d76:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   80d7a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80d7e:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80d82:	68cc      	ldr	r4, [r1, #12]
   80d84:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80d88:	690c      	ldr	r4, [r1, #16]
   80d8a:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80d8e:	7d8a      	ldrb	r2, [r1, #22]
   80d90:	b13a      	cbz	r2, 80da2 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80d92:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80d94:	8b4a      	ldrh	r2, [r1, #26]
   80d96:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80d9a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   80d9e:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80da2:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80da4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80da8:	409a      	lsls	r2, r3
   80daa:	43d2      	mvns	r2, r2
   80dac:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80dae:	7fce      	ldrb	r6, [r1, #31]
   80db0:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80db2:	7f8c      	ldrb	r4, [r1, #30]
   80db4:	409c      	lsls	r4, r3
   80db6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80dba:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80dbc:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80dbe:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80dc0:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80dc2:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80dc6:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80dc8:	f891 4020 	ldrb.w	r4, [r1, #32]
   80dcc:	409c      	lsls	r4, r3
   80dce:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80dd2:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80dd4:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80dd6:	2201      	movs	r2, #1
   80dd8:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80dda:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80dde:	b11c      	cbz	r4, 80de8 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80de0:	6a04      	ldr	r4, [r0, #32]
   80de2:	4314      	orrs	r4, r2
   80de4:	6204      	str	r4, [r0, #32]
   80de6:	e003      	b.n	80df0 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80de8:	6a04      	ldr	r4, [r0, #32]
   80dea:	ea24 0402 	bic.w	r4, r4, r2
   80dee:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80df0:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80df4:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80df6:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80df8:	bf0c      	ite	eq
   80dfa:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80dfc:	4394      	bicne	r4, r2
   80dfe:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80e00:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80e04:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80e06:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80e08:	bf0c      	ite	eq
   80e0a:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80e0e:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80e12:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80e14:	2b03      	cmp	r3, #3
   80e16:	d80c      	bhi.n	80e32 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80e18:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80e1a:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80e1c:	22ff      	movs	r2, #255	; 0xff
   80e1e:	409a      	lsls	r2, r3
   80e20:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80e24:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80e28:	fa01 f303 	lsl.w	r3, r1, r3
   80e2c:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80e2e:	66c3      	str	r3, [r0, #108]	; 0x6c
   80e30:	e00c      	b.n	80e4c <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80e32:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80e34:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80e36:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80e38:	22ff      	movs	r2, #255	; 0xff
   80e3a:	409a      	lsls	r2, r3
   80e3c:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80e40:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80e44:	fa01 f303 	lsl.w	r3, r1, r3
   80e48:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80e4a:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80e4c:	2000      	movs	r0, #0
   80e4e:	bc70      	pop	{r4, r5, r6}
   80e50:	4770      	bx	lr
   80e52:	bf00      	nop

00080e54 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80e54:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   80e56:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80e58:	690b      	ldr	r3, [r1, #16]
   80e5a:	4293      	cmp	r3, r2
   80e5c:	d306      	bcc.n	80e6c <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80e5e:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80e60:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80e64:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   80e68:	2000      	movs	r0, #0
   80e6a:	e001      	b.n	80e70 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80e6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80e70:	f85d 4b04 	ldr.w	r4, [sp], #4
   80e74:	4770      	bx	lr
   80e76:	bf00      	nop

00080e78 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80e78:	2301      	movs	r3, #1
   80e7a:	fa03 f101 	lsl.w	r1, r3, r1
   80e7e:	6041      	str	r1, [r0, #4]
   80e80:	4770      	bx	lr
   80e82:	bf00      	nop

00080e84 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80e84:	2301      	movs	r3, #1
   80e86:	fa03 f101 	lsl.w	r1, r3, r1
   80e8a:	6081      	str	r1, [r0, #8]
   80e8c:	4770      	bx	lr
   80e8e:	bf00      	nop

00080e90 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80e90:	e7fe      	b.n	80e90 <Dummy_Handler>
   80e92:	bf00      	nop

00080e94 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80e94:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80e96:	4b1e      	ldr	r3, [pc, #120]	; (80f10 <Reset_Handler+0x7c>)
   80e98:	4a1e      	ldr	r2, [pc, #120]	; (80f14 <Reset_Handler+0x80>)
   80e9a:	429a      	cmp	r2, r3
   80e9c:	d003      	beq.n	80ea6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80e9e:	4b1e      	ldr	r3, [pc, #120]	; (80f18 <Reset_Handler+0x84>)
   80ea0:	4a1b      	ldr	r2, [pc, #108]	; (80f10 <Reset_Handler+0x7c>)
   80ea2:	429a      	cmp	r2, r3
   80ea4:	d304      	bcc.n	80eb0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ea6:	4b1d      	ldr	r3, [pc, #116]	; (80f1c <Reset_Handler+0x88>)
   80ea8:	4a1d      	ldr	r2, [pc, #116]	; (80f20 <Reset_Handler+0x8c>)
   80eaa:	429a      	cmp	r2, r3
   80eac:	d30f      	bcc.n	80ece <Reset_Handler+0x3a>
   80eae:	e01a      	b.n	80ee6 <Reset_Handler+0x52>
   80eb0:	4b1c      	ldr	r3, [pc, #112]	; (80f24 <Reset_Handler+0x90>)
   80eb2:	4c1d      	ldr	r4, [pc, #116]	; (80f28 <Reset_Handler+0x94>)
   80eb4:	1ae4      	subs	r4, r4, r3
   80eb6:	f024 0403 	bic.w	r4, r4, #3
   80eba:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80ebc:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80ebe:	4814      	ldr	r0, [pc, #80]	; (80f10 <Reset_Handler+0x7c>)
   80ec0:	4914      	ldr	r1, [pc, #80]	; (80f14 <Reset_Handler+0x80>)
   80ec2:	585a      	ldr	r2, [r3, r1]
   80ec4:	501a      	str	r2, [r3, r0]
   80ec6:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80ec8:	42a3      	cmp	r3, r4
   80eca:	d1fa      	bne.n	80ec2 <Reset_Handler+0x2e>
   80ecc:	e7eb      	b.n	80ea6 <Reset_Handler+0x12>
   80ece:	4b17      	ldr	r3, [pc, #92]	; (80f2c <Reset_Handler+0x98>)
   80ed0:	4917      	ldr	r1, [pc, #92]	; (80f30 <Reset_Handler+0x9c>)
   80ed2:	1ac9      	subs	r1, r1, r3
   80ed4:	f021 0103 	bic.w	r1, r1, #3
   80ed8:	1d1a      	adds	r2, r3, #4
   80eda:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80edc:	2200      	movs	r2, #0
   80ede:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ee2:	428b      	cmp	r3, r1
   80ee4:	d1fb      	bne.n	80ede <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80ee6:	4a13      	ldr	r2, [pc, #76]	; (80f34 <Reset_Handler+0xa0>)
   80ee8:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80eec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80ef0:	4911      	ldr	r1, [pc, #68]	; (80f38 <Reset_Handler+0xa4>)
   80ef2:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80ef4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80ef8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80efc:	d203      	bcs.n	80f06 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80efe:	688a      	ldr	r2, [r1, #8]
   80f00:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80f04:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80f06:	4b0d      	ldr	r3, [pc, #52]	; (80f3c <Reset_Handler+0xa8>)
   80f08:	4798      	blx	r3

	/* Branch to main function */
	main();
   80f0a:	4b0d      	ldr	r3, [pc, #52]	; (80f40 <Reset_Handler+0xac>)
   80f0c:	4798      	blx	r3
   80f0e:	e7fe      	b.n	80f0e <Reset_Handler+0x7a>
   80f10:	20070000 	.word	0x20070000
   80f14:	000847b4 	.word	0x000847b4
   80f18:	200709a4 	.word	0x200709a4
   80f1c:	20070b70 	.word	0x20070b70
   80f20:	200709a4 	.word	0x200709a4
   80f24:	20070004 	.word	0x20070004
   80f28:	200709a7 	.word	0x200709a7
   80f2c:	200709a0 	.word	0x200709a0
   80f30:	20070b6b 	.word	0x20070b6b
   80f34:	00080000 	.word	0x00080000
   80f38:	e000ed00 	.word	0xe000ed00
   80f3c:	00081769 	.word	0x00081769
   80f40:	00080149 	.word	0x00080149

00080f44 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80f44:	4b09      	ldr	r3, [pc, #36]	; (80f6c <_sbrk+0x28>)
   80f46:	681b      	ldr	r3, [r3, #0]
   80f48:	b913      	cbnz	r3, 80f50 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80f4a:	4a09      	ldr	r2, [pc, #36]	; (80f70 <_sbrk+0x2c>)
   80f4c:	4b07      	ldr	r3, [pc, #28]	; (80f6c <_sbrk+0x28>)
   80f4e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80f50:	4b06      	ldr	r3, [pc, #24]	; (80f6c <_sbrk+0x28>)
   80f52:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80f54:	181a      	adds	r2, r3, r0
   80f56:	4907      	ldr	r1, [pc, #28]	; (80f74 <_sbrk+0x30>)
   80f58:	4291      	cmp	r1, r2
   80f5a:	db04      	blt.n	80f66 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80f5c:	4610      	mov	r0, r2
   80f5e:	4a03      	ldr	r2, [pc, #12]	; (80f6c <_sbrk+0x28>)
   80f60:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80f62:	4618      	mov	r0, r3
   80f64:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80f66:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80f6a:	4770      	bx	lr
   80f6c:	20070ad8 	.word	0x20070ad8
   80f70:	20072b70 	.word	0x20072b70
   80f74:	20087ffc 	.word	0x20087ffc

00080f78 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80f78:	f04f 30ff 	mov.w	r0, #4294967295
   80f7c:	4770      	bx	lr
   80f7e:	bf00      	nop

00080f80 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80f84:	604b      	str	r3, [r1, #4]

	return 0;
}
   80f86:	2000      	movs	r0, #0
   80f88:	4770      	bx	lr
   80f8a:	bf00      	nop

00080f8c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80f8c:	2001      	movs	r0, #1
   80f8e:	4770      	bx	lr

00080f90 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80f90:	2000      	movs	r0, #0
   80f92:	4770      	bx	lr

00080f94 <__aeabi_drsub>:
   80f94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80f98:	e002      	b.n	80fa0 <__adddf3>
   80f9a:	bf00      	nop

00080f9c <__aeabi_dsub>:
   80f9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080fa0 <__adddf3>:
   80fa0:	b530      	push	{r4, r5, lr}
   80fa2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80fa6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80faa:	ea94 0f05 	teq	r4, r5
   80fae:	bf08      	it	eq
   80fb0:	ea90 0f02 	teqeq	r0, r2
   80fb4:	bf1f      	itttt	ne
   80fb6:	ea54 0c00 	orrsne.w	ip, r4, r0
   80fba:	ea55 0c02 	orrsne.w	ip, r5, r2
   80fbe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80fc2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80fc6:	f000 80e2 	beq.w	8118e <__adddf3+0x1ee>
   80fca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80fce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80fd2:	bfb8      	it	lt
   80fd4:	426d      	neglt	r5, r5
   80fd6:	dd0c      	ble.n	80ff2 <__adddf3+0x52>
   80fd8:	442c      	add	r4, r5
   80fda:	ea80 0202 	eor.w	r2, r0, r2
   80fde:	ea81 0303 	eor.w	r3, r1, r3
   80fe2:	ea82 0000 	eor.w	r0, r2, r0
   80fe6:	ea83 0101 	eor.w	r1, r3, r1
   80fea:	ea80 0202 	eor.w	r2, r0, r2
   80fee:	ea81 0303 	eor.w	r3, r1, r3
   80ff2:	2d36      	cmp	r5, #54	; 0x36
   80ff4:	bf88      	it	hi
   80ff6:	bd30      	pophi	{r4, r5, pc}
   80ff8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80ffc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81000:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81004:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81008:	d002      	beq.n	81010 <__adddf3+0x70>
   8100a:	4240      	negs	r0, r0
   8100c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81010:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81014:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81018:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8101c:	d002      	beq.n	81024 <__adddf3+0x84>
   8101e:	4252      	negs	r2, r2
   81020:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81024:	ea94 0f05 	teq	r4, r5
   81028:	f000 80a7 	beq.w	8117a <__adddf3+0x1da>
   8102c:	f1a4 0401 	sub.w	r4, r4, #1
   81030:	f1d5 0e20 	rsbs	lr, r5, #32
   81034:	db0d      	blt.n	81052 <__adddf3+0xb2>
   81036:	fa02 fc0e 	lsl.w	ip, r2, lr
   8103a:	fa22 f205 	lsr.w	r2, r2, r5
   8103e:	1880      	adds	r0, r0, r2
   81040:	f141 0100 	adc.w	r1, r1, #0
   81044:	fa03 f20e 	lsl.w	r2, r3, lr
   81048:	1880      	adds	r0, r0, r2
   8104a:	fa43 f305 	asr.w	r3, r3, r5
   8104e:	4159      	adcs	r1, r3
   81050:	e00e      	b.n	81070 <__adddf3+0xd0>
   81052:	f1a5 0520 	sub.w	r5, r5, #32
   81056:	f10e 0e20 	add.w	lr, lr, #32
   8105a:	2a01      	cmp	r2, #1
   8105c:	fa03 fc0e 	lsl.w	ip, r3, lr
   81060:	bf28      	it	cs
   81062:	f04c 0c02 	orrcs.w	ip, ip, #2
   81066:	fa43 f305 	asr.w	r3, r3, r5
   8106a:	18c0      	adds	r0, r0, r3
   8106c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81070:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81074:	d507      	bpl.n	81086 <__adddf3+0xe6>
   81076:	f04f 0e00 	mov.w	lr, #0
   8107a:	f1dc 0c00 	rsbs	ip, ip, #0
   8107e:	eb7e 0000 	sbcs.w	r0, lr, r0
   81082:	eb6e 0101 	sbc.w	r1, lr, r1
   81086:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8108a:	d31b      	bcc.n	810c4 <__adddf3+0x124>
   8108c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81090:	d30c      	bcc.n	810ac <__adddf3+0x10c>
   81092:	0849      	lsrs	r1, r1, #1
   81094:	ea5f 0030 	movs.w	r0, r0, rrx
   81098:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8109c:	f104 0401 	add.w	r4, r4, #1
   810a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   810a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   810a8:	f080 809a 	bcs.w	811e0 <__adddf3+0x240>
   810ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   810b0:	bf08      	it	eq
   810b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   810b6:	f150 0000 	adcs.w	r0, r0, #0
   810ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   810be:	ea41 0105 	orr.w	r1, r1, r5
   810c2:	bd30      	pop	{r4, r5, pc}
   810c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   810c8:	4140      	adcs	r0, r0
   810ca:	eb41 0101 	adc.w	r1, r1, r1
   810ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   810d2:	f1a4 0401 	sub.w	r4, r4, #1
   810d6:	d1e9      	bne.n	810ac <__adddf3+0x10c>
   810d8:	f091 0f00 	teq	r1, #0
   810dc:	bf04      	itt	eq
   810de:	4601      	moveq	r1, r0
   810e0:	2000      	moveq	r0, #0
   810e2:	fab1 f381 	clz	r3, r1
   810e6:	bf08      	it	eq
   810e8:	3320      	addeq	r3, #32
   810ea:	f1a3 030b 	sub.w	r3, r3, #11
   810ee:	f1b3 0220 	subs.w	r2, r3, #32
   810f2:	da0c      	bge.n	8110e <__adddf3+0x16e>
   810f4:	320c      	adds	r2, #12
   810f6:	dd08      	ble.n	8110a <__adddf3+0x16a>
   810f8:	f102 0c14 	add.w	ip, r2, #20
   810fc:	f1c2 020c 	rsb	r2, r2, #12
   81100:	fa01 f00c 	lsl.w	r0, r1, ip
   81104:	fa21 f102 	lsr.w	r1, r1, r2
   81108:	e00c      	b.n	81124 <__adddf3+0x184>
   8110a:	f102 0214 	add.w	r2, r2, #20
   8110e:	bfd8      	it	le
   81110:	f1c2 0c20 	rsble	ip, r2, #32
   81114:	fa01 f102 	lsl.w	r1, r1, r2
   81118:	fa20 fc0c 	lsr.w	ip, r0, ip
   8111c:	bfdc      	itt	le
   8111e:	ea41 010c 	orrle.w	r1, r1, ip
   81122:	4090      	lslle	r0, r2
   81124:	1ae4      	subs	r4, r4, r3
   81126:	bfa2      	ittt	ge
   81128:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8112c:	4329      	orrge	r1, r5
   8112e:	bd30      	popge	{r4, r5, pc}
   81130:	ea6f 0404 	mvn.w	r4, r4
   81134:	3c1f      	subs	r4, #31
   81136:	da1c      	bge.n	81172 <__adddf3+0x1d2>
   81138:	340c      	adds	r4, #12
   8113a:	dc0e      	bgt.n	8115a <__adddf3+0x1ba>
   8113c:	f104 0414 	add.w	r4, r4, #20
   81140:	f1c4 0220 	rsb	r2, r4, #32
   81144:	fa20 f004 	lsr.w	r0, r0, r4
   81148:	fa01 f302 	lsl.w	r3, r1, r2
   8114c:	ea40 0003 	orr.w	r0, r0, r3
   81150:	fa21 f304 	lsr.w	r3, r1, r4
   81154:	ea45 0103 	orr.w	r1, r5, r3
   81158:	bd30      	pop	{r4, r5, pc}
   8115a:	f1c4 040c 	rsb	r4, r4, #12
   8115e:	f1c4 0220 	rsb	r2, r4, #32
   81162:	fa20 f002 	lsr.w	r0, r0, r2
   81166:	fa01 f304 	lsl.w	r3, r1, r4
   8116a:	ea40 0003 	orr.w	r0, r0, r3
   8116e:	4629      	mov	r1, r5
   81170:	bd30      	pop	{r4, r5, pc}
   81172:	fa21 f004 	lsr.w	r0, r1, r4
   81176:	4629      	mov	r1, r5
   81178:	bd30      	pop	{r4, r5, pc}
   8117a:	f094 0f00 	teq	r4, #0
   8117e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81182:	bf06      	itte	eq
   81184:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81188:	3401      	addeq	r4, #1
   8118a:	3d01      	subne	r5, #1
   8118c:	e74e      	b.n	8102c <__adddf3+0x8c>
   8118e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81192:	bf18      	it	ne
   81194:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81198:	d029      	beq.n	811ee <__adddf3+0x24e>
   8119a:	ea94 0f05 	teq	r4, r5
   8119e:	bf08      	it	eq
   811a0:	ea90 0f02 	teqeq	r0, r2
   811a4:	d005      	beq.n	811b2 <__adddf3+0x212>
   811a6:	ea54 0c00 	orrs.w	ip, r4, r0
   811aa:	bf04      	itt	eq
   811ac:	4619      	moveq	r1, r3
   811ae:	4610      	moveq	r0, r2
   811b0:	bd30      	pop	{r4, r5, pc}
   811b2:	ea91 0f03 	teq	r1, r3
   811b6:	bf1e      	ittt	ne
   811b8:	2100      	movne	r1, #0
   811ba:	2000      	movne	r0, #0
   811bc:	bd30      	popne	{r4, r5, pc}
   811be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   811c2:	d105      	bne.n	811d0 <__adddf3+0x230>
   811c4:	0040      	lsls	r0, r0, #1
   811c6:	4149      	adcs	r1, r1
   811c8:	bf28      	it	cs
   811ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   811ce:	bd30      	pop	{r4, r5, pc}
   811d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   811d4:	bf3c      	itt	cc
   811d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   811da:	bd30      	popcc	{r4, r5, pc}
   811dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   811e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   811e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   811e8:	f04f 0000 	mov.w	r0, #0
   811ec:	bd30      	pop	{r4, r5, pc}
   811ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   811f2:	bf1a      	itte	ne
   811f4:	4619      	movne	r1, r3
   811f6:	4610      	movne	r0, r2
   811f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   811fc:	bf1c      	itt	ne
   811fe:	460b      	movne	r3, r1
   81200:	4602      	movne	r2, r0
   81202:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81206:	bf06      	itte	eq
   81208:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8120c:	ea91 0f03 	teqeq	r1, r3
   81210:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81214:	bd30      	pop	{r4, r5, pc}
   81216:	bf00      	nop

00081218 <__aeabi_ui2d>:
   81218:	f090 0f00 	teq	r0, #0
   8121c:	bf04      	itt	eq
   8121e:	2100      	moveq	r1, #0
   81220:	4770      	bxeq	lr
   81222:	b530      	push	{r4, r5, lr}
   81224:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81228:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8122c:	f04f 0500 	mov.w	r5, #0
   81230:	f04f 0100 	mov.w	r1, #0
   81234:	e750      	b.n	810d8 <__adddf3+0x138>
   81236:	bf00      	nop

00081238 <__aeabi_i2d>:
   81238:	f090 0f00 	teq	r0, #0
   8123c:	bf04      	itt	eq
   8123e:	2100      	moveq	r1, #0
   81240:	4770      	bxeq	lr
   81242:	b530      	push	{r4, r5, lr}
   81244:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81248:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8124c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81250:	bf48      	it	mi
   81252:	4240      	negmi	r0, r0
   81254:	f04f 0100 	mov.w	r1, #0
   81258:	e73e      	b.n	810d8 <__adddf3+0x138>
   8125a:	bf00      	nop

0008125c <__aeabi_f2d>:
   8125c:	0042      	lsls	r2, r0, #1
   8125e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81262:	ea4f 0131 	mov.w	r1, r1, rrx
   81266:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8126a:	bf1f      	itttt	ne
   8126c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81270:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81274:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81278:	4770      	bxne	lr
   8127a:	f092 0f00 	teq	r2, #0
   8127e:	bf14      	ite	ne
   81280:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81284:	4770      	bxeq	lr
   81286:	b530      	push	{r4, r5, lr}
   81288:	f44f 7460 	mov.w	r4, #896	; 0x380
   8128c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81290:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81294:	e720      	b.n	810d8 <__adddf3+0x138>
   81296:	bf00      	nop

00081298 <__aeabi_ul2d>:
   81298:	ea50 0201 	orrs.w	r2, r0, r1
   8129c:	bf08      	it	eq
   8129e:	4770      	bxeq	lr
   812a0:	b530      	push	{r4, r5, lr}
   812a2:	f04f 0500 	mov.w	r5, #0
   812a6:	e00a      	b.n	812be <__aeabi_l2d+0x16>

000812a8 <__aeabi_l2d>:
   812a8:	ea50 0201 	orrs.w	r2, r0, r1
   812ac:	bf08      	it	eq
   812ae:	4770      	bxeq	lr
   812b0:	b530      	push	{r4, r5, lr}
   812b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   812b6:	d502      	bpl.n	812be <__aeabi_l2d+0x16>
   812b8:	4240      	negs	r0, r0
   812ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   812be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   812c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   812c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   812ca:	f43f aedc 	beq.w	81086 <__adddf3+0xe6>
   812ce:	f04f 0203 	mov.w	r2, #3
   812d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   812d6:	bf18      	it	ne
   812d8:	3203      	addne	r2, #3
   812da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   812de:	bf18      	it	ne
   812e0:	3203      	addne	r2, #3
   812e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   812e6:	f1c2 0320 	rsb	r3, r2, #32
   812ea:	fa00 fc03 	lsl.w	ip, r0, r3
   812ee:	fa20 f002 	lsr.w	r0, r0, r2
   812f2:	fa01 fe03 	lsl.w	lr, r1, r3
   812f6:	ea40 000e 	orr.w	r0, r0, lr
   812fa:	fa21 f102 	lsr.w	r1, r1, r2
   812fe:	4414      	add	r4, r2
   81300:	e6c1      	b.n	81086 <__adddf3+0xe6>
   81302:	bf00      	nop

00081304 <__aeabi_dmul>:
   81304:	b570      	push	{r4, r5, r6, lr}
   81306:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8130a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8130e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81312:	bf1d      	ittte	ne
   81314:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81318:	ea94 0f0c 	teqne	r4, ip
   8131c:	ea95 0f0c 	teqne	r5, ip
   81320:	f000 f8de 	bleq	814e0 <__aeabi_dmul+0x1dc>
   81324:	442c      	add	r4, r5
   81326:	ea81 0603 	eor.w	r6, r1, r3
   8132a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8132e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81332:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81336:	bf18      	it	ne
   81338:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8133c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81344:	d038      	beq.n	813b8 <__aeabi_dmul+0xb4>
   81346:	fba0 ce02 	umull	ip, lr, r0, r2
   8134a:	f04f 0500 	mov.w	r5, #0
   8134e:	fbe1 e502 	umlal	lr, r5, r1, r2
   81352:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81356:	fbe0 e503 	umlal	lr, r5, r0, r3
   8135a:	f04f 0600 	mov.w	r6, #0
   8135e:	fbe1 5603 	umlal	r5, r6, r1, r3
   81362:	f09c 0f00 	teq	ip, #0
   81366:	bf18      	it	ne
   81368:	f04e 0e01 	orrne.w	lr, lr, #1
   8136c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81370:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81374:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81378:	d204      	bcs.n	81384 <__aeabi_dmul+0x80>
   8137a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8137e:	416d      	adcs	r5, r5
   81380:	eb46 0606 	adc.w	r6, r6, r6
   81384:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81388:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8138c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81390:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81394:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81398:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8139c:	bf88      	it	hi
   8139e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   813a2:	d81e      	bhi.n	813e2 <__aeabi_dmul+0xde>
   813a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   813a8:	bf08      	it	eq
   813aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   813ae:	f150 0000 	adcs.w	r0, r0, #0
   813b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   813b6:	bd70      	pop	{r4, r5, r6, pc}
   813b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   813bc:	ea46 0101 	orr.w	r1, r6, r1
   813c0:	ea40 0002 	orr.w	r0, r0, r2
   813c4:	ea81 0103 	eor.w	r1, r1, r3
   813c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   813cc:	bfc2      	ittt	gt
   813ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   813d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   813d6:	bd70      	popgt	{r4, r5, r6, pc}
   813d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   813dc:	f04f 0e00 	mov.w	lr, #0
   813e0:	3c01      	subs	r4, #1
   813e2:	f300 80ab 	bgt.w	8153c <__aeabi_dmul+0x238>
   813e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   813ea:	bfde      	ittt	le
   813ec:	2000      	movle	r0, #0
   813ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   813f2:	bd70      	pople	{r4, r5, r6, pc}
   813f4:	f1c4 0400 	rsb	r4, r4, #0
   813f8:	3c20      	subs	r4, #32
   813fa:	da35      	bge.n	81468 <__aeabi_dmul+0x164>
   813fc:	340c      	adds	r4, #12
   813fe:	dc1b      	bgt.n	81438 <__aeabi_dmul+0x134>
   81400:	f104 0414 	add.w	r4, r4, #20
   81404:	f1c4 0520 	rsb	r5, r4, #32
   81408:	fa00 f305 	lsl.w	r3, r0, r5
   8140c:	fa20 f004 	lsr.w	r0, r0, r4
   81410:	fa01 f205 	lsl.w	r2, r1, r5
   81414:	ea40 0002 	orr.w	r0, r0, r2
   81418:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8141c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81424:	fa21 f604 	lsr.w	r6, r1, r4
   81428:	eb42 0106 	adc.w	r1, r2, r6
   8142c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81430:	bf08      	it	eq
   81432:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81436:	bd70      	pop	{r4, r5, r6, pc}
   81438:	f1c4 040c 	rsb	r4, r4, #12
   8143c:	f1c4 0520 	rsb	r5, r4, #32
   81440:	fa00 f304 	lsl.w	r3, r0, r4
   81444:	fa20 f005 	lsr.w	r0, r0, r5
   81448:	fa01 f204 	lsl.w	r2, r1, r4
   8144c:	ea40 0002 	orr.w	r0, r0, r2
   81450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81454:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81458:	f141 0100 	adc.w	r1, r1, #0
   8145c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81460:	bf08      	it	eq
   81462:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81466:	bd70      	pop	{r4, r5, r6, pc}
   81468:	f1c4 0520 	rsb	r5, r4, #32
   8146c:	fa00 f205 	lsl.w	r2, r0, r5
   81470:	ea4e 0e02 	orr.w	lr, lr, r2
   81474:	fa20 f304 	lsr.w	r3, r0, r4
   81478:	fa01 f205 	lsl.w	r2, r1, r5
   8147c:	ea43 0302 	orr.w	r3, r3, r2
   81480:	fa21 f004 	lsr.w	r0, r1, r4
   81484:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81488:	fa21 f204 	lsr.w	r2, r1, r4
   8148c:	ea20 0002 	bic.w	r0, r0, r2
   81490:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81494:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81498:	bf08      	it	eq
   8149a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8149e:	bd70      	pop	{r4, r5, r6, pc}
   814a0:	f094 0f00 	teq	r4, #0
   814a4:	d10f      	bne.n	814c6 <__aeabi_dmul+0x1c2>
   814a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   814aa:	0040      	lsls	r0, r0, #1
   814ac:	eb41 0101 	adc.w	r1, r1, r1
   814b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   814b4:	bf08      	it	eq
   814b6:	3c01      	subeq	r4, #1
   814b8:	d0f7      	beq.n	814aa <__aeabi_dmul+0x1a6>
   814ba:	ea41 0106 	orr.w	r1, r1, r6
   814be:	f095 0f00 	teq	r5, #0
   814c2:	bf18      	it	ne
   814c4:	4770      	bxne	lr
   814c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   814ca:	0052      	lsls	r2, r2, #1
   814cc:	eb43 0303 	adc.w	r3, r3, r3
   814d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   814d4:	bf08      	it	eq
   814d6:	3d01      	subeq	r5, #1
   814d8:	d0f7      	beq.n	814ca <__aeabi_dmul+0x1c6>
   814da:	ea43 0306 	orr.w	r3, r3, r6
   814de:	4770      	bx	lr
   814e0:	ea94 0f0c 	teq	r4, ip
   814e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   814e8:	bf18      	it	ne
   814ea:	ea95 0f0c 	teqne	r5, ip
   814ee:	d00c      	beq.n	8150a <__aeabi_dmul+0x206>
   814f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814f4:	bf18      	it	ne
   814f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814fa:	d1d1      	bne.n	814a0 <__aeabi_dmul+0x19c>
   814fc:	ea81 0103 	eor.w	r1, r1, r3
   81500:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81504:	f04f 0000 	mov.w	r0, #0
   81508:	bd70      	pop	{r4, r5, r6, pc}
   8150a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8150e:	bf06      	itte	eq
   81510:	4610      	moveq	r0, r2
   81512:	4619      	moveq	r1, r3
   81514:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81518:	d019      	beq.n	8154e <__aeabi_dmul+0x24a>
   8151a:	ea94 0f0c 	teq	r4, ip
   8151e:	d102      	bne.n	81526 <__aeabi_dmul+0x222>
   81520:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81524:	d113      	bne.n	8154e <__aeabi_dmul+0x24a>
   81526:	ea95 0f0c 	teq	r5, ip
   8152a:	d105      	bne.n	81538 <__aeabi_dmul+0x234>
   8152c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81530:	bf1c      	itt	ne
   81532:	4610      	movne	r0, r2
   81534:	4619      	movne	r1, r3
   81536:	d10a      	bne.n	8154e <__aeabi_dmul+0x24a>
   81538:	ea81 0103 	eor.w	r1, r1, r3
   8153c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81540:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81544:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81548:	f04f 0000 	mov.w	r0, #0
   8154c:	bd70      	pop	{r4, r5, r6, pc}
   8154e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81552:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81556:	bd70      	pop	{r4, r5, r6, pc}

00081558 <__aeabi_ddiv>:
   81558:	b570      	push	{r4, r5, r6, lr}
   8155a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8155e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81566:	bf1d      	ittte	ne
   81568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8156c:	ea94 0f0c 	teqne	r4, ip
   81570:	ea95 0f0c 	teqne	r5, ip
   81574:	f000 f8a7 	bleq	816c6 <__aeabi_ddiv+0x16e>
   81578:	eba4 0405 	sub.w	r4, r4, r5
   8157c:	ea81 0e03 	eor.w	lr, r1, r3
   81580:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81584:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81588:	f000 8088 	beq.w	8169c <__aeabi_ddiv+0x144>
   8158c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81590:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81594:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81598:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8159c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   815a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   815a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   815a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   815ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   815b0:	429d      	cmp	r5, r3
   815b2:	bf08      	it	eq
   815b4:	4296      	cmpeq	r6, r2
   815b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   815ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   815be:	d202      	bcs.n	815c6 <__aeabi_ddiv+0x6e>
   815c0:	085b      	lsrs	r3, r3, #1
   815c2:	ea4f 0232 	mov.w	r2, r2, rrx
   815c6:	1ab6      	subs	r6, r6, r2
   815c8:	eb65 0503 	sbc.w	r5, r5, r3
   815cc:	085b      	lsrs	r3, r3, #1
   815ce:	ea4f 0232 	mov.w	r2, r2, rrx
   815d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   815d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   815da:	ebb6 0e02 	subs.w	lr, r6, r2
   815de:	eb75 0e03 	sbcs.w	lr, r5, r3
   815e2:	bf22      	ittt	cs
   815e4:	1ab6      	subcs	r6, r6, r2
   815e6:	4675      	movcs	r5, lr
   815e8:	ea40 000c 	orrcs.w	r0, r0, ip
   815ec:	085b      	lsrs	r3, r3, #1
   815ee:	ea4f 0232 	mov.w	r2, r2, rrx
   815f2:	ebb6 0e02 	subs.w	lr, r6, r2
   815f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   815fa:	bf22      	ittt	cs
   815fc:	1ab6      	subcs	r6, r6, r2
   815fe:	4675      	movcs	r5, lr
   81600:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81604:	085b      	lsrs	r3, r3, #1
   81606:	ea4f 0232 	mov.w	r2, r2, rrx
   8160a:	ebb6 0e02 	subs.w	lr, r6, r2
   8160e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81612:	bf22      	ittt	cs
   81614:	1ab6      	subcs	r6, r6, r2
   81616:	4675      	movcs	r5, lr
   81618:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8161c:	085b      	lsrs	r3, r3, #1
   8161e:	ea4f 0232 	mov.w	r2, r2, rrx
   81622:	ebb6 0e02 	subs.w	lr, r6, r2
   81626:	eb75 0e03 	sbcs.w	lr, r5, r3
   8162a:	bf22      	ittt	cs
   8162c:	1ab6      	subcs	r6, r6, r2
   8162e:	4675      	movcs	r5, lr
   81630:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81634:	ea55 0e06 	orrs.w	lr, r5, r6
   81638:	d018      	beq.n	8166c <__aeabi_ddiv+0x114>
   8163a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8163e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81642:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81646:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8164a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8164e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81652:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81656:	d1c0      	bne.n	815da <__aeabi_ddiv+0x82>
   81658:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8165c:	d10b      	bne.n	81676 <__aeabi_ddiv+0x11e>
   8165e:	ea41 0100 	orr.w	r1, r1, r0
   81662:	f04f 0000 	mov.w	r0, #0
   81666:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8166a:	e7b6      	b.n	815da <__aeabi_ddiv+0x82>
   8166c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81670:	bf04      	itt	eq
   81672:	4301      	orreq	r1, r0
   81674:	2000      	moveq	r0, #0
   81676:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8167a:	bf88      	it	hi
   8167c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81680:	f63f aeaf 	bhi.w	813e2 <__aeabi_dmul+0xde>
   81684:	ebb5 0c03 	subs.w	ip, r5, r3
   81688:	bf04      	itt	eq
   8168a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8168e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81692:	f150 0000 	adcs.w	r0, r0, #0
   81696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8169a:	bd70      	pop	{r4, r5, r6, pc}
   8169c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   816a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   816a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   816a8:	bfc2      	ittt	gt
   816aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   816ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   816b2:	bd70      	popgt	{r4, r5, r6, pc}
   816b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   816b8:	f04f 0e00 	mov.w	lr, #0
   816bc:	3c01      	subs	r4, #1
   816be:	e690      	b.n	813e2 <__aeabi_dmul+0xde>
   816c0:	ea45 0e06 	orr.w	lr, r5, r6
   816c4:	e68d      	b.n	813e2 <__aeabi_dmul+0xde>
   816c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   816ca:	ea94 0f0c 	teq	r4, ip
   816ce:	bf08      	it	eq
   816d0:	ea95 0f0c 	teqeq	r5, ip
   816d4:	f43f af3b 	beq.w	8154e <__aeabi_dmul+0x24a>
   816d8:	ea94 0f0c 	teq	r4, ip
   816dc:	d10a      	bne.n	816f4 <__aeabi_ddiv+0x19c>
   816de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   816e2:	f47f af34 	bne.w	8154e <__aeabi_dmul+0x24a>
   816e6:	ea95 0f0c 	teq	r5, ip
   816ea:	f47f af25 	bne.w	81538 <__aeabi_dmul+0x234>
   816ee:	4610      	mov	r0, r2
   816f0:	4619      	mov	r1, r3
   816f2:	e72c      	b.n	8154e <__aeabi_dmul+0x24a>
   816f4:	ea95 0f0c 	teq	r5, ip
   816f8:	d106      	bne.n	81708 <__aeabi_ddiv+0x1b0>
   816fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   816fe:	f43f aefd 	beq.w	814fc <__aeabi_dmul+0x1f8>
   81702:	4610      	mov	r0, r2
   81704:	4619      	mov	r1, r3
   81706:	e722      	b.n	8154e <__aeabi_dmul+0x24a>
   81708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8170c:	bf18      	it	ne
   8170e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81712:	f47f aec5 	bne.w	814a0 <__aeabi_dmul+0x19c>
   81716:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8171a:	f47f af0d 	bne.w	81538 <__aeabi_dmul+0x234>
   8171e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81722:	f47f aeeb 	bne.w	814fc <__aeabi_dmul+0x1f8>
   81726:	e712      	b.n	8154e <__aeabi_dmul+0x24a>

00081728 <__aeabi_d2uiz>:
   81728:	004a      	lsls	r2, r1, #1
   8172a:	d211      	bcs.n	81750 <__aeabi_d2uiz+0x28>
   8172c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81730:	d211      	bcs.n	81756 <__aeabi_d2uiz+0x2e>
   81732:	d50d      	bpl.n	81750 <__aeabi_d2uiz+0x28>
   81734:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81738:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8173c:	d40e      	bmi.n	8175c <__aeabi_d2uiz+0x34>
   8173e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81746:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8174a:	fa23 f002 	lsr.w	r0, r3, r2
   8174e:	4770      	bx	lr
   81750:	f04f 0000 	mov.w	r0, #0
   81754:	4770      	bx	lr
   81756:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8175a:	d102      	bne.n	81762 <__aeabi_d2uiz+0x3a>
   8175c:	f04f 30ff 	mov.w	r0, #4294967295
   81760:	4770      	bx	lr
   81762:	f04f 0000 	mov.w	r0, #0
   81766:	4770      	bx	lr

00081768 <__libc_init_array>:
   81768:	b570      	push	{r4, r5, r6, lr}
   8176a:	4e0f      	ldr	r6, [pc, #60]	; (817a8 <__libc_init_array+0x40>)
   8176c:	4d0f      	ldr	r5, [pc, #60]	; (817ac <__libc_init_array+0x44>)
   8176e:	1b76      	subs	r6, r6, r5
   81770:	10b6      	asrs	r6, r6, #2
   81772:	d007      	beq.n	81784 <__libc_init_array+0x1c>
   81774:	3d04      	subs	r5, #4
   81776:	2400      	movs	r4, #0
   81778:	3401      	adds	r4, #1
   8177a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8177e:	4798      	blx	r3
   81780:	42a6      	cmp	r6, r4
   81782:	d1f9      	bne.n	81778 <__libc_init_array+0x10>
   81784:	4e0a      	ldr	r6, [pc, #40]	; (817b0 <__libc_init_array+0x48>)
   81786:	4d0b      	ldr	r5, [pc, #44]	; (817b4 <__libc_init_array+0x4c>)
   81788:	f002 fffe 	bl	84788 <_init>
   8178c:	1b76      	subs	r6, r6, r5
   8178e:	10b6      	asrs	r6, r6, #2
   81790:	d008      	beq.n	817a4 <__libc_init_array+0x3c>
   81792:	3d04      	subs	r5, #4
   81794:	2400      	movs	r4, #0
   81796:	3401      	adds	r4, #1
   81798:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8179c:	4798      	blx	r3
   8179e:	42a6      	cmp	r6, r4
   817a0:	d1f9      	bne.n	81796 <__libc_init_array+0x2e>
   817a2:	bd70      	pop	{r4, r5, r6, pc}
   817a4:	bd70      	pop	{r4, r5, r6, pc}
   817a6:	bf00      	nop
   817a8:	00084794 	.word	0x00084794
   817ac:	00084794 	.word	0x00084794
   817b0:	0008479c 	.word	0x0008479c
   817b4:	00084794 	.word	0x00084794

000817b8 <iprintf>:
   817b8:	b40f      	push	{r0, r1, r2, r3}
   817ba:	b510      	push	{r4, lr}
   817bc:	4b07      	ldr	r3, [pc, #28]	; (817dc <iprintf+0x24>)
   817be:	b082      	sub	sp, #8
   817c0:	ac04      	add	r4, sp, #16
   817c2:	f854 2b04 	ldr.w	r2, [r4], #4
   817c6:	6818      	ldr	r0, [r3, #0]
   817c8:	4623      	mov	r3, r4
   817ca:	6881      	ldr	r1, [r0, #8]
   817cc:	9401      	str	r4, [sp, #4]
   817ce:	f000 f945 	bl	81a5c <_vfiprintf_r>
   817d2:	b002      	add	sp, #8
   817d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   817d8:	b004      	add	sp, #16
   817da:	4770      	bx	lr
   817dc:	20070568 	.word	0x20070568

000817e0 <memset>:
   817e0:	b4f0      	push	{r4, r5, r6, r7}
   817e2:	0784      	lsls	r4, r0, #30
   817e4:	d043      	beq.n	8186e <memset+0x8e>
   817e6:	1e54      	subs	r4, r2, #1
   817e8:	2a00      	cmp	r2, #0
   817ea:	d03e      	beq.n	8186a <memset+0x8a>
   817ec:	b2cd      	uxtb	r5, r1
   817ee:	4603      	mov	r3, r0
   817f0:	e003      	b.n	817fa <memset+0x1a>
   817f2:	1e62      	subs	r2, r4, #1
   817f4:	2c00      	cmp	r4, #0
   817f6:	d038      	beq.n	8186a <memset+0x8a>
   817f8:	4614      	mov	r4, r2
   817fa:	f803 5b01 	strb.w	r5, [r3], #1
   817fe:	079a      	lsls	r2, r3, #30
   81800:	d1f7      	bne.n	817f2 <memset+0x12>
   81802:	2c03      	cmp	r4, #3
   81804:	d92a      	bls.n	8185c <memset+0x7c>
   81806:	b2cd      	uxtb	r5, r1
   81808:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8180c:	2c0f      	cmp	r4, #15
   8180e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81812:	d915      	bls.n	81840 <memset+0x60>
   81814:	f1a4 0710 	sub.w	r7, r4, #16
   81818:	093f      	lsrs	r7, r7, #4
   8181a:	f103 0610 	add.w	r6, r3, #16
   8181e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81822:	461a      	mov	r2, r3
   81824:	6015      	str	r5, [r2, #0]
   81826:	6055      	str	r5, [r2, #4]
   81828:	6095      	str	r5, [r2, #8]
   8182a:	60d5      	str	r5, [r2, #12]
   8182c:	3210      	adds	r2, #16
   8182e:	42b2      	cmp	r2, r6
   81830:	d1f8      	bne.n	81824 <memset+0x44>
   81832:	f004 040f 	and.w	r4, r4, #15
   81836:	3701      	adds	r7, #1
   81838:	2c03      	cmp	r4, #3
   8183a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8183e:	d90d      	bls.n	8185c <memset+0x7c>
   81840:	461e      	mov	r6, r3
   81842:	4622      	mov	r2, r4
   81844:	3a04      	subs	r2, #4
   81846:	2a03      	cmp	r2, #3
   81848:	f846 5b04 	str.w	r5, [r6], #4
   8184c:	d8fa      	bhi.n	81844 <memset+0x64>
   8184e:	1f22      	subs	r2, r4, #4
   81850:	f022 0203 	bic.w	r2, r2, #3
   81854:	3204      	adds	r2, #4
   81856:	4413      	add	r3, r2
   81858:	f004 0403 	and.w	r4, r4, #3
   8185c:	b12c      	cbz	r4, 8186a <memset+0x8a>
   8185e:	b2c9      	uxtb	r1, r1
   81860:	441c      	add	r4, r3
   81862:	f803 1b01 	strb.w	r1, [r3], #1
   81866:	42a3      	cmp	r3, r4
   81868:	d1fb      	bne.n	81862 <memset+0x82>
   8186a:	bcf0      	pop	{r4, r5, r6, r7}
   8186c:	4770      	bx	lr
   8186e:	4614      	mov	r4, r2
   81870:	4603      	mov	r3, r0
   81872:	e7c6      	b.n	81802 <memset+0x22>

00081874 <setbuf>:
   81874:	2900      	cmp	r1, #0
   81876:	bf0c      	ite	eq
   81878:	2202      	moveq	r2, #2
   8187a:	2200      	movne	r2, #0
   8187c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81880:	f000 b800 	b.w	81884 <setvbuf>

00081884 <setvbuf>:
   81884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81888:	4d3c      	ldr	r5, [pc, #240]	; (8197c <setvbuf+0xf8>)
   8188a:	4604      	mov	r4, r0
   8188c:	682d      	ldr	r5, [r5, #0]
   8188e:	4688      	mov	r8, r1
   81890:	4616      	mov	r6, r2
   81892:	461f      	mov	r7, r3
   81894:	b115      	cbz	r5, 8189c <setvbuf+0x18>
   81896:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81898:	2b00      	cmp	r3, #0
   8189a:	d04f      	beq.n	8193c <setvbuf+0xb8>
   8189c:	2e02      	cmp	r6, #2
   8189e:	d830      	bhi.n	81902 <setvbuf+0x7e>
   818a0:	2f00      	cmp	r7, #0
   818a2:	db2e      	blt.n	81902 <setvbuf+0x7e>
   818a4:	4628      	mov	r0, r5
   818a6:	4621      	mov	r1, r4
   818a8:	f001 f856 	bl	82958 <_fflush_r>
   818ac:	89a3      	ldrh	r3, [r4, #12]
   818ae:	2200      	movs	r2, #0
   818b0:	6062      	str	r2, [r4, #4]
   818b2:	61a2      	str	r2, [r4, #24]
   818b4:	061a      	lsls	r2, r3, #24
   818b6:	d428      	bmi.n	8190a <setvbuf+0x86>
   818b8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   818bc:	b29b      	uxth	r3, r3
   818be:	2e02      	cmp	r6, #2
   818c0:	81a3      	strh	r3, [r4, #12]
   818c2:	d02d      	beq.n	81920 <setvbuf+0x9c>
   818c4:	f1b8 0f00 	cmp.w	r8, #0
   818c8:	d03c      	beq.n	81944 <setvbuf+0xc0>
   818ca:	2e01      	cmp	r6, #1
   818cc:	d013      	beq.n	818f6 <setvbuf+0x72>
   818ce:	b29b      	uxth	r3, r3
   818d0:	f003 0008 	and.w	r0, r3, #8
   818d4:	4a2a      	ldr	r2, [pc, #168]	; (81980 <setvbuf+0xfc>)
   818d6:	b280      	uxth	r0, r0
   818d8:	63ea      	str	r2, [r5, #60]	; 0x3c
   818da:	f8c4 8000 	str.w	r8, [r4]
   818de:	f8c4 8010 	str.w	r8, [r4, #16]
   818e2:	6167      	str	r7, [r4, #20]
   818e4:	b178      	cbz	r0, 81906 <setvbuf+0x82>
   818e6:	f013 0f03 	tst.w	r3, #3
   818ea:	bf18      	it	ne
   818ec:	2700      	movne	r7, #0
   818ee:	60a7      	str	r7, [r4, #8]
   818f0:	2000      	movs	r0, #0
   818f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   818f6:	f043 0301 	orr.w	r3, r3, #1
   818fa:	427a      	negs	r2, r7
   818fc:	81a3      	strh	r3, [r4, #12]
   818fe:	61a2      	str	r2, [r4, #24]
   81900:	e7e5      	b.n	818ce <setvbuf+0x4a>
   81902:	f04f 30ff 	mov.w	r0, #4294967295
   81906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8190a:	4628      	mov	r0, r5
   8190c:	6921      	ldr	r1, [r4, #16]
   8190e:	f001 f983 	bl	82c18 <_free_r>
   81912:	89a3      	ldrh	r3, [r4, #12]
   81914:	2e02      	cmp	r6, #2
   81916:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8191a:	b29b      	uxth	r3, r3
   8191c:	81a3      	strh	r3, [r4, #12]
   8191e:	d1d1      	bne.n	818c4 <setvbuf+0x40>
   81920:	2000      	movs	r0, #0
   81922:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81926:	f043 0302 	orr.w	r3, r3, #2
   8192a:	2500      	movs	r5, #0
   8192c:	2101      	movs	r1, #1
   8192e:	81a3      	strh	r3, [r4, #12]
   81930:	60a5      	str	r5, [r4, #8]
   81932:	6022      	str	r2, [r4, #0]
   81934:	6122      	str	r2, [r4, #16]
   81936:	6161      	str	r1, [r4, #20]
   81938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8193c:	4628      	mov	r0, r5
   8193e:	f001 f827 	bl	82990 <__sinit>
   81942:	e7ab      	b.n	8189c <setvbuf+0x18>
   81944:	2f00      	cmp	r7, #0
   81946:	bf08      	it	eq
   81948:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   8194c:	4638      	mov	r0, r7
   8194e:	f001 fc59 	bl	83204 <malloc>
   81952:	4680      	mov	r8, r0
   81954:	b128      	cbz	r0, 81962 <setvbuf+0xde>
   81956:	89a3      	ldrh	r3, [r4, #12]
   81958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8195c:	b29b      	uxth	r3, r3
   8195e:	81a3      	strh	r3, [r4, #12]
   81960:	e7b3      	b.n	818ca <setvbuf+0x46>
   81962:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81966:	f001 fc4d 	bl	83204 <malloc>
   8196a:	4680      	mov	r8, r0
   8196c:	b918      	cbnz	r0, 81976 <setvbuf+0xf2>
   8196e:	89a3      	ldrh	r3, [r4, #12]
   81970:	f04f 30ff 	mov.w	r0, #4294967295
   81974:	e7d5      	b.n	81922 <setvbuf+0x9e>
   81976:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8197a:	e7ec      	b.n	81956 <setvbuf+0xd2>
   8197c:	20070568 	.word	0x20070568
   81980:	00082985 	.word	0x00082985

00081984 <strlen>:
   81984:	f020 0103 	bic.w	r1, r0, #3
   81988:	f010 0003 	ands.w	r0, r0, #3
   8198c:	f1c0 0000 	rsb	r0, r0, #0
   81990:	f851 3b04 	ldr.w	r3, [r1], #4
   81994:	f100 0c04 	add.w	ip, r0, #4
   81998:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8199c:	f06f 0200 	mvn.w	r2, #0
   819a0:	bf1c      	itt	ne
   819a2:	fa22 f20c 	lsrne.w	r2, r2, ip
   819a6:	4313      	orrne	r3, r2
   819a8:	f04f 0c01 	mov.w	ip, #1
   819ac:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   819b0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   819b4:	eba3 020c 	sub.w	r2, r3, ip
   819b8:	ea22 0203 	bic.w	r2, r2, r3
   819bc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   819c0:	bf04      	itt	eq
   819c2:	f851 3b04 	ldreq.w	r3, [r1], #4
   819c6:	3004      	addeq	r0, #4
   819c8:	d0f4      	beq.n	819b4 <strlen+0x30>
   819ca:	f013 0fff 	tst.w	r3, #255	; 0xff
   819ce:	bf1f      	itttt	ne
   819d0:	3001      	addne	r0, #1
   819d2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   819d6:	3001      	addne	r0, #1
   819d8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   819dc:	bf18      	it	ne
   819de:	3001      	addne	r0, #1
   819e0:	4770      	bx	lr
   819e2:	bf00      	nop

000819e4 <__sprint_r.part.0>:
   819e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   819e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   819ea:	049c      	lsls	r4, r3, #18
   819ec:	460e      	mov	r6, r1
   819ee:	4680      	mov	r8, r0
   819f0:	4691      	mov	r9, r2
   819f2:	d52a      	bpl.n	81a4a <__sprint_r.part.0+0x66>
   819f4:	6893      	ldr	r3, [r2, #8]
   819f6:	6812      	ldr	r2, [r2, #0]
   819f8:	f102 0a08 	add.w	sl, r2, #8
   819fc:	b31b      	cbz	r3, 81a46 <__sprint_r.part.0+0x62>
   819fe:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81a02:	08bf      	lsrs	r7, r7, #2
   81a04:	d017      	beq.n	81a36 <__sprint_r.part.0+0x52>
   81a06:	3d04      	subs	r5, #4
   81a08:	2400      	movs	r4, #0
   81a0a:	e001      	b.n	81a10 <__sprint_r.part.0+0x2c>
   81a0c:	42a7      	cmp	r7, r4
   81a0e:	d010      	beq.n	81a32 <__sprint_r.part.0+0x4e>
   81a10:	4640      	mov	r0, r8
   81a12:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81a16:	4632      	mov	r2, r6
   81a18:	f001 f850 	bl	82abc <_fputwc_r>
   81a1c:	1c43      	adds	r3, r0, #1
   81a1e:	f104 0401 	add.w	r4, r4, #1
   81a22:	d1f3      	bne.n	81a0c <__sprint_r.part.0+0x28>
   81a24:	2300      	movs	r3, #0
   81a26:	f8c9 3008 	str.w	r3, [r9, #8]
   81a2a:	f8c9 3004 	str.w	r3, [r9, #4]
   81a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81a32:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81a36:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81a3a:	f8c9 3008 	str.w	r3, [r9, #8]
   81a3e:	f10a 0a08 	add.w	sl, sl, #8
   81a42:	2b00      	cmp	r3, #0
   81a44:	d1db      	bne.n	819fe <__sprint_r.part.0+0x1a>
   81a46:	2000      	movs	r0, #0
   81a48:	e7ec      	b.n	81a24 <__sprint_r.part.0+0x40>
   81a4a:	f001 f9b1 	bl	82db0 <__sfvwrite_r>
   81a4e:	2300      	movs	r3, #0
   81a50:	f8c9 3008 	str.w	r3, [r9, #8]
   81a54:	f8c9 3004 	str.w	r3, [r9, #4]
   81a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081a5c <_vfiprintf_r>:
   81a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a60:	b0b1      	sub	sp, #196	; 0xc4
   81a62:	461c      	mov	r4, r3
   81a64:	9102      	str	r1, [sp, #8]
   81a66:	4690      	mov	r8, r2
   81a68:	9308      	str	r3, [sp, #32]
   81a6a:	9006      	str	r0, [sp, #24]
   81a6c:	b118      	cbz	r0, 81a76 <_vfiprintf_r+0x1a>
   81a6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81a70:	2b00      	cmp	r3, #0
   81a72:	f000 80e8 	beq.w	81c46 <_vfiprintf_r+0x1ea>
   81a76:	9d02      	ldr	r5, [sp, #8]
   81a78:	89ab      	ldrh	r3, [r5, #12]
   81a7a:	b29a      	uxth	r2, r3
   81a7c:	0490      	lsls	r0, r2, #18
   81a7e:	d407      	bmi.n	81a90 <_vfiprintf_r+0x34>
   81a80:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81a82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81a86:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81a8a:	81ab      	strh	r3, [r5, #12]
   81a8c:	b29a      	uxth	r2, r3
   81a8e:	6669      	str	r1, [r5, #100]	; 0x64
   81a90:	0711      	lsls	r1, r2, #28
   81a92:	f140 80b7 	bpl.w	81c04 <_vfiprintf_r+0x1a8>
   81a96:	f8dd b008 	ldr.w	fp, [sp, #8]
   81a9a:	f8db 3010 	ldr.w	r3, [fp, #16]
   81a9e:	2b00      	cmp	r3, #0
   81aa0:	f000 80b0 	beq.w	81c04 <_vfiprintf_r+0x1a8>
   81aa4:	f002 021a 	and.w	r2, r2, #26
   81aa8:	2a0a      	cmp	r2, #10
   81aaa:	f000 80b7 	beq.w	81c1c <_vfiprintf_r+0x1c0>
   81aae:	2300      	movs	r3, #0
   81ab0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81ab4:	930a      	str	r3, [sp, #40]	; 0x28
   81ab6:	9315      	str	r3, [sp, #84]	; 0x54
   81ab8:	9314      	str	r3, [sp, #80]	; 0x50
   81aba:	9309      	str	r3, [sp, #36]	; 0x24
   81abc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81ac0:	464e      	mov	r6, r9
   81ac2:	f898 3000 	ldrb.w	r3, [r8]
   81ac6:	2b00      	cmp	r3, #0
   81ac8:	f000 84c8 	beq.w	8245c <_vfiprintf_r+0xa00>
   81acc:	2b25      	cmp	r3, #37	; 0x25
   81ace:	f000 84c5 	beq.w	8245c <_vfiprintf_r+0xa00>
   81ad2:	f108 0201 	add.w	r2, r8, #1
   81ad6:	e001      	b.n	81adc <_vfiprintf_r+0x80>
   81ad8:	2b25      	cmp	r3, #37	; 0x25
   81ada:	d004      	beq.n	81ae6 <_vfiprintf_r+0x8a>
   81adc:	7813      	ldrb	r3, [r2, #0]
   81ade:	4614      	mov	r4, r2
   81ae0:	3201      	adds	r2, #1
   81ae2:	2b00      	cmp	r3, #0
   81ae4:	d1f8      	bne.n	81ad8 <_vfiprintf_r+0x7c>
   81ae6:	ebc8 0504 	rsb	r5, r8, r4
   81aea:	b195      	cbz	r5, 81b12 <_vfiprintf_r+0xb6>
   81aec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81aee:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81af0:	3301      	adds	r3, #1
   81af2:	442a      	add	r2, r5
   81af4:	2b07      	cmp	r3, #7
   81af6:	f8c6 8000 	str.w	r8, [r6]
   81afa:	6075      	str	r5, [r6, #4]
   81afc:	9215      	str	r2, [sp, #84]	; 0x54
   81afe:	9314      	str	r3, [sp, #80]	; 0x50
   81b00:	dd7b      	ble.n	81bfa <_vfiprintf_r+0x19e>
   81b02:	2a00      	cmp	r2, #0
   81b04:	f040 84d5 	bne.w	824b2 <_vfiprintf_r+0xa56>
   81b08:	9809      	ldr	r0, [sp, #36]	; 0x24
   81b0a:	9214      	str	r2, [sp, #80]	; 0x50
   81b0c:	4428      	add	r0, r5
   81b0e:	464e      	mov	r6, r9
   81b10:	9009      	str	r0, [sp, #36]	; 0x24
   81b12:	7823      	ldrb	r3, [r4, #0]
   81b14:	2b00      	cmp	r3, #0
   81b16:	f000 83ed 	beq.w	822f4 <_vfiprintf_r+0x898>
   81b1a:	2100      	movs	r1, #0
   81b1c:	f04f 0200 	mov.w	r2, #0
   81b20:	f04f 3cff 	mov.w	ip, #4294967295
   81b24:	7863      	ldrb	r3, [r4, #1]
   81b26:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   81b2a:	9104      	str	r1, [sp, #16]
   81b2c:	468a      	mov	sl, r1
   81b2e:	f104 0801 	add.w	r8, r4, #1
   81b32:	4608      	mov	r0, r1
   81b34:	4665      	mov	r5, ip
   81b36:	f108 0801 	add.w	r8, r8, #1
   81b3a:	f1a3 0220 	sub.w	r2, r3, #32
   81b3e:	2a58      	cmp	r2, #88	; 0x58
   81b40:	f200 82d9 	bhi.w	820f6 <_vfiprintf_r+0x69a>
   81b44:	e8df f012 	tbh	[pc, r2, lsl #1]
   81b48:	02d702cb 	.word	0x02d702cb
   81b4c:	02d202d7 	.word	0x02d202d7
   81b50:	02d702d7 	.word	0x02d702d7
   81b54:	02d702d7 	.word	0x02d702d7
   81b58:	02d702d7 	.word	0x02d702d7
   81b5c:	028f0282 	.word	0x028f0282
   81b60:	008402d7 	.word	0x008402d7
   81b64:	02d70293 	.word	0x02d70293
   81b68:	0196012b 	.word	0x0196012b
   81b6c:	01960196 	.word	0x01960196
   81b70:	01960196 	.word	0x01960196
   81b74:	01960196 	.word	0x01960196
   81b78:	01960196 	.word	0x01960196
   81b7c:	02d702d7 	.word	0x02d702d7
   81b80:	02d702d7 	.word	0x02d702d7
   81b84:	02d702d7 	.word	0x02d702d7
   81b88:	02d702d7 	.word	0x02d702d7
   81b8c:	02d702d7 	.word	0x02d702d7
   81b90:	02d70130 	.word	0x02d70130
   81b94:	02d702d7 	.word	0x02d702d7
   81b98:	02d702d7 	.word	0x02d702d7
   81b9c:	02d702d7 	.word	0x02d702d7
   81ba0:	02d702d7 	.word	0x02d702d7
   81ba4:	017b02d7 	.word	0x017b02d7
   81ba8:	02d702d7 	.word	0x02d702d7
   81bac:	02d702d7 	.word	0x02d702d7
   81bb0:	01a402d7 	.word	0x01a402d7
   81bb4:	02d702d7 	.word	0x02d702d7
   81bb8:	02d701bf 	.word	0x02d701bf
   81bbc:	02d702d7 	.word	0x02d702d7
   81bc0:	02d702d7 	.word	0x02d702d7
   81bc4:	02d702d7 	.word	0x02d702d7
   81bc8:	02d702d7 	.word	0x02d702d7
   81bcc:	01e402d7 	.word	0x01e402d7
   81bd0:	02d701fa 	.word	0x02d701fa
   81bd4:	02d702d7 	.word	0x02d702d7
   81bd8:	01fa0216 	.word	0x01fa0216
   81bdc:	02d702d7 	.word	0x02d702d7
   81be0:	02d7021b 	.word	0x02d7021b
   81be4:	00890228 	.word	0x00890228
   81be8:	027d0266 	.word	0x027d0266
   81bec:	023a02d7 	.word	0x023a02d7
   81bf0:	011902d7 	.word	0x011902d7
   81bf4:	02d702d7 	.word	0x02d702d7
   81bf8:	02af      	.short	0x02af
   81bfa:	3608      	adds	r6, #8
   81bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
   81bfe:	4428      	add	r0, r5
   81c00:	9009      	str	r0, [sp, #36]	; 0x24
   81c02:	e786      	b.n	81b12 <_vfiprintf_r+0xb6>
   81c04:	9806      	ldr	r0, [sp, #24]
   81c06:	9902      	ldr	r1, [sp, #8]
   81c08:	f000 fd90 	bl	8272c <__swsetup_r>
   81c0c:	b9b0      	cbnz	r0, 81c3c <_vfiprintf_r+0x1e0>
   81c0e:	9d02      	ldr	r5, [sp, #8]
   81c10:	89aa      	ldrh	r2, [r5, #12]
   81c12:	f002 021a 	and.w	r2, r2, #26
   81c16:	2a0a      	cmp	r2, #10
   81c18:	f47f af49 	bne.w	81aae <_vfiprintf_r+0x52>
   81c1c:	f8dd b008 	ldr.w	fp, [sp, #8]
   81c20:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81c24:	2b00      	cmp	r3, #0
   81c26:	f6ff af42 	blt.w	81aae <_vfiprintf_r+0x52>
   81c2a:	9806      	ldr	r0, [sp, #24]
   81c2c:	4659      	mov	r1, fp
   81c2e:	4642      	mov	r2, r8
   81c30:	4623      	mov	r3, r4
   81c32:	f000 fd3d 	bl	826b0 <__sbprintf>
   81c36:	b031      	add	sp, #196	; 0xc4
   81c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c3c:	f04f 30ff 	mov.w	r0, #4294967295
   81c40:	b031      	add	sp, #196	; 0xc4
   81c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c46:	f000 fea3 	bl	82990 <__sinit>
   81c4a:	e714      	b.n	81a76 <_vfiprintf_r+0x1a>
   81c4c:	4240      	negs	r0, r0
   81c4e:	9308      	str	r3, [sp, #32]
   81c50:	f04a 0a04 	orr.w	sl, sl, #4
   81c54:	f898 3000 	ldrb.w	r3, [r8]
   81c58:	e76d      	b.n	81b36 <_vfiprintf_r+0xda>
   81c5a:	f01a 0320 	ands.w	r3, sl, #32
   81c5e:	9004      	str	r0, [sp, #16]
   81c60:	46ac      	mov	ip, r5
   81c62:	f000 80f4 	beq.w	81e4e <_vfiprintf_r+0x3f2>
   81c66:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c6a:	f10b 0307 	add.w	r3, fp, #7
   81c6e:	f023 0307 	bic.w	r3, r3, #7
   81c72:	f103 0408 	add.w	r4, r3, #8
   81c76:	9408      	str	r4, [sp, #32]
   81c78:	e9d3 4500 	ldrd	r4, r5, [r3]
   81c7c:	2300      	movs	r3, #0
   81c7e:	f04f 0000 	mov.w	r0, #0
   81c82:	2100      	movs	r1, #0
   81c84:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   81c88:	f8cd c014 	str.w	ip, [sp, #20]
   81c8c:	9107      	str	r1, [sp, #28]
   81c8e:	f1bc 0f00 	cmp.w	ip, #0
   81c92:	bfa8      	it	ge
   81c94:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81c98:	ea54 0205 	orrs.w	r2, r4, r5
   81c9c:	f040 80ad 	bne.w	81dfa <_vfiprintf_r+0x39e>
   81ca0:	f1bc 0f00 	cmp.w	ip, #0
   81ca4:	f040 80a9 	bne.w	81dfa <_vfiprintf_r+0x39e>
   81ca8:	2b00      	cmp	r3, #0
   81caa:	f040 83c0 	bne.w	8242e <_vfiprintf_r+0x9d2>
   81cae:	f01a 0f01 	tst.w	sl, #1
   81cb2:	f000 83bc 	beq.w	8242e <_vfiprintf_r+0x9d2>
   81cb6:	2330      	movs	r3, #48	; 0x30
   81cb8:	af30      	add	r7, sp, #192	; 0xc0
   81cba:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81cbe:	ebc7 0409 	rsb	r4, r7, r9
   81cc2:	9405      	str	r4, [sp, #20]
   81cc4:	f8dd b014 	ldr.w	fp, [sp, #20]
   81cc8:	9c07      	ldr	r4, [sp, #28]
   81cca:	45e3      	cmp	fp, ip
   81ccc:	bfb8      	it	lt
   81cce:	46e3      	movlt	fp, ip
   81cd0:	f8cd b00c 	str.w	fp, [sp, #12]
   81cd4:	b11c      	cbz	r4, 81cde <_vfiprintf_r+0x282>
   81cd6:	f10b 0b01 	add.w	fp, fp, #1
   81cda:	f8cd b00c 	str.w	fp, [sp, #12]
   81cde:	f01a 0502 	ands.w	r5, sl, #2
   81ce2:	9507      	str	r5, [sp, #28]
   81ce4:	d005      	beq.n	81cf2 <_vfiprintf_r+0x296>
   81ce6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81cea:	f10b 0b02 	add.w	fp, fp, #2
   81cee:	f8cd b00c 	str.w	fp, [sp, #12]
   81cf2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81cf6:	930b      	str	r3, [sp, #44]	; 0x2c
   81cf8:	f040 821b 	bne.w	82132 <_vfiprintf_r+0x6d6>
   81cfc:	9d04      	ldr	r5, [sp, #16]
   81cfe:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81d02:	ebcb 0405 	rsb	r4, fp, r5
   81d06:	2c00      	cmp	r4, #0
   81d08:	f340 8213 	ble.w	82132 <_vfiprintf_r+0x6d6>
   81d0c:	2c10      	cmp	r4, #16
   81d0e:	f340 8489 	ble.w	82624 <_vfiprintf_r+0xbc8>
   81d12:	4dbe      	ldr	r5, [pc, #760]	; (8200c <_vfiprintf_r+0x5b0>)
   81d14:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d16:	462b      	mov	r3, r5
   81d18:	9814      	ldr	r0, [sp, #80]	; 0x50
   81d1a:	4625      	mov	r5, r4
   81d1c:	f04f 0b10 	mov.w	fp, #16
   81d20:	4664      	mov	r4, ip
   81d22:	46b4      	mov	ip, r6
   81d24:	461e      	mov	r6, r3
   81d26:	e006      	b.n	81d36 <_vfiprintf_r+0x2da>
   81d28:	1c83      	adds	r3, r0, #2
   81d2a:	f10c 0c08 	add.w	ip, ip, #8
   81d2e:	4608      	mov	r0, r1
   81d30:	3d10      	subs	r5, #16
   81d32:	2d10      	cmp	r5, #16
   81d34:	dd11      	ble.n	81d5a <_vfiprintf_r+0x2fe>
   81d36:	1c41      	adds	r1, r0, #1
   81d38:	3210      	adds	r2, #16
   81d3a:	2907      	cmp	r1, #7
   81d3c:	9215      	str	r2, [sp, #84]	; 0x54
   81d3e:	e88c 0840 	stmia.w	ip, {r6, fp}
   81d42:	9114      	str	r1, [sp, #80]	; 0x50
   81d44:	ddf0      	ble.n	81d28 <_vfiprintf_r+0x2cc>
   81d46:	2a00      	cmp	r2, #0
   81d48:	f040 81e6 	bne.w	82118 <_vfiprintf_r+0x6bc>
   81d4c:	3d10      	subs	r5, #16
   81d4e:	2d10      	cmp	r5, #16
   81d50:	f04f 0301 	mov.w	r3, #1
   81d54:	4610      	mov	r0, r2
   81d56:	46cc      	mov	ip, r9
   81d58:	dced      	bgt.n	81d36 <_vfiprintf_r+0x2da>
   81d5a:	4631      	mov	r1, r6
   81d5c:	4666      	mov	r6, ip
   81d5e:	46a4      	mov	ip, r4
   81d60:	462c      	mov	r4, r5
   81d62:	460d      	mov	r5, r1
   81d64:	4422      	add	r2, r4
   81d66:	2b07      	cmp	r3, #7
   81d68:	9215      	str	r2, [sp, #84]	; 0x54
   81d6a:	6035      	str	r5, [r6, #0]
   81d6c:	6074      	str	r4, [r6, #4]
   81d6e:	9314      	str	r3, [sp, #80]	; 0x50
   81d70:	f300 836d 	bgt.w	8244e <_vfiprintf_r+0x9f2>
   81d74:	3608      	adds	r6, #8
   81d76:	1c59      	adds	r1, r3, #1
   81d78:	e1de      	b.n	82138 <_vfiprintf_r+0x6dc>
   81d7a:	f01a 0f20 	tst.w	sl, #32
   81d7e:	9004      	str	r0, [sp, #16]
   81d80:	46ac      	mov	ip, r5
   81d82:	f000 808d 	beq.w	81ea0 <_vfiprintf_r+0x444>
   81d86:	9d08      	ldr	r5, [sp, #32]
   81d88:	1deb      	adds	r3, r5, #7
   81d8a:	f023 0307 	bic.w	r3, r3, #7
   81d8e:	f103 0b08 	add.w	fp, r3, #8
   81d92:	e9d3 4500 	ldrd	r4, r5, [r3]
   81d96:	f8cd b020 	str.w	fp, [sp, #32]
   81d9a:	2301      	movs	r3, #1
   81d9c:	e76f      	b.n	81c7e <_vfiprintf_r+0x222>
   81d9e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81da2:	f898 3000 	ldrb.w	r3, [r8]
   81da6:	e6c6      	b.n	81b36 <_vfiprintf_r+0xda>
   81da8:	f04a 0a10 	orr.w	sl, sl, #16
   81dac:	f01a 0f20 	tst.w	sl, #32
   81db0:	9004      	str	r0, [sp, #16]
   81db2:	46ac      	mov	ip, r5
   81db4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81db8:	f000 80c8 	beq.w	81f4c <_vfiprintf_r+0x4f0>
   81dbc:	9c08      	ldr	r4, [sp, #32]
   81dbe:	1de1      	adds	r1, r4, #7
   81dc0:	f021 0107 	bic.w	r1, r1, #7
   81dc4:	e9d1 2300 	ldrd	r2, r3, [r1]
   81dc8:	3108      	adds	r1, #8
   81dca:	9108      	str	r1, [sp, #32]
   81dcc:	4614      	mov	r4, r2
   81dce:	461d      	mov	r5, r3
   81dd0:	2a00      	cmp	r2, #0
   81dd2:	f173 0b00 	sbcs.w	fp, r3, #0
   81dd6:	f2c0 83ce 	blt.w	82576 <_vfiprintf_r+0xb1a>
   81dda:	f1bc 0f00 	cmp.w	ip, #0
   81dde:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81de2:	bfa8      	it	ge
   81de4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81de8:	ea54 0205 	orrs.w	r2, r4, r5
   81dec:	9007      	str	r0, [sp, #28]
   81dee:	f8cd c014 	str.w	ip, [sp, #20]
   81df2:	f04f 0301 	mov.w	r3, #1
   81df6:	f43f af53 	beq.w	81ca0 <_vfiprintf_r+0x244>
   81dfa:	2b01      	cmp	r3, #1
   81dfc:	f000 8319 	beq.w	82432 <_vfiprintf_r+0x9d6>
   81e00:	2b02      	cmp	r3, #2
   81e02:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81e06:	f040 824c 	bne.w	822a2 <_vfiprintf_r+0x846>
   81e0a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81e0e:	4619      	mov	r1, r3
   81e10:	f004 000f 	and.w	r0, r4, #15
   81e14:	0922      	lsrs	r2, r4, #4
   81e16:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81e1a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81e1e:	092b      	lsrs	r3, r5, #4
   81e20:	7008      	strb	r0, [r1, #0]
   81e22:	ea52 0003 	orrs.w	r0, r2, r3
   81e26:	460f      	mov	r7, r1
   81e28:	4614      	mov	r4, r2
   81e2a:	461d      	mov	r5, r3
   81e2c:	f101 31ff 	add.w	r1, r1, #4294967295
   81e30:	d1ee      	bne.n	81e10 <_vfiprintf_r+0x3b4>
   81e32:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81e36:	ebc7 0309 	rsb	r3, r7, r9
   81e3a:	9305      	str	r3, [sp, #20]
   81e3c:	e742      	b.n	81cc4 <_vfiprintf_r+0x268>
   81e3e:	f04a 0a10 	orr.w	sl, sl, #16
   81e42:	f01a 0320 	ands.w	r3, sl, #32
   81e46:	9004      	str	r0, [sp, #16]
   81e48:	46ac      	mov	ip, r5
   81e4a:	f47f af0c 	bne.w	81c66 <_vfiprintf_r+0x20a>
   81e4e:	f01a 0210 	ands.w	r2, sl, #16
   81e52:	f040 8311 	bne.w	82478 <_vfiprintf_r+0xa1c>
   81e56:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   81e5a:	f000 830d 	beq.w	82478 <_vfiprintf_r+0xa1c>
   81e5e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81e62:	4613      	mov	r3, r2
   81e64:	f8bb 4000 	ldrh.w	r4, [fp]
   81e68:	f10b 0b04 	add.w	fp, fp, #4
   81e6c:	2500      	movs	r5, #0
   81e6e:	f8cd b020 	str.w	fp, [sp, #32]
   81e72:	e704      	b.n	81c7e <_vfiprintf_r+0x222>
   81e74:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81e78:	2000      	movs	r0, #0
   81e7a:	f818 3b01 	ldrb.w	r3, [r8], #1
   81e7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81e82:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81e86:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81e8a:	2a09      	cmp	r2, #9
   81e8c:	d9f5      	bls.n	81e7a <_vfiprintf_r+0x41e>
   81e8e:	e654      	b.n	81b3a <_vfiprintf_r+0xde>
   81e90:	f04a 0a10 	orr.w	sl, sl, #16
   81e94:	f01a 0f20 	tst.w	sl, #32
   81e98:	9004      	str	r0, [sp, #16]
   81e9a:	46ac      	mov	ip, r5
   81e9c:	f47f af73 	bne.w	81d86 <_vfiprintf_r+0x32a>
   81ea0:	f01a 0f10 	tst.w	sl, #16
   81ea4:	f040 82ef 	bne.w	82486 <_vfiprintf_r+0xa2a>
   81ea8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81eac:	f000 82eb 	beq.w	82486 <_vfiprintf_r+0xa2a>
   81eb0:	f8dd b020 	ldr.w	fp, [sp, #32]
   81eb4:	2500      	movs	r5, #0
   81eb6:	f8bb 4000 	ldrh.w	r4, [fp]
   81eba:	f10b 0b04 	add.w	fp, fp, #4
   81ebe:	2301      	movs	r3, #1
   81ec0:	f8cd b020 	str.w	fp, [sp, #32]
   81ec4:	e6db      	b.n	81c7e <_vfiprintf_r+0x222>
   81ec6:	46ac      	mov	ip, r5
   81ec8:	4d51      	ldr	r5, [pc, #324]	; (82010 <_vfiprintf_r+0x5b4>)
   81eca:	f01a 0f20 	tst.w	sl, #32
   81ece:	9004      	str	r0, [sp, #16]
   81ed0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81ed4:	950a      	str	r5, [sp, #40]	; 0x28
   81ed6:	f000 80f0 	beq.w	820ba <_vfiprintf_r+0x65e>
   81eda:	9d08      	ldr	r5, [sp, #32]
   81edc:	1dea      	adds	r2, r5, #7
   81ede:	f022 0207 	bic.w	r2, r2, #7
   81ee2:	f102 0b08 	add.w	fp, r2, #8
   81ee6:	f8cd b020 	str.w	fp, [sp, #32]
   81eea:	e9d2 4500 	ldrd	r4, r5, [r2]
   81eee:	f01a 0f01 	tst.w	sl, #1
   81ef2:	f000 82aa 	beq.w	8244a <_vfiprintf_r+0x9ee>
   81ef6:	ea54 0b05 	orrs.w	fp, r4, r5
   81efa:	f000 82a6 	beq.w	8244a <_vfiprintf_r+0x9ee>
   81efe:	2230      	movs	r2, #48	; 0x30
   81f00:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81f04:	f04a 0a02 	orr.w	sl, sl, #2
   81f08:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81f0c:	2302      	movs	r3, #2
   81f0e:	e6b6      	b.n	81c7e <_vfiprintf_r+0x222>
   81f10:	9b08      	ldr	r3, [sp, #32]
   81f12:	f8dd b020 	ldr.w	fp, [sp, #32]
   81f16:	681b      	ldr	r3, [r3, #0]
   81f18:	2401      	movs	r4, #1
   81f1a:	f04f 0500 	mov.w	r5, #0
   81f1e:	f10b 0b04 	add.w	fp, fp, #4
   81f22:	9004      	str	r0, [sp, #16]
   81f24:	9403      	str	r4, [sp, #12]
   81f26:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81f2a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81f2e:	f8cd b020 	str.w	fp, [sp, #32]
   81f32:	9405      	str	r4, [sp, #20]
   81f34:	af16      	add	r7, sp, #88	; 0x58
   81f36:	f04f 0c00 	mov.w	ip, #0
   81f3a:	e6d0      	b.n	81cde <_vfiprintf_r+0x282>
   81f3c:	f01a 0f20 	tst.w	sl, #32
   81f40:	9004      	str	r0, [sp, #16]
   81f42:	46ac      	mov	ip, r5
   81f44:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81f48:	f47f af38 	bne.w	81dbc <_vfiprintf_r+0x360>
   81f4c:	f01a 0f10 	tst.w	sl, #16
   81f50:	f040 82a7 	bne.w	824a2 <_vfiprintf_r+0xa46>
   81f54:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81f58:	f000 82a3 	beq.w	824a2 <_vfiprintf_r+0xa46>
   81f5c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81f60:	f9bb 4000 	ldrsh.w	r4, [fp]
   81f64:	f10b 0b04 	add.w	fp, fp, #4
   81f68:	17e5      	asrs	r5, r4, #31
   81f6a:	4622      	mov	r2, r4
   81f6c:	462b      	mov	r3, r5
   81f6e:	f8cd b020 	str.w	fp, [sp, #32]
   81f72:	e72d      	b.n	81dd0 <_vfiprintf_r+0x374>
   81f74:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81f78:	f898 3000 	ldrb.w	r3, [r8]
   81f7c:	e5db      	b.n	81b36 <_vfiprintf_r+0xda>
   81f7e:	f898 3000 	ldrb.w	r3, [r8]
   81f82:	4642      	mov	r2, r8
   81f84:	2b6c      	cmp	r3, #108	; 0x6c
   81f86:	bf03      	ittte	eq
   81f88:	f108 0801 	addeq.w	r8, r8, #1
   81f8c:	f04a 0a20 	orreq.w	sl, sl, #32
   81f90:	7853      	ldrbeq	r3, [r2, #1]
   81f92:	f04a 0a10 	orrne.w	sl, sl, #16
   81f96:	e5ce      	b.n	81b36 <_vfiprintf_r+0xda>
   81f98:	f01a 0f20 	tst.w	sl, #32
   81f9c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81fa0:	f000 82f7 	beq.w	82592 <_vfiprintf_r+0xb36>
   81fa4:	9c08      	ldr	r4, [sp, #32]
   81fa6:	6821      	ldr	r1, [r4, #0]
   81fa8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81faa:	17e5      	asrs	r5, r4, #31
   81fac:	462b      	mov	r3, r5
   81fae:	9d08      	ldr	r5, [sp, #32]
   81fb0:	4622      	mov	r2, r4
   81fb2:	3504      	adds	r5, #4
   81fb4:	9508      	str	r5, [sp, #32]
   81fb6:	e9c1 2300 	strd	r2, r3, [r1]
   81fba:	e582      	b.n	81ac2 <_vfiprintf_r+0x66>
   81fbc:	9c08      	ldr	r4, [sp, #32]
   81fbe:	46ac      	mov	ip, r5
   81fc0:	6827      	ldr	r7, [r4, #0]
   81fc2:	f04f 0500 	mov.w	r5, #0
   81fc6:	9004      	str	r0, [sp, #16]
   81fc8:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81fcc:	3404      	adds	r4, #4
   81fce:	2f00      	cmp	r7, #0
   81fd0:	f000 8332 	beq.w	82638 <_vfiprintf_r+0xbdc>
   81fd4:	f1bc 0f00 	cmp.w	ip, #0
   81fd8:	4638      	mov	r0, r7
   81fda:	f2c0 8307 	blt.w	825ec <_vfiprintf_r+0xb90>
   81fde:	4662      	mov	r2, ip
   81fe0:	2100      	movs	r1, #0
   81fe2:	f8cd c004 	str.w	ip, [sp, #4]
   81fe6:	f001 fbb1 	bl	8374c <memchr>
   81fea:	f8dd c004 	ldr.w	ip, [sp, #4]
   81fee:	2800      	cmp	r0, #0
   81ff0:	f000 833a 	beq.w	82668 <_vfiprintf_r+0xc0c>
   81ff4:	1bc0      	subs	r0, r0, r7
   81ff6:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81ffa:	4560      	cmp	r0, ip
   81ffc:	bfa8      	it	ge
   81ffe:	4660      	movge	r0, ip
   82000:	9005      	str	r0, [sp, #20]
   82002:	9408      	str	r4, [sp, #32]
   82004:	9507      	str	r5, [sp, #28]
   82006:	f04f 0c00 	mov.w	ip, #0
   8200a:	e65b      	b.n	81cc4 <_vfiprintf_r+0x268>
   8200c:	00084778 	.word	0x00084778
   82010:	00084738 	.word	0x00084738
   82014:	9b08      	ldr	r3, [sp, #32]
   82016:	f8dd b020 	ldr.w	fp, [sp, #32]
   8201a:	9004      	str	r0, [sp, #16]
   8201c:	48b2      	ldr	r0, [pc, #712]	; (822e8 <_vfiprintf_r+0x88c>)
   8201e:	681c      	ldr	r4, [r3, #0]
   82020:	2230      	movs	r2, #48	; 0x30
   82022:	2378      	movs	r3, #120	; 0x78
   82024:	f10b 0b04 	add.w	fp, fp, #4
   82028:	46ac      	mov	ip, r5
   8202a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8202e:	f04a 0a02 	orr.w	sl, sl, #2
   82032:	f8cd b020 	str.w	fp, [sp, #32]
   82036:	2500      	movs	r5, #0
   82038:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8203c:	900a      	str	r0, [sp, #40]	; 0x28
   8203e:	2302      	movs	r3, #2
   82040:	e61d      	b.n	81c7e <_vfiprintf_r+0x222>
   82042:	f04a 0a20 	orr.w	sl, sl, #32
   82046:	f898 3000 	ldrb.w	r3, [r8]
   8204a:	e574      	b.n	81b36 <_vfiprintf_r+0xda>
   8204c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82050:	f8db 0000 	ldr.w	r0, [fp]
   82054:	f10b 0304 	add.w	r3, fp, #4
   82058:	2800      	cmp	r0, #0
   8205a:	f6ff adf7 	blt.w	81c4c <_vfiprintf_r+0x1f0>
   8205e:	9308      	str	r3, [sp, #32]
   82060:	f898 3000 	ldrb.w	r3, [r8]
   82064:	e567      	b.n	81b36 <_vfiprintf_r+0xda>
   82066:	f898 3000 	ldrb.w	r3, [r8]
   8206a:	212b      	movs	r1, #43	; 0x2b
   8206c:	e563      	b.n	81b36 <_vfiprintf_r+0xda>
   8206e:	f898 3000 	ldrb.w	r3, [r8]
   82072:	f108 0401 	add.w	r4, r8, #1
   82076:	2b2a      	cmp	r3, #42	; 0x2a
   82078:	f000 8305 	beq.w	82686 <_vfiprintf_r+0xc2a>
   8207c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82080:	2a09      	cmp	r2, #9
   82082:	bf98      	it	ls
   82084:	2500      	movls	r5, #0
   82086:	f200 82fa 	bhi.w	8267e <_vfiprintf_r+0xc22>
   8208a:	f814 3b01 	ldrb.w	r3, [r4], #1
   8208e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82092:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   82096:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8209a:	2a09      	cmp	r2, #9
   8209c:	d9f5      	bls.n	8208a <_vfiprintf_r+0x62e>
   8209e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   820a2:	46a0      	mov	r8, r4
   820a4:	e549      	b.n	81b3a <_vfiprintf_r+0xde>
   820a6:	4c90      	ldr	r4, [pc, #576]	; (822e8 <_vfiprintf_r+0x88c>)
   820a8:	f01a 0f20 	tst.w	sl, #32
   820ac:	9004      	str	r0, [sp, #16]
   820ae:	46ac      	mov	ip, r5
   820b0:	940a      	str	r4, [sp, #40]	; 0x28
   820b2:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   820b6:	f47f af10 	bne.w	81eda <_vfiprintf_r+0x47e>
   820ba:	f01a 0f10 	tst.w	sl, #16
   820be:	f040 81ea 	bne.w	82496 <_vfiprintf_r+0xa3a>
   820c2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   820c6:	f000 81e6 	beq.w	82496 <_vfiprintf_r+0xa3a>
   820ca:	f8dd b020 	ldr.w	fp, [sp, #32]
   820ce:	2500      	movs	r5, #0
   820d0:	f8bb 4000 	ldrh.w	r4, [fp]
   820d4:	f10b 0b04 	add.w	fp, fp, #4
   820d8:	f8cd b020 	str.w	fp, [sp, #32]
   820dc:	e707      	b.n	81eee <_vfiprintf_r+0x492>
   820de:	f898 3000 	ldrb.w	r3, [r8]
   820e2:	2900      	cmp	r1, #0
   820e4:	f47f ad27 	bne.w	81b36 <_vfiprintf_r+0xda>
   820e8:	2120      	movs	r1, #32
   820ea:	e524      	b.n	81b36 <_vfiprintf_r+0xda>
   820ec:	f04a 0a01 	orr.w	sl, sl, #1
   820f0:	f898 3000 	ldrb.w	r3, [r8]
   820f4:	e51f      	b.n	81b36 <_vfiprintf_r+0xda>
   820f6:	9004      	str	r0, [sp, #16]
   820f8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   820fc:	2b00      	cmp	r3, #0
   820fe:	f000 80f9 	beq.w	822f4 <_vfiprintf_r+0x898>
   82102:	2501      	movs	r5, #1
   82104:	f04f 0b00 	mov.w	fp, #0
   82108:	9503      	str	r5, [sp, #12]
   8210a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8210e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82112:	9505      	str	r5, [sp, #20]
   82114:	af16      	add	r7, sp, #88	; 0x58
   82116:	e70e      	b.n	81f36 <_vfiprintf_r+0x4da>
   82118:	9806      	ldr	r0, [sp, #24]
   8211a:	9902      	ldr	r1, [sp, #8]
   8211c:	aa13      	add	r2, sp, #76	; 0x4c
   8211e:	f7ff fc61 	bl	819e4 <__sprint_r.part.0>
   82122:	2800      	cmp	r0, #0
   82124:	f040 80ed 	bne.w	82302 <_vfiprintf_r+0x8a6>
   82128:	9814      	ldr	r0, [sp, #80]	; 0x50
   8212a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8212c:	1c43      	adds	r3, r0, #1
   8212e:	46cc      	mov	ip, r9
   82130:	e5fe      	b.n	81d30 <_vfiprintf_r+0x2d4>
   82132:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82134:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82136:	1c59      	adds	r1, r3, #1
   82138:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8213c:	b168      	cbz	r0, 8215a <_vfiprintf_r+0x6fe>
   8213e:	3201      	adds	r2, #1
   82140:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   82144:	2301      	movs	r3, #1
   82146:	2907      	cmp	r1, #7
   82148:	9215      	str	r2, [sp, #84]	; 0x54
   8214a:	9114      	str	r1, [sp, #80]	; 0x50
   8214c:	e886 0009 	stmia.w	r6, {r0, r3}
   82150:	f300 8160 	bgt.w	82414 <_vfiprintf_r+0x9b8>
   82154:	460b      	mov	r3, r1
   82156:	3608      	adds	r6, #8
   82158:	3101      	adds	r1, #1
   8215a:	9c07      	ldr	r4, [sp, #28]
   8215c:	b164      	cbz	r4, 82178 <_vfiprintf_r+0x71c>
   8215e:	3202      	adds	r2, #2
   82160:	a812      	add	r0, sp, #72	; 0x48
   82162:	2302      	movs	r3, #2
   82164:	2907      	cmp	r1, #7
   82166:	9215      	str	r2, [sp, #84]	; 0x54
   82168:	9114      	str	r1, [sp, #80]	; 0x50
   8216a:	e886 0009 	stmia.w	r6, {r0, r3}
   8216e:	f300 8157 	bgt.w	82420 <_vfiprintf_r+0x9c4>
   82172:	460b      	mov	r3, r1
   82174:	3608      	adds	r6, #8
   82176:	3101      	adds	r1, #1
   82178:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8217a:	2d80      	cmp	r5, #128	; 0x80
   8217c:	f000 8101 	beq.w	82382 <_vfiprintf_r+0x926>
   82180:	9d05      	ldr	r5, [sp, #20]
   82182:	ebc5 040c 	rsb	r4, r5, ip
   82186:	2c00      	cmp	r4, #0
   82188:	dd2f      	ble.n	821ea <_vfiprintf_r+0x78e>
   8218a:	2c10      	cmp	r4, #16
   8218c:	4d57      	ldr	r5, [pc, #348]	; (822ec <_vfiprintf_r+0x890>)
   8218e:	dd22      	ble.n	821d6 <_vfiprintf_r+0x77a>
   82190:	4630      	mov	r0, r6
   82192:	f04f 0b10 	mov.w	fp, #16
   82196:	462e      	mov	r6, r5
   82198:	4625      	mov	r5, r4
   8219a:	9c06      	ldr	r4, [sp, #24]
   8219c:	e006      	b.n	821ac <_vfiprintf_r+0x750>
   8219e:	f103 0c02 	add.w	ip, r3, #2
   821a2:	3008      	adds	r0, #8
   821a4:	460b      	mov	r3, r1
   821a6:	3d10      	subs	r5, #16
   821a8:	2d10      	cmp	r5, #16
   821aa:	dd10      	ble.n	821ce <_vfiprintf_r+0x772>
   821ac:	1c59      	adds	r1, r3, #1
   821ae:	3210      	adds	r2, #16
   821b0:	2907      	cmp	r1, #7
   821b2:	9215      	str	r2, [sp, #84]	; 0x54
   821b4:	e880 0840 	stmia.w	r0, {r6, fp}
   821b8:	9114      	str	r1, [sp, #80]	; 0x50
   821ba:	ddf0      	ble.n	8219e <_vfiprintf_r+0x742>
   821bc:	2a00      	cmp	r2, #0
   821be:	d163      	bne.n	82288 <_vfiprintf_r+0x82c>
   821c0:	3d10      	subs	r5, #16
   821c2:	2d10      	cmp	r5, #16
   821c4:	f04f 0c01 	mov.w	ip, #1
   821c8:	4613      	mov	r3, r2
   821ca:	4648      	mov	r0, r9
   821cc:	dcee      	bgt.n	821ac <_vfiprintf_r+0x750>
   821ce:	462c      	mov	r4, r5
   821d0:	4661      	mov	r1, ip
   821d2:	4635      	mov	r5, r6
   821d4:	4606      	mov	r6, r0
   821d6:	4422      	add	r2, r4
   821d8:	2907      	cmp	r1, #7
   821da:	9215      	str	r2, [sp, #84]	; 0x54
   821dc:	6035      	str	r5, [r6, #0]
   821de:	6074      	str	r4, [r6, #4]
   821e0:	9114      	str	r1, [sp, #80]	; 0x50
   821e2:	f300 80c1 	bgt.w	82368 <_vfiprintf_r+0x90c>
   821e6:	3608      	adds	r6, #8
   821e8:	3101      	adds	r1, #1
   821ea:	9d05      	ldr	r5, [sp, #20]
   821ec:	2907      	cmp	r1, #7
   821ee:	442a      	add	r2, r5
   821f0:	9215      	str	r2, [sp, #84]	; 0x54
   821f2:	6037      	str	r7, [r6, #0]
   821f4:	6075      	str	r5, [r6, #4]
   821f6:	9114      	str	r1, [sp, #80]	; 0x50
   821f8:	f340 80c1 	ble.w	8237e <_vfiprintf_r+0x922>
   821fc:	2a00      	cmp	r2, #0
   821fe:	f040 8130 	bne.w	82462 <_vfiprintf_r+0xa06>
   82202:	9214      	str	r2, [sp, #80]	; 0x50
   82204:	464e      	mov	r6, r9
   82206:	f01a 0f04 	tst.w	sl, #4
   8220a:	f000 808b 	beq.w	82324 <_vfiprintf_r+0x8c8>
   8220e:	9d04      	ldr	r5, [sp, #16]
   82210:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82214:	ebcb 0405 	rsb	r4, fp, r5
   82218:	2c00      	cmp	r4, #0
   8221a:	f340 8083 	ble.w	82324 <_vfiprintf_r+0x8c8>
   8221e:	2c10      	cmp	r4, #16
   82220:	f340 821e 	ble.w	82660 <_vfiprintf_r+0xc04>
   82224:	9914      	ldr	r1, [sp, #80]	; 0x50
   82226:	4d32      	ldr	r5, [pc, #200]	; (822f0 <_vfiprintf_r+0x894>)
   82228:	2710      	movs	r7, #16
   8222a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8222e:	f8dd b008 	ldr.w	fp, [sp, #8]
   82232:	e005      	b.n	82240 <_vfiprintf_r+0x7e4>
   82234:	1c88      	adds	r0, r1, #2
   82236:	3608      	adds	r6, #8
   82238:	4619      	mov	r1, r3
   8223a:	3c10      	subs	r4, #16
   8223c:	2c10      	cmp	r4, #16
   8223e:	dd10      	ble.n	82262 <_vfiprintf_r+0x806>
   82240:	1c4b      	adds	r3, r1, #1
   82242:	3210      	adds	r2, #16
   82244:	2b07      	cmp	r3, #7
   82246:	9215      	str	r2, [sp, #84]	; 0x54
   82248:	e886 00a0 	stmia.w	r6, {r5, r7}
   8224c:	9314      	str	r3, [sp, #80]	; 0x50
   8224e:	ddf1      	ble.n	82234 <_vfiprintf_r+0x7d8>
   82250:	2a00      	cmp	r2, #0
   82252:	d17d      	bne.n	82350 <_vfiprintf_r+0x8f4>
   82254:	3c10      	subs	r4, #16
   82256:	2c10      	cmp	r4, #16
   82258:	f04f 0001 	mov.w	r0, #1
   8225c:	4611      	mov	r1, r2
   8225e:	464e      	mov	r6, r9
   82260:	dcee      	bgt.n	82240 <_vfiprintf_r+0x7e4>
   82262:	4422      	add	r2, r4
   82264:	2807      	cmp	r0, #7
   82266:	9215      	str	r2, [sp, #84]	; 0x54
   82268:	6035      	str	r5, [r6, #0]
   8226a:	6074      	str	r4, [r6, #4]
   8226c:	9014      	str	r0, [sp, #80]	; 0x50
   8226e:	dd59      	ble.n	82324 <_vfiprintf_r+0x8c8>
   82270:	2a00      	cmp	r2, #0
   82272:	d14f      	bne.n	82314 <_vfiprintf_r+0x8b8>
   82274:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82276:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8227a:	9d04      	ldr	r5, [sp, #16]
   8227c:	45ab      	cmp	fp, r5
   8227e:	bfac      	ite	ge
   82280:	445c      	addge	r4, fp
   82282:	1964      	addlt	r4, r4, r5
   82284:	9409      	str	r4, [sp, #36]	; 0x24
   82286:	e05e      	b.n	82346 <_vfiprintf_r+0x8ea>
   82288:	4620      	mov	r0, r4
   8228a:	9902      	ldr	r1, [sp, #8]
   8228c:	aa13      	add	r2, sp, #76	; 0x4c
   8228e:	f7ff fba9 	bl	819e4 <__sprint_r.part.0>
   82292:	2800      	cmp	r0, #0
   82294:	d135      	bne.n	82302 <_vfiprintf_r+0x8a6>
   82296:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82298:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8229a:	f103 0c01 	add.w	ip, r3, #1
   8229e:	4648      	mov	r0, r9
   822a0:	e781      	b.n	821a6 <_vfiprintf_r+0x74a>
   822a2:	08e0      	lsrs	r0, r4, #3
   822a4:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   822a8:	f004 0207 	and.w	r2, r4, #7
   822ac:	08e9      	lsrs	r1, r5, #3
   822ae:	3230      	adds	r2, #48	; 0x30
   822b0:	ea50 0b01 	orrs.w	fp, r0, r1
   822b4:	461f      	mov	r7, r3
   822b6:	701a      	strb	r2, [r3, #0]
   822b8:	4604      	mov	r4, r0
   822ba:	460d      	mov	r5, r1
   822bc:	f103 33ff 	add.w	r3, r3, #4294967295
   822c0:	d1ef      	bne.n	822a2 <_vfiprintf_r+0x846>
   822c2:	f01a 0f01 	tst.w	sl, #1
   822c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   822ca:	4639      	mov	r1, r7
   822cc:	f000 80b9 	beq.w	82442 <_vfiprintf_r+0x9e6>
   822d0:	2a30      	cmp	r2, #48	; 0x30
   822d2:	f43f acf4 	beq.w	81cbe <_vfiprintf_r+0x262>
   822d6:	461f      	mov	r7, r3
   822d8:	ebc7 0509 	rsb	r5, r7, r9
   822dc:	2330      	movs	r3, #48	; 0x30
   822de:	9505      	str	r5, [sp, #20]
   822e0:	f801 3c01 	strb.w	r3, [r1, #-1]
   822e4:	e4ee      	b.n	81cc4 <_vfiprintf_r+0x268>
   822e6:	bf00      	nop
   822e8:	0008474c 	.word	0x0008474c
   822ec:	00084768 	.word	0x00084768
   822f0:	00084778 	.word	0x00084778
   822f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   822f6:	b123      	cbz	r3, 82302 <_vfiprintf_r+0x8a6>
   822f8:	9806      	ldr	r0, [sp, #24]
   822fa:	9902      	ldr	r1, [sp, #8]
   822fc:	aa13      	add	r2, sp, #76	; 0x4c
   822fe:	f7ff fb71 	bl	819e4 <__sprint_r.part.0>
   82302:	9c02      	ldr	r4, [sp, #8]
   82304:	89a3      	ldrh	r3, [r4, #12]
   82306:	065b      	lsls	r3, r3, #25
   82308:	f53f ac98 	bmi.w	81c3c <_vfiprintf_r+0x1e0>
   8230c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8230e:	b031      	add	sp, #196	; 0xc4
   82310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82314:	9806      	ldr	r0, [sp, #24]
   82316:	9902      	ldr	r1, [sp, #8]
   82318:	aa13      	add	r2, sp, #76	; 0x4c
   8231a:	f7ff fb63 	bl	819e4 <__sprint_r.part.0>
   8231e:	2800      	cmp	r0, #0
   82320:	d1ef      	bne.n	82302 <_vfiprintf_r+0x8a6>
   82322:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82324:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82326:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8232a:	9d04      	ldr	r5, [sp, #16]
   8232c:	45ab      	cmp	fp, r5
   8232e:	bfac      	ite	ge
   82330:	445c      	addge	r4, fp
   82332:	1964      	addlt	r4, r4, r5
   82334:	9409      	str	r4, [sp, #36]	; 0x24
   82336:	b132      	cbz	r2, 82346 <_vfiprintf_r+0x8ea>
   82338:	9806      	ldr	r0, [sp, #24]
   8233a:	9902      	ldr	r1, [sp, #8]
   8233c:	aa13      	add	r2, sp, #76	; 0x4c
   8233e:	f7ff fb51 	bl	819e4 <__sprint_r.part.0>
   82342:	2800      	cmp	r0, #0
   82344:	d1dd      	bne.n	82302 <_vfiprintf_r+0x8a6>
   82346:	2000      	movs	r0, #0
   82348:	9014      	str	r0, [sp, #80]	; 0x50
   8234a:	464e      	mov	r6, r9
   8234c:	f7ff bbb9 	b.w	81ac2 <_vfiprintf_r+0x66>
   82350:	4650      	mov	r0, sl
   82352:	4659      	mov	r1, fp
   82354:	aa13      	add	r2, sp, #76	; 0x4c
   82356:	f7ff fb45 	bl	819e4 <__sprint_r.part.0>
   8235a:	2800      	cmp	r0, #0
   8235c:	d1d1      	bne.n	82302 <_vfiprintf_r+0x8a6>
   8235e:	9914      	ldr	r1, [sp, #80]	; 0x50
   82360:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82362:	1c48      	adds	r0, r1, #1
   82364:	464e      	mov	r6, r9
   82366:	e768      	b.n	8223a <_vfiprintf_r+0x7de>
   82368:	2a00      	cmp	r2, #0
   8236a:	f040 80f7 	bne.w	8255c <_vfiprintf_r+0xb00>
   8236e:	9c05      	ldr	r4, [sp, #20]
   82370:	2301      	movs	r3, #1
   82372:	9720      	str	r7, [sp, #128]	; 0x80
   82374:	9421      	str	r4, [sp, #132]	; 0x84
   82376:	9415      	str	r4, [sp, #84]	; 0x54
   82378:	4622      	mov	r2, r4
   8237a:	9314      	str	r3, [sp, #80]	; 0x50
   8237c:	464e      	mov	r6, r9
   8237e:	3608      	adds	r6, #8
   82380:	e741      	b.n	82206 <_vfiprintf_r+0x7aa>
   82382:	9d04      	ldr	r5, [sp, #16]
   82384:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82388:	ebcb 0405 	rsb	r4, fp, r5
   8238c:	2c00      	cmp	r4, #0
   8238e:	f77f aef7 	ble.w	82180 <_vfiprintf_r+0x724>
   82392:	2c10      	cmp	r4, #16
   82394:	4da6      	ldr	r5, [pc, #664]	; (82630 <_vfiprintf_r+0xbd4>)
   82396:	f340 8170 	ble.w	8267a <_vfiprintf_r+0xc1e>
   8239a:	4629      	mov	r1, r5
   8239c:	f04f 0b10 	mov.w	fp, #16
   823a0:	4625      	mov	r5, r4
   823a2:	4664      	mov	r4, ip
   823a4:	46b4      	mov	ip, r6
   823a6:	460e      	mov	r6, r1
   823a8:	e006      	b.n	823b8 <_vfiprintf_r+0x95c>
   823aa:	1c98      	adds	r0, r3, #2
   823ac:	f10c 0c08 	add.w	ip, ip, #8
   823b0:	460b      	mov	r3, r1
   823b2:	3d10      	subs	r5, #16
   823b4:	2d10      	cmp	r5, #16
   823b6:	dd0f      	ble.n	823d8 <_vfiprintf_r+0x97c>
   823b8:	1c59      	adds	r1, r3, #1
   823ba:	3210      	adds	r2, #16
   823bc:	2907      	cmp	r1, #7
   823be:	9215      	str	r2, [sp, #84]	; 0x54
   823c0:	e88c 0840 	stmia.w	ip, {r6, fp}
   823c4:	9114      	str	r1, [sp, #80]	; 0x50
   823c6:	ddf0      	ble.n	823aa <_vfiprintf_r+0x94e>
   823c8:	b9ba      	cbnz	r2, 823fa <_vfiprintf_r+0x99e>
   823ca:	3d10      	subs	r5, #16
   823cc:	2d10      	cmp	r5, #16
   823ce:	f04f 0001 	mov.w	r0, #1
   823d2:	4613      	mov	r3, r2
   823d4:	46cc      	mov	ip, r9
   823d6:	dcef      	bgt.n	823b8 <_vfiprintf_r+0x95c>
   823d8:	4633      	mov	r3, r6
   823da:	4666      	mov	r6, ip
   823dc:	46a4      	mov	ip, r4
   823de:	462c      	mov	r4, r5
   823e0:	461d      	mov	r5, r3
   823e2:	4422      	add	r2, r4
   823e4:	2807      	cmp	r0, #7
   823e6:	9215      	str	r2, [sp, #84]	; 0x54
   823e8:	6035      	str	r5, [r6, #0]
   823ea:	6074      	str	r4, [r6, #4]
   823ec:	9014      	str	r0, [sp, #80]	; 0x50
   823ee:	f300 80af 	bgt.w	82550 <_vfiprintf_r+0xaf4>
   823f2:	3608      	adds	r6, #8
   823f4:	1c41      	adds	r1, r0, #1
   823f6:	4603      	mov	r3, r0
   823f8:	e6c2      	b.n	82180 <_vfiprintf_r+0x724>
   823fa:	9806      	ldr	r0, [sp, #24]
   823fc:	9902      	ldr	r1, [sp, #8]
   823fe:	aa13      	add	r2, sp, #76	; 0x4c
   82400:	f7ff faf0 	bl	819e4 <__sprint_r.part.0>
   82404:	2800      	cmp	r0, #0
   82406:	f47f af7c 	bne.w	82302 <_vfiprintf_r+0x8a6>
   8240a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8240c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8240e:	1c58      	adds	r0, r3, #1
   82410:	46cc      	mov	ip, r9
   82412:	e7ce      	b.n	823b2 <_vfiprintf_r+0x956>
   82414:	2a00      	cmp	r2, #0
   82416:	d179      	bne.n	8250c <_vfiprintf_r+0xab0>
   82418:	4619      	mov	r1, r3
   8241a:	464e      	mov	r6, r9
   8241c:	4613      	mov	r3, r2
   8241e:	e69c      	b.n	8215a <_vfiprintf_r+0x6fe>
   82420:	2a00      	cmp	r2, #0
   82422:	f040 8084 	bne.w	8252e <_vfiprintf_r+0xad2>
   82426:	2101      	movs	r1, #1
   82428:	4613      	mov	r3, r2
   8242a:	464e      	mov	r6, r9
   8242c:	e6a4      	b.n	82178 <_vfiprintf_r+0x71c>
   8242e:	464f      	mov	r7, r9
   82430:	e448      	b.n	81cc4 <_vfiprintf_r+0x268>
   82432:	2d00      	cmp	r5, #0
   82434:	bf08      	it	eq
   82436:	2c0a      	cmpeq	r4, #10
   82438:	d246      	bcs.n	824c8 <_vfiprintf_r+0xa6c>
   8243a:	3430      	adds	r4, #48	; 0x30
   8243c:	af30      	add	r7, sp, #192	; 0xc0
   8243e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   82442:	ebc7 0309 	rsb	r3, r7, r9
   82446:	9305      	str	r3, [sp, #20]
   82448:	e43c      	b.n	81cc4 <_vfiprintf_r+0x268>
   8244a:	2302      	movs	r3, #2
   8244c:	e417      	b.n	81c7e <_vfiprintf_r+0x222>
   8244e:	2a00      	cmp	r2, #0
   82450:	f040 80af 	bne.w	825b2 <_vfiprintf_r+0xb56>
   82454:	4613      	mov	r3, r2
   82456:	2101      	movs	r1, #1
   82458:	464e      	mov	r6, r9
   8245a:	e66d      	b.n	82138 <_vfiprintf_r+0x6dc>
   8245c:	4644      	mov	r4, r8
   8245e:	f7ff bb58 	b.w	81b12 <_vfiprintf_r+0xb6>
   82462:	9806      	ldr	r0, [sp, #24]
   82464:	9902      	ldr	r1, [sp, #8]
   82466:	aa13      	add	r2, sp, #76	; 0x4c
   82468:	f7ff fabc 	bl	819e4 <__sprint_r.part.0>
   8246c:	2800      	cmp	r0, #0
   8246e:	f47f af48 	bne.w	82302 <_vfiprintf_r+0x8a6>
   82472:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82474:	464e      	mov	r6, r9
   82476:	e6c6      	b.n	82206 <_vfiprintf_r+0x7aa>
   82478:	9d08      	ldr	r5, [sp, #32]
   8247a:	682c      	ldr	r4, [r5, #0]
   8247c:	3504      	adds	r5, #4
   8247e:	9508      	str	r5, [sp, #32]
   82480:	2500      	movs	r5, #0
   82482:	f7ff bbfc 	b.w	81c7e <_vfiprintf_r+0x222>
   82486:	9d08      	ldr	r5, [sp, #32]
   82488:	2301      	movs	r3, #1
   8248a:	682c      	ldr	r4, [r5, #0]
   8248c:	3504      	adds	r5, #4
   8248e:	9508      	str	r5, [sp, #32]
   82490:	2500      	movs	r5, #0
   82492:	f7ff bbf4 	b.w	81c7e <_vfiprintf_r+0x222>
   82496:	9d08      	ldr	r5, [sp, #32]
   82498:	682c      	ldr	r4, [r5, #0]
   8249a:	3504      	adds	r5, #4
   8249c:	9508      	str	r5, [sp, #32]
   8249e:	2500      	movs	r5, #0
   824a0:	e525      	b.n	81eee <_vfiprintf_r+0x492>
   824a2:	9d08      	ldr	r5, [sp, #32]
   824a4:	682c      	ldr	r4, [r5, #0]
   824a6:	3504      	adds	r5, #4
   824a8:	9508      	str	r5, [sp, #32]
   824aa:	17e5      	asrs	r5, r4, #31
   824ac:	4622      	mov	r2, r4
   824ae:	462b      	mov	r3, r5
   824b0:	e48e      	b.n	81dd0 <_vfiprintf_r+0x374>
   824b2:	9806      	ldr	r0, [sp, #24]
   824b4:	9902      	ldr	r1, [sp, #8]
   824b6:	aa13      	add	r2, sp, #76	; 0x4c
   824b8:	f7ff fa94 	bl	819e4 <__sprint_r.part.0>
   824bc:	2800      	cmp	r0, #0
   824be:	f47f af20 	bne.w	82302 <_vfiprintf_r+0x8a6>
   824c2:	464e      	mov	r6, r9
   824c4:	f7ff bb9a 	b.w	81bfc <_vfiprintf_r+0x1a0>
   824c8:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   824cc:	9603      	str	r6, [sp, #12]
   824ce:	465e      	mov	r6, fp
   824d0:	46e3      	mov	fp, ip
   824d2:	4620      	mov	r0, r4
   824d4:	4629      	mov	r1, r5
   824d6:	220a      	movs	r2, #10
   824d8:	2300      	movs	r3, #0
   824da:	f001 fe2f 	bl	8413c <__aeabi_uldivmod>
   824de:	3230      	adds	r2, #48	; 0x30
   824e0:	7032      	strb	r2, [r6, #0]
   824e2:	4620      	mov	r0, r4
   824e4:	4629      	mov	r1, r5
   824e6:	220a      	movs	r2, #10
   824e8:	2300      	movs	r3, #0
   824ea:	f001 fe27 	bl	8413c <__aeabi_uldivmod>
   824ee:	4604      	mov	r4, r0
   824f0:	460d      	mov	r5, r1
   824f2:	ea54 0005 	orrs.w	r0, r4, r5
   824f6:	4637      	mov	r7, r6
   824f8:	f106 36ff 	add.w	r6, r6, #4294967295
   824fc:	d1e9      	bne.n	824d2 <_vfiprintf_r+0xa76>
   824fe:	ebc7 0309 	rsb	r3, r7, r9
   82502:	46dc      	mov	ip, fp
   82504:	9e03      	ldr	r6, [sp, #12]
   82506:	9305      	str	r3, [sp, #20]
   82508:	f7ff bbdc 	b.w	81cc4 <_vfiprintf_r+0x268>
   8250c:	9806      	ldr	r0, [sp, #24]
   8250e:	9902      	ldr	r1, [sp, #8]
   82510:	aa13      	add	r2, sp, #76	; 0x4c
   82512:	f8cd c004 	str.w	ip, [sp, #4]
   82516:	f7ff fa65 	bl	819e4 <__sprint_r.part.0>
   8251a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8251e:	2800      	cmp	r0, #0
   82520:	f47f aeef 	bne.w	82302 <_vfiprintf_r+0x8a6>
   82524:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82526:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82528:	1c59      	adds	r1, r3, #1
   8252a:	464e      	mov	r6, r9
   8252c:	e615      	b.n	8215a <_vfiprintf_r+0x6fe>
   8252e:	9806      	ldr	r0, [sp, #24]
   82530:	9902      	ldr	r1, [sp, #8]
   82532:	aa13      	add	r2, sp, #76	; 0x4c
   82534:	f8cd c004 	str.w	ip, [sp, #4]
   82538:	f7ff fa54 	bl	819e4 <__sprint_r.part.0>
   8253c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82540:	2800      	cmp	r0, #0
   82542:	f47f aede 	bne.w	82302 <_vfiprintf_r+0x8a6>
   82546:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82548:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8254a:	1c59      	adds	r1, r3, #1
   8254c:	464e      	mov	r6, r9
   8254e:	e613      	b.n	82178 <_vfiprintf_r+0x71c>
   82550:	2a00      	cmp	r2, #0
   82552:	d156      	bne.n	82602 <_vfiprintf_r+0xba6>
   82554:	2101      	movs	r1, #1
   82556:	4613      	mov	r3, r2
   82558:	464e      	mov	r6, r9
   8255a:	e611      	b.n	82180 <_vfiprintf_r+0x724>
   8255c:	9806      	ldr	r0, [sp, #24]
   8255e:	9902      	ldr	r1, [sp, #8]
   82560:	aa13      	add	r2, sp, #76	; 0x4c
   82562:	f7ff fa3f 	bl	819e4 <__sprint_r.part.0>
   82566:	2800      	cmp	r0, #0
   82568:	f47f aecb 	bne.w	82302 <_vfiprintf_r+0x8a6>
   8256c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8256e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82570:	3101      	adds	r1, #1
   82572:	464e      	mov	r6, r9
   82574:	e639      	b.n	821ea <_vfiprintf_r+0x78e>
   82576:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8257a:	4264      	negs	r4, r4
   8257c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82580:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82584:	f8cd b01c 	str.w	fp, [sp, #28]
   82588:	f8cd c014 	str.w	ip, [sp, #20]
   8258c:	2301      	movs	r3, #1
   8258e:	f7ff bb7e 	b.w	81c8e <_vfiprintf_r+0x232>
   82592:	f01a 0f10 	tst.w	sl, #16
   82596:	d11d      	bne.n	825d4 <_vfiprintf_r+0xb78>
   82598:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8259c:	d058      	beq.n	82650 <_vfiprintf_r+0xbf4>
   8259e:	9d08      	ldr	r5, [sp, #32]
   825a0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   825a4:	682b      	ldr	r3, [r5, #0]
   825a6:	3504      	adds	r5, #4
   825a8:	9508      	str	r5, [sp, #32]
   825aa:	f8a3 b000 	strh.w	fp, [r3]
   825ae:	f7ff ba88 	b.w	81ac2 <_vfiprintf_r+0x66>
   825b2:	9806      	ldr	r0, [sp, #24]
   825b4:	9902      	ldr	r1, [sp, #8]
   825b6:	aa13      	add	r2, sp, #76	; 0x4c
   825b8:	f8cd c004 	str.w	ip, [sp, #4]
   825bc:	f7ff fa12 	bl	819e4 <__sprint_r.part.0>
   825c0:	f8dd c004 	ldr.w	ip, [sp, #4]
   825c4:	2800      	cmp	r0, #0
   825c6:	f47f ae9c 	bne.w	82302 <_vfiprintf_r+0x8a6>
   825ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   825cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   825ce:	1c59      	adds	r1, r3, #1
   825d0:	464e      	mov	r6, r9
   825d2:	e5b1      	b.n	82138 <_vfiprintf_r+0x6dc>
   825d4:	f8dd b020 	ldr.w	fp, [sp, #32]
   825d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   825da:	f8db 3000 	ldr.w	r3, [fp]
   825de:	f10b 0b04 	add.w	fp, fp, #4
   825e2:	f8cd b020 	str.w	fp, [sp, #32]
   825e6:	601c      	str	r4, [r3, #0]
   825e8:	f7ff ba6b 	b.w	81ac2 <_vfiprintf_r+0x66>
   825ec:	9408      	str	r4, [sp, #32]
   825ee:	f7ff f9c9 	bl	81984 <strlen>
   825f2:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   825f6:	9005      	str	r0, [sp, #20]
   825f8:	9407      	str	r4, [sp, #28]
   825fa:	f04f 0c00 	mov.w	ip, #0
   825fe:	f7ff bb61 	b.w	81cc4 <_vfiprintf_r+0x268>
   82602:	9806      	ldr	r0, [sp, #24]
   82604:	9902      	ldr	r1, [sp, #8]
   82606:	aa13      	add	r2, sp, #76	; 0x4c
   82608:	f8cd c004 	str.w	ip, [sp, #4]
   8260c:	f7ff f9ea 	bl	819e4 <__sprint_r.part.0>
   82610:	f8dd c004 	ldr.w	ip, [sp, #4]
   82614:	2800      	cmp	r0, #0
   82616:	f47f ae74 	bne.w	82302 <_vfiprintf_r+0x8a6>
   8261a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8261c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8261e:	1c59      	adds	r1, r3, #1
   82620:	464e      	mov	r6, r9
   82622:	e5ad      	b.n	82180 <_vfiprintf_r+0x724>
   82624:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82626:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82628:	3301      	adds	r3, #1
   8262a:	4d02      	ldr	r5, [pc, #8]	; (82634 <_vfiprintf_r+0xbd8>)
   8262c:	f7ff bb9a 	b.w	81d64 <_vfiprintf_r+0x308>
   82630:	00084768 	.word	0x00084768
   82634:	00084778 	.word	0x00084778
   82638:	f1bc 0f06 	cmp.w	ip, #6
   8263c:	bf34      	ite	cc
   8263e:	4663      	movcc	r3, ip
   82640:	2306      	movcs	r3, #6
   82642:	9408      	str	r4, [sp, #32]
   82644:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82648:	9305      	str	r3, [sp, #20]
   8264a:	9403      	str	r4, [sp, #12]
   8264c:	4f16      	ldr	r7, [pc, #88]	; (826a8 <_vfiprintf_r+0xc4c>)
   8264e:	e472      	b.n	81f36 <_vfiprintf_r+0x4da>
   82650:	9c08      	ldr	r4, [sp, #32]
   82652:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82654:	6823      	ldr	r3, [r4, #0]
   82656:	3404      	adds	r4, #4
   82658:	9408      	str	r4, [sp, #32]
   8265a:	601d      	str	r5, [r3, #0]
   8265c:	f7ff ba31 	b.w	81ac2 <_vfiprintf_r+0x66>
   82660:	9814      	ldr	r0, [sp, #80]	; 0x50
   82662:	4d12      	ldr	r5, [pc, #72]	; (826ac <_vfiprintf_r+0xc50>)
   82664:	3001      	adds	r0, #1
   82666:	e5fc      	b.n	82262 <_vfiprintf_r+0x806>
   82668:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8266c:	f8cd c014 	str.w	ip, [sp, #20]
   82670:	9507      	str	r5, [sp, #28]
   82672:	9408      	str	r4, [sp, #32]
   82674:	4684      	mov	ip, r0
   82676:	f7ff bb25 	b.w	81cc4 <_vfiprintf_r+0x268>
   8267a:	4608      	mov	r0, r1
   8267c:	e6b1      	b.n	823e2 <_vfiprintf_r+0x986>
   8267e:	46a0      	mov	r8, r4
   82680:	2500      	movs	r5, #0
   82682:	f7ff ba5a 	b.w	81b3a <_vfiprintf_r+0xde>
   82686:	f8dd b020 	ldr.w	fp, [sp, #32]
   8268a:	f898 3001 	ldrb.w	r3, [r8, #1]
   8268e:	f8db 5000 	ldr.w	r5, [fp]
   82692:	f10b 0204 	add.w	r2, fp, #4
   82696:	2d00      	cmp	r5, #0
   82698:	9208      	str	r2, [sp, #32]
   8269a:	46a0      	mov	r8, r4
   8269c:	f6bf aa4b 	bge.w	81b36 <_vfiprintf_r+0xda>
   826a0:	f04f 35ff 	mov.w	r5, #4294967295
   826a4:	f7ff ba47 	b.w	81b36 <_vfiprintf_r+0xda>
   826a8:	00084760 	.word	0x00084760
   826ac:	00084778 	.word	0x00084778

000826b0 <__sbprintf>:
   826b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   826b4:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   826b6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   826ba:	4688      	mov	r8, r1
   826bc:	9719      	str	r7, [sp, #100]	; 0x64
   826be:	f8d8 701c 	ldr.w	r7, [r8, #28]
   826c2:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   826c6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   826ca:	9707      	str	r7, [sp, #28]
   826cc:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   826d0:	ac1a      	add	r4, sp, #104	; 0x68
   826d2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   826d6:	f02a 0a02 	bic.w	sl, sl, #2
   826da:	2600      	movs	r6, #0
   826dc:	4669      	mov	r1, sp
   826de:	9400      	str	r4, [sp, #0]
   826e0:	9404      	str	r4, [sp, #16]
   826e2:	9502      	str	r5, [sp, #8]
   826e4:	9505      	str	r5, [sp, #20]
   826e6:	f8ad a00c 	strh.w	sl, [sp, #12]
   826ea:	f8ad 900e 	strh.w	r9, [sp, #14]
   826ee:	9709      	str	r7, [sp, #36]	; 0x24
   826f0:	9606      	str	r6, [sp, #24]
   826f2:	4605      	mov	r5, r0
   826f4:	f7ff f9b2 	bl	81a5c <_vfiprintf_r>
   826f8:	1e04      	subs	r4, r0, #0
   826fa:	db07      	blt.n	8270c <__sbprintf+0x5c>
   826fc:	4628      	mov	r0, r5
   826fe:	4669      	mov	r1, sp
   82700:	f000 f92a 	bl	82958 <_fflush_r>
   82704:	42b0      	cmp	r0, r6
   82706:	bf18      	it	ne
   82708:	f04f 34ff 	movne.w	r4, #4294967295
   8270c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82710:	065b      	lsls	r3, r3, #25
   82712:	d505      	bpl.n	82720 <__sbprintf+0x70>
   82714:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8271c:	f8a8 300c 	strh.w	r3, [r8, #12]
   82720:	4620      	mov	r0, r4
   82722:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8272a:	bf00      	nop

0008272c <__swsetup_r>:
   8272c:	4b2f      	ldr	r3, [pc, #188]	; (827ec <__swsetup_r+0xc0>)
   8272e:	b570      	push	{r4, r5, r6, lr}
   82730:	4606      	mov	r6, r0
   82732:	6818      	ldr	r0, [r3, #0]
   82734:	460c      	mov	r4, r1
   82736:	b110      	cbz	r0, 8273e <__swsetup_r+0x12>
   82738:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8273a:	2a00      	cmp	r2, #0
   8273c:	d036      	beq.n	827ac <__swsetup_r+0x80>
   8273e:	89a5      	ldrh	r5, [r4, #12]
   82740:	b2ab      	uxth	r3, r5
   82742:	0719      	lsls	r1, r3, #28
   82744:	d50c      	bpl.n	82760 <__swsetup_r+0x34>
   82746:	6922      	ldr	r2, [r4, #16]
   82748:	b1aa      	cbz	r2, 82776 <__swsetup_r+0x4a>
   8274a:	f013 0101 	ands.w	r1, r3, #1
   8274e:	d01e      	beq.n	8278e <__swsetup_r+0x62>
   82750:	6963      	ldr	r3, [r4, #20]
   82752:	2100      	movs	r1, #0
   82754:	425b      	negs	r3, r3
   82756:	61a3      	str	r3, [r4, #24]
   82758:	60a1      	str	r1, [r4, #8]
   8275a:	b1f2      	cbz	r2, 8279a <__swsetup_r+0x6e>
   8275c:	2000      	movs	r0, #0
   8275e:	bd70      	pop	{r4, r5, r6, pc}
   82760:	06da      	lsls	r2, r3, #27
   82762:	d53a      	bpl.n	827da <__swsetup_r+0xae>
   82764:	075b      	lsls	r3, r3, #29
   82766:	d424      	bmi.n	827b2 <__swsetup_r+0x86>
   82768:	6922      	ldr	r2, [r4, #16]
   8276a:	f045 0308 	orr.w	r3, r5, #8
   8276e:	81a3      	strh	r3, [r4, #12]
   82770:	b29b      	uxth	r3, r3
   82772:	2a00      	cmp	r2, #0
   82774:	d1e9      	bne.n	8274a <__swsetup_r+0x1e>
   82776:	f403 7120 	and.w	r1, r3, #640	; 0x280
   8277a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8277e:	d0e4      	beq.n	8274a <__swsetup_r+0x1e>
   82780:	4630      	mov	r0, r6
   82782:	4621      	mov	r1, r4
   82784:	f000 fcce 	bl	83124 <__smakebuf_r>
   82788:	89a3      	ldrh	r3, [r4, #12]
   8278a:	6922      	ldr	r2, [r4, #16]
   8278c:	e7dd      	b.n	8274a <__swsetup_r+0x1e>
   8278e:	0798      	lsls	r0, r3, #30
   82790:	bf58      	it	pl
   82792:	6961      	ldrpl	r1, [r4, #20]
   82794:	60a1      	str	r1, [r4, #8]
   82796:	2a00      	cmp	r2, #0
   82798:	d1e0      	bne.n	8275c <__swsetup_r+0x30>
   8279a:	89a3      	ldrh	r3, [r4, #12]
   8279c:	061a      	lsls	r2, r3, #24
   8279e:	d5dd      	bpl.n	8275c <__swsetup_r+0x30>
   827a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   827a4:	81a3      	strh	r3, [r4, #12]
   827a6:	f04f 30ff 	mov.w	r0, #4294967295
   827aa:	bd70      	pop	{r4, r5, r6, pc}
   827ac:	f000 f8f0 	bl	82990 <__sinit>
   827b0:	e7c5      	b.n	8273e <__swsetup_r+0x12>
   827b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   827b4:	b149      	cbz	r1, 827ca <__swsetup_r+0x9e>
   827b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   827ba:	4299      	cmp	r1, r3
   827bc:	d003      	beq.n	827c6 <__swsetup_r+0x9a>
   827be:	4630      	mov	r0, r6
   827c0:	f000 fa2a 	bl	82c18 <_free_r>
   827c4:	89a5      	ldrh	r5, [r4, #12]
   827c6:	2300      	movs	r3, #0
   827c8:	6323      	str	r3, [r4, #48]	; 0x30
   827ca:	6922      	ldr	r2, [r4, #16]
   827cc:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   827d0:	2100      	movs	r1, #0
   827d2:	b2ad      	uxth	r5, r5
   827d4:	6022      	str	r2, [r4, #0]
   827d6:	6061      	str	r1, [r4, #4]
   827d8:	e7c7      	b.n	8276a <__swsetup_r+0x3e>
   827da:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   827de:	2309      	movs	r3, #9
   827e0:	6033      	str	r3, [r6, #0]
   827e2:	f04f 30ff 	mov.w	r0, #4294967295
   827e6:	81a5      	strh	r5, [r4, #12]
   827e8:	bd70      	pop	{r4, r5, r6, pc}
   827ea:	bf00      	nop
   827ec:	20070568 	.word	0x20070568

000827f0 <register_fini>:
   827f0:	4b02      	ldr	r3, [pc, #8]	; (827fc <register_fini+0xc>)
   827f2:	b113      	cbz	r3, 827fa <register_fini+0xa>
   827f4:	4802      	ldr	r0, [pc, #8]	; (82800 <register_fini+0x10>)
   827f6:	f000 b805 	b.w	82804 <atexit>
   827fa:	4770      	bx	lr
   827fc:	00000000 	.word	0x00000000
   82800:	00082a8d 	.word	0x00082a8d

00082804 <atexit>:
   82804:	4601      	mov	r1, r0
   82806:	2000      	movs	r0, #0
   82808:	4602      	mov	r2, r0
   8280a:	4603      	mov	r3, r0
   8280c:	f001 bb9a 	b.w	83f44 <__register_exitproc>

00082810 <__sflush_r>:
   82810:	898b      	ldrh	r3, [r1, #12]
   82812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82816:	b29a      	uxth	r2, r3
   82818:	460d      	mov	r5, r1
   8281a:	0711      	lsls	r1, r2, #28
   8281c:	4680      	mov	r8, r0
   8281e:	d43c      	bmi.n	8289a <__sflush_r+0x8a>
   82820:	686a      	ldr	r2, [r5, #4]
   82822:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82826:	2a00      	cmp	r2, #0
   82828:	81ab      	strh	r3, [r5, #12]
   8282a:	dd59      	ble.n	828e0 <__sflush_r+0xd0>
   8282c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8282e:	2c00      	cmp	r4, #0
   82830:	d04b      	beq.n	828ca <__sflush_r+0xba>
   82832:	b29b      	uxth	r3, r3
   82834:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82838:	2100      	movs	r1, #0
   8283a:	b292      	uxth	r2, r2
   8283c:	f8d8 6000 	ldr.w	r6, [r8]
   82840:	f8c8 1000 	str.w	r1, [r8]
   82844:	2a00      	cmp	r2, #0
   82846:	d04f      	beq.n	828e8 <__sflush_r+0xd8>
   82848:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8284a:	075f      	lsls	r7, r3, #29
   8284c:	d505      	bpl.n	8285a <__sflush_r+0x4a>
   8284e:	6869      	ldr	r1, [r5, #4]
   82850:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82852:	1a52      	subs	r2, r2, r1
   82854:	b10b      	cbz	r3, 8285a <__sflush_r+0x4a>
   82856:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82858:	1ad2      	subs	r2, r2, r3
   8285a:	4640      	mov	r0, r8
   8285c:	69e9      	ldr	r1, [r5, #28]
   8285e:	2300      	movs	r3, #0
   82860:	47a0      	blx	r4
   82862:	1c44      	adds	r4, r0, #1
   82864:	d04a      	beq.n	828fc <__sflush_r+0xec>
   82866:	89ab      	ldrh	r3, [r5, #12]
   82868:	692a      	ldr	r2, [r5, #16]
   8286a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8286e:	b29b      	uxth	r3, r3
   82870:	2100      	movs	r1, #0
   82872:	602a      	str	r2, [r5, #0]
   82874:	04da      	lsls	r2, r3, #19
   82876:	81ab      	strh	r3, [r5, #12]
   82878:	6069      	str	r1, [r5, #4]
   8287a:	d44c      	bmi.n	82916 <__sflush_r+0x106>
   8287c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8287e:	f8c8 6000 	str.w	r6, [r8]
   82882:	b311      	cbz	r1, 828ca <__sflush_r+0xba>
   82884:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82888:	4299      	cmp	r1, r3
   8288a:	d002      	beq.n	82892 <__sflush_r+0x82>
   8288c:	4640      	mov	r0, r8
   8288e:	f000 f9c3 	bl	82c18 <_free_r>
   82892:	2000      	movs	r0, #0
   82894:	6328      	str	r0, [r5, #48]	; 0x30
   82896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8289a:	692e      	ldr	r6, [r5, #16]
   8289c:	b1ae      	cbz	r6, 828ca <__sflush_r+0xba>
   8289e:	0791      	lsls	r1, r2, #30
   828a0:	682c      	ldr	r4, [r5, #0]
   828a2:	bf0c      	ite	eq
   828a4:	696b      	ldreq	r3, [r5, #20]
   828a6:	2300      	movne	r3, #0
   828a8:	602e      	str	r6, [r5, #0]
   828aa:	1ba4      	subs	r4, r4, r6
   828ac:	60ab      	str	r3, [r5, #8]
   828ae:	e00a      	b.n	828c6 <__sflush_r+0xb6>
   828b0:	4632      	mov	r2, r6
   828b2:	4623      	mov	r3, r4
   828b4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   828b6:	4640      	mov	r0, r8
   828b8:	69e9      	ldr	r1, [r5, #28]
   828ba:	47b8      	blx	r7
   828bc:	2800      	cmp	r0, #0
   828be:	ebc0 0404 	rsb	r4, r0, r4
   828c2:	4406      	add	r6, r0
   828c4:	dd04      	ble.n	828d0 <__sflush_r+0xc0>
   828c6:	2c00      	cmp	r4, #0
   828c8:	dcf2      	bgt.n	828b0 <__sflush_r+0xa0>
   828ca:	2000      	movs	r0, #0
   828cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828d0:	89ab      	ldrh	r3, [r5, #12]
   828d2:	f04f 30ff 	mov.w	r0, #4294967295
   828d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   828da:	81ab      	strh	r3, [r5, #12]
   828dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828e0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   828e2:	2a00      	cmp	r2, #0
   828e4:	dca2      	bgt.n	8282c <__sflush_r+0x1c>
   828e6:	e7f0      	b.n	828ca <__sflush_r+0xba>
   828e8:	2301      	movs	r3, #1
   828ea:	4640      	mov	r0, r8
   828ec:	69e9      	ldr	r1, [r5, #28]
   828ee:	47a0      	blx	r4
   828f0:	1c43      	adds	r3, r0, #1
   828f2:	4602      	mov	r2, r0
   828f4:	d01e      	beq.n	82934 <__sflush_r+0x124>
   828f6:	89ab      	ldrh	r3, [r5, #12]
   828f8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   828fa:	e7a6      	b.n	8284a <__sflush_r+0x3a>
   828fc:	f8d8 3000 	ldr.w	r3, [r8]
   82900:	b95b      	cbnz	r3, 8291a <__sflush_r+0x10a>
   82902:	89aa      	ldrh	r2, [r5, #12]
   82904:	6929      	ldr	r1, [r5, #16]
   82906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8290a:	b292      	uxth	r2, r2
   8290c:	606b      	str	r3, [r5, #4]
   8290e:	04d3      	lsls	r3, r2, #19
   82910:	81aa      	strh	r2, [r5, #12]
   82912:	6029      	str	r1, [r5, #0]
   82914:	d5b2      	bpl.n	8287c <__sflush_r+0x6c>
   82916:	6528      	str	r0, [r5, #80]	; 0x50
   82918:	e7b0      	b.n	8287c <__sflush_r+0x6c>
   8291a:	2b1d      	cmp	r3, #29
   8291c:	d001      	beq.n	82922 <__sflush_r+0x112>
   8291e:	2b16      	cmp	r3, #22
   82920:	d113      	bne.n	8294a <__sflush_r+0x13a>
   82922:	89a9      	ldrh	r1, [r5, #12]
   82924:	692b      	ldr	r3, [r5, #16]
   82926:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   8292a:	2200      	movs	r2, #0
   8292c:	81a9      	strh	r1, [r5, #12]
   8292e:	602b      	str	r3, [r5, #0]
   82930:	606a      	str	r2, [r5, #4]
   82932:	e7a3      	b.n	8287c <__sflush_r+0x6c>
   82934:	f8d8 3000 	ldr.w	r3, [r8]
   82938:	2b00      	cmp	r3, #0
   8293a:	d0dc      	beq.n	828f6 <__sflush_r+0xe6>
   8293c:	2b1d      	cmp	r3, #29
   8293e:	d001      	beq.n	82944 <__sflush_r+0x134>
   82940:	2b16      	cmp	r3, #22
   82942:	d1c5      	bne.n	828d0 <__sflush_r+0xc0>
   82944:	f8c8 6000 	str.w	r6, [r8]
   82948:	e7bf      	b.n	828ca <__sflush_r+0xba>
   8294a:	89ab      	ldrh	r3, [r5, #12]
   8294c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82950:	81ab      	strh	r3, [r5, #12]
   82952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82956:	bf00      	nop

00082958 <_fflush_r>:
   82958:	b510      	push	{r4, lr}
   8295a:	4604      	mov	r4, r0
   8295c:	b082      	sub	sp, #8
   8295e:	b108      	cbz	r0, 82964 <_fflush_r+0xc>
   82960:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82962:	b153      	cbz	r3, 8297a <_fflush_r+0x22>
   82964:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82968:	b908      	cbnz	r0, 8296e <_fflush_r+0x16>
   8296a:	b002      	add	sp, #8
   8296c:	bd10      	pop	{r4, pc}
   8296e:	4620      	mov	r0, r4
   82970:	b002      	add	sp, #8
   82972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82976:	f7ff bf4b 	b.w	82810 <__sflush_r>
   8297a:	9101      	str	r1, [sp, #4]
   8297c:	f000 f808 	bl	82990 <__sinit>
   82980:	9901      	ldr	r1, [sp, #4]
   82982:	e7ef      	b.n	82964 <_fflush_r+0xc>

00082984 <_cleanup_r>:
   82984:	4901      	ldr	r1, [pc, #4]	; (8298c <_cleanup_r+0x8>)
   82986:	f000 bb9f 	b.w	830c8 <_fwalk>
   8298a:	bf00      	nop
   8298c:	00084091 	.word	0x00084091

00082990 <__sinit>:
   82990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82994:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82996:	b083      	sub	sp, #12
   82998:	4607      	mov	r7, r0
   8299a:	2c00      	cmp	r4, #0
   8299c:	d165      	bne.n	82a6a <__sinit+0xda>
   8299e:	687d      	ldr	r5, [r7, #4]
   829a0:	4833      	ldr	r0, [pc, #204]	; (82a70 <__sinit+0xe0>)
   829a2:	2304      	movs	r3, #4
   829a4:	2103      	movs	r1, #3
   829a6:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   829aa:	63f8      	str	r0, [r7, #60]	; 0x3c
   829ac:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   829b0:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   829b4:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   829b8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   829bc:	81ab      	strh	r3, [r5, #12]
   829be:	602c      	str	r4, [r5, #0]
   829c0:	606c      	str	r4, [r5, #4]
   829c2:	60ac      	str	r4, [r5, #8]
   829c4:	666c      	str	r4, [r5, #100]	; 0x64
   829c6:	81ec      	strh	r4, [r5, #14]
   829c8:	612c      	str	r4, [r5, #16]
   829ca:	616c      	str	r4, [r5, #20]
   829cc:	61ac      	str	r4, [r5, #24]
   829ce:	4621      	mov	r1, r4
   829d0:	2208      	movs	r2, #8
   829d2:	f7fe ff05 	bl	817e0 <memset>
   829d6:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82a74 <__sinit+0xe4>
   829da:	68be      	ldr	r6, [r7, #8]
   829dc:	f8df a098 	ldr.w	sl, [pc, #152]	; 82a78 <__sinit+0xe8>
   829e0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82a7c <__sinit+0xec>
   829e4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82a80 <__sinit+0xf0>
   829e8:	2301      	movs	r3, #1
   829ea:	2209      	movs	r2, #9
   829ec:	61ed      	str	r5, [r5, #28]
   829ee:	f8c5 b020 	str.w	fp, [r5, #32]
   829f2:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   829f6:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   829fa:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   829fe:	4621      	mov	r1, r4
   82a00:	81f3      	strh	r3, [r6, #14]
   82a02:	81b2      	strh	r2, [r6, #12]
   82a04:	6034      	str	r4, [r6, #0]
   82a06:	6074      	str	r4, [r6, #4]
   82a08:	60b4      	str	r4, [r6, #8]
   82a0a:	6674      	str	r4, [r6, #100]	; 0x64
   82a0c:	6134      	str	r4, [r6, #16]
   82a0e:	6174      	str	r4, [r6, #20]
   82a10:	61b4      	str	r4, [r6, #24]
   82a12:	2208      	movs	r2, #8
   82a14:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82a18:	9301      	str	r3, [sp, #4]
   82a1a:	f7fe fee1 	bl	817e0 <memset>
   82a1e:	68fd      	ldr	r5, [r7, #12]
   82a20:	2012      	movs	r0, #18
   82a22:	2202      	movs	r2, #2
   82a24:	61f6      	str	r6, [r6, #28]
   82a26:	f8c6 b020 	str.w	fp, [r6, #32]
   82a2a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82a2e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82a32:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82a36:	4621      	mov	r1, r4
   82a38:	81a8      	strh	r0, [r5, #12]
   82a3a:	81ea      	strh	r2, [r5, #14]
   82a3c:	602c      	str	r4, [r5, #0]
   82a3e:	606c      	str	r4, [r5, #4]
   82a40:	60ac      	str	r4, [r5, #8]
   82a42:	666c      	str	r4, [r5, #100]	; 0x64
   82a44:	612c      	str	r4, [r5, #16]
   82a46:	616c      	str	r4, [r5, #20]
   82a48:	61ac      	str	r4, [r5, #24]
   82a4a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82a4e:	2208      	movs	r2, #8
   82a50:	f7fe fec6 	bl	817e0 <memset>
   82a54:	9b01      	ldr	r3, [sp, #4]
   82a56:	61ed      	str	r5, [r5, #28]
   82a58:	f8c5 b020 	str.w	fp, [r5, #32]
   82a5c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82a60:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82a64:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82a68:	63bb      	str	r3, [r7, #56]	; 0x38
   82a6a:	b003      	add	sp, #12
   82a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a70:	00082985 	.word	0x00082985
   82a74:	00083d85 	.word	0x00083d85
   82a78:	00083da9 	.word	0x00083da9
   82a7c:	00083de1 	.word	0x00083de1
   82a80:	00083e01 	.word	0x00083e01

00082a84 <__sfp_lock_acquire>:
   82a84:	4770      	bx	lr
   82a86:	bf00      	nop

00082a88 <__sfp_lock_release>:
   82a88:	4770      	bx	lr
   82a8a:	bf00      	nop

00082a8c <__libc_fini_array>:
   82a8c:	b538      	push	{r3, r4, r5, lr}
   82a8e:	4d09      	ldr	r5, [pc, #36]	; (82ab4 <__libc_fini_array+0x28>)
   82a90:	4c09      	ldr	r4, [pc, #36]	; (82ab8 <__libc_fini_array+0x2c>)
   82a92:	1b64      	subs	r4, r4, r5
   82a94:	10a4      	asrs	r4, r4, #2
   82a96:	bf18      	it	ne
   82a98:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82a9c:	d005      	beq.n	82aaa <__libc_fini_array+0x1e>
   82a9e:	3c01      	subs	r4, #1
   82aa0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82aa4:	4798      	blx	r3
   82aa6:	2c00      	cmp	r4, #0
   82aa8:	d1f9      	bne.n	82a9e <__libc_fini_array+0x12>
   82aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82aae:	f001 be75 	b.w	8479c <_fini>
   82ab2:	bf00      	nop
   82ab4:	000847a8 	.word	0x000847a8
   82ab8:	000847ac 	.word	0x000847ac

00082abc <_fputwc_r>:
   82abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82ac0:	8993      	ldrh	r3, [r2, #12]
   82ac2:	460f      	mov	r7, r1
   82ac4:	0499      	lsls	r1, r3, #18
   82ac6:	b082      	sub	sp, #8
   82ac8:	4614      	mov	r4, r2
   82aca:	4680      	mov	r8, r0
   82acc:	d406      	bmi.n	82adc <_fputwc_r+0x20>
   82ace:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82ad0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82ad8:	81a3      	strh	r3, [r4, #12]
   82ada:	6662      	str	r2, [r4, #100]	; 0x64
   82adc:	f000 fb1c 	bl	83118 <__locale_mb_cur_max>
   82ae0:	2801      	cmp	r0, #1
   82ae2:	d03e      	beq.n	82b62 <_fputwc_r+0xa6>
   82ae4:	463a      	mov	r2, r7
   82ae6:	4640      	mov	r0, r8
   82ae8:	a901      	add	r1, sp, #4
   82aea:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82aee:	f001 f9df 	bl	83eb0 <_wcrtomb_r>
   82af2:	1c42      	adds	r2, r0, #1
   82af4:	4606      	mov	r6, r0
   82af6:	d02d      	beq.n	82b54 <_fputwc_r+0x98>
   82af8:	2800      	cmp	r0, #0
   82afa:	d03a      	beq.n	82b72 <_fputwc_r+0xb6>
   82afc:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82b00:	2500      	movs	r5, #0
   82b02:	e009      	b.n	82b18 <_fputwc_r+0x5c>
   82b04:	6823      	ldr	r3, [r4, #0]
   82b06:	7019      	strb	r1, [r3, #0]
   82b08:	6823      	ldr	r3, [r4, #0]
   82b0a:	3301      	adds	r3, #1
   82b0c:	6023      	str	r3, [r4, #0]
   82b0e:	3501      	adds	r5, #1
   82b10:	42b5      	cmp	r5, r6
   82b12:	d22e      	bcs.n	82b72 <_fputwc_r+0xb6>
   82b14:	ab01      	add	r3, sp, #4
   82b16:	5ce9      	ldrb	r1, [r5, r3]
   82b18:	68a3      	ldr	r3, [r4, #8]
   82b1a:	3b01      	subs	r3, #1
   82b1c:	2b00      	cmp	r3, #0
   82b1e:	60a3      	str	r3, [r4, #8]
   82b20:	daf0      	bge.n	82b04 <_fputwc_r+0x48>
   82b22:	69a2      	ldr	r2, [r4, #24]
   82b24:	4293      	cmp	r3, r2
   82b26:	db06      	blt.n	82b36 <_fputwc_r+0x7a>
   82b28:	6823      	ldr	r3, [r4, #0]
   82b2a:	7019      	strb	r1, [r3, #0]
   82b2c:	6823      	ldr	r3, [r4, #0]
   82b2e:	7819      	ldrb	r1, [r3, #0]
   82b30:	3301      	adds	r3, #1
   82b32:	290a      	cmp	r1, #10
   82b34:	d1ea      	bne.n	82b0c <_fputwc_r+0x50>
   82b36:	4640      	mov	r0, r8
   82b38:	4622      	mov	r2, r4
   82b3a:	f001 f965 	bl	83e08 <__swbuf_r>
   82b3e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82b42:	4258      	negs	r0, r3
   82b44:	4158      	adcs	r0, r3
   82b46:	2800      	cmp	r0, #0
   82b48:	d0e1      	beq.n	82b0e <_fputwc_r+0x52>
   82b4a:	f04f 30ff 	mov.w	r0, #4294967295
   82b4e:	b002      	add	sp, #8
   82b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b54:	89a3      	ldrh	r3, [r4, #12]
   82b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82b5a:	81a3      	strh	r3, [r4, #12]
   82b5c:	b002      	add	sp, #8
   82b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b62:	1e7b      	subs	r3, r7, #1
   82b64:	2bfe      	cmp	r3, #254	; 0xfe
   82b66:	d8bd      	bhi.n	82ae4 <_fputwc_r+0x28>
   82b68:	b2f9      	uxtb	r1, r7
   82b6a:	4606      	mov	r6, r0
   82b6c:	f88d 1004 	strb.w	r1, [sp, #4]
   82b70:	e7c6      	b.n	82b00 <_fputwc_r+0x44>
   82b72:	4638      	mov	r0, r7
   82b74:	b002      	add	sp, #8
   82b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b7a:	bf00      	nop

00082b7c <_malloc_trim_r>:
   82b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82b7e:	4d23      	ldr	r5, [pc, #140]	; (82c0c <_malloc_trim_r+0x90>)
   82b80:	460f      	mov	r7, r1
   82b82:	4604      	mov	r4, r0
   82b84:	f000 ff08 	bl	83998 <__malloc_lock>
   82b88:	68ab      	ldr	r3, [r5, #8]
   82b8a:	685e      	ldr	r6, [r3, #4]
   82b8c:	f026 0603 	bic.w	r6, r6, #3
   82b90:	1bf1      	subs	r1, r6, r7
   82b92:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82b96:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82b9a:	f021 010f 	bic.w	r1, r1, #15
   82b9e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82ba2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82ba6:	db07      	blt.n	82bb8 <_malloc_trim_r+0x3c>
   82ba8:	4620      	mov	r0, r4
   82baa:	2100      	movs	r1, #0
   82bac:	f001 f8d8 	bl	83d60 <_sbrk_r>
   82bb0:	68ab      	ldr	r3, [r5, #8]
   82bb2:	4433      	add	r3, r6
   82bb4:	4298      	cmp	r0, r3
   82bb6:	d004      	beq.n	82bc2 <_malloc_trim_r+0x46>
   82bb8:	4620      	mov	r0, r4
   82bba:	f000 feef 	bl	8399c <__malloc_unlock>
   82bbe:	2000      	movs	r0, #0
   82bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bc2:	4620      	mov	r0, r4
   82bc4:	4279      	negs	r1, r7
   82bc6:	f001 f8cb 	bl	83d60 <_sbrk_r>
   82bca:	3001      	adds	r0, #1
   82bcc:	d00d      	beq.n	82bea <_malloc_trim_r+0x6e>
   82bce:	4b10      	ldr	r3, [pc, #64]	; (82c10 <_malloc_trim_r+0x94>)
   82bd0:	68aa      	ldr	r2, [r5, #8]
   82bd2:	6819      	ldr	r1, [r3, #0]
   82bd4:	1bf6      	subs	r6, r6, r7
   82bd6:	f046 0601 	orr.w	r6, r6, #1
   82bda:	4620      	mov	r0, r4
   82bdc:	1bc9      	subs	r1, r1, r7
   82bde:	6056      	str	r6, [r2, #4]
   82be0:	6019      	str	r1, [r3, #0]
   82be2:	f000 fedb 	bl	8399c <__malloc_unlock>
   82be6:	2001      	movs	r0, #1
   82be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bea:	4620      	mov	r0, r4
   82bec:	2100      	movs	r1, #0
   82bee:	f001 f8b7 	bl	83d60 <_sbrk_r>
   82bf2:	68ab      	ldr	r3, [r5, #8]
   82bf4:	1ac2      	subs	r2, r0, r3
   82bf6:	2a0f      	cmp	r2, #15
   82bf8:	ddde      	ble.n	82bb8 <_malloc_trim_r+0x3c>
   82bfa:	4d06      	ldr	r5, [pc, #24]	; (82c14 <_malloc_trim_r+0x98>)
   82bfc:	4904      	ldr	r1, [pc, #16]	; (82c10 <_malloc_trim_r+0x94>)
   82bfe:	682d      	ldr	r5, [r5, #0]
   82c00:	f042 0201 	orr.w	r2, r2, #1
   82c04:	1b40      	subs	r0, r0, r5
   82c06:	605a      	str	r2, [r3, #4]
   82c08:	6008      	str	r0, [r1, #0]
   82c0a:	e7d5      	b.n	82bb8 <_malloc_trim_r+0x3c>
   82c0c:	20070590 	.word	0x20070590
   82c10:	20070ae8 	.word	0x20070ae8
   82c14:	2007099c 	.word	0x2007099c

00082c18 <_free_r>:
   82c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82c1c:	460d      	mov	r5, r1
   82c1e:	4606      	mov	r6, r0
   82c20:	2900      	cmp	r1, #0
   82c22:	d055      	beq.n	82cd0 <_free_r+0xb8>
   82c24:	f000 feb8 	bl	83998 <__malloc_lock>
   82c28:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82c2c:	f8df c170 	ldr.w	ip, [pc, #368]	; 82da0 <_free_r+0x188>
   82c30:	f1a5 0408 	sub.w	r4, r5, #8
   82c34:	f021 0301 	bic.w	r3, r1, #1
   82c38:	18e2      	adds	r2, r4, r3
   82c3a:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82c3e:	6857      	ldr	r7, [r2, #4]
   82c40:	4290      	cmp	r0, r2
   82c42:	f027 0703 	bic.w	r7, r7, #3
   82c46:	d068      	beq.n	82d1a <_free_r+0x102>
   82c48:	f011 0101 	ands.w	r1, r1, #1
   82c4c:	6057      	str	r7, [r2, #4]
   82c4e:	d032      	beq.n	82cb6 <_free_r+0x9e>
   82c50:	2100      	movs	r1, #0
   82c52:	19d0      	adds	r0, r2, r7
   82c54:	6840      	ldr	r0, [r0, #4]
   82c56:	07c0      	lsls	r0, r0, #31
   82c58:	d406      	bmi.n	82c68 <_free_r+0x50>
   82c5a:	443b      	add	r3, r7
   82c5c:	6890      	ldr	r0, [r2, #8]
   82c5e:	2900      	cmp	r1, #0
   82c60:	d04d      	beq.n	82cfe <_free_r+0xe6>
   82c62:	68d2      	ldr	r2, [r2, #12]
   82c64:	60c2      	str	r2, [r0, #12]
   82c66:	6090      	str	r0, [r2, #8]
   82c68:	f043 0201 	orr.w	r2, r3, #1
   82c6c:	6062      	str	r2, [r4, #4]
   82c6e:	50e3      	str	r3, [r4, r3]
   82c70:	b9e1      	cbnz	r1, 82cac <_free_r+0x94>
   82c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82c76:	d32d      	bcc.n	82cd4 <_free_r+0xbc>
   82c78:	0a5a      	lsrs	r2, r3, #9
   82c7a:	2a04      	cmp	r2, #4
   82c7c:	d869      	bhi.n	82d52 <_free_r+0x13a>
   82c7e:	0998      	lsrs	r0, r3, #6
   82c80:	3038      	adds	r0, #56	; 0x38
   82c82:	0041      	lsls	r1, r0, #1
   82c84:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82c88:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82c8c:	4944      	ldr	r1, [pc, #272]	; (82da0 <_free_r+0x188>)
   82c8e:	4562      	cmp	r2, ip
   82c90:	d065      	beq.n	82d5e <_free_r+0x146>
   82c92:	6851      	ldr	r1, [r2, #4]
   82c94:	f021 0103 	bic.w	r1, r1, #3
   82c98:	428b      	cmp	r3, r1
   82c9a:	d202      	bcs.n	82ca2 <_free_r+0x8a>
   82c9c:	6892      	ldr	r2, [r2, #8]
   82c9e:	4594      	cmp	ip, r2
   82ca0:	d1f7      	bne.n	82c92 <_free_r+0x7a>
   82ca2:	68d3      	ldr	r3, [r2, #12]
   82ca4:	60e3      	str	r3, [r4, #12]
   82ca6:	60a2      	str	r2, [r4, #8]
   82ca8:	609c      	str	r4, [r3, #8]
   82caa:	60d4      	str	r4, [r2, #12]
   82cac:	4630      	mov	r0, r6
   82cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82cb2:	f000 be73 	b.w	8399c <__malloc_unlock>
   82cb6:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82cba:	f10c 0808 	add.w	r8, ip, #8
   82cbe:	1b64      	subs	r4, r4, r5
   82cc0:	68a0      	ldr	r0, [r4, #8]
   82cc2:	442b      	add	r3, r5
   82cc4:	4540      	cmp	r0, r8
   82cc6:	d042      	beq.n	82d4e <_free_r+0x136>
   82cc8:	68e5      	ldr	r5, [r4, #12]
   82cca:	60c5      	str	r5, [r0, #12]
   82ccc:	60a8      	str	r0, [r5, #8]
   82cce:	e7c0      	b.n	82c52 <_free_r+0x3a>
   82cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82cd4:	08db      	lsrs	r3, r3, #3
   82cd6:	109a      	asrs	r2, r3, #2
   82cd8:	2001      	movs	r0, #1
   82cda:	4090      	lsls	r0, r2
   82cdc:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82ce0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82ce4:	689a      	ldr	r2, [r3, #8]
   82ce6:	4301      	orrs	r1, r0
   82ce8:	60a2      	str	r2, [r4, #8]
   82cea:	60e3      	str	r3, [r4, #12]
   82cec:	f8cc 1004 	str.w	r1, [ip, #4]
   82cf0:	4630      	mov	r0, r6
   82cf2:	609c      	str	r4, [r3, #8]
   82cf4:	60d4      	str	r4, [r2, #12]
   82cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82cfa:	f000 be4f 	b.w	8399c <__malloc_unlock>
   82cfe:	4d29      	ldr	r5, [pc, #164]	; (82da4 <_free_r+0x18c>)
   82d00:	42a8      	cmp	r0, r5
   82d02:	d1ae      	bne.n	82c62 <_free_r+0x4a>
   82d04:	f043 0201 	orr.w	r2, r3, #1
   82d08:	f8cc 4014 	str.w	r4, [ip, #20]
   82d0c:	f8cc 4010 	str.w	r4, [ip, #16]
   82d10:	60e0      	str	r0, [r4, #12]
   82d12:	60a0      	str	r0, [r4, #8]
   82d14:	6062      	str	r2, [r4, #4]
   82d16:	50e3      	str	r3, [r4, r3]
   82d18:	e7c8      	b.n	82cac <_free_r+0x94>
   82d1a:	441f      	add	r7, r3
   82d1c:	07cb      	lsls	r3, r1, #31
   82d1e:	d407      	bmi.n	82d30 <_free_r+0x118>
   82d20:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82d24:	1a64      	subs	r4, r4, r1
   82d26:	68e3      	ldr	r3, [r4, #12]
   82d28:	68a2      	ldr	r2, [r4, #8]
   82d2a:	440f      	add	r7, r1
   82d2c:	60d3      	str	r3, [r2, #12]
   82d2e:	609a      	str	r2, [r3, #8]
   82d30:	4b1d      	ldr	r3, [pc, #116]	; (82da8 <_free_r+0x190>)
   82d32:	f047 0201 	orr.w	r2, r7, #1
   82d36:	681b      	ldr	r3, [r3, #0]
   82d38:	6062      	str	r2, [r4, #4]
   82d3a:	429f      	cmp	r7, r3
   82d3c:	f8cc 4008 	str.w	r4, [ip, #8]
   82d40:	d3b4      	bcc.n	82cac <_free_r+0x94>
   82d42:	4b1a      	ldr	r3, [pc, #104]	; (82dac <_free_r+0x194>)
   82d44:	4630      	mov	r0, r6
   82d46:	6819      	ldr	r1, [r3, #0]
   82d48:	f7ff ff18 	bl	82b7c <_malloc_trim_r>
   82d4c:	e7ae      	b.n	82cac <_free_r+0x94>
   82d4e:	2101      	movs	r1, #1
   82d50:	e77f      	b.n	82c52 <_free_r+0x3a>
   82d52:	2a14      	cmp	r2, #20
   82d54:	d80b      	bhi.n	82d6e <_free_r+0x156>
   82d56:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82d5a:	0041      	lsls	r1, r0, #1
   82d5c:	e792      	b.n	82c84 <_free_r+0x6c>
   82d5e:	1080      	asrs	r0, r0, #2
   82d60:	2501      	movs	r5, #1
   82d62:	4085      	lsls	r5, r0
   82d64:	6848      	ldr	r0, [r1, #4]
   82d66:	4613      	mov	r3, r2
   82d68:	4328      	orrs	r0, r5
   82d6a:	6048      	str	r0, [r1, #4]
   82d6c:	e79a      	b.n	82ca4 <_free_r+0x8c>
   82d6e:	2a54      	cmp	r2, #84	; 0x54
   82d70:	d803      	bhi.n	82d7a <_free_r+0x162>
   82d72:	0b18      	lsrs	r0, r3, #12
   82d74:	306e      	adds	r0, #110	; 0x6e
   82d76:	0041      	lsls	r1, r0, #1
   82d78:	e784      	b.n	82c84 <_free_r+0x6c>
   82d7a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82d7e:	d803      	bhi.n	82d88 <_free_r+0x170>
   82d80:	0bd8      	lsrs	r0, r3, #15
   82d82:	3077      	adds	r0, #119	; 0x77
   82d84:	0041      	lsls	r1, r0, #1
   82d86:	e77d      	b.n	82c84 <_free_r+0x6c>
   82d88:	f240 5154 	movw	r1, #1364	; 0x554
   82d8c:	428a      	cmp	r2, r1
   82d8e:	d803      	bhi.n	82d98 <_free_r+0x180>
   82d90:	0c98      	lsrs	r0, r3, #18
   82d92:	307c      	adds	r0, #124	; 0x7c
   82d94:	0041      	lsls	r1, r0, #1
   82d96:	e775      	b.n	82c84 <_free_r+0x6c>
   82d98:	21fc      	movs	r1, #252	; 0xfc
   82d9a:	207e      	movs	r0, #126	; 0x7e
   82d9c:	e772      	b.n	82c84 <_free_r+0x6c>
   82d9e:	bf00      	nop
   82da0:	20070590 	.word	0x20070590
   82da4:	20070598 	.word	0x20070598
   82da8:	20070998 	.word	0x20070998
   82dac:	20070ae4 	.word	0x20070ae4

00082db0 <__sfvwrite_r>:
   82db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82db4:	6893      	ldr	r3, [r2, #8]
   82db6:	b083      	sub	sp, #12
   82db8:	4616      	mov	r6, r2
   82dba:	4681      	mov	r9, r0
   82dbc:	460c      	mov	r4, r1
   82dbe:	b32b      	cbz	r3, 82e0c <__sfvwrite_r+0x5c>
   82dc0:	898b      	ldrh	r3, [r1, #12]
   82dc2:	0719      	lsls	r1, r3, #28
   82dc4:	d526      	bpl.n	82e14 <__sfvwrite_r+0x64>
   82dc6:	6922      	ldr	r2, [r4, #16]
   82dc8:	b322      	cbz	r2, 82e14 <__sfvwrite_r+0x64>
   82dca:	f003 0202 	and.w	r2, r3, #2
   82dce:	b292      	uxth	r2, r2
   82dd0:	6835      	ldr	r5, [r6, #0]
   82dd2:	2a00      	cmp	r2, #0
   82dd4:	d02c      	beq.n	82e30 <__sfvwrite_r+0x80>
   82dd6:	f04f 0a00 	mov.w	sl, #0
   82dda:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 830c4 <__sfvwrite_r+0x314>
   82dde:	46d0      	mov	r8, sl
   82de0:	45d8      	cmp	r8, fp
   82de2:	bf34      	ite	cc
   82de4:	4643      	movcc	r3, r8
   82de6:	465b      	movcs	r3, fp
   82de8:	4652      	mov	r2, sl
   82dea:	4648      	mov	r0, r9
   82dec:	f1b8 0f00 	cmp.w	r8, #0
   82df0:	d04f      	beq.n	82e92 <__sfvwrite_r+0xe2>
   82df2:	69e1      	ldr	r1, [r4, #28]
   82df4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82df6:	47b8      	blx	r7
   82df8:	2800      	cmp	r0, #0
   82dfa:	dd56      	ble.n	82eaa <__sfvwrite_r+0xfa>
   82dfc:	68b3      	ldr	r3, [r6, #8]
   82dfe:	4482      	add	sl, r0
   82e00:	1a1b      	subs	r3, r3, r0
   82e02:	ebc0 0808 	rsb	r8, r0, r8
   82e06:	60b3      	str	r3, [r6, #8]
   82e08:	2b00      	cmp	r3, #0
   82e0a:	d1e9      	bne.n	82de0 <__sfvwrite_r+0x30>
   82e0c:	2000      	movs	r0, #0
   82e0e:	b003      	add	sp, #12
   82e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e14:	4648      	mov	r0, r9
   82e16:	4621      	mov	r1, r4
   82e18:	f7ff fc88 	bl	8272c <__swsetup_r>
   82e1c:	2800      	cmp	r0, #0
   82e1e:	f040 8148 	bne.w	830b2 <__sfvwrite_r+0x302>
   82e22:	89a3      	ldrh	r3, [r4, #12]
   82e24:	6835      	ldr	r5, [r6, #0]
   82e26:	f003 0202 	and.w	r2, r3, #2
   82e2a:	b292      	uxth	r2, r2
   82e2c:	2a00      	cmp	r2, #0
   82e2e:	d1d2      	bne.n	82dd6 <__sfvwrite_r+0x26>
   82e30:	f013 0a01 	ands.w	sl, r3, #1
   82e34:	d142      	bne.n	82ebc <__sfvwrite_r+0x10c>
   82e36:	46d0      	mov	r8, sl
   82e38:	f1b8 0f00 	cmp.w	r8, #0
   82e3c:	d023      	beq.n	82e86 <__sfvwrite_r+0xd6>
   82e3e:	059a      	lsls	r2, r3, #22
   82e40:	68a7      	ldr	r7, [r4, #8]
   82e42:	d576      	bpl.n	82f32 <__sfvwrite_r+0x182>
   82e44:	45b8      	cmp	r8, r7
   82e46:	f0c0 80a4 	bcc.w	82f92 <__sfvwrite_r+0x1e2>
   82e4a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82e4e:	f040 80b2 	bne.w	82fb6 <__sfvwrite_r+0x206>
   82e52:	6820      	ldr	r0, [r4, #0]
   82e54:	46bb      	mov	fp, r7
   82e56:	4651      	mov	r1, sl
   82e58:	465a      	mov	r2, fp
   82e5a:	f000 fd37 	bl	838cc <memmove>
   82e5e:	68a2      	ldr	r2, [r4, #8]
   82e60:	6821      	ldr	r1, [r4, #0]
   82e62:	1bd2      	subs	r2, r2, r7
   82e64:	eb01 030b 	add.w	r3, r1, fp
   82e68:	60a2      	str	r2, [r4, #8]
   82e6a:	6023      	str	r3, [r4, #0]
   82e6c:	4642      	mov	r2, r8
   82e6e:	68b3      	ldr	r3, [r6, #8]
   82e70:	4492      	add	sl, r2
   82e72:	1a9b      	subs	r3, r3, r2
   82e74:	ebc2 0808 	rsb	r8, r2, r8
   82e78:	60b3      	str	r3, [r6, #8]
   82e7a:	2b00      	cmp	r3, #0
   82e7c:	d0c6      	beq.n	82e0c <__sfvwrite_r+0x5c>
   82e7e:	89a3      	ldrh	r3, [r4, #12]
   82e80:	f1b8 0f00 	cmp.w	r8, #0
   82e84:	d1db      	bne.n	82e3e <__sfvwrite_r+0x8e>
   82e86:	f8d5 a000 	ldr.w	sl, [r5]
   82e8a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82e8e:	3508      	adds	r5, #8
   82e90:	e7d2      	b.n	82e38 <__sfvwrite_r+0x88>
   82e92:	f8d5 a000 	ldr.w	sl, [r5]
   82e96:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82e9a:	3508      	adds	r5, #8
   82e9c:	e7a0      	b.n	82de0 <__sfvwrite_r+0x30>
   82e9e:	4648      	mov	r0, r9
   82ea0:	4621      	mov	r1, r4
   82ea2:	f7ff fd59 	bl	82958 <_fflush_r>
   82ea6:	2800      	cmp	r0, #0
   82ea8:	d059      	beq.n	82f5e <__sfvwrite_r+0x1ae>
   82eaa:	89a3      	ldrh	r3, [r4, #12]
   82eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82eb0:	f04f 30ff 	mov.w	r0, #4294967295
   82eb4:	81a3      	strh	r3, [r4, #12]
   82eb6:	b003      	add	sp, #12
   82eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ebc:	4692      	mov	sl, r2
   82ebe:	9201      	str	r2, [sp, #4]
   82ec0:	4693      	mov	fp, r2
   82ec2:	4690      	mov	r8, r2
   82ec4:	f1b8 0f00 	cmp.w	r8, #0
   82ec8:	d02b      	beq.n	82f22 <__sfvwrite_r+0x172>
   82eca:	9f01      	ldr	r7, [sp, #4]
   82ecc:	2f00      	cmp	r7, #0
   82ece:	d064      	beq.n	82f9a <__sfvwrite_r+0x1ea>
   82ed0:	6820      	ldr	r0, [r4, #0]
   82ed2:	6921      	ldr	r1, [r4, #16]
   82ed4:	45c2      	cmp	sl, r8
   82ed6:	bf34      	ite	cc
   82ed8:	4653      	movcc	r3, sl
   82eda:	4643      	movcs	r3, r8
   82edc:	4288      	cmp	r0, r1
   82ede:	461f      	mov	r7, r3
   82ee0:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82ee4:	6962      	ldr	r2, [r4, #20]
   82ee6:	d903      	bls.n	82ef0 <__sfvwrite_r+0x140>
   82ee8:	4494      	add	ip, r2
   82eea:	4563      	cmp	r3, ip
   82eec:	f300 80ae 	bgt.w	8304c <__sfvwrite_r+0x29c>
   82ef0:	4293      	cmp	r3, r2
   82ef2:	db36      	blt.n	82f62 <__sfvwrite_r+0x1b2>
   82ef4:	4613      	mov	r3, r2
   82ef6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82ef8:	4648      	mov	r0, r9
   82efa:	69e1      	ldr	r1, [r4, #28]
   82efc:	465a      	mov	r2, fp
   82efe:	47b8      	blx	r7
   82f00:	1e07      	subs	r7, r0, #0
   82f02:	ddd2      	ble.n	82eaa <__sfvwrite_r+0xfa>
   82f04:	ebba 0a07 	subs.w	sl, sl, r7
   82f08:	d03a      	beq.n	82f80 <__sfvwrite_r+0x1d0>
   82f0a:	68b3      	ldr	r3, [r6, #8]
   82f0c:	44bb      	add	fp, r7
   82f0e:	1bdb      	subs	r3, r3, r7
   82f10:	ebc7 0808 	rsb	r8, r7, r8
   82f14:	60b3      	str	r3, [r6, #8]
   82f16:	2b00      	cmp	r3, #0
   82f18:	f43f af78 	beq.w	82e0c <__sfvwrite_r+0x5c>
   82f1c:	f1b8 0f00 	cmp.w	r8, #0
   82f20:	d1d3      	bne.n	82eca <__sfvwrite_r+0x11a>
   82f22:	2700      	movs	r7, #0
   82f24:	f8d5 b000 	ldr.w	fp, [r5]
   82f28:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82f2c:	9701      	str	r7, [sp, #4]
   82f2e:	3508      	adds	r5, #8
   82f30:	e7c8      	b.n	82ec4 <__sfvwrite_r+0x114>
   82f32:	6820      	ldr	r0, [r4, #0]
   82f34:	6923      	ldr	r3, [r4, #16]
   82f36:	4298      	cmp	r0, r3
   82f38:	d802      	bhi.n	82f40 <__sfvwrite_r+0x190>
   82f3a:	6963      	ldr	r3, [r4, #20]
   82f3c:	4598      	cmp	r8, r3
   82f3e:	d272      	bcs.n	83026 <__sfvwrite_r+0x276>
   82f40:	45b8      	cmp	r8, r7
   82f42:	bf38      	it	cc
   82f44:	4647      	movcc	r7, r8
   82f46:	463a      	mov	r2, r7
   82f48:	4651      	mov	r1, sl
   82f4a:	f000 fcbf 	bl	838cc <memmove>
   82f4e:	68a3      	ldr	r3, [r4, #8]
   82f50:	6822      	ldr	r2, [r4, #0]
   82f52:	1bdb      	subs	r3, r3, r7
   82f54:	443a      	add	r2, r7
   82f56:	60a3      	str	r3, [r4, #8]
   82f58:	6022      	str	r2, [r4, #0]
   82f5a:	2b00      	cmp	r3, #0
   82f5c:	d09f      	beq.n	82e9e <__sfvwrite_r+0xee>
   82f5e:	463a      	mov	r2, r7
   82f60:	e785      	b.n	82e6e <__sfvwrite_r+0xbe>
   82f62:	461a      	mov	r2, r3
   82f64:	4659      	mov	r1, fp
   82f66:	9300      	str	r3, [sp, #0]
   82f68:	f000 fcb0 	bl	838cc <memmove>
   82f6c:	9b00      	ldr	r3, [sp, #0]
   82f6e:	68a1      	ldr	r1, [r4, #8]
   82f70:	6822      	ldr	r2, [r4, #0]
   82f72:	1ac9      	subs	r1, r1, r3
   82f74:	ebba 0a07 	subs.w	sl, sl, r7
   82f78:	4413      	add	r3, r2
   82f7a:	60a1      	str	r1, [r4, #8]
   82f7c:	6023      	str	r3, [r4, #0]
   82f7e:	d1c4      	bne.n	82f0a <__sfvwrite_r+0x15a>
   82f80:	4648      	mov	r0, r9
   82f82:	4621      	mov	r1, r4
   82f84:	f7ff fce8 	bl	82958 <_fflush_r>
   82f88:	2800      	cmp	r0, #0
   82f8a:	d18e      	bne.n	82eaa <__sfvwrite_r+0xfa>
   82f8c:	f8cd a004 	str.w	sl, [sp, #4]
   82f90:	e7bb      	b.n	82f0a <__sfvwrite_r+0x15a>
   82f92:	6820      	ldr	r0, [r4, #0]
   82f94:	4647      	mov	r7, r8
   82f96:	46c3      	mov	fp, r8
   82f98:	e75d      	b.n	82e56 <__sfvwrite_r+0xa6>
   82f9a:	4658      	mov	r0, fp
   82f9c:	210a      	movs	r1, #10
   82f9e:	4642      	mov	r2, r8
   82fa0:	f000 fbd4 	bl	8374c <memchr>
   82fa4:	2800      	cmp	r0, #0
   82fa6:	d07f      	beq.n	830a8 <__sfvwrite_r+0x2f8>
   82fa8:	f100 0a01 	add.w	sl, r0, #1
   82fac:	2701      	movs	r7, #1
   82fae:	ebcb 0a0a 	rsb	sl, fp, sl
   82fb2:	9701      	str	r7, [sp, #4]
   82fb4:	e78c      	b.n	82ed0 <__sfvwrite_r+0x120>
   82fb6:	6822      	ldr	r2, [r4, #0]
   82fb8:	6921      	ldr	r1, [r4, #16]
   82fba:	6967      	ldr	r7, [r4, #20]
   82fbc:	ebc1 0c02 	rsb	ip, r1, r2
   82fc0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82fc4:	f10c 0201 	add.w	r2, ip, #1
   82fc8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82fcc:	4442      	add	r2, r8
   82fce:	107f      	asrs	r7, r7, #1
   82fd0:	4297      	cmp	r7, r2
   82fd2:	bf34      	ite	cc
   82fd4:	4617      	movcc	r7, r2
   82fd6:	463a      	movcs	r2, r7
   82fd8:	055b      	lsls	r3, r3, #21
   82fda:	d54f      	bpl.n	8307c <__sfvwrite_r+0x2cc>
   82fdc:	4611      	mov	r1, r2
   82fde:	4648      	mov	r0, r9
   82fe0:	f8cd c000 	str.w	ip, [sp]
   82fe4:	f000 f916 	bl	83214 <_malloc_r>
   82fe8:	f8dd c000 	ldr.w	ip, [sp]
   82fec:	4683      	mov	fp, r0
   82fee:	2800      	cmp	r0, #0
   82ff0:	d062      	beq.n	830b8 <__sfvwrite_r+0x308>
   82ff2:	4662      	mov	r2, ip
   82ff4:	6921      	ldr	r1, [r4, #16]
   82ff6:	f8cd c000 	str.w	ip, [sp]
   82ffa:	f000 fbf1 	bl	837e0 <memcpy>
   82ffe:	89a2      	ldrh	r2, [r4, #12]
   83000:	f8dd c000 	ldr.w	ip, [sp]
   83004:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83008:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8300c:	81a2      	strh	r2, [r4, #12]
   8300e:	eb0b 000c 	add.w	r0, fp, ip
   83012:	ebcc 0207 	rsb	r2, ip, r7
   83016:	f8c4 b010 	str.w	fp, [r4, #16]
   8301a:	6167      	str	r7, [r4, #20]
   8301c:	6020      	str	r0, [r4, #0]
   8301e:	60a2      	str	r2, [r4, #8]
   83020:	4647      	mov	r7, r8
   83022:	46c3      	mov	fp, r8
   83024:	e717      	b.n	82e56 <__sfvwrite_r+0xa6>
   83026:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8302a:	4590      	cmp	r8, r2
   8302c:	bf38      	it	cc
   8302e:	4642      	movcc	r2, r8
   83030:	fb92 f2f3 	sdiv	r2, r2, r3
   83034:	fb02 f303 	mul.w	r3, r2, r3
   83038:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8303a:	4648      	mov	r0, r9
   8303c:	69e1      	ldr	r1, [r4, #28]
   8303e:	4652      	mov	r2, sl
   83040:	47b8      	blx	r7
   83042:	2800      	cmp	r0, #0
   83044:	f77f af31 	ble.w	82eaa <__sfvwrite_r+0xfa>
   83048:	4602      	mov	r2, r0
   8304a:	e710      	b.n	82e6e <__sfvwrite_r+0xbe>
   8304c:	4662      	mov	r2, ip
   8304e:	4659      	mov	r1, fp
   83050:	f8cd c000 	str.w	ip, [sp]
   83054:	f000 fc3a 	bl	838cc <memmove>
   83058:	f8dd c000 	ldr.w	ip, [sp]
   8305c:	6823      	ldr	r3, [r4, #0]
   8305e:	4648      	mov	r0, r9
   83060:	4463      	add	r3, ip
   83062:	6023      	str	r3, [r4, #0]
   83064:	4621      	mov	r1, r4
   83066:	f8cd c000 	str.w	ip, [sp]
   8306a:	f7ff fc75 	bl	82958 <_fflush_r>
   8306e:	f8dd c000 	ldr.w	ip, [sp]
   83072:	2800      	cmp	r0, #0
   83074:	f47f af19 	bne.w	82eaa <__sfvwrite_r+0xfa>
   83078:	4667      	mov	r7, ip
   8307a:	e743      	b.n	82f04 <__sfvwrite_r+0x154>
   8307c:	4648      	mov	r0, r9
   8307e:	f8cd c000 	str.w	ip, [sp]
   83082:	f000 fc8d 	bl	839a0 <_realloc_r>
   83086:	f8dd c000 	ldr.w	ip, [sp]
   8308a:	4683      	mov	fp, r0
   8308c:	2800      	cmp	r0, #0
   8308e:	d1be      	bne.n	8300e <__sfvwrite_r+0x25e>
   83090:	4648      	mov	r0, r9
   83092:	6921      	ldr	r1, [r4, #16]
   83094:	f7ff fdc0 	bl	82c18 <_free_r>
   83098:	89a3      	ldrh	r3, [r4, #12]
   8309a:	220c      	movs	r2, #12
   8309c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   830a0:	b29b      	uxth	r3, r3
   830a2:	f8c9 2000 	str.w	r2, [r9]
   830a6:	e701      	b.n	82eac <__sfvwrite_r+0xfc>
   830a8:	2701      	movs	r7, #1
   830aa:	f108 0a01 	add.w	sl, r8, #1
   830ae:	9701      	str	r7, [sp, #4]
   830b0:	e70e      	b.n	82ed0 <__sfvwrite_r+0x120>
   830b2:	f04f 30ff 	mov.w	r0, #4294967295
   830b6:	e6aa      	b.n	82e0e <__sfvwrite_r+0x5e>
   830b8:	230c      	movs	r3, #12
   830ba:	f8c9 3000 	str.w	r3, [r9]
   830be:	89a3      	ldrh	r3, [r4, #12]
   830c0:	e6f4      	b.n	82eac <__sfvwrite_r+0xfc>
   830c2:	bf00      	nop
   830c4:	7ffffc00 	.word	0x7ffffc00

000830c8 <_fwalk>:
   830c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   830cc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   830d0:	4688      	mov	r8, r1
   830d2:	d019      	beq.n	83108 <_fwalk+0x40>
   830d4:	2600      	movs	r6, #0
   830d6:	687d      	ldr	r5, [r7, #4]
   830d8:	68bc      	ldr	r4, [r7, #8]
   830da:	3d01      	subs	r5, #1
   830dc:	d40e      	bmi.n	830fc <_fwalk+0x34>
   830de:	89a3      	ldrh	r3, [r4, #12]
   830e0:	3d01      	subs	r5, #1
   830e2:	2b01      	cmp	r3, #1
   830e4:	d906      	bls.n	830f4 <_fwalk+0x2c>
   830e6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   830ea:	4620      	mov	r0, r4
   830ec:	3301      	adds	r3, #1
   830ee:	d001      	beq.n	830f4 <_fwalk+0x2c>
   830f0:	47c0      	blx	r8
   830f2:	4306      	orrs	r6, r0
   830f4:	1c6b      	adds	r3, r5, #1
   830f6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   830fa:	d1f0      	bne.n	830de <_fwalk+0x16>
   830fc:	683f      	ldr	r7, [r7, #0]
   830fe:	2f00      	cmp	r7, #0
   83100:	d1e9      	bne.n	830d6 <_fwalk+0xe>
   83102:	4630      	mov	r0, r6
   83104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83108:	463e      	mov	r6, r7
   8310a:	4630      	mov	r0, r6
   8310c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083110 <__locale_charset>:
   83110:	4800      	ldr	r0, [pc, #0]	; (83114 <__locale_charset+0x4>)
   83112:	4770      	bx	lr
   83114:	2007056c 	.word	0x2007056c

00083118 <__locale_mb_cur_max>:
   83118:	4b01      	ldr	r3, [pc, #4]	; (83120 <__locale_mb_cur_max+0x8>)
   8311a:	6818      	ldr	r0, [r3, #0]
   8311c:	4770      	bx	lr
   8311e:	bf00      	nop
   83120:	2007058c 	.word	0x2007058c

00083124 <__smakebuf_r>:
   83124:	b5f0      	push	{r4, r5, r6, r7, lr}
   83126:	898b      	ldrh	r3, [r1, #12]
   83128:	b091      	sub	sp, #68	; 0x44
   8312a:	b29a      	uxth	r2, r3
   8312c:	0796      	lsls	r6, r2, #30
   8312e:	460c      	mov	r4, r1
   83130:	4605      	mov	r5, r0
   83132:	d437      	bmi.n	831a4 <__smakebuf_r+0x80>
   83134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83138:	2900      	cmp	r1, #0
   8313a:	db17      	blt.n	8316c <__smakebuf_r+0x48>
   8313c:	aa01      	add	r2, sp, #4
   8313e:	f000 ffaf 	bl	840a0 <_fstat_r>
   83142:	2800      	cmp	r0, #0
   83144:	db10      	blt.n	83168 <__smakebuf_r+0x44>
   83146:	9b02      	ldr	r3, [sp, #8]
   83148:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8314c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   83150:	424f      	negs	r7, r1
   83152:	414f      	adcs	r7, r1
   83154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   83158:	d02c      	beq.n	831b4 <__smakebuf_r+0x90>
   8315a:	89a3      	ldrh	r3, [r4, #12]
   8315c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83164:	81a3      	strh	r3, [r4, #12]
   83166:	e00b      	b.n	83180 <__smakebuf_r+0x5c>
   83168:	89a3      	ldrh	r3, [r4, #12]
   8316a:	b29a      	uxth	r2, r3
   8316c:	f012 0f80 	tst.w	r2, #128	; 0x80
   83170:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83174:	81a3      	strh	r3, [r4, #12]
   83176:	bf14      	ite	ne
   83178:	2640      	movne	r6, #64	; 0x40
   8317a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8317e:	2700      	movs	r7, #0
   83180:	4628      	mov	r0, r5
   83182:	4631      	mov	r1, r6
   83184:	f000 f846 	bl	83214 <_malloc_r>
   83188:	89a3      	ldrh	r3, [r4, #12]
   8318a:	2800      	cmp	r0, #0
   8318c:	d029      	beq.n	831e2 <__smakebuf_r+0xbe>
   8318e:	4a1b      	ldr	r2, [pc, #108]	; (831fc <__smakebuf_r+0xd8>)
   83190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83194:	63ea      	str	r2, [r5, #60]	; 0x3c
   83196:	81a3      	strh	r3, [r4, #12]
   83198:	6020      	str	r0, [r4, #0]
   8319a:	6120      	str	r0, [r4, #16]
   8319c:	6166      	str	r6, [r4, #20]
   8319e:	b9a7      	cbnz	r7, 831ca <__smakebuf_r+0xa6>
   831a0:	b011      	add	sp, #68	; 0x44
   831a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   831a4:	f101 0343 	add.w	r3, r1, #67	; 0x43
   831a8:	2201      	movs	r2, #1
   831aa:	600b      	str	r3, [r1, #0]
   831ac:	610b      	str	r3, [r1, #16]
   831ae:	614a      	str	r2, [r1, #20]
   831b0:	b011      	add	sp, #68	; 0x44
   831b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   831b4:	4a12      	ldr	r2, [pc, #72]	; (83200 <__smakebuf_r+0xdc>)
   831b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   831b8:	4293      	cmp	r3, r2
   831ba:	d1ce      	bne.n	8315a <__smakebuf_r+0x36>
   831bc:	89a3      	ldrh	r3, [r4, #12]
   831be:	f44f 6680 	mov.w	r6, #1024	; 0x400
   831c2:	4333      	orrs	r3, r6
   831c4:	81a3      	strh	r3, [r4, #12]
   831c6:	64e6      	str	r6, [r4, #76]	; 0x4c
   831c8:	e7da      	b.n	83180 <__smakebuf_r+0x5c>
   831ca:	4628      	mov	r0, r5
   831cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   831d0:	f000 ff7a 	bl	840c8 <_isatty_r>
   831d4:	2800      	cmp	r0, #0
   831d6:	d0e3      	beq.n	831a0 <__smakebuf_r+0x7c>
   831d8:	89a3      	ldrh	r3, [r4, #12]
   831da:	f043 0301 	orr.w	r3, r3, #1
   831de:	81a3      	strh	r3, [r4, #12]
   831e0:	e7de      	b.n	831a0 <__smakebuf_r+0x7c>
   831e2:	059a      	lsls	r2, r3, #22
   831e4:	d4dc      	bmi.n	831a0 <__smakebuf_r+0x7c>
   831e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   831ea:	f043 0302 	orr.w	r3, r3, #2
   831ee:	2101      	movs	r1, #1
   831f0:	81a3      	strh	r3, [r4, #12]
   831f2:	6022      	str	r2, [r4, #0]
   831f4:	6122      	str	r2, [r4, #16]
   831f6:	6161      	str	r1, [r4, #20]
   831f8:	e7d2      	b.n	831a0 <__smakebuf_r+0x7c>
   831fa:	bf00      	nop
   831fc:	00082985 	.word	0x00082985
   83200:	00083de1 	.word	0x00083de1

00083204 <malloc>:
   83204:	4b02      	ldr	r3, [pc, #8]	; (83210 <malloc+0xc>)
   83206:	4601      	mov	r1, r0
   83208:	6818      	ldr	r0, [r3, #0]
   8320a:	f000 b803 	b.w	83214 <_malloc_r>
   8320e:	bf00      	nop
   83210:	20070568 	.word	0x20070568

00083214 <_malloc_r>:
   83214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83218:	f101 050b 	add.w	r5, r1, #11
   8321c:	2d16      	cmp	r5, #22
   8321e:	b083      	sub	sp, #12
   83220:	4606      	mov	r6, r0
   83222:	d927      	bls.n	83274 <_malloc_r+0x60>
   83224:	f035 0507 	bics.w	r5, r5, #7
   83228:	d427      	bmi.n	8327a <_malloc_r+0x66>
   8322a:	42a9      	cmp	r1, r5
   8322c:	d825      	bhi.n	8327a <_malloc_r+0x66>
   8322e:	4630      	mov	r0, r6
   83230:	f000 fbb2 	bl	83998 <__malloc_lock>
   83234:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   83238:	d226      	bcs.n	83288 <_malloc_r+0x74>
   8323a:	4fc1      	ldr	r7, [pc, #772]	; (83540 <_malloc_r+0x32c>)
   8323c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   83240:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   83244:	68dc      	ldr	r4, [r3, #12]
   83246:	429c      	cmp	r4, r3
   83248:	f000 81d2 	beq.w	835f0 <_malloc_r+0x3dc>
   8324c:	6863      	ldr	r3, [r4, #4]
   8324e:	68e2      	ldr	r2, [r4, #12]
   83250:	f023 0303 	bic.w	r3, r3, #3
   83254:	4423      	add	r3, r4
   83256:	6858      	ldr	r0, [r3, #4]
   83258:	68a1      	ldr	r1, [r4, #8]
   8325a:	f040 0501 	orr.w	r5, r0, #1
   8325e:	60ca      	str	r2, [r1, #12]
   83260:	4630      	mov	r0, r6
   83262:	6091      	str	r1, [r2, #8]
   83264:	605d      	str	r5, [r3, #4]
   83266:	f000 fb99 	bl	8399c <__malloc_unlock>
   8326a:	3408      	adds	r4, #8
   8326c:	4620      	mov	r0, r4
   8326e:	b003      	add	sp, #12
   83270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83274:	2510      	movs	r5, #16
   83276:	42a9      	cmp	r1, r5
   83278:	d9d9      	bls.n	8322e <_malloc_r+0x1a>
   8327a:	2400      	movs	r4, #0
   8327c:	230c      	movs	r3, #12
   8327e:	4620      	mov	r0, r4
   83280:	6033      	str	r3, [r6, #0]
   83282:	b003      	add	sp, #12
   83284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83288:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   8328c:	f000 8089 	beq.w	833a2 <_malloc_r+0x18e>
   83290:	f1bc 0f04 	cmp.w	ip, #4
   83294:	f200 8160 	bhi.w	83558 <_malloc_r+0x344>
   83298:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   8329c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   832a0:	ea4f 014c 	mov.w	r1, ip, lsl #1
   832a4:	4fa6      	ldr	r7, [pc, #664]	; (83540 <_malloc_r+0x32c>)
   832a6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   832aa:	68cc      	ldr	r4, [r1, #12]
   832ac:	42a1      	cmp	r1, r4
   832ae:	d105      	bne.n	832bc <_malloc_r+0xa8>
   832b0:	e00c      	b.n	832cc <_malloc_r+0xb8>
   832b2:	2b00      	cmp	r3, #0
   832b4:	da79      	bge.n	833aa <_malloc_r+0x196>
   832b6:	68e4      	ldr	r4, [r4, #12]
   832b8:	42a1      	cmp	r1, r4
   832ba:	d007      	beq.n	832cc <_malloc_r+0xb8>
   832bc:	6862      	ldr	r2, [r4, #4]
   832be:	f022 0203 	bic.w	r2, r2, #3
   832c2:	1b53      	subs	r3, r2, r5
   832c4:	2b0f      	cmp	r3, #15
   832c6:	ddf4      	ble.n	832b2 <_malloc_r+0x9e>
   832c8:	f10c 3cff 	add.w	ip, ip, #4294967295
   832cc:	f10c 0c01 	add.w	ip, ip, #1
   832d0:	4b9b      	ldr	r3, [pc, #620]	; (83540 <_malloc_r+0x32c>)
   832d2:	693c      	ldr	r4, [r7, #16]
   832d4:	f103 0e08 	add.w	lr, r3, #8
   832d8:	4574      	cmp	r4, lr
   832da:	f000 817e 	beq.w	835da <_malloc_r+0x3c6>
   832de:	6861      	ldr	r1, [r4, #4]
   832e0:	f021 0103 	bic.w	r1, r1, #3
   832e4:	1b4a      	subs	r2, r1, r5
   832e6:	2a0f      	cmp	r2, #15
   832e8:	f300 8164 	bgt.w	835b4 <_malloc_r+0x3a0>
   832ec:	2a00      	cmp	r2, #0
   832ee:	f8c3 e014 	str.w	lr, [r3, #20]
   832f2:	f8c3 e010 	str.w	lr, [r3, #16]
   832f6:	da69      	bge.n	833cc <_malloc_r+0x1b8>
   832f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   832fc:	f080 813a 	bcs.w	83574 <_malloc_r+0x360>
   83300:	08c9      	lsrs	r1, r1, #3
   83302:	108a      	asrs	r2, r1, #2
   83304:	f04f 0801 	mov.w	r8, #1
   83308:	fa08 f802 	lsl.w	r8, r8, r2
   8330c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   83310:	685a      	ldr	r2, [r3, #4]
   83312:	6888      	ldr	r0, [r1, #8]
   83314:	ea48 0202 	orr.w	r2, r8, r2
   83318:	60a0      	str	r0, [r4, #8]
   8331a:	60e1      	str	r1, [r4, #12]
   8331c:	605a      	str	r2, [r3, #4]
   8331e:	608c      	str	r4, [r1, #8]
   83320:	60c4      	str	r4, [r0, #12]
   83322:	ea4f 03ac 	mov.w	r3, ip, asr #2
   83326:	2001      	movs	r0, #1
   83328:	4098      	lsls	r0, r3
   8332a:	4290      	cmp	r0, r2
   8332c:	d85b      	bhi.n	833e6 <_malloc_r+0x1d2>
   8332e:	4202      	tst	r2, r0
   83330:	d106      	bne.n	83340 <_malloc_r+0x12c>
   83332:	f02c 0c03 	bic.w	ip, ip, #3
   83336:	0040      	lsls	r0, r0, #1
   83338:	4202      	tst	r2, r0
   8333a:	f10c 0c04 	add.w	ip, ip, #4
   8333e:	d0fa      	beq.n	83336 <_malloc_r+0x122>
   83340:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   83344:	4644      	mov	r4, r8
   83346:	46e1      	mov	r9, ip
   83348:	68e3      	ldr	r3, [r4, #12]
   8334a:	429c      	cmp	r4, r3
   8334c:	d107      	bne.n	8335e <_malloc_r+0x14a>
   8334e:	e146      	b.n	835de <_malloc_r+0x3ca>
   83350:	2a00      	cmp	r2, #0
   83352:	f280 8157 	bge.w	83604 <_malloc_r+0x3f0>
   83356:	68db      	ldr	r3, [r3, #12]
   83358:	429c      	cmp	r4, r3
   8335a:	f000 8140 	beq.w	835de <_malloc_r+0x3ca>
   8335e:	6859      	ldr	r1, [r3, #4]
   83360:	f021 0103 	bic.w	r1, r1, #3
   83364:	1b4a      	subs	r2, r1, r5
   83366:	2a0f      	cmp	r2, #15
   83368:	ddf2      	ble.n	83350 <_malloc_r+0x13c>
   8336a:	461c      	mov	r4, r3
   8336c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   83370:	68d9      	ldr	r1, [r3, #12]
   83372:	f045 0901 	orr.w	r9, r5, #1
   83376:	f042 0801 	orr.w	r8, r2, #1
   8337a:	441d      	add	r5, r3
   8337c:	f8c3 9004 	str.w	r9, [r3, #4]
   83380:	4630      	mov	r0, r6
   83382:	f8cc 100c 	str.w	r1, [ip, #12]
   83386:	f8c1 c008 	str.w	ip, [r1, #8]
   8338a:	617d      	str	r5, [r7, #20]
   8338c:	613d      	str	r5, [r7, #16]
   8338e:	f8c5 e00c 	str.w	lr, [r5, #12]
   83392:	f8c5 e008 	str.w	lr, [r5, #8]
   83396:	f8c5 8004 	str.w	r8, [r5, #4]
   8339a:	50aa      	str	r2, [r5, r2]
   8339c:	f000 fafe 	bl	8399c <__malloc_unlock>
   833a0:	e764      	b.n	8326c <_malloc_r+0x58>
   833a2:	217e      	movs	r1, #126	; 0x7e
   833a4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   833a8:	e77c      	b.n	832a4 <_malloc_r+0x90>
   833aa:	4422      	add	r2, r4
   833ac:	6850      	ldr	r0, [r2, #4]
   833ae:	68e3      	ldr	r3, [r4, #12]
   833b0:	68a1      	ldr	r1, [r4, #8]
   833b2:	f040 0501 	orr.w	r5, r0, #1
   833b6:	60cb      	str	r3, [r1, #12]
   833b8:	4630      	mov	r0, r6
   833ba:	6099      	str	r1, [r3, #8]
   833bc:	6055      	str	r5, [r2, #4]
   833be:	f000 faed 	bl	8399c <__malloc_unlock>
   833c2:	3408      	adds	r4, #8
   833c4:	4620      	mov	r0, r4
   833c6:	b003      	add	sp, #12
   833c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833cc:	4421      	add	r1, r4
   833ce:	684b      	ldr	r3, [r1, #4]
   833d0:	4630      	mov	r0, r6
   833d2:	f043 0301 	orr.w	r3, r3, #1
   833d6:	604b      	str	r3, [r1, #4]
   833d8:	f000 fae0 	bl	8399c <__malloc_unlock>
   833dc:	3408      	adds	r4, #8
   833de:	4620      	mov	r0, r4
   833e0:	b003      	add	sp, #12
   833e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833e6:	68bc      	ldr	r4, [r7, #8]
   833e8:	6863      	ldr	r3, [r4, #4]
   833ea:	f023 0903 	bic.w	r9, r3, #3
   833ee:	45a9      	cmp	r9, r5
   833f0:	d304      	bcc.n	833fc <_malloc_r+0x1e8>
   833f2:	ebc5 0309 	rsb	r3, r5, r9
   833f6:	2b0f      	cmp	r3, #15
   833f8:	f300 8091 	bgt.w	8351e <_malloc_r+0x30a>
   833fc:	4b51      	ldr	r3, [pc, #324]	; (83544 <_malloc_r+0x330>)
   833fe:	4a52      	ldr	r2, [pc, #328]	; (83548 <_malloc_r+0x334>)
   83400:	6819      	ldr	r1, [r3, #0]
   83402:	6813      	ldr	r3, [r2, #0]
   83404:	eb05 0a01 	add.w	sl, r5, r1
   83408:	3301      	adds	r3, #1
   8340a:	eb04 0b09 	add.w	fp, r4, r9
   8340e:	f000 8161 	beq.w	836d4 <_malloc_r+0x4c0>
   83412:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   83416:	f10a 0a0f 	add.w	sl, sl, #15
   8341a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8341e:	f02a 0a0f 	bic.w	sl, sl, #15
   83422:	4630      	mov	r0, r6
   83424:	4651      	mov	r1, sl
   83426:	9201      	str	r2, [sp, #4]
   83428:	f000 fc9a 	bl	83d60 <_sbrk_r>
   8342c:	f1b0 3fff 	cmp.w	r0, #4294967295
   83430:	4680      	mov	r8, r0
   83432:	9a01      	ldr	r2, [sp, #4]
   83434:	f000 8101 	beq.w	8363a <_malloc_r+0x426>
   83438:	4583      	cmp	fp, r0
   8343a:	f200 80fb 	bhi.w	83634 <_malloc_r+0x420>
   8343e:	f8df c114 	ldr.w	ip, [pc, #276]	; 83554 <_malloc_r+0x340>
   83442:	45c3      	cmp	fp, r8
   83444:	f8dc 3000 	ldr.w	r3, [ip]
   83448:	4453      	add	r3, sl
   8344a:	f8cc 3000 	str.w	r3, [ip]
   8344e:	f000 814a 	beq.w	836e6 <_malloc_r+0x4d2>
   83452:	6812      	ldr	r2, [r2, #0]
   83454:	493c      	ldr	r1, [pc, #240]	; (83548 <_malloc_r+0x334>)
   83456:	3201      	adds	r2, #1
   83458:	bf1b      	ittet	ne
   8345a:	ebcb 0b08 	rsbne	fp, fp, r8
   8345e:	445b      	addne	r3, fp
   83460:	f8c1 8000 	streq.w	r8, [r1]
   83464:	f8cc 3000 	strne.w	r3, [ip]
   83468:	f018 0307 	ands.w	r3, r8, #7
   8346c:	f000 8114 	beq.w	83698 <_malloc_r+0x484>
   83470:	f1c3 0208 	rsb	r2, r3, #8
   83474:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   83478:	4490      	add	r8, r2
   8347a:	3308      	adds	r3, #8
   8347c:	44c2      	add	sl, r8
   8347e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   83482:	ebca 0a03 	rsb	sl, sl, r3
   83486:	4651      	mov	r1, sl
   83488:	4630      	mov	r0, r6
   8348a:	f8cd c004 	str.w	ip, [sp, #4]
   8348e:	f000 fc67 	bl	83d60 <_sbrk_r>
   83492:	1c43      	adds	r3, r0, #1
   83494:	f8dd c004 	ldr.w	ip, [sp, #4]
   83498:	f000 8135 	beq.w	83706 <_malloc_r+0x4f2>
   8349c:	ebc8 0200 	rsb	r2, r8, r0
   834a0:	4452      	add	r2, sl
   834a2:	f042 0201 	orr.w	r2, r2, #1
   834a6:	f8dc 3000 	ldr.w	r3, [ip]
   834aa:	42bc      	cmp	r4, r7
   834ac:	4453      	add	r3, sl
   834ae:	f8c7 8008 	str.w	r8, [r7, #8]
   834b2:	f8cc 3000 	str.w	r3, [ip]
   834b6:	f8c8 2004 	str.w	r2, [r8, #4]
   834ba:	f8df a098 	ldr.w	sl, [pc, #152]	; 83554 <_malloc_r+0x340>
   834be:	d015      	beq.n	834ec <_malloc_r+0x2d8>
   834c0:	f1b9 0f0f 	cmp.w	r9, #15
   834c4:	f240 80eb 	bls.w	8369e <_malloc_r+0x48a>
   834c8:	6861      	ldr	r1, [r4, #4]
   834ca:	f1a9 020c 	sub.w	r2, r9, #12
   834ce:	f022 0207 	bic.w	r2, r2, #7
   834d2:	f001 0101 	and.w	r1, r1, #1
   834d6:	ea42 0e01 	orr.w	lr, r2, r1
   834da:	2005      	movs	r0, #5
   834dc:	18a1      	adds	r1, r4, r2
   834de:	2a0f      	cmp	r2, #15
   834e0:	f8c4 e004 	str.w	lr, [r4, #4]
   834e4:	6048      	str	r0, [r1, #4]
   834e6:	6088      	str	r0, [r1, #8]
   834e8:	f200 8111 	bhi.w	8370e <_malloc_r+0x4fa>
   834ec:	4a17      	ldr	r2, [pc, #92]	; (8354c <_malloc_r+0x338>)
   834ee:	68bc      	ldr	r4, [r7, #8]
   834f0:	6811      	ldr	r1, [r2, #0]
   834f2:	428b      	cmp	r3, r1
   834f4:	bf88      	it	hi
   834f6:	6013      	strhi	r3, [r2, #0]
   834f8:	4a15      	ldr	r2, [pc, #84]	; (83550 <_malloc_r+0x33c>)
   834fa:	6811      	ldr	r1, [r2, #0]
   834fc:	428b      	cmp	r3, r1
   834fe:	bf88      	it	hi
   83500:	6013      	strhi	r3, [r2, #0]
   83502:	6862      	ldr	r2, [r4, #4]
   83504:	f022 0203 	bic.w	r2, r2, #3
   83508:	4295      	cmp	r5, r2
   8350a:	ebc5 0302 	rsb	r3, r5, r2
   8350e:	d801      	bhi.n	83514 <_malloc_r+0x300>
   83510:	2b0f      	cmp	r3, #15
   83512:	dc04      	bgt.n	8351e <_malloc_r+0x30a>
   83514:	4630      	mov	r0, r6
   83516:	f000 fa41 	bl	8399c <__malloc_unlock>
   8351a:	2400      	movs	r4, #0
   8351c:	e6a6      	b.n	8326c <_malloc_r+0x58>
   8351e:	f045 0201 	orr.w	r2, r5, #1
   83522:	f043 0301 	orr.w	r3, r3, #1
   83526:	4425      	add	r5, r4
   83528:	6062      	str	r2, [r4, #4]
   8352a:	4630      	mov	r0, r6
   8352c:	60bd      	str	r5, [r7, #8]
   8352e:	606b      	str	r3, [r5, #4]
   83530:	f000 fa34 	bl	8399c <__malloc_unlock>
   83534:	3408      	adds	r4, #8
   83536:	4620      	mov	r0, r4
   83538:	b003      	add	sp, #12
   8353a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8353e:	bf00      	nop
   83540:	20070590 	.word	0x20070590
   83544:	20070ae4 	.word	0x20070ae4
   83548:	2007099c 	.word	0x2007099c
   8354c:	20070ae0 	.word	0x20070ae0
   83550:	20070adc 	.word	0x20070adc
   83554:	20070ae8 	.word	0x20070ae8
   83558:	f1bc 0f14 	cmp.w	ip, #20
   8355c:	d961      	bls.n	83622 <_malloc_r+0x40e>
   8355e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   83562:	f200 808f 	bhi.w	83684 <_malloc_r+0x470>
   83566:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8356a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8356e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83572:	e697      	b.n	832a4 <_malloc_r+0x90>
   83574:	0a4b      	lsrs	r3, r1, #9
   83576:	2b04      	cmp	r3, #4
   83578:	d958      	bls.n	8362c <_malloc_r+0x418>
   8357a:	2b14      	cmp	r3, #20
   8357c:	f200 80ad 	bhi.w	836da <_malloc_r+0x4c6>
   83580:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   83584:	0050      	lsls	r0, r2, #1
   83586:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8358a:	6883      	ldr	r3, [r0, #8]
   8358c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83748 <_malloc_r+0x534>
   83590:	4283      	cmp	r3, r0
   83592:	f000 808a 	beq.w	836aa <_malloc_r+0x496>
   83596:	685a      	ldr	r2, [r3, #4]
   83598:	f022 0203 	bic.w	r2, r2, #3
   8359c:	4291      	cmp	r1, r2
   8359e:	d202      	bcs.n	835a6 <_malloc_r+0x392>
   835a0:	689b      	ldr	r3, [r3, #8]
   835a2:	4298      	cmp	r0, r3
   835a4:	d1f7      	bne.n	83596 <_malloc_r+0x382>
   835a6:	68d9      	ldr	r1, [r3, #12]
   835a8:	687a      	ldr	r2, [r7, #4]
   835aa:	60e1      	str	r1, [r4, #12]
   835ac:	60a3      	str	r3, [r4, #8]
   835ae:	608c      	str	r4, [r1, #8]
   835b0:	60dc      	str	r4, [r3, #12]
   835b2:	e6b6      	b.n	83322 <_malloc_r+0x10e>
   835b4:	f045 0701 	orr.w	r7, r5, #1
   835b8:	f042 0101 	orr.w	r1, r2, #1
   835bc:	4425      	add	r5, r4
   835be:	6067      	str	r7, [r4, #4]
   835c0:	4630      	mov	r0, r6
   835c2:	615d      	str	r5, [r3, #20]
   835c4:	611d      	str	r5, [r3, #16]
   835c6:	f8c5 e00c 	str.w	lr, [r5, #12]
   835ca:	f8c5 e008 	str.w	lr, [r5, #8]
   835ce:	6069      	str	r1, [r5, #4]
   835d0:	50aa      	str	r2, [r5, r2]
   835d2:	3408      	adds	r4, #8
   835d4:	f000 f9e2 	bl	8399c <__malloc_unlock>
   835d8:	e648      	b.n	8326c <_malloc_r+0x58>
   835da:	685a      	ldr	r2, [r3, #4]
   835dc:	e6a1      	b.n	83322 <_malloc_r+0x10e>
   835de:	f109 0901 	add.w	r9, r9, #1
   835e2:	f019 0f03 	tst.w	r9, #3
   835e6:	f104 0408 	add.w	r4, r4, #8
   835ea:	f47f aead 	bne.w	83348 <_malloc_r+0x134>
   835ee:	e02d      	b.n	8364c <_malloc_r+0x438>
   835f0:	f104 0308 	add.w	r3, r4, #8
   835f4:	6964      	ldr	r4, [r4, #20]
   835f6:	42a3      	cmp	r3, r4
   835f8:	bf08      	it	eq
   835fa:	f10c 0c02 	addeq.w	ip, ip, #2
   835fe:	f43f ae67 	beq.w	832d0 <_malloc_r+0xbc>
   83602:	e623      	b.n	8324c <_malloc_r+0x38>
   83604:	4419      	add	r1, r3
   83606:	6848      	ldr	r0, [r1, #4]
   83608:	461c      	mov	r4, r3
   8360a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8360e:	68db      	ldr	r3, [r3, #12]
   83610:	f040 0501 	orr.w	r5, r0, #1
   83614:	604d      	str	r5, [r1, #4]
   83616:	4630      	mov	r0, r6
   83618:	60d3      	str	r3, [r2, #12]
   8361a:	609a      	str	r2, [r3, #8]
   8361c:	f000 f9be 	bl	8399c <__malloc_unlock>
   83620:	e624      	b.n	8326c <_malloc_r+0x58>
   83622:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83626:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8362a:	e63b      	b.n	832a4 <_malloc_r+0x90>
   8362c:	098a      	lsrs	r2, r1, #6
   8362e:	3238      	adds	r2, #56	; 0x38
   83630:	0050      	lsls	r0, r2, #1
   83632:	e7a8      	b.n	83586 <_malloc_r+0x372>
   83634:	42bc      	cmp	r4, r7
   83636:	f43f af02 	beq.w	8343e <_malloc_r+0x22a>
   8363a:	68bc      	ldr	r4, [r7, #8]
   8363c:	6862      	ldr	r2, [r4, #4]
   8363e:	f022 0203 	bic.w	r2, r2, #3
   83642:	e761      	b.n	83508 <_malloc_r+0x2f4>
   83644:	f8d8 8000 	ldr.w	r8, [r8]
   83648:	4598      	cmp	r8, r3
   8364a:	d17a      	bne.n	83742 <_malloc_r+0x52e>
   8364c:	f01c 0f03 	tst.w	ip, #3
   83650:	f1a8 0308 	sub.w	r3, r8, #8
   83654:	f10c 3cff 	add.w	ip, ip, #4294967295
   83658:	d1f4      	bne.n	83644 <_malloc_r+0x430>
   8365a:	687b      	ldr	r3, [r7, #4]
   8365c:	ea23 0300 	bic.w	r3, r3, r0
   83660:	607b      	str	r3, [r7, #4]
   83662:	0040      	lsls	r0, r0, #1
   83664:	4298      	cmp	r0, r3
   83666:	f63f aebe 	bhi.w	833e6 <_malloc_r+0x1d2>
   8366a:	2800      	cmp	r0, #0
   8366c:	f43f aebb 	beq.w	833e6 <_malloc_r+0x1d2>
   83670:	4203      	tst	r3, r0
   83672:	46cc      	mov	ip, r9
   83674:	f47f ae64 	bne.w	83340 <_malloc_r+0x12c>
   83678:	0040      	lsls	r0, r0, #1
   8367a:	4203      	tst	r3, r0
   8367c:	f10c 0c04 	add.w	ip, ip, #4
   83680:	d0fa      	beq.n	83678 <_malloc_r+0x464>
   83682:	e65d      	b.n	83340 <_malloc_r+0x12c>
   83684:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83688:	d819      	bhi.n	836be <_malloc_r+0x4aa>
   8368a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8368e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   83692:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83696:	e605      	b.n	832a4 <_malloc_r+0x90>
   83698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8369c:	e6ee      	b.n	8347c <_malloc_r+0x268>
   8369e:	2301      	movs	r3, #1
   836a0:	f8c8 3004 	str.w	r3, [r8, #4]
   836a4:	4644      	mov	r4, r8
   836a6:	2200      	movs	r2, #0
   836a8:	e72e      	b.n	83508 <_malloc_r+0x2f4>
   836aa:	1092      	asrs	r2, r2, #2
   836ac:	2001      	movs	r0, #1
   836ae:	4090      	lsls	r0, r2
   836b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   836b4:	4619      	mov	r1, r3
   836b6:	4302      	orrs	r2, r0
   836b8:	f8c8 2004 	str.w	r2, [r8, #4]
   836bc:	e775      	b.n	835aa <_malloc_r+0x396>
   836be:	f240 5354 	movw	r3, #1364	; 0x554
   836c2:	459c      	cmp	ip, r3
   836c4:	d81b      	bhi.n	836fe <_malloc_r+0x4ea>
   836c6:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   836ca:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   836ce:	ea4f 014c 	mov.w	r1, ip, lsl #1
   836d2:	e5e7      	b.n	832a4 <_malloc_r+0x90>
   836d4:	f10a 0a10 	add.w	sl, sl, #16
   836d8:	e6a3      	b.n	83422 <_malloc_r+0x20e>
   836da:	2b54      	cmp	r3, #84	; 0x54
   836dc:	d81f      	bhi.n	8371e <_malloc_r+0x50a>
   836de:	0b0a      	lsrs	r2, r1, #12
   836e0:	326e      	adds	r2, #110	; 0x6e
   836e2:	0050      	lsls	r0, r2, #1
   836e4:	e74f      	b.n	83586 <_malloc_r+0x372>
   836e6:	f3cb 010b 	ubfx	r1, fp, #0, #12
   836ea:	2900      	cmp	r1, #0
   836ec:	f47f aeb1 	bne.w	83452 <_malloc_r+0x23e>
   836f0:	eb0a 0109 	add.w	r1, sl, r9
   836f4:	68ba      	ldr	r2, [r7, #8]
   836f6:	f041 0101 	orr.w	r1, r1, #1
   836fa:	6051      	str	r1, [r2, #4]
   836fc:	e6f6      	b.n	834ec <_malloc_r+0x2d8>
   836fe:	21fc      	movs	r1, #252	; 0xfc
   83700:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83704:	e5ce      	b.n	832a4 <_malloc_r+0x90>
   83706:	2201      	movs	r2, #1
   83708:	f04f 0a00 	mov.w	sl, #0
   8370c:	e6cb      	b.n	834a6 <_malloc_r+0x292>
   8370e:	f104 0108 	add.w	r1, r4, #8
   83712:	4630      	mov	r0, r6
   83714:	f7ff fa80 	bl	82c18 <_free_r>
   83718:	f8da 3000 	ldr.w	r3, [sl]
   8371c:	e6e6      	b.n	834ec <_malloc_r+0x2d8>
   8371e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83722:	d803      	bhi.n	8372c <_malloc_r+0x518>
   83724:	0bca      	lsrs	r2, r1, #15
   83726:	3277      	adds	r2, #119	; 0x77
   83728:	0050      	lsls	r0, r2, #1
   8372a:	e72c      	b.n	83586 <_malloc_r+0x372>
   8372c:	f240 5254 	movw	r2, #1364	; 0x554
   83730:	4293      	cmp	r3, r2
   83732:	d803      	bhi.n	8373c <_malloc_r+0x528>
   83734:	0c8a      	lsrs	r2, r1, #18
   83736:	327c      	adds	r2, #124	; 0x7c
   83738:	0050      	lsls	r0, r2, #1
   8373a:	e724      	b.n	83586 <_malloc_r+0x372>
   8373c:	20fc      	movs	r0, #252	; 0xfc
   8373e:	227e      	movs	r2, #126	; 0x7e
   83740:	e721      	b.n	83586 <_malloc_r+0x372>
   83742:	687b      	ldr	r3, [r7, #4]
   83744:	e78d      	b.n	83662 <_malloc_r+0x44e>
   83746:	bf00      	nop
   83748:	20070590 	.word	0x20070590

0008374c <memchr>:
   8374c:	0783      	lsls	r3, r0, #30
   8374e:	b470      	push	{r4, r5, r6}
   83750:	b2c9      	uxtb	r1, r1
   83752:	d040      	beq.n	837d6 <memchr+0x8a>
   83754:	1e54      	subs	r4, r2, #1
   83756:	b32a      	cbz	r2, 837a4 <memchr+0x58>
   83758:	7803      	ldrb	r3, [r0, #0]
   8375a:	428b      	cmp	r3, r1
   8375c:	d023      	beq.n	837a6 <memchr+0x5a>
   8375e:	1c43      	adds	r3, r0, #1
   83760:	e004      	b.n	8376c <memchr+0x20>
   83762:	b1fc      	cbz	r4, 837a4 <memchr+0x58>
   83764:	7805      	ldrb	r5, [r0, #0]
   83766:	4614      	mov	r4, r2
   83768:	428d      	cmp	r5, r1
   8376a:	d01c      	beq.n	837a6 <memchr+0x5a>
   8376c:	f013 0f03 	tst.w	r3, #3
   83770:	4618      	mov	r0, r3
   83772:	f104 32ff 	add.w	r2, r4, #4294967295
   83776:	f103 0301 	add.w	r3, r3, #1
   8377a:	d1f2      	bne.n	83762 <memchr+0x16>
   8377c:	2c03      	cmp	r4, #3
   8377e:	d814      	bhi.n	837aa <memchr+0x5e>
   83780:	1e65      	subs	r5, r4, #1
   83782:	b354      	cbz	r4, 837da <memchr+0x8e>
   83784:	7803      	ldrb	r3, [r0, #0]
   83786:	428b      	cmp	r3, r1
   83788:	d00d      	beq.n	837a6 <memchr+0x5a>
   8378a:	1c42      	adds	r2, r0, #1
   8378c:	2300      	movs	r3, #0
   8378e:	e002      	b.n	83796 <memchr+0x4a>
   83790:	7804      	ldrb	r4, [r0, #0]
   83792:	428c      	cmp	r4, r1
   83794:	d007      	beq.n	837a6 <memchr+0x5a>
   83796:	42ab      	cmp	r3, r5
   83798:	4610      	mov	r0, r2
   8379a:	f103 0301 	add.w	r3, r3, #1
   8379e:	f102 0201 	add.w	r2, r2, #1
   837a2:	d1f5      	bne.n	83790 <memchr+0x44>
   837a4:	2000      	movs	r0, #0
   837a6:	bc70      	pop	{r4, r5, r6}
   837a8:	4770      	bx	lr
   837aa:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   837ae:	4603      	mov	r3, r0
   837b0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   837b4:	681a      	ldr	r2, [r3, #0]
   837b6:	4618      	mov	r0, r3
   837b8:	4072      	eors	r2, r6
   837ba:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   837be:	ea25 0202 	bic.w	r2, r5, r2
   837c2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   837c6:	f103 0304 	add.w	r3, r3, #4
   837ca:	d1d9      	bne.n	83780 <memchr+0x34>
   837cc:	3c04      	subs	r4, #4
   837ce:	2c03      	cmp	r4, #3
   837d0:	4618      	mov	r0, r3
   837d2:	d8ef      	bhi.n	837b4 <memchr+0x68>
   837d4:	e7d4      	b.n	83780 <memchr+0x34>
   837d6:	4614      	mov	r4, r2
   837d8:	e7d0      	b.n	8377c <memchr+0x30>
   837da:	4620      	mov	r0, r4
   837dc:	e7e3      	b.n	837a6 <memchr+0x5a>
   837de:	bf00      	nop

000837e0 <memcpy>:
   837e0:	4684      	mov	ip, r0
   837e2:	ea41 0300 	orr.w	r3, r1, r0
   837e6:	f013 0303 	ands.w	r3, r3, #3
   837ea:	d149      	bne.n	83880 <memcpy+0xa0>
   837ec:	3a40      	subs	r2, #64	; 0x40
   837ee:	d323      	bcc.n	83838 <memcpy+0x58>
   837f0:	680b      	ldr	r3, [r1, #0]
   837f2:	6003      	str	r3, [r0, #0]
   837f4:	684b      	ldr	r3, [r1, #4]
   837f6:	6043      	str	r3, [r0, #4]
   837f8:	688b      	ldr	r3, [r1, #8]
   837fa:	6083      	str	r3, [r0, #8]
   837fc:	68cb      	ldr	r3, [r1, #12]
   837fe:	60c3      	str	r3, [r0, #12]
   83800:	690b      	ldr	r3, [r1, #16]
   83802:	6103      	str	r3, [r0, #16]
   83804:	694b      	ldr	r3, [r1, #20]
   83806:	6143      	str	r3, [r0, #20]
   83808:	698b      	ldr	r3, [r1, #24]
   8380a:	6183      	str	r3, [r0, #24]
   8380c:	69cb      	ldr	r3, [r1, #28]
   8380e:	61c3      	str	r3, [r0, #28]
   83810:	6a0b      	ldr	r3, [r1, #32]
   83812:	6203      	str	r3, [r0, #32]
   83814:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83816:	6243      	str	r3, [r0, #36]	; 0x24
   83818:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8381a:	6283      	str	r3, [r0, #40]	; 0x28
   8381c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8381e:	62c3      	str	r3, [r0, #44]	; 0x2c
   83820:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83822:	6303      	str	r3, [r0, #48]	; 0x30
   83824:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83826:	6343      	str	r3, [r0, #52]	; 0x34
   83828:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8382a:	6383      	str	r3, [r0, #56]	; 0x38
   8382c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8382e:	63c3      	str	r3, [r0, #60]	; 0x3c
   83830:	3040      	adds	r0, #64	; 0x40
   83832:	3140      	adds	r1, #64	; 0x40
   83834:	3a40      	subs	r2, #64	; 0x40
   83836:	d2db      	bcs.n	837f0 <memcpy+0x10>
   83838:	3230      	adds	r2, #48	; 0x30
   8383a:	d30b      	bcc.n	83854 <memcpy+0x74>
   8383c:	680b      	ldr	r3, [r1, #0]
   8383e:	6003      	str	r3, [r0, #0]
   83840:	684b      	ldr	r3, [r1, #4]
   83842:	6043      	str	r3, [r0, #4]
   83844:	688b      	ldr	r3, [r1, #8]
   83846:	6083      	str	r3, [r0, #8]
   83848:	68cb      	ldr	r3, [r1, #12]
   8384a:	60c3      	str	r3, [r0, #12]
   8384c:	3010      	adds	r0, #16
   8384e:	3110      	adds	r1, #16
   83850:	3a10      	subs	r2, #16
   83852:	d2f3      	bcs.n	8383c <memcpy+0x5c>
   83854:	320c      	adds	r2, #12
   83856:	d305      	bcc.n	83864 <memcpy+0x84>
   83858:	f851 3b04 	ldr.w	r3, [r1], #4
   8385c:	f840 3b04 	str.w	r3, [r0], #4
   83860:	3a04      	subs	r2, #4
   83862:	d2f9      	bcs.n	83858 <memcpy+0x78>
   83864:	3204      	adds	r2, #4
   83866:	d008      	beq.n	8387a <memcpy+0x9a>
   83868:	07d2      	lsls	r2, r2, #31
   8386a:	bf1c      	itt	ne
   8386c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83870:	f800 3b01 	strbne.w	r3, [r0], #1
   83874:	d301      	bcc.n	8387a <memcpy+0x9a>
   83876:	880b      	ldrh	r3, [r1, #0]
   83878:	8003      	strh	r3, [r0, #0]
   8387a:	4660      	mov	r0, ip
   8387c:	4770      	bx	lr
   8387e:	bf00      	nop
   83880:	2a08      	cmp	r2, #8
   83882:	d313      	bcc.n	838ac <memcpy+0xcc>
   83884:	078b      	lsls	r3, r1, #30
   83886:	d0b1      	beq.n	837ec <memcpy+0xc>
   83888:	f010 0303 	ands.w	r3, r0, #3
   8388c:	d0ae      	beq.n	837ec <memcpy+0xc>
   8388e:	f1c3 0304 	rsb	r3, r3, #4
   83892:	1ad2      	subs	r2, r2, r3
   83894:	07db      	lsls	r3, r3, #31
   83896:	bf1c      	itt	ne
   83898:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8389c:	f800 3b01 	strbne.w	r3, [r0], #1
   838a0:	d3a4      	bcc.n	837ec <memcpy+0xc>
   838a2:	f831 3b02 	ldrh.w	r3, [r1], #2
   838a6:	f820 3b02 	strh.w	r3, [r0], #2
   838aa:	e79f      	b.n	837ec <memcpy+0xc>
   838ac:	3a04      	subs	r2, #4
   838ae:	d3d9      	bcc.n	83864 <memcpy+0x84>
   838b0:	3a01      	subs	r2, #1
   838b2:	f811 3b01 	ldrb.w	r3, [r1], #1
   838b6:	f800 3b01 	strb.w	r3, [r0], #1
   838ba:	d2f9      	bcs.n	838b0 <memcpy+0xd0>
   838bc:	780b      	ldrb	r3, [r1, #0]
   838be:	7003      	strb	r3, [r0, #0]
   838c0:	784b      	ldrb	r3, [r1, #1]
   838c2:	7043      	strb	r3, [r0, #1]
   838c4:	788b      	ldrb	r3, [r1, #2]
   838c6:	7083      	strb	r3, [r0, #2]
   838c8:	4660      	mov	r0, ip
   838ca:	4770      	bx	lr

000838cc <memmove>:
   838cc:	4288      	cmp	r0, r1
   838ce:	b4f0      	push	{r4, r5, r6, r7}
   838d0:	d910      	bls.n	838f4 <memmove+0x28>
   838d2:	188c      	adds	r4, r1, r2
   838d4:	42a0      	cmp	r0, r4
   838d6:	d20d      	bcs.n	838f4 <memmove+0x28>
   838d8:	1885      	adds	r5, r0, r2
   838da:	1e53      	subs	r3, r2, #1
   838dc:	b142      	cbz	r2, 838f0 <memmove+0x24>
   838de:	4621      	mov	r1, r4
   838e0:	462a      	mov	r2, r5
   838e2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   838e6:	3b01      	subs	r3, #1
   838e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   838ec:	1c5c      	adds	r4, r3, #1
   838ee:	d1f8      	bne.n	838e2 <memmove+0x16>
   838f0:	bcf0      	pop	{r4, r5, r6, r7}
   838f2:	4770      	bx	lr
   838f4:	2a0f      	cmp	r2, #15
   838f6:	d944      	bls.n	83982 <memmove+0xb6>
   838f8:	ea40 0301 	orr.w	r3, r0, r1
   838fc:	079b      	lsls	r3, r3, #30
   838fe:	d144      	bne.n	8398a <memmove+0xbe>
   83900:	f1a2 0710 	sub.w	r7, r2, #16
   83904:	093f      	lsrs	r7, r7, #4
   83906:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8390a:	3610      	adds	r6, #16
   8390c:	460c      	mov	r4, r1
   8390e:	4603      	mov	r3, r0
   83910:	6825      	ldr	r5, [r4, #0]
   83912:	3310      	adds	r3, #16
   83914:	f843 5c10 	str.w	r5, [r3, #-16]
   83918:	6865      	ldr	r5, [r4, #4]
   8391a:	3410      	adds	r4, #16
   8391c:	f843 5c0c 	str.w	r5, [r3, #-12]
   83920:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83924:	f843 5c08 	str.w	r5, [r3, #-8]
   83928:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8392c:	f843 5c04 	str.w	r5, [r3, #-4]
   83930:	42b3      	cmp	r3, r6
   83932:	d1ed      	bne.n	83910 <memmove+0x44>
   83934:	1c7b      	adds	r3, r7, #1
   83936:	f002 0c0f 	and.w	ip, r2, #15
   8393a:	011b      	lsls	r3, r3, #4
   8393c:	f1bc 0f03 	cmp.w	ip, #3
   83940:	4419      	add	r1, r3
   83942:	4403      	add	r3, r0
   83944:	d923      	bls.n	8398e <memmove+0xc2>
   83946:	460e      	mov	r6, r1
   83948:	461d      	mov	r5, r3
   8394a:	4664      	mov	r4, ip
   8394c:	f856 7b04 	ldr.w	r7, [r6], #4
   83950:	3c04      	subs	r4, #4
   83952:	2c03      	cmp	r4, #3
   83954:	f845 7b04 	str.w	r7, [r5], #4
   83958:	d8f8      	bhi.n	8394c <memmove+0x80>
   8395a:	f1ac 0404 	sub.w	r4, ip, #4
   8395e:	f024 0403 	bic.w	r4, r4, #3
   83962:	3404      	adds	r4, #4
   83964:	f002 0203 	and.w	r2, r2, #3
   83968:	4423      	add	r3, r4
   8396a:	4421      	add	r1, r4
   8396c:	2a00      	cmp	r2, #0
   8396e:	d0bf      	beq.n	838f0 <memmove+0x24>
   83970:	441a      	add	r2, r3
   83972:	f811 4b01 	ldrb.w	r4, [r1], #1
   83976:	f803 4b01 	strb.w	r4, [r3], #1
   8397a:	4293      	cmp	r3, r2
   8397c:	d1f9      	bne.n	83972 <memmove+0xa6>
   8397e:	bcf0      	pop	{r4, r5, r6, r7}
   83980:	4770      	bx	lr
   83982:	4603      	mov	r3, r0
   83984:	2a00      	cmp	r2, #0
   83986:	d1f3      	bne.n	83970 <memmove+0xa4>
   83988:	e7b2      	b.n	838f0 <memmove+0x24>
   8398a:	4603      	mov	r3, r0
   8398c:	e7f0      	b.n	83970 <memmove+0xa4>
   8398e:	4662      	mov	r2, ip
   83990:	2a00      	cmp	r2, #0
   83992:	d1ed      	bne.n	83970 <memmove+0xa4>
   83994:	e7ac      	b.n	838f0 <memmove+0x24>
   83996:	bf00      	nop

00083998 <__malloc_lock>:
   83998:	4770      	bx	lr
   8399a:	bf00      	nop

0008399c <__malloc_unlock>:
   8399c:	4770      	bx	lr
   8399e:	bf00      	nop

000839a0 <_realloc_r>:
   839a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   839a4:	460c      	mov	r4, r1
   839a6:	b083      	sub	sp, #12
   839a8:	4690      	mov	r8, r2
   839aa:	4681      	mov	r9, r0
   839ac:	2900      	cmp	r1, #0
   839ae:	f000 80ba 	beq.w	83b26 <_realloc_r+0x186>
   839b2:	f7ff fff1 	bl	83998 <__malloc_lock>
   839b6:	f108 060b 	add.w	r6, r8, #11
   839ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   839be:	2e16      	cmp	r6, #22
   839c0:	f023 0503 	bic.w	r5, r3, #3
   839c4:	f1a4 0708 	sub.w	r7, r4, #8
   839c8:	d84b      	bhi.n	83a62 <_realloc_r+0xc2>
   839ca:	2110      	movs	r1, #16
   839cc:	460e      	mov	r6, r1
   839ce:	45b0      	cmp	r8, r6
   839d0:	d84c      	bhi.n	83a6c <_realloc_r+0xcc>
   839d2:	428d      	cmp	r5, r1
   839d4:	da51      	bge.n	83a7a <_realloc_r+0xda>
   839d6:	f8df b384 	ldr.w	fp, [pc, #900]	; 83d5c <_realloc_r+0x3bc>
   839da:	1978      	adds	r0, r7, r5
   839dc:	f8db e008 	ldr.w	lr, [fp, #8]
   839e0:	4586      	cmp	lr, r0
   839e2:	f000 80a6 	beq.w	83b32 <_realloc_r+0x192>
   839e6:	6842      	ldr	r2, [r0, #4]
   839e8:	f022 0c01 	bic.w	ip, r2, #1
   839ec:	4484      	add	ip, r0
   839ee:	f8dc c004 	ldr.w	ip, [ip, #4]
   839f2:	f01c 0f01 	tst.w	ip, #1
   839f6:	d054      	beq.n	83aa2 <_realloc_r+0x102>
   839f8:	2200      	movs	r2, #0
   839fa:	4610      	mov	r0, r2
   839fc:	07db      	lsls	r3, r3, #31
   839fe:	d46f      	bmi.n	83ae0 <_realloc_r+0x140>
   83a00:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83a04:	ebc3 0a07 	rsb	sl, r3, r7
   83a08:	f8da 3004 	ldr.w	r3, [sl, #4]
   83a0c:	f023 0303 	bic.w	r3, r3, #3
   83a10:	442b      	add	r3, r5
   83a12:	2800      	cmp	r0, #0
   83a14:	d062      	beq.n	83adc <_realloc_r+0x13c>
   83a16:	4570      	cmp	r0, lr
   83a18:	f000 80e9 	beq.w	83bee <_realloc_r+0x24e>
   83a1c:	eb02 0e03 	add.w	lr, r2, r3
   83a20:	458e      	cmp	lr, r1
   83a22:	db5b      	blt.n	83adc <_realloc_r+0x13c>
   83a24:	68c3      	ldr	r3, [r0, #12]
   83a26:	6882      	ldr	r2, [r0, #8]
   83a28:	46d0      	mov	r8, sl
   83a2a:	60d3      	str	r3, [r2, #12]
   83a2c:	609a      	str	r2, [r3, #8]
   83a2e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83a32:	f8da 300c 	ldr.w	r3, [sl, #12]
   83a36:	1f2a      	subs	r2, r5, #4
   83a38:	2a24      	cmp	r2, #36	; 0x24
   83a3a:	60cb      	str	r3, [r1, #12]
   83a3c:	6099      	str	r1, [r3, #8]
   83a3e:	f200 8123 	bhi.w	83c88 <_realloc_r+0x2e8>
   83a42:	2a13      	cmp	r2, #19
   83a44:	f240 80b0 	bls.w	83ba8 <_realloc_r+0x208>
   83a48:	6823      	ldr	r3, [r4, #0]
   83a4a:	2a1b      	cmp	r2, #27
   83a4c:	f8ca 3008 	str.w	r3, [sl, #8]
   83a50:	6863      	ldr	r3, [r4, #4]
   83a52:	f8ca 300c 	str.w	r3, [sl, #12]
   83a56:	f200 812b 	bhi.w	83cb0 <_realloc_r+0x310>
   83a5a:	3408      	adds	r4, #8
   83a5c:	f10a 0310 	add.w	r3, sl, #16
   83a60:	e0a3      	b.n	83baa <_realloc_r+0x20a>
   83a62:	f026 0607 	bic.w	r6, r6, #7
   83a66:	2e00      	cmp	r6, #0
   83a68:	4631      	mov	r1, r6
   83a6a:	dab0      	bge.n	839ce <_realloc_r+0x2e>
   83a6c:	230c      	movs	r3, #12
   83a6e:	2000      	movs	r0, #0
   83a70:	f8c9 3000 	str.w	r3, [r9]
   83a74:	b003      	add	sp, #12
   83a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83a7a:	46a0      	mov	r8, r4
   83a7c:	1baa      	subs	r2, r5, r6
   83a7e:	2a0f      	cmp	r2, #15
   83a80:	f003 0301 	and.w	r3, r3, #1
   83a84:	d81a      	bhi.n	83abc <_realloc_r+0x11c>
   83a86:	432b      	orrs	r3, r5
   83a88:	607b      	str	r3, [r7, #4]
   83a8a:	443d      	add	r5, r7
   83a8c:	686b      	ldr	r3, [r5, #4]
   83a8e:	f043 0301 	orr.w	r3, r3, #1
   83a92:	606b      	str	r3, [r5, #4]
   83a94:	4648      	mov	r0, r9
   83a96:	f7ff ff81 	bl	8399c <__malloc_unlock>
   83a9a:	4640      	mov	r0, r8
   83a9c:	b003      	add	sp, #12
   83a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83aa2:	f022 0203 	bic.w	r2, r2, #3
   83aa6:	eb02 0c05 	add.w	ip, r2, r5
   83aaa:	458c      	cmp	ip, r1
   83aac:	dba6      	blt.n	839fc <_realloc_r+0x5c>
   83aae:	68c2      	ldr	r2, [r0, #12]
   83ab0:	6881      	ldr	r1, [r0, #8]
   83ab2:	46a0      	mov	r8, r4
   83ab4:	60ca      	str	r2, [r1, #12]
   83ab6:	4665      	mov	r5, ip
   83ab8:	6091      	str	r1, [r2, #8]
   83aba:	e7df      	b.n	83a7c <_realloc_r+0xdc>
   83abc:	19b9      	adds	r1, r7, r6
   83abe:	4333      	orrs	r3, r6
   83ac0:	f042 0001 	orr.w	r0, r2, #1
   83ac4:	607b      	str	r3, [r7, #4]
   83ac6:	440a      	add	r2, r1
   83ac8:	6048      	str	r0, [r1, #4]
   83aca:	6853      	ldr	r3, [r2, #4]
   83acc:	3108      	adds	r1, #8
   83ace:	f043 0301 	orr.w	r3, r3, #1
   83ad2:	6053      	str	r3, [r2, #4]
   83ad4:	4648      	mov	r0, r9
   83ad6:	f7ff f89f 	bl	82c18 <_free_r>
   83ada:	e7db      	b.n	83a94 <_realloc_r+0xf4>
   83adc:	428b      	cmp	r3, r1
   83ade:	da33      	bge.n	83b48 <_realloc_r+0x1a8>
   83ae0:	4641      	mov	r1, r8
   83ae2:	4648      	mov	r0, r9
   83ae4:	f7ff fb96 	bl	83214 <_malloc_r>
   83ae8:	4680      	mov	r8, r0
   83aea:	2800      	cmp	r0, #0
   83aec:	d0d2      	beq.n	83a94 <_realloc_r+0xf4>
   83aee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83af2:	f1a0 0108 	sub.w	r1, r0, #8
   83af6:	f023 0201 	bic.w	r2, r3, #1
   83afa:	443a      	add	r2, r7
   83afc:	4291      	cmp	r1, r2
   83afe:	f000 80bc 	beq.w	83c7a <_realloc_r+0x2da>
   83b02:	1f2a      	subs	r2, r5, #4
   83b04:	2a24      	cmp	r2, #36	; 0x24
   83b06:	d86e      	bhi.n	83be6 <_realloc_r+0x246>
   83b08:	2a13      	cmp	r2, #19
   83b0a:	d842      	bhi.n	83b92 <_realloc_r+0x1f2>
   83b0c:	4603      	mov	r3, r0
   83b0e:	4622      	mov	r2, r4
   83b10:	6811      	ldr	r1, [r2, #0]
   83b12:	6019      	str	r1, [r3, #0]
   83b14:	6851      	ldr	r1, [r2, #4]
   83b16:	6059      	str	r1, [r3, #4]
   83b18:	6892      	ldr	r2, [r2, #8]
   83b1a:	609a      	str	r2, [r3, #8]
   83b1c:	4621      	mov	r1, r4
   83b1e:	4648      	mov	r0, r9
   83b20:	f7ff f87a 	bl	82c18 <_free_r>
   83b24:	e7b6      	b.n	83a94 <_realloc_r+0xf4>
   83b26:	4611      	mov	r1, r2
   83b28:	b003      	add	sp, #12
   83b2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83b2e:	f7ff bb71 	b.w	83214 <_malloc_r>
   83b32:	f8de 2004 	ldr.w	r2, [lr, #4]
   83b36:	f106 0c10 	add.w	ip, r6, #16
   83b3a:	f022 0203 	bic.w	r2, r2, #3
   83b3e:	1950      	adds	r0, r2, r5
   83b40:	4560      	cmp	r0, ip
   83b42:	da3d      	bge.n	83bc0 <_realloc_r+0x220>
   83b44:	4670      	mov	r0, lr
   83b46:	e759      	b.n	839fc <_realloc_r+0x5c>
   83b48:	46d0      	mov	r8, sl
   83b4a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83b4e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83b52:	1f2a      	subs	r2, r5, #4
   83b54:	2a24      	cmp	r2, #36	; 0x24
   83b56:	60c1      	str	r1, [r0, #12]
   83b58:	6088      	str	r0, [r1, #8]
   83b5a:	f200 80a0 	bhi.w	83c9e <_realloc_r+0x2fe>
   83b5e:	2a13      	cmp	r2, #19
   83b60:	f240 809b 	bls.w	83c9a <_realloc_r+0x2fa>
   83b64:	6821      	ldr	r1, [r4, #0]
   83b66:	2a1b      	cmp	r2, #27
   83b68:	f8ca 1008 	str.w	r1, [sl, #8]
   83b6c:	6861      	ldr	r1, [r4, #4]
   83b6e:	f8ca 100c 	str.w	r1, [sl, #12]
   83b72:	f200 80b2 	bhi.w	83cda <_realloc_r+0x33a>
   83b76:	3408      	adds	r4, #8
   83b78:	f10a 0210 	add.w	r2, sl, #16
   83b7c:	6821      	ldr	r1, [r4, #0]
   83b7e:	461d      	mov	r5, r3
   83b80:	6011      	str	r1, [r2, #0]
   83b82:	6861      	ldr	r1, [r4, #4]
   83b84:	4657      	mov	r7, sl
   83b86:	6051      	str	r1, [r2, #4]
   83b88:	68a3      	ldr	r3, [r4, #8]
   83b8a:	6093      	str	r3, [r2, #8]
   83b8c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83b90:	e774      	b.n	83a7c <_realloc_r+0xdc>
   83b92:	6823      	ldr	r3, [r4, #0]
   83b94:	2a1b      	cmp	r2, #27
   83b96:	6003      	str	r3, [r0, #0]
   83b98:	6863      	ldr	r3, [r4, #4]
   83b9a:	6043      	str	r3, [r0, #4]
   83b9c:	d862      	bhi.n	83c64 <_realloc_r+0x2c4>
   83b9e:	f100 0308 	add.w	r3, r0, #8
   83ba2:	f104 0208 	add.w	r2, r4, #8
   83ba6:	e7b3      	b.n	83b10 <_realloc_r+0x170>
   83ba8:	4643      	mov	r3, r8
   83baa:	6822      	ldr	r2, [r4, #0]
   83bac:	4675      	mov	r5, lr
   83bae:	601a      	str	r2, [r3, #0]
   83bb0:	6862      	ldr	r2, [r4, #4]
   83bb2:	4657      	mov	r7, sl
   83bb4:	605a      	str	r2, [r3, #4]
   83bb6:	68a2      	ldr	r2, [r4, #8]
   83bb8:	609a      	str	r2, [r3, #8]
   83bba:	f8da 3004 	ldr.w	r3, [sl, #4]
   83bbe:	e75d      	b.n	83a7c <_realloc_r+0xdc>
   83bc0:	1b83      	subs	r3, r0, r6
   83bc2:	4437      	add	r7, r6
   83bc4:	f043 0301 	orr.w	r3, r3, #1
   83bc8:	f8cb 7008 	str.w	r7, [fp, #8]
   83bcc:	607b      	str	r3, [r7, #4]
   83bce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83bd2:	4648      	mov	r0, r9
   83bd4:	f003 0301 	and.w	r3, r3, #1
   83bd8:	431e      	orrs	r6, r3
   83bda:	f844 6c04 	str.w	r6, [r4, #-4]
   83bde:	f7ff fedd 	bl	8399c <__malloc_unlock>
   83be2:	4620      	mov	r0, r4
   83be4:	e75a      	b.n	83a9c <_realloc_r+0xfc>
   83be6:	4621      	mov	r1, r4
   83be8:	f7ff fe70 	bl	838cc <memmove>
   83bec:	e796      	b.n	83b1c <_realloc_r+0x17c>
   83bee:	eb02 0c03 	add.w	ip, r2, r3
   83bf2:	f106 0210 	add.w	r2, r6, #16
   83bf6:	4594      	cmp	ip, r2
   83bf8:	f6ff af70 	blt.w	83adc <_realloc_r+0x13c>
   83bfc:	4657      	mov	r7, sl
   83bfe:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83c02:	f8da 300c 	ldr.w	r3, [sl, #12]
   83c06:	1f2a      	subs	r2, r5, #4
   83c08:	2a24      	cmp	r2, #36	; 0x24
   83c0a:	60cb      	str	r3, [r1, #12]
   83c0c:	6099      	str	r1, [r3, #8]
   83c0e:	f200 8086 	bhi.w	83d1e <_realloc_r+0x37e>
   83c12:	2a13      	cmp	r2, #19
   83c14:	d977      	bls.n	83d06 <_realloc_r+0x366>
   83c16:	6823      	ldr	r3, [r4, #0]
   83c18:	2a1b      	cmp	r2, #27
   83c1a:	f8ca 3008 	str.w	r3, [sl, #8]
   83c1e:	6863      	ldr	r3, [r4, #4]
   83c20:	f8ca 300c 	str.w	r3, [sl, #12]
   83c24:	f200 8084 	bhi.w	83d30 <_realloc_r+0x390>
   83c28:	3408      	adds	r4, #8
   83c2a:	f10a 0310 	add.w	r3, sl, #16
   83c2e:	6822      	ldr	r2, [r4, #0]
   83c30:	601a      	str	r2, [r3, #0]
   83c32:	6862      	ldr	r2, [r4, #4]
   83c34:	605a      	str	r2, [r3, #4]
   83c36:	68a2      	ldr	r2, [r4, #8]
   83c38:	609a      	str	r2, [r3, #8]
   83c3a:	ebc6 020c 	rsb	r2, r6, ip
   83c3e:	eb0a 0306 	add.w	r3, sl, r6
   83c42:	f042 0201 	orr.w	r2, r2, #1
   83c46:	f8cb 3008 	str.w	r3, [fp, #8]
   83c4a:	605a      	str	r2, [r3, #4]
   83c4c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83c50:	4648      	mov	r0, r9
   83c52:	f003 0301 	and.w	r3, r3, #1
   83c56:	431e      	orrs	r6, r3
   83c58:	f8ca 6004 	str.w	r6, [sl, #4]
   83c5c:	f7ff fe9e 	bl	8399c <__malloc_unlock>
   83c60:	4638      	mov	r0, r7
   83c62:	e71b      	b.n	83a9c <_realloc_r+0xfc>
   83c64:	68a3      	ldr	r3, [r4, #8]
   83c66:	2a24      	cmp	r2, #36	; 0x24
   83c68:	6083      	str	r3, [r0, #8]
   83c6a:	68e3      	ldr	r3, [r4, #12]
   83c6c:	60c3      	str	r3, [r0, #12]
   83c6e:	d02b      	beq.n	83cc8 <_realloc_r+0x328>
   83c70:	f100 0310 	add.w	r3, r0, #16
   83c74:	f104 0210 	add.w	r2, r4, #16
   83c78:	e74a      	b.n	83b10 <_realloc_r+0x170>
   83c7a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83c7e:	46a0      	mov	r8, r4
   83c80:	f022 0203 	bic.w	r2, r2, #3
   83c84:	4415      	add	r5, r2
   83c86:	e6f9      	b.n	83a7c <_realloc_r+0xdc>
   83c88:	4621      	mov	r1, r4
   83c8a:	4640      	mov	r0, r8
   83c8c:	4675      	mov	r5, lr
   83c8e:	4657      	mov	r7, sl
   83c90:	f7ff fe1c 	bl	838cc <memmove>
   83c94:	f8da 3004 	ldr.w	r3, [sl, #4]
   83c98:	e6f0      	b.n	83a7c <_realloc_r+0xdc>
   83c9a:	4642      	mov	r2, r8
   83c9c:	e76e      	b.n	83b7c <_realloc_r+0x1dc>
   83c9e:	4621      	mov	r1, r4
   83ca0:	4640      	mov	r0, r8
   83ca2:	461d      	mov	r5, r3
   83ca4:	4657      	mov	r7, sl
   83ca6:	f7ff fe11 	bl	838cc <memmove>
   83caa:	f8da 3004 	ldr.w	r3, [sl, #4]
   83cae:	e6e5      	b.n	83a7c <_realloc_r+0xdc>
   83cb0:	68a3      	ldr	r3, [r4, #8]
   83cb2:	2a24      	cmp	r2, #36	; 0x24
   83cb4:	f8ca 3010 	str.w	r3, [sl, #16]
   83cb8:	68e3      	ldr	r3, [r4, #12]
   83cba:	f8ca 3014 	str.w	r3, [sl, #20]
   83cbe:	d018      	beq.n	83cf2 <_realloc_r+0x352>
   83cc0:	3410      	adds	r4, #16
   83cc2:	f10a 0318 	add.w	r3, sl, #24
   83cc6:	e770      	b.n	83baa <_realloc_r+0x20a>
   83cc8:	6922      	ldr	r2, [r4, #16]
   83cca:	f100 0318 	add.w	r3, r0, #24
   83cce:	6102      	str	r2, [r0, #16]
   83cd0:	6961      	ldr	r1, [r4, #20]
   83cd2:	f104 0218 	add.w	r2, r4, #24
   83cd6:	6141      	str	r1, [r0, #20]
   83cd8:	e71a      	b.n	83b10 <_realloc_r+0x170>
   83cda:	68a1      	ldr	r1, [r4, #8]
   83cdc:	2a24      	cmp	r2, #36	; 0x24
   83cde:	f8ca 1010 	str.w	r1, [sl, #16]
   83ce2:	68e1      	ldr	r1, [r4, #12]
   83ce4:	f8ca 1014 	str.w	r1, [sl, #20]
   83ce8:	d00f      	beq.n	83d0a <_realloc_r+0x36a>
   83cea:	3410      	adds	r4, #16
   83cec:	f10a 0218 	add.w	r2, sl, #24
   83cf0:	e744      	b.n	83b7c <_realloc_r+0x1dc>
   83cf2:	6922      	ldr	r2, [r4, #16]
   83cf4:	f10a 0320 	add.w	r3, sl, #32
   83cf8:	f8ca 2018 	str.w	r2, [sl, #24]
   83cfc:	6962      	ldr	r2, [r4, #20]
   83cfe:	3418      	adds	r4, #24
   83d00:	f8ca 201c 	str.w	r2, [sl, #28]
   83d04:	e751      	b.n	83baa <_realloc_r+0x20a>
   83d06:	463b      	mov	r3, r7
   83d08:	e791      	b.n	83c2e <_realloc_r+0x28e>
   83d0a:	6921      	ldr	r1, [r4, #16]
   83d0c:	f10a 0220 	add.w	r2, sl, #32
   83d10:	f8ca 1018 	str.w	r1, [sl, #24]
   83d14:	6961      	ldr	r1, [r4, #20]
   83d16:	3418      	adds	r4, #24
   83d18:	f8ca 101c 	str.w	r1, [sl, #28]
   83d1c:	e72e      	b.n	83b7c <_realloc_r+0x1dc>
   83d1e:	4621      	mov	r1, r4
   83d20:	4638      	mov	r0, r7
   83d22:	f8cd c004 	str.w	ip, [sp, #4]
   83d26:	f7ff fdd1 	bl	838cc <memmove>
   83d2a:	f8dd c004 	ldr.w	ip, [sp, #4]
   83d2e:	e784      	b.n	83c3a <_realloc_r+0x29a>
   83d30:	68a3      	ldr	r3, [r4, #8]
   83d32:	2a24      	cmp	r2, #36	; 0x24
   83d34:	f8ca 3010 	str.w	r3, [sl, #16]
   83d38:	68e3      	ldr	r3, [r4, #12]
   83d3a:	f8ca 3014 	str.w	r3, [sl, #20]
   83d3e:	d003      	beq.n	83d48 <_realloc_r+0x3a8>
   83d40:	3410      	adds	r4, #16
   83d42:	f10a 0318 	add.w	r3, sl, #24
   83d46:	e772      	b.n	83c2e <_realloc_r+0x28e>
   83d48:	6922      	ldr	r2, [r4, #16]
   83d4a:	f10a 0320 	add.w	r3, sl, #32
   83d4e:	f8ca 2018 	str.w	r2, [sl, #24]
   83d52:	6962      	ldr	r2, [r4, #20]
   83d54:	3418      	adds	r4, #24
   83d56:	f8ca 201c 	str.w	r2, [sl, #28]
   83d5a:	e768      	b.n	83c2e <_realloc_r+0x28e>
   83d5c:	20070590 	.word	0x20070590

00083d60 <_sbrk_r>:
   83d60:	b538      	push	{r3, r4, r5, lr}
   83d62:	4c07      	ldr	r4, [pc, #28]	; (83d80 <_sbrk_r+0x20>)
   83d64:	2300      	movs	r3, #0
   83d66:	4605      	mov	r5, r0
   83d68:	4608      	mov	r0, r1
   83d6a:	6023      	str	r3, [r4, #0]
   83d6c:	f7fd f8ea 	bl	80f44 <_sbrk>
   83d70:	1c43      	adds	r3, r0, #1
   83d72:	d000      	beq.n	83d76 <_sbrk_r+0x16>
   83d74:	bd38      	pop	{r3, r4, r5, pc}
   83d76:	6823      	ldr	r3, [r4, #0]
   83d78:	2b00      	cmp	r3, #0
   83d7a:	d0fb      	beq.n	83d74 <_sbrk_r+0x14>
   83d7c:	602b      	str	r3, [r5, #0]
   83d7e:	bd38      	pop	{r3, r4, r5, pc}
   83d80:	20070b6c 	.word	0x20070b6c

00083d84 <__sread>:
   83d84:	b510      	push	{r4, lr}
   83d86:	460c      	mov	r4, r1
   83d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83d8c:	f000 f9c2 	bl	84114 <_read_r>
   83d90:	2800      	cmp	r0, #0
   83d92:	db03      	blt.n	83d9c <__sread+0x18>
   83d94:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83d96:	4403      	add	r3, r0
   83d98:	6523      	str	r3, [r4, #80]	; 0x50
   83d9a:	bd10      	pop	{r4, pc}
   83d9c:	89a3      	ldrh	r3, [r4, #12]
   83d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83da2:	81a3      	strh	r3, [r4, #12]
   83da4:	bd10      	pop	{r4, pc}
   83da6:	bf00      	nop

00083da8 <__swrite>:
   83da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83dac:	460c      	mov	r4, r1
   83dae:	8989      	ldrh	r1, [r1, #12]
   83db0:	461d      	mov	r5, r3
   83db2:	05cb      	lsls	r3, r1, #23
   83db4:	4616      	mov	r6, r2
   83db6:	4607      	mov	r7, r0
   83db8:	d506      	bpl.n	83dc8 <__swrite+0x20>
   83dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83dbe:	2200      	movs	r2, #0
   83dc0:	2302      	movs	r3, #2
   83dc2:	f000 f993 	bl	840ec <_lseek_r>
   83dc6:	89a1      	ldrh	r1, [r4, #12]
   83dc8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83dcc:	81a1      	strh	r1, [r4, #12]
   83dce:	4638      	mov	r0, r7
   83dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83dd4:	4632      	mov	r2, r6
   83dd6:	462b      	mov	r3, r5
   83dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83ddc:	f000 b89e 	b.w	83f1c <_write_r>

00083de0 <__sseek>:
   83de0:	b510      	push	{r4, lr}
   83de2:	460c      	mov	r4, r1
   83de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83de8:	f000 f980 	bl	840ec <_lseek_r>
   83dec:	89a3      	ldrh	r3, [r4, #12]
   83dee:	1c42      	adds	r2, r0, #1
   83df0:	bf0e      	itee	eq
   83df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83dfa:	6520      	strne	r0, [r4, #80]	; 0x50
   83dfc:	81a3      	strh	r3, [r4, #12]
   83dfe:	bd10      	pop	{r4, pc}

00083e00 <__sclose>:
   83e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83e04:	f000 b8f2 	b.w	83fec <_close_r>

00083e08 <__swbuf_r>:
   83e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83e0a:	460d      	mov	r5, r1
   83e0c:	4614      	mov	r4, r2
   83e0e:	4607      	mov	r7, r0
   83e10:	b110      	cbz	r0, 83e18 <__swbuf_r+0x10>
   83e12:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83e14:	2b00      	cmp	r3, #0
   83e16:	d048      	beq.n	83eaa <__swbuf_r+0xa2>
   83e18:	89a2      	ldrh	r2, [r4, #12]
   83e1a:	69a0      	ldr	r0, [r4, #24]
   83e1c:	b293      	uxth	r3, r2
   83e1e:	60a0      	str	r0, [r4, #8]
   83e20:	0718      	lsls	r0, r3, #28
   83e22:	d538      	bpl.n	83e96 <__swbuf_r+0x8e>
   83e24:	6926      	ldr	r6, [r4, #16]
   83e26:	2e00      	cmp	r6, #0
   83e28:	d035      	beq.n	83e96 <__swbuf_r+0x8e>
   83e2a:	0499      	lsls	r1, r3, #18
   83e2c:	b2ed      	uxtb	r5, r5
   83e2e:	d515      	bpl.n	83e5c <__swbuf_r+0x54>
   83e30:	6823      	ldr	r3, [r4, #0]
   83e32:	6962      	ldr	r2, [r4, #20]
   83e34:	1b9e      	subs	r6, r3, r6
   83e36:	4296      	cmp	r6, r2
   83e38:	da1c      	bge.n	83e74 <__swbuf_r+0x6c>
   83e3a:	3601      	adds	r6, #1
   83e3c:	68a2      	ldr	r2, [r4, #8]
   83e3e:	1c59      	adds	r1, r3, #1
   83e40:	3a01      	subs	r2, #1
   83e42:	60a2      	str	r2, [r4, #8]
   83e44:	6021      	str	r1, [r4, #0]
   83e46:	701d      	strb	r5, [r3, #0]
   83e48:	6963      	ldr	r3, [r4, #20]
   83e4a:	42b3      	cmp	r3, r6
   83e4c:	d01a      	beq.n	83e84 <__swbuf_r+0x7c>
   83e4e:	89a3      	ldrh	r3, [r4, #12]
   83e50:	07db      	lsls	r3, r3, #31
   83e52:	d501      	bpl.n	83e58 <__swbuf_r+0x50>
   83e54:	2d0a      	cmp	r5, #10
   83e56:	d015      	beq.n	83e84 <__swbuf_r+0x7c>
   83e58:	4628      	mov	r0, r5
   83e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83e5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83e5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83e66:	6663      	str	r3, [r4, #100]	; 0x64
   83e68:	6823      	ldr	r3, [r4, #0]
   83e6a:	81a2      	strh	r2, [r4, #12]
   83e6c:	6962      	ldr	r2, [r4, #20]
   83e6e:	1b9e      	subs	r6, r3, r6
   83e70:	4296      	cmp	r6, r2
   83e72:	dbe2      	blt.n	83e3a <__swbuf_r+0x32>
   83e74:	4638      	mov	r0, r7
   83e76:	4621      	mov	r1, r4
   83e78:	f7fe fd6e 	bl	82958 <_fflush_r>
   83e7c:	b940      	cbnz	r0, 83e90 <__swbuf_r+0x88>
   83e7e:	6823      	ldr	r3, [r4, #0]
   83e80:	2601      	movs	r6, #1
   83e82:	e7db      	b.n	83e3c <__swbuf_r+0x34>
   83e84:	4638      	mov	r0, r7
   83e86:	4621      	mov	r1, r4
   83e88:	f7fe fd66 	bl	82958 <_fflush_r>
   83e8c:	2800      	cmp	r0, #0
   83e8e:	d0e3      	beq.n	83e58 <__swbuf_r+0x50>
   83e90:	f04f 30ff 	mov.w	r0, #4294967295
   83e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83e96:	4638      	mov	r0, r7
   83e98:	4621      	mov	r1, r4
   83e9a:	f7fe fc47 	bl	8272c <__swsetup_r>
   83e9e:	2800      	cmp	r0, #0
   83ea0:	d1f6      	bne.n	83e90 <__swbuf_r+0x88>
   83ea2:	89a2      	ldrh	r2, [r4, #12]
   83ea4:	6926      	ldr	r6, [r4, #16]
   83ea6:	b293      	uxth	r3, r2
   83ea8:	e7bf      	b.n	83e2a <__swbuf_r+0x22>
   83eaa:	f7fe fd71 	bl	82990 <__sinit>
   83eae:	e7b3      	b.n	83e18 <__swbuf_r+0x10>

00083eb0 <_wcrtomb_r>:
   83eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83eb4:	461e      	mov	r6, r3
   83eb6:	b086      	sub	sp, #24
   83eb8:	460c      	mov	r4, r1
   83eba:	4605      	mov	r5, r0
   83ebc:	4617      	mov	r7, r2
   83ebe:	4b0f      	ldr	r3, [pc, #60]	; (83efc <_wcrtomb_r+0x4c>)
   83ec0:	b191      	cbz	r1, 83ee8 <_wcrtomb_r+0x38>
   83ec2:	f8d3 8000 	ldr.w	r8, [r3]
   83ec6:	f7ff f923 	bl	83110 <__locale_charset>
   83eca:	9600      	str	r6, [sp, #0]
   83ecc:	4603      	mov	r3, r0
   83ece:	4621      	mov	r1, r4
   83ed0:	463a      	mov	r2, r7
   83ed2:	4628      	mov	r0, r5
   83ed4:	47c0      	blx	r8
   83ed6:	1c43      	adds	r3, r0, #1
   83ed8:	d103      	bne.n	83ee2 <_wcrtomb_r+0x32>
   83eda:	2200      	movs	r2, #0
   83edc:	238a      	movs	r3, #138	; 0x8a
   83ede:	6032      	str	r2, [r6, #0]
   83ee0:	602b      	str	r3, [r5, #0]
   83ee2:	b006      	add	sp, #24
   83ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83ee8:	681f      	ldr	r7, [r3, #0]
   83eea:	f7ff f911 	bl	83110 <__locale_charset>
   83eee:	9600      	str	r6, [sp, #0]
   83ef0:	4603      	mov	r3, r0
   83ef2:	4622      	mov	r2, r4
   83ef4:	4628      	mov	r0, r5
   83ef6:	a903      	add	r1, sp, #12
   83ef8:	47b8      	blx	r7
   83efa:	e7ec      	b.n	83ed6 <_wcrtomb_r+0x26>
   83efc:	200709a0 	.word	0x200709a0

00083f00 <__ascii_wctomb>:
   83f00:	b121      	cbz	r1, 83f0c <__ascii_wctomb+0xc>
   83f02:	2aff      	cmp	r2, #255	; 0xff
   83f04:	d804      	bhi.n	83f10 <__ascii_wctomb+0x10>
   83f06:	700a      	strb	r2, [r1, #0]
   83f08:	2001      	movs	r0, #1
   83f0a:	4770      	bx	lr
   83f0c:	4608      	mov	r0, r1
   83f0e:	4770      	bx	lr
   83f10:	238a      	movs	r3, #138	; 0x8a
   83f12:	6003      	str	r3, [r0, #0]
   83f14:	f04f 30ff 	mov.w	r0, #4294967295
   83f18:	4770      	bx	lr
   83f1a:	bf00      	nop

00083f1c <_write_r>:
   83f1c:	b570      	push	{r4, r5, r6, lr}
   83f1e:	4c08      	ldr	r4, [pc, #32]	; (83f40 <_write_r+0x24>)
   83f20:	4606      	mov	r6, r0
   83f22:	2500      	movs	r5, #0
   83f24:	4608      	mov	r0, r1
   83f26:	4611      	mov	r1, r2
   83f28:	461a      	mov	r2, r3
   83f2a:	6025      	str	r5, [r4, #0]
   83f2c:	f7fc f9ba 	bl	802a4 <_write>
   83f30:	1c43      	adds	r3, r0, #1
   83f32:	d000      	beq.n	83f36 <_write_r+0x1a>
   83f34:	bd70      	pop	{r4, r5, r6, pc}
   83f36:	6823      	ldr	r3, [r4, #0]
   83f38:	2b00      	cmp	r3, #0
   83f3a:	d0fb      	beq.n	83f34 <_write_r+0x18>
   83f3c:	6033      	str	r3, [r6, #0]
   83f3e:	bd70      	pop	{r4, r5, r6, pc}
   83f40:	20070b6c 	.word	0x20070b6c

00083f44 <__register_exitproc>:
   83f44:	b5f0      	push	{r4, r5, r6, r7, lr}
   83f46:	4c27      	ldr	r4, [pc, #156]	; (83fe4 <__register_exitproc+0xa0>)
   83f48:	b085      	sub	sp, #20
   83f4a:	6826      	ldr	r6, [r4, #0]
   83f4c:	4607      	mov	r7, r0
   83f4e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83f52:	2c00      	cmp	r4, #0
   83f54:	d040      	beq.n	83fd8 <__register_exitproc+0x94>
   83f56:	6865      	ldr	r5, [r4, #4]
   83f58:	2d1f      	cmp	r5, #31
   83f5a:	dd1e      	ble.n	83f9a <__register_exitproc+0x56>
   83f5c:	4822      	ldr	r0, [pc, #136]	; (83fe8 <__register_exitproc+0xa4>)
   83f5e:	b918      	cbnz	r0, 83f68 <__register_exitproc+0x24>
   83f60:	f04f 30ff 	mov.w	r0, #4294967295
   83f64:	b005      	add	sp, #20
   83f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83f68:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83f6c:	9103      	str	r1, [sp, #12]
   83f6e:	9202      	str	r2, [sp, #8]
   83f70:	9301      	str	r3, [sp, #4]
   83f72:	f7ff f947 	bl	83204 <malloc>
   83f76:	9903      	ldr	r1, [sp, #12]
   83f78:	4604      	mov	r4, r0
   83f7a:	9a02      	ldr	r2, [sp, #8]
   83f7c:	9b01      	ldr	r3, [sp, #4]
   83f7e:	2800      	cmp	r0, #0
   83f80:	d0ee      	beq.n	83f60 <__register_exitproc+0x1c>
   83f82:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83f86:	2000      	movs	r0, #0
   83f88:	6025      	str	r5, [r4, #0]
   83f8a:	6060      	str	r0, [r4, #4]
   83f8c:	4605      	mov	r5, r0
   83f8e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83f92:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83f96:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83f9a:	b93f      	cbnz	r7, 83fac <__register_exitproc+0x68>
   83f9c:	1c6b      	adds	r3, r5, #1
   83f9e:	2000      	movs	r0, #0
   83fa0:	3502      	adds	r5, #2
   83fa2:	6063      	str	r3, [r4, #4]
   83fa4:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83fa8:	b005      	add	sp, #20
   83faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83fac:	2601      	movs	r6, #1
   83fae:	40ae      	lsls	r6, r5
   83fb0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83fb4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83fb8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83fbc:	2f02      	cmp	r7, #2
   83fbe:	ea42 0206 	orr.w	r2, r2, r6
   83fc2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83fc6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83fca:	d1e7      	bne.n	83f9c <__register_exitproc+0x58>
   83fcc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83fd0:	431e      	orrs	r6, r3
   83fd2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83fd6:	e7e1      	b.n	83f9c <__register_exitproc+0x58>
   83fd8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83fdc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83fe0:	e7b9      	b.n	83f56 <__register_exitproc+0x12>
   83fe2:	bf00      	nop
   83fe4:	00084734 	.word	0x00084734
   83fe8:	00083205 	.word	0x00083205

00083fec <_close_r>:
   83fec:	b538      	push	{r3, r4, r5, lr}
   83fee:	4c07      	ldr	r4, [pc, #28]	; (8400c <_close_r+0x20>)
   83ff0:	2300      	movs	r3, #0
   83ff2:	4605      	mov	r5, r0
   83ff4:	4608      	mov	r0, r1
   83ff6:	6023      	str	r3, [r4, #0]
   83ff8:	f7fc ffbe 	bl	80f78 <_close>
   83ffc:	1c43      	adds	r3, r0, #1
   83ffe:	d000      	beq.n	84002 <_close_r+0x16>
   84000:	bd38      	pop	{r3, r4, r5, pc}
   84002:	6823      	ldr	r3, [r4, #0]
   84004:	2b00      	cmp	r3, #0
   84006:	d0fb      	beq.n	84000 <_close_r+0x14>
   84008:	602b      	str	r3, [r5, #0]
   8400a:	bd38      	pop	{r3, r4, r5, pc}
   8400c:	20070b6c 	.word	0x20070b6c

00084010 <_fclose_r>:
   84010:	b570      	push	{r4, r5, r6, lr}
   84012:	460c      	mov	r4, r1
   84014:	4605      	mov	r5, r0
   84016:	b131      	cbz	r1, 84026 <_fclose_r+0x16>
   84018:	b110      	cbz	r0, 84020 <_fclose_r+0x10>
   8401a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8401c:	2b00      	cmp	r3, #0
   8401e:	d02f      	beq.n	84080 <_fclose_r+0x70>
   84020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84024:	b90b      	cbnz	r3, 8402a <_fclose_r+0x1a>
   84026:	2000      	movs	r0, #0
   84028:	bd70      	pop	{r4, r5, r6, pc}
   8402a:	4628      	mov	r0, r5
   8402c:	4621      	mov	r1, r4
   8402e:	f7fe fc93 	bl	82958 <_fflush_r>
   84032:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84034:	4606      	mov	r6, r0
   84036:	b133      	cbz	r3, 84046 <_fclose_r+0x36>
   84038:	4628      	mov	r0, r5
   8403a:	69e1      	ldr	r1, [r4, #28]
   8403c:	4798      	blx	r3
   8403e:	2800      	cmp	r0, #0
   84040:	bfb8      	it	lt
   84042:	f04f 36ff 	movlt.w	r6, #4294967295
   84046:	89a3      	ldrh	r3, [r4, #12]
   84048:	061b      	lsls	r3, r3, #24
   8404a:	d41c      	bmi.n	84086 <_fclose_r+0x76>
   8404c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8404e:	b141      	cbz	r1, 84062 <_fclose_r+0x52>
   84050:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84054:	4299      	cmp	r1, r3
   84056:	d002      	beq.n	8405e <_fclose_r+0x4e>
   84058:	4628      	mov	r0, r5
   8405a:	f7fe fddd 	bl	82c18 <_free_r>
   8405e:	2300      	movs	r3, #0
   84060:	6323      	str	r3, [r4, #48]	; 0x30
   84062:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84064:	b121      	cbz	r1, 84070 <_fclose_r+0x60>
   84066:	4628      	mov	r0, r5
   84068:	f7fe fdd6 	bl	82c18 <_free_r>
   8406c:	2300      	movs	r3, #0
   8406e:	6463      	str	r3, [r4, #68]	; 0x44
   84070:	f7fe fd08 	bl	82a84 <__sfp_lock_acquire>
   84074:	2300      	movs	r3, #0
   84076:	81a3      	strh	r3, [r4, #12]
   84078:	f7fe fd06 	bl	82a88 <__sfp_lock_release>
   8407c:	4630      	mov	r0, r6
   8407e:	bd70      	pop	{r4, r5, r6, pc}
   84080:	f7fe fc86 	bl	82990 <__sinit>
   84084:	e7cc      	b.n	84020 <_fclose_r+0x10>
   84086:	4628      	mov	r0, r5
   84088:	6921      	ldr	r1, [r4, #16]
   8408a:	f7fe fdc5 	bl	82c18 <_free_r>
   8408e:	e7dd      	b.n	8404c <_fclose_r+0x3c>

00084090 <fclose>:
   84090:	4b02      	ldr	r3, [pc, #8]	; (8409c <fclose+0xc>)
   84092:	4601      	mov	r1, r0
   84094:	6818      	ldr	r0, [r3, #0]
   84096:	f7ff bfbb 	b.w	84010 <_fclose_r>
   8409a:	bf00      	nop
   8409c:	20070568 	.word	0x20070568

000840a0 <_fstat_r>:
   840a0:	b538      	push	{r3, r4, r5, lr}
   840a2:	4c08      	ldr	r4, [pc, #32]	; (840c4 <_fstat_r+0x24>)
   840a4:	2300      	movs	r3, #0
   840a6:	4605      	mov	r5, r0
   840a8:	4608      	mov	r0, r1
   840aa:	4611      	mov	r1, r2
   840ac:	6023      	str	r3, [r4, #0]
   840ae:	f7fc ff67 	bl	80f80 <_fstat>
   840b2:	1c43      	adds	r3, r0, #1
   840b4:	d000      	beq.n	840b8 <_fstat_r+0x18>
   840b6:	bd38      	pop	{r3, r4, r5, pc}
   840b8:	6823      	ldr	r3, [r4, #0]
   840ba:	2b00      	cmp	r3, #0
   840bc:	d0fb      	beq.n	840b6 <_fstat_r+0x16>
   840be:	602b      	str	r3, [r5, #0]
   840c0:	bd38      	pop	{r3, r4, r5, pc}
   840c2:	bf00      	nop
   840c4:	20070b6c 	.word	0x20070b6c

000840c8 <_isatty_r>:
   840c8:	b538      	push	{r3, r4, r5, lr}
   840ca:	4c07      	ldr	r4, [pc, #28]	; (840e8 <_isatty_r+0x20>)
   840cc:	2300      	movs	r3, #0
   840ce:	4605      	mov	r5, r0
   840d0:	4608      	mov	r0, r1
   840d2:	6023      	str	r3, [r4, #0]
   840d4:	f7fc ff5a 	bl	80f8c <_isatty>
   840d8:	1c43      	adds	r3, r0, #1
   840da:	d000      	beq.n	840de <_isatty_r+0x16>
   840dc:	bd38      	pop	{r3, r4, r5, pc}
   840de:	6823      	ldr	r3, [r4, #0]
   840e0:	2b00      	cmp	r3, #0
   840e2:	d0fb      	beq.n	840dc <_isatty_r+0x14>
   840e4:	602b      	str	r3, [r5, #0]
   840e6:	bd38      	pop	{r3, r4, r5, pc}
   840e8:	20070b6c 	.word	0x20070b6c

000840ec <_lseek_r>:
   840ec:	b570      	push	{r4, r5, r6, lr}
   840ee:	4c08      	ldr	r4, [pc, #32]	; (84110 <_lseek_r+0x24>)
   840f0:	4606      	mov	r6, r0
   840f2:	2500      	movs	r5, #0
   840f4:	4608      	mov	r0, r1
   840f6:	4611      	mov	r1, r2
   840f8:	461a      	mov	r2, r3
   840fa:	6025      	str	r5, [r4, #0]
   840fc:	f7fc ff48 	bl	80f90 <_lseek>
   84100:	1c43      	adds	r3, r0, #1
   84102:	d000      	beq.n	84106 <_lseek_r+0x1a>
   84104:	bd70      	pop	{r4, r5, r6, pc}
   84106:	6823      	ldr	r3, [r4, #0]
   84108:	2b00      	cmp	r3, #0
   8410a:	d0fb      	beq.n	84104 <_lseek_r+0x18>
   8410c:	6033      	str	r3, [r6, #0]
   8410e:	bd70      	pop	{r4, r5, r6, pc}
   84110:	20070b6c 	.word	0x20070b6c

00084114 <_read_r>:
   84114:	b570      	push	{r4, r5, r6, lr}
   84116:	4c08      	ldr	r4, [pc, #32]	; (84138 <_read_r+0x24>)
   84118:	4606      	mov	r6, r0
   8411a:	2500      	movs	r5, #0
   8411c:	4608      	mov	r0, r1
   8411e:	4611      	mov	r1, r2
   84120:	461a      	mov	r2, r3
   84122:	6025      	str	r5, [r4, #0]
   84124:	f7fc f89e 	bl	80264 <_read>
   84128:	1c43      	adds	r3, r0, #1
   8412a:	d000      	beq.n	8412e <_read_r+0x1a>
   8412c:	bd70      	pop	{r4, r5, r6, pc}
   8412e:	6823      	ldr	r3, [r4, #0]
   84130:	2b00      	cmp	r3, #0
   84132:	d0fb      	beq.n	8412c <_read_r+0x18>
   84134:	6033      	str	r3, [r6, #0]
   84136:	bd70      	pop	{r4, r5, r6, pc}
   84138:	20070b6c 	.word	0x20070b6c

0008413c <__aeabi_uldivmod>:
   8413c:	b94b      	cbnz	r3, 84152 <__aeabi_uldivmod+0x16>
   8413e:	b942      	cbnz	r2, 84152 <__aeabi_uldivmod+0x16>
   84140:	2900      	cmp	r1, #0
   84142:	bf08      	it	eq
   84144:	2800      	cmpeq	r0, #0
   84146:	d002      	beq.n	8414e <__aeabi_uldivmod+0x12>
   84148:	f04f 31ff 	mov.w	r1, #4294967295
   8414c:	4608      	mov	r0, r1
   8414e:	f000 b83b 	b.w	841c8 <__aeabi_idiv0>
   84152:	b082      	sub	sp, #8
   84154:	46ec      	mov	ip, sp
   84156:	e92d 5000 	stmdb	sp!, {ip, lr}
   8415a:	f000 f81d 	bl	84198 <__gnu_uldivmod_helper>
   8415e:	f8dd e004 	ldr.w	lr, [sp, #4]
   84162:	b002      	add	sp, #8
   84164:	bc0c      	pop	{r2, r3}
   84166:	4770      	bx	lr

00084168 <__gnu_ldivmod_helper>:
   84168:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8416c:	9e08      	ldr	r6, [sp, #32]
   8416e:	4614      	mov	r4, r2
   84170:	461d      	mov	r5, r3
   84172:	4680      	mov	r8, r0
   84174:	4689      	mov	r9, r1
   84176:	f000 f829 	bl	841cc <__divdi3>
   8417a:	fb04 f301 	mul.w	r3, r4, r1
   8417e:	fba4 ab00 	umull	sl, fp, r4, r0
   84182:	fb00 3205 	mla	r2, r0, r5, r3
   84186:	4493      	add	fp, r2
   84188:	ebb8 080a 	subs.w	r8, r8, sl
   8418c:	eb69 090b 	sbc.w	r9, r9, fp
   84190:	e9c6 8900 	strd	r8, r9, [r6]
   84194:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084198 <__gnu_uldivmod_helper>:
   84198:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8419c:	9e08      	ldr	r6, [sp, #32]
   8419e:	4614      	mov	r4, r2
   841a0:	461d      	mov	r5, r3
   841a2:	4680      	mov	r8, r0
   841a4:	4689      	mov	r9, r1
   841a6:	f000 f961 	bl	8446c <__udivdi3>
   841aa:	fb00 f505 	mul.w	r5, r0, r5
   841ae:	fba0 ab04 	umull	sl, fp, r0, r4
   841b2:	fb04 5401 	mla	r4, r4, r1, r5
   841b6:	44a3      	add	fp, r4
   841b8:	ebb8 080a 	subs.w	r8, r8, sl
   841bc:	eb69 090b 	sbc.w	r9, r9, fp
   841c0:	e9c6 8900 	strd	r8, r9, [r6]
   841c4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000841c8 <__aeabi_idiv0>:
   841c8:	4770      	bx	lr
   841ca:	bf00      	nop

000841cc <__divdi3>:
   841cc:	2900      	cmp	r1, #0
   841ce:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   841d2:	f2c0 80a1 	blt.w	84318 <__divdi3+0x14c>
   841d6:	2400      	movs	r4, #0
   841d8:	2b00      	cmp	r3, #0
   841da:	f2c0 8098 	blt.w	8430e <__divdi3+0x142>
   841de:	4615      	mov	r5, r2
   841e0:	4606      	mov	r6, r0
   841e2:	460f      	mov	r7, r1
   841e4:	2b00      	cmp	r3, #0
   841e6:	d13f      	bne.n	84268 <__divdi3+0x9c>
   841e8:	428a      	cmp	r2, r1
   841ea:	d958      	bls.n	8429e <__divdi3+0xd2>
   841ec:	fab2 f382 	clz	r3, r2
   841f0:	b14b      	cbz	r3, 84206 <__divdi3+0x3a>
   841f2:	f1c3 0220 	rsb	r2, r3, #32
   841f6:	fa01 f703 	lsl.w	r7, r1, r3
   841fa:	fa20 f202 	lsr.w	r2, r0, r2
   841fe:	409d      	lsls	r5, r3
   84200:	fa00 f603 	lsl.w	r6, r0, r3
   84204:	4317      	orrs	r7, r2
   84206:	0c29      	lsrs	r1, r5, #16
   84208:	fbb7 f2f1 	udiv	r2, r7, r1
   8420c:	fb01 7712 	mls	r7, r1, r2, r7
   84210:	b2a8      	uxth	r0, r5
   84212:	fb00 f302 	mul.w	r3, r0, r2
   84216:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8421a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   8421e:	42bb      	cmp	r3, r7
   84220:	d909      	bls.n	84236 <__divdi3+0x6a>
   84222:	197f      	adds	r7, r7, r5
   84224:	f102 3cff 	add.w	ip, r2, #4294967295
   84228:	f080 8105 	bcs.w	84436 <__divdi3+0x26a>
   8422c:	42bb      	cmp	r3, r7
   8422e:	f240 8102 	bls.w	84436 <__divdi3+0x26a>
   84232:	3a02      	subs	r2, #2
   84234:	442f      	add	r7, r5
   84236:	1aff      	subs	r7, r7, r3
   84238:	fbb7 f3f1 	udiv	r3, r7, r1
   8423c:	fb01 7113 	mls	r1, r1, r3, r7
   84240:	fb00 f003 	mul.w	r0, r0, r3
   84244:	b2b6      	uxth	r6, r6
   84246:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   8424a:	4288      	cmp	r0, r1
   8424c:	d908      	bls.n	84260 <__divdi3+0x94>
   8424e:	1949      	adds	r1, r1, r5
   84250:	f103 37ff 	add.w	r7, r3, #4294967295
   84254:	f080 80f1 	bcs.w	8443a <__divdi3+0x26e>
   84258:	4288      	cmp	r0, r1
   8425a:	f240 80ee 	bls.w	8443a <__divdi3+0x26e>
   8425e:	3b02      	subs	r3, #2
   84260:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84264:	2300      	movs	r3, #0
   84266:	e003      	b.n	84270 <__divdi3+0xa4>
   84268:	428b      	cmp	r3, r1
   8426a:	d90a      	bls.n	84282 <__divdi3+0xb6>
   8426c:	2300      	movs	r3, #0
   8426e:	461a      	mov	r2, r3
   84270:	4610      	mov	r0, r2
   84272:	4619      	mov	r1, r3
   84274:	b114      	cbz	r4, 8427c <__divdi3+0xb0>
   84276:	4240      	negs	r0, r0
   84278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8427c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84280:	4770      	bx	lr
   84282:	fab3 f883 	clz	r8, r3
   84286:	f1b8 0f00 	cmp.w	r8, #0
   8428a:	f040 8088 	bne.w	8439e <__divdi3+0x1d2>
   8428e:	428b      	cmp	r3, r1
   84290:	d302      	bcc.n	84298 <__divdi3+0xcc>
   84292:	4282      	cmp	r2, r0
   84294:	f200 80e2 	bhi.w	8445c <__divdi3+0x290>
   84298:	2300      	movs	r3, #0
   8429a:	2201      	movs	r2, #1
   8429c:	e7e8      	b.n	84270 <__divdi3+0xa4>
   8429e:	b912      	cbnz	r2, 842a6 <__divdi3+0xda>
   842a0:	2301      	movs	r3, #1
   842a2:	fbb3 f5f2 	udiv	r5, r3, r2
   842a6:	fab5 f285 	clz	r2, r5
   842aa:	2a00      	cmp	r2, #0
   842ac:	d13a      	bne.n	84324 <__divdi3+0x158>
   842ae:	1b7f      	subs	r7, r7, r5
   842b0:	0c28      	lsrs	r0, r5, #16
   842b2:	fa1f fc85 	uxth.w	ip, r5
   842b6:	2301      	movs	r3, #1
   842b8:	fbb7 f1f0 	udiv	r1, r7, r0
   842bc:	fb00 7711 	mls	r7, r0, r1, r7
   842c0:	fb0c f201 	mul.w	r2, ip, r1
   842c4:	ea4f 4816 	mov.w	r8, r6, lsr #16
   842c8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   842cc:	42ba      	cmp	r2, r7
   842ce:	d907      	bls.n	842e0 <__divdi3+0x114>
   842d0:	197f      	adds	r7, r7, r5
   842d2:	f101 38ff 	add.w	r8, r1, #4294967295
   842d6:	d202      	bcs.n	842de <__divdi3+0x112>
   842d8:	42ba      	cmp	r2, r7
   842da:	f200 80c4 	bhi.w	84466 <__divdi3+0x29a>
   842de:	4641      	mov	r1, r8
   842e0:	1abf      	subs	r7, r7, r2
   842e2:	fbb7 f2f0 	udiv	r2, r7, r0
   842e6:	fb00 7012 	mls	r0, r0, r2, r7
   842ea:	fb0c fc02 	mul.w	ip, ip, r2
   842ee:	b2b6      	uxth	r6, r6
   842f0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   842f4:	4584      	cmp	ip, r0
   842f6:	d907      	bls.n	84308 <__divdi3+0x13c>
   842f8:	1940      	adds	r0, r0, r5
   842fa:	f102 37ff 	add.w	r7, r2, #4294967295
   842fe:	d202      	bcs.n	84306 <__divdi3+0x13a>
   84300:	4584      	cmp	ip, r0
   84302:	f200 80ae 	bhi.w	84462 <__divdi3+0x296>
   84306:	463a      	mov	r2, r7
   84308:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   8430c:	e7b0      	b.n	84270 <__divdi3+0xa4>
   8430e:	43e4      	mvns	r4, r4
   84310:	4252      	negs	r2, r2
   84312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84316:	e762      	b.n	841de <__divdi3+0x12>
   84318:	4240      	negs	r0, r0
   8431a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8431e:	f04f 34ff 	mov.w	r4, #4294967295
   84322:	e759      	b.n	841d8 <__divdi3+0xc>
   84324:	4095      	lsls	r5, r2
   84326:	f1c2 0920 	rsb	r9, r2, #32
   8432a:	fa27 f109 	lsr.w	r1, r7, r9
   8432e:	fa26 f909 	lsr.w	r9, r6, r9
   84332:	4097      	lsls	r7, r2
   84334:	0c28      	lsrs	r0, r5, #16
   84336:	fbb1 f8f0 	udiv	r8, r1, r0
   8433a:	fb00 1118 	mls	r1, r0, r8, r1
   8433e:	fa1f fc85 	uxth.w	ip, r5
   84342:	fb0c f308 	mul.w	r3, ip, r8
   84346:	ea49 0907 	orr.w	r9, r9, r7
   8434a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   8434e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   84352:	428b      	cmp	r3, r1
   84354:	fa06 f602 	lsl.w	r6, r6, r2
   84358:	d908      	bls.n	8436c <__divdi3+0x1a0>
   8435a:	1949      	adds	r1, r1, r5
   8435c:	f108 32ff 	add.w	r2, r8, #4294967295
   84360:	d27a      	bcs.n	84458 <__divdi3+0x28c>
   84362:	428b      	cmp	r3, r1
   84364:	d978      	bls.n	84458 <__divdi3+0x28c>
   84366:	f1a8 0802 	sub.w	r8, r8, #2
   8436a:	4429      	add	r1, r5
   8436c:	1ac9      	subs	r1, r1, r3
   8436e:	fbb1 f3f0 	udiv	r3, r1, r0
   84372:	fb00 1713 	mls	r7, r0, r3, r1
   84376:	fb0c f203 	mul.w	r2, ip, r3
   8437a:	fa1f f989 	uxth.w	r9, r9
   8437e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   84382:	42ba      	cmp	r2, r7
   84384:	d907      	bls.n	84396 <__divdi3+0x1ca>
   84386:	197f      	adds	r7, r7, r5
   84388:	f103 31ff 	add.w	r1, r3, #4294967295
   8438c:	d260      	bcs.n	84450 <__divdi3+0x284>
   8438e:	42ba      	cmp	r2, r7
   84390:	d95e      	bls.n	84450 <__divdi3+0x284>
   84392:	3b02      	subs	r3, #2
   84394:	442f      	add	r7, r5
   84396:	1abf      	subs	r7, r7, r2
   84398:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8439c:	e78c      	b.n	842b8 <__divdi3+0xec>
   8439e:	f1c8 0220 	rsb	r2, r8, #32
   843a2:	fa25 f102 	lsr.w	r1, r5, r2
   843a6:	fa03 fc08 	lsl.w	ip, r3, r8
   843aa:	fa27 f302 	lsr.w	r3, r7, r2
   843ae:	fa20 f202 	lsr.w	r2, r0, r2
   843b2:	fa07 f708 	lsl.w	r7, r7, r8
   843b6:	ea41 0c0c 	orr.w	ip, r1, ip
   843ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
   843be:	fbb3 f1f9 	udiv	r1, r3, r9
   843c2:	fb09 3311 	mls	r3, r9, r1, r3
   843c6:	fa1f fa8c 	uxth.w	sl, ip
   843ca:	fb0a fb01 	mul.w	fp, sl, r1
   843ce:	4317      	orrs	r7, r2
   843d0:	0c3a      	lsrs	r2, r7, #16
   843d2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   843d6:	459b      	cmp	fp, r3
   843d8:	fa05 f008 	lsl.w	r0, r5, r8
   843dc:	d908      	bls.n	843f0 <__divdi3+0x224>
   843de:	eb13 030c 	adds.w	r3, r3, ip
   843e2:	f101 32ff 	add.w	r2, r1, #4294967295
   843e6:	d235      	bcs.n	84454 <__divdi3+0x288>
   843e8:	459b      	cmp	fp, r3
   843ea:	d933      	bls.n	84454 <__divdi3+0x288>
   843ec:	3902      	subs	r1, #2
   843ee:	4463      	add	r3, ip
   843f0:	ebcb 0303 	rsb	r3, fp, r3
   843f4:	fbb3 f2f9 	udiv	r2, r3, r9
   843f8:	fb09 3312 	mls	r3, r9, r2, r3
   843fc:	fb0a fa02 	mul.w	sl, sl, r2
   84400:	b2bf      	uxth	r7, r7
   84402:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   84406:	45ba      	cmp	sl, r7
   84408:	d908      	bls.n	8441c <__divdi3+0x250>
   8440a:	eb17 070c 	adds.w	r7, r7, ip
   8440e:	f102 33ff 	add.w	r3, r2, #4294967295
   84412:	d21b      	bcs.n	8444c <__divdi3+0x280>
   84414:	45ba      	cmp	sl, r7
   84416:	d919      	bls.n	8444c <__divdi3+0x280>
   84418:	3a02      	subs	r2, #2
   8441a:	4467      	add	r7, ip
   8441c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   84420:	fba5 0100 	umull	r0, r1, r5, r0
   84424:	ebca 0707 	rsb	r7, sl, r7
   84428:	428f      	cmp	r7, r1
   8442a:	f04f 0300 	mov.w	r3, #0
   8442e:	d30a      	bcc.n	84446 <__divdi3+0x27a>
   84430:	d005      	beq.n	8443e <__divdi3+0x272>
   84432:	462a      	mov	r2, r5
   84434:	e71c      	b.n	84270 <__divdi3+0xa4>
   84436:	4662      	mov	r2, ip
   84438:	e6fd      	b.n	84236 <__divdi3+0x6a>
   8443a:	463b      	mov	r3, r7
   8443c:	e710      	b.n	84260 <__divdi3+0x94>
   8443e:	fa06 f608 	lsl.w	r6, r6, r8
   84442:	4286      	cmp	r6, r0
   84444:	d2f5      	bcs.n	84432 <__divdi3+0x266>
   84446:	1e6a      	subs	r2, r5, #1
   84448:	2300      	movs	r3, #0
   8444a:	e711      	b.n	84270 <__divdi3+0xa4>
   8444c:	461a      	mov	r2, r3
   8444e:	e7e5      	b.n	8441c <__divdi3+0x250>
   84450:	460b      	mov	r3, r1
   84452:	e7a0      	b.n	84396 <__divdi3+0x1ca>
   84454:	4611      	mov	r1, r2
   84456:	e7cb      	b.n	843f0 <__divdi3+0x224>
   84458:	4690      	mov	r8, r2
   8445a:	e787      	b.n	8436c <__divdi3+0x1a0>
   8445c:	4643      	mov	r3, r8
   8445e:	4642      	mov	r2, r8
   84460:	e706      	b.n	84270 <__divdi3+0xa4>
   84462:	3a02      	subs	r2, #2
   84464:	e750      	b.n	84308 <__divdi3+0x13c>
   84466:	3902      	subs	r1, #2
   84468:	442f      	add	r7, r5
   8446a:	e739      	b.n	842e0 <__divdi3+0x114>

0008446c <__udivdi3>:
   8446c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84470:	4614      	mov	r4, r2
   84472:	4605      	mov	r5, r0
   84474:	460e      	mov	r6, r1
   84476:	2b00      	cmp	r3, #0
   84478:	d143      	bne.n	84502 <__udivdi3+0x96>
   8447a:	428a      	cmp	r2, r1
   8447c:	d953      	bls.n	84526 <__udivdi3+0xba>
   8447e:	fab2 f782 	clz	r7, r2
   84482:	b157      	cbz	r7, 8449a <__udivdi3+0x2e>
   84484:	f1c7 0620 	rsb	r6, r7, #32
   84488:	fa20 f606 	lsr.w	r6, r0, r6
   8448c:	fa01 f307 	lsl.w	r3, r1, r7
   84490:	fa02 f407 	lsl.w	r4, r2, r7
   84494:	fa00 f507 	lsl.w	r5, r0, r7
   84498:	431e      	orrs	r6, r3
   8449a:	0c21      	lsrs	r1, r4, #16
   8449c:	fbb6 f2f1 	udiv	r2, r6, r1
   844a0:	fb01 6612 	mls	r6, r1, r2, r6
   844a4:	b2a0      	uxth	r0, r4
   844a6:	fb00 f302 	mul.w	r3, r0, r2
   844aa:	0c2f      	lsrs	r7, r5, #16
   844ac:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   844b0:	42b3      	cmp	r3, r6
   844b2:	d909      	bls.n	844c8 <__udivdi3+0x5c>
   844b4:	1936      	adds	r6, r6, r4
   844b6:	f102 37ff 	add.w	r7, r2, #4294967295
   844ba:	f080 80fd 	bcs.w	846b8 <__udivdi3+0x24c>
   844be:	42b3      	cmp	r3, r6
   844c0:	f240 80fa 	bls.w	846b8 <__udivdi3+0x24c>
   844c4:	3a02      	subs	r2, #2
   844c6:	4426      	add	r6, r4
   844c8:	1af6      	subs	r6, r6, r3
   844ca:	fbb6 f3f1 	udiv	r3, r6, r1
   844ce:	fb01 6113 	mls	r1, r1, r3, r6
   844d2:	fb00 f003 	mul.w	r0, r0, r3
   844d6:	b2ad      	uxth	r5, r5
   844d8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   844dc:	4288      	cmp	r0, r1
   844de:	d908      	bls.n	844f2 <__udivdi3+0x86>
   844e0:	1909      	adds	r1, r1, r4
   844e2:	f103 36ff 	add.w	r6, r3, #4294967295
   844e6:	f080 80e9 	bcs.w	846bc <__udivdi3+0x250>
   844ea:	4288      	cmp	r0, r1
   844ec:	f240 80e6 	bls.w	846bc <__udivdi3+0x250>
   844f0:	3b02      	subs	r3, #2
   844f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   844f6:	2300      	movs	r3, #0
   844f8:	4610      	mov	r0, r2
   844fa:	4619      	mov	r1, r3
   844fc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84500:	4770      	bx	lr
   84502:	428b      	cmp	r3, r1
   84504:	d84c      	bhi.n	845a0 <__udivdi3+0x134>
   84506:	fab3 f683 	clz	r6, r3
   8450a:	2e00      	cmp	r6, #0
   8450c:	d14f      	bne.n	845ae <__udivdi3+0x142>
   8450e:	428b      	cmp	r3, r1
   84510:	d302      	bcc.n	84518 <__udivdi3+0xac>
   84512:	4282      	cmp	r2, r0
   84514:	f200 80dd 	bhi.w	846d2 <__udivdi3+0x266>
   84518:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8451c:	2300      	movs	r3, #0
   8451e:	2201      	movs	r2, #1
   84520:	4610      	mov	r0, r2
   84522:	4619      	mov	r1, r3
   84524:	4770      	bx	lr
   84526:	b912      	cbnz	r2, 8452e <__udivdi3+0xc2>
   84528:	2401      	movs	r4, #1
   8452a:	fbb4 f4f2 	udiv	r4, r4, r2
   8452e:	fab4 f284 	clz	r2, r4
   84532:	2a00      	cmp	r2, #0
   84534:	f040 8082 	bne.w	8463c <__udivdi3+0x1d0>
   84538:	1b09      	subs	r1, r1, r4
   8453a:	0c26      	lsrs	r6, r4, #16
   8453c:	b2a7      	uxth	r7, r4
   8453e:	2301      	movs	r3, #1
   84540:	fbb1 f0f6 	udiv	r0, r1, r6
   84544:	fb06 1110 	mls	r1, r6, r0, r1
   84548:	fb07 f200 	mul.w	r2, r7, r0
   8454c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84550:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   84554:	428a      	cmp	r2, r1
   84556:	d907      	bls.n	84568 <__udivdi3+0xfc>
   84558:	1909      	adds	r1, r1, r4
   8455a:	f100 3cff 	add.w	ip, r0, #4294967295
   8455e:	d202      	bcs.n	84566 <__udivdi3+0xfa>
   84560:	428a      	cmp	r2, r1
   84562:	f200 80c8 	bhi.w	846f6 <__udivdi3+0x28a>
   84566:	4660      	mov	r0, ip
   84568:	1a89      	subs	r1, r1, r2
   8456a:	fbb1 f2f6 	udiv	r2, r1, r6
   8456e:	fb06 1112 	mls	r1, r6, r2, r1
   84572:	fb07 f702 	mul.w	r7, r7, r2
   84576:	b2ad      	uxth	r5, r5
   84578:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8457c:	42af      	cmp	r7, r5
   8457e:	d908      	bls.n	84592 <__udivdi3+0x126>
   84580:	192c      	adds	r4, r5, r4
   84582:	f102 31ff 	add.w	r1, r2, #4294967295
   84586:	f080 809b 	bcs.w	846c0 <__udivdi3+0x254>
   8458a:	42a7      	cmp	r7, r4
   8458c:	f240 8098 	bls.w	846c0 <__udivdi3+0x254>
   84590:	3a02      	subs	r2, #2
   84592:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   84596:	4610      	mov	r0, r2
   84598:	4619      	mov	r1, r3
   8459a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8459e:	4770      	bx	lr
   845a0:	2300      	movs	r3, #0
   845a2:	461a      	mov	r2, r3
   845a4:	4610      	mov	r0, r2
   845a6:	4619      	mov	r1, r3
   845a8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   845ac:	4770      	bx	lr
   845ae:	f1c6 0520 	rsb	r5, r6, #32
   845b2:	fa22 f705 	lsr.w	r7, r2, r5
   845b6:	fa03 f406 	lsl.w	r4, r3, r6
   845ba:	fa21 f305 	lsr.w	r3, r1, r5
   845be:	fa01 fb06 	lsl.w	fp, r1, r6
   845c2:	fa20 f505 	lsr.w	r5, r0, r5
   845c6:	433c      	orrs	r4, r7
   845c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   845cc:	fbb3 fcf8 	udiv	ip, r3, r8
   845d0:	fb08 331c 	mls	r3, r8, ip, r3
   845d4:	fa1f f984 	uxth.w	r9, r4
   845d8:	fb09 fa0c 	mul.w	sl, r9, ip
   845dc:	ea45 0b0b 	orr.w	fp, r5, fp
   845e0:	ea4f 451b 	mov.w	r5, fp, lsr #16
   845e4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   845e8:	459a      	cmp	sl, r3
   845ea:	fa02 f206 	lsl.w	r2, r2, r6
   845ee:	d904      	bls.n	845fa <__udivdi3+0x18e>
   845f0:	191b      	adds	r3, r3, r4
   845f2:	f10c 35ff 	add.w	r5, ip, #4294967295
   845f6:	d36f      	bcc.n	846d8 <__udivdi3+0x26c>
   845f8:	46ac      	mov	ip, r5
   845fa:	ebca 0303 	rsb	r3, sl, r3
   845fe:	fbb3 f5f8 	udiv	r5, r3, r8
   84602:	fb08 3315 	mls	r3, r8, r5, r3
   84606:	fb09 f905 	mul.w	r9, r9, r5
   8460a:	fa1f fb8b 	uxth.w	fp, fp
   8460e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   84612:	45b9      	cmp	r9, r7
   84614:	d904      	bls.n	84620 <__udivdi3+0x1b4>
   84616:	193f      	adds	r7, r7, r4
   84618:	f105 33ff 	add.w	r3, r5, #4294967295
   8461c:	d362      	bcc.n	846e4 <__udivdi3+0x278>
   8461e:	461d      	mov	r5, r3
   84620:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   84624:	fbac 2302 	umull	r2, r3, ip, r2
   84628:	ebc9 0707 	rsb	r7, r9, r7
   8462c:	429f      	cmp	r7, r3
   8462e:	f04f 0500 	mov.w	r5, #0
   84632:	d34a      	bcc.n	846ca <__udivdi3+0x25e>
   84634:	d046      	beq.n	846c4 <__udivdi3+0x258>
   84636:	4662      	mov	r2, ip
   84638:	462b      	mov	r3, r5
   8463a:	e75d      	b.n	844f8 <__udivdi3+0x8c>
   8463c:	4094      	lsls	r4, r2
   8463e:	f1c2 0920 	rsb	r9, r2, #32
   84642:	fa21 fc09 	lsr.w	ip, r1, r9
   84646:	4091      	lsls	r1, r2
   84648:	fa20 f909 	lsr.w	r9, r0, r9
   8464c:	0c26      	lsrs	r6, r4, #16
   8464e:	fbbc f8f6 	udiv	r8, ip, r6
   84652:	fb06 cc18 	mls	ip, r6, r8, ip
   84656:	b2a7      	uxth	r7, r4
   84658:	fb07 f308 	mul.w	r3, r7, r8
   8465c:	ea49 0901 	orr.w	r9, r9, r1
   84660:	ea4f 4119 	mov.w	r1, r9, lsr #16
   84664:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   84668:	4563      	cmp	r3, ip
   8466a:	fa00 f502 	lsl.w	r5, r0, r2
   8466e:	d909      	bls.n	84684 <__udivdi3+0x218>
   84670:	eb1c 0c04 	adds.w	ip, ip, r4
   84674:	f108 32ff 	add.w	r2, r8, #4294967295
   84678:	d23b      	bcs.n	846f2 <__udivdi3+0x286>
   8467a:	4563      	cmp	r3, ip
   8467c:	d939      	bls.n	846f2 <__udivdi3+0x286>
   8467e:	f1a8 0802 	sub.w	r8, r8, #2
   84682:	44a4      	add	ip, r4
   84684:	ebc3 0c0c 	rsb	ip, r3, ip
   84688:	fbbc f3f6 	udiv	r3, ip, r6
   8468c:	fb06 c113 	mls	r1, r6, r3, ip
   84690:	fb07 f203 	mul.w	r2, r7, r3
   84694:	fa1f f989 	uxth.w	r9, r9
   84698:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8469c:	428a      	cmp	r2, r1
   8469e:	d907      	bls.n	846b0 <__udivdi3+0x244>
   846a0:	1909      	adds	r1, r1, r4
   846a2:	f103 30ff 	add.w	r0, r3, #4294967295
   846a6:	d222      	bcs.n	846ee <__udivdi3+0x282>
   846a8:	428a      	cmp	r2, r1
   846aa:	d920      	bls.n	846ee <__udivdi3+0x282>
   846ac:	3b02      	subs	r3, #2
   846ae:	4421      	add	r1, r4
   846b0:	1a89      	subs	r1, r1, r2
   846b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   846b6:	e743      	b.n	84540 <__udivdi3+0xd4>
   846b8:	463a      	mov	r2, r7
   846ba:	e705      	b.n	844c8 <__udivdi3+0x5c>
   846bc:	4633      	mov	r3, r6
   846be:	e718      	b.n	844f2 <__udivdi3+0x86>
   846c0:	460a      	mov	r2, r1
   846c2:	e766      	b.n	84592 <__udivdi3+0x126>
   846c4:	40b0      	lsls	r0, r6
   846c6:	4290      	cmp	r0, r2
   846c8:	d2b5      	bcs.n	84636 <__udivdi3+0x1ca>
   846ca:	f10c 32ff 	add.w	r2, ip, #4294967295
   846ce:	2300      	movs	r3, #0
   846d0:	e712      	b.n	844f8 <__udivdi3+0x8c>
   846d2:	4633      	mov	r3, r6
   846d4:	4632      	mov	r2, r6
   846d6:	e70f      	b.n	844f8 <__udivdi3+0x8c>
   846d8:	459a      	cmp	sl, r3
   846da:	d98d      	bls.n	845f8 <__udivdi3+0x18c>
   846dc:	f1ac 0c02 	sub.w	ip, ip, #2
   846e0:	4423      	add	r3, r4
   846e2:	e78a      	b.n	845fa <__udivdi3+0x18e>
   846e4:	45b9      	cmp	r9, r7
   846e6:	d99a      	bls.n	8461e <__udivdi3+0x1b2>
   846e8:	3d02      	subs	r5, #2
   846ea:	4427      	add	r7, r4
   846ec:	e798      	b.n	84620 <__udivdi3+0x1b4>
   846ee:	4603      	mov	r3, r0
   846f0:	e7de      	b.n	846b0 <__udivdi3+0x244>
   846f2:	4690      	mov	r8, r2
   846f4:	e7c6      	b.n	84684 <__udivdi3+0x218>
   846f6:	3802      	subs	r0, #2
   846f8:	4421      	add	r1, r4
   846fa:	e735      	b.n	84568 <__udivdi3+0xfc>
   846fc:	72617453 	.word	0x72617453
   84700:	00726174 	.word	0x00726174
   84704:	00000001 	.word	0x00000001
   84708:	00000002 	.word	0x00000002
   8470c:	00000004 	.word	0x00000004
   84710:	00000008 	.word	0x00000008
   84714:	00000010 	.word	0x00000010
   84718:	00000020 	.word	0x00000020
   8471c:	00000040 	.word	0x00000040
   84720:	00000080 	.word	0x00000080
   84724:	00000100 	.word	0x00000100
   84728:	00000200 	.word	0x00000200
   8472c:	00000400 	.word	0x00000400
   84730:	00000043 	.word	0x00000043

00084734 <_global_impure_ptr>:
   84734:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   84744:	46454443 00000000 33323130 37363534     CDEF....01234567
   84754:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84764:	0000296c                                l)..

00084768 <zeroes.6721>:
   84768:	30303030 30303030 30303030 30303030     0000000000000000

00084778 <blanks.6720>:
   84778:	20202020 20202020 20202020 20202020                     

00084788 <_init>:
   84788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8478a:	bf00      	nop
   8478c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8478e:	bc08      	pop	{r3}
   84790:	469e      	mov	lr, r3
   84792:	4770      	bx	lr

00084794 <__init_array_start>:
   84794:	000827f1 	.word	0x000827f1

00084798 <__frame_dummy_init_array_entry>:
   84798:	00080119                                ....

0008479c <_fini>:
   8479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8479e:	bf00      	nop
   847a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   847a2:	bc08      	pop	{r3}
   847a4:	469e      	mov	lr, r3
   847a6:	4770      	bx	lr

000847a8 <__fini_array_start>:
   847a8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <g_interrupt_enabled>:
20070138:	00000001                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00084730 00000000 00000000 00000000     0G..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00083f01                                .?..
