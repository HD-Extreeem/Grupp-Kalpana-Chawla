
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ac4  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00085ac4  00085ac4  0000dac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ac  20070000  00085acc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001cc  200709ac  00086478  000109ac  2**2
                  ALLOC
  4 .stack        00002000  20070b78  00086644  000109ac  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109ac  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109d5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001018a  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b3e  00000000  00000000  00020bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000057e5  00000000  00000000  000236f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bb0  00000000  00000000  00028edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a58  00000000  00000000  00029a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000193ce  00000000  00000000  0002a4e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001220e  00000000  00000000  000438b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000620f0  00000000  00000000  00055ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002488  00000000  00000000  000b7bb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b78 	.word	0x20072b78
   80004:	000813f9 	.word	0x000813f9
   80008:	000813f5 	.word	0x000813f5
   8000c:	000813f5 	.word	0x000813f5
   80010:	000813f5 	.word	0x000813f5
   80014:	000813f5 	.word	0x000813f5
   80018:	000813f5 	.word	0x000813f5
	...
   8002c:	000813f5 	.word	0x000813f5
   80030:	000813f5 	.word	0x000813f5
   80034:	00000000 	.word	0x00000000
   80038:	000813f5 	.word	0x000813f5
   8003c:	000813f5 	.word	0x000813f5
   80040:	000813f5 	.word	0x000813f5
   80044:	000813f5 	.word	0x000813f5
   80048:	000813f5 	.word	0x000813f5
   8004c:	000813f5 	.word	0x000813f5
   80050:	000813f5 	.word	0x000813f5
   80054:	000813f5 	.word	0x000813f5
   80058:	000813f5 	.word	0x000813f5
   8005c:	000813f5 	.word	0x000813f5
   80060:	000813f5 	.word	0x000813f5
   80064:	000813f5 	.word	0x000813f5
   80068:	00000000 	.word	0x00000000
   8006c:	00081175 	.word	0x00081175
   80070:	00081189 	.word	0x00081189
   80074:	0008119d 	.word	0x0008119d
   80078:	000811b1 	.word	0x000811b1
	...
   80084:	00080431 	.word	0x00080431
   80088:	000813f5 	.word	0x000813f5
   8008c:	000813f5 	.word	0x000813f5
   80090:	000813f5 	.word	0x000813f5
   80094:	000813f5 	.word	0x000813f5
   80098:	000813f5 	.word	0x000813f5
   8009c:	000813f5 	.word	0x000813f5
   800a0:	000813f5 	.word	0x000813f5
   800a4:	00000000 	.word	0x00000000
   800a8:	000813f5 	.word	0x000813f5
   800ac:	000813f5 	.word	0x000813f5
   800b0:	000813f5 	.word	0x000813f5
   800b4:	000813f5 	.word	0x000813f5
   800b8:	000813f5 	.word	0x000813f5
   800bc:	000813f5 	.word	0x000813f5
   800c0:	000813f5 	.word	0x000813f5
   800c4:	000813f5 	.word	0x000813f5
   800c8:	000813f5 	.word	0x000813f5
   800cc:	000813f5 	.word	0x000813f5
   800d0:	000813f5 	.word	0x000813f5
   800d4:	000813f5 	.word	0x000813f5
   800d8:	000813f5 	.word	0x000813f5
   800dc:	000813f5 	.word	0x000813f5
   800e0:	000813f5 	.word	0x000813f5
   800e4:	000813f5 	.word	0x000813f5
   800e8:	000813f5 	.word	0x000813f5
   800ec:	000813f5 	.word	0x000813f5
   800f0:	000813f5 	.word	0x000813f5

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709ac 	.word	0x200709ac
   80110:	00000000 	.word	0x00000000
   80114:	00085acc 	.word	0x00085acc

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00085acc 	.word	0x00085acc
   8013c:	200709b0 	.word	0x200709b0
   80140:	00085acc 	.word	0x00085acc
   80144:	00000000 	.word	0x00000000

00080148 <main>:
// int e=0;
// double kp = 2;
// uint16_t speed = 1700;

int main(void)
{
   80148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8014c:	b089      	sub	sp, #36	; 0x24
	/* Initialize the SAM system */
	SystemInit();
   8014e:	4b2c      	ldr	r3, [pc, #176]	; (80200 <main+0xb8>)
   80150:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   80152:	4b2c      	ldr	r3, [pc, #176]	; (80204 <main+0xbc>)
   80154:	4798      	blx	r3
	configureConsole();
   80156:	4b2c      	ldr	r3, [pc, #176]	; (80208 <main+0xc0>)
   80158:	4798      	blx	r3
	configInterrupts();
   8015a:	4b2c      	ldr	r3, [pc, #176]	; (8020c <main+0xc4>)
   8015c:	4798      	blx	r3
	PWM_init();
   8015e:	4b2c      	ldr	r3, [pc, #176]	; (80210 <main+0xc8>)
   80160:	4798      	blx	r3
	printf("Startar");
   80162:	482c      	ldr	r0, [pc, #176]	; (80214 <main+0xcc>)
   80164:	4b2c      	ldr	r3, [pc, #176]	; (80218 <main+0xd0>)
   80166:	4798      	blx	r3
    delay_s(2);
   80168:	482c      	ldr	r0, [pc, #176]	; (8021c <main+0xd4>)
   8016a:	4b2d      	ldr	r3, [pc, #180]	; (80220 <main+0xd8>)
   8016c:	4798      	blx	r3
// 		printf("Klar!\n");
// 		rightWheel(1500);
// 		leftWheel(1500);
// 		delay_s(2);

		printf("Start!");
   8016e:	4e2a      	ldr	r6, [pc, #168]	; (80218 <main+0xd0>)
		int rot = calcluteRotationAngle(0,100,0,0,100,300);
   80170:	2400      	movs	r4, #0
   80172:	2500      	movs	r5, #0
   80174:	f04f 0a00 	mov.w	sl, #0
   80178:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80240 <main+0xf8>
		rotation(rot,130);
		delay_s(1);
		int dis = calculateDistance(0,0,100,300);
		printf("distance=%d\n",dis);
		moveTo(dis,1);
		delay_s(3);
   8017c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80244 <main+0xfc>
// 		printf("Klar!\n");
// 		rightWheel(1500);
// 		leftWheel(1500);
// 		delay_s(2);

		printf("Start!");
   80180:	4828      	ldr	r0, [pc, #160]	; (80224 <main+0xdc>)
   80182:	47b0      	blx	r6
		int rot = calcluteRotationAngle(0,100,0,0,100,300);
   80184:	e9cd 4500 	strd	r4, r5, [sp]
   80188:	e9cd 4502 	strd	r4, r5, [sp, #8]
   8018c:	e9cd ab04 	strd	sl, fp, [sp, #16]
   80190:	a319      	add	r3, pc, #100	; (adr r3, 801f8 <main+0xb0>)
   80192:	e9d3 2300 	ldrd	r2, r3, [r3]
   80196:	e9cd 2306 	strd	r2, r3, [sp, #24]
   8019a:	4620      	mov	r0, r4
   8019c:	4629      	mov	r1, r5
   8019e:	4652      	mov	r2, sl
   801a0:	465b      	mov	r3, fp
   801a2:	4f21      	ldr	r7, [pc, #132]	; (80228 <main+0xe0>)
   801a4:	47b8      	blx	r7
   801a6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80248 <main+0x100>
   801aa:	47c0      	blx	r8
   801ac:	4607      	mov	r7, r0
		printf("rot=%d\n",rot);
   801ae:	481f      	ldr	r0, [pc, #124]	; (8022c <main+0xe4>)
   801b0:	4639      	mov	r1, r7
   801b2:	47b0      	blx	r6
		rotation(rot,130);
   801b4:	4638      	mov	r0, r7
   801b6:	2182      	movs	r1, #130	; 0x82
   801b8:	4b1d      	ldr	r3, [pc, #116]	; (80230 <main+0xe8>)
   801ba:	4798      	blx	r3
		delay_s(1);
   801bc:	481d      	ldr	r0, [pc, #116]	; (80234 <main+0xec>)
   801be:	4f18      	ldr	r7, [pc, #96]	; (80220 <main+0xd8>)
   801c0:	47b8      	blx	r7
		int dis = calculateDistance(0,0,100,300);
   801c2:	e9cd ab00 	strd	sl, fp, [sp]
   801c6:	a30c      	add	r3, pc, #48	; (adr r3, 801f8 <main+0xb0>)
   801c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   801cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   801d0:	4620      	mov	r0, r4
   801d2:	4629      	mov	r1, r5
   801d4:	4622      	mov	r2, r4
   801d6:	462b      	mov	r3, r5
   801d8:	f8df c070 	ldr.w	ip, [pc, #112]	; 8024c <main+0x104>
   801dc:	47e0      	blx	ip
   801de:	47c0      	blx	r8
   801e0:	4680      	mov	r8, r0
		printf("distance=%d\n",dis);
   801e2:	4815      	ldr	r0, [pc, #84]	; (80238 <main+0xf0>)
   801e4:	4641      	mov	r1, r8
   801e6:	47b0      	blx	r6
		moveTo(dis,1);
   801e8:	4640      	mov	r0, r8
   801ea:	2101      	movs	r1, #1
   801ec:	4b13      	ldr	r3, [pc, #76]	; (8023c <main+0xf4>)
   801ee:	4798      	blx	r3
		delay_s(3);
   801f0:	4648      	mov	r0, r9
   801f2:	47b8      	blx	r7
   801f4:	e7c4      	b.n	80180 <main+0x38>
   801f6:	bf00      	nop
   801f8:	00000000 	.word	0x00000000
   801fc:	4072c000 	.word	0x4072c000
   80200:	2007000d 	.word	0x2007000d
   80204:	00080e09 	.word	0x00080e09
   80208:	000805ed 	.word	0x000805ed
   8020c:	000806d5 	.word	0x000806d5
   80210:	00080d4d 	.word	0x00080d4d
   80214:	000859ac 	.word	0x000859ac
   80218:	00082a69 	.word	0x00082a69
   8021c:	00b71b00 	.word	0x00b71b00
   80220:	20070001 	.word	0x20070001
   80224:	000859b4 	.word	0x000859b4
   80228:	00080a01 	.word	0x00080a01
   8022c:	000859bc 	.word	0x000859bc
   80230:	00080c11 	.word	0x00080c11
   80234:	005b8d80 	.word	0x005b8d80
   80238:	000859c4 	.word	0x000859c4
   8023c:	00080a81 	.word	0x00080a81
   80240:	40590000 	.word	0x40590000
   80244:	0112a880 	.word	0x0112a880
   80248:	00082375 	.word	0x00082375
   8024c:	0008077d 	.word	0x0008077d

00080250 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80254:	b083      	sub	sp, #12
   80256:	4605      	mov	r5, r0
	while (len) {
   80258:	4690      	mov	r8, r2
   8025a:	2a00      	cmp	r2, #0
   8025c:	d047      	beq.n	802ee <usart_serial_read_packet+0x9e>
   8025e:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80260:	4f25      	ldr	r7, [pc, #148]	; (802f8 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80262:	4c26      	ldr	r4, [pc, #152]	; (802fc <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80264:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80310 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80268:	f8df b094 	ldr.w	fp, [pc, #148]	; 80300 <usart_serial_read_packet+0xb0>
   8026c:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80270:	2300      	movs	r3, #0
   80272:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80274:	4b22      	ldr	r3, [pc, #136]	; (80300 <usart_serial_read_packet+0xb0>)
   80276:	429d      	cmp	r5, r3
   80278:	d106      	bne.n	80288 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   8027a:	4658      	mov	r0, fp
   8027c:	4649      	mov	r1, r9
   8027e:	4b21      	ldr	r3, [pc, #132]	; (80304 <usart_serial_read_packet+0xb4>)
   80280:	4798      	blx	r3
   80282:	2800      	cmp	r0, #0
   80284:	d1f9      	bne.n	8027a <usart_serial_read_packet+0x2a>
   80286:	e019      	b.n	802bc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80288:	4b1f      	ldr	r3, [pc, #124]	; (80308 <usart_serial_read_packet+0xb8>)
   8028a:	429d      	cmp	r5, r3
   8028c:	d109      	bne.n	802a2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8028e:	4699      	mov	r9, r3
   80290:	4648      	mov	r0, r9
   80292:	a901      	add	r1, sp, #4
   80294:	47a0      	blx	r4
   80296:	2800      	cmp	r0, #0
   80298:	d1fa      	bne.n	80290 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   8029a:	9b01      	ldr	r3, [sp, #4]
   8029c:	f806 3c01 	strb.w	r3, [r6, #-1]
   802a0:	e017      	b.n	802d2 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   802a2:	4b1a      	ldr	r3, [pc, #104]	; (8030c <usart_serial_read_packet+0xbc>)
   802a4:	429d      	cmp	r5, r3
   802a6:	d109      	bne.n	802bc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   802a8:	4699      	mov	r9, r3
   802aa:	4648      	mov	r0, r9
   802ac:	a901      	add	r1, sp, #4
   802ae:	47a0      	blx	r4
   802b0:	2800      	cmp	r0, #0
   802b2:	d1fa      	bne.n	802aa <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   802b4:	9b01      	ldr	r3, [sp, #4]
   802b6:	f806 3c01 	strb.w	r3, [r6, #-1]
   802ba:	e014      	b.n	802e6 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   802bc:	4555      	cmp	r5, sl
   802be:	d108      	bne.n	802d2 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   802c0:	4650      	mov	r0, sl
   802c2:	a901      	add	r1, sp, #4
   802c4:	47a0      	blx	r4
   802c6:	2800      	cmp	r0, #0
   802c8:	d1fa      	bne.n	802c0 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   802ca:	9b01      	ldr	r3, [sp, #4]
   802cc:	f806 3c01 	strb.w	r3, [r6, #-1]
   802d0:	e009      	b.n	802e6 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802d2:	42bd      	cmp	r5, r7
   802d4:	d107      	bne.n	802e6 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   802d6:	4638      	mov	r0, r7
   802d8:	a901      	add	r1, sp, #4
   802da:	47a0      	blx	r4
   802dc:	2800      	cmp	r0, #0
   802de:	d1fa      	bne.n	802d6 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   802e0:	9b01      	ldr	r3, [sp, #4]
   802e2:	f806 3c01 	strb.w	r3, [r6, #-1]
   802e6:	3601      	adds	r6, #1
   802e8:	f1b8 0801 	subs.w	r8, r8, #1
   802ec:	d1be      	bne.n	8026c <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   802ee:	2000      	movs	r0, #0
   802f0:	b003      	add	sp, #12
   802f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   802f6:	bf00      	nop
   802f8:	400a4000 	.word	0x400a4000
   802fc:	00080419 	.word	0x00080419
   80300:	400e0800 	.word	0x400e0800
   80304:	000803f1 	.word	0x000803f1
   80308:	40098000 	.word	0x40098000
   8030c:	4009c000 	.word	0x4009c000
   80310:	400a0000 	.word	0x400a0000

00080314 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80318:	460c      	mov	r4, r1
   8031a:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   8031c:	b960      	cbnz	r0, 80338 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8031e:	2a00      	cmp	r2, #0
   80320:	dd0e      	ble.n	80340 <_read+0x2c>
   80322:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80324:	4e09      	ldr	r6, [pc, #36]	; (8034c <_read+0x38>)
   80326:	4d0a      	ldr	r5, [pc, #40]	; (80350 <_read+0x3c>)
   80328:	6830      	ldr	r0, [r6, #0]
   8032a:	4621      	mov	r1, r4
   8032c:	682b      	ldr	r3, [r5, #0]
   8032e:	4798      	blx	r3
		ptr++;
   80330:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80332:	42bc      	cmp	r4, r7
   80334:	d1f8      	bne.n	80328 <_read+0x14>
   80336:	e006      	b.n	80346 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80338:	f04f 30ff 	mov.w	r0, #4294967295
   8033c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80340:	2000      	movs	r0, #0
   80342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80346:	4640      	mov	r0, r8
	}
	return nChars;
}
   80348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8034c:	20070b20 	.word	0x20070b20
   80350:	20070b18 	.word	0x20070b18

00080354 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80358:	460e      	mov	r6, r1
   8035a:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8035c:	3801      	subs	r0, #1
   8035e:	2802      	cmp	r0, #2
   80360:	d80f      	bhi.n	80382 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80362:	b192      	cbz	r2, 8038a <_write+0x36>
   80364:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80366:	f8df 803c 	ldr.w	r8, [pc, #60]	; 803a4 <_write+0x50>
   8036a:	4f0d      	ldr	r7, [pc, #52]	; (803a0 <_write+0x4c>)
   8036c:	f8d8 0000 	ldr.w	r0, [r8]
   80370:	5d31      	ldrb	r1, [r6, r4]
   80372:	683b      	ldr	r3, [r7, #0]
   80374:	4798      	blx	r3
   80376:	2800      	cmp	r0, #0
   80378:	db0a      	blt.n	80390 <_write+0x3c>
			return -1;
		}
		++nChars;
   8037a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8037c:	42a5      	cmp	r5, r4
   8037e:	d1f5      	bne.n	8036c <_write+0x18>
   80380:	e00a      	b.n	80398 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80382:	f04f 30ff 	mov.w	r0, #4294967295
   80386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8038a:	2000      	movs	r0, #0
   8038c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80390:	f04f 30ff 	mov.w	r0, #4294967295
   80394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80398:	4620      	mov	r0, r4
	}
	return nChars;
}
   8039a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8039e:	bf00      	nop
   803a0:	20070b1c 	.word	0x20070b1c
   803a4:	20070b20 	.word	0x20070b20

000803a8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   803a8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   803aa:	23ac      	movs	r3, #172	; 0xac
   803ac:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   803ae:	680a      	ldr	r2, [r1, #0]
   803b0:	684b      	ldr	r3, [r1, #4]
   803b2:	fbb2 f3f3 	udiv	r3, r2, r3
   803b6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   803b8:	1e5c      	subs	r4, r3, #1
   803ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   803be:	4294      	cmp	r4, r2
   803c0:	d80a      	bhi.n	803d8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   803c2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   803c4:	688b      	ldr	r3, [r1, #8]
   803c6:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   803c8:	f240 2302 	movw	r3, #514	; 0x202
   803cc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   803d0:	2350      	movs	r3, #80	; 0x50
   803d2:	6003      	str	r3, [r0, #0]

	return 0;
   803d4:	2000      	movs	r0, #0
   803d6:	e000      	b.n	803da <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   803d8:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   803da:	f85d 4b04 	ldr.w	r4, [sp], #4
   803de:	4770      	bx	lr

000803e0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   803e0:	6943      	ldr	r3, [r0, #20]
   803e2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   803e6:	bf1a      	itte	ne
   803e8:	61c1      	strne	r1, [r0, #28]
	return 0;
   803ea:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   803ec:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   803ee:	4770      	bx	lr

000803f0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   803f0:	6943      	ldr	r3, [r0, #20]
   803f2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   803f6:	bf1d      	ittte	ne
   803f8:	6983      	ldrne	r3, [r0, #24]
   803fa:	700b      	strbne	r3, [r1, #0]
	return 0;
   803fc:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   803fe:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80400:	4770      	bx	lr
   80402:	bf00      	nop

00080404 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80404:	6943      	ldr	r3, [r0, #20]
   80406:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8040a:	bf1d      	ittte	ne
   8040c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80410:	61c1      	strne	r1, [r0, #28]
	return 0;
   80412:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80414:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80416:	4770      	bx	lr

00080418 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80418:	6943      	ldr	r3, [r0, #20]
   8041a:	f013 0f01 	tst.w	r3, #1
   8041e:	d005      	beq.n	8042c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80420:	6983      	ldr	r3, [r0, #24]
   80422:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80426:	600b      	str	r3, [r1, #0]

	return 0;
   80428:	2000      	movs	r0, #0
   8042a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8042c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8042e:	4770      	bx	lr

00080430 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80430:	b500      	push	{lr}
   80432:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80434:	4813      	ldr	r0, [pc, #76]	; (80484 <USART0_Handler+0x54>)
   80436:	f10d 0107 	add.w	r1, sp, #7
   8043a:	2201      	movs	r2, #1
   8043c:	4b12      	ldr	r3, [pc, #72]	; (80488 <USART0_Handler+0x58>)
   8043e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80440:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80442:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80446:	2200      	movs	r2, #0
   80448:	4b10      	ldr	r3, [pc, #64]	; (8048c <USART0_Handler+0x5c>)
   8044a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   8044c:	4b10      	ldr	r3, [pc, #64]	; (80490 <USART0_Handler+0x60>)
   8044e:	781a      	ldrb	r2, [r3, #0]
   80450:	3201      	adds	r2, #1
   80452:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80454:	4b0f      	ldr	r3, [pc, #60]	; (80494 <USART0_Handler+0x64>)
   80456:	781b      	ldrb	r3, [r3, #0]
   80458:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8045c:	4a0e      	ldr	r2, [pc, #56]	; (80498 <USART0_Handler+0x68>)
   8045e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80460:	2b9b      	cmp	r3, #155	; 0x9b
   80462:	d103      	bne.n	8046c <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80464:	2200      	movs	r2, #0
   80466:	4b0b      	ldr	r3, [pc, #44]	; (80494 <USART0_Handler+0x64>)
   80468:	701a      	strb	r2, [r3, #0]
   8046a:	e002      	b.n	80472 <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   8046c:	3301      	adds	r3, #1
   8046e:	4a09      	ldr	r2, [pc, #36]	; (80494 <USART0_Handler+0x64>)
   80470:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80472:	2201      	movs	r2, #1
   80474:	4b05      	ldr	r3, [pc, #20]	; (8048c <USART0_Handler+0x5c>)
   80476:	701a      	strb	r2, [r3, #0]
   80478:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8047c:	b662      	cpsie	i
}
   8047e:	b003      	add	sp, #12
   80480:	f85d fb04 	ldr.w	pc, [sp], #4
   80484:	40098000 	.word	0x40098000
   80488:	00080251 	.word	0x00080251
   8048c:	2007013a 	.word	0x2007013a
   80490:	20070a65 	.word	0x20070a65
   80494:	20070a64 	.word	0x20070a64
   80498:	200709c8 	.word	0x200709c8

0008049c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8049c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8049e:	b083      	sub	sp, #12
   804a0:	4604      	mov	r4, r0
   804a2:	460d      	mov	r5, r1
	uint32_t val = 0;
   804a4:	2300      	movs	r3, #0
   804a6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   804a8:	4b1f      	ldr	r3, [pc, #124]	; (80528 <usart_serial_getchar+0x8c>)
   804aa:	4298      	cmp	r0, r3
   804ac:	d107      	bne.n	804be <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   804ae:	461f      	mov	r7, r3
   804b0:	4e1e      	ldr	r6, [pc, #120]	; (8052c <usart_serial_getchar+0x90>)
   804b2:	4638      	mov	r0, r7
   804b4:	4629      	mov	r1, r5
   804b6:	47b0      	blx	r6
   804b8:	2800      	cmp	r0, #0
   804ba:	d1fa      	bne.n	804b2 <usart_serial_getchar+0x16>
   804bc:	e019      	b.n	804f2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   804be:	4b1c      	ldr	r3, [pc, #112]	; (80530 <usart_serial_getchar+0x94>)
   804c0:	4298      	cmp	r0, r3
   804c2:	d109      	bne.n	804d8 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   804c4:	461f      	mov	r7, r3
   804c6:	4e1b      	ldr	r6, [pc, #108]	; (80534 <usart_serial_getchar+0x98>)
   804c8:	4638      	mov	r0, r7
   804ca:	a901      	add	r1, sp, #4
   804cc:	47b0      	blx	r6
   804ce:	2800      	cmp	r0, #0
   804d0:	d1fa      	bne.n	804c8 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   804d2:	9b01      	ldr	r3, [sp, #4]
   804d4:	702b      	strb	r3, [r5, #0]
   804d6:	e019      	b.n	8050c <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   804d8:	4b17      	ldr	r3, [pc, #92]	; (80538 <usart_serial_getchar+0x9c>)
   804da:	4298      	cmp	r0, r3
   804dc:	d109      	bne.n	804f2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   804de:	461e      	mov	r6, r3
   804e0:	4c14      	ldr	r4, [pc, #80]	; (80534 <usart_serial_getchar+0x98>)
   804e2:	4630      	mov	r0, r6
   804e4:	a901      	add	r1, sp, #4
   804e6:	47a0      	blx	r4
   804e8:	2800      	cmp	r0, #0
   804ea:	d1fa      	bne.n	804e2 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   804ec:	9b01      	ldr	r3, [sp, #4]
   804ee:	702b      	strb	r3, [r5, #0]
   804f0:	e018      	b.n	80524 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   804f2:	4b12      	ldr	r3, [pc, #72]	; (8053c <usart_serial_getchar+0xa0>)
   804f4:	429c      	cmp	r4, r3
   804f6:	d109      	bne.n	8050c <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   804f8:	461e      	mov	r6, r3
   804fa:	4c0e      	ldr	r4, [pc, #56]	; (80534 <usart_serial_getchar+0x98>)
   804fc:	4630      	mov	r0, r6
   804fe:	a901      	add	r1, sp, #4
   80500:	47a0      	blx	r4
   80502:	2800      	cmp	r0, #0
   80504:	d1fa      	bne.n	804fc <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80506:	9b01      	ldr	r3, [sp, #4]
   80508:	702b      	strb	r3, [r5, #0]
   8050a:	e00b      	b.n	80524 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8050c:	4b0c      	ldr	r3, [pc, #48]	; (80540 <usart_serial_getchar+0xa4>)
   8050e:	429c      	cmp	r4, r3
   80510:	d108      	bne.n	80524 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80512:	461e      	mov	r6, r3
   80514:	4c07      	ldr	r4, [pc, #28]	; (80534 <usart_serial_getchar+0x98>)
   80516:	4630      	mov	r0, r6
   80518:	a901      	add	r1, sp, #4
   8051a:	47a0      	blx	r4
   8051c:	2800      	cmp	r0, #0
   8051e:	d1fa      	bne.n	80516 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80520:	9b01      	ldr	r3, [sp, #4]
   80522:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80524:	b003      	add	sp, #12
   80526:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80528:	400e0800 	.word	0x400e0800
   8052c:	000803f1 	.word	0x000803f1
   80530:	40098000 	.word	0x40098000
   80534:	00080419 	.word	0x00080419
   80538:	4009c000 	.word	0x4009c000
   8053c:	400a0000 	.word	0x400a0000
   80540:	400a4000 	.word	0x400a4000

00080544 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80544:	b570      	push	{r4, r5, r6, lr}
   80546:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80548:	4b21      	ldr	r3, [pc, #132]	; (805d0 <usart_serial_putchar+0x8c>)
   8054a:	4298      	cmp	r0, r3
   8054c:	d107      	bne.n	8055e <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8054e:	461e      	mov	r6, r3
   80550:	4d20      	ldr	r5, [pc, #128]	; (805d4 <usart_serial_putchar+0x90>)
   80552:	4630      	mov	r0, r6
   80554:	4621      	mov	r1, r4
   80556:	47a8      	blx	r5
   80558:	2800      	cmp	r0, #0
   8055a:	d1fa      	bne.n	80552 <usart_serial_putchar+0xe>
   8055c:	e02b      	b.n	805b6 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8055e:	4b1e      	ldr	r3, [pc, #120]	; (805d8 <usart_serial_putchar+0x94>)
   80560:	4298      	cmp	r0, r3
   80562:	d107      	bne.n	80574 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80564:	461e      	mov	r6, r3
   80566:	4d1d      	ldr	r5, [pc, #116]	; (805dc <usart_serial_putchar+0x98>)
   80568:	4630      	mov	r0, r6
   8056a:	4621      	mov	r1, r4
   8056c:	47a8      	blx	r5
   8056e:	2800      	cmp	r0, #0
   80570:	d1fa      	bne.n	80568 <usart_serial_putchar+0x24>
   80572:	e022      	b.n	805ba <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80574:	4b1a      	ldr	r3, [pc, #104]	; (805e0 <usart_serial_putchar+0x9c>)
   80576:	4298      	cmp	r0, r3
   80578:	d107      	bne.n	8058a <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8057a:	461e      	mov	r6, r3
   8057c:	4d17      	ldr	r5, [pc, #92]	; (805dc <usart_serial_putchar+0x98>)
   8057e:	4630      	mov	r0, r6
   80580:	4621      	mov	r1, r4
   80582:	47a8      	blx	r5
   80584:	2800      	cmp	r0, #0
   80586:	d1fa      	bne.n	8057e <usart_serial_putchar+0x3a>
   80588:	e019      	b.n	805be <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8058a:	4b16      	ldr	r3, [pc, #88]	; (805e4 <usart_serial_putchar+0xa0>)
   8058c:	4298      	cmp	r0, r3
   8058e:	d107      	bne.n	805a0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80590:	461e      	mov	r6, r3
   80592:	4d12      	ldr	r5, [pc, #72]	; (805dc <usart_serial_putchar+0x98>)
   80594:	4630      	mov	r0, r6
   80596:	4621      	mov	r1, r4
   80598:	47a8      	blx	r5
   8059a:	2800      	cmp	r0, #0
   8059c:	d1fa      	bne.n	80594 <usart_serial_putchar+0x50>
   8059e:	e010      	b.n	805c2 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   805a0:	4b11      	ldr	r3, [pc, #68]	; (805e8 <usart_serial_putchar+0xa4>)
   805a2:	4298      	cmp	r0, r3
   805a4:	d10f      	bne.n	805c6 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   805a6:	461e      	mov	r6, r3
   805a8:	4d0c      	ldr	r5, [pc, #48]	; (805dc <usart_serial_putchar+0x98>)
   805aa:	4630      	mov	r0, r6
   805ac:	4621      	mov	r1, r4
   805ae:	47a8      	blx	r5
   805b0:	2800      	cmp	r0, #0
   805b2:	d1fa      	bne.n	805aa <usart_serial_putchar+0x66>
   805b4:	e009      	b.n	805ca <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   805b6:	2001      	movs	r0, #1
   805b8:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805ba:	2001      	movs	r0, #1
   805bc:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805be:	2001      	movs	r0, #1
   805c0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805c2:	2001      	movs	r0, #1
   805c4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   805c6:	2000      	movs	r0, #0
   805c8:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805ca:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   805cc:	bd70      	pop	{r4, r5, r6, pc}
   805ce:	bf00      	nop
   805d0:	400e0800 	.word	0x400e0800
   805d4:	000803e1 	.word	0x000803e1
   805d8:	40098000 	.word	0x40098000
   805dc:	00080405 	.word	0x00080405
   805e0:	4009c000 	.word	0x4009c000
   805e4:	400a0000 	.word	0x400a0000
   805e8:	400a4000 	.word	0x400a4000

000805ec <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   805ec:	b530      	push	{r4, r5, lr}
   805ee:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805f0:	2008      	movs	r0, #8
   805f2:	4d13      	ldr	r5, [pc, #76]	; (80640 <configureConsole+0x54>)
   805f4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   805f6:	4c13      	ldr	r4, [pc, #76]	; (80644 <configureConsole+0x58>)
   805f8:	4b13      	ldr	r3, [pc, #76]	; (80648 <configureConsole+0x5c>)
   805fa:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   805fc:	4a13      	ldr	r2, [pc, #76]	; (8064c <configureConsole+0x60>)
   805fe:	4b14      	ldr	r3, [pc, #80]	; (80650 <configureConsole+0x64>)
   80600:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80602:	4a14      	ldr	r2, [pc, #80]	; (80654 <configureConsole+0x68>)
   80604:	4b14      	ldr	r3, [pc, #80]	; (80658 <configureConsole+0x6c>)
   80606:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80608:	4b14      	ldr	r3, [pc, #80]	; (8065c <configureConsole+0x70>)
   8060a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8060c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80610:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80612:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80616:	9303      	str	r3, [sp, #12]
   80618:	2008      	movs	r0, #8
   8061a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8061c:	4620      	mov	r0, r4
   8061e:	a901      	add	r1, sp, #4
   80620:	4b0f      	ldr	r3, [pc, #60]	; (80660 <configureConsole+0x74>)
   80622:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80624:	4d0f      	ldr	r5, [pc, #60]	; (80664 <configureConsole+0x78>)
   80626:	682b      	ldr	r3, [r5, #0]
   80628:	6898      	ldr	r0, [r3, #8]
   8062a:	2100      	movs	r1, #0
   8062c:	4c0e      	ldr	r4, [pc, #56]	; (80668 <configureConsole+0x7c>)
   8062e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80630:	682b      	ldr	r3, [r5, #0]
   80632:	6858      	ldr	r0, [r3, #4]
   80634:	2100      	movs	r1, #0
   80636:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   80638:	2000      	movs	r0, #0
   8063a:	b005      	add	sp, #20
   8063c:	bd30      	pop	{r4, r5, pc}
   8063e:	bf00      	nop
   80640:	000811c5 	.word	0x000811c5
   80644:	400e0800 	.word	0x400e0800
   80648:	20070b20 	.word	0x20070b20
   8064c:	00080545 	.word	0x00080545
   80650:	20070b1c 	.word	0x20070b1c
   80654:	0008049d 	.word	0x0008049d
   80658:	20070b18 	.word	0x20070b18
   8065c:	0501bd00 	.word	0x0501bd00
   80660:	000803a9 	.word	0x000803a9
   80664:	20070570 	.word	0x20070570
   80668:	00082b25 	.word	0x00082b25

0008066c <pin12_edge_handler>:


}

// Handler which calls when pin 53 is toggle.
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   8066c:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   8066e:	4808      	ldr	r0, [pc, #32]	; (80690 <pin12_edge_handler+0x24>)
   80670:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80678:	4b06      	ldr	r3, [pc, #24]	; (80694 <pin12_edge_handler+0x28>)
   8067a:	4798      	blx	r3
   8067c:	b130      	cbz	r0, 8068c <pin12_edge_handler+0x20>
		//increase the counter value
		counter_2++;
   8067e:	4b06      	ldr	r3, [pc, #24]	; (80698 <pin12_edge_handler+0x2c>)
   80680:	881a      	ldrh	r2, [r3, #0]
   80682:	3201      	adds	r2, #1
   80684:	801a      	strh	r2, [r3, #0]
		c2Loop = true;
   80686:	2201      	movs	r2, #1
   80688:	4b04      	ldr	r3, [pc, #16]	; (8069c <pin12_edge_handler+0x30>)
   8068a:	701a      	strb	r2, [r3, #0]
   8068c:	bd08      	pop	{r3, pc}
   8068e:	bf00      	nop
   80690:	400e1200 	.word	0x400e1200
   80694:	00080e79 	.word	0x00080e79
   80698:	20070a68 	.word	0x20070a68
   8069c:	20070139 	.word	0x20070139

000806a0 <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}
}

// Handler which calls when pin 51 is toggle.
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   806a0:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   806a2:	4808      	ldr	r0, [pc, #32]	; (806c4 <pin14_edge_handler+0x24>)
   806a4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   806ac:	4b06      	ldr	r3, [pc, #24]	; (806c8 <pin14_edge_handler+0x28>)
   806ae:	4798      	blx	r3
   806b0:	b130      	cbz	r0, 806c0 <pin14_edge_handler+0x20>
	//Increase the counter value
			counter_1++;
   806b2:	4b06      	ldr	r3, [pc, #24]	; (806cc <pin14_edge_handler+0x2c>)
   806b4:	881a      	ldrh	r2, [r3, #0]
   806b6:	3201      	adds	r2, #1
   806b8:	801a      	strh	r2, [r3, #0]
			c1Loop = true;
   806ba:	2201      	movs	r2, #1
   806bc:	4b04      	ldr	r3, [pc, #16]	; (806d0 <pin14_edge_handler+0x30>)
   806be:	701a      	strb	r2, [r3, #0]
   806c0:	bd08      	pop	{r3, pc}
   806c2:	bf00      	nop
   806c4:	400e1000 	.word	0x400e1000
   806c8:	00080e79 	.word	0x00080e79
   806cc:	20070a66 	.word	0x20070a66
   806d0:	20070138 	.word	0x20070138

000806d4 <configInterrupts>:
 uint16_t counter_2 = 0;
 bool c1Loop = true;
 bool c2Loop = true;


void configInterrupts(void){
   806d4:	b570      	push	{r4, r5, r6, lr}
   806d6:	b082      	sub	sp, #8

	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   806d8:	200c      	movs	r0, #12
   806da:	4c1a      	ldr	r4, [pc, #104]	; (80744 <configInterrupts+0x70>)
   806dc:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);
   806de:	200d      	movs	r0, #13
   806e0:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   806e2:	4d19      	ldr	r5, [pc, #100]	; (80748 <configInterrupts+0x74>)
   806e4:	4628      	mov	r0, r5
   806e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   806ea:	2201      	movs	r2, #1
   806ec:	4e17      	ldr	r6, [pc, #92]	; (8074c <configInterrupts+0x78>)
   806ee:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   806f0:	4c17      	ldr	r4, [pc, #92]	; (80750 <configInterrupts+0x7c>)
   806f2:	4620      	mov	r0, r4
   806f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   806f8:	2201      	movs	r2, #1
   806fa:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   806fc:	4b15      	ldr	r3, [pc, #84]	; (80754 <configInterrupts+0x80>)
   806fe:	9300      	str	r3, [sp, #0]
   80700:	4628      	mov	r0, r5
   80702:	210d      	movs	r1, #13
   80704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80708:	2340      	movs	r3, #64	; 0x40
   8070a:	4e13      	ldr	r6, [pc, #76]	; (80758 <configInterrupts+0x84>)
   8070c:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   8070e:	4b13      	ldr	r3, [pc, #76]	; (8075c <configInterrupts+0x88>)
   80710:	9300      	str	r3, [sp, #0]
   80712:	4620      	mov	r0, r4
   80714:	210c      	movs	r1, #12
   80716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8071a:	2340      	movs	r3, #64	; 0x40
   8071c:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   8071e:	4628      	mov	r0, r5
   80720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80724:	4d0e      	ldr	r5, [pc, #56]	; (80760 <configInterrupts+0x8c>)
   80726:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   80728:	4620      	mov	r0, r4
   8072a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8072e:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80730:	4b0c      	ldr	r3, [pc, #48]	; (80764 <configInterrupts+0x90>)
   80732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80736:	601a      	str	r2, [r3, #0]
   80738:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8073c:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);


}
   8073e:	b002      	add	sp, #8
   80740:	bd70      	pop	{r4, r5, r6, pc}
   80742:	bf00      	nop
   80744:	000811c5 	.word	0x000811c5
   80748:	400e1200 	.word	0x400e1200
   8074c:	00080ed1 	.word	0x00080ed1
   80750:	400e1000 	.word	0x400e1000
   80754:	0008066d 	.word	0x0008066d
   80758:	00081139 	.word	0x00081139
   8075c:	000806a1 	.word	0x000806a1
   80760:	00080f5d 	.word	0x00080f5d
   80764:	e000e100 	.word	0xe000e100

00080768 <reset_Counter>:
			//printf("\n c2 = %d",counter_2);
	}
}

void reset_Counter(void){
	counter_1=0;
   80768:	2300      	movs	r3, #0
   8076a:	4a02      	ldr	r2, [pc, #8]	; (80774 <reset_Counter+0xc>)
   8076c:	8013      	strh	r3, [r2, #0]
	counter_2=0;
   8076e:	4a02      	ldr	r2, [pc, #8]	; (80778 <reset_Counter+0x10>)
   80770:	8013      	strh	r3, [r2, #0]
   80772:	4770      	bx	lr
   80774:	20070a66 	.word	0x20070a66
   80778:	20070a68 	.word	0x20070a68

0008077c <calculateDistance>:
   @param Xb the x coordinate for B
   @param Ya the y coordinate for A
   @param Yb the y coordinate for B
   return distance the distance between A and B
**/
double calculateDistance (double Xa, double Ya, double Xb, double Yb){
   8077c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80780:	4606      	mov	r6, r0
   80782:	460f      	mov	r7, r1
   80784:	4614      	mov	r4, r2
   80786:	461d      	mov	r5, r3
	double distance;
	double deltaX = Xb - Xa;
   80788:	f8df a054 	ldr.w	sl, [pc, #84]	; 807e0 <calculateDistance+0x64>
   8078c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   80790:	4632      	mov	r2, r6
   80792:	463b      	mov	r3, r7
   80794:	47d0      	blx	sl
   80796:	4680      	mov	r8, r0
   80798:	4689      	mov	r9, r1
	double deltaY = Yb - Ya;
   8079a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   8079e:	4622      	mov	r2, r4
   807a0:	462b      	mov	r3, r5
   807a2:	47d0      	blx	sl
   807a4:	4604      	mov	r4, r0
   807a6:	460d      	mov	r5, r1
	distance = sqrt((deltaX*deltaX) + (deltaY*deltaY));
   807a8:	f8df a038 	ldr.w	sl, [pc, #56]	; 807e4 <calculateDistance+0x68>
   807ac:	f8df b038 	ldr.w	fp, [pc, #56]	; 807e8 <calculateDistance+0x6c>
   807b0:	4640      	mov	r0, r8
   807b2:	4649      	mov	r1, r9
   807b4:	4642      	mov	r2, r8
   807b6:	464b      	mov	r3, r9
   807b8:	47d0      	blx	sl
   807ba:	4606      	mov	r6, r0
   807bc:	460f      	mov	r7, r1
   807be:	4620      	mov	r0, r4
   807c0:	4629      	mov	r1, r5
   807c2:	4622      	mov	r2, r4
   807c4:	462b      	mov	r3, r5
   807c6:	47d0      	blx	sl
   807c8:	4602      	mov	r2, r0
   807ca:	460b      	mov	r3, r1
   807cc:	4630      	mov	r0, r6
   807ce:	4639      	mov	r1, r7
   807d0:	47d8      	blx	fp
   807d2:	4b02      	ldr	r3, [pc, #8]	; (807dc <calculateDistance+0x60>)
   807d4:	4798      	blx	r3
	return distance;
}
   807d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807da:	bf00      	nop
   807dc:	00081851 	.word	0x00081851
   807e0:	00081ad9 	.word	0x00081ad9
   807e4:	00081e41 	.word	0x00081e41
   807e8:	00081add 	.word	0x00081add
   807ec:	00000000 	.word	0x00000000

000807f0 <calculateAzimuthAngle>:
   @param Xb the x coordinate for B
   @param Ya the y coordinate for A
   @param Yb the y coordinate for B
   return azimutAngle the azimuth angle from A to B
**/
double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
   807f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807f4:	4604      	mov	r4, r0
   807f6:	460d      	mov	r5, r1
   807f8:	4616      	mov	r6, r2
   807fa:	461f      	mov	r7, r3
	double azimutAngle = 0;
	double deltaX = Xb-Xa;
   807fc:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 809f4 <calculateAzimuthAngle+0x204>
   80800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   80804:	4622      	mov	r2, r4
   80806:	462b      	mov	r3, r5
   80808:	47c0      	blx	r8
   8080a:	4604      	mov	r4, r0
   8080c:	460d      	mov	r5, r1
	double deltaY = Yb-Ya;
   8080e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   80812:	4632      	mov	r2, r6
   80814:	463b      	mov	r3, r7
   80816:	47c0      	blx	r8
   80818:	4606      	mov	r6, r0
   8081a:	460f      	mov	r7, r1
	
	// if A and B has same coordinates
	if ( (deltaX == 0) && (deltaY == 0) )
   8081c:	4620      	mov	r0, r4
   8081e:	4629      	mov	r1, r5
   80820:	2200      	movs	r2, #0
   80822:	2300      	movs	r3, #0
   80824:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 809d0 <calculateAzimuthAngle+0x1e0>
   80828:	47e0      	blx	ip
   8082a:	b1a8      	cbz	r0, 80858 <calculateAzimuthAngle+0x68>
   8082c:	4630      	mov	r0, r6
   8082e:	4639      	mov	r1, r7
   80830:	2200      	movs	r2, #0
   80832:	2300      	movs	r3, #0
   80834:	4c66      	ldr	r4, [pc, #408]	; (809d0 <calculateAzimuthAngle+0x1e0>)
   80836:	47a0      	blx	r4
   80838:	2800      	cmp	r0, #0
   8083a:	f040 80aa 	bne.w	80992 <calculateAzimuthAngle+0x1a2>
		azimutAngle = 0;
	} 
	// if A and B has same x coordinate
	else if (deltaX == 0)
	{
		if (deltaY>0)
   8083e:	4630      	mov	r0, r6
   80840:	4639      	mov	r1, r7
   80842:	2200      	movs	r2, #0
   80844:	2300      	movs	r3, #0
   80846:	4c63      	ldr	r4, [pc, #396]	; (809d4 <calculateAzimuthAngle+0x1e4>)
   80848:	47a0      	blx	r4
   8084a:	2800      	cmp	r0, #0
   8084c:	f000 80a5 	beq.w	8099a <calculateAzimuthAngle+0x1aa>
		{
			azimutAngle = 0;
   80850:	2000      	movs	r0, #0
   80852:	2100      	movs	r1, #0
   80854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			azimutAngle = 180;
		}
		
	}
	// if A and B has same y coordinate
	else if (deltaY == 0)
   80858:	4630      	mov	r0, r6
   8085a:	4639      	mov	r1, r7
   8085c:	2200      	movs	r2, #0
   8085e:	2300      	movs	r3, #0
   80860:	f8df c16c 	ldr.w	ip, [pc, #364]	; 809d0 <calculateAzimuthAngle+0x1e0>
   80864:	47e0      	blx	ip
   80866:	b160      	cbz	r0, 80882 <calculateAzimuthAngle+0x92>
	{
		if (deltaX>0)
   80868:	4620      	mov	r0, r4
   8086a:	4629      	mov	r1, r5
   8086c:	2200      	movs	r2, #0
   8086e:	2300      	movs	r3, #0
   80870:	4c58      	ldr	r4, [pc, #352]	; (809d4 <calculateAzimuthAngle+0x1e4>)
   80872:	47a0      	blx	r4
   80874:	2800      	cmp	r0, #0
   80876:	f000 8094 	beq.w	809a2 <calculateAzimuthAngle+0x1b2>
		{
			azimutAngle = 90;
   8087a:	2000      	movs	r0, #0
   8087c:	4956      	ldr	r1, [pc, #344]	; (809d8 <calculateAzimuthAngle+0x1e8>)
   8087e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		
	}
	else
	{   // angle is between 0 to 90 degree
		if ( (deltaX > 0) && (deltaY > 0 ) )
   80882:	4620      	mov	r0, r4
   80884:	4629      	mov	r1, r5
   80886:	2200      	movs	r2, #0
   80888:	2300      	movs	r3, #0
   8088a:	f8df c148 	ldr.w	ip, [pc, #328]	; 809d4 <calculateAzimuthAngle+0x1e4>
   8088e:	47e0      	blx	ip
   80890:	b1b0      	cbz	r0, 808c0 <calculateAzimuthAngle+0xd0>
   80892:	4630      	mov	r0, r6
   80894:	4639      	mov	r1, r7
   80896:	2200      	movs	r2, #0
   80898:	2300      	movs	r3, #0
   8089a:	f8df c138 	ldr.w	ip, [pc, #312]	; 809d4 <calculateAzimuthAngle+0x1e4>
   8089e:	47e0      	blx	ip
   808a0:	b1b0      	cbz	r0, 808d0 <calculateAzimuthAngle+0xe0>
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   808a2:	4620      	mov	r0, r4
   808a4:	4629      	mov	r1, r5
   808a6:	4632      	mov	r2, r6
   808a8:	463b      	mov	r3, r7
   808aa:	4c4c      	ldr	r4, [pc, #304]	; (809dc <calculateAzimuthAngle+0x1ec>)
   808ac:	47a0      	blx	r4
   808ae:	4b4c      	ldr	r3, [pc, #304]	; (809e0 <calculateAzimuthAngle+0x1f0>)
   808b0:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   808b2:	a343      	add	r3, pc, #268	; (adr r3, 809c0 <calculateAzimuthAngle+0x1d0>)
   808b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   808b8:	4c4a      	ldr	r4, [pc, #296]	; (809e4 <calculateAzimuthAngle+0x1f4>)
   808ba:	47a0      	blx	r4
	}
	else
	{   // angle is between 0 to 90 degree
		if ( (deltaX > 0) && (deltaY > 0 ) )
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   808bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} 
		// the angle is between 90 to 180 degree
		else if ( (deltaX > 0) && (deltaY < 0 ) )
   808c0:	4620      	mov	r0, r4
   808c2:	4629      	mov	r1, r5
   808c4:	2200      	movs	r2, #0
   808c6:	2300      	movs	r3, #0
   808c8:	f8df c108 	ldr.w	ip, [pc, #264]	; 809d4 <calculateAzimuthAngle+0x1e4>
   808cc:	47e0      	blx	ip
   808ce:	b1d0      	cbz	r0, 80906 <calculateAzimuthAngle+0x116>
   808d0:	4630      	mov	r0, r6
   808d2:	4639      	mov	r1, r7
   808d4:	2200      	movs	r2, #0
   808d6:	2300      	movs	r3, #0
   808d8:	f8df c11c 	ldr.w	ip, [pc, #284]	; 809f8 <calculateAzimuthAngle+0x208>
   808dc:	47e0      	blx	ip
   808de:	b190      	cbz	r0, 80906 <calculateAzimuthAngle+0x116>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   808e0:	4620      	mov	r0, r4
   808e2:	4629      	mov	r1, r5
   808e4:	4632      	mov	r2, r6
   808e6:	463b      	mov	r3, r7
   808e8:	4c3c      	ldr	r4, [pc, #240]	; (809dc <calculateAzimuthAngle+0x1ec>)
   808ea:	47a0      	blx	r4
   808ec:	4b3c      	ldr	r3, [pc, #240]	; (809e0 <calculateAzimuthAngle+0x1f0>)
   808ee:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   808f0:	a333      	add	r3, pc, #204	; (adr r3, 809c0 <calculateAzimuthAngle+0x1d0>)
   808f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   808f6:	4c3b      	ldr	r4, [pc, #236]	; (809e4 <calculateAzimuthAngle+0x1f4>)
   808f8:	47a0      	blx	r4
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
		} 
		// the angle is between 90 to 180 degree
		else if ( (deltaX > 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   808fa:	2200      	movs	r2, #0
   808fc:	4b3a      	ldr	r3, [pc, #232]	; (809e8 <calculateAzimuthAngle+0x1f8>)
   808fe:	4c3b      	ldr	r4, [pc, #236]	; (809ec <calculateAzimuthAngle+0x1fc>)
   80900:	47a0      	blx	r4
   80902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		// the angle is between 180 to 270 degree
		else if ( (deltaX < 0) && (deltaY < 0 ) )
   80906:	4620      	mov	r0, r4
   80908:	4629      	mov	r1, r5
   8090a:	2200      	movs	r2, #0
   8090c:	2300      	movs	r3, #0
   8090e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 809f8 <calculateAzimuthAngle+0x208>
   80912:	47e0      	blx	ip
   80914:	b1d0      	cbz	r0, 8094c <calculateAzimuthAngle+0x15c>
   80916:	4630      	mov	r0, r6
   80918:	4639      	mov	r1, r7
   8091a:	2200      	movs	r2, #0
   8091c:	2300      	movs	r3, #0
   8091e:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 809f8 <calculateAzimuthAngle+0x208>
   80922:	47e0      	blx	ip
   80924:	b1d0      	cbz	r0, 8095c <calculateAzimuthAngle+0x16c>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   80926:	4620      	mov	r0, r4
   80928:	4629      	mov	r1, r5
   8092a:	4632      	mov	r2, r6
   8092c:	463b      	mov	r3, r7
   8092e:	4c2b      	ldr	r4, [pc, #172]	; (809dc <calculateAzimuthAngle+0x1ec>)
   80930:	47a0      	blx	r4
   80932:	4b2b      	ldr	r3, [pc, #172]	; (809e0 <calculateAzimuthAngle+0x1f0>)
   80934:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   80936:	a322      	add	r3, pc, #136	; (adr r3, 809c0 <calculateAzimuthAngle+0x1d0>)
   80938:	e9d3 2300 	ldrd	r2, r3, [r3]
   8093c:	4c29      	ldr	r4, [pc, #164]	; (809e4 <calculateAzimuthAngle+0x1f4>)
   8093e:	47a0      	blx	r4
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
		}
		// the angle is between 180 to 270 degree
		else if ( (deltaX < 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   80940:	2200      	movs	r2, #0
   80942:	4b29      	ldr	r3, [pc, #164]	; (809e8 <calculateAzimuthAngle+0x1f8>)
   80944:	4c29      	ldr	r4, [pc, #164]	; (809ec <calculateAzimuthAngle+0x1fc>)
   80946:	47a0      	blx	r4
   80948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		// the angle is between 270 to 360 degree
		else if ( (deltaX < 0) && (deltaY > 0 ) )
   8094c:	4620      	mov	r0, r4
   8094e:	4629      	mov	r1, r5
   80950:	2200      	movs	r2, #0
   80952:	2300      	movs	r3, #0
   80954:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 809f8 <calculateAzimuthAngle+0x208>
   80958:	47e0      	blx	ip
   8095a:	b338      	cbz	r0, 809ac <calculateAzimuthAngle+0x1bc>
   8095c:	4630      	mov	r0, r6
   8095e:	4639      	mov	r1, r7
   80960:	2200      	movs	r2, #0
   80962:	2300      	movs	r3, #0
   80964:	f8df c06c 	ldr.w	ip, [pc, #108]	; 809d4 <calculateAzimuthAngle+0x1e4>
   80968:	47e0      	blx	ip
   8096a:	b318      	cbz	r0, 809b4 <calculateAzimuthAngle+0x1c4>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   8096c:	4620      	mov	r0, r4
   8096e:	4629      	mov	r1, r5
   80970:	4632      	mov	r2, r6
   80972:	463b      	mov	r3, r7
   80974:	4c19      	ldr	r4, [pc, #100]	; (809dc <calculateAzimuthAngle+0x1ec>)
   80976:	47a0      	blx	r4
   80978:	4b19      	ldr	r3, [pc, #100]	; (809e0 <calculateAzimuthAngle+0x1f0>)
   8097a:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   8097c:	a310      	add	r3, pc, #64	; (adr r3, 809c0 <calculateAzimuthAngle+0x1d0>)
   8097e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80982:	4c18      	ldr	r4, [pc, #96]	; (809e4 <calculateAzimuthAngle+0x1f4>)
   80984:	47a0      	blx	r4
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
		}
		// the angle is between 270 to 360 degree
		else if ( (deltaX < 0) && (deltaY > 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   80986:	2200      	movs	r2, #0
   80988:	4b19      	ldr	r3, [pc, #100]	; (809f0 <calculateAzimuthAngle+0x200>)
   8098a:	4c18      	ldr	r4, [pc, #96]	; (809ec <calculateAzimuthAngle+0x1fc>)
   8098c:	47a0      	blx	r4
   8098e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	double deltaY = Yb-Ya;
	
	// if A and B has same coordinates
	if ( (deltaX == 0) && (deltaY == 0) )
	{
		azimutAngle = 0;
   80992:	2000      	movs	r0, #0
   80994:	2100      	movs	r1, #0
   80996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 0;
		} 
		else
		{
			azimutAngle = 180;
   8099a:	2000      	movs	r0, #0
   8099c:	4912      	ldr	r1, [pc, #72]	; (809e8 <calculateAzimuthAngle+0x1f8>)
   8099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 90;
		} 
		else
		{
			azimutAngle = 270;
   809a2:	a109      	add	r1, pc, #36	; (adr r1, 809c8 <calculateAzimuthAngle+0x1d8>)
   809a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   809a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   @param Ya the y coordinate for A
   @param Yb the y coordinate for B
   return azimutAngle the azimuth angle from A to B
**/
double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
	double azimutAngle = 0;
   809ac:	2000      	movs	r0, #0
   809ae:	2100      	movs	r1, #0
   809b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809b4:	2000      	movs	r0, #0
   809b6:	2100      	movs	r1, #0
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
		}
	}
	
	return azimutAngle;
}
   809b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809bc:	f3af 8000 	nop.w
   809c0:	1a63c1f8 	.word	0x1a63c1f8
   809c4:	404ca5dc 	.word	0x404ca5dc
   809c8:	00000000 	.word	0x00000000
   809cc:	4070e000 	.word	0x4070e000
   809d0:	00082311 	.word	0x00082311
   809d4:	00082361 	.word	0x00082361
   809d8:	40568000 	.word	0x40568000
   809dc:	00082095 	.word	0x00082095
   809e0:	000814f9 	.word	0x000814f9
   809e4:	00081e41 	.word	0x00081e41
   809e8:	40668000 	.word	0x40668000
   809ec:	00081add 	.word	0x00081add
   809f0:	40768000 	.word	0x40768000
   809f4:	00081ad9 	.word	0x00081ad9
   809f8:	00082325 	.word	0x00082325
   809fc:	f3af 8000 	nop.w

00080a00 <calcluteRotationAngle>:
   @param Ya the y coordinate for A
   @param Yb the x coordinate for B
   @param Yc the y coordinate for C
   return rotationAngle the rotation angle from A to target C
   **/
double calcluteRotationAngle (double Xa, double Ya, double Xb, double Yb, double Xc, double Yc){
   80a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80a04:	b084      	sub	sp, #16
   80a06:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
   80a0a:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
	
	double AoB = calculateAzimuthAngle(Xa, Ya, Xb, Yb);
   80a0e:	e9cd 4500 	strd	r4, r5, [sp]
   80a12:	e9cd 8902 	strd	r8, r9, [sp, #8]
   80a16:	f8df a064 	ldr.w	sl, [pc, #100]	; 80a7c <calcluteRotationAngle+0x7c>
   80a1a:	47d0      	blx	sl
   80a1c:	4606      	mov	r6, r0
   80a1e:	460f      	mov	r7, r1
	double BoC = calculateAzimuthAngle(Xb, Yb, Xc, Yc);
   80a20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   80a24:	e9cd 2300 	strd	r2, r3, [sp]
   80a28:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   80a2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   80a30:	4620      	mov	r0, r4
   80a32:	4629      	mov	r1, r5
   80a34:	4642      	mov	r2, r8
   80a36:	464b      	mov	r3, r9
   80a38:	47d0      	blx	sl
	double rotationAngle = BoC-AoB;
   80a3a:	4632      	mov	r2, r6
   80a3c:	463b      	mov	r3, r7
   80a3e:	4c0b      	ldr	r4, [pc, #44]	; (80a6c <calcluteRotationAngle+0x6c>)
   80a40:	47a0      	blx	r4
   80a42:	4604      	mov	r4, r0
   80a44:	460d      	mov	r5, r1
	if (rotationAngle > 180)
   80a46:	2200      	movs	r2, #0
   80a48:	4b09      	ldr	r3, [pc, #36]	; (80a70 <calcluteRotationAngle+0x70>)
   80a4a:	4e0a      	ldr	r6, [pc, #40]	; (80a74 <calcluteRotationAngle+0x74>)
   80a4c:	47b0      	blx	r6
   80a4e:	b138      	cbz	r0, 80a60 <calcluteRotationAngle+0x60>
	{
		rotationAngle =  rotationAngle - 360;
   80a50:	4620      	mov	r0, r4
   80a52:	4629      	mov	r1, r5
   80a54:	2200      	movs	r2, #0
   80a56:	4b08      	ldr	r3, [pc, #32]	; (80a78 <calcluteRotationAngle+0x78>)
   80a58:	4c04      	ldr	r4, [pc, #16]	; (80a6c <calcluteRotationAngle+0x6c>)
   80a5a:	47a0      	blx	r4
   80a5c:	4604      	mov	r4, r0
   80a5e:	460d      	mov	r5, r1
	}
	return rotationAngle;
   80a60:	4620      	mov	r0, r4
   80a62:	4629      	mov	r1, r5
   80a64:	b004      	add	sp, #16
   80a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a6a:	bf00      	nop
   80a6c:	00081ad9 	.word	0x00081ad9
   80a70:	40668000 	.word	0x40668000
   80a74:	00082361 	.word	0x00082361
   80a78:	40768000 	.word	0x40768000
   80a7c:	000807f1 	.word	0x000807f1

00080a80 <moveTo>:
This method moveTo handle position moving for a certain distance and direction
Method uses a PID controller for smoother movment of the robot
	@param distance the distance which the robot need to move in centimeters
	@param direction the direction robot need to move forward or backwards
**/
void moveTo (int distance, int direction){
   80a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float totalPulses = (distance/1.38); //Calculate the total pulses needed to move to destination
   80a84:	4b50      	ldr	r3, [pc, #320]	; (80bc8 <moveTo+0x148>)
   80a86:	4798      	blx	r3
   80a88:	a34b      	add	r3, pc, #300	; (adr r3, 80bb8 <moveTo+0x138>)
   80a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   80a8e:	4c4f      	ldr	r4, [pc, #316]	; (80bcc <moveTo+0x14c>)
   80a90:	47a0      	blx	r4
   80a92:	4b4f      	ldr	r3, [pc, #316]	; (80bd0 <moveTo+0x150>)
   80a94:	4798      	blx	r3
   80a96:	4606      	mov	r6, r0
  int dPart=0; //Variable for the D-controller to keep calculated error*gain
	int kp=10; //Gain for the P-controller
  int kd=2; //Gain for the D-controller
  int ki=2; //Gain for the I-controller
	float totMovement = 0; //Variable to store totalmovement during the transportation
	delay_us(300);
   80a98:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   80a9c:	4c4d      	ldr	r4, [pc, #308]	; (80bd4 <moveTo+0x154>)
   80a9e:	47a0      	blx	r4
	reset_Counter(); //Reset counter for encoders for wheel to ensure counter reseted for next movement
   80aa0:	4b4d      	ldr	r3, [pc, #308]	; (80bd8 <moveTo+0x158>)
   80aa2:	4798      	blx	r3
	delay_us(300);
   80aa4:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   80aa8:	47a0      	blx	r4

		/**
		This while loop runs until robot reaches its destination
		checks if totalmovemnt pulses is the same or more than the total pulses needed
		**/
    while (totMovement <= totalPulses) {
   80aaa:	4630      	mov	r0, r6
   80aac:	2100      	movs	r1, #0
   80aae:	4b4b      	ldr	r3, [pc, #300]	; (80bdc <moveTo+0x15c>)
   80ab0:	4798      	blx	r3
   80ab2:	2800      	cmp	r0, #0
   80ab4:	d075      	beq.n	80ba2 <moveTo+0x122>
  int iPart=0; //Variable for the I-controller to keep calculated error*gain
  int dPart=0; //Variable for the D-controller to keep calculated error*gain
	int kp=10; //Gain for the P-controller
  int kd=2; //Gain for the D-controller
  int ki=2; //Gain for the I-controller
	float totMovement = 0; //Variable to store totalmovement during the transportation
   80ab6:	2500      	movs	r5, #0
void moveTo (int distance, int direction){
	float totalPulses = (distance/1.38); //Calculate the total pulses needed to move to destination
	uint16_t speed = 1700; // Set speed for moving the robot
	int proportionalError = 0; //P-controller error variable
  int derivativeError=0; //D-controller error variable
  int integralError=0; //I-controller error variable
   80ab8:	f04f 0900 	mov.w	r9, #0
	@param distance the distance which the robot need to move in centimeters
	@param direction the direction robot need to move forward or backwards
**/
void moveTo (int distance, int direction){
	float totalPulses = (distance/1.38); //Calculate the total pulses needed to move to destination
	uint16_t speed = 1700; // Set speed for moving the robot
   80abc:	f240 68a4 	movw	r8, #1700	; 0x6a4
		delay_ms(1);
			/**
			Checks if both encoder have counted up since last time
			if counted, then regulates the need values from encoder
			**/
      if (c1Loop == true && c2Loop == true) {
   80ac0:	4f47      	ldr	r7, [pc, #284]	; (80be0 <moveTo+0x160>)
		/**
		This while loop runs until robot reaches its destination
		checks if totalmovemnt pulses is the same or more than the total pulses needed
		**/
    while (totMovement <= totalPulses) {
		delay_ms(1);
   80ac2:	f241 7070 	movw	r0, #6000	; 0x1770
   80ac6:	47a0      	blx	r4
			/**
			Checks if both encoder have counted up since last time
			if counted, then regulates the need values from encoder
			**/
      if (c1Loop == true && c2Loop == true) {
   80ac8:	783b      	ldrb	r3, [r7, #0]
   80aca:	2b00      	cmp	r3, #0
   80acc:	d063      	beq.n	80b96 <moveTo+0x116>
   80ace:	4b45      	ldr	r3, [pc, #276]	; (80be4 <moveTo+0x164>)
   80ad0:	781b      	ldrb	r3, [r3, #0]
   80ad2:	2b00      	cmp	r3, #0
   80ad4:	d05f      	beq.n	80b96 <moveTo+0x116>
		totMovement = totMovement + ((counter_1+counter_2)/2);
   80ad6:	f8df b128 	ldr.w	fp, [pc, #296]	; 80c00 <moveTo+0x180>
   80ada:	f8bb 0000 	ldrh.w	r0, [fp]
   80ade:	f8df a124 	ldr.w	sl, [pc, #292]	; 80c04 <moveTo+0x184>
   80ae2:	f8ba 3000 	ldrh.w	r3, [sl]
   80ae6:	4418      	add	r0, r3
   80ae8:	1040      	asrs	r0, r0, #1
   80aea:	4b3f      	ldr	r3, [pc, #252]	; (80be8 <moveTo+0x168>)
   80aec:	4798      	blx	r3
   80aee:	4601      	mov	r1, r0
   80af0:	4628      	mov	r0, r5
   80af2:	4b3e      	ldr	r3, [pc, #248]	; (80bec <moveTo+0x16c>)
   80af4:	4798      	blx	r3
   80af6:	4605      	mov	r5, r0
		delay_ms(1);
   80af8:	f241 7070 	movw	r0, #6000	; 0x1770
   80afc:	47a0      	blx	r4
        measurementValue = (counter_2-counter_1);// Calculates the error diffferce
   80afe:	f8ba a000 	ldrh.w	sl, [sl]
   80b02:	f8bb 3000 	ldrh.w	r3, [fp]
   80b06:	ebc3 0a0a 	rsb	sl, r3, sl
		delay_us(500);
   80b0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b0e:	47a0      	blx	r4
        reset_Counter();//Reset counter for next regulation later
   80b10:	4b31      	ldr	r3, [pc, #196]	; (80bd8 <moveTo+0x158>)
   80b12:	4798      	blx	r3
		delay_us(500);
   80b14:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b18:	47a0      	blx	r4
        dPart = (kd*(proportionalError-derivativeError)); //Calculates d-controller gain
		delay_us(500);
   80b1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b1e:	47a0      	blx	r4
        iPart = (ki*integralError); //Calculates i-controller gain
		delay_us(500);
   80b20:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b24:	47a0      	blx	r4
		proportionalError = (referenceValue - measurementValue); // Calculates p-controller gain
		delay_us(500);
   80b26:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b2a:	47a0      	blx	r4
		delay_us(500);
        dPart = (kd*(proportionalError-derivativeError)); //Calculates d-controller gain
		delay_us(500);
        iPart = (ki*integralError); //Calculates i-controller gain
		delay_us(500);
		proportionalError = (referenceValue - measurementValue); // Calculates p-controller gain
   80b2c:	f1ca 0b00 	rsb	fp, sl, #0
		delay_us(500);
		controlValue = ((kp*proportionalError)+iPart+dPart); //Total regulation for PID calculate new value for correcting the error
   80b30:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
		delay_us(500);
        reset_Counter();//Reset counter for next regulation later
		delay_us(500);
        dPart = (kd*(proportionalError-derivativeError)); //Calculates d-controller gain
		delay_us(500);
        iPart = (ki*integralError); //Calculates i-controller gain
   80b34:	ea4f 0349 	mov.w	r3, r9, lsl #1
		delay_us(500);
		proportionalError = (referenceValue - measurementValue); // Calculates p-controller gain
		delay_us(500);
		controlValue = ((kp*proportionalError)+iPart+dPart); //Total regulation for PID calculate new value for correcting the error
   80b38:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
		delay_us(500);
   80b3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b40:	47a0      	blx	r4
		 /**
		 	Check if almost reached the destination to slow down and make a smoother brake
		 **/
 		if ((totMovement/totalPulses)>= 0.7)
   80b42:	4628      	mov	r0, r5
   80b44:	4631      	mov	r1, r6
   80b46:	4b2a      	ldr	r3, [pc, #168]	; (80bf0 <moveTo+0x170>)
   80b48:	4798      	blx	r3
   80b4a:	4b2a      	ldr	r3, [pc, #168]	; (80bf4 <moveTo+0x174>)
   80b4c:	4798      	blx	r3
   80b4e:	a31c      	add	r3, pc, #112	; (adr r3, 80bc0 <moveTo+0x140>)
   80b50:	e9d3 2300 	ldrd	r2, r3, [r3]
   80b54:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80c08 <moveTo+0x188>
   80b58:	47e0      	blx	ip
   80b5a:	2800      	cmp	r0, #0
 		{
 		//	speed = speed - ((totMovement/totalPulses)*150) ;
		 speed= 1600;
   80b5c:	bf18      	it	ne
   80b5e:	f44f 68c8 	movne.w	r8, #1600	; 0x640
 		}
		//Else same speed set


		rightWheel((speed+controlValue));//New speed for rightWheel
   80b62:	eb0b 0008 	add.w	r0, fp, r8
   80b66:	4b24      	ldr	r3, [pc, #144]	; (80bf8 <moveTo+0x178>)
   80b68:	4798      	blx	r3
		leftWheel((speed-controlValue));//New speed for leftWheel
   80b6a:	ebcb 0008 	rsb	r0, fp, r8
   80b6e:	4b23      	ldr	r3, [pc, #140]	; (80bfc <moveTo+0x17c>)
   80b70:	4798      	blx	r3
		delay_us(500);
   80b72:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b76:	47a0      	blx	r4
	    //error=error*-1;
        derivativeError = proportionalError;
		delay_us(500);
   80b78:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b7c:	47a0      	blx	r4
        integralError = (integralError+proportionalError);
   80b7e:	ebca 0909 	rsb	r9, sl, r9
		delay_us(500);
   80b82:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b86:	47a0      	blx	r4
        c1Loop = false; //Loop finished to prevent from running loop again
   80b88:	2300      	movs	r3, #0
   80b8a:	703b      	strb	r3, [r7, #0]
        c2Loop = false;//Loop finished to prevent from running loop again
   80b8c:	4a15      	ldr	r2, [pc, #84]	; (80be4 <moveTo+0x164>)
   80b8e:	7013      	strb	r3, [r2, #0]
		delay_us(500);
   80b90:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b94:	47a0      	blx	r4

		/**
		This while loop runs until robot reaches its destination
		checks if totalmovemnt pulses is the same or more than the total pulses needed
		**/
    while (totMovement <= totalPulses) {
   80b96:	4630      	mov	r0, r6
   80b98:	4629      	mov	r1, r5
   80b9a:	4b10      	ldr	r3, [pc, #64]	; (80bdc <moveTo+0x15c>)
   80b9c:	4798      	blx	r3
   80b9e:	2800      	cmp	r0, #0
   80ba0:	d18f      	bne.n	80ac2 <moveTo+0x42>
		delay_us(500);
		//printf("%d\n",totMovement);
      }

	}
	rightWheel(1500);//Stop rightWheel
   80ba2:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80ba6:	4b14      	ldr	r3, [pc, #80]	; (80bf8 <moveTo+0x178>)
   80ba8:	4798      	blx	r3
	leftWheel(1500);//Stop leftWheel
   80baa:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80bae:	4b13      	ldr	r3, [pc, #76]	; (80bfc <moveTo+0x17c>)
   80bb0:	4798      	blx	r3
   80bb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80bb6:	bf00      	nop
   80bb8:	e147ae14 	.word	0xe147ae14
   80bbc:	3ff6147a 	.word	0x3ff6147a
   80bc0:	66666666 	.word	0x66666666
   80bc4:	3fe66666 	.word	0x3fe66666
   80bc8:	00081d75 	.word	0x00081d75
   80bcc:	00082095 	.word	0x00082095
   80bd0:	000823c5 	.word	0x000823c5
   80bd4:	20070001 	.word	0x20070001
   80bd8:	00080769 	.word	0x00080769
   80bdc:	000829e5 	.word	0x000829e5
   80be0:	20070138 	.word	0x20070138
   80be4:	20070139 	.word	0x20070139
   80be8:	000825d9 	.word	0x000825d9
   80bec:	00082471 	.word	0x00082471
   80bf0:	000827e9 	.word	0x000827e9
   80bf4:	00081d99 	.word	0x00081d99
   80bf8:	00080dd9 	.word	0x00080dd9
   80bfc:	00080da9 	.word	0x00080da9
   80c00:	20070a66 	.word	0x20070a66
   80c04:	20070a68 	.word	0x20070a68
   80c08:	0008234d 	.word	0x0008234d
   80c0c:	f3af 8000 	nop.w

00080c10 <rotation>:

/* This method rotates the robot around its own axis at the desired degree and speed
   @param degree rotation degree
   @param ratationSpeed rotation speed
*/
void rotation (int degree, int rotationSpeed){
   80c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80c14:	4604      	mov	r4, r0
   80c16:	460f      	mov	r7, r1
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
	int totalPulses;
	int course=1;     // rotation course, 1 to right -1 to left
	rightWheel(1500);
   80c18:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c1c:	4b20      	ldr	r3, [pc, #128]	; (80ca0 <rotation+0x90>)
   80c1e:	4798      	blx	r3
	leftWheel(1500);
   80c20:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c24:	4b1f      	ldr	r3, [pc, #124]	; (80ca4 <rotation+0x94>)
   80c26:	4798      	blx	r3
     if (degree<0)
   80c28:	2c00      	cmp	r4, #0
     {
		 course=-1;
		 degree=degree*course;
   80c2a:	bfba      	itte	lt
   80c2c:	4264      	neglt	r4, r4
	int course=1;     // rotation course, 1 to right -1 to left
	rightWheel(1500);
	leftWheel(1500);
     if (degree<0)
     {
		 course=-1;
   80c2e:	f04f 38ff 	movlt.w	r8, #4294967295
	int controlValue=0;
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
	int totalPulses;
	int course=1;     // rotation course, 1 to right -1 to left
   80c32:	f04f 0801 	movge.w	r8, #1
     {
		 course=-1;
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
   80c36:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   80c3a:	1064      	asrs	r4, r4, #1
	reset_Counter();
   80c3c:	4b1a      	ldr	r3, [pc, #104]	; (80ca8 <rotation+0x98>)
   80c3e:	4798      	blx	r3
*/
void rotation (int degree, int rotationSpeed){
	int controlValue=0;
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
   80c40:	2200      	movs	r2, #0
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80c42:	4e1a      	ldr	r6, [pc, #104]	; (80cac <rotation+0x9c>)
   80c44:	4d1a      	ldr	r5, [pc, #104]	; (80cb0 <rotation+0xa0>)
		if ((counter_1+counter_2) >= checkValue)
		{
 		measurementValue = (counter_2-counter_1);
 		controlValue = (gain*measurementValue);
		// update wheels speed
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80c46:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80ca4 <rotation+0x94>
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80c4a:	e017      	b.n	80c7c <rotation+0x6c>
	{
		if ((counter_1+counter_2) >= checkValue)
   80c4c:	4293      	cmp	r3, r2
   80c4e:	db18      	blt.n	80c82 <rotation+0x72>
		{
 		measurementValue = (counter_2-counter_1);
   80c50:	ebc0 0a01 	rsb	sl, r0, r1
 		controlValue = (gain*measurementValue);
   80c54:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
		// update wheels speed
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80c58:	eb07 000a 	add.w	r0, r7, sl
   80c5c:	fb08 f000 	mul.w	r0, r8, r0
   80c60:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   80c64:	47c8      	blx	r9
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
   80c66:	ebc7 000a 	rsb	r0, r7, sl
   80c6a:	fb08 f000 	mul.w	r0, r8, r0
   80c6e:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   80c72:	4b0b      	ldr	r3, [pc, #44]	; (80ca0 <rotation+0x90>)
   80c74:	4798      	blx	r3
		checkValue=counter_1+counter_2;
   80c76:	8832      	ldrh	r2, [r6, #0]
   80c78:	882b      	ldrh	r3, [r5, #0]
   80c7a:	441a      	add	r2, r3
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80c7c:	8830      	ldrh	r0, [r6, #0]
   80c7e:	8829      	ldrh	r1, [r5, #0]
   80c80:	1843      	adds	r3, r0, r1
   80c82:	429c      	cmp	r4, r3
   80c84:	dce2      	bgt.n	80c4c <rotation+0x3c>
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
		checkValue=counter_1+counter_2;
		}
	}
	//  stop wheels
	rightWheel(1500);
   80c86:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c8a:	4b05      	ldr	r3, [pc, #20]	; (80ca0 <rotation+0x90>)
   80c8c:	4798      	blx	r3
	leftWheel(1500);
   80c8e:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c92:	4b04      	ldr	r3, [pc, #16]	; (80ca4 <rotation+0x94>)
   80c94:	4798      	blx	r3
	reset_Counter();
   80c96:	4b04      	ldr	r3, [pc, #16]	; (80ca8 <rotation+0x98>)
   80c98:	4798      	blx	r3
   80c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80c9e:	bf00      	nop
   80ca0:	00080dd9 	.word	0x00080dd9
   80ca4:	00080da9 	.word	0x00080da9
   80ca8:	00080769 	.word	0x00080769
   80cac:	20070a66 	.word	0x20070a66
   80cb0:	20070a68 	.word	0x20070a68

00080cb4 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   80cb4:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   80cb6:	2055      	movs	r0, #85	; 0x55
   80cb8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80cbc:	4b0b      	ldr	r3, [pc, #44]	; (80cec <initPin21+0x38>)
   80cbe:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   80cc0:	4b0b      	ldr	r3, [pc, #44]	; (80cf0 <initPin21+0x3c>)
   80cc2:	2404      	movs	r4, #4
   80cc4:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80cc6:	220b      	movs	r2, #11
   80cc8:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   80cca:	2200      	movs	r2, #0
   80ccc:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   80cce:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 7500;
   80cd0:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80cd4:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   80cd6:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   80cd8:	4d06      	ldr	r5, [pc, #24]	; (80cf4 <initPin21+0x40>)
   80cda:	4628      	mov	r0, r5
   80cdc:	4619      	mov	r1, r3
   80cde:	4b06      	ldr	r3, [pc, #24]	; (80cf8 <initPin21+0x44>)
   80ce0:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80ce2:	4628      	mov	r0, r5
   80ce4:	4621      	mov	r1, r4
   80ce6:	4b05      	ldr	r3, [pc, #20]	; (80cfc <initPin21+0x48>)
   80ce8:	4798      	blx	r3
   80cea:	bd38      	pop	{r3, r4, r5, pc}
   80cec:	00080f6d 	.word	0x00080f6d
   80cf0:	20070b4c 	.word	0x20070b4c
   80cf4:	40094000 	.word	0x40094000
   80cf8:	000812b5 	.word	0x000812b5
   80cfc:	000813dd 	.word	0x000813dd

00080d00 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   80d00:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   80d02:	2056      	movs	r0, #86	; 0x56
   80d04:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80d08:	4b0b      	ldr	r3, [pc, #44]	; (80d38 <initPin22+0x38>)
   80d0a:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   80d0c:	4b0b      	ldr	r3, [pc, #44]	; (80d3c <initPin22+0x3c>)
   80d0e:	2405      	movs	r4, #5
   80d10:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80d12:	220b      	movs	r2, #11
   80d14:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   80d16:	2200      	movs	r2, #0
   80d18:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   80d1a:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 7500;
   80d1c:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80d20:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   80d22:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   80d24:	4d06      	ldr	r5, [pc, #24]	; (80d40 <initPin22+0x40>)
   80d26:	4628      	mov	r0, r5
   80d28:	4619      	mov	r1, r3
   80d2a:	4b06      	ldr	r3, [pc, #24]	; (80d44 <initPin22+0x44>)
   80d2c:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   80d2e:	4628      	mov	r0, r5
   80d30:	4621      	mov	r1, r4
   80d32:	4b05      	ldr	r3, [pc, #20]	; (80d48 <initPin22+0x48>)
   80d34:	4798      	blx	r3
   80d36:	bd38      	pop	{r3, r4, r5, pc}
   80d38:	00080f6d 	.word	0x00080f6d
   80d3c:	20070b24 	.word	0x20070b24
   80d40:	40094000 	.word	0x40094000
   80d44:	000812b5 	.word	0x000812b5
   80d48:	000813dd 	.word	0x000813dd

00080d4c <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   80d4c:	b530      	push	{r4, r5, lr}
   80d4e:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   80d50:	2024      	movs	r0, #36	; 0x24
   80d52:	4b0d      	ldr	r3, [pc, #52]	; (80d88 <PWM_init+0x3c>)
   80d54:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   80d56:	4c0d      	ldr	r4, [pc, #52]	; (80d8c <PWM_init+0x40>)
   80d58:	4620      	mov	r0, r4
   80d5a:	2104      	movs	r1, #4
   80d5c:	4d0c      	ldr	r5, [pc, #48]	; (80d90 <PWM_init+0x44>)
   80d5e:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   80d60:	4620      	mov	r0, r4
   80d62:	2105      	movs	r1, #5
   80d64:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   80d66:	4b0b      	ldr	r3, [pc, #44]	; (80d94 <PWM_init+0x48>)
   80d68:	9301      	str	r3, [sp, #4]
   80d6a:	2300      	movs	r3, #0
   80d6c:	9302      	str	r3, [sp, #8]
   80d6e:	4b0a      	ldr	r3, [pc, #40]	; (80d98 <PWM_init+0x4c>)
   80d70:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   80d72:	4620      	mov	r0, r4
   80d74:	a901      	add	r1, sp, #4
   80d76:	4b09      	ldr	r3, [pc, #36]	; (80d9c <PWM_init+0x50>)
   80d78:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   80d7a:	4b09      	ldr	r3, [pc, #36]	; (80da0 <PWM_init+0x54>)
   80d7c:	4798      	blx	r3
	initPin22();
   80d7e:	4b09      	ldr	r3, [pc, #36]	; (80da4 <PWM_init+0x58>)
   80d80:	4798      	blx	r3
	
}
   80d82:	b005      	add	sp, #20
   80d84:	bd30      	pop	{r4, r5, pc}
   80d86:	bf00      	nop
   80d88:	000811c5 	.word	0x000811c5
   80d8c:	40094000 	.word	0x40094000
   80d90:	000813e9 	.word	0x000813e9
   80d94:	000f4240 	.word	0x000f4240
   80d98:	0501bd00 	.word	0x0501bd00
   80d9c:	00081275 	.word	0x00081275
   80da0:	00080cb5 	.word	0x00080cb5
   80da4:	00080d01 	.word	0x00080d01

00080da8 <leftWheel>:
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
}
 /* This method changes the duty cycle of PWM signal on pin 9. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void leftWheel(uint32_t duty){
   80da8:	b508      	push	{r3, lr}
	if(duty<800){
   80daa:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80dae:	d305      	bcc.n	80dbc <leftWheel+0x14>
   80db0:	f640 0298 	movw	r2, #2200	; 0x898
   80db4:	4290      	cmp	r0, r2
   80db6:	bf38      	it	cc
   80db8:	4602      	movcc	r2, r0
   80dba:	e001      	b.n	80dc0 <leftWheel+0x18>
		duty=800;
   80dbc:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_21, duty );
   80dc0:	4802      	ldr	r0, [pc, #8]	; (80dcc <leftWheel+0x24>)
   80dc2:	4903      	ldr	r1, [pc, #12]	; (80dd0 <leftWheel+0x28>)
   80dc4:	4b03      	ldr	r3, [pc, #12]	; (80dd4 <leftWheel+0x2c>)
   80dc6:	4798      	blx	r3
   80dc8:	bd08      	pop	{r3, pc}
   80dca:	bf00      	nop
   80dcc:	40094000 	.word	0x40094000
   80dd0:	20070b4c 	.word	0x20070b4c
   80dd4:	000813b9 	.word	0x000813b9

00080dd8 <rightWheel>:
}

 /* This method changes the duty cycle of PWM signal on pin 8. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void rightWheel(uint32_t duty){
   80dd8:	b508      	push	{r3, lr}
	
	if(duty<800){
   80dda:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80dde:	d305      	bcc.n	80dec <rightWheel+0x14>
   80de0:	f640 0298 	movw	r2, #2200	; 0x898
   80de4:	4290      	cmp	r0, r2
   80de6:	bf38      	it	cc
   80de8:	4602      	movcc	r2, r0
   80dea:	e001      	b.n	80df0 <rightWheel+0x18>
		duty=800;
   80dec:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   80df0:	4802      	ldr	r0, [pc, #8]	; (80dfc <rightWheel+0x24>)
   80df2:	4903      	ldr	r1, [pc, #12]	; (80e00 <rightWheel+0x28>)
   80df4:	4b03      	ldr	r3, [pc, #12]	; (80e04 <rightWheel+0x2c>)
   80df6:	4798      	blx	r3
   80df8:	bd08      	pop	{r3, pc}
   80dfa:	bf00      	nop
   80dfc:	40094000 	.word	0x40094000
   80e00:	20070b24 	.word	0x20070b24
   80e04:	000813b9 	.word	0x000813b9

00080e08 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80e08:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80e0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80e0e:	4b13      	ldr	r3, [pc, #76]	; (80e5c <board_init+0x54>)
   80e10:	605a      	str	r2, [r3, #4]
   80e12:	200b      	movs	r0, #11
   80e14:	4c12      	ldr	r4, [pc, #72]	; (80e60 <board_init+0x58>)
   80e16:	47a0      	blx	r4
   80e18:	200c      	movs	r0, #12
   80e1a:	47a0      	blx	r4
   80e1c:	200d      	movs	r0, #13
   80e1e:	47a0      	blx	r4
   80e20:	200e      	movs	r0, #14
   80e22:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80e24:	203b      	movs	r0, #59	; 0x3b
   80e26:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e2a:	4c0e      	ldr	r4, [pc, #56]	; (80e64 <board_init+0x5c>)
   80e2c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80e2e:	2055      	movs	r0, #85	; 0x55
   80e30:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e34:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80e36:	2056      	movs	r0, #86	; 0x56
   80e38:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e3c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80e3e:	2068      	movs	r0, #104	; 0x68
   80e40:	4909      	ldr	r1, [pc, #36]	; (80e68 <board_init+0x60>)
   80e42:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80e44:	205c      	movs	r0, #92	; 0x5c
   80e46:	4909      	ldr	r1, [pc, #36]	; (80e6c <board_init+0x64>)
   80e48:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80e4a:	4809      	ldr	r0, [pc, #36]	; (80e70 <board_init+0x68>)
   80e4c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80e54:	4b07      	ldr	r3, [pc, #28]	; (80e74 <board_init+0x6c>)
   80e56:	4798      	blx	r3
   80e58:	bd10      	pop	{r4, pc}
   80e5a:	bf00      	nop
   80e5c:	400e1a50 	.word	0x400e1a50
   80e60:	000811c5 	.word	0x000811c5
   80e64:	00080f6d 	.word	0x00080f6d
   80e68:	28000079 	.word	0x28000079
   80e6c:	28000001 	.word	0x28000001
   80e70:	400e0e00 	.word	0x400e0e00
   80e74:	00081041 	.word	0x00081041

00080e78 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80e78:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80e7c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   80e80:	bf0c      	ite	eq
   80e82:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   80e84:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   80e86:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   80e88:	bf0c      	ite	eq
   80e8a:	2000      	moveq	r0, #0
   80e8c:	2001      	movne	r0, #1
   80e8e:	4770      	bx	lr

00080e90 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80e90:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80e92:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80e96:	d016      	beq.n	80ec6 <pio_set_peripheral+0x36>
   80e98:	d804      	bhi.n	80ea4 <pio_set_peripheral+0x14>
   80e9a:	b1c1      	cbz	r1, 80ece <pio_set_peripheral+0x3e>
   80e9c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80ea0:	d00a      	beq.n	80eb8 <pio_set_peripheral+0x28>
   80ea2:	e013      	b.n	80ecc <pio_set_peripheral+0x3c>
   80ea4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80ea8:	d011      	beq.n	80ece <pio_set_peripheral+0x3e>
   80eaa:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80eae:	d00e      	beq.n	80ece <pio_set_peripheral+0x3e>
   80eb0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80eb4:	d10a      	bne.n	80ecc <pio_set_peripheral+0x3c>
   80eb6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80eb8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80eba:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80ebc:	400b      	ands	r3, r1
   80ebe:	ea23 0302 	bic.w	r3, r3, r2
   80ec2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80ec4:	e002      	b.n	80ecc <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80ec6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80ec8:	4313      	orrs	r3, r2
   80eca:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80ecc:	6042      	str	r2, [r0, #4]
   80ece:	4770      	bx	lr

00080ed0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80ed0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ed2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80ed6:	bf14      	ite	ne
   80ed8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80eda:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80edc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80ee0:	bf14      	ite	ne
   80ee2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80ee4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80ee6:	f012 0f02 	tst.w	r2, #2
   80eea:	d002      	beq.n	80ef2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80eec:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80ef0:	e004      	b.n	80efc <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80ef2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80ef6:	bf18      	it	ne
   80ef8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80efc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80efe:	6001      	str	r1, [r0, #0]
   80f00:	4770      	bx	lr
   80f02:	bf00      	nop

00080f04 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80f04:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80f06:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80f08:	9c01      	ldr	r4, [sp, #4]
   80f0a:	b10c      	cbz	r4, 80f10 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80f0c:	6641      	str	r1, [r0, #100]	; 0x64
   80f0e:	e000      	b.n	80f12 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80f10:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80f12:	b10b      	cbz	r3, 80f18 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80f14:	6501      	str	r1, [r0, #80]	; 0x50
   80f16:	e000      	b.n	80f1a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80f18:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80f1a:	b10a      	cbz	r2, 80f20 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80f1c:	6301      	str	r1, [r0, #48]	; 0x30
   80f1e:	e000      	b.n	80f22 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80f20:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80f22:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80f24:	6001      	str	r1, [r0, #0]
}
   80f26:	f85d 4b04 	ldr.w	r4, [sp], #4
   80f2a:	4770      	bx	lr

00080f2c <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   80f2c:	f012 0f10 	tst.w	r2, #16
   80f30:	d010      	beq.n	80f54 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   80f32:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80f36:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   80f3a:	bf14      	ite	ne
   80f3c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80f40:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   80f44:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   80f48:	bf14      	ite	ne
   80f4a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   80f4e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80f52:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   80f54:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80f58:	4770      	bx	lr
   80f5a:	bf00      	nop

00080f5c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   80f5c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   80f5e:	6401      	str	r1, [r0, #64]	; 0x40
   80f60:	4770      	bx	lr
   80f62:	bf00      	nop

00080f64 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80f64:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80f66:	4770      	bx	lr

00080f68 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80f68:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80f6a:	4770      	bx	lr

00080f6c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80f6c:	b570      	push	{r4, r5, r6, lr}
   80f6e:	b082      	sub	sp, #8
   80f70:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80f72:	0944      	lsrs	r4, r0, #5
   80f74:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80f78:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80f7c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80f7e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80f82:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80f86:	d030      	beq.n	80fea <pio_configure_pin+0x7e>
   80f88:	d806      	bhi.n	80f98 <pio_configure_pin+0x2c>
   80f8a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80f8e:	d00a      	beq.n	80fa6 <pio_configure_pin+0x3a>
   80f90:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80f94:	d018      	beq.n	80fc8 <pio_configure_pin+0x5c>
   80f96:	e049      	b.n	8102c <pio_configure_pin+0xc0>
   80f98:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80f9c:	d030      	beq.n	81000 <pio_configure_pin+0x94>
   80f9e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80fa2:	d02d      	beq.n	81000 <pio_configure_pin+0x94>
   80fa4:	e042      	b.n	8102c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80fa6:	f000 001f 	and.w	r0, r0, #31
   80faa:	2401      	movs	r4, #1
   80fac:	4084      	lsls	r4, r0
   80fae:	4630      	mov	r0, r6
   80fb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80fb4:	4622      	mov	r2, r4
   80fb6:	4b1f      	ldr	r3, [pc, #124]	; (81034 <pio_configure_pin+0xc8>)
   80fb8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80fba:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80fbe:	bf14      	ite	ne
   80fc0:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80fc2:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80fc4:	2001      	movs	r0, #1
   80fc6:	e032      	b.n	8102e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80fc8:	f000 001f 	and.w	r0, r0, #31
   80fcc:	2401      	movs	r4, #1
   80fce:	4084      	lsls	r4, r0
   80fd0:	4630      	mov	r0, r6
   80fd2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80fd6:	4622      	mov	r2, r4
   80fd8:	4b16      	ldr	r3, [pc, #88]	; (81034 <pio_configure_pin+0xc8>)
   80fda:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80fdc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80fe0:	bf14      	ite	ne
   80fe2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80fe4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80fe6:	2001      	movs	r0, #1
   80fe8:	e021      	b.n	8102e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80fea:	f000 011f 	and.w	r1, r0, #31
   80fee:	2401      	movs	r4, #1
   80ff0:	4630      	mov	r0, r6
   80ff2:	fa04 f101 	lsl.w	r1, r4, r1
   80ff6:	462a      	mov	r2, r5
   80ff8:	4b0f      	ldr	r3, [pc, #60]	; (81038 <pio_configure_pin+0xcc>)
   80ffa:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80ffc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80ffe:	e016      	b.n	8102e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81000:	f000 011f 	and.w	r1, r0, #31
   81004:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81006:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8100a:	ea05 0304 	and.w	r3, r5, r4
   8100e:	9300      	str	r3, [sp, #0]
   81010:	4630      	mov	r0, r6
   81012:	fa04 f101 	lsl.w	r1, r4, r1
   81016:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8101a:	bf14      	ite	ne
   8101c:	2200      	movne	r2, #0
   8101e:	2201      	moveq	r2, #1
   81020:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81024:	4d05      	ldr	r5, [pc, #20]	; (8103c <pio_configure_pin+0xd0>)
   81026:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   81028:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8102a:	e000      	b.n	8102e <pio_configure_pin+0xc2>

	default:
		return 0;
   8102c:	2000      	movs	r0, #0
	}

	return 1;
}
   8102e:	b002      	add	sp, #8
   81030:	bd70      	pop	{r4, r5, r6, pc}
   81032:	bf00      	nop
   81034:	00080e91 	.word	0x00080e91
   81038:	00080ed1 	.word	0x00080ed1
   8103c:	00080f05 	.word	0x00080f05

00081040 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81040:	b5f0      	push	{r4, r5, r6, r7, lr}
   81042:	b083      	sub	sp, #12
   81044:	4607      	mov	r7, r0
   81046:	460e      	mov	r6, r1
   81048:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8104a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8104e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81052:	d026      	beq.n	810a2 <pio_configure_pin_group+0x62>
   81054:	d806      	bhi.n	81064 <pio_configure_pin_group+0x24>
   81056:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8105a:	d00a      	beq.n	81072 <pio_configure_pin_group+0x32>
   8105c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81060:	d013      	beq.n	8108a <pio_configure_pin_group+0x4a>
   81062:	e034      	b.n	810ce <pio_configure_pin_group+0x8e>
   81064:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81068:	d01f      	beq.n	810aa <pio_configure_pin_group+0x6a>
   8106a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8106e:	d01c      	beq.n	810aa <pio_configure_pin_group+0x6a>
   81070:	e02d      	b.n	810ce <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81072:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81076:	4632      	mov	r2, r6
   81078:	4b16      	ldr	r3, [pc, #88]	; (810d4 <pio_configure_pin_group+0x94>)
   8107a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8107c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81080:	bf14      	ite	ne
   81082:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81084:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81086:	2001      	movs	r0, #1
   81088:	e022      	b.n	810d0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8108a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8108e:	4632      	mov	r2, r6
   81090:	4b10      	ldr	r3, [pc, #64]	; (810d4 <pio_configure_pin_group+0x94>)
   81092:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81094:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81098:	bf14      	ite	ne
   8109a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8109c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8109e:	2001      	movs	r0, #1
   810a0:	e016      	b.n	810d0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   810a2:	4b0d      	ldr	r3, [pc, #52]	; (810d8 <pio_configure_pin_group+0x98>)
   810a4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   810a6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   810a8:	e012      	b.n	810d0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   810aa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   810ae:	f005 0301 	and.w	r3, r5, #1
   810b2:	9300      	str	r3, [sp, #0]
   810b4:	4638      	mov	r0, r7
   810b6:	4631      	mov	r1, r6
   810b8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   810bc:	bf14      	ite	ne
   810be:	2200      	movne	r2, #0
   810c0:	2201      	moveq	r2, #1
   810c2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   810c6:	4c05      	ldr	r4, [pc, #20]	; (810dc <pio_configure_pin_group+0x9c>)
   810c8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   810ca:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   810cc:	e000      	b.n	810d0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   810ce:	2000      	movs	r0, #0
	}

	return 1;
}
   810d0:	b003      	add	sp, #12
   810d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   810d4:	00080e91 	.word	0x00080e91
   810d8:	00080ed1 	.word	0x00080ed1
   810dc:	00080f05 	.word	0x00080f05

000810e0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   810e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810e4:	4604      	mov	r4, r0
   810e6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   810e8:	4b10      	ldr	r3, [pc, #64]	; (8112c <pio_handler_process+0x4c>)
   810ea:	4798      	blx	r3
   810ec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   810ee:	4620      	mov	r0, r4
   810f0:	4b0f      	ldr	r3, [pc, #60]	; (81130 <pio_handler_process+0x50>)
   810f2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   810f4:	4005      	ands	r5, r0
   810f6:	d017      	beq.n	81128 <pio_handler_process+0x48>
   810f8:	4f0e      	ldr	r7, [pc, #56]	; (81134 <pio_handler_process+0x54>)
   810fa:	f107 040c 	add.w	r4, r7, #12
   810fe:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81100:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81104:	42b3      	cmp	r3, r6
   81106:	d10a      	bne.n	8111e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81108:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8110c:	4229      	tst	r1, r5
   8110e:	d006      	beq.n	8111e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81110:	6823      	ldr	r3, [r4, #0]
   81112:	4630      	mov	r0, r6
   81114:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81116:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8111a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8111e:	42bc      	cmp	r4, r7
   81120:	d002      	beq.n	81128 <pio_handler_process+0x48>
   81122:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81124:	2d00      	cmp	r5, #0
   81126:	d1eb      	bne.n	81100 <pio_handler_process+0x20>
   81128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8112c:	00080f65 	.word	0x00080f65
   81130:	00080f69 	.word	0x00080f69
   81134:	20070a70 	.word	0x20070a70

00081138 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   81138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8113a:	4c0b      	ldr	r4, [pc, #44]	; (81168 <pio_handler_set+0x30>)
   8113c:	6824      	ldr	r4, [r4, #0]
   8113e:	2c06      	cmp	r4, #6
   81140:	d810      	bhi.n	81164 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   81142:	4f0a      	ldr	r7, [pc, #40]	; (8116c <pio_handler_set+0x34>)
   81144:	0126      	lsls	r6, r4, #4
   81146:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   81148:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   8114a:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   8114c:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   8114e:	9906      	ldr	r1, [sp, #24]
   81150:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   81152:	3401      	adds	r4, #1
   81154:	4904      	ldr	r1, [pc, #16]	; (81168 <pio_handler_set+0x30>)
   81156:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81158:	4611      	mov	r1, r2
   8115a:	461a      	mov	r2, r3
   8115c:	4b04      	ldr	r3, [pc, #16]	; (81170 <pio_handler_set+0x38>)
   8115e:	4798      	blx	r3

	return 0;
   81160:	2000      	movs	r0, #0
   81162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   81164:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   81166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81168:	20070a6c 	.word	0x20070a6c
   8116c:	20070a70 	.word	0x20070a70
   81170:	00080f2d 	.word	0x00080f2d

00081174 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81174:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81176:	4802      	ldr	r0, [pc, #8]	; (81180 <PIOA_Handler+0xc>)
   81178:	210b      	movs	r1, #11
   8117a:	4b02      	ldr	r3, [pc, #8]	; (81184 <PIOA_Handler+0x10>)
   8117c:	4798      	blx	r3
   8117e:	bd08      	pop	{r3, pc}
   81180:	400e0e00 	.word	0x400e0e00
   81184:	000810e1 	.word	0x000810e1

00081188 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81188:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8118a:	4802      	ldr	r0, [pc, #8]	; (81194 <PIOB_Handler+0xc>)
   8118c:	210c      	movs	r1, #12
   8118e:	4b02      	ldr	r3, [pc, #8]	; (81198 <PIOB_Handler+0x10>)
   81190:	4798      	blx	r3
   81192:	bd08      	pop	{r3, pc}
   81194:	400e1000 	.word	0x400e1000
   81198:	000810e1 	.word	0x000810e1

0008119c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8119c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8119e:	4802      	ldr	r0, [pc, #8]	; (811a8 <PIOC_Handler+0xc>)
   811a0:	210d      	movs	r1, #13
   811a2:	4b02      	ldr	r3, [pc, #8]	; (811ac <PIOC_Handler+0x10>)
   811a4:	4798      	blx	r3
   811a6:	bd08      	pop	{r3, pc}
   811a8:	400e1200 	.word	0x400e1200
   811ac:	000810e1 	.word	0x000810e1

000811b0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   811b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   811b2:	4802      	ldr	r0, [pc, #8]	; (811bc <PIOD_Handler+0xc>)
   811b4:	210e      	movs	r1, #14
   811b6:	4b02      	ldr	r3, [pc, #8]	; (811c0 <PIOD_Handler+0x10>)
   811b8:	4798      	blx	r3
   811ba:	bd08      	pop	{r3, pc}
   811bc:	400e1400 	.word	0x400e1400
   811c0:	000810e1 	.word	0x000810e1

000811c4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   811c4:	282c      	cmp	r0, #44	; 0x2c
   811c6:	d820      	bhi.n	8120a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   811c8:	281f      	cmp	r0, #31
   811ca:	d80d      	bhi.n	811e8 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   811cc:	4b12      	ldr	r3, [pc, #72]	; (81218 <pmc_enable_periph_clk+0x54>)
   811ce:	699a      	ldr	r2, [r3, #24]
   811d0:	2301      	movs	r3, #1
   811d2:	4083      	lsls	r3, r0
   811d4:	401a      	ands	r2, r3
   811d6:	4293      	cmp	r3, r2
   811d8:	d019      	beq.n	8120e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   811da:	2301      	movs	r3, #1
   811dc:	fa03 f000 	lsl.w	r0, r3, r0
   811e0:	4b0d      	ldr	r3, [pc, #52]	; (81218 <pmc_enable_periph_clk+0x54>)
   811e2:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   811e4:	2000      	movs	r0, #0
   811e6:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   811e8:	4b0b      	ldr	r3, [pc, #44]	; (81218 <pmc_enable_periph_clk+0x54>)
   811ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   811ee:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   811f0:	2301      	movs	r3, #1
   811f2:	4083      	lsls	r3, r0
   811f4:	401a      	ands	r2, r3
   811f6:	4293      	cmp	r3, r2
   811f8:	d00b      	beq.n	81212 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   811fa:	2301      	movs	r3, #1
   811fc:	fa03 f000 	lsl.w	r0, r3, r0
   81200:	4b05      	ldr	r3, [pc, #20]	; (81218 <pmc_enable_periph_clk+0x54>)
   81202:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81206:	2000      	movs	r0, #0
   81208:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8120a:	2001      	movs	r0, #1
   8120c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8120e:	2000      	movs	r0, #0
   81210:	4770      	bx	lr
   81212:	2000      	movs	r0, #0
}
   81214:	4770      	bx	lr
   81216:	bf00      	nop
   81218:	400e0600 	.word	0x400e0600

0008121c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8121c:	b4f0      	push	{r4, r5, r6, r7}
   8121e:	b08c      	sub	sp, #48	; 0x30
   81220:	4607      	mov	r7, r0
   81222:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81224:	ac01      	add	r4, sp, #4
   81226:	4d12      	ldr	r5, [pc, #72]	; (81270 <pwm_clocks_generate+0x54>)
   81228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8122c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8122e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81230:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   81234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   81238:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8123a:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8123c:	f852 4f04 	ldr.w	r4, [r2, #4]!
   81240:	fbb6 f4f4 	udiv	r4, r6, r4
   81244:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   81248:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   8124c:	d903      	bls.n	81256 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   8124e:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   81250:	2b0b      	cmp	r3, #11
   81252:	d1f3      	bne.n	8123c <pwm_clocks_generate+0x20>
   81254:	e004      	b.n	81260 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   81256:	2b0a      	cmp	r3, #10
   81258:	d805      	bhi.n	81266 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   8125a:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   8125e:	e004      	b.n	8126a <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   81260:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81264:	e001      	b.n	8126a <pwm_clocks_generate+0x4e>
   81266:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8126a:	b00c      	add	sp, #48	; 0x30
   8126c:	bcf0      	pop	{r4, r5, r6, r7}
   8126e:	4770      	bx	lr
   81270:	000859d4 	.word	0x000859d4

00081274 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81274:	b570      	push	{r4, r5, r6, lr}
   81276:	4606      	mov	r6, r0
   81278:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8127a:	6808      	ldr	r0, [r1, #0]
   8127c:	b140      	cbz	r0, 81290 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8127e:	6889      	ldr	r1, [r1, #8]
   81280:	4b0b      	ldr	r3, [pc, #44]	; (812b0 <pwm_init+0x3c>)
   81282:	4798      	blx	r3
   81284:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   81286:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8128a:	4298      	cmp	r0, r3
   8128c:	d101      	bne.n	81292 <pwm_init+0x1e>
   8128e:	e00e      	b.n	812ae <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81290:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81292:	6860      	ldr	r0, [r4, #4]
   81294:	b140      	cbz	r0, 812a8 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   81296:	68a1      	ldr	r1, [r4, #8]
   81298:	4b05      	ldr	r3, [pc, #20]	; (812b0 <pwm_init+0x3c>)
   8129a:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   8129c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   812a0:	4298      	cmp	r0, r3
   812a2:	d004      	beq.n	812ae <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   812a4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   812a8:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   812aa:	2000      	movs	r0, #0
   812ac:	bd70      	pop	{r4, r5, r6, pc}
}
   812ae:	bd70      	pop	{r4, r5, r6, pc}
   812b0:	0008121d 	.word	0x0008121d

000812b4 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   812b4:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   812b6:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   812b8:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   812ba:	684a      	ldr	r2, [r1, #4]
   812bc:	f002 020f 	and.w	r2, r2, #15
   812c0:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   812c2:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   812c4:	432c      	orrs	r4, r5
   812c6:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   812c8:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   812cc:	7d8a      	ldrb	r2, [r1, #22]
   812ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   812d2:	7dca      	ldrb	r2, [r1, #23]
   812d4:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   812d8:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   812da:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   812de:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   812e2:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   812e6:	68cc      	ldr	r4, [r1, #12]
   812e8:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   812ec:	690c      	ldr	r4, [r1, #16]
   812ee:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   812f2:	7d8a      	ldrb	r2, [r1, #22]
   812f4:	b13a      	cbz	r2, 81306 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   812f6:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   812f8:	8b4a      	ldrh	r2, [r1, #26]
   812fa:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   812fe:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   81302:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   81306:	6c85      	ldr	r5, [r0, #72]	; 0x48
   81308:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   8130c:	409a      	lsls	r2, r3
   8130e:	43d2      	mvns	r2, r2
   81310:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   81312:	7fce      	ldrb	r6, [r1, #31]
   81314:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   81316:	7f8c      	ldrb	r4, [r1, #30]
   81318:	409c      	lsls	r4, r3
   8131a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8131e:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   81320:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   81322:	6c44      	ldr	r4, [r0, #68]	; 0x44
   81324:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   81326:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   8132a:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   8132c:	f891 4020 	ldrb.w	r4, [r1, #32]
   81330:	409c      	lsls	r4, r3
   81332:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   81336:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   81338:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   8133a:	2201      	movs	r2, #1
   8133c:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   8133e:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81342:	b11c      	cbz	r4, 8134c <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   81344:	6a04      	ldr	r4, [r0, #32]
   81346:	4314      	orrs	r4, r2
   81348:	6204      	str	r4, [r0, #32]
   8134a:	e003      	b.n	81354 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   8134c:	6a04      	ldr	r4, [r0, #32]
   8134e:	ea24 0402 	bic.w	r4, r4, r2
   81352:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   81354:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   81358:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8135a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8135c:	bf0c      	ite	eq
   8135e:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   81360:	4394      	bicne	r4, r2
   81362:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81364:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   81368:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8136a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8136c:	bf0c      	ite	eq
   8136e:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   81372:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   81376:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81378:	2b03      	cmp	r3, #3
   8137a:	d80c      	bhi.n	81396 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8137c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8137e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81380:	22ff      	movs	r2, #255	; 0xff
   81382:	409a      	lsls	r2, r3
   81384:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81388:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8138c:	fa01 f303 	lsl.w	r3, r1, r3
   81390:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81392:	66c3      	str	r3, [r0, #108]	; 0x6c
   81394:	e00c      	b.n	813b0 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   81396:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81398:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8139a:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   8139c:	22ff      	movs	r2, #255	; 0xff
   8139e:	409a      	lsls	r2, r3
   813a0:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   813a4:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   813a8:	fa01 f303 	lsl.w	r3, r1, r3
   813ac:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   813ae:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   813b0:	2000      	movs	r0, #0
   813b2:	bc70      	pop	{r4, r5, r6}
   813b4:	4770      	bx	lr
   813b6:	bf00      	nop

000813b8 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   813b8:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   813ba:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   813bc:	690b      	ldr	r3, [r1, #16]
   813be:	4293      	cmp	r3, r2
   813c0:	d306      	bcc.n	813d0 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   813c2:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   813c4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   813c8:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   813cc:	2000      	movs	r0, #0
   813ce:	e001      	b.n	813d4 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   813d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   813d4:	f85d 4b04 	ldr.w	r4, [sp], #4
   813d8:	4770      	bx	lr
   813da:	bf00      	nop

000813dc <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   813dc:	2301      	movs	r3, #1
   813de:	fa03 f101 	lsl.w	r1, r3, r1
   813e2:	6041      	str	r1, [r0, #4]
   813e4:	4770      	bx	lr
   813e6:	bf00      	nop

000813e8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   813e8:	2301      	movs	r3, #1
   813ea:	fa03 f101 	lsl.w	r1, r3, r1
   813ee:	6081      	str	r1, [r0, #8]
   813f0:	4770      	bx	lr
   813f2:	bf00      	nop

000813f4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   813f4:	e7fe      	b.n	813f4 <Dummy_Handler>
   813f6:	bf00      	nop

000813f8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   813f8:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   813fa:	4b1e      	ldr	r3, [pc, #120]	; (81474 <Reset_Handler+0x7c>)
   813fc:	4a1e      	ldr	r2, [pc, #120]	; (81478 <Reset_Handler+0x80>)
   813fe:	429a      	cmp	r2, r3
   81400:	d003      	beq.n	8140a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81402:	4b1e      	ldr	r3, [pc, #120]	; (8147c <Reset_Handler+0x84>)
   81404:	4a1b      	ldr	r2, [pc, #108]	; (81474 <Reset_Handler+0x7c>)
   81406:	429a      	cmp	r2, r3
   81408:	d304      	bcc.n	81414 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8140a:	4b1d      	ldr	r3, [pc, #116]	; (81480 <Reset_Handler+0x88>)
   8140c:	4a1d      	ldr	r2, [pc, #116]	; (81484 <Reset_Handler+0x8c>)
   8140e:	429a      	cmp	r2, r3
   81410:	d30f      	bcc.n	81432 <Reset_Handler+0x3a>
   81412:	e01a      	b.n	8144a <Reset_Handler+0x52>
   81414:	4b1c      	ldr	r3, [pc, #112]	; (81488 <Reset_Handler+0x90>)
   81416:	4c1d      	ldr	r4, [pc, #116]	; (8148c <Reset_Handler+0x94>)
   81418:	1ae4      	subs	r4, r4, r3
   8141a:	f024 0403 	bic.w	r4, r4, #3
   8141e:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81420:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81422:	4814      	ldr	r0, [pc, #80]	; (81474 <Reset_Handler+0x7c>)
   81424:	4914      	ldr	r1, [pc, #80]	; (81478 <Reset_Handler+0x80>)
   81426:	585a      	ldr	r2, [r3, r1]
   81428:	501a      	str	r2, [r3, r0]
   8142a:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8142c:	42a3      	cmp	r3, r4
   8142e:	d1fa      	bne.n	81426 <Reset_Handler+0x2e>
   81430:	e7eb      	b.n	8140a <Reset_Handler+0x12>
   81432:	4b17      	ldr	r3, [pc, #92]	; (81490 <Reset_Handler+0x98>)
   81434:	4917      	ldr	r1, [pc, #92]	; (81494 <Reset_Handler+0x9c>)
   81436:	1ac9      	subs	r1, r1, r3
   81438:	f021 0103 	bic.w	r1, r1, #3
   8143c:	1d1a      	adds	r2, r3, #4
   8143e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81440:	2200      	movs	r2, #0
   81442:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81446:	428b      	cmp	r3, r1
   81448:	d1fb      	bne.n	81442 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8144a:	4a13      	ldr	r2, [pc, #76]	; (81498 <Reset_Handler+0xa0>)
   8144c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81450:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81454:	4911      	ldr	r1, [pc, #68]	; (8149c <Reset_Handler+0xa4>)
   81456:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81458:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   8145c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81460:	d203      	bcs.n	8146a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81462:	688a      	ldr	r2, [r1, #8]
   81464:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81468:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8146a:	4b0d      	ldr	r3, [pc, #52]	; (814a0 <Reset_Handler+0xa8>)
   8146c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8146e:	4b0d      	ldr	r3, [pc, #52]	; (814a4 <Reset_Handler+0xac>)
   81470:	4798      	blx	r3
   81472:	e7fe      	b.n	81472 <Reset_Handler+0x7a>
   81474:	20070000 	.word	0x20070000
   81478:	00085acc 	.word	0x00085acc
   8147c:	200709ac 	.word	0x200709ac
   81480:	20070b78 	.word	0x20070b78
   81484:	200709ac 	.word	0x200709ac
   81488:	20070004 	.word	0x20070004
   8148c:	200709af 	.word	0x200709af
   81490:	200709a8 	.word	0x200709a8
   81494:	20070b73 	.word	0x20070b73
   81498:	00080000 	.word	0x00080000
   8149c:	e000ed00 	.word	0xe000ed00
   814a0:	00082a19 	.word	0x00082a19
   814a4:	00080149 	.word	0x00080149

000814a8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   814a8:	4b09      	ldr	r3, [pc, #36]	; (814d0 <_sbrk+0x28>)
   814aa:	681b      	ldr	r3, [r3, #0]
   814ac:	b913      	cbnz	r3, 814b4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   814ae:	4a09      	ldr	r2, [pc, #36]	; (814d4 <_sbrk+0x2c>)
   814b0:	4b07      	ldr	r3, [pc, #28]	; (814d0 <_sbrk+0x28>)
   814b2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   814b4:	4b06      	ldr	r3, [pc, #24]	; (814d0 <_sbrk+0x28>)
   814b6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   814b8:	181a      	adds	r2, r3, r0
   814ba:	4907      	ldr	r1, [pc, #28]	; (814d8 <_sbrk+0x30>)
   814bc:	4291      	cmp	r1, r2
   814be:	db04      	blt.n	814ca <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   814c0:	4610      	mov	r0, r2
   814c2:	4a03      	ldr	r2, [pc, #12]	; (814d0 <_sbrk+0x28>)
   814c4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   814c6:	4618      	mov	r0, r3
   814c8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   814ca:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   814ce:	4770      	bx	lr
   814d0:	20070ae0 	.word	0x20070ae0
   814d4:	20072b78 	.word	0x20072b78
   814d8:	20087ffc 	.word	0x20087ffc

000814dc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   814dc:	f04f 30ff 	mov.w	r0, #4294967295
   814e0:	4770      	bx	lr
   814e2:	bf00      	nop

000814e4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   814e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   814e8:	604b      	str	r3, [r1, #4]

	return 0;
}
   814ea:	2000      	movs	r0, #0
   814ec:	4770      	bx	lr
   814ee:	bf00      	nop

000814f0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   814f0:	2001      	movs	r0, #1
   814f2:	4770      	bx	lr

000814f4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   814f4:	2000      	movs	r0, #0
   814f6:	4770      	bx	lr

000814f8 <atan>:
   814f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814fc:	4bb6      	ldr	r3, [pc, #728]	; (817d8 <atan+0x2e0>)
   814fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   81502:	429e      	cmp	r6, r3
   81504:	b083      	sub	sp, #12
   81506:	4604      	mov	r4, r0
   81508:	460d      	mov	r5, r1
   8150a:	4689      	mov	r9, r1
   8150c:	dd0f      	ble.n	8152e <atan+0x36>
   8150e:	49b3      	ldr	r1, [pc, #716]	; (817dc <atan+0x2e4>)
   81510:	428e      	cmp	r6, r1
   81512:	f300 80b3 	bgt.w	8167c <atan+0x184>
   81516:	f000 80ae 	beq.w	81676 <atan+0x17e>
   8151a:	f1b9 0f00 	cmp.w	r9, #0
   8151e:	f340 80ef 	ble.w	81700 <atan+0x208>
   81522:	a191      	add	r1, pc, #580	; (adr r1, 81768 <atan+0x270>)
   81524:	e9d1 0100 	ldrd	r0, r1, [r1]
   81528:	b003      	add	sp, #12
   8152a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8152e:	4bac      	ldr	r3, [pc, #688]	; (817e0 <atan+0x2e8>)
   81530:	429e      	cmp	r6, r3
   81532:	f300 80bd 	bgt.w	816b0 <atan+0x1b8>
   81536:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   8153a:	429e      	cmp	r6, r3
   8153c:	f340 80a7 	ble.w	8168e <atan+0x196>
   81540:	f04f 3cff 	mov.w	ip, #4294967295
   81544:	4622      	mov	r2, r4
   81546:	462b      	mov	r3, r5
   81548:	4620      	mov	r0, r4
   8154a:	4629      	mov	r1, r5
   8154c:	f8cd c004 	str.w	ip, [sp, #4]
   81550:	f000 fc76 	bl	81e40 <__aeabi_dmul>
   81554:	4602      	mov	r2, r0
   81556:	460b      	mov	r3, r1
   81558:	4682      	mov	sl, r0
   8155a:	468b      	mov	fp, r1
   8155c:	f000 fc70 	bl	81e40 <__aeabi_dmul>
   81560:	a383      	add	r3, pc, #524	; (adr r3, 81770 <atan+0x278>)
   81562:	e9d3 2300 	ldrd	r2, r3, [r3]
   81566:	4606      	mov	r6, r0
   81568:	460f      	mov	r7, r1
   8156a:	f000 fc69 	bl	81e40 <__aeabi_dmul>
   8156e:	a382      	add	r3, pc, #520	; (adr r3, 81778 <atan+0x280>)
   81570:	e9d3 2300 	ldrd	r2, r3, [r3]
   81574:	f000 fab2 	bl	81adc <__adddf3>
   81578:	4632      	mov	r2, r6
   8157a:	463b      	mov	r3, r7
   8157c:	f000 fc60 	bl	81e40 <__aeabi_dmul>
   81580:	a37f      	add	r3, pc, #508	; (adr r3, 81780 <atan+0x288>)
   81582:	e9d3 2300 	ldrd	r2, r3, [r3]
   81586:	f000 faa9 	bl	81adc <__adddf3>
   8158a:	4632      	mov	r2, r6
   8158c:	463b      	mov	r3, r7
   8158e:	f000 fc57 	bl	81e40 <__aeabi_dmul>
   81592:	a37d      	add	r3, pc, #500	; (adr r3, 81788 <atan+0x290>)
   81594:	e9d3 2300 	ldrd	r2, r3, [r3]
   81598:	f000 faa0 	bl	81adc <__adddf3>
   8159c:	4632      	mov	r2, r6
   8159e:	463b      	mov	r3, r7
   815a0:	f000 fc4e 	bl	81e40 <__aeabi_dmul>
   815a4:	a37a      	add	r3, pc, #488	; (adr r3, 81790 <atan+0x298>)
   815a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   815aa:	f000 fa97 	bl	81adc <__adddf3>
   815ae:	4632      	mov	r2, r6
   815b0:	463b      	mov	r3, r7
   815b2:	f000 fc45 	bl	81e40 <__aeabi_dmul>
   815b6:	a378      	add	r3, pc, #480	; (adr r3, 81798 <atan+0x2a0>)
   815b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   815bc:	f000 fa8e 	bl	81adc <__adddf3>
   815c0:	4652      	mov	r2, sl
   815c2:	465b      	mov	r3, fp
   815c4:	f000 fc3c 	bl	81e40 <__aeabi_dmul>
   815c8:	a375      	add	r3, pc, #468	; (adr r3, 817a0 <atan+0x2a8>)
   815ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   815ce:	4682      	mov	sl, r0
   815d0:	468b      	mov	fp, r1
   815d2:	4630      	mov	r0, r6
   815d4:	4639      	mov	r1, r7
   815d6:	f000 fc33 	bl	81e40 <__aeabi_dmul>
   815da:	a373      	add	r3, pc, #460	; (adr r3, 817a8 <atan+0x2b0>)
   815dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   815e0:	f000 fa7a 	bl	81ad8 <__aeabi_dsub>
   815e4:	4632      	mov	r2, r6
   815e6:	463b      	mov	r3, r7
   815e8:	f000 fc2a 	bl	81e40 <__aeabi_dmul>
   815ec:	a370      	add	r3, pc, #448	; (adr r3, 817b0 <atan+0x2b8>)
   815ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   815f2:	f000 fa71 	bl	81ad8 <__aeabi_dsub>
   815f6:	4632      	mov	r2, r6
   815f8:	463b      	mov	r3, r7
   815fa:	f000 fc21 	bl	81e40 <__aeabi_dmul>
   815fe:	a36e      	add	r3, pc, #440	; (adr r3, 817b8 <atan+0x2c0>)
   81600:	e9d3 2300 	ldrd	r2, r3, [r3]
   81604:	f000 fa68 	bl	81ad8 <__aeabi_dsub>
   81608:	4632      	mov	r2, r6
   8160a:	463b      	mov	r3, r7
   8160c:	f000 fc18 	bl	81e40 <__aeabi_dmul>
   81610:	a36b      	add	r3, pc, #428	; (adr r3, 817c0 <atan+0x2c8>)
   81612:	e9d3 2300 	ldrd	r2, r3, [r3]
   81616:	f000 fa5f 	bl	81ad8 <__aeabi_dsub>
   8161a:	4632      	mov	r2, r6
   8161c:	463b      	mov	r3, r7
   8161e:	f000 fc0f 	bl	81e40 <__aeabi_dmul>
   81622:	f8dd c004 	ldr.w	ip, [sp, #4]
   81626:	4602      	mov	r2, r0
   81628:	f1bc 3fff 	cmp.w	ip, #4294967295
   8162c:	460b      	mov	r3, r1
   8162e:	d06b      	beq.n	81708 <atan+0x210>
   81630:	4650      	mov	r0, sl
   81632:	4659      	mov	r1, fp
   81634:	ea4f 06cc 	mov.w	r6, ip, lsl #3
   81638:	f000 fa50 	bl	81adc <__adddf3>
   8163c:	4622      	mov	r2, r4
   8163e:	462b      	mov	r3, r5
   81640:	f000 fbfe 	bl	81e40 <__aeabi_dmul>
   81644:	4f67      	ldr	r7, [pc, #412]	; (817e4 <atan+0x2ec>)
   81646:	4b68      	ldr	r3, [pc, #416]	; (817e8 <atan+0x2f0>)
   81648:	4437      	add	r7, r6
   8164a:	441e      	add	r6, r3
   8164c:	e9d6 2300 	ldrd	r2, r3, [r6]
   81650:	f000 fa42 	bl	81ad8 <__aeabi_dsub>
   81654:	4622      	mov	r2, r4
   81656:	462b      	mov	r3, r5
   81658:	f000 fa3e 	bl	81ad8 <__aeabi_dsub>
   8165c:	4602      	mov	r2, r0
   8165e:	460b      	mov	r3, r1
   81660:	e9d7 0100 	ldrd	r0, r1, [r7]
   81664:	f000 fa38 	bl	81ad8 <__aeabi_dsub>
   81668:	f1b9 0f00 	cmp.w	r9, #0
   8166c:	da0c      	bge.n	81688 <atan+0x190>
   8166e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   81672:	4629      	mov	r1, r5
   81674:	e008      	b.n	81688 <atan+0x190>
   81676:	2800      	cmp	r0, #0
   81678:	f43f af4f 	beq.w	8151a <atan+0x22>
   8167c:	4620      	mov	r0, r4
   8167e:	4629      	mov	r1, r5
   81680:	4622      	mov	r2, r4
   81682:	462b      	mov	r3, r5
   81684:	f000 fa2a 	bl	81adc <__adddf3>
   81688:	b003      	add	sp, #12
   8168a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8168e:	a34e      	add	r3, pc, #312	; (adr r3, 817c8 <atan+0x2d0>)
   81690:	e9d3 2300 	ldrd	r2, r3, [r3]
   81694:	f000 fa22 	bl	81adc <__adddf3>
   81698:	2200      	movs	r2, #0
   8169a:	4b54      	ldr	r3, [pc, #336]	; (817ec <atan+0x2f4>)
   8169c:	f000 fe60 	bl	82360 <__aeabi_dcmpgt>
   816a0:	2800      	cmp	r0, #0
   816a2:	f43f af4d 	beq.w	81540 <atan+0x48>
   816a6:	4620      	mov	r0, r4
   816a8:	4629      	mov	r1, r5
   816aa:	b003      	add	sp, #12
   816ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816b0:	f000 f8ca 	bl	81848 <fabs>
   816b4:	4b4e      	ldr	r3, [pc, #312]	; (817f0 <atan+0x2f8>)
   816b6:	4604      	mov	r4, r0
   816b8:	429e      	cmp	r6, r3
   816ba:	460d      	mov	r5, r1
   816bc:	dc33      	bgt.n	81726 <atan+0x22e>
   816be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   816c2:	429e      	cmp	r6, r3
   816c4:	f300 80a5 	bgt.w	81812 <atan+0x31a>
   816c8:	4602      	mov	r2, r0
   816ca:	460b      	mov	r3, r1
   816cc:	f000 fa06 	bl	81adc <__adddf3>
   816d0:	2200      	movs	r2, #0
   816d2:	4b46      	ldr	r3, [pc, #280]	; (817ec <atan+0x2f4>)
   816d4:	f000 fa00 	bl	81ad8 <__aeabi_dsub>
   816d8:	2200      	movs	r2, #0
   816da:	4606      	mov	r6, r0
   816dc:	460f      	mov	r7, r1
   816de:	4620      	mov	r0, r4
   816e0:	4629      	mov	r1, r5
   816e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   816e6:	f000 f9f9 	bl	81adc <__adddf3>
   816ea:	4602      	mov	r2, r0
   816ec:	460b      	mov	r3, r1
   816ee:	4630      	mov	r0, r6
   816f0:	4639      	mov	r1, r7
   816f2:	f000 fccf 	bl	82094 <__aeabi_ddiv>
   816f6:	f04f 0c00 	mov.w	ip, #0
   816fa:	4604      	mov	r4, r0
   816fc:	460d      	mov	r5, r1
   816fe:	e721      	b.n	81544 <atan+0x4c>
   81700:	a133      	add	r1, pc, #204	; (adr r1, 817d0 <atan+0x2d8>)
   81702:	e9d1 0100 	ldrd	r0, r1, [r1]
   81706:	e7bf      	b.n	81688 <atan+0x190>
   81708:	4650      	mov	r0, sl
   8170a:	4659      	mov	r1, fp
   8170c:	f000 f9e6 	bl	81adc <__adddf3>
   81710:	4622      	mov	r2, r4
   81712:	462b      	mov	r3, r5
   81714:	f000 fb94 	bl	81e40 <__aeabi_dmul>
   81718:	4602      	mov	r2, r0
   8171a:	460b      	mov	r3, r1
   8171c:	4620      	mov	r0, r4
   8171e:	4629      	mov	r1, r5
   81720:	f000 f9da 	bl	81ad8 <__aeabi_dsub>
   81724:	e7b0      	b.n	81688 <atan+0x190>
   81726:	4b33      	ldr	r3, [pc, #204]	; (817f4 <atan+0x2fc>)
   81728:	429e      	cmp	r6, r3
   8172a:	dc67      	bgt.n	817fc <atan+0x304>
   8172c:	2200      	movs	r2, #0
   8172e:	4b32      	ldr	r3, [pc, #200]	; (817f8 <atan+0x300>)
   81730:	f000 f9d2 	bl	81ad8 <__aeabi_dsub>
   81734:	2200      	movs	r2, #0
   81736:	4606      	mov	r6, r0
   81738:	460f      	mov	r7, r1
   8173a:	4620      	mov	r0, r4
   8173c:	4629      	mov	r1, r5
   8173e:	4b2e      	ldr	r3, [pc, #184]	; (817f8 <atan+0x300>)
   81740:	f000 fb7e 	bl	81e40 <__aeabi_dmul>
   81744:	2200      	movs	r2, #0
   81746:	4b29      	ldr	r3, [pc, #164]	; (817ec <atan+0x2f4>)
   81748:	f000 f9c8 	bl	81adc <__adddf3>
   8174c:	4602      	mov	r2, r0
   8174e:	460b      	mov	r3, r1
   81750:	4630      	mov	r0, r6
   81752:	4639      	mov	r1, r7
   81754:	f000 fc9e 	bl	82094 <__aeabi_ddiv>
   81758:	f04f 0c02 	mov.w	ip, #2
   8175c:	4604      	mov	r4, r0
   8175e:	460d      	mov	r5, r1
   81760:	e6f0      	b.n	81544 <atan+0x4c>
   81762:	bf00      	nop
   81764:	f3af 8000 	nop.w
   81768:	54442d18 	.word	0x54442d18
   8176c:	3ff921fb 	.word	0x3ff921fb
   81770:	e322da11 	.word	0xe322da11
   81774:	3f90ad3a 	.word	0x3f90ad3a
   81778:	24760deb 	.word	0x24760deb
   8177c:	3fa97b4b 	.word	0x3fa97b4b
   81780:	a0d03d51 	.word	0xa0d03d51
   81784:	3fb10d66 	.word	0x3fb10d66
   81788:	c54c206e 	.word	0xc54c206e
   8178c:	3fb745cd 	.word	0x3fb745cd
   81790:	920083ff 	.word	0x920083ff
   81794:	3fc24924 	.word	0x3fc24924
   81798:	5555550d 	.word	0x5555550d
   8179c:	3fd55555 	.word	0x3fd55555
   817a0:	2c6a6c2f 	.word	0x2c6a6c2f
   817a4:	bfa2b444 	.word	0xbfa2b444
   817a8:	52defd9a 	.word	0x52defd9a
   817ac:	3fadde2d 	.word	0x3fadde2d
   817b0:	af749a6d 	.word	0xaf749a6d
   817b4:	3fb3b0f2 	.word	0x3fb3b0f2
   817b8:	fe231671 	.word	0xfe231671
   817bc:	3fbc71c6 	.word	0x3fbc71c6
   817c0:	9998ebc4 	.word	0x9998ebc4
   817c4:	3fc99999 	.word	0x3fc99999
   817c8:	8800759c 	.word	0x8800759c
   817cc:	7e37e43c 	.word	0x7e37e43c
   817d0:	54442d18 	.word	0x54442d18
   817d4:	bff921fb 	.word	0xbff921fb
   817d8:	440fffff 	.word	0x440fffff
   817dc:	7ff00000 	.word	0x7ff00000
   817e0:	3fdbffff 	.word	0x3fdbffff
   817e4:	00085a20 	.word	0x00085a20
   817e8:	00085a00 	.word	0x00085a00
   817ec:	3ff00000 	.word	0x3ff00000
   817f0:	3ff2ffff 	.word	0x3ff2ffff
   817f4:	40037fff 	.word	0x40037fff
   817f8:	3ff80000 	.word	0x3ff80000
   817fc:	4602      	mov	r2, r0
   817fe:	460b      	mov	r3, r1
   81800:	2000      	movs	r0, #0
   81802:	490f      	ldr	r1, [pc, #60]	; (81840 <atan+0x348>)
   81804:	f000 fc46 	bl	82094 <__aeabi_ddiv>
   81808:	f04f 0c03 	mov.w	ip, #3
   8180c:	4604      	mov	r4, r0
   8180e:	460d      	mov	r5, r1
   81810:	e698      	b.n	81544 <atan+0x4c>
   81812:	2200      	movs	r2, #0
   81814:	4b0b      	ldr	r3, [pc, #44]	; (81844 <atan+0x34c>)
   81816:	f000 f95f 	bl	81ad8 <__aeabi_dsub>
   8181a:	2200      	movs	r2, #0
   8181c:	4606      	mov	r6, r0
   8181e:	460f      	mov	r7, r1
   81820:	4620      	mov	r0, r4
   81822:	4629      	mov	r1, r5
   81824:	4b07      	ldr	r3, [pc, #28]	; (81844 <atan+0x34c>)
   81826:	f000 f959 	bl	81adc <__adddf3>
   8182a:	4602      	mov	r2, r0
   8182c:	460b      	mov	r3, r1
   8182e:	4630      	mov	r0, r6
   81830:	4639      	mov	r1, r7
   81832:	f000 fc2f 	bl	82094 <__aeabi_ddiv>
   81836:	f04f 0c01 	mov.w	ip, #1
   8183a:	4604      	mov	r4, r0
   8183c:	460d      	mov	r5, r1
   8183e:	e681      	b.n	81544 <atan+0x4c>
   81840:	bff00000 	.word	0xbff00000
   81844:	3ff00000 	.word	0x3ff00000

00081848 <fabs>:
   81848:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8184c:	4770      	bx	lr
   8184e:	bf00      	nop

00081850 <sqrt>:
   81850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81854:	b08a      	sub	sp, #40	; 0x28
   81856:	4604      	mov	r4, r0
   81858:	460d      	mov	r5, r1
   8185a:	f000 f84f 	bl	818fc <__ieee754_sqrt>
   8185e:	f8df a098 	ldr.w	sl, [pc, #152]	; 818f8 <sqrt+0xa8>
   81862:	4606      	mov	r6, r0
   81864:	f99a 3000 	ldrsb.w	r3, [sl]
   81868:	460f      	mov	r7, r1
   8186a:	3301      	adds	r3, #1
   8186c:	d00f      	beq.n	8188e <sqrt+0x3e>
   8186e:	4620      	mov	r0, r4
   81870:	4629      	mov	r1, r5
   81872:	f000 f903 	bl	81a7c <__fpclassifyd>
   81876:	b150      	cbz	r0, 8188e <sqrt+0x3e>
   81878:	f04f 0800 	mov.w	r8, #0
   8187c:	f04f 0900 	mov.w	r9, #0
   81880:	4642      	mov	r2, r8
   81882:	464b      	mov	r3, r9
   81884:	4620      	mov	r0, r4
   81886:	4629      	mov	r1, r5
   81888:	f000 fd4c 	bl	82324 <__aeabi_dcmplt>
   8188c:	b920      	cbnz	r0, 81898 <sqrt+0x48>
   8188e:	4630      	mov	r0, r6
   81890:	4639      	mov	r1, r7
   81892:	b00a      	add	sp, #40	; 0x28
   81894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81898:	4916      	ldr	r1, [pc, #88]	; (818f4 <sqrt+0xa4>)
   8189a:	f89a 6000 	ldrb.w	r6, [sl]
   8189e:	2201      	movs	r2, #1
   818a0:	2300      	movs	r3, #0
   818a2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   818a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
   818aa:	9101      	str	r1, [sp, #4]
   818ac:	9200      	str	r2, [sp, #0]
   818ae:	9308      	str	r3, [sp, #32]
   818b0:	b966      	cbnz	r6, 818cc <sqrt+0x7c>
   818b2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   818b6:	4668      	mov	r0, sp
   818b8:	f000 f908 	bl	81acc <matherr>
   818bc:	b180      	cbz	r0, 818e0 <sqrt+0x90>
   818be:	9b08      	ldr	r3, [sp, #32]
   818c0:	b99b      	cbnz	r3, 818ea <sqrt+0x9a>
   818c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   818c6:	b00a      	add	sp, #40	; 0x28
   818c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   818cc:	4640      	mov	r0, r8
   818ce:	4649      	mov	r1, r9
   818d0:	4642      	mov	r2, r8
   818d2:	464b      	mov	r3, r9
   818d4:	f000 fbde 	bl	82094 <__aeabi_ddiv>
   818d8:	2e02      	cmp	r6, #2
   818da:	e9cd 0106 	strd	r0, r1, [sp, #24]
   818de:	d1ea      	bne.n	818b6 <sqrt+0x66>
   818e0:	f001 f894 	bl	82a0c <__errno>
   818e4:	2321      	movs	r3, #33	; 0x21
   818e6:	6003      	str	r3, [r0, #0]
   818e8:	e7e9      	b.n	818be <sqrt+0x6e>
   818ea:	f001 f88f 	bl	82a0c <__errno>
   818ee:	9b08      	ldr	r3, [sp, #32]
   818f0:	6003      	str	r3, [r0, #0]
   818f2:	e7e6      	b.n	818c2 <sqrt+0x72>
   818f4:	00085a40 	.word	0x00085a40
   818f8:	20070140 	.word	0x20070140

000818fc <__ieee754_sqrt>:
   818fc:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   81900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81904:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
   81908:	f8df 816c 	ldr.w	r8, [pc, #364]	; 81a78 <__ieee754_sqrt+0x17c>
   8190c:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   81910:	45c4      	cmp	ip, r8
   81912:	4606      	mov	r6, r0
   81914:	460f      	mov	r7, r1
   81916:	460b      	mov	r3, r1
   81918:	4602      	mov	r2, r0
   8191a:	f000 808f 	beq.w	81a3c <__ieee754_sqrt+0x140>
   8191e:	2900      	cmp	r1, #0
   81920:	dd6f      	ble.n	81a02 <__ieee754_sqrt+0x106>
   81922:	150f      	asrs	r7, r1, #20
   81924:	d078      	beq.n	81a18 <__ieee754_sqrt+0x11c>
   81926:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   8192a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8192e:	07f9      	lsls	r1, r7, #31
   81930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81934:	d460      	bmi.n	819f8 <__ieee754_sqrt+0xfc>
   81936:	0fd1      	lsrs	r1, r2, #31
   81938:	f04f 0c00 	mov.w	ip, #0
   8193c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   81940:	107f      	asrs	r7, r7, #1
   81942:	0052      	lsls	r2, r2, #1
   81944:	4665      	mov	r5, ip
   81946:	2016      	movs	r0, #22
   81948:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   8194c:	186c      	adds	r4, r5, r1
   8194e:	429c      	cmp	r4, r3
   81950:	ea4f 76d2 	mov.w	r6, r2, lsr #31
   81954:	ea4f 0242 	mov.w	r2, r2, lsl #1
   81958:	dc02      	bgt.n	81960 <__ieee754_sqrt+0x64>
   8195a:	1b1b      	subs	r3, r3, r4
   8195c:	1865      	adds	r5, r4, r1
   8195e:	448c      	add	ip, r1
   81960:	3801      	subs	r0, #1
   81962:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   81966:	ea4f 0151 	mov.w	r1, r1, lsr #1
   8196a:	d1ef      	bne.n	8194c <__ieee754_sqrt+0x50>
   8196c:	4680      	mov	r8, r0
   8196e:	2620      	movs	r6, #32
   81970:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   81974:	e009      	b.n	8198a <__ieee754_sqrt+0x8e>
   81976:	d023      	beq.n	819c0 <__ieee754_sqrt+0xc4>
   81978:	0fd4      	lsrs	r4, r2, #31
   8197a:	3e01      	subs	r6, #1
   8197c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   81980:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   81984:	ea4f 0242 	mov.w	r2, r2, lsl #1
   81988:	d01e      	beq.n	819c8 <__ieee754_sqrt+0xcc>
   8198a:	42ab      	cmp	r3, r5
   8198c:	eb01 0408 	add.w	r4, r1, r8
   81990:	ddf1      	ble.n	81976 <__ieee754_sqrt+0x7a>
   81992:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
   81996:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
   8199a:	eb04 0801 	add.w	r8, r4, r1
   8199e:	d009      	beq.n	819b4 <__ieee754_sqrt+0xb8>
   819a0:	46a9      	mov	r9, r5
   819a2:	1b5b      	subs	r3, r3, r5
   819a4:	4294      	cmp	r4, r2
   819a6:	bf88      	it	hi
   819a8:	f103 33ff 	addhi.w	r3, r3, #4294967295
   819ac:	1b12      	subs	r2, r2, r4
   819ae:	4408      	add	r0, r1
   819b0:	464d      	mov	r5, r9
   819b2:	e7e1      	b.n	81978 <__ieee754_sqrt+0x7c>
   819b4:	f1b8 0f00 	cmp.w	r8, #0
   819b8:	dbf2      	blt.n	819a0 <__ieee754_sqrt+0xa4>
   819ba:	f105 0901 	add.w	r9, r5, #1
   819be:	e7f0      	b.n	819a2 <__ieee754_sqrt+0xa6>
   819c0:	4294      	cmp	r4, r2
   819c2:	d9e6      	bls.n	81992 <__ieee754_sqrt+0x96>
   819c4:	461d      	mov	r5, r3
   819c6:	e7d7      	b.n	81978 <__ieee754_sqrt+0x7c>
   819c8:	431a      	orrs	r2, r3
   819ca:	d004      	beq.n	819d6 <__ieee754_sqrt+0xda>
   819cc:	1c43      	adds	r3, r0, #1
   819ce:	d041      	beq.n	81a54 <__ieee754_sqrt+0x158>
   819d0:	f000 0301 	and.w	r3, r0, #1
   819d4:	4418      	add	r0, r3
   819d6:	0846      	lsrs	r6, r0, #1
   819d8:	ea4f 036c 	mov.w	r3, ip, asr #1
   819dc:	f01c 0f01 	tst.w	ip, #1
   819e0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   819e4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   819e8:	bf18      	it	ne
   819ea:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
   819ee:	eb03 5107 	add.w	r1, r3, r7, lsl #20
   819f2:	4630      	mov	r0, r6
   819f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   819f8:	0fd1      	lsrs	r1, r2, #31
   819fa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   819fe:	0052      	lsls	r2, r2, #1
   81a00:	e799      	b.n	81936 <__ieee754_sqrt+0x3a>
   81a02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   81a06:	4303      	orrs	r3, r0
   81a08:	d022      	beq.n	81a50 <__ieee754_sqrt+0x154>
   81a0a:	bb51      	cbnz	r1, 81a62 <__ieee754_sqrt+0x166>
   81a0c:	460f      	mov	r7, r1
   81a0e:	0ad3      	lsrs	r3, r2, #11
   81a10:	3f15      	subs	r7, #21
   81a12:	0552      	lsls	r2, r2, #21
   81a14:	2b00      	cmp	r3, #0
   81a16:	d0fa      	beq.n	81a0e <__ieee754_sqrt+0x112>
   81a18:	f413 1180 	ands.w	r1, r3, #1048576	; 0x100000
   81a1c:	d11d      	bne.n	81a5a <__ieee754_sqrt+0x15e>
   81a1e:	005b      	lsls	r3, r3, #1
   81a20:	02d8      	lsls	r0, r3, #11
   81a22:	f101 0101 	add.w	r1, r1, #1
   81a26:	d5fa      	bpl.n	81a1e <__ieee754_sqrt+0x122>
   81a28:	f1c1 0001 	rsb	r0, r1, #1
   81a2c:	f1c1 0420 	rsb	r4, r1, #32
   81a30:	fa22 f404 	lsr.w	r4, r2, r4
   81a34:	4407      	add	r7, r0
   81a36:	408a      	lsls	r2, r1
   81a38:	4323      	orrs	r3, r4
   81a3a:	e774      	b.n	81926 <__ieee754_sqrt+0x2a>
   81a3c:	4602      	mov	r2, r0
   81a3e:	460b      	mov	r3, r1
   81a40:	f000 f9fe 	bl	81e40 <__aeabi_dmul>
   81a44:	4632      	mov	r2, r6
   81a46:	463b      	mov	r3, r7
   81a48:	f000 f848 	bl	81adc <__adddf3>
   81a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a54:	f10c 0c01 	add.w	ip, ip, #1
   81a58:	e7be      	b.n	819d8 <__ieee754_sqrt+0xdc>
   81a5a:	2420      	movs	r4, #32
   81a5c:	2001      	movs	r0, #1
   81a5e:	2100      	movs	r1, #0
   81a60:	e7e6      	b.n	81a30 <__ieee754_sqrt+0x134>
   81a62:	4602      	mov	r2, r0
   81a64:	460b      	mov	r3, r1
   81a66:	f000 f837 	bl	81ad8 <__aeabi_dsub>
   81a6a:	4602      	mov	r2, r0
   81a6c:	460b      	mov	r3, r1
   81a6e:	f000 fb11 	bl	82094 <__aeabi_ddiv>
   81a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a76:	bf00      	nop
   81a78:	7ff00000 	.word	0x7ff00000

00081a7c <__fpclassifyd>:
   81a7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81a80:	b410      	push	{r4}
   81a82:	d008      	beq.n	81a96 <__fpclassifyd+0x1a>
   81a84:	4a0f      	ldr	r2, [pc, #60]	; (81ac4 <__fpclassifyd+0x48>)
   81a86:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   81a8a:	4294      	cmp	r4, r2
   81a8c:	d80a      	bhi.n	81aa4 <__fpclassifyd+0x28>
   81a8e:	2004      	movs	r0, #4
   81a90:	f85d 4b04 	ldr.w	r4, [sp], #4
   81a94:	4770      	bx	lr
   81a96:	2800      	cmp	r0, #0
   81a98:	bf0c      	ite	eq
   81a9a:	2002      	moveq	r0, #2
   81a9c:	2003      	movne	r0, #3
   81a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
   81aa2:	4770      	bx	lr
   81aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81aa8:	d201      	bcs.n	81aae <__fpclassifyd+0x32>
   81aaa:	2003      	movs	r0, #3
   81aac:	e7f7      	b.n	81a9e <__fpclassifyd+0x22>
   81aae:	4a06      	ldr	r2, [pc, #24]	; (81ac8 <__fpclassifyd+0x4c>)
   81ab0:	4293      	cmp	r3, r2
   81ab2:	d001      	beq.n	81ab8 <__fpclassifyd+0x3c>
   81ab4:	2000      	movs	r0, #0
   81ab6:	e7f2      	b.n	81a9e <__fpclassifyd+0x22>
   81ab8:	f1d0 0001 	rsbs	r0, r0, #1
   81abc:	bf38      	it	cc
   81abe:	2000      	movcc	r0, #0
   81ac0:	e7ed      	b.n	81a9e <__fpclassifyd+0x22>
   81ac2:	bf00      	nop
   81ac4:	7fdfffff 	.word	0x7fdfffff
   81ac8:	7ff00000 	.word	0x7ff00000

00081acc <matherr>:
   81acc:	2000      	movs	r0, #0
   81ace:	4770      	bx	lr

00081ad0 <__aeabi_drsub>:
   81ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81ad4:	e002      	b.n	81adc <__adddf3>
   81ad6:	bf00      	nop

00081ad8 <__aeabi_dsub>:
   81ad8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081adc <__adddf3>:
   81adc:	b530      	push	{r4, r5, lr}
   81ade:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81ae2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81ae6:	ea94 0f05 	teq	r4, r5
   81aea:	bf08      	it	eq
   81aec:	ea90 0f02 	teqeq	r0, r2
   81af0:	bf1f      	itttt	ne
   81af2:	ea54 0c00 	orrsne.w	ip, r4, r0
   81af6:	ea55 0c02 	orrsne.w	ip, r5, r2
   81afa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81afe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81b02:	f000 80e2 	beq.w	81cca <__adddf3+0x1ee>
   81b06:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81b0a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81b0e:	bfb8      	it	lt
   81b10:	426d      	neglt	r5, r5
   81b12:	dd0c      	ble.n	81b2e <__adddf3+0x52>
   81b14:	442c      	add	r4, r5
   81b16:	ea80 0202 	eor.w	r2, r0, r2
   81b1a:	ea81 0303 	eor.w	r3, r1, r3
   81b1e:	ea82 0000 	eor.w	r0, r2, r0
   81b22:	ea83 0101 	eor.w	r1, r3, r1
   81b26:	ea80 0202 	eor.w	r2, r0, r2
   81b2a:	ea81 0303 	eor.w	r3, r1, r3
   81b2e:	2d36      	cmp	r5, #54	; 0x36
   81b30:	bf88      	it	hi
   81b32:	bd30      	pophi	{r4, r5, pc}
   81b34:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81b38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81b3c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81b40:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81b44:	d002      	beq.n	81b4c <__adddf3+0x70>
   81b46:	4240      	negs	r0, r0
   81b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81b4c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81b50:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81b54:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81b58:	d002      	beq.n	81b60 <__adddf3+0x84>
   81b5a:	4252      	negs	r2, r2
   81b5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81b60:	ea94 0f05 	teq	r4, r5
   81b64:	f000 80a7 	beq.w	81cb6 <__adddf3+0x1da>
   81b68:	f1a4 0401 	sub.w	r4, r4, #1
   81b6c:	f1d5 0e20 	rsbs	lr, r5, #32
   81b70:	db0d      	blt.n	81b8e <__adddf3+0xb2>
   81b72:	fa02 fc0e 	lsl.w	ip, r2, lr
   81b76:	fa22 f205 	lsr.w	r2, r2, r5
   81b7a:	1880      	adds	r0, r0, r2
   81b7c:	f141 0100 	adc.w	r1, r1, #0
   81b80:	fa03 f20e 	lsl.w	r2, r3, lr
   81b84:	1880      	adds	r0, r0, r2
   81b86:	fa43 f305 	asr.w	r3, r3, r5
   81b8a:	4159      	adcs	r1, r3
   81b8c:	e00e      	b.n	81bac <__adddf3+0xd0>
   81b8e:	f1a5 0520 	sub.w	r5, r5, #32
   81b92:	f10e 0e20 	add.w	lr, lr, #32
   81b96:	2a01      	cmp	r2, #1
   81b98:	fa03 fc0e 	lsl.w	ip, r3, lr
   81b9c:	bf28      	it	cs
   81b9e:	f04c 0c02 	orrcs.w	ip, ip, #2
   81ba2:	fa43 f305 	asr.w	r3, r3, r5
   81ba6:	18c0      	adds	r0, r0, r3
   81ba8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81bac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81bb0:	d507      	bpl.n	81bc2 <__adddf3+0xe6>
   81bb2:	f04f 0e00 	mov.w	lr, #0
   81bb6:	f1dc 0c00 	rsbs	ip, ip, #0
   81bba:	eb7e 0000 	sbcs.w	r0, lr, r0
   81bbe:	eb6e 0101 	sbc.w	r1, lr, r1
   81bc2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81bc6:	d31b      	bcc.n	81c00 <__adddf3+0x124>
   81bc8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81bcc:	d30c      	bcc.n	81be8 <__adddf3+0x10c>
   81bce:	0849      	lsrs	r1, r1, #1
   81bd0:	ea5f 0030 	movs.w	r0, r0, rrx
   81bd4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81bd8:	f104 0401 	add.w	r4, r4, #1
   81bdc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81be0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81be4:	f080 809a 	bcs.w	81d1c <__adddf3+0x240>
   81be8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81bec:	bf08      	it	eq
   81bee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81bf2:	f150 0000 	adcs.w	r0, r0, #0
   81bf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81bfa:	ea41 0105 	orr.w	r1, r1, r5
   81bfe:	bd30      	pop	{r4, r5, pc}
   81c00:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81c04:	4140      	adcs	r0, r0
   81c06:	eb41 0101 	adc.w	r1, r1, r1
   81c0a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81c0e:	f1a4 0401 	sub.w	r4, r4, #1
   81c12:	d1e9      	bne.n	81be8 <__adddf3+0x10c>
   81c14:	f091 0f00 	teq	r1, #0
   81c18:	bf04      	itt	eq
   81c1a:	4601      	moveq	r1, r0
   81c1c:	2000      	moveq	r0, #0
   81c1e:	fab1 f381 	clz	r3, r1
   81c22:	bf08      	it	eq
   81c24:	3320      	addeq	r3, #32
   81c26:	f1a3 030b 	sub.w	r3, r3, #11
   81c2a:	f1b3 0220 	subs.w	r2, r3, #32
   81c2e:	da0c      	bge.n	81c4a <__adddf3+0x16e>
   81c30:	320c      	adds	r2, #12
   81c32:	dd08      	ble.n	81c46 <__adddf3+0x16a>
   81c34:	f102 0c14 	add.w	ip, r2, #20
   81c38:	f1c2 020c 	rsb	r2, r2, #12
   81c3c:	fa01 f00c 	lsl.w	r0, r1, ip
   81c40:	fa21 f102 	lsr.w	r1, r1, r2
   81c44:	e00c      	b.n	81c60 <__adddf3+0x184>
   81c46:	f102 0214 	add.w	r2, r2, #20
   81c4a:	bfd8      	it	le
   81c4c:	f1c2 0c20 	rsble	ip, r2, #32
   81c50:	fa01 f102 	lsl.w	r1, r1, r2
   81c54:	fa20 fc0c 	lsr.w	ip, r0, ip
   81c58:	bfdc      	itt	le
   81c5a:	ea41 010c 	orrle.w	r1, r1, ip
   81c5e:	4090      	lslle	r0, r2
   81c60:	1ae4      	subs	r4, r4, r3
   81c62:	bfa2      	ittt	ge
   81c64:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81c68:	4329      	orrge	r1, r5
   81c6a:	bd30      	popge	{r4, r5, pc}
   81c6c:	ea6f 0404 	mvn.w	r4, r4
   81c70:	3c1f      	subs	r4, #31
   81c72:	da1c      	bge.n	81cae <__adddf3+0x1d2>
   81c74:	340c      	adds	r4, #12
   81c76:	dc0e      	bgt.n	81c96 <__adddf3+0x1ba>
   81c78:	f104 0414 	add.w	r4, r4, #20
   81c7c:	f1c4 0220 	rsb	r2, r4, #32
   81c80:	fa20 f004 	lsr.w	r0, r0, r4
   81c84:	fa01 f302 	lsl.w	r3, r1, r2
   81c88:	ea40 0003 	orr.w	r0, r0, r3
   81c8c:	fa21 f304 	lsr.w	r3, r1, r4
   81c90:	ea45 0103 	orr.w	r1, r5, r3
   81c94:	bd30      	pop	{r4, r5, pc}
   81c96:	f1c4 040c 	rsb	r4, r4, #12
   81c9a:	f1c4 0220 	rsb	r2, r4, #32
   81c9e:	fa20 f002 	lsr.w	r0, r0, r2
   81ca2:	fa01 f304 	lsl.w	r3, r1, r4
   81ca6:	ea40 0003 	orr.w	r0, r0, r3
   81caa:	4629      	mov	r1, r5
   81cac:	bd30      	pop	{r4, r5, pc}
   81cae:	fa21 f004 	lsr.w	r0, r1, r4
   81cb2:	4629      	mov	r1, r5
   81cb4:	bd30      	pop	{r4, r5, pc}
   81cb6:	f094 0f00 	teq	r4, #0
   81cba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81cbe:	bf06      	itte	eq
   81cc0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81cc4:	3401      	addeq	r4, #1
   81cc6:	3d01      	subne	r5, #1
   81cc8:	e74e      	b.n	81b68 <__adddf3+0x8c>
   81cca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81cce:	bf18      	it	ne
   81cd0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81cd4:	d029      	beq.n	81d2a <__adddf3+0x24e>
   81cd6:	ea94 0f05 	teq	r4, r5
   81cda:	bf08      	it	eq
   81cdc:	ea90 0f02 	teqeq	r0, r2
   81ce0:	d005      	beq.n	81cee <__adddf3+0x212>
   81ce2:	ea54 0c00 	orrs.w	ip, r4, r0
   81ce6:	bf04      	itt	eq
   81ce8:	4619      	moveq	r1, r3
   81cea:	4610      	moveq	r0, r2
   81cec:	bd30      	pop	{r4, r5, pc}
   81cee:	ea91 0f03 	teq	r1, r3
   81cf2:	bf1e      	ittt	ne
   81cf4:	2100      	movne	r1, #0
   81cf6:	2000      	movne	r0, #0
   81cf8:	bd30      	popne	{r4, r5, pc}
   81cfa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81cfe:	d105      	bne.n	81d0c <__adddf3+0x230>
   81d00:	0040      	lsls	r0, r0, #1
   81d02:	4149      	adcs	r1, r1
   81d04:	bf28      	it	cs
   81d06:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81d0a:	bd30      	pop	{r4, r5, pc}
   81d0c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81d10:	bf3c      	itt	cc
   81d12:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81d16:	bd30      	popcc	{r4, r5, pc}
   81d18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81d1c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81d20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81d24:	f04f 0000 	mov.w	r0, #0
   81d28:	bd30      	pop	{r4, r5, pc}
   81d2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81d2e:	bf1a      	itte	ne
   81d30:	4619      	movne	r1, r3
   81d32:	4610      	movne	r0, r2
   81d34:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81d38:	bf1c      	itt	ne
   81d3a:	460b      	movne	r3, r1
   81d3c:	4602      	movne	r2, r0
   81d3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81d42:	bf06      	itte	eq
   81d44:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81d48:	ea91 0f03 	teqeq	r1, r3
   81d4c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81d50:	bd30      	pop	{r4, r5, pc}
   81d52:	bf00      	nop

00081d54 <__aeabi_ui2d>:
   81d54:	f090 0f00 	teq	r0, #0
   81d58:	bf04      	itt	eq
   81d5a:	2100      	moveq	r1, #0
   81d5c:	4770      	bxeq	lr
   81d5e:	b530      	push	{r4, r5, lr}
   81d60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81d64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81d68:	f04f 0500 	mov.w	r5, #0
   81d6c:	f04f 0100 	mov.w	r1, #0
   81d70:	e750      	b.n	81c14 <__adddf3+0x138>
   81d72:	bf00      	nop

00081d74 <__aeabi_i2d>:
   81d74:	f090 0f00 	teq	r0, #0
   81d78:	bf04      	itt	eq
   81d7a:	2100      	moveq	r1, #0
   81d7c:	4770      	bxeq	lr
   81d7e:	b530      	push	{r4, r5, lr}
   81d80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81d84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81d88:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81d8c:	bf48      	it	mi
   81d8e:	4240      	negmi	r0, r0
   81d90:	f04f 0100 	mov.w	r1, #0
   81d94:	e73e      	b.n	81c14 <__adddf3+0x138>
   81d96:	bf00      	nop

00081d98 <__aeabi_f2d>:
   81d98:	0042      	lsls	r2, r0, #1
   81d9a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81d9e:	ea4f 0131 	mov.w	r1, r1, rrx
   81da2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81da6:	bf1f      	itttt	ne
   81da8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81dac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81db0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81db4:	4770      	bxne	lr
   81db6:	f092 0f00 	teq	r2, #0
   81dba:	bf14      	ite	ne
   81dbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81dc0:	4770      	bxeq	lr
   81dc2:	b530      	push	{r4, r5, lr}
   81dc4:	f44f 7460 	mov.w	r4, #896	; 0x380
   81dc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81dcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81dd0:	e720      	b.n	81c14 <__adddf3+0x138>
   81dd2:	bf00      	nop

00081dd4 <__aeabi_ul2d>:
   81dd4:	ea50 0201 	orrs.w	r2, r0, r1
   81dd8:	bf08      	it	eq
   81dda:	4770      	bxeq	lr
   81ddc:	b530      	push	{r4, r5, lr}
   81dde:	f04f 0500 	mov.w	r5, #0
   81de2:	e00a      	b.n	81dfa <__aeabi_l2d+0x16>

00081de4 <__aeabi_l2d>:
   81de4:	ea50 0201 	orrs.w	r2, r0, r1
   81de8:	bf08      	it	eq
   81dea:	4770      	bxeq	lr
   81dec:	b530      	push	{r4, r5, lr}
   81dee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81df2:	d502      	bpl.n	81dfa <__aeabi_l2d+0x16>
   81df4:	4240      	negs	r0, r0
   81df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81dfa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81dfe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81e02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81e06:	f43f aedc 	beq.w	81bc2 <__adddf3+0xe6>
   81e0a:	f04f 0203 	mov.w	r2, #3
   81e0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81e12:	bf18      	it	ne
   81e14:	3203      	addne	r2, #3
   81e16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81e1a:	bf18      	it	ne
   81e1c:	3203      	addne	r2, #3
   81e1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81e22:	f1c2 0320 	rsb	r3, r2, #32
   81e26:	fa00 fc03 	lsl.w	ip, r0, r3
   81e2a:	fa20 f002 	lsr.w	r0, r0, r2
   81e2e:	fa01 fe03 	lsl.w	lr, r1, r3
   81e32:	ea40 000e 	orr.w	r0, r0, lr
   81e36:	fa21 f102 	lsr.w	r1, r1, r2
   81e3a:	4414      	add	r4, r2
   81e3c:	e6c1      	b.n	81bc2 <__adddf3+0xe6>
   81e3e:	bf00      	nop

00081e40 <__aeabi_dmul>:
   81e40:	b570      	push	{r4, r5, r6, lr}
   81e42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81e46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81e4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81e4e:	bf1d      	ittte	ne
   81e50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81e54:	ea94 0f0c 	teqne	r4, ip
   81e58:	ea95 0f0c 	teqne	r5, ip
   81e5c:	f000 f8de 	bleq	8201c <__aeabi_dmul+0x1dc>
   81e60:	442c      	add	r4, r5
   81e62:	ea81 0603 	eor.w	r6, r1, r3
   81e66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81e6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81e6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81e72:	bf18      	it	ne
   81e74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81e78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81e80:	d038      	beq.n	81ef4 <__aeabi_dmul+0xb4>
   81e82:	fba0 ce02 	umull	ip, lr, r0, r2
   81e86:	f04f 0500 	mov.w	r5, #0
   81e8a:	fbe1 e502 	umlal	lr, r5, r1, r2
   81e8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81e92:	fbe0 e503 	umlal	lr, r5, r0, r3
   81e96:	f04f 0600 	mov.w	r6, #0
   81e9a:	fbe1 5603 	umlal	r5, r6, r1, r3
   81e9e:	f09c 0f00 	teq	ip, #0
   81ea2:	bf18      	it	ne
   81ea4:	f04e 0e01 	orrne.w	lr, lr, #1
   81ea8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81eac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81eb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81eb4:	d204      	bcs.n	81ec0 <__aeabi_dmul+0x80>
   81eb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81eba:	416d      	adcs	r5, r5
   81ebc:	eb46 0606 	adc.w	r6, r6, r6
   81ec0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81ec4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81ec8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81ecc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81ed0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81ed4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81ed8:	bf88      	it	hi
   81eda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81ede:	d81e      	bhi.n	81f1e <__aeabi_dmul+0xde>
   81ee0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81ee4:	bf08      	it	eq
   81ee6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81eea:	f150 0000 	adcs.w	r0, r0, #0
   81eee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81ef2:	bd70      	pop	{r4, r5, r6, pc}
   81ef4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81ef8:	ea46 0101 	orr.w	r1, r6, r1
   81efc:	ea40 0002 	orr.w	r0, r0, r2
   81f00:	ea81 0103 	eor.w	r1, r1, r3
   81f04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81f08:	bfc2      	ittt	gt
   81f0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   81f0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81f12:	bd70      	popgt	{r4, r5, r6, pc}
   81f14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81f18:	f04f 0e00 	mov.w	lr, #0
   81f1c:	3c01      	subs	r4, #1
   81f1e:	f300 80ab 	bgt.w	82078 <__aeabi_dmul+0x238>
   81f22:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81f26:	bfde      	ittt	le
   81f28:	2000      	movle	r0, #0
   81f2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81f2e:	bd70      	pople	{r4, r5, r6, pc}
   81f30:	f1c4 0400 	rsb	r4, r4, #0
   81f34:	3c20      	subs	r4, #32
   81f36:	da35      	bge.n	81fa4 <__aeabi_dmul+0x164>
   81f38:	340c      	adds	r4, #12
   81f3a:	dc1b      	bgt.n	81f74 <__aeabi_dmul+0x134>
   81f3c:	f104 0414 	add.w	r4, r4, #20
   81f40:	f1c4 0520 	rsb	r5, r4, #32
   81f44:	fa00 f305 	lsl.w	r3, r0, r5
   81f48:	fa20 f004 	lsr.w	r0, r0, r4
   81f4c:	fa01 f205 	lsl.w	r2, r1, r5
   81f50:	ea40 0002 	orr.w	r0, r0, r2
   81f54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81f58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81f5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81f60:	fa21 f604 	lsr.w	r6, r1, r4
   81f64:	eb42 0106 	adc.w	r1, r2, r6
   81f68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81f6c:	bf08      	it	eq
   81f6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81f72:	bd70      	pop	{r4, r5, r6, pc}
   81f74:	f1c4 040c 	rsb	r4, r4, #12
   81f78:	f1c4 0520 	rsb	r5, r4, #32
   81f7c:	fa00 f304 	lsl.w	r3, r0, r4
   81f80:	fa20 f005 	lsr.w	r0, r0, r5
   81f84:	fa01 f204 	lsl.w	r2, r1, r4
   81f88:	ea40 0002 	orr.w	r0, r0, r2
   81f8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81f90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81f94:	f141 0100 	adc.w	r1, r1, #0
   81f98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81f9c:	bf08      	it	eq
   81f9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81fa2:	bd70      	pop	{r4, r5, r6, pc}
   81fa4:	f1c4 0520 	rsb	r5, r4, #32
   81fa8:	fa00 f205 	lsl.w	r2, r0, r5
   81fac:	ea4e 0e02 	orr.w	lr, lr, r2
   81fb0:	fa20 f304 	lsr.w	r3, r0, r4
   81fb4:	fa01 f205 	lsl.w	r2, r1, r5
   81fb8:	ea43 0302 	orr.w	r3, r3, r2
   81fbc:	fa21 f004 	lsr.w	r0, r1, r4
   81fc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81fc4:	fa21 f204 	lsr.w	r2, r1, r4
   81fc8:	ea20 0002 	bic.w	r0, r0, r2
   81fcc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81fd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81fd4:	bf08      	it	eq
   81fd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81fda:	bd70      	pop	{r4, r5, r6, pc}
   81fdc:	f094 0f00 	teq	r4, #0
   81fe0:	d10f      	bne.n	82002 <__aeabi_dmul+0x1c2>
   81fe2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81fe6:	0040      	lsls	r0, r0, #1
   81fe8:	eb41 0101 	adc.w	r1, r1, r1
   81fec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81ff0:	bf08      	it	eq
   81ff2:	3c01      	subeq	r4, #1
   81ff4:	d0f7      	beq.n	81fe6 <__aeabi_dmul+0x1a6>
   81ff6:	ea41 0106 	orr.w	r1, r1, r6
   81ffa:	f095 0f00 	teq	r5, #0
   81ffe:	bf18      	it	ne
   82000:	4770      	bxne	lr
   82002:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   82006:	0052      	lsls	r2, r2, #1
   82008:	eb43 0303 	adc.w	r3, r3, r3
   8200c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82010:	bf08      	it	eq
   82012:	3d01      	subeq	r5, #1
   82014:	d0f7      	beq.n	82006 <__aeabi_dmul+0x1c6>
   82016:	ea43 0306 	orr.w	r3, r3, r6
   8201a:	4770      	bx	lr
   8201c:	ea94 0f0c 	teq	r4, ip
   82020:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82024:	bf18      	it	ne
   82026:	ea95 0f0c 	teqne	r5, ip
   8202a:	d00c      	beq.n	82046 <__aeabi_dmul+0x206>
   8202c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82030:	bf18      	it	ne
   82032:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82036:	d1d1      	bne.n	81fdc <__aeabi_dmul+0x19c>
   82038:	ea81 0103 	eor.w	r1, r1, r3
   8203c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82040:	f04f 0000 	mov.w	r0, #0
   82044:	bd70      	pop	{r4, r5, r6, pc}
   82046:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8204a:	bf06      	itte	eq
   8204c:	4610      	moveq	r0, r2
   8204e:	4619      	moveq	r1, r3
   82050:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82054:	d019      	beq.n	8208a <__aeabi_dmul+0x24a>
   82056:	ea94 0f0c 	teq	r4, ip
   8205a:	d102      	bne.n	82062 <__aeabi_dmul+0x222>
   8205c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   82060:	d113      	bne.n	8208a <__aeabi_dmul+0x24a>
   82062:	ea95 0f0c 	teq	r5, ip
   82066:	d105      	bne.n	82074 <__aeabi_dmul+0x234>
   82068:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8206c:	bf1c      	itt	ne
   8206e:	4610      	movne	r0, r2
   82070:	4619      	movne	r1, r3
   82072:	d10a      	bne.n	8208a <__aeabi_dmul+0x24a>
   82074:	ea81 0103 	eor.w	r1, r1, r3
   82078:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8207c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82080:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82084:	f04f 0000 	mov.w	r0, #0
   82088:	bd70      	pop	{r4, r5, r6, pc}
   8208a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8208e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   82092:	bd70      	pop	{r4, r5, r6, pc}

00082094 <__aeabi_ddiv>:
   82094:	b570      	push	{r4, r5, r6, lr}
   82096:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8209a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8209e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   820a2:	bf1d      	ittte	ne
   820a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   820a8:	ea94 0f0c 	teqne	r4, ip
   820ac:	ea95 0f0c 	teqne	r5, ip
   820b0:	f000 f8a7 	bleq	82202 <__aeabi_ddiv+0x16e>
   820b4:	eba4 0405 	sub.w	r4, r4, r5
   820b8:	ea81 0e03 	eor.w	lr, r1, r3
   820bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   820c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   820c4:	f000 8088 	beq.w	821d8 <__aeabi_ddiv+0x144>
   820c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   820cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   820d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   820d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   820d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   820dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   820e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   820e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   820e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   820ec:	429d      	cmp	r5, r3
   820ee:	bf08      	it	eq
   820f0:	4296      	cmpeq	r6, r2
   820f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   820f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   820fa:	d202      	bcs.n	82102 <__aeabi_ddiv+0x6e>
   820fc:	085b      	lsrs	r3, r3, #1
   820fe:	ea4f 0232 	mov.w	r2, r2, rrx
   82102:	1ab6      	subs	r6, r6, r2
   82104:	eb65 0503 	sbc.w	r5, r5, r3
   82108:	085b      	lsrs	r3, r3, #1
   8210a:	ea4f 0232 	mov.w	r2, r2, rrx
   8210e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   82112:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   82116:	ebb6 0e02 	subs.w	lr, r6, r2
   8211a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8211e:	bf22      	ittt	cs
   82120:	1ab6      	subcs	r6, r6, r2
   82122:	4675      	movcs	r5, lr
   82124:	ea40 000c 	orrcs.w	r0, r0, ip
   82128:	085b      	lsrs	r3, r3, #1
   8212a:	ea4f 0232 	mov.w	r2, r2, rrx
   8212e:	ebb6 0e02 	subs.w	lr, r6, r2
   82132:	eb75 0e03 	sbcs.w	lr, r5, r3
   82136:	bf22      	ittt	cs
   82138:	1ab6      	subcs	r6, r6, r2
   8213a:	4675      	movcs	r5, lr
   8213c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82140:	085b      	lsrs	r3, r3, #1
   82142:	ea4f 0232 	mov.w	r2, r2, rrx
   82146:	ebb6 0e02 	subs.w	lr, r6, r2
   8214a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8214e:	bf22      	ittt	cs
   82150:	1ab6      	subcs	r6, r6, r2
   82152:	4675      	movcs	r5, lr
   82154:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82158:	085b      	lsrs	r3, r3, #1
   8215a:	ea4f 0232 	mov.w	r2, r2, rrx
   8215e:	ebb6 0e02 	subs.w	lr, r6, r2
   82162:	eb75 0e03 	sbcs.w	lr, r5, r3
   82166:	bf22      	ittt	cs
   82168:	1ab6      	subcs	r6, r6, r2
   8216a:	4675      	movcs	r5, lr
   8216c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82170:	ea55 0e06 	orrs.w	lr, r5, r6
   82174:	d018      	beq.n	821a8 <__aeabi_ddiv+0x114>
   82176:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8217a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8217e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   82182:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   82186:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8218a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8218e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   82192:	d1c0      	bne.n	82116 <__aeabi_ddiv+0x82>
   82194:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82198:	d10b      	bne.n	821b2 <__aeabi_ddiv+0x11e>
   8219a:	ea41 0100 	orr.w	r1, r1, r0
   8219e:	f04f 0000 	mov.w	r0, #0
   821a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   821a6:	e7b6      	b.n	82116 <__aeabi_ddiv+0x82>
   821a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   821ac:	bf04      	itt	eq
   821ae:	4301      	orreq	r1, r0
   821b0:	2000      	moveq	r0, #0
   821b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   821b6:	bf88      	it	hi
   821b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   821bc:	f63f aeaf 	bhi.w	81f1e <__aeabi_dmul+0xde>
   821c0:	ebb5 0c03 	subs.w	ip, r5, r3
   821c4:	bf04      	itt	eq
   821c6:	ebb6 0c02 	subseq.w	ip, r6, r2
   821ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   821ce:	f150 0000 	adcs.w	r0, r0, #0
   821d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   821d6:	bd70      	pop	{r4, r5, r6, pc}
   821d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   821dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   821e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   821e4:	bfc2      	ittt	gt
   821e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   821ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   821ee:	bd70      	popgt	{r4, r5, r6, pc}
   821f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   821f4:	f04f 0e00 	mov.w	lr, #0
   821f8:	3c01      	subs	r4, #1
   821fa:	e690      	b.n	81f1e <__aeabi_dmul+0xde>
   821fc:	ea45 0e06 	orr.w	lr, r5, r6
   82200:	e68d      	b.n	81f1e <__aeabi_dmul+0xde>
   82202:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82206:	ea94 0f0c 	teq	r4, ip
   8220a:	bf08      	it	eq
   8220c:	ea95 0f0c 	teqeq	r5, ip
   82210:	f43f af3b 	beq.w	8208a <__aeabi_dmul+0x24a>
   82214:	ea94 0f0c 	teq	r4, ip
   82218:	d10a      	bne.n	82230 <__aeabi_ddiv+0x19c>
   8221a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8221e:	f47f af34 	bne.w	8208a <__aeabi_dmul+0x24a>
   82222:	ea95 0f0c 	teq	r5, ip
   82226:	f47f af25 	bne.w	82074 <__aeabi_dmul+0x234>
   8222a:	4610      	mov	r0, r2
   8222c:	4619      	mov	r1, r3
   8222e:	e72c      	b.n	8208a <__aeabi_dmul+0x24a>
   82230:	ea95 0f0c 	teq	r5, ip
   82234:	d106      	bne.n	82244 <__aeabi_ddiv+0x1b0>
   82236:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8223a:	f43f aefd 	beq.w	82038 <__aeabi_dmul+0x1f8>
   8223e:	4610      	mov	r0, r2
   82240:	4619      	mov	r1, r3
   82242:	e722      	b.n	8208a <__aeabi_dmul+0x24a>
   82244:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82248:	bf18      	it	ne
   8224a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8224e:	f47f aec5 	bne.w	81fdc <__aeabi_dmul+0x19c>
   82252:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   82256:	f47f af0d 	bne.w	82074 <__aeabi_dmul+0x234>
   8225a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8225e:	f47f aeeb 	bne.w	82038 <__aeabi_dmul+0x1f8>
   82262:	e712      	b.n	8208a <__aeabi_dmul+0x24a>

00082264 <__gedf2>:
   82264:	f04f 3cff 	mov.w	ip, #4294967295
   82268:	e006      	b.n	82278 <__cmpdf2+0x4>
   8226a:	bf00      	nop

0008226c <__ledf2>:
   8226c:	f04f 0c01 	mov.w	ip, #1
   82270:	e002      	b.n	82278 <__cmpdf2+0x4>
   82272:	bf00      	nop

00082274 <__cmpdf2>:
   82274:	f04f 0c01 	mov.w	ip, #1
   82278:	f84d cd04 	str.w	ip, [sp, #-4]!
   8227c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   82280:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   82284:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   82288:	bf18      	it	ne
   8228a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8228e:	d01b      	beq.n	822c8 <__cmpdf2+0x54>
   82290:	b001      	add	sp, #4
   82292:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   82296:	bf0c      	ite	eq
   82298:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8229c:	ea91 0f03 	teqne	r1, r3
   822a0:	bf02      	ittt	eq
   822a2:	ea90 0f02 	teqeq	r0, r2
   822a6:	2000      	moveq	r0, #0
   822a8:	4770      	bxeq	lr
   822aa:	f110 0f00 	cmn.w	r0, #0
   822ae:	ea91 0f03 	teq	r1, r3
   822b2:	bf58      	it	pl
   822b4:	4299      	cmppl	r1, r3
   822b6:	bf08      	it	eq
   822b8:	4290      	cmpeq	r0, r2
   822ba:	bf2c      	ite	cs
   822bc:	17d8      	asrcs	r0, r3, #31
   822be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   822c2:	f040 0001 	orr.w	r0, r0, #1
   822c6:	4770      	bx	lr
   822c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   822cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   822d0:	d102      	bne.n	822d8 <__cmpdf2+0x64>
   822d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   822d6:	d107      	bne.n	822e8 <__cmpdf2+0x74>
   822d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   822dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   822e0:	d1d6      	bne.n	82290 <__cmpdf2+0x1c>
   822e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   822e6:	d0d3      	beq.n	82290 <__cmpdf2+0x1c>
   822e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   822ec:	4770      	bx	lr
   822ee:	bf00      	nop

000822f0 <__aeabi_cdrcmple>:
   822f0:	4684      	mov	ip, r0
   822f2:	4610      	mov	r0, r2
   822f4:	4662      	mov	r2, ip
   822f6:	468c      	mov	ip, r1
   822f8:	4619      	mov	r1, r3
   822fa:	4663      	mov	r3, ip
   822fc:	e000      	b.n	82300 <__aeabi_cdcmpeq>
   822fe:	bf00      	nop

00082300 <__aeabi_cdcmpeq>:
   82300:	b501      	push	{r0, lr}
   82302:	f7ff ffb7 	bl	82274 <__cmpdf2>
   82306:	2800      	cmp	r0, #0
   82308:	bf48      	it	mi
   8230a:	f110 0f00 	cmnmi.w	r0, #0
   8230e:	bd01      	pop	{r0, pc}

00082310 <__aeabi_dcmpeq>:
   82310:	f84d ed08 	str.w	lr, [sp, #-8]!
   82314:	f7ff fff4 	bl	82300 <__aeabi_cdcmpeq>
   82318:	bf0c      	ite	eq
   8231a:	2001      	moveq	r0, #1
   8231c:	2000      	movne	r0, #0
   8231e:	f85d fb08 	ldr.w	pc, [sp], #8
   82322:	bf00      	nop

00082324 <__aeabi_dcmplt>:
   82324:	f84d ed08 	str.w	lr, [sp, #-8]!
   82328:	f7ff ffea 	bl	82300 <__aeabi_cdcmpeq>
   8232c:	bf34      	ite	cc
   8232e:	2001      	movcc	r0, #1
   82330:	2000      	movcs	r0, #0
   82332:	f85d fb08 	ldr.w	pc, [sp], #8
   82336:	bf00      	nop

00082338 <__aeabi_dcmple>:
   82338:	f84d ed08 	str.w	lr, [sp, #-8]!
   8233c:	f7ff ffe0 	bl	82300 <__aeabi_cdcmpeq>
   82340:	bf94      	ite	ls
   82342:	2001      	movls	r0, #1
   82344:	2000      	movhi	r0, #0
   82346:	f85d fb08 	ldr.w	pc, [sp], #8
   8234a:	bf00      	nop

0008234c <__aeabi_dcmpge>:
   8234c:	f84d ed08 	str.w	lr, [sp, #-8]!
   82350:	f7ff ffce 	bl	822f0 <__aeabi_cdrcmple>
   82354:	bf94      	ite	ls
   82356:	2001      	movls	r0, #1
   82358:	2000      	movhi	r0, #0
   8235a:	f85d fb08 	ldr.w	pc, [sp], #8
   8235e:	bf00      	nop

00082360 <__aeabi_dcmpgt>:
   82360:	f84d ed08 	str.w	lr, [sp, #-8]!
   82364:	f7ff ffc4 	bl	822f0 <__aeabi_cdrcmple>
   82368:	bf34      	ite	cc
   8236a:	2001      	movcc	r0, #1
   8236c:	2000      	movcs	r0, #0
   8236e:	f85d fb08 	ldr.w	pc, [sp], #8
   82372:	bf00      	nop

00082374 <__aeabi_d2iz>:
   82374:	ea4f 0241 	mov.w	r2, r1, lsl #1
   82378:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8237c:	d215      	bcs.n	823aa <__aeabi_d2iz+0x36>
   8237e:	d511      	bpl.n	823a4 <__aeabi_d2iz+0x30>
   82380:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   82384:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   82388:	d912      	bls.n	823b0 <__aeabi_d2iz+0x3c>
   8238a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8238e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   82392:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   82396:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8239a:	fa23 f002 	lsr.w	r0, r3, r2
   8239e:	bf18      	it	ne
   823a0:	4240      	negne	r0, r0
   823a2:	4770      	bx	lr
   823a4:	f04f 0000 	mov.w	r0, #0
   823a8:	4770      	bx	lr
   823aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   823ae:	d105      	bne.n	823bc <__aeabi_d2iz+0x48>
   823b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   823b4:	bf08      	it	eq
   823b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   823ba:	4770      	bx	lr
   823bc:	f04f 0000 	mov.w	r0, #0
   823c0:	4770      	bx	lr
   823c2:	bf00      	nop

000823c4 <__aeabi_d2f>:
   823c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   823c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   823cc:	bf24      	itt	cs
   823ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   823d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   823d6:	d90d      	bls.n	823f4 <__aeabi_d2f+0x30>
   823d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   823dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   823e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   823e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   823e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   823ec:	bf08      	it	eq
   823ee:	f020 0001 	biceq.w	r0, r0, #1
   823f2:	4770      	bx	lr
   823f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   823f8:	d121      	bne.n	8243e <__aeabi_d2f+0x7a>
   823fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   823fe:	bfbc      	itt	lt
   82400:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   82404:	4770      	bxlt	lr
   82406:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8240a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   8240e:	f1c2 0218 	rsb	r2, r2, #24
   82412:	f1c2 0c20 	rsb	ip, r2, #32
   82416:	fa10 f30c 	lsls.w	r3, r0, ip
   8241a:	fa20 f002 	lsr.w	r0, r0, r2
   8241e:	bf18      	it	ne
   82420:	f040 0001 	orrne.w	r0, r0, #1
   82424:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   82428:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   8242c:	fa03 fc0c 	lsl.w	ip, r3, ip
   82430:	ea40 000c 	orr.w	r0, r0, ip
   82434:	fa23 f302 	lsr.w	r3, r3, r2
   82438:	ea4f 0343 	mov.w	r3, r3, lsl #1
   8243c:	e7cc      	b.n	823d8 <__aeabi_d2f+0x14>
   8243e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   82442:	d107      	bne.n	82454 <__aeabi_d2f+0x90>
   82444:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   82448:	bf1e      	ittt	ne
   8244a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8244e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   82452:	4770      	bxne	lr
   82454:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   82458:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8245c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82460:	4770      	bx	lr
   82462:	bf00      	nop

00082464 <__aeabi_frsub>:
   82464:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   82468:	e002      	b.n	82470 <__addsf3>
   8246a:	bf00      	nop

0008246c <__aeabi_fsub>:
   8246c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00082470 <__addsf3>:
   82470:	0042      	lsls	r2, r0, #1
   82472:	bf1f      	itttt	ne
   82474:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   82478:	ea92 0f03 	teqne	r2, r3
   8247c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   82480:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82484:	d06a      	beq.n	8255c <__addsf3+0xec>
   82486:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8248a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8248e:	bfc1      	itttt	gt
   82490:	18d2      	addgt	r2, r2, r3
   82492:	4041      	eorgt	r1, r0
   82494:	4048      	eorgt	r0, r1
   82496:	4041      	eorgt	r1, r0
   82498:	bfb8      	it	lt
   8249a:	425b      	neglt	r3, r3
   8249c:	2b19      	cmp	r3, #25
   8249e:	bf88      	it	hi
   824a0:	4770      	bxhi	lr
   824a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   824a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   824aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   824ae:	bf18      	it	ne
   824b0:	4240      	negne	r0, r0
   824b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   824b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   824ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   824be:	bf18      	it	ne
   824c0:	4249      	negne	r1, r1
   824c2:	ea92 0f03 	teq	r2, r3
   824c6:	d03f      	beq.n	82548 <__addsf3+0xd8>
   824c8:	f1a2 0201 	sub.w	r2, r2, #1
   824cc:	fa41 fc03 	asr.w	ip, r1, r3
   824d0:	eb10 000c 	adds.w	r0, r0, ip
   824d4:	f1c3 0320 	rsb	r3, r3, #32
   824d8:	fa01 f103 	lsl.w	r1, r1, r3
   824dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   824e0:	d502      	bpl.n	824e8 <__addsf3+0x78>
   824e2:	4249      	negs	r1, r1
   824e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   824e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   824ec:	d313      	bcc.n	82516 <__addsf3+0xa6>
   824ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   824f2:	d306      	bcc.n	82502 <__addsf3+0x92>
   824f4:	0840      	lsrs	r0, r0, #1
   824f6:	ea4f 0131 	mov.w	r1, r1, rrx
   824fa:	f102 0201 	add.w	r2, r2, #1
   824fe:	2afe      	cmp	r2, #254	; 0xfe
   82500:	d251      	bcs.n	825a6 <__addsf3+0x136>
   82502:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   82506:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8250a:	bf08      	it	eq
   8250c:	f020 0001 	biceq.w	r0, r0, #1
   82510:	ea40 0003 	orr.w	r0, r0, r3
   82514:	4770      	bx	lr
   82516:	0049      	lsls	r1, r1, #1
   82518:	eb40 0000 	adc.w	r0, r0, r0
   8251c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   82520:	f1a2 0201 	sub.w	r2, r2, #1
   82524:	d1ed      	bne.n	82502 <__addsf3+0x92>
   82526:	fab0 fc80 	clz	ip, r0
   8252a:	f1ac 0c08 	sub.w	ip, ip, #8
   8252e:	ebb2 020c 	subs.w	r2, r2, ip
   82532:	fa00 f00c 	lsl.w	r0, r0, ip
   82536:	bfaa      	itet	ge
   82538:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8253c:	4252      	neglt	r2, r2
   8253e:	4318      	orrge	r0, r3
   82540:	bfbc      	itt	lt
   82542:	40d0      	lsrlt	r0, r2
   82544:	4318      	orrlt	r0, r3
   82546:	4770      	bx	lr
   82548:	f092 0f00 	teq	r2, #0
   8254c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   82550:	bf06      	itte	eq
   82552:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   82556:	3201      	addeq	r2, #1
   82558:	3b01      	subne	r3, #1
   8255a:	e7b5      	b.n	824c8 <__addsf3+0x58>
   8255c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82560:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82564:	bf18      	it	ne
   82566:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8256a:	d021      	beq.n	825b0 <__addsf3+0x140>
   8256c:	ea92 0f03 	teq	r2, r3
   82570:	d004      	beq.n	8257c <__addsf3+0x10c>
   82572:	f092 0f00 	teq	r2, #0
   82576:	bf08      	it	eq
   82578:	4608      	moveq	r0, r1
   8257a:	4770      	bx	lr
   8257c:	ea90 0f01 	teq	r0, r1
   82580:	bf1c      	itt	ne
   82582:	2000      	movne	r0, #0
   82584:	4770      	bxne	lr
   82586:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8258a:	d104      	bne.n	82596 <__addsf3+0x126>
   8258c:	0040      	lsls	r0, r0, #1
   8258e:	bf28      	it	cs
   82590:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   82594:	4770      	bx	lr
   82596:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8259a:	bf3c      	itt	cc
   8259c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   825a0:	4770      	bxcc	lr
   825a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   825a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   825aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   825ae:	4770      	bx	lr
   825b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   825b4:	bf16      	itet	ne
   825b6:	4608      	movne	r0, r1
   825b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   825bc:	4601      	movne	r1, r0
   825be:	0242      	lsls	r2, r0, #9
   825c0:	bf06      	itte	eq
   825c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   825c6:	ea90 0f01 	teqeq	r0, r1
   825ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   825ce:	4770      	bx	lr

000825d0 <__aeabi_ui2f>:
   825d0:	f04f 0300 	mov.w	r3, #0
   825d4:	e004      	b.n	825e0 <__aeabi_i2f+0x8>
   825d6:	bf00      	nop

000825d8 <__aeabi_i2f>:
   825d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   825dc:	bf48      	it	mi
   825de:	4240      	negmi	r0, r0
   825e0:	ea5f 0c00 	movs.w	ip, r0
   825e4:	bf08      	it	eq
   825e6:	4770      	bxeq	lr
   825e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   825ec:	4601      	mov	r1, r0
   825ee:	f04f 0000 	mov.w	r0, #0
   825f2:	e01c      	b.n	8262e <__aeabi_l2f+0x2a>

000825f4 <__aeabi_ul2f>:
   825f4:	ea50 0201 	orrs.w	r2, r0, r1
   825f8:	bf08      	it	eq
   825fa:	4770      	bxeq	lr
   825fc:	f04f 0300 	mov.w	r3, #0
   82600:	e00a      	b.n	82618 <__aeabi_l2f+0x14>
   82602:	bf00      	nop

00082604 <__aeabi_l2f>:
   82604:	ea50 0201 	orrs.w	r2, r0, r1
   82608:	bf08      	it	eq
   8260a:	4770      	bxeq	lr
   8260c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   82610:	d502      	bpl.n	82618 <__aeabi_l2f+0x14>
   82612:	4240      	negs	r0, r0
   82614:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82618:	ea5f 0c01 	movs.w	ip, r1
   8261c:	bf02      	ittt	eq
   8261e:	4684      	moveq	ip, r0
   82620:	4601      	moveq	r1, r0
   82622:	2000      	moveq	r0, #0
   82624:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   82628:	bf08      	it	eq
   8262a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8262e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   82632:	fabc f28c 	clz	r2, ip
   82636:	3a08      	subs	r2, #8
   82638:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8263c:	db10      	blt.n	82660 <__aeabi_l2f+0x5c>
   8263e:	fa01 fc02 	lsl.w	ip, r1, r2
   82642:	4463      	add	r3, ip
   82644:	fa00 fc02 	lsl.w	ip, r0, r2
   82648:	f1c2 0220 	rsb	r2, r2, #32
   8264c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82650:	fa20 f202 	lsr.w	r2, r0, r2
   82654:	eb43 0002 	adc.w	r0, r3, r2
   82658:	bf08      	it	eq
   8265a:	f020 0001 	biceq.w	r0, r0, #1
   8265e:	4770      	bx	lr
   82660:	f102 0220 	add.w	r2, r2, #32
   82664:	fa01 fc02 	lsl.w	ip, r1, r2
   82668:	f1c2 0220 	rsb	r2, r2, #32
   8266c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   82670:	fa21 f202 	lsr.w	r2, r1, r2
   82674:	eb43 0002 	adc.w	r0, r3, r2
   82678:	bf08      	it	eq
   8267a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8267e:	4770      	bx	lr

00082680 <__aeabi_fmul>:
   82680:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82684:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   82688:	bf1e      	ittt	ne
   8268a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8268e:	ea92 0f0c 	teqne	r2, ip
   82692:	ea93 0f0c 	teqne	r3, ip
   82696:	d06f      	beq.n	82778 <__aeabi_fmul+0xf8>
   82698:	441a      	add	r2, r3
   8269a:	ea80 0c01 	eor.w	ip, r0, r1
   8269e:	0240      	lsls	r0, r0, #9
   826a0:	bf18      	it	ne
   826a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   826a6:	d01e      	beq.n	826e6 <__aeabi_fmul+0x66>
   826a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   826ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   826b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   826b4:	fba0 3101 	umull	r3, r1, r0, r1
   826b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   826bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   826c0:	bf3e      	ittt	cc
   826c2:	0049      	lslcc	r1, r1, #1
   826c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   826c8:	005b      	lslcc	r3, r3, #1
   826ca:	ea40 0001 	orr.w	r0, r0, r1
   826ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   826d2:	2afd      	cmp	r2, #253	; 0xfd
   826d4:	d81d      	bhi.n	82712 <__aeabi_fmul+0x92>
   826d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   826da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   826de:	bf08      	it	eq
   826e0:	f020 0001 	biceq.w	r0, r0, #1
   826e4:	4770      	bx	lr
   826e6:	f090 0f00 	teq	r0, #0
   826ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   826ee:	bf08      	it	eq
   826f0:	0249      	lsleq	r1, r1, #9
   826f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   826f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   826fa:	3a7f      	subs	r2, #127	; 0x7f
   826fc:	bfc2      	ittt	gt
   826fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   82702:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   82706:	4770      	bxgt	lr
   82708:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8270c:	f04f 0300 	mov.w	r3, #0
   82710:	3a01      	subs	r2, #1
   82712:	dc5d      	bgt.n	827d0 <__aeabi_fmul+0x150>
   82714:	f112 0f19 	cmn.w	r2, #25
   82718:	bfdc      	itt	le
   8271a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8271e:	4770      	bxle	lr
   82720:	f1c2 0200 	rsb	r2, r2, #0
   82724:	0041      	lsls	r1, r0, #1
   82726:	fa21 f102 	lsr.w	r1, r1, r2
   8272a:	f1c2 0220 	rsb	r2, r2, #32
   8272e:	fa00 fc02 	lsl.w	ip, r0, r2
   82732:	ea5f 0031 	movs.w	r0, r1, rrx
   82736:	f140 0000 	adc.w	r0, r0, #0
   8273a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8273e:	bf08      	it	eq
   82740:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   82744:	4770      	bx	lr
   82746:	f092 0f00 	teq	r2, #0
   8274a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8274e:	bf02      	ittt	eq
   82750:	0040      	lsleq	r0, r0, #1
   82752:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   82756:	3a01      	subeq	r2, #1
   82758:	d0f9      	beq.n	8274e <__aeabi_fmul+0xce>
   8275a:	ea40 000c 	orr.w	r0, r0, ip
   8275e:	f093 0f00 	teq	r3, #0
   82762:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82766:	bf02      	ittt	eq
   82768:	0049      	lsleq	r1, r1, #1
   8276a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8276e:	3b01      	subeq	r3, #1
   82770:	d0f9      	beq.n	82766 <__aeabi_fmul+0xe6>
   82772:	ea41 010c 	orr.w	r1, r1, ip
   82776:	e78f      	b.n	82698 <__aeabi_fmul+0x18>
   82778:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8277c:	ea92 0f0c 	teq	r2, ip
   82780:	bf18      	it	ne
   82782:	ea93 0f0c 	teqne	r3, ip
   82786:	d00a      	beq.n	8279e <__aeabi_fmul+0x11e>
   82788:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8278c:	bf18      	it	ne
   8278e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   82792:	d1d8      	bne.n	82746 <__aeabi_fmul+0xc6>
   82794:	ea80 0001 	eor.w	r0, r0, r1
   82798:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8279c:	4770      	bx	lr
   8279e:	f090 0f00 	teq	r0, #0
   827a2:	bf17      	itett	ne
   827a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   827a8:	4608      	moveq	r0, r1
   827aa:	f091 0f00 	teqne	r1, #0
   827ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   827b2:	d014      	beq.n	827de <__aeabi_fmul+0x15e>
   827b4:	ea92 0f0c 	teq	r2, ip
   827b8:	d101      	bne.n	827be <__aeabi_fmul+0x13e>
   827ba:	0242      	lsls	r2, r0, #9
   827bc:	d10f      	bne.n	827de <__aeabi_fmul+0x15e>
   827be:	ea93 0f0c 	teq	r3, ip
   827c2:	d103      	bne.n	827cc <__aeabi_fmul+0x14c>
   827c4:	024b      	lsls	r3, r1, #9
   827c6:	bf18      	it	ne
   827c8:	4608      	movne	r0, r1
   827ca:	d108      	bne.n	827de <__aeabi_fmul+0x15e>
   827cc:	ea80 0001 	eor.w	r0, r0, r1
   827d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   827d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   827d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   827dc:	4770      	bx	lr
   827de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   827e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   827e6:	4770      	bx	lr

000827e8 <__aeabi_fdiv>:
   827e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   827ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   827f0:	bf1e      	ittt	ne
   827f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   827f6:	ea92 0f0c 	teqne	r2, ip
   827fa:	ea93 0f0c 	teqne	r3, ip
   827fe:	d069      	beq.n	828d4 <__aeabi_fdiv+0xec>
   82800:	eba2 0203 	sub.w	r2, r2, r3
   82804:	ea80 0c01 	eor.w	ip, r0, r1
   82808:	0249      	lsls	r1, r1, #9
   8280a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8280e:	d037      	beq.n	82880 <__aeabi_fdiv+0x98>
   82810:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   82814:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   82818:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   8281c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   82820:	428b      	cmp	r3, r1
   82822:	bf38      	it	cc
   82824:	005b      	lslcc	r3, r3, #1
   82826:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8282a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8282e:	428b      	cmp	r3, r1
   82830:	bf24      	itt	cs
   82832:	1a5b      	subcs	r3, r3, r1
   82834:	ea40 000c 	orrcs.w	r0, r0, ip
   82838:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   8283c:	bf24      	itt	cs
   8283e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   82842:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82846:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8284a:	bf24      	itt	cs
   8284c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   82850:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82854:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   82858:	bf24      	itt	cs
   8285a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8285e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82862:	011b      	lsls	r3, r3, #4
   82864:	bf18      	it	ne
   82866:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8286a:	d1e0      	bne.n	8282e <__aeabi_fdiv+0x46>
   8286c:	2afd      	cmp	r2, #253	; 0xfd
   8286e:	f63f af50 	bhi.w	82712 <__aeabi_fmul+0x92>
   82872:	428b      	cmp	r3, r1
   82874:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82878:	bf08      	it	eq
   8287a:	f020 0001 	biceq.w	r0, r0, #1
   8287e:	4770      	bx	lr
   82880:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   82884:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   82888:	327f      	adds	r2, #127	; 0x7f
   8288a:	bfc2      	ittt	gt
   8288c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   82890:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   82894:	4770      	bxgt	lr
   82896:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8289a:	f04f 0300 	mov.w	r3, #0
   8289e:	3a01      	subs	r2, #1
   828a0:	e737      	b.n	82712 <__aeabi_fmul+0x92>
   828a2:	f092 0f00 	teq	r2, #0
   828a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   828aa:	bf02      	ittt	eq
   828ac:	0040      	lsleq	r0, r0, #1
   828ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   828b2:	3a01      	subeq	r2, #1
   828b4:	d0f9      	beq.n	828aa <__aeabi_fdiv+0xc2>
   828b6:	ea40 000c 	orr.w	r0, r0, ip
   828ba:	f093 0f00 	teq	r3, #0
   828be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   828c2:	bf02      	ittt	eq
   828c4:	0049      	lsleq	r1, r1, #1
   828c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   828ca:	3b01      	subeq	r3, #1
   828cc:	d0f9      	beq.n	828c2 <__aeabi_fdiv+0xda>
   828ce:	ea41 010c 	orr.w	r1, r1, ip
   828d2:	e795      	b.n	82800 <__aeabi_fdiv+0x18>
   828d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   828d8:	ea92 0f0c 	teq	r2, ip
   828dc:	d108      	bne.n	828f0 <__aeabi_fdiv+0x108>
   828de:	0242      	lsls	r2, r0, #9
   828e0:	f47f af7d 	bne.w	827de <__aeabi_fmul+0x15e>
   828e4:	ea93 0f0c 	teq	r3, ip
   828e8:	f47f af70 	bne.w	827cc <__aeabi_fmul+0x14c>
   828ec:	4608      	mov	r0, r1
   828ee:	e776      	b.n	827de <__aeabi_fmul+0x15e>
   828f0:	ea93 0f0c 	teq	r3, ip
   828f4:	d104      	bne.n	82900 <__aeabi_fdiv+0x118>
   828f6:	024b      	lsls	r3, r1, #9
   828f8:	f43f af4c 	beq.w	82794 <__aeabi_fmul+0x114>
   828fc:	4608      	mov	r0, r1
   828fe:	e76e      	b.n	827de <__aeabi_fmul+0x15e>
   82900:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   82904:	bf18      	it	ne
   82906:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8290a:	d1ca      	bne.n	828a2 <__aeabi_fdiv+0xba>
   8290c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   82910:	f47f af5c 	bne.w	827cc <__aeabi_fmul+0x14c>
   82914:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   82918:	f47f af3c 	bne.w	82794 <__aeabi_fmul+0x114>
   8291c:	e75f      	b.n	827de <__aeabi_fmul+0x15e>
   8291e:	bf00      	nop

00082920 <__gesf2>:
   82920:	f04f 3cff 	mov.w	ip, #4294967295
   82924:	e006      	b.n	82934 <__cmpsf2+0x4>
   82926:	bf00      	nop

00082928 <__lesf2>:
   82928:	f04f 0c01 	mov.w	ip, #1
   8292c:	e002      	b.n	82934 <__cmpsf2+0x4>
   8292e:	bf00      	nop

00082930 <__cmpsf2>:
   82930:	f04f 0c01 	mov.w	ip, #1
   82934:	f84d cd04 	str.w	ip, [sp, #-4]!
   82938:	ea4f 0240 	mov.w	r2, r0, lsl #1
   8293c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82940:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82944:	bf18      	it	ne
   82946:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8294a:	d011      	beq.n	82970 <__cmpsf2+0x40>
   8294c:	b001      	add	sp, #4
   8294e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   82952:	bf18      	it	ne
   82954:	ea90 0f01 	teqne	r0, r1
   82958:	bf58      	it	pl
   8295a:	ebb2 0003 	subspl.w	r0, r2, r3
   8295e:	bf88      	it	hi
   82960:	17c8      	asrhi	r0, r1, #31
   82962:	bf38      	it	cc
   82964:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   82968:	bf18      	it	ne
   8296a:	f040 0001 	orrne.w	r0, r0, #1
   8296e:	4770      	bx	lr
   82970:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82974:	d102      	bne.n	8297c <__cmpsf2+0x4c>
   82976:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   8297a:	d105      	bne.n	82988 <__cmpsf2+0x58>
   8297c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   82980:	d1e4      	bne.n	8294c <__cmpsf2+0x1c>
   82982:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   82986:	d0e1      	beq.n	8294c <__cmpsf2+0x1c>
   82988:	f85d 0b04 	ldr.w	r0, [sp], #4
   8298c:	4770      	bx	lr
   8298e:	bf00      	nop

00082990 <__aeabi_cfrcmple>:
   82990:	4684      	mov	ip, r0
   82992:	4608      	mov	r0, r1
   82994:	4661      	mov	r1, ip
   82996:	e7ff      	b.n	82998 <__aeabi_cfcmpeq>

00082998 <__aeabi_cfcmpeq>:
   82998:	b50f      	push	{r0, r1, r2, r3, lr}
   8299a:	f7ff ffc9 	bl	82930 <__cmpsf2>
   8299e:	2800      	cmp	r0, #0
   829a0:	bf48      	it	mi
   829a2:	f110 0f00 	cmnmi.w	r0, #0
   829a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

000829a8 <__aeabi_fcmpeq>:
   829a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   829ac:	f7ff fff4 	bl	82998 <__aeabi_cfcmpeq>
   829b0:	bf0c      	ite	eq
   829b2:	2001      	moveq	r0, #1
   829b4:	2000      	movne	r0, #0
   829b6:	f85d fb08 	ldr.w	pc, [sp], #8
   829ba:	bf00      	nop

000829bc <__aeabi_fcmplt>:
   829bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   829c0:	f7ff ffea 	bl	82998 <__aeabi_cfcmpeq>
   829c4:	bf34      	ite	cc
   829c6:	2001      	movcc	r0, #1
   829c8:	2000      	movcs	r0, #0
   829ca:	f85d fb08 	ldr.w	pc, [sp], #8
   829ce:	bf00      	nop

000829d0 <__aeabi_fcmple>:
   829d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   829d4:	f7ff ffe0 	bl	82998 <__aeabi_cfcmpeq>
   829d8:	bf94      	ite	ls
   829da:	2001      	movls	r0, #1
   829dc:	2000      	movhi	r0, #0
   829de:	f85d fb08 	ldr.w	pc, [sp], #8
   829e2:	bf00      	nop

000829e4 <__aeabi_fcmpge>:
   829e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   829e8:	f7ff ffd2 	bl	82990 <__aeabi_cfrcmple>
   829ec:	bf94      	ite	ls
   829ee:	2001      	movls	r0, #1
   829f0:	2000      	movhi	r0, #0
   829f2:	f85d fb08 	ldr.w	pc, [sp], #8
   829f6:	bf00      	nop

000829f8 <__aeabi_fcmpgt>:
   829f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   829fc:	f7ff ffc8 	bl	82990 <__aeabi_cfrcmple>
   82a00:	bf34      	ite	cc
   82a02:	2001      	movcc	r0, #1
   82a04:	2000      	movcs	r0, #0
   82a06:	f85d fb08 	ldr.w	pc, [sp], #8
   82a0a:	bf00      	nop

00082a0c <__errno>:
   82a0c:	4b01      	ldr	r3, [pc, #4]	; (82a14 <__errno+0x8>)
   82a0e:	6818      	ldr	r0, [r3, #0]
   82a10:	4770      	bx	lr
   82a12:	bf00      	nop
   82a14:	20070570 	.word	0x20070570

00082a18 <__libc_init_array>:
   82a18:	b570      	push	{r4, r5, r6, lr}
   82a1a:	4e0f      	ldr	r6, [pc, #60]	; (82a58 <__libc_init_array+0x40>)
   82a1c:	4d0f      	ldr	r5, [pc, #60]	; (82a5c <__libc_init_array+0x44>)
   82a1e:	1b76      	subs	r6, r6, r5
   82a20:	10b6      	asrs	r6, r6, #2
   82a22:	d007      	beq.n	82a34 <__libc_init_array+0x1c>
   82a24:	3d04      	subs	r5, #4
   82a26:	2400      	movs	r4, #0
   82a28:	3401      	adds	r4, #1
   82a2a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82a2e:	4798      	blx	r3
   82a30:	42a6      	cmp	r6, r4
   82a32:	d1f9      	bne.n	82a28 <__libc_init_array+0x10>
   82a34:	4e0a      	ldr	r6, [pc, #40]	; (82a60 <__libc_init_array+0x48>)
   82a36:	4d0b      	ldr	r5, [pc, #44]	; (82a64 <__libc_init_array+0x4c>)
   82a38:	f003 f832 	bl	85aa0 <_init>
   82a3c:	1b76      	subs	r6, r6, r5
   82a3e:	10b6      	asrs	r6, r6, #2
   82a40:	d008      	beq.n	82a54 <__libc_init_array+0x3c>
   82a42:	3d04      	subs	r5, #4
   82a44:	2400      	movs	r4, #0
   82a46:	3401      	adds	r4, #1
   82a48:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82a4c:	4798      	blx	r3
   82a4e:	42a6      	cmp	r6, r4
   82a50:	d1f9      	bne.n	82a46 <__libc_init_array+0x2e>
   82a52:	bd70      	pop	{r4, r5, r6, pc}
   82a54:	bd70      	pop	{r4, r5, r6, pc}
   82a56:	bf00      	nop
   82a58:	00085aac 	.word	0x00085aac
   82a5c:	00085aac 	.word	0x00085aac
   82a60:	00085ab4 	.word	0x00085ab4
   82a64:	00085aac 	.word	0x00085aac

00082a68 <iprintf>:
   82a68:	b40f      	push	{r0, r1, r2, r3}
   82a6a:	b510      	push	{r4, lr}
   82a6c:	4b07      	ldr	r3, [pc, #28]	; (82a8c <iprintf+0x24>)
   82a6e:	b082      	sub	sp, #8
   82a70:	ac04      	add	r4, sp, #16
   82a72:	f854 2b04 	ldr.w	r2, [r4], #4
   82a76:	6818      	ldr	r0, [r3, #0]
   82a78:	4623      	mov	r3, r4
   82a7a:	6881      	ldr	r1, [r0, #8]
   82a7c:	9401      	str	r4, [sp, #4]
   82a7e:	f000 f945 	bl	82d0c <_vfiprintf_r>
   82a82:	b002      	add	sp, #8
   82a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82a88:	b004      	add	sp, #16
   82a8a:	4770      	bx	lr
   82a8c:	20070570 	.word	0x20070570

00082a90 <memset>:
   82a90:	b4f0      	push	{r4, r5, r6, r7}
   82a92:	0784      	lsls	r4, r0, #30
   82a94:	d043      	beq.n	82b1e <memset+0x8e>
   82a96:	1e54      	subs	r4, r2, #1
   82a98:	2a00      	cmp	r2, #0
   82a9a:	d03e      	beq.n	82b1a <memset+0x8a>
   82a9c:	b2cd      	uxtb	r5, r1
   82a9e:	4603      	mov	r3, r0
   82aa0:	e003      	b.n	82aaa <memset+0x1a>
   82aa2:	1e62      	subs	r2, r4, #1
   82aa4:	2c00      	cmp	r4, #0
   82aa6:	d038      	beq.n	82b1a <memset+0x8a>
   82aa8:	4614      	mov	r4, r2
   82aaa:	f803 5b01 	strb.w	r5, [r3], #1
   82aae:	079a      	lsls	r2, r3, #30
   82ab0:	d1f7      	bne.n	82aa2 <memset+0x12>
   82ab2:	2c03      	cmp	r4, #3
   82ab4:	d92a      	bls.n	82b0c <memset+0x7c>
   82ab6:	b2cd      	uxtb	r5, r1
   82ab8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82abc:	2c0f      	cmp	r4, #15
   82abe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82ac2:	d915      	bls.n	82af0 <memset+0x60>
   82ac4:	f1a4 0710 	sub.w	r7, r4, #16
   82ac8:	093f      	lsrs	r7, r7, #4
   82aca:	f103 0610 	add.w	r6, r3, #16
   82ace:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   82ad2:	461a      	mov	r2, r3
   82ad4:	6015      	str	r5, [r2, #0]
   82ad6:	6055      	str	r5, [r2, #4]
   82ad8:	6095      	str	r5, [r2, #8]
   82ada:	60d5      	str	r5, [r2, #12]
   82adc:	3210      	adds	r2, #16
   82ade:	42b2      	cmp	r2, r6
   82ae0:	d1f8      	bne.n	82ad4 <memset+0x44>
   82ae2:	f004 040f 	and.w	r4, r4, #15
   82ae6:	3701      	adds	r7, #1
   82ae8:	2c03      	cmp	r4, #3
   82aea:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   82aee:	d90d      	bls.n	82b0c <memset+0x7c>
   82af0:	461e      	mov	r6, r3
   82af2:	4622      	mov	r2, r4
   82af4:	3a04      	subs	r2, #4
   82af6:	2a03      	cmp	r2, #3
   82af8:	f846 5b04 	str.w	r5, [r6], #4
   82afc:	d8fa      	bhi.n	82af4 <memset+0x64>
   82afe:	1f22      	subs	r2, r4, #4
   82b00:	f022 0203 	bic.w	r2, r2, #3
   82b04:	3204      	adds	r2, #4
   82b06:	4413      	add	r3, r2
   82b08:	f004 0403 	and.w	r4, r4, #3
   82b0c:	b12c      	cbz	r4, 82b1a <memset+0x8a>
   82b0e:	b2c9      	uxtb	r1, r1
   82b10:	441c      	add	r4, r3
   82b12:	f803 1b01 	strb.w	r1, [r3], #1
   82b16:	42a3      	cmp	r3, r4
   82b18:	d1fb      	bne.n	82b12 <memset+0x82>
   82b1a:	bcf0      	pop	{r4, r5, r6, r7}
   82b1c:	4770      	bx	lr
   82b1e:	4614      	mov	r4, r2
   82b20:	4603      	mov	r3, r0
   82b22:	e7c6      	b.n	82ab2 <memset+0x22>

00082b24 <setbuf>:
   82b24:	2900      	cmp	r1, #0
   82b26:	bf0c      	ite	eq
   82b28:	2202      	moveq	r2, #2
   82b2a:	2200      	movne	r2, #0
   82b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82b30:	f000 b800 	b.w	82b34 <setvbuf>

00082b34 <setvbuf>:
   82b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82b38:	4d3c      	ldr	r5, [pc, #240]	; (82c2c <setvbuf+0xf8>)
   82b3a:	4604      	mov	r4, r0
   82b3c:	682d      	ldr	r5, [r5, #0]
   82b3e:	4688      	mov	r8, r1
   82b40:	4616      	mov	r6, r2
   82b42:	461f      	mov	r7, r3
   82b44:	b115      	cbz	r5, 82b4c <setvbuf+0x18>
   82b46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82b48:	2b00      	cmp	r3, #0
   82b4a:	d04f      	beq.n	82bec <setvbuf+0xb8>
   82b4c:	2e02      	cmp	r6, #2
   82b4e:	d830      	bhi.n	82bb2 <setvbuf+0x7e>
   82b50:	2f00      	cmp	r7, #0
   82b52:	db2e      	blt.n	82bb2 <setvbuf+0x7e>
   82b54:	4628      	mov	r0, r5
   82b56:	4621      	mov	r1, r4
   82b58:	f001 f856 	bl	83c08 <_fflush_r>
   82b5c:	89a3      	ldrh	r3, [r4, #12]
   82b5e:	2200      	movs	r2, #0
   82b60:	6062      	str	r2, [r4, #4]
   82b62:	61a2      	str	r2, [r4, #24]
   82b64:	061a      	lsls	r2, r3, #24
   82b66:	d428      	bmi.n	82bba <setvbuf+0x86>
   82b68:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82b6c:	b29b      	uxth	r3, r3
   82b6e:	2e02      	cmp	r6, #2
   82b70:	81a3      	strh	r3, [r4, #12]
   82b72:	d02d      	beq.n	82bd0 <setvbuf+0x9c>
   82b74:	f1b8 0f00 	cmp.w	r8, #0
   82b78:	d03c      	beq.n	82bf4 <setvbuf+0xc0>
   82b7a:	2e01      	cmp	r6, #1
   82b7c:	d013      	beq.n	82ba6 <setvbuf+0x72>
   82b7e:	b29b      	uxth	r3, r3
   82b80:	f003 0008 	and.w	r0, r3, #8
   82b84:	4a2a      	ldr	r2, [pc, #168]	; (82c30 <setvbuf+0xfc>)
   82b86:	b280      	uxth	r0, r0
   82b88:	63ea      	str	r2, [r5, #60]	; 0x3c
   82b8a:	f8c4 8000 	str.w	r8, [r4]
   82b8e:	f8c4 8010 	str.w	r8, [r4, #16]
   82b92:	6167      	str	r7, [r4, #20]
   82b94:	b178      	cbz	r0, 82bb6 <setvbuf+0x82>
   82b96:	f013 0f03 	tst.w	r3, #3
   82b9a:	bf18      	it	ne
   82b9c:	2700      	movne	r7, #0
   82b9e:	60a7      	str	r7, [r4, #8]
   82ba0:	2000      	movs	r0, #0
   82ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ba6:	f043 0301 	orr.w	r3, r3, #1
   82baa:	427a      	negs	r2, r7
   82bac:	81a3      	strh	r3, [r4, #12]
   82bae:	61a2      	str	r2, [r4, #24]
   82bb0:	e7e5      	b.n	82b7e <setvbuf+0x4a>
   82bb2:	f04f 30ff 	mov.w	r0, #4294967295
   82bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82bba:	4628      	mov	r0, r5
   82bbc:	6921      	ldr	r1, [r4, #16]
   82bbe:	f001 f983 	bl	83ec8 <_free_r>
   82bc2:	89a3      	ldrh	r3, [r4, #12]
   82bc4:	2e02      	cmp	r6, #2
   82bc6:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82bca:	b29b      	uxth	r3, r3
   82bcc:	81a3      	strh	r3, [r4, #12]
   82bce:	d1d1      	bne.n	82b74 <setvbuf+0x40>
   82bd0:	2000      	movs	r0, #0
   82bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82bd6:	f043 0302 	orr.w	r3, r3, #2
   82bda:	2500      	movs	r5, #0
   82bdc:	2101      	movs	r1, #1
   82bde:	81a3      	strh	r3, [r4, #12]
   82be0:	60a5      	str	r5, [r4, #8]
   82be2:	6022      	str	r2, [r4, #0]
   82be4:	6122      	str	r2, [r4, #16]
   82be6:	6161      	str	r1, [r4, #20]
   82be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82bec:	4628      	mov	r0, r5
   82bee:	f001 f827 	bl	83c40 <__sinit>
   82bf2:	e7ab      	b.n	82b4c <setvbuf+0x18>
   82bf4:	2f00      	cmp	r7, #0
   82bf6:	bf08      	it	eq
   82bf8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   82bfc:	4638      	mov	r0, r7
   82bfe:	f001 fc59 	bl	844b4 <malloc>
   82c02:	4680      	mov	r8, r0
   82c04:	b128      	cbz	r0, 82c12 <setvbuf+0xde>
   82c06:	89a3      	ldrh	r3, [r4, #12]
   82c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82c0c:	b29b      	uxth	r3, r3
   82c0e:	81a3      	strh	r3, [r4, #12]
   82c10:	e7b3      	b.n	82b7a <setvbuf+0x46>
   82c12:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82c16:	f001 fc4d 	bl	844b4 <malloc>
   82c1a:	4680      	mov	r8, r0
   82c1c:	b918      	cbnz	r0, 82c26 <setvbuf+0xf2>
   82c1e:	89a3      	ldrh	r3, [r4, #12]
   82c20:	f04f 30ff 	mov.w	r0, #4294967295
   82c24:	e7d5      	b.n	82bd2 <setvbuf+0x9e>
   82c26:	f44f 6780 	mov.w	r7, #1024	; 0x400
   82c2a:	e7ec      	b.n	82c06 <setvbuf+0xd2>
   82c2c:	20070570 	.word	0x20070570
   82c30:	00083c35 	.word	0x00083c35

00082c34 <strlen>:
   82c34:	f020 0103 	bic.w	r1, r0, #3
   82c38:	f010 0003 	ands.w	r0, r0, #3
   82c3c:	f1c0 0000 	rsb	r0, r0, #0
   82c40:	f851 3b04 	ldr.w	r3, [r1], #4
   82c44:	f100 0c04 	add.w	ip, r0, #4
   82c48:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82c4c:	f06f 0200 	mvn.w	r2, #0
   82c50:	bf1c      	itt	ne
   82c52:	fa22 f20c 	lsrne.w	r2, r2, ip
   82c56:	4313      	orrne	r3, r2
   82c58:	f04f 0c01 	mov.w	ip, #1
   82c5c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82c60:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82c64:	eba3 020c 	sub.w	r2, r3, ip
   82c68:	ea22 0203 	bic.w	r2, r2, r3
   82c6c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82c70:	bf04      	itt	eq
   82c72:	f851 3b04 	ldreq.w	r3, [r1], #4
   82c76:	3004      	addeq	r0, #4
   82c78:	d0f4      	beq.n	82c64 <strlen+0x30>
   82c7a:	f013 0fff 	tst.w	r3, #255	; 0xff
   82c7e:	bf1f      	itttt	ne
   82c80:	3001      	addne	r0, #1
   82c82:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   82c86:	3001      	addne	r0, #1
   82c88:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   82c8c:	bf18      	it	ne
   82c8e:	3001      	addne	r0, #1
   82c90:	4770      	bx	lr
   82c92:	bf00      	nop

00082c94 <__sprint_r.part.0>:
   82c94:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82c9a:	049c      	lsls	r4, r3, #18
   82c9c:	460e      	mov	r6, r1
   82c9e:	4680      	mov	r8, r0
   82ca0:	4691      	mov	r9, r2
   82ca2:	d52a      	bpl.n	82cfa <__sprint_r.part.0+0x66>
   82ca4:	6893      	ldr	r3, [r2, #8]
   82ca6:	6812      	ldr	r2, [r2, #0]
   82ca8:	f102 0a08 	add.w	sl, r2, #8
   82cac:	b31b      	cbz	r3, 82cf6 <__sprint_r.part.0+0x62>
   82cae:	e91a 00a0 	ldmdb	sl, {r5, r7}
   82cb2:	08bf      	lsrs	r7, r7, #2
   82cb4:	d017      	beq.n	82ce6 <__sprint_r.part.0+0x52>
   82cb6:	3d04      	subs	r5, #4
   82cb8:	2400      	movs	r4, #0
   82cba:	e001      	b.n	82cc0 <__sprint_r.part.0+0x2c>
   82cbc:	42a7      	cmp	r7, r4
   82cbe:	d010      	beq.n	82ce2 <__sprint_r.part.0+0x4e>
   82cc0:	4640      	mov	r0, r8
   82cc2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82cc6:	4632      	mov	r2, r6
   82cc8:	f001 f850 	bl	83d6c <_fputwc_r>
   82ccc:	1c43      	adds	r3, r0, #1
   82cce:	f104 0401 	add.w	r4, r4, #1
   82cd2:	d1f3      	bne.n	82cbc <__sprint_r.part.0+0x28>
   82cd4:	2300      	movs	r3, #0
   82cd6:	f8c9 3008 	str.w	r3, [r9, #8]
   82cda:	f8c9 3004 	str.w	r3, [r9, #4]
   82cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82ce2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   82ce6:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   82cea:	f8c9 3008 	str.w	r3, [r9, #8]
   82cee:	f10a 0a08 	add.w	sl, sl, #8
   82cf2:	2b00      	cmp	r3, #0
   82cf4:	d1db      	bne.n	82cae <__sprint_r.part.0+0x1a>
   82cf6:	2000      	movs	r0, #0
   82cf8:	e7ec      	b.n	82cd4 <__sprint_r.part.0+0x40>
   82cfa:	f001 f9b1 	bl	84060 <__sfvwrite_r>
   82cfe:	2300      	movs	r3, #0
   82d00:	f8c9 3008 	str.w	r3, [r9, #8]
   82d04:	f8c9 3004 	str.w	r3, [r9, #4]
   82d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00082d0c <_vfiprintf_r>:
   82d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82d10:	b0b1      	sub	sp, #196	; 0xc4
   82d12:	461c      	mov	r4, r3
   82d14:	9102      	str	r1, [sp, #8]
   82d16:	4690      	mov	r8, r2
   82d18:	9308      	str	r3, [sp, #32]
   82d1a:	9006      	str	r0, [sp, #24]
   82d1c:	b118      	cbz	r0, 82d26 <_vfiprintf_r+0x1a>
   82d1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82d20:	2b00      	cmp	r3, #0
   82d22:	f000 80e8 	beq.w	82ef6 <_vfiprintf_r+0x1ea>
   82d26:	9d02      	ldr	r5, [sp, #8]
   82d28:	89ab      	ldrh	r3, [r5, #12]
   82d2a:	b29a      	uxth	r2, r3
   82d2c:	0490      	lsls	r0, r2, #18
   82d2e:	d407      	bmi.n	82d40 <_vfiprintf_r+0x34>
   82d30:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   82d32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82d36:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   82d3a:	81ab      	strh	r3, [r5, #12]
   82d3c:	b29a      	uxth	r2, r3
   82d3e:	6669      	str	r1, [r5, #100]	; 0x64
   82d40:	0711      	lsls	r1, r2, #28
   82d42:	f140 80b7 	bpl.w	82eb4 <_vfiprintf_r+0x1a8>
   82d46:	f8dd b008 	ldr.w	fp, [sp, #8]
   82d4a:	f8db 3010 	ldr.w	r3, [fp, #16]
   82d4e:	2b00      	cmp	r3, #0
   82d50:	f000 80b0 	beq.w	82eb4 <_vfiprintf_r+0x1a8>
   82d54:	f002 021a 	and.w	r2, r2, #26
   82d58:	2a0a      	cmp	r2, #10
   82d5a:	f000 80b7 	beq.w	82ecc <_vfiprintf_r+0x1c0>
   82d5e:	2300      	movs	r3, #0
   82d60:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   82d64:	930a      	str	r3, [sp, #40]	; 0x28
   82d66:	9315      	str	r3, [sp, #84]	; 0x54
   82d68:	9314      	str	r3, [sp, #80]	; 0x50
   82d6a:	9309      	str	r3, [sp, #36]	; 0x24
   82d6c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   82d70:	464e      	mov	r6, r9
   82d72:	f898 3000 	ldrb.w	r3, [r8]
   82d76:	2b00      	cmp	r3, #0
   82d78:	f000 84c8 	beq.w	8370c <_vfiprintf_r+0xa00>
   82d7c:	2b25      	cmp	r3, #37	; 0x25
   82d7e:	f000 84c5 	beq.w	8370c <_vfiprintf_r+0xa00>
   82d82:	f108 0201 	add.w	r2, r8, #1
   82d86:	e001      	b.n	82d8c <_vfiprintf_r+0x80>
   82d88:	2b25      	cmp	r3, #37	; 0x25
   82d8a:	d004      	beq.n	82d96 <_vfiprintf_r+0x8a>
   82d8c:	7813      	ldrb	r3, [r2, #0]
   82d8e:	4614      	mov	r4, r2
   82d90:	3201      	adds	r2, #1
   82d92:	2b00      	cmp	r3, #0
   82d94:	d1f8      	bne.n	82d88 <_vfiprintf_r+0x7c>
   82d96:	ebc8 0504 	rsb	r5, r8, r4
   82d9a:	b195      	cbz	r5, 82dc2 <_vfiprintf_r+0xb6>
   82d9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82d9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82da0:	3301      	adds	r3, #1
   82da2:	442a      	add	r2, r5
   82da4:	2b07      	cmp	r3, #7
   82da6:	f8c6 8000 	str.w	r8, [r6]
   82daa:	6075      	str	r5, [r6, #4]
   82dac:	9215      	str	r2, [sp, #84]	; 0x54
   82dae:	9314      	str	r3, [sp, #80]	; 0x50
   82db0:	dd7b      	ble.n	82eaa <_vfiprintf_r+0x19e>
   82db2:	2a00      	cmp	r2, #0
   82db4:	f040 84d5 	bne.w	83762 <_vfiprintf_r+0xa56>
   82db8:	9809      	ldr	r0, [sp, #36]	; 0x24
   82dba:	9214      	str	r2, [sp, #80]	; 0x50
   82dbc:	4428      	add	r0, r5
   82dbe:	464e      	mov	r6, r9
   82dc0:	9009      	str	r0, [sp, #36]	; 0x24
   82dc2:	7823      	ldrb	r3, [r4, #0]
   82dc4:	2b00      	cmp	r3, #0
   82dc6:	f000 83ed 	beq.w	835a4 <_vfiprintf_r+0x898>
   82dca:	2100      	movs	r1, #0
   82dcc:	f04f 0200 	mov.w	r2, #0
   82dd0:	f04f 3cff 	mov.w	ip, #4294967295
   82dd4:	7863      	ldrb	r3, [r4, #1]
   82dd6:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   82dda:	9104      	str	r1, [sp, #16]
   82ddc:	468a      	mov	sl, r1
   82dde:	f104 0801 	add.w	r8, r4, #1
   82de2:	4608      	mov	r0, r1
   82de4:	4665      	mov	r5, ip
   82de6:	f108 0801 	add.w	r8, r8, #1
   82dea:	f1a3 0220 	sub.w	r2, r3, #32
   82dee:	2a58      	cmp	r2, #88	; 0x58
   82df0:	f200 82d9 	bhi.w	833a6 <_vfiprintf_r+0x69a>
   82df4:	e8df f012 	tbh	[pc, r2, lsl #1]
   82df8:	02d702cb 	.word	0x02d702cb
   82dfc:	02d202d7 	.word	0x02d202d7
   82e00:	02d702d7 	.word	0x02d702d7
   82e04:	02d702d7 	.word	0x02d702d7
   82e08:	02d702d7 	.word	0x02d702d7
   82e0c:	028f0282 	.word	0x028f0282
   82e10:	008402d7 	.word	0x008402d7
   82e14:	02d70293 	.word	0x02d70293
   82e18:	0196012b 	.word	0x0196012b
   82e1c:	01960196 	.word	0x01960196
   82e20:	01960196 	.word	0x01960196
   82e24:	01960196 	.word	0x01960196
   82e28:	01960196 	.word	0x01960196
   82e2c:	02d702d7 	.word	0x02d702d7
   82e30:	02d702d7 	.word	0x02d702d7
   82e34:	02d702d7 	.word	0x02d702d7
   82e38:	02d702d7 	.word	0x02d702d7
   82e3c:	02d702d7 	.word	0x02d702d7
   82e40:	02d70130 	.word	0x02d70130
   82e44:	02d702d7 	.word	0x02d702d7
   82e48:	02d702d7 	.word	0x02d702d7
   82e4c:	02d702d7 	.word	0x02d702d7
   82e50:	02d702d7 	.word	0x02d702d7
   82e54:	017b02d7 	.word	0x017b02d7
   82e58:	02d702d7 	.word	0x02d702d7
   82e5c:	02d702d7 	.word	0x02d702d7
   82e60:	01a402d7 	.word	0x01a402d7
   82e64:	02d702d7 	.word	0x02d702d7
   82e68:	02d701bf 	.word	0x02d701bf
   82e6c:	02d702d7 	.word	0x02d702d7
   82e70:	02d702d7 	.word	0x02d702d7
   82e74:	02d702d7 	.word	0x02d702d7
   82e78:	02d702d7 	.word	0x02d702d7
   82e7c:	01e402d7 	.word	0x01e402d7
   82e80:	02d701fa 	.word	0x02d701fa
   82e84:	02d702d7 	.word	0x02d702d7
   82e88:	01fa0216 	.word	0x01fa0216
   82e8c:	02d702d7 	.word	0x02d702d7
   82e90:	02d7021b 	.word	0x02d7021b
   82e94:	00890228 	.word	0x00890228
   82e98:	027d0266 	.word	0x027d0266
   82e9c:	023a02d7 	.word	0x023a02d7
   82ea0:	011902d7 	.word	0x011902d7
   82ea4:	02d702d7 	.word	0x02d702d7
   82ea8:	02af      	.short	0x02af
   82eaa:	3608      	adds	r6, #8
   82eac:	9809      	ldr	r0, [sp, #36]	; 0x24
   82eae:	4428      	add	r0, r5
   82eb0:	9009      	str	r0, [sp, #36]	; 0x24
   82eb2:	e786      	b.n	82dc2 <_vfiprintf_r+0xb6>
   82eb4:	9806      	ldr	r0, [sp, #24]
   82eb6:	9902      	ldr	r1, [sp, #8]
   82eb8:	f000 fd90 	bl	839dc <__swsetup_r>
   82ebc:	b9b0      	cbnz	r0, 82eec <_vfiprintf_r+0x1e0>
   82ebe:	9d02      	ldr	r5, [sp, #8]
   82ec0:	89aa      	ldrh	r2, [r5, #12]
   82ec2:	f002 021a 	and.w	r2, r2, #26
   82ec6:	2a0a      	cmp	r2, #10
   82ec8:	f47f af49 	bne.w	82d5e <_vfiprintf_r+0x52>
   82ecc:	f8dd b008 	ldr.w	fp, [sp, #8]
   82ed0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82ed4:	2b00      	cmp	r3, #0
   82ed6:	f6ff af42 	blt.w	82d5e <_vfiprintf_r+0x52>
   82eda:	9806      	ldr	r0, [sp, #24]
   82edc:	4659      	mov	r1, fp
   82ede:	4642      	mov	r2, r8
   82ee0:	4623      	mov	r3, r4
   82ee2:	f000 fd3d 	bl	83960 <__sbprintf>
   82ee6:	b031      	add	sp, #196	; 0xc4
   82ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82eec:	f04f 30ff 	mov.w	r0, #4294967295
   82ef0:	b031      	add	sp, #196	; 0xc4
   82ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ef6:	f000 fea3 	bl	83c40 <__sinit>
   82efa:	e714      	b.n	82d26 <_vfiprintf_r+0x1a>
   82efc:	4240      	negs	r0, r0
   82efe:	9308      	str	r3, [sp, #32]
   82f00:	f04a 0a04 	orr.w	sl, sl, #4
   82f04:	f898 3000 	ldrb.w	r3, [r8]
   82f08:	e76d      	b.n	82de6 <_vfiprintf_r+0xda>
   82f0a:	f01a 0320 	ands.w	r3, sl, #32
   82f0e:	9004      	str	r0, [sp, #16]
   82f10:	46ac      	mov	ip, r5
   82f12:	f000 80f4 	beq.w	830fe <_vfiprintf_r+0x3f2>
   82f16:	f8dd b020 	ldr.w	fp, [sp, #32]
   82f1a:	f10b 0307 	add.w	r3, fp, #7
   82f1e:	f023 0307 	bic.w	r3, r3, #7
   82f22:	f103 0408 	add.w	r4, r3, #8
   82f26:	9408      	str	r4, [sp, #32]
   82f28:	e9d3 4500 	ldrd	r4, r5, [r3]
   82f2c:	2300      	movs	r3, #0
   82f2e:	f04f 0000 	mov.w	r0, #0
   82f32:	2100      	movs	r1, #0
   82f34:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   82f38:	f8cd c014 	str.w	ip, [sp, #20]
   82f3c:	9107      	str	r1, [sp, #28]
   82f3e:	f1bc 0f00 	cmp.w	ip, #0
   82f42:	bfa8      	it	ge
   82f44:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82f48:	ea54 0205 	orrs.w	r2, r4, r5
   82f4c:	f040 80ad 	bne.w	830aa <_vfiprintf_r+0x39e>
   82f50:	f1bc 0f00 	cmp.w	ip, #0
   82f54:	f040 80a9 	bne.w	830aa <_vfiprintf_r+0x39e>
   82f58:	2b00      	cmp	r3, #0
   82f5a:	f040 83c0 	bne.w	836de <_vfiprintf_r+0x9d2>
   82f5e:	f01a 0f01 	tst.w	sl, #1
   82f62:	f000 83bc 	beq.w	836de <_vfiprintf_r+0x9d2>
   82f66:	2330      	movs	r3, #48	; 0x30
   82f68:	af30      	add	r7, sp, #192	; 0xc0
   82f6a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   82f6e:	ebc7 0409 	rsb	r4, r7, r9
   82f72:	9405      	str	r4, [sp, #20]
   82f74:	f8dd b014 	ldr.w	fp, [sp, #20]
   82f78:	9c07      	ldr	r4, [sp, #28]
   82f7a:	45e3      	cmp	fp, ip
   82f7c:	bfb8      	it	lt
   82f7e:	46e3      	movlt	fp, ip
   82f80:	f8cd b00c 	str.w	fp, [sp, #12]
   82f84:	b11c      	cbz	r4, 82f8e <_vfiprintf_r+0x282>
   82f86:	f10b 0b01 	add.w	fp, fp, #1
   82f8a:	f8cd b00c 	str.w	fp, [sp, #12]
   82f8e:	f01a 0502 	ands.w	r5, sl, #2
   82f92:	9507      	str	r5, [sp, #28]
   82f94:	d005      	beq.n	82fa2 <_vfiprintf_r+0x296>
   82f96:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82f9a:	f10b 0b02 	add.w	fp, fp, #2
   82f9e:	f8cd b00c 	str.w	fp, [sp, #12]
   82fa2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   82fa6:	930b      	str	r3, [sp, #44]	; 0x2c
   82fa8:	f040 821b 	bne.w	833e2 <_vfiprintf_r+0x6d6>
   82fac:	9d04      	ldr	r5, [sp, #16]
   82fae:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82fb2:	ebcb 0405 	rsb	r4, fp, r5
   82fb6:	2c00      	cmp	r4, #0
   82fb8:	f340 8213 	ble.w	833e2 <_vfiprintf_r+0x6d6>
   82fbc:	2c10      	cmp	r4, #16
   82fbe:	f340 8489 	ble.w	838d4 <_vfiprintf_r+0xbc8>
   82fc2:	4dbe      	ldr	r5, [pc, #760]	; (832bc <_vfiprintf_r+0x5b0>)
   82fc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82fc6:	462b      	mov	r3, r5
   82fc8:	9814      	ldr	r0, [sp, #80]	; 0x50
   82fca:	4625      	mov	r5, r4
   82fcc:	f04f 0b10 	mov.w	fp, #16
   82fd0:	4664      	mov	r4, ip
   82fd2:	46b4      	mov	ip, r6
   82fd4:	461e      	mov	r6, r3
   82fd6:	e006      	b.n	82fe6 <_vfiprintf_r+0x2da>
   82fd8:	1c83      	adds	r3, r0, #2
   82fda:	f10c 0c08 	add.w	ip, ip, #8
   82fde:	4608      	mov	r0, r1
   82fe0:	3d10      	subs	r5, #16
   82fe2:	2d10      	cmp	r5, #16
   82fe4:	dd11      	ble.n	8300a <_vfiprintf_r+0x2fe>
   82fe6:	1c41      	adds	r1, r0, #1
   82fe8:	3210      	adds	r2, #16
   82fea:	2907      	cmp	r1, #7
   82fec:	9215      	str	r2, [sp, #84]	; 0x54
   82fee:	e88c 0840 	stmia.w	ip, {r6, fp}
   82ff2:	9114      	str	r1, [sp, #80]	; 0x50
   82ff4:	ddf0      	ble.n	82fd8 <_vfiprintf_r+0x2cc>
   82ff6:	2a00      	cmp	r2, #0
   82ff8:	f040 81e6 	bne.w	833c8 <_vfiprintf_r+0x6bc>
   82ffc:	3d10      	subs	r5, #16
   82ffe:	2d10      	cmp	r5, #16
   83000:	f04f 0301 	mov.w	r3, #1
   83004:	4610      	mov	r0, r2
   83006:	46cc      	mov	ip, r9
   83008:	dced      	bgt.n	82fe6 <_vfiprintf_r+0x2da>
   8300a:	4631      	mov	r1, r6
   8300c:	4666      	mov	r6, ip
   8300e:	46a4      	mov	ip, r4
   83010:	462c      	mov	r4, r5
   83012:	460d      	mov	r5, r1
   83014:	4422      	add	r2, r4
   83016:	2b07      	cmp	r3, #7
   83018:	9215      	str	r2, [sp, #84]	; 0x54
   8301a:	6035      	str	r5, [r6, #0]
   8301c:	6074      	str	r4, [r6, #4]
   8301e:	9314      	str	r3, [sp, #80]	; 0x50
   83020:	f300 836d 	bgt.w	836fe <_vfiprintf_r+0x9f2>
   83024:	3608      	adds	r6, #8
   83026:	1c59      	adds	r1, r3, #1
   83028:	e1de      	b.n	833e8 <_vfiprintf_r+0x6dc>
   8302a:	f01a 0f20 	tst.w	sl, #32
   8302e:	9004      	str	r0, [sp, #16]
   83030:	46ac      	mov	ip, r5
   83032:	f000 808d 	beq.w	83150 <_vfiprintf_r+0x444>
   83036:	9d08      	ldr	r5, [sp, #32]
   83038:	1deb      	adds	r3, r5, #7
   8303a:	f023 0307 	bic.w	r3, r3, #7
   8303e:	f103 0b08 	add.w	fp, r3, #8
   83042:	e9d3 4500 	ldrd	r4, r5, [r3]
   83046:	f8cd b020 	str.w	fp, [sp, #32]
   8304a:	2301      	movs	r3, #1
   8304c:	e76f      	b.n	82f2e <_vfiprintf_r+0x222>
   8304e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   83052:	f898 3000 	ldrb.w	r3, [r8]
   83056:	e6c6      	b.n	82de6 <_vfiprintf_r+0xda>
   83058:	f04a 0a10 	orr.w	sl, sl, #16
   8305c:	f01a 0f20 	tst.w	sl, #32
   83060:	9004      	str	r0, [sp, #16]
   83062:	46ac      	mov	ip, r5
   83064:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83068:	f000 80c8 	beq.w	831fc <_vfiprintf_r+0x4f0>
   8306c:	9c08      	ldr	r4, [sp, #32]
   8306e:	1de1      	adds	r1, r4, #7
   83070:	f021 0107 	bic.w	r1, r1, #7
   83074:	e9d1 2300 	ldrd	r2, r3, [r1]
   83078:	3108      	adds	r1, #8
   8307a:	9108      	str	r1, [sp, #32]
   8307c:	4614      	mov	r4, r2
   8307e:	461d      	mov	r5, r3
   83080:	2a00      	cmp	r2, #0
   83082:	f173 0b00 	sbcs.w	fp, r3, #0
   83086:	f2c0 83ce 	blt.w	83826 <_vfiprintf_r+0xb1a>
   8308a:	f1bc 0f00 	cmp.w	ip, #0
   8308e:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   83092:	bfa8      	it	ge
   83094:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   83098:	ea54 0205 	orrs.w	r2, r4, r5
   8309c:	9007      	str	r0, [sp, #28]
   8309e:	f8cd c014 	str.w	ip, [sp, #20]
   830a2:	f04f 0301 	mov.w	r3, #1
   830a6:	f43f af53 	beq.w	82f50 <_vfiprintf_r+0x244>
   830aa:	2b01      	cmp	r3, #1
   830ac:	f000 8319 	beq.w	836e2 <_vfiprintf_r+0x9d6>
   830b0:	2b02      	cmp	r3, #2
   830b2:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   830b6:	f040 824c 	bne.w	83552 <_vfiprintf_r+0x846>
   830ba:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   830be:	4619      	mov	r1, r3
   830c0:	f004 000f 	and.w	r0, r4, #15
   830c4:	0922      	lsrs	r2, r4, #4
   830c6:	f81b 0000 	ldrb.w	r0, [fp, r0]
   830ca:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   830ce:	092b      	lsrs	r3, r5, #4
   830d0:	7008      	strb	r0, [r1, #0]
   830d2:	ea52 0003 	orrs.w	r0, r2, r3
   830d6:	460f      	mov	r7, r1
   830d8:	4614      	mov	r4, r2
   830da:	461d      	mov	r5, r3
   830dc:	f101 31ff 	add.w	r1, r1, #4294967295
   830e0:	d1ee      	bne.n	830c0 <_vfiprintf_r+0x3b4>
   830e2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   830e6:	ebc7 0309 	rsb	r3, r7, r9
   830ea:	9305      	str	r3, [sp, #20]
   830ec:	e742      	b.n	82f74 <_vfiprintf_r+0x268>
   830ee:	f04a 0a10 	orr.w	sl, sl, #16
   830f2:	f01a 0320 	ands.w	r3, sl, #32
   830f6:	9004      	str	r0, [sp, #16]
   830f8:	46ac      	mov	ip, r5
   830fa:	f47f af0c 	bne.w	82f16 <_vfiprintf_r+0x20a>
   830fe:	f01a 0210 	ands.w	r2, sl, #16
   83102:	f040 8311 	bne.w	83728 <_vfiprintf_r+0xa1c>
   83106:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8310a:	f000 830d 	beq.w	83728 <_vfiprintf_r+0xa1c>
   8310e:	f8dd b020 	ldr.w	fp, [sp, #32]
   83112:	4613      	mov	r3, r2
   83114:	f8bb 4000 	ldrh.w	r4, [fp]
   83118:	f10b 0b04 	add.w	fp, fp, #4
   8311c:	2500      	movs	r5, #0
   8311e:	f8cd b020 	str.w	fp, [sp, #32]
   83122:	e704      	b.n	82f2e <_vfiprintf_r+0x222>
   83124:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83128:	2000      	movs	r0, #0
   8312a:	f818 3b01 	ldrb.w	r3, [r8], #1
   8312e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   83132:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   83136:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8313a:	2a09      	cmp	r2, #9
   8313c:	d9f5      	bls.n	8312a <_vfiprintf_r+0x41e>
   8313e:	e654      	b.n	82dea <_vfiprintf_r+0xde>
   83140:	f04a 0a10 	orr.w	sl, sl, #16
   83144:	f01a 0f20 	tst.w	sl, #32
   83148:	9004      	str	r0, [sp, #16]
   8314a:	46ac      	mov	ip, r5
   8314c:	f47f af73 	bne.w	83036 <_vfiprintf_r+0x32a>
   83150:	f01a 0f10 	tst.w	sl, #16
   83154:	f040 82ef 	bne.w	83736 <_vfiprintf_r+0xa2a>
   83158:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8315c:	f000 82eb 	beq.w	83736 <_vfiprintf_r+0xa2a>
   83160:	f8dd b020 	ldr.w	fp, [sp, #32]
   83164:	2500      	movs	r5, #0
   83166:	f8bb 4000 	ldrh.w	r4, [fp]
   8316a:	f10b 0b04 	add.w	fp, fp, #4
   8316e:	2301      	movs	r3, #1
   83170:	f8cd b020 	str.w	fp, [sp, #32]
   83174:	e6db      	b.n	82f2e <_vfiprintf_r+0x222>
   83176:	46ac      	mov	ip, r5
   83178:	4d51      	ldr	r5, [pc, #324]	; (832c0 <_vfiprintf_r+0x5b4>)
   8317a:	f01a 0f20 	tst.w	sl, #32
   8317e:	9004      	str	r0, [sp, #16]
   83180:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83184:	950a      	str	r5, [sp, #40]	; 0x28
   83186:	f000 80f0 	beq.w	8336a <_vfiprintf_r+0x65e>
   8318a:	9d08      	ldr	r5, [sp, #32]
   8318c:	1dea      	adds	r2, r5, #7
   8318e:	f022 0207 	bic.w	r2, r2, #7
   83192:	f102 0b08 	add.w	fp, r2, #8
   83196:	f8cd b020 	str.w	fp, [sp, #32]
   8319a:	e9d2 4500 	ldrd	r4, r5, [r2]
   8319e:	f01a 0f01 	tst.w	sl, #1
   831a2:	f000 82aa 	beq.w	836fa <_vfiprintf_r+0x9ee>
   831a6:	ea54 0b05 	orrs.w	fp, r4, r5
   831aa:	f000 82a6 	beq.w	836fa <_vfiprintf_r+0x9ee>
   831ae:	2230      	movs	r2, #48	; 0x30
   831b0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   831b4:	f04a 0a02 	orr.w	sl, sl, #2
   831b8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   831bc:	2302      	movs	r3, #2
   831be:	e6b6      	b.n	82f2e <_vfiprintf_r+0x222>
   831c0:	9b08      	ldr	r3, [sp, #32]
   831c2:	f8dd b020 	ldr.w	fp, [sp, #32]
   831c6:	681b      	ldr	r3, [r3, #0]
   831c8:	2401      	movs	r4, #1
   831ca:	f04f 0500 	mov.w	r5, #0
   831ce:	f10b 0b04 	add.w	fp, fp, #4
   831d2:	9004      	str	r0, [sp, #16]
   831d4:	9403      	str	r4, [sp, #12]
   831d6:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   831da:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   831de:	f8cd b020 	str.w	fp, [sp, #32]
   831e2:	9405      	str	r4, [sp, #20]
   831e4:	af16      	add	r7, sp, #88	; 0x58
   831e6:	f04f 0c00 	mov.w	ip, #0
   831ea:	e6d0      	b.n	82f8e <_vfiprintf_r+0x282>
   831ec:	f01a 0f20 	tst.w	sl, #32
   831f0:	9004      	str	r0, [sp, #16]
   831f2:	46ac      	mov	ip, r5
   831f4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   831f8:	f47f af38 	bne.w	8306c <_vfiprintf_r+0x360>
   831fc:	f01a 0f10 	tst.w	sl, #16
   83200:	f040 82a7 	bne.w	83752 <_vfiprintf_r+0xa46>
   83204:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83208:	f000 82a3 	beq.w	83752 <_vfiprintf_r+0xa46>
   8320c:	f8dd b020 	ldr.w	fp, [sp, #32]
   83210:	f9bb 4000 	ldrsh.w	r4, [fp]
   83214:	f10b 0b04 	add.w	fp, fp, #4
   83218:	17e5      	asrs	r5, r4, #31
   8321a:	4622      	mov	r2, r4
   8321c:	462b      	mov	r3, r5
   8321e:	f8cd b020 	str.w	fp, [sp, #32]
   83222:	e72d      	b.n	83080 <_vfiprintf_r+0x374>
   83224:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   83228:	f898 3000 	ldrb.w	r3, [r8]
   8322c:	e5db      	b.n	82de6 <_vfiprintf_r+0xda>
   8322e:	f898 3000 	ldrb.w	r3, [r8]
   83232:	4642      	mov	r2, r8
   83234:	2b6c      	cmp	r3, #108	; 0x6c
   83236:	bf03      	ittte	eq
   83238:	f108 0801 	addeq.w	r8, r8, #1
   8323c:	f04a 0a20 	orreq.w	sl, sl, #32
   83240:	7853      	ldrbeq	r3, [r2, #1]
   83242:	f04a 0a10 	orrne.w	sl, sl, #16
   83246:	e5ce      	b.n	82de6 <_vfiprintf_r+0xda>
   83248:	f01a 0f20 	tst.w	sl, #32
   8324c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83250:	f000 82f7 	beq.w	83842 <_vfiprintf_r+0xb36>
   83254:	9c08      	ldr	r4, [sp, #32]
   83256:	6821      	ldr	r1, [r4, #0]
   83258:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8325a:	17e5      	asrs	r5, r4, #31
   8325c:	462b      	mov	r3, r5
   8325e:	9d08      	ldr	r5, [sp, #32]
   83260:	4622      	mov	r2, r4
   83262:	3504      	adds	r5, #4
   83264:	9508      	str	r5, [sp, #32]
   83266:	e9c1 2300 	strd	r2, r3, [r1]
   8326a:	e582      	b.n	82d72 <_vfiprintf_r+0x66>
   8326c:	9c08      	ldr	r4, [sp, #32]
   8326e:	46ac      	mov	ip, r5
   83270:	6827      	ldr	r7, [r4, #0]
   83272:	f04f 0500 	mov.w	r5, #0
   83276:	9004      	str	r0, [sp, #16]
   83278:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8327c:	3404      	adds	r4, #4
   8327e:	2f00      	cmp	r7, #0
   83280:	f000 8332 	beq.w	838e8 <_vfiprintf_r+0xbdc>
   83284:	f1bc 0f00 	cmp.w	ip, #0
   83288:	4638      	mov	r0, r7
   8328a:	f2c0 8307 	blt.w	8389c <_vfiprintf_r+0xb90>
   8328e:	4662      	mov	r2, ip
   83290:	2100      	movs	r1, #0
   83292:	f8cd c004 	str.w	ip, [sp, #4]
   83296:	f001 fbb1 	bl	849fc <memchr>
   8329a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8329e:	2800      	cmp	r0, #0
   832a0:	f000 833a 	beq.w	83918 <_vfiprintf_r+0xc0c>
   832a4:	1bc0      	subs	r0, r0, r7
   832a6:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   832aa:	4560      	cmp	r0, ip
   832ac:	bfa8      	it	ge
   832ae:	4660      	movge	r0, ip
   832b0:	9005      	str	r0, [sp, #20]
   832b2:	9408      	str	r4, [sp, #32]
   832b4:	9507      	str	r5, [sp, #28]
   832b6:	f04f 0c00 	mov.w	ip, #0
   832ba:	e65b      	b.n	82f74 <_vfiprintf_r+0x268>
   832bc:	00085a90 	.word	0x00085a90
   832c0:	00085a50 	.word	0x00085a50
   832c4:	9b08      	ldr	r3, [sp, #32]
   832c6:	f8dd b020 	ldr.w	fp, [sp, #32]
   832ca:	9004      	str	r0, [sp, #16]
   832cc:	48b2      	ldr	r0, [pc, #712]	; (83598 <_vfiprintf_r+0x88c>)
   832ce:	681c      	ldr	r4, [r3, #0]
   832d0:	2230      	movs	r2, #48	; 0x30
   832d2:	2378      	movs	r3, #120	; 0x78
   832d4:	f10b 0b04 	add.w	fp, fp, #4
   832d8:	46ac      	mov	ip, r5
   832da:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   832de:	f04a 0a02 	orr.w	sl, sl, #2
   832e2:	f8cd b020 	str.w	fp, [sp, #32]
   832e6:	2500      	movs	r5, #0
   832e8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   832ec:	900a      	str	r0, [sp, #40]	; 0x28
   832ee:	2302      	movs	r3, #2
   832f0:	e61d      	b.n	82f2e <_vfiprintf_r+0x222>
   832f2:	f04a 0a20 	orr.w	sl, sl, #32
   832f6:	f898 3000 	ldrb.w	r3, [r8]
   832fa:	e574      	b.n	82de6 <_vfiprintf_r+0xda>
   832fc:	f8dd b020 	ldr.w	fp, [sp, #32]
   83300:	f8db 0000 	ldr.w	r0, [fp]
   83304:	f10b 0304 	add.w	r3, fp, #4
   83308:	2800      	cmp	r0, #0
   8330a:	f6ff adf7 	blt.w	82efc <_vfiprintf_r+0x1f0>
   8330e:	9308      	str	r3, [sp, #32]
   83310:	f898 3000 	ldrb.w	r3, [r8]
   83314:	e567      	b.n	82de6 <_vfiprintf_r+0xda>
   83316:	f898 3000 	ldrb.w	r3, [r8]
   8331a:	212b      	movs	r1, #43	; 0x2b
   8331c:	e563      	b.n	82de6 <_vfiprintf_r+0xda>
   8331e:	f898 3000 	ldrb.w	r3, [r8]
   83322:	f108 0401 	add.w	r4, r8, #1
   83326:	2b2a      	cmp	r3, #42	; 0x2a
   83328:	f000 8305 	beq.w	83936 <_vfiprintf_r+0xc2a>
   8332c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83330:	2a09      	cmp	r2, #9
   83332:	bf98      	it	ls
   83334:	2500      	movls	r5, #0
   83336:	f200 82fa 	bhi.w	8392e <_vfiprintf_r+0xc22>
   8333a:	f814 3b01 	ldrb.w	r3, [r4], #1
   8333e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   83342:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   83346:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8334a:	2a09      	cmp	r2, #9
   8334c:	d9f5      	bls.n	8333a <_vfiprintf_r+0x62e>
   8334e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   83352:	46a0      	mov	r8, r4
   83354:	e549      	b.n	82dea <_vfiprintf_r+0xde>
   83356:	4c90      	ldr	r4, [pc, #576]	; (83598 <_vfiprintf_r+0x88c>)
   83358:	f01a 0f20 	tst.w	sl, #32
   8335c:	9004      	str	r0, [sp, #16]
   8335e:	46ac      	mov	ip, r5
   83360:	940a      	str	r4, [sp, #40]	; 0x28
   83362:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83366:	f47f af10 	bne.w	8318a <_vfiprintf_r+0x47e>
   8336a:	f01a 0f10 	tst.w	sl, #16
   8336e:	f040 81ea 	bne.w	83746 <_vfiprintf_r+0xa3a>
   83372:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83376:	f000 81e6 	beq.w	83746 <_vfiprintf_r+0xa3a>
   8337a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8337e:	2500      	movs	r5, #0
   83380:	f8bb 4000 	ldrh.w	r4, [fp]
   83384:	f10b 0b04 	add.w	fp, fp, #4
   83388:	f8cd b020 	str.w	fp, [sp, #32]
   8338c:	e707      	b.n	8319e <_vfiprintf_r+0x492>
   8338e:	f898 3000 	ldrb.w	r3, [r8]
   83392:	2900      	cmp	r1, #0
   83394:	f47f ad27 	bne.w	82de6 <_vfiprintf_r+0xda>
   83398:	2120      	movs	r1, #32
   8339a:	e524      	b.n	82de6 <_vfiprintf_r+0xda>
   8339c:	f04a 0a01 	orr.w	sl, sl, #1
   833a0:	f898 3000 	ldrb.w	r3, [r8]
   833a4:	e51f      	b.n	82de6 <_vfiprintf_r+0xda>
   833a6:	9004      	str	r0, [sp, #16]
   833a8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   833ac:	2b00      	cmp	r3, #0
   833ae:	f000 80f9 	beq.w	835a4 <_vfiprintf_r+0x898>
   833b2:	2501      	movs	r5, #1
   833b4:	f04f 0b00 	mov.w	fp, #0
   833b8:	9503      	str	r5, [sp, #12]
   833ba:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   833be:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   833c2:	9505      	str	r5, [sp, #20]
   833c4:	af16      	add	r7, sp, #88	; 0x58
   833c6:	e70e      	b.n	831e6 <_vfiprintf_r+0x4da>
   833c8:	9806      	ldr	r0, [sp, #24]
   833ca:	9902      	ldr	r1, [sp, #8]
   833cc:	aa13      	add	r2, sp, #76	; 0x4c
   833ce:	f7ff fc61 	bl	82c94 <__sprint_r.part.0>
   833d2:	2800      	cmp	r0, #0
   833d4:	f040 80ed 	bne.w	835b2 <_vfiprintf_r+0x8a6>
   833d8:	9814      	ldr	r0, [sp, #80]	; 0x50
   833da:	9a15      	ldr	r2, [sp, #84]	; 0x54
   833dc:	1c43      	adds	r3, r0, #1
   833de:	46cc      	mov	ip, r9
   833e0:	e5fe      	b.n	82fe0 <_vfiprintf_r+0x2d4>
   833e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   833e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   833e6:	1c59      	adds	r1, r3, #1
   833e8:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   833ec:	b168      	cbz	r0, 8340a <_vfiprintf_r+0x6fe>
   833ee:	3201      	adds	r2, #1
   833f0:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   833f4:	2301      	movs	r3, #1
   833f6:	2907      	cmp	r1, #7
   833f8:	9215      	str	r2, [sp, #84]	; 0x54
   833fa:	9114      	str	r1, [sp, #80]	; 0x50
   833fc:	e886 0009 	stmia.w	r6, {r0, r3}
   83400:	f300 8160 	bgt.w	836c4 <_vfiprintf_r+0x9b8>
   83404:	460b      	mov	r3, r1
   83406:	3608      	adds	r6, #8
   83408:	3101      	adds	r1, #1
   8340a:	9c07      	ldr	r4, [sp, #28]
   8340c:	b164      	cbz	r4, 83428 <_vfiprintf_r+0x71c>
   8340e:	3202      	adds	r2, #2
   83410:	a812      	add	r0, sp, #72	; 0x48
   83412:	2302      	movs	r3, #2
   83414:	2907      	cmp	r1, #7
   83416:	9215      	str	r2, [sp, #84]	; 0x54
   83418:	9114      	str	r1, [sp, #80]	; 0x50
   8341a:	e886 0009 	stmia.w	r6, {r0, r3}
   8341e:	f300 8157 	bgt.w	836d0 <_vfiprintf_r+0x9c4>
   83422:	460b      	mov	r3, r1
   83424:	3608      	adds	r6, #8
   83426:	3101      	adds	r1, #1
   83428:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8342a:	2d80      	cmp	r5, #128	; 0x80
   8342c:	f000 8101 	beq.w	83632 <_vfiprintf_r+0x926>
   83430:	9d05      	ldr	r5, [sp, #20]
   83432:	ebc5 040c 	rsb	r4, r5, ip
   83436:	2c00      	cmp	r4, #0
   83438:	dd2f      	ble.n	8349a <_vfiprintf_r+0x78e>
   8343a:	2c10      	cmp	r4, #16
   8343c:	4d57      	ldr	r5, [pc, #348]	; (8359c <_vfiprintf_r+0x890>)
   8343e:	dd22      	ble.n	83486 <_vfiprintf_r+0x77a>
   83440:	4630      	mov	r0, r6
   83442:	f04f 0b10 	mov.w	fp, #16
   83446:	462e      	mov	r6, r5
   83448:	4625      	mov	r5, r4
   8344a:	9c06      	ldr	r4, [sp, #24]
   8344c:	e006      	b.n	8345c <_vfiprintf_r+0x750>
   8344e:	f103 0c02 	add.w	ip, r3, #2
   83452:	3008      	adds	r0, #8
   83454:	460b      	mov	r3, r1
   83456:	3d10      	subs	r5, #16
   83458:	2d10      	cmp	r5, #16
   8345a:	dd10      	ble.n	8347e <_vfiprintf_r+0x772>
   8345c:	1c59      	adds	r1, r3, #1
   8345e:	3210      	adds	r2, #16
   83460:	2907      	cmp	r1, #7
   83462:	9215      	str	r2, [sp, #84]	; 0x54
   83464:	e880 0840 	stmia.w	r0, {r6, fp}
   83468:	9114      	str	r1, [sp, #80]	; 0x50
   8346a:	ddf0      	ble.n	8344e <_vfiprintf_r+0x742>
   8346c:	2a00      	cmp	r2, #0
   8346e:	d163      	bne.n	83538 <_vfiprintf_r+0x82c>
   83470:	3d10      	subs	r5, #16
   83472:	2d10      	cmp	r5, #16
   83474:	f04f 0c01 	mov.w	ip, #1
   83478:	4613      	mov	r3, r2
   8347a:	4648      	mov	r0, r9
   8347c:	dcee      	bgt.n	8345c <_vfiprintf_r+0x750>
   8347e:	462c      	mov	r4, r5
   83480:	4661      	mov	r1, ip
   83482:	4635      	mov	r5, r6
   83484:	4606      	mov	r6, r0
   83486:	4422      	add	r2, r4
   83488:	2907      	cmp	r1, #7
   8348a:	9215      	str	r2, [sp, #84]	; 0x54
   8348c:	6035      	str	r5, [r6, #0]
   8348e:	6074      	str	r4, [r6, #4]
   83490:	9114      	str	r1, [sp, #80]	; 0x50
   83492:	f300 80c1 	bgt.w	83618 <_vfiprintf_r+0x90c>
   83496:	3608      	adds	r6, #8
   83498:	3101      	adds	r1, #1
   8349a:	9d05      	ldr	r5, [sp, #20]
   8349c:	2907      	cmp	r1, #7
   8349e:	442a      	add	r2, r5
   834a0:	9215      	str	r2, [sp, #84]	; 0x54
   834a2:	6037      	str	r7, [r6, #0]
   834a4:	6075      	str	r5, [r6, #4]
   834a6:	9114      	str	r1, [sp, #80]	; 0x50
   834a8:	f340 80c1 	ble.w	8362e <_vfiprintf_r+0x922>
   834ac:	2a00      	cmp	r2, #0
   834ae:	f040 8130 	bne.w	83712 <_vfiprintf_r+0xa06>
   834b2:	9214      	str	r2, [sp, #80]	; 0x50
   834b4:	464e      	mov	r6, r9
   834b6:	f01a 0f04 	tst.w	sl, #4
   834ba:	f000 808b 	beq.w	835d4 <_vfiprintf_r+0x8c8>
   834be:	9d04      	ldr	r5, [sp, #16]
   834c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   834c4:	ebcb 0405 	rsb	r4, fp, r5
   834c8:	2c00      	cmp	r4, #0
   834ca:	f340 8083 	ble.w	835d4 <_vfiprintf_r+0x8c8>
   834ce:	2c10      	cmp	r4, #16
   834d0:	f340 821e 	ble.w	83910 <_vfiprintf_r+0xc04>
   834d4:	9914      	ldr	r1, [sp, #80]	; 0x50
   834d6:	4d32      	ldr	r5, [pc, #200]	; (835a0 <_vfiprintf_r+0x894>)
   834d8:	2710      	movs	r7, #16
   834da:	f8dd a018 	ldr.w	sl, [sp, #24]
   834de:	f8dd b008 	ldr.w	fp, [sp, #8]
   834e2:	e005      	b.n	834f0 <_vfiprintf_r+0x7e4>
   834e4:	1c88      	adds	r0, r1, #2
   834e6:	3608      	adds	r6, #8
   834e8:	4619      	mov	r1, r3
   834ea:	3c10      	subs	r4, #16
   834ec:	2c10      	cmp	r4, #16
   834ee:	dd10      	ble.n	83512 <_vfiprintf_r+0x806>
   834f0:	1c4b      	adds	r3, r1, #1
   834f2:	3210      	adds	r2, #16
   834f4:	2b07      	cmp	r3, #7
   834f6:	9215      	str	r2, [sp, #84]	; 0x54
   834f8:	e886 00a0 	stmia.w	r6, {r5, r7}
   834fc:	9314      	str	r3, [sp, #80]	; 0x50
   834fe:	ddf1      	ble.n	834e4 <_vfiprintf_r+0x7d8>
   83500:	2a00      	cmp	r2, #0
   83502:	d17d      	bne.n	83600 <_vfiprintf_r+0x8f4>
   83504:	3c10      	subs	r4, #16
   83506:	2c10      	cmp	r4, #16
   83508:	f04f 0001 	mov.w	r0, #1
   8350c:	4611      	mov	r1, r2
   8350e:	464e      	mov	r6, r9
   83510:	dcee      	bgt.n	834f0 <_vfiprintf_r+0x7e4>
   83512:	4422      	add	r2, r4
   83514:	2807      	cmp	r0, #7
   83516:	9215      	str	r2, [sp, #84]	; 0x54
   83518:	6035      	str	r5, [r6, #0]
   8351a:	6074      	str	r4, [r6, #4]
   8351c:	9014      	str	r0, [sp, #80]	; 0x50
   8351e:	dd59      	ble.n	835d4 <_vfiprintf_r+0x8c8>
   83520:	2a00      	cmp	r2, #0
   83522:	d14f      	bne.n	835c4 <_vfiprintf_r+0x8b8>
   83524:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83526:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8352a:	9d04      	ldr	r5, [sp, #16]
   8352c:	45ab      	cmp	fp, r5
   8352e:	bfac      	ite	ge
   83530:	445c      	addge	r4, fp
   83532:	1964      	addlt	r4, r4, r5
   83534:	9409      	str	r4, [sp, #36]	; 0x24
   83536:	e05e      	b.n	835f6 <_vfiprintf_r+0x8ea>
   83538:	4620      	mov	r0, r4
   8353a:	9902      	ldr	r1, [sp, #8]
   8353c:	aa13      	add	r2, sp, #76	; 0x4c
   8353e:	f7ff fba9 	bl	82c94 <__sprint_r.part.0>
   83542:	2800      	cmp	r0, #0
   83544:	d135      	bne.n	835b2 <_vfiprintf_r+0x8a6>
   83546:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83548:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8354a:	f103 0c01 	add.w	ip, r3, #1
   8354e:	4648      	mov	r0, r9
   83550:	e781      	b.n	83456 <_vfiprintf_r+0x74a>
   83552:	08e0      	lsrs	r0, r4, #3
   83554:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   83558:	f004 0207 	and.w	r2, r4, #7
   8355c:	08e9      	lsrs	r1, r5, #3
   8355e:	3230      	adds	r2, #48	; 0x30
   83560:	ea50 0b01 	orrs.w	fp, r0, r1
   83564:	461f      	mov	r7, r3
   83566:	701a      	strb	r2, [r3, #0]
   83568:	4604      	mov	r4, r0
   8356a:	460d      	mov	r5, r1
   8356c:	f103 33ff 	add.w	r3, r3, #4294967295
   83570:	d1ef      	bne.n	83552 <_vfiprintf_r+0x846>
   83572:	f01a 0f01 	tst.w	sl, #1
   83576:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   8357a:	4639      	mov	r1, r7
   8357c:	f000 80b9 	beq.w	836f2 <_vfiprintf_r+0x9e6>
   83580:	2a30      	cmp	r2, #48	; 0x30
   83582:	f43f acf4 	beq.w	82f6e <_vfiprintf_r+0x262>
   83586:	461f      	mov	r7, r3
   83588:	ebc7 0509 	rsb	r5, r7, r9
   8358c:	2330      	movs	r3, #48	; 0x30
   8358e:	9505      	str	r5, [sp, #20]
   83590:	f801 3c01 	strb.w	r3, [r1, #-1]
   83594:	e4ee      	b.n	82f74 <_vfiprintf_r+0x268>
   83596:	bf00      	nop
   83598:	00085a64 	.word	0x00085a64
   8359c:	00085a80 	.word	0x00085a80
   835a0:	00085a90 	.word	0x00085a90
   835a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   835a6:	b123      	cbz	r3, 835b2 <_vfiprintf_r+0x8a6>
   835a8:	9806      	ldr	r0, [sp, #24]
   835aa:	9902      	ldr	r1, [sp, #8]
   835ac:	aa13      	add	r2, sp, #76	; 0x4c
   835ae:	f7ff fb71 	bl	82c94 <__sprint_r.part.0>
   835b2:	9c02      	ldr	r4, [sp, #8]
   835b4:	89a3      	ldrh	r3, [r4, #12]
   835b6:	065b      	lsls	r3, r3, #25
   835b8:	f53f ac98 	bmi.w	82eec <_vfiprintf_r+0x1e0>
   835bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   835be:	b031      	add	sp, #196	; 0xc4
   835c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835c4:	9806      	ldr	r0, [sp, #24]
   835c6:	9902      	ldr	r1, [sp, #8]
   835c8:	aa13      	add	r2, sp, #76	; 0x4c
   835ca:	f7ff fb63 	bl	82c94 <__sprint_r.part.0>
   835ce:	2800      	cmp	r0, #0
   835d0:	d1ef      	bne.n	835b2 <_vfiprintf_r+0x8a6>
   835d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   835d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   835d6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   835da:	9d04      	ldr	r5, [sp, #16]
   835dc:	45ab      	cmp	fp, r5
   835de:	bfac      	ite	ge
   835e0:	445c      	addge	r4, fp
   835e2:	1964      	addlt	r4, r4, r5
   835e4:	9409      	str	r4, [sp, #36]	; 0x24
   835e6:	b132      	cbz	r2, 835f6 <_vfiprintf_r+0x8ea>
   835e8:	9806      	ldr	r0, [sp, #24]
   835ea:	9902      	ldr	r1, [sp, #8]
   835ec:	aa13      	add	r2, sp, #76	; 0x4c
   835ee:	f7ff fb51 	bl	82c94 <__sprint_r.part.0>
   835f2:	2800      	cmp	r0, #0
   835f4:	d1dd      	bne.n	835b2 <_vfiprintf_r+0x8a6>
   835f6:	2000      	movs	r0, #0
   835f8:	9014      	str	r0, [sp, #80]	; 0x50
   835fa:	464e      	mov	r6, r9
   835fc:	f7ff bbb9 	b.w	82d72 <_vfiprintf_r+0x66>
   83600:	4650      	mov	r0, sl
   83602:	4659      	mov	r1, fp
   83604:	aa13      	add	r2, sp, #76	; 0x4c
   83606:	f7ff fb45 	bl	82c94 <__sprint_r.part.0>
   8360a:	2800      	cmp	r0, #0
   8360c:	d1d1      	bne.n	835b2 <_vfiprintf_r+0x8a6>
   8360e:	9914      	ldr	r1, [sp, #80]	; 0x50
   83610:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83612:	1c48      	adds	r0, r1, #1
   83614:	464e      	mov	r6, r9
   83616:	e768      	b.n	834ea <_vfiprintf_r+0x7de>
   83618:	2a00      	cmp	r2, #0
   8361a:	f040 80f7 	bne.w	8380c <_vfiprintf_r+0xb00>
   8361e:	9c05      	ldr	r4, [sp, #20]
   83620:	2301      	movs	r3, #1
   83622:	9720      	str	r7, [sp, #128]	; 0x80
   83624:	9421      	str	r4, [sp, #132]	; 0x84
   83626:	9415      	str	r4, [sp, #84]	; 0x54
   83628:	4622      	mov	r2, r4
   8362a:	9314      	str	r3, [sp, #80]	; 0x50
   8362c:	464e      	mov	r6, r9
   8362e:	3608      	adds	r6, #8
   83630:	e741      	b.n	834b6 <_vfiprintf_r+0x7aa>
   83632:	9d04      	ldr	r5, [sp, #16]
   83634:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83638:	ebcb 0405 	rsb	r4, fp, r5
   8363c:	2c00      	cmp	r4, #0
   8363e:	f77f aef7 	ble.w	83430 <_vfiprintf_r+0x724>
   83642:	2c10      	cmp	r4, #16
   83644:	4da6      	ldr	r5, [pc, #664]	; (838e0 <_vfiprintf_r+0xbd4>)
   83646:	f340 8170 	ble.w	8392a <_vfiprintf_r+0xc1e>
   8364a:	4629      	mov	r1, r5
   8364c:	f04f 0b10 	mov.w	fp, #16
   83650:	4625      	mov	r5, r4
   83652:	4664      	mov	r4, ip
   83654:	46b4      	mov	ip, r6
   83656:	460e      	mov	r6, r1
   83658:	e006      	b.n	83668 <_vfiprintf_r+0x95c>
   8365a:	1c98      	adds	r0, r3, #2
   8365c:	f10c 0c08 	add.w	ip, ip, #8
   83660:	460b      	mov	r3, r1
   83662:	3d10      	subs	r5, #16
   83664:	2d10      	cmp	r5, #16
   83666:	dd0f      	ble.n	83688 <_vfiprintf_r+0x97c>
   83668:	1c59      	adds	r1, r3, #1
   8366a:	3210      	adds	r2, #16
   8366c:	2907      	cmp	r1, #7
   8366e:	9215      	str	r2, [sp, #84]	; 0x54
   83670:	e88c 0840 	stmia.w	ip, {r6, fp}
   83674:	9114      	str	r1, [sp, #80]	; 0x50
   83676:	ddf0      	ble.n	8365a <_vfiprintf_r+0x94e>
   83678:	b9ba      	cbnz	r2, 836aa <_vfiprintf_r+0x99e>
   8367a:	3d10      	subs	r5, #16
   8367c:	2d10      	cmp	r5, #16
   8367e:	f04f 0001 	mov.w	r0, #1
   83682:	4613      	mov	r3, r2
   83684:	46cc      	mov	ip, r9
   83686:	dcef      	bgt.n	83668 <_vfiprintf_r+0x95c>
   83688:	4633      	mov	r3, r6
   8368a:	4666      	mov	r6, ip
   8368c:	46a4      	mov	ip, r4
   8368e:	462c      	mov	r4, r5
   83690:	461d      	mov	r5, r3
   83692:	4422      	add	r2, r4
   83694:	2807      	cmp	r0, #7
   83696:	9215      	str	r2, [sp, #84]	; 0x54
   83698:	6035      	str	r5, [r6, #0]
   8369a:	6074      	str	r4, [r6, #4]
   8369c:	9014      	str	r0, [sp, #80]	; 0x50
   8369e:	f300 80af 	bgt.w	83800 <_vfiprintf_r+0xaf4>
   836a2:	3608      	adds	r6, #8
   836a4:	1c41      	adds	r1, r0, #1
   836a6:	4603      	mov	r3, r0
   836a8:	e6c2      	b.n	83430 <_vfiprintf_r+0x724>
   836aa:	9806      	ldr	r0, [sp, #24]
   836ac:	9902      	ldr	r1, [sp, #8]
   836ae:	aa13      	add	r2, sp, #76	; 0x4c
   836b0:	f7ff faf0 	bl	82c94 <__sprint_r.part.0>
   836b4:	2800      	cmp	r0, #0
   836b6:	f47f af7c 	bne.w	835b2 <_vfiprintf_r+0x8a6>
   836ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   836bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   836be:	1c58      	adds	r0, r3, #1
   836c0:	46cc      	mov	ip, r9
   836c2:	e7ce      	b.n	83662 <_vfiprintf_r+0x956>
   836c4:	2a00      	cmp	r2, #0
   836c6:	d179      	bne.n	837bc <_vfiprintf_r+0xab0>
   836c8:	4619      	mov	r1, r3
   836ca:	464e      	mov	r6, r9
   836cc:	4613      	mov	r3, r2
   836ce:	e69c      	b.n	8340a <_vfiprintf_r+0x6fe>
   836d0:	2a00      	cmp	r2, #0
   836d2:	f040 8084 	bne.w	837de <_vfiprintf_r+0xad2>
   836d6:	2101      	movs	r1, #1
   836d8:	4613      	mov	r3, r2
   836da:	464e      	mov	r6, r9
   836dc:	e6a4      	b.n	83428 <_vfiprintf_r+0x71c>
   836de:	464f      	mov	r7, r9
   836e0:	e448      	b.n	82f74 <_vfiprintf_r+0x268>
   836e2:	2d00      	cmp	r5, #0
   836e4:	bf08      	it	eq
   836e6:	2c0a      	cmpeq	r4, #10
   836e8:	d246      	bcs.n	83778 <_vfiprintf_r+0xa6c>
   836ea:	3430      	adds	r4, #48	; 0x30
   836ec:	af30      	add	r7, sp, #192	; 0xc0
   836ee:	f807 4d41 	strb.w	r4, [r7, #-65]!
   836f2:	ebc7 0309 	rsb	r3, r7, r9
   836f6:	9305      	str	r3, [sp, #20]
   836f8:	e43c      	b.n	82f74 <_vfiprintf_r+0x268>
   836fa:	2302      	movs	r3, #2
   836fc:	e417      	b.n	82f2e <_vfiprintf_r+0x222>
   836fe:	2a00      	cmp	r2, #0
   83700:	f040 80af 	bne.w	83862 <_vfiprintf_r+0xb56>
   83704:	4613      	mov	r3, r2
   83706:	2101      	movs	r1, #1
   83708:	464e      	mov	r6, r9
   8370a:	e66d      	b.n	833e8 <_vfiprintf_r+0x6dc>
   8370c:	4644      	mov	r4, r8
   8370e:	f7ff bb58 	b.w	82dc2 <_vfiprintf_r+0xb6>
   83712:	9806      	ldr	r0, [sp, #24]
   83714:	9902      	ldr	r1, [sp, #8]
   83716:	aa13      	add	r2, sp, #76	; 0x4c
   83718:	f7ff fabc 	bl	82c94 <__sprint_r.part.0>
   8371c:	2800      	cmp	r0, #0
   8371e:	f47f af48 	bne.w	835b2 <_vfiprintf_r+0x8a6>
   83722:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83724:	464e      	mov	r6, r9
   83726:	e6c6      	b.n	834b6 <_vfiprintf_r+0x7aa>
   83728:	9d08      	ldr	r5, [sp, #32]
   8372a:	682c      	ldr	r4, [r5, #0]
   8372c:	3504      	adds	r5, #4
   8372e:	9508      	str	r5, [sp, #32]
   83730:	2500      	movs	r5, #0
   83732:	f7ff bbfc 	b.w	82f2e <_vfiprintf_r+0x222>
   83736:	9d08      	ldr	r5, [sp, #32]
   83738:	2301      	movs	r3, #1
   8373a:	682c      	ldr	r4, [r5, #0]
   8373c:	3504      	adds	r5, #4
   8373e:	9508      	str	r5, [sp, #32]
   83740:	2500      	movs	r5, #0
   83742:	f7ff bbf4 	b.w	82f2e <_vfiprintf_r+0x222>
   83746:	9d08      	ldr	r5, [sp, #32]
   83748:	682c      	ldr	r4, [r5, #0]
   8374a:	3504      	adds	r5, #4
   8374c:	9508      	str	r5, [sp, #32]
   8374e:	2500      	movs	r5, #0
   83750:	e525      	b.n	8319e <_vfiprintf_r+0x492>
   83752:	9d08      	ldr	r5, [sp, #32]
   83754:	682c      	ldr	r4, [r5, #0]
   83756:	3504      	adds	r5, #4
   83758:	9508      	str	r5, [sp, #32]
   8375a:	17e5      	asrs	r5, r4, #31
   8375c:	4622      	mov	r2, r4
   8375e:	462b      	mov	r3, r5
   83760:	e48e      	b.n	83080 <_vfiprintf_r+0x374>
   83762:	9806      	ldr	r0, [sp, #24]
   83764:	9902      	ldr	r1, [sp, #8]
   83766:	aa13      	add	r2, sp, #76	; 0x4c
   83768:	f7ff fa94 	bl	82c94 <__sprint_r.part.0>
   8376c:	2800      	cmp	r0, #0
   8376e:	f47f af20 	bne.w	835b2 <_vfiprintf_r+0x8a6>
   83772:	464e      	mov	r6, r9
   83774:	f7ff bb9a 	b.w	82eac <_vfiprintf_r+0x1a0>
   83778:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   8377c:	9603      	str	r6, [sp, #12]
   8377e:	465e      	mov	r6, fp
   83780:	46e3      	mov	fp, ip
   83782:	4620      	mov	r0, r4
   83784:	4629      	mov	r1, r5
   83786:	220a      	movs	r2, #10
   83788:	2300      	movs	r3, #0
   8378a:	f001 fe2f 	bl	853ec <__aeabi_uldivmod>
   8378e:	3230      	adds	r2, #48	; 0x30
   83790:	7032      	strb	r2, [r6, #0]
   83792:	4620      	mov	r0, r4
   83794:	4629      	mov	r1, r5
   83796:	220a      	movs	r2, #10
   83798:	2300      	movs	r3, #0
   8379a:	f001 fe27 	bl	853ec <__aeabi_uldivmod>
   8379e:	4604      	mov	r4, r0
   837a0:	460d      	mov	r5, r1
   837a2:	ea54 0005 	orrs.w	r0, r4, r5
   837a6:	4637      	mov	r7, r6
   837a8:	f106 36ff 	add.w	r6, r6, #4294967295
   837ac:	d1e9      	bne.n	83782 <_vfiprintf_r+0xa76>
   837ae:	ebc7 0309 	rsb	r3, r7, r9
   837b2:	46dc      	mov	ip, fp
   837b4:	9e03      	ldr	r6, [sp, #12]
   837b6:	9305      	str	r3, [sp, #20]
   837b8:	f7ff bbdc 	b.w	82f74 <_vfiprintf_r+0x268>
   837bc:	9806      	ldr	r0, [sp, #24]
   837be:	9902      	ldr	r1, [sp, #8]
   837c0:	aa13      	add	r2, sp, #76	; 0x4c
   837c2:	f8cd c004 	str.w	ip, [sp, #4]
   837c6:	f7ff fa65 	bl	82c94 <__sprint_r.part.0>
   837ca:	f8dd c004 	ldr.w	ip, [sp, #4]
   837ce:	2800      	cmp	r0, #0
   837d0:	f47f aeef 	bne.w	835b2 <_vfiprintf_r+0x8a6>
   837d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   837d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   837d8:	1c59      	adds	r1, r3, #1
   837da:	464e      	mov	r6, r9
   837dc:	e615      	b.n	8340a <_vfiprintf_r+0x6fe>
   837de:	9806      	ldr	r0, [sp, #24]
   837e0:	9902      	ldr	r1, [sp, #8]
   837e2:	aa13      	add	r2, sp, #76	; 0x4c
   837e4:	f8cd c004 	str.w	ip, [sp, #4]
   837e8:	f7ff fa54 	bl	82c94 <__sprint_r.part.0>
   837ec:	f8dd c004 	ldr.w	ip, [sp, #4]
   837f0:	2800      	cmp	r0, #0
   837f2:	f47f aede 	bne.w	835b2 <_vfiprintf_r+0x8a6>
   837f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   837f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   837fa:	1c59      	adds	r1, r3, #1
   837fc:	464e      	mov	r6, r9
   837fe:	e613      	b.n	83428 <_vfiprintf_r+0x71c>
   83800:	2a00      	cmp	r2, #0
   83802:	d156      	bne.n	838b2 <_vfiprintf_r+0xba6>
   83804:	2101      	movs	r1, #1
   83806:	4613      	mov	r3, r2
   83808:	464e      	mov	r6, r9
   8380a:	e611      	b.n	83430 <_vfiprintf_r+0x724>
   8380c:	9806      	ldr	r0, [sp, #24]
   8380e:	9902      	ldr	r1, [sp, #8]
   83810:	aa13      	add	r2, sp, #76	; 0x4c
   83812:	f7ff fa3f 	bl	82c94 <__sprint_r.part.0>
   83816:	2800      	cmp	r0, #0
   83818:	f47f aecb 	bne.w	835b2 <_vfiprintf_r+0x8a6>
   8381c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8381e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83820:	3101      	adds	r1, #1
   83822:	464e      	mov	r6, r9
   83824:	e639      	b.n	8349a <_vfiprintf_r+0x78e>
   83826:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8382a:	4264      	negs	r4, r4
   8382c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   83830:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   83834:	f8cd b01c 	str.w	fp, [sp, #28]
   83838:	f8cd c014 	str.w	ip, [sp, #20]
   8383c:	2301      	movs	r3, #1
   8383e:	f7ff bb7e 	b.w	82f3e <_vfiprintf_r+0x232>
   83842:	f01a 0f10 	tst.w	sl, #16
   83846:	d11d      	bne.n	83884 <_vfiprintf_r+0xb78>
   83848:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8384c:	d058      	beq.n	83900 <_vfiprintf_r+0xbf4>
   8384e:	9d08      	ldr	r5, [sp, #32]
   83850:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   83854:	682b      	ldr	r3, [r5, #0]
   83856:	3504      	adds	r5, #4
   83858:	9508      	str	r5, [sp, #32]
   8385a:	f8a3 b000 	strh.w	fp, [r3]
   8385e:	f7ff ba88 	b.w	82d72 <_vfiprintf_r+0x66>
   83862:	9806      	ldr	r0, [sp, #24]
   83864:	9902      	ldr	r1, [sp, #8]
   83866:	aa13      	add	r2, sp, #76	; 0x4c
   83868:	f8cd c004 	str.w	ip, [sp, #4]
   8386c:	f7ff fa12 	bl	82c94 <__sprint_r.part.0>
   83870:	f8dd c004 	ldr.w	ip, [sp, #4]
   83874:	2800      	cmp	r0, #0
   83876:	f47f ae9c 	bne.w	835b2 <_vfiprintf_r+0x8a6>
   8387a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8387c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8387e:	1c59      	adds	r1, r3, #1
   83880:	464e      	mov	r6, r9
   83882:	e5b1      	b.n	833e8 <_vfiprintf_r+0x6dc>
   83884:	f8dd b020 	ldr.w	fp, [sp, #32]
   83888:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8388a:	f8db 3000 	ldr.w	r3, [fp]
   8388e:	f10b 0b04 	add.w	fp, fp, #4
   83892:	f8cd b020 	str.w	fp, [sp, #32]
   83896:	601c      	str	r4, [r3, #0]
   83898:	f7ff ba6b 	b.w	82d72 <_vfiprintf_r+0x66>
   8389c:	9408      	str	r4, [sp, #32]
   8389e:	f7ff f9c9 	bl	82c34 <strlen>
   838a2:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   838a6:	9005      	str	r0, [sp, #20]
   838a8:	9407      	str	r4, [sp, #28]
   838aa:	f04f 0c00 	mov.w	ip, #0
   838ae:	f7ff bb61 	b.w	82f74 <_vfiprintf_r+0x268>
   838b2:	9806      	ldr	r0, [sp, #24]
   838b4:	9902      	ldr	r1, [sp, #8]
   838b6:	aa13      	add	r2, sp, #76	; 0x4c
   838b8:	f8cd c004 	str.w	ip, [sp, #4]
   838bc:	f7ff f9ea 	bl	82c94 <__sprint_r.part.0>
   838c0:	f8dd c004 	ldr.w	ip, [sp, #4]
   838c4:	2800      	cmp	r0, #0
   838c6:	f47f ae74 	bne.w	835b2 <_vfiprintf_r+0x8a6>
   838ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   838cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   838ce:	1c59      	adds	r1, r3, #1
   838d0:	464e      	mov	r6, r9
   838d2:	e5ad      	b.n	83430 <_vfiprintf_r+0x724>
   838d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   838d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   838d8:	3301      	adds	r3, #1
   838da:	4d02      	ldr	r5, [pc, #8]	; (838e4 <_vfiprintf_r+0xbd8>)
   838dc:	f7ff bb9a 	b.w	83014 <_vfiprintf_r+0x308>
   838e0:	00085a80 	.word	0x00085a80
   838e4:	00085a90 	.word	0x00085a90
   838e8:	f1bc 0f06 	cmp.w	ip, #6
   838ec:	bf34      	ite	cc
   838ee:	4663      	movcc	r3, ip
   838f0:	2306      	movcs	r3, #6
   838f2:	9408      	str	r4, [sp, #32]
   838f4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   838f8:	9305      	str	r3, [sp, #20]
   838fa:	9403      	str	r4, [sp, #12]
   838fc:	4f16      	ldr	r7, [pc, #88]	; (83958 <_vfiprintf_r+0xc4c>)
   838fe:	e472      	b.n	831e6 <_vfiprintf_r+0x4da>
   83900:	9c08      	ldr	r4, [sp, #32]
   83902:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83904:	6823      	ldr	r3, [r4, #0]
   83906:	3404      	adds	r4, #4
   83908:	9408      	str	r4, [sp, #32]
   8390a:	601d      	str	r5, [r3, #0]
   8390c:	f7ff ba31 	b.w	82d72 <_vfiprintf_r+0x66>
   83910:	9814      	ldr	r0, [sp, #80]	; 0x50
   83912:	4d12      	ldr	r5, [pc, #72]	; (8395c <_vfiprintf_r+0xc50>)
   83914:	3001      	adds	r0, #1
   83916:	e5fc      	b.n	83512 <_vfiprintf_r+0x806>
   83918:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8391c:	f8cd c014 	str.w	ip, [sp, #20]
   83920:	9507      	str	r5, [sp, #28]
   83922:	9408      	str	r4, [sp, #32]
   83924:	4684      	mov	ip, r0
   83926:	f7ff bb25 	b.w	82f74 <_vfiprintf_r+0x268>
   8392a:	4608      	mov	r0, r1
   8392c:	e6b1      	b.n	83692 <_vfiprintf_r+0x986>
   8392e:	46a0      	mov	r8, r4
   83930:	2500      	movs	r5, #0
   83932:	f7ff ba5a 	b.w	82dea <_vfiprintf_r+0xde>
   83936:	f8dd b020 	ldr.w	fp, [sp, #32]
   8393a:	f898 3001 	ldrb.w	r3, [r8, #1]
   8393e:	f8db 5000 	ldr.w	r5, [fp]
   83942:	f10b 0204 	add.w	r2, fp, #4
   83946:	2d00      	cmp	r5, #0
   83948:	9208      	str	r2, [sp, #32]
   8394a:	46a0      	mov	r8, r4
   8394c:	f6bf aa4b 	bge.w	82de6 <_vfiprintf_r+0xda>
   83950:	f04f 35ff 	mov.w	r5, #4294967295
   83954:	f7ff ba47 	b.w	82de6 <_vfiprintf_r+0xda>
   83958:	00085a78 	.word	0x00085a78
   8395c:	00085a90 	.word	0x00085a90

00083960 <__sbprintf>:
   83960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83964:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   83966:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8396a:	4688      	mov	r8, r1
   8396c:	9719      	str	r7, [sp, #100]	; 0x64
   8396e:	f8d8 701c 	ldr.w	r7, [r8, #28]
   83972:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   83976:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   8397a:	9707      	str	r7, [sp, #28]
   8397c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   83980:	ac1a      	add	r4, sp, #104	; 0x68
   83982:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83986:	f02a 0a02 	bic.w	sl, sl, #2
   8398a:	2600      	movs	r6, #0
   8398c:	4669      	mov	r1, sp
   8398e:	9400      	str	r4, [sp, #0]
   83990:	9404      	str	r4, [sp, #16]
   83992:	9502      	str	r5, [sp, #8]
   83994:	9505      	str	r5, [sp, #20]
   83996:	f8ad a00c 	strh.w	sl, [sp, #12]
   8399a:	f8ad 900e 	strh.w	r9, [sp, #14]
   8399e:	9709      	str	r7, [sp, #36]	; 0x24
   839a0:	9606      	str	r6, [sp, #24]
   839a2:	4605      	mov	r5, r0
   839a4:	f7ff f9b2 	bl	82d0c <_vfiprintf_r>
   839a8:	1e04      	subs	r4, r0, #0
   839aa:	db07      	blt.n	839bc <__sbprintf+0x5c>
   839ac:	4628      	mov	r0, r5
   839ae:	4669      	mov	r1, sp
   839b0:	f000 f92a 	bl	83c08 <_fflush_r>
   839b4:	42b0      	cmp	r0, r6
   839b6:	bf18      	it	ne
   839b8:	f04f 34ff 	movne.w	r4, #4294967295
   839bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   839c0:	065b      	lsls	r3, r3, #25
   839c2:	d505      	bpl.n	839d0 <__sbprintf+0x70>
   839c4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   839c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   839cc:	f8a8 300c 	strh.w	r3, [r8, #12]
   839d0:	4620      	mov	r0, r4
   839d2:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   839d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   839da:	bf00      	nop

000839dc <__swsetup_r>:
   839dc:	4b2f      	ldr	r3, [pc, #188]	; (83a9c <__swsetup_r+0xc0>)
   839de:	b570      	push	{r4, r5, r6, lr}
   839e0:	4606      	mov	r6, r0
   839e2:	6818      	ldr	r0, [r3, #0]
   839e4:	460c      	mov	r4, r1
   839e6:	b110      	cbz	r0, 839ee <__swsetup_r+0x12>
   839e8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   839ea:	2a00      	cmp	r2, #0
   839ec:	d036      	beq.n	83a5c <__swsetup_r+0x80>
   839ee:	89a5      	ldrh	r5, [r4, #12]
   839f0:	b2ab      	uxth	r3, r5
   839f2:	0719      	lsls	r1, r3, #28
   839f4:	d50c      	bpl.n	83a10 <__swsetup_r+0x34>
   839f6:	6922      	ldr	r2, [r4, #16]
   839f8:	b1aa      	cbz	r2, 83a26 <__swsetup_r+0x4a>
   839fa:	f013 0101 	ands.w	r1, r3, #1
   839fe:	d01e      	beq.n	83a3e <__swsetup_r+0x62>
   83a00:	6963      	ldr	r3, [r4, #20]
   83a02:	2100      	movs	r1, #0
   83a04:	425b      	negs	r3, r3
   83a06:	61a3      	str	r3, [r4, #24]
   83a08:	60a1      	str	r1, [r4, #8]
   83a0a:	b1f2      	cbz	r2, 83a4a <__swsetup_r+0x6e>
   83a0c:	2000      	movs	r0, #0
   83a0e:	bd70      	pop	{r4, r5, r6, pc}
   83a10:	06da      	lsls	r2, r3, #27
   83a12:	d53a      	bpl.n	83a8a <__swsetup_r+0xae>
   83a14:	075b      	lsls	r3, r3, #29
   83a16:	d424      	bmi.n	83a62 <__swsetup_r+0x86>
   83a18:	6922      	ldr	r2, [r4, #16]
   83a1a:	f045 0308 	orr.w	r3, r5, #8
   83a1e:	81a3      	strh	r3, [r4, #12]
   83a20:	b29b      	uxth	r3, r3
   83a22:	2a00      	cmp	r2, #0
   83a24:	d1e9      	bne.n	839fa <__swsetup_r+0x1e>
   83a26:	f403 7120 	and.w	r1, r3, #640	; 0x280
   83a2a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   83a2e:	d0e4      	beq.n	839fa <__swsetup_r+0x1e>
   83a30:	4630      	mov	r0, r6
   83a32:	4621      	mov	r1, r4
   83a34:	f000 fcce 	bl	843d4 <__smakebuf_r>
   83a38:	89a3      	ldrh	r3, [r4, #12]
   83a3a:	6922      	ldr	r2, [r4, #16]
   83a3c:	e7dd      	b.n	839fa <__swsetup_r+0x1e>
   83a3e:	0798      	lsls	r0, r3, #30
   83a40:	bf58      	it	pl
   83a42:	6961      	ldrpl	r1, [r4, #20]
   83a44:	60a1      	str	r1, [r4, #8]
   83a46:	2a00      	cmp	r2, #0
   83a48:	d1e0      	bne.n	83a0c <__swsetup_r+0x30>
   83a4a:	89a3      	ldrh	r3, [r4, #12]
   83a4c:	061a      	lsls	r2, r3, #24
   83a4e:	d5dd      	bpl.n	83a0c <__swsetup_r+0x30>
   83a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83a54:	81a3      	strh	r3, [r4, #12]
   83a56:	f04f 30ff 	mov.w	r0, #4294967295
   83a5a:	bd70      	pop	{r4, r5, r6, pc}
   83a5c:	f000 f8f0 	bl	83c40 <__sinit>
   83a60:	e7c5      	b.n	839ee <__swsetup_r+0x12>
   83a62:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83a64:	b149      	cbz	r1, 83a7a <__swsetup_r+0x9e>
   83a66:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83a6a:	4299      	cmp	r1, r3
   83a6c:	d003      	beq.n	83a76 <__swsetup_r+0x9a>
   83a6e:	4630      	mov	r0, r6
   83a70:	f000 fa2a 	bl	83ec8 <_free_r>
   83a74:	89a5      	ldrh	r5, [r4, #12]
   83a76:	2300      	movs	r3, #0
   83a78:	6323      	str	r3, [r4, #48]	; 0x30
   83a7a:	6922      	ldr	r2, [r4, #16]
   83a7c:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   83a80:	2100      	movs	r1, #0
   83a82:	b2ad      	uxth	r5, r5
   83a84:	6022      	str	r2, [r4, #0]
   83a86:	6061      	str	r1, [r4, #4]
   83a88:	e7c7      	b.n	83a1a <__swsetup_r+0x3e>
   83a8a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   83a8e:	2309      	movs	r3, #9
   83a90:	6033      	str	r3, [r6, #0]
   83a92:	f04f 30ff 	mov.w	r0, #4294967295
   83a96:	81a5      	strh	r5, [r4, #12]
   83a98:	bd70      	pop	{r4, r5, r6, pc}
   83a9a:	bf00      	nop
   83a9c:	20070570 	.word	0x20070570

00083aa0 <register_fini>:
   83aa0:	4b02      	ldr	r3, [pc, #8]	; (83aac <register_fini+0xc>)
   83aa2:	b113      	cbz	r3, 83aaa <register_fini+0xa>
   83aa4:	4802      	ldr	r0, [pc, #8]	; (83ab0 <register_fini+0x10>)
   83aa6:	f000 b805 	b.w	83ab4 <atexit>
   83aaa:	4770      	bx	lr
   83aac:	00000000 	.word	0x00000000
   83ab0:	00083d3d 	.word	0x00083d3d

00083ab4 <atexit>:
   83ab4:	4601      	mov	r1, r0
   83ab6:	2000      	movs	r0, #0
   83ab8:	4602      	mov	r2, r0
   83aba:	4603      	mov	r3, r0
   83abc:	f001 bb9a 	b.w	851f4 <__register_exitproc>

00083ac0 <__sflush_r>:
   83ac0:	898b      	ldrh	r3, [r1, #12]
   83ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ac6:	b29a      	uxth	r2, r3
   83ac8:	460d      	mov	r5, r1
   83aca:	0711      	lsls	r1, r2, #28
   83acc:	4680      	mov	r8, r0
   83ace:	d43c      	bmi.n	83b4a <__sflush_r+0x8a>
   83ad0:	686a      	ldr	r2, [r5, #4]
   83ad2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83ad6:	2a00      	cmp	r2, #0
   83ad8:	81ab      	strh	r3, [r5, #12]
   83ada:	dd59      	ble.n	83b90 <__sflush_r+0xd0>
   83adc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83ade:	2c00      	cmp	r4, #0
   83ae0:	d04b      	beq.n	83b7a <__sflush_r+0xba>
   83ae2:	b29b      	uxth	r3, r3
   83ae4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   83ae8:	2100      	movs	r1, #0
   83aea:	b292      	uxth	r2, r2
   83aec:	f8d8 6000 	ldr.w	r6, [r8]
   83af0:	f8c8 1000 	str.w	r1, [r8]
   83af4:	2a00      	cmp	r2, #0
   83af6:	d04f      	beq.n	83b98 <__sflush_r+0xd8>
   83af8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83afa:	075f      	lsls	r7, r3, #29
   83afc:	d505      	bpl.n	83b0a <__sflush_r+0x4a>
   83afe:	6869      	ldr	r1, [r5, #4]
   83b00:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83b02:	1a52      	subs	r2, r2, r1
   83b04:	b10b      	cbz	r3, 83b0a <__sflush_r+0x4a>
   83b06:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83b08:	1ad2      	subs	r2, r2, r3
   83b0a:	4640      	mov	r0, r8
   83b0c:	69e9      	ldr	r1, [r5, #28]
   83b0e:	2300      	movs	r3, #0
   83b10:	47a0      	blx	r4
   83b12:	1c44      	adds	r4, r0, #1
   83b14:	d04a      	beq.n	83bac <__sflush_r+0xec>
   83b16:	89ab      	ldrh	r3, [r5, #12]
   83b18:	692a      	ldr	r2, [r5, #16]
   83b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83b1e:	b29b      	uxth	r3, r3
   83b20:	2100      	movs	r1, #0
   83b22:	602a      	str	r2, [r5, #0]
   83b24:	04da      	lsls	r2, r3, #19
   83b26:	81ab      	strh	r3, [r5, #12]
   83b28:	6069      	str	r1, [r5, #4]
   83b2a:	d44c      	bmi.n	83bc6 <__sflush_r+0x106>
   83b2c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83b2e:	f8c8 6000 	str.w	r6, [r8]
   83b32:	b311      	cbz	r1, 83b7a <__sflush_r+0xba>
   83b34:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83b38:	4299      	cmp	r1, r3
   83b3a:	d002      	beq.n	83b42 <__sflush_r+0x82>
   83b3c:	4640      	mov	r0, r8
   83b3e:	f000 f9c3 	bl	83ec8 <_free_r>
   83b42:	2000      	movs	r0, #0
   83b44:	6328      	str	r0, [r5, #48]	; 0x30
   83b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b4a:	692e      	ldr	r6, [r5, #16]
   83b4c:	b1ae      	cbz	r6, 83b7a <__sflush_r+0xba>
   83b4e:	0791      	lsls	r1, r2, #30
   83b50:	682c      	ldr	r4, [r5, #0]
   83b52:	bf0c      	ite	eq
   83b54:	696b      	ldreq	r3, [r5, #20]
   83b56:	2300      	movne	r3, #0
   83b58:	602e      	str	r6, [r5, #0]
   83b5a:	1ba4      	subs	r4, r4, r6
   83b5c:	60ab      	str	r3, [r5, #8]
   83b5e:	e00a      	b.n	83b76 <__sflush_r+0xb6>
   83b60:	4632      	mov	r2, r6
   83b62:	4623      	mov	r3, r4
   83b64:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83b66:	4640      	mov	r0, r8
   83b68:	69e9      	ldr	r1, [r5, #28]
   83b6a:	47b8      	blx	r7
   83b6c:	2800      	cmp	r0, #0
   83b6e:	ebc0 0404 	rsb	r4, r0, r4
   83b72:	4406      	add	r6, r0
   83b74:	dd04      	ble.n	83b80 <__sflush_r+0xc0>
   83b76:	2c00      	cmp	r4, #0
   83b78:	dcf2      	bgt.n	83b60 <__sflush_r+0xa0>
   83b7a:	2000      	movs	r0, #0
   83b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b80:	89ab      	ldrh	r3, [r5, #12]
   83b82:	f04f 30ff 	mov.w	r0, #4294967295
   83b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83b8a:	81ab      	strh	r3, [r5, #12]
   83b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b90:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83b92:	2a00      	cmp	r2, #0
   83b94:	dca2      	bgt.n	83adc <__sflush_r+0x1c>
   83b96:	e7f0      	b.n	83b7a <__sflush_r+0xba>
   83b98:	2301      	movs	r3, #1
   83b9a:	4640      	mov	r0, r8
   83b9c:	69e9      	ldr	r1, [r5, #28]
   83b9e:	47a0      	blx	r4
   83ba0:	1c43      	adds	r3, r0, #1
   83ba2:	4602      	mov	r2, r0
   83ba4:	d01e      	beq.n	83be4 <__sflush_r+0x124>
   83ba6:	89ab      	ldrh	r3, [r5, #12]
   83ba8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83baa:	e7a6      	b.n	83afa <__sflush_r+0x3a>
   83bac:	f8d8 3000 	ldr.w	r3, [r8]
   83bb0:	b95b      	cbnz	r3, 83bca <__sflush_r+0x10a>
   83bb2:	89aa      	ldrh	r2, [r5, #12]
   83bb4:	6929      	ldr	r1, [r5, #16]
   83bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83bba:	b292      	uxth	r2, r2
   83bbc:	606b      	str	r3, [r5, #4]
   83bbe:	04d3      	lsls	r3, r2, #19
   83bc0:	81aa      	strh	r2, [r5, #12]
   83bc2:	6029      	str	r1, [r5, #0]
   83bc4:	d5b2      	bpl.n	83b2c <__sflush_r+0x6c>
   83bc6:	6528      	str	r0, [r5, #80]	; 0x50
   83bc8:	e7b0      	b.n	83b2c <__sflush_r+0x6c>
   83bca:	2b1d      	cmp	r3, #29
   83bcc:	d001      	beq.n	83bd2 <__sflush_r+0x112>
   83bce:	2b16      	cmp	r3, #22
   83bd0:	d113      	bne.n	83bfa <__sflush_r+0x13a>
   83bd2:	89a9      	ldrh	r1, [r5, #12]
   83bd4:	692b      	ldr	r3, [r5, #16]
   83bd6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   83bda:	2200      	movs	r2, #0
   83bdc:	81a9      	strh	r1, [r5, #12]
   83bde:	602b      	str	r3, [r5, #0]
   83be0:	606a      	str	r2, [r5, #4]
   83be2:	e7a3      	b.n	83b2c <__sflush_r+0x6c>
   83be4:	f8d8 3000 	ldr.w	r3, [r8]
   83be8:	2b00      	cmp	r3, #0
   83bea:	d0dc      	beq.n	83ba6 <__sflush_r+0xe6>
   83bec:	2b1d      	cmp	r3, #29
   83bee:	d001      	beq.n	83bf4 <__sflush_r+0x134>
   83bf0:	2b16      	cmp	r3, #22
   83bf2:	d1c5      	bne.n	83b80 <__sflush_r+0xc0>
   83bf4:	f8c8 6000 	str.w	r6, [r8]
   83bf8:	e7bf      	b.n	83b7a <__sflush_r+0xba>
   83bfa:	89ab      	ldrh	r3, [r5, #12]
   83bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83c00:	81ab      	strh	r3, [r5, #12]
   83c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c06:	bf00      	nop

00083c08 <_fflush_r>:
   83c08:	b510      	push	{r4, lr}
   83c0a:	4604      	mov	r4, r0
   83c0c:	b082      	sub	sp, #8
   83c0e:	b108      	cbz	r0, 83c14 <_fflush_r+0xc>
   83c10:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83c12:	b153      	cbz	r3, 83c2a <_fflush_r+0x22>
   83c14:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   83c18:	b908      	cbnz	r0, 83c1e <_fflush_r+0x16>
   83c1a:	b002      	add	sp, #8
   83c1c:	bd10      	pop	{r4, pc}
   83c1e:	4620      	mov	r0, r4
   83c20:	b002      	add	sp, #8
   83c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83c26:	f7ff bf4b 	b.w	83ac0 <__sflush_r>
   83c2a:	9101      	str	r1, [sp, #4]
   83c2c:	f000 f808 	bl	83c40 <__sinit>
   83c30:	9901      	ldr	r1, [sp, #4]
   83c32:	e7ef      	b.n	83c14 <_fflush_r+0xc>

00083c34 <_cleanup_r>:
   83c34:	4901      	ldr	r1, [pc, #4]	; (83c3c <_cleanup_r+0x8>)
   83c36:	f000 bb9f 	b.w	84378 <_fwalk>
   83c3a:	bf00      	nop
   83c3c:	00085341 	.word	0x00085341

00083c40 <__sinit>:
   83c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83c44:	6b84      	ldr	r4, [r0, #56]	; 0x38
   83c46:	b083      	sub	sp, #12
   83c48:	4607      	mov	r7, r0
   83c4a:	2c00      	cmp	r4, #0
   83c4c:	d165      	bne.n	83d1a <__sinit+0xda>
   83c4e:	687d      	ldr	r5, [r7, #4]
   83c50:	4833      	ldr	r0, [pc, #204]	; (83d20 <__sinit+0xe0>)
   83c52:	2304      	movs	r3, #4
   83c54:	2103      	movs	r1, #3
   83c56:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   83c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
   83c5c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   83c60:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   83c64:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   83c68:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83c6c:	81ab      	strh	r3, [r5, #12]
   83c6e:	602c      	str	r4, [r5, #0]
   83c70:	606c      	str	r4, [r5, #4]
   83c72:	60ac      	str	r4, [r5, #8]
   83c74:	666c      	str	r4, [r5, #100]	; 0x64
   83c76:	81ec      	strh	r4, [r5, #14]
   83c78:	612c      	str	r4, [r5, #16]
   83c7a:	616c      	str	r4, [r5, #20]
   83c7c:	61ac      	str	r4, [r5, #24]
   83c7e:	4621      	mov	r1, r4
   83c80:	2208      	movs	r2, #8
   83c82:	f7fe ff05 	bl	82a90 <memset>
   83c86:	f8df b09c 	ldr.w	fp, [pc, #156]	; 83d24 <__sinit+0xe4>
   83c8a:	68be      	ldr	r6, [r7, #8]
   83c8c:	f8df a098 	ldr.w	sl, [pc, #152]	; 83d28 <__sinit+0xe8>
   83c90:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83d2c <__sinit+0xec>
   83c94:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83d30 <__sinit+0xf0>
   83c98:	2301      	movs	r3, #1
   83c9a:	2209      	movs	r2, #9
   83c9c:	61ed      	str	r5, [r5, #28]
   83c9e:	f8c5 b020 	str.w	fp, [r5, #32]
   83ca2:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83ca6:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83caa:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83cae:	4621      	mov	r1, r4
   83cb0:	81f3      	strh	r3, [r6, #14]
   83cb2:	81b2      	strh	r2, [r6, #12]
   83cb4:	6034      	str	r4, [r6, #0]
   83cb6:	6074      	str	r4, [r6, #4]
   83cb8:	60b4      	str	r4, [r6, #8]
   83cba:	6674      	str	r4, [r6, #100]	; 0x64
   83cbc:	6134      	str	r4, [r6, #16]
   83cbe:	6174      	str	r4, [r6, #20]
   83cc0:	61b4      	str	r4, [r6, #24]
   83cc2:	2208      	movs	r2, #8
   83cc4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   83cc8:	9301      	str	r3, [sp, #4]
   83cca:	f7fe fee1 	bl	82a90 <memset>
   83cce:	68fd      	ldr	r5, [r7, #12]
   83cd0:	2012      	movs	r0, #18
   83cd2:	2202      	movs	r2, #2
   83cd4:	61f6      	str	r6, [r6, #28]
   83cd6:	f8c6 b020 	str.w	fp, [r6, #32]
   83cda:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   83cde:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   83ce2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   83ce6:	4621      	mov	r1, r4
   83ce8:	81a8      	strh	r0, [r5, #12]
   83cea:	81ea      	strh	r2, [r5, #14]
   83cec:	602c      	str	r4, [r5, #0]
   83cee:	606c      	str	r4, [r5, #4]
   83cf0:	60ac      	str	r4, [r5, #8]
   83cf2:	666c      	str	r4, [r5, #100]	; 0x64
   83cf4:	612c      	str	r4, [r5, #16]
   83cf6:	616c      	str	r4, [r5, #20]
   83cf8:	61ac      	str	r4, [r5, #24]
   83cfa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83cfe:	2208      	movs	r2, #8
   83d00:	f7fe fec6 	bl	82a90 <memset>
   83d04:	9b01      	ldr	r3, [sp, #4]
   83d06:	61ed      	str	r5, [r5, #28]
   83d08:	f8c5 b020 	str.w	fp, [r5, #32]
   83d0c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83d10:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83d14:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83d18:	63bb      	str	r3, [r7, #56]	; 0x38
   83d1a:	b003      	add	sp, #12
   83d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d20:	00083c35 	.word	0x00083c35
   83d24:	00085035 	.word	0x00085035
   83d28:	00085059 	.word	0x00085059
   83d2c:	00085091 	.word	0x00085091
   83d30:	000850b1 	.word	0x000850b1

00083d34 <__sfp_lock_acquire>:
   83d34:	4770      	bx	lr
   83d36:	bf00      	nop

00083d38 <__sfp_lock_release>:
   83d38:	4770      	bx	lr
   83d3a:	bf00      	nop

00083d3c <__libc_fini_array>:
   83d3c:	b538      	push	{r3, r4, r5, lr}
   83d3e:	4d09      	ldr	r5, [pc, #36]	; (83d64 <__libc_fini_array+0x28>)
   83d40:	4c09      	ldr	r4, [pc, #36]	; (83d68 <__libc_fini_array+0x2c>)
   83d42:	1b64      	subs	r4, r4, r5
   83d44:	10a4      	asrs	r4, r4, #2
   83d46:	bf18      	it	ne
   83d48:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83d4c:	d005      	beq.n	83d5a <__libc_fini_array+0x1e>
   83d4e:	3c01      	subs	r4, #1
   83d50:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83d54:	4798      	blx	r3
   83d56:	2c00      	cmp	r4, #0
   83d58:	d1f9      	bne.n	83d4e <__libc_fini_array+0x12>
   83d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83d5e:	f001 bea9 	b.w	85ab4 <_fini>
   83d62:	bf00      	nop
   83d64:	00085ac0 	.word	0x00085ac0
   83d68:	00085ac4 	.word	0x00085ac4

00083d6c <_fputwc_r>:
   83d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83d70:	8993      	ldrh	r3, [r2, #12]
   83d72:	460f      	mov	r7, r1
   83d74:	0499      	lsls	r1, r3, #18
   83d76:	b082      	sub	sp, #8
   83d78:	4614      	mov	r4, r2
   83d7a:	4680      	mov	r8, r0
   83d7c:	d406      	bmi.n	83d8c <_fputwc_r+0x20>
   83d7e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   83d80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83d88:	81a3      	strh	r3, [r4, #12]
   83d8a:	6662      	str	r2, [r4, #100]	; 0x64
   83d8c:	f000 fb1c 	bl	843c8 <__locale_mb_cur_max>
   83d90:	2801      	cmp	r0, #1
   83d92:	d03e      	beq.n	83e12 <_fputwc_r+0xa6>
   83d94:	463a      	mov	r2, r7
   83d96:	4640      	mov	r0, r8
   83d98:	a901      	add	r1, sp, #4
   83d9a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83d9e:	f001 f9df 	bl	85160 <_wcrtomb_r>
   83da2:	1c42      	adds	r2, r0, #1
   83da4:	4606      	mov	r6, r0
   83da6:	d02d      	beq.n	83e04 <_fputwc_r+0x98>
   83da8:	2800      	cmp	r0, #0
   83daa:	d03a      	beq.n	83e22 <_fputwc_r+0xb6>
   83dac:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83db0:	2500      	movs	r5, #0
   83db2:	e009      	b.n	83dc8 <_fputwc_r+0x5c>
   83db4:	6823      	ldr	r3, [r4, #0]
   83db6:	7019      	strb	r1, [r3, #0]
   83db8:	6823      	ldr	r3, [r4, #0]
   83dba:	3301      	adds	r3, #1
   83dbc:	6023      	str	r3, [r4, #0]
   83dbe:	3501      	adds	r5, #1
   83dc0:	42b5      	cmp	r5, r6
   83dc2:	d22e      	bcs.n	83e22 <_fputwc_r+0xb6>
   83dc4:	ab01      	add	r3, sp, #4
   83dc6:	5ce9      	ldrb	r1, [r5, r3]
   83dc8:	68a3      	ldr	r3, [r4, #8]
   83dca:	3b01      	subs	r3, #1
   83dcc:	2b00      	cmp	r3, #0
   83dce:	60a3      	str	r3, [r4, #8]
   83dd0:	daf0      	bge.n	83db4 <_fputwc_r+0x48>
   83dd2:	69a2      	ldr	r2, [r4, #24]
   83dd4:	4293      	cmp	r3, r2
   83dd6:	db06      	blt.n	83de6 <_fputwc_r+0x7a>
   83dd8:	6823      	ldr	r3, [r4, #0]
   83dda:	7019      	strb	r1, [r3, #0]
   83ddc:	6823      	ldr	r3, [r4, #0]
   83dde:	7819      	ldrb	r1, [r3, #0]
   83de0:	3301      	adds	r3, #1
   83de2:	290a      	cmp	r1, #10
   83de4:	d1ea      	bne.n	83dbc <_fputwc_r+0x50>
   83de6:	4640      	mov	r0, r8
   83de8:	4622      	mov	r2, r4
   83dea:	f001 f965 	bl	850b8 <__swbuf_r>
   83dee:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   83df2:	4258      	negs	r0, r3
   83df4:	4158      	adcs	r0, r3
   83df6:	2800      	cmp	r0, #0
   83df8:	d0e1      	beq.n	83dbe <_fputwc_r+0x52>
   83dfa:	f04f 30ff 	mov.w	r0, #4294967295
   83dfe:	b002      	add	sp, #8
   83e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e04:	89a3      	ldrh	r3, [r4, #12]
   83e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83e0a:	81a3      	strh	r3, [r4, #12]
   83e0c:	b002      	add	sp, #8
   83e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e12:	1e7b      	subs	r3, r7, #1
   83e14:	2bfe      	cmp	r3, #254	; 0xfe
   83e16:	d8bd      	bhi.n	83d94 <_fputwc_r+0x28>
   83e18:	b2f9      	uxtb	r1, r7
   83e1a:	4606      	mov	r6, r0
   83e1c:	f88d 1004 	strb.w	r1, [sp, #4]
   83e20:	e7c6      	b.n	83db0 <_fputwc_r+0x44>
   83e22:	4638      	mov	r0, r7
   83e24:	b002      	add	sp, #8
   83e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e2a:	bf00      	nop

00083e2c <_malloc_trim_r>:
   83e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83e2e:	4d23      	ldr	r5, [pc, #140]	; (83ebc <_malloc_trim_r+0x90>)
   83e30:	460f      	mov	r7, r1
   83e32:	4604      	mov	r4, r0
   83e34:	f000 ff08 	bl	84c48 <__malloc_lock>
   83e38:	68ab      	ldr	r3, [r5, #8]
   83e3a:	685e      	ldr	r6, [r3, #4]
   83e3c:	f026 0603 	bic.w	r6, r6, #3
   83e40:	1bf1      	subs	r1, r6, r7
   83e42:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   83e46:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83e4a:	f021 010f 	bic.w	r1, r1, #15
   83e4e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   83e52:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   83e56:	db07      	blt.n	83e68 <_malloc_trim_r+0x3c>
   83e58:	4620      	mov	r0, r4
   83e5a:	2100      	movs	r1, #0
   83e5c:	f001 f8d8 	bl	85010 <_sbrk_r>
   83e60:	68ab      	ldr	r3, [r5, #8]
   83e62:	4433      	add	r3, r6
   83e64:	4298      	cmp	r0, r3
   83e66:	d004      	beq.n	83e72 <_malloc_trim_r+0x46>
   83e68:	4620      	mov	r0, r4
   83e6a:	f000 feef 	bl	84c4c <__malloc_unlock>
   83e6e:	2000      	movs	r0, #0
   83e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83e72:	4620      	mov	r0, r4
   83e74:	4279      	negs	r1, r7
   83e76:	f001 f8cb 	bl	85010 <_sbrk_r>
   83e7a:	3001      	adds	r0, #1
   83e7c:	d00d      	beq.n	83e9a <_malloc_trim_r+0x6e>
   83e7e:	4b10      	ldr	r3, [pc, #64]	; (83ec0 <_malloc_trim_r+0x94>)
   83e80:	68aa      	ldr	r2, [r5, #8]
   83e82:	6819      	ldr	r1, [r3, #0]
   83e84:	1bf6      	subs	r6, r6, r7
   83e86:	f046 0601 	orr.w	r6, r6, #1
   83e8a:	4620      	mov	r0, r4
   83e8c:	1bc9      	subs	r1, r1, r7
   83e8e:	6056      	str	r6, [r2, #4]
   83e90:	6019      	str	r1, [r3, #0]
   83e92:	f000 fedb 	bl	84c4c <__malloc_unlock>
   83e96:	2001      	movs	r0, #1
   83e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83e9a:	4620      	mov	r0, r4
   83e9c:	2100      	movs	r1, #0
   83e9e:	f001 f8b7 	bl	85010 <_sbrk_r>
   83ea2:	68ab      	ldr	r3, [r5, #8]
   83ea4:	1ac2      	subs	r2, r0, r3
   83ea6:	2a0f      	cmp	r2, #15
   83ea8:	ddde      	ble.n	83e68 <_malloc_trim_r+0x3c>
   83eaa:	4d06      	ldr	r5, [pc, #24]	; (83ec4 <_malloc_trim_r+0x98>)
   83eac:	4904      	ldr	r1, [pc, #16]	; (83ec0 <_malloc_trim_r+0x94>)
   83eae:	682d      	ldr	r5, [r5, #0]
   83eb0:	f042 0201 	orr.w	r2, r2, #1
   83eb4:	1b40      	subs	r0, r0, r5
   83eb6:	605a      	str	r2, [r3, #4]
   83eb8:	6008      	str	r0, [r1, #0]
   83eba:	e7d5      	b.n	83e68 <_malloc_trim_r+0x3c>
   83ebc:	20070598 	.word	0x20070598
   83ec0:	20070af0 	.word	0x20070af0
   83ec4:	200709a4 	.word	0x200709a4

00083ec8 <_free_r>:
   83ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ecc:	460d      	mov	r5, r1
   83ece:	4606      	mov	r6, r0
   83ed0:	2900      	cmp	r1, #0
   83ed2:	d055      	beq.n	83f80 <_free_r+0xb8>
   83ed4:	f000 feb8 	bl	84c48 <__malloc_lock>
   83ed8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83edc:	f8df c170 	ldr.w	ip, [pc, #368]	; 84050 <_free_r+0x188>
   83ee0:	f1a5 0408 	sub.w	r4, r5, #8
   83ee4:	f021 0301 	bic.w	r3, r1, #1
   83ee8:	18e2      	adds	r2, r4, r3
   83eea:	f8dc 0008 	ldr.w	r0, [ip, #8]
   83eee:	6857      	ldr	r7, [r2, #4]
   83ef0:	4290      	cmp	r0, r2
   83ef2:	f027 0703 	bic.w	r7, r7, #3
   83ef6:	d068      	beq.n	83fca <_free_r+0x102>
   83ef8:	f011 0101 	ands.w	r1, r1, #1
   83efc:	6057      	str	r7, [r2, #4]
   83efe:	d032      	beq.n	83f66 <_free_r+0x9e>
   83f00:	2100      	movs	r1, #0
   83f02:	19d0      	adds	r0, r2, r7
   83f04:	6840      	ldr	r0, [r0, #4]
   83f06:	07c0      	lsls	r0, r0, #31
   83f08:	d406      	bmi.n	83f18 <_free_r+0x50>
   83f0a:	443b      	add	r3, r7
   83f0c:	6890      	ldr	r0, [r2, #8]
   83f0e:	2900      	cmp	r1, #0
   83f10:	d04d      	beq.n	83fae <_free_r+0xe6>
   83f12:	68d2      	ldr	r2, [r2, #12]
   83f14:	60c2      	str	r2, [r0, #12]
   83f16:	6090      	str	r0, [r2, #8]
   83f18:	f043 0201 	orr.w	r2, r3, #1
   83f1c:	6062      	str	r2, [r4, #4]
   83f1e:	50e3      	str	r3, [r4, r3]
   83f20:	b9e1      	cbnz	r1, 83f5c <_free_r+0x94>
   83f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83f26:	d32d      	bcc.n	83f84 <_free_r+0xbc>
   83f28:	0a5a      	lsrs	r2, r3, #9
   83f2a:	2a04      	cmp	r2, #4
   83f2c:	d869      	bhi.n	84002 <_free_r+0x13a>
   83f2e:	0998      	lsrs	r0, r3, #6
   83f30:	3038      	adds	r0, #56	; 0x38
   83f32:	0041      	lsls	r1, r0, #1
   83f34:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   83f38:	f8dc 2008 	ldr.w	r2, [ip, #8]
   83f3c:	4944      	ldr	r1, [pc, #272]	; (84050 <_free_r+0x188>)
   83f3e:	4562      	cmp	r2, ip
   83f40:	d065      	beq.n	8400e <_free_r+0x146>
   83f42:	6851      	ldr	r1, [r2, #4]
   83f44:	f021 0103 	bic.w	r1, r1, #3
   83f48:	428b      	cmp	r3, r1
   83f4a:	d202      	bcs.n	83f52 <_free_r+0x8a>
   83f4c:	6892      	ldr	r2, [r2, #8]
   83f4e:	4594      	cmp	ip, r2
   83f50:	d1f7      	bne.n	83f42 <_free_r+0x7a>
   83f52:	68d3      	ldr	r3, [r2, #12]
   83f54:	60e3      	str	r3, [r4, #12]
   83f56:	60a2      	str	r2, [r4, #8]
   83f58:	609c      	str	r4, [r3, #8]
   83f5a:	60d4      	str	r4, [r2, #12]
   83f5c:	4630      	mov	r0, r6
   83f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83f62:	f000 be73 	b.w	84c4c <__malloc_unlock>
   83f66:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83f6a:	f10c 0808 	add.w	r8, ip, #8
   83f6e:	1b64      	subs	r4, r4, r5
   83f70:	68a0      	ldr	r0, [r4, #8]
   83f72:	442b      	add	r3, r5
   83f74:	4540      	cmp	r0, r8
   83f76:	d042      	beq.n	83ffe <_free_r+0x136>
   83f78:	68e5      	ldr	r5, [r4, #12]
   83f7a:	60c5      	str	r5, [r0, #12]
   83f7c:	60a8      	str	r0, [r5, #8]
   83f7e:	e7c0      	b.n	83f02 <_free_r+0x3a>
   83f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f84:	08db      	lsrs	r3, r3, #3
   83f86:	109a      	asrs	r2, r3, #2
   83f88:	2001      	movs	r0, #1
   83f8a:	4090      	lsls	r0, r2
   83f8c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   83f90:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   83f94:	689a      	ldr	r2, [r3, #8]
   83f96:	4301      	orrs	r1, r0
   83f98:	60a2      	str	r2, [r4, #8]
   83f9a:	60e3      	str	r3, [r4, #12]
   83f9c:	f8cc 1004 	str.w	r1, [ip, #4]
   83fa0:	4630      	mov	r0, r6
   83fa2:	609c      	str	r4, [r3, #8]
   83fa4:	60d4      	str	r4, [r2, #12]
   83fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83faa:	f000 be4f 	b.w	84c4c <__malloc_unlock>
   83fae:	4d29      	ldr	r5, [pc, #164]	; (84054 <_free_r+0x18c>)
   83fb0:	42a8      	cmp	r0, r5
   83fb2:	d1ae      	bne.n	83f12 <_free_r+0x4a>
   83fb4:	f043 0201 	orr.w	r2, r3, #1
   83fb8:	f8cc 4014 	str.w	r4, [ip, #20]
   83fbc:	f8cc 4010 	str.w	r4, [ip, #16]
   83fc0:	60e0      	str	r0, [r4, #12]
   83fc2:	60a0      	str	r0, [r4, #8]
   83fc4:	6062      	str	r2, [r4, #4]
   83fc6:	50e3      	str	r3, [r4, r3]
   83fc8:	e7c8      	b.n	83f5c <_free_r+0x94>
   83fca:	441f      	add	r7, r3
   83fcc:	07cb      	lsls	r3, r1, #31
   83fce:	d407      	bmi.n	83fe0 <_free_r+0x118>
   83fd0:	f855 1c08 	ldr.w	r1, [r5, #-8]
   83fd4:	1a64      	subs	r4, r4, r1
   83fd6:	68e3      	ldr	r3, [r4, #12]
   83fd8:	68a2      	ldr	r2, [r4, #8]
   83fda:	440f      	add	r7, r1
   83fdc:	60d3      	str	r3, [r2, #12]
   83fde:	609a      	str	r2, [r3, #8]
   83fe0:	4b1d      	ldr	r3, [pc, #116]	; (84058 <_free_r+0x190>)
   83fe2:	f047 0201 	orr.w	r2, r7, #1
   83fe6:	681b      	ldr	r3, [r3, #0]
   83fe8:	6062      	str	r2, [r4, #4]
   83fea:	429f      	cmp	r7, r3
   83fec:	f8cc 4008 	str.w	r4, [ip, #8]
   83ff0:	d3b4      	bcc.n	83f5c <_free_r+0x94>
   83ff2:	4b1a      	ldr	r3, [pc, #104]	; (8405c <_free_r+0x194>)
   83ff4:	4630      	mov	r0, r6
   83ff6:	6819      	ldr	r1, [r3, #0]
   83ff8:	f7ff ff18 	bl	83e2c <_malloc_trim_r>
   83ffc:	e7ae      	b.n	83f5c <_free_r+0x94>
   83ffe:	2101      	movs	r1, #1
   84000:	e77f      	b.n	83f02 <_free_r+0x3a>
   84002:	2a14      	cmp	r2, #20
   84004:	d80b      	bhi.n	8401e <_free_r+0x156>
   84006:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8400a:	0041      	lsls	r1, r0, #1
   8400c:	e792      	b.n	83f34 <_free_r+0x6c>
   8400e:	1080      	asrs	r0, r0, #2
   84010:	2501      	movs	r5, #1
   84012:	4085      	lsls	r5, r0
   84014:	6848      	ldr	r0, [r1, #4]
   84016:	4613      	mov	r3, r2
   84018:	4328      	orrs	r0, r5
   8401a:	6048      	str	r0, [r1, #4]
   8401c:	e79a      	b.n	83f54 <_free_r+0x8c>
   8401e:	2a54      	cmp	r2, #84	; 0x54
   84020:	d803      	bhi.n	8402a <_free_r+0x162>
   84022:	0b18      	lsrs	r0, r3, #12
   84024:	306e      	adds	r0, #110	; 0x6e
   84026:	0041      	lsls	r1, r0, #1
   84028:	e784      	b.n	83f34 <_free_r+0x6c>
   8402a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8402e:	d803      	bhi.n	84038 <_free_r+0x170>
   84030:	0bd8      	lsrs	r0, r3, #15
   84032:	3077      	adds	r0, #119	; 0x77
   84034:	0041      	lsls	r1, r0, #1
   84036:	e77d      	b.n	83f34 <_free_r+0x6c>
   84038:	f240 5154 	movw	r1, #1364	; 0x554
   8403c:	428a      	cmp	r2, r1
   8403e:	d803      	bhi.n	84048 <_free_r+0x180>
   84040:	0c98      	lsrs	r0, r3, #18
   84042:	307c      	adds	r0, #124	; 0x7c
   84044:	0041      	lsls	r1, r0, #1
   84046:	e775      	b.n	83f34 <_free_r+0x6c>
   84048:	21fc      	movs	r1, #252	; 0xfc
   8404a:	207e      	movs	r0, #126	; 0x7e
   8404c:	e772      	b.n	83f34 <_free_r+0x6c>
   8404e:	bf00      	nop
   84050:	20070598 	.word	0x20070598
   84054:	200705a0 	.word	0x200705a0
   84058:	200709a0 	.word	0x200709a0
   8405c:	20070aec 	.word	0x20070aec

00084060 <__sfvwrite_r>:
   84060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84064:	6893      	ldr	r3, [r2, #8]
   84066:	b083      	sub	sp, #12
   84068:	4616      	mov	r6, r2
   8406a:	4681      	mov	r9, r0
   8406c:	460c      	mov	r4, r1
   8406e:	b32b      	cbz	r3, 840bc <__sfvwrite_r+0x5c>
   84070:	898b      	ldrh	r3, [r1, #12]
   84072:	0719      	lsls	r1, r3, #28
   84074:	d526      	bpl.n	840c4 <__sfvwrite_r+0x64>
   84076:	6922      	ldr	r2, [r4, #16]
   84078:	b322      	cbz	r2, 840c4 <__sfvwrite_r+0x64>
   8407a:	f003 0202 	and.w	r2, r3, #2
   8407e:	b292      	uxth	r2, r2
   84080:	6835      	ldr	r5, [r6, #0]
   84082:	2a00      	cmp	r2, #0
   84084:	d02c      	beq.n	840e0 <__sfvwrite_r+0x80>
   84086:	f04f 0a00 	mov.w	sl, #0
   8408a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 84374 <__sfvwrite_r+0x314>
   8408e:	46d0      	mov	r8, sl
   84090:	45d8      	cmp	r8, fp
   84092:	bf34      	ite	cc
   84094:	4643      	movcc	r3, r8
   84096:	465b      	movcs	r3, fp
   84098:	4652      	mov	r2, sl
   8409a:	4648      	mov	r0, r9
   8409c:	f1b8 0f00 	cmp.w	r8, #0
   840a0:	d04f      	beq.n	84142 <__sfvwrite_r+0xe2>
   840a2:	69e1      	ldr	r1, [r4, #28]
   840a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   840a6:	47b8      	blx	r7
   840a8:	2800      	cmp	r0, #0
   840aa:	dd56      	ble.n	8415a <__sfvwrite_r+0xfa>
   840ac:	68b3      	ldr	r3, [r6, #8]
   840ae:	4482      	add	sl, r0
   840b0:	1a1b      	subs	r3, r3, r0
   840b2:	ebc0 0808 	rsb	r8, r0, r8
   840b6:	60b3      	str	r3, [r6, #8]
   840b8:	2b00      	cmp	r3, #0
   840ba:	d1e9      	bne.n	84090 <__sfvwrite_r+0x30>
   840bc:	2000      	movs	r0, #0
   840be:	b003      	add	sp, #12
   840c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   840c4:	4648      	mov	r0, r9
   840c6:	4621      	mov	r1, r4
   840c8:	f7ff fc88 	bl	839dc <__swsetup_r>
   840cc:	2800      	cmp	r0, #0
   840ce:	f040 8148 	bne.w	84362 <__sfvwrite_r+0x302>
   840d2:	89a3      	ldrh	r3, [r4, #12]
   840d4:	6835      	ldr	r5, [r6, #0]
   840d6:	f003 0202 	and.w	r2, r3, #2
   840da:	b292      	uxth	r2, r2
   840dc:	2a00      	cmp	r2, #0
   840de:	d1d2      	bne.n	84086 <__sfvwrite_r+0x26>
   840e0:	f013 0a01 	ands.w	sl, r3, #1
   840e4:	d142      	bne.n	8416c <__sfvwrite_r+0x10c>
   840e6:	46d0      	mov	r8, sl
   840e8:	f1b8 0f00 	cmp.w	r8, #0
   840ec:	d023      	beq.n	84136 <__sfvwrite_r+0xd6>
   840ee:	059a      	lsls	r2, r3, #22
   840f0:	68a7      	ldr	r7, [r4, #8]
   840f2:	d576      	bpl.n	841e2 <__sfvwrite_r+0x182>
   840f4:	45b8      	cmp	r8, r7
   840f6:	f0c0 80a4 	bcc.w	84242 <__sfvwrite_r+0x1e2>
   840fa:	f413 6f90 	tst.w	r3, #1152	; 0x480
   840fe:	f040 80b2 	bne.w	84266 <__sfvwrite_r+0x206>
   84102:	6820      	ldr	r0, [r4, #0]
   84104:	46bb      	mov	fp, r7
   84106:	4651      	mov	r1, sl
   84108:	465a      	mov	r2, fp
   8410a:	f000 fd37 	bl	84b7c <memmove>
   8410e:	68a2      	ldr	r2, [r4, #8]
   84110:	6821      	ldr	r1, [r4, #0]
   84112:	1bd2      	subs	r2, r2, r7
   84114:	eb01 030b 	add.w	r3, r1, fp
   84118:	60a2      	str	r2, [r4, #8]
   8411a:	6023      	str	r3, [r4, #0]
   8411c:	4642      	mov	r2, r8
   8411e:	68b3      	ldr	r3, [r6, #8]
   84120:	4492      	add	sl, r2
   84122:	1a9b      	subs	r3, r3, r2
   84124:	ebc2 0808 	rsb	r8, r2, r8
   84128:	60b3      	str	r3, [r6, #8]
   8412a:	2b00      	cmp	r3, #0
   8412c:	d0c6      	beq.n	840bc <__sfvwrite_r+0x5c>
   8412e:	89a3      	ldrh	r3, [r4, #12]
   84130:	f1b8 0f00 	cmp.w	r8, #0
   84134:	d1db      	bne.n	840ee <__sfvwrite_r+0x8e>
   84136:	f8d5 a000 	ldr.w	sl, [r5]
   8413a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8413e:	3508      	adds	r5, #8
   84140:	e7d2      	b.n	840e8 <__sfvwrite_r+0x88>
   84142:	f8d5 a000 	ldr.w	sl, [r5]
   84146:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8414a:	3508      	adds	r5, #8
   8414c:	e7a0      	b.n	84090 <__sfvwrite_r+0x30>
   8414e:	4648      	mov	r0, r9
   84150:	4621      	mov	r1, r4
   84152:	f7ff fd59 	bl	83c08 <_fflush_r>
   84156:	2800      	cmp	r0, #0
   84158:	d059      	beq.n	8420e <__sfvwrite_r+0x1ae>
   8415a:	89a3      	ldrh	r3, [r4, #12]
   8415c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84160:	f04f 30ff 	mov.w	r0, #4294967295
   84164:	81a3      	strh	r3, [r4, #12]
   84166:	b003      	add	sp, #12
   84168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8416c:	4692      	mov	sl, r2
   8416e:	9201      	str	r2, [sp, #4]
   84170:	4693      	mov	fp, r2
   84172:	4690      	mov	r8, r2
   84174:	f1b8 0f00 	cmp.w	r8, #0
   84178:	d02b      	beq.n	841d2 <__sfvwrite_r+0x172>
   8417a:	9f01      	ldr	r7, [sp, #4]
   8417c:	2f00      	cmp	r7, #0
   8417e:	d064      	beq.n	8424a <__sfvwrite_r+0x1ea>
   84180:	6820      	ldr	r0, [r4, #0]
   84182:	6921      	ldr	r1, [r4, #16]
   84184:	45c2      	cmp	sl, r8
   84186:	bf34      	ite	cc
   84188:	4653      	movcc	r3, sl
   8418a:	4643      	movcs	r3, r8
   8418c:	4288      	cmp	r0, r1
   8418e:	461f      	mov	r7, r3
   84190:	f8d4 c008 	ldr.w	ip, [r4, #8]
   84194:	6962      	ldr	r2, [r4, #20]
   84196:	d903      	bls.n	841a0 <__sfvwrite_r+0x140>
   84198:	4494      	add	ip, r2
   8419a:	4563      	cmp	r3, ip
   8419c:	f300 80ae 	bgt.w	842fc <__sfvwrite_r+0x29c>
   841a0:	4293      	cmp	r3, r2
   841a2:	db36      	blt.n	84212 <__sfvwrite_r+0x1b2>
   841a4:	4613      	mov	r3, r2
   841a6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   841a8:	4648      	mov	r0, r9
   841aa:	69e1      	ldr	r1, [r4, #28]
   841ac:	465a      	mov	r2, fp
   841ae:	47b8      	blx	r7
   841b0:	1e07      	subs	r7, r0, #0
   841b2:	ddd2      	ble.n	8415a <__sfvwrite_r+0xfa>
   841b4:	ebba 0a07 	subs.w	sl, sl, r7
   841b8:	d03a      	beq.n	84230 <__sfvwrite_r+0x1d0>
   841ba:	68b3      	ldr	r3, [r6, #8]
   841bc:	44bb      	add	fp, r7
   841be:	1bdb      	subs	r3, r3, r7
   841c0:	ebc7 0808 	rsb	r8, r7, r8
   841c4:	60b3      	str	r3, [r6, #8]
   841c6:	2b00      	cmp	r3, #0
   841c8:	f43f af78 	beq.w	840bc <__sfvwrite_r+0x5c>
   841cc:	f1b8 0f00 	cmp.w	r8, #0
   841d0:	d1d3      	bne.n	8417a <__sfvwrite_r+0x11a>
   841d2:	2700      	movs	r7, #0
   841d4:	f8d5 b000 	ldr.w	fp, [r5]
   841d8:	f8d5 8004 	ldr.w	r8, [r5, #4]
   841dc:	9701      	str	r7, [sp, #4]
   841de:	3508      	adds	r5, #8
   841e0:	e7c8      	b.n	84174 <__sfvwrite_r+0x114>
   841e2:	6820      	ldr	r0, [r4, #0]
   841e4:	6923      	ldr	r3, [r4, #16]
   841e6:	4298      	cmp	r0, r3
   841e8:	d802      	bhi.n	841f0 <__sfvwrite_r+0x190>
   841ea:	6963      	ldr	r3, [r4, #20]
   841ec:	4598      	cmp	r8, r3
   841ee:	d272      	bcs.n	842d6 <__sfvwrite_r+0x276>
   841f0:	45b8      	cmp	r8, r7
   841f2:	bf38      	it	cc
   841f4:	4647      	movcc	r7, r8
   841f6:	463a      	mov	r2, r7
   841f8:	4651      	mov	r1, sl
   841fa:	f000 fcbf 	bl	84b7c <memmove>
   841fe:	68a3      	ldr	r3, [r4, #8]
   84200:	6822      	ldr	r2, [r4, #0]
   84202:	1bdb      	subs	r3, r3, r7
   84204:	443a      	add	r2, r7
   84206:	60a3      	str	r3, [r4, #8]
   84208:	6022      	str	r2, [r4, #0]
   8420a:	2b00      	cmp	r3, #0
   8420c:	d09f      	beq.n	8414e <__sfvwrite_r+0xee>
   8420e:	463a      	mov	r2, r7
   84210:	e785      	b.n	8411e <__sfvwrite_r+0xbe>
   84212:	461a      	mov	r2, r3
   84214:	4659      	mov	r1, fp
   84216:	9300      	str	r3, [sp, #0]
   84218:	f000 fcb0 	bl	84b7c <memmove>
   8421c:	9b00      	ldr	r3, [sp, #0]
   8421e:	68a1      	ldr	r1, [r4, #8]
   84220:	6822      	ldr	r2, [r4, #0]
   84222:	1ac9      	subs	r1, r1, r3
   84224:	ebba 0a07 	subs.w	sl, sl, r7
   84228:	4413      	add	r3, r2
   8422a:	60a1      	str	r1, [r4, #8]
   8422c:	6023      	str	r3, [r4, #0]
   8422e:	d1c4      	bne.n	841ba <__sfvwrite_r+0x15a>
   84230:	4648      	mov	r0, r9
   84232:	4621      	mov	r1, r4
   84234:	f7ff fce8 	bl	83c08 <_fflush_r>
   84238:	2800      	cmp	r0, #0
   8423a:	d18e      	bne.n	8415a <__sfvwrite_r+0xfa>
   8423c:	f8cd a004 	str.w	sl, [sp, #4]
   84240:	e7bb      	b.n	841ba <__sfvwrite_r+0x15a>
   84242:	6820      	ldr	r0, [r4, #0]
   84244:	4647      	mov	r7, r8
   84246:	46c3      	mov	fp, r8
   84248:	e75d      	b.n	84106 <__sfvwrite_r+0xa6>
   8424a:	4658      	mov	r0, fp
   8424c:	210a      	movs	r1, #10
   8424e:	4642      	mov	r2, r8
   84250:	f000 fbd4 	bl	849fc <memchr>
   84254:	2800      	cmp	r0, #0
   84256:	d07f      	beq.n	84358 <__sfvwrite_r+0x2f8>
   84258:	f100 0a01 	add.w	sl, r0, #1
   8425c:	2701      	movs	r7, #1
   8425e:	ebcb 0a0a 	rsb	sl, fp, sl
   84262:	9701      	str	r7, [sp, #4]
   84264:	e78c      	b.n	84180 <__sfvwrite_r+0x120>
   84266:	6822      	ldr	r2, [r4, #0]
   84268:	6921      	ldr	r1, [r4, #16]
   8426a:	6967      	ldr	r7, [r4, #20]
   8426c:	ebc1 0c02 	rsb	ip, r1, r2
   84270:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   84274:	f10c 0201 	add.w	r2, ip, #1
   84278:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8427c:	4442      	add	r2, r8
   8427e:	107f      	asrs	r7, r7, #1
   84280:	4297      	cmp	r7, r2
   84282:	bf34      	ite	cc
   84284:	4617      	movcc	r7, r2
   84286:	463a      	movcs	r2, r7
   84288:	055b      	lsls	r3, r3, #21
   8428a:	d54f      	bpl.n	8432c <__sfvwrite_r+0x2cc>
   8428c:	4611      	mov	r1, r2
   8428e:	4648      	mov	r0, r9
   84290:	f8cd c000 	str.w	ip, [sp]
   84294:	f000 f916 	bl	844c4 <_malloc_r>
   84298:	f8dd c000 	ldr.w	ip, [sp]
   8429c:	4683      	mov	fp, r0
   8429e:	2800      	cmp	r0, #0
   842a0:	d062      	beq.n	84368 <__sfvwrite_r+0x308>
   842a2:	4662      	mov	r2, ip
   842a4:	6921      	ldr	r1, [r4, #16]
   842a6:	f8cd c000 	str.w	ip, [sp]
   842aa:	f000 fbf1 	bl	84a90 <memcpy>
   842ae:	89a2      	ldrh	r2, [r4, #12]
   842b0:	f8dd c000 	ldr.w	ip, [sp]
   842b4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   842b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   842bc:	81a2      	strh	r2, [r4, #12]
   842be:	eb0b 000c 	add.w	r0, fp, ip
   842c2:	ebcc 0207 	rsb	r2, ip, r7
   842c6:	f8c4 b010 	str.w	fp, [r4, #16]
   842ca:	6167      	str	r7, [r4, #20]
   842cc:	6020      	str	r0, [r4, #0]
   842ce:	60a2      	str	r2, [r4, #8]
   842d0:	4647      	mov	r7, r8
   842d2:	46c3      	mov	fp, r8
   842d4:	e717      	b.n	84106 <__sfvwrite_r+0xa6>
   842d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   842da:	4590      	cmp	r8, r2
   842dc:	bf38      	it	cc
   842de:	4642      	movcc	r2, r8
   842e0:	fb92 f2f3 	sdiv	r2, r2, r3
   842e4:	fb02 f303 	mul.w	r3, r2, r3
   842e8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   842ea:	4648      	mov	r0, r9
   842ec:	69e1      	ldr	r1, [r4, #28]
   842ee:	4652      	mov	r2, sl
   842f0:	47b8      	blx	r7
   842f2:	2800      	cmp	r0, #0
   842f4:	f77f af31 	ble.w	8415a <__sfvwrite_r+0xfa>
   842f8:	4602      	mov	r2, r0
   842fa:	e710      	b.n	8411e <__sfvwrite_r+0xbe>
   842fc:	4662      	mov	r2, ip
   842fe:	4659      	mov	r1, fp
   84300:	f8cd c000 	str.w	ip, [sp]
   84304:	f000 fc3a 	bl	84b7c <memmove>
   84308:	f8dd c000 	ldr.w	ip, [sp]
   8430c:	6823      	ldr	r3, [r4, #0]
   8430e:	4648      	mov	r0, r9
   84310:	4463      	add	r3, ip
   84312:	6023      	str	r3, [r4, #0]
   84314:	4621      	mov	r1, r4
   84316:	f8cd c000 	str.w	ip, [sp]
   8431a:	f7ff fc75 	bl	83c08 <_fflush_r>
   8431e:	f8dd c000 	ldr.w	ip, [sp]
   84322:	2800      	cmp	r0, #0
   84324:	f47f af19 	bne.w	8415a <__sfvwrite_r+0xfa>
   84328:	4667      	mov	r7, ip
   8432a:	e743      	b.n	841b4 <__sfvwrite_r+0x154>
   8432c:	4648      	mov	r0, r9
   8432e:	f8cd c000 	str.w	ip, [sp]
   84332:	f000 fc8d 	bl	84c50 <_realloc_r>
   84336:	f8dd c000 	ldr.w	ip, [sp]
   8433a:	4683      	mov	fp, r0
   8433c:	2800      	cmp	r0, #0
   8433e:	d1be      	bne.n	842be <__sfvwrite_r+0x25e>
   84340:	4648      	mov	r0, r9
   84342:	6921      	ldr	r1, [r4, #16]
   84344:	f7ff fdc0 	bl	83ec8 <_free_r>
   84348:	89a3      	ldrh	r3, [r4, #12]
   8434a:	220c      	movs	r2, #12
   8434c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84350:	b29b      	uxth	r3, r3
   84352:	f8c9 2000 	str.w	r2, [r9]
   84356:	e701      	b.n	8415c <__sfvwrite_r+0xfc>
   84358:	2701      	movs	r7, #1
   8435a:	f108 0a01 	add.w	sl, r8, #1
   8435e:	9701      	str	r7, [sp, #4]
   84360:	e70e      	b.n	84180 <__sfvwrite_r+0x120>
   84362:	f04f 30ff 	mov.w	r0, #4294967295
   84366:	e6aa      	b.n	840be <__sfvwrite_r+0x5e>
   84368:	230c      	movs	r3, #12
   8436a:	f8c9 3000 	str.w	r3, [r9]
   8436e:	89a3      	ldrh	r3, [r4, #12]
   84370:	e6f4      	b.n	8415c <__sfvwrite_r+0xfc>
   84372:	bf00      	nop
   84374:	7ffffc00 	.word	0x7ffffc00

00084378 <_fwalk>:
   84378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8437c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   84380:	4688      	mov	r8, r1
   84382:	d019      	beq.n	843b8 <_fwalk+0x40>
   84384:	2600      	movs	r6, #0
   84386:	687d      	ldr	r5, [r7, #4]
   84388:	68bc      	ldr	r4, [r7, #8]
   8438a:	3d01      	subs	r5, #1
   8438c:	d40e      	bmi.n	843ac <_fwalk+0x34>
   8438e:	89a3      	ldrh	r3, [r4, #12]
   84390:	3d01      	subs	r5, #1
   84392:	2b01      	cmp	r3, #1
   84394:	d906      	bls.n	843a4 <_fwalk+0x2c>
   84396:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8439a:	4620      	mov	r0, r4
   8439c:	3301      	adds	r3, #1
   8439e:	d001      	beq.n	843a4 <_fwalk+0x2c>
   843a0:	47c0      	blx	r8
   843a2:	4306      	orrs	r6, r0
   843a4:	1c6b      	adds	r3, r5, #1
   843a6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   843aa:	d1f0      	bne.n	8438e <_fwalk+0x16>
   843ac:	683f      	ldr	r7, [r7, #0]
   843ae:	2f00      	cmp	r7, #0
   843b0:	d1e9      	bne.n	84386 <_fwalk+0xe>
   843b2:	4630      	mov	r0, r6
   843b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   843b8:	463e      	mov	r6, r7
   843ba:	4630      	mov	r0, r6
   843bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000843c0 <__locale_charset>:
   843c0:	4800      	ldr	r0, [pc, #0]	; (843c4 <__locale_charset+0x4>)
   843c2:	4770      	bx	lr
   843c4:	20070574 	.word	0x20070574

000843c8 <__locale_mb_cur_max>:
   843c8:	4b01      	ldr	r3, [pc, #4]	; (843d0 <__locale_mb_cur_max+0x8>)
   843ca:	6818      	ldr	r0, [r3, #0]
   843cc:	4770      	bx	lr
   843ce:	bf00      	nop
   843d0:	20070594 	.word	0x20070594

000843d4 <__smakebuf_r>:
   843d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   843d6:	898b      	ldrh	r3, [r1, #12]
   843d8:	b091      	sub	sp, #68	; 0x44
   843da:	b29a      	uxth	r2, r3
   843dc:	0796      	lsls	r6, r2, #30
   843de:	460c      	mov	r4, r1
   843e0:	4605      	mov	r5, r0
   843e2:	d437      	bmi.n	84454 <__smakebuf_r+0x80>
   843e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   843e8:	2900      	cmp	r1, #0
   843ea:	db17      	blt.n	8441c <__smakebuf_r+0x48>
   843ec:	aa01      	add	r2, sp, #4
   843ee:	f000 ffaf 	bl	85350 <_fstat_r>
   843f2:	2800      	cmp	r0, #0
   843f4:	db10      	blt.n	84418 <__smakebuf_r+0x44>
   843f6:	9b02      	ldr	r3, [sp, #8]
   843f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   843fc:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   84400:	424f      	negs	r7, r1
   84402:	414f      	adcs	r7, r1
   84404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84408:	d02c      	beq.n	84464 <__smakebuf_r+0x90>
   8440a:	89a3      	ldrh	r3, [r4, #12]
   8440c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84410:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84414:	81a3      	strh	r3, [r4, #12]
   84416:	e00b      	b.n	84430 <__smakebuf_r+0x5c>
   84418:	89a3      	ldrh	r3, [r4, #12]
   8441a:	b29a      	uxth	r2, r3
   8441c:	f012 0f80 	tst.w	r2, #128	; 0x80
   84420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84424:	81a3      	strh	r3, [r4, #12]
   84426:	bf14      	ite	ne
   84428:	2640      	movne	r6, #64	; 0x40
   8442a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8442e:	2700      	movs	r7, #0
   84430:	4628      	mov	r0, r5
   84432:	4631      	mov	r1, r6
   84434:	f000 f846 	bl	844c4 <_malloc_r>
   84438:	89a3      	ldrh	r3, [r4, #12]
   8443a:	2800      	cmp	r0, #0
   8443c:	d029      	beq.n	84492 <__smakebuf_r+0xbe>
   8443e:	4a1b      	ldr	r2, [pc, #108]	; (844ac <__smakebuf_r+0xd8>)
   84440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84444:	63ea      	str	r2, [r5, #60]	; 0x3c
   84446:	81a3      	strh	r3, [r4, #12]
   84448:	6020      	str	r0, [r4, #0]
   8444a:	6120      	str	r0, [r4, #16]
   8444c:	6166      	str	r6, [r4, #20]
   8444e:	b9a7      	cbnz	r7, 8447a <__smakebuf_r+0xa6>
   84450:	b011      	add	sp, #68	; 0x44
   84452:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84454:	f101 0343 	add.w	r3, r1, #67	; 0x43
   84458:	2201      	movs	r2, #1
   8445a:	600b      	str	r3, [r1, #0]
   8445c:	610b      	str	r3, [r1, #16]
   8445e:	614a      	str	r2, [r1, #20]
   84460:	b011      	add	sp, #68	; 0x44
   84462:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84464:	4a12      	ldr	r2, [pc, #72]	; (844b0 <__smakebuf_r+0xdc>)
   84466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   84468:	4293      	cmp	r3, r2
   8446a:	d1ce      	bne.n	8440a <__smakebuf_r+0x36>
   8446c:	89a3      	ldrh	r3, [r4, #12]
   8446e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84472:	4333      	orrs	r3, r6
   84474:	81a3      	strh	r3, [r4, #12]
   84476:	64e6      	str	r6, [r4, #76]	; 0x4c
   84478:	e7da      	b.n	84430 <__smakebuf_r+0x5c>
   8447a:	4628      	mov	r0, r5
   8447c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84480:	f000 ff7a 	bl	85378 <_isatty_r>
   84484:	2800      	cmp	r0, #0
   84486:	d0e3      	beq.n	84450 <__smakebuf_r+0x7c>
   84488:	89a3      	ldrh	r3, [r4, #12]
   8448a:	f043 0301 	orr.w	r3, r3, #1
   8448e:	81a3      	strh	r3, [r4, #12]
   84490:	e7de      	b.n	84450 <__smakebuf_r+0x7c>
   84492:	059a      	lsls	r2, r3, #22
   84494:	d4dc      	bmi.n	84450 <__smakebuf_r+0x7c>
   84496:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8449a:	f043 0302 	orr.w	r3, r3, #2
   8449e:	2101      	movs	r1, #1
   844a0:	81a3      	strh	r3, [r4, #12]
   844a2:	6022      	str	r2, [r4, #0]
   844a4:	6122      	str	r2, [r4, #16]
   844a6:	6161      	str	r1, [r4, #20]
   844a8:	e7d2      	b.n	84450 <__smakebuf_r+0x7c>
   844aa:	bf00      	nop
   844ac:	00083c35 	.word	0x00083c35
   844b0:	00085091 	.word	0x00085091

000844b4 <malloc>:
   844b4:	4b02      	ldr	r3, [pc, #8]	; (844c0 <malloc+0xc>)
   844b6:	4601      	mov	r1, r0
   844b8:	6818      	ldr	r0, [r3, #0]
   844ba:	f000 b803 	b.w	844c4 <_malloc_r>
   844be:	bf00      	nop
   844c0:	20070570 	.word	0x20070570

000844c4 <_malloc_r>:
   844c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   844c8:	f101 050b 	add.w	r5, r1, #11
   844cc:	2d16      	cmp	r5, #22
   844ce:	b083      	sub	sp, #12
   844d0:	4606      	mov	r6, r0
   844d2:	d927      	bls.n	84524 <_malloc_r+0x60>
   844d4:	f035 0507 	bics.w	r5, r5, #7
   844d8:	d427      	bmi.n	8452a <_malloc_r+0x66>
   844da:	42a9      	cmp	r1, r5
   844dc:	d825      	bhi.n	8452a <_malloc_r+0x66>
   844de:	4630      	mov	r0, r6
   844e0:	f000 fbb2 	bl	84c48 <__malloc_lock>
   844e4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   844e8:	d226      	bcs.n	84538 <_malloc_r+0x74>
   844ea:	4fc1      	ldr	r7, [pc, #772]	; (847f0 <_malloc_r+0x32c>)
   844ec:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   844f0:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   844f4:	68dc      	ldr	r4, [r3, #12]
   844f6:	429c      	cmp	r4, r3
   844f8:	f000 81d2 	beq.w	848a0 <_malloc_r+0x3dc>
   844fc:	6863      	ldr	r3, [r4, #4]
   844fe:	68e2      	ldr	r2, [r4, #12]
   84500:	f023 0303 	bic.w	r3, r3, #3
   84504:	4423      	add	r3, r4
   84506:	6858      	ldr	r0, [r3, #4]
   84508:	68a1      	ldr	r1, [r4, #8]
   8450a:	f040 0501 	orr.w	r5, r0, #1
   8450e:	60ca      	str	r2, [r1, #12]
   84510:	4630      	mov	r0, r6
   84512:	6091      	str	r1, [r2, #8]
   84514:	605d      	str	r5, [r3, #4]
   84516:	f000 fb99 	bl	84c4c <__malloc_unlock>
   8451a:	3408      	adds	r4, #8
   8451c:	4620      	mov	r0, r4
   8451e:	b003      	add	sp, #12
   84520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84524:	2510      	movs	r5, #16
   84526:	42a9      	cmp	r1, r5
   84528:	d9d9      	bls.n	844de <_malloc_r+0x1a>
   8452a:	2400      	movs	r4, #0
   8452c:	230c      	movs	r3, #12
   8452e:	4620      	mov	r0, r4
   84530:	6033      	str	r3, [r6, #0]
   84532:	b003      	add	sp, #12
   84534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84538:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   8453c:	f000 8089 	beq.w	84652 <_malloc_r+0x18e>
   84540:	f1bc 0f04 	cmp.w	ip, #4
   84544:	f200 8160 	bhi.w	84808 <_malloc_r+0x344>
   84548:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   8454c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   84550:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84554:	4fa6      	ldr	r7, [pc, #664]	; (847f0 <_malloc_r+0x32c>)
   84556:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8455a:	68cc      	ldr	r4, [r1, #12]
   8455c:	42a1      	cmp	r1, r4
   8455e:	d105      	bne.n	8456c <_malloc_r+0xa8>
   84560:	e00c      	b.n	8457c <_malloc_r+0xb8>
   84562:	2b00      	cmp	r3, #0
   84564:	da79      	bge.n	8465a <_malloc_r+0x196>
   84566:	68e4      	ldr	r4, [r4, #12]
   84568:	42a1      	cmp	r1, r4
   8456a:	d007      	beq.n	8457c <_malloc_r+0xb8>
   8456c:	6862      	ldr	r2, [r4, #4]
   8456e:	f022 0203 	bic.w	r2, r2, #3
   84572:	1b53      	subs	r3, r2, r5
   84574:	2b0f      	cmp	r3, #15
   84576:	ddf4      	ble.n	84562 <_malloc_r+0x9e>
   84578:	f10c 3cff 	add.w	ip, ip, #4294967295
   8457c:	f10c 0c01 	add.w	ip, ip, #1
   84580:	4b9b      	ldr	r3, [pc, #620]	; (847f0 <_malloc_r+0x32c>)
   84582:	693c      	ldr	r4, [r7, #16]
   84584:	f103 0e08 	add.w	lr, r3, #8
   84588:	4574      	cmp	r4, lr
   8458a:	f000 817e 	beq.w	8488a <_malloc_r+0x3c6>
   8458e:	6861      	ldr	r1, [r4, #4]
   84590:	f021 0103 	bic.w	r1, r1, #3
   84594:	1b4a      	subs	r2, r1, r5
   84596:	2a0f      	cmp	r2, #15
   84598:	f300 8164 	bgt.w	84864 <_malloc_r+0x3a0>
   8459c:	2a00      	cmp	r2, #0
   8459e:	f8c3 e014 	str.w	lr, [r3, #20]
   845a2:	f8c3 e010 	str.w	lr, [r3, #16]
   845a6:	da69      	bge.n	8467c <_malloc_r+0x1b8>
   845a8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   845ac:	f080 813a 	bcs.w	84824 <_malloc_r+0x360>
   845b0:	08c9      	lsrs	r1, r1, #3
   845b2:	108a      	asrs	r2, r1, #2
   845b4:	f04f 0801 	mov.w	r8, #1
   845b8:	fa08 f802 	lsl.w	r8, r8, r2
   845bc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   845c0:	685a      	ldr	r2, [r3, #4]
   845c2:	6888      	ldr	r0, [r1, #8]
   845c4:	ea48 0202 	orr.w	r2, r8, r2
   845c8:	60a0      	str	r0, [r4, #8]
   845ca:	60e1      	str	r1, [r4, #12]
   845cc:	605a      	str	r2, [r3, #4]
   845ce:	608c      	str	r4, [r1, #8]
   845d0:	60c4      	str	r4, [r0, #12]
   845d2:	ea4f 03ac 	mov.w	r3, ip, asr #2
   845d6:	2001      	movs	r0, #1
   845d8:	4098      	lsls	r0, r3
   845da:	4290      	cmp	r0, r2
   845dc:	d85b      	bhi.n	84696 <_malloc_r+0x1d2>
   845de:	4202      	tst	r2, r0
   845e0:	d106      	bne.n	845f0 <_malloc_r+0x12c>
   845e2:	f02c 0c03 	bic.w	ip, ip, #3
   845e6:	0040      	lsls	r0, r0, #1
   845e8:	4202      	tst	r2, r0
   845ea:	f10c 0c04 	add.w	ip, ip, #4
   845ee:	d0fa      	beq.n	845e6 <_malloc_r+0x122>
   845f0:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   845f4:	4644      	mov	r4, r8
   845f6:	46e1      	mov	r9, ip
   845f8:	68e3      	ldr	r3, [r4, #12]
   845fa:	429c      	cmp	r4, r3
   845fc:	d107      	bne.n	8460e <_malloc_r+0x14a>
   845fe:	e146      	b.n	8488e <_malloc_r+0x3ca>
   84600:	2a00      	cmp	r2, #0
   84602:	f280 8157 	bge.w	848b4 <_malloc_r+0x3f0>
   84606:	68db      	ldr	r3, [r3, #12]
   84608:	429c      	cmp	r4, r3
   8460a:	f000 8140 	beq.w	8488e <_malloc_r+0x3ca>
   8460e:	6859      	ldr	r1, [r3, #4]
   84610:	f021 0103 	bic.w	r1, r1, #3
   84614:	1b4a      	subs	r2, r1, r5
   84616:	2a0f      	cmp	r2, #15
   84618:	ddf2      	ble.n	84600 <_malloc_r+0x13c>
   8461a:	461c      	mov	r4, r3
   8461c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   84620:	68d9      	ldr	r1, [r3, #12]
   84622:	f045 0901 	orr.w	r9, r5, #1
   84626:	f042 0801 	orr.w	r8, r2, #1
   8462a:	441d      	add	r5, r3
   8462c:	f8c3 9004 	str.w	r9, [r3, #4]
   84630:	4630      	mov	r0, r6
   84632:	f8cc 100c 	str.w	r1, [ip, #12]
   84636:	f8c1 c008 	str.w	ip, [r1, #8]
   8463a:	617d      	str	r5, [r7, #20]
   8463c:	613d      	str	r5, [r7, #16]
   8463e:	f8c5 e00c 	str.w	lr, [r5, #12]
   84642:	f8c5 e008 	str.w	lr, [r5, #8]
   84646:	f8c5 8004 	str.w	r8, [r5, #4]
   8464a:	50aa      	str	r2, [r5, r2]
   8464c:	f000 fafe 	bl	84c4c <__malloc_unlock>
   84650:	e764      	b.n	8451c <_malloc_r+0x58>
   84652:	217e      	movs	r1, #126	; 0x7e
   84654:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   84658:	e77c      	b.n	84554 <_malloc_r+0x90>
   8465a:	4422      	add	r2, r4
   8465c:	6850      	ldr	r0, [r2, #4]
   8465e:	68e3      	ldr	r3, [r4, #12]
   84660:	68a1      	ldr	r1, [r4, #8]
   84662:	f040 0501 	orr.w	r5, r0, #1
   84666:	60cb      	str	r3, [r1, #12]
   84668:	4630      	mov	r0, r6
   8466a:	6099      	str	r1, [r3, #8]
   8466c:	6055      	str	r5, [r2, #4]
   8466e:	f000 faed 	bl	84c4c <__malloc_unlock>
   84672:	3408      	adds	r4, #8
   84674:	4620      	mov	r0, r4
   84676:	b003      	add	sp, #12
   84678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8467c:	4421      	add	r1, r4
   8467e:	684b      	ldr	r3, [r1, #4]
   84680:	4630      	mov	r0, r6
   84682:	f043 0301 	orr.w	r3, r3, #1
   84686:	604b      	str	r3, [r1, #4]
   84688:	f000 fae0 	bl	84c4c <__malloc_unlock>
   8468c:	3408      	adds	r4, #8
   8468e:	4620      	mov	r0, r4
   84690:	b003      	add	sp, #12
   84692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84696:	68bc      	ldr	r4, [r7, #8]
   84698:	6863      	ldr	r3, [r4, #4]
   8469a:	f023 0903 	bic.w	r9, r3, #3
   8469e:	45a9      	cmp	r9, r5
   846a0:	d304      	bcc.n	846ac <_malloc_r+0x1e8>
   846a2:	ebc5 0309 	rsb	r3, r5, r9
   846a6:	2b0f      	cmp	r3, #15
   846a8:	f300 8091 	bgt.w	847ce <_malloc_r+0x30a>
   846ac:	4b51      	ldr	r3, [pc, #324]	; (847f4 <_malloc_r+0x330>)
   846ae:	4a52      	ldr	r2, [pc, #328]	; (847f8 <_malloc_r+0x334>)
   846b0:	6819      	ldr	r1, [r3, #0]
   846b2:	6813      	ldr	r3, [r2, #0]
   846b4:	eb05 0a01 	add.w	sl, r5, r1
   846b8:	3301      	adds	r3, #1
   846ba:	eb04 0b09 	add.w	fp, r4, r9
   846be:	f000 8161 	beq.w	84984 <_malloc_r+0x4c0>
   846c2:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   846c6:	f10a 0a0f 	add.w	sl, sl, #15
   846ca:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   846ce:	f02a 0a0f 	bic.w	sl, sl, #15
   846d2:	4630      	mov	r0, r6
   846d4:	4651      	mov	r1, sl
   846d6:	9201      	str	r2, [sp, #4]
   846d8:	f000 fc9a 	bl	85010 <_sbrk_r>
   846dc:	f1b0 3fff 	cmp.w	r0, #4294967295
   846e0:	4680      	mov	r8, r0
   846e2:	9a01      	ldr	r2, [sp, #4]
   846e4:	f000 8101 	beq.w	848ea <_malloc_r+0x426>
   846e8:	4583      	cmp	fp, r0
   846ea:	f200 80fb 	bhi.w	848e4 <_malloc_r+0x420>
   846ee:	f8df c114 	ldr.w	ip, [pc, #276]	; 84804 <_malloc_r+0x340>
   846f2:	45c3      	cmp	fp, r8
   846f4:	f8dc 3000 	ldr.w	r3, [ip]
   846f8:	4453      	add	r3, sl
   846fa:	f8cc 3000 	str.w	r3, [ip]
   846fe:	f000 814a 	beq.w	84996 <_malloc_r+0x4d2>
   84702:	6812      	ldr	r2, [r2, #0]
   84704:	493c      	ldr	r1, [pc, #240]	; (847f8 <_malloc_r+0x334>)
   84706:	3201      	adds	r2, #1
   84708:	bf1b      	ittet	ne
   8470a:	ebcb 0b08 	rsbne	fp, fp, r8
   8470e:	445b      	addne	r3, fp
   84710:	f8c1 8000 	streq.w	r8, [r1]
   84714:	f8cc 3000 	strne.w	r3, [ip]
   84718:	f018 0307 	ands.w	r3, r8, #7
   8471c:	f000 8114 	beq.w	84948 <_malloc_r+0x484>
   84720:	f1c3 0208 	rsb	r2, r3, #8
   84724:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   84728:	4490      	add	r8, r2
   8472a:	3308      	adds	r3, #8
   8472c:	44c2      	add	sl, r8
   8472e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   84732:	ebca 0a03 	rsb	sl, sl, r3
   84736:	4651      	mov	r1, sl
   84738:	4630      	mov	r0, r6
   8473a:	f8cd c004 	str.w	ip, [sp, #4]
   8473e:	f000 fc67 	bl	85010 <_sbrk_r>
   84742:	1c43      	adds	r3, r0, #1
   84744:	f8dd c004 	ldr.w	ip, [sp, #4]
   84748:	f000 8135 	beq.w	849b6 <_malloc_r+0x4f2>
   8474c:	ebc8 0200 	rsb	r2, r8, r0
   84750:	4452      	add	r2, sl
   84752:	f042 0201 	orr.w	r2, r2, #1
   84756:	f8dc 3000 	ldr.w	r3, [ip]
   8475a:	42bc      	cmp	r4, r7
   8475c:	4453      	add	r3, sl
   8475e:	f8c7 8008 	str.w	r8, [r7, #8]
   84762:	f8cc 3000 	str.w	r3, [ip]
   84766:	f8c8 2004 	str.w	r2, [r8, #4]
   8476a:	f8df a098 	ldr.w	sl, [pc, #152]	; 84804 <_malloc_r+0x340>
   8476e:	d015      	beq.n	8479c <_malloc_r+0x2d8>
   84770:	f1b9 0f0f 	cmp.w	r9, #15
   84774:	f240 80eb 	bls.w	8494e <_malloc_r+0x48a>
   84778:	6861      	ldr	r1, [r4, #4]
   8477a:	f1a9 020c 	sub.w	r2, r9, #12
   8477e:	f022 0207 	bic.w	r2, r2, #7
   84782:	f001 0101 	and.w	r1, r1, #1
   84786:	ea42 0e01 	orr.w	lr, r2, r1
   8478a:	2005      	movs	r0, #5
   8478c:	18a1      	adds	r1, r4, r2
   8478e:	2a0f      	cmp	r2, #15
   84790:	f8c4 e004 	str.w	lr, [r4, #4]
   84794:	6048      	str	r0, [r1, #4]
   84796:	6088      	str	r0, [r1, #8]
   84798:	f200 8111 	bhi.w	849be <_malloc_r+0x4fa>
   8479c:	4a17      	ldr	r2, [pc, #92]	; (847fc <_malloc_r+0x338>)
   8479e:	68bc      	ldr	r4, [r7, #8]
   847a0:	6811      	ldr	r1, [r2, #0]
   847a2:	428b      	cmp	r3, r1
   847a4:	bf88      	it	hi
   847a6:	6013      	strhi	r3, [r2, #0]
   847a8:	4a15      	ldr	r2, [pc, #84]	; (84800 <_malloc_r+0x33c>)
   847aa:	6811      	ldr	r1, [r2, #0]
   847ac:	428b      	cmp	r3, r1
   847ae:	bf88      	it	hi
   847b0:	6013      	strhi	r3, [r2, #0]
   847b2:	6862      	ldr	r2, [r4, #4]
   847b4:	f022 0203 	bic.w	r2, r2, #3
   847b8:	4295      	cmp	r5, r2
   847ba:	ebc5 0302 	rsb	r3, r5, r2
   847be:	d801      	bhi.n	847c4 <_malloc_r+0x300>
   847c0:	2b0f      	cmp	r3, #15
   847c2:	dc04      	bgt.n	847ce <_malloc_r+0x30a>
   847c4:	4630      	mov	r0, r6
   847c6:	f000 fa41 	bl	84c4c <__malloc_unlock>
   847ca:	2400      	movs	r4, #0
   847cc:	e6a6      	b.n	8451c <_malloc_r+0x58>
   847ce:	f045 0201 	orr.w	r2, r5, #1
   847d2:	f043 0301 	orr.w	r3, r3, #1
   847d6:	4425      	add	r5, r4
   847d8:	6062      	str	r2, [r4, #4]
   847da:	4630      	mov	r0, r6
   847dc:	60bd      	str	r5, [r7, #8]
   847de:	606b      	str	r3, [r5, #4]
   847e0:	f000 fa34 	bl	84c4c <__malloc_unlock>
   847e4:	3408      	adds	r4, #8
   847e6:	4620      	mov	r0, r4
   847e8:	b003      	add	sp, #12
   847ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   847ee:	bf00      	nop
   847f0:	20070598 	.word	0x20070598
   847f4:	20070aec 	.word	0x20070aec
   847f8:	200709a4 	.word	0x200709a4
   847fc:	20070ae8 	.word	0x20070ae8
   84800:	20070ae4 	.word	0x20070ae4
   84804:	20070af0 	.word	0x20070af0
   84808:	f1bc 0f14 	cmp.w	ip, #20
   8480c:	d961      	bls.n	848d2 <_malloc_r+0x40e>
   8480e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   84812:	f200 808f 	bhi.w	84934 <_malloc_r+0x470>
   84816:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8481a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8481e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84822:	e697      	b.n	84554 <_malloc_r+0x90>
   84824:	0a4b      	lsrs	r3, r1, #9
   84826:	2b04      	cmp	r3, #4
   84828:	d958      	bls.n	848dc <_malloc_r+0x418>
   8482a:	2b14      	cmp	r3, #20
   8482c:	f200 80ad 	bhi.w	8498a <_malloc_r+0x4c6>
   84830:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   84834:	0050      	lsls	r0, r2, #1
   84836:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8483a:	6883      	ldr	r3, [r0, #8]
   8483c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 849f8 <_malloc_r+0x534>
   84840:	4283      	cmp	r3, r0
   84842:	f000 808a 	beq.w	8495a <_malloc_r+0x496>
   84846:	685a      	ldr	r2, [r3, #4]
   84848:	f022 0203 	bic.w	r2, r2, #3
   8484c:	4291      	cmp	r1, r2
   8484e:	d202      	bcs.n	84856 <_malloc_r+0x392>
   84850:	689b      	ldr	r3, [r3, #8]
   84852:	4298      	cmp	r0, r3
   84854:	d1f7      	bne.n	84846 <_malloc_r+0x382>
   84856:	68d9      	ldr	r1, [r3, #12]
   84858:	687a      	ldr	r2, [r7, #4]
   8485a:	60e1      	str	r1, [r4, #12]
   8485c:	60a3      	str	r3, [r4, #8]
   8485e:	608c      	str	r4, [r1, #8]
   84860:	60dc      	str	r4, [r3, #12]
   84862:	e6b6      	b.n	845d2 <_malloc_r+0x10e>
   84864:	f045 0701 	orr.w	r7, r5, #1
   84868:	f042 0101 	orr.w	r1, r2, #1
   8486c:	4425      	add	r5, r4
   8486e:	6067      	str	r7, [r4, #4]
   84870:	4630      	mov	r0, r6
   84872:	615d      	str	r5, [r3, #20]
   84874:	611d      	str	r5, [r3, #16]
   84876:	f8c5 e00c 	str.w	lr, [r5, #12]
   8487a:	f8c5 e008 	str.w	lr, [r5, #8]
   8487e:	6069      	str	r1, [r5, #4]
   84880:	50aa      	str	r2, [r5, r2]
   84882:	3408      	adds	r4, #8
   84884:	f000 f9e2 	bl	84c4c <__malloc_unlock>
   84888:	e648      	b.n	8451c <_malloc_r+0x58>
   8488a:	685a      	ldr	r2, [r3, #4]
   8488c:	e6a1      	b.n	845d2 <_malloc_r+0x10e>
   8488e:	f109 0901 	add.w	r9, r9, #1
   84892:	f019 0f03 	tst.w	r9, #3
   84896:	f104 0408 	add.w	r4, r4, #8
   8489a:	f47f aead 	bne.w	845f8 <_malloc_r+0x134>
   8489e:	e02d      	b.n	848fc <_malloc_r+0x438>
   848a0:	f104 0308 	add.w	r3, r4, #8
   848a4:	6964      	ldr	r4, [r4, #20]
   848a6:	42a3      	cmp	r3, r4
   848a8:	bf08      	it	eq
   848aa:	f10c 0c02 	addeq.w	ip, ip, #2
   848ae:	f43f ae67 	beq.w	84580 <_malloc_r+0xbc>
   848b2:	e623      	b.n	844fc <_malloc_r+0x38>
   848b4:	4419      	add	r1, r3
   848b6:	6848      	ldr	r0, [r1, #4]
   848b8:	461c      	mov	r4, r3
   848ba:	f854 2f08 	ldr.w	r2, [r4, #8]!
   848be:	68db      	ldr	r3, [r3, #12]
   848c0:	f040 0501 	orr.w	r5, r0, #1
   848c4:	604d      	str	r5, [r1, #4]
   848c6:	4630      	mov	r0, r6
   848c8:	60d3      	str	r3, [r2, #12]
   848ca:	609a      	str	r2, [r3, #8]
   848cc:	f000 f9be 	bl	84c4c <__malloc_unlock>
   848d0:	e624      	b.n	8451c <_malloc_r+0x58>
   848d2:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   848d6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   848da:	e63b      	b.n	84554 <_malloc_r+0x90>
   848dc:	098a      	lsrs	r2, r1, #6
   848de:	3238      	adds	r2, #56	; 0x38
   848e0:	0050      	lsls	r0, r2, #1
   848e2:	e7a8      	b.n	84836 <_malloc_r+0x372>
   848e4:	42bc      	cmp	r4, r7
   848e6:	f43f af02 	beq.w	846ee <_malloc_r+0x22a>
   848ea:	68bc      	ldr	r4, [r7, #8]
   848ec:	6862      	ldr	r2, [r4, #4]
   848ee:	f022 0203 	bic.w	r2, r2, #3
   848f2:	e761      	b.n	847b8 <_malloc_r+0x2f4>
   848f4:	f8d8 8000 	ldr.w	r8, [r8]
   848f8:	4598      	cmp	r8, r3
   848fa:	d17a      	bne.n	849f2 <_malloc_r+0x52e>
   848fc:	f01c 0f03 	tst.w	ip, #3
   84900:	f1a8 0308 	sub.w	r3, r8, #8
   84904:	f10c 3cff 	add.w	ip, ip, #4294967295
   84908:	d1f4      	bne.n	848f4 <_malloc_r+0x430>
   8490a:	687b      	ldr	r3, [r7, #4]
   8490c:	ea23 0300 	bic.w	r3, r3, r0
   84910:	607b      	str	r3, [r7, #4]
   84912:	0040      	lsls	r0, r0, #1
   84914:	4298      	cmp	r0, r3
   84916:	f63f aebe 	bhi.w	84696 <_malloc_r+0x1d2>
   8491a:	2800      	cmp	r0, #0
   8491c:	f43f aebb 	beq.w	84696 <_malloc_r+0x1d2>
   84920:	4203      	tst	r3, r0
   84922:	46cc      	mov	ip, r9
   84924:	f47f ae64 	bne.w	845f0 <_malloc_r+0x12c>
   84928:	0040      	lsls	r0, r0, #1
   8492a:	4203      	tst	r3, r0
   8492c:	f10c 0c04 	add.w	ip, ip, #4
   84930:	d0fa      	beq.n	84928 <_malloc_r+0x464>
   84932:	e65d      	b.n	845f0 <_malloc_r+0x12c>
   84934:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   84938:	d819      	bhi.n	8496e <_malloc_r+0x4aa>
   8493a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8493e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   84942:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84946:	e605      	b.n	84554 <_malloc_r+0x90>
   84948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8494c:	e6ee      	b.n	8472c <_malloc_r+0x268>
   8494e:	2301      	movs	r3, #1
   84950:	f8c8 3004 	str.w	r3, [r8, #4]
   84954:	4644      	mov	r4, r8
   84956:	2200      	movs	r2, #0
   84958:	e72e      	b.n	847b8 <_malloc_r+0x2f4>
   8495a:	1092      	asrs	r2, r2, #2
   8495c:	2001      	movs	r0, #1
   8495e:	4090      	lsls	r0, r2
   84960:	f8d8 2004 	ldr.w	r2, [r8, #4]
   84964:	4619      	mov	r1, r3
   84966:	4302      	orrs	r2, r0
   84968:	f8c8 2004 	str.w	r2, [r8, #4]
   8496c:	e775      	b.n	8485a <_malloc_r+0x396>
   8496e:	f240 5354 	movw	r3, #1364	; 0x554
   84972:	459c      	cmp	ip, r3
   84974:	d81b      	bhi.n	849ae <_malloc_r+0x4ea>
   84976:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   8497a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8497e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84982:	e5e7      	b.n	84554 <_malloc_r+0x90>
   84984:	f10a 0a10 	add.w	sl, sl, #16
   84988:	e6a3      	b.n	846d2 <_malloc_r+0x20e>
   8498a:	2b54      	cmp	r3, #84	; 0x54
   8498c:	d81f      	bhi.n	849ce <_malloc_r+0x50a>
   8498e:	0b0a      	lsrs	r2, r1, #12
   84990:	326e      	adds	r2, #110	; 0x6e
   84992:	0050      	lsls	r0, r2, #1
   84994:	e74f      	b.n	84836 <_malloc_r+0x372>
   84996:	f3cb 010b 	ubfx	r1, fp, #0, #12
   8499a:	2900      	cmp	r1, #0
   8499c:	f47f aeb1 	bne.w	84702 <_malloc_r+0x23e>
   849a0:	eb0a 0109 	add.w	r1, sl, r9
   849a4:	68ba      	ldr	r2, [r7, #8]
   849a6:	f041 0101 	orr.w	r1, r1, #1
   849aa:	6051      	str	r1, [r2, #4]
   849ac:	e6f6      	b.n	8479c <_malloc_r+0x2d8>
   849ae:	21fc      	movs	r1, #252	; 0xfc
   849b0:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   849b4:	e5ce      	b.n	84554 <_malloc_r+0x90>
   849b6:	2201      	movs	r2, #1
   849b8:	f04f 0a00 	mov.w	sl, #0
   849bc:	e6cb      	b.n	84756 <_malloc_r+0x292>
   849be:	f104 0108 	add.w	r1, r4, #8
   849c2:	4630      	mov	r0, r6
   849c4:	f7ff fa80 	bl	83ec8 <_free_r>
   849c8:	f8da 3000 	ldr.w	r3, [sl]
   849cc:	e6e6      	b.n	8479c <_malloc_r+0x2d8>
   849ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   849d2:	d803      	bhi.n	849dc <_malloc_r+0x518>
   849d4:	0bca      	lsrs	r2, r1, #15
   849d6:	3277      	adds	r2, #119	; 0x77
   849d8:	0050      	lsls	r0, r2, #1
   849da:	e72c      	b.n	84836 <_malloc_r+0x372>
   849dc:	f240 5254 	movw	r2, #1364	; 0x554
   849e0:	4293      	cmp	r3, r2
   849e2:	d803      	bhi.n	849ec <_malloc_r+0x528>
   849e4:	0c8a      	lsrs	r2, r1, #18
   849e6:	327c      	adds	r2, #124	; 0x7c
   849e8:	0050      	lsls	r0, r2, #1
   849ea:	e724      	b.n	84836 <_malloc_r+0x372>
   849ec:	20fc      	movs	r0, #252	; 0xfc
   849ee:	227e      	movs	r2, #126	; 0x7e
   849f0:	e721      	b.n	84836 <_malloc_r+0x372>
   849f2:	687b      	ldr	r3, [r7, #4]
   849f4:	e78d      	b.n	84912 <_malloc_r+0x44e>
   849f6:	bf00      	nop
   849f8:	20070598 	.word	0x20070598

000849fc <memchr>:
   849fc:	0783      	lsls	r3, r0, #30
   849fe:	b470      	push	{r4, r5, r6}
   84a00:	b2c9      	uxtb	r1, r1
   84a02:	d040      	beq.n	84a86 <memchr+0x8a>
   84a04:	1e54      	subs	r4, r2, #1
   84a06:	b32a      	cbz	r2, 84a54 <memchr+0x58>
   84a08:	7803      	ldrb	r3, [r0, #0]
   84a0a:	428b      	cmp	r3, r1
   84a0c:	d023      	beq.n	84a56 <memchr+0x5a>
   84a0e:	1c43      	adds	r3, r0, #1
   84a10:	e004      	b.n	84a1c <memchr+0x20>
   84a12:	b1fc      	cbz	r4, 84a54 <memchr+0x58>
   84a14:	7805      	ldrb	r5, [r0, #0]
   84a16:	4614      	mov	r4, r2
   84a18:	428d      	cmp	r5, r1
   84a1a:	d01c      	beq.n	84a56 <memchr+0x5a>
   84a1c:	f013 0f03 	tst.w	r3, #3
   84a20:	4618      	mov	r0, r3
   84a22:	f104 32ff 	add.w	r2, r4, #4294967295
   84a26:	f103 0301 	add.w	r3, r3, #1
   84a2a:	d1f2      	bne.n	84a12 <memchr+0x16>
   84a2c:	2c03      	cmp	r4, #3
   84a2e:	d814      	bhi.n	84a5a <memchr+0x5e>
   84a30:	1e65      	subs	r5, r4, #1
   84a32:	b354      	cbz	r4, 84a8a <memchr+0x8e>
   84a34:	7803      	ldrb	r3, [r0, #0]
   84a36:	428b      	cmp	r3, r1
   84a38:	d00d      	beq.n	84a56 <memchr+0x5a>
   84a3a:	1c42      	adds	r2, r0, #1
   84a3c:	2300      	movs	r3, #0
   84a3e:	e002      	b.n	84a46 <memchr+0x4a>
   84a40:	7804      	ldrb	r4, [r0, #0]
   84a42:	428c      	cmp	r4, r1
   84a44:	d007      	beq.n	84a56 <memchr+0x5a>
   84a46:	42ab      	cmp	r3, r5
   84a48:	4610      	mov	r0, r2
   84a4a:	f103 0301 	add.w	r3, r3, #1
   84a4e:	f102 0201 	add.w	r2, r2, #1
   84a52:	d1f5      	bne.n	84a40 <memchr+0x44>
   84a54:	2000      	movs	r0, #0
   84a56:	bc70      	pop	{r4, r5, r6}
   84a58:	4770      	bx	lr
   84a5a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   84a5e:	4603      	mov	r3, r0
   84a60:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   84a64:	681a      	ldr	r2, [r3, #0]
   84a66:	4618      	mov	r0, r3
   84a68:	4072      	eors	r2, r6
   84a6a:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   84a6e:	ea25 0202 	bic.w	r2, r5, r2
   84a72:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   84a76:	f103 0304 	add.w	r3, r3, #4
   84a7a:	d1d9      	bne.n	84a30 <memchr+0x34>
   84a7c:	3c04      	subs	r4, #4
   84a7e:	2c03      	cmp	r4, #3
   84a80:	4618      	mov	r0, r3
   84a82:	d8ef      	bhi.n	84a64 <memchr+0x68>
   84a84:	e7d4      	b.n	84a30 <memchr+0x34>
   84a86:	4614      	mov	r4, r2
   84a88:	e7d0      	b.n	84a2c <memchr+0x30>
   84a8a:	4620      	mov	r0, r4
   84a8c:	e7e3      	b.n	84a56 <memchr+0x5a>
   84a8e:	bf00      	nop

00084a90 <memcpy>:
   84a90:	4684      	mov	ip, r0
   84a92:	ea41 0300 	orr.w	r3, r1, r0
   84a96:	f013 0303 	ands.w	r3, r3, #3
   84a9a:	d149      	bne.n	84b30 <memcpy+0xa0>
   84a9c:	3a40      	subs	r2, #64	; 0x40
   84a9e:	d323      	bcc.n	84ae8 <memcpy+0x58>
   84aa0:	680b      	ldr	r3, [r1, #0]
   84aa2:	6003      	str	r3, [r0, #0]
   84aa4:	684b      	ldr	r3, [r1, #4]
   84aa6:	6043      	str	r3, [r0, #4]
   84aa8:	688b      	ldr	r3, [r1, #8]
   84aaa:	6083      	str	r3, [r0, #8]
   84aac:	68cb      	ldr	r3, [r1, #12]
   84aae:	60c3      	str	r3, [r0, #12]
   84ab0:	690b      	ldr	r3, [r1, #16]
   84ab2:	6103      	str	r3, [r0, #16]
   84ab4:	694b      	ldr	r3, [r1, #20]
   84ab6:	6143      	str	r3, [r0, #20]
   84ab8:	698b      	ldr	r3, [r1, #24]
   84aba:	6183      	str	r3, [r0, #24]
   84abc:	69cb      	ldr	r3, [r1, #28]
   84abe:	61c3      	str	r3, [r0, #28]
   84ac0:	6a0b      	ldr	r3, [r1, #32]
   84ac2:	6203      	str	r3, [r0, #32]
   84ac4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84ac6:	6243      	str	r3, [r0, #36]	; 0x24
   84ac8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   84aca:	6283      	str	r3, [r0, #40]	; 0x28
   84acc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   84ace:	62c3      	str	r3, [r0, #44]	; 0x2c
   84ad0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84ad2:	6303      	str	r3, [r0, #48]	; 0x30
   84ad4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84ad6:	6343      	str	r3, [r0, #52]	; 0x34
   84ad8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   84ada:	6383      	str	r3, [r0, #56]	; 0x38
   84adc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   84ade:	63c3      	str	r3, [r0, #60]	; 0x3c
   84ae0:	3040      	adds	r0, #64	; 0x40
   84ae2:	3140      	adds	r1, #64	; 0x40
   84ae4:	3a40      	subs	r2, #64	; 0x40
   84ae6:	d2db      	bcs.n	84aa0 <memcpy+0x10>
   84ae8:	3230      	adds	r2, #48	; 0x30
   84aea:	d30b      	bcc.n	84b04 <memcpy+0x74>
   84aec:	680b      	ldr	r3, [r1, #0]
   84aee:	6003      	str	r3, [r0, #0]
   84af0:	684b      	ldr	r3, [r1, #4]
   84af2:	6043      	str	r3, [r0, #4]
   84af4:	688b      	ldr	r3, [r1, #8]
   84af6:	6083      	str	r3, [r0, #8]
   84af8:	68cb      	ldr	r3, [r1, #12]
   84afa:	60c3      	str	r3, [r0, #12]
   84afc:	3010      	adds	r0, #16
   84afe:	3110      	adds	r1, #16
   84b00:	3a10      	subs	r2, #16
   84b02:	d2f3      	bcs.n	84aec <memcpy+0x5c>
   84b04:	320c      	adds	r2, #12
   84b06:	d305      	bcc.n	84b14 <memcpy+0x84>
   84b08:	f851 3b04 	ldr.w	r3, [r1], #4
   84b0c:	f840 3b04 	str.w	r3, [r0], #4
   84b10:	3a04      	subs	r2, #4
   84b12:	d2f9      	bcs.n	84b08 <memcpy+0x78>
   84b14:	3204      	adds	r2, #4
   84b16:	d008      	beq.n	84b2a <memcpy+0x9a>
   84b18:	07d2      	lsls	r2, r2, #31
   84b1a:	bf1c      	itt	ne
   84b1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84b20:	f800 3b01 	strbne.w	r3, [r0], #1
   84b24:	d301      	bcc.n	84b2a <memcpy+0x9a>
   84b26:	880b      	ldrh	r3, [r1, #0]
   84b28:	8003      	strh	r3, [r0, #0]
   84b2a:	4660      	mov	r0, ip
   84b2c:	4770      	bx	lr
   84b2e:	bf00      	nop
   84b30:	2a08      	cmp	r2, #8
   84b32:	d313      	bcc.n	84b5c <memcpy+0xcc>
   84b34:	078b      	lsls	r3, r1, #30
   84b36:	d0b1      	beq.n	84a9c <memcpy+0xc>
   84b38:	f010 0303 	ands.w	r3, r0, #3
   84b3c:	d0ae      	beq.n	84a9c <memcpy+0xc>
   84b3e:	f1c3 0304 	rsb	r3, r3, #4
   84b42:	1ad2      	subs	r2, r2, r3
   84b44:	07db      	lsls	r3, r3, #31
   84b46:	bf1c      	itt	ne
   84b48:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84b4c:	f800 3b01 	strbne.w	r3, [r0], #1
   84b50:	d3a4      	bcc.n	84a9c <memcpy+0xc>
   84b52:	f831 3b02 	ldrh.w	r3, [r1], #2
   84b56:	f820 3b02 	strh.w	r3, [r0], #2
   84b5a:	e79f      	b.n	84a9c <memcpy+0xc>
   84b5c:	3a04      	subs	r2, #4
   84b5e:	d3d9      	bcc.n	84b14 <memcpy+0x84>
   84b60:	3a01      	subs	r2, #1
   84b62:	f811 3b01 	ldrb.w	r3, [r1], #1
   84b66:	f800 3b01 	strb.w	r3, [r0], #1
   84b6a:	d2f9      	bcs.n	84b60 <memcpy+0xd0>
   84b6c:	780b      	ldrb	r3, [r1, #0]
   84b6e:	7003      	strb	r3, [r0, #0]
   84b70:	784b      	ldrb	r3, [r1, #1]
   84b72:	7043      	strb	r3, [r0, #1]
   84b74:	788b      	ldrb	r3, [r1, #2]
   84b76:	7083      	strb	r3, [r0, #2]
   84b78:	4660      	mov	r0, ip
   84b7a:	4770      	bx	lr

00084b7c <memmove>:
   84b7c:	4288      	cmp	r0, r1
   84b7e:	b4f0      	push	{r4, r5, r6, r7}
   84b80:	d910      	bls.n	84ba4 <memmove+0x28>
   84b82:	188c      	adds	r4, r1, r2
   84b84:	42a0      	cmp	r0, r4
   84b86:	d20d      	bcs.n	84ba4 <memmove+0x28>
   84b88:	1885      	adds	r5, r0, r2
   84b8a:	1e53      	subs	r3, r2, #1
   84b8c:	b142      	cbz	r2, 84ba0 <memmove+0x24>
   84b8e:	4621      	mov	r1, r4
   84b90:	462a      	mov	r2, r5
   84b92:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   84b96:	3b01      	subs	r3, #1
   84b98:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84b9c:	1c5c      	adds	r4, r3, #1
   84b9e:	d1f8      	bne.n	84b92 <memmove+0x16>
   84ba0:	bcf0      	pop	{r4, r5, r6, r7}
   84ba2:	4770      	bx	lr
   84ba4:	2a0f      	cmp	r2, #15
   84ba6:	d944      	bls.n	84c32 <memmove+0xb6>
   84ba8:	ea40 0301 	orr.w	r3, r0, r1
   84bac:	079b      	lsls	r3, r3, #30
   84bae:	d144      	bne.n	84c3a <memmove+0xbe>
   84bb0:	f1a2 0710 	sub.w	r7, r2, #16
   84bb4:	093f      	lsrs	r7, r7, #4
   84bb6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   84bba:	3610      	adds	r6, #16
   84bbc:	460c      	mov	r4, r1
   84bbe:	4603      	mov	r3, r0
   84bc0:	6825      	ldr	r5, [r4, #0]
   84bc2:	3310      	adds	r3, #16
   84bc4:	f843 5c10 	str.w	r5, [r3, #-16]
   84bc8:	6865      	ldr	r5, [r4, #4]
   84bca:	3410      	adds	r4, #16
   84bcc:	f843 5c0c 	str.w	r5, [r3, #-12]
   84bd0:	f854 5c08 	ldr.w	r5, [r4, #-8]
   84bd4:	f843 5c08 	str.w	r5, [r3, #-8]
   84bd8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   84bdc:	f843 5c04 	str.w	r5, [r3, #-4]
   84be0:	42b3      	cmp	r3, r6
   84be2:	d1ed      	bne.n	84bc0 <memmove+0x44>
   84be4:	1c7b      	adds	r3, r7, #1
   84be6:	f002 0c0f 	and.w	ip, r2, #15
   84bea:	011b      	lsls	r3, r3, #4
   84bec:	f1bc 0f03 	cmp.w	ip, #3
   84bf0:	4419      	add	r1, r3
   84bf2:	4403      	add	r3, r0
   84bf4:	d923      	bls.n	84c3e <memmove+0xc2>
   84bf6:	460e      	mov	r6, r1
   84bf8:	461d      	mov	r5, r3
   84bfa:	4664      	mov	r4, ip
   84bfc:	f856 7b04 	ldr.w	r7, [r6], #4
   84c00:	3c04      	subs	r4, #4
   84c02:	2c03      	cmp	r4, #3
   84c04:	f845 7b04 	str.w	r7, [r5], #4
   84c08:	d8f8      	bhi.n	84bfc <memmove+0x80>
   84c0a:	f1ac 0404 	sub.w	r4, ip, #4
   84c0e:	f024 0403 	bic.w	r4, r4, #3
   84c12:	3404      	adds	r4, #4
   84c14:	f002 0203 	and.w	r2, r2, #3
   84c18:	4423      	add	r3, r4
   84c1a:	4421      	add	r1, r4
   84c1c:	2a00      	cmp	r2, #0
   84c1e:	d0bf      	beq.n	84ba0 <memmove+0x24>
   84c20:	441a      	add	r2, r3
   84c22:	f811 4b01 	ldrb.w	r4, [r1], #1
   84c26:	f803 4b01 	strb.w	r4, [r3], #1
   84c2a:	4293      	cmp	r3, r2
   84c2c:	d1f9      	bne.n	84c22 <memmove+0xa6>
   84c2e:	bcf0      	pop	{r4, r5, r6, r7}
   84c30:	4770      	bx	lr
   84c32:	4603      	mov	r3, r0
   84c34:	2a00      	cmp	r2, #0
   84c36:	d1f3      	bne.n	84c20 <memmove+0xa4>
   84c38:	e7b2      	b.n	84ba0 <memmove+0x24>
   84c3a:	4603      	mov	r3, r0
   84c3c:	e7f0      	b.n	84c20 <memmove+0xa4>
   84c3e:	4662      	mov	r2, ip
   84c40:	2a00      	cmp	r2, #0
   84c42:	d1ed      	bne.n	84c20 <memmove+0xa4>
   84c44:	e7ac      	b.n	84ba0 <memmove+0x24>
   84c46:	bf00      	nop

00084c48 <__malloc_lock>:
   84c48:	4770      	bx	lr
   84c4a:	bf00      	nop

00084c4c <__malloc_unlock>:
   84c4c:	4770      	bx	lr
   84c4e:	bf00      	nop

00084c50 <_realloc_r>:
   84c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c54:	460c      	mov	r4, r1
   84c56:	b083      	sub	sp, #12
   84c58:	4690      	mov	r8, r2
   84c5a:	4681      	mov	r9, r0
   84c5c:	2900      	cmp	r1, #0
   84c5e:	f000 80ba 	beq.w	84dd6 <_realloc_r+0x186>
   84c62:	f7ff fff1 	bl	84c48 <__malloc_lock>
   84c66:	f108 060b 	add.w	r6, r8, #11
   84c6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84c6e:	2e16      	cmp	r6, #22
   84c70:	f023 0503 	bic.w	r5, r3, #3
   84c74:	f1a4 0708 	sub.w	r7, r4, #8
   84c78:	d84b      	bhi.n	84d12 <_realloc_r+0xc2>
   84c7a:	2110      	movs	r1, #16
   84c7c:	460e      	mov	r6, r1
   84c7e:	45b0      	cmp	r8, r6
   84c80:	d84c      	bhi.n	84d1c <_realloc_r+0xcc>
   84c82:	428d      	cmp	r5, r1
   84c84:	da51      	bge.n	84d2a <_realloc_r+0xda>
   84c86:	f8df b384 	ldr.w	fp, [pc, #900]	; 8500c <_realloc_r+0x3bc>
   84c8a:	1978      	adds	r0, r7, r5
   84c8c:	f8db e008 	ldr.w	lr, [fp, #8]
   84c90:	4586      	cmp	lr, r0
   84c92:	f000 80a6 	beq.w	84de2 <_realloc_r+0x192>
   84c96:	6842      	ldr	r2, [r0, #4]
   84c98:	f022 0c01 	bic.w	ip, r2, #1
   84c9c:	4484      	add	ip, r0
   84c9e:	f8dc c004 	ldr.w	ip, [ip, #4]
   84ca2:	f01c 0f01 	tst.w	ip, #1
   84ca6:	d054      	beq.n	84d52 <_realloc_r+0x102>
   84ca8:	2200      	movs	r2, #0
   84caa:	4610      	mov	r0, r2
   84cac:	07db      	lsls	r3, r3, #31
   84cae:	d46f      	bmi.n	84d90 <_realloc_r+0x140>
   84cb0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84cb4:	ebc3 0a07 	rsb	sl, r3, r7
   84cb8:	f8da 3004 	ldr.w	r3, [sl, #4]
   84cbc:	f023 0303 	bic.w	r3, r3, #3
   84cc0:	442b      	add	r3, r5
   84cc2:	2800      	cmp	r0, #0
   84cc4:	d062      	beq.n	84d8c <_realloc_r+0x13c>
   84cc6:	4570      	cmp	r0, lr
   84cc8:	f000 80e9 	beq.w	84e9e <_realloc_r+0x24e>
   84ccc:	eb02 0e03 	add.w	lr, r2, r3
   84cd0:	458e      	cmp	lr, r1
   84cd2:	db5b      	blt.n	84d8c <_realloc_r+0x13c>
   84cd4:	68c3      	ldr	r3, [r0, #12]
   84cd6:	6882      	ldr	r2, [r0, #8]
   84cd8:	46d0      	mov	r8, sl
   84cda:	60d3      	str	r3, [r2, #12]
   84cdc:	609a      	str	r2, [r3, #8]
   84cde:	f858 1f08 	ldr.w	r1, [r8, #8]!
   84ce2:	f8da 300c 	ldr.w	r3, [sl, #12]
   84ce6:	1f2a      	subs	r2, r5, #4
   84ce8:	2a24      	cmp	r2, #36	; 0x24
   84cea:	60cb      	str	r3, [r1, #12]
   84cec:	6099      	str	r1, [r3, #8]
   84cee:	f200 8123 	bhi.w	84f38 <_realloc_r+0x2e8>
   84cf2:	2a13      	cmp	r2, #19
   84cf4:	f240 80b0 	bls.w	84e58 <_realloc_r+0x208>
   84cf8:	6823      	ldr	r3, [r4, #0]
   84cfa:	2a1b      	cmp	r2, #27
   84cfc:	f8ca 3008 	str.w	r3, [sl, #8]
   84d00:	6863      	ldr	r3, [r4, #4]
   84d02:	f8ca 300c 	str.w	r3, [sl, #12]
   84d06:	f200 812b 	bhi.w	84f60 <_realloc_r+0x310>
   84d0a:	3408      	adds	r4, #8
   84d0c:	f10a 0310 	add.w	r3, sl, #16
   84d10:	e0a3      	b.n	84e5a <_realloc_r+0x20a>
   84d12:	f026 0607 	bic.w	r6, r6, #7
   84d16:	2e00      	cmp	r6, #0
   84d18:	4631      	mov	r1, r6
   84d1a:	dab0      	bge.n	84c7e <_realloc_r+0x2e>
   84d1c:	230c      	movs	r3, #12
   84d1e:	2000      	movs	r0, #0
   84d20:	f8c9 3000 	str.w	r3, [r9]
   84d24:	b003      	add	sp, #12
   84d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d2a:	46a0      	mov	r8, r4
   84d2c:	1baa      	subs	r2, r5, r6
   84d2e:	2a0f      	cmp	r2, #15
   84d30:	f003 0301 	and.w	r3, r3, #1
   84d34:	d81a      	bhi.n	84d6c <_realloc_r+0x11c>
   84d36:	432b      	orrs	r3, r5
   84d38:	607b      	str	r3, [r7, #4]
   84d3a:	443d      	add	r5, r7
   84d3c:	686b      	ldr	r3, [r5, #4]
   84d3e:	f043 0301 	orr.w	r3, r3, #1
   84d42:	606b      	str	r3, [r5, #4]
   84d44:	4648      	mov	r0, r9
   84d46:	f7ff ff81 	bl	84c4c <__malloc_unlock>
   84d4a:	4640      	mov	r0, r8
   84d4c:	b003      	add	sp, #12
   84d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d52:	f022 0203 	bic.w	r2, r2, #3
   84d56:	eb02 0c05 	add.w	ip, r2, r5
   84d5a:	458c      	cmp	ip, r1
   84d5c:	dba6      	blt.n	84cac <_realloc_r+0x5c>
   84d5e:	68c2      	ldr	r2, [r0, #12]
   84d60:	6881      	ldr	r1, [r0, #8]
   84d62:	46a0      	mov	r8, r4
   84d64:	60ca      	str	r2, [r1, #12]
   84d66:	4665      	mov	r5, ip
   84d68:	6091      	str	r1, [r2, #8]
   84d6a:	e7df      	b.n	84d2c <_realloc_r+0xdc>
   84d6c:	19b9      	adds	r1, r7, r6
   84d6e:	4333      	orrs	r3, r6
   84d70:	f042 0001 	orr.w	r0, r2, #1
   84d74:	607b      	str	r3, [r7, #4]
   84d76:	440a      	add	r2, r1
   84d78:	6048      	str	r0, [r1, #4]
   84d7a:	6853      	ldr	r3, [r2, #4]
   84d7c:	3108      	adds	r1, #8
   84d7e:	f043 0301 	orr.w	r3, r3, #1
   84d82:	6053      	str	r3, [r2, #4]
   84d84:	4648      	mov	r0, r9
   84d86:	f7ff f89f 	bl	83ec8 <_free_r>
   84d8a:	e7db      	b.n	84d44 <_realloc_r+0xf4>
   84d8c:	428b      	cmp	r3, r1
   84d8e:	da33      	bge.n	84df8 <_realloc_r+0x1a8>
   84d90:	4641      	mov	r1, r8
   84d92:	4648      	mov	r0, r9
   84d94:	f7ff fb96 	bl	844c4 <_malloc_r>
   84d98:	4680      	mov	r8, r0
   84d9a:	2800      	cmp	r0, #0
   84d9c:	d0d2      	beq.n	84d44 <_realloc_r+0xf4>
   84d9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84da2:	f1a0 0108 	sub.w	r1, r0, #8
   84da6:	f023 0201 	bic.w	r2, r3, #1
   84daa:	443a      	add	r2, r7
   84dac:	4291      	cmp	r1, r2
   84dae:	f000 80bc 	beq.w	84f2a <_realloc_r+0x2da>
   84db2:	1f2a      	subs	r2, r5, #4
   84db4:	2a24      	cmp	r2, #36	; 0x24
   84db6:	d86e      	bhi.n	84e96 <_realloc_r+0x246>
   84db8:	2a13      	cmp	r2, #19
   84dba:	d842      	bhi.n	84e42 <_realloc_r+0x1f2>
   84dbc:	4603      	mov	r3, r0
   84dbe:	4622      	mov	r2, r4
   84dc0:	6811      	ldr	r1, [r2, #0]
   84dc2:	6019      	str	r1, [r3, #0]
   84dc4:	6851      	ldr	r1, [r2, #4]
   84dc6:	6059      	str	r1, [r3, #4]
   84dc8:	6892      	ldr	r2, [r2, #8]
   84dca:	609a      	str	r2, [r3, #8]
   84dcc:	4621      	mov	r1, r4
   84dce:	4648      	mov	r0, r9
   84dd0:	f7ff f87a 	bl	83ec8 <_free_r>
   84dd4:	e7b6      	b.n	84d44 <_realloc_r+0xf4>
   84dd6:	4611      	mov	r1, r2
   84dd8:	b003      	add	sp, #12
   84dda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84dde:	f7ff bb71 	b.w	844c4 <_malloc_r>
   84de2:	f8de 2004 	ldr.w	r2, [lr, #4]
   84de6:	f106 0c10 	add.w	ip, r6, #16
   84dea:	f022 0203 	bic.w	r2, r2, #3
   84dee:	1950      	adds	r0, r2, r5
   84df0:	4560      	cmp	r0, ip
   84df2:	da3d      	bge.n	84e70 <_realloc_r+0x220>
   84df4:	4670      	mov	r0, lr
   84df6:	e759      	b.n	84cac <_realloc_r+0x5c>
   84df8:	46d0      	mov	r8, sl
   84dfa:	f858 0f08 	ldr.w	r0, [r8, #8]!
   84dfe:	f8da 100c 	ldr.w	r1, [sl, #12]
   84e02:	1f2a      	subs	r2, r5, #4
   84e04:	2a24      	cmp	r2, #36	; 0x24
   84e06:	60c1      	str	r1, [r0, #12]
   84e08:	6088      	str	r0, [r1, #8]
   84e0a:	f200 80a0 	bhi.w	84f4e <_realloc_r+0x2fe>
   84e0e:	2a13      	cmp	r2, #19
   84e10:	f240 809b 	bls.w	84f4a <_realloc_r+0x2fa>
   84e14:	6821      	ldr	r1, [r4, #0]
   84e16:	2a1b      	cmp	r2, #27
   84e18:	f8ca 1008 	str.w	r1, [sl, #8]
   84e1c:	6861      	ldr	r1, [r4, #4]
   84e1e:	f8ca 100c 	str.w	r1, [sl, #12]
   84e22:	f200 80b2 	bhi.w	84f8a <_realloc_r+0x33a>
   84e26:	3408      	adds	r4, #8
   84e28:	f10a 0210 	add.w	r2, sl, #16
   84e2c:	6821      	ldr	r1, [r4, #0]
   84e2e:	461d      	mov	r5, r3
   84e30:	6011      	str	r1, [r2, #0]
   84e32:	6861      	ldr	r1, [r4, #4]
   84e34:	4657      	mov	r7, sl
   84e36:	6051      	str	r1, [r2, #4]
   84e38:	68a3      	ldr	r3, [r4, #8]
   84e3a:	6093      	str	r3, [r2, #8]
   84e3c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84e40:	e774      	b.n	84d2c <_realloc_r+0xdc>
   84e42:	6823      	ldr	r3, [r4, #0]
   84e44:	2a1b      	cmp	r2, #27
   84e46:	6003      	str	r3, [r0, #0]
   84e48:	6863      	ldr	r3, [r4, #4]
   84e4a:	6043      	str	r3, [r0, #4]
   84e4c:	d862      	bhi.n	84f14 <_realloc_r+0x2c4>
   84e4e:	f100 0308 	add.w	r3, r0, #8
   84e52:	f104 0208 	add.w	r2, r4, #8
   84e56:	e7b3      	b.n	84dc0 <_realloc_r+0x170>
   84e58:	4643      	mov	r3, r8
   84e5a:	6822      	ldr	r2, [r4, #0]
   84e5c:	4675      	mov	r5, lr
   84e5e:	601a      	str	r2, [r3, #0]
   84e60:	6862      	ldr	r2, [r4, #4]
   84e62:	4657      	mov	r7, sl
   84e64:	605a      	str	r2, [r3, #4]
   84e66:	68a2      	ldr	r2, [r4, #8]
   84e68:	609a      	str	r2, [r3, #8]
   84e6a:	f8da 3004 	ldr.w	r3, [sl, #4]
   84e6e:	e75d      	b.n	84d2c <_realloc_r+0xdc>
   84e70:	1b83      	subs	r3, r0, r6
   84e72:	4437      	add	r7, r6
   84e74:	f043 0301 	orr.w	r3, r3, #1
   84e78:	f8cb 7008 	str.w	r7, [fp, #8]
   84e7c:	607b      	str	r3, [r7, #4]
   84e7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84e82:	4648      	mov	r0, r9
   84e84:	f003 0301 	and.w	r3, r3, #1
   84e88:	431e      	orrs	r6, r3
   84e8a:	f844 6c04 	str.w	r6, [r4, #-4]
   84e8e:	f7ff fedd 	bl	84c4c <__malloc_unlock>
   84e92:	4620      	mov	r0, r4
   84e94:	e75a      	b.n	84d4c <_realloc_r+0xfc>
   84e96:	4621      	mov	r1, r4
   84e98:	f7ff fe70 	bl	84b7c <memmove>
   84e9c:	e796      	b.n	84dcc <_realloc_r+0x17c>
   84e9e:	eb02 0c03 	add.w	ip, r2, r3
   84ea2:	f106 0210 	add.w	r2, r6, #16
   84ea6:	4594      	cmp	ip, r2
   84ea8:	f6ff af70 	blt.w	84d8c <_realloc_r+0x13c>
   84eac:	4657      	mov	r7, sl
   84eae:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84eb2:	f8da 300c 	ldr.w	r3, [sl, #12]
   84eb6:	1f2a      	subs	r2, r5, #4
   84eb8:	2a24      	cmp	r2, #36	; 0x24
   84eba:	60cb      	str	r3, [r1, #12]
   84ebc:	6099      	str	r1, [r3, #8]
   84ebe:	f200 8086 	bhi.w	84fce <_realloc_r+0x37e>
   84ec2:	2a13      	cmp	r2, #19
   84ec4:	d977      	bls.n	84fb6 <_realloc_r+0x366>
   84ec6:	6823      	ldr	r3, [r4, #0]
   84ec8:	2a1b      	cmp	r2, #27
   84eca:	f8ca 3008 	str.w	r3, [sl, #8]
   84ece:	6863      	ldr	r3, [r4, #4]
   84ed0:	f8ca 300c 	str.w	r3, [sl, #12]
   84ed4:	f200 8084 	bhi.w	84fe0 <_realloc_r+0x390>
   84ed8:	3408      	adds	r4, #8
   84eda:	f10a 0310 	add.w	r3, sl, #16
   84ede:	6822      	ldr	r2, [r4, #0]
   84ee0:	601a      	str	r2, [r3, #0]
   84ee2:	6862      	ldr	r2, [r4, #4]
   84ee4:	605a      	str	r2, [r3, #4]
   84ee6:	68a2      	ldr	r2, [r4, #8]
   84ee8:	609a      	str	r2, [r3, #8]
   84eea:	ebc6 020c 	rsb	r2, r6, ip
   84eee:	eb0a 0306 	add.w	r3, sl, r6
   84ef2:	f042 0201 	orr.w	r2, r2, #1
   84ef6:	f8cb 3008 	str.w	r3, [fp, #8]
   84efa:	605a      	str	r2, [r3, #4]
   84efc:	f8da 3004 	ldr.w	r3, [sl, #4]
   84f00:	4648      	mov	r0, r9
   84f02:	f003 0301 	and.w	r3, r3, #1
   84f06:	431e      	orrs	r6, r3
   84f08:	f8ca 6004 	str.w	r6, [sl, #4]
   84f0c:	f7ff fe9e 	bl	84c4c <__malloc_unlock>
   84f10:	4638      	mov	r0, r7
   84f12:	e71b      	b.n	84d4c <_realloc_r+0xfc>
   84f14:	68a3      	ldr	r3, [r4, #8]
   84f16:	2a24      	cmp	r2, #36	; 0x24
   84f18:	6083      	str	r3, [r0, #8]
   84f1a:	68e3      	ldr	r3, [r4, #12]
   84f1c:	60c3      	str	r3, [r0, #12]
   84f1e:	d02b      	beq.n	84f78 <_realloc_r+0x328>
   84f20:	f100 0310 	add.w	r3, r0, #16
   84f24:	f104 0210 	add.w	r2, r4, #16
   84f28:	e74a      	b.n	84dc0 <_realloc_r+0x170>
   84f2a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   84f2e:	46a0      	mov	r8, r4
   84f30:	f022 0203 	bic.w	r2, r2, #3
   84f34:	4415      	add	r5, r2
   84f36:	e6f9      	b.n	84d2c <_realloc_r+0xdc>
   84f38:	4621      	mov	r1, r4
   84f3a:	4640      	mov	r0, r8
   84f3c:	4675      	mov	r5, lr
   84f3e:	4657      	mov	r7, sl
   84f40:	f7ff fe1c 	bl	84b7c <memmove>
   84f44:	f8da 3004 	ldr.w	r3, [sl, #4]
   84f48:	e6f0      	b.n	84d2c <_realloc_r+0xdc>
   84f4a:	4642      	mov	r2, r8
   84f4c:	e76e      	b.n	84e2c <_realloc_r+0x1dc>
   84f4e:	4621      	mov	r1, r4
   84f50:	4640      	mov	r0, r8
   84f52:	461d      	mov	r5, r3
   84f54:	4657      	mov	r7, sl
   84f56:	f7ff fe11 	bl	84b7c <memmove>
   84f5a:	f8da 3004 	ldr.w	r3, [sl, #4]
   84f5e:	e6e5      	b.n	84d2c <_realloc_r+0xdc>
   84f60:	68a3      	ldr	r3, [r4, #8]
   84f62:	2a24      	cmp	r2, #36	; 0x24
   84f64:	f8ca 3010 	str.w	r3, [sl, #16]
   84f68:	68e3      	ldr	r3, [r4, #12]
   84f6a:	f8ca 3014 	str.w	r3, [sl, #20]
   84f6e:	d018      	beq.n	84fa2 <_realloc_r+0x352>
   84f70:	3410      	adds	r4, #16
   84f72:	f10a 0318 	add.w	r3, sl, #24
   84f76:	e770      	b.n	84e5a <_realloc_r+0x20a>
   84f78:	6922      	ldr	r2, [r4, #16]
   84f7a:	f100 0318 	add.w	r3, r0, #24
   84f7e:	6102      	str	r2, [r0, #16]
   84f80:	6961      	ldr	r1, [r4, #20]
   84f82:	f104 0218 	add.w	r2, r4, #24
   84f86:	6141      	str	r1, [r0, #20]
   84f88:	e71a      	b.n	84dc0 <_realloc_r+0x170>
   84f8a:	68a1      	ldr	r1, [r4, #8]
   84f8c:	2a24      	cmp	r2, #36	; 0x24
   84f8e:	f8ca 1010 	str.w	r1, [sl, #16]
   84f92:	68e1      	ldr	r1, [r4, #12]
   84f94:	f8ca 1014 	str.w	r1, [sl, #20]
   84f98:	d00f      	beq.n	84fba <_realloc_r+0x36a>
   84f9a:	3410      	adds	r4, #16
   84f9c:	f10a 0218 	add.w	r2, sl, #24
   84fa0:	e744      	b.n	84e2c <_realloc_r+0x1dc>
   84fa2:	6922      	ldr	r2, [r4, #16]
   84fa4:	f10a 0320 	add.w	r3, sl, #32
   84fa8:	f8ca 2018 	str.w	r2, [sl, #24]
   84fac:	6962      	ldr	r2, [r4, #20]
   84fae:	3418      	adds	r4, #24
   84fb0:	f8ca 201c 	str.w	r2, [sl, #28]
   84fb4:	e751      	b.n	84e5a <_realloc_r+0x20a>
   84fb6:	463b      	mov	r3, r7
   84fb8:	e791      	b.n	84ede <_realloc_r+0x28e>
   84fba:	6921      	ldr	r1, [r4, #16]
   84fbc:	f10a 0220 	add.w	r2, sl, #32
   84fc0:	f8ca 1018 	str.w	r1, [sl, #24]
   84fc4:	6961      	ldr	r1, [r4, #20]
   84fc6:	3418      	adds	r4, #24
   84fc8:	f8ca 101c 	str.w	r1, [sl, #28]
   84fcc:	e72e      	b.n	84e2c <_realloc_r+0x1dc>
   84fce:	4621      	mov	r1, r4
   84fd0:	4638      	mov	r0, r7
   84fd2:	f8cd c004 	str.w	ip, [sp, #4]
   84fd6:	f7ff fdd1 	bl	84b7c <memmove>
   84fda:	f8dd c004 	ldr.w	ip, [sp, #4]
   84fde:	e784      	b.n	84eea <_realloc_r+0x29a>
   84fe0:	68a3      	ldr	r3, [r4, #8]
   84fe2:	2a24      	cmp	r2, #36	; 0x24
   84fe4:	f8ca 3010 	str.w	r3, [sl, #16]
   84fe8:	68e3      	ldr	r3, [r4, #12]
   84fea:	f8ca 3014 	str.w	r3, [sl, #20]
   84fee:	d003      	beq.n	84ff8 <_realloc_r+0x3a8>
   84ff0:	3410      	adds	r4, #16
   84ff2:	f10a 0318 	add.w	r3, sl, #24
   84ff6:	e772      	b.n	84ede <_realloc_r+0x28e>
   84ff8:	6922      	ldr	r2, [r4, #16]
   84ffa:	f10a 0320 	add.w	r3, sl, #32
   84ffe:	f8ca 2018 	str.w	r2, [sl, #24]
   85002:	6962      	ldr	r2, [r4, #20]
   85004:	3418      	adds	r4, #24
   85006:	f8ca 201c 	str.w	r2, [sl, #28]
   8500a:	e768      	b.n	84ede <_realloc_r+0x28e>
   8500c:	20070598 	.word	0x20070598

00085010 <_sbrk_r>:
   85010:	b538      	push	{r3, r4, r5, lr}
   85012:	4c07      	ldr	r4, [pc, #28]	; (85030 <_sbrk_r+0x20>)
   85014:	2300      	movs	r3, #0
   85016:	4605      	mov	r5, r0
   85018:	4608      	mov	r0, r1
   8501a:	6023      	str	r3, [r4, #0]
   8501c:	f7fc fa44 	bl	814a8 <_sbrk>
   85020:	1c43      	adds	r3, r0, #1
   85022:	d000      	beq.n	85026 <_sbrk_r+0x16>
   85024:	bd38      	pop	{r3, r4, r5, pc}
   85026:	6823      	ldr	r3, [r4, #0]
   85028:	2b00      	cmp	r3, #0
   8502a:	d0fb      	beq.n	85024 <_sbrk_r+0x14>
   8502c:	602b      	str	r3, [r5, #0]
   8502e:	bd38      	pop	{r3, r4, r5, pc}
   85030:	20070b74 	.word	0x20070b74

00085034 <__sread>:
   85034:	b510      	push	{r4, lr}
   85036:	460c      	mov	r4, r1
   85038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8503c:	f000 f9c2 	bl	853c4 <_read_r>
   85040:	2800      	cmp	r0, #0
   85042:	db03      	blt.n	8504c <__sread+0x18>
   85044:	6d23      	ldr	r3, [r4, #80]	; 0x50
   85046:	4403      	add	r3, r0
   85048:	6523      	str	r3, [r4, #80]	; 0x50
   8504a:	bd10      	pop	{r4, pc}
   8504c:	89a3      	ldrh	r3, [r4, #12]
   8504e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   85052:	81a3      	strh	r3, [r4, #12]
   85054:	bd10      	pop	{r4, pc}
   85056:	bf00      	nop

00085058 <__swrite>:
   85058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8505c:	460c      	mov	r4, r1
   8505e:	8989      	ldrh	r1, [r1, #12]
   85060:	461d      	mov	r5, r3
   85062:	05cb      	lsls	r3, r1, #23
   85064:	4616      	mov	r6, r2
   85066:	4607      	mov	r7, r0
   85068:	d506      	bpl.n	85078 <__swrite+0x20>
   8506a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8506e:	2200      	movs	r2, #0
   85070:	2302      	movs	r3, #2
   85072:	f000 f993 	bl	8539c <_lseek_r>
   85076:	89a1      	ldrh	r1, [r4, #12]
   85078:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8507c:	81a1      	strh	r1, [r4, #12]
   8507e:	4638      	mov	r0, r7
   85080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85084:	4632      	mov	r2, r6
   85086:	462b      	mov	r3, r5
   85088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8508c:	f000 b89e 	b.w	851cc <_write_r>

00085090 <__sseek>:
   85090:	b510      	push	{r4, lr}
   85092:	460c      	mov	r4, r1
   85094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85098:	f000 f980 	bl	8539c <_lseek_r>
   8509c:	89a3      	ldrh	r3, [r4, #12]
   8509e:	1c42      	adds	r2, r0, #1
   850a0:	bf0e      	itee	eq
   850a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   850a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   850aa:	6520      	strne	r0, [r4, #80]	; 0x50
   850ac:	81a3      	strh	r3, [r4, #12]
   850ae:	bd10      	pop	{r4, pc}

000850b0 <__sclose>:
   850b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   850b4:	f000 b8f2 	b.w	8529c <_close_r>

000850b8 <__swbuf_r>:
   850b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   850ba:	460d      	mov	r5, r1
   850bc:	4614      	mov	r4, r2
   850be:	4607      	mov	r7, r0
   850c0:	b110      	cbz	r0, 850c8 <__swbuf_r+0x10>
   850c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   850c4:	2b00      	cmp	r3, #0
   850c6:	d048      	beq.n	8515a <__swbuf_r+0xa2>
   850c8:	89a2      	ldrh	r2, [r4, #12]
   850ca:	69a0      	ldr	r0, [r4, #24]
   850cc:	b293      	uxth	r3, r2
   850ce:	60a0      	str	r0, [r4, #8]
   850d0:	0718      	lsls	r0, r3, #28
   850d2:	d538      	bpl.n	85146 <__swbuf_r+0x8e>
   850d4:	6926      	ldr	r6, [r4, #16]
   850d6:	2e00      	cmp	r6, #0
   850d8:	d035      	beq.n	85146 <__swbuf_r+0x8e>
   850da:	0499      	lsls	r1, r3, #18
   850dc:	b2ed      	uxtb	r5, r5
   850de:	d515      	bpl.n	8510c <__swbuf_r+0x54>
   850e0:	6823      	ldr	r3, [r4, #0]
   850e2:	6962      	ldr	r2, [r4, #20]
   850e4:	1b9e      	subs	r6, r3, r6
   850e6:	4296      	cmp	r6, r2
   850e8:	da1c      	bge.n	85124 <__swbuf_r+0x6c>
   850ea:	3601      	adds	r6, #1
   850ec:	68a2      	ldr	r2, [r4, #8]
   850ee:	1c59      	adds	r1, r3, #1
   850f0:	3a01      	subs	r2, #1
   850f2:	60a2      	str	r2, [r4, #8]
   850f4:	6021      	str	r1, [r4, #0]
   850f6:	701d      	strb	r5, [r3, #0]
   850f8:	6963      	ldr	r3, [r4, #20]
   850fa:	42b3      	cmp	r3, r6
   850fc:	d01a      	beq.n	85134 <__swbuf_r+0x7c>
   850fe:	89a3      	ldrh	r3, [r4, #12]
   85100:	07db      	lsls	r3, r3, #31
   85102:	d501      	bpl.n	85108 <__swbuf_r+0x50>
   85104:	2d0a      	cmp	r5, #10
   85106:	d015      	beq.n	85134 <__swbuf_r+0x7c>
   85108:	4628      	mov	r0, r5
   8510a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8510c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8510e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   85116:	6663      	str	r3, [r4, #100]	; 0x64
   85118:	6823      	ldr	r3, [r4, #0]
   8511a:	81a2      	strh	r2, [r4, #12]
   8511c:	6962      	ldr	r2, [r4, #20]
   8511e:	1b9e      	subs	r6, r3, r6
   85120:	4296      	cmp	r6, r2
   85122:	dbe2      	blt.n	850ea <__swbuf_r+0x32>
   85124:	4638      	mov	r0, r7
   85126:	4621      	mov	r1, r4
   85128:	f7fe fd6e 	bl	83c08 <_fflush_r>
   8512c:	b940      	cbnz	r0, 85140 <__swbuf_r+0x88>
   8512e:	6823      	ldr	r3, [r4, #0]
   85130:	2601      	movs	r6, #1
   85132:	e7db      	b.n	850ec <__swbuf_r+0x34>
   85134:	4638      	mov	r0, r7
   85136:	4621      	mov	r1, r4
   85138:	f7fe fd66 	bl	83c08 <_fflush_r>
   8513c:	2800      	cmp	r0, #0
   8513e:	d0e3      	beq.n	85108 <__swbuf_r+0x50>
   85140:	f04f 30ff 	mov.w	r0, #4294967295
   85144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85146:	4638      	mov	r0, r7
   85148:	4621      	mov	r1, r4
   8514a:	f7fe fc47 	bl	839dc <__swsetup_r>
   8514e:	2800      	cmp	r0, #0
   85150:	d1f6      	bne.n	85140 <__swbuf_r+0x88>
   85152:	89a2      	ldrh	r2, [r4, #12]
   85154:	6926      	ldr	r6, [r4, #16]
   85156:	b293      	uxth	r3, r2
   85158:	e7bf      	b.n	850da <__swbuf_r+0x22>
   8515a:	f7fe fd71 	bl	83c40 <__sinit>
   8515e:	e7b3      	b.n	850c8 <__swbuf_r+0x10>

00085160 <_wcrtomb_r>:
   85160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85164:	461e      	mov	r6, r3
   85166:	b086      	sub	sp, #24
   85168:	460c      	mov	r4, r1
   8516a:	4605      	mov	r5, r0
   8516c:	4617      	mov	r7, r2
   8516e:	4b0f      	ldr	r3, [pc, #60]	; (851ac <_wcrtomb_r+0x4c>)
   85170:	b191      	cbz	r1, 85198 <_wcrtomb_r+0x38>
   85172:	f8d3 8000 	ldr.w	r8, [r3]
   85176:	f7ff f923 	bl	843c0 <__locale_charset>
   8517a:	9600      	str	r6, [sp, #0]
   8517c:	4603      	mov	r3, r0
   8517e:	4621      	mov	r1, r4
   85180:	463a      	mov	r2, r7
   85182:	4628      	mov	r0, r5
   85184:	47c0      	blx	r8
   85186:	1c43      	adds	r3, r0, #1
   85188:	d103      	bne.n	85192 <_wcrtomb_r+0x32>
   8518a:	2200      	movs	r2, #0
   8518c:	238a      	movs	r3, #138	; 0x8a
   8518e:	6032      	str	r2, [r6, #0]
   85190:	602b      	str	r3, [r5, #0]
   85192:	b006      	add	sp, #24
   85194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85198:	681f      	ldr	r7, [r3, #0]
   8519a:	f7ff f911 	bl	843c0 <__locale_charset>
   8519e:	9600      	str	r6, [sp, #0]
   851a0:	4603      	mov	r3, r0
   851a2:	4622      	mov	r2, r4
   851a4:	4628      	mov	r0, r5
   851a6:	a903      	add	r1, sp, #12
   851a8:	47b8      	blx	r7
   851aa:	e7ec      	b.n	85186 <_wcrtomb_r+0x26>
   851ac:	200709a8 	.word	0x200709a8

000851b0 <__ascii_wctomb>:
   851b0:	b121      	cbz	r1, 851bc <__ascii_wctomb+0xc>
   851b2:	2aff      	cmp	r2, #255	; 0xff
   851b4:	d804      	bhi.n	851c0 <__ascii_wctomb+0x10>
   851b6:	700a      	strb	r2, [r1, #0]
   851b8:	2001      	movs	r0, #1
   851ba:	4770      	bx	lr
   851bc:	4608      	mov	r0, r1
   851be:	4770      	bx	lr
   851c0:	238a      	movs	r3, #138	; 0x8a
   851c2:	6003      	str	r3, [r0, #0]
   851c4:	f04f 30ff 	mov.w	r0, #4294967295
   851c8:	4770      	bx	lr
   851ca:	bf00      	nop

000851cc <_write_r>:
   851cc:	b570      	push	{r4, r5, r6, lr}
   851ce:	4c08      	ldr	r4, [pc, #32]	; (851f0 <_write_r+0x24>)
   851d0:	4606      	mov	r6, r0
   851d2:	2500      	movs	r5, #0
   851d4:	4608      	mov	r0, r1
   851d6:	4611      	mov	r1, r2
   851d8:	461a      	mov	r2, r3
   851da:	6025      	str	r5, [r4, #0]
   851dc:	f7fb f8ba 	bl	80354 <_write>
   851e0:	1c43      	adds	r3, r0, #1
   851e2:	d000      	beq.n	851e6 <_write_r+0x1a>
   851e4:	bd70      	pop	{r4, r5, r6, pc}
   851e6:	6823      	ldr	r3, [r4, #0]
   851e8:	2b00      	cmp	r3, #0
   851ea:	d0fb      	beq.n	851e4 <_write_r+0x18>
   851ec:	6033      	str	r3, [r6, #0]
   851ee:	bd70      	pop	{r4, r5, r6, pc}
   851f0:	20070b74 	.word	0x20070b74

000851f4 <__register_exitproc>:
   851f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   851f6:	4c27      	ldr	r4, [pc, #156]	; (85294 <__register_exitproc+0xa0>)
   851f8:	b085      	sub	sp, #20
   851fa:	6826      	ldr	r6, [r4, #0]
   851fc:	4607      	mov	r7, r0
   851fe:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   85202:	2c00      	cmp	r4, #0
   85204:	d040      	beq.n	85288 <__register_exitproc+0x94>
   85206:	6865      	ldr	r5, [r4, #4]
   85208:	2d1f      	cmp	r5, #31
   8520a:	dd1e      	ble.n	8524a <__register_exitproc+0x56>
   8520c:	4822      	ldr	r0, [pc, #136]	; (85298 <__register_exitproc+0xa4>)
   8520e:	b918      	cbnz	r0, 85218 <__register_exitproc+0x24>
   85210:	f04f 30ff 	mov.w	r0, #4294967295
   85214:	b005      	add	sp, #20
   85216:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85218:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8521c:	9103      	str	r1, [sp, #12]
   8521e:	9202      	str	r2, [sp, #8]
   85220:	9301      	str	r3, [sp, #4]
   85222:	f7ff f947 	bl	844b4 <malloc>
   85226:	9903      	ldr	r1, [sp, #12]
   85228:	4604      	mov	r4, r0
   8522a:	9a02      	ldr	r2, [sp, #8]
   8522c:	9b01      	ldr	r3, [sp, #4]
   8522e:	2800      	cmp	r0, #0
   85230:	d0ee      	beq.n	85210 <__register_exitproc+0x1c>
   85232:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   85236:	2000      	movs	r0, #0
   85238:	6025      	str	r5, [r4, #0]
   8523a:	6060      	str	r0, [r4, #4]
   8523c:	4605      	mov	r5, r0
   8523e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85242:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   85246:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8524a:	b93f      	cbnz	r7, 8525c <__register_exitproc+0x68>
   8524c:	1c6b      	adds	r3, r5, #1
   8524e:	2000      	movs	r0, #0
   85250:	3502      	adds	r5, #2
   85252:	6063      	str	r3, [r4, #4]
   85254:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   85258:	b005      	add	sp, #20
   8525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8525c:	2601      	movs	r6, #1
   8525e:	40ae      	lsls	r6, r5
   85260:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   85264:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   85268:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8526c:	2f02      	cmp	r7, #2
   8526e:	ea42 0206 	orr.w	r2, r2, r6
   85272:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   85276:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8527a:	d1e7      	bne.n	8524c <__register_exitproc+0x58>
   8527c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   85280:	431e      	orrs	r6, r3
   85282:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   85286:	e7e1      	b.n	8524c <__register_exitproc+0x58>
   85288:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   8528c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85290:	e7b9      	b.n	85206 <__register_exitproc+0x12>
   85292:	bf00      	nop
   85294:	00085a4c 	.word	0x00085a4c
   85298:	000844b5 	.word	0x000844b5

0008529c <_close_r>:
   8529c:	b538      	push	{r3, r4, r5, lr}
   8529e:	4c07      	ldr	r4, [pc, #28]	; (852bc <_close_r+0x20>)
   852a0:	2300      	movs	r3, #0
   852a2:	4605      	mov	r5, r0
   852a4:	4608      	mov	r0, r1
   852a6:	6023      	str	r3, [r4, #0]
   852a8:	f7fc f918 	bl	814dc <_close>
   852ac:	1c43      	adds	r3, r0, #1
   852ae:	d000      	beq.n	852b2 <_close_r+0x16>
   852b0:	bd38      	pop	{r3, r4, r5, pc}
   852b2:	6823      	ldr	r3, [r4, #0]
   852b4:	2b00      	cmp	r3, #0
   852b6:	d0fb      	beq.n	852b0 <_close_r+0x14>
   852b8:	602b      	str	r3, [r5, #0]
   852ba:	bd38      	pop	{r3, r4, r5, pc}
   852bc:	20070b74 	.word	0x20070b74

000852c0 <_fclose_r>:
   852c0:	b570      	push	{r4, r5, r6, lr}
   852c2:	460c      	mov	r4, r1
   852c4:	4605      	mov	r5, r0
   852c6:	b131      	cbz	r1, 852d6 <_fclose_r+0x16>
   852c8:	b110      	cbz	r0, 852d0 <_fclose_r+0x10>
   852ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   852cc:	2b00      	cmp	r3, #0
   852ce:	d02f      	beq.n	85330 <_fclose_r+0x70>
   852d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   852d4:	b90b      	cbnz	r3, 852da <_fclose_r+0x1a>
   852d6:	2000      	movs	r0, #0
   852d8:	bd70      	pop	{r4, r5, r6, pc}
   852da:	4628      	mov	r0, r5
   852dc:	4621      	mov	r1, r4
   852de:	f7fe fc93 	bl	83c08 <_fflush_r>
   852e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   852e4:	4606      	mov	r6, r0
   852e6:	b133      	cbz	r3, 852f6 <_fclose_r+0x36>
   852e8:	4628      	mov	r0, r5
   852ea:	69e1      	ldr	r1, [r4, #28]
   852ec:	4798      	blx	r3
   852ee:	2800      	cmp	r0, #0
   852f0:	bfb8      	it	lt
   852f2:	f04f 36ff 	movlt.w	r6, #4294967295
   852f6:	89a3      	ldrh	r3, [r4, #12]
   852f8:	061b      	lsls	r3, r3, #24
   852fa:	d41c      	bmi.n	85336 <_fclose_r+0x76>
   852fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   852fe:	b141      	cbz	r1, 85312 <_fclose_r+0x52>
   85300:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85304:	4299      	cmp	r1, r3
   85306:	d002      	beq.n	8530e <_fclose_r+0x4e>
   85308:	4628      	mov	r0, r5
   8530a:	f7fe fddd 	bl	83ec8 <_free_r>
   8530e:	2300      	movs	r3, #0
   85310:	6323      	str	r3, [r4, #48]	; 0x30
   85312:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85314:	b121      	cbz	r1, 85320 <_fclose_r+0x60>
   85316:	4628      	mov	r0, r5
   85318:	f7fe fdd6 	bl	83ec8 <_free_r>
   8531c:	2300      	movs	r3, #0
   8531e:	6463      	str	r3, [r4, #68]	; 0x44
   85320:	f7fe fd08 	bl	83d34 <__sfp_lock_acquire>
   85324:	2300      	movs	r3, #0
   85326:	81a3      	strh	r3, [r4, #12]
   85328:	f7fe fd06 	bl	83d38 <__sfp_lock_release>
   8532c:	4630      	mov	r0, r6
   8532e:	bd70      	pop	{r4, r5, r6, pc}
   85330:	f7fe fc86 	bl	83c40 <__sinit>
   85334:	e7cc      	b.n	852d0 <_fclose_r+0x10>
   85336:	4628      	mov	r0, r5
   85338:	6921      	ldr	r1, [r4, #16]
   8533a:	f7fe fdc5 	bl	83ec8 <_free_r>
   8533e:	e7dd      	b.n	852fc <_fclose_r+0x3c>

00085340 <fclose>:
   85340:	4b02      	ldr	r3, [pc, #8]	; (8534c <fclose+0xc>)
   85342:	4601      	mov	r1, r0
   85344:	6818      	ldr	r0, [r3, #0]
   85346:	f7ff bfbb 	b.w	852c0 <_fclose_r>
   8534a:	bf00      	nop
   8534c:	20070570 	.word	0x20070570

00085350 <_fstat_r>:
   85350:	b538      	push	{r3, r4, r5, lr}
   85352:	4c08      	ldr	r4, [pc, #32]	; (85374 <_fstat_r+0x24>)
   85354:	2300      	movs	r3, #0
   85356:	4605      	mov	r5, r0
   85358:	4608      	mov	r0, r1
   8535a:	4611      	mov	r1, r2
   8535c:	6023      	str	r3, [r4, #0]
   8535e:	f7fc f8c1 	bl	814e4 <_fstat>
   85362:	1c43      	adds	r3, r0, #1
   85364:	d000      	beq.n	85368 <_fstat_r+0x18>
   85366:	bd38      	pop	{r3, r4, r5, pc}
   85368:	6823      	ldr	r3, [r4, #0]
   8536a:	2b00      	cmp	r3, #0
   8536c:	d0fb      	beq.n	85366 <_fstat_r+0x16>
   8536e:	602b      	str	r3, [r5, #0]
   85370:	bd38      	pop	{r3, r4, r5, pc}
   85372:	bf00      	nop
   85374:	20070b74 	.word	0x20070b74

00085378 <_isatty_r>:
   85378:	b538      	push	{r3, r4, r5, lr}
   8537a:	4c07      	ldr	r4, [pc, #28]	; (85398 <_isatty_r+0x20>)
   8537c:	2300      	movs	r3, #0
   8537e:	4605      	mov	r5, r0
   85380:	4608      	mov	r0, r1
   85382:	6023      	str	r3, [r4, #0]
   85384:	f7fc f8b4 	bl	814f0 <_isatty>
   85388:	1c43      	adds	r3, r0, #1
   8538a:	d000      	beq.n	8538e <_isatty_r+0x16>
   8538c:	bd38      	pop	{r3, r4, r5, pc}
   8538e:	6823      	ldr	r3, [r4, #0]
   85390:	2b00      	cmp	r3, #0
   85392:	d0fb      	beq.n	8538c <_isatty_r+0x14>
   85394:	602b      	str	r3, [r5, #0]
   85396:	bd38      	pop	{r3, r4, r5, pc}
   85398:	20070b74 	.word	0x20070b74

0008539c <_lseek_r>:
   8539c:	b570      	push	{r4, r5, r6, lr}
   8539e:	4c08      	ldr	r4, [pc, #32]	; (853c0 <_lseek_r+0x24>)
   853a0:	4606      	mov	r6, r0
   853a2:	2500      	movs	r5, #0
   853a4:	4608      	mov	r0, r1
   853a6:	4611      	mov	r1, r2
   853a8:	461a      	mov	r2, r3
   853aa:	6025      	str	r5, [r4, #0]
   853ac:	f7fc f8a2 	bl	814f4 <_lseek>
   853b0:	1c43      	adds	r3, r0, #1
   853b2:	d000      	beq.n	853b6 <_lseek_r+0x1a>
   853b4:	bd70      	pop	{r4, r5, r6, pc}
   853b6:	6823      	ldr	r3, [r4, #0]
   853b8:	2b00      	cmp	r3, #0
   853ba:	d0fb      	beq.n	853b4 <_lseek_r+0x18>
   853bc:	6033      	str	r3, [r6, #0]
   853be:	bd70      	pop	{r4, r5, r6, pc}
   853c0:	20070b74 	.word	0x20070b74

000853c4 <_read_r>:
   853c4:	b570      	push	{r4, r5, r6, lr}
   853c6:	4c08      	ldr	r4, [pc, #32]	; (853e8 <_read_r+0x24>)
   853c8:	4606      	mov	r6, r0
   853ca:	2500      	movs	r5, #0
   853cc:	4608      	mov	r0, r1
   853ce:	4611      	mov	r1, r2
   853d0:	461a      	mov	r2, r3
   853d2:	6025      	str	r5, [r4, #0]
   853d4:	f7fa ff9e 	bl	80314 <_read>
   853d8:	1c43      	adds	r3, r0, #1
   853da:	d000      	beq.n	853de <_read_r+0x1a>
   853dc:	bd70      	pop	{r4, r5, r6, pc}
   853de:	6823      	ldr	r3, [r4, #0]
   853e0:	2b00      	cmp	r3, #0
   853e2:	d0fb      	beq.n	853dc <_read_r+0x18>
   853e4:	6033      	str	r3, [r6, #0]
   853e6:	bd70      	pop	{r4, r5, r6, pc}
   853e8:	20070b74 	.word	0x20070b74

000853ec <__aeabi_uldivmod>:
   853ec:	b94b      	cbnz	r3, 85402 <__aeabi_uldivmod+0x16>
   853ee:	b942      	cbnz	r2, 85402 <__aeabi_uldivmod+0x16>
   853f0:	2900      	cmp	r1, #0
   853f2:	bf08      	it	eq
   853f4:	2800      	cmpeq	r0, #0
   853f6:	d002      	beq.n	853fe <__aeabi_uldivmod+0x12>
   853f8:	f04f 31ff 	mov.w	r1, #4294967295
   853fc:	4608      	mov	r0, r1
   853fe:	f000 b83b 	b.w	85478 <__aeabi_idiv0>
   85402:	b082      	sub	sp, #8
   85404:	46ec      	mov	ip, sp
   85406:	e92d 5000 	stmdb	sp!, {ip, lr}
   8540a:	f000 f81d 	bl	85448 <__gnu_uldivmod_helper>
   8540e:	f8dd e004 	ldr.w	lr, [sp, #4]
   85412:	b002      	add	sp, #8
   85414:	bc0c      	pop	{r2, r3}
   85416:	4770      	bx	lr

00085418 <__gnu_ldivmod_helper>:
   85418:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8541c:	9e08      	ldr	r6, [sp, #32]
   8541e:	4614      	mov	r4, r2
   85420:	461d      	mov	r5, r3
   85422:	4680      	mov	r8, r0
   85424:	4689      	mov	r9, r1
   85426:	f000 f829 	bl	8547c <__divdi3>
   8542a:	fb04 f301 	mul.w	r3, r4, r1
   8542e:	fba4 ab00 	umull	sl, fp, r4, r0
   85432:	fb00 3205 	mla	r2, r0, r5, r3
   85436:	4493      	add	fp, r2
   85438:	ebb8 080a 	subs.w	r8, r8, sl
   8543c:	eb69 090b 	sbc.w	r9, r9, fp
   85440:	e9c6 8900 	strd	r8, r9, [r6]
   85444:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085448 <__gnu_uldivmod_helper>:
   85448:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8544c:	9e08      	ldr	r6, [sp, #32]
   8544e:	4614      	mov	r4, r2
   85450:	461d      	mov	r5, r3
   85452:	4680      	mov	r8, r0
   85454:	4689      	mov	r9, r1
   85456:	f000 f961 	bl	8571c <__udivdi3>
   8545a:	fb00 f505 	mul.w	r5, r0, r5
   8545e:	fba0 ab04 	umull	sl, fp, r0, r4
   85462:	fb04 5401 	mla	r4, r4, r1, r5
   85466:	44a3      	add	fp, r4
   85468:	ebb8 080a 	subs.w	r8, r8, sl
   8546c:	eb69 090b 	sbc.w	r9, r9, fp
   85470:	e9c6 8900 	strd	r8, r9, [r6]
   85474:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085478 <__aeabi_idiv0>:
   85478:	4770      	bx	lr
   8547a:	bf00      	nop

0008547c <__divdi3>:
   8547c:	2900      	cmp	r1, #0
   8547e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85482:	f2c0 80a1 	blt.w	855c8 <__divdi3+0x14c>
   85486:	2400      	movs	r4, #0
   85488:	2b00      	cmp	r3, #0
   8548a:	f2c0 8098 	blt.w	855be <__divdi3+0x142>
   8548e:	4615      	mov	r5, r2
   85490:	4606      	mov	r6, r0
   85492:	460f      	mov	r7, r1
   85494:	2b00      	cmp	r3, #0
   85496:	d13f      	bne.n	85518 <__divdi3+0x9c>
   85498:	428a      	cmp	r2, r1
   8549a:	d958      	bls.n	8554e <__divdi3+0xd2>
   8549c:	fab2 f382 	clz	r3, r2
   854a0:	b14b      	cbz	r3, 854b6 <__divdi3+0x3a>
   854a2:	f1c3 0220 	rsb	r2, r3, #32
   854a6:	fa01 f703 	lsl.w	r7, r1, r3
   854aa:	fa20 f202 	lsr.w	r2, r0, r2
   854ae:	409d      	lsls	r5, r3
   854b0:	fa00 f603 	lsl.w	r6, r0, r3
   854b4:	4317      	orrs	r7, r2
   854b6:	0c29      	lsrs	r1, r5, #16
   854b8:	fbb7 f2f1 	udiv	r2, r7, r1
   854bc:	fb01 7712 	mls	r7, r1, r2, r7
   854c0:	b2a8      	uxth	r0, r5
   854c2:	fb00 f302 	mul.w	r3, r0, r2
   854c6:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   854ca:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   854ce:	42bb      	cmp	r3, r7
   854d0:	d909      	bls.n	854e6 <__divdi3+0x6a>
   854d2:	197f      	adds	r7, r7, r5
   854d4:	f102 3cff 	add.w	ip, r2, #4294967295
   854d8:	f080 8105 	bcs.w	856e6 <__divdi3+0x26a>
   854dc:	42bb      	cmp	r3, r7
   854de:	f240 8102 	bls.w	856e6 <__divdi3+0x26a>
   854e2:	3a02      	subs	r2, #2
   854e4:	442f      	add	r7, r5
   854e6:	1aff      	subs	r7, r7, r3
   854e8:	fbb7 f3f1 	udiv	r3, r7, r1
   854ec:	fb01 7113 	mls	r1, r1, r3, r7
   854f0:	fb00 f003 	mul.w	r0, r0, r3
   854f4:	b2b6      	uxth	r6, r6
   854f6:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   854fa:	4288      	cmp	r0, r1
   854fc:	d908      	bls.n	85510 <__divdi3+0x94>
   854fe:	1949      	adds	r1, r1, r5
   85500:	f103 37ff 	add.w	r7, r3, #4294967295
   85504:	f080 80f1 	bcs.w	856ea <__divdi3+0x26e>
   85508:	4288      	cmp	r0, r1
   8550a:	f240 80ee 	bls.w	856ea <__divdi3+0x26e>
   8550e:	3b02      	subs	r3, #2
   85510:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85514:	2300      	movs	r3, #0
   85516:	e003      	b.n	85520 <__divdi3+0xa4>
   85518:	428b      	cmp	r3, r1
   8551a:	d90a      	bls.n	85532 <__divdi3+0xb6>
   8551c:	2300      	movs	r3, #0
   8551e:	461a      	mov	r2, r3
   85520:	4610      	mov	r0, r2
   85522:	4619      	mov	r1, r3
   85524:	b114      	cbz	r4, 8552c <__divdi3+0xb0>
   85526:	4240      	negs	r0, r0
   85528:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8552c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85530:	4770      	bx	lr
   85532:	fab3 f883 	clz	r8, r3
   85536:	f1b8 0f00 	cmp.w	r8, #0
   8553a:	f040 8088 	bne.w	8564e <__divdi3+0x1d2>
   8553e:	428b      	cmp	r3, r1
   85540:	d302      	bcc.n	85548 <__divdi3+0xcc>
   85542:	4282      	cmp	r2, r0
   85544:	f200 80e2 	bhi.w	8570c <__divdi3+0x290>
   85548:	2300      	movs	r3, #0
   8554a:	2201      	movs	r2, #1
   8554c:	e7e8      	b.n	85520 <__divdi3+0xa4>
   8554e:	b912      	cbnz	r2, 85556 <__divdi3+0xda>
   85550:	2301      	movs	r3, #1
   85552:	fbb3 f5f2 	udiv	r5, r3, r2
   85556:	fab5 f285 	clz	r2, r5
   8555a:	2a00      	cmp	r2, #0
   8555c:	d13a      	bne.n	855d4 <__divdi3+0x158>
   8555e:	1b7f      	subs	r7, r7, r5
   85560:	0c28      	lsrs	r0, r5, #16
   85562:	fa1f fc85 	uxth.w	ip, r5
   85566:	2301      	movs	r3, #1
   85568:	fbb7 f1f0 	udiv	r1, r7, r0
   8556c:	fb00 7711 	mls	r7, r0, r1, r7
   85570:	fb0c f201 	mul.w	r2, ip, r1
   85574:	ea4f 4816 	mov.w	r8, r6, lsr #16
   85578:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   8557c:	42ba      	cmp	r2, r7
   8557e:	d907      	bls.n	85590 <__divdi3+0x114>
   85580:	197f      	adds	r7, r7, r5
   85582:	f101 38ff 	add.w	r8, r1, #4294967295
   85586:	d202      	bcs.n	8558e <__divdi3+0x112>
   85588:	42ba      	cmp	r2, r7
   8558a:	f200 80c4 	bhi.w	85716 <__divdi3+0x29a>
   8558e:	4641      	mov	r1, r8
   85590:	1abf      	subs	r7, r7, r2
   85592:	fbb7 f2f0 	udiv	r2, r7, r0
   85596:	fb00 7012 	mls	r0, r0, r2, r7
   8559a:	fb0c fc02 	mul.w	ip, ip, r2
   8559e:	b2b6      	uxth	r6, r6
   855a0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   855a4:	4584      	cmp	ip, r0
   855a6:	d907      	bls.n	855b8 <__divdi3+0x13c>
   855a8:	1940      	adds	r0, r0, r5
   855aa:	f102 37ff 	add.w	r7, r2, #4294967295
   855ae:	d202      	bcs.n	855b6 <__divdi3+0x13a>
   855b0:	4584      	cmp	ip, r0
   855b2:	f200 80ae 	bhi.w	85712 <__divdi3+0x296>
   855b6:	463a      	mov	r2, r7
   855b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   855bc:	e7b0      	b.n	85520 <__divdi3+0xa4>
   855be:	43e4      	mvns	r4, r4
   855c0:	4252      	negs	r2, r2
   855c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   855c6:	e762      	b.n	8548e <__divdi3+0x12>
   855c8:	4240      	negs	r0, r0
   855ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   855ce:	f04f 34ff 	mov.w	r4, #4294967295
   855d2:	e759      	b.n	85488 <__divdi3+0xc>
   855d4:	4095      	lsls	r5, r2
   855d6:	f1c2 0920 	rsb	r9, r2, #32
   855da:	fa27 f109 	lsr.w	r1, r7, r9
   855de:	fa26 f909 	lsr.w	r9, r6, r9
   855e2:	4097      	lsls	r7, r2
   855e4:	0c28      	lsrs	r0, r5, #16
   855e6:	fbb1 f8f0 	udiv	r8, r1, r0
   855ea:	fb00 1118 	mls	r1, r0, r8, r1
   855ee:	fa1f fc85 	uxth.w	ip, r5
   855f2:	fb0c f308 	mul.w	r3, ip, r8
   855f6:	ea49 0907 	orr.w	r9, r9, r7
   855fa:	ea4f 4719 	mov.w	r7, r9, lsr #16
   855fe:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   85602:	428b      	cmp	r3, r1
   85604:	fa06 f602 	lsl.w	r6, r6, r2
   85608:	d908      	bls.n	8561c <__divdi3+0x1a0>
   8560a:	1949      	adds	r1, r1, r5
   8560c:	f108 32ff 	add.w	r2, r8, #4294967295
   85610:	d27a      	bcs.n	85708 <__divdi3+0x28c>
   85612:	428b      	cmp	r3, r1
   85614:	d978      	bls.n	85708 <__divdi3+0x28c>
   85616:	f1a8 0802 	sub.w	r8, r8, #2
   8561a:	4429      	add	r1, r5
   8561c:	1ac9      	subs	r1, r1, r3
   8561e:	fbb1 f3f0 	udiv	r3, r1, r0
   85622:	fb00 1713 	mls	r7, r0, r3, r1
   85626:	fb0c f203 	mul.w	r2, ip, r3
   8562a:	fa1f f989 	uxth.w	r9, r9
   8562e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   85632:	42ba      	cmp	r2, r7
   85634:	d907      	bls.n	85646 <__divdi3+0x1ca>
   85636:	197f      	adds	r7, r7, r5
   85638:	f103 31ff 	add.w	r1, r3, #4294967295
   8563c:	d260      	bcs.n	85700 <__divdi3+0x284>
   8563e:	42ba      	cmp	r2, r7
   85640:	d95e      	bls.n	85700 <__divdi3+0x284>
   85642:	3b02      	subs	r3, #2
   85644:	442f      	add	r7, r5
   85646:	1abf      	subs	r7, r7, r2
   85648:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8564c:	e78c      	b.n	85568 <__divdi3+0xec>
   8564e:	f1c8 0220 	rsb	r2, r8, #32
   85652:	fa25 f102 	lsr.w	r1, r5, r2
   85656:	fa03 fc08 	lsl.w	ip, r3, r8
   8565a:	fa27 f302 	lsr.w	r3, r7, r2
   8565e:	fa20 f202 	lsr.w	r2, r0, r2
   85662:	fa07 f708 	lsl.w	r7, r7, r8
   85666:	ea41 0c0c 	orr.w	ip, r1, ip
   8566a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8566e:	fbb3 f1f9 	udiv	r1, r3, r9
   85672:	fb09 3311 	mls	r3, r9, r1, r3
   85676:	fa1f fa8c 	uxth.w	sl, ip
   8567a:	fb0a fb01 	mul.w	fp, sl, r1
   8567e:	4317      	orrs	r7, r2
   85680:	0c3a      	lsrs	r2, r7, #16
   85682:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   85686:	459b      	cmp	fp, r3
   85688:	fa05 f008 	lsl.w	r0, r5, r8
   8568c:	d908      	bls.n	856a0 <__divdi3+0x224>
   8568e:	eb13 030c 	adds.w	r3, r3, ip
   85692:	f101 32ff 	add.w	r2, r1, #4294967295
   85696:	d235      	bcs.n	85704 <__divdi3+0x288>
   85698:	459b      	cmp	fp, r3
   8569a:	d933      	bls.n	85704 <__divdi3+0x288>
   8569c:	3902      	subs	r1, #2
   8569e:	4463      	add	r3, ip
   856a0:	ebcb 0303 	rsb	r3, fp, r3
   856a4:	fbb3 f2f9 	udiv	r2, r3, r9
   856a8:	fb09 3312 	mls	r3, r9, r2, r3
   856ac:	fb0a fa02 	mul.w	sl, sl, r2
   856b0:	b2bf      	uxth	r7, r7
   856b2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   856b6:	45ba      	cmp	sl, r7
   856b8:	d908      	bls.n	856cc <__divdi3+0x250>
   856ba:	eb17 070c 	adds.w	r7, r7, ip
   856be:	f102 33ff 	add.w	r3, r2, #4294967295
   856c2:	d21b      	bcs.n	856fc <__divdi3+0x280>
   856c4:	45ba      	cmp	sl, r7
   856c6:	d919      	bls.n	856fc <__divdi3+0x280>
   856c8:	3a02      	subs	r2, #2
   856ca:	4467      	add	r7, ip
   856cc:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   856d0:	fba5 0100 	umull	r0, r1, r5, r0
   856d4:	ebca 0707 	rsb	r7, sl, r7
   856d8:	428f      	cmp	r7, r1
   856da:	f04f 0300 	mov.w	r3, #0
   856de:	d30a      	bcc.n	856f6 <__divdi3+0x27a>
   856e0:	d005      	beq.n	856ee <__divdi3+0x272>
   856e2:	462a      	mov	r2, r5
   856e4:	e71c      	b.n	85520 <__divdi3+0xa4>
   856e6:	4662      	mov	r2, ip
   856e8:	e6fd      	b.n	854e6 <__divdi3+0x6a>
   856ea:	463b      	mov	r3, r7
   856ec:	e710      	b.n	85510 <__divdi3+0x94>
   856ee:	fa06 f608 	lsl.w	r6, r6, r8
   856f2:	4286      	cmp	r6, r0
   856f4:	d2f5      	bcs.n	856e2 <__divdi3+0x266>
   856f6:	1e6a      	subs	r2, r5, #1
   856f8:	2300      	movs	r3, #0
   856fa:	e711      	b.n	85520 <__divdi3+0xa4>
   856fc:	461a      	mov	r2, r3
   856fe:	e7e5      	b.n	856cc <__divdi3+0x250>
   85700:	460b      	mov	r3, r1
   85702:	e7a0      	b.n	85646 <__divdi3+0x1ca>
   85704:	4611      	mov	r1, r2
   85706:	e7cb      	b.n	856a0 <__divdi3+0x224>
   85708:	4690      	mov	r8, r2
   8570a:	e787      	b.n	8561c <__divdi3+0x1a0>
   8570c:	4643      	mov	r3, r8
   8570e:	4642      	mov	r2, r8
   85710:	e706      	b.n	85520 <__divdi3+0xa4>
   85712:	3a02      	subs	r2, #2
   85714:	e750      	b.n	855b8 <__divdi3+0x13c>
   85716:	3902      	subs	r1, #2
   85718:	442f      	add	r7, r5
   8571a:	e739      	b.n	85590 <__divdi3+0x114>

0008571c <__udivdi3>:
   8571c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85720:	4614      	mov	r4, r2
   85722:	4605      	mov	r5, r0
   85724:	460e      	mov	r6, r1
   85726:	2b00      	cmp	r3, #0
   85728:	d143      	bne.n	857b2 <__udivdi3+0x96>
   8572a:	428a      	cmp	r2, r1
   8572c:	d953      	bls.n	857d6 <__udivdi3+0xba>
   8572e:	fab2 f782 	clz	r7, r2
   85732:	b157      	cbz	r7, 8574a <__udivdi3+0x2e>
   85734:	f1c7 0620 	rsb	r6, r7, #32
   85738:	fa20 f606 	lsr.w	r6, r0, r6
   8573c:	fa01 f307 	lsl.w	r3, r1, r7
   85740:	fa02 f407 	lsl.w	r4, r2, r7
   85744:	fa00 f507 	lsl.w	r5, r0, r7
   85748:	431e      	orrs	r6, r3
   8574a:	0c21      	lsrs	r1, r4, #16
   8574c:	fbb6 f2f1 	udiv	r2, r6, r1
   85750:	fb01 6612 	mls	r6, r1, r2, r6
   85754:	b2a0      	uxth	r0, r4
   85756:	fb00 f302 	mul.w	r3, r0, r2
   8575a:	0c2f      	lsrs	r7, r5, #16
   8575c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   85760:	42b3      	cmp	r3, r6
   85762:	d909      	bls.n	85778 <__udivdi3+0x5c>
   85764:	1936      	adds	r6, r6, r4
   85766:	f102 37ff 	add.w	r7, r2, #4294967295
   8576a:	f080 80fd 	bcs.w	85968 <__udivdi3+0x24c>
   8576e:	42b3      	cmp	r3, r6
   85770:	f240 80fa 	bls.w	85968 <__udivdi3+0x24c>
   85774:	3a02      	subs	r2, #2
   85776:	4426      	add	r6, r4
   85778:	1af6      	subs	r6, r6, r3
   8577a:	fbb6 f3f1 	udiv	r3, r6, r1
   8577e:	fb01 6113 	mls	r1, r1, r3, r6
   85782:	fb00 f003 	mul.w	r0, r0, r3
   85786:	b2ad      	uxth	r5, r5
   85788:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   8578c:	4288      	cmp	r0, r1
   8578e:	d908      	bls.n	857a2 <__udivdi3+0x86>
   85790:	1909      	adds	r1, r1, r4
   85792:	f103 36ff 	add.w	r6, r3, #4294967295
   85796:	f080 80e9 	bcs.w	8596c <__udivdi3+0x250>
   8579a:	4288      	cmp	r0, r1
   8579c:	f240 80e6 	bls.w	8596c <__udivdi3+0x250>
   857a0:	3b02      	subs	r3, #2
   857a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   857a6:	2300      	movs	r3, #0
   857a8:	4610      	mov	r0, r2
   857aa:	4619      	mov	r1, r3
   857ac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   857b0:	4770      	bx	lr
   857b2:	428b      	cmp	r3, r1
   857b4:	d84c      	bhi.n	85850 <__udivdi3+0x134>
   857b6:	fab3 f683 	clz	r6, r3
   857ba:	2e00      	cmp	r6, #0
   857bc:	d14f      	bne.n	8585e <__udivdi3+0x142>
   857be:	428b      	cmp	r3, r1
   857c0:	d302      	bcc.n	857c8 <__udivdi3+0xac>
   857c2:	4282      	cmp	r2, r0
   857c4:	f200 80dd 	bhi.w	85982 <__udivdi3+0x266>
   857c8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   857cc:	2300      	movs	r3, #0
   857ce:	2201      	movs	r2, #1
   857d0:	4610      	mov	r0, r2
   857d2:	4619      	mov	r1, r3
   857d4:	4770      	bx	lr
   857d6:	b912      	cbnz	r2, 857de <__udivdi3+0xc2>
   857d8:	2401      	movs	r4, #1
   857da:	fbb4 f4f2 	udiv	r4, r4, r2
   857de:	fab4 f284 	clz	r2, r4
   857e2:	2a00      	cmp	r2, #0
   857e4:	f040 8082 	bne.w	858ec <__udivdi3+0x1d0>
   857e8:	1b09      	subs	r1, r1, r4
   857ea:	0c26      	lsrs	r6, r4, #16
   857ec:	b2a7      	uxth	r7, r4
   857ee:	2301      	movs	r3, #1
   857f0:	fbb1 f0f6 	udiv	r0, r1, r6
   857f4:	fb06 1110 	mls	r1, r6, r0, r1
   857f8:	fb07 f200 	mul.w	r2, r7, r0
   857fc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   85800:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   85804:	428a      	cmp	r2, r1
   85806:	d907      	bls.n	85818 <__udivdi3+0xfc>
   85808:	1909      	adds	r1, r1, r4
   8580a:	f100 3cff 	add.w	ip, r0, #4294967295
   8580e:	d202      	bcs.n	85816 <__udivdi3+0xfa>
   85810:	428a      	cmp	r2, r1
   85812:	f200 80c8 	bhi.w	859a6 <__udivdi3+0x28a>
   85816:	4660      	mov	r0, ip
   85818:	1a89      	subs	r1, r1, r2
   8581a:	fbb1 f2f6 	udiv	r2, r1, r6
   8581e:	fb06 1112 	mls	r1, r6, r2, r1
   85822:	fb07 f702 	mul.w	r7, r7, r2
   85826:	b2ad      	uxth	r5, r5
   85828:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8582c:	42af      	cmp	r7, r5
   8582e:	d908      	bls.n	85842 <__udivdi3+0x126>
   85830:	192c      	adds	r4, r5, r4
   85832:	f102 31ff 	add.w	r1, r2, #4294967295
   85836:	f080 809b 	bcs.w	85970 <__udivdi3+0x254>
   8583a:	42a7      	cmp	r7, r4
   8583c:	f240 8098 	bls.w	85970 <__udivdi3+0x254>
   85840:	3a02      	subs	r2, #2
   85842:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   85846:	4610      	mov	r0, r2
   85848:	4619      	mov	r1, r3
   8584a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8584e:	4770      	bx	lr
   85850:	2300      	movs	r3, #0
   85852:	461a      	mov	r2, r3
   85854:	4610      	mov	r0, r2
   85856:	4619      	mov	r1, r3
   85858:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8585c:	4770      	bx	lr
   8585e:	f1c6 0520 	rsb	r5, r6, #32
   85862:	fa22 f705 	lsr.w	r7, r2, r5
   85866:	fa03 f406 	lsl.w	r4, r3, r6
   8586a:	fa21 f305 	lsr.w	r3, r1, r5
   8586e:	fa01 fb06 	lsl.w	fp, r1, r6
   85872:	fa20 f505 	lsr.w	r5, r0, r5
   85876:	433c      	orrs	r4, r7
   85878:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8587c:	fbb3 fcf8 	udiv	ip, r3, r8
   85880:	fb08 331c 	mls	r3, r8, ip, r3
   85884:	fa1f f984 	uxth.w	r9, r4
   85888:	fb09 fa0c 	mul.w	sl, r9, ip
   8588c:	ea45 0b0b 	orr.w	fp, r5, fp
   85890:	ea4f 451b 	mov.w	r5, fp, lsr #16
   85894:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   85898:	459a      	cmp	sl, r3
   8589a:	fa02 f206 	lsl.w	r2, r2, r6
   8589e:	d904      	bls.n	858aa <__udivdi3+0x18e>
   858a0:	191b      	adds	r3, r3, r4
   858a2:	f10c 35ff 	add.w	r5, ip, #4294967295
   858a6:	d36f      	bcc.n	85988 <__udivdi3+0x26c>
   858a8:	46ac      	mov	ip, r5
   858aa:	ebca 0303 	rsb	r3, sl, r3
   858ae:	fbb3 f5f8 	udiv	r5, r3, r8
   858b2:	fb08 3315 	mls	r3, r8, r5, r3
   858b6:	fb09 f905 	mul.w	r9, r9, r5
   858ba:	fa1f fb8b 	uxth.w	fp, fp
   858be:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   858c2:	45b9      	cmp	r9, r7
   858c4:	d904      	bls.n	858d0 <__udivdi3+0x1b4>
   858c6:	193f      	adds	r7, r7, r4
   858c8:	f105 33ff 	add.w	r3, r5, #4294967295
   858cc:	d362      	bcc.n	85994 <__udivdi3+0x278>
   858ce:	461d      	mov	r5, r3
   858d0:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   858d4:	fbac 2302 	umull	r2, r3, ip, r2
   858d8:	ebc9 0707 	rsb	r7, r9, r7
   858dc:	429f      	cmp	r7, r3
   858de:	f04f 0500 	mov.w	r5, #0
   858e2:	d34a      	bcc.n	8597a <__udivdi3+0x25e>
   858e4:	d046      	beq.n	85974 <__udivdi3+0x258>
   858e6:	4662      	mov	r2, ip
   858e8:	462b      	mov	r3, r5
   858ea:	e75d      	b.n	857a8 <__udivdi3+0x8c>
   858ec:	4094      	lsls	r4, r2
   858ee:	f1c2 0920 	rsb	r9, r2, #32
   858f2:	fa21 fc09 	lsr.w	ip, r1, r9
   858f6:	4091      	lsls	r1, r2
   858f8:	fa20 f909 	lsr.w	r9, r0, r9
   858fc:	0c26      	lsrs	r6, r4, #16
   858fe:	fbbc f8f6 	udiv	r8, ip, r6
   85902:	fb06 cc18 	mls	ip, r6, r8, ip
   85906:	b2a7      	uxth	r7, r4
   85908:	fb07 f308 	mul.w	r3, r7, r8
   8590c:	ea49 0901 	orr.w	r9, r9, r1
   85910:	ea4f 4119 	mov.w	r1, r9, lsr #16
   85914:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   85918:	4563      	cmp	r3, ip
   8591a:	fa00 f502 	lsl.w	r5, r0, r2
   8591e:	d909      	bls.n	85934 <__udivdi3+0x218>
   85920:	eb1c 0c04 	adds.w	ip, ip, r4
   85924:	f108 32ff 	add.w	r2, r8, #4294967295
   85928:	d23b      	bcs.n	859a2 <__udivdi3+0x286>
   8592a:	4563      	cmp	r3, ip
   8592c:	d939      	bls.n	859a2 <__udivdi3+0x286>
   8592e:	f1a8 0802 	sub.w	r8, r8, #2
   85932:	44a4      	add	ip, r4
   85934:	ebc3 0c0c 	rsb	ip, r3, ip
   85938:	fbbc f3f6 	udiv	r3, ip, r6
   8593c:	fb06 c113 	mls	r1, r6, r3, ip
   85940:	fb07 f203 	mul.w	r2, r7, r3
   85944:	fa1f f989 	uxth.w	r9, r9
   85948:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8594c:	428a      	cmp	r2, r1
   8594e:	d907      	bls.n	85960 <__udivdi3+0x244>
   85950:	1909      	adds	r1, r1, r4
   85952:	f103 30ff 	add.w	r0, r3, #4294967295
   85956:	d222      	bcs.n	8599e <__udivdi3+0x282>
   85958:	428a      	cmp	r2, r1
   8595a:	d920      	bls.n	8599e <__udivdi3+0x282>
   8595c:	3b02      	subs	r3, #2
   8595e:	4421      	add	r1, r4
   85960:	1a89      	subs	r1, r1, r2
   85962:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   85966:	e743      	b.n	857f0 <__udivdi3+0xd4>
   85968:	463a      	mov	r2, r7
   8596a:	e705      	b.n	85778 <__udivdi3+0x5c>
   8596c:	4633      	mov	r3, r6
   8596e:	e718      	b.n	857a2 <__udivdi3+0x86>
   85970:	460a      	mov	r2, r1
   85972:	e766      	b.n	85842 <__udivdi3+0x126>
   85974:	40b0      	lsls	r0, r6
   85976:	4290      	cmp	r0, r2
   85978:	d2b5      	bcs.n	858e6 <__udivdi3+0x1ca>
   8597a:	f10c 32ff 	add.w	r2, ip, #4294967295
   8597e:	2300      	movs	r3, #0
   85980:	e712      	b.n	857a8 <__udivdi3+0x8c>
   85982:	4633      	mov	r3, r6
   85984:	4632      	mov	r2, r6
   85986:	e70f      	b.n	857a8 <__udivdi3+0x8c>
   85988:	459a      	cmp	sl, r3
   8598a:	d98d      	bls.n	858a8 <__udivdi3+0x18c>
   8598c:	f1ac 0c02 	sub.w	ip, ip, #2
   85990:	4423      	add	r3, r4
   85992:	e78a      	b.n	858aa <__udivdi3+0x18e>
   85994:	45b9      	cmp	r9, r7
   85996:	d99a      	bls.n	858ce <__udivdi3+0x1b2>
   85998:	3d02      	subs	r5, #2
   8599a:	4427      	add	r7, r4
   8599c:	e798      	b.n	858d0 <__udivdi3+0x1b4>
   8599e:	4603      	mov	r3, r0
   859a0:	e7de      	b.n	85960 <__udivdi3+0x244>
   859a2:	4690      	mov	r8, r2
   859a4:	e7c6      	b.n	85934 <__udivdi3+0x218>
   859a6:	3802      	subs	r0, #2
   859a8:	4421      	add	r1, r4
   859aa:	e735      	b.n	85818 <__udivdi3+0xfc>
   859ac:	72617453 	.word	0x72617453
   859b0:	00726174 	.word	0x00726174
   859b4:	72617453 	.word	0x72617453
   859b8:	00002174 	.word	0x00002174
   859bc:	3d746f72 	.word	0x3d746f72
   859c0:	000a6425 	.word	0x000a6425
   859c4:	74736964 	.word	0x74736964
   859c8:	65636e61 	.word	0x65636e61
   859cc:	0a64253d 	.word	0x0a64253d
   859d0:	00000000 	.word	0x00000000
   859d4:	00000001 	.word	0x00000001
   859d8:	00000002 	.word	0x00000002
   859dc:	00000004 	.word	0x00000004
   859e0:	00000008 	.word	0x00000008
   859e4:	00000010 	.word	0x00000010
   859e8:	00000020 	.word	0x00000020
   859ec:	00000040 	.word	0x00000040
   859f0:	00000080 	.word	0x00000080
   859f4:	00000100 	.word	0x00000100
   859f8:	00000200 	.word	0x00000200
   859fc:	00000400 	.word	0x00000400

00085a00 <atanlo>:
   85a00:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   85a10:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00085a20 <atanhi>:
   85a20:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   85a30:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
   85a40:	74727173 00000000 00000043              sqrt....C...

00085a4c <_global_impure_ptr>:
   85a4c:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   85a5c:	46454443 00000000 33323130 37363534     CDEF....01234567
   85a6c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   85a7c:	0000296c                                l)..

00085a80 <zeroes.6721>:
   85a80:	30303030 30303030 30303030 30303030     0000000000000000

00085a90 <blanks.6720>:
   85a90:	20202020 20202020 20202020 20202020                     

00085aa0 <_init>:
   85aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85aa2:	bf00      	nop
   85aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85aa6:	bc08      	pop	{r3}
   85aa8:	469e      	mov	lr, r3
   85aaa:	4770      	bx	lr

00085aac <__init_array_start>:
   85aac:	00083aa1 	.word	0x00083aa1

00085ab0 <__frame_dummy_init_array_entry>:
   85ab0:	00080119                                ....

00085ab4 <_fini>:
   85ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85ab6:	bf00      	nop
   85ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85aba:	bc08      	pop	{r3}
   85abc:	469e      	mov	lr, r3
   85abe:	4770      	bx	lr

00085ac0 <__fini_array_start>:
   85ac0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <c1Loop>:
20070138:	00010101                                         .

20070139 <c2Loop>:
20070139:	00000101                                         .

2007013a <g_interrupt_enabled>:
2007013a:	09000001                                         ..

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <__fdlib_version>:
20070140:	00000001 00000000                       ........

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	00085a48 00000000 00000000 00000000     HZ..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <lc_ctype_charset>:
20070574:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070594 <__mb_cur_max>:
20070594:	00000001                                ....

20070598 <__malloc_av_>:
	...
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 

200709a0 <__malloc_trim_threshold>:
200709a0:	00020000                                ....

200709a4 <__malloc_sbrk_base>:
200709a4:	ffffffff                                ....

200709a8 <__wctomb>:
200709a8:	000851b1                                .Q..
