
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005804  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00085804  00085804  0000d804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ac  20070000  0008580c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001cc  200709ac  000861b8  000109ac  2**2
                  ALLOC
  4 .stack        00002000  20070b78  00086384  000109ac  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109ac  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109d5  2**0
                  CONTENTS, READONLY
  7 .debug_info   00010187  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b36  00000000  00000000  00020bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000057c4  00000000  00000000  000236ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bb0  00000000  00000000  00028eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a58  00000000  00000000  00029a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000193ce  00000000  00000000  0002a4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000121fd  00000000  00000000  00043887  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000620c5  00000000  00000000  00055a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002488  00000000  00000000  000b7b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b78 	.word	0x20072b78
   80004:	000813d9 	.word	0x000813d9
   80008:	000813d5 	.word	0x000813d5
   8000c:	000813d5 	.word	0x000813d5
   80010:	000813d5 	.word	0x000813d5
   80014:	000813d5 	.word	0x000813d5
   80018:	000813d5 	.word	0x000813d5
	...
   8002c:	000813d5 	.word	0x000813d5
   80030:	000813d5 	.word	0x000813d5
   80034:	00000000 	.word	0x00000000
   80038:	000813d5 	.word	0x000813d5
   8003c:	000813d5 	.word	0x000813d5
   80040:	000813d5 	.word	0x000813d5
   80044:	000813d5 	.word	0x000813d5
   80048:	000813d5 	.word	0x000813d5
   8004c:	000813d5 	.word	0x000813d5
   80050:	000813d5 	.word	0x000813d5
   80054:	000813d5 	.word	0x000813d5
   80058:	000813d5 	.word	0x000813d5
   8005c:	000813d5 	.word	0x000813d5
   80060:	000813d5 	.word	0x000813d5
   80064:	000813d5 	.word	0x000813d5
   80068:	00000000 	.word	0x00000000
   8006c:	00081155 	.word	0x00081155
   80070:	00081169 	.word	0x00081169
   80074:	0008117d 	.word	0x0008117d
   80078:	00081191 	.word	0x00081191
	...
   80084:	00080439 	.word	0x00080439
   80088:	000813d5 	.word	0x000813d5
   8008c:	000813d5 	.word	0x000813d5
   80090:	000813d5 	.word	0x000813d5
   80094:	000813d5 	.word	0x000813d5
   80098:	000813d5 	.word	0x000813d5
   8009c:	000813d5 	.word	0x000813d5
   800a0:	000813d5 	.word	0x000813d5
   800a4:	00000000 	.word	0x00000000
   800a8:	000813d5 	.word	0x000813d5
   800ac:	000813d5 	.word	0x000813d5
   800b0:	000813d5 	.word	0x000813d5
   800b4:	000813d5 	.word	0x000813d5
   800b8:	000813d5 	.word	0x000813d5
   800bc:	000813d5 	.word	0x000813d5
   800c0:	000813d5 	.word	0x000813d5
   800c4:	000813d5 	.word	0x000813d5
   800c8:	000813d5 	.word	0x000813d5
   800cc:	000813d5 	.word	0x000813d5
   800d0:	000813d5 	.word	0x000813d5
   800d4:	000813d5 	.word	0x000813d5
   800d8:	000813d5 	.word	0x000813d5
   800dc:	000813d5 	.word	0x000813d5
   800e0:	000813d5 	.word	0x000813d5
   800e4:	000813d5 	.word	0x000813d5
   800e8:	000813d5 	.word	0x000813d5
   800ec:	000813d5 	.word	0x000813d5
   800f0:	000813d5 	.word	0x000813d5

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709ac 	.word	0x200709ac
   80110:	00000000 	.word	0x00000000
   80114:	0008580c 	.word	0x0008580c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008580c 	.word	0x0008580c
   8013c:	200709b0 	.word	0x200709b0
   80140:	0008580c 	.word	0x0008580c
   80144:	00000000 	.word	0x00000000

00080148 <main>:
// int e=0;
// double kp = 2;
// uint16_t speed = 1700;

int main(void)
{
   80148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8014c:	b089      	sub	sp, #36	; 0x24
	/* Initialize the SAM system */
	SystemInit();
   8014e:	4b2e      	ldr	r3, [pc, #184]	; (80208 <main+0xc0>)
   80150:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   80152:	4b2e      	ldr	r3, [pc, #184]	; (8020c <main+0xc4>)
   80154:	4798      	blx	r3
	configureConsole();
   80156:	4b2e      	ldr	r3, [pc, #184]	; (80210 <main+0xc8>)
   80158:	4798      	blx	r3
	configInterrupts();
   8015a:	4b2e      	ldr	r3, [pc, #184]	; (80214 <main+0xcc>)
   8015c:	4798      	blx	r3
	PWM_init();
   8015e:	4b2e      	ldr	r3, [pc, #184]	; (80218 <main+0xd0>)
   80160:	4798      	blx	r3
	printf("Startar");
   80162:	482e      	ldr	r0, [pc, #184]	; (8021c <main+0xd4>)
   80164:	4b2e      	ldr	r3, [pc, #184]	; (80220 <main+0xd8>)
   80166:	4798      	blx	r3
    delay_s(2);
   80168:	482e      	ldr	r0, [pc, #184]	; (80224 <main+0xdc>)
   8016a:	4b2f      	ldr	r3, [pc, #188]	; (80228 <main+0xe0>)
   8016c:	4798      	blx	r3
//     rightWheel(1500);
//     leftWheel(1500);

	rotation(26,150);
   8016e:	201a      	movs	r0, #26
   80170:	2196      	movs	r1, #150	; 0x96
   80172:	4b2e      	ldr	r3, [pc, #184]	; (8022c <main+0xe4>)
   80174:	4798      	blx	r3
// 		moveTo(100,0);
// 		printf("Klar!\n");
// 		rightWheel(1500);
// 		leftWheel(1500);
// 		delay_s(2);
		printf("Start!");
   80176:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80244 <main+0xfc>
   8017a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80220 <main+0xd8>
		int rot = calcluteRotationAngle(0,0,0,100,100,300);
   8017e:	2600      	movs	r6, #0
   80180:	2700      	movs	r7, #0
   80182:	2400      	movs	r4, #0
   80184:	4d2a      	ldr	r5, [pc, #168]	; (80230 <main+0xe8>)
// 		moveTo(100,0);
// 		printf("Klar!\n");
// 		rightWheel(1500);
// 		leftWheel(1500);
// 		delay_s(2);
		printf("Start!");
   80186:	4658      	mov	r0, fp
   80188:	47c0      	blx	r8
		int rot = calcluteRotationAngle(0,0,0,100,100,300);
   8018a:	e9cd 6700 	strd	r6, r7, [sp]
   8018e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   80192:	e9cd 4504 	strd	r4, r5, [sp, #16]
   80196:	a31a      	add	r3, pc, #104	; (adr r3, 80200 <main+0xb8>)
   80198:	e9d3 2300 	ldrd	r2, r3, [r3]
   8019c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   801a0:	4630      	mov	r0, r6
   801a2:	4639      	mov	r1, r7
   801a4:	4632      	mov	r2, r6
   801a6:	463b      	mov	r3, r7
   801a8:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80248 <main+0x100>
   801ac:	47e0      	blx	ip
   801ae:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8024c <main+0x104>
   801b2:	47c8      	blx	r9
   801b4:	4682      	mov	sl, r0
		printf("rot=%d\n",rot);
   801b6:	481f      	ldr	r0, [pc, #124]	; (80234 <main+0xec>)
   801b8:	4651      	mov	r1, sl
   801ba:	47c0      	blx	r8
		rotation(rot,200);
   801bc:	4650      	mov	r0, sl
   801be:	21c8      	movs	r1, #200	; 0xc8
   801c0:	4b1a      	ldr	r3, [pc, #104]	; (8022c <main+0xe4>)
   801c2:	4798      	blx	r3
		int dis = calculateDistance(0,100,100,300);
   801c4:	e9cd 4500 	strd	r4, r5, [sp]
   801c8:	a30d      	add	r3, pc, #52	; (adr r3, 80200 <main+0xb8>)
   801ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   801ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
   801d2:	4630      	mov	r0, r6
   801d4:	4639      	mov	r1, r7
   801d6:	4622      	mov	r2, r4
   801d8:	462b      	mov	r3, r5
   801da:	f8df c074 	ldr.w	ip, [pc, #116]	; 80250 <main+0x108>
   801de:	47e0      	blx	ip
   801e0:	47c8      	blx	r9
   801e2:	4681      	mov	r9, r0
		printf("distance=%d\n",dis);
   801e4:	4814      	ldr	r0, [pc, #80]	; (80238 <main+0xf0>)
   801e6:	4649      	mov	r1, r9
   801e8:	47c0      	blx	r8
		moveTo(dis,1);
   801ea:	4648      	mov	r0, r9
   801ec:	2101      	movs	r1, #1
   801ee:	4b13      	ldr	r3, [pc, #76]	; (8023c <main+0xf4>)
   801f0:	4798      	blx	r3
		delay_s(3);
   801f2:	4813      	ldr	r0, [pc, #76]	; (80240 <main+0xf8>)
   801f4:	4b0c      	ldr	r3, [pc, #48]	; (80228 <main+0xe0>)
   801f6:	4798      	blx	r3
   801f8:	e7c5      	b.n	80186 <main+0x3e>
   801fa:	bf00      	nop
   801fc:	f3af 8000 	nop.w
   80200:	00000000 	.word	0x00000000
   80204:	4072c000 	.word	0x4072c000
   80208:	2007000d 	.word	0x2007000d
   8020c:	00080de9 	.word	0x00080de9
   80210:	000805f5 	.word	0x000805f5
   80214:	000806dd 	.word	0x000806dd
   80218:	00080d2d 	.word	0x00080d2d
   8021c:	000856ec 	.word	0x000856ec
   80220:	000827a9 	.word	0x000827a9
   80224:	00b71b00 	.word	0x00b71b00
   80228:	20070001 	.word	0x20070001
   8022c:	00080bf1 	.word	0x00080bf1
   80230:	40590000 	.word	0x40590000
   80234:	000856fc 	.word	0x000856fc
   80238:	00085704 	.word	0x00085704
   8023c:	00080a89 	.word	0x00080a89
   80240:	0112a880 	.word	0x0112a880
   80244:	000856f4 	.word	0x000856f4
   80248:	00080a09 	.word	0x00080a09
   8024c:	00082355 	.word	0x00082355
   80250:	00080785 	.word	0x00080785
   80254:	f3af 8000 	nop.w

00080258 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8025c:	b083      	sub	sp, #12
   8025e:	4605      	mov	r5, r0
	while (len) {
   80260:	4690      	mov	r8, r2
   80262:	2a00      	cmp	r2, #0
   80264:	d047      	beq.n	802f6 <usart_serial_read_packet+0x9e>
   80266:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80268:	4f25      	ldr	r7, [pc, #148]	; (80300 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8026a:	4c26      	ldr	r4, [pc, #152]	; (80304 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8026c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80318 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80270:	f8df b094 	ldr.w	fp, [pc, #148]	; 80308 <usart_serial_read_packet+0xb0>
   80274:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80278:	2300      	movs	r3, #0
   8027a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8027c:	4b22      	ldr	r3, [pc, #136]	; (80308 <usart_serial_read_packet+0xb0>)
   8027e:	429d      	cmp	r5, r3
   80280:	d106      	bne.n	80290 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80282:	4658      	mov	r0, fp
   80284:	4649      	mov	r1, r9
   80286:	4b21      	ldr	r3, [pc, #132]	; (8030c <usart_serial_read_packet+0xb4>)
   80288:	4798      	blx	r3
   8028a:	2800      	cmp	r0, #0
   8028c:	d1f9      	bne.n	80282 <usart_serial_read_packet+0x2a>
   8028e:	e019      	b.n	802c4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80290:	4b1f      	ldr	r3, [pc, #124]	; (80310 <usart_serial_read_packet+0xb8>)
   80292:	429d      	cmp	r5, r3
   80294:	d109      	bne.n	802aa <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80296:	4699      	mov	r9, r3
   80298:	4648      	mov	r0, r9
   8029a:	a901      	add	r1, sp, #4
   8029c:	47a0      	blx	r4
   8029e:	2800      	cmp	r0, #0
   802a0:	d1fa      	bne.n	80298 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   802a2:	9b01      	ldr	r3, [sp, #4]
   802a4:	f806 3c01 	strb.w	r3, [r6, #-1]
   802a8:	e017      	b.n	802da <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   802aa:	4b1a      	ldr	r3, [pc, #104]	; (80314 <usart_serial_read_packet+0xbc>)
   802ac:	429d      	cmp	r5, r3
   802ae:	d109      	bne.n	802c4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   802b0:	4699      	mov	r9, r3
   802b2:	4648      	mov	r0, r9
   802b4:	a901      	add	r1, sp, #4
   802b6:	47a0      	blx	r4
   802b8:	2800      	cmp	r0, #0
   802ba:	d1fa      	bne.n	802b2 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   802bc:	9b01      	ldr	r3, [sp, #4]
   802be:	f806 3c01 	strb.w	r3, [r6, #-1]
   802c2:	e014      	b.n	802ee <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   802c4:	4555      	cmp	r5, sl
   802c6:	d108      	bne.n	802da <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   802c8:	4650      	mov	r0, sl
   802ca:	a901      	add	r1, sp, #4
   802cc:	47a0      	blx	r4
   802ce:	2800      	cmp	r0, #0
   802d0:	d1fa      	bne.n	802c8 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   802d2:	9b01      	ldr	r3, [sp, #4]
   802d4:	f806 3c01 	strb.w	r3, [r6, #-1]
   802d8:	e009      	b.n	802ee <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802da:	42bd      	cmp	r5, r7
   802dc:	d107      	bne.n	802ee <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   802de:	4638      	mov	r0, r7
   802e0:	a901      	add	r1, sp, #4
   802e2:	47a0      	blx	r4
   802e4:	2800      	cmp	r0, #0
   802e6:	d1fa      	bne.n	802de <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   802e8:	9b01      	ldr	r3, [sp, #4]
   802ea:	f806 3c01 	strb.w	r3, [r6, #-1]
   802ee:	3601      	adds	r6, #1
   802f0:	f1b8 0801 	subs.w	r8, r8, #1
   802f4:	d1be      	bne.n	80274 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   802f6:	2000      	movs	r0, #0
   802f8:	b003      	add	sp, #12
   802fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   802fe:	bf00      	nop
   80300:	400a4000 	.word	0x400a4000
   80304:	00080421 	.word	0x00080421
   80308:	400e0800 	.word	0x400e0800
   8030c:	000803f9 	.word	0x000803f9
   80310:	40098000 	.word	0x40098000
   80314:	4009c000 	.word	0x4009c000
   80318:	400a0000 	.word	0x400a0000

0008031c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8031c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80320:	460c      	mov	r4, r1
   80322:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80324:	b960      	cbnz	r0, 80340 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80326:	2a00      	cmp	r2, #0
   80328:	dd0e      	ble.n	80348 <_read+0x2c>
   8032a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8032c:	4e09      	ldr	r6, [pc, #36]	; (80354 <_read+0x38>)
   8032e:	4d0a      	ldr	r5, [pc, #40]	; (80358 <_read+0x3c>)
   80330:	6830      	ldr	r0, [r6, #0]
   80332:	4621      	mov	r1, r4
   80334:	682b      	ldr	r3, [r5, #0]
   80336:	4798      	blx	r3
		ptr++;
   80338:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8033a:	42bc      	cmp	r4, r7
   8033c:	d1f8      	bne.n	80330 <_read+0x14>
   8033e:	e006      	b.n	8034e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80340:	f04f 30ff 	mov.w	r0, #4294967295
   80344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80348:	2000      	movs	r0, #0
   8034a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8034e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80354:	20070b20 	.word	0x20070b20
   80358:	20070b18 	.word	0x20070b18

0008035c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8035c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80360:	460e      	mov	r6, r1
   80362:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80364:	3801      	subs	r0, #1
   80366:	2802      	cmp	r0, #2
   80368:	d80f      	bhi.n	8038a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8036a:	b192      	cbz	r2, 80392 <_write+0x36>
   8036c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8036e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 803ac <_write+0x50>
   80372:	4f0d      	ldr	r7, [pc, #52]	; (803a8 <_write+0x4c>)
   80374:	f8d8 0000 	ldr.w	r0, [r8]
   80378:	5d31      	ldrb	r1, [r6, r4]
   8037a:	683b      	ldr	r3, [r7, #0]
   8037c:	4798      	blx	r3
   8037e:	2800      	cmp	r0, #0
   80380:	db0a      	blt.n	80398 <_write+0x3c>
			return -1;
		}
		++nChars;
   80382:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80384:	42a5      	cmp	r5, r4
   80386:	d1f5      	bne.n	80374 <_write+0x18>
   80388:	e00a      	b.n	803a0 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8038a:	f04f 30ff 	mov.w	r0, #4294967295
   8038e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80392:	2000      	movs	r0, #0
   80394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80398:	f04f 30ff 	mov.w	r0, #4294967295
   8039c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   803a0:	4620      	mov	r0, r4
	}
	return nChars;
}
   803a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803a6:	bf00      	nop
   803a8:	20070b1c 	.word	0x20070b1c
   803ac:	20070b20 	.word	0x20070b20

000803b0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   803b0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   803b2:	23ac      	movs	r3, #172	; 0xac
   803b4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   803b6:	680a      	ldr	r2, [r1, #0]
   803b8:	684b      	ldr	r3, [r1, #4]
   803ba:	fbb2 f3f3 	udiv	r3, r2, r3
   803be:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   803c0:	1e5c      	subs	r4, r3, #1
   803c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   803c6:	4294      	cmp	r4, r2
   803c8:	d80a      	bhi.n	803e0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   803ca:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   803cc:	688b      	ldr	r3, [r1, #8]
   803ce:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   803d0:	f240 2302 	movw	r3, #514	; 0x202
   803d4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   803d8:	2350      	movs	r3, #80	; 0x50
   803da:	6003      	str	r3, [r0, #0]

	return 0;
   803dc:	2000      	movs	r0, #0
   803de:	e000      	b.n	803e2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   803e0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   803e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   803e6:	4770      	bx	lr

000803e8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   803e8:	6943      	ldr	r3, [r0, #20]
   803ea:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   803ee:	bf1a      	itte	ne
   803f0:	61c1      	strne	r1, [r0, #28]
	return 0;
   803f2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   803f4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   803f6:	4770      	bx	lr

000803f8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   803f8:	6943      	ldr	r3, [r0, #20]
   803fa:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   803fe:	bf1d      	ittte	ne
   80400:	6983      	ldrne	r3, [r0, #24]
   80402:	700b      	strbne	r3, [r1, #0]
	return 0;
   80404:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80406:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80408:	4770      	bx	lr
   8040a:	bf00      	nop

0008040c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8040c:	6943      	ldr	r3, [r0, #20]
   8040e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80412:	bf1d      	ittte	ne
   80414:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80418:	61c1      	strne	r1, [r0, #28]
	return 0;
   8041a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8041c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8041e:	4770      	bx	lr

00080420 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80420:	6943      	ldr	r3, [r0, #20]
   80422:	f013 0f01 	tst.w	r3, #1
   80426:	d005      	beq.n	80434 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80428:	6983      	ldr	r3, [r0, #24]
   8042a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8042e:	600b      	str	r3, [r1, #0]

	return 0;
   80430:	2000      	movs	r0, #0
   80432:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80434:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80436:	4770      	bx	lr

00080438 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80438:	b500      	push	{lr}
   8043a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   8043c:	4813      	ldr	r0, [pc, #76]	; (8048c <USART0_Handler+0x54>)
   8043e:	f10d 0107 	add.w	r1, sp, #7
   80442:	2201      	movs	r2, #1
   80444:	4b12      	ldr	r3, [pc, #72]	; (80490 <USART0_Handler+0x58>)
   80446:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80448:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8044a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8044e:	2200      	movs	r2, #0
   80450:	4b10      	ldr	r3, [pc, #64]	; (80494 <USART0_Handler+0x5c>)
   80452:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   80454:	4b10      	ldr	r3, [pc, #64]	; (80498 <USART0_Handler+0x60>)
   80456:	781a      	ldrb	r2, [r3, #0]
   80458:	3201      	adds	r2, #1
   8045a:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8045c:	4b0f      	ldr	r3, [pc, #60]	; (8049c <USART0_Handler+0x64>)
   8045e:	781b      	ldrb	r3, [r3, #0]
   80460:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80464:	4a0e      	ldr	r2, [pc, #56]	; (804a0 <USART0_Handler+0x68>)
   80466:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80468:	2b9b      	cmp	r3, #155	; 0x9b
   8046a:	d103      	bne.n	80474 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   8046c:	2200      	movs	r2, #0
   8046e:	4b0b      	ldr	r3, [pc, #44]	; (8049c <USART0_Handler+0x64>)
   80470:	701a      	strb	r2, [r3, #0]
   80472:	e002      	b.n	8047a <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   80474:	3301      	adds	r3, #1
   80476:	4a09      	ldr	r2, [pc, #36]	; (8049c <USART0_Handler+0x64>)
   80478:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8047a:	2201      	movs	r2, #1
   8047c:	4b05      	ldr	r3, [pc, #20]	; (80494 <USART0_Handler+0x5c>)
   8047e:	701a      	strb	r2, [r3, #0]
   80480:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80484:	b662      	cpsie	i
}
   80486:	b003      	add	sp, #12
   80488:	f85d fb04 	ldr.w	pc, [sp], #4
   8048c:	40098000 	.word	0x40098000
   80490:	00080259 	.word	0x00080259
   80494:	2007013a 	.word	0x2007013a
   80498:	20070a65 	.word	0x20070a65
   8049c:	20070a64 	.word	0x20070a64
   804a0:	200709c8 	.word	0x200709c8

000804a4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   804a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   804a6:	b083      	sub	sp, #12
   804a8:	4604      	mov	r4, r0
   804aa:	460d      	mov	r5, r1
	uint32_t val = 0;
   804ac:	2300      	movs	r3, #0
   804ae:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   804b0:	4b1f      	ldr	r3, [pc, #124]	; (80530 <usart_serial_getchar+0x8c>)
   804b2:	4298      	cmp	r0, r3
   804b4:	d107      	bne.n	804c6 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   804b6:	461f      	mov	r7, r3
   804b8:	4e1e      	ldr	r6, [pc, #120]	; (80534 <usart_serial_getchar+0x90>)
   804ba:	4638      	mov	r0, r7
   804bc:	4629      	mov	r1, r5
   804be:	47b0      	blx	r6
   804c0:	2800      	cmp	r0, #0
   804c2:	d1fa      	bne.n	804ba <usart_serial_getchar+0x16>
   804c4:	e019      	b.n	804fa <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   804c6:	4b1c      	ldr	r3, [pc, #112]	; (80538 <usart_serial_getchar+0x94>)
   804c8:	4298      	cmp	r0, r3
   804ca:	d109      	bne.n	804e0 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   804cc:	461f      	mov	r7, r3
   804ce:	4e1b      	ldr	r6, [pc, #108]	; (8053c <usart_serial_getchar+0x98>)
   804d0:	4638      	mov	r0, r7
   804d2:	a901      	add	r1, sp, #4
   804d4:	47b0      	blx	r6
   804d6:	2800      	cmp	r0, #0
   804d8:	d1fa      	bne.n	804d0 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   804da:	9b01      	ldr	r3, [sp, #4]
   804dc:	702b      	strb	r3, [r5, #0]
   804de:	e019      	b.n	80514 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   804e0:	4b17      	ldr	r3, [pc, #92]	; (80540 <usart_serial_getchar+0x9c>)
   804e2:	4298      	cmp	r0, r3
   804e4:	d109      	bne.n	804fa <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   804e6:	461e      	mov	r6, r3
   804e8:	4c14      	ldr	r4, [pc, #80]	; (8053c <usart_serial_getchar+0x98>)
   804ea:	4630      	mov	r0, r6
   804ec:	a901      	add	r1, sp, #4
   804ee:	47a0      	blx	r4
   804f0:	2800      	cmp	r0, #0
   804f2:	d1fa      	bne.n	804ea <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   804f4:	9b01      	ldr	r3, [sp, #4]
   804f6:	702b      	strb	r3, [r5, #0]
   804f8:	e018      	b.n	8052c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   804fa:	4b12      	ldr	r3, [pc, #72]	; (80544 <usart_serial_getchar+0xa0>)
   804fc:	429c      	cmp	r4, r3
   804fe:	d109      	bne.n	80514 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80500:	461e      	mov	r6, r3
   80502:	4c0e      	ldr	r4, [pc, #56]	; (8053c <usart_serial_getchar+0x98>)
   80504:	4630      	mov	r0, r6
   80506:	a901      	add	r1, sp, #4
   80508:	47a0      	blx	r4
   8050a:	2800      	cmp	r0, #0
   8050c:	d1fa      	bne.n	80504 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8050e:	9b01      	ldr	r3, [sp, #4]
   80510:	702b      	strb	r3, [r5, #0]
   80512:	e00b      	b.n	8052c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80514:	4b0c      	ldr	r3, [pc, #48]	; (80548 <usart_serial_getchar+0xa4>)
   80516:	429c      	cmp	r4, r3
   80518:	d108      	bne.n	8052c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8051a:	461e      	mov	r6, r3
   8051c:	4c07      	ldr	r4, [pc, #28]	; (8053c <usart_serial_getchar+0x98>)
   8051e:	4630      	mov	r0, r6
   80520:	a901      	add	r1, sp, #4
   80522:	47a0      	blx	r4
   80524:	2800      	cmp	r0, #0
   80526:	d1fa      	bne.n	8051e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80528:	9b01      	ldr	r3, [sp, #4]
   8052a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8052c:	b003      	add	sp, #12
   8052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80530:	400e0800 	.word	0x400e0800
   80534:	000803f9 	.word	0x000803f9
   80538:	40098000 	.word	0x40098000
   8053c:	00080421 	.word	0x00080421
   80540:	4009c000 	.word	0x4009c000
   80544:	400a0000 	.word	0x400a0000
   80548:	400a4000 	.word	0x400a4000

0008054c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   8054c:	b570      	push	{r4, r5, r6, lr}
   8054e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80550:	4b21      	ldr	r3, [pc, #132]	; (805d8 <usart_serial_putchar+0x8c>)
   80552:	4298      	cmp	r0, r3
   80554:	d107      	bne.n	80566 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80556:	461e      	mov	r6, r3
   80558:	4d20      	ldr	r5, [pc, #128]	; (805dc <usart_serial_putchar+0x90>)
   8055a:	4630      	mov	r0, r6
   8055c:	4621      	mov	r1, r4
   8055e:	47a8      	blx	r5
   80560:	2800      	cmp	r0, #0
   80562:	d1fa      	bne.n	8055a <usart_serial_putchar+0xe>
   80564:	e02b      	b.n	805be <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80566:	4b1e      	ldr	r3, [pc, #120]	; (805e0 <usart_serial_putchar+0x94>)
   80568:	4298      	cmp	r0, r3
   8056a:	d107      	bne.n	8057c <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   8056c:	461e      	mov	r6, r3
   8056e:	4d1d      	ldr	r5, [pc, #116]	; (805e4 <usart_serial_putchar+0x98>)
   80570:	4630      	mov	r0, r6
   80572:	4621      	mov	r1, r4
   80574:	47a8      	blx	r5
   80576:	2800      	cmp	r0, #0
   80578:	d1fa      	bne.n	80570 <usart_serial_putchar+0x24>
   8057a:	e022      	b.n	805c2 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8057c:	4b1a      	ldr	r3, [pc, #104]	; (805e8 <usart_serial_putchar+0x9c>)
   8057e:	4298      	cmp	r0, r3
   80580:	d107      	bne.n	80592 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80582:	461e      	mov	r6, r3
   80584:	4d17      	ldr	r5, [pc, #92]	; (805e4 <usart_serial_putchar+0x98>)
   80586:	4630      	mov	r0, r6
   80588:	4621      	mov	r1, r4
   8058a:	47a8      	blx	r5
   8058c:	2800      	cmp	r0, #0
   8058e:	d1fa      	bne.n	80586 <usart_serial_putchar+0x3a>
   80590:	e019      	b.n	805c6 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80592:	4b16      	ldr	r3, [pc, #88]	; (805ec <usart_serial_putchar+0xa0>)
   80594:	4298      	cmp	r0, r3
   80596:	d107      	bne.n	805a8 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80598:	461e      	mov	r6, r3
   8059a:	4d12      	ldr	r5, [pc, #72]	; (805e4 <usart_serial_putchar+0x98>)
   8059c:	4630      	mov	r0, r6
   8059e:	4621      	mov	r1, r4
   805a0:	47a8      	blx	r5
   805a2:	2800      	cmp	r0, #0
   805a4:	d1fa      	bne.n	8059c <usart_serial_putchar+0x50>
   805a6:	e010      	b.n	805ca <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   805a8:	4b11      	ldr	r3, [pc, #68]	; (805f0 <usart_serial_putchar+0xa4>)
   805aa:	4298      	cmp	r0, r3
   805ac:	d10f      	bne.n	805ce <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   805ae:	461e      	mov	r6, r3
   805b0:	4d0c      	ldr	r5, [pc, #48]	; (805e4 <usart_serial_putchar+0x98>)
   805b2:	4630      	mov	r0, r6
   805b4:	4621      	mov	r1, r4
   805b6:	47a8      	blx	r5
   805b8:	2800      	cmp	r0, #0
   805ba:	d1fa      	bne.n	805b2 <usart_serial_putchar+0x66>
   805bc:	e009      	b.n	805d2 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   805be:	2001      	movs	r0, #1
   805c0:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805c2:	2001      	movs	r0, #1
   805c4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805c6:	2001      	movs	r0, #1
   805c8:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805ca:	2001      	movs	r0, #1
   805cc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   805ce:	2000      	movs	r0, #0
   805d0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805d2:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   805d4:	bd70      	pop	{r4, r5, r6, pc}
   805d6:	bf00      	nop
   805d8:	400e0800 	.word	0x400e0800
   805dc:	000803e9 	.word	0x000803e9
   805e0:	40098000 	.word	0x40098000
   805e4:	0008040d 	.word	0x0008040d
   805e8:	4009c000 	.word	0x4009c000
   805ec:	400a0000 	.word	0x400a0000
   805f0:	400a4000 	.word	0x400a4000

000805f4 <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   805f4:	b530      	push	{r4, r5, lr}
   805f6:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805f8:	2008      	movs	r0, #8
   805fa:	4d13      	ldr	r5, [pc, #76]	; (80648 <configureConsole+0x54>)
   805fc:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   805fe:	4c13      	ldr	r4, [pc, #76]	; (8064c <configureConsole+0x58>)
   80600:	4b13      	ldr	r3, [pc, #76]	; (80650 <configureConsole+0x5c>)
   80602:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80604:	4a13      	ldr	r2, [pc, #76]	; (80654 <configureConsole+0x60>)
   80606:	4b14      	ldr	r3, [pc, #80]	; (80658 <configureConsole+0x64>)
   80608:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8060a:	4a14      	ldr	r2, [pc, #80]	; (8065c <configureConsole+0x68>)
   8060c:	4b14      	ldr	r3, [pc, #80]	; (80660 <configureConsole+0x6c>)
   8060e:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80610:	4b14      	ldr	r3, [pc, #80]	; (80664 <configureConsole+0x70>)
   80612:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80614:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80618:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8061a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8061e:	9303      	str	r3, [sp, #12]
   80620:	2008      	movs	r0, #8
   80622:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80624:	4620      	mov	r0, r4
   80626:	a901      	add	r1, sp, #4
   80628:	4b0f      	ldr	r3, [pc, #60]	; (80668 <configureConsole+0x74>)
   8062a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8062c:	4d0f      	ldr	r5, [pc, #60]	; (8066c <configureConsole+0x78>)
   8062e:	682b      	ldr	r3, [r5, #0]
   80630:	6898      	ldr	r0, [r3, #8]
   80632:	2100      	movs	r1, #0
   80634:	4c0e      	ldr	r4, [pc, #56]	; (80670 <configureConsole+0x7c>)
   80636:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80638:	682b      	ldr	r3, [r5, #0]
   8063a:	6858      	ldr	r0, [r3, #4]
   8063c:	2100      	movs	r1, #0
   8063e:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   80640:	2000      	movs	r0, #0
   80642:	b005      	add	sp, #20
   80644:	bd30      	pop	{r4, r5, pc}
   80646:	bf00      	nop
   80648:	000811a5 	.word	0x000811a5
   8064c:	400e0800 	.word	0x400e0800
   80650:	20070b20 	.word	0x20070b20
   80654:	0008054d 	.word	0x0008054d
   80658:	20070b1c 	.word	0x20070b1c
   8065c:	000804a5 	.word	0x000804a5
   80660:	20070b18 	.word	0x20070b18
   80664:	0501bd00 	.word	0x0501bd00
   80668:	000803b1 	.word	0x000803b1
   8066c:	20070570 	.word	0x20070570
   80670:	00082865 	.word	0x00082865

00080674 <pin12_edge_handler>:


}

// Handler which calls when pin 53 is toggle.
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   80674:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   80676:	4808      	ldr	r0, [pc, #32]	; (80698 <pin12_edge_handler+0x24>)
   80678:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8067c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80680:	4b06      	ldr	r3, [pc, #24]	; (8069c <pin12_edge_handler+0x28>)
   80682:	4798      	blx	r3
   80684:	b130      	cbz	r0, 80694 <pin12_edge_handler+0x20>
		//increase the counter value
		counter_2++;
   80686:	4b06      	ldr	r3, [pc, #24]	; (806a0 <pin12_edge_handler+0x2c>)
   80688:	881a      	ldrh	r2, [r3, #0]
   8068a:	3201      	adds	r2, #1
   8068c:	801a      	strh	r2, [r3, #0]
		c2Loop = true;
   8068e:	2201      	movs	r2, #1
   80690:	4b04      	ldr	r3, [pc, #16]	; (806a4 <pin12_edge_handler+0x30>)
   80692:	701a      	strb	r2, [r3, #0]
   80694:	bd08      	pop	{r3, pc}
   80696:	bf00      	nop
   80698:	400e1200 	.word	0x400e1200
   8069c:	00080e59 	.word	0x00080e59
   806a0:	20070a68 	.word	0x20070a68
   806a4:	20070139 	.word	0x20070139

000806a8 <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}
}

// Handler which calls when pin 51 is toggle.
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   806a8:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   806aa:	4808      	ldr	r0, [pc, #32]	; (806cc <pin14_edge_handler+0x24>)
   806ac:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   806b4:	4b06      	ldr	r3, [pc, #24]	; (806d0 <pin14_edge_handler+0x28>)
   806b6:	4798      	blx	r3
   806b8:	b130      	cbz	r0, 806c8 <pin14_edge_handler+0x20>
	//Increase the counter value
			counter_1++;
   806ba:	4b06      	ldr	r3, [pc, #24]	; (806d4 <pin14_edge_handler+0x2c>)
   806bc:	881a      	ldrh	r2, [r3, #0]
   806be:	3201      	adds	r2, #1
   806c0:	801a      	strh	r2, [r3, #0]
			c1Loop = true;
   806c2:	2201      	movs	r2, #1
   806c4:	4b04      	ldr	r3, [pc, #16]	; (806d8 <pin14_edge_handler+0x30>)
   806c6:	701a      	strb	r2, [r3, #0]
   806c8:	bd08      	pop	{r3, pc}
   806ca:	bf00      	nop
   806cc:	400e1000 	.word	0x400e1000
   806d0:	00080e59 	.word	0x00080e59
   806d4:	20070a66 	.word	0x20070a66
   806d8:	20070138 	.word	0x20070138

000806dc <configInterrupts>:
 uint16_t counter_2 = 0;
 bool c1Loop = true;
 bool c2Loop = true;


void configInterrupts(void){
   806dc:	b570      	push	{r4, r5, r6, lr}
   806de:	b082      	sub	sp, #8

	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   806e0:	200c      	movs	r0, #12
   806e2:	4c1a      	ldr	r4, [pc, #104]	; (8074c <configInterrupts+0x70>)
   806e4:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);
   806e6:	200d      	movs	r0, #13
   806e8:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   806ea:	4d19      	ldr	r5, [pc, #100]	; (80750 <configInterrupts+0x74>)
   806ec:	4628      	mov	r0, r5
   806ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   806f2:	2201      	movs	r2, #1
   806f4:	4e17      	ldr	r6, [pc, #92]	; (80754 <configInterrupts+0x78>)
   806f6:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   806f8:	4c17      	ldr	r4, [pc, #92]	; (80758 <configInterrupts+0x7c>)
   806fa:	4620      	mov	r0, r4
   806fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80700:	2201      	movs	r2, #1
   80702:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   80704:	4b15      	ldr	r3, [pc, #84]	; (8075c <configInterrupts+0x80>)
   80706:	9300      	str	r3, [sp, #0]
   80708:	4628      	mov	r0, r5
   8070a:	210d      	movs	r1, #13
   8070c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80710:	2340      	movs	r3, #64	; 0x40
   80712:	4e13      	ldr	r6, [pc, #76]	; (80760 <configInterrupts+0x84>)
   80714:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   80716:	4b13      	ldr	r3, [pc, #76]	; (80764 <configInterrupts+0x88>)
   80718:	9300      	str	r3, [sp, #0]
   8071a:	4620      	mov	r0, r4
   8071c:	210c      	movs	r1, #12
   8071e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80722:	2340      	movs	r3, #64	; 0x40
   80724:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   80726:	4628      	mov	r0, r5
   80728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8072c:	4d0e      	ldr	r5, [pc, #56]	; (80768 <configInterrupts+0x8c>)
   8072e:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   80730:	4620      	mov	r0, r4
   80732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80736:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80738:	4b0c      	ldr	r3, [pc, #48]	; (8076c <configInterrupts+0x90>)
   8073a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8073e:	601a      	str	r2, [r3, #0]
   80740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80744:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);


}
   80746:	b002      	add	sp, #8
   80748:	bd70      	pop	{r4, r5, r6, pc}
   8074a:	bf00      	nop
   8074c:	000811a5 	.word	0x000811a5
   80750:	400e1200 	.word	0x400e1200
   80754:	00080eb1 	.word	0x00080eb1
   80758:	400e1000 	.word	0x400e1000
   8075c:	00080675 	.word	0x00080675
   80760:	00081119 	.word	0x00081119
   80764:	000806a9 	.word	0x000806a9
   80768:	00080f3d 	.word	0x00080f3d
   8076c:	e000e100 	.word	0xe000e100

00080770 <reset_Counter>:
			//printf("\n c2 = %d",counter_2);
	}
}

void reset_Counter(void){
	counter_1=0;
   80770:	2300      	movs	r3, #0
   80772:	4a02      	ldr	r2, [pc, #8]	; (8077c <reset_Counter+0xc>)
   80774:	8013      	strh	r3, [r2, #0]
	counter_2=0;
   80776:	4a02      	ldr	r2, [pc, #8]	; (80780 <reset_Counter+0x10>)
   80778:	8013      	strh	r3, [r2, #0]
   8077a:	4770      	bx	lr
   8077c:	20070a66 	.word	0x20070a66
   80780:	20070a68 	.word	0x20070a68

00080784 <calculateDistance>:
	double degree;
	degree = radian*(180/M_PI);
	return degree;
}

double calculateDistance (double Xa, double Ya, double Xb, double Yb){
   80784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80788:	4606      	mov	r6, r0
   8078a:	460f      	mov	r7, r1
   8078c:	4614      	mov	r4, r2
   8078e:	461d      	mov	r5, r3
	double distance;
	double deltaX = Xb - Xa;
   80790:	f8df a054 	ldr.w	sl, [pc, #84]	; 807e8 <calculateDistance+0x64>
   80794:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   80798:	4632      	mov	r2, r6
   8079a:	463b      	mov	r3, r7
   8079c:	47d0      	blx	sl
   8079e:	4680      	mov	r8, r0
   807a0:	4689      	mov	r9, r1
	double deltaY = Yb - Ya;
   807a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   807a6:	4622      	mov	r2, r4
   807a8:	462b      	mov	r3, r5
   807aa:	47d0      	blx	sl
   807ac:	4604      	mov	r4, r0
   807ae:	460d      	mov	r5, r1
	distance = sqrt((deltaX*deltaX) + (deltaY*deltaY));
   807b0:	f8df a038 	ldr.w	sl, [pc, #56]	; 807ec <calculateDistance+0x68>
   807b4:	f8df b038 	ldr.w	fp, [pc, #56]	; 807f0 <calculateDistance+0x6c>
   807b8:	4640      	mov	r0, r8
   807ba:	4649      	mov	r1, r9
   807bc:	4642      	mov	r2, r8
   807be:	464b      	mov	r3, r9
   807c0:	47d0      	blx	sl
   807c2:	4606      	mov	r6, r0
   807c4:	460f      	mov	r7, r1
   807c6:	4620      	mov	r0, r4
   807c8:	4629      	mov	r1, r5
   807ca:	4622      	mov	r2, r4
   807cc:	462b      	mov	r3, r5
   807ce:	47d0      	blx	sl
   807d0:	4602      	mov	r2, r0
   807d2:	460b      	mov	r3, r1
   807d4:	4630      	mov	r0, r6
   807d6:	4639      	mov	r1, r7
   807d8:	47d8      	blx	fp
   807da:	4b02      	ldr	r3, [pc, #8]	; (807e4 <calculateDistance+0x60>)
   807dc:	4798      	blx	r3
	return distance;
}
   807de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807e2:	bf00      	nop
   807e4:	00081831 	.word	0x00081831
   807e8:	00081ab9 	.word	0x00081ab9
   807ec:	00081e21 	.word	0x00081e21
   807f0:	00081abd 	.word	0x00081abd
   807f4:	00000000 	.word	0x00000000

000807f8 <calculateAzimuthAngle>:

double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
   807f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807fc:	4604      	mov	r4, r0
   807fe:	460d      	mov	r5, r1
   80800:	4616      	mov	r6, r2
   80802:	461f      	mov	r7, r3
	double azimutAngle = 0;
	double deltaX = Xb-Xa;
   80804:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 809fc <calculateAzimuthAngle+0x204>
   80808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   8080c:	4622      	mov	r2, r4
   8080e:	462b      	mov	r3, r5
   80810:	47c0      	blx	r8
   80812:	4604      	mov	r4, r0
   80814:	460d      	mov	r5, r1
	double deltaY = Yb-Ya;
   80816:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8081a:	4632      	mov	r2, r6
   8081c:	463b      	mov	r3, r7
   8081e:	47c0      	blx	r8
   80820:	4606      	mov	r6, r0
   80822:	460f      	mov	r7, r1
	
	if ( (deltaX == 0) && (deltaY == 0) )
   80824:	4620      	mov	r0, r4
   80826:	4629      	mov	r1, r5
   80828:	2200      	movs	r2, #0
   8082a:	2300      	movs	r3, #0
   8082c:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 809d8 <calculateAzimuthAngle+0x1e0>
   80830:	47e0      	blx	ip
   80832:	b1a8      	cbz	r0, 80860 <calculateAzimuthAngle+0x68>
   80834:	4630      	mov	r0, r6
   80836:	4639      	mov	r1, r7
   80838:	2200      	movs	r2, #0
   8083a:	2300      	movs	r3, #0
   8083c:	4c66      	ldr	r4, [pc, #408]	; (809d8 <calculateAzimuthAngle+0x1e0>)
   8083e:	47a0      	blx	r4
   80840:	2800      	cmp	r0, #0
   80842:	f040 80aa 	bne.w	8099a <calculateAzimuthAngle+0x1a2>
	{
		azimutAngle = 0;
	} 
	else if (deltaX == 0)
	{
		if (deltaY>0)
   80846:	4630      	mov	r0, r6
   80848:	4639      	mov	r1, r7
   8084a:	2200      	movs	r2, #0
   8084c:	2300      	movs	r3, #0
   8084e:	4c63      	ldr	r4, [pc, #396]	; (809dc <calculateAzimuthAngle+0x1e4>)
   80850:	47a0      	blx	r4
   80852:	2800      	cmp	r0, #0
   80854:	f000 80a5 	beq.w	809a2 <calculateAzimuthAngle+0x1aa>
		{
			azimutAngle = 0;
   80858:	2000      	movs	r0, #0
   8085a:	2100      	movs	r1, #0
   8085c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 180;
		}
		
	}
	else if (deltaY == 0)
   80860:	4630      	mov	r0, r6
   80862:	4639      	mov	r1, r7
   80864:	2200      	movs	r2, #0
   80866:	2300      	movs	r3, #0
   80868:	f8df c16c 	ldr.w	ip, [pc, #364]	; 809d8 <calculateAzimuthAngle+0x1e0>
   8086c:	47e0      	blx	ip
   8086e:	b160      	cbz	r0, 8088a <calculateAzimuthAngle+0x92>
	{
		if (deltaX>0)
   80870:	4620      	mov	r0, r4
   80872:	4629      	mov	r1, r5
   80874:	2200      	movs	r2, #0
   80876:	2300      	movs	r3, #0
   80878:	4c58      	ldr	r4, [pc, #352]	; (809dc <calculateAzimuthAngle+0x1e4>)
   8087a:	47a0      	blx	r4
   8087c:	2800      	cmp	r0, #0
   8087e:	f000 8094 	beq.w	809aa <calculateAzimuthAngle+0x1b2>
		{
			azimutAngle = 90;
   80882:	2000      	movs	r0, #0
   80884:	4956      	ldr	r1, [pc, #344]	; (809e0 <calculateAzimuthAngle+0x1e8>)
   80886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		
	}
	else
	{
		if ( (deltaX > 0) && (deltaY > 0 ) )
   8088a:	4620      	mov	r0, r4
   8088c:	4629      	mov	r1, r5
   8088e:	2200      	movs	r2, #0
   80890:	2300      	movs	r3, #0
   80892:	f8df c148 	ldr.w	ip, [pc, #328]	; 809dc <calculateAzimuthAngle+0x1e4>
   80896:	47e0      	blx	ip
   80898:	b1b0      	cbz	r0, 808c8 <calculateAzimuthAngle+0xd0>
   8089a:	4630      	mov	r0, r6
   8089c:	4639      	mov	r1, r7
   8089e:	2200      	movs	r2, #0
   808a0:	2300      	movs	r3, #0
   808a2:	f8df c138 	ldr.w	ip, [pc, #312]	; 809dc <calculateAzimuthAngle+0x1e4>
   808a6:	47e0      	blx	ip
   808a8:	b1b0      	cbz	r0, 808d8 <calculateAzimuthAngle+0xe0>
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   808aa:	4620      	mov	r0, r4
   808ac:	4629      	mov	r1, r5
   808ae:	4632      	mov	r2, r6
   808b0:	463b      	mov	r3, r7
   808b2:	4c4c      	ldr	r4, [pc, #304]	; (809e4 <calculateAzimuthAngle+0x1ec>)
   808b4:	47a0      	blx	r4
   808b6:	4b4c      	ldr	r3, [pc, #304]	; (809e8 <calculateAzimuthAngle+0x1f0>)
   808b8:	4798      	blx	r3
#include "MathFunctions.h"


double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   808ba:	a343      	add	r3, pc, #268	; (adr r3, 809c8 <calculateAzimuthAngle+0x1d0>)
   808bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   808c0:	4c4a      	ldr	r4, [pc, #296]	; (809ec <calculateAzimuthAngle+0x1f4>)
   808c2:	47a0      	blx	r4
	}
	else
	{
		if ( (deltaX > 0) && (deltaY > 0 ) )
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   808c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} 
		else if ( (deltaX > 0) && (deltaY < 0 ) )
   808c8:	4620      	mov	r0, r4
   808ca:	4629      	mov	r1, r5
   808cc:	2200      	movs	r2, #0
   808ce:	2300      	movs	r3, #0
   808d0:	f8df c108 	ldr.w	ip, [pc, #264]	; 809dc <calculateAzimuthAngle+0x1e4>
   808d4:	47e0      	blx	ip
   808d6:	b1d0      	cbz	r0, 8090e <calculateAzimuthAngle+0x116>
   808d8:	4630      	mov	r0, r6
   808da:	4639      	mov	r1, r7
   808dc:	2200      	movs	r2, #0
   808de:	2300      	movs	r3, #0
   808e0:	f8df c11c 	ldr.w	ip, [pc, #284]	; 80a00 <calculateAzimuthAngle+0x208>
   808e4:	47e0      	blx	ip
   808e6:	b190      	cbz	r0, 8090e <calculateAzimuthAngle+0x116>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   808e8:	4620      	mov	r0, r4
   808ea:	4629      	mov	r1, r5
   808ec:	4632      	mov	r2, r6
   808ee:	463b      	mov	r3, r7
   808f0:	4c3c      	ldr	r4, [pc, #240]	; (809e4 <calculateAzimuthAngle+0x1ec>)
   808f2:	47a0      	blx	r4
   808f4:	4b3c      	ldr	r3, [pc, #240]	; (809e8 <calculateAzimuthAngle+0x1f0>)
   808f6:	4798      	blx	r3
#include "MathFunctions.h"


double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   808f8:	a333      	add	r3, pc, #204	; (adr r3, 809c8 <calculateAzimuthAngle+0x1d0>)
   808fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   808fe:	4c3b      	ldr	r4, [pc, #236]	; (809ec <calculateAzimuthAngle+0x1f4>)
   80900:	47a0      	blx	r4
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
		} 
		else if ( (deltaX > 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   80902:	2200      	movs	r2, #0
   80904:	4b3a      	ldr	r3, [pc, #232]	; (809f0 <calculateAzimuthAngle+0x1f8>)
   80906:	4c3b      	ldr	r4, [pc, #236]	; (809f4 <calculateAzimuthAngle+0x1fc>)
   80908:	47a0      	blx	r4
   8090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		else if ( (deltaX < 0) && (deltaY < 0 ) )
   8090e:	4620      	mov	r0, r4
   80910:	4629      	mov	r1, r5
   80912:	2200      	movs	r2, #0
   80914:	2300      	movs	r3, #0
   80916:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 80a00 <calculateAzimuthAngle+0x208>
   8091a:	47e0      	blx	ip
   8091c:	b1d0      	cbz	r0, 80954 <calculateAzimuthAngle+0x15c>
   8091e:	4630      	mov	r0, r6
   80920:	4639      	mov	r1, r7
   80922:	2200      	movs	r2, #0
   80924:	2300      	movs	r3, #0
   80926:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 80a00 <calculateAzimuthAngle+0x208>
   8092a:	47e0      	blx	ip
   8092c:	b1d0      	cbz	r0, 80964 <calculateAzimuthAngle+0x16c>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   8092e:	4620      	mov	r0, r4
   80930:	4629      	mov	r1, r5
   80932:	4632      	mov	r2, r6
   80934:	463b      	mov	r3, r7
   80936:	4c2b      	ldr	r4, [pc, #172]	; (809e4 <calculateAzimuthAngle+0x1ec>)
   80938:	47a0      	blx	r4
   8093a:	4b2b      	ldr	r3, [pc, #172]	; (809e8 <calculateAzimuthAngle+0x1f0>)
   8093c:	4798      	blx	r3
#include "MathFunctions.h"


double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   8093e:	a322      	add	r3, pc, #136	; (adr r3, 809c8 <calculateAzimuthAngle+0x1d0>)
   80940:	e9d3 2300 	ldrd	r2, r3, [r3]
   80944:	4c29      	ldr	r4, [pc, #164]	; (809ec <calculateAzimuthAngle+0x1f4>)
   80946:	47a0      	blx	r4
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
		}
		else if ( (deltaX < 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   80948:	2200      	movs	r2, #0
   8094a:	4b29      	ldr	r3, [pc, #164]	; (809f0 <calculateAzimuthAngle+0x1f8>)
   8094c:	4c29      	ldr	r4, [pc, #164]	; (809f4 <calculateAzimuthAngle+0x1fc>)
   8094e:	47a0      	blx	r4
   80950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		else if ( (deltaX < 0) && (deltaY > 0 ) )
   80954:	4620      	mov	r0, r4
   80956:	4629      	mov	r1, r5
   80958:	2200      	movs	r2, #0
   8095a:	2300      	movs	r3, #0
   8095c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80a00 <calculateAzimuthAngle+0x208>
   80960:	47e0      	blx	ip
   80962:	b338      	cbz	r0, 809b4 <calculateAzimuthAngle+0x1bc>
   80964:	4630      	mov	r0, r6
   80966:	4639      	mov	r1, r7
   80968:	2200      	movs	r2, #0
   8096a:	2300      	movs	r3, #0
   8096c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 809dc <calculateAzimuthAngle+0x1e4>
   80970:	47e0      	blx	ip
   80972:	b318      	cbz	r0, 809bc <calculateAzimuthAngle+0x1c4>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   80974:	4620      	mov	r0, r4
   80976:	4629      	mov	r1, r5
   80978:	4632      	mov	r2, r6
   8097a:	463b      	mov	r3, r7
   8097c:	4c19      	ldr	r4, [pc, #100]	; (809e4 <calculateAzimuthAngle+0x1ec>)
   8097e:	47a0      	blx	r4
   80980:	4b19      	ldr	r3, [pc, #100]	; (809e8 <calculateAzimuthAngle+0x1f0>)
   80982:	4798      	blx	r3
#include "MathFunctions.h"


double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   80984:	a310      	add	r3, pc, #64	; (adr r3, 809c8 <calculateAzimuthAngle+0x1d0>)
   80986:	e9d3 2300 	ldrd	r2, r3, [r3]
   8098a:	4c18      	ldr	r4, [pc, #96]	; (809ec <calculateAzimuthAngle+0x1f4>)
   8098c:	47a0      	blx	r4
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
		}
		else if ( (deltaX < 0) && (deltaY > 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   8098e:	2200      	movs	r2, #0
   80990:	4b19      	ldr	r3, [pc, #100]	; (809f8 <calculateAzimuthAngle+0x200>)
   80992:	4c18      	ldr	r4, [pc, #96]	; (809f4 <calculateAzimuthAngle+0x1fc>)
   80994:	47a0      	blx	r4
   80996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	double deltaX = Xb-Xa;
	double deltaY = Yb-Ya;
	
	if ( (deltaX == 0) && (deltaY == 0) )
	{
		azimutAngle = 0;
   8099a:	2000      	movs	r0, #0
   8099c:	2100      	movs	r1, #0
   8099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 0;
		} 
		else
		{
			azimutAngle = 180;
   809a2:	2000      	movs	r0, #0
   809a4:	4912      	ldr	r1, [pc, #72]	; (809f0 <calculateAzimuthAngle+0x1f8>)
   809a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 90;
		} 
		else
		{
			azimutAngle = 270;
   809aa:	a109      	add	r1, pc, #36	; (adr r1, 809d0 <calculateAzimuthAngle+0x1d8>)
   809ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   809b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	distance = sqrt((deltaX*deltaX) + (deltaY*deltaY));
	return distance;
}

double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
	double azimutAngle = 0;
   809b4:	2000      	movs	r0, #0
   809b6:	2100      	movs	r1, #0
   809b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809bc:	2000      	movs	r0, #0
   809be:	2100      	movs	r1, #0
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
		}
	}
	
	return azimutAngle;
}
   809c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809c4:	f3af 8000 	nop.w
   809c8:	1a63c1f8 	.word	0x1a63c1f8
   809cc:	404ca5dc 	.word	0x404ca5dc
   809d0:	00000000 	.word	0x00000000
   809d4:	4070e000 	.word	0x4070e000
   809d8:	000822f1 	.word	0x000822f1
   809dc:	00082341 	.word	0x00082341
   809e0:	40568000 	.word	0x40568000
   809e4:	00082075 	.word	0x00082075
   809e8:	000814d9 	.word	0x000814d9
   809ec:	00081e21 	.word	0x00081e21
   809f0:	40668000 	.word	0x40668000
   809f4:	00081abd 	.word	0x00081abd
   809f8:	40768000 	.word	0x40768000
   809fc:	00081ab9 	.word	0x00081ab9
   80a00:	00082305 	.word	0x00082305
   80a04:	f3af 8000 	nop.w

00080a08 <calcluteRotationAngle>:

double calcluteRotationAngle (double Xa, double Ya, double Xb, double Yb, double Xc, double Yc){
   80a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80a0c:	b084      	sub	sp, #16
   80a0e:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
   80a12:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
	
	double AoB = calculateAzimuthAngle(Xa, Ya, Xb, Yb);
   80a16:	e9cd 4500 	strd	r4, r5, [sp]
   80a1a:	e9cd 8902 	strd	r8, r9, [sp, #8]
   80a1e:	f8df a064 	ldr.w	sl, [pc, #100]	; 80a84 <calcluteRotationAngle+0x7c>
   80a22:	47d0      	blx	sl
   80a24:	4606      	mov	r6, r0
   80a26:	460f      	mov	r7, r1
	double BoC = calculateAzimuthAngle(Xb, Yb, Xc, Yc);
   80a28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   80a2c:	e9cd 2300 	strd	r2, r3, [sp]
   80a30:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   80a34:	e9cd 2302 	strd	r2, r3, [sp, #8]
   80a38:	4620      	mov	r0, r4
   80a3a:	4629      	mov	r1, r5
   80a3c:	4642      	mov	r2, r8
   80a3e:	464b      	mov	r3, r9
   80a40:	47d0      	blx	sl
	double rotationAngle = BoC-AoB;
   80a42:	4632      	mov	r2, r6
   80a44:	463b      	mov	r3, r7
   80a46:	4c0b      	ldr	r4, [pc, #44]	; (80a74 <calcluteRotationAngle+0x6c>)
   80a48:	47a0      	blx	r4
   80a4a:	4604      	mov	r4, r0
   80a4c:	460d      	mov	r5, r1
	if (rotationAngle > 180)
   80a4e:	2200      	movs	r2, #0
   80a50:	4b09      	ldr	r3, [pc, #36]	; (80a78 <calcluteRotationAngle+0x70>)
   80a52:	4e0a      	ldr	r6, [pc, #40]	; (80a7c <calcluteRotationAngle+0x74>)
   80a54:	47b0      	blx	r6
   80a56:	b138      	cbz	r0, 80a68 <calcluteRotationAngle+0x60>
	{
		rotationAngle =  rotationAngle - 360;
   80a58:	4620      	mov	r0, r4
   80a5a:	4629      	mov	r1, r5
   80a5c:	2200      	movs	r2, #0
   80a5e:	4b08      	ldr	r3, [pc, #32]	; (80a80 <calcluteRotationAngle+0x78>)
   80a60:	4c04      	ldr	r4, [pc, #16]	; (80a74 <calcluteRotationAngle+0x6c>)
   80a62:	47a0      	blx	r4
   80a64:	4604      	mov	r4, r0
   80a66:	460d      	mov	r5, r1
	}

	return rotationAngle;
   80a68:	4620      	mov	r0, r4
   80a6a:	4629      	mov	r1, r5
   80a6c:	b004      	add	sp, #16
   80a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a72:	bf00      	nop
   80a74:	00081ab9 	.word	0x00081ab9
   80a78:	40668000 	.word	0x40668000
   80a7c:	00082341 	.word	0x00082341
   80a80:	40768000 	.word	0x40768000
   80a84:	000807f9 	.word	0x000807f9

00080a88 <moveTo>:
extern uint16_t counter_2;
extern bool c1Loop;
extern bool c2Loop;


void moveTo (int distance, int direction){
   80a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float totalPulses = (distance/1.38);
   80a8c:	4b48      	ldr	r3, [pc, #288]	; (80bb0 <moveTo+0x128>)
   80a8e:	4798      	blx	r3
   80a90:	a345      	add	r3, pc, #276	; (adr r3, 80ba8 <moveTo+0x120>)
   80a92:	e9d3 2300 	ldrd	r2, r3, [r3]
   80a96:	4c47      	ldr	r4, [pc, #284]	; (80bb4 <moveTo+0x12c>)
   80a98:	47a0      	blx	r4
   80a9a:	4b47      	ldr	r3, [pc, #284]	; (80bb8 <moveTo+0x130>)
   80a9c:	4798      	blx	r3
   80a9e:	4607      	mov	r7, r0
    int dPart=0;
	int kp=10;
    int kd=2;
    int ki=2;
	float totMovement = 0;
	delay_us(300);
   80aa0:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   80aa4:	4c45      	ldr	r4, [pc, #276]	; (80bbc <moveTo+0x134>)
   80aa6:	47a0      	blx	r4
	reset_Counter();
   80aa8:	4b45      	ldr	r3, [pc, #276]	; (80bc0 <moveTo+0x138>)
   80aaa:	4798      	blx	r3
	delay_us(300);
   80aac:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   80ab0:	47a0      	blx	r4
	{
		direction=1;
	}

	
    while (totMovement <= totalPulses) {
   80ab2:	4638      	mov	r0, r7
   80ab4:	2100      	movs	r1, #0
   80ab6:	4b43      	ldr	r3, [pc, #268]	; (80bc4 <moveTo+0x13c>)
   80ab8:	4798      	blx	r3
   80aba:	2800      	cmp	r0, #0
   80abc:	d066      	beq.n	80b8c <moveTo+0x104>
    int iPart=0;
    int dPart=0;
	int kp=10;
    int kd=2;
    int ki=2;
	float totMovement = 0;
   80abe:	2500      	movs	r5, #0
void moveTo (int distance, int direction){
	float totalPulses = (distance/1.38);
	uint16_t speed = 1700;
	int proportionalError = 0;
    int derivativeError=0;
    int integralError=0;
   80ac0:	f04f 0900 	mov.w	r9, #0
	}

	
    while (totMovement <= totalPulses) {
		delay_ms(1);
      if (c1Loop == true && c2Loop == true) {
   80ac4:	4e40      	ldr	r6, [pc, #256]	; (80bc8 <moveTo+0x140>)
   80ac6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80be0 <moveTo+0x158>
		direction=1;
	}

	
    while (totMovement <= totalPulses) {
		delay_ms(1);
   80aca:	f241 7070 	movw	r0, #6000	; 0x1770
   80ace:	47a0      	blx	r4
      if (c1Loop == true && c2Loop == true) {
   80ad0:	7833      	ldrb	r3, [r6, #0]
   80ad2:	2b00      	cmp	r3, #0
   80ad4:	d054      	beq.n	80b80 <moveTo+0xf8>
   80ad6:	f898 3000 	ldrb.w	r3, [r8]
   80ada:	2b00      	cmp	r3, #0
   80adc:	d050      	beq.n	80b80 <moveTo+0xf8>
		totMovement = totMovement + ((counter_1+counter_2)/2);
   80ade:	f8df b104 	ldr.w	fp, [pc, #260]	; 80be4 <moveTo+0x15c>
   80ae2:	f8bb 0000 	ldrh.w	r0, [fp]
   80ae6:	f8df a100 	ldr.w	sl, [pc, #256]	; 80be8 <moveTo+0x160>
   80aea:	f8ba 3000 	ldrh.w	r3, [sl]
   80aee:	4418      	add	r0, r3
   80af0:	1040      	asrs	r0, r0, #1
   80af2:	4b36      	ldr	r3, [pc, #216]	; (80bcc <moveTo+0x144>)
   80af4:	4798      	blx	r3
   80af6:	4601      	mov	r1, r0
   80af8:	4628      	mov	r0, r5
   80afa:	4b35      	ldr	r3, [pc, #212]	; (80bd0 <moveTo+0x148>)
   80afc:	4798      	blx	r3
   80afe:	4605      	mov	r5, r0
		delay_ms(1);
   80b00:	f241 7070 	movw	r0, #6000	; 0x1770
   80b04:	47a0      	blx	r4
        measurementValue = (counter_2-counter_1);
   80b06:	f8ba a000 	ldrh.w	sl, [sl]
   80b0a:	f8bb 3000 	ldrh.w	r3, [fp]
   80b0e:	ebc3 0a0a 	rsb	sl, r3, sl
		delay_us(500);
   80b12:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b16:	47a0      	blx	r4
        reset_Counter();
   80b18:	4b29      	ldr	r3, [pc, #164]	; (80bc0 <moveTo+0x138>)
   80b1a:	4798      	blx	r3
		delay_us(500);
   80b1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b20:	47a0      	blx	r4
        dPart = (kd*(proportionalError-derivativeError));
		delay_us(500);
   80b22:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b26:	47a0      	blx	r4
        iPart = (ki*integralError);
		delay_us(500);
   80b28:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b2c:	47a0      	blx	r4
		proportionalError = (referenceValue - measurementValue);
		delay_us(500);
   80b2e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b32:	47a0      	blx	r4
		delay_us(500);
        dPart = (kd*(proportionalError-derivativeError));
		delay_us(500);
        iPart = (ki*integralError);
		delay_us(500);
		proportionalError = (referenceValue - measurementValue);
   80b34:	f1ca 0b00 	rsb	fp, sl, #0
		delay_us(500);
		controlValue = ((kp*proportionalError)+iPart+dPart);
   80b38:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
		delay_us(500);
        reset_Counter();
		delay_us(500);
        dPart = (kd*(proportionalError-derivativeError));
		delay_us(500);
        iPart = (ki*integralError);
   80b3c:	ea4f 0349 	mov.w	r3, r9, lsl #1
		delay_us(500);
		proportionalError = (referenceValue - measurementValue);
		delay_us(500);
		controlValue = ((kp*proportionalError)+iPart+dPart);
   80b40:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
		delay_us(500);
   80b44:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b48:	47a0      	blx	r4
// 		else if ((totMovement/totalPulses)>= 0.9)
// 		{
// 			speed = 1580;
// 		}
		
		rightWheel((speed+controlValue));
   80b4a:	f20b 60a4 	addw	r0, fp, #1700	; 0x6a4
   80b4e:	4b21      	ldr	r3, [pc, #132]	; (80bd4 <moveTo+0x14c>)
   80b50:	4798      	blx	r3
		leftWheel((speed-controlValue));
   80b52:	f5cb 60d4 	rsb	r0, fp, #1696	; 0x6a0
   80b56:	3004      	adds	r0, #4
   80b58:	4b1f      	ldr	r3, [pc, #124]	; (80bd8 <moveTo+0x150>)
   80b5a:	4798      	blx	r3
		delay_us(500);
   80b5c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b60:	47a0      	blx	r4
	    //error=error*-1;
        derivativeError = proportionalError;
		delay_us(500);
   80b62:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b66:	47a0      	blx	r4
        integralError = (integralError+proportionalError);
   80b68:	ebca 0909 	rsb	r9, sl, r9
		delay_us(500);
   80b6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b70:	47a0      	blx	r4
        c1Loop = false;
   80b72:	2300      	movs	r3, #0
   80b74:	7033      	strb	r3, [r6, #0]
        c2Loop = false;
   80b76:	f888 3000 	strb.w	r3, [r8]
		delay_us(500);
   80b7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b7e:	47a0      	blx	r4
	{
		direction=1;
	}

	
    while (totMovement <= totalPulses) {
   80b80:	4638      	mov	r0, r7
   80b82:	4629      	mov	r1, r5
   80b84:	4b0f      	ldr	r3, [pc, #60]	; (80bc4 <moveTo+0x13c>)
   80b86:	4798      	blx	r3
   80b88:	2800      	cmp	r0, #0
   80b8a:	d19e      	bne.n	80aca <moveTo+0x42>
		delay_us(500);
		//printf("%d\n",totMovement);
      }

	}
	rightWheel(1500);
   80b8c:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80b90:	4b10      	ldr	r3, [pc, #64]	; (80bd4 <moveTo+0x14c>)
   80b92:	4798      	blx	r3
	leftWheel(1500);
   80b94:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80b98:	4b0f      	ldr	r3, [pc, #60]	; (80bd8 <moveTo+0x150>)
   80b9a:	4798      	blx	r3
	delay_s(2);
   80b9c:	480f      	ldr	r0, [pc, #60]	; (80bdc <moveTo+0x154>)
   80b9e:	4b07      	ldr	r3, [pc, #28]	; (80bbc <moveTo+0x134>)
   80ba0:	4798      	blx	r3
   80ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80ba6:	bf00      	nop
   80ba8:	e147ae14 	.word	0xe147ae14
   80bac:	3ff6147a 	.word	0x3ff6147a
   80bb0:	00081d55 	.word	0x00081d55
   80bb4:	00082075 	.word	0x00082075
   80bb8:	000823a5 	.word	0x000823a5
   80bbc:	20070001 	.word	0x20070001
   80bc0:	00080771 	.word	0x00080771
   80bc4:	00082725 	.word	0x00082725
   80bc8:	20070138 	.word	0x20070138
   80bcc:	000825b9 	.word	0x000825b9
   80bd0:	00082451 	.word	0x00082451
   80bd4:	00080db9 	.word	0x00080db9
   80bd8:	00080d89 	.word	0x00080d89
   80bdc:	00b71b00 	.word	0x00b71b00
   80be0:	20070139 	.word	0x20070139
   80be4:	20070a66 	.word	0x20070a66
   80be8:	20070a68 	.word	0x20070a68
   80bec:	f3af 8000 	nop.w

00080bf0 <rotation>:

/* This method rotates the robot around its own axis at the desired degree and speed
   @param degree rotation degree
   @param ratationSpeed rotation speed
*/
void rotation (int degree, int rotationSpeed){
   80bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80bf4:	4604      	mov	r4, r0
   80bf6:	460f      	mov	r7, r1
	int gain = 5;
	int checkValue=0;
	int totalPulses;

	int course=1;     // rotation course, 1 to right -1 to left
	rightWheel(1500);
   80bf8:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80bfc:	4b20      	ldr	r3, [pc, #128]	; (80c80 <rotation+0x90>)
   80bfe:	4798      	blx	r3
	leftWheel(1500);
   80c00:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c04:	4b1f      	ldr	r3, [pc, #124]	; (80c84 <rotation+0x94>)
   80c06:	4798      	blx	r3

     if (degree<0)
   80c08:	2c00      	cmp	r4, #0
     {
		 course=-1;
		 degree=degree*course;
   80c0a:	bfba      	itte	lt
   80c0c:	4264      	neglt	r4, r4
	rightWheel(1500);
	leftWheel(1500);

     if (degree<0)
     {
		 course=-1;
   80c0e:	f04f 38ff 	movlt.w	r8, #4294967295
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
	int totalPulses;

	int course=1;     // rotation course, 1 to right -1 to left
   80c12:	f04f 0801 	movge.w	r8, #1
     {
		 course=-1;
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
   80c16:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   80c1a:	1064      	asrs	r4, r4, #1
	reset_Counter();
   80c1c:	4b1a      	ldr	r3, [pc, #104]	; (80c88 <rotation+0x98>)
   80c1e:	4798      	blx	r3
*/
void rotation (int degree, int rotationSpeed){
	int controlValue=0;
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
   80c20:	2200      	movs	r2, #0
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80c22:	4e1a      	ldr	r6, [pc, #104]	; (80c8c <rotation+0x9c>)
   80c24:	4d1a      	ldr	r5, [pc, #104]	; (80c90 <rotation+0xa0>)
		if ((counter_1+counter_2) > checkValue)
		{
 		measurementValue = (counter_2-counter_1);
 		controlValue = (gain*measurementValue);
		// update wheels speed
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80c26:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80c84 <rotation+0x94>
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80c2a:	e017      	b.n	80c5c <rotation+0x6c>
	{
		if ((counter_1+counter_2) > checkValue)
   80c2c:	4293      	cmp	r3, r2
   80c2e:	dd18      	ble.n	80c62 <rotation+0x72>
		{
 		measurementValue = (counter_2-counter_1);
   80c30:	ebc0 0a01 	rsb	sl, r0, r1
 		controlValue = (gain*measurementValue);
   80c34:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
		// update wheels speed
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80c38:	eb07 000a 	add.w	r0, r7, sl
   80c3c:	fb08 f000 	mul.w	r0, r8, r0
   80c40:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   80c44:	47c8      	blx	r9
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
   80c46:	ebc7 000a 	rsb	r0, r7, sl
   80c4a:	fb08 f000 	mul.w	r0, r8, r0
   80c4e:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   80c52:	4b0b      	ldr	r3, [pc, #44]	; (80c80 <rotation+0x90>)
   80c54:	4798      	blx	r3
		checkValue=counter_1+counter_2;
   80c56:	8832      	ldrh	r2, [r6, #0]
   80c58:	882b      	ldrh	r3, [r5, #0]
   80c5a:	441a      	add	r2, r3
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80c5c:	8830      	ldrh	r0, [r6, #0]
   80c5e:	8829      	ldrh	r1, [r5, #0]
   80c60:	1843      	adds	r3, r0, r1
   80c62:	429c      	cmp	r4, r3
   80c64:	dce2      	bgt.n	80c2c <rotation+0x3c>
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
		checkValue=counter_1+counter_2;
		}
	}
	//  stop wheels
	rightWheel(1500);
   80c66:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c6a:	4b05      	ldr	r3, [pc, #20]	; (80c80 <rotation+0x90>)
   80c6c:	4798      	blx	r3
	leftWheel(1500);
   80c6e:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c72:	4b04      	ldr	r3, [pc, #16]	; (80c84 <rotation+0x94>)
   80c74:	4798      	blx	r3
	reset_Counter();
   80c76:	4b04      	ldr	r3, [pc, #16]	; (80c88 <rotation+0x98>)
   80c78:	4798      	blx	r3
   80c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80c7e:	bf00      	nop
   80c80:	00080db9 	.word	0x00080db9
   80c84:	00080d89 	.word	0x00080d89
   80c88:	00080771 	.word	0x00080771
   80c8c:	20070a66 	.word	0x20070a66
   80c90:	20070a68 	.word	0x20070a68

00080c94 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   80c94:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   80c96:	2055      	movs	r0, #85	; 0x55
   80c98:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80c9c:	4b0b      	ldr	r3, [pc, #44]	; (80ccc <initPin21+0x38>)
   80c9e:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   80ca0:	4b0b      	ldr	r3, [pc, #44]	; (80cd0 <initPin21+0x3c>)
   80ca2:	2404      	movs	r4, #4
   80ca4:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80ca6:	220b      	movs	r2, #11
   80ca8:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   80caa:	2200      	movs	r2, #0
   80cac:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   80cae:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 7500;
   80cb0:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80cb4:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   80cb6:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   80cb8:	4d06      	ldr	r5, [pc, #24]	; (80cd4 <initPin21+0x40>)
   80cba:	4628      	mov	r0, r5
   80cbc:	4619      	mov	r1, r3
   80cbe:	4b06      	ldr	r3, [pc, #24]	; (80cd8 <initPin21+0x44>)
   80cc0:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80cc2:	4628      	mov	r0, r5
   80cc4:	4621      	mov	r1, r4
   80cc6:	4b05      	ldr	r3, [pc, #20]	; (80cdc <initPin21+0x48>)
   80cc8:	4798      	blx	r3
   80cca:	bd38      	pop	{r3, r4, r5, pc}
   80ccc:	00080f4d 	.word	0x00080f4d
   80cd0:	20070b4c 	.word	0x20070b4c
   80cd4:	40094000 	.word	0x40094000
   80cd8:	00081295 	.word	0x00081295
   80cdc:	000813bd 	.word	0x000813bd

00080ce0 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   80ce0:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   80ce2:	2056      	movs	r0, #86	; 0x56
   80ce4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80ce8:	4b0b      	ldr	r3, [pc, #44]	; (80d18 <initPin22+0x38>)
   80cea:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   80cec:	4b0b      	ldr	r3, [pc, #44]	; (80d1c <initPin22+0x3c>)
   80cee:	2405      	movs	r4, #5
   80cf0:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80cf2:	220b      	movs	r2, #11
   80cf4:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   80cf6:	2200      	movs	r2, #0
   80cf8:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   80cfa:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 7500;
   80cfc:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80d00:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   80d02:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   80d04:	4d06      	ldr	r5, [pc, #24]	; (80d20 <initPin22+0x40>)
   80d06:	4628      	mov	r0, r5
   80d08:	4619      	mov	r1, r3
   80d0a:	4b06      	ldr	r3, [pc, #24]	; (80d24 <initPin22+0x44>)
   80d0c:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   80d0e:	4628      	mov	r0, r5
   80d10:	4621      	mov	r1, r4
   80d12:	4b05      	ldr	r3, [pc, #20]	; (80d28 <initPin22+0x48>)
   80d14:	4798      	blx	r3
   80d16:	bd38      	pop	{r3, r4, r5, pc}
   80d18:	00080f4d 	.word	0x00080f4d
   80d1c:	20070b24 	.word	0x20070b24
   80d20:	40094000 	.word	0x40094000
   80d24:	00081295 	.word	0x00081295
   80d28:	000813bd 	.word	0x000813bd

00080d2c <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   80d2c:	b530      	push	{r4, r5, lr}
   80d2e:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   80d30:	2024      	movs	r0, #36	; 0x24
   80d32:	4b0d      	ldr	r3, [pc, #52]	; (80d68 <PWM_init+0x3c>)
   80d34:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   80d36:	4c0d      	ldr	r4, [pc, #52]	; (80d6c <PWM_init+0x40>)
   80d38:	4620      	mov	r0, r4
   80d3a:	2104      	movs	r1, #4
   80d3c:	4d0c      	ldr	r5, [pc, #48]	; (80d70 <PWM_init+0x44>)
   80d3e:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   80d40:	4620      	mov	r0, r4
   80d42:	2105      	movs	r1, #5
   80d44:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   80d46:	4b0b      	ldr	r3, [pc, #44]	; (80d74 <PWM_init+0x48>)
   80d48:	9301      	str	r3, [sp, #4]
   80d4a:	2300      	movs	r3, #0
   80d4c:	9302      	str	r3, [sp, #8]
   80d4e:	4b0a      	ldr	r3, [pc, #40]	; (80d78 <PWM_init+0x4c>)
   80d50:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   80d52:	4620      	mov	r0, r4
   80d54:	a901      	add	r1, sp, #4
   80d56:	4b09      	ldr	r3, [pc, #36]	; (80d7c <PWM_init+0x50>)
   80d58:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   80d5a:	4b09      	ldr	r3, [pc, #36]	; (80d80 <PWM_init+0x54>)
   80d5c:	4798      	blx	r3
	initPin22();
   80d5e:	4b09      	ldr	r3, [pc, #36]	; (80d84 <PWM_init+0x58>)
   80d60:	4798      	blx	r3
	
}
   80d62:	b005      	add	sp, #20
   80d64:	bd30      	pop	{r4, r5, pc}
   80d66:	bf00      	nop
   80d68:	000811a5 	.word	0x000811a5
   80d6c:	40094000 	.word	0x40094000
   80d70:	000813c9 	.word	0x000813c9
   80d74:	000f4240 	.word	0x000f4240
   80d78:	0501bd00 	.word	0x0501bd00
   80d7c:	00081255 	.word	0x00081255
   80d80:	00080c95 	.word	0x00080c95
   80d84:	00080ce1 	.word	0x00080ce1

00080d88 <leftWheel>:
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
}
 /* This method changes the duty cycle of PWM signal on pin 9. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void leftWheel(uint32_t duty){
   80d88:	b508      	push	{r3, lr}
	if(duty<800){
   80d8a:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80d8e:	d305      	bcc.n	80d9c <leftWheel+0x14>
   80d90:	f640 0298 	movw	r2, #2200	; 0x898
   80d94:	4290      	cmp	r0, r2
   80d96:	bf38      	it	cc
   80d98:	4602      	movcc	r2, r0
   80d9a:	e001      	b.n	80da0 <leftWheel+0x18>
		duty=800;
   80d9c:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_21, duty );
   80da0:	4802      	ldr	r0, [pc, #8]	; (80dac <leftWheel+0x24>)
   80da2:	4903      	ldr	r1, [pc, #12]	; (80db0 <leftWheel+0x28>)
   80da4:	4b03      	ldr	r3, [pc, #12]	; (80db4 <leftWheel+0x2c>)
   80da6:	4798      	blx	r3
   80da8:	bd08      	pop	{r3, pc}
   80daa:	bf00      	nop
   80dac:	40094000 	.word	0x40094000
   80db0:	20070b4c 	.word	0x20070b4c
   80db4:	00081399 	.word	0x00081399

00080db8 <rightWheel>:
}

 /* This method changes the duty cycle of PWM signal on pin 8. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void rightWheel(uint32_t duty){
   80db8:	b508      	push	{r3, lr}
	
	if(duty<800){
   80dba:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80dbe:	d305      	bcc.n	80dcc <rightWheel+0x14>
   80dc0:	f640 0298 	movw	r2, #2200	; 0x898
   80dc4:	4290      	cmp	r0, r2
   80dc6:	bf38      	it	cc
   80dc8:	4602      	movcc	r2, r0
   80dca:	e001      	b.n	80dd0 <rightWheel+0x18>
		duty=800;
   80dcc:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   80dd0:	4802      	ldr	r0, [pc, #8]	; (80ddc <rightWheel+0x24>)
   80dd2:	4903      	ldr	r1, [pc, #12]	; (80de0 <rightWheel+0x28>)
   80dd4:	4b03      	ldr	r3, [pc, #12]	; (80de4 <rightWheel+0x2c>)
   80dd6:	4798      	blx	r3
   80dd8:	bd08      	pop	{r3, pc}
   80dda:	bf00      	nop
   80ddc:	40094000 	.word	0x40094000
   80de0:	20070b24 	.word	0x20070b24
   80de4:	00081399 	.word	0x00081399

00080de8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80de8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80dea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80dee:	4b13      	ldr	r3, [pc, #76]	; (80e3c <board_init+0x54>)
   80df0:	605a      	str	r2, [r3, #4]
   80df2:	200b      	movs	r0, #11
   80df4:	4c12      	ldr	r4, [pc, #72]	; (80e40 <board_init+0x58>)
   80df6:	47a0      	blx	r4
   80df8:	200c      	movs	r0, #12
   80dfa:	47a0      	blx	r4
   80dfc:	200d      	movs	r0, #13
   80dfe:	47a0      	blx	r4
   80e00:	200e      	movs	r0, #14
   80e02:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80e04:	203b      	movs	r0, #59	; 0x3b
   80e06:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e0a:	4c0e      	ldr	r4, [pc, #56]	; (80e44 <board_init+0x5c>)
   80e0c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80e0e:	2055      	movs	r0, #85	; 0x55
   80e10:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e14:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80e16:	2056      	movs	r0, #86	; 0x56
   80e18:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e1c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80e1e:	2068      	movs	r0, #104	; 0x68
   80e20:	4909      	ldr	r1, [pc, #36]	; (80e48 <board_init+0x60>)
   80e22:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80e24:	205c      	movs	r0, #92	; 0x5c
   80e26:	4909      	ldr	r1, [pc, #36]	; (80e4c <board_init+0x64>)
   80e28:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80e2a:	4809      	ldr	r0, [pc, #36]	; (80e50 <board_init+0x68>)
   80e2c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80e34:	4b07      	ldr	r3, [pc, #28]	; (80e54 <board_init+0x6c>)
   80e36:	4798      	blx	r3
   80e38:	bd10      	pop	{r4, pc}
   80e3a:	bf00      	nop
   80e3c:	400e1a50 	.word	0x400e1a50
   80e40:	000811a5 	.word	0x000811a5
   80e44:	00080f4d 	.word	0x00080f4d
   80e48:	28000079 	.word	0x28000079
   80e4c:	28000001 	.word	0x28000001
   80e50:	400e0e00 	.word	0x400e0e00
   80e54:	00081021 	.word	0x00081021

00080e58 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80e58:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80e5c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   80e60:	bf0c      	ite	eq
   80e62:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   80e64:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   80e66:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   80e68:	bf0c      	ite	eq
   80e6a:	2000      	moveq	r0, #0
   80e6c:	2001      	movne	r0, #1
   80e6e:	4770      	bx	lr

00080e70 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80e70:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80e72:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80e76:	d016      	beq.n	80ea6 <pio_set_peripheral+0x36>
   80e78:	d804      	bhi.n	80e84 <pio_set_peripheral+0x14>
   80e7a:	b1c1      	cbz	r1, 80eae <pio_set_peripheral+0x3e>
   80e7c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80e80:	d00a      	beq.n	80e98 <pio_set_peripheral+0x28>
   80e82:	e013      	b.n	80eac <pio_set_peripheral+0x3c>
   80e84:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80e88:	d011      	beq.n	80eae <pio_set_peripheral+0x3e>
   80e8a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80e8e:	d00e      	beq.n	80eae <pio_set_peripheral+0x3e>
   80e90:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80e94:	d10a      	bne.n	80eac <pio_set_peripheral+0x3c>
   80e96:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80e98:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80e9a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80e9c:	400b      	ands	r3, r1
   80e9e:	ea23 0302 	bic.w	r3, r3, r2
   80ea2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80ea4:	e002      	b.n	80eac <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80ea6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80ea8:	4313      	orrs	r3, r2
   80eaa:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80eac:	6042      	str	r2, [r0, #4]
   80eae:	4770      	bx	lr

00080eb0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80eb0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80eb2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80eb6:	bf14      	ite	ne
   80eb8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80eba:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80ebc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80ec0:	bf14      	ite	ne
   80ec2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80ec4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80ec6:	f012 0f02 	tst.w	r2, #2
   80eca:	d002      	beq.n	80ed2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80ecc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80ed0:	e004      	b.n	80edc <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80ed2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80ed6:	bf18      	it	ne
   80ed8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80edc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80ede:	6001      	str	r1, [r0, #0]
   80ee0:	4770      	bx	lr
   80ee2:	bf00      	nop

00080ee4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80ee4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80ee6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ee8:	9c01      	ldr	r4, [sp, #4]
   80eea:	b10c      	cbz	r4, 80ef0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80eec:	6641      	str	r1, [r0, #100]	; 0x64
   80eee:	e000      	b.n	80ef2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80ef0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80ef2:	b10b      	cbz	r3, 80ef8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80ef4:	6501      	str	r1, [r0, #80]	; 0x50
   80ef6:	e000      	b.n	80efa <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80ef8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80efa:	b10a      	cbz	r2, 80f00 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80efc:	6301      	str	r1, [r0, #48]	; 0x30
   80efe:	e000      	b.n	80f02 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80f00:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80f02:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80f04:	6001      	str	r1, [r0, #0]
}
   80f06:	f85d 4b04 	ldr.w	r4, [sp], #4
   80f0a:	4770      	bx	lr

00080f0c <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   80f0c:	f012 0f10 	tst.w	r2, #16
   80f10:	d010      	beq.n	80f34 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   80f12:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80f16:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   80f1a:	bf14      	ite	ne
   80f1c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80f20:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   80f24:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   80f28:	bf14      	ite	ne
   80f2a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   80f2e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80f32:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   80f34:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80f38:	4770      	bx	lr
   80f3a:	bf00      	nop

00080f3c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   80f3c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   80f3e:	6401      	str	r1, [r0, #64]	; 0x40
   80f40:	4770      	bx	lr
   80f42:	bf00      	nop

00080f44 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80f44:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80f46:	4770      	bx	lr

00080f48 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80f48:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80f4a:	4770      	bx	lr

00080f4c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80f4c:	b570      	push	{r4, r5, r6, lr}
   80f4e:	b082      	sub	sp, #8
   80f50:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80f52:	0944      	lsrs	r4, r0, #5
   80f54:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80f58:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80f5c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80f5e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80f62:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80f66:	d030      	beq.n	80fca <pio_configure_pin+0x7e>
   80f68:	d806      	bhi.n	80f78 <pio_configure_pin+0x2c>
   80f6a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80f6e:	d00a      	beq.n	80f86 <pio_configure_pin+0x3a>
   80f70:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80f74:	d018      	beq.n	80fa8 <pio_configure_pin+0x5c>
   80f76:	e049      	b.n	8100c <pio_configure_pin+0xc0>
   80f78:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80f7c:	d030      	beq.n	80fe0 <pio_configure_pin+0x94>
   80f7e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80f82:	d02d      	beq.n	80fe0 <pio_configure_pin+0x94>
   80f84:	e042      	b.n	8100c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80f86:	f000 001f 	and.w	r0, r0, #31
   80f8a:	2401      	movs	r4, #1
   80f8c:	4084      	lsls	r4, r0
   80f8e:	4630      	mov	r0, r6
   80f90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f94:	4622      	mov	r2, r4
   80f96:	4b1f      	ldr	r3, [pc, #124]	; (81014 <pio_configure_pin+0xc8>)
   80f98:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80f9a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80f9e:	bf14      	ite	ne
   80fa0:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80fa2:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80fa4:	2001      	movs	r0, #1
   80fa6:	e032      	b.n	8100e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80fa8:	f000 001f 	and.w	r0, r0, #31
   80fac:	2401      	movs	r4, #1
   80fae:	4084      	lsls	r4, r0
   80fb0:	4630      	mov	r0, r6
   80fb2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80fb6:	4622      	mov	r2, r4
   80fb8:	4b16      	ldr	r3, [pc, #88]	; (81014 <pio_configure_pin+0xc8>)
   80fba:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80fbc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80fc0:	bf14      	ite	ne
   80fc2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80fc4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80fc6:	2001      	movs	r0, #1
   80fc8:	e021      	b.n	8100e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80fca:	f000 011f 	and.w	r1, r0, #31
   80fce:	2401      	movs	r4, #1
   80fd0:	4630      	mov	r0, r6
   80fd2:	fa04 f101 	lsl.w	r1, r4, r1
   80fd6:	462a      	mov	r2, r5
   80fd8:	4b0f      	ldr	r3, [pc, #60]	; (81018 <pio_configure_pin+0xcc>)
   80fda:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80fdc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80fde:	e016      	b.n	8100e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80fe0:	f000 011f 	and.w	r1, r0, #31
   80fe4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80fe6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80fea:	ea05 0304 	and.w	r3, r5, r4
   80fee:	9300      	str	r3, [sp, #0]
   80ff0:	4630      	mov	r0, r6
   80ff2:	fa04 f101 	lsl.w	r1, r4, r1
   80ff6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80ffa:	bf14      	ite	ne
   80ffc:	2200      	movne	r2, #0
   80ffe:	2201      	moveq	r2, #1
   81000:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81004:	4d05      	ldr	r5, [pc, #20]	; (8101c <pio_configure_pin+0xd0>)
   81006:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   81008:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8100a:	e000      	b.n	8100e <pio_configure_pin+0xc2>

	default:
		return 0;
   8100c:	2000      	movs	r0, #0
	}

	return 1;
}
   8100e:	b002      	add	sp, #8
   81010:	bd70      	pop	{r4, r5, r6, pc}
   81012:	bf00      	nop
   81014:	00080e71 	.word	0x00080e71
   81018:	00080eb1 	.word	0x00080eb1
   8101c:	00080ee5 	.word	0x00080ee5

00081020 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81020:	b5f0      	push	{r4, r5, r6, r7, lr}
   81022:	b083      	sub	sp, #12
   81024:	4607      	mov	r7, r0
   81026:	460e      	mov	r6, r1
   81028:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8102a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8102e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81032:	d026      	beq.n	81082 <pio_configure_pin_group+0x62>
   81034:	d806      	bhi.n	81044 <pio_configure_pin_group+0x24>
   81036:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8103a:	d00a      	beq.n	81052 <pio_configure_pin_group+0x32>
   8103c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81040:	d013      	beq.n	8106a <pio_configure_pin_group+0x4a>
   81042:	e034      	b.n	810ae <pio_configure_pin_group+0x8e>
   81044:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81048:	d01f      	beq.n	8108a <pio_configure_pin_group+0x6a>
   8104a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8104e:	d01c      	beq.n	8108a <pio_configure_pin_group+0x6a>
   81050:	e02d      	b.n	810ae <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81052:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81056:	4632      	mov	r2, r6
   81058:	4b16      	ldr	r3, [pc, #88]	; (810b4 <pio_configure_pin_group+0x94>)
   8105a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8105c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81060:	bf14      	ite	ne
   81062:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81064:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81066:	2001      	movs	r0, #1
   81068:	e022      	b.n	810b0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8106a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8106e:	4632      	mov	r2, r6
   81070:	4b10      	ldr	r3, [pc, #64]	; (810b4 <pio_configure_pin_group+0x94>)
   81072:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81074:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81078:	bf14      	ite	ne
   8107a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8107c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8107e:	2001      	movs	r0, #1
   81080:	e016      	b.n	810b0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81082:	4b0d      	ldr	r3, [pc, #52]	; (810b8 <pio_configure_pin_group+0x98>)
   81084:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81086:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81088:	e012      	b.n	810b0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8108a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8108e:	f005 0301 	and.w	r3, r5, #1
   81092:	9300      	str	r3, [sp, #0]
   81094:	4638      	mov	r0, r7
   81096:	4631      	mov	r1, r6
   81098:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8109c:	bf14      	ite	ne
   8109e:	2200      	movne	r2, #0
   810a0:	2201      	moveq	r2, #1
   810a2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   810a6:	4c05      	ldr	r4, [pc, #20]	; (810bc <pio_configure_pin_group+0x9c>)
   810a8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   810aa:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   810ac:	e000      	b.n	810b0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   810ae:	2000      	movs	r0, #0
	}

	return 1;
}
   810b0:	b003      	add	sp, #12
   810b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   810b4:	00080e71 	.word	0x00080e71
   810b8:	00080eb1 	.word	0x00080eb1
   810bc:	00080ee5 	.word	0x00080ee5

000810c0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   810c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810c4:	4604      	mov	r4, r0
   810c6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   810c8:	4b10      	ldr	r3, [pc, #64]	; (8110c <pio_handler_process+0x4c>)
   810ca:	4798      	blx	r3
   810cc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   810ce:	4620      	mov	r0, r4
   810d0:	4b0f      	ldr	r3, [pc, #60]	; (81110 <pio_handler_process+0x50>)
   810d2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   810d4:	4005      	ands	r5, r0
   810d6:	d017      	beq.n	81108 <pio_handler_process+0x48>
   810d8:	4f0e      	ldr	r7, [pc, #56]	; (81114 <pio_handler_process+0x54>)
   810da:	f107 040c 	add.w	r4, r7, #12
   810de:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   810e0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   810e4:	42b3      	cmp	r3, r6
   810e6:	d10a      	bne.n	810fe <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   810e8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   810ec:	4229      	tst	r1, r5
   810ee:	d006      	beq.n	810fe <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   810f0:	6823      	ldr	r3, [r4, #0]
   810f2:	4630      	mov	r0, r6
   810f4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   810f6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   810fa:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   810fe:	42bc      	cmp	r4, r7
   81100:	d002      	beq.n	81108 <pio_handler_process+0x48>
   81102:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81104:	2d00      	cmp	r5, #0
   81106:	d1eb      	bne.n	810e0 <pio_handler_process+0x20>
   81108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8110c:	00080f45 	.word	0x00080f45
   81110:	00080f49 	.word	0x00080f49
   81114:	20070a70 	.word	0x20070a70

00081118 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   81118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8111a:	4c0b      	ldr	r4, [pc, #44]	; (81148 <pio_handler_set+0x30>)
   8111c:	6824      	ldr	r4, [r4, #0]
   8111e:	2c06      	cmp	r4, #6
   81120:	d810      	bhi.n	81144 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   81122:	4f0a      	ldr	r7, [pc, #40]	; (8114c <pio_handler_set+0x34>)
   81124:	0126      	lsls	r6, r4, #4
   81126:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   81128:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   8112a:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   8112c:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   8112e:	9906      	ldr	r1, [sp, #24]
   81130:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   81132:	3401      	adds	r4, #1
   81134:	4904      	ldr	r1, [pc, #16]	; (81148 <pio_handler_set+0x30>)
   81136:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81138:	4611      	mov	r1, r2
   8113a:	461a      	mov	r2, r3
   8113c:	4b04      	ldr	r3, [pc, #16]	; (81150 <pio_handler_set+0x38>)
   8113e:	4798      	blx	r3

	return 0;
   81140:	2000      	movs	r0, #0
   81142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   81144:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   81146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81148:	20070a6c 	.word	0x20070a6c
   8114c:	20070a70 	.word	0x20070a70
   81150:	00080f0d 	.word	0x00080f0d

00081154 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81154:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81156:	4802      	ldr	r0, [pc, #8]	; (81160 <PIOA_Handler+0xc>)
   81158:	210b      	movs	r1, #11
   8115a:	4b02      	ldr	r3, [pc, #8]	; (81164 <PIOA_Handler+0x10>)
   8115c:	4798      	blx	r3
   8115e:	bd08      	pop	{r3, pc}
   81160:	400e0e00 	.word	0x400e0e00
   81164:	000810c1 	.word	0x000810c1

00081168 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81168:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8116a:	4802      	ldr	r0, [pc, #8]	; (81174 <PIOB_Handler+0xc>)
   8116c:	210c      	movs	r1, #12
   8116e:	4b02      	ldr	r3, [pc, #8]	; (81178 <PIOB_Handler+0x10>)
   81170:	4798      	blx	r3
   81172:	bd08      	pop	{r3, pc}
   81174:	400e1000 	.word	0x400e1000
   81178:	000810c1 	.word	0x000810c1

0008117c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8117c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8117e:	4802      	ldr	r0, [pc, #8]	; (81188 <PIOC_Handler+0xc>)
   81180:	210d      	movs	r1, #13
   81182:	4b02      	ldr	r3, [pc, #8]	; (8118c <PIOC_Handler+0x10>)
   81184:	4798      	blx	r3
   81186:	bd08      	pop	{r3, pc}
   81188:	400e1200 	.word	0x400e1200
   8118c:	000810c1 	.word	0x000810c1

00081190 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81190:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81192:	4802      	ldr	r0, [pc, #8]	; (8119c <PIOD_Handler+0xc>)
   81194:	210e      	movs	r1, #14
   81196:	4b02      	ldr	r3, [pc, #8]	; (811a0 <PIOD_Handler+0x10>)
   81198:	4798      	blx	r3
   8119a:	bd08      	pop	{r3, pc}
   8119c:	400e1400 	.word	0x400e1400
   811a0:	000810c1 	.word	0x000810c1

000811a4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   811a4:	282c      	cmp	r0, #44	; 0x2c
   811a6:	d820      	bhi.n	811ea <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   811a8:	281f      	cmp	r0, #31
   811aa:	d80d      	bhi.n	811c8 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   811ac:	4b12      	ldr	r3, [pc, #72]	; (811f8 <pmc_enable_periph_clk+0x54>)
   811ae:	699a      	ldr	r2, [r3, #24]
   811b0:	2301      	movs	r3, #1
   811b2:	4083      	lsls	r3, r0
   811b4:	401a      	ands	r2, r3
   811b6:	4293      	cmp	r3, r2
   811b8:	d019      	beq.n	811ee <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   811ba:	2301      	movs	r3, #1
   811bc:	fa03 f000 	lsl.w	r0, r3, r0
   811c0:	4b0d      	ldr	r3, [pc, #52]	; (811f8 <pmc_enable_periph_clk+0x54>)
   811c2:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   811c4:	2000      	movs	r0, #0
   811c6:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   811c8:	4b0b      	ldr	r3, [pc, #44]	; (811f8 <pmc_enable_periph_clk+0x54>)
   811ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   811ce:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   811d0:	2301      	movs	r3, #1
   811d2:	4083      	lsls	r3, r0
   811d4:	401a      	ands	r2, r3
   811d6:	4293      	cmp	r3, r2
   811d8:	d00b      	beq.n	811f2 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   811da:	2301      	movs	r3, #1
   811dc:	fa03 f000 	lsl.w	r0, r3, r0
   811e0:	4b05      	ldr	r3, [pc, #20]	; (811f8 <pmc_enable_periph_clk+0x54>)
   811e2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   811e6:	2000      	movs	r0, #0
   811e8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   811ea:	2001      	movs	r0, #1
   811ec:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   811ee:	2000      	movs	r0, #0
   811f0:	4770      	bx	lr
   811f2:	2000      	movs	r0, #0
}
   811f4:	4770      	bx	lr
   811f6:	bf00      	nop
   811f8:	400e0600 	.word	0x400e0600

000811fc <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   811fc:	b4f0      	push	{r4, r5, r6, r7}
   811fe:	b08c      	sub	sp, #48	; 0x30
   81200:	4607      	mov	r7, r0
   81202:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81204:	ac01      	add	r4, sp, #4
   81206:	4d12      	ldr	r5, [pc, #72]	; (81250 <pwm_clocks_generate+0x54>)
   81208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8120a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8120c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8120e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81210:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   81214:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   81218:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8121a:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8121c:	f852 4f04 	ldr.w	r4, [r2, #4]!
   81220:	fbb6 f4f4 	udiv	r4, r6, r4
   81224:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   81228:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   8122c:	d903      	bls.n	81236 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   8122e:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   81230:	2b0b      	cmp	r3, #11
   81232:	d1f3      	bne.n	8121c <pwm_clocks_generate+0x20>
   81234:	e004      	b.n	81240 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   81236:	2b0a      	cmp	r3, #10
   81238:	d805      	bhi.n	81246 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   8123a:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   8123e:	e004      	b.n	8124a <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   81240:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81244:	e001      	b.n	8124a <pwm_clocks_generate+0x4e>
   81246:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8124a:	b00c      	add	sp, #48	; 0x30
   8124c:	bcf0      	pop	{r4, r5, r6, r7}
   8124e:	4770      	bx	lr
   81250:	00085714 	.word	0x00085714

00081254 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81254:	b570      	push	{r4, r5, r6, lr}
   81256:	4606      	mov	r6, r0
   81258:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8125a:	6808      	ldr	r0, [r1, #0]
   8125c:	b140      	cbz	r0, 81270 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8125e:	6889      	ldr	r1, [r1, #8]
   81260:	4b0b      	ldr	r3, [pc, #44]	; (81290 <pwm_init+0x3c>)
   81262:	4798      	blx	r3
   81264:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   81266:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8126a:	4298      	cmp	r0, r3
   8126c:	d101      	bne.n	81272 <pwm_init+0x1e>
   8126e:	e00e      	b.n	8128e <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81270:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81272:	6860      	ldr	r0, [r4, #4]
   81274:	b140      	cbz	r0, 81288 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   81276:	68a1      	ldr	r1, [r4, #8]
   81278:	4b05      	ldr	r3, [pc, #20]	; (81290 <pwm_init+0x3c>)
   8127a:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   8127c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81280:	4298      	cmp	r0, r3
   81282:	d004      	beq.n	8128e <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   81284:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81288:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8128a:	2000      	movs	r0, #0
   8128c:	bd70      	pop	{r4, r5, r6, pc}
}
   8128e:	bd70      	pop	{r4, r5, r6, pc}
   81290:	000811fd 	.word	0x000811fd

00081294 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   81294:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   81296:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81298:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8129a:	684a      	ldr	r2, [r1, #4]
   8129c:	f002 020f 	and.w	r2, r2, #15
   812a0:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   812a2:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   812a4:	432c      	orrs	r4, r5
   812a6:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   812a8:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   812ac:	7d8a      	ldrb	r2, [r1, #22]
   812ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   812b2:	7dca      	ldrb	r2, [r1, #23]
   812b4:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   812b8:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   812ba:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   812be:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   812c2:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   812c6:	68cc      	ldr	r4, [r1, #12]
   812c8:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   812cc:	690c      	ldr	r4, [r1, #16]
   812ce:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   812d2:	7d8a      	ldrb	r2, [r1, #22]
   812d4:	b13a      	cbz	r2, 812e6 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   812d6:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   812d8:	8b4a      	ldrh	r2, [r1, #26]
   812da:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   812de:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   812e2:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   812e6:	6c85      	ldr	r5, [r0, #72]	; 0x48
   812e8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   812ec:	409a      	lsls	r2, r3
   812ee:	43d2      	mvns	r2, r2
   812f0:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   812f2:	7fce      	ldrb	r6, [r1, #31]
   812f4:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   812f6:	7f8c      	ldrb	r4, [r1, #30]
   812f8:	409c      	lsls	r4, r3
   812fa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   812fe:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   81300:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   81302:	6c44      	ldr	r4, [r0, #68]	; 0x44
   81304:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   81306:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   8130a:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   8130c:	f891 4020 	ldrb.w	r4, [r1, #32]
   81310:	409c      	lsls	r4, r3
   81312:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   81316:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   81318:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   8131a:	2201      	movs	r2, #1
   8131c:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   8131e:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81322:	b11c      	cbz	r4, 8132c <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   81324:	6a04      	ldr	r4, [r0, #32]
   81326:	4314      	orrs	r4, r2
   81328:	6204      	str	r4, [r0, #32]
   8132a:	e003      	b.n	81334 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   8132c:	6a04      	ldr	r4, [r0, #32]
   8132e:	ea24 0402 	bic.w	r4, r4, r2
   81332:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   81334:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   81338:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8133a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8133c:	bf0c      	ite	eq
   8133e:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   81340:	4394      	bicne	r4, r2
   81342:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81344:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   81348:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8134a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8134c:	bf0c      	ite	eq
   8134e:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   81352:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   81356:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81358:	2b03      	cmp	r3, #3
   8135a:	d80c      	bhi.n	81376 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8135c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8135e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81360:	22ff      	movs	r2, #255	; 0xff
   81362:	409a      	lsls	r2, r3
   81364:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81368:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8136c:	fa01 f303 	lsl.w	r3, r1, r3
   81370:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81372:	66c3      	str	r3, [r0, #108]	; 0x6c
   81374:	e00c      	b.n	81390 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   81376:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81378:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8137a:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   8137c:	22ff      	movs	r2, #255	; 0xff
   8137e:	409a      	lsls	r2, r3
   81380:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81384:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81388:	fa01 f303 	lsl.w	r3, r1, r3
   8138c:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8138e:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   81390:	2000      	movs	r0, #0
   81392:	bc70      	pop	{r4, r5, r6}
   81394:	4770      	bx	lr
   81396:	bf00      	nop

00081398 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   81398:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   8139a:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   8139c:	690b      	ldr	r3, [r1, #16]
   8139e:	4293      	cmp	r3, r2
   813a0:	d306      	bcc.n	813b0 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   813a2:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   813a4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   813a8:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   813ac:	2000      	movs	r0, #0
   813ae:	e001      	b.n	813b4 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   813b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   813b4:	f85d 4b04 	ldr.w	r4, [sp], #4
   813b8:	4770      	bx	lr
   813ba:	bf00      	nop

000813bc <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   813bc:	2301      	movs	r3, #1
   813be:	fa03 f101 	lsl.w	r1, r3, r1
   813c2:	6041      	str	r1, [r0, #4]
   813c4:	4770      	bx	lr
   813c6:	bf00      	nop

000813c8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   813c8:	2301      	movs	r3, #1
   813ca:	fa03 f101 	lsl.w	r1, r3, r1
   813ce:	6081      	str	r1, [r0, #8]
   813d0:	4770      	bx	lr
   813d2:	bf00      	nop

000813d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   813d4:	e7fe      	b.n	813d4 <Dummy_Handler>
   813d6:	bf00      	nop

000813d8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   813d8:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   813da:	4b1e      	ldr	r3, [pc, #120]	; (81454 <Reset_Handler+0x7c>)
   813dc:	4a1e      	ldr	r2, [pc, #120]	; (81458 <Reset_Handler+0x80>)
   813de:	429a      	cmp	r2, r3
   813e0:	d003      	beq.n	813ea <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   813e2:	4b1e      	ldr	r3, [pc, #120]	; (8145c <Reset_Handler+0x84>)
   813e4:	4a1b      	ldr	r2, [pc, #108]	; (81454 <Reset_Handler+0x7c>)
   813e6:	429a      	cmp	r2, r3
   813e8:	d304      	bcc.n	813f4 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   813ea:	4b1d      	ldr	r3, [pc, #116]	; (81460 <Reset_Handler+0x88>)
   813ec:	4a1d      	ldr	r2, [pc, #116]	; (81464 <Reset_Handler+0x8c>)
   813ee:	429a      	cmp	r2, r3
   813f0:	d30f      	bcc.n	81412 <Reset_Handler+0x3a>
   813f2:	e01a      	b.n	8142a <Reset_Handler+0x52>
   813f4:	4b1c      	ldr	r3, [pc, #112]	; (81468 <Reset_Handler+0x90>)
   813f6:	4c1d      	ldr	r4, [pc, #116]	; (8146c <Reset_Handler+0x94>)
   813f8:	1ae4      	subs	r4, r4, r3
   813fa:	f024 0403 	bic.w	r4, r4, #3
   813fe:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81400:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81402:	4814      	ldr	r0, [pc, #80]	; (81454 <Reset_Handler+0x7c>)
   81404:	4914      	ldr	r1, [pc, #80]	; (81458 <Reset_Handler+0x80>)
   81406:	585a      	ldr	r2, [r3, r1]
   81408:	501a      	str	r2, [r3, r0]
   8140a:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8140c:	42a3      	cmp	r3, r4
   8140e:	d1fa      	bne.n	81406 <Reset_Handler+0x2e>
   81410:	e7eb      	b.n	813ea <Reset_Handler+0x12>
   81412:	4b17      	ldr	r3, [pc, #92]	; (81470 <Reset_Handler+0x98>)
   81414:	4917      	ldr	r1, [pc, #92]	; (81474 <Reset_Handler+0x9c>)
   81416:	1ac9      	subs	r1, r1, r3
   81418:	f021 0103 	bic.w	r1, r1, #3
   8141c:	1d1a      	adds	r2, r3, #4
   8141e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81420:	2200      	movs	r2, #0
   81422:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81426:	428b      	cmp	r3, r1
   81428:	d1fb      	bne.n	81422 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8142a:	4a13      	ldr	r2, [pc, #76]	; (81478 <Reset_Handler+0xa0>)
   8142c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81430:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81434:	4911      	ldr	r1, [pc, #68]	; (8147c <Reset_Handler+0xa4>)
   81436:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81438:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   8143c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81440:	d203      	bcs.n	8144a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81442:	688a      	ldr	r2, [r1, #8]
   81444:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81448:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8144a:	4b0d      	ldr	r3, [pc, #52]	; (81480 <Reset_Handler+0xa8>)
   8144c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8144e:	4b0d      	ldr	r3, [pc, #52]	; (81484 <Reset_Handler+0xac>)
   81450:	4798      	blx	r3
   81452:	e7fe      	b.n	81452 <Reset_Handler+0x7a>
   81454:	20070000 	.word	0x20070000
   81458:	0008580c 	.word	0x0008580c
   8145c:	200709ac 	.word	0x200709ac
   81460:	20070b78 	.word	0x20070b78
   81464:	200709ac 	.word	0x200709ac
   81468:	20070004 	.word	0x20070004
   8146c:	200709af 	.word	0x200709af
   81470:	200709a8 	.word	0x200709a8
   81474:	20070b73 	.word	0x20070b73
   81478:	00080000 	.word	0x00080000
   8147c:	e000ed00 	.word	0xe000ed00
   81480:	00082759 	.word	0x00082759
   81484:	00080149 	.word	0x00080149

00081488 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81488:	4b09      	ldr	r3, [pc, #36]	; (814b0 <_sbrk+0x28>)
   8148a:	681b      	ldr	r3, [r3, #0]
   8148c:	b913      	cbnz	r3, 81494 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   8148e:	4a09      	ldr	r2, [pc, #36]	; (814b4 <_sbrk+0x2c>)
   81490:	4b07      	ldr	r3, [pc, #28]	; (814b0 <_sbrk+0x28>)
   81492:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81494:	4b06      	ldr	r3, [pc, #24]	; (814b0 <_sbrk+0x28>)
   81496:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81498:	181a      	adds	r2, r3, r0
   8149a:	4907      	ldr	r1, [pc, #28]	; (814b8 <_sbrk+0x30>)
   8149c:	4291      	cmp	r1, r2
   8149e:	db04      	blt.n	814aa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   814a0:	4610      	mov	r0, r2
   814a2:	4a03      	ldr	r2, [pc, #12]	; (814b0 <_sbrk+0x28>)
   814a4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   814a6:	4618      	mov	r0, r3
   814a8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   814aa:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   814ae:	4770      	bx	lr
   814b0:	20070ae0 	.word	0x20070ae0
   814b4:	20072b78 	.word	0x20072b78
   814b8:	20087ffc 	.word	0x20087ffc

000814bc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   814bc:	f04f 30ff 	mov.w	r0, #4294967295
   814c0:	4770      	bx	lr
   814c2:	bf00      	nop

000814c4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   814c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   814c8:	604b      	str	r3, [r1, #4]

	return 0;
}
   814ca:	2000      	movs	r0, #0
   814cc:	4770      	bx	lr
   814ce:	bf00      	nop

000814d0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   814d0:	2001      	movs	r0, #1
   814d2:	4770      	bx	lr

000814d4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   814d4:	2000      	movs	r0, #0
   814d6:	4770      	bx	lr

000814d8 <atan>:
   814d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814dc:	4bb6      	ldr	r3, [pc, #728]	; (817b8 <atan+0x2e0>)
   814de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   814e2:	429e      	cmp	r6, r3
   814e4:	b083      	sub	sp, #12
   814e6:	4604      	mov	r4, r0
   814e8:	460d      	mov	r5, r1
   814ea:	4689      	mov	r9, r1
   814ec:	dd0f      	ble.n	8150e <atan+0x36>
   814ee:	49b3      	ldr	r1, [pc, #716]	; (817bc <atan+0x2e4>)
   814f0:	428e      	cmp	r6, r1
   814f2:	f300 80b3 	bgt.w	8165c <atan+0x184>
   814f6:	f000 80ae 	beq.w	81656 <atan+0x17e>
   814fa:	f1b9 0f00 	cmp.w	r9, #0
   814fe:	f340 80ef 	ble.w	816e0 <atan+0x208>
   81502:	a191      	add	r1, pc, #580	; (adr r1, 81748 <atan+0x270>)
   81504:	e9d1 0100 	ldrd	r0, r1, [r1]
   81508:	b003      	add	sp, #12
   8150a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8150e:	4bac      	ldr	r3, [pc, #688]	; (817c0 <atan+0x2e8>)
   81510:	429e      	cmp	r6, r3
   81512:	f300 80bd 	bgt.w	81690 <atan+0x1b8>
   81516:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   8151a:	429e      	cmp	r6, r3
   8151c:	f340 80a7 	ble.w	8166e <atan+0x196>
   81520:	f04f 3cff 	mov.w	ip, #4294967295
   81524:	4622      	mov	r2, r4
   81526:	462b      	mov	r3, r5
   81528:	4620      	mov	r0, r4
   8152a:	4629      	mov	r1, r5
   8152c:	f8cd c004 	str.w	ip, [sp, #4]
   81530:	f000 fc76 	bl	81e20 <__aeabi_dmul>
   81534:	4602      	mov	r2, r0
   81536:	460b      	mov	r3, r1
   81538:	4682      	mov	sl, r0
   8153a:	468b      	mov	fp, r1
   8153c:	f000 fc70 	bl	81e20 <__aeabi_dmul>
   81540:	a383      	add	r3, pc, #524	; (adr r3, 81750 <atan+0x278>)
   81542:	e9d3 2300 	ldrd	r2, r3, [r3]
   81546:	4606      	mov	r6, r0
   81548:	460f      	mov	r7, r1
   8154a:	f000 fc69 	bl	81e20 <__aeabi_dmul>
   8154e:	a382      	add	r3, pc, #520	; (adr r3, 81758 <atan+0x280>)
   81550:	e9d3 2300 	ldrd	r2, r3, [r3]
   81554:	f000 fab2 	bl	81abc <__adddf3>
   81558:	4632      	mov	r2, r6
   8155a:	463b      	mov	r3, r7
   8155c:	f000 fc60 	bl	81e20 <__aeabi_dmul>
   81560:	a37f      	add	r3, pc, #508	; (adr r3, 81760 <atan+0x288>)
   81562:	e9d3 2300 	ldrd	r2, r3, [r3]
   81566:	f000 faa9 	bl	81abc <__adddf3>
   8156a:	4632      	mov	r2, r6
   8156c:	463b      	mov	r3, r7
   8156e:	f000 fc57 	bl	81e20 <__aeabi_dmul>
   81572:	a37d      	add	r3, pc, #500	; (adr r3, 81768 <atan+0x290>)
   81574:	e9d3 2300 	ldrd	r2, r3, [r3]
   81578:	f000 faa0 	bl	81abc <__adddf3>
   8157c:	4632      	mov	r2, r6
   8157e:	463b      	mov	r3, r7
   81580:	f000 fc4e 	bl	81e20 <__aeabi_dmul>
   81584:	a37a      	add	r3, pc, #488	; (adr r3, 81770 <atan+0x298>)
   81586:	e9d3 2300 	ldrd	r2, r3, [r3]
   8158a:	f000 fa97 	bl	81abc <__adddf3>
   8158e:	4632      	mov	r2, r6
   81590:	463b      	mov	r3, r7
   81592:	f000 fc45 	bl	81e20 <__aeabi_dmul>
   81596:	a378      	add	r3, pc, #480	; (adr r3, 81778 <atan+0x2a0>)
   81598:	e9d3 2300 	ldrd	r2, r3, [r3]
   8159c:	f000 fa8e 	bl	81abc <__adddf3>
   815a0:	4652      	mov	r2, sl
   815a2:	465b      	mov	r3, fp
   815a4:	f000 fc3c 	bl	81e20 <__aeabi_dmul>
   815a8:	a375      	add	r3, pc, #468	; (adr r3, 81780 <atan+0x2a8>)
   815aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   815ae:	4682      	mov	sl, r0
   815b0:	468b      	mov	fp, r1
   815b2:	4630      	mov	r0, r6
   815b4:	4639      	mov	r1, r7
   815b6:	f000 fc33 	bl	81e20 <__aeabi_dmul>
   815ba:	a373      	add	r3, pc, #460	; (adr r3, 81788 <atan+0x2b0>)
   815bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   815c0:	f000 fa7a 	bl	81ab8 <__aeabi_dsub>
   815c4:	4632      	mov	r2, r6
   815c6:	463b      	mov	r3, r7
   815c8:	f000 fc2a 	bl	81e20 <__aeabi_dmul>
   815cc:	a370      	add	r3, pc, #448	; (adr r3, 81790 <atan+0x2b8>)
   815ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   815d2:	f000 fa71 	bl	81ab8 <__aeabi_dsub>
   815d6:	4632      	mov	r2, r6
   815d8:	463b      	mov	r3, r7
   815da:	f000 fc21 	bl	81e20 <__aeabi_dmul>
   815de:	a36e      	add	r3, pc, #440	; (adr r3, 81798 <atan+0x2c0>)
   815e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   815e4:	f000 fa68 	bl	81ab8 <__aeabi_dsub>
   815e8:	4632      	mov	r2, r6
   815ea:	463b      	mov	r3, r7
   815ec:	f000 fc18 	bl	81e20 <__aeabi_dmul>
   815f0:	a36b      	add	r3, pc, #428	; (adr r3, 817a0 <atan+0x2c8>)
   815f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   815f6:	f000 fa5f 	bl	81ab8 <__aeabi_dsub>
   815fa:	4632      	mov	r2, r6
   815fc:	463b      	mov	r3, r7
   815fe:	f000 fc0f 	bl	81e20 <__aeabi_dmul>
   81602:	f8dd c004 	ldr.w	ip, [sp, #4]
   81606:	4602      	mov	r2, r0
   81608:	f1bc 3fff 	cmp.w	ip, #4294967295
   8160c:	460b      	mov	r3, r1
   8160e:	d06b      	beq.n	816e8 <atan+0x210>
   81610:	4650      	mov	r0, sl
   81612:	4659      	mov	r1, fp
   81614:	ea4f 06cc 	mov.w	r6, ip, lsl #3
   81618:	f000 fa50 	bl	81abc <__adddf3>
   8161c:	4622      	mov	r2, r4
   8161e:	462b      	mov	r3, r5
   81620:	f000 fbfe 	bl	81e20 <__aeabi_dmul>
   81624:	4f67      	ldr	r7, [pc, #412]	; (817c4 <atan+0x2ec>)
   81626:	4b68      	ldr	r3, [pc, #416]	; (817c8 <atan+0x2f0>)
   81628:	4437      	add	r7, r6
   8162a:	441e      	add	r6, r3
   8162c:	e9d6 2300 	ldrd	r2, r3, [r6]
   81630:	f000 fa42 	bl	81ab8 <__aeabi_dsub>
   81634:	4622      	mov	r2, r4
   81636:	462b      	mov	r3, r5
   81638:	f000 fa3e 	bl	81ab8 <__aeabi_dsub>
   8163c:	4602      	mov	r2, r0
   8163e:	460b      	mov	r3, r1
   81640:	e9d7 0100 	ldrd	r0, r1, [r7]
   81644:	f000 fa38 	bl	81ab8 <__aeabi_dsub>
   81648:	f1b9 0f00 	cmp.w	r9, #0
   8164c:	da0c      	bge.n	81668 <atan+0x190>
   8164e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   81652:	4629      	mov	r1, r5
   81654:	e008      	b.n	81668 <atan+0x190>
   81656:	2800      	cmp	r0, #0
   81658:	f43f af4f 	beq.w	814fa <atan+0x22>
   8165c:	4620      	mov	r0, r4
   8165e:	4629      	mov	r1, r5
   81660:	4622      	mov	r2, r4
   81662:	462b      	mov	r3, r5
   81664:	f000 fa2a 	bl	81abc <__adddf3>
   81668:	b003      	add	sp, #12
   8166a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8166e:	a34e      	add	r3, pc, #312	; (adr r3, 817a8 <atan+0x2d0>)
   81670:	e9d3 2300 	ldrd	r2, r3, [r3]
   81674:	f000 fa22 	bl	81abc <__adddf3>
   81678:	2200      	movs	r2, #0
   8167a:	4b54      	ldr	r3, [pc, #336]	; (817cc <atan+0x2f4>)
   8167c:	f000 fe60 	bl	82340 <__aeabi_dcmpgt>
   81680:	2800      	cmp	r0, #0
   81682:	f43f af4d 	beq.w	81520 <atan+0x48>
   81686:	4620      	mov	r0, r4
   81688:	4629      	mov	r1, r5
   8168a:	b003      	add	sp, #12
   8168c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81690:	f000 f8ca 	bl	81828 <fabs>
   81694:	4b4e      	ldr	r3, [pc, #312]	; (817d0 <atan+0x2f8>)
   81696:	4604      	mov	r4, r0
   81698:	429e      	cmp	r6, r3
   8169a:	460d      	mov	r5, r1
   8169c:	dc33      	bgt.n	81706 <atan+0x22e>
   8169e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   816a2:	429e      	cmp	r6, r3
   816a4:	f300 80a5 	bgt.w	817f2 <atan+0x31a>
   816a8:	4602      	mov	r2, r0
   816aa:	460b      	mov	r3, r1
   816ac:	f000 fa06 	bl	81abc <__adddf3>
   816b0:	2200      	movs	r2, #0
   816b2:	4b46      	ldr	r3, [pc, #280]	; (817cc <atan+0x2f4>)
   816b4:	f000 fa00 	bl	81ab8 <__aeabi_dsub>
   816b8:	2200      	movs	r2, #0
   816ba:	4606      	mov	r6, r0
   816bc:	460f      	mov	r7, r1
   816be:	4620      	mov	r0, r4
   816c0:	4629      	mov	r1, r5
   816c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   816c6:	f000 f9f9 	bl	81abc <__adddf3>
   816ca:	4602      	mov	r2, r0
   816cc:	460b      	mov	r3, r1
   816ce:	4630      	mov	r0, r6
   816d0:	4639      	mov	r1, r7
   816d2:	f000 fccf 	bl	82074 <__aeabi_ddiv>
   816d6:	f04f 0c00 	mov.w	ip, #0
   816da:	4604      	mov	r4, r0
   816dc:	460d      	mov	r5, r1
   816de:	e721      	b.n	81524 <atan+0x4c>
   816e0:	a133      	add	r1, pc, #204	; (adr r1, 817b0 <atan+0x2d8>)
   816e2:	e9d1 0100 	ldrd	r0, r1, [r1]
   816e6:	e7bf      	b.n	81668 <atan+0x190>
   816e8:	4650      	mov	r0, sl
   816ea:	4659      	mov	r1, fp
   816ec:	f000 f9e6 	bl	81abc <__adddf3>
   816f0:	4622      	mov	r2, r4
   816f2:	462b      	mov	r3, r5
   816f4:	f000 fb94 	bl	81e20 <__aeabi_dmul>
   816f8:	4602      	mov	r2, r0
   816fa:	460b      	mov	r3, r1
   816fc:	4620      	mov	r0, r4
   816fe:	4629      	mov	r1, r5
   81700:	f000 f9da 	bl	81ab8 <__aeabi_dsub>
   81704:	e7b0      	b.n	81668 <atan+0x190>
   81706:	4b33      	ldr	r3, [pc, #204]	; (817d4 <atan+0x2fc>)
   81708:	429e      	cmp	r6, r3
   8170a:	dc67      	bgt.n	817dc <atan+0x304>
   8170c:	2200      	movs	r2, #0
   8170e:	4b32      	ldr	r3, [pc, #200]	; (817d8 <atan+0x300>)
   81710:	f000 f9d2 	bl	81ab8 <__aeabi_dsub>
   81714:	2200      	movs	r2, #0
   81716:	4606      	mov	r6, r0
   81718:	460f      	mov	r7, r1
   8171a:	4620      	mov	r0, r4
   8171c:	4629      	mov	r1, r5
   8171e:	4b2e      	ldr	r3, [pc, #184]	; (817d8 <atan+0x300>)
   81720:	f000 fb7e 	bl	81e20 <__aeabi_dmul>
   81724:	2200      	movs	r2, #0
   81726:	4b29      	ldr	r3, [pc, #164]	; (817cc <atan+0x2f4>)
   81728:	f000 f9c8 	bl	81abc <__adddf3>
   8172c:	4602      	mov	r2, r0
   8172e:	460b      	mov	r3, r1
   81730:	4630      	mov	r0, r6
   81732:	4639      	mov	r1, r7
   81734:	f000 fc9e 	bl	82074 <__aeabi_ddiv>
   81738:	f04f 0c02 	mov.w	ip, #2
   8173c:	4604      	mov	r4, r0
   8173e:	460d      	mov	r5, r1
   81740:	e6f0      	b.n	81524 <atan+0x4c>
   81742:	bf00      	nop
   81744:	f3af 8000 	nop.w
   81748:	54442d18 	.word	0x54442d18
   8174c:	3ff921fb 	.word	0x3ff921fb
   81750:	e322da11 	.word	0xe322da11
   81754:	3f90ad3a 	.word	0x3f90ad3a
   81758:	24760deb 	.word	0x24760deb
   8175c:	3fa97b4b 	.word	0x3fa97b4b
   81760:	a0d03d51 	.word	0xa0d03d51
   81764:	3fb10d66 	.word	0x3fb10d66
   81768:	c54c206e 	.word	0xc54c206e
   8176c:	3fb745cd 	.word	0x3fb745cd
   81770:	920083ff 	.word	0x920083ff
   81774:	3fc24924 	.word	0x3fc24924
   81778:	5555550d 	.word	0x5555550d
   8177c:	3fd55555 	.word	0x3fd55555
   81780:	2c6a6c2f 	.word	0x2c6a6c2f
   81784:	bfa2b444 	.word	0xbfa2b444
   81788:	52defd9a 	.word	0x52defd9a
   8178c:	3fadde2d 	.word	0x3fadde2d
   81790:	af749a6d 	.word	0xaf749a6d
   81794:	3fb3b0f2 	.word	0x3fb3b0f2
   81798:	fe231671 	.word	0xfe231671
   8179c:	3fbc71c6 	.word	0x3fbc71c6
   817a0:	9998ebc4 	.word	0x9998ebc4
   817a4:	3fc99999 	.word	0x3fc99999
   817a8:	8800759c 	.word	0x8800759c
   817ac:	7e37e43c 	.word	0x7e37e43c
   817b0:	54442d18 	.word	0x54442d18
   817b4:	bff921fb 	.word	0xbff921fb
   817b8:	440fffff 	.word	0x440fffff
   817bc:	7ff00000 	.word	0x7ff00000
   817c0:	3fdbffff 	.word	0x3fdbffff
   817c4:	00085760 	.word	0x00085760
   817c8:	00085740 	.word	0x00085740
   817cc:	3ff00000 	.word	0x3ff00000
   817d0:	3ff2ffff 	.word	0x3ff2ffff
   817d4:	40037fff 	.word	0x40037fff
   817d8:	3ff80000 	.word	0x3ff80000
   817dc:	4602      	mov	r2, r0
   817de:	460b      	mov	r3, r1
   817e0:	2000      	movs	r0, #0
   817e2:	490f      	ldr	r1, [pc, #60]	; (81820 <atan+0x348>)
   817e4:	f000 fc46 	bl	82074 <__aeabi_ddiv>
   817e8:	f04f 0c03 	mov.w	ip, #3
   817ec:	4604      	mov	r4, r0
   817ee:	460d      	mov	r5, r1
   817f0:	e698      	b.n	81524 <atan+0x4c>
   817f2:	2200      	movs	r2, #0
   817f4:	4b0b      	ldr	r3, [pc, #44]	; (81824 <atan+0x34c>)
   817f6:	f000 f95f 	bl	81ab8 <__aeabi_dsub>
   817fa:	2200      	movs	r2, #0
   817fc:	4606      	mov	r6, r0
   817fe:	460f      	mov	r7, r1
   81800:	4620      	mov	r0, r4
   81802:	4629      	mov	r1, r5
   81804:	4b07      	ldr	r3, [pc, #28]	; (81824 <atan+0x34c>)
   81806:	f000 f959 	bl	81abc <__adddf3>
   8180a:	4602      	mov	r2, r0
   8180c:	460b      	mov	r3, r1
   8180e:	4630      	mov	r0, r6
   81810:	4639      	mov	r1, r7
   81812:	f000 fc2f 	bl	82074 <__aeabi_ddiv>
   81816:	f04f 0c01 	mov.w	ip, #1
   8181a:	4604      	mov	r4, r0
   8181c:	460d      	mov	r5, r1
   8181e:	e681      	b.n	81524 <atan+0x4c>
   81820:	bff00000 	.word	0xbff00000
   81824:	3ff00000 	.word	0x3ff00000

00081828 <fabs>:
   81828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8182c:	4770      	bx	lr
   8182e:	bf00      	nop

00081830 <sqrt>:
   81830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81834:	b08a      	sub	sp, #40	; 0x28
   81836:	4604      	mov	r4, r0
   81838:	460d      	mov	r5, r1
   8183a:	f000 f84f 	bl	818dc <__ieee754_sqrt>
   8183e:	f8df a098 	ldr.w	sl, [pc, #152]	; 818d8 <sqrt+0xa8>
   81842:	4606      	mov	r6, r0
   81844:	f99a 3000 	ldrsb.w	r3, [sl]
   81848:	460f      	mov	r7, r1
   8184a:	3301      	adds	r3, #1
   8184c:	d00f      	beq.n	8186e <sqrt+0x3e>
   8184e:	4620      	mov	r0, r4
   81850:	4629      	mov	r1, r5
   81852:	f000 f903 	bl	81a5c <__fpclassifyd>
   81856:	b150      	cbz	r0, 8186e <sqrt+0x3e>
   81858:	f04f 0800 	mov.w	r8, #0
   8185c:	f04f 0900 	mov.w	r9, #0
   81860:	4642      	mov	r2, r8
   81862:	464b      	mov	r3, r9
   81864:	4620      	mov	r0, r4
   81866:	4629      	mov	r1, r5
   81868:	f000 fd4c 	bl	82304 <__aeabi_dcmplt>
   8186c:	b920      	cbnz	r0, 81878 <sqrt+0x48>
   8186e:	4630      	mov	r0, r6
   81870:	4639      	mov	r1, r7
   81872:	b00a      	add	sp, #40	; 0x28
   81874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81878:	4916      	ldr	r1, [pc, #88]	; (818d4 <sqrt+0xa4>)
   8187a:	f89a 6000 	ldrb.w	r6, [sl]
   8187e:	2201      	movs	r2, #1
   81880:	2300      	movs	r3, #0
   81882:	e9cd 4504 	strd	r4, r5, [sp, #16]
   81886:	e9cd 4502 	strd	r4, r5, [sp, #8]
   8188a:	9101      	str	r1, [sp, #4]
   8188c:	9200      	str	r2, [sp, #0]
   8188e:	9308      	str	r3, [sp, #32]
   81890:	b966      	cbnz	r6, 818ac <sqrt+0x7c>
   81892:	e9cd 8906 	strd	r8, r9, [sp, #24]
   81896:	4668      	mov	r0, sp
   81898:	f000 f908 	bl	81aac <matherr>
   8189c:	b180      	cbz	r0, 818c0 <sqrt+0x90>
   8189e:	9b08      	ldr	r3, [sp, #32]
   818a0:	b99b      	cbnz	r3, 818ca <sqrt+0x9a>
   818a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   818a6:	b00a      	add	sp, #40	; 0x28
   818a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   818ac:	4640      	mov	r0, r8
   818ae:	4649      	mov	r1, r9
   818b0:	4642      	mov	r2, r8
   818b2:	464b      	mov	r3, r9
   818b4:	f000 fbde 	bl	82074 <__aeabi_ddiv>
   818b8:	2e02      	cmp	r6, #2
   818ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
   818be:	d1ea      	bne.n	81896 <sqrt+0x66>
   818c0:	f000 ff44 	bl	8274c <__errno>
   818c4:	2321      	movs	r3, #33	; 0x21
   818c6:	6003      	str	r3, [r0, #0]
   818c8:	e7e9      	b.n	8189e <sqrt+0x6e>
   818ca:	f000 ff3f 	bl	8274c <__errno>
   818ce:	9b08      	ldr	r3, [sp, #32]
   818d0:	6003      	str	r3, [r0, #0]
   818d2:	e7e6      	b.n	818a2 <sqrt+0x72>
   818d4:	00085780 	.word	0x00085780
   818d8:	20070140 	.word	0x20070140

000818dc <__ieee754_sqrt>:
   818dc:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   818e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   818e4:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
   818e8:	f8df 816c 	ldr.w	r8, [pc, #364]	; 81a58 <__ieee754_sqrt+0x17c>
   818ec:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   818f0:	45c4      	cmp	ip, r8
   818f2:	4606      	mov	r6, r0
   818f4:	460f      	mov	r7, r1
   818f6:	460b      	mov	r3, r1
   818f8:	4602      	mov	r2, r0
   818fa:	f000 808f 	beq.w	81a1c <__ieee754_sqrt+0x140>
   818fe:	2900      	cmp	r1, #0
   81900:	dd6f      	ble.n	819e2 <__ieee754_sqrt+0x106>
   81902:	150f      	asrs	r7, r1, #20
   81904:	d078      	beq.n	819f8 <__ieee754_sqrt+0x11c>
   81906:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   8190a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8190e:	07f9      	lsls	r1, r7, #31
   81910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81914:	d460      	bmi.n	819d8 <__ieee754_sqrt+0xfc>
   81916:	0fd1      	lsrs	r1, r2, #31
   81918:	f04f 0c00 	mov.w	ip, #0
   8191c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   81920:	107f      	asrs	r7, r7, #1
   81922:	0052      	lsls	r2, r2, #1
   81924:	4665      	mov	r5, ip
   81926:	2016      	movs	r0, #22
   81928:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   8192c:	186c      	adds	r4, r5, r1
   8192e:	429c      	cmp	r4, r3
   81930:	ea4f 76d2 	mov.w	r6, r2, lsr #31
   81934:	ea4f 0242 	mov.w	r2, r2, lsl #1
   81938:	dc02      	bgt.n	81940 <__ieee754_sqrt+0x64>
   8193a:	1b1b      	subs	r3, r3, r4
   8193c:	1865      	adds	r5, r4, r1
   8193e:	448c      	add	ip, r1
   81940:	3801      	subs	r0, #1
   81942:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   81946:	ea4f 0151 	mov.w	r1, r1, lsr #1
   8194a:	d1ef      	bne.n	8192c <__ieee754_sqrt+0x50>
   8194c:	4680      	mov	r8, r0
   8194e:	2620      	movs	r6, #32
   81950:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   81954:	e009      	b.n	8196a <__ieee754_sqrt+0x8e>
   81956:	d023      	beq.n	819a0 <__ieee754_sqrt+0xc4>
   81958:	0fd4      	lsrs	r4, r2, #31
   8195a:	3e01      	subs	r6, #1
   8195c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   81960:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   81964:	ea4f 0242 	mov.w	r2, r2, lsl #1
   81968:	d01e      	beq.n	819a8 <__ieee754_sqrt+0xcc>
   8196a:	42ab      	cmp	r3, r5
   8196c:	eb01 0408 	add.w	r4, r1, r8
   81970:	ddf1      	ble.n	81956 <__ieee754_sqrt+0x7a>
   81972:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
   81976:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
   8197a:	eb04 0801 	add.w	r8, r4, r1
   8197e:	d009      	beq.n	81994 <__ieee754_sqrt+0xb8>
   81980:	46a9      	mov	r9, r5
   81982:	1b5b      	subs	r3, r3, r5
   81984:	4294      	cmp	r4, r2
   81986:	bf88      	it	hi
   81988:	f103 33ff 	addhi.w	r3, r3, #4294967295
   8198c:	1b12      	subs	r2, r2, r4
   8198e:	4408      	add	r0, r1
   81990:	464d      	mov	r5, r9
   81992:	e7e1      	b.n	81958 <__ieee754_sqrt+0x7c>
   81994:	f1b8 0f00 	cmp.w	r8, #0
   81998:	dbf2      	blt.n	81980 <__ieee754_sqrt+0xa4>
   8199a:	f105 0901 	add.w	r9, r5, #1
   8199e:	e7f0      	b.n	81982 <__ieee754_sqrt+0xa6>
   819a0:	4294      	cmp	r4, r2
   819a2:	d9e6      	bls.n	81972 <__ieee754_sqrt+0x96>
   819a4:	461d      	mov	r5, r3
   819a6:	e7d7      	b.n	81958 <__ieee754_sqrt+0x7c>
   819a8:	431a      	orrs	r2, r3
   819aa:	d004      	beq.n	819b6 <__ieee754_sqrt+0xda>
   819ac:	1c43      	adds	r3, r0, #1
   819ae:	d041      	beq.n	81a34 <__ieee754_sqrt+0x158>
   819b0:	f000 0301 	and.w	r3, r0, #1
   819b4:	4418      	add	r0, r3
   819b6:	0846      	lsrs	r6, r0, #1
   819b8:	ea4f 036c 	mov.w	r3, ip, asr #1
   819bc:	f01c 0f01 	tst.w	ip, #1
   819c0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   819c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   819c8:	bf18      	it	ne
   819ca:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
   819ce:	eb03 5107 	add.w	r1, r3, r7, lsl #20
   819d2:	4630      	mov	r0, r6
   819d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   819d8:	0fd1      	lsrs	r1, r2, #31
   819da:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   819de:	0052      	lsls	r2, r2, #1
   819e0:	e799      	b.n	81916 <__ieee754_sqrt+0x3a>
   819e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   819e6:	4303      	orrs	r3, r0
   819e8:	d022      	beq.n	81a30 <__ieee754_sqrt+0x154>
   819ea:	bb51      	cbnz	r1, 81a42 <__ieee754_sqrt+0x166>
   819ec:	460f      	mov	r7, r1
   819ee:	0ad3      	lsrs	r3, r2, #11
   819f0:	3f15      	subs	r7, #21
   819f2:	0552      	lsls	r2, r2, #21
   819f4:	2b00      	cmp	r3, #0
   819f6:	d0fa      	beq.n	819ee <__ieee754_sqrt+0x112>
   819f8:	f413 1180 	ands.w	r1, r3, #1048576	; 0x100000
   819fc:	d11d      	bne.n	81a3a <__ieee754_sqrt+0x15e>
   819fe:	005b      	lsls	r3, r3, #1
   81a00:	02d8      	lsls	r0, r3, #11
   81a02:	f101 0101 	add.w	r1, r1, #1
   81a06:	d5fa      	bpl.n	819fe <__ieee754_sqrt+0x122>
   81a08:	f1c1 0001 	rsb	r0, r1, #1
   81a0c:	f1c1 0420 	rsb	r4, r1, #32
   81a10:	fa22 f404 	lsr.w	r4, r2, r4
   81a14:	4407      	add	r7, r0
   81a16:	408a      	lsls	r2, r1
   81a18:	4323      	orrs	r3, r4
   81a1a:	e774      	b.n	81906 <__ieee754_sqrt+0x2a>
   81a1c:	4602      	mov	r2, r0
   81a1e:	460b      	mov	r3, r1
   81a20:	f000 f9fe 	bl	81e20 <__aeabi_dmul>
   81a24:	4632      	mov	r2, r6
   81a26:	463b      	mov	r3, r7
   81a28:	f000 f848 	bl	81abc <__adddf3>
   81a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a34:	f10c 0c01 	add.w	ip, ip, #1
   81a38:	e7be      	b.n	819b8 <__ieee754_sqrt+0xdc>
   81a3a:	2420      	movs	r4, #32
   81a3c:	2001      	movs	r0, #1
   81a3e:	2100      	movs	r1, #0
   81a40:	e7e6      	b.n	81a10 <__ieee754_sqrt+0x134>
   81a42:	4602      	mov	r2, r0
   81a44:	460b      	mov	r3, r1
   81a46:	f000 f837 	bl	81ab8 <__aeabi_dsub>
   81a4a:	4602      	mov	r2, r0
   81a4c:	460b      	mov	r3, r1
   81a4e:	f000 fb11 	bl	82074 <__aeabi_ddiv>
   81a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a56:	bf00      	nop
   81a58:	7ff00000 	.word	0x7ff00000

00081a5c <__fpclassifyd>:
   81a5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81a60:	b410      	push	{r4}
   81a62:	d008      	beq.n	81a76 <__fpclassifyd+0x1a>
   81a64:	4a0f      	ldr	r2, [pc, #60]	; (81aa4 <__fpclassifyd+0x48>)
   81a66:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   81a6a:	4294      	cmp	r4, r2
   81a6c:	d80a      	bhi.n	81a84 <__fpclassifyd+0x28>
   81a6e:	2004      	movs	r0, #4
   81a70:	f85d 4b04 	ldr.w	r4, [sp], #4
   81a74:	4770      	bx	lr
   81a76:	2800      	cmp	r0, #0
   81a78:	bf0c      	ite	eq
   81a7a:	2002      	moveq	r0, #2
   81a7c:	2003      	movne	r0, #3
   81a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
   81a82:	4770      	bx	lr
   81a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81a88:	d201      	bcs.n	81a8e <__fpclassifyd+0x32>
   81a8a:	2003      	movs	r0, #3
   81a8c:	e7f7      	b.n	81a7e <__fpclassifyd+0x22>
   81a8e:	4a06      	ldr	r2, [pc, #24]	; (81aa8 <__fpclassifyd+0x4c>)
   81a90:	4293      	cmp	r3, r2
   81a92:	d001      	beq.n	81a98 <__fpclassifyd+0x3c>
   81a94:	2000      	movs	r0, #0
   81a96:	e7f2      	b.n	81a7e <__fpclassifyd+0x22>
   81a98:	f1d0 0001 	rsbs	r0, r0, #1
   81a9c:	bf38      	it	cc
   81a9e:	2000      	movcc	r0, #0
   81aa0:	e7ed      	b.n	81a7e <__fpclassifyd+0x22>
   81aa2:	bf00      	nop
   81aa4:	7fdfffff 	.word	0x7fdfffff
   81aa8:	7ff00000 	.word	0x7ff00000

00081aac <matherr>:
   81aac:	2000      	movs	r0, #0
   81aae:	4770      	bx	lr

00081ab0 <__aeabi_drsub>:
   81ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81ab4:	e002      	b.n	81abc <__adddf3>
   81ab6:	bf00      	nop

00081ab8 <__aeabi_dsub>:
   81ab8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081abc <__adddf3>:
   81abc:	b530      	push	{r4, r5, lr}
   81abe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81ac2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81ac6:	ea94 0f05 	teq	r4, r5
   81aca:	bf08      	it	eq
   81acc:	ea90 0f02 	teqeq	r0, r2
   81ad0:	bf1f      	itttt	ne
   81ad2:	ea54 0c00 	orrsne.w	ip, r4, r0
   81ad6:	ea55 0c02 	orrsne.w	ip, r5, r2
   81ada:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81ade:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81ae2:	f000 80e2 	beq.w	81caa <__adddf3+0x1ee>
   81ae6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81aea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81aee:	bfb8      	it	lt
   81af0:	426d      	neglt	r5, r5
   81af2:	dd0c      	ble.n	81b0e <__adddf3+0x52>
   81af4:	442c      	add	r4, r5
   81af6:	ea80 0202 	eor.w	r2, r0, r2
   81afa:	ea81 0303 	eor.w	r3, r1, r3
   81afe:	ea82 0000 	eor.w	r0, r2, r0
   81b02:	ea83 0101 	eor.w	r1, r3, r1
   81b06:	ea80 0202 	eor.w	r2, r0, r2
   81b0a:	ea81 0303 	eor.w	r3, r1, r3
   81b0e:	2d36      	cmp	r5, #54	; 0x36
   81b10:	bf88      	it	hi
   81b12:	bd30      	pophi	{r4, r5, pc}
   81b14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81b18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81b1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81b20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81b24:	d002      	beq.n	81b2c <__adddf3+0x70>
   81b26:	4240      	negs	r0, r0
   81b28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81b2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81b30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81b34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81b38:	d002      	beq.n	81b40 <__adddf3+0x84>
   81b3a:	4252      	negs	r2, r2
   81b3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81b40:	ea94 0f05 	teq	r4, r5
   81b44:	f000 80a7 	beq.w	81c96 <__adddf3+0x1da>
   81b48:	f1a4 0401 	sub.w	r4, r4, #1
   81b4c:	f1d5 0e20 	rsbs	lr, r5, #32
   81b50:	db0d      	blt.n	81b6e <__adddf3+0xb2>
   81b52:	fa02 fc0e 	lsl.w	ip, r2, lr
   81b56:	fa22 f205 	lsr.w	r2, r2, r5
   81b5a:	1880      	adds	r0, r0, r2
   81b5c:	f141 0100 	adc.w	r1, r1, #0
   81b60:	fa03 f20e 	lsl.w	r2, r3, lr
   81b64:	1880      	adds	r0, r0, r2
   81b66:	fa43 f305 	asr.w	r3, r3, r5
   81b6a:	4159      	adcs	r1, r3
   81b6c:	e00e      	b.n	81b8c <__adddf3+0xd0>
   81b6e:	f1a5 0520 	sub.w	r5, r5, #32
   81b72:	f10e 0e20 	add.w	lr, lr, #32
   81b76:	2a01      	cmp	r2, #1
   81b78:	fa03 fc0e 	lsl.w	ip, r3, lr
   81b7c:	bf28      	it	cs
   81b7e:	f04c 0c02 	orrcs.w	ip, ip, #2
   81b82:	fa43 f305 	asr.w	r3, r3, r5
   81b86:	18c0      	adds	r0, r0, r3
   81b88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81b8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81b90:	d507      	bpl.n	81ba2 <__adddf3+0xe6>
   81b92:	f04f 0e00 	mov.w	lr, #0
   81b96:	f1dc 0c00 	rsbs	ip, ip, #0
   81b9a:	eb7e 0000 	sbcs.w	r0, lr, r0
   81b9e:	eb6e 0101 	sbc.w	r1, lr, r1
   81ba2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81ba6:	d31b      	bcc.n	81be0 <__adddf3+0x124>
   81ba8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81bac:	d30c      	bcc.n	81bc8 <__adddf3+0x10c>
   81bae:	0849      	lsrs	r1, r1, #1
   81bb0:	ea5f 0030 	movs.w	r0, r0, rrx
   81bb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81bb8:	f104 0401 	add.w	r4, r4, #1
   81bbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81bc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81bc4:	f080 809a 	bcs.w	81cfc <__adddf3+0x240>
   81bc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81bcc:	bf08      	it	eq
   81bce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81bd2:	f150 0000 	adcs.w	r0, r0, #0
   81bd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81bda:	ea41 0105 	orr.w	r1, r1, r5
   81bde:	bd30      	pop	{r4, r5, pc}
   81be0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81be4:	4140      	adcs	r0, r0
   81be6:	eb41 0101 	adc.w	r1, r1, r1
   81bea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81bee:	f1a4 0401 	sub.w	r4, r4, #1
   81bf2:	d1e9      	bne.n	81bc8 <__adddf3+0x10c>
   81bf4:	f091 0f00 	teq	r1, #0
   81bf8:	bf04      	itt	eq
   81bfa:	4601      	moveq	r1, r0
   81bfc:	2000      	moveq	r0, #0
   81bfe:	fab1 f381 	clz	r3, r1
   81c02:	bf08      	it	eq
   81c04:	3320      	addeq	r3, #32
   81c06:	f1a3 030b 	sub.w	r3, r3, #11
   81c0a:	f1b3 0220 	subs.w	r2, r3, #32
   81c0e:	da0c      	bge.n	81c2a <__adddf3+0x16e>
   81c10:	320c      	adds	r2, #12
   81c12:	dd08      	ble.n	81c26 <__adddf3+0x16a>
   81c14:	f102 0c14 	add.w	ip, r2, #20
   81c18:	f1c2 020c 	rsb	r2, r2, #12
   81c1c:	fa01 f00c 	lsl.w	r0, r1, ip
   81c20:	fa21 f102 	lsr.w	r1, r1, r2
   81c24:	e00c      	b.n	81c40 <__adddf3+0x184>
   81c26:	f102 0214 	add.w	r2, r2, #20
   81c2a:	bfd8      	it	le
   81c2c:	f1c2 0c20 	rsble	ip, r2, #32
   81c30:	fa01 f102 	lsl.w	r1, r1, r2
   81c34:	fa20 fc0c 	lsr.w	ip, r0, ip
   81c38:	bfdc      	itt	le
   81c3a:	ea41 010c 	orrle.w	r1, r1, ip
   81c3e:	4090      	lslle	r0, r2
   81c40:	1ae4      	subs	r4, r4, r3
   81c42:	bfa2      	ittt	ge
   81c44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81c48:	4329      	orrge	r1, r5
   81c4a:	bd30      	popge	{r4, r5, pc}
   81c4c:	ea6f 0404 	mvn.w	r4, r4
   81c50:	3c1f      	subs	r4, #31
   81c52:	da1c      	bge.n	81c8e <__adddf3+0x1d2>
   81c54:	340c      	adds	r4, #12
   81c56:	dc0e      	bgt.n	81c76 <__adddf3+0x1ba>
   81c58:	f104 0414 	add.w	r4, r4, #20
   81c5c:	f1c4 0220 	rsb	r2, r4, #32
   81c60:	fa20 f004 	lsr.w	r0, r0, r4
   81c64:	fa01 f302 	lsl.w	r3, r1, r2
   81c68:	ea40 0003 	orr.w	r0, r0, r3
   81c6c:	fa21 f304 	lsr.w	r3, r1, r4
   81c70:	ea45 0103 	orr.w	r1, r5, r3
   81c74:	bd30      	pop	{r4, r5, pc}
   81c76:	f1c4 040c 	rsb	r4, r4, #12
   81c7a:	f1c4 0220 	rsb	r2, r4, #32
   81c7e:	fa20 f002 	lsr.w	r0, r0, r2
   81c82:	fa01 f304 	lsl.w	r3, r1, r4
   81c86:	ea40 0003 	orr.w	r0, r0, r3
   81c8a:	4629      	mov	r1, r5
   81c8c:	bd30      	pop	{r4, r5, pc}
   81c8e:	fa21 f004 	lsr.w	r0, r1, r4
   81c92:	4629      	mov	r1, r5
   81c94:	bd30      	pop	{r4, r5, pc}
   81c96:	f094 0f00 	teq	r4, #0
   81c9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81c9e:	bf06      	itte	eq
   81ca0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81ca4:	3401      	addeq	r4, #1
   81ca6:	3d01      	subne	r5, #1
   81ca8:	e74e      	b.n	81b48 <__adddf3+0x8c>
   81caa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81cae:	bf18      	it	ne
   81cb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81cb4:	d029      	beq.n	81d0a <__adddf3+0x24e>
   81cb6:	ea94 0f05 	teq	r4, r5
   81cba:	bf08      	it	eq
   81cbc:	ea90 0f02 	teqeq	r0, r2
   81cc0:	d005      	beq.n	81cce <__adddf3+0x212>
   81cc2:	ea54 0c00 	orrs.w	ip, r4, r0
   81cc6:	bf04      	itt	eq
   81cc8:	4619      	moveq	r1, r3
   81cca:	4610      	moveq	r0, r2
   81ccc:	bd30      	pop	{r4, r5, pc}
   81cce:	ea91 0f03 	teq	r1, r3
   81cd2:	bf1e      	ittt	ne
   81cd4:	2100      	movne	r1, #0
   81cd6:	2000      	movne	r0, #0
   81cd8:	bd30      	popne	{r4, r5, pc}
   81cda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81cde:	d105      	bne.n	81cec <__adddf3+0x230>
   81ce0:	0040      	lsls	r0, r0, #1
   81ce2:	4149      	adcs	r1, r1
   81ce4:	bf28      	it	cs
   81ce6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81cea:	bd30      	pop	{r4, r5, pc}
   81cec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81cf0:	bf3c      	itt	cc
   81cf2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81cf6:	bd30      	popcc	{r4, r5, pc}
   81cf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81cfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81d00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81d04:	f04f 0000 	mov.w	r0, #0
   81d08:	bd30      	pop	{r4, r5, pc}
   81d0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81d0e:	bf1a      	itte	ne
   81d10:	4619      	movne	r1, r3
   81d12:	4610      	movne	r0, r2
   81d14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81d18:	bf1c      	itt	ne
   81d1a:	460b      	movne	r3, r1
   81d1c:	4602      	movne	r2, r0
   81d1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81d22:	bf06      	itte	eq
   81d24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81d28:	ea91 0f03 	teqeq	r1, r3
   81d2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81d30:	bd30      	pop	{r4, r5, pc}
   81d32:	bf00      	nop

00081d34 <__aeabi_ui2d>:
   81d34:	f090 0f00 	teq	r0, #0
   81d38:	bf04      	itt	eq
   81d3a:	2100      	moveq	r1, #0
   81d3c:	4770      	bxeq	lr
   81d3e:	b530      	push	{r4, r5, lr}
   81d40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81d44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81d48:	f04f 0500 	mov.w	r5, #0
   81d4c:	f04f 0100 	mov.w	r1, #0
   81d50:	e750      	b.n	81bf4 <__adddf3+0x138>
   81d52:	bf00      	nop

00081d54 <__aeabi_i2d>:
   81d54:	f090 0f00 	teq	r0, #0
   81d58:	bf04      	itt	eq
   81d5a:	2100      	moveq	r1, #0
   81d5c:	4770      	bxeq	lr
   81d5e:	b530      	push	{r4, r5, lr}
   81d60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81d64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81d68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81d6c:	bf48      	it	mi
   81d6e:	4240      	negmi	r0, r0
   81d70:	f04f 0100 	mov.w	r1, #0
   81d74:	e73e      	b.n	81bf4 <__adddf3+0x138>
   81d76:	bf00      	nop

00081d78 <__aeabi_f2d>:
   81d78:	0042      	lsls	r2, r0, #1
   81d7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81d7e:	ea4f 0131 	mov.w	r1, r1, rrx
   81d82:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81d86:	bf1f      	itttt	ne
   81d88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81d8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81d90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81d94:	4770      	bxne	lr
   81d96:	f092 0f00 	teq	r2, #0
   81d9a:	bf14      	ite	ne
   81d9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81da0:	4770      	bxeq	lr
   81da2:	b530      	push	{r4, r5, lr}
   81da4:	f44f 7460 	mov.w	r4, #896	; 0x380
   81da8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81dac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81db0:	e720      	b.n	81bf4 <__adddf3+0x138>
   81db2:	bf00      	nop

00081db4 <__aeabi_ul2d>:
   81db4:	ea50 0201 	orrs.w	r2, r0, r1
   81db8:	bf08      	it	eq
   81dba:	4770      	bxeq	lr
   81dbc:	b530      	push	{r4, r5, lr}
   81dbe:	f04f 0500 	mov.w	r5, #0
   81dc2:	e00a      	b.n	81dda <__aeabi_l2d+0x16>

00081dc4 <__aeabi_l2d>:
   81dc4:	ea50 0201 	orrs.w	r2, r0, r1
   81dc8:	bf08      	it	eq
   81dca:	4770      	bxeq	lr
   81dcc:	b530      	push	{r4, r5, lr}
   81dce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81dd2:	d502      	bpl.n	81dda <__aeabi_l2d+0x16>
   81dd4:	4240      	negs	r0, r0
   81dd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81dda:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81dde:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81de2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81de6:	f43f aedc 	beq.w	81ba2 <__adddf3+0xe6>
   81dea:	f04f 0203 	mov.w	r2, #3
   81dee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81df2:	bf18      	it	ne
   81df4:	3203      	addne	r2, #3
   81df6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81dfa:	bf18      	it	ne
   81dfc:	3203      	addne	r2, #3
   81dfe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81e02:	f1c2 0320 	rsb	r3, r2, #32
   81e06:	fa00 fc03 	lsl.w	ip, r0, r3
   81e0a:	fa20 f002 	lsr.w	r0, r0, r2
   81e0e:	fa01 fe03 	lsl.w	lr, r1, r3
   81e12:	ea40 000e 	orr.w	r0, r0, lr
   81e16:	fa21 f102 	lsr.w	r1, r1, r2
   81e1a:	4414      	add	r4, r2
   81e1c:	e6c1      	b.n	81ba2 <__adddf3+0xe6>
   81e1e:	bf00      	nop

00081e20 <__aeabi_dmul>:
   81e20:	b570      	push	{r4, r5, r6, lr}
   81e22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81e26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81e2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81e2e:	bf1d      	ittte	ne
   81e30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81e34:	ea94 0f0c 	teqne	r4, ip
   81e38:	ea95 0f0c 	teqne	r5, ip
   81e3c:	f000 f8de 	bleq	81ffc <__aeabi_dmul+0x1dc>
   81e40:	442c      	add	r4, r5
   81e42:	ea81 0603 	eor.w	r6, r1, r3
   81e46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81e4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81e4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81e52:	bf18      	it	ne
   81e54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81e58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81e60:	d038      	beq.n	81ed4 <__aeabi_dmul+0xb4>
   81e62:	fba0 ce02 	umull	ip, lr, r0, r2
   81e66:	f04f 0500 	mov.w	r5, #0
   81e6a:	fbe1 e502 	umlal	lr, r5, r1, r2
   81e6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81e72:	fbe0 e503 	umlal	lr, r5, r0, r3
   81e76:	f04f 0600 	mov.w	r6, #0
   81e7a:	fbe1 5603 	umlal	r5, r6, r1, r3
   81e7e:	f09c 0f00 	teq	ip, #0
   81e82:	bf18      	it	ne
   81e84:	f04e 0e01 	orrne.w	lr, lr, #1
   81e88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81e8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81e90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81e94:	d204      	bcs.n	81ea0 <__aeabi_dmul+0x80>
   81e96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81e9a:	416d      	adcs	r5, r5
   81e9c:	eb46 0606 	adc.w	r6, r6, r6
   81ea0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81ea4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81ea8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81eac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81eb0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81eb4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81eb8:	bf88      	it	hi
   81eba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81ebe:	d81e      	bhi.n	81efe <__aeabi_dmul+0xde>
   81ec0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81ec4:	bf08      	it	eq
   81ec6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81eca:	f150 0000 	adcs.w	r0, r0, #0
   81ece:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81ed2:	bd70      	pop	{r4, r5, r6, pc}
   81ed4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81ed8:	ea46 0101 	orr.w	r1, r6, r1
   81edc:	ea40 0002 	orr.w	r0, r0, r2
   81ee0:	ea81 0103 	eor.w	r1, r1, r3
   81ee4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81ee8:	bfc2      	ittt	gt
   81eea:	ebd4 050c 	rsbsgt	r5, r4, ip
   81eee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81ef2:	bd70      	popgt	{r4, r5, r6, pc}
   81ef4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81ef8:	f04f 0e00 	mov.w	lr, #0
   81efc:	3c01      	subs	r4, #1
   81efe:	f300 80ab 	bgt.w	82058 <__aeabi_dmul+0x238>
   81f02:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81f06:	bfde      	ittt	le
   81f08:	2000      	movle	r0, #0
   81f0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81f0e:	bd70      	pople	{r4, r5, r6, pc}
   81f10:	f1c4 0400 	rsb	r4, r4, #0
   81f14:	3c20      	subs	r4, #32
   81f16:	da35      	bge.n	81f84 <__aeabi_dmul+0x164>
   81f18:	340c      	adds	r4, #12
   81f1a:	dc1b      	bgt.n	81f54 <__aeabi_dmul+0x134>
   81f1c:	f104 0414 	add.w	r4, r4, #20
   81f20:	f1c4 0520 	rsb	r5, r4, #32
   81f24:	fa00 f305 	lsl.w	r3, r0, r5
   81f28:	fa20 f004 	lsr.w	r0, r0, r4
   81f2c:	fa01 f205 	lsl.w	r2, r1, r5
   81f30:	ea40 0002 	orr.w	r0, r0, r2
   81f34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81f38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81f3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81f40:	fa21 f604 	lsr.w	r6, r1, r4
   81f44:	eb42 0106 	adc.w	r1, r2, r6
   81f48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81f4c:	bf08      	it	eq
   81f4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81f52:	bd70      	pop	{r4, r5, r6, pc}
   81f54:	f1c4 040c 	rsb	r4, r4, #12
   81f58:	f1c4 0520 	rsb	r5, r4, #32
   81f5c:	fa00 f304 	lsl.w	r3, r0, r4
   81f60:	fa20 f005 	lsr.w	r0, r0, r5
   81f64:	fa01 f204 	lsl.w	r2, r1, r4
   81f68:	ea40 0002 	orr.w	r0, r0, r2
   81f6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81f70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81f74:	f141 0100 	adc.w	r1, r1, #0
   81f78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81f7c:	bf08      	it	eq
   81f7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81f82:	bd70      	pop	{r4, r5, r6, pc}
   81f84:	f1c4 0520 	rsb	r5, r4, #32
   81f88:	fa00 f205 	lsl.w	r2, r0, r5
   81f8c:	ea4e 0e02 	orr.w	lr, lr, r2
   81f90:	fa20 f304 	lsr.w	r3, r0, r4
   81f94:	fa01 f205 	lsl.w	r2, r1, r5
   81f98:	ea43 0302 	orr.w	r3, r3, r2
   81f9c:	fa21 f004 	lsr.w	r0, r1, r4
   81fa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81fa4:	fa21 f204 	lsr.w	r2, r1, r4
   81fa8:	ea20 0002 	bic.w	r0, r0, r2
   81fac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81fb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81fb4:	bf08      	it	eq
   81fb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81fba:	bd70      	pop	{r4, r5, r6, pc}
   81fbc:	f094 0f00 	teq	r4, #0
   81fc0:	d10f      	bne.n	81fe2 <__aeabi_dmul+0x1c2>
   81fc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81fc6:	0040      	lsls	r0, r0, #1
   81fc8:	eb41 0101 	adc.w	r1, r1, r1
   81fcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81fd0:	bf08      	it	eq
   81fd2:	3c01      	subeq	r4, #1
   81fd4:	d0f7      	beq.n	81fc6 <__aeabi_dmul+0x1a6>
   81fd6:	ea41 0106 	orr.w	r1, r1, r6
   81fda:	f095 0f00 	teq	r5, #0
   81fde:	bf18      	it	ne
   81fe0:	4770      	bxne	lr
   81fe2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81fe6:	0052      	lsls	r2, r2, #1
   81fe8:	eb43 0303 	adc.w	r3, r3, r3
   81fec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81ff0:	bf08      	it	eq
   81ff2:	3d01      	subeq	r5, #1
   81ff4:	d0f7      	beq.n	81fe6 <__aeabi_dmul+0x1c6>
   81ff6:	ea43 0306 	orr.w	r3, r3, r6
   81ffa:	4770      	bx	lr
   81ffc:	ea94 0f0c 	teq	r4, ip
   82000:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82004:	bf18      	it	ne
   82006:	ea95 0f0c 	teqne	r5, ip
   8200a:	d00c      	beq.n	82026 <__aeabi_dmul+0x206>
   8200c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82010:	bf18      	it	ne
   82012:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82016:	d1d1      	bne.n	81fbc <__aeabi_dmul+0x19c>
   82018:	ea81 0103 	eor.w	r1, r1, r3
   8201c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82020:	f04f 0000 	mov.w	r0, #0
   82024:	bd70      	pop	{r4, r5, r6, pc}
   82026:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8202a:	bf06      	itte	eq
   8202c:	4610      	moveq	r0, r2
   8202e:	4619      	moveq	r1, r3
   82030:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82034:	d019      	beq.n	8206a <__aeabi_dmul+0x24a>
   82036:	ea94 0f0c 	teq	r4, ip
   8203a:	d102      	bne.n	82042 <__aeabi_dmul+0x222>
   8203c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   82040:	d113      	bne.n	8206a <__aeabi_dmul+0x24a>
   82042:	ea95 0f0c 	teq	r5, ip
   82046:	d105      	bne.n	82054 <__aeabi_dmul+0x234>
   82048:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8204c:	bf1c      	itt	ne
   8204e:	4610      	movne	r0, r2
   82050:	4619      	movne	r1, r3
   82052:	d10a      	bne.n	8206a <__aeabi_dmul+0x24a>
   82054:	ea81 0103 	eor.w	r1, r1, r3
   82058:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8205c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82060:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82064:	f04f 0000 	mov.w	r0, #0
   82068:	bd70      	pop	{r4, r5, r6, pc}
   8206a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8206e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   82072:	bd70      	pop	{r4, r5, r6, pc}

00082074 <__aeabi_ddiv>:
   82074:	b570      	push	{r4, r5, r6, lr}
   82076:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8207a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8207e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82082:	bf1d      	ittte	ne
   82084:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82088:	ea94 0f0c 	teqne	r4, ip
   8208c:	ea95 0f0c 	teqne	r5, ip
   82090:	f000 f8a7 	bleq	821e2 <__aeabi_ddiv+0x16e>
   82094:	eba4 0405 	sub.w	r4, r4, r5
   82098:	ea81 0e03 	eor.w	lr, r1, r3
   8209c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   820a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   820a4:	f000 8088 	beq.w	821b8 <__aeabi_ddiv+0x144>
   820a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   820ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   820b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   820b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   820b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   820bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   820c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   820c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   820c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   820cc:	429d      	cmp	r5, r3
   820ce:	bf08      	it	eq
   820d0:	4296      	cmpeq	r6, r2
   820d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   820d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   820da:	d202      	bcs.n	820e2 <__aeabi_ddiv+0x6e>
   820dc:	085b      	lsrs	r3, r3, #1
   820de:	ea4f 0232 	mov.w	r2, r2, rrx
   820e2:	1ab6      	subs	r6, r6, r2
   820e4:	eb65 0503 	sbc.w	r5, r5, r3
   820e8:	085b      	lsrs	r3, r3, #1
   820ea:	ea4f 0232 	mov.w	r2, r2, rrx
   820ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   820f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   820f6:	ebb6 0e02 	subs.w	lr, r6, r2
   820fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   820fe:	bf22      	ittt	cs
   82100:	1ab6      	subcs	r6, r6, r2
   82102:	4675      	movcs	r5, lr
   82104:	ea40 000c 	orrcs.w	r0, r0, ip
   82108:	085b      	lsrs	r3, r3, #1
   8210a:	ea4f 0232 	mov.w	r2, r2, rrx
   8210e:	ebb6 0e02 	subs.w	lr, r6, r2
   82112:	eb75 0e03 	sbcs.w	lr, r5, r3
   82116:	bf22      	ittt	cs
   82118:	1ab6      	subcs	r6, r6, r2
   8211a:	4675      	movcs	r5, lr
   8211c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82120:	085b      	lsrs	r3, r3, #1
   82122:	ea4f 0232 	mov.w	r2, r2, rrx
   82126:	ebb6 0e02 	subs.w	lr, r6, r2
   8212a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8212e:	bf22      	ittt	cs
   82130:	1ab6      	subcs	r6, r6, r2
   82132:	4675      	movcs	r5, lr
   82134:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82138:	085b      	lsrs	r3, r3, #1
   8213a:	ea4f 0232 	mov.w	r2, r2, rrx
   8213e:	ebb6 0e02 	subs.w	lr, r6, r2
   82142:	eb75 0e03 	sbcs.w	lr, r5, r3
   82146:	bf22      	ittt	cs
   82148:	1ab6      	subcs	r6, r6, r2
   8214a:	4675      	movcs	r5, lr
   8214c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82150:	ea55 0e06 	orrs.w	lr, r5, r6
   82154:	d018      	beq.n	82188 <__aeabi_ddiv+0x114>
   82156:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8215a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8215e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   82162:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   82166:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8216a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8216e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   82172:	d1c0      	bne.n	820f6 <__aeabi_ddiv+0x82>
   82174:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82178:	d10b      	bne.n	82192 <__aeabi_ddiv+0x11e>
   8217a:	ea41 0100 	orr.w	r1, r1, r0
   8217e:	f04f 0000 	mov.w	r0, #0
   82182:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   82186:	e7b6      	b.n	820f6 <__aeabi_ddiv+0x82>
   82188:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8218c:	bf04      	itt	eq
   8218e:	4301      	orreq	r1, r0
   82190:	2000      	moveq	r0, #0
   82192:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82196:	bf88      	it	hi
   82198:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8219c:	f63f aeaf 	bhi.w	81efe <__aeabi_dmul+0xde>
   821a0:	ebb5 0c03 	subs.w	ip, r5, r3
   821a4:	bf04      	itt	eq
   821a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   821aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   821ae:	f150 0000 	adcs.w	r0, r0, #0
   821b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   821b6:	bd70      	pop	{r4, r5, r6, pc}
   821b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   821bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   821c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   821c4:	bfc2      	ittt	gt
   821c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   821ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   821ce:	bd70      	popgt	{r4, r5, r6, pc}
   821d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   821d4:	f04f 0e00 	mov.w	lr, #0
   821d8:	3c01      	subs	r4, #1
   821da:	e690      	b.n	81efe <__aeabi_dmul+0xde>
   821dc:	ea45 0e06 	orr.w	lr, r5, r6
   821e0:	e68d      	b.n	81efe <__aeabi_dmul+0xde>
   821e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   821e6:	ea94 0f0c 	teq	r4, ip
   821ea:	bf08      	it	eq
   821ec:	ea95 0f0c 	teqeq	r5, ip
   821f0:	f43f af3b 	beq.w	8206a <__aeabi_dmul+0x24a>
   821f4:	ea94 0f0c 	teq	r4, ip
   821f8:	d10a      	bne.n	82210 <__aeabi_ddiv+0x19c>
   821fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   821fe:	f47f af34 	bne.w	8206a <__aeabi_dmul+0x24a>
   82202:	ea95 0f0c 	teq	r5, ip
   82206:	f47f af25 	bne.w	82054 <__aeabi_dmul+0x234>
   8220a:	4610      	mov	r0, r2
   8220c:	4619      	mov	r1, r3
   8220e:	e72c      	b.n	8206a <__aeabi_dmul+0x24a>
   82210:	ea95 0f0c 	teq	r5, ip
   82214:	d106      	bne.n	82224 <__aeabi_ddiv+0x1b0>
   82216:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8221a:	f43f aefd 	beq.w	82018 <__aeabi_dmul+0x1f8>
   8221e:	4610      	mov	r0, r2
   82220:	4619      	mov	r1, r3
   82222:	e722      	b.n	8206a <__aeabi_dmul+0x24a>
   82224:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82228:	bf18      	it	ne
   8222a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8222e:	f47f aec5 	bne.w	81fbc <__aeabi_dmul+0x19c>
   82232:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   82236:	f47f af0d 	bne.w	82054 <__aeabi_dmul+0x234>
   8223a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8223e:	f47f aeeb 	bne.w	82018 <__aeabi_dmul+0x1f8>
   82242:	e712      	b.n	8206a <__aeabi_dmul+0x24a>

00082244 <__gedf2>:
   82244:	f04f 3cff 	mov.w	ip, #4294967295
   82248:	e006      	b.n	82258 <__cmpdf2+0x4>
   8224a:	bf00      	nop

0008224c <__ledf2>:
   8224c:	f04f 0c01 	mov.w	ip, #1
   82250:	e002      	b.n	82258 <__cmpdf2+0x4>
   82252:	bf00      	nop

00082254 <__cmpdf2>:
   82254:	f04f 0c01 	mov.w	ip, #1
   82258:	f84d cd04 	str.w	ip, [sp, #-4]!
   8225c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   82260:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   82264:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   82268:	bf18      	it	ne
   8226a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8226e:	d01b      	beq.n	822a8 <__cmpdf2+0x54>
   82270:	b001      	add	sp, #4
   82272:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   82276:	bf0c      	ite	eq
   82278:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8227c:	ea91 0f03 	teqne	r1, r3
   82280:	bf02      	ittt	eq
   82282:	ea90 0f02 	teqeq	r0, r2
   82286:	2000      	moveq	r0, #0
   82288:	4770      	bxeq	lr
   8228a:	f110 0f00 	cmn.w	r0, #0
   8228e:	ea91 0f03 	teq	r1, r3
   82292:	bf58      	it	pl
   82294:	4299      	cmppl	r1, r3
   82296:	bf08      	it	eq
   82298:	4290      	cmpeq	r0, r2
   8229a:	bf2c      	ite	cs
   8229c:	17d8      	asrcs	r0, r3, #31
   8229e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   822a2:	f040 0001 	orr.w	r0, r0, #1
   822a6:	4770      	bx	lr
   822a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   822ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   822b0:	d102      	bne.n	822b8 <__cmpdf2+0x64>
   822b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   822b6:	d107      	bne.n	822c8 <__cmpdf2+0x74>
   822b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   822bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   822c0:	d1d6      	bne.n	82270 <__cmpdf2+0x1c>
   822c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   822c6:	d0d3      	beq.n	82270 <__cmpdf2+0x1c>
   822c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   822cc:	4770      	bx	lr
   822ce:	bf00      	nop

000822d0 <__aeabi_cdrcmple>:
   822d0:	4684      	mov	ip, r0
   822d2:	4610      	mov	r0, r2
   822d4:	4662      	mov	r2, ip
   822d6:	468c      	mov	ip, r1
   822d8:	4619      	mov	r1, r3
   822da:	4663      	mov	r3, ip
   822dc:	e000      	b.n	822e0 <__aeabi_cdcmpeq>
   822de:	bf00      	nop

000822e0 <__aeabi_cdcmpeq>:
   822e0:	b501      	push	{r0, lr}
   822e2:	f7ff ffb7 	bl	82254 <__cmpdf2>
   822e6:	2800      	cmp	r0, #0
   822e8:	bf48      	it	mi
   822ea:	f110 0f00 	cmnmi.w	r0, #0
   822ee:	bd01      	pop	{r0, pc}

000822f0 <__aeabi_dcmpeq>:
   822f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   822f4:	f7ff fff4 	bl	822e0 <__aeabi_cdcmpeq>
   822f8:	bf0c      	ite	eq
   822fa:	2001      	moveq	r0, #1
   822fc:	2000      	movne	r0, #0
   822fe:	f85d fb08 	ldr.w	pc, [sp], #8
   82302:	bf00      	nop

00082304 <__aeabi_dcmplt>:
   82304:	f84d ed08 	str.w	lr, [sp, #-8]!
   82308:	f7ff ffea 	bl	822e0 <__aeabi_cdcmpeq>
   8230c:	bf34      	ite	cc
   8230e:	2001      	movcc	r0, #1
   82310:	2000      	movcs	r0, #0
   82312:	f85d fb08 	ldr.w	pc, [sp], #8
   82316:	bf00      	nop

00082318 <__aeabi_dcmple>:
   82318:	f84d ed08 	str.w	lr, [sp, #-8]!
   8231c:	f7ff ffe0 	bl	822e0 <__aeabi_cdcmpeq>
   82320:	bf94      	ite	ls
   82322:	2001      	movls	r0, #1
   82324:	2000      	movhi	r0, #0
   82326:	f85d fb08 	ldr.w	pc, [sp], #8
   8232a:	bf00      	nop

0008232c <__aeabi_dcmpge>:
   8232c:	f84d ed08 	str.w	lr, [sp, #-8]!
   82330:	f7ff ffce 	bl	822d0 <__aeabi_cdrcmple>
   82334:	bf94      	ite	ls
   82336:	2001      	movls	r0, #1
   82338:	2000      	movhi	r0, #0
   8233a:	f85d fb08 	ldr.w	pc, [sp], #8
   8233e:	bf00      	nop

00082340 <__aeabi_dcmpgt>:
   82340:	f84d ed08 	str.w	lr, [sp, #-8]!
   82344:	f7ff ffc4 	bl	822d0 <__aeabi_cdrcmple>
   82348:	bf34      	ite	cc
   8234a:	2001      	movcc	r0, #1
   8234c:	2000      	movcs	r0, #0
   8234e:	f85d fb08 	ldr.w	pc, [sp], #8
   82352:	bf00      	nop

00082354 <__aeabi_d2iz>:
   82354:	ea4f 0241 	mov.w	r2, r1, lsl #1
   82358:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8235c:	d215      	bcs.n	8238a <__aeabi_d2iz+0x36>
   8235e:	d511      	bpl.n	82384 <__aeabi_d2iz+0x30>
   82360:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   82364:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   82368:	d912      	bls.n	82390 <__aeabi_d2iz+0x3c>
   8236a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8236e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   82372:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   82376:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8237a:	fa23 f002 	lsr.w	r0, r3, r2
   8237e:	bf18      	it	ne
   82380:	4240      	negne	r0, r0
   82382:	4770      	bx	lr
   82384:	f04f 0000 	mov.w	r0, #0
   82388:	4770      	bx	lr
   8238a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8238e:	d105      	bne.n	8239c <__aeabi_d2iz+0x48>
   82390:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   82394:	bf08      	it	eq
   82396:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8239a:	4770      	bx	lr
   8239c:	f04f 0000 	mov.w	r0, #0
   823a0:	4770      	bx	lr
   823a2:	bf00      	nop

000823a4 <__aeabi_d2f>:
   823a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   823a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   823ac:	bf24      	itt	cs
   823ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   823b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   823b6:	d90d      	bls.n	823d4 <__aeabi_d2f+0x30>
   823b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   823bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   823c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   823c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   823c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   823cc:	bf08      	it	eq
   823ce:	f020 0001 	biceq.w	r0, r0, #1
   823d2:	4770      	bx	lr
   823d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   823d8:	d121      	bne.n	8241e <__aeabi_d2f+0x7a>
   823da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   823de:	bfbc      	itt	lt
   823e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   823e4:	4770      	bxlt	lr
   823e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   823ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   823ee:	f1c2 0218 	rsb	r2, r2, #24
   823f2:	f1c2 0c20 	rsb	ip, r2, #32
   823f6:	fa10 f30c 	lsls.w	r3, r0, ip
   823fa:	fa20 f002 	lsr.w	r0, r0, r2
   823fe:	bf18      	it	ne
   82400:	f040 0001 	orrne.w	r0, r0, #1
   82404:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   82408:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   8240c:	fa03 fc0c 	lsl.w	ip, r3, ip
   82410:	ea40 000c 	orr.w	r0, r0, ip
   82414:	fa23 f302 	lsr.w	r3, r3, r2
   82418:	ea4f 0343 	mov.w	r3, r3, lsl #1
   8241c:	e7cc      	b.n	823b8 <__aeabi_d2f+0x14>
   8241e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   82422:	d107      	bne.n	82434 <__aeabi_d2f+0x90>
   82424:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   82428:	bf1e      	ittt	ne
   8242a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8242e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   82432:	4770      	bxne	lr
   82434:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   82438:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8243c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82440:	4770      	bx	lr
   82442:	bf00      	nop

00082444 <__aeabi_frsub>:
   82444:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   82448:	e002      	b.n	82450 <__addsf3>
   8244a:	bf00      	nop

0008244c <__aeabi_fsub>:
   8244c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00082450 <__addsf3>:
   82450:	0042      	lsls	r2, r0, #1
   82452:	bf1f      	itttt	ne
   82454:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   82458:	ea92 0f03 	teqne	r2, r3
   8245c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   82460:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82464:	d06a      	beq.n	8253c <__addsf3+0xec>
   82466:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8246a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8246e:	bfc1      	itttt	gt
   82470:	18d2      	addgt	r2, r2, r3
   82472:	4041      	eorgt	r1, r0
   82474:	4048      	eorgt	r0, r1
   82476:	4041      	eorgt	r1, r0
   82478:	bfb8      	it	lt
   8247a:	425b      	neglt	r3, r3
   8247c:	2b19      	cmp	r3, #25
   8247e:	bf88      	it	hi
   82480:	4770      	bxhi	lr
   82482:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   82486:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8248a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8248e:	bf18      	it	ne
   82490:	4240      	negne	r0, r0
   82492:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82496:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8249a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8249e:	bf18      	it	ne
   824a0:	4249      	negne	r1, r1
   824a2:	ea92 0f03 	teq	r2, r3
   824a6:	d03f      	beq.n	82528 <__addsf3+0xd8>
   824a8:	f1a2 0201 	sub.w	r2, r2, #1
   824ac:	fa41 fc03 	asr.w	ip, r1, r3
   824b0:	eb10 000c 	adds.w	r0, r0, ip
   824b4:	f1c3 0320 	rsb	r3, r3, #32
   824b8:	fa01 f103 	lsl.w	r1, r1, r3
   824bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   824c0:	d502      	bpl.n	824c8 <__addsf3+0x78>
   824c2:	4249      	negs	r1, r1
   824c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   824c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   824cc:	d313      	bcc.n	824f6 <__addsf3+0xa6>
   824ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   824d2:	d306      	bcc.n	824e2 <__addsf3+0x92>
   824d4:	0840      	lsrs	r0, r0, #1
   824d6:	ea4f 0131 	mov.w	r1, r1, rrx
   824da:	f102 0201 	add.w	r2, r2, #1
   824de:	2afe      	cmp	r2, #254	; 0xfe
   824e0:	d251      	bcs.n	82586 <__addsf3+0x136>
   824e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   824e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   824ea:	bf08      	it	eq
   824ec:	f020 0001 	biceq.w	r0, r0, #1
   824f0:	ea40 0003 	orr.w	r0, r0, r3
   824f4:	4770      	bx	lr
   824f6:	0049      	lsls	r1, r1, #1
   824f8:	eb40 0000 	adc.w	r0, r0, r0
   824fc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   82500:	f1a2 0201 	sub.w	r2, r2, #1
   82504:	d1ed      	bne.n	824e2 <__addsf3+0x92>
   82506:	fab0 fc80 	clz	ip, r0
   8250a:	f1ac 0c08 	sub.w	ip, ip, #8
   8250e:	ebb2 020c 	subs.w	r2, r2, ip
   82512:	fa00 f00c 	lsl.w	r0, r0, ip
   82516:	bfaa      	itet	ge
   82518:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8251c:	4252      	neglt	r2, r2
   8251e:	4318      	orrge	r0, r3
   82520:	bfbc      	itt	lt
   82522:	40d0      	lsrlt	r0, r2
   82524:	4318      	orrlt	r0, r3
   82526:	4770      	bx	lr
   82528:	f092 0f00 	teq	r2, #0
   8252c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   82530:	bf06      	itte	eq
   82532:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   82536:	3201      	addeq	r2, #1
   82538:	3b01      	subne	r3, #1
   8253a:	e7b5      	b.n	824a8 <__addsf3+0x58>
   8253c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82540:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82544:	bf18      	it	ne
   82546:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8254a:	d021      	beq.n	82590 <__addsf3+0x140>
   8254c:	ea92 0f03 	teq	r2, r3
   82550:	d004      	beq.n	8255c <__addsf3+0x10c>
   82552:	f092 0f00 	teq	r2, #0
   82556:	bf08      	it	eq
   82558:	4608      	moveq	r0, r1
   8255a:	4770      	bx	lr
   8255c:	ea90 0f01 	teq	r0, r1
   82560:	bf1c      	itt	ne
   82562:	2000      	movne	r0, #0
   82564:	4770      	bxne	lr
   82566:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8256a:	d104      	bne.n	82576 <__addsf3+0x126>
   8256c:	0040      	lsls	r0, r0, #1
   8256e:	bf28      	it	cs
   82570:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   82574:	4770      	bx	lr
   82576:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8257a:	bf3c      	itt	cc
   8257c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   82580:	4770      	bxcc	lr
   82582:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82586:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8258a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8258e:	4770      	bx	lr
   82590:	ea7f 6222 	mvns.w	r2, r2, asr #24
   82594:	bf16      	itet	ne
   82596:	4608      	movne	r0, r1
   82598:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   8259c:	4601      	movne	r1, r0
   8259e:	0242      	lsls	r2, r0, #9
   825a0:	bf06      	itte	eq
   825a2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   825a6:	ea90 0f01 	teqeq	r0, r1
   825aa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   825ae:	4770      	bx	lr

000825b0 <__aeabi_ui2f>:
   825b0:	f04f 0300 	mov.w	r3, #0
   825b4:	e004      	b.n	825c0 <__aeabi_i2f+0x8>
   825b6:	bf00      	nop

000825b8 <__aeabi_i2f>:
   825b8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   825bc:	bf48      	it	mi
   825be:	4240      	negmi	r0, r0
   825c0:	ea5f 0c00 	movs.w	ip, r0
   825c4:	bf08      	it	eq
   825c6:	4770      	bxeq	lr
   825c8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   825cc:	4601      	mov	r1, r0
   825ce:	f04f 0000 	mov.w	r0, #0
   825d2:	e01c      	b.n	8260e <__aeabi_l2f+0x2a>

000825d4 <__aeabi_ul2f>:
   825d4:	ea50 0201 	orrs.w	r2, r0, r1
   825d8:	bf08      	it	eq
   825da:	4770      	bxeq	lr
   825dc:	f04f 0300 	mov.w	r3, #0
   825e0:	e00a      	b.n	825f8 <__aeabi_l2f+0x14>
   825e2:	bf00      	nop

000825e4 <__aeabi_l2f>:
   825e4:	ea50 0201 	orrs.w	r2, r0, r1
   825e8:	bf08      	it	eq
   825ea:	4770      	bxeq	lr
   825ec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   825f0:	d502      	bpl.n	825f8 <__aeabi_l2f+0x14>
   825f2:	4240      	negs	r0, r0
   825f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   825f8:	ea5f 0c01 	movs.w	ip, r1
   825fc:	bf02      	ittt	eq
   825fe:	4684      	moveq	ip, r0
   82600:	4601      	moveq	r1, r0
   82602:	2000      	moveq	r0, #0
   82604:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   82608:	bf08      	it	eq
   8260a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8260e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   82612:	fabc f28c 	clz	r2, ip
   82616:	3a08      	subs	r2, #8
   82618:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8261c:	db10      	blt.n	82640 <__aeabi_l2f+0x5c>
   8261e:	fa01 fc02 	lsl.w	ip, r1, r2
   82622:	4463      	add	r3, ip
   82624:	fa00 fc02 	lsl.w	ip, r0, r2
   82628:	f1c2 0220 	rsb	r2, r2, #32
   8262c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82630:	fa20 f202 	lsr.w	r2, r0, r2
   82634:	eb43 0002 	adc.w	r0, r3, r2
   82638:	bf08      	it	eq
   8263a:	f020 0001 	biceq.w	r0, r0, #1
   8263e:	4770      	bx	lr
   82640:	f102 0220 	add.w	r2, r2, #32
   82644:	fa01 fc02 	lsl.w	ip, r1, r2
   82648:	f1c2 0220 	rsb	r2, r2, #32
   8264c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   82650:	fa21 f202 	lsr.w	r2, r1, r2
   82654:	eb43 0002 	adc.w	r0, r3, r2
   82658:	bf08      	it	eq
   8265a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8265e:	4770      	bx	lr

00082660 <__gesf2>:
   82660:	f04f 3cff 	mov.w	ip, #4294967295
   82664:	e006      	b.n	82674 <__cmpsf2+0x4>
   82666:	bf00      	nop

00082668 <__lesf2>:
   82668:	f04f 0c01 	mov.w	ip, #1
   8266c:	e002      	b.n	82674 <__cmpsf2+0x4>
   8266e:	bf00      	nop

00082670 <__cmpsf2>:
   82670:	f04f 0c01 	mov.w	ip, #1
   82674:	f84d cd04 	str.w	ip, [sp, #-4]!
   82678:	ea4f 0240 	mov.w	r2, r0, lsl #1
   8267c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82680:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82684:	bf18      	it	ne
   82686:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8268a:	d011      	beq.n	826b0 <__cmpsf2+0x40>
   8268c:	b001      	add	sp, #4
   8268e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   82692:	bf18      	it	ne
   82694:	ea90 0f01 	teqne	r0, r1
   82698:	bf58      	it	pl
   8269a:	ebb2 0003 	subspl.w	r0, r2, r3
   8269e:	bf88      	it	hi
   826a0:	17c8      	asrhi	r0, r1, #31
   826a2:	bf38      	it	cc
   826a4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   826a8:	bf18      	it	ne
   826aa:	f040 0001 	orrne.w	r0, r0, #1
   826ae:	4770      	bx	lr
   826b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   826b4:	d102      	bne.n	826bc <__cmpsf2+0x4c>
   826b6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   826ba:	d105      	bne.n	826c8 <__cmpsf2+0x58>
   826bc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   826c0:	d1e4      	bne.n	8268c <__cmpsf2+0x1c>
   826c2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   826c6:	d0e1      	beq.n	8268c <__cmpsf2+0x1c>
   826c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   826cc:	4770      	bx	lr
   826ce:	bf00      	nop

000826d0 <__aeabi_cfrcmple>:
   826d0:	4684      	mov	ip, r0
   826d2:	4608      	mov	r0, r1
   826d4:	4661      	mov	r1, ip
   826d6:	e7ff      	b.n	826d8 <__aeabi_cfcmpeq>

000826d8 <__aeabi_cfcmpeq>:
   826d8:	b50f      	push	{r0, r1, r2, r3, lr}
   826da:	f7ff ffc9 	bl	82670 <__cmpsf2>
   826de:	2800      	cmp	r0, #0
   826e0:	bf48      	it	mi
   826e2:	f110 0f00 	cmnmi.w	r0, #0
   826e6:	bd0f      	pop	{r0, r1, r2, r3, pc}

000826e8 <__aeabi_fcmpeq>:
   826e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   826ec:	f7ff fff4 	bl	826d8 <__aeabi_cfcmpeq>
   826f0:	bf0c      	ite	eq
   826f2:	2001      	moveq	r0, #1
   826f4:	2000      	movne	r0, #0
   826f6:	f85d fb08 	ldr.w	pc, [sp], #8
   826fa:	bf00      	nop

000826fc <__aeabi_fcmplt>:
   826fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   82700:	f7ff ffea 	bl	826d8 <__aeabi_cfcmpeq>
   82704:	bf34      	ite	cc
   82706:	2001      	movcc	r0, #1
   82708:	2000      	movcs	r0, #0
   8270a:	f85d fb08 	ldr.w	pc, [sp], #8
   8270e:	bf00      	nop

00082710 <__aeabi_fcmple>:
   82710:	f84d ed08 	str.w	lr, [sp, #-8]!
   82714:	f7ff ffe0 	bl	826d8 <__aeabi_cfcmpeq>
   82718:	bf94      	ite	ls
   8271a:	2001      	movls	r0, #1
   8271c:	2000      	movhi	r0, #0
   8271e:	f85d fb08 	ldr.w	pc, [sp], #8
   82722:	bf00      	nop

00082724 <__aeabi_fcmpge>:
   82724:	f84d ed08 	str.w	lr, [sp, #-8]!
   82728:	f7ff ffd2 	bl	826d0 <__aeabi_cfrcmple>
   8272c:	bf94      	ite	ls
   8272e:	2001      	movls	r0, #1
   82730:	2000      	movhi	r0, #0
   82732:	f85d fb08 	ldr.w	pc, [sp], #8
   82736:	bf00      	nop

00082738 <__aeabi_fcmpgt>:
   82738:	f84d ed08 	str.w	lr, [sp, #-8]!
   8273c:	f7ff ffc8 	bl	826d0 <__aeabi_cfrcmple>
   82740:	bf34      	ite	cc
   82742:	2001      	movcc	r0, #1
   82744:	2000      	movcs	r0, #0
   82746:	f85d fb08 	ldr.w	pc, [sp], #8
   8274a:	bf00      	nop

0008274c <__errno>:
   8274c:	4b01      	ldr	r3, [pc, #4]	; (82754 <__errno+0x8>)
   8274e:	6818      	ldr	r0, [r3, #0]
   82750:	4770      	bx	lr
   82752:	bf00      	nop
   82754:	20070570 	.word	0x20070570

00082758 <__libc_init_array>:
   82758:	b570      	push	{r4, r5, r6, lr}
   8275a:	4e0f      	ldr	r6, [pc, #60]	; (82798 <__libc_init_array+0x40>)
   8275c:	4d0f      	ldr	r5, [pc, #60]	; (8279c <__libc_init_array+0x44>)
   8275e:	1b76      	subs	r6, r6, r5
   82760:	10b6      	asrs	r6, r6, #2
   82762:	d007      	beq.n	82774 <__libc_init_array+0x1c>
   82764:	3d04      	subs	r5, #4
   82766:	2400      	movs	r4, #0
   82768:	3401      	adds	r4, #1
   8276a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8276e:	4798      	blx	r3
   82770:	42a6      	cmp	r6, r4
   82772:	d1f9      	bne.n	82768 <__libc_init_array+0x10>
   82774:	4e0a      	ldr	r6, [pc, #40]	; (827a0 <__libc_init_array+0x48>)
   82776:	4d0b      	ldr	r5, [pc, #44]	; (827a4 <__libc_init_array+0x4c>)
   82778:	f003 f832 	bl	857e0 <_init>
   8277c:	1b76      	subs	r6, r6, r5
   8277e:	10b6      	asrs	r6, r6, #2
   82780:	d008      	beq.n	82794 <__libc_init_array+0x3c>
   82782:	3d04      	subs	r5, #4
   82784:	2400      	movs	r4, #0
   82786:	3401      	adds	r4, #1
   82788:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8278c:	4798      	blx	r3
   8278e:	42a6      	cmp	r6, r4
   82790:	d1f9      	bne.n	82786 <__libc_init_array+0x2e>
   82792:	bd70      	pop	{r4, r5, r6, pc}
   82794:	bd70      	pop	{r4, r5, r6, pc}
   82796:	bf00      	nop
   82798:	000857ec 	.word	0x000857ec
   8279c:	000857ec 	.word	0x000857ec
   827a0:	000857f4 	.word	0x000857f4
   827a4:	000857ec 	.word	0x000857ec

000827a8 <iprintf>:
   827a8:	b40f      	push	{r0, r1, r2, r3}
   827aa:	b510      	push	{r4, lr}
   827ac:	4b07      	ldr	r3, [pc, #28]	; (827cc <iprintf+0x24>)
   827ae:	b082      	sub	sp, #8
   827b0:	ac04      	add	r4, sp, #16
   827b2:	f854 2b04 	ldr.w	r2, [r4], #4
   827b6:	6818      	ldr	r0, [r3, #0]
   827b8:	4623      	mov	r3, r4
   827ba:	6881      	ldr	r1, [r0, #8]
   827bc:	9401      	str	r4, [sp, #4]
   827be:	f000 f945 	bl	82a4c <_vfiprintf_r>
   827c2:	b002      	add	sp, #8
   827c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   827c8:	b004      	add	sp, #16
   827ca:	4770      	bx	lr
   827cc:	20070570 	.word	0x20070570

000827d0 <memset>:
   827d0:	b4f0      	push	{r4, r5, r6, r7}
   827d2:	0784      	lsls	r4, r0, #30
   827d4:	d043      	beq.n	8285e <memset+0x8e>
   827d6:	1e54      	subs	r4, r2, #1
   827d8:	2a00      	cmp	r2, #0
   827da:	d03e      	beq.n	8285a <memset+0x8a>
   827dc:	b2cd      	uxtb	r5, r1
   827de:	4603      	mov	r3, r0
   827e0:	e003      	b.n	827ea <memset+0x1a>
   827e2:	1e62      	subs	r2, r4, #1
   827e4:	2c00      	cmp	r4, #0
   827e6:	d038      	beq.n	8285a <memset+0x8a>
   827e8:	4614      	mov	r4, r2
   827ea:	f803 5b01 	strb.w	r5, [r3], #1
   827ee:	079a      	lsls	r2, r3, #30
   827f0:	d1f7      	bne.n	827e2 <memset+0x12>
   827f2:	2c03      	cmp	r4, #3
   827f4:	d92a      	bls.n	8284c <memset+0x7c>
   827f6:	b2cd      	uxtb	r5, r1
   827f8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   827fc:	2c0f      	cmp	r4, #15
   827fe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82802:	d915      	bls.n	82830 <memset+0x60>
   82804:	f1a4 0710 	sub.w	r7, r4, #16
   82808:	093f      	lsrs	r7, r7, #4
   8280a:	f103 0610 	add.w	r6, r3, #16
   8280e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   82812:	461a      	mov	r2, r3
   82814:	6015      	str	r5, [r2, #0]
   82816:	6055      	str	r5, [r2, #4]
   82818:	6095      	str	r5, [r2, #8]
   8281a:	60d5      	str	r5, [r2, #12]
   8281c:	3210      	adds	r2, #16
   8281e:	42b2      	cmp	r2, r6
   82820:	d1f8      	bne.n	82814 <memset+0x44>
   82822:	f004 040f 	and.w	r4, r4, #15
   82826:	3701      	adds	r7, #1
   82828:	2c03      	cmp	r4, #3
   8282a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8282e:	d90d      	bls.n	8284c <memset+0x7c>
   82830:	461e      	mov	r6, r3
   82832:	4622      	mov	r2, r4
   82834:	3a04      	subs	r2, #4
   82836:	2a03      	cmp	r2, #3
   82838:	f846 5b04 	str.w	r5, [r6], #4
   8283c:	d8fa      	bhi.n	82834 <memset+0x64>
   8283e:	1f22      	subs	r2, r4, #4
   82840:	f022 0203 	bic.w	r2, r2, #3
   82844:	3204      	adds	r2, #4
   82846:	4413      	add	r3, r2
   82848:	f004 0403 	and.w	r4, r4, #3
   8284c:	b12c      	cbz	r4, 8285a <memset+0x8a>
   8284e:	b2c9      	uxtb	r1, r1
   82850:	441c      	add	r4, r3
   82852:	f803 1b01 	strb.w	r1, [r3], #1
   82856:	42a3      	cmp	r3, r4
   82858:	d1fb      	bne.n	82852 <memset+0x82>
   8285a:	bcf0      	pop	{r4, r5, r6, r7}
   8285c:	4770      	bx	lr
   8285e:	4614      	mov	r4, r2
   82860:	4603      	mov	r3, r0
   82862:	e7c6      	b.n	827f2 <memset+0x22>

00082864 <setbuf>:
   82864:	2900      	cmp	r1, #0
   82866:	bf0c      	ite	eq
   82868:	2202      	moveq	r2, #2
   8286a:	2200      	movne	r2, #0
   8286c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82870:	f000 b800 	b.w	82874 <setvbuf>

00082874 <setvbuf>:
   82874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82878:	4d3c      	ldr	r5, [pc, #240]	; (8296c <setvbuf+0xf8>)
   8287a:	4604      	mov	r4, r0
   8287c:	682d      	ldr	r5, [r5, #0]
   8287e:	4688      	mov	r8, r1
   82880:	4616      	mov	r6, r2
   82882:	461f      	mov	r7, r3
   82884:	b115      	cbz	r5, 8288c <setvbuf+0x18>
   82886:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82888:	2b00      	cmp	r3, #0
   8288a:	d04f      	beq.n	8292c <setvbuf+0xb8>
   8288c:	2e02      	cmp	r6, #2
   8288e:	d830      	bhi.n	828f2 <setvbuf+0x7e>
   82890:	2f00      	cmp	r7, #0
   82892:	db2e      	blt.n	828f2 <setvbuf+0x7e>
   82894:	4628      	mov	r0, r5
   82896:	4621      	mov	r1, r4
   82898:	f001 f856 	bl	83948 <_fflush_r>
   8289c:	89a3      	ldrh	r3, [r4, #12]
   8289e:	2200      	movs	r2, #0
   828a0:	6062      	str	r2, [r4, #4]
   828a2:	61a2      	str	r2, [r4, #24]
   828a4:	061a      	lsls	r2, r3, #24
   828a6:	d428      	bmi.n	828fa <setvbuf+0x86>
   828a8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   828ac:	b29b      	uxth	r3, r3
   828ae:	2e02      	cmp	r6, #2
   828b0:	81a3      	strh	r3, [r4, #12]
   828b2:	d02d      	beq.n	82910 <setvbuf+0x9c>
   828b4:	f1b8 0f00 	cmp.w	r8, #0
   828b8:	d03c      	beq.n	82934 <setvbuf+0xc0>
   828ba:	2e01      	cmp	r6, #1
   828bc:	d013      	beq.n	828e6 <setvbuf+0x72>
   828be:	b29b      	uxth	r3, r3
   828c0:	f003 0008 	and.w	r0, r3, #8
   828c4:	4a2a      	ldr	r2, [pc, #168]	; (82970 <setvbuf+0xfc>)
   828c6:	b280      	uxth	r0, r0
   828c8:	63ea      	str	r2, [r5, #60]	; 0x3c
   828ca:	f8c4 8000 	str.w	r8, [r4]
   828ce:	f8c4 8010 	str.w	r8, [r4, #16]
   828d2:	6167      	str	r7, [r4, #20]
   828d4:	b178      	cbz	r0, 828f6 <setvbuf+0x82>
   828d6:	f013 0f03 	tst.w	r3, #3
   828da:	bf18      	it	ne
   828dc:	2700      	movne	r7, #0
   828de:	60a7      	str	r7, [r4, #8]
   828e0:	2000      	movs	r0, #0
   828e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828e6:	f043 0301 	orr.w	r3, r3, #1
   828ea:	427a      	negs	r2, r7
   828ec:	81a3      	strh	r3, [r4, #12]
   828ee:	61a2      	str	r2, [r4, #24]
   828f0:	e7e5      	b.n	828be <setvbuf+0x4a>
   828f2:	f04f 30ff 	mov.w	r0, #4294967295
   828f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828fa:	4628      	mov	r0, r5
   828fc:	6921      	ldr	r1, [r4, #16]
   828fe:	f001 f983 	bl	83c08 <_free_r>
   82902:	89a3      	ldrh	r3, [r4, #12]
   82904:	2e02      	cmp	r6, #2
   82906:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8290a:	b29b      	uxth	r3, r3
   8290c:	81a3      	strh	r3, [r4, #12]
   8290e:	d1d1      	bne.n	828b4 <setvbuf+0x40>
   82910:	2000      	movs	r0, #0
   82912:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82916:	f043 0302 	orr.w	r3, r3, #2
   8291a:	2500      	movs	r5, #0
   8291c:	2101      	movs	r1, #1
   8291e:	81a3      	strh	r3, [r4, #12]
   82920:	60a5      	str	r5, [r4, #8]
   82922:	6022      	str	r2, [r4, #0]
   82924:	6122      	str	r2, [r4, #16]
   82926:	6161      	str	r1, [r4, #20]
   82928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8292c:	4628      	mov	r0, r5
   8292e:	f001 f827 	bl	83980 <__sinit>
   82932:	e7ab      	b.n	8288c <setvbuf+0x18>
   82934:	2f00      	cmp	r7, #0
   82936:	bf08      	it	eq
   82938:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   8293c:	4638      	mov	r0, r7
   8293e:	f001 fc59 	bl	841f4 <malloc>
   82942:	4680      	mov	r8, r0
   82944:	b128      	cbz	r0, 82952 <setvbuf+0xde>
   82946:	89a3      	ldrh	r3, [r4, #12]
   82948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8294c:	b29b      	uxth	r3, r3
   8294e:	81a3      	strh	r3, [r4, #12]
   82950:	e7b3      	b.n	828ba <setvbuf+0x46>
   82952:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82956:	f001 fc4d 	bl	841f4 <malloc>
   8295a:	4680      	mov	r8, r0
   8295c:	b918      	cbnz	r0, 82966 <setvbuf+0xf2>
   8295e:	89a3      	ldrh	r3, [r4, #12]
   82960:	f04f 30ff 	mov.w	r0, #4294967295
   82964:	e7d5      	b.n	82912 <setvbuf+0x9e>
   82966:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8296a:	e7ec      	b.n	82946 <setvbuf+0xd2>
   8296c:	20070570 	.word	0x20070570
   82970:	00083975 	.word	0x00083975

00082974 <strlen>:
   82974:	f020 0103 	bic.w	r1, r0, #3
   82978:	f010 0003 	ands.w	r0, r0, #3
   8297c:	f1c0 0000 	rsb	r0, r0, #0
   82980:	f851 3b04 	ldr.w	r3, [r1], #4
   82984:	f100 0c04 	add.w	ip, r0, #4
   82988:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8298c:	f06f 0200 	mvn.w	r2, #0
   82990:	bf1c      	itt	ne
   82992:	fa22 f20c 	lsrne.w	r2, r2, ip
   82996:	4313      	orrne	r3, r2
   82998:	f04f 0c01 	mov.w	ip, #1
   8299c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   829a0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   829a4:	eba3 020c 	sub.w	r2, r3, ip
   829a8:	ea22 0203 	bic.w	r2, r2, r3
   829ac:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   829b0:	bf04      	itt	eq
   829b2:	f851 3b04 	ldreq.w	r3, [r1], #4
   829b6:	3004      	addeq	r0, #4
   829b8:	d0f4      	beq.n	829a4 <strlen+0x30>
   829ba:	f013 0fff 	tst.w	r3, #255	; 0xff
   829be:	bf1f      	itttt	ne
   829c0:	3001      	addne	r0, #1
   829c2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   829c6:	3001      	addne	r0, #1
   829c8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   829cc:	bf18      	it	ne
   829ce:	3001      	addne	r0, #1
   829d0:	4770      	bx	lr
   829d2:	bf00      	nop

000829d4 <__sprint_r.part.0>:
   829d4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   829d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   829da:	049c      	lsls	r4, r3, #18
   829dc:	460e      	mov	r6, r1
   829de:	4680      	mov	r8, r0
   829e0:	4691      	mov	r9, r2
   829e2:	d52a      	bpl.n	82a3a <__sprint_r.part.0+0x66>
   829e4:	6893      	ldr	r3, [r2, #8]
   829e6:	6812      	ldr	r2, [r2, #0]
   829e8:	f102 0a08 	add.w	sl, r2, #8
   829ec:	b31b      	cbz	r3, 82a36 <__sprint_r.part.0+0x62>
   829ee:	e91a 00a0 	ldmdb	sl, {r5, r7}
   829f2:	08bf      	lsrs	r7, r7, #2
   829f4:	d017      	beq.n	82a26 <__sprint_r.part.0+0x52>
   829f6:	3d04      	subs	r5, #4
   829f8:	2400      	movs	r4, #0
   829fa:	e001      	b.n	82a00 <__sprint_r.part.0+0x2c>
   829fc:	42a7      	cmp	r7, r4
   829fe:	d010      	beq.n	82a22 <__sprint_r.part.0+0x4e>
   82a00:	4640      	mov	r0, r8
   82a02:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82a06:	4632      	mov	r2, r6
   82a08:	f001 f850 	bl	83aac <_fputwc_r>
   82a0c:	1c43      	adds	r3, r0, #1
   82a0e:	f104 0401 	add.w	r4, r4, #1
   82a12:	d1f3      	bne.n	829fc <__sprint_r.part.0+0x28>
   82a14:	2300      	movs	r3, #0
   82a16:	f8c9 3008 	str.w	r3, [r9, #8]
   82a1a:	f8c9 3004 	str.w	r3, [r9, #4]
   82a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82a22:	f8d9 3008 	ldr.w	r3, [r9, #8]
   82a26:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   82a2a:	f8c9 3008 	str.w	r3, [r9, #8]
   82a2e:	f10a 0a08 	add.w	sl, sl, #8
   82a32:	2b00      	cmp	r3, #0
   82a34:	d1db      	bne.n	829ee <__sprint_r.part.0+0x1a>
   82a36:	2000      	movs	r0, #0
   82a38:	e7ec      	b.n	82a14 <__sprint_r.part.0+0x40>
   82a3a:	f001 f9b1 	bl	83da0 <__sfvwrite_r>
   82a3e:	2300      	movs	r3, #0
   82a40:	f8c9 3008 	str.w	r3, [r9, #8]
   82a44:	f8c9 3004 	str.w	r3, [r9, #4]
   82a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00082a4c <_vfiprintf_r>:
   82a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a50:	b0b1      	sub	sp, #196	; 0xc4
   82a52:	461c      	mov	r4, r3
   82a54:	9102      	str	r1, [sp, #8]
   82a56:	4690      	mov	r8, r2
   82a58:	9308      	str	r3, [sp, #32]
   82a5a:	9006      	str	r0, [sp, #24]
   82a5c:	b118      	cbz	r0, 82a66 <_vfiprintf_r+0x1a>
   82a5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82a60:	2b00      	cmp	r3, #0
   82a62:	f000 80e8 	beq.w	82c36 <_vfiprintf_r+0x1ea>
   82a66:	9d02      	ldr	r5, [sp, #8]
   82a68:	89ab      	ldrh	r3, [r5, #12]
   82a6a:	b29a      	uxth	r2, r3
   82a6c:	0490      	lsls	r0, r2, #18
   82a6e:	d407      	bmi.n	82a80 <_vfiprintf_r+0x34>
   82a70:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   82a72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82a76:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   82a7a:	81ab      	strh	r3, [r5, #12]
   82a7c:	b29a      	uxth	r2, r3
   82a7e:	6669      	str	r1, [r5, #100]	; 0x64
   82a80:	0711      	lsls	r1, r2, #28
   82a82:	f140 80b7 	bpl.w	82bf4 <_vfiprintf_r+0x1a8>
   82a86:	f8dd b008 	ldr.w	fp, [sp, #8]
   82a8a:	f8db 3010 	ldr.w	r3, [fp, #16]
   82a8e:	2b00      	cmp	r3, #0
   82a90:	f000 80b0 	beq.w	82bf4 <_vfiprintf_r+0x1a8>
   82a94:	f002 021a 	and.w	r2, r2, #26
   82a98:	2a0a      	cmp	r2, #10
   82a9a:	f000 80b7 	beq.w	82c0c <_vfiprintf_r+0x1c0>
   82a9e:	2300      	movs	r3, #0
   82aa0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   82aa4:	930a      	str	r3, [sp, #40]	; 0x28
   82aa6:	9315      	str	r3, [sp, #84]	; 0x54
   82aa8:	9314      	str	r3, [sp, #80]	; 0x50
   82aaa:	9309      	str	r3, [sp, #36]	; 0x24
   82aac:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   82ab0:	464e      	mov	r6, r9
   82ab2:	f898 3000 	ldrb.w	r3, [r8]
   82ab6:	2b00      	cmp	r3, #0
   82ab8:	f000 84c8 	beq.w	8344c <_vfiprintf_r+0xa00>
   82abc:	2b25      	cmp	r3, #37	; 0x25
   82abe:	f000 84c5 	beq.w	8344c <_vfiprintf_r+0xa00>
   82ac2:	f108 0201 	add.w	r2, r8, #1
   82ac6:	e001      	b.n	82acc <_vfiprintf_r+0x80>
   82ac8:	2b25      	cmp	r3, #37	; 0x25
   82aca:	d004      	beq.n	82ad6 <_vfiprintf_r+0x8a>
   82acc:	7813      	ldrb	r3, [r2, #0]
   82ace:	4614      	mov	r4, r2
   82ad0:	3201      	adds	r2, #1
   82ad2:	2b00      	cmp	r3, #0
   82ad4:	d1f8      	bne.n	82ac8 <_vfiprintf_r+0x7c>
   82ad6:	ebc8 0504 	rsb	r5, r8, r4
   82ada:	b195      	cbz	r5, 82b02 <_vfiprintf_r+0xb6>
   82adc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82ade:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82ae0:	3301      	adds	r3, #1
   82ae2:	442a      	add	r2, r5
   82ae4:	2b07      	cmp	r3, #7
   82ae6:	f8c6 8000 	str.w	r8, [r6]
   82aea:	6075      	str	r5, [r6, #4]
   82aec:	9215      	str	r2, [sp, #84]	; 0x54
   82aee:	9314      	str	r3, [sp, #80]	; 0x50
   82af0:	dd7b      	ble.n	82bea <_vfiprintf_r+0x19e>
   82af2:	2a00      	cmp	r2, #0
   82af4:	f040 84d5 	bne.w	834a2 <_vfiprintf_r+0xa56>
   82af8:	9809      	ldr	r0, [sp, #36]	; 0x24
   82afa:	9214      	str	r2, [sp, #80]	; 0x50
   82afc:	4428      	add	r0, r5
   82afe:	464e      	mov	r6, r9
   82b00:	9009      	str	r0, [sp, #36]	; 0x24
   82b02:	7823      	ldrb	r3, [r4, #0]
   82b04:	2b00      	cmp	r3, #0
   82b06:	f000 83ed 	beq.w	832e4 <_vfiprintf_r+0x898>
   82b0a:	2100      	movs	r1, #0
   82b0c:	f04f 0200 	mov.w	r2, #0
   82b10:	f04f 3cff 	mov.w	ip, #4294967295
   82b14:	7863      	ldrb	r3, [r4, #1]
   82b16:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   82b1a:	9104      	str	r1, [sp, #16]
   82b1c:	468a      	mov	sl, r1
   82b1e:	f104 0801 	add.w	r8, r4, #1
   82b22:	4608      	mov	r0, r1
   82b24:	4665      	mov	r5, ip
   82b26:	f108 0801 	add.w	r8, r8, #1
   82b2a:	f1a3 0220 	sub.w	r2, r3, #32
   82b2e:	2a58      	cmp	r2, #88	; 0x58
   82b30:	f200 82d9 	bhi.w	830e6 <_vfiprintf_r+0x69a>
   82b34:	e8df f012 	tbh	[pc, r2, lsl #1]
   82b38:	02d702cb 	.word	0x02d702cb
   82b3c:	02d202d7 	.word	0x02d202d7
   82b40:	02d702d7 	.word	0x02d702d7
   82b44:	02d702d7 	.word	0x02d702d7
   82b48:	02d702d7 	.word	0x02d702d7
   82b4c:	028f0282 	.word	0x028f0282
   82b50:	008402d7 	.word	0x008402d7
   82b54:	02d70293 	.word	0x02d70293
   82b58:	0196012b 	.word	0x0196012b
   82b5c:	01960196 	.word	0x01960196
   82b60:	01960196 	.word	0x01960196
   82b64:	01960196 	.word	0x01960196
   82b68:	01960196 	.word	0x01960196
   82b6c:	02d702d7 	.word	0x02d702d7
   82b70:	02d702d7 	.word	0x02d702d7
   82b74:	02d702d7 	.word	0x02d702d7
   82b78:	02d702d7 	.word	0x02d702d7
   82b7c:	02d702d7 	.word	0x02d702d7
   82b80:	02d70130 	.word	0x02d70130
   82b84:	02d702d7 	.word	0x02d702d7
   82b88:	02d702d7 	.word	0x02d702d7
   82b8c:	02d702d7 	.word	0x02d702d7
   82b90:	02d702d7 	.word	0x02d702d7
   82b94:	017b02d7 	.word	0x017b02d7
   82b98:	02d702d7 	.word	0x02d702d7
   82b9c:	02d702d7 	.word	0x02d702d7
   82ba0:	01a402d7 	.word	0x01a402d7
   82ba4:	02d702d7 	.word	0x02d702d7
   82ba8:	02d701bf 	.word	0x02d701bf
   82bac:	02d702d7 	.word	0x02d702d7
   82bb0:	02d702d7 	.word	0x02d702d7
   82bb4:	02d702d7 	.word	0x02d702d7
   82bb8:	02d702d7 	.word	0x02d702d7
   82bbc:	01e402d7 	.word	0x01e402d7
   82bc0:	02d701fa 	.word	0x02d701fa
   82bc4:	02d702d7 	.word	0x02d702d7
   82bc8:	01fa0216 	.word	0x01fa0216
   82bcc:	02d702d7 	.word	0x02d702d7
   82bd0:	02d7021b 	.word	0x02d7021b
   82bd4:	00890228 	.word	0x00890228
   82bd8:	027d0266 	.word	0x027d0266
   82bdc:	023a02d7 	.word	0x023a02d7
   82be0:	011902d7 	.word	0x011902d7
   82be4:	02d702d7 	.word	0x02d702d7
   82be8:	02af      	.short	0x02af
   82bea:	3608      	adds	r6, #8
   82bec:	9809      	ldr	r0, [sp, #36]	; 0x24
   82bee:	4428      	add	r0, r5
   82bf0:	9009      	str	r0, [sp, #36]	; 0x24
   82bf2:	e786      	b.n	82b02 <_vfiprintf_r+0xb6>
   82bf4:	9806      	ldr	r0, [sp, #24]
   82bf6:	9902      	ldr	r1, [sp, #8]
   82bf8:	f000 fd90 	bl	8371c <__swsetup_r>
   82bfc:	b9b0      	cbnz	r0, 82c2c <_vfiprintf_r+0x1e0>
   82bfe:	9d02      	ldr	r5, [sp, #8]
   82c00:	89aa      	ldrh	r2, [r5, #12]
   82c02:	f002 021a 	and.w	r2, r2, #26
   82c06:	2a0a      	cmp	r2, #10
   82c08:	f47f af49 	bne.w	82a9e <_vfiprintf_r+0x52>
   82c0c:	f8dd b008 	ldr.w	fp, [sp, #8]
   82c10:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82c14:	2b00      	cmp	r3, #0
   82c16:	f6ff af42 	blt.w	82a9e <_vfiprintf_r+0x52>
   82c1a:	9806      	ldr	r0, [sp, #24]
   82c1c:	4659      	mov	r1, fp
   82c1e:	4642      	mov	r2, r8
   82c20:	4623      	mov	r3, r4
   82c22:	f000 fd3d 	bl	836a0 <__sbprintf>
   82c26:	b031      	add	sp, #196	; 0xc4
   82c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c2c:	f04f 30ff 	mov.w	r0, #4294967295
   82c30:	b031      	add	sp, #196	; 0xc4
   82c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c36:	f000 fea3 	bl	83980 <__sinit>
   82c3a:	e714      	b.n	82a66 <_vfiprintf_r+0x1a>
   82c3c:	4240      	negs	r0, r0
   82c3e:	9308      	str	r3, [sp, #32]
   82c40:	f04a 0a04 	orr.w	sl, sl, #4
   82c44:	f898 3000 	ldrb.w	r3, [r8]
   82c48:	e76d      	b.n	82b26 <_vfiprintf_r+0xda>
   82c4a:	f01a 0320 	ands.w	r3, sl, #32
   82c4e:	9004      	str	r0, [sp, #16]
   82c50:	46ac      	mov	ip, r5
   82c52:	f000 80f4 	beq.w	82e3e <_vfiprintf_r+0x3f2>
   82c56:	f8dd b020 	ldr.w	fp, [sp, #32]
   82c5a:	f10b 0307 	add.w	r3, fp, #7
   82c5e:	f023 0307 	bic.w	r3, r3, #7
   82c62:	f103 0408 	add.w	r4, r3, #8
   82c66:	9408      	str	r4, [sp, #32]
   82c68:	e9d3 4500 	ldrd	r4, r5, [r3]
   82c6c:	2300      	movs	r3, #0
   82c6e:	f04f 0000 	mov.w	r0, #0
   82c72:	2100      	movs	r1, #0
   82c74:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   82c78:	f8cd c014 	str.w	ip, [sp, #20]
   82c7c:	9107      	str	r1, [sp, #28]
   82c7e:	f1bc 0f00 	cmp.w	ip, #0
   82c82:	bfa8      	it	ge
   82c84:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82c88:	ea54 0205 	orrs.w	r2, r4, r5
   82c8c:	f040 80ad 	bne.w	82dea <_vfiprintf_r+0x39e>
   82c90:	f1bc 0f00 	cmp.w	ip, #0
   82c94:	f040 80a9 	bne.w	82dea <_vfiprintf_r+0x39e>
   82c98:	2b00      	cmp	r3, #0
   82c9a:	f040 83c0 	bne.w	8341e <_vfiprintf_r+0x9d2>
   82c9e:	f01a 0f01 	tst.w	sl, #1
   82ca2:	f000 83bc 	beq.w	8341e <_vfiprintf_r+0x9d2>
   82ca6:	2330      	movs	r3, #48	; 0x30
   82ca8:	af30      	add	r7, sp, #192	; 0xc0
   82caa:	f807 3d41 	strb.w	r3, [r7, #-65]!
   82cae:	ebc7 0409 	rsb	r4, r7, r9
   82cb2:	9405      	str	r4, [sp, #20]
   82cb4:	f8dd b014 	ldr.w	fp, [sp, #20]
   82cb8:	9c07      	ldr	r4, [sp, #28]
   82cba:	45e3      	cmp	fp, ip
   82cbc:	bfb8      	it	lt
   82cbe:	46e3      	movlt	fp, ip
   82cc0:	f8cd b00c 	str.w	fp, [sp, #12]
   82cc4:	b11c      	cbz	r4, 82cce <_vfiprintf_r+0x282>
   82cc6:	f10b 0b01 	add.w	fp, fp, #1
   82cca:	f8cd b00c 	str.w	fp, [sp, #12]
   82cce:	f01a 0502 	ands.w	r5, sl, #2
   82cd2:	9507      	str	r5, [sp, #28]
   82cd4:	d005      	beq.n	82ce2 <_vfiprintf_r+0x296>
   82cd6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82cda:	f10b 0b02 	add.w	fp, fp, #2
   82cde:	f8cd b00c 	str.w	fp, [sp, #12]
   82ce2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   82ce6:	930b      	str	r3, [sp, #44]	; 0x2c
   82ce8:	f040 821b 	bne.w	83122 <_vfiprintf_r+0x6d6>
   82cec:	9d04      	ldr	r5, [sp, #16]
   82cee:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82cf2:	ebcb 0405 	rsb	r4, fp, r5
   82cf6:	2c00      	cmp	r4, #0
   82cf8:	f340 8213 	ble.w	83122 <_vfiprintf_r+0x6d6>
   82cfc:	2c10      	cmp	r4, #16
   82cfe:	f340 8489 	ble.w	83614 <_vfiprintf_r+0xbc8>
   82d02:	4dbe      	ldr	r5, [pc, #760]	; (82ffc <_vfiprintf_r+0x5b0>)
   82d04:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82d06:	462b      	mov	r3, r5
   82d08:	9814      	ldr	r0, [sp, #80]	; 0x50
   82d0a:	4625      	mov	r5, r4
   82d0c:	f04f 0b10 	mov.w	fp, #16
   82d10:	4664      	mov	r4, ip
   82d12:	46b4      	mov	ip, r6
   82d14:	461e      	mov	r6, r3
   82d16:	e006      	b.n	82d26 <_vfiprintf_r+0x2da>
   82d18:	1c83      	adds	r3, r0, #2
   82d1a:	f10c 0c08 	add.w	ip, ip, #8
   82d1e:	4608      	mov	r0, r1
   82d20:	3d10      	subs	r5, #16
   82d22:	2d10      	cmp	r5, #16
   82d24:	dd11      	ble.n	82d4a <_vfiprintf_r+0x2fe>
   82d26:	1c41      	adds	r1, r0, #1
   82d28:	3210      	adds	r2, #16
   82d2a:	2907      	cmp	r1, #7
   82d2c:	9215      	str	r2, [sp, #84]	; 0x54
   82d2e:	e88c 0840 	stmia.w	ip, {r6, fp}
   82d32:	9114      	str	r1, [sp, #80]	; 0x50
   82d34:	ddf0      	ble.n	82d18 <_vfiprintf_r+0x2cc>
   82d36:	2a00      	cmp	r2, #0
   82d38:	f040 81e6 	bne.w	83108 <_vfiprintf_r+0x6bc>
   82d3c:	3d10      	subs	r5, #16
   82d3e:	2d10      	cmp	r5, #16
   82d40:	f04f 0301 	mov.w	r3, #1
   82d44:	4610      	mov	r0, r2
   82d46:	46cc      	mov	ip, r9
   82d48:	dced      	bgt.n	82d26 <_vfiprintf_r+0x2da>
   82d4a:	4631      	mov	r1, r6
   82d4c:	4666      	mov	r6, ip
   82d4e:	46a4      	mov	ip, r4
   82d50:	462c      	mov	r4, r5
   82d52:	460d      	mov	r5, r1
   82d54:	4422      	add	r2, r4
   82d56:	2b07      	cmp	r3, #7
   82d58:	9215      	str	r2, [sp, #84]	; 0x54
   82d5a:	6035      	str	r5, [r6, #0]
   82d5c:	6074      	str	r4, [r6, #4]
   82d5e:	9314      	str	r3, [sp, #80]	; 0x50
   82d60:	f300 836d 	bgt.w	8343e <_vfiprintf_r+0x9f2>
   82d64:	3608      	adds	r6, #8
   82d66:	1c59      	adds	r1, r3, #1
   82d68:	e1de      	b.n	83128 <_vfiprintf_r+0x6dc>
   82d6a:	f01a 0f20 	tst.w	sl, #32
   82d6e:	9004      	str	r0, [sp, #16]
   82d70:	46ac      	mov	ip, r5
   82d72:	f000 808d 	beq.w	82e90 <_vfiprintf_r+0x444>
   82d76:	9d08      	ldr	r5, [sp, #32]
   82d78:	1deb      	adds	r3, r5, #7
   82d7a:	f023 0307 	bic.w	r3, r3, #7
   82d7e:	f103 0b08 	add.w	fp, r3, #8
   82d82:	e9d3 4500 	ldrd	r4, r5, [r3]
   82d86:	f8cd b020 	str.w	fp, [sp, #32]
   82d8a:	2301      	movs	r3, #1
   82d8c:	e76f      	b.n	82c6e <_vfiprintf_r+0x222>
   82d8e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   82d92:	f898 3000 	ldrb.w	r3, [r8]
   82d96:	e6c6      	b.n	82b26 <_vfiprintf_r+0xda>
   82d98:	f04a 0a10 	orr.w	sl, sl, #16
   82d9c:	f01a 0f20 	tst.w	sl, #32
   82da0:	9004      	str	r0, [sp, #16]
   82da2:	46ac      	mov	ip, r5
   82da4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82da8:	f000 80c8 	beq.w	82f3c <_vfiprintf_r+0x4f0>
   82dac:	9c08      	ldr	r4, [sp, #32]
   82dae:	1de1      	adds	r1, r4, #7
   82db0:	f021 0107 	bic.w	r1, r1, #7
   82db4:	e9d1 2300 	ldrd	r2, r3, [r1]
   82db8:	3108      	adds	r1, #8
   82dba:	9108      	str	r1, [sp, #32]
   82dbc:	4614      	mov	r4, r2
   82dbe:	461d      	mov	r5, r3
   82dc0:	2a00      	cmp	r2, #0
   82dc2:	f173 0b00 	sbcs.w	fp, r3, #0
   82dc6:	f2c0 83ce 	blt.w	83566 <_vfiprintf_r+0xb1a>
   82dca:	f1bc 0f00 	cmp.w	ip, #0
   82dce:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   82dd2:	bfa8      	it	ge
   82dd4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82dd8:	ea54 0205 	orrs.w	r2, r4, r5
   82ddc:	9007      	str	r0, [sp, #28]
   82dde:	f8cd c014 	str.w	ip, [sp, #20]
   82de2:	f04f 0301 	mov.w	r3, #1
   82de6:	f43f af53 	beq.w	82c90 <_vfiprintf_r+0x244>
   82dea:	2b01      	cmp	r3, #1
   82dec:	f000 8319 	beq.w	83422 <_vfiprintf_r+0x9d6>
   82df0:	2b02      	cmp	r3, #2
   82df2:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   82df6:	f040 824c 	bne.w	83292 <_vfiprintf_r+0x846>
   82dfa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   82dfe:	4619      	mov	r1, r3
   82e00:	f004 000f 	and.w	r0, r4, #15
   82e04:	0922      	lsrs	r2, r4, #4
   82e06:	f81b 0000 	ldrb.w	r0, [fp, r0]
   82e0a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   82e0e:	092b      	lsrs	r3, r5, #4
   82e10:	7008      	strb	r0, [r1, #0]
   82e12:	ea52 0003 	orrs.w	r0, r2, r3
   82e16:	460f      	mov	r7, r1
   82e18:	4614      	mov	r4, r2
   82e1a:	461d      	mov	r5, r3
   82e1c:	f101 31ff 	add.w	r1, r1, #4294967295
   82e20:	d1ee      	bne.n	82e00 <_vfiprintf_r+0x3b4>
   82e22:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   82e26:	ebc7 0309 	rsb	r3, r7, r9
   82e2a:	9305      	str	r3, [sp, #20]
   82e2c:	e742      	b.n	82cb4 <_vfiprintf_r+0x268>
   82e2e:	f04a 0a10 	orr.w	sl, sl, #16
   82e32:	f01a 0320 	ands.w	r3, sl, #32
   82e36:	9004      	str	r0, [sp, #16]
   82e38:	46ac      	mov	ip, r5
   82e3a:	f47f af0c 	bne.w	82c56 <_vfiprintf_r+0x20a>
   82e3e:	f01a 0210 	ands.w	r2, sl, #16
   82e42:	f040 8311 	bne.w	83468 <_vfiprintf_r+0xa1c>
   82e46:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   82e4a:	f000 830d 	beq.w	83468 <_vfiprintf_r+0xa1c>
   82e4e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82e52:	4613      	mov	r3, r2
   82e54:	f8bb 4000 	ldrh.w	r4, [fp]
   82e58:	f10b 0b04 	add.w	fp, fp, #4
   82e5c:	2500      	movs	r5, #0
   82e5e:	f8cd b020 	str.w	fp, [sp, #32]
   82e62:	e704      	b.n	82c6e <_vfiprintf_r+0x222>
   82e64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82e68:	2000      	movs	r0, #0
   82e6a:	f818 3b01 	ldrb.w	r3, [r8], #1
   82e6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   82e72:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   82e76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82e7a:	2a09      	cmp	r2, #9
   82e7c:	d9f5      	bls.n	82e6a <_vfiprintf_r+0x41e>
   82e7e:	e654      	b.n	82b2a <_vfiprintf_r+0xde>
   82e80:	f04a 0a10 	orr.w	sl, sl, #16
   82e84:	f01a 0f20 	tst.w	sl, #32
   82e88:	9004      	str	r0, [sp, #16]
   82e8a:	46ac      	mov	ip, r5
   82e8c:	f47f af73 	bne.w	82d76 <_vfiprintf_r+0x32a>
   82e90:	f01a 0f10 	tst.w	sl, #16
   82e94:	f040 82ef 	bne.w	83476 <_vfiprintf_r+0xa2a>
   82e98:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82e9c:	f000 82eb 	beq.w	83476 <_vfiprintf_r+0xa2a>
   82ea0:	f8dd b020 	ldr.w	fp, [sp, #32]
   82ea4:	2500      	movs	r5, #0
   82ea6:	f8bb 4000 	ldrh.w	r4, [fp]
   82eaa:	f10b 0b04 	add.w	fp, fp, #4
   82eae:	2301      	movs	r3, #1
   82eb0:	f8cd b020 	str.w	fp, [sp, #32]
   82eb4:	e6db      	b.n	82c6e <_vfiprintf_r+0x222>
   82eb6:	46ac      	mov	ip, r5
   82eb8:	4d51      	ldr	r5, [pc, #324]	; (83000 <_vfiprintf_r+0x5b4>)
   82eba:	f01a 0f20 	tst.w	sl, #32
   82ebe:	9004      	str	r0, [sp, #16]
   82ec0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82ec4:	950a      	str	r5, [sp, #40]	; 0x28
   82ec6:	f000 80f0 	beq.w	830aa <_vfiprintf_r+0x65e>
   82eca:	9d08      	ldr	r5, [sp, #32]
   82ecc:	1dea      	adds	r2, r5, #7
   82ece:	f022 0207 	bic.w	r2, r2, #7
   82ed2:	f102 0b08 	add.w	fp, r2, #8
   82ed6:	f8cd b020 	str.w	fp, [sp, #32]
   82eda:	e9d2 4500 	ldrd	r4, r5, [r2]
   82ede:	f01a 0f01 	tst.w	sl, #1
   82ee2:	f000 82aa 	beq.w	8343a <_vfiprintf_r+0x9ee>
   82ee6:	ea54 0b05 	orrs.w	fp, r4, r5
   82eea:	f000 82a6 	beq.w	8343a <_vfiprintf_r+0x9ee>
   82eee:	2230      	movs	r2, #48	; 0x30
   82ef0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   82ef4:	f04a 0a02 	orr.w	sl, sl, #2
   82ef8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82efc:	2302      	movs	r3, #2
   82efe:	e6b6      	b.n	82c6e <_vfiprintf_r+0x222>
   82f00:	9b08      	ldr	r3, [sp, #32]
   82f02:	f8dd b020 	ldr.w	fp, [sp, #32]
   82f06:	681b      	ldr	r3, [r3, #0]
   82f08:	2401      	movs	r4, #1
   82f0a:	f04f 0500 	mov.w	r5, #0
   82f0e:	f10b 0b04 	add.w	fp, fp, #4
   82f12:	9004      	str	r0, [sp, #16]
   82f14:	9403      	str	r4, [sp, #12]
   82f16:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82f1a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   82f1e:	f8cd b020 	str.w	fp, [sp, #32]
   82f22:	9405      	str	r4, [sp, #20]
   82f24:	af16      	add	r7, sp, #88	; 0x58
   82f26:	f04f 0c00 	mov.w	ip, #0
   82f2a:	e6d0      	b.n	82cce <_vfiprintf_r+0x282>
   82f2c:	f01a 0f20 	tst.w	sl, #32
   82f30:	9004      	str	r0, [sp, #16]
   82f32:	46ac      	mov	ip, r5
   82f34:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82f38:	f47f af38 	bne.w	82dac <_vfiprintf_r+0x360>
   82f3c:	f01a 0f10 	tst.w	sl, #16
   82f40:	f040 82a7 	bne.w	83492 <_vfiprintf_r+0xa46>
   82f44:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82f48:	f000 82a3 	beq.w	83492 <_vfiprintf_r+0xa46>
   82f4c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82f50:	f9bb 4000 	ldrsh.w	r4, [fp]
   82f54:	f10b 0b04 	add.w	fp, fp, #4
   82f58:	17e5      	asrs	r5, r4, #31
   82f5a:	4622      	mov	r2, r4
   82f5c:	462b      	mov	r3, r5
   82f5e:	f8cd b020 	str.w	fp, [sp, #32]
   82f62:	e72d      	b.n	82dc0 <_vfiprintf_r+0x374>
   82f64:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   82f68:	f898 3000 	ldrb.w	r3, [r8]
   82f6c:	e5db      	b.n	82b26 <_vfiprintf_r+0xda>
   82f6e:	f898 3000 	ldrb.w	r3, [r8]
   82f72:	4642      	mov	r2, r8
   82f74:	2b6c      	cmp	r3, #108	; 0x6c
   82f76:	bf03      	ittte	eq
   82f78:	f108 0801 	addeq.w	r8, r8, #1
   82f7c:	f04a 0a20 	orreq.w	sl, sl, #32
   82f80:	7853      	ldrbeq	r3, [r2, #1]
   82f82:	f04a 0a10 	orrne.w	sl, sl, #16
   82f86:	e5ce      	b.n	82b26 <_vfiprintf_r+0xda>
   82f88:	f01a 0f20 	tst.w	sl, #32
   82f8c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82f90:	f000 82f7 	beq.w	83582 <_vfiprintf_r+0xb36>
   82f94:	9c08      	ldr	r4, [sp, #32]
   82f96:	6821      	ldr	r1, [r4, #0]
   82f98:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82f9a:	17e5      	asrs	r5, r4, #31
   82f9c:	462b      	mov	r3, r5
   82f9e:	9d08      	ldr	r5, [sp, #32]
   82fa0:	4622      	mov	r2, r4
   82fa2:	3504      	adds	r5, #4
   82fa4:	9508      	str	r5, [sp, #32]
   82fa6:	e9c1 2300 	strd	r2, r3, [r1]
   82faa:	e582      	b.n	82ab2 <_vfiprintf_r+0x66>
   82fac:	9c08      	ldr	r4, [sp, #32]
   82fae:	46ac      	mov	ip, r5
   82fb0:	6827      	ldr	r7, [r4, #0]
   82fb2:	f04f 0500 	mov.w	r5, #0
   82fb6:	9004      	str	r0, [sp, #16]
   82fb8:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82fbc:	3404      	adds	r4, #4
   82fbe:	2f00      	cmp	r7, #0
   82fc0:	f000 8332 	beq.w	83628 <_vfiprintf_r+0xbdc>
   82fc4:	f1bc 0f00 	cmp.w	ip, #0
   82fc8:	4638      	mov	r0, r7
   82fca:	f2c0 8307 	blt.w	835dc <_vfiprintf_r+0xb90>
   82fce:	4662      	mov	r2, ip
   82fd0:	2100      	movs	r1, #0
   82fd2:	f8cd c004 	str.w	ip, [sp, #4]
   82fd6:	f001 fbb1 	bl	8473c <memchr>
   82fda:	f8dd c004 	ldr.w	ip, [sp, #4]
   82fde:	2800      	cmp	r0, #0
   82fe0:	f000 833a 	beq.w	83658 <_vfiprintf_r+0xc0c>
   82fe4:	1bc0      	subs	r0, r0, r7
   82fe6:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82fea:	4560      	cmp	r0, ip
   82fec:	bfa8      	it	ge
   82fee:	4660      	movge	r0, ip
   82ff0:	9005      	str	r0, [sp, #20]
   82ff2:	9408      	str	r4, [sp, #32]
   82ff4:	9507      	str	r5, [sp, #28]
   82ff6:	f04f 0c00 	mov.w	ip, #0
   82ffa:	e65b      	b.n	82cb4 <_vfiprintf_r+0x268>
   82ffc:	000857d0 	.word	0x000857d0
   83000:	00085790 	.word	0x00085790
   83004:	9b08      	ldr	r3, [sp, #32]
   83006:	f8dd b020 	ldr.w	fp, [sp, #32]
   8300a:	9004      	str	r0, [sp, #16]
   8300c:	48b2      	ldr	r0, [pc, #712]	; (832d8 <_vfiprintf_r+0x88c>)
   8300e:	681c      	ldr	r4, [r3, #0]
   83010:	2230      	movs	r2, #48	; 0x30
   83012:	2378      	movs	r3, #120	; 0x78
   83014:	f10b 0b04 	add.w	fp, fp, #4
   83018:	46ac      	mov	ip, r5
   8301a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8301e:	f04a 0a02 	orr.w	sl, sl, #2
   83022:	f8cd b020 	str.w	fp, [sp, #32]
   83026:	2500      	movs	r5, #0
   83028:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8302c:	900a      	str	r0, [sp, #40]	; 0x28
   8302e:	2302      	movs	r3, #2
   83030:	e61d      	b.n	82c6e <_vfiprintf_r+0x222>
   83032:	f04a 0a20 	orr.w	sl, sl, #32
   83036:	f898 3000 	ldrb.w	r3, [r8]
   8303a:	e574      	b.n	82b26 <_vfiprintf_r+0xda>
   8303c:	f8dd b020 	ldr.w	fp, [sp, #32]
   83040:	f8db 0000 	ldr.w	r0, [fp]
   83044:	f10b 0304 	add.w	r3, fp, #4
   83048:	2800      	cmp	r0, #0
   8304a:	f6ff adf7 	blt.w	82c3c <_vfiprintf_r+0x1f0>
   8304e:	9308      	str	r3, [sp, #32]
   83050:	f898 3000 	ldrb.w	r3, [r8]
   83054:	e567      	b.n	82b26 <_vfiprintf_r+0xda>
   83056:	f898 3000 	ldrb.w	r3, [r8]
   8305a:	212b      	movs	r1, #43	; 0x2b
   8305c:	e563      	b.n	82b26 <_vfiprintf_r+0xda>
   8305e:	f898 3000 	ldrb.w	r3, [r8]
   83062:	f108 0401 	add.w	r4, r8, #1
   83066:	2b2a      	cmp	r3, #42	; 0x2a
   83068:	f000 8305 	beq.w	83676 <_vfiprintf_r+0xc2a>
   8306c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83070:	2a09      	cmp	r2, #9
   83072:	bf98      	it	ls
   83074:	2500      	movls	r5, #0
   83076:	f200 82fa 	bhi.w	8366e <_vfiprintf_r+0xc22>
   8307a:	f814 3b01 	ldrb.w	r3, [r4], #1
   8307e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   83082:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   83086:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8308a:	2a09      	cmp	r2, #9
   8308c:	d9f5      	bls.n	8307a <_vfiprintf_r+0x62e>
   8308e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   83092:	46a0      	mov	r8, r4
   83094:	e549      	b.n	82b2a <_vfiprintf_r+0xde>
   83096:	4c90      	ldr	r4, [pc, #576]	; (832d8 <_vfiprintf_r+0x88c>)
   83098:	f01a 0f20 	tst.w	sl, #32
   8309c:	9004      	str	r0, [sp, #16]
   8309e:	46ac      	mov	ip, r5
   830a0:	940a      	str	r4, [sp, #40]	; 0x28
   830a2:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   830a6:	f47f af10 	bne.w	82eca <_vfiprintf_r+0x47e>
   830aa:	f01a 0f10 	tst.w	sl, #16
   830ae:	f040 81ea 	bne.w	83486 <_vfiprintf_r+0xa3a>
   830b2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   830b6:	f000 81e6 	beq.w	83486 <_vfiprintf_r+0xa3a>
   830ba:	f8dd b020 	ldr.w	fp, [sp, #32]
   830be:	2500      	movs	r5, #0
   830c0:	f8bb 4000 	ldrh.w	r4, [fp]
   830c4:	f10b 0b04 	add.w	fp, fp, #4
   830c8:	f8cd b020 	str.w	fp, [sp, #32]
   830cc:	e707      	b.n	82ede <_vfiprintf_r+0x492>
   830ce:	f898 3000 	ldrb.w	r3, [r8]
   830d2:	2900      	cmp	r1, #0
   830d4:	f47f ad27 	bne.w	82b26 <_vfiprintf_r+0xda>
   830d8:	2120      	movs	r1, #32
   830da:	e524      	b.n	82b26 <_vfiprintf_r+0xda>
   830dc:	f04a 0a01 	orr.w	sl, sl, #1
   830e0:	f898 3000 	ldrb.w	r3, [r8]
   830e4:	e51f      	b.n	82b26 <_vfiprintf_r+0xda>
   830e6:	9004      	str	r0, [sp, #16]
   830e8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   830ec:	2b00      	cmp	r3, #0
   830ee:	f000 80f9 	beq.w	832e4 <_vfiprintf_r+0x898>
   830f2:	2501      	movs	r5, #1
   830f4:	f04f 0b00 	mov.w	fp, #0
   830f8:	9503      	str	r5, [sp, #12]
   830fa:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   830fe:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   83102:	9505      	str	r5, [sp, #20]
   83104:	af16      	add	r7, sp, #88	; 0x58
   83106:	e70e      	b.n	82f26 <_vfiprintf_r+0x4da>
   83108:	9806      	ldr	r0, [sp, #24]
   8310a:	9902      	ldr	r1, [sp, #8]
   8310c:	aa13      	add	r2, sp, #76	; 0x4c
   8310e:	f7ff fc61 	bl	829d4 <__sprint_r.part.0>
   83112:	2800      	cmp	r0, #0
   83114:	f040 80ed 	bne.w	832f2 <_vfiprintf_r+0x8a6>
   83118:	9814      	ldr	r0, [sp, #80]	; 0x50
   8311a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8311c:	1c43      	adds	r3, r0, #1
   8311e:	46cc      	mov	ip, r9
   83120:	e5fe      	b.n	82d20 <_vfiprintf_r+0x2d4>
   83122:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83124:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83126:	1c59      	adds	r1, r3, #1
   83128:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8312c:	b168      	cbz	r0, 8314a <_vfiprintf_r+0x6fe>
   8312e:	3201      	adds	r2, #1
   83130:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   83134:	2301      	movs	r3, #1
   83136:	2907      	cmp	r1, #7
   83138:	9215      	str	r2, [sp, #84]	; 0x54
   8313a:	9114      	str	r1, [sp, #80]	; 0x50
   8313c:	e886 0009 	stmia.w	r6, {r0, r3}
   83140:	f300 8160 	bgt.w	83404 <_vfiprintf_r+0x9b8>
   83144:	460b      	mov	r3, r1
   83146:	3608      	adds	r6, #8
   83148:	3101      	adds	r1, #1
   8314a:	9c07      	ldr	r4, [sp, #28]
   8314c:	b164      	cbz	r4, 83168 <_vfiprintf_r+0x71c>
   8314e:	3202      	adds	r2, #2
   83150:	a812      	add	r0, sp, #72	; 0x48
   83152:	2302      	movs	r3, #2
   83154:	2907      	cmp	r1, #7
   83156:	9215      	str	r2, [sp, #84]	; 0x54
   83158:	9114      	str	r1, [sp, #80]	; 0x50
   8315a:	e886 0009 	stmia.w	r6, {r0, r3}
   8315e:	f300 8157 	bgt.w	83410 <_vfiprintf_r+0x9c4>
   83162:	460b      	mov	r3, r1
   83164:	3608      	adds	r6, #8
   83166:	3101      	adds	r1, #1
   83168:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8316a:	2d80      	cmp	r5, #128	; 0x80
   8316c:	f000 8101 	beq.w	83372 <_vfiprintf_r+0x926>
   83170:	9d05      	ldr	r5, [sp, #20]
   83172:	ebc5 040c 	rsb	r4, r5, ip
   83176:	2c00      	cmp	r4, #0
   83178:	dd2f      	ble.n	831da <_vfiprintf_r+0x78e>
   8317a:	2c10      	cmp	r4, #16
   8317c:	4d57      	ldr	r5, [pc, #348]	; (832dc <_vfiprintf_r+0x890>)
   8317e:	dd22      	ble.n	831c6 <_vfiprintf_r+0x77a>
   83180:	4630      	mov	r0, r6
   83182:	f04f 0b10 	mov.w	fp, #16
   83186:	462e      	mov	r6, r5
   83188:	4625      	mov	r5, r4
   8318a:	9c06      	ldr	r4, [sp, #24]
   8318c:	e006      	b.n	8319c <_vfiprintf_r+0x750>
   8318e:	f103 0c02 	add.w	ip, r3, #2
   83192:	3008      	adds	r0, #8
   83194:	460b      	mov	r3, r1
   83196:	3d10      	subs	r5, #16
   83198:	2d10      	cmp	r5, #16
   8319a:	dd10      	ble.n	831be <_vfiprintf_r+0x772>
   8319c:	1c59      	adds	r1, r3, #1
   8319e:	3210      	adds	r2, #16
   831a0:	2907      	cmp	r1, #7
   831a2:	9215      	str	r2, [sp, #84]	; 0x54
   831a4:	e880 0840 	stmia.w	r0, {r6, fp}
   831a8:	9114      	str	r1, [sp, #80]	; 0x50
   831aa:	ddf0      	ble.n	8318e <_vfiprintf_r+0x742>
   831ac:	2a00      	cmp	r2, #0
   831ae:	d163      	bne.n	83278 <_vfiprintf_r+0x82c>
   831b0:	3d10      	subs	r5, #16
   831b2:	2d10      	cmp	r5, #16
   831b4:	f04f 0c01 	mov.w	ip, #1
   831b8:	4613      	mov	r3, r2
   831ba:	4648      	mov	r0, r9
   831bc:	dcee      	bgt.n	8319c <_vfiprintf_r+0x750>
   831be:	462c      	mov	r4, r5
   831c0:	4661      	mov	r1, ip
   831c2:	4635      	mov	r5, r6
   831c4:	4606      	mov	r6, r0
   831c6:	4422      	add	r2, r4
   831c8:	2907      	cmp	r1, #7
   831ca:	9215      	str	r2, [sp, #84]	; 0x54
   831cc:	6035      	str	r5, [r6, #0]
   831ce:	6074      	str	r4, [r6, #4]
   831d0:	9114      	str	r1, [sp, #80]	; 0x50
   831d2:	f300 80c1 	bgt.w	83358 <_vfiprintf_r+0x90c>
   831d6:	3608      	adds	r6, #8
   831d8:	3101      	adds	r1, #1
   831da:	9d05      	ldr	r5, [sp, #20]
   831dc:	2907      	cmp	r1, #7
   831de:	442a      	add	r2, r5
   831e0:	9215      	str	r2, [sp, #84]	; 0x54
   831e2:	6037      	str	r7, [r6, #0]
   831e4:	6075      	str	r5, [r6, #4]
   831e6:	9114      	str	r1, [sp, #80]	; 0x50
   831e8:	f340 80c1 	ble.w	8336e <_vfiprintf_r+0x922>
   831ec:	2a00      	cmp	r2, #0
   831ee:	f040 8130 	bne.w	83452 <_vfiprintf_r+0xa06>
   831f2:	9214      	str	r2, [sp, #80]	; 0x50
   831f4:	464e      	mov	r6, r9
   831f6:	f01a 0f04 	tst.w	sl, #4
   831fa:	f000 808b 	beq.w	83314 <_vfiprintf_r+0x8c8>
   831fe:	9d04      	ldr	r5, [sp, #16]
   83200:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83204:	ebcb 0405 	rsb	r4, fp, r5
   83208:	2c00      	cmp	r4, #0
   8320a:	f340 8083 	ble.w	83314 <_vfiprintf_r+0x8c8>
   8320e:	2c10      	cmp	r4, #16
   83210:	f340 821e 	ble.w	83650 <_vfiprintf_r+0xc04>
   83214:	9914      	ldr	r1, [sp, #80]	; 0x50
   83216:	4d32      	ldr	r5, [pc, #200]	; (832e0 <_vfiprintf_r+0x894>)
   83218:	2710      	movs	r7, #16
   8321a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8321e:	f8dd b008 	ldr.w	fp, [sp, #8]
   83222:	e005      	b.n	83230 <_vfiprintf_r+0x7e4>
   83224:	1c88      	adds	r0, r1, #2
   83226:	3608      	adds	r6, #8
   83228:	4619      	mov	r1, r3
   8322a:	3c10      	subs	r4, #16
   8322c:	2c10      	cmp	r4, #16
   8322e:	dd10      	ble.n	83252 <_vfiprintf_r+0x806>
   83230:	1c4b      	adds	r3, r1, #1
   83232:	3210      	adds	r2, #16
   83234:	2b07      	cmp	r3, #7
   83236:	9215      	str	r2, [sp, #84]	; 0x54
   83238:	e886 00a0 	stmia.w	r6, {r5, r7}
   8323c:	9314      	str	r3, [sp, #80]	; 0x50
   8323e:	ddf1      	ble.n	83224 <_vfiprintf_r+0x7d8>
   83240:	2a00      	cmp	r2, #0
   83242:	d17d      	bne.n	83340 <_vfiprintf_r+0x8f4>
   83244:	3c10      	subs	r4, #16
   83246:	2c10      	cmp	r4, #16
   83248:	f04f 0001 	mov.w	r0, #1
   8324c:	4611      	mov	r1, r2
   8324e:	464e      	mov	r6, r9
   83250:	dcee      	bgt.n	83230 <_vfiprintf_r+0x7e4>
   83252:	4422      	add	r2, r4
   83254:	2807      	cmp	r0, #7
   83256:	9215      	str	r2, [sp, #84]	; 0x54
   83258:	6035      	str	r5, [r6, #0]
   8325a:	6074      	str	r4, [r6, #4]
   8325c:	9014      	str	r0, [sp, #80]	; 0x50
   8325e:	dd59      	ble.n	83314 <_vfiprintf_r+0x8c8>
   83260:	2a00      	cmp	r2, #0
   83262:	d14f      	bne.n	83304 <_vfiprintf_r+0x8b8>
   83264:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83266:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8326a:	9d04      	ldr	r5, [sp, #16]
   8326c:	45ab      	cmp	fp, r5
   8326e:	bfac      	ite	ge
   83270:	445c      	addge	r4, fp
   83272:	1964      	addlt	r4, r4, r5
   83274:	9409      	str	r4, [sp, #36]	; 0x24
   83276:	e05e      	b.n	83336 <_vfiprintf_r+0x8ea>
   83278:	4620      	mov	r0, r4
   8327a:	9902      	ldr	r1, [sp, #8]
   8327c:	aa13      	add	r2, sp, #76	; 0x4c
   8327e:	f7ff fba9 	bl	829d4 <__sprint_r.part.0>
   83282:	2800      	cmp	r0, #0
   83284:	d135      	bne.n	832f2 <_vfiprintf_r+0x8a6>
   83286:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83288:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8328a:	f103 0c01 	add.w	ip, r3, #1
   8328e:	4648      	mov	r0, r9
   83290:	e781      	b.n	83196 <_vfiprintf_r+0x74a>
   83292:	08e0      	lsrs	r0, r4, #3
   83294:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   83298:	f004 0207 	and.w	r2, r4, #7
   8329c:	08e9      	lsrs	r1, r5, #3
   8329e:	3230      	adds	r2, #48	; 0x30
   832a0:	ea50 0b01 	orrs.w	fp, r0, r1
   832a4:	461f      	mov	r7, r3
   832a6:	701a      	strb	r2, [r3, #0]
   832a8:	4604      	mov	r4, r0
   832aa:	460d      	mov	r5, r1
   832ac:	f103 33ff 	add.w	r3, r3, #4294967295
   832b0:	d1ef      	bne.n	83292 <_vfiprintf_r+0x846>
   832b2:	f01a 0f01 	tst.w	sl, #1
   832b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   832ba:	4639      	mov	r1, r7
   832bc:	f000 80b9 	beq.w	83432 <_vfiprintf_r+0x9e6>
   832c0:	2a30      	cmp	r2, #48	; 0x30
   832c2:	f43f acf4 	beq.w	82cae <_vfiprintf_r+0x262>
   832c6:	461f      	mov	r7, r3
   832c8:	ebc7 0509 	rsb	r5, r7, r9
   832cc:	2330      	movs	r3, #48	; 0x30
   832ce:	9505      	str	r5, [sp, #20]
   832d0:	f801 3c01 	strb.w	r3, [r1, #-1]
   832d4:	e4ee      	b.n	82cb4 <_vfiprintf_r+0x268>
   832d6:	bf00      	nop
   832d8:	000857a4 	.word	0x000857a4
   832dc:	000857c0 	.word	0x000857c0
   832e0:	000857d0 	.word	0x000857d0
   832e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   832e6:	b123      	cbz	r3, 832f2 <_vfiprintf_r+0x8a6>
   832e8:	9806      	ldr	r0, [sp, #24]
   832ea:	9902      	ldr	r1, [sp, #8]
   832ec:	aa13      	add	r2, sp, #76	; 0x4c
   832ee:	f7ff fb71 	bl	829d4 <__sprint_r.part.0>
   832f2:	9c02      	ldr	r4, [sp, #8]
   832f4:	89a3      	ldrh	r3, [r4, #12]
   832f6:	065b      	lsls	r3, r3, #25
   832f8:	f53f ac98 	bmi.w	82c2c <_vfiprintf_r+0x1e0>
   832fc:	9809      	ldr	r0, [sp, #36]	; 0x24
   832fe:	b031      	add	sp, #196	; 0xc4
   83300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83304:	9806      	ldr	r0, [sp, #24]
   83306:	9902      	ldr	r1, [sp, #8]
   83308:	aa13      	add	r2, sp, #76	; 0x4c
   8330a:	f7ff fb63 	bl	829d4 <__sprint_r.part.0>
   8330e:	2800      	cmp	r0, #0
   83310:	d1ef      	bne.n	832f2 <_vfiprintf_r+0x8a6>
   83312:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83314:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83316:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8331a:	9d04      	ldr	r5, [sp, #16]
   8331c:	45ab      	cmp	fp, r5
   8331e:	bfac      	ite	ge
   83320:	445c      	addge	r4, fp
   83322:	1964      	addlt	r4, r4, r5
   83324:	9409      	str	r4, [sp, #36]	; 0x24
   83326:	b132      	cbz	r2, 83336 <_vfiprintf_r+0x8ea>
   83328:	9806      	ldr	r0, [sp, #24]
   8332a:	9902      	ldr	r1, [sp, #8]
   8332c:	aa13      	add	r2, sp, #76	; 0x4c
   8332e:	f7ff fb51 	bl	829d4 <__sprint_r.part.0>
   83332:	2800      	cmp	r0, #0
   83334:	d1dd      	bne.n	832f2 <_vfiprintf_r+0x8a6>
   83336:	2000      	movs	r0, #0
   83338:	9014      	str	r0, [sp, #80]	; 0x50
   8333a:	464e      	mov	r6, r9
   8333c:	f7ff bbb9 	b.w	82ab2 <_vfiprintf_r+0x66>
   83340:	4650      	mov	r0, sl
   83342:	4659      	mov	r1, fp
   83344:	aa13      	add	r2, sp, #76	; 0x4c
   83346:	f7ff fb45 	bl	829d4 <__sprint_r.part.0>
   8334a:	2800      	cmp	r0, #0
   8334c:	d1d1      	bne.n	832f2 <_vfiprintf_r+0x8a6>
   8334e:	9914      	ldr	r1, [sp, #80]	; 0x50
   83350:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83352:	1c48      	adds	r0, r1, #1
   83354:	464e      	mov	r6, r9
   83356:	e768      	b.n	8322a <_vfiprintf_r+0x7de>
   83358:	2a00      	cmp	r2, #0
   8335a:	f040 80f7 	bne.w	8354c <_vfiprintf_r+0xb00>
   8335e:	9c05      	ldr	r4, [sp, #20]
   83360:	2301      	movs	r3, #1
   83362:	9720      	str	r7, [sp, #128]	; 0x80
   83364:	9421      	str	r4, [sp, #132]	; 0x84
   83366:	9415      	str	r4, [sp, #84]	; 0x54
   83368:	4622      	mov	r2, r4
   8336a:	9314      	str	r3, [sp, #80]	; 0x50
   8336c:	464e      	mov	r6, r9
   8336e:	3608      	adds	r6, #8
   83370:	e741      	b.n	831f6 <_vfiprintf_r+0x7aa>
   83372:	9d04      	ldr	r5, [sp, #16]
   83374:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83378:	ebcb 0405 	rsb	r4, fp, r5
   8337c:	2c00      	cmp	r4, #0
   8337e:	f77f aef7 	ble.w	83170 <_vfiprintf_r+0x724>
   83382:	2c10      	cmp	r4, #16
   83384:	4da6      	ldr	r5, [pc, #664]	; (83620 <_vfiprintf_r+0xbd4>)
   83386:	f340 8170 	ble.w	8366a <_vfiprintf_r+0xc1e>
   8338a:	4629      	mov	r1, r5
   8338c:	f04f 0b10 	mov.w	fp, #16
   83390:	4625      	mov	r5, r4
   83392:	4664      	mov	r4, ip
   83394:	46b4      	mov	ip, r6
   83396:	460e      	mov	r6, r1
   83398:	e006      	b.n	833a8 <_vfiprintf_r+0x95c>
   8339a:	1c98      	adds	r0, r3, #2
   8339c:	f10c 0c08 	add.w	ip, ip, #8
   833a0:	460b      	mov	r3, r1
   833a2:	3d10      	subs	r5, #16
   833a4:	2d10      	cmp	r5, #16
   833a6:	dd0f      	ble.n	833c8 <_vfiprintf_r+0x97c>
   833a8:	1c59      	adds	r1, r3, #1
   833aa:	3210      	adds	r2, #16
   833ac:	2907      	cmp	r1, #7
   833ae:	9215      	str	r2, [sp, #84]	; 0x54
   833b0:	e88c 0840 	stmia.w	ip, {r6, fp}
   833b4:	9114      	str	r1, [sp, #80]	; 0x50
   833b6:	ddf0      	ble.n	8339a <_vfiprintf_r+0x94e>
   833b8:	b9ba      	cbnz	r2, 833ea <_vfiprintf_r+0x99e>
   833ba:	3d10      	subs	r5, #16
   833bc:	2d10      	cmp	r5, #16
   833be:	f04f 0001 	mov.w	r0, #1
   833c2:	4613      	mov	r3, r2
   833c4:	46cc      	mov	ip, r9
   833c6:	dcef      	bgt.n	833a8 <_vfiprintf_r+0x95c>
   833c8:	4633      	mov	r3, r6
   833ca:	4666      	mov	r6, ip
   833cc:	46a4      	mov	ip, r4
   833ce:	462c      	mov	r4, r5
   833d0:	461d      	mov	r5, r3
   833d2:	4422      	add	r2, r4
   833d4:	2807      	cmp	r0, #7
   833d6:	9215      	str	r2, [sp, #84]	; 0x54
   833d8:	6035      	str	r5, [r6, #0]
   833da:	6074      	str	r4, [r6, #4]
   833dc:	9014      	str	r0, [sp, #80]	; 0x50
   833de:	f300 80af 	bgt.w	83540 <_vfiprintf_r+0xaf4>
   833e2:	3608      	adds	r6, #8
   833e4:	1c41      	adds	r1, r0, #1
   833e6:	4603      	mov	r3, r0
   833e8:	e6c2      	b.n	83170 <_vfiprintf_r+0x724>
   833ea:	9806      	ldr	r0, [sp, #24]
   833ec:	9902      	ldr	r1, [sp, #8]
   833ee:	aa13      	add	r2, sp, #76	; 0x4c
   833f0:	f7ff faf0 	bl	829d4 <__sprint_r.part.0>
   833f4:	2800      	cmp	r0, #0
   833f6:	f47f af7c 	bne.w	832f2 <_vfiprintf_r+0x8a6>
   833fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   833fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   833fe:	1c58      	adds	r0, r3, #1
   83400:	46cc      	mov	ip, r9
   83402:	e7ce      	b.n	833a2 <_vfiprintf_r+0x956>
   83404:	2a00      	cmp	r2, #0
   83406:	d179      	bne.n	834fc <_vfiprintf_r+0xab0>
   83408:	4619      	mov	r1, r3
   8340a:	464e      	mov	r6, r9
   8340c:	4613      	mov	r3, r2
   8340e:	e69c      	b.n	8314a <_vfiprintf_r+0x6fe>
   83410:	2a00      	cmp	r2, #0
   83412:	f040 8084 	bne.w	8351e <_vfiprintf_r+0xad2>
   83416:	2101      	movs	r1, #1
   83418:	4613      	mov	r3, r2
   8341a:	464e      	mov	r6, r9
   8341c:	e6a4      	b.n	83168 <_vfiprintf_r+0x71c>
   8341e:	464f      	mov	r7, r9
   83420:	e448      	b.n	82cb4 <_vfiprintf_r+0x268>
   83422:	2d00      	cmp	r5, #0
   83424:	bf08      	it	eq
   83426:	2c0a      	cmpeq	r4, #10
   83428:	d246      	bcs.n	834b8 <_vfiprintf_r+0xa6c>
   8342a:	3430      	adds	r4, #48	; 0x30
   8342c:	af30      	add	r7, sp, #192	; 0xc0
   8342e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   83432:	ebc7 0309 	rsb	r3, r7, r9
   83436:	9305      	str	r3, [sp, #20]
   83438:	e43c      	b.n	82cb4 <_vfiprintf_r+0x268>
   8343a:	2302      	movs	r3, #2
   8343c:	e417      	b.n	82c6e <_vfiprintf_r+0x222>
   8343e:	2a00      	cmp	r2, #0
   83440:	f040 80af 	bne.w	835a2 <_vfiprintf_r+0xb56>
   83444:	4613      	mov	r3, r2
   83446:	2101      	movs	r1, #1
   83448:	464e      	mov	r6, r9
   8344a:	e66d      	b.n	83128 <_vfiprintf_r+0x6dc>
   8344c:	4644      	mov	r4, r8
   8344e:	f7ff bb58 	b.w	82b02 <_vfiprintf_r+0xb6>
   83452:	9806      	ldr	r0, [sp, #24]
   83454:	9902      	ldr	r1, [sp, #8]
   83456:	aa13      	add	r2, sp, #76	; 0x4c
   83458:	f7ff fabc 	bl	829d4 <__sprint_r.part.0>
   8345c:	2800      	cmp	r0, #0
   8345e:	f47f af48 	bne.w	832f2 <_vfiprintf_r+0x8a6>
   83462:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83464:	464e      	mov	r6, r9
   83466:	e6c6      	b.n	831f6 <_vfiprintf_r+0x7aa>
   83468:	9d08      	ldr	r5, [sp, #32]
   8346a:	682c      	ldr	r4, [r5, #0]
   8346c:	3504      	adds	r5, #4
   8346e:	9508      	str	r5, [sp, #32]
   83470:	2500      	movs	r5, #0
   83472:	f7ff bbfc 	b.w	82c6e <_vfiprintf_r+0x222>
   83476:	9d08      	ldr	r5, [sp, #32]
   83478:	2301      	movs	r3, #1
   8347a:	682c      	ldr	r4, [r5, #0]
   8347c:	3504      	adds	r5, #4
   8347e:	9508      	str	r5, [sp, #32]
   83480:	2500      	movs	r5, #0
   83482:	f7ff bbf4 	b.w	82c6e <_vfiprintf_r+0x222>
   83486:	9d08      	ldr	r5, [sp, #32]
   83488:	682c      	ldr	r4, [r5, #0]
   8348a:	3504      	adds	r5, #4
   8348c:	9508      	str	r5, [sp, #32]
   8348e:	2500      	movs	r5, #0
   83490:	e525      	b.n	82ede <_vfiprintf_r+0x492>
   83492:	9d08      	ldr	r5, [sp, #32]
   83494:	682c      	ldr	r4, [r5, #0]
   83496:	3504      	adds	r5, #4
   83498:	9508      	str	r5, [sp, #32]
   8349a:	17e5      	asrs	r5, r4, #31
   8349c:	4622      	mov	r2, r4
   8349e:	462b      	mov	r3, r5
   834a0:	e48e      	b.n	82dc0 <_vfiprintf_r+0x374>
   834a2:	9806      	ldr	r0, [sp, #24]
   834a4:	9902      	ldr	r1, [sp, #8]
   834a6:	aa13      	add	r2, sp, #76	; 0x4c
   834a8:	f7ff fa94 	bl	829d4 <__sprint_r.part.0>
   834ac:	2800      	cmp	r0, #0
   834ae:	f47f af20 	bne.w	832f2 <_vfiprintf_r+0x8a6>
   834b2:	464e      	mov	r6, r9
   834b4:	f7ff bb9a 	b.w	82bec <_vfiprintf_r+0x1a0>
   834b8:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   834bc:	9603      	str	r6, [sp, #12]
   834be:	465e      	mov	r6, fp
   834c0:	46e3      	mov	fp, ip
   834c2:	4620      	mov	r0, r4
   834c4:	4629      	mov	r1, r5
   834c6:	220a      	movs	r2, #10
   834c8:	2300      	movs	r3, #0
   834ca:	f001 fe2f 	bl	8512c <__aeabi_uldivmod>
   834ce:	3230      	adds	r2, #48	; 0x30
   834d0:	7032      	strb	r2, [r6, #0]
   834d2:	4620      	mov	r0, r4
   834d4:	4629      	mov	r1, r5
   834d6:	220a      	movs	r2, #10
   834d8:	2300      	movs	r3, #0
   834da:	f001 fe27 	bl	8512c <__aeabi_uldivmod>
   834de:	4604      	mov	r4, r0
   834e0:	460d      	mov	r5, r1
   834e2:	ea54 0005 	orrs.w	r0, r4, r5
   834e6:	4637      	mov	r7, r6
   834e8:	f106 36ff 	add.w	r6, r6, #4294967295
   834ec:	d1e9      	bne.n	834c2 <_vfiprintf_r+0xa76>
   834ee:	ebc7 0309 	rsb	r3, r7, r9
   834f2:	46dc      	mov	ip, fp
   834f4:	9e03      	ldr	r6, [sp, #12]
   834f6:	9305      	str	r3, [sp, #20]
   834f8:	f7ff bbdc 	b.w	82cb4 <_vfiprintf_r+0x268>
   834fc:	9806      	ldr	r0, [sp, #24]
   834fe:	9902      	ldr	r1, [sp, #8]
   83500:	aa13      	add	r2, sp, #76	; 0x4c
   83502:	f8cd c004 	str.w	ip, [sp, #4]
   83506:	f7ff fa65 	bl	829d4 <__sprint_r.part.0>
   8350a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8350e:	2800      	cmp	r0, #0
   83510:	f47f aeef 	bne.w	832f2 <_vfiprintf_r+0x8a6>
   83514:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83516:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83518:	1c59      	adds	r1, r3, #1
   8351a:	464e      	mov	r6, r9
   8351c:	e615      	b.n	8314a <_vfiprintf_r+0x6fe>
   8351e:	9806      	ldr	r0, [sp, #24]
   83520:	9902      	ldr	r1, [sp, #8]
   83522:	aa13      	add	r2, sp, #76	; 0x4c
   83524:	f8cd c004 	str.w	ip, [sp, #4]
   83528:	f7ff fa54 	bl	829d4 <__sprint_r.part.0>
   8352c:	f8dd c004 	ldr.w	ip, [sp, #4]
   83530:	2800      	cmp	r0, #0
   83532:	f47f aede 	bne.w	832f2 <_vfiprintf_r+0x8a6>
   83536:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83538:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8353a:	1c59      	adds	r1, r3, #1
   8353c:	464e      	mov	r6, r9
   8353e:	e613      	b.n	83168 <_vfiprintf_r+0x71c>
   83540:	2a00      	cmp	r2, #0
   83542:	d156      	bne.n	835f2 <_vfiprintf_r+0xba6>
   83544:	2101      	movs	r1, #1
   83546:	4613      	mov	r3, r2
   83548:	464e      	mov	r6, r9
   8354a:	e611      	b.n	83170 <_vfiprintf_r+0x724>
   8354c:	9806      	ldr	r0, [sp, #24]
   8354e:	9902      	ldr	r1, [sp, #8]
   83550:	aa13      	add	r2, sp, #76	; 0x4c
   83552:	f7ff fa3f 	bl	829d4 <__sprint_r.part.0>
   83556:	2800      	cmp	r0, #0
   83558:	f47f aecb 	bne.w	832f2 <_vfiprintf_r+0x8a6>
   8355c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8355e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83560:	3101      	adds	r1, #1
   83562:	464e      	mov	r6, r9
   83564:	e639      	b.n	831da <_vfiprintf_r+0x78e>
   83566:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8356a:	4264      	negs	r4, r4
   8356c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   83570:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   83574:	f8cd b01c 	str.w	fp, [sp, #28]
   83578:	f8cd c014 	str.w	ip, [sp, #20]
   8357c:	2301      	movs	r3, #1
   8357e:	f7ff bb7e 	b.w	82c7e <_vfiprintf_r+0x232>
   83582:	f01a 0f10 	tst.w	sl, #16
   83586:	d11d      	bne.n	835c4 <_vfiprintf_r+0xb78>
   83588:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8358c:	d058      	beq.n	83640 <_vfiprintf_r+0xbf4>
   8358e:	9d08      	ldr	r5, [sp, #32]
   83590:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   83594:	682b      	ldr	r3, [r5, #0]
   83596:	3504      	adds	r5, #4
   83598:	9508      	str	r5, [sp, #32]
   8359a:	f8a3 b000 	strh.w	fp, [r3]
   8359e:	f7ff ba88 	b.w	82ab2 <_vfiprintf_r+0x66>
   835a2:	9806      	ldr	r0, [sp, #24]
   835a4:	9902      	ldr	r1, [sp, #8]
   835a6:	aa13      	add	r2, sp, #76	; 0x4c
   835a8:	f8cd c004 	str.w	ip, [sp, #4]
   835ac:	f7ff fa12 	bl	829d4 <__sprint_r.part.0>
   835b0:	f8dd c004 	ldr.w	ip, [sp, #4]
   835b4:	2800      	cmp	r0, #0
   835b6:	f47f ae9c 	bne.w	832f2 <_vfiprintf_r+0x8a6>
   835ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   835bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   835be:	1c59      	adds	r1, r3, #1
   835c0:	464e      	mov	r6, r9
   835c2:	e5b1      	b.n	83128 <_vfiprintf_r+0x6dc>
   835c4:	f8dd b020 	ldr.w	fp, [sp, #32]
   835c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   835ca:	f8db 3000 	ldr.w	r3, [fp]
   835ce:	f10b 0b04 	add.w	fp, fp, #4
   835d2:	f8cd b020 	str.w	fp, [sp, #32]
   835d6:	601c      	str	r4, [r3, #0]
   835d8:	f7ff ba6b 	b.w	82ab2 <_vfiprintf_r+0x66>
   835dc:	9408      	str	r4, [sp, #32]
   835de:	f7ff f9c9 	bl	82974 <strlen>
   835e2:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   835e6:	9005      	str	r0, [sp, #20]
   835e8:	9407      	str	r4, [sp, #28]
   835ea:	f04f 0c00 	mov.w	ip, #0
   835ee:	f7ff bb61 	b.w	82cb4 <_vfiprintf_r+0x268>
   835f2:	9806      	ldr	r0, [sp, #24]
   835f4:	9902      	ldr	r1, [sp, #8]
   835f6:	aa13      	add	r2, sp, #76	; 0x4c
   835f8:	f8cd c004 	str.w	ip, [sp, #4]
   835fc:	f7ff f9ea 	bl	829d4 <__sprint_r.part.0>
   83600:	f8dd c004 	ldr.w	ip, [sp, #4]
   83604:	2800      	cmp	r0, #0
   83606:	f47f ae74 	bne.w	832f2 <_vfiprintf_r+0x8a6>
   8360a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8360c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8360e:	1c59      	adds	r1, r3, #1
   83610:	464e      	mov	r6, r9
   83612:	e5ad      	b.n	83170 <_vfiprintf_r+0x724>
   83614:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83616:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83618:	3301      	adds	r3, #1
   8361a:	4d02      	ldr	r5, [pc, #8]	; (83624 <_vfiprintf_r+0xbd8>)
   8361c:	f7ff bb9a 	b.w	82d54 <_vfiprintf_r+0x308>
   83620:	000857c0 	.word	0x000857c0
   83624:	000857d0 	.word	0x000857d0
   83628:	f1bc 0f06 	cmp.w	ip, #6
   8362c:	bf34      	ite	cc
   8362e:	4663      	movcc	r3, ip
   83630:	2306      	movcs	r3, #6
   83632:	9408      	str	r4, [sp, #32]
   83634:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   83638:	9305      	str	r3, [sp, #20]
   8363a:	9403      	str	r4, [sp, #12]
   8363c:	4f16      	ldr	r7, [pc, #88]	; (83698 <_vfiprintf_r+0xc4c>)
   8363e:	e472      	b.n	82f26 <_vfiprintf_r+0x4da>
   83640:	9c08      	ldr	r4, [sp, #32]
   83642:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83644:	6823      	ldr	r3, [r4, #0]
   83646:	3404      	adds	r4, #4
   83648:	9408      	str	r4, [sp, #32]
   8364a:	601d      	str	r5, [r3, #0]
   8364c:	f7ff ba31 	b.w	82ab2 <_vfiprintf_r+0x66>
   83650:	9814      	ldr	r0, [sp, #80]	; 0x50
   83652:	4d12      	ldr	r5, [pc, #72]	; (8369c <_vfiprintf_r+0xc50>)
   83654:	3001      	adds	r0, #1
   83656:	e5fc      	b.n	83252 <_vfiprintf_r+0x806>
   83658:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8365c:	f8cd c014 	str.w	ip, [sp, #20]
   83660:	9507      	str	r5, [sp, #28]
   83662:	9408      	str	r4, [sp, #32]
   83664:	4684      	mov	ip, r0
   83666:	f7ff bb25 	b.w	82cb4 <_vfiprintf_r+0x268>
   8366a:	4608      	mov	r0, r1
   8366c:	e6b1      	b.n	833d2 <_vfiprintf_r+0x986>
   8366e:	46a0      	mov	r8, r4
   83670:	2500      	movs	r5, #0
   83672:	f7ff ba5a 	b.w	82b2a <_vfiprintf_r+0xde>
   83676:	f8dd b020 	ldr.w	fp, [sp, #32]
   8367a:	f898 3001 	ldrb.w	r3, [r8, #1]
   8367e:	f8db 5000 	ldr.w	r5, [fp]
   83682:	f10b 0204 	add.w	r2, fp, #4
   83686:	2d00      	cmp	r5, #0
   83688:	9208      	str	r2, [sp, #32]
   8368a:	46a0      	mov	r8, r4
   8368c:	f6bf aa4b 	bge.w	82b26 <_vfiprintf_r+0xda>
   83690:	f04f 35ff 	mov.w	r5, #4294967295
   83694:	f7ff ba47 	b.w	82b26 <_vfiprintf_r+0xda>
   83698:	000857b8 	.word	0x000857b8
   8369c:	000857d0 	.word	0x000857d0

000836a0 <__sbprintf>:
   836a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   836a4:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   836a6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   836aa:	4688      	mov	r8, r1
   836ac:	9719      	str	r7, [sp, #100]	; 0x64
   836ae:	f8d8 701c 	ldr.w	r7, [r8, #28]
   836b2:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   836b6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   836ba:	9707      	str	r7, [sp, #28]
   836bc:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   836c0:	ac1a      	add	r4, sp, #104	; 0x68
   836c2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   836c6:	f02a 0a02 	bic.w	sl, sl, #2
   836ca:	2600      	movs	r6, #0
   836cc:	4669      	mov	r1, sp
   836ce:	9400      	str	r4, [sp, #0]
   836d0:	9404      	str	r4, [sp, #16]
   836d2:	9502      	str	r5, [sp, #8]
   836d4:	9505      	str	r5, [sp, #20]
   836d6:	f8ad a00c 	strh.w	sl, [sp, #12]
   836da:	f8ad 900e 	strh.w	r9, [sp, #14]
   836de:	9709      	str	r7, [sp, #36]	; 0x24
   836e0:	9606      	str	r6, [sp, #24]
   836e2:	4605      	mov	r5, r0
   836e4:	f7ff f9b2 	bl	82a4c <_vfiprintf_r>
   836e8:	1e04      	subs	r4, r0, #0
   836ea:	db07      	blt.n	836fc <__sbprintf+0x5c>
   836ec:	4628      	mov	r0, r5
   836ee:	4669      	mov	r1, sp
   836f0:	f000 f92a 	bl	83948 <_fflush_r>
   836f4:	42b0      	cmp	r0, r6
   836f6:	bf18      	it	ne
   836f8:	f04f 34ff 	movne.w	r4, #4294967295
   836fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   83700:	065b      	lsls	r3, r3, #25
   83702:	d505      	bpl.n	83710 <__sbprintf+0x70>
   83704:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   83708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8370c:	f8a8 300c 	strh.w	r3, [r8, #12]
   83710:	4620      	mov	r0, r4
   83712:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   83716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8371a:	bf00      	nop

0008371c <__swsetup_r>:
   8371c:	4b2f      	ldr	r3, [pc, #188]	; (837dc <__swsetup_r+0xc0>)
   8371e:	b570      	push	{r4, r5, r6, lr}
   83720:	4606      	mov	r6, r0
   83722:	6818      	ldr	r0, [r3, #0]
   83724:	460c      	mov	r4, r1
   83726:	b110      	cbz	r0, 8372e <__swsetup_r+0x12>
   83728:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8372a:	2a00      	cmp	r2, #0
   8372c:	d036      	beq.n	8379c <__swsetup_r+0x80>
   8372e:	89a5      	ldrh	r5, [r4, #12]
   83730:	b2ab      	uxth	r3, r5
   83732:	0719      	lsls	r1, r3, #28
   83734:	d50c      	bpl.n	83750 <__swsetup_r+0x34>
   83736:	6922      	ldr	r2, [r4, #16]
   83738:	b1aa      	cbz	r2, 83766 <__swsetup_r+0x4a>
   8373a:	f013 0101 	ands.w	r1, r3, #1
   8373e:	d01e      	beq.n	8377e <__swsetup_r+0x62>
   83740:	6963      	ldr	r3, [r4, #20]
   83742:	2100      	movs	r1, #0
   83744:	425b      	negs	r3, r3
   83746:	61a3      	str	r3, [r4, #24]
   83748:	60a1      	str	r1, [r4, #8]
   8374a:	b1f2      	cbz	r2, 8378a <__swsetup_r+0x6e>
   8374c:	2000      	movs	r0, #0
   8374e:	bd70      	pop	{r4, r5, r6, pc}
   83750:	06da      	lsls	r2, r3, #27
   83752:	d53a      	bpl.n	837ca <__swsetup_r+0xae>
   83754:	075b      	lsls	r3, r3, #29
   83756:	d424      	bmi.n	837a2 <__swsetup_r+0x86>
   83758:	6922      	ldr	r2, [r4, #16]
   8375a:	f045 0308 	orr.w	r3, r5, #8
   8375e:	81a3      	strh	r3, [r4, #12]
   83760:	b29b      	uxth	r3, r3
   83762:	2a00      	cmp	r2, #0
   83764:	d1e9      	bne.n	8373a <__swsetup_r+0x1e>
   83766:	f403 7120 	and.w	r1, r3, #640	; 0x280
   8376a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8376e:	d0e4      	beq.n	8373a <__swsetup_r+0x1e>
   83770:	4630      	mov	r0, r6
   83772:	4621      	mov	r1, r4
   83774:	f000 fcce 	bl	84114 <__smakebuf_r>
   83778:	89a3      	ldrh	r3, [r4, #12]
   8377a:	6922      	ldr	r2, [r4, #16]
   8377c:	e7dd      	b.n	8373a <__swsetup_r+0x1e>
   8377e:	0798      	lsls	r0, r3, #30
   83780:	bf58      	it	pl
   83782:	6961      	ldrpl	r1, [r4, #20]
   83784:	60a1      	str	r1, [r4, #8]
   83786:	2a00      	cmp	r2, #0
   83788:	d1e0      	bne.n	8374c <__swsetup_r+0x30>
   8378a:	89a3      	ldrh	r3, [r4, #12]
   8378c:	061a      	lsls	r2, r3, #24
   8378e:	d5dd      	bpl.n	8374c <__swsetup_r+0x30>
   83790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83794:	81a3      	strh	r3, [r4, #12]
   83796:	f04f 30ff 	mov.w	r0, #4294967295
   8379a:	bd70      	pop	{r4, r5, r6, pc}
   8379c:	f000 f8f0 	bl	83980 <__sinit>
   837a0:	e7c5      	b.n	8372e <__swsetup_r+0x12>
   837a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   837a4:	b149      	cbz	r1, 837ba <__swsetup_r+0x9e>
   837a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   837aa:	4299      	cmp	r1, r3
   837ac:	d003      	beq.n	837b6 <__swsetup_r+0x9a>
   837ae:	4630      	mov	r0, r6
   837b0:	f000 fa2a 	bl	83c08 <_free_r>
   837b4:	89a5      	ldrh	r5, [r4, #12]
   837b6:	2300      	movs	r3, #0
   837b8:	6323      	str	r3, [r4, #48]	; 0x30
   837ba:	6922      	ldr	r2, [r4, #16]
   837bc:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   837c0:	2100      	movs	r1, #0
   837c2:	b2ad      	uxth	r5, r5
   837c4:	6022      	str	r2, [r4, #0]
   837c6:	6061      	str	r1, [r4, #4]
   837c8:	e7c7      	b.n	8375a <__swsetup_r+0x3e>
   837ca:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   837ce:	2309      	movs	r3, #9
   837d0:	6033      	str	r3, [r6, #0]
   837d2:	f04f 30ff 	mov.w	r0, #4294967295
   837d6:	81a5      	strh	r5, [r4, #12]
   837d8:	bd70      	pop	{r4, r5, r6, pc}
   837da:	bf00      	nop
   837dc:	20070570 	.word	0x20070570

000837e0 <register_fini>:
   837e0:	4b02      	ldr	r3, [pc, #8]	; (837ec <register_fini+0xc>)
   837e2:	b113      	cbz	r3, 837ea <register_fini+0xa>
   837e4:	4802      	ldr	r0, [pc, #8]	; (837f0 <register_fini+0x10>)
   837e6:	f000 b805 	b.w	837f4 <atexit>
   837ea:	4770      	bx	lr
   837ec:	00000000 	.word	0x00000000
   837f0:	00083a7d 	.word	0x00083a7d

000837f4 <atexit>:
   837f4:	4601      	mov	r1, r0
   837f6:	2000      	movs	r0, #0
   837f8:	4602      	mov	r2, r0
   837fa:	4603      	mov	r3, r0
   837fc:	f001 bb9a 	b.w	84f34 <__register_exitproc>

00083800 <__sflush_r>:
   83800:	898b      	ldrh	r3, [r1, #12]
   83802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83806:	b29a      	uxth	r2, r3
   83808:	460d      	mov	r5, r1
   8380a:	0711      	lsls	r1, r2, #28
   8380c:	4680      	mov	r8, r0
   8380e:	d43c      	bmi.n	8388a <__sflush_r+0x8a>
   83810:	686a      	ldr	r2, [r5, #4]
   83812:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83816:	2a00      	cmp	r2, #0
   83818:	81ab      	strh	r3, [r5, #12]
   8381a:	dd59      	ble.n	838d0 <__sflush_r+0xd0>
   8381c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8381e:	2c00      	cmp	r4, #0
   83820:	d04b      	beq.n	838ba <__sflush_r+0xba>
   83822:	b29b      	uxth	r3, r3
   83824:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   83828:	2100      	movs	r1, #0
   8382a:	b292      	uxth	r2, r2
   8382c:	f8d8 6000 	ldr.w	r6, [r8]
   83830:	f8c8 1000 	str.w	r1, [r8]
   83834:	2a00      	cmp	r2, #0
   83836:	d04f      	beq.n	838d8 <__sflush_r+0xd8>
   83838:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8383a:	075f      	lsls	r7, r3, #29
   8383c:	d505      	bpl.n	8384a <__sflush_r+0x4a>
   8383e:	6869      	ldr	r1, [r5, #4]
   83840:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83842:	1a52      	subs	r2, r2, r1
   83844:	b10b      	cbz	r3, 8384a <__sflush_r+0x4a>
   83846:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83848:	1ad2      	subs	r2, r2, r3
   8384a:	4640      	mov	r0, r8
   8384c:	69e9      	ldr	r1, [r5, #28]
   8384e:	2300      	movs	r3, #0
   83850:	47a0      	blx	r4
   83852:	1c44      	adds	r4, r0, #1
   83854:	d04a      	beq.n	838ec <__sflush_r+0xec>
   83856:	89ab      	ldrh	r3, [r5, #12]
   83858:	692a      	ldr	r2, [r5, #16]
   8385a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8385e:	b29b      	uxth	r3, r3
   83860:	2100      	movs	r1, #0
   83862:	602a      	str	r2, [r5, #0]
   83864:	04da      	lsls	r2, r3, #19
   83866:	81ab      	strh	r3, [r5, #12]
   83868:	6069      	str	r1, [r5, #4]
   8386a:	d44c      	bmi.n	83906 <__sflush_r+0x106>
   8386c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8386e:	f8c8 6000 	str.w	r6, [r8]
   83872:	b311      	cbz	r1, 838ba <__sflush_r+0xba>
   83874:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83878:	4299      	cmp	r1, r3
   8387a:	d002      	beq.n	83882 <__sflush_r+0x82>
   8387c:	4640      	mov	r0, r8
   8387e:	f000 f9c3 	bl	83c08 <_free_r>
   83882:	2000      	movs	r0, #0
   83884:	6328      	str	r0, [r5, #48]	; 0x30
   83886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8388a:	692e      	ldr	r6, [r5, #16]
   8388c:	b1ae      	cbz	r6, 838ba <__sflush_r+0xba>
   8388e:	0791      	lsls	r1, r2, #30
   83890:	682c      	ldr	r4, [r5, #0]
   83892:	bf0c      	ite	eq
   83894:	696b      	ldreq	r3, [r5, #20]
   83896:	2300      	movne	r3, #0
   83898:	602e      	str	r6, [r5, #0]
   8389a:	1ba4      	subs	r4, r4, r6
   8389c:	60ab      	str	r3, [r5, #8]
   8389e:	e00a      	b.n	838b6 <__sflush_r+0xb6>
   838a0:	4632      	mov	r2, r6
   838a2:	4623      	mov	r3, r4
   838a4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   838a6:	4640      	mov	r0, r8
   838a8:	69e9      	ldr	r1, [r5, #28]
   838aa:	47b8      	blx	r7
   838ac:	2800      	cmp	r0, #0
   838ae:	ebc0 0404 	rsb	r4, r0, r4
   838b2:	4406      	add	r6, r0
   838b4:	dd04      	ble.n	838c0 <__sflush_r+0xc0>
   838b6:	2c00      	cmp	r4, #0
   838b8:	dcf2      	bgt.n	838a0 <__sflush_r+0xa0>
   838ba:	2000      	movs	r0, #0
   838bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   838c0:	89ab      	ldrh	r3, [r5, #12]
   838c2:	f04f 30ff 	mov.w	r0, #4294967295
   838c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   838ca:	81ab      	strh	r3, [r5, #12]
   838cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   838d0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   838d2:	2a00      	cmp	r2, #0
   838d4:	dca2      	bgt.n	8381c <__sflush_r+0x1c>
   838d6:	e7f0      	b.n	838ba <__sflush_r+0xba>
   838d8:	2301      	movs	r3, #1
   838da:	4640      	mov	r0, r8
   838dc:	69e9      	ldr	r1, [r5, #28]
   838de:	47a0      	blx	r4
   838e0:	1c43      	adds	r3, r0, #1
   838e2:	4602      	mov	r2, r0
   838e4:	d01e      	beq.n	83924 <__sflush_r+0x124>
   838e6:	89ab      	ldrh	r3, [r5, #12]
   838e8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   838ea:	e7a6      	b.n	8383a <__sflush_r+0x3a>
   838ec:	f8d8 3000 	ldr.w	r3, [r8]
   838f0:	b95b      	cbnz	r3, 8390a <__sflush_r+0x10a>
   838f2:	89aa      	ldrh	r2, [r5, #12]
   838f4:	6929      	ldr	r1, [r5, #16]
   838f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   838fa:	b292      	uxth	r2, r2
   838fc:	606b      	str	r3, [r5, #4]
   838fe:	04d3      	lsls	r3, r2, #19
   83900:	81aa      	strh	r2, [r5, #12]
   83902:	6029      	str	r1, [r5, #0]
   83904:	d5b2      	bpl.n	8386c <__sflush_r+0x6c>
   83906:	6528      	str	r0, [r5, #80]	; 0x50
   83908:	e7b0      	b.n	8386c <__sflush_r+0x6c>
   8390a:	2b1d      	cmp	r3, #29
   8390c:	d001      	beq.n	83912 <__sflush_r+0x112>
   8390e:	2b16      	cmp	r3, #22
   83910:	d113      	bne.n	8393a <__sflush_r+0x13a>
   83912:	89a9      	ldrh	r1, [r5, #12]
   83914:	692b      	ldr	r3, [r5, #16]
   83916:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   8391a:	2200      	movs	r2, #0
   8391c:	81a9      	strh	r1, [r5, #12]
   8391e:	602b      	str	r3, [r5, #0]
   83920:	606a      	str	r2, [r5, #4]
   83922:	e7a3      	b.n	8386c <__sflush_r+0x6c>
   83924:	f8d8 3000 	ldr.w	r3, [r8]
   83928:	2b00      	cmp	r3, #0
   8392a:	d0dc      	beq.n	838e6 <__sflush_r+0xe6>
   8392c:	2b1d      	cmp	r3, #29
   8392e:	d001      	beq.n	83934 <__sflush_r+0x134>
   83930:	2b16      	cmp	r3, #22
   83932:	d1c5      	bne.n	838c0 <__sflush_r+0xc0>
   83934:	f8c8 6000 	str.w	r6, [r8]
   83938:	e7bf      	b.n	838ba <__sflush_r+0xba>
   8393a:	89ab      	ldrh	r3, [r5, #12]
   8393c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83940:	81ab      	strh	r3, [r5, #12]
   83942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83946:	bf00      	nop

00083948 <_fflush_r>:
   83948:	b510      	push	{r4, lr}
   8394a:	4604      	mov	r4, r0
   8394c:	b082      	sub	sp, #8
   8394e:	b108      	cbz	r0, 83954 <_fflush_r+0xc>
   83950:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83952:	b153      	cbz	r3, 8396a <_fflush_r+0x22>
   83954:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   83958:	b908      	cbnz	r0, 8395e <_fflush_r+0x16>
   8395a:	b002      	add	sp, #8
   8395c:	bd10      	pop	{r4, pc}
   8395e:	4620      	mov	r0, r4
   83960:	b002      	add	sp, #8
   83962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83966:	f7ff bf4b 	b.w	83800 <__sflush_r>
   8396a:	9101      	str	r1, [sp, #4]
   8396c:	f000 f808 	bl	83980 <__sinit>
   83970:	9901      	ldr	r1, [sp, #4]
   83972:	e7ef      	b.n	83954 <_fflush_r+0xc>

00083974 <_cleanup_r>:
   83974:	4901      	ldr	r1, [pc, #4]	; (8397c <_cleanup_r+0x8>)
   83976:	f000 bb9f 	b.w	840b8 <_fwalk>
   8397a:	bf00      	nop
   8397c:	00085081 	.word	0x00085081

00083980 <__sinit>:
   83980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83984:	6b84      	ldr	r4, [r0, #56]	; 0x38
   83986:	b083      	sub	sp, #12
   83988:	4607      	mov	r7, r0
   8398a:	2c00      	cmp	r4, #0
   8398c:	d165      	bne.n	83a5a <__sinit+0xda>
   8398e:	687d      	ldr	r5, [r7, #4]
   83990:	4833      	ldr	r0, [pc, #204]	; (83a60 <__sinit+0xe0>)
   83992:	2304      	movs	r3, #4
   83994:	2103      	movs	r1, #3
   83996:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8399a:	63f8      	str	r0, [r7, #60]	; 0x3c
   8399c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   839a0:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   839a4:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   839a8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   839ac:	81ab      	strh	r3, [r5, #12]
   839ae:	602c      	str	r4, [r5, #0]
   839b0:	606c      	str	r4, [r5, #4]
   839b2:	60ac      	str	r4, [r5, #8]
   839b4:	666c      	str	r4, [r5, #100]	; 0x64
   839b6:	81ec      	strh	r4, [r5, #14]
   839b8:	612c      	str	r4, [r5, #16]
   839ba:	616c      	str	r4, [r5, #20]
   839bc:	61ac      	str	r4, [r5, #24]
   839be:	4621      	mov	r1, r4
   839c0:	2208      	movs	r2, #8
   839c2:	f7fe ff05 	bl	827d0 <memset>
   839c6:	f8df b09c 	ldr.w	fp, [pc, #156]	; 83a64 <__sinit+0xe4>
   839ca:	68be      	ldr	r6, [r7, #8]
   839cc:	f8df a098 	ldr.w	sl, [pc, #152]	; 83a68 <__sinit+0xe8>
   839d0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83a6c <__sinit+0xec>
   839d4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83a70 <__sinit+0xf0>
   839d8:	2301      	movs	r3, #1
   839da:	2209      	movs	r2, #9
   839dc:	61ed      	str	r5, [r5, #28]
   839de:	f8c5 b020 	str.w	fp, [r5, #32]
   839e2:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   839e6:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   839ea:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   839ee:	4621      	mov	r1, r4
   839f0:	81f3      	strh	r3, [r6, #14]
   839f2:	81b2      	strh	r2, [r6, #12]
   839f4:	6034      	str	r4, [r6, #0]
   839f6:	6074      	str	r4, [r6, #4]
   839f8:	60b4      	str	r4, [r6, #8]
   839fa:	6674      	str	r4, [r6, #100]	; 0x64
   839fc:	6134      	str	r4, [r6, #16]
   839fe:	6174      	str	r4, [r6, #20]
   83a00:	61b4      	str	r4, [r6, #24]
   83a02:	2208      	movs	r2, #8
   83a04:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   83a08:	9301      	str	r3, [sp, #4]
   83a0a:	f7fe fee1 	bl	827d0 <memset>
   83a0e:	68fd      	ldr	r5, [r7, #12]
   83a10:	2012      	movs	r0, #18
   83a12:	2202      	movs	r2, #2
   83a14:	61f6      	str	r6, [r6, #28]
   83a16:	f8c6 b020 	str.w	fp, [r6, #32]
   83a1a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   83a1e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   83a22:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   83a26:	4621      	mov	r1, r4
   83a28:	81a8      	strh	r0, [r5, #12]
   83a2a:	81ea      	strh	r2, [r5, #14]
   83a2c:	602c      	str	r4, [r5, #0]
   83a2e:	606c      	str	r4, [r5, #4]
   83a30:	60ac      	str	r4, [r5, #8]
   83a32:	666c      	str	r4, [r5, #100]	; 0x64
   83a34:	612c      	str	r4, [r5, #16]
   83a36:	616c      	str	r4, [r5, #20]
   83a38:	61ac      	str	r4, [r5, #24]
   83a3a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83a3e:	2208      	movs	r2, #8
   83a40:	f7fe fec6 	bl	827d0 <memset>
   83a44:	9b01      	ldr	r3, [sp, #4]
   83a46:	61ed      	str	r5, [r5, #28]
   83a48:	f8c5 b020 	str.w	fp, [r5, #32]
   83a4c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83a50:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83a54:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83a58:	63bb      	str	r3, [r7, #56]	; 0x38
   83a5a:	b003      	add	sp, #12
   83a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83a60:	00083975 	.word	0x00083975
   83a64:	00084d75 	.word	0x00084d75
   83a68:	00084d99 	.word	0x00084d99
   83a6c:	00084dd1 	.word	0x00084dd1
   83a70:	00084df1 	.word	0x00084df1

00083a74 <__sfp_lock_acquire>:
   83a74:	4770      	bx	lr
   83a76:	bf00      	nop

00083a78 <__sfp_lock_release>:
   83a78:	4770      	bx	lr
   83a7a:	bf00      	nop

00083a7c <__libc_fini_array>:
   83a7c:	b538      	push	{r3, r4, r5, lr}
   83a7e:	4d09      	ldr	r5, [pc, #36]	; (83aa4 <__libc_fini_array+0x28>)
   83a80:	4c09      	ldr	r4, [pc, #36]	; (83aa8 <__libc_fini_array+0x2c>)
   83a82:	1b64      	subs	r4, r4, r5
   83a84:	10a4      	asrs	r4, r4, #2
   83a86:	bf18      	it	ne
   83a88:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83a8c:	d005      	beq.n	83a9a <__libc_fini_array+0x1e>
   83a8e:	3c01      	subs	r4, #1
   83a90:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83a94:	4798      	blx	r3
   83a96:	2c00      	cmp	r4, #0
   83a98:	d1f9      	bne.n	83a8e <__libc_fini_array+0x12>
   83a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83a9e:	f001 bea9 	b.w	857f4 <_fini>
   83aa2:	bf00      	nop
   83aa4:	00085800 	.word	0x00085800
   83aa8:	00085804 	.word	0x00085804

00083aac <_fputwc_r>:
   83aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ab0:	8993      	ldrh	r3, [r2, #12]
   83ab2:	460f      	mov	r7, r1
   83ab4:	0499      	lsls	r1, r3, #18
   83ab6:	b082      	sub	sp, #8
   83ab8:	4614      	mov	r4, r2
   83aba:	4680      	mov	r8, r0
   83abc:	d406      	bmi.n	83acc <_fputwc_r+0x20>
   83abe:	6e52      	ldr	r2, [r2, #100]	; 0x64
   83ac0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83ac8:	81a3      	strh	r3, [r4, #12]
   83aca:	6662      	str	r2, [r4, #100]	; 0x64
   83acc:	f000 fb1c 	bl	84108 <__locale_mb_cur_max>
   83ad0:	2801      	cmp	r0, #1
   83ad2:	d03e      	beq.n	83b52 <_fputwc_r+0xa6>
   83ad4:	463a      	mov	r2, r7
   83ad6:	4640      	mov	r0, r8
   83ad8:	a901      	add	r1, sp, #4
   83ada:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83ade:	f001 f9df 	bl	84ea0 <_wcrtomb_r>
   83ae2:	1c42      	adds	r2, r0, #1
   83ae4:	4606      	mov	r6, r0
   83ae6:	d02d      	beq.n	83b44 <_fputwc_r+0x98>
   83ae8:	2800      	cmp	r0, #0
   83aea:	d03a      	beq.n	83b62 <_fputwc_r+0xb6>
   83aec:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83af0:	2500      	movs	r5, #0
   83af2:	e009      	b.n	83b08 <_fputwc_r+0x5c>
   83af4:	6823      	ldr	r3, [r4, #0]
   83af6:	7019      	strb	r1, [r3, #0]
   83af8:	6823      	ldr	r3, [r4, #0]
   83afa:	3301      	adds	r3, #1
   83afc:	6023      	str	r3, [r4, #0]
   83afe:	3501      	adds	r5, #1
   83b00:	42b5      	cmp	r5, r6
   83b02:	d22e      	bcs.n	83b62 <_fputwc_r+0xb6>
   83b04:	ab01      	add	r3, sp, #4
   83b06:	5ce9      	ldrb	r1, [r5, r3]
   83b08:	68a3      	ldr	r3, [r4, #8]
   83b0a:	3b01      	subs	r3, #1
   83b0c:	2b00      	cmp	r3, #0
   83b0e:	60a3      	str	r3, [r4, #8]
   83b10:	daf0      	bge.n	83af4 <_fputwc_r+0x48>
   83b12:	69a2      	ldr	r2, [r4, #24]
   83b14:	4293      	cmp	r3, r2
   83b16:	db06      	blt.n	83b26 <_fputwc_r+0x7a>
   83b18:	6823      	ldr	r3, [r4, #0]
   83b1a:	7019      	strb	r1, [r3, #0]
   83b1c:	6823      	ldr	r3, [r4, #0]
   83b1e:	7819      	ldrb	r1, [r3, #0]
   83b20:	3301      	adds	r3, #1
   83b22:	290a      	cmp	r1, #10
   83b24:	d1ea      	bne.n	83afc <_fputwc_r+0x50>
   83b26:	4640      	mov	r0, r8
   83b28:	4622      	mov	r2, r4
   83b2a:	f001 f965 	bl	84df8 <__swbuf_r>
   83b2e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   83b32:	4258      	negs	r0, r3
   83b34:	4158      	adcs	r0, r3
   83b36:	2800      	cmp	r0, #0
   83b38:	d0e1      	beq.n	83afe <_fputwc_r+0x52>
   83b3a:	f04f 30ff 	mov.w	r0, #4294967295
   83b3e:	b002      	add	sp, #8
   83b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b44:	89a3      	ldrh	r3, [r4, #12]
   83b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83b4a:	81a3      	strh	r3, [r4, #12]
   83b4c:	b002      	add	sp, #8
   83b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b52:	1e7b      	subs	r3, r7, #1
   83b54:	2bfe      	cmp	r3, #254	; 0xfe
   83b56:	d8bd      	bhi.n	83ad4 <_fputwc_r+0x28>
   83b58:	b2f9      	uxtb	r1, r7
   83b5a:	4606      	mov	r6, r0
   83b5c:	f88d 1004 	strb.w	r1, [sp, #4]
   83b60:	e7c6      	b.n	83af0 <_fputwc_r+0x44>
   83b62:	4638      	mov	r0, r7
   83b64:	b002      	add	sp, #8
   83b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b6a:	bf00      	nop

00083b6c <_malloc_trim_r>:
   83b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b6e:	4d23      	ldr	r5, [pc, #140]	; (83bfc <_malloc_trim_r+0x90>)
   83b70:	460f      	mov	r7, r1
   83b72:	4604      	mov	r4, r0
   83b74:	f000 ff08 	bl	84988 <__malloc_lock>
   83b78:	68ab      	ldr	r3, [r5, #8]
   83b7a:	685e      	ldr	r6, [r3, #4]
   83b7c:	f026 0603 	bic.w	r6, r6, #3
   83b80:	1bf1      	subs	r1, r6, r7
   83b82:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   83b86:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83b8a:	f021 010f 	bic.w	r1, r1, #15
   83b8e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   83b92:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   83b96:	db07      	blt.n	83ba8 <_malloc_trim_r+0x3c>
   83b98:	4620      	mov	r0, r4
   83b9a:	2100      	movs	r1, #0
   83b9c:	f001 f8d8 	bl	84d50 <_sbrk_r>
   83ba0:	68ab      	ldr	r3, [r5, #8]
   83ba2:	4433      	add	r3, r6
   83ba4:	4298      	cmp	r0, r3
   83ba6:	d004      	beq.n	83bb2 <_malloc_trim_r+0x46>
   83ba8:	4620      	mov	r0, r4
   83baa:	f000 feef 	bl	8498c <__malloc_unlock>
   83bae:	2000      	movs	r0, #0
   83bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83bb2:	4620      	mov	r0, r4
   83bb4:	4279      	negs	r1, r7
   83bb6:	f001 f8cb 	bl	84d50 <_sbrk_r>
   83bba:	3001      	adds	r0, #1
   83bbc:	d00d      	beq.n	83bda <_malloc_trim_r+0x6e>
   83bbe:	4b10      	ldr	r3, [pc, #64]	; (83c00 <_malloc_trim_r+0x94>)
   83bc0:	68aa      	ldr	r2, [r5, #8]
   83bc2:	6819      	ldr	r1, [r3, #0]
   83bc4:	1bf6      	subs	r6, r6, r7
   83bc6:	f046 0601 	orr.w	r6, r6, #1
   83bca:	4620      	mov	r0, r4
   83bcc:	1bc9      	subs	r1, r1, r7
   83bce:	6056      	str	r6, [r2, #4]
   83bd0:	6019      	str	r1, [r3, #0]
   83bd2:	f000 fedb 	bl	8498c <__malloc_unlock>
   83bd6:	2001      	movs	r0, #1
   83bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83bda:	4620      	mov	r0, r4
   83bdc:	2100      	movs	r1, #0
   83bde:	f001 f8b7 	bl	84d50 <_sbrk_r>
   83be2:	68ab      	ldr	r3, [r5, #8]
   83be4:	1ac2      	subs	r2, r0, r3
   83be6:	2a0f      	cmp	r2, #15
   83be8:	ddde      	ble.n	83ba8 <_malloc_trim_r+0x3c>
   83bea:	4d06      	ldr	r5, [pc, #24]	; (83c04 <_malloc_trim_r+0x98>)
   83bec:	4904      	ldr	r1, [pc, #16]	; (83c00 <_malloc_trim_r+0x94>)
   83bee:	682d      	ldr	r5, [r5, #0]
   83bf0:	f042 0201 	orr.w	r2, r2, #1
   83bf4:	1b40      	subs	r0, r0, r5
   83bf6:	605a      	str	r2, [r3, #4]
   83bf8:	6008      	str	r0, [r1, #0]
   83bfa:	e7d5      	b.n	83ba8 <_malloc_trim_r+0x3c>
   83bfc:	20070598 	.word	0x20070598
   83c00:	20070af0 	.word	0x20070af0
   83c04:	200709a4 	.word	0x200709a4

00083c08 <_free_r>:
   83c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83c0c:	460d      	mov	r5, r1
   83c0e:	4606      	mov	r6, r0
   83c10:	2900      	cmp	r1, #0
   83c12:	d055      	beq.n	83cc0 <_free_r+0xb8>
   83c14:	f000 feb8 	bl	84988 <__malloc_lock>
   83c18:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83c1c:	f8df c170 	ldr.w	ip, [pc, #368]	; 83d90 <_free_r+0x188>
   83c20:	f1a5 0408 	sub.w	r4, r5, #8
   83c24:	f021 0301 	bic.w	r3, r1, #1
   83c28:	18e2      	adds	r2, r4, r3
   83c2a:	f8dc 0008 	ldr.w	r0, [ip, #8]
   83c2e:	6857      	ldr	r7, [r2, #4]
   83c30:	4290      	cmp	r0, r2
   83c32:	f027 0703 	bic.w	r7, r7, #3
   83c36:	d068      	beq.n	83d0a <_free_r+0x102>
   83c38:	f011 0101 	ands.w	r1, r1, #1
   83c3c:	6057      	str	r7, [r2, #4]
   83c3e:	d032      	beq.n	83ca6 <_free_r+0x9e>
   83c40:	2100      	movs	r1, #0
   83c42:	19d0      	adds	r0, r2, r7
   83c44:	6840      	ldr	r0, [r0, #4]
   83c46:	07c0      	lsls	r0, r0, #31
   83c48:	d406      	bmi.n	83c58 <_free_r+0x50>
   83c4a:	443b      	add	r3, r7
   83c4c:	6890      	ldr	r0, [r2, #8]
   83c4e:	2900      	cmp	r1, #0
   83c50:	d04d      	beq.n	83cee <_free_r+0xe6>
   83c52:	68d2      	ldr	r2, [r2, #12]
   83c54:	60c2      	str	r2, [r0, #12]
   83c56:	6090      	str	r0, [r2, #8]
   83c58:	f043 0201 	orr.w	r2, r3, #1
   83c5c:	6062      	str	r2, [r4, #4]
   83c5e:	50e3      	str	r3, [r4, r3]
   83c60:	b9e1      	cbnz	r1, 83c9c <_free_r+0x94>
   83c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83c66:	d32d      	bcc.n	83cc4 <_free_r+0xbc>
   83c68:	0a5a      	lsrs	r2, r3, #9
   83c6a:	2a04      	cmp	r2, #4
   83c6c:	d869      	bhi.n	83d42 <_free_r+0x13a>
   83c6e:	0998      	lsrs	r0, r3, #6
   83c70:	3038      	adds	r0, #56	; 0x38
   83c72:	0041      	lsls	r1, r0, #1
   83c74:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   83c78:	f8dc 2008 	ldr.w	r2, [ip, #8]
   83c7c:	4944      	ldr	r1, [pc, #272]	; (83d90 <_free_r+0x188>)
   83c7e:	4562      	cmp	r2, ip
   83c80:	d065      	beq.n	83d4e <_free_r+0x146>
   83c82:	6851      	ldr	r1, [r2, #4]
   83c84:	f021 0103 	bic.w	r1, r1, #3
   83c88:	428b      	cmp	r3, r1
   83c8a:	d202      	bcs.n	83c92 <_free_r+0x8a>
   83c8c:	6892      	ldr	r2, [r2, #8]
   83c8e:	4594      	cmp	ip, r2
   83c90:	d1f7      	bne.n	83c82 <_free_r+0x7a>
   83c92:	68d3      	ldr	r3, [r2, #12]
   83c94:	60e3      	str	r3, [r4, #12]
   83c96:	60a2      	str	r2, [r4, #8]
   83c98:	609c      	str	r4, [r3, #8]
   83c9a:	60d4      	str	r4, [r2, #12]
   83c9c:	4630      	mov	r0, r6
   83c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83ca2:	f000 be73 	b.w	8498c <__malloc_unlock>
   83ca6:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83caa:	f10c 0808 	add.w	r8, ip, #8
   83cae:	1b64      	subs	r4, r4, r5
   83cb0:	68a0      	ldr	r0, [r4, #8]
   83cb2:	442b      	add	r3, r5
   83cb4:	4540      	cmp	r0, r8
   83cb6:	d042      	beq.n	83d3e <_free_r+0x136>
   83cb8:	68e5      	ldr	r5, [r4, #12]
   83cba:	60c5      	str	r5, [r0, #12]
   83cbc:	60a8      	str	r0, [r5, #8]
   83cbe:	e7c0      	b.n	83c42 <_free_r+0x3a>
   83cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83cc4:	08db      	lsrs	r3, r3, #3
   83cc6:	109a      	asrs	r2, r3, #2
   83cc8:	2001      	movs	r0, #1
   83cca:	4090      	lsls	r0, r2
   83ccc:	f8dc 1004 	ldr.w	r1, [ip, #4]
   83cd0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   83cd4:	689a      	ldr	r2, [r3, #8]
   83cd6:	4301      	orrs	r1, r0
   83cd8:	60a2      	str	r2, [r4, #8]
   83cda:	60e3      	str	r3, [r4, #12]
   83cdc:	f8cc 1004 	str.w	r1, [ip, #4]
   83ce0:	4630      	mov	r0, r6
   83ce2:	609c      	str	r4, [r3, #8]
   83ce4:	60d4      	str	r4, [r2, #12]
   83ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83cea:	f000 be4f 	b.w	8498c <__malloc_unlock>
   83cee:	4d29      	ldr	r5, [pc, #164]	; (83d94 <_free_r+0x18c>)
   83cf0:	42a8      	cmp	r0, r5
   83cf2:	d1ae      	bne.n	83c52 <_free_r+0x4a>
   83cf4:	f043 0201 	orr.w	r2, r3, #1
   83cf8:	f8cc 4014 	str.w	r4, [ip, #20]
   83cfc:	f8cc 4010 	str.w	r4, [ip, #16]
   83d00:	60e0      	str	r0, [r4, #12]
   83d02:	60a0      	str	r0, [r4, #8]
   83d04:	6062      	str	r2, [r4, #4]
   83d06:	50e3      	str	r3, [r4, r3]
   83d08:	e7c8      	b.n	83c9c <_free_r+0x94>
   83d0a:	441f      	add	r7, r3
   83d0c:	07cb      	lsls	r3, r1, #31
   83d0e:	d407      	bmi.n	83d20 <_free_r+0x118>
   83d10:	f855 1c08 	ldr.w	r1, [r5, #-8]
   83d14:	1a64      	subs	r4, r4, r1
   83d16:	68e3      	ldr	r3, [r4, #12]
   83d18:	68a2      	ldr	r2, [r4, #8]
   83d1a:	440f      	add	r7, r1
   83d1c:	60d3      	str	r3, [r2, #12]
   83d1e:	609a      	str	r2, [r3, #8]
   83d20:	4b1d      	ldr	r3, [pc, #116]	; (83d98 <_free_r+0x190>)
   83d22:	f047 0201 	orr.w	r2, r7, #1
   83d26:	681b      	ldr	r3, [r3, #0]
   83d28:	6062      	str	r2, [r4, #4]
   83d2a:	429f      	cmp	r7, r3
   83d2c:	f8cc 4008 	str.w	r4, [ip, #8]
   83d30:	d3b4      	bcc.n	83c9c <_free_r+0x94>
   83d32:	4b1a      	ldr	r3, [pc, #104]	; (83d9c <_free_r+0x194>)
   83d34:	4630      	mov	r0, r6
   83d36:	6819      	ldr	r1, [r3, #0]
   83d38:	f7ff ff18 	bl	83b6c <_malloc_trim_r>
   83d3c:	e7ae      	b.n	83c9c <_free_r+0x94>
   83d3e:	2101      	movs	r1, #1
   83d40:	e77f      	b.n	83c42 <_free_r+0x3a>
   83d42:	2a14      	cmp	r2, #20
   83d44:	d80b      	bhi.n	83d5e <_free_r+0x156>
   83d46:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   83d4a:	0041      	lsls	r1, r0, #1
   83d4c:	e792      	b.n	83c74 <_free_r+0x6c>
   83d4e:	1080      	asrs	r0, r0, #2
   83d50:	2501      	movs	r5, #1
   83d52:	4085      	lsls	r5, r0
   83d54:	6848      	ldr	r0, [r1, #4]
   83d56:	4613      	mov	r3, r2
   83d58:	4328      	orrs	r0, r5
   83d5a:	6048      	str	r0, [r1, #4]
   83d5c:	e79a      	b.n	83c94 <_free_r+0x8c>
   83d5e:	2a54      	cmp	r2, #84	; 0x54
   83d60:	d803      	bhi.n	83d6a <_free_r+0x162>
   83d62:	0b18      	lsrs	r0, r3, #12
   83d64:	306e      	adds	r0, #110	; 0x6e
   83d66:	0041      	lsls	r1, r0, #1
   83d68:	e784      	b.n	83c74 <_free_r+0x6c>
   83d6a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83d6e:	d803      	bhi.n	83d78 <_free_r+0x170>
   83d70:	0bd8      	lsrs	r0, r3, #15
   83d72:	3077      	adds	r0, #119	; 0x77
   83d74:	0041      	lsls	r1, r0, #1
   83d76:	e77d      	b.n	83c74 <_free_r+0x6c>
   83d78:	f240 5154 	movw	r1, #1364	; 0x554
   83d7c:	428a      	cmp	r2, r1
   83d7e:	d803      	bhi.n	83d88 <_free_r+0x180>
   83d80:	0c98      	lsrs	r0, r3, #18
   83d82:	307c      	adds	r0, #124	; 0x7c
   83d84:	0041      	lsls	r1, r0, #1
   83d86:	e775      	b.n	83c74 <_free_r+0x6c>
   83d88:	21fc      	movs	r1, #252	; 0xfc
   83d8a:	207e      	movs	r0, #126	; 0x7e
   83d8c:	e772      	b.n	83c74 <_free_r+0x6c>
   83d8e:	bf00      	nop
   83d90:	20070598 	.word	0x20070598
   83d94:	200705a0 	.word	0x200705a0
   83d98:	200709a0 	.word	0x200709a0
   83d9c:	20070aec 	.word	0x20070aec

00083da0 <__sfvwrite_r>:
   83da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83da4:	6893      	ldr	r3, [r2, #8]
   83da6:	b083      	sub	sp, #12
   83da8:	4616      	mov	r6, r2
   83daa:	4681      	mov	r9, r0
   83dac:	460c      	mov	r4, r1
   83dae:	b32b      	cbz	r3, 83dfc <__sfvwrite_r+0x5c>
   83db0:	898b      	ldrh	r3, [r1, #12]
   83db2:	0719      	lsls	r1, r3, #28
   83db4:	d526      	bpl.n	83e04 <__sfvwrite_r+0x64>
   83db6:	6922      	ldr	r2, [r4, #16]
   83db8:	b322      	cbz	r2, 83e04 <__sfvwrite_r+0x64>
   83dba:	f003 0202 	and.w	r2, r3, #2
   83dbe:	b292      	uxth	r2, r2
   83dc0:	6835      	ldr	r5, [r6, #0]
   83dc2:	2a00      	cmp	r2, #0
   83dc4:	d02c      	beq.n	83e20 <__sfvwrite_r+0x80>
   83dc6:	f04f 0a00 	mov.w	sl, #0
   83dca:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 840b4 <__sfvwrite_r+0x314>
   83dce:	46d0      	mov	r8, sl
   83dd0:	45d8      	cmp	r8, fp
   83dd2:	bf34      	ite	cc
   83dd4:	4643      	movcc	r3, r8
   83dd6:	465b      	movcs	r3, fp
   83dd8:	4652      	mov	r2, sl
   83dda:	4648      	mov	r0, r9
   83ddc:	f1b8 0f00 	cmp.w	r8, #0
   83de0:	d04f      	beq.n	83e82 <__sfvwrite_r+0xe2>
   83de2:	69e1      	ldr	r1, [r4, #28]
   83de4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83de6:	47b8      	blx	r7
   83de8:	2800      	cmp	r0, #0
   83dea:	dd56      	ble.n	83e9a <__sfvwrite_r+0xfa>
   83dec:	68b3      	ldr	r3, [r6, #8]
   83dee:	4482      	add	sl, r0
   83df0:	1a1b      	subs	r3, r3, r0
   83df2:	ebc0 0808 	rsb	r8, r0, r8
   83df6:	60b3      	str	r3, [r6, #8]
   83df8:	2b00      	cmp	r3, #0
   83dfa:	d1e9      	bne.n	83dd0 <__sfvwrite_r+0x30>
   83dfc:	2000      	movs	r0, #0
   83dfe:	b003      	add	sp, #12
   83e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e04:	4648      	mov	r0, r9
   83e06:	4621      	mov	r1, r4
   83e08:	f7ff fc88 	bl	8371c <__swsetup_r>
   83e0c:	2800      	cmp	r0, #0
   83e0e:	f040 8148 	bne.w	840a2 <__sfvwrite_r+0x302>
   83e12:	89a3      	ldrh	r3, [r4, #12]
   83e14:	6835      	ldr	r5, [r6, #0]
   83e16:	f003 0202 	and.w	r2, r3, #2
   83e1a:	b292      	uxth	r2, r2
   83e1c:	2a00      	cmp	r2, #0
   83e1e:	d1d2      	bne.n	83dc6 <__sfvwrite_r+0x26>
   83e20:	f013 0a01 	ands.w	sl, r3, #1
   83e24:	d142      	bne.n	83eac <__sfvwrite_r+0x10c>
   83e26:	46d0      	mov	r8, sl
   83e28:	f1b8 0f00 	cmp.w	r8, #0
   83e2c:	d023      	beq.n	83e76 <__sfvwrite_r+0xd6>
   83e2e:	059a      	lsls	r2, r3, #22
   83e30:	68a7      	ldr	r7, [r4, #8]
   83e32:	d576      	bpl.n	83f22 <__sfvwrite_r+0x182>
   83e34:	45b8      	cmp	r8, r7
   83e36:	f0c0 80a4 	bcc.w	83f82 <__sfvwrite_r+0x1e2>
   83e3a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83e3e:	f040 80b2 	bne.w	83fa6 <__sfvwrite_r+0x206>
   83e42:	6820      	ldr	r0, [r4, #0]
   83e44:	46bb      	mov	fp, r7
   83e46:	4651      	mov	r1, sl
   83e48:	465a      	mov	r2, fp
   83e4a:	f000 fd37 	bl	848bc <memmove>
   83e4e:	68a2      	ldr	r2, [r4, #8]
   83e50:	6821      	ldr	r1, [r4, #0]
   83e52:	1bd2      	subs	r2, r2, r7
   83e54:	eb01 030b 	add.w	r3, r1, fp
   83e58:	60a2      	str	r2, [r4, #8]
   83e5a:	6023      	str	r3, [r4, #0]
   83e5c:	4642      	mov	r2, r8
   83e5e:	68b3      	ldr	r3, [r6, #8]
   83e60:	4492      	add	sl, r2
   83e62:	1a9b      	subs	r3, r3, r2
   83e64:	ebc2 0808 	rsb	r8, r2, r8
   83e68:	60b3      	str	r3, [r6, #8]
   83e6a:	2b00      	cmp	r3, #0
   83e6c:	d0c6      	beq.n	83dfc <__sfvwrite_r+0x5c>
   83e6e:	89a3      	ldrh	r3, [r4, #12]
   83e70:	f1b8 0f00 	cmp.w	r8, #0
   83e74:	d1db      	bne.n	83e2e <__sfvwrite_r+0x8e>
   83e76:	f8d5 a000 	ldr.w	sl, [r5]
   83e7a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83e7e:	3508      	adds	r5, #8
   83e80:	e7d2      	b.n	83e28 <__sfvwrite_r+0x88>
   83e82:	f8d5 a000 	ldr.w	sl, [r5]
   83e86:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83e8a:	3508      	adds	r5, #8
   83e8c:	e7a0      	b.n	83dd0 <__sfvwrite_r+0x30>
   83e8e:	4648      	mov	r0, r9
   83e90:	4621      	mov	r1, r4
   83e92:	f7ff fd59 	bl	83948 <_fflush_r>
   83e96:	2800      	cmp	r0, #0
   83e98:	d059      	beq.n	83f4e <__sfvwrite_r+0x1ae>
   83e9a:	89a3      	ldrh	r3, [r4, #12]
   83e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83ea0:	f04f 30ff 	mov.w	r0, #4294967295
   83ea4:	81a3      	strh	r3, [r4, #12]
   83ea6:	b003      	add	sp, #12
   83ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83eac:	4692      	mov	sl, r2
   83eae:	9201      	str	r2, [sp, #4]
   83eb0:	4693      	mov	fp, r2
   83eb2:	4690      	mov	r8, r2
   83eb4:	f1b8 0f00 	cmp.w	r8, #0
   83eb8:	d02b      	beq.n	83f12 <__sfvwrite_r+0x172>
   83eba:	9f01      	ldr	r7, [sp, #4]
   83ebc:	2f00      	cmp	r7, #0
   83ebe:	d064      	beq.n	83f8a <__sfvwrite_r+0x1ea>
   83ec0:	6820      	ldr	r0, [r4, #0]
   83ec2:	6921      	ldr	r1, [r4, #16]
   83ec4:	45c2      	cmp	sl, r8
   83ec6:	bf34      	ite	cc
   83ec8:	4653      	movcc	r3, sl
   83eca:	4643      	movcs	r3, r8
   83ecc:	4288      	cmp	r0, r1
   83ece:	461f      	mov	r7, r3
   83ed0:	f8d4 c008 	ldr.w	ip, [r4, #8]
   83ed4:	6962      	ldr	r2, [r4, #20]
   83ed6:	d903      	bls.n	83ee0 <__sfvwrite_r+0x140>
   83ed8:	4494      	add	ip, r2
   83eda:	4563      	cmp	r3, ip
   83edc:	f300 80ae 	bgt.w	8403c <__sfvwrite_r+0x29c>
   83ee0:	4293      	cmp	r3, r2
   83ee2:	db36      	blt.n	83f52 <__sfvwrite_r+0x1b2>
   83ee4:	4613      	mov	r3, r2
   83ee6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83ee8:	4648      	mov	r0, r9
   83eea:	69e1      	ldr	r1, [r4, #28]
   83eec:	465a      	mov	r2, fp
   83eee:	47b8      	blx	r7
   83ef0:	1e07      	subs	r7, r0, #0
   83ef2:	ddd2      	ble.n	83e9a <__sfvwrite_r+0xfa>
   83ef4:	ebba 0a07 	subs.w	sl, sl, r7
   83ef8:	d03a      	beq.n	83f70 <__sfvwrite_r+0x1d0>
   83efa:	68b3      	ldr	r3, [r6, #8]
   83efc:	44bb      	add	fp, r7
   83efe:	1bdb      	subs	r3, r3, r7
   83f00:	ebc7 0808 	rsb	r8, r7, r8
   83f04:	60b3      	str	r3, [r6, #8]
   83f06:	2b00      	cmp	r3, #0
   83f08:	f43f af78 	beq.w	83dfc <__sfvwrite_r+0x5c>
   83f0c:	f1b8 0f00 	cmp.w	r8, #0
   83f10:	d1d3      	bne.n	83eba <__sfvwrite_r+0x11a>
   83f12:	2700      	movs	r7, #0
   83f14:	f8d5 b000 	ldr.w	fp, [r5]
   83f18:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83f1c:	9701      	str	r7, [sp, #4]
   83f1e:	3508      	adds	r5, #8
   83f20:	e7c8      	b.n	83eb4 <__sfvwrite_r+0x114>
   83f22:	6820      	ldr	r0, [r4, #0]
   83f24:	6923      	ldr	r3, [r4, #16]
   83f26:	4298      	cmp	r0, r3
   83f28:	d802      	bhi.n	83f30 <__sfvwrite_r+0x190>
   83f2a:	6963      	ldr	r3, [r4, #20]
   83f2c:	4598      	cmp	r8, r3
   83f2e:	d272      	bcs.n	84016 <__sfvwrite_r+0x276>
   83f30:	45b8      	cmp	r8, r7
   83f32:	bf38      	it	cc
   83f34:	4647      	movcc	r7, r8
   83f36:	463a      	mov	r2, r7
   83f38:	4651      	mov	r1, sl
   83f3a:	f000 fcbf 	bl	848bc <memmove>
   83f3e:	68a3      	ldr	r3, [r4, #8]
   83f40:	6822      	ldr	r2, [r4, #0]
   83f42:	1bdb      	subs	r3, r3, r7
   83f44:	443a      	add	r2, r7
   83f46:	60a3      	str	r3, [r4, #8]
   83f48:	6022      	str	r2, [r4, #0]
   83f4a:	2b00      	cmp	r3, #0
   83f4c:	d09f      	beq.n	83e8e <__sfvwrite_r+0xee>
   83f4e:	463a      	mov	r2, r7
   83f50:	e785      	b.n	83e5e <__sfvwrite_r+0xbe>
   83f52:	461a      	mov	r2, r3
   83f54:	4659      	mov	r1, fp
   83f56:	9300      	str	r3, [sp, #0]
   83f58:	f000 fcb0 	bl	848bc <memmove>
   83f5c:	9b00      	ldr	r3, [sp, #0]
   83f5e:	68a1      	ldr	r1, [r4, #8]
   83f60:	6822      	ldr	r2, [r4, #0]
   83f62:	1ac9      	subs	r1, r1, r3
   83f64:	ebba 0a07 	subs.w	sl, sl, r7
   83f68:	4413      	add	r3, r2
   83f6a:	60a1      	str	r1, [r4, #8]
   83f6c:	6023      	str	r3, [r4, #0]
   83f6e:	d1c4      	bne.n	83efa <__sfvwrite_r+0x15a>
   83f70:	4648      	mov	r0, r9
   83f72:	4621      	mov	r1, r4
   83f74:	f7ff fce8 	bl	83948 <_fflush_r>
   83f78:	2800      	cmp	r0, #0
   83f7a:	d18e      	bne.n	83e9a <__sfvwrite_r+0xfa>
   83f7c:	f8cd a004 	str.w	sl, [sp, #4]
   83f80:	e7bb      	b.n	83efa <__sfvwrite_r+0x15a>
   83f82:	6820      	ldr	r0, [r4, #0]
   83f84:	4647      	mov	r7, r8
   83f86:	46c3      	mov	fp, r8
   83f88:	e75d      	b.n	83e46 <__sfvwrite_r+0xa6>
   83f8a:	4658      	mov	r0, fp
   83f8c:	210a      	movs	r1, #10
   83f8e:	4642      	mov	r2, r8
   83f90:	f000 fbd4 	bl	8473c <memchr>
   83f94:	2800      	cmp	r0, #0
   83f96:	d07f      	beq.n	84098 <__sfvwrite_r+0x2f8>
   83f98:	f100 0a01 	add.w	sl, r0, #1
   83f9c:	2701      	movs	r7, #1
   83f9e:	ebcb 0a0a 	rsb	sl, fp, sl
   83fa2:	9701      	str	r7, [sp, #4]
   83fa4:	e78c      	b.n	83ec0 <__sfvwrite_r+0x120>
   83fa6:	6822      	ldr	r2, [r4, #0]
   83fa8:	6921      	ldr	r1, [r4, #16]
   83faa:	6967      	ldr	r7, [r4, #20]
   83fac:	ebc1 0c02 	rsb	ip, r1, r2
   83fb0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   83fb4:	f10c 0201 	add.w	r2, ip, #1
   83fb8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   83fbc:	4442      	add	r2, r8
   83fbe:	107f      	asrs	r7, r7, #1
   83fc0:	4297      	cmp	r7, r2
   83fc2:	bf34      	ite	cc
   83fc4:	4617      	movcc	r7, r2
   83fc6:	463a      	movcs	r2, r7
   83fc8:	055b      	lsls	r3, r3, #21
   83fca:	d54f      	bpl.n	8406c <__sfvwrite_r+0x2cc>
   83fcc:	4611      	mov	r1, r2
   83fce:	4648      	mov	r0, r9
   83fd0:	f8cd c000 	str.w	ip, [sp]
   83fd4:	f000 f916 	bl	84204 <_malloc_r>
   83fd8:	f8dd c000 	ldr.w	ip, [sp]
   83fdc:	4683      	mov	fp, r0
   83fde:	2800      	cmp	r0, #0
   83fe0:	d062      	beq.n	840a8 <__sfvwrite_r+0x308>
   83fe2:	4662      	mov	r2, ip
   83fe4:	6921      	ldr	r1, [r4, #16]
   83fe6:	f8cd c000 	str.w	ip, [sp]
   83fea:	f000 fbf1 	bl	847d0 <memcpy>
   83fee:	89a2      	ldrh	r2, [r4, #12]
   83ff0:	f8dd c000 	ldr.w	ip, [sp]
   83ff4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83ff8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83ffc:	81a2      	strh	r2, [r4, #12]
   83ffe:	eb0b 000c 	add.w	r0, fp, ip
   84002:	ebcc 0207 	rsb	r2, ip, r7
   84006:	f8c4 b010 	str.w	fp, [r4, #16]
   8400a:	6167      	str	r7, [r4, #20]
   8400c:	6020      	str	r0, [r4, #0]
   8400e:	60a2      	str	r2, [r4, #8]
   84010:	4647      	mov	r7, r8
   84012:	46c3      	mov	fp, r8
   84014:	e717      	b.n	83e46 <__sfvwrite_r+0xa6>
   84016:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8401a:	4590      	cmp	r8, r2
   8401c:	bf38      	it	cc
   8401e:	4642      	movcc	r2, r8
   84020:	fb92 f2f3 	sdiv	r2, r2, r3
   84024:	fb02 f303 	mul.w	r3, r2, r3
   84028:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8402a:	4648      	mov	r0, r9
   8402c:	69e1      	ldr	r1, [r4, #28]
   8402e:	4652      	mov	r2, sl
   84030:	47b8      	blx	r7
   84032:	2800      	cmp	r0, #0
   84034:	f77f af31 	ble.w	83e9a <__sfvwrite_r+0xfa>
   84038:	4602      	mov	r2, r0
   8403a:	e710      	b.n	83e5e <__sfvwrite_r+0xbe>
   8403c:	4662      	mov	r2, ip
   8403e:	4659      	mov	r1, fp
   84040:	f8cd c000 	str.w	ip, [sp]
   84044:	f000 fc3a 	bl	848bc <memmove>
   84048:	f8dd c000 	ldr.w	ip, [sp]
   8404c:	6823      	ldr	r3, [r4, #0]
   8404e:	4648      	mov	r0, r9
   84050:	4463      	add	r3, ip
   84052:	6023      	str	r3, [r4, #0]
   84054:	4621      	mov	r1, r4
   84056:	f8cd c000 	str.w	ip, [sp]
   8405a:	f7ff fc75 	bl	83948 <_fflush_r>
   8405e:	f8dd c000 	ldr.w	ip, [sp]
   84062:	2800      	cmp	r0, #0
   84064:	f47f af19 	bne.w	83e9a <__sfvwrite_r+0xfa>
   84068:	4667      	mov	r7, ip
   8406a:	e743      	b.n	83ef4 <__sfvwrite_r+0x154>
   8406c:	4648      	mov	r0, r9
   8406e:	f8cd c000 	str.w	ip, [sp]
   84072:	f000 fc8d 	bl	84990 <_realloc_r>
   84076:	f8dd c000 	ldr.w	ip, [sp]
   8407a:	4683      	mov	fp, r0
   8407c:	2800      	cmp	r0, #0
   8407e:	d1be      	bne.n	83ffe <__sfvwrite_r+0x25e>
   84080:	4648      	mov	r0, r9
   84082:	6921      	ldr	r1, [r4, #16]
   84084:	f7ff fdc0 	bl	83c08 <_free_r>
   84088:	89a3      	ldrh	r3, [r4, #12]
   8408a:	220c      	movs	r2, #12
   8408c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84090:	b29b      	uxth	r3, r3
   84092:	f8c9 2000 	str.w	r2, [r9]
   84096:	e701      	b.n	83e9c <__sfvwrite_r+0xfc>
   84098:	2701      	movs	r7, #1
   8409a:	f108 0a01 	add.w	sl, r8, #1
   8409e:	9701      	str	r7, [sp, #4]
   840a0:	e70e      	b.n	83ec0 <__sfvwrite_r+0x120>
   840a2:	f04f 30ff 	mov.w	r0, #4294967295
   840a6:	e6aa      	b.n	83dfe <__sfvwrite_r+0x5e>
   840a8:	230c      	movs	r3, #12
   840aa:	f8c9 3000 	str.w	r3, [r9]
   840ae:	89a3      	ldrh	r3, [r4, #12]
   840b0:	e6f4      	b.n	83e9c <__sfvwrite_r+0xfc>
   840b2:	bf00      	nop
   840b4:	7ffffc00 	.word	0x7ffffc00

000840b8 <_fwalk>:
   840b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   840bc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   840c0:	4688      	mov	r8, r1
   840c2:	d019      	beq.n	840f8 <_fwalk+0x40>
   840c4:	2600      	movs	r6, #0
   840c6:	687d      	ldr	r5, [r7, #4]
   840c8:	68bc      	ldr	r4, [r7, #8]
   840ca:	3d01      	subs	r5, #1
   840cc:	d40e      	bmi.n	840ec <_fwalk+0x34>
   840ce:	89a3      	ldrh	r3, [r4, #12]
   840d0:	3d01      	subs	r5, #1
   840d2:	2b01      	cmp	r3, #1
   840d4:	d906      	bls.n	840e4 <_fwalk+0x2c>
   840d6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   840da:	4620      	mov	r0, r4
   840dc:	3301      	adds	r3, #1
   840de:	d001      	beq.n	840e4 <_fwalk+0x2c>
   840e0:	47c0      	blx	r8
   840e2:	4306      	orrs	r6, r0
   840e4:	1c6b      	adds	r3, r5, #1
   840e6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   840ea:	d1f0      	bne.n	840ce <_fwalk+0x16>
   840ec:	683f      	ldr	r7, [r7, #0]
   840ee:	2f00      	cmp	r7, #0
   840f0:	d1e9      	bne.n	840c6 <_fwalk+0xe>
   840f2:	4630      	mov	r0, r6
   840f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   840f8:	463e      	mov	r6, r7
   840fa:	4630      	mov	r0, r6
   840fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084100 <__locale_charset>:
   84100:	4800      	ldr	r0, [pc, #0]	; (84104 <__locale_charset+0x4>)
   84102:	4770      	bx	lr
   84104:	20070574 	.word	0x20070574

00084108 <__locale_mb_cur_max>:
   84108:	4b01      	ldr	r3, [pc, #4]	; (84110 <__locale_mb_cur_max+0x8>)
   8410a:	6818      	ldr	r0, [r3, #0]
   8410c:	4770      	bx	lr
   8410e:	bf00      	nop
   84110:	20070594 	.word	0x20070594

00084114 <__smakebuf_r>:
   84114:	b5f0      	push	{r4, r5, r6, r7, lr}
   84116:	898b      	ldrh	r3, [r1, #12]
   84118:	b091      	sub	sp, #68	; 0x44
   8411a:	b29a      	uxth	r2, r3
   8411c:	0796      	lsls	r6, r2, #30
   8411e:	460c      	mov	r4, r1
   84120:	4605      	mov	r5, r0
   84122:	d437      	bmi.n	84194 <__smakebuf_r+0x80>
   84124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84128:	2900      	cmp	r1, #0
   8412a:	db17      	blt.n	8415c <__smakebuf_r+0x48>
   8412c:	aa01      	add	r2, sp, #4
   8412e:	f000 ffaf 	bl	85090 <_fstat_r>
   84132:	2800      	cmp	r0, #0
   84134:	db10      	blt.n	84158 <__smakebuf_r+0x44>
   84136:	9b02      	ldr	r3, [sp, #8]
   84138:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8413c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   84140:	424f      	negs	r7, r1
   84142:	414f      	adcs	r7, r1
   84144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84148:	d02c      	beq.n	841a4 <__smakebuf_r+0x90>
   8414a:	89a3      	ldrh	r3, [r4, #12]
   8414c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84150:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84154:	81a3      	strh	r3, [r4, #12]
   84156:	e00b      	b.n	84170 <__smakebuf_r+0x5c>
   84158:	89a3      	ldrh	r3, [r4, #12]
   8415a:	b29a      	uxth	r2, r3
   8415c:	f012 0f80 	tst.w	r2, #128	; 0x80
   84160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84164:	81a3      	strh	r3, [r4, #12]
   84166:	bf14      	ite	ne
   84168:	2640      	movne	r6, #64	; 0x40
   8416a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8416e:	2700      	movs	r7, #0
   84170:	4628      	mov	r0, r5
   84172:	4631      	mov	r1, r6
   84174:	f000 f846 	bl	84204 <_malloc_r>
   84178:	89a3      	ldrh	r3, [r4, #12]
   8417a:	2800      	cmp	r0, #0
   8417c:	d029      	beq.n	841d2 <__smakebuf_r+0xbe>
   8417e:	4a1b      	ldr	r2, [pc, #108]	; (841ec <__smakebuf_r+0xd8>)
   84180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84184:	63ea      	str	r2, [r5, #60]	; 0x3c
   84186:	81a3      	strh	r3, [r4, #12]
   84188:	6020      	str	r0, [r4, #0]
   8418a:	6120      	str	r0, [r4, #16]
   8418c:	6166      	str	r6, [r4, #20]
   8418e:	b9a7      	cbnz	r7, 841ba <__smakebuf_r+0xa6>
   84190:	b011      	add	sp, #68	; 0x44
   84192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84194:	f101 0343 	add.w	r3, r1, #67	; 0x43
   84198:	2201      	movs	r2, #1
   8419a:	600b      	str	r3, [r1, #0]
   8419c:	610b      	str	r3, [r1, #16]
   8419e:	614a      	str	r2, [r1, #20]
   841a0:	b011      	add	sp, #68	; 0x44
   841a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   841a4:	4a12      	ldr	r2, [pc, #72]	; (841f0 <__smakebuf_r+0xdc>)
   841a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   841a8:	4293      	cmp	r3, r2
   841aa:	d1ce      	bne.n	8414a <__smakebuf_r+0x36>
   841ac:	89a3      	ldrh	r3, [r4, #12]
   841ae:	f44f 6680 	mov.w	r6, #1024	; 0x400
   841b2:	4333      	orrs	r3, r6
   841b4:	81a3      	strh	r3, [r4, #12]
   841b6:	64e6      	str	r6, [r4, #76]	; 0x4c
   841b8:	e7da      	b.n	84170 <__smakebuf_r+0x5c>
   841ba:	4628      	mov	r0, r5
   841bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   841c0:	f000 ff7a 	bl	850b8 <_isatty_r>
   841c4:	2800      	cmp	r0, #0
   841c6:	d0e3      	beq.n	84190 <__smakebuf_r+0x7c>
   841c8:	89a3      	ldrh	r3, [r4, #12]
   841ca:	f043 0301 	orr.w	r3, r3, #1
   841ce:	81a3      	strh	r3, [r4, #12]
   841d0:	e7de      	b.n	84190 <__smakebuf_r+0x7c>
   841d2:	059a      	lsls	r2, r3, #22
   841d4:	d4dc      	bmi.n	84190 <__smakebuf_r+0x7c>
   841d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   841da:	f043 0302 	orr.w	r3, r3, #2
   841de:	2101      	movs	r1, #1
   841e0:	81a3      	strh	r3, [r4, #12]
   841e2:	6022      	str	r2, [r4, #0]
   841e4:	6122      	str	r2, [r4, #16]
   841e6:	6161      	str	r1, [r4, #20]
   841e8:	e7d2      	b.n	84190 <__smakebuf_r+0x7c>
   841ea:	bf00      	nop
   841ec:	00083975 	.word	0x00083975
   841f0:	00084dd1 	.word	0x00084dd1

000841f4 <malloc>:
   841f4:	4b02      	ldr	r3, [pc, #8]	; (84200 <malloc+0xc>)
   841f6:	4601      	mov	r1, r0
   841f8:	6818      	ldr	r0, [r3, #0]
   841fa:	f000 b803 	b.w	84204 <_malloc_r>
   841fe:	bf00      	nop
   84200:	20070570 	.word	0x20070570

00084204 <_malloc_r>:
   84204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84208:	f101 050b 	add.w	r5, r1, #11
   8420c:	2d16      	cmp	r5, #22
   8420e:	b083      	sub	sp, #12
   84210:	4606      	mov	r6, r0
   84212:	d927      	bls.n	84264 <_malloc_r+0x60>
   84214:	f035 0507 	bics.w	r5, r5, #7
   84218:	d427      	bmi.n	8426a <_malloc_r+0x66>
   8421a:	42a9      	cmp	r1, r5
   8421c:	d825      	bhi.n	8426a <_malloc_r+0x66>
   8421e:	4630      	mov	r0, r6
   84220:	f000 fbb2 	bl	84988 <__malloc_lock>
   84224:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84228:	d226      	bcs.n	84278 <_malloc_r+0x74>
   8422a:	4fc1      	ldr	r7, [pc, #772]	; (84530 <_malloc_r+0x32c>)
   8422c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   84230:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   84234:	68dc      	ldr	r4, [r3, #12]
   84236:	429c      	cmp	r4, r3
   84238:	f000 81d2 	beq.w	845e0 <_malloc_r+0x3dc>
   8423c:	6863      	ldr	r3, [r4, #4]
   8423e:	68e2      	ldr	r2, [r4, #12]
   84240:	f023 0303 	bic.w	r3, r3, #3
   84244:	4423      	add	r3, r4
   84246:	6858      	ldr	r0, [r3, #4]
   84248:	68a1      	ldr	r1, [r4, #8]
   8424a:	f040 0501 	orr.w	r5, r0, #1
   8424e:	60ca      	str	r2, [r1, #12]
   84250:	4630      	mov	r0, r6
   84252:	6091      	str	r1, [r2, #8]
   84254:	605d      	str	r5, [r3, #4]
   84256:	f000 fb99 	bl	8498c <__malloc_unlock>
   8425a:	3408      	adds	r4, #8
   8425c:	4620      	mov	r0, r4
   8425e:	b003      	add	sp, #12
   84260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84264:	2510      	movs	r5, #16
   84266:	42a9      	cmp	r1, r5
   84268:	d9d9      	bls.n	8421e <_malloc_r+0x1a>
   8426a:	2400      	movs	r4, #0
   8426c:	230c      	movs	r3, #12
   8426e:	4620      	mov	r0, r4
   84270:	6033      	str	r3, [r6, #0]
   84272:	b003      	add	sp, #12
   84274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84278:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   8427c:	f000 8089 	beq.w	84392 <_malloc_r+0x18e>
   84280:	f1bc 0f04 	cmp.w	ip, #4
   84284:	f200 8160 	bhi.w	84548 <_malloc_r+0x344>
   84288:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   8428c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   84290:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84294:	4fa6      	ldr	r7, [pc, #664]	; (84530 <_malloc_r+0x32c>)
   84296:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8429a:	68cc      	ldr	r4, [r1, #12]
   8429c:	42a1      	cmp	r1, r4
   8429e:	d105      	bne.n	842ac <_malloc_r+0xa8>
   842a0:	e00c      	b.n	842bc <_malloc_r+0xb8>
   842a2:	2b00      	cmp	r3, #0
   842a4:	da79      	bge.n	8439a <_malloc_r+0x196>
   842a6:	68e4      	ldr	r4, [r4, #12]
   842a8:	42a1      	cmp	r1, r4
   842aa:	d007      	beq.n	842bc <_malloc_r+0xb8>
   842ac:	6862      	ldr	r2, [r4, #4]
   842ae:	f022 0203 	bic.w	r2, r2, #3
   842b2:	1b53      	subs	r3, r2, r5
   842b4:	2b0f      	cmp	r3, #15
   842b6:	ddf4      	ble.n	842a2 <_malloc_r+0x9e>
   842b8:	f10c 3cff 	add.w	ip, ip, #4294967295
   842bc:	f10c 0c01 	add.w	ip, ip, #1
   842c0:	4b9b      	ldr	r3, [pc, #620]	; (84530 <_malloc_r+0x32c>)
   842c2:	693c      	ldr	r4, [r7, #16]
   842c4:	f103 0e08 	add.w	lr, r3, #8
   842c8:	4574      	cmp	r4, lr
   842ca:	f000 817e 	beq.w	845ca <_malloc_r+0x3c6>
   842ce:	6861      	ldr	r1, [r4, #4]
   842d0:	f021 0103 	bic.w	r1, r1, #3
   842d4:	1b4a      	subs	r2, r1, r5
   842d6:	2a0f      	cmp	r2, #15
   842d8:	f300 8164 	bgt.w	845a4 <_malloc_r+0x3a0>
   842dc:	2a00      	cmp	r2, #0
   842de:	f8c3 e014 	str.w	lr, [r3, #20]
   842e2:	f8c3 e010 	str.w	lr, [r3, #16]
   842e6:	da69      	bge.n	843bc <_malloc_r+0x1b8>
   842e8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   842ec:	f080 813a 	bcs.w	84564 <_malloc_r+0x360>
   842f0:	08c9      	lsrs	r1, r1, #3
   842f2:	108a      	asrs	r2, r1, #2
   842f4:	f04f 0801 	mov.w	r8, #1
   842f8:	fa08 f802 	lsl.w	r8, r8, r2
   842fc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   84300:	685a      	ldr	r2, [r3, #4]
   84302:	6888      	ldr	r0, [r1, #8]
   84304:	ea48 0202 	orr.w	r2, r8, r2
   84308:	60a0      	str	r0, [r4, #8]
   8430a:	60e1      	str	r1, [r4, #12]
   8430c:	605a      	str	r2, [r3, #4]
   8430e:	608c      	str	r4, [r1, #8]
   84310:	60c4      	str	r4, [r0, #12]
   84312:	ea4f 03ac 	mov.w	r3, ip, asr #2
   84316:	2001      	movs	r0, #1
   84318:	4098      	lsls	r0, r3
   8431a:	4290      	cmp	r0, r2
   8431c:	d85b      	bhi.n	843d6 <_malloc_r+0x1d2>
   8431e:	4202      	tst	r2, r0
   84320:	d106      	bne.n	84330 <_malloc_r+0x12c>
   84322:	f02c 0c03 	bic.w	ip, ip, #3
   84326:	0040      	lsls	r0, r0, #1
   84328:	4202      	tst	r2, r0
   8432a:	f10c 0c04 	add.w	ip, ip, #4
   8432e:	d0fa      	beq.n	84326 <_malloc_r+0x122>
   84330:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   84334:	4644      	mov	r4, r8
   84336:	46e1      	mov	r9, ip
   84338:	68e3      	ldr	r3, [r4, #12]
   8433a:	429c      	cmp	r4, r3
   8433c:	d107      	bne.n	8434e <_malloc_r+0x14a>
   8433e:	e146      	b.n	845ce <_malloc_r+0x3ca>
   84340:	2a00      	cmp	r2, #0
   84342:	f280 8157 	bge.w	845f4 <_malloc_r+0x3f0>
   84346:	68db      	ldr	r3, [r3, #12]
   84348:	429c      	cmp	r4, r3
   8434a:	f000 8140 	beq.w	845ce <_malloc_r+0x3ca>
   8434e:	6859      	ldr	r1, [r3, #4]
   84350:	f021 0103 	bic.w	r1, r1, #3
   84354:	1b4a      	subs	r2, r1, r5
   84356:	2a0f      	cmp	r2, #15
   84358:	ddf2      	ble.n	84340 <_malloc_r+0x13c>
   8435a:	461c      	mov	r4, r3
   8435c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   84360:	68d9      	ldr	r1, [r3, #12]
   84362:	f045 0901 	orr.w	r9, r5, #1
   84366:	f042 0801 	orr.w	r8, r2, #1
   8436a:	441d      	add	r5, r3
   8436c:	f8c3 9004 	str.w	r9, [r3, #4]
   84370:	4630      	mov	r0, r6
   84372:	f8cc 100c 	str.w	r1, [ip, #12]
   84376:	f8c1 c008 	str.w	ip, [r1, #8]
   8437a:	617d      	str	r5, [r7, #20]
   8437c:	613d      	str	r5, [r7, #16]
   8437e:	f8c5 e00c 	str.w	lr, [r5, #12]
   84382:	f8c5 e008 	str.w	lr, [r5, #8]
   84386:	f8c5 8004 	str.w	r8, [r5, #4]
   8438a:	50aa      	str	r2, [r5, r2]
   8438c:	f000 fafe 	bl	8498c <__malloc_unlock>
   84390:	e764      	b.n	8425c <_malloc_r+0x58>
   84392:	217e      	movs	r1, #126	; 0x7e
   84394:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   84398:	e77c      	b.n	84294 <_malloc_r+0x90>
   8439a:	4422      	add	r2, r4
   8439c:	6850      	ldr	r0, [r2, #4]
   8439e:	68e3      	ldr	r3, [r4, #12]
   843a0:	68a1      	ldr	r1, [r4, #8]
   843a2:	f040 0501 	orr.w	r5, r0, #1
   843a6:	60cb      	str	r3, [r1, #12]
   843a8:	4630      	mov	r0, r6
   843aa:	6099      	str	r1, [r3, #8]
   843ac:	6055      	str	r5, [r2, #4]
   843ae:	f000 faed 	bl	8498c <__malloc_unlock>
   843b2:	3408      	adds	r4, #8
   843b4:	4620      	mov	r0, r4
   843b6:	b003      	add	sp, #12
   843b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   843bc:	4421      	add	r1, r4
   843be:	684b      	ldr	r3, [r1, #4]
   843c0:	4630      	mov	r0, r6
   843c2:	f043 0301 	orr.w	r3, r3, #1
   843c6:	604b      	str	r3, [r1, #4]
   843c8:	f000 fae0 	bl	8498c <__malloc_unlock>
   843cc:	3408      	adds	r4, #8
   843ce:	4620      	mov	r0, r4
   843d0:	b003      	add	sp, #12
   843d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   843d6:	68bc      	ldr	r4, [r7, #8]
   843d8:	6863      	ldr	r3, [r4, #4]
   843da:	f023 0903 	bic.w	r9, r3, #3
   843de:	45a9      	cmp	r9, r5
   843e0:	d304      	bcc.n	843ec <_malloc_r+0x1e8>
   843e2:	ebc5 0309 	rsb	r3, r5, r9
   843e6:	2b0f      	cmp	r3, #15
   843e8:	f300 8091 	bgt.w	8450e <_malloc_r+0x30a>
   843ec:	4b51      	ldr	r3, [pc, #324]	; (84534 <_malloc_r+0x330>)
   843ee:	4a52      	ldr	r2, [pc, #328]	; (84538 <_malloc_r+0x334>)
   843f0:	6819      	ldr	r1, [r3, #0]
   843f2:	6813      	ldr	r3, [r2, #0]
   843f4:	eb05 0a01 	add.w	sl, r5, r1
   843f8:	3301      	adds	r3, #1
   843fa:	eb04 0b09 	add.w	fp, r4, r9
   843fe:	f000 8161 	beq.w	846c4 <_malloc_r+0x4c0>
   84402:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   84406:	f10a 0a0f 	add.w	sl, sl, #15
   8440a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8440e:	f02a 0a0f 	bic.w	sl, sl, #15
   84412:	4630      	mov	r0, r6
   84414:	4651      	mov	r1, sl
   84416:	9201      	str	r2, [sp, #4]
   84418:	f000 fc9a 	bl	84d50 <_sbrk_r>
   8441c:	f1b0 3fff 	cmp.w	r0, #4294967295
   84420:	4680      	mov	r8, r0
   84422:	9a01      	ldr	r2, [sp, #4]
   84424:	f000 8101 	beq.w	8462a <_malloc_r+0x426>
   84428:	4583      	cmp	fp, r0
   8442a:	f200 80fb 	bhi.w	84624 <_malloc_r+0x420>
   8442e:	f8df c114 	ldr.w	ip, [pc, #276]	; 84544 <_malloc_r+0x340>
   84432:	45c3      	cmp	fp, r8
   84434:	f8dc 3000 	ldr.w	r3, [ip]
   84438:	4453      	add	r3, sl
   8443a:	f8cc 3000 	str.w	r3, [ip]
   8443e:	f000 814a 	beq.w	846d6 <_malloc_r+0x4d2>
   84442:	6812      	ldr	r2, [r2, #0]
   84444:	493c      	ldr	r1, [pc, #240]	; (84538 <_malloc_r+0x334>)
   84446:	3201      	adds	r2, #1
   84448:	bf1b      	ittet	ne
   8444a:	ebcb 0b08 	rsbne	fp, fp, r8
   8444e:	445b      	addne	r3, fp
   84450:	f8c1 8000 	streq.w	r8, [r1]
   84454:	f8cc 3000 	strne.w	r3, [ip]
   84458:	f018 0307 	ands.w	r3, r8, #7
   8445c:	f000 8114 	beq.w	84688 <_malloc_r+0x484>
   84460:	f1c3 0208 	rsb	r2, r3, #8
   84464:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   84468:	4490      	add	r8, r2
   8446a:	3308      	adds	r3, #8
   8446c:	44c2      	add	sl, r8
   8446e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   84472:	ebca 0a03 	rsb	sl, sl, r3
   84476:	4651      	mov	r1, sl
   84478:	4630      	mov	r0, r6
   8447a:	f8cd c004 	str.w	ip, [sp, #4]
   8447e:	f000 fc67 	bl	84d50 <_sbrk_r>
   84482:	1c43      	adds	r3, r0, #1
   84484:	f8dd c004 	ldr.w	ip, [sp, #4]
   84488:	f000 8135 	beq.w	846f6 <_malloc_r+0x4f2>
   8448c:	ebc8 0200 	rsb	r2, r8, r0
   84490:	4452      	add	r2, sl
   84492:	f042 0201 	orr.w	r2, r2, #1
   84496:	f8dc 3000 	ldr.w	r3, [ip]
   8449a:	42bc      	cmp	r4, r7
   8449c:	4453      	add	r3, sl
   8449e:	f8c7 8008 	str.w	r8, [r7, #8]
   844a2:	f8cc 3000 	str.w	r3, [ip]
   844a6:	f8c8 2004 	str.w	r2, [r8, #4]
   844aa:	f8df a098 	ldr.w	sl, [pc, #152]	; 84544 <_malloc_r+0x340>
   844ae:	d015      	beq.n	844dc <_malloc_r+0x2d8>
   844b0:	f1b9 0f0f 	cmp.w	r9, #15
   844b4:	f240 80eb 	bls.w	8468e <_malloc_r+0x48a>
   844b8:	6861      	ldr	r1, [r4, #4]
   844ba:	f1a9 020c 	sub.w	r2, r9, #12
   844be:	f022 0207 	bic.w	r2, r2, #7
   844c2:	f001 0101 	and.w	r1, r1, #1
   844c6:	ea42 0e01 	orr.w	lr, r2, r1
   844ca:	2005      	movs	r0, #5
   844cc:	18a1      	adds	r1, r4, r2
   844ce:	2a0f      	cmp	r2, #15
   844d0:	f8c4 e004 	str.w	lr, [r4, #4]
   844d4:	6048      	str	r0, [r1, #4]
   844d6:	6088      	str	r0, [r1, #8]
   844d8:	f200 8111 	bhi.w	846fe <_malloc_r+0x4fa>
   844dc:	4a17      	ldr	r2, [pc, #92]	; (8453c <_malloc_r+0x338>)
   844de:	68bc      	ldr	r4, [r7, #8]
   844e0:	6811      	ldr	r1, [r2, #0]
   844e2:	428b      	cmp	r3, r1
   844e4:	bf88      	it	hi
   844e6:	6013      	strhi	r3, [r2, #0]
   844e8:	4a15      	ldr	r2, [pc, #84]	; (84540 <_malloc_r+0x33c>)
   844ea:	6811      	ldr	r1, [r2, #0]
   844ec:	428b      	cmp	r3, r1
   844ee:	bf88      	it	hi
   844f0:	6013      	strhi	r3, [r2, #0]
   844f2:	6862      	ldr	r2, [r4, #4]
   844f4:	f022 0203 	bic.w	r2, r2, #3
   844f8:	4295      	cmp	r5, r2
   844fa:	ebc5 0302 	rsb	r3, r5, r2
   844fe:	d801      	bhi.n	84504 <_malloc_r+0x300>
   84500:	2b0f      	cmp	r3, #15
   84502:	dc04      	bgt.n	8450e <_malloc_r+0x30a>
   84504:	4630      	mov	r0, r6
   84506:	f000 fa41 	bl	8498c <__malloc_unlock>
   8450a:	2400      	movs	r4, #0
   8450c:	e6a6      	b.n	8425c <_malloc_r+0x58>
   8450e:	f045 0201 	orr.w	r2, r5, #1
   84512:	f043 0301 	orr.w	r3, r3, #1
   84516:	4425      	add	r5, r4
   84518:	6062      	str	r2, [r4, #4]
   8451a:	4630      	mov	r0, r6
   8451c:	60bd      	str	r5, [r7, #8]
   8451e:	606b      	str	r3, [r5, #4]
   84520:	f000 fa34 	bl	8498c <__malloc_unlock>
   84524:	3408      	adds	r4, #8
   84526:	4620      	mov	r0, r4
   84528:	b003      	add	sp, #12
   8452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8452e:	bf00      	nop
   84530:	20070598 	.word	0x20070598
   84534:	20070aec 	.word	0x20070aec
   84538:	200709a4 	.word	0x200709a4
   8453c:	20070ae8 	.word	0x20070ae8
   84540:	20070ae4 	.word	0x20070ae4
   84544:	20070af0 	.word	0x20070af0
   84548:	f1bc 0f14 	cmp.w	ip, #20
   8454c:	d961      	bls.n	84612 <_malloc_r+0x40e>
   8454e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   84552:	f200 808f 	bhi.w	84674 <_malloc_r+0x470>
   84556:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8455a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8455e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84562:	e697      	b.n	84294 <_malloc_r+0x90>
   84564:	0a4b      	lsrs	r3, r1, #9
   84566:	2b04      	cmp	r3, #4
   84568:	d958      	bls.n	8461c <_malloc_r+0x418>
   8456a:	2b14      	cmp	r3, #20
   8456c:	f200 80ad 	bhi.w	846ca <_malloc_r+0x4c6>
   84570:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   84574:	0050      	lsls	r0, r2, #1
   84576:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8457a:	6883      	ldr	r3, [r0, #8]
   8457c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 84738 <_malloc_r+0x534>
   84580:	4283      	cmp	r3, r0
   84582:	f000 808a 	beq.w	8469a <_malloc_r+0x496>
   84586:	685a      	ldr	r2, [r3, #4]
   84588:	f022 0203 	bic.w	r2, r2, #3
   8458c:	4291      	cmp	r1, r2
   8458e:	d202      	bcs.n	84596 <_malloc_r+0x392>
   84590:	689b      	ldr	r3, [r3, #8]
   84592:	4298      	cmp	r0, r3
   84594:	d1f7      	bne.n	84586 <_malloc_r+0x382>
   84596:	68d9      	ldr	r1, [r3, #12]
   84598:	687a      	ldr	r2, [r7, #4]
   8459a:	60e1      	str	r1, [r4, #12]
   8459c:	60a3      	str	r3, [r4, #8]
   8459e:	608c      	str	r4, [r1, #8]
   845a0:	60dc      	str	r4, [r3, #12]
   845a2:	e6b6      	b.n	84312 <_malloc_r+0x10e>
   845a4:	f045 0701 	orr.w	r7, r5, #1
   845a8:	f042 0101 	orr.w	r1, r2, #1
   845ac:	4425      	add	r5, r4
   845ae:	6067      	str	r7, [r4, #4]
   845b0:	4630      	mov	r0, r6
   845b2:	615d      	str	r5, [r3, #20]
   845b4:	611d      	str	r5, [r3, #16]
   845b6:	f8c5 e00c 	str.w	lr, [r5, #12]
   845ba:	f8c5 e008 	str.w	lr, [r5, #8]
   845be:	6069      	str	r1, [r5, #4]
   845c0:	50aa      	str	r2, [r5, r2]
   845c2:	3408      	adds	r4, #8
   845c4:	f000 f9e2 	bl	8498c <__malloc_unlock>
   845c8:	e648      	b.n	8425c <_malloc_r+0x58>
   845ca:	685a      	ldr	r2, [r3, #4]
   845cc:	e6a1      	b.n	84312 <_malloc_r+0x10e>
   845ce:	f109 0901 	add.w	r9, r9, #1
   845d2:	f019 0f03 	tst.w	r9, #3
   845d6:	f104 0408 	add.w	r4, r4, #8
   845da:	f47f aead 	bne.w	84338 <_malloc_r+0x134>
   845de:	e02d      	b.n	8463c <_malloc_r+0x438>
   845e0:	f104 0308 	add.w	r3, r4, #8
   845e4:	6964      	ldr	r4, [r4, #20]
   845e6:	42a3      	cmp	r3, r4
   845e8:	bf08      	it	eq
   845ea:	f10c 0c02 	addeq.w	ip, ip, #2
   845ee:	f43f ae67 	beq.w	842c0 <_malloc_r+0xbc>
   845f2:	e623      	b.n	8423c <_malloc_r+0x38>
   845f4:	4419      	add	r1, r3
   845f6:	6848      	ldr	r0, [r1, #4]
   845f8:	461c      	mov	r4, r3
   845fa:	f854 2f08 	ldr.w	r2, [r4, #8]!
   845fe:	68db      	ldr	r3, [r3, #12]
   84600:	f040 0501 	orr.w	r5, r0, #1
   84604:	604d      	str	r5, [r1, #4]
   84606:	4630      	mov	r0, r6
   84608:	60d3      	str	r3, [r2, #12]
   8460a:	609a      	str	r2, [r3, #8]
   8460c:	f000 f9be 	bl	8498c <__malloc_unlock>
   84610:	e624      	b.n	8425c <_malloc_r+0x58>
   84612:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   84616:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8461a:	e63b      	b.n	84294 <_malloc_r+0x90>
   8461c:	098a      	lsrs	r2, r1, #6
   8461e:	3238      	adds	r2, #56	; 0x38
   84620:	0050      	lsls	r0, r2, #1
   84622:	e7a8      	b.n	84576 <_malloc_r+0x372>
   84624:	42bc      	cmp	r4, r7
   84626:	f43f af02 	beq.w	8442e <_malloc_r+0x22a>
   8462a:	68bc      	ldr	r4, [r7, #8]
   8462c:	6862      	ldr	r2, [r4, #4]
   8462e:	f022 0203 	bic.w	r2, r2, #3
   84632:	e761      	b.n	844f8 <_malloc_r+0x2f4>
   84634:	f8d8 8000 	ldr.w	r8, [r8]
   84638:	4598      	cmp	r8, r3
   8463a:	d17a      	bne.n	84732 <_malloc_r+0x52e>
   8463c:	f01c 0f03 	tst.w	ip, #3
   84640:	f1a8 0308 	sub.w	r3, r8, #8
   84644:	f10c 3cff 	add.w	ip, ip, #4294967295
   84648:	d1f4      	bne.n	84634 <_malloc_r+0x430>
   8464a:	687b      	ldr	r3, [r7, #4]
   8464c:	ea23 0300 	bic.w	r3, r3, r0
   84650:	607b      	str	r3, [r7, #4]
   84652:	0040      	lsls	r0, r0, #1
   84654:	4298      	cmp	r0, r3
   84656:	f63f aebe 	bhi.w	843d6 <_malloc_r+0x1d2>
   8465a:	2800      	cmp	r0, #0
   8465c:	f43f aebb 	beq.w	843d6 <_malloc_r+0x1d2>
   84660:	4203      	tst	r3, r0
   84662:	46cc      	mov	ip, r9
   84664:	f47f ae64 	bne.w	84330 <_malloc_r+0x12c>
   84668:	0040      	lsls	r0, r0, #1
   8466a:	4203      	tst	r3, r0
   8466c:	f10c 0c04 	add.w	ip, ip, #4
   84670:	d0fa      	beq.n	84668 <_malloc_r+0x464>
   84672:	e65d      	b.n	84330 <_malloc_r+0x12c>
   84674:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   84678:	d819      	bhi.n	846ae <_malloc_r+0x4aa>
   8467a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8467e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   84682:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84686:	e605      	b.n	84294 <_malloc_r+0x90>
   84688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8468c:	e6ee      	b.n	8446c <_malloc_r+0x268>
   8468e:	2301      	movs	r3, #1
   84690:	f8c8 3004 	str.w	r3, [r8, #4]
   84694:	4644      	mov	r4, r8
   84696:	2200      	movs	r2, #0
   84698:	e72e      	b.n	844f8 <_malloc_r+0x2f4>
   8469a:	1092      	asrs	r2, r2, #2
   8469c:	2001      	movs	r0, #1
   8469e:	4090      	lsls	r0, r2
   846a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   846a4:	4619      	mov	r1, r3
   846a6:	4302      	orrs	r2, r0
   846a8:	f8c8 2004 	str.w	r2, [r8, #4]
   846ac:	e775      	b.n	8459a <_malloc_r+0x396>
   846ae:	f240 5354 	movw	r3, #1364	; 0x554
   846b2:	459c      	cmp	ip, r3
   846b4:	d81b      	bhi.n	846ee <_malloc_r+0x4ea>
   846b6:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   846ba:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   846be:	ea4f 014c 	mov.w	r1, ip, lsl #1
   846c2:	e5e7      	b.n	84294 <_malloc_r+0x90>
   846c4:	f10a 0a10 	add.w	sl, sl, #16
   846c8:	e6a3      	b.n	84412 <_malloc_r+0x20e>
   846ca:	2b54      	cmp	r3, #84	; 0x54
   846cc:	d81f      	bhi.n	8470e <_malloc_r+0x50a>
   846ce:	0b0a      	lsrs	r2, r1, #12
   846d0:	326e      	adds	r2, #110	; 0x6e
   846d2:	0050      	lsls	r0, r2, #1
   846d4:	e74f      	b.n	84576 <_malloc_r+0x372>
   846d6:	f3cb 010b 	ubfx	r1, fp, #0, #12
   846da:	2900      	cmp	r1, #0
   846dc:	f47f aeb1 	bne.w	84442 <_malloc_r+0x23e>
   846e0:	eb0a 0109 	add.w	r1, sl, r9
   846e4:	68ba      	ldr	r2, [r7, #8]
   846e6:	f041 0101 	orr.w	r1, r1, #1
   846ea:	6051      	str	r1, [r2, #4]
   846ec:	e6f6      	b.n	844dc <_malloc_r+0x2d8>
   846ee:	21fc      	movs	r1, #252	; 0xfc
   846f0:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   846f4:	e5ce      	b.n	84294 <_malloc_r+0x90>
   846f6:	2201      	movs	r2, #1
   846f8:	f04f 0a00 	mov.w	sl, #0
   846fc:	e6cb      	b.n	84496 <_malloc_r+0x292>
   846fe:	f104 0108 	add.w	r1, r4, #8
   84702:	4630      	mov	r0, r6
   84704:	f7ff fa80 	bl	83c08 <_free_r>
   84708:	f8da 3000 	ldr.w	r3, [sl]
   8470c:	e6e6      	b.n	844dc <_malloc_r+0x2d8>
   8470e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84712:	d803      	bhi.n	8471c <_malloc_r+0x518>
   84714:	0bca      	lsrs	r2, r1, #15
   84716:	3277      	adds	r2, #119	; 0x77
   84718:	0050      	lsls	r0, r2, #1
   8471a:	e72c      	b.n	84576 <_malloc_r+0x372>
   8471c:	f240 5254 	movw	r2, #1364	; 0x554
   84720:	4293      	cmp	r3, r2
   84722:	d803      	bhi.n	8472c <_malloc_r+0x528>
   84724:	0c8a      	lsrs	r2, r1, #18
   84726:	327c      	adds	r2, #124	; 0x7c
   84728:	0050      	lsls	r0, r2, #1
   8472a:	e724      	b.n	84576 <_malloc_r+0x372>
   8472c:	20fc      	movs	r0, #252	; 0xfc
   8472e:	227e      	movs	r2, #126	; 0x7e
   84730:	e721      	b.n	84576 <_malloc_r+0x372>
   84732:	687b      	ldr	r3, [r7, #4]
   84734:	e78d      	b.n	84652 <_malloc_r+0x44e>
   84736:	bf00      	nop
   84738:	20070598 	.word	0x20070598

0008473c <memchr>:
   8473c:	0783      	lsls	r3, r0, #30
   8473e:	b470      	push	{r4, r5, r6}
   84740:	b2c9      	uxtb	r1, r1
   84742:	d040      	beq.n	847c6 <memchr+0x8a>
   84744:	1e54      	subs	r4, r2, #1
   84746:	b32a      	cbz	r2, 84794 <memchr+0x58>
   84748:	7803      	ldrb	r3, [r0, #0]
   8474a:	428b      	cmp	r3, r1
   8474c:	d023      	beq.n	84796 <memchr+0x5a>
   8474e:	1c43      	adds	r3, r0, #1
   84750:	e004      	b.n	8475c <memchr+0x20>
   84752:	b1fc      	cbz	r4, 84794 <memchr+0x58>
   84754:	7805      	ldrb	r5, [r0, #0]
   84756:	4614      	mov	r4, r2
   84758:	428d      	cmp	r5, r1
   8475a:	d01c      	beq.n	84796 <memchr+0x5a>
   8475c:	f013 0f03 	tst.w	r3, #3
   84760:	4618      	mov	r0, r3
   84762:	f104 32ff 	add.w	r2, r4, #4294967295
   84766:	f103 0301 	add.w	r3, r3, #1
   8476a:	d1f2      	bne.n	84752 <memchr+0x16>
   8476c:	2c03      	cmp	r4, #3
   8476e:	d814      	bhi.n	8479a <memchr+0x5e>
   84770:	1e65      	subs	r5, r4, #1
   84772:	b354      	cbz	r4, 847ca <memchr+0x8e>
   84774:	7803      	ldrb	r3, [r0, #0]
   84776:	428b      	cmp	r3, r1
   84778:	d00d      	beq.n	84796 <memchr+0x5a>
   8477a:	1c42      	adds	r2, r0, #1
   8477c:	2300      	movs	r3, #0
   8477e:	e002      	b.n	84786 <memchr+0x4a>
   84780:	7804      	ldrb	r4, [r0, #0]
   84782:	428c      	cmp	r4, r1
   84784:	d007      	beq.n	84796 <memchr+0x5a>
   84786:	42ab      	cmp	r3, r5
   84788:	4610      	mov	r0, r2
   8478a:	f103 0301 	add.w	r3, r3, #1
   8478e:	f102 0201 	add.w	r2, r2, #1
   84792:	d1f5      	bne.n	84780 <memchr+0x44>
   84794:	2000      	movs	r0, #0
   84796:	bc70      	pop	{r4, r5, r6}
   84798:	4770      	bx	lr
   8479a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   8479e:	4603      	mov	r3, r0
   847a0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   847a4:	681a      	ldr	r2, [r3, #0]
   847a6:	4618      	mov	r0, r3
   847a8:	4072      	eors	r2, r6
   847aa:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   847ae:	ea25 0202 	bic.w	r2, r5, r2
   847b2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   847b6:	f103 0304 	add.w	r3, r3, #4
   847ba:	d1d9      	bne.n	84770 <memchr+0x34>
   847bc:	3c04      	subs	r4, #4
   847be:	2c03      	cmp	r4, #3
   847c0:	4618      	mov	r0, r3
   847c2:	d8ef      	bhi.n	847a4 <memchr+0x68>
   847c4:	e7d4      	b.n	84770 <memchr+0x34>
   847c6:	4614      	mov	r4, r2
   847c8:	e7d0      	b.n	8476c <memchr+0x30>
   847ca:	4620      	mov	r0, r4
   847cc:	e7e3      	b.n	84796 <memchr+0x5a>
   847ce:	bf00      	nop

000847d0 <memcpy>:
   847d0:	4684      	mov	ip, r0
   847d2:	ea41 0300 	orr.w	r3, r1, r0
   847d6:	f013 0303 	ands.w	r3, r3, #3
   847da:	d149      	bne.n	84870 <memcpy+0xa0>
   847dc:	3a40      	subs	r2, #64	; 0x40
   847de:	d323      	bcc.n	84828 <memcpy+0x58>
   847e0:	680b      	ldr	r3, [r1, #0]
   847e2:	6003      	str	r3, [r0, #0]
   847e4:	684b      	ldr	r3, [r1, #4]
   847e6:	6043      	str	r3, [r0, #4]
   847e8:	688b      	ldr	r3, [r1, #8]
   847ea:	6083      	str	r3, [r0, #8]
   847ec:	68cb      	ldr	r3, [r1, #12]
   847ee:	60c3      	str	r3, [r0, #12]
   847f0:	690b      	ldr	r3, [r1, #16]
   847f2:	6103      	str	r3, [r0, #16]
   847f4:	694b      	ldr	r3, [r1, #20]
   847f6:	6143      	str	r3, [r0, #20]
   847f8:	698b      	ldr	r3, [r1, #24]
   847fa:	6183      	str	r3, [r0, #24]
   847fc:	69cb      	ldr	r3, [r1, #28]
   847fe:	61c3      	str	r3, [r0, #28]
   84800:	6a0b      	ldr	r3, [r1, #32]
   84802:	6203      	str	r3, [r0, #32]
   84804:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84806:	6243      	str	r3, [r0, #36]	; 0x24
   84808:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8480a:	6283      	str	r3, [r0, #40]	; 0x28
   8480c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8480e:	62c3      	str	r3, [r0, #44]	; 0x2c
   84810:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84812:	6303      	str	r3, [r0, #48]	; 0x30
   84814:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84816:	6343      	str	r3, [r0, #52]	; 0x34
   84818:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8481a:	6383      	str	r3, [r0, #56]	; 0x38
   8481c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8481e:	63c3      	str	r3, [r0, #60]	; 0x3c
   84820:	3040      	adds	r0, #64	; 0x40
   84822:	3140      	adds	r1, #64	; 0x40
   84824:	3a40      	subs	r2, #64	; 0x40
   84826:	d2db      	bcs.n	847e0 <memcpy+0x10>
   84828:	3230      	adds	r2, #48	; 0x30
   8482a:	d30b      	bcc.n	84844 <memcpy+0x74>
   8482c:	680b      	ldr	r3, [r1, #0]
   8482e:	6003      	str	r3, [r0, #0]
   84830:	684b      	ldr	r3, [r1, #4]
   84832:	6043      	str	r3, [r0, #4]
   84834:	688b      	ldr	r3, [r1, #8]
   84836:	6083      	str	r3, [r0, #8]
   84838:	68cb      	ldr	r3, [r1, #12]
   8483a:	60c3      	str	r3, [r0, #12]
   8483c:	3010      	adds	r0, #16
   8483e:	3110      	adds	r1, #16
   84840:	3a10      	subs	r2, #16
   84842:	d2f3      	bcs.n	8482c <memcpy+0x5c>
   84844:	320c      	adds	r2, #12
   84846:	d305      	bcc.n	84854 <memcpy+0x84>
   84848:	f851 3b04 	ldr.w	r3, [r1], #4
   8484c:	f840 3b04 	str.w	r3, [r0], #4
   84850:	3a04      	subs	r2, #4
   84852:	d2f9      	bcs.n	84848 <memcpy+0x78>
   84854:	3204      	adds	r2, #4
   84856:	d008      	beq.n	8486a <memcpy+0x9a>
   84858:	07d2      	lsls	r2, r2, #31
   8485a:	bf1c      	itt	ne
   8485c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84860:	f800 3b01 	strbne.w	r3, [r0], #1
   84864:	d301      	bcc.n	8486a <memcpy+0x9a>
   84866:	880b      	ldrh	r3, [r1, #0]
   84868:	8003      	strh	r3, [r0, #0]
   8486a:	4660      	mov	r0, ip
   8486c:	4770      	bx	lr
   8486e:	bf00      	nop
   84870:	2a08      	cmp	r2, #8
   84872:	d313      	bcc.n	8489c <memcpy+0xcc>
   84874:	078b      	lsls	r3, r1, #30
   84876:	d0b1      	beq.n	847dc <memcpy+0xc>
   84878:	f010 0303 	ands.w	r3, r0, #3
   8487c:	d0ae      	beq.n	847dc <memcpy+0xc>
   8487e:	f1c3 0304 	rsb	r3, r3, #4
   84882:	1ad2      	subs	r2, r2, r3
   84884:	07db      	lsls	r3, r3, #31
   84886:	bf1c      	itt	ne
   84888:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8488c:	f800 3b01 	strbne.w	r3, [r0], #1
   84890:	d3a4      	bcc.n	847dc <memcpy+0xc>
   84892:	f831 3b02 	ldrh.w	r3, [r1], #2
   84896:	f820 3b02 	strh.w	r3, [r0], #2
   8489a:	e79f      	b.n	847dc <memcpy+0xc>
   8489c:	3a04      	subs	r2, #4
   8489e:	d3d9      	bcc.n	84854 <memcpy+0x84>
   848a0:	3a01      	subs	r2, #1
   848a2:	f811 3b01 	ldrb.w	r3, [r1], #1
   848a6:	f800 3b01 	strb.w	r3, [r0], #1
   848aa:	d2f9      	bcs.n	848a0 <memcpy+0xd0>
   848ac:	780b      	ldrb	r3, [r1, #0]
   848ae:	7003      	strb	r3, [r0, #0]
   848b0:	784b      	ldrb	r3, [r1, #1]
   848b2:	7043      	strb	r3, [r0, #1]
   848b4:	788b      	ldrb	r3, [r1, #2]
   848b6:	7083      	strb	r3, [r0, #2]
   848b8:	4660      	mov	r0, ip
   848ba:	4770      	bx	lr

000848bc <memmove>:
   848bc:	4288      	cmp	r0, r1
   848be:	b4f0      	push	{r4, r5, r6, r7}
   848c0:	d910      	bls.n	848e4 <memmove+0x28>
   848c2:	188c      	adds	r4, r1, r2
   848c4:	42a0      	cmp	r0, r4
   848c6:	d20d      	bcs.n	848e4 <memmove+0x28>
   848c8:	1885      	adds	r5, r0, r2
   848ca:	1e53      	subs	r3, r2, #1
   848cc:	b142      	cbz	r2, 848e0 <memmove+0x24>
   848ce:	4621      	mov	r1, r4
   848d0:	462a      	mov	r2, r5
   848d2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   848d6:	3b01      	subs	r3, #1
   848d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   848dc:	1c5c      	adds	r4, r3, #1
   848de:	d1f8      	bne.n	848d2 <memmove+0x16>
   848e0:	bcf0      	pop	{r4, r5, r6, r7}
   848e2:	4770      	bx	lr
   848e4:	2a0f      	cmp	r2, #15
   848e6:	d944      	bls.n	84972 <memmove+0xb6>
   848e8:	ea40 0301 	orr.w	r3, r0, r1
   848ec:	079b      	lsls	r3, r3, #30
   848ee:	d144      	bne.n	8497a <memmove+0xbe>
   848f0:	f1a2 0710 	sub.w	r7, r2, #16
   848f4:	093f      	lsrs	r7, r7, #4
   848f6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   848fa:	3610      	adds	r6, #16
   848fc:	460c      	mov	r4, r1
   848fe:	4603      	mov	r3, r0
   84900:	6825      	ldr	r5, [r4, #0]
   84902:	3310      	adds	r3, #16
   84904:	f843 5c10 	str.w	r5, [r3, #-16]
   84908:	6865      	ldr	r5, [r4, #4]
   8490a:	3410      	adds	r4, #16
   8490c:	f843 5c0c 	str.w	r5, [r3, #-12]
   84910:	f854 5c08 	ldr.w	r5, [r4, #-8]
   84914:	f843 5c08 	str.w	r5, [r3, #-8]
   84918:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8491c:	f843 5c04 	str.w	r5, [r3, #-4]
   84920:	42b3      	cmp	r3, r6
   84922:	d1ed      	bne.n	84900 <memmove+0x44>
   84924:	1c7b      	adds	r3, r7, #1
   84926:	f002 0c0f 	and.w	ip, r2, #15
   8492a:	011b      	lsls	r3, r3, #4
   8492c:	f1bc 0f03 	cmp.w	ip, #3
   84930:	4419      	add	r1, r3
   84932:	4403      	add	r3, r0
   84934:	d923      	bls.n	8497e <memmove+0xc2>
   84936:	460e      	mov	r6, r1
   84938:	461d      	mov	r5, r3
   8493a:	4664      	mov	r4, ip
   8493c:	f856 7b04 	ldr.w	r7, [r6], #4
   84940:	3c04      	subs	r4, #4
   84942:	2c03      	cmp	r4, #3
   84944:	f845 7b04 	str.w	r7, [r5], #4
   84948:	d8f8      	bhi.n	8493c <memmove+0x80>
   8494a:	f1ac 0404 	sub.w	r4, ip, #4
   8494e:	f024 0403 	bic.w	r4, r4, #3
   84952:	3404      	adds	r4, #4
   84954:	f002 0203 	and.w	r2, r2, #3
   84958:	4423      	add	r3, r4
   8495a:	4421      	add	r1, r4
   8495c:	2a00      	cmp	r2, #0
   8495e:	d0bf      	beq.n	848e0 <memmove+0x24>
   84960:	441a      	add	r2, r3
   84962:	f811 4b01 	ldrb.w	r4, [r1], #1
   84966:	f803 4b01 	strb.w	r4, [r3], #1
   8496a:	4293      	cmp	r3, r2
   8496c:	d1f9      	bne.n	84962 <memmove+0xa6>
   8496e:	bcf0      	pop	{r4, r5, r6, r7}
   84970:	4770      	bx	lr
   84972:	4603      	mov	r3, r0
   84974:	2a00      	cmp	r2, #0
   84976:	d1f3      	bne.n	84960 <memmove+0xa4>
   84978:	e7b2      	b.n	848e0 <memmove+0x24>
   8497a:	4603      	mov	r3, r0
   8497c:	e7f0      	b.n	84960 <memmove+0xa4>
   8497e:	4662      	mov	r2, ip
   84980:	2a00      	cmp	r2, #0
   84982:	d1ed      	bne.n	84960 <memmove+0xa4>
   84984:	e7ac      	b.n	848e0 <memmove+0x24>
   84986:	bf00      	nop

00084988 <__malloc_lock>:
   84988:	4770      	bx	lr
   8498a:	bf00      	nop

0008498c <__malloc_unlock>:
   8498c:	4770      	bx	lr
   8498e:	bf00      	nop

00084990 <_realloc_r>:
   84990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84994:	460c      	mov	r4, r1
   84996:	b083      	sub	sp, #12
   84998:	4690      	mov	r8, r2
   8499a:	4681      	mov	r9, r0
   8499c:	2900      	cmp	r1, #0
   8499e:	f000 80ba 	beq.w	84b16 <_realloc_r+0x186>
   849a2:	f7ff fff1 	bl	84988 <__malloc_lock>
   849a6:	f108 060b 	add.w	r6, r8, #11
   849aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   849ae:	2e16      	cmp	r6, #22
   849b0:	f023 0503 	bic.w	r5, r3, #3
   849b4:	f1a4 0708 	sub.w	r7, r4, #8
   849b8:	d84b      	bhi.n	84a52 <_realloc_r+0xc2>
   849ba:	2110      	movs	r1, #16
   849bc:	460e      	mov	r6, r1
   849be:	45b0      	cmp	r8, r6
   849c0:	d84c      	bhi.n	84a5c <_realloc_r+0xcc>
   849c2:	428d      	cmp	r5, r1
   849c4:	da51      	bge.n	84a6a <_realloc_r+0xda>
   849c6:	f8df b384 	ldr.w	fp, [pc, #900]	; 84d4c <_realloc_r+0x3bc>
   849ca:	1978      	adds	r0, r7, r5
   849cc:	f8db e008 	ldr.w	lr, [fp, #8]
   849d0:	4586      	cmp	lr, r0
   849d2:	f000 80a6 	beq.w	84b22 <_realloc_r+0x192>
   849d6:	6842      	ldr	r2, [r0, #4]
   849d8:	f022 0c01 	bic.w	ip, r2, #1
   849dc:	4484      	add	ip, r0
   849de:	f8dc c004 	ldr.w	ip, [ip, #4]
   849e2:	f01c 0f01 	tst.w	ip, #1
   849e6:	d054      	beq.n	84a92 <_realloc_r+0x102>
   849e8:	2200      	movs	r2, #0
   849ea:	4610      	mov	r0, r2
   849ec:	07db      	lsls	r3, r3, #31
   849ee:	d46f      	bmi.n	84ad0 <_realloc_r+0x140>
   849f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   849f4:	ebc3 0a07 	rsb	sl, r3, r7
   849f8:	f8da 3004 	ldr.w	r3, [sl, #4]
   849fc:	f023 0303 	bic.w	r3, r3, #3
   84a00:	442b      	add	r3, r5
   84a02:	2800      	cmp	r0, #0
   84a04:	d062      	beq.n	84acc <_realloc_r+0x13c>
   84a06:	4570      	cmp	r0, lr
   84a08:	f000 80e9 	beq.w	84bde <_realloc_r+0x24e>
   84a0c:	eb02 0e03 	add.w	lr, r2, r3
   84a10:	458e      	cmp	lr, r1
   84a12:	db5b      	blt.n	84acc <_realloc_r+0x13c>
   84a14:	68c3      	ldr	r3, [r0, #12]
   84a16:	6882      	ldr	r2, [r0, #8]
   84a18:	46d0      	mov	r8, sl
   84a1a:	60d3      	str	r3, [r2, #12]
   84a1c:	609a      	str	r2, [r3, #8]
   84a1e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   84a22:	f8da 300c 	ldr.w	r3, [sl, #12]
   84a26:	1f2a      	subs	r2, r5, #4
   84a28:	2a24      	cmp	r2, #36	; 0x24
   84a2a:	60cb      	str	r3, [r1, #12]
   84a2c:	6099      	str	r1, [r3, #8]
   84a2e:	f200 8123 	bhi.w	84c78 <_realloc_r+0x2e8>
   84a32:	2a13      	cmp	r2, #19
   84a34:	f240 80b0 	bls.w	84b98 <_realloc_r+0x208>
   84a38:	6823      	ldr	r3, [r4, #0]
   84a3a:	2a1b      	cmp	r2, #27
   84a3c:	f8ca 3008 	str.w	r3, [sl, #8]
   84a40:	6863      	ldr	r3, [r4, #4]
   84a42:	f8ca 300c 	str.w	r3, [sl, #12]
   84a46:	f200 812b 	bhi.w	84ca0 <_realloc_r+0x310>
   84a4a:	3408      	adds	r4, #8
   84a4c:	f10a 0310 	add.w	r3, sl, #16
   84a50:	e0a3      	b.n	84b9a <_realloc_r+0x20a>
   84a52:	f026 0607 	bic.w	r6, r6, #7
   84a56:	2e00      	cmp	r6, #0
   84a58:	4631      	mov	r1, r6
   84a5a:	dab0      	bge.n	849be <_realloc_r+0x2e>
   84a5c:	230c      	movs	r3, #12
   84a5e:	2000      	movs	r0, #0
   84a60:	f8c9 3000 	str.w	r3, [r9]
   84a64:	b003      	add	sp, #12
   84a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84a6a:	46a0      	mov	r8, r4
   84a6c:	1baa      	subs	r2, r5, r6
   84a6e:	2a0f      	cmp	r2, #15
   84a70:	f003 0301 	and.w	r3, r3, #1
   84a74:	d81a      	bhi.n	84aac <_realloc_r+0x11c>
   84a76:	432b      	orrs	r3, r5
   84a78:	607b      	str	r3, [r7, #4]
   84a7a:	443d      	add	r5, r7
   84a7c:	686b      	ldr	r3, [r5, #4]
   84a7e:	f043 0301 	orr.w	r3, r3, #1
   84a82:	606b      	str	r3, [r5, #4]
   84a84:	4648      	mov	r0, r9
   84a86:	f7ff ff81 	bl	8498c <__malloc_unlock>
   84a8a:	4640      	mov	r0, r8
   84a8c:	b003      	add	sp, #12
   84a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84a92:	f022 0203 	bic.w	r2, r2, #3
   84a96:	eb02 0c05 	add.w	ip, r2, r5
   84a9a:	458c      	cmp	ip, r1
   84a9c:	dba6      	blt.n	849ec <_realloc_r+0x5c>
   84a9e:	68c2      	ldr	r2, [r0, #12]
   84aa0:	6881      	ldr	r1, [r0, #8]
   84aa2:	46a0      	mov	r8, r4
   84aa4:	60ca      	str	r2, [r1, #12]
   84aa6:	4665      	mov	r5, ip
   84aa8:	6091      	str	r1, [r2, #8]
   84aaa:	e7df      	b.n	84a6c <_realloc_r+0xdc>
   84aac:	19b9      	adds	r1, r7, r6
   84aae:	4333      	orrs	r3, r6
   84ab0:	f042 0001 	orr.w	r0, r2, #1
   84ab4:	607b      	str	r3, [r7, #4]
   84ab6:	440a      	add	r2, r1
   84ab8:	6048      	str	r0, [r1, #4]
   84aba:	6853      	ldr	r3, [r2, #4]
   84abc:	3108      	adds	r1, #8
   84abe:	f043 0301 	orr.w	r3, r3, #1
   84ac2:	6053      	str	r3, [r2, #4]
   84ac4:	4648      	mov	r0, r9
   84ac6:	f7ff f89f 	bl	83c08 <_free_r>
   84aca:	e7db      	b.n	84a84 <_realloc_r+0xf4>
   84acc:	428b      	cmp	r3, r1
   84ace:	da33      	bge.n	84b38 <_realloc_r+0x1a8>
   84ad0:	4641      	mov	r1, r8
   84ad2:	4648      	mov	r0, r9
   84ad4:	f7ff fb96 	bl	84204 <_malloc_r>
   84ad8:	4680      	mov	r8, r0
   84ada:	2800      	cmp	r0, #0
   84adc:	d0d2      	beq.n	84a84 <_realloc_r+0xf4>
   84ade:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84ae2:	f1a0 0108 	sub.w	r1, r0, #8
   84ae6:	f023 0201 	bic.w	r2, r3, #1
   84aea:	443a      	add	r2, r7
   84aec:	4291      	cmp	r1, r2
   84aee:	f000 80bc 	beq.w	84c6a <_realloc_r+0x2da>
   84af2:	1f2a      	subs	r2, r5, #4
   84af4:	2a24      	cmp	r2, #36	; 0x24
   84af6:	d86e      	bhi.n	84bd6 <_realloc_r+0x246>
   84af8:	2a13      	cmp	r2, #19
   84afa:	d842      	bhi.n	84b82 <_realloc_r+0x1f2>
   84afc:	4603      	mov	r3, r0
   84afe:	4622      	mov	r2, r4
   84b00:	6811      	ldr	r1, [r2, #0]
   84b02:	6019      	str	r1, [r3, #0]
   84b04:	6851      	ldr	r1, [r2, #4]
   84b06:	6059      	str	r1, [r3, #4]
   84b08:	6892      	ldr	r2, [r2, #8]
   84b0a:	609a      	str	r2, [r3, #8]
   84b0c:	4621      	mov	r1, r4
   84b0e:	4648      	mov	r0, r9
   84b10:	f7ff f87a 	bl	83c08 <_free_r>
   84b14:	e7b6      	b.n	84a84 <_realloc_r+0xf4>
   84b16:	4611      	mov	r1, r2
   84b18:	b003      	add	sp, #12
   84b1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84b1e:	f7ff bb71 	b.w	84204 <_malloc_r>
   84b22:	f8de 2004 	ldr.w	r2, [lr, #4]
   84b26:	f106 0c10 	add.w	ip, r6, #16
   84b2a:	f022 0203 	bic.w	r2, r2, #3
   84b2e:	1950      	adds	r0, r2, r5
   84b30:	4560      	cmp	r0, ip
   84b32:	da3d      	bge.n	84bb0 <_realloc_r+0x220>
   84b34:	4670      	mov	r0, lr
   84b36:	e759      	b.n	849ec <_realloc_r+0x5c>
   84b38:	46d0      	mov	r8, sl
   84b3a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   84b3e:	f8da 100c 	ldr.w	r1, [sl, #12]
   84b42:	1f2a      	subs	r2, r5, #4
   84b44:	2a24      	cmp	r2, #36	; 0x24
   84b46:	60c1      	str	r1, [r0, #12]
   84b48:	6088      	str	r0, [r1, #8]
   84b4a:	f200 80a0 	bhi.w	84c8e <_realloc_r+0x2fe>
   84b4e:	2a13      	cmp	r2, #19
   84b50:	f240 809b 	bls.w	84c8a <_realloc_r+0x2fa>
   84b54:	6821      	ldr	r1, [r4, #0]
   84b56:	2a1b      	cmp	r2, #27
   84b58:	f8ca 1008 	str.w	r1, [sl, #8]
   84b5c:	6861      	ldr	r1, [r4, #4]
   84b5e:	f8ca 100c 	str.w	r1, [sl, #12]
   84b62:	f200 80b2 	bhi.w	84cca <_realloc_r+0x33a>
   84b66:	3408      	adds	r4, #8
   84b68:	f10a 0210 	add.w	r2, sl, #16
   84b6c:	6821      	ldr	r1, [r4, #0]
   84b6e:	461d      	mov	r5, r3
   84b70:	6011      	str	r1, [r2, #0]
   84b72:	6861      	ldr	r1, [r4, #4]
   84b74:	4657      	mov	r7, sl
   84b76:	6051      	str	r1, [r2, #4]
   84b78:	68a3      	ldr	r3, [r4, #8]
   84b7a:	6093      	str	r3, [r2, #8]
   84b7c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84b80:	e774      	b.n	84a6c <_realloc_r+0xdc>
   84b82:	6823      	ldr	r3, [r4, #0]
   84b84:	2a1b      	cmp	r2, #27
   84b86:	6003      	str	r3, [r0, #0]
   84b88:	6863      	ldr	r3, [r4, #4]
   84b8a:	6043      	str	r3, [r0, #4]
   84b8c:	d862      	bhi.n	84c54 <_realloc_r+0x2c4>
   84b8e:	f100 0308 	add.w	r3, r0, #8
   84b92:	f104 0208 	add.w	r2, r4, #8
   84b96:	e7b3      	b.n	84b00 <_realloc_r+0x170>
   84b98:	4643      	mov	r3, r8
   84b9a:	6822      	ldr	r2, [r4, #0]
   84b9c:	4675      	mov	r5, lr
   84b9e:	601a      	str	r2, [r3, #0]
   84ba0:	6862      	ldr	r2, [r4, #4]
   84ba2:	4657      	mov	r7, sl
   84ba4:	605a      	str	r2, [r3, #4]
   84ba6:	68a2      	ldr	r2, [r4, #8]
   84ba8:	609a      	str	r2, [r3, #8]
   84baa:	f8da 3004 	ldr.w	r3, [sl, #4]
   84bae:	e75d      	b.n	84a6c <_realloc_r+0xdc>
   84bb0:	1b83      	subs	r3, r0, r6
   84bb2:	4437      	add	r7, r6
   84bb4:	f043 0301 	orr.w	r3, r3, #1
   84bb8:	f8cb 7008 	str.w	r7, [fp, #8]
   84bbc:	607b      	str	r3, [r7, #4]
   84bbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84bc2:	4648      	mov	r0, r9
   84bc4:	f003 0301 	and.w	r3, r3, #1
   84bc8:	431e      	orrs	r6, r3
   84bca:	f844 6c04 	str.w	r6, [r4, #-4]
   84bce:	f7ff fedd 	bl	8498c <__malloc_unlock>
   84bd2:	4620      	mov	r0, r4
   84bd4:	e75a      	b.n	84a8c <_realloc_r+0xfc>
   84bd6:	4621      	mov	r1, r4
   84bd8:	f7ff fe70 	bl	848bc <memmove>
   84bdc:	e796      	b.n	84b0c <_realloc_r+0x17c>
   84bde:	eb02 0c03 	add.w	ip, r2, r3
   84be2:	f106 0210 	add.w	r2, r6, #16
   84be6:	4594      	cmp	ip, r2
   84be8:	f6ff af70 	blt.w	84acc <_realloc_r+0x13c>
   84bec:	4657      	mov	r7, sl
   84bee:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84bf2:	f8da 300c 	ldr.w	r3, [sl, #12]
   84bf6:	1f2a      	subs	r2, r5, #4
   84bf8:	2a24      	cmp	r2, #36	; 0x24
   84bfa:	60cb      	str	r3, [r1, #12]
   84bfc:	6099      	str	r1, [r3, #8]
   84bfe:	f200 8086 	bhi.w	84d0e <_realloc_r+0x37e>
   84c02:	2a13      	cmp	r2, #19
   84c04:	d977      	bls.n	84cf6 <_realloc_r+0x366>
   84c06:	6823      	ldr	r3, [r4, #0]
   84c08:	2a1b      	cmp	r2, #27
   84c0a:	f8ca 3008 	str.w	r3, [sl, #8]
   84c0e:	6863      	ldr	r3, [r4, #4]
   84c10:	f8ca 300c 	str.w	r3, [sl, #12]
   84c14:	f200 8084 	bhi.w	84d20 <_realloc_r+0x390>
   84c18:	3408      	adds	r4, #8
   84c1a:	f10a 0310 	add.w	r3, sl, #16
   84c1e:	6822      	ldr	r2, [r4, #0]
   84c20:	601a      	str	r2, [r3, #0]
   84c22:	6862      	ldr	r2, [r4, #4]
   84c24:	605a      	str	r2, [r3, #4]
   84c26:	68a2      	ldr	r2, [r4, #8]
   84c28:	609a      	str	r2, [r3, #8]
   84c2a:	ebc6 020c 	rsb	r2, r6, ip
   84c2e:	eb0a 0306 	add.w	r3, sl, r6
   84c32:	f042 0201 	orr.w	r2, r2, #1
   84c36:	f8cb 3008 	str.w	r3, [fp, #8]
   84c3a:	605a      	str	r2, [r3, #4]
   84c3c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84c40:	4648      	mov	r0, r9
   84c42:	f003 0301 	and.w	r3, r3, #1
   84c46:	431e      	orrs	r6, r3
   84c48:	f8ca 6004 	str.w	r6, [sl, #4]
   84c4c:	f7ff fe9e 	bl	8498c <__malloc_unlock>
   84c50:	4638      	mov	r0, r7
   84c52:	e71b      	b.n	84a8c <_realloc_r+0xfc>
   84c54:	68a3      	ldr	r3, [r4, #8]
   84c56:	2a24      	cmp	r2, #36	; 0x24
   84c58:	6083      	str	r3, [r0, #8]
   84c5a:	68e3      	ldr	r3, [r4, #12]
   84c5c:	60c3      	str	r3, [r0, #12]
   84c5e:	d02b      	beq.n	84cb8 <_realloc_r+0x328>
   84c60:	f100 0310 	add.w	r3, r0, #16
   84c64:	f104 0210 	add.w	r2, r4, #16
   84c68:	e74a      	b.n	84b00 <_realloc_r+0x170>
   84c6a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   84c6e:	46a0      	mov	r8, r4
   84c70:	f022 0203 	bic.w	r2, r2, #3
   84c74:	4415      	add	r5, r2
   84c76:	e6f9      	b.n	84a6c <_realloc_r+0xdc>
   84c78:	4621      	mov	r1, r4
   84c7a:	4640      	mov	r0, r8
   84c7c:	4675      	mov	r5, lr
   84c7e:	4657      	mov	r7, sl
   84c80:	f7ff fe1c 	bl	848bc <memmove>
   84c84:	f8da 3004 	ldr.w	r3, [sl, #4]
   84c88:	e6f0      	b.n	84a6c <_realloc_r+0xdc>
   84c8a:	4642      	mov	r2, r8
   84c8c:	e76e      	b.n	84b6c <_realloc_r+0x1dc>
   84c8e:	4621      	mov	r1, r4
   84c90:	4640      	mov	r0, r8
   84c92:	461d      	mov	r5, r3
   84c94:	4657      	mov	r7, sl
   84c96:	f7ff fe11 	bl	848bc <memmove>
   84c9a:	f8da 3004 	ldr.w	r3, [sl, #4]
   84c9e:	e6e5      	b.n	84a6c <_realloc_r+0xdc>
   84ca0:	68a3      	ldr	r3, [r4, #8]
   84ca2:	2a24      	cmp	r2, #36	; 0x24
   84ca4:	f8ca 3010 	str.w	r3, [sl, #16]
   84ca8:	68e3      	ldr	r3, [r4, #12]
   84caa:	f8ca 3014 	str.w	r3, [sl, #20]
   84cae:	d018      	beq.n	84ce2 <_realloc_r+0x352>
   84cb0:	3410      	adds	r4, #16
   84cb2:	f10a 0318 	add.w	r3, sl, #24
   84cb6:	e770      	b.n	84b9a <_realloc_r+0x20a>
   84cb8:	6922      	ldr	r2, [r4, #16]
   84cba:	f100 0318 	add.w	r3, r0, #24
   84cbe:	6102      	str	r2, [r0, #16]
   84cc0:	6961      	ldr	r1, [r4, #20]
   84cc2:	f104 0218 	add.w	r2, r4, #24
   84cc6:	6141      	str	r1, [r0, #20]
   84cc8:	e71a      	b.n	84b00 <_realloc_r+0x170>
   84cca:	68a1      	ldr	r1, [r4, #8]
   84ccc:	2a24      	cmp	r2, #36	; 0x24
   84cce:	f8ca 1010 	str.w	r1, [sl, #16]
   84cd2:	68e1      	ldr	r1, [r4, #12]
   84cd4:	f8ca 1014 	str.w	r1, [sl, #20]
   84cd8:	d00f      	beq.n	84cfa <_realloc_r+0x36a>
   84cda:	3410      	adds	r4, #16
   84cdc:	f10a 0218 	add.w	r2, sl, #24
   84ce0:	e744      	b.n	84b6c <_realloc_r+0x1dc>
   84ce2:	6922      	ldr	r2, [r4, #16]
   84ce4:	f10a 0320 	add.w	r3, sl, #32
   84ce8:	f8ca 2018 	str.w	r2, [sl, #24]
   84cec:	6962      	ldr	r2, [r4, #20]
   84cee:	3418      	adds	r4, #24
   84cf0:	f8ca 201c 	str.w	r2, [sl, #28]
   84cf4:	e751      	b.n	84b9a <_realloc_r+0x20a>
   84cf6:	463b      	mov	r3, r7
   84cf8:	e791      	b.n	84c1e <_realloc_r+0x28e>
   84cfa:	6921      	ldr	r1, [r4, #16]
   84cfc:	f10a 0220 	add.w	r2, sl, #32
   84d00:	f8ca 1018 	str.w	r1, [sl, #24]
   84d04:	6961      	ldr	r1, [r4, #20]
   84d06:	3418      	adds	r4, #24
   84d08:	f8ca 101c 	str.w	r1, [sl, #28]
   84d0c:	e72e      	b.n	84b6c <_realloc_r+0x1dc>
   84d0e:	4621      	mov	r1, r4
   84d10:	4638      	mov	r0, r7
   84d12:	f8cd c004 	str.w	ip, [sp, #4]
   84d16:	f7ff fdd1 	bl	848bc <memmove>
   84d1a:	f8dd c004 	ldr.w	ip, [sp, #4]
   84d1e:	e784      	b.n	84c2a <_realloc_r+0x29a>
   84d20:	68a3      	ldr	r3, [r4, #8]
   84d22:	2a24      	cmp	r2, #36	; 0x24
   84d24:	f8ca 3010 	str.w	r3, [sl, #16]
   84d28:	68e3      	ldr	r3, [r4, #12]
   84d2a:	f8ca 3014 	str.w	r3, [sl, #20]
   84d2e:	d003      	beq.n	84d38 <_realloc_r+0x3a8>
   84d30:	3410      	adds	r4, #16
   84d32:	f10a 0318 	add.w	r3, sl, #24
   84d36:	e772      	b.n	84c1e <_realloc_r+0x28e>
   84d38:	6922      	ldr	r2, [r4, #16]
   84d3a:	f10a 0320 	add.w	r3, sl, #32
   84d3e:	f8ca 2018 	str.w	r2, [sl, #24]
   84d42:	6962      	ldr	r2, [r4, #20]
   84d44:	3418      	adds	r4, #24
   84d46:	f8ca 201c 	str.w	r2, [sl, #28]
   84d4a:	e768      	b.n	84c1e <_realloc_r+0x28e>
   84d4c:	20070598 	.word	0x20070598

00084d50 <_sbrk_r>:
   84d50:	b538      	push	{r3, r4, r5, lr}
   84d52:	4c07      	ldr	r4, [pc, #28]	; (84d70 <_sbrk_r+0x20>)
   84d54:	2300      	movs	r3, #0
   84d56:	4605      	mov	r5, r0
   84d58:	4608      	mov	r0, r1
   84d5a:	6023      	str	r3, [r4, #0]
   84d5c:	f7fc fb94 	bl	81488 <_sbrk>
   84d60:	1c43      	adds	r3, r0, #1
   84d62:	d000      	beq.n	84d66 <_sbrk_r+0x16>
   84d64:	bd38      	pop	{r3, r4, r5, pc}
   84d66:	6823      	ldr	r3, [r4, #0]
   84d68:	2b00      	cmp	r3, #0
   84d6a:	d0fb      	beq.n	84d64 <_sbrk_r+0x14>
   84d6c:	602b      	str	r3, [r5, #0]
   84d6e:	bd38      	pop	{r3, r4, r5, pc}
   84d70:	20070b74 	.word	0x20070b74

00084d74 <__sread>:
   84d74:	b510      	push	{r4, lr}
   84d76:	460c      	mov	r4, r1
   84d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84d7c:	f000 f9c2 	bl	85104 <_read_r>
   84d80:	2800      	cmp	r0, #0
   84d82:	db03      	blt.n	84d8c <__sread+0x18>
   84d84:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84d86:	4403      	add	r3, r0
   84d88:	6523      	str	r3, [r4, #80]	; 0x50
   84d8a:	bd10      	pop	{r4, pc}
   84d8c:	89a3      	ldrh	r3, [r4, #12]
   84d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84d92:	81a3      	strh	r3, [r4, #12]
   84d94:	bd10      	pop	{r4, pc}
   84d96:	bf00      	nop

00084d98 <__swrite>:
   84d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d9c:	460c      	mov	r4, r1
   84d9e:	8989      	ldrh	r1, [r1, #12]
   84da0:	461d      	mov	r5, r3
   84da2:	05cb      	lsls	r3, r1, #23
   84da4:	4616      	mov	r6, r2
   84da6:	4607      	mov	r7, r0
   84da8:	d506      	bpl.n	84db8 <__swrite+0x20>
   84daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84dae:	2200      	movs	r2, #0
   84db0:	2302      	movs	r3, #2
   84db2:	f000 f993 	bl	850dc <_lseek_r>
   84db6:	89a1      	ldrh	r1, [r4, #12]
   84db8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84dbc:	81a1      	strh	r1, [r4, #12]
   84dbe:	4638      	mov	r0, r7
   84dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84dc4:	4632      	mov	r2, r6
   84dc6:	462b      	mov	r3, r5
   84dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84dcc:	f000 b89e 	b.w	84f0c <_write_r>

00084dd0 <__sseek>:
   84dd0:	b510      	push	{r4, lr}
   84dd2:	460c      	mov	r4, r1
   84dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84dd8:	f000 f980 	bl	850dc <_lseek_r>
   84ddc:	89a3      	ldrh	r3, [r4, #12]
   84dde:	1c42      	adds	r2, r0, #1
   84de0:	bf0e      	itee	eq
   84de2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84de6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84dea:	6520      	strne	r0, [r4, #80]	; 0x50
   84dec:	81a3      	strh	r3, [r4, #12]
   84dee:	bd10      	pop	{r4, pc}

00084df0 <__sclose>:
   84df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84df4:	f000 b8f2 	b.w	84fdc <_close_r>

00084df8 <__swbuf_r>:
   84df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84dfa:	460d      	mov	r5, r1
   84dfc:	4614      	mov	r4, r2
   84dfe:	4607      	mov	r7, r0
   84e00:	b110      	cbz	r0, 84e08 <__swbuf_r+0x10>
   84e02:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84e04:	2b00      	cmp	r3, #0
   84e06:	d048      	beq.n	84e9a <__swbuf_r+0xa2>
   84e08:	89a2      	ldrh	r2, [r4, #12]
   84e0a:	69a0      	ldr	r0, [r4, #24]
   84e0c:	b293      	uxth	r3, r2
   84e0e:	60a0      	str	r0, [r4, #8]
   84e10:	0718      	lsls	r0, r3, #28
   84e12:	d538      	bpl.n	84e86 <__swbuf_r+0x8e>
   84e14:	6926      	ldr	r6, [r4, #16]
   84e16:	2e00      	cmp	r6, #0
   84e18:	d035      	beq.n	84e86 <__swbuf_r+0x8e>
   84e1a:	0499      	lsls	r1, r3, #18
   84e1c:	b2ed      	uxtb	r5, r5
   84e1e:	d515      	bpl.n	84e4c <__swbuf_r+0x54>
   84e20:	6823      	ldr	r3, [r4, #0]
   84e22:	6962      	ldr	r2, [r4, #20]
   84e24:	1b9e      	subs	r6, r3, r6
   84e26:	4296      	cmp	r6, r2
   84e28:	da1c      	bge.n	84e64 <__swbuf_r+0x6c>
   84e2a:	3601      	adds	r6, #1
   84e2c:	68a2      	ldr	r2, [r4, #8]
   84e2e:	1c59      	adds	r1, r3, #1
   84e30:	3a01      	subs	r2, #1
   84e32:	60a2      	str	r2, [r4, #8]
   84e34:	6021      	str	r1, [r4, #0]
   84e36:	701d      	strb	r5, [r3, #0]
   84e38:	6963      	ldr	r3, [r4, #20]
   84e3a:	42b3      	cmp	r3, r6
   84e3c:	d01a      	beq.n	84e74 <__swbuf_r+0x7c>
   84e3e:	89a3      	ldrh	r3, [r4, #12]
   84e40:	07db      	lsls	r3, r3, #31
   84e42:	d501      	bpl.n	84e48 <__swbuf_r+0x50>
   84e44:	2d0a      	cmp	r5, #10
   84e46:	d015      	beq.n	84e74 <__swbuf_r+0x7c>
   84e48:	4628      	mov	r0, r5
   84e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84e4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   84e56:	6663      	str	r3, [r4, #100]	; 0x64
   84e58:	6823      	ldr	r3, [r4, #0]
   84e5a:	81a2      	strh	r2, [r4, #12]
   84e5c:	6962      	ldr	r2, [r4, #20]
   84e5e:	1b9e      	subs	r6, r3, r6
   84e60:	4296      	cmp	r6, r2
   84e62:	dbe2      	blt.n	84e2a <__swbuf_r+0x32>
   84e64:	4638      	mov	r0, r7
   84e66:	4621      	mov	r1, r4
   84e68:	f7fe fd6e 	bl	83948 <_fflush_r>
   84e6c:	b940      	cbnz	r0, 84e80 <__swbuf_r+0x88>
   84e6e:	6823      	ldr	r3, [r4, #0]
   84e70:	2601      	movs	r6, #1
   84e72:	e7db      	b.n	84e2c <__swbuf_r+0x34>
   84e74:	4638      	mov	r0, r7
   84e76:	4621      	mov	r1, r4
   84e78:	f7fe fd66 	bl	83948 <_fflush_r>
   84e7c:	2800      	cmp	r0, #0
   84e7e:	d0e3      	beq.n	84e48 <__swbuf_r+0x50>
   84e80:	f04f 30ff 	mov.w	r0, #4294967295
   84e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e86:	4638      	mov	r0, r7
   84e88:	4621      	mov	r1, r4
   84e8a:	f7fe fc47 	bl	8371c <__swsetup_r>
   84e8e:	2800      	cmp	r0, #0
   84e90:	d1f6      	bne.n	84e80 <__swbuf_r+0x88>
   84e92:	89a2      	ldrh	r2, [r4, #12]
   84e94:	6926      	ldr	r6, [r4, #16]
   84e96:	b293      	uxth	r3, r2
   84e98:	e7bf      	b.n	84e1a <__swbuf_r+0x22>
   84e9a:	f7fe fd71 	bl	83980 <__sinit>
   84e9e:	e7b3      	b.n	84e08 <__swbuf_r+0x10>

00084ea0 <_wcrtomb_r>:
   84ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ea4:	461e      	mov	r6, r3
   84ea6:	b086      	sub	sp, #24
   84ea8:	460c      	mov	r4, r1
   84eaa:	4605      	mov	r5, r0
   84eac:	4617      	mov	r7, r2
   84eae:	4b0f      	ldr	r3, [pc, #60]	; (84eec <_wcrtomb_r+0x4c>)
   84eb0:	b191      	cbz	r1, 84ed8 <_wcrtomb_r+0x38>
   84eb2:	f8d3 8000 	ldr.w	r8, [r3]
   84eb6:	f7ff f923 	bl	84100 <__locale_charset>
   84eba:	9600      	str	r6, [sp, #0]
   84ebc:	4603      	mov	r3, r0
   84ebe:	4621      	mov	r1, r4
   84ec0:	463a      	mov	r2, r7
   84ec2:	4628      	mov	r0, r5
   84ec4:	47c0      	blx	r8
   84ec6:	1c43      	adds	r3, r0, #1
   84ec8:	d103      	bne.n	84ed2 <_wcrtomb_r+0x32>
   84eca:	2200      	movs	r2, #0
   84ecc:	238a      	movs	r3, #138	; 0x8a
   84ece:	6032      	str	r2, [r6, #0]
   84ed0:	602b      	str	r3, [r5, #0]
   84ed2:	b006      	add	sp, #24
   84ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ed8:	681f      	ldr	r7, [r3, #0]
   84eda:	f7ff f911 	bl	84100 <__locale_charset>
   84ede:	9600      	str	r6, [sp, #0]
   84ee0:	4603      	mov	r3, r0
   84ee2:	4622      	mov	r2, r4
   84ee4:	4628      	mov	r0, r5
   84ee6:	a903      	add	r1, sp, #12
   84ee8:	47b8      	blx	r7
   84eea:	e7ec      	b.n	84ec6 <_wcrtomb_r+0x26>
   84eec:	200709a8 	.word	0x200709a8

00084ef0 <__ascii_wctomb>:
   84ef0:	b121      	cbz	r1, 84efc <__ascii_wctomb+0xc>
   84ef2:	2aff      	cmp	r2, #255	; 0xff
   84ef4:	d804      	bhi.n	84f00 <__ascii_wctomb+0x10>
   84ef6:	700a      	strb	r2, [r1, #0]
   84ef8:	2001      	movs	r0, #1
   84efa:	4770      	bx	lr
   84efc:	4608      	mov	r0, r1
   84efe:	4770      	bx	lr
   84f00:	238a      	movs	r3, #138	; 0x8a
   84f02:	6003      	str	r3, [r0, #0]
   84f04:	f04f 30ff 	mov.w	r0, #4294967295
   84f08:	4770      	bx	lr
   84f0a:	bf00      	nop

00084f0c <_write_r>:
   84f0c:	b570      	push	{r4, r5, r6, lr}
   84f0e:	4c08      	ldr	r4, [pc, #32]	; (84f30 <_write_r+0x24>)
   84f10:	4606      	mov	r6, r0
   84f12:	2500      	movs	r5, #0
   84f14:	4608      	mov	r0, r1
   84f16:	4611      	mov	r1, r2
   84f18:	461a      	mov	r2, r3
   84f1a:	6025      	str	r5, [r4, #0]
   84f1c:	f7fb fa1e 	bl	8035c <_write>
   84f20:	1c43      	adds	r3, r0, #1
   84f22:	d000      	beq.n	84f26 <_write_r+0x1a>
   84f24:	bd70      	pop	{r4, r5, r6, pc}
   84f26:	6823      	ldr	r3, [r4, #0]
   84f28:	2b00      	cmp	r3, #0
   84f2a:	d0fb      	beq.n	84f24 <_write_r+0x18>
   84f2c:	6033      	str	r3, [r6, #0]
   84f2e:	bd70      	pop	{r4, r5, r6, pc}
   84f30:	20070b74 	.word	0x20070b74

00084f34 <__register_exitproc>:
   84f34:	b5f0      	push	{r4, r5, r6, r7, lr}
   84f36:	4c27      	ldr	r4, [pc, #156]	; (84fd4 <__register_exitproc+0xa0>)
   84f38:	b085      	sub	sp, #20
   84f3a:	6826      	ldr	r6, [r4, #0]
   84f3c:	4607      	mov	r7, r0
   84f3e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   84f42:	2c00      	cmp	r4, #0
   84f44:	d040      	beq.n	84fc8 <__register_exitproc+0x94>
   84f46:	6865      	ldr	r5, [r4, #4]
   84f48:	2d1f      	cmp	r5, #31
   84f4a:	dd1e      	ble.n	84f8a <__register_exitproc+0x56>
   84f4c:	4822      	ldr	r0, [pc, #136]	; (84fd8 <__register_exitproc+0xa4>)
   84f4e:	b918      	cbnz	r0, 84f58 <__register_exitproc+0x24>
   84f50:	f04f 30ff 	mov.w	r0, #4294967295
   84f54:	b005      	add	sp, #20
   84f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84f58:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84f5c:	9103      	str	r1, [sp, #12]
   84f5e:	9202      	str	r2, [sp, #8]
   84f60:	9301      	str	r3, [sp, #4]
   84f62:	f7ff f947 	bl	841f4 <malloc>
   84f66:	9903      	ldr	r1, [sp, #12]
   84f68:	4604      	mov	r4, r0
   84f6a:	9a02      	ldr	r2, [sp, #8]
   84f6c:	9b01      	ldr	r3, [sp, #4]
   84f6e:	2800      	cmp	r0, #0
   84f70:	d0ee      	beq.n	84f50 <__register_exitproc+0x1c>
   84f72:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   84f76:	2000      	movs	r0, #0
   84f78:	6025      	str	r5, [r4, #0]
   84f7a:	6060      	str	r0, [r4, #4]
   84f7c:	4605      	mov	r5, r0
   84f7e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84f82:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   84f86:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   84f8a:	b93f      	cbnz	r7, 84f9c <__register_exitproc+0x68>
   84f8c:	1c6b      	adds	r3, r5, #1
   84f8e:	2000      	movs	r0, #0
   84f90:	3502      	adds	r5, #2
   84f92:	6063      	str	r3, [r4, #4]
   84f94:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   84f98:	b005      	add	sp, #20
   84f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84f9c:	2601      	movs	r6, #1
   84f9e:	40ae      	lsls	r6, r5
   84fa0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84fa4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   84fa8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   84fac:	2f02      	cmp	r7, #2
   84fae:	ea42 0206 	orr.w	r2, r2, r6
   84fb2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   84fb6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   84fba:	d1e7      	bne.n	84f8c <__register_exitproc+0x58>
   84fbc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84fc0:	431e      	orrs	r6, r3
   84fc2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   84fc6:	e7e1      	b.n	84f8c <__register_exitproc+0x58>
   84fc8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   84fcc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84fd0:	e7b9      	b.n	84f46 <__register_exitproc+0x12>
   84fd2:	bf00      	nop
   84fd4:	0008578c 	.word	0x0008578c
   84fd8:	000841f5 	.word	0x000841f5

00084fdc <_close_r>:
   84fdc:	b538      	push	{r3, r4, r5, lr}
   84fde:	4c07      	ldr	r4, [pc, #28]	; (84ffc <_close_r+0x20>)
   84fe0:	2300      	movs	r3, #0
   84fe2:	4605      	mov	r5, r0
   84fe4:	4608      	mov	r0, r1
   84fe6:	6023      	str	r3, [r4, #0]
   84fe8:	f7fc fa68 	bl	814bc <_close>
   84fec:	1c43      	adds	r3, r0, #1
   84fee:	d000      	beq.n	84ff2 <_close_r+0x16>
   84ff0:	bd38      	pop	{r3, r4, r5, pc}
   84ff2:	6823      	ldr	r3, [r4, #0]
   84ff4:	2b00      	cmp	r3, #0
   84ff6:	d0fb      	beq.n	84ff0 <_close_r+0x14>
   84ff8:	602b      	str	r3, [r5, #0]
   84ffa:	bd38      	pop	{r3, r4, r5, pc}
   84ffc:	20070b74 	.word	0x20070b74

00085000 <_fclose_r>:
   85000:	b570      	push	{r4, r5, r6, lr}
   85002:	460c      	mov	r4, r1
   85004:	4605      	mov	r5, r0
   85006:	b131      	cbz	r1, 85016 <_fclose_r+0x16>
   85008:	b110      	cbz	r0, 85010 <_fclose_r+0x10>
   8500a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8500c:	2b00      	cmp	r3, #0
   8500e:	d02f      	beq.n	85070 <_fclose_r+0x70>
   85010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85014:	b90b      	cbnz	r3, 8501a <_fclose_r+0x1a>
   85016:	2000      	movs	r0, #0
   85018:	bd70      	pop	{r4, r5, r6, pc}
   8501a:	4628      	mov	r0, r5
   8501c:	4621      	mov	r1, r4
   8501e:	f7fe fc93 	bl	83948 <_fflush_r>
   85022:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85024:	4606      	mov	r6, r0
   85026:	b133      	cbz	r3, 85036 <_fclose_r+0x36>
   85028:	4628      	mov	r0, r5
   8502a:	69e1      	ldr	r1, [r4, #28]
   8502c:	4798      	blx	r3
   8502e:	2800      	cmp	r0, #0
   85030:	bfb8      	it	lt
   85032:	f04f 36ff 	movlt.w	r6, #4294967295
   85036:	89a3      	ldrh	r3, [r4, #12]
   85038:	061b      	lsls	r3, r3, #24
   8503a:	d41c      	bmi.n	85076 <_fclose_r+0x76>
   8503c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8503e:	b141      	cbz	r1, 85052 <_fclose_r+0x52>
   85040:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85044:	4299      	cmp	r1, r3
   85046:	d002      	beq.n	8504e <_fclose_r+0x4e>
   85048:	4628      	mov	r0, r5
   8504a:	f7fe fddd 	bl	83c08 <_free_r>
   8504e:	2300      	movs	r3, #0
   85050:	6323      	str	r3, [r4, #48]	; 0x30
   85052:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85054:	b121      	cbz	r1, 85060 <_fclose_r+0x60>
   85056:	4628      	mov	r0, r5
   85058:	f7fe fdd6 	bl	83c08 <_free_r>
   8505c:	2300      	movs	r3, #0
   8505e:	6463      	str	r3, [r4, #68]	; 0x44
   85060:	f7fe fd08 	bl	83a74 <__sfp_lock_acquire>
   85064:	2300      	movs	r3, #0
   85066:	81a3      	strh	r3, [r4, #12]
   85068:	f7fe fd06 	bl	83a78 <__sfp_lock_release>
   8506c:	4630      	mov	r0, r6
   8506e:	bd70      	pop	{r4, r5, r6, pc}
   85070:	f7fe fc86 	bl	83980 <__sinit>
   85074:	e7cc      	b.n	85010 <_fclose_r+0x10>
   85076:	4628      	mov	r0, r5
   85078:	6921      	ldr	r1, [r4, #16]
   8507a:	f7fe fdc5 	bl	83c08 <_free_r>
   8507e:	e7dd      	b.n	8503c <_fclose_r+0x3c>

00085080 <fclose>:
   85080:	4b02      	ldr	r3, [pc, #8]	; (8508c <fclose+0xc>)
   85082:	4601      	mov	r1, r0
   85084:	6818      	ldr	r0, [r3, #0]
   85086:	f7ff bfbb 	b.w	85000 <_fclose_r>
   8508a:	bf00      	nop
   8508c:	20070570 	.word	0x20070570

00085090 <_fstat_r>:
   85090:	b538      	push	{r3, r4, r5, lr}
   85092:	4c08      	ldr	r4, [pc, #32]	; (850b4 <_fstat_r+0x24>)
   85094:	2300      	movs	r3, #0
   85096:	4605      	mov	r5, r0
   85098:	4608      	mov	r0, r1
   8509a:	4611      	mov	r1, r2
   8509c:	6023      	str	r3, [r4, #0]
   8509e:	f7fc fa11 	bl	814c4 <_fstat>
   850a2:	1c43      	adds	r3, r0, #1
   850a4:	d000      	beq.n	850a8 <_fstat_r+0x18>
   850a6:	bd38      	pop	{r3, r4, r5, pc}
   850a8:	6823      	ldr	r3, [r4, #0]
   850aa:	2b00      	cmp	r3, #0
   850ac:	d0fb      	beq.n	850a6 <_fstat_r+0x16>
   850ae:	602b      	str	r3, [r5, #0]
   850b0:	bd38      	pop	{r3, r4, r5, pc}
   850b2:	bf00      	nop
   850b4:	20070b74 	.word	0x20070b74

000850b8 <_isatty_r>:
   850b8:	b538      	push	{r3, r4, r5, lr}
   850ba:	4c07      	ldr	r4, [pc, #28]	; (850d8 <_isatty_r+0x20>)
   850bc:	2300      	movs	r3, #0
   850be:	4605      	mov	r5, r0
   850c0:	4608      	mov	r0, r1
   850c2:	6023      	str	r3, [r4, #0]
   850c4:	f7fc fa04 	bl	814d0 <_isatty>
   850c8:	1c43      	adds	r3, r0, #1
   850ca:	d000      	beq.n	850ce <_isatty_r+0x16>
   850cc:	bd38      	pop	{r3, r4, r5, pc}
   850ce:	6823      	ldr	r3, [r4, #0]
   850d0:	2b00      	cmp	r3, #0
   850d2:	d0fb      	beq.n	850cc <_isatty_r+0x14>
   850d4:	602b      	str	r3, [r5, #0]
   850d6:	bd38      	pop	{r3, r4, r5, pc}
   850d8:	20070b74 	.word	0x20070b74

000850dc <_lseek_r>:
   850dc:	b570      	push	{r4, r5, r6, lr}
   850de:	4c08      	ldr	r4, [pc, #32]	; (85100 <_lseek_r+0x24>)
   850e0:	4606      	mov	r6, r0
   850e2:	2500      	movs	r5, #0
   850e4:	4608      	mov	r0, r1
   850e6:	4611      	mov	r1, r2
   850e8:	461a      	mov	r2, r3
   850ea:	6025      	str	r5, [r4, #0]
   850ec:	f7fc f9f2 	bl	814d4 <_lseek>
   850f0:	1c43      	adds	r3, r0, #1
   850f2:	d000      	beq.n	850f6 <_lseek_r+0x1a>
   850f4:	bd70      	pop	{r4, r5, r6, pc}
   850f6:	6823      	ldr	r3, [r4, #0]
   850f8:	2b00      	cmp	r3, #0
   850fa:	d0fb      	beq.n	850f4 <_lseek_r+0x18>
   850fc:	6033      	str	r3, [r6, #0]
   850fe:	bd70      	pop	{r4, r5, r6, pc}
   85100:	20070b74 	.word	0x20070b74

00085104 <_read_r>:
   85104:	b570      	push	{r4, r5, r6, lr}
   85106:	4c08      	ldr	r4, [pc, #32]	; (85128 <_read_r+0x24>)
   85108:	4606      	mov	r6, r0
   8510a:	2500      	movs	r5, #0
   8510c:	4608      	mov	r0, r1
   8510e:	4611      	mov	r1, r2
   85110:	461a      	mov	r2, r3
   85112:	6025      	str	r5, [r4, #0]
   85114:	f7fb f902 	bl	8031c <_read>
   85118:	1c43      	adds	r3, r0, #1
   8511a:	d000      	beq.n	8511e <_read_r+0x1a>
   8511c:	bd70      	pop	{r4, r5, r6, pc}
   8511e:	6823      	ldr	r3, [r4, #0]
   85120:	2b00      	cmp	r3, #0
   85122:	d0fb      	beq.n	8511c <_read_r+0x18>
   85124:	6033      	str	r3, [r6, #0]
   85126:	bd70      	pop	{r4, r5, r6, pc}
   85128:	20070b74 	.word	0x20070b74

0008512c <__aeabi_uldivmod>:
   8512c:	b94b      	cbnz	r3, 85142 <__aeabi_uldivmod+0x16>
   8512e:	b942      	cbnz	r2, 85142 <__aeabi_uldivmod+0x16>
   85130:	2900      	cmp	r1, #0
   85132:	bf08      	it	eq
   85134:	2800      	cmpeq	r0, #0
   85136:	d002      	beq.n	8513e <__aeabi_uldivmod+0x12>
   85138:	f04f 31ff 	mov.w	r1, #4294967295
   8513c:	4608      	mov	r0, r1
   8513e:	f000 b83b 	b.w	851b8 <__aeabi_idiv0>
   85142:	b082      	sub	sp, #8
   85144:	46ec      	mov	ip, sp
   85146:	e92d 5000 	stmdb	sp!, {ip, lr}
   8514a:	f000 f81d 	bl	85188 <__gnu_uldivmod_helper>
   8514e:	f8dd e004 	ldr.w	lr, [sp, #4]
   85152:	b002      	add	sp, #8
   85154:	bc0c      	pop	{r2, r3}
   85156:	4770      	bx	lr

00085158 <__gnu_ldivmod_helper>:
   85158:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8515c:	9e08      	ldr	r6, [sp, #32]
   8515e:	4614      	mov	r4, r2
   85160:	461d      	mov	r5, r3
   85162:	4680      	mov	r8, r0
   85164:	4689      	mov	r9, r1
   85166:	f000 f829 	bl	851bc <__divdi3>
   8516a:	fb04 f301 	mul.w	r3, r4, r1
   8516e:	fba4 ab00 	umull	sl, fp, r4, r0
   85172:	fb00 3205 	mla	r2, r0, r5, r3
   85176:	4493      	add	fp, r2
   85178:	ebb8 080a 	subs.w	r8, r8, sl
   8517c:	eb69 090b 	sbc.w	r9, r9, fp
   85180:	e9c6 8900 	strd	r8, r9, [r6]
   85184:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085188 <__gnu_uldivmod_helper>:
   85188:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8518c:	9e08      	ldr	r6, [sp, #32]
   8518e:	4614      	mov	r4, r2
   85190:	461d      	mov	r5, r3
   85192:	4680      	mov	r8, r0
   85194:	4689      	mov	r9, r1
   85196:	f000 f961 	bl	8545c <__udivdi3>
   8519a:	fb00 f505 	mul.w	r5, r0, r5
   8519e:	fba0 ab04 	umull	sl, fp, r0, r4
   851a2:	fb04 5401 	mla	r4, r4, r1, r5
   851a6:	44a3      	add	fp, r4
   851a8:	ebb8 080a 	subs.w	r8, r8, sl
   851ac:	eb69 090b 	sbc.w	r9, r9, fp
   851b0:	e9c6 8900 	strd	r8, r9, [r6]
   851b4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000851b8 <__aeabi_idiv0>:
   851b8:	4770      	bx	lr
   851ba:	bf00      	nop

000851bc <__divdi3>:
   851bc:	2900      	cmp	r1, #0
   851be:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   851c2:	f2c0 80a1 	blt.w	85308 <__divdi3+0x14c>
   851c6:	2400      	movs	r4, #0
   851c8:	2b00      	cmp	r3, #0
   851ca:	f2c0 8098 	blt.w	852fe <__divdi3+0x142>
   851ce:	4615      	mov	r5, r2
   851d0:	4606      	mov	r6, r0
   851d2:	460f      	mov	r7, r1
   851d4:	2b00      	cmp	r3, #0
   851d6:	d13f      	bne.n	85258 <__divdi3+0x9c>
   851d8:	428a      	cmp	r2, r1
   851da:	d958      	bls.n	8528e <__divdi3+0xd2>
   851dc:	fab2 f382 	clz	r3, r2
   851e0:	b14b      	cbz	r3, 851f6 <__divdi3+0x3a>
   851e2:	f1c3 0220 	rsb	r2, r3, #32
   851e6:	fa01 f703 	lsl.w	r7, r1, r3
   851ea:	fa20 f202 	lsr.w	r2, r0, r2
   851ee:	409d      	lsls	r5, r3
   851f0:	fa00 f603 	lsl.w	r6, r0, r3
   851f4:	4317      	orrs	r7, r2
   851f6:	0c29      	lsrs	r1, r5, #16
   851f8:	fbb7 f2f1 	udiv	r2, r7, r1
   851fc:	fb01 7712 	mls	r7, r1, r2, r7
   85200:	b2a8      	uxth	r0, r5
   85202:	fb00 f302 	mul.w	r3, r0, r2
   85206:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8520a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   8520e:	42bb      	cmp	r3, r7
   85210:	d909      	bls.n	85226 <__divdi3+0x6a>
   85212:	197f      	adds	r7, r7, r5
   85214:	f102 3cff 	add.w	ip, r2, #4294967295
   85218:	f080 8105 	bcs.w	85426 <__divdi3+0x26a>
   8521c:	42bb      	cmp	r3, r7
   8521e:	f240 8102 	bls.w	85426 <__divdi3+0x26a>
   85222:	3a02      	subs	r2, #2
   85224:	442f      	add	r7, r5
   85226:	1aff      	subs	r7, r7, r3
   85228:	fbb7 f3f1 	udiv	r3, r7, r1
   8522c:	fb01 7113 	mls	r1, r1, r3, r7
   85230:	fb00 f003 	mul.w	r0, r0, r3
   85234:	b2b6      	uxth	r6, r6
   85236:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   8523a:	4288      	cmp	r0, r1
   8523c:	d908      	bls.n	85250 <__divdi3+0x94>
   8523e:	1949      	adds	r1, r1, r5
   85240:	f103 37ff 	add.w	r7, r3, #4294967295
   85244:	f080 80f1 	bcs.w	8542a <__divdi3+0x26e>
   85248:	4288      	cmp	r0, r1
   8524a:	f240 80ee 	bls.w	8542a <__divdi3+0x26e>
   8524e:	3b02      	subs	r3, #2
   85250:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85254:	2300      	movs	r3, #0
   85256:	e003      	b.n	85260 <__divdi3+0xa4>
   85258:	428b      	cmp	r3, r1
   8525a:	d90a      	bls.n	85272 <__divdi3+0xb6>
   8525c:	2300      	movs	r3, #0
   8525e:	461a      	mov	r2, r3
   85260:	4610      	mov	r0, r2
   85262:	4619      	mov	r1, r3
   85264:	b114      	cbz	r4, 8526c <__divdi3+0xb0>
   85266:	4240      	negs	r0, r0
   85268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8526c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85270:	4770      	bx	lr
   85272:	fab3 f883 	clz	r8, r3
   85276:	f1b8 0f00 	cmp.w	r8, #0
   8527a:	f040 8088 	bne.w	8538e <__divdi3+0x1d2>
   8527e:	428b      	cmp	r3, r1
   85280:	d302      	bcc.n	85288 <__divdi3+0xcc>
   85282:	4282      	cmp	r2, r0
   85284:	f200 80e2 	bhi.w	8544c <__divdi3+0x290>
   85288:	2300      	movs	r3, #0
   8528a:	2201      	movs	r2, #1
   8528c:	e7e8      	b.n	85260 <__divdi3+0xa4>
   8528e:	b912      	cbnz	r2, 85296 <__divdi3+0xda>
   85290:	2301      	movs	r3, #1
   85292:	fbb3 f5f2 	udiv	r5, r3, r2
   85296:	fab5 f285 	clz	r2, r5
   8529a:	2a00      	cmp	r2, #0
   8529c:	d13a      	bne.n	85314 <__divdi3+0x158>
   8529e:	1b7f      	subs	r7, r7, r5
   852a0:	0c28      	lsrs	r0, r5, #16
   852a2:	fa1f fc85 	uxth.w	ip, r5
   852a6:	2301      	movs	r3, #1
   852a8:	fbb7 f1f0 	udiv	r1, r7, r0
   852ac:	fb00 7711 	mls	r7, r0, r1, r7
   852b0:	fb0c f201 	mul.w	r2, ip, r1
   852b4:	ea4f 4816 	mov.w	r8, r6, lsr #16
   852b8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   852bc:	42ba      	cmp	r2, r7
   852be:	d907      	bls.n	852d0 <__divdi3+0x114>
   852c0:	197f      	adds	r7, r7, r5
   852c2:	f101 38ff 	add.w	r8, r1, #4294967295
   852c6:	d202      	bcs.n	852ce <__divdi3+0x112>
   852c8:	42ba      	cmp	r2, r7
   852ca:	f200 80c4 	bhi.w	85456 <__divdi3+0x29a>
   852ce:	4641      	mov	r1, r8
   852d0:	1abf      	subs	r7, r7, r2
   852d2:	fbb7 f2f0 	udiv	r2, r7, r0
   852d6:	fb00 7012 	mls	r0, r0, r2, r7
   852da:	fb0c fc02 	mul.w	ip, ip, r2
   852de:	b2b6      	uxth	r6, r6
   852e0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   852e4:	4584      	cmp	ip, r0
   852e6:	d907      	bls.n	852f8 <__divdi3+0x13c>
   852e8:	1940      	adds	r0, r0, r5
   852ea:	f102 37ff 	add.w	r7, r2, #4294967295
   852ee:	d202      	bcs.n	852f6 <__divdi3+0x13a>
   852f0:	4584      	cmp	ip, r0
   852f2:	f200 80ae 	bhi.w	85452 <__divdi3+0x296>
   852f6:	463a      	mov	r2, r7
   852f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   852fc:	e7b0      	b.n	85260 <__divdi3+0xa4>
   852fe:	43e4      	mvns	r4, r4
   85300:	4252      	negs	r2, r2
   85302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85306:	e762      	b.n	851ce <__divdi3+0x12>
   85308:	4240      	negs	r0, r0
   8530a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8530e:	f04f 34ff 	mov.w	r4, #4294967295
   85312:	e759      	b.n	851c8 <__divdi3+0xc>
   85314:	4095      	lsls	r5, r2
   85316:	f1c2 0920 	rsb	r9, r2, #32
   8531a:	fa27 f109 	lsr.w	r1, r7, r9
   8531e:	fa26 f909 	lsr.w	r9, r6, r9
   85322:	4097      	lsls	r7, r2
   85324:	0c28      	lsrs	r0, r5, #16
   85326:	fbb1 f8f0 	udiv	r8, r1, r0
   8532a:	fb00 1118 	mls	r1, r0, r8, r1
   8532e:	fa1f fc85 	uxth.w	ip, r5
   85332:	fb0c f308 	mul.w	r3, ip, r8
   85336:	ea49 0907 	orr.w	r9, r9, r7
   8533a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   8533e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   85342:	428b      	cmp	r3, r1
   85344:	fa06 f602 	lsl.w	r6, r6, r2
   85348:	d908      	bls.n	8535c <__divdi3+0x1a0>
   8534a:	1949      	adds	r1, r1, r5
   8534c:	f108 32ff 	add.w	r2, r8, #4294967295
   85350:	d27a      	bcs.n	85448 <__divdi3+0x28c>
   85352:	428b      	cmp	r3, r1
   85354:	d978      	bls.n	85448 <__divdi3+0x28c>
   85356:	f1a8 0802 	sub.w	r8, r8, #2
   8535a:	4429      	add	r1, r5
   8535c:	1ac9      	subs	r1, r1, r3
   8535e:	fbb1 f3f0 	udiv	r3, r1, r0
   85362:	fb00 1713 	mls	r7, r0, r3, r1
   85366:	fb0c f203 	mul.w	r2, ip, r3
   8536a:	fa1f f989 	uxth.w	r9, r9
   8536e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   85372:	42ba      	cmp	r2, r7
   85374:	d907      	bls.n	85386 <__divdi3+0x1ca>
   85376:	197f      	adds	r7, r7, r5
   85378:	f103 31ff 	add.w	r1, r3, #4294967295
   8537c:	d260      	bcs.n	85440 <__divdi3+0x284>
   8537e:	42ba      	cmp	r2, r7
   85380:	d95e      	bls.n	85440 <__divdi3+0x284>
   85382:	3b02      	subs	r3, #2
   85384:	442f      	add	r7, r5
   85386:	1abf      	subs	r7, r7, r2
   85388:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8538c:	e78c      	b.n	852a8 <__divdi3+0xec>
   8538e:	f1c8 0220 	rsb	r2, r8, #32
   85392:	fa25 f102 	lsr.w	r1, r5, r2
   85396:	fa03 fc08 	lsl.w	ip, r3, r8
   8539a:	fa27 f302 	lsr.w	r3, r7, r2
   8539e:	fa20 f202 	lsr.w	r2, r0, r2
   853a2:	fa07 f708 	lsl.w	r7, r7, r8
   853a6:	ea41 0c0c 	orr.w	ip, r1, ip
   853aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
   853ae:	fbb3 f1f9 	udiv	r1, r3, r9
   853b2:	fb09 3311 	mls	r3, r9, r1, r3
   853b6:	fa1f fa8c 	uxth.w	sl, ip
   853ba:	fb0a fb01 	mul.w	fp, sl, r1
   853be:	4317      	orrs	r7, r2
   853c0:	0c3a      	lsrs	r2, r7, #16
   853c2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   853c6:	459b      	cmp	fp, r3
   853c8:	fa05 f008 	lsl.w	r0, r5, r8
   853cc:	d908      	bls.n	853e0 <__divdi3+0x224>
   853ce:	eb13 030c 	adds.w	r3, r3, ip
   853d2:	f101 32ff 	add.w	r2, r1, #4294967295
   853d6:	d235      	bcs.n	85444 <__divdi3+0x288>
   853d8:	459b      	cmp	fp, r3
   853da:	d933      	bls.n	85444 <__divdi3+0x288>
   853dc:	3902      	subs	r1, #2
   853de:	4463      	add	r3, ip
   853e0:	ebcb 0303 	rsb	r3, fp, r3
   853e4:	fbb3 f2f9 	udiv	r2, r3, r9
   853e8:	fb09 3312 	mls	r3, r9, r2, r3
   853ec:	fb0a fa02 	mul.w	sl, sl, r2
   853f0:	b2bf      	uxth	r7, r7
   853f2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   853f6:	45ba      	cmp	sl, r7
   853f8:	d908      	bls.n	8540c <__divdi3+0x250>
   853fa:	eb17 070c 	adds.w	r7, r7, ip
   853fe:	f102 33ff 	add.w	r3, r2, #4294967295
   85402:	d21b      	bcs.n	8543c <__divdi3+0x280>
   85404:	45ba      	cmp	sl, r7
   85406:	d919      	bls.n	8543c <__divdi3+0x280>
   85408:	3a02      	subs	r2, #2
   8540a:	4467      	add	r7, ip
   8540c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   85410:	fba5 0100 	umull	r0, r1, r5, r0
   85414:	ebca 0707 	rsb	r7, sl, r7
   85418:	428f      	cmp	r7, r1
   8541a:	f04f 0300 	mov.w	r3, #0
   8541e:	d30a      	bcc.n	85436 <__divdi3+0x27a>
   85420:	d005      	beq.n	8542e <__divdi3+0x272>
   85422:	462a      	mov	r2, r5
   85424:	e71c      	b.n	85260 <__divdi3+0xa4>
   85426:	4662      	mov	r2, ip
   85428:	e6fd      	b.n	85226 <__divdi3+0x6a>
   8542a:	463b      	mov	r3, r7
   8542c:	e710      	b.n	85250 <__divdi3+0x94>
   8542e:	fa06 f608 	lsl.w	r6, r6, r8
   85432:	4286      	cmp	r6, r0
   85434:	d2f5      	bcs.n	85422 <__divdi3+0x266>
   85436:	1e6a      	subs	r2, r5, #1
   85438:	2300      	movs	r3, #0
   8543a:	e711      	b.n	85260 <__divdi3+0xa4>
   8543c:	461a      	mov	r2, r3
   8543e:	e7e5      	b.n	8540c <__divdi3+0x250>
   85440:	460b      	mov	r3, r1
   85442:	e7a0      	b.n	85386 <__divdi3+0x1ca>
   85444:	4611      	mov	r1, r2
   85446:	e7cb      	b.n	853e0 <__divdi3+0x224>
   85448:	4690      	mov	r8, r2
   8544a:	e787      	b.n	8535c <__divdi3+0x1a0>
   8544c:	4643      	mov	r3, r8
   8544e:	4642      	mov	r2, r8
   85450:	e706      	b.n	85260 <__divdi3+0xa4>
   85452:	3a02      	subs	r2, #2
   85454:	e750      	b.n	852f8 <__divdi3+0x13c>
   85456:	3902      	subs	r1, #2
   85458:	442f      	add	r7, r5
   8545a:	e739      	b.n	852d0 <__divdi3+0x114>

0008545c <__udivdi3>:
   8545c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85460:	4614      	mov	r4, r2
   85462:	4605      	mov	r5, r0
   85464:	460e      	mov	r6, r1
   85466:	2b00      	cmp	r3, #0
   85468:	d143      	bne.n	854f2 <__udivdi3+0x96>
   8546a:	428a      	cmp	r2, r1
   8546c:	d953      	bls.n	85516 <__udivdi3+0xba>
   8546e:	fab2 f782 	clz	r7, r2
   85472:	b157      	cbz	r7, 8548a <__udivdi3+0x2e>
   85474:	f1c7 0620 	rsb	r6, r7, #32
   85478:	fa20 f606 	lsr.w	r6, r0, r6
   8547c:	fa01 f307 	lsl.w	r3, r1, r7
   85480:	fa02 f407 	lsl.w	r4, r2, r7
   85484:	fa00 f507 	lsl.w	r5, r0, r7
   85488:	431e      	orrs	r6, r3
   8548a:	0c21      	lsrs	r1, r4, #16
   8548c:	fbb6 f2f1 	udiv	r2, r6, r1
   85490:	fb01 6612 	mls	r6, r1, r2, r6
   85494:	b2a0      	uxth	r0, r4
   85496:	fb00 f302 	mul.w	r3, r0, r2
   8549a:	0c2f      	lsrs	r7, r5, #16
   8549c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   854a0:	42b3      	cmp	r3, r6
   854a2:	d909      	bls.n	854b8 <__udivdi3+0x5c>
   854a4:	1936      	adds	r6, r6, r4
   854a6:	f102 37ff 	add.w	r7, r2, #4294967295
   854aa:	f080 80fd 	bcs.w	856a8 <__udivdi3+0x24c>
   854ae:	42b3      	cmp	r3, r6
   854b0:	f240 80fa 	bls.w	856a8 <__udivdi3+0x24c>
   854b4:	3a02      	subs	r2, #2
   854b6:	4426      	add	r6, r4
   854b8:	1af6      	subs	r6, r6, r3
   854ba:	fbb6 f3f1 	udiv	r3, r6, r1
   854be:	fb01 6113 	mls	r1, r1, r3, r6
   854c2:	fb00 f003 	mul.w	r0, r0, r3
   854c6:	b2ad      	uxth	r5, r5
   854c8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   854cc:	4288      	cmp	r0, r1
   854ce:	d908      	bls.n	854e2 <__udivdi3+0x86>
   854d0:	1909      	adds	r1, r1, r4
   854d2:	f103 36ff 	add.w	r6, r3, #4294967295
   854d6:	f080 80e9 	bcs.w	856ac <__udivdi3+0x250>
   854da:	4288      	cmp	r0, r1
   854dc:	f240 80e6 	bls.w	856ac <__udivdi3+0x250>
   854e0:	3b02      	subs	r3, #2
   854e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   854e6:	2300      	movs	r3, #0
   854e8:	4610      	mov	r0, r2
   854ea:	4619      	mov	r1, r3
   854ec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   854f0:	4770      	bx	lr
   854f2:	428b      	cmp	r3, r1
   854f4:	d84c      	bhi.n	85590 <__udivdi3+0x134>
   854f6:	fab3 f683 	clz	r6, r3
   854fa:	2e00      	cmp	r6, #0
   854fc:	d14f      	bne.n	8559e <__udivdi3+0x142>
   854fe:	428b      	cmp	r3, r1
   85500:	d302      	bcc.n	85508 <__udivdi3+0xac>
   85502:	4282      	cmp	r2, r0
   85504:	f200 80dd 	bhi.w	856c2 <__udivdi3+0x266>
   85508:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8550c:	2300      	movs	r3, #0
   8550e:	2201      	movs	r2, #1
   85510:	4610      	mov	r0, r2
   85512:	4619      	mov	r1, r3
   85514:	4770      	bx	lr
   85516:	b912      	cbnz	r2, 8551e <__udivdi3+0xc2>
   85518:	2401      	movs	r4, #1
   8551a:	fbb4 f4f2 	udiv	r4, r4, r2
   8551e:	fab4 f284 	clz	r2, r4
   85522:	2a00      	cmp	r2, #0
   85524:	f040 8082 	bne.w	8562c <__udivdi3+0x1d0>
   85528:	1b09      	subs	r1, r1, r4
   8552a:	0c26      	lsrs	r6, r4, #16
   8552c:	b2a7      	uxth	r7, r4
   8552e:	2301      	movs	r3, #1
   85530:	fbb1 f0f6 	udiv	r0, r1, r6
   85534:	fb06 1110 	mls	r1, r6, r0, r1
   85538:	fb07 f200 	mul.w	r2, r7, r0
   8553c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   85540:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   85544:	428a      	cmp	r2, r1
   85546:	d907      	bls.n	85558 <__udivdi3+0xfc>
   85548:	1909      	adds	r1, r1, r4
   8554a:	f100 3cff 	add.w	ip, r0, #4294967295
   8554e:	d202      	bcs.n	85556 <__udivdi3+0xfa>
   85550:	428a      	cmp	r2, r1
   85552:	f200 80c8 	bhi.w	856e6 <__udivdi3+0x28a>
   85556:	4660      	mov	r0, ip
   85558:	1a89      	subs	r1, r1, r2
   8555a:	fbb1 f2f6 	udiv	r2, r1, r6
   8555e:	fb06 1112 	mls	r1, r6, r2, r1
   85562:	fb07 f702 	mul.w	r7, r7, r2
   85566:	b2ad      	uxth	r5, r5
   85568:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8556c:	42af      	cmp	r7, r5
   8556e:	d908      	bls.n	85582 <__udivdi3+0x126>
   85570:	192c      	adds	r4, r5, r4
   85572:	f102 31ff 	add.w	r1, r2, #4294967295
   85576:	f080 809b 	bcs.w	856b0 <__udivdi3+0x254>
   8557a:	42a7      	cmp	r7, r4
   8557c:	f240 8098 	bls.w	856b0 <__udivdi3+0x254>
   85580:	3a02      	subs	r2, #2
   85582:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   85586:	4610      	mov	r0, r2
   85588:	4619      	mov	r1, r3
   8558a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8558e:	4770      	bx	lr
   85590:	2300      	movs	r3, #0
   85592:	461a      	mov	r2, r3
   85594:	4610      	mov	r0, r2
   85596:	4619      	mov	r1, r3
   85598:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8559c:	4770      	bx	lr
   8559e:	f1c6 0520 	rsb	r5, r6, #32
   855a2:	fa22 f705 	lsr.w	r7, r2, r5
   855a6:	fa03 f406 	lsl.w	r4, r3, r6
   855aa:	fa21 f305 	lsr.w	r3, r1, r5
   855ae:	fa01 fb06 	lsl.w	fp, r1, r6
   855b2:	fa20 f505 	lsr.w	r5, r0, r5
   855b6:	433c      	orrs	r4, r7
   855b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   855bc:	fbb3 fcf8 	udiv	ip, r3, r8
   855c0:	fb08 331c 	mls	r3, r8, ip, r3
   855c4:	fa1f f984 	uxth.w	r9, r4
   855c8:	fb09 fa0c 	mul.w	sl, r9, ip
   855cc:	ea45 0b0b 	orr.w	fp, r5, fp
   855d0:	ea4f 451b 	mov.w	r5, fp, lsr #16
   855d4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   855d8:	459a      	cmp	sl, r3
   855da:	fa02 f206 	lsl.w	r2, r2, r6
   855de:	d904      	bls.n	855ea <__udivdi3+0x18e>
   855e0:	191b      	adds	r3, r3, r4
   855e2:	f10c 35ff 	add.w	r5, ip, #4294967295
   855e6:	d36f      	bcc.n	856c8 <__udivdi3+0x26c>
   855e8:	46ac      	mov	ip, r5
   855ea:	ebca 0303 	rsb	r3, sl, r3
   855ee:	fbb3 f5f8 	udiv	r5, r3, r8
   855f2:	fb08 3315 	mls	r3, r8, r5, r3
   855f6:	fb09 f905 	mul.w	r9, r9, r5
   855fa:	fa1f fb8b 	uxth.w	fp, fp
   855fe:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   85602:	45b9      	cmp	r9, r7
   85604:	d904      	bls.n	85610 <__udivdi3+0x1b4>
   85606:	193f      	adds	r7, r7, r4
   85608:	f105 33ff 	add.w	r3, r5, #4294967295
   8560c:	d362      	bcc.n	856d4 <__udivdi3+0x278>
   8560e:	461d      	mov	r5, r3
   85610:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   85614:	fbac 2302 	umull	r2, r3, ip, r2
   85618:	ebc9 0707 	rsb	r7, r9, r7
   8561c:	429f      	cmp	r7, r3
   8561e:	f04f 0500 	mov.w	r5, #0
   85622:	d34a      	bcc.n	856ba <__udivdi3+0x25e>
   85624:	d046      	beq.n	856b4 <__udivdi3+0x258>
   85626:	4662      	mov	r2, ip
   85628:	462b      	mov	r3, r5
   8562a:	e75d      	b.n	854e8 <__udivdi3+0x8c>
   8562c:	4094      	lsls	r4, r2
   8562e:	f1c2 0920 	rsb	r9, r2, #32
   85632:	fa21 fc09 	lsr.w	ip, r1, r9
   85636:	4091      	lsls	r1, r2
   85638:	fa20 f909 	lsr.w	r9, r0, r9
   8563c:	0c26      	lsrs	r6, r4, #16
   8563e:	fbbc f8f6 	udiv	r8, ip, r6
   85642:	fb06 cc18 	mls	ip, r6, r8, ip
   85646:	b2a7      	uxth	r7, r4
   85648:	fb07 f308 	mul.w	r3, r7, r8
   8564c:	ea49 0901 	orr.w	r9, r9, r1
   85650:	ea4f 4119 	mov.w	r1, r9, lsr #16
   85654:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   85658:	4563      	cmp	r3, ip
   8565a:	fa00 f502 	lsl.w	r5, r0, r2
   8565e:	d909      	bls.n	85674 <__udivdi3+0x218>
   85660:	eb1c 0c04 	adds.w	ip, ip, r4
   85664:	f108 32ff 	add.w	r2, r8, #4294967295
   85668:	d23b      	bcs.n	856e2 <__udivdi3+0x286>
   8566a:	4563      	cmp	r3, ip
   8566c:	d939      	bls.n	856e2 <__udivdi3+0x286>
   8566e:	f1a8 0802 	sub.w	r8, r8, #2
   85672:	44a4      	add	ip, r4
   85674:	ebc3 0c0c 	rsb	ip, r3, ip
   85678:	fbbc f3f6 	udiv	r3, ip, r6
   8567c:	fb06 c113 	mls	r1, r6, r3, ip
   85680:	fb07 f203 	mul.w	r2, r7, r3
   85684:	fa1f f989 	uxth.w	r9, r9
   85688:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8568c:	428a      	cmp	r2, r1
   8568e:	d907      	bls.n	856a0 <__udivdi3+0x244>
   85690:	1909      	adds	r1, r1, r4
   85692:	f103 30ff 	add.w	r0, r3, #4294967295
   85696:	d222      	bcs.n	856de <__udivdi3+0x282>
   85698:	428a      	cmp	r2, r1
   8569a:	d920      	bls.n	856de <__udivdi3+0x282>
   8569c:	3b02      	subs	r3, #2
   8569e:	4421      	add	r1, r4
   856a0:	1a89      	subs	r1, r1, r2
   856a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   856a6:	e743      	b.n	85530 <__udivdi3+0xd4>
   856a8:	463a      	mov	r2, r7
   856aa:	e705      	b.n	854b8 <__udivdi3+0x5c>
   856ac:	4633      	mov	r3, r6
   856ae:	e718      	b.n	854e2 <__udivdi3+0x86>
   856b0:	460a      	mov	r2, r1
   856b2:	e766      	b.n	85582 <__udivdi3+0x126>
   856b4:	40b0      	lsls	r0, r6
   856b6:	4290      	cmp	r0, r2
   856b8:	d2b5      	bcs.n	85626 <__udivdi3+0x1ca>
   856ba:	f10c 32ff 	add.w	r2, ip, #4294967295
   856be:	2300      	movs	r3, #0
   856c0:	e712      	b.n	854e8 <__udivdi3+0x8c>
   856c2:	4633      	mov	r3, r6
   856c4:	4632      	mov	r2, r6
   856c6:	e70f      	b.n	854e8 <__udivdi3+0x8c>
   856c8:	459a      	cmp	sl, r3
   856ca:	d98d      	bls.n	855e8 <__udivdi3+0x18c>
   856cc:	f1ac 0c02 	sub.w	ip, ip, #2
   856d0:	4423      	add	r3, r4
   856d2:	e78a      	b.n	855ea <__udivdi3+0x18e>
   856d4:	45b9      	cmp	r9, r7
   856d6:	d99a      	bls.n	8560e <__udivdi3+0x1b2>
   856d8:	3d02      	subs	r5, #2
   856da:	4427      	add	r7, r4
   856dc:	e798      	b.n	85610 <__udivdi3+0x1b4>
   856de:	4603      	mov	r3, r0
   856e0:	e7de      	b.n	856a0 <__udivdi3+0x244>
   856e2:	4690      	mov	r8, r2
   856e4:	e7c6      	b.n	85674 <__udivdi3+0x218>
   856e6:	3802      	subs	r0, #2
   856e8:	4421      	add	r1, r4
   856ea:	e735      	b.n	85558 <__udivdi3+0xfc>
   856ec:	72617453 	.word	0x72617453
   856f0:	00726174 	.word	0x00726174
   856f4:	72617453 	.word	0x72617453
   856f8:	00002174 	.word	0x00002174
   856fc:	3d746f72 	.word	0x3d746f72
   85700:	000a6425 	.word	0x000a6425
   85704:	74736964 	.word	0x74736964
   85708:	65636e61 	.word	0x65636e61
   8570c:	0a64253d 	.word	0x0a64253d
   85710:	00000000 	.word	0x00000000
   85714:	00000001 	.word	0x00000001
   85718:	00000002 	.word	0x00000002
   8571c:	00000004 	.word	0x00000004
   85720:	00000008 	.word	0x00000008
   85724:	00000010 	.word	0x00000010
   85728:	00000020 	.word	0x00000020
   8572c:	00000040 	.word	0x00000040
   85730:	00000080 	.word	0x00000080
   85734:	00000100 	.word	0x00000100
   85738:	00000200 	.word	0x00000200
   8573c:	00000400 	.word	0x00000400

00085740 <atanlo>:
   85740:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   85750:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00085760 <atanhi>:
   85760:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   85770:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
   85780:	74727173 00000000 00000043              sqrt....C...

0008578c <_global_impure_ptr>:
   8578c:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   8579c:	46454443 00000000 33323130 37363534     CDEF....01234567
   857ac:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   857bc:	0000296c                                l)..

000857c0 <zeroes.6721>:
   857c0:	30303030 30303030 30303030 30303030     0000000000000000

000857d0 <blanks.6720>:
   857d0:	20202020 20202020 20202020 20202020                     

000857e0 <_init>:
   857e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   857e2:	bf00      	nop
   857e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   857e6:	bc08      	pop	{r3}
   857e8:	469e      	mov	lr, r3
   857ea:	4770      	bx	lr

000857ec <__init_array_start>:
   857ec:	000837e1 	.word	0x000837e1

000857f0 <__frame_dummy_init_array_entry>:
   857f0:	00080119                                ....

000857f4 <_fini>:
   857f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   857f6:	bf00      	nop
   857f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   857fa:	bc08      	pop	{r3}
   857fc:	469e      	mov	lr, r3
   857fe:	4770      	bx	lr

00085800 <__fini_array_start>:
   85800:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <c1Loop>:
20070138:	00010101                                         .

20070139 <c2Loop>:
20070139:	00000101                                         .

2007013a <g_interrupt_enabled>:
2007013a:	09000001                                         ..

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <__fdlib_version>:
20070140:	00000001 00000000                       ........

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	00085788 00000000 00000000 00000000     .W..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <lc_ctype_charset>:
20070574:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070594 <__mb_cur_max>:
20070594:	00000001                                ....

20070598 <__malloc_av_>:
	...
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 

200709a0 <__malloc_trim_threshold>:
200709a0:	00020000                                ....

200709a4 <__malloc_sbrk_base>:
200709a4:	ffffffff                                ....

200709a8 <__wctomb>:
200709a8:	00084ef1                                .N..
