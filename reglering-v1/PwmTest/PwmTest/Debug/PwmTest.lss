
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f34  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083f34  00083f34  0000bf34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00083f3c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001cc  200709a4  000848e0  000109a4  2**2
                  ALLOC
  4 .stack        00002000  20070b70  00084aac  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000ed63  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002756  00000000  00000000  0001f78b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004e91  00000000  00000000  00021ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b50  00000000  00000000  00026d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a18  00000000  00000000  000278c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018ae0  00000000  00000000  000282da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010e43  00000000  00000000  00040dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00061439  00000000  00000000  00051bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002258  00000000  00000000  000b3038  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b70 	.word	0x20072b70
   80004:	00080df1 	.word	0x00080df1
   80008:	00080ded 	.word	0x00080ded
   8000c:	00080ded 	.word	0x00080ded
   80010:	00080ded 	.word	0x00080ded
   80014:	00080ded 	.word	0x00080ded
   80018:	00080ded 	.word	0x00080ded
	...
   8002c:	00080ded 	.word	0x00080ded
   80030:	00080ded 	.word	0x00080ded
   80034:	00000000 	.word	0x00000000
   80038:	00080ded 	.word	0x00080ded
   8003c:	00080ded 	.word	0x00080ded
   80040:	00080ded 	.word	0x00080ded
   80044:	00080ded 	.word	0x00080ded
   80048:	00080ded 	.word	0x00080ded
   8004c:	00080ded 	.word	0x00080ded
   80050:	00080ded 	.word	0x00080ded
   80054:	00080ded 	.word	0x00080ded
   80058:	00080ded 	.word	0x00080ded
   8005c:	00080ded 	.word	0x00080ded
   80060:	00080ded 	.word	0x00080ded
   80064:	00080ded 	.word	0x00080ded
   80068:	00000000 	.word	0x00000000
   8006c:	00080b6d 	.word	0x00080b6d
   80070:	00080b81 	.word	0x00080b81
   80074:	00080b95 	.word	0x00080b95
   80078:	00080ba9 	.word	0x00080ba9
	...
   80084:	00080391 	.word	0x00080391
   80088:	00080ded 	.word	0x00080ded
   8008c:	00080ded 	.word	0x00080ded
   80090:	00080ded 	.word	0x00080ded
   80094:	00080ded 	.word	0x00080ded
   80098:	00080ded 	.word	0x00080ded
   8009c:	00080ded 	.word	0x00080ded
   800a0:	00080ded 	.word	0x00080ded
   800a4:	00000000 	.word	0x00000000
   800a8:	00080ded 	.word	0x00080ded
   800ac:	00080ded 	.word	0x00080ded
   800b0:	00080ded 	.word	0x00080ded
   800b4:	00080ded 	.word	0x00080ded
   800b8:	00080ded 	.word	0x00080ded
   800bc:	00080ded 	.word	0x00080ded
   800c0:	00080ded 	.word	0x00080ded
   800c4:	00080ded 	.word	0x00080ded
   800c8:	00080ded 	.word	0x00080ded
   800cc:	00080ded 	.word	0x00080ded
   800d0:	00080ded 	.word	0x00080ded
   800d4:	00080ded 	.word	0x00080ded
   800d8:	00080ded 	.word	0x00080ded
   800dc:	00080ded 	.word	0x00080ded
   800e0:	00080ded 	.word	0x00080ded
   800e4:	00080ded 	.word	0x00080ded
   800e8:	00080ded 	.word	0x00080ded
   800ec:	00080ded 	.word	0x00080ded
   800f0:	00080ded 	.word	0x00080ded

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	00083f3c 	.word	0x00083f3c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083f3c 	.word	0x00083f3c
   8013c:	200709a8 	.word	0x200709a8
   80140:	00083f3c 	.word	0x00083f3c
   80144:	00000000 	.word	0x00000000

00080148 <main>:
// int e=0;
// double kp = 2;
// uint16_t speed = 1700;

int main(void)
{
   80148:	b510      	push	{r4, lr}
	/* Initialize the SAM system */
	SystemInit();
   8014a:	4b0e      	ldr	r3, [pc, #56]	; (80184 <main+0x3c>)
   8014c:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   8014e:	4b0e      	ldr	r3, [pc, #56]	; (80188 <main+0x40>)
   80150:	4798      	blx	r3
	configureConsole();
   80152:	4b0e      	ldr	r3, [pc, #56]	; (8018c <main+0x44>)
   80154:	4798      	blx	r3
	configInterrupts();
   80156:	4b0e      	ldr	r3, [pc, #56]	; (80190 <main+0x48>)
   80158:	4798      	blx	r3
	PWM_init();
   8015a:	4b0e      	ldr	r3, [pc, #56]	; (80194 <main+0x4c>)
   8015c:	4798      	blx	r3
	printf("Startar");
   8015e:	480e      	ldr	r0, [pc, #56]	; (80198 <main+0x50>)
   80160:	4b0e      	ldr	r3, [pc, #56]	; (8019c <main+0x54>)
   80162:	4798      	blx	r3
	delay_s(3);
   80164:	480e      	ldr	r0, [pc, #56]	; (801a0 <main+0x58>)
   80166:	4c0f      	ldr	r4, [pc, #60]	; (801a4 <main+0x5c>)
   80168:	47a0      	blx	r4
   rightWheel(1700);
   8016a:	f240 60a4 	movw	r0, #1700	; 0x6a4
   8016e:	4b0e      	ldr	r3, [pc, #56]	; (801a8 <main+0x60>)
   80170:	4798      	blx	r3
   delay_us(100);
   80172:	f44f 7016 	mov.w	r0, #600	; 0x258
   80176:	47a0      	blx	r4
   leftWheel(1700);
   80178:	f240 60a4 	movw	r0, #1700	; 0x6a4
   8017c:	4b0b      	ldr	r3, [pc, #44]	; (801ac <main+0x64>)
   8017e:	4798      	blx	r3
		//printf("\n m_value = %d",m_value);
		//delay_us(46200*3);
		
	}
	
}
   80180:	2000      	movs	r0, #0
   80182:	bd10      	pop	{r4, pc}
   80184:	2007000d 	.word	0x2007000d
   80188:	000807f1 	.word	0x000807f1
   8018c:	0008054d 	.word	0x0008054d
   80190:	0008061d 	.word	0x0008061d
   80194:	00080749 	.word	0x00080749
   80198:	00083e84 	.word	0x00083e84
   8019c:	00080f41 	.word	0x00080f41
   801a0:	0112a880 	.word	0x0112a880
   801a4:	20070001 	.word	0x20070001
   801a8:	000807c1 	.word	0x000807c1
   801ac:	000807a5 	.word	0x000807a5

000801b0 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   801b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801b4:	b083      	sub	sp, #12
   801b6:	4605      	mov	r5, r0
	while (len) {
   801b8:	4690      	mov	r8, r2
   801ba:	2a00      	cmp	r2, #0
   801bc:	d047      	beq.n	8024e <usart_serial_read_packet+0x9e>
   801be:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801c0:	4f25      	ldr	r7, [pc, #148]	; (80258 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   801c2:	4c26      	ldr	r4, [pc, #152]	; (8025c <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801c4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80270 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   801c8:	f8df b094 	ldr.w	fp, [pc, #148]	; 80260 <usart_serial_read_packet+0xb0>
   801cc:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   801d0:	2300      	movs	r3, #0
   801d2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801d4:	4b22      	ldr	r3, [pc, #136]	; (80260 <usart_serial_read_packet+0xb0>)
   801d6:	429d      	cmp	r5, r3
   801d8:	d106      	bne.n	801e8 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   801da:	4658      	mov	r0, fp
   801dc:	4649      	mov	r1, r9
   801de:	4b21      	ldr	r3, [pc, #132]	; (80264 <usart_serial_read_packet+0xb4>)
   801e0:	4798      	blx	r3
   801e2:	2800      	cmp	r0, #0
   801e4:	d1f9      	bne.n	801da <usart_serial_read_packet+0x2a>
   801e6:	e019      	b.n	8021c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801e8:	4b1f      	ldr	r3, [pc, #124]	; (80268 <usart_serial_read_packet+0xb8>)
   801ea:	429d      	cmp	r5, r3
   801ec:	d109      	bne.n	80202 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   801ee:	4699      	mov	r9, r3
   801f0:	4648      	mov	r0, r9
   801f2:	a901      	add	r1, sp, #4
   801f4:	47a0      	blx	r4
   801f6:	2800      	cmp	r0, #0
   801f8:	d1fa      	bne.n	801f0 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   801fa:	9b01      	ldr	r3, [sp, #4]
   801fc:	f806 3c01 	strb.w	r3, [r6, #-1]
   80200:	e017      	b.n	80232 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80202:	4b1a      	ldr	r3, [pc, #104]	; (8026c <usart_serial_read_packet+0xbc>)
   80204:	429d      	cmp	r5, r3
   80206:	d109      	bne.n	8021c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80208:	4699      	mov	r9, r3
   8020a:	4648      	mov	r0, r9
   8020c:	a901      	add	r1, sp, #4
   8020e:	47a0      	blx	r4
   80210:	2800      	cmp	r0, #0
   80212:	d1fa      	bne.n	8020a <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80214:	9b01      	ldr	r3, [sp, #4]
   80216:	f806 3c01 	strb.w	r3, [r6, #-1]
   8021a:	e014      	b.n	80246 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8021c:	4555      	cmp	r5, sl
   8021e:	d108      	bne.n	80232 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80220:	4650      	mov	r0, sl
   80222:	a901      	add	r1, sp, #4
   80224:	47a0      	blx	r4
   80226:	2800      	cmp	r0, #0
   80228:	d1fa      	bne.n	80220 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   8022a:	9b01      	ldr	r3, [sp, #4]
   8022c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80230:	e009      	b.n	80246 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80232:	42bd      	cmp	r5, r7
   80234:	d107      	bne.n	80246 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80236:	4638      	mov	r0, r7
   80238:	a901      	add	r1, sp, #4
   8023a:	47a0      	blx	r4
   8023c:	2800      	cmp	r0, #0
   8023e:	d1fa      	bne.n	80236 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80240:	9b01      	ldr	r3, [sp, #4]
   80242:	f806 3c01 	strb.w	r3, [r6, #-1]
   80246:	3601      	adds	r6, #1
   80248:	f1b8 0801 	subs.w	r8, r8, #1
   8024c:	d1be      	bne.n	801cc <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8024e:	2000      	movs	r0, #0
   80250:	b003      	add	sp, #12
   80252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80256:	bf00      	nop
   80258:	400a4000 	.word	0x400a4000
   8025c:	00080379 	.word	0x00080379
   80260:	400e0800 	.word	0x400e0800
   80264:	00080351 	.word	0x00080351
   80268:	40098000 	.word	0x40098000
   8026c:	4009c000 	.word	0x4009c000
   80270:	400a0000 	.word	0x400a0000

00080274 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80278:	460c      	mov	r4, r1
   8027a:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   8027c:	b960      	cbnz	r0, 80298 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8027e:	2a00      	cmp	r2, #0
   80280:	dd0e      	ble.n	802a0 <_read+0x2c>
   80282:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80284:	4e09      	ldr	r6, [pc, #36]	; (802ac <_read+0x38>)
   80286:	4d0a      	ldr	r5, [pc, #40]	; (802b0 <_read+0x3c>)
   80288:	6830      	ldr	r0, [r6, #0]
   8028a:	4621      	mov	r1, r4
   8028c:	682b      	ldr	r3, [r5, #0]
   8028e:	4798      	blx	r3
		ptr++;
   80290:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80292:	42bc      	cmp	r4, r7
   80294:	d1f8      	bne.n	80288 <_read+0x14>
   80296:	e006      	b.n	802a6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80298:	f04f 30ff 	mov.w	r0, #4294967295
   8029c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   802a0:	2000      	movs	r0, #0
   802a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   802a6:	4640      	mov	r0, r8
	}
	return nChars;
}
   802a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802ac:	20070b18 	.word	0x20070b18
   802b0:	20070b10 	.word	0x20070b10

000802b4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   802b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802b8:	460e      	mov	r6, r1
   802ba:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   802bc:	3801      	subs	r0, #1
   802be:	2802      	cmp	r0, #2
   802c0:	d80f      	bhi.n	802e2 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   802c2:	b192      	cbz	r2, 802ea <_write+0x36>
   802c4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802c6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80304 <_write+0x50>
   802ca:	4f0d      	ldr	r7, [pc, #52]	; (80300 <_write+0x4c>)
   802cc:	f8d8 0000 	ldr.w	r0, [r8]
   802d0:	5d31      	ldrb	r1, [r6, r4]
   802d2:	683b      	ldr	r3, [r7, #0]
   802d4:	4798      	blx	r3
   802d6:	2800      	cmp	r0, #0
   802d8:	db0a      	blt.n	802f0 <_write+0x3c>
			return -1;
		}
		++nChars;
   802da:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802dc:	42a5      	cmp	r5, r4
   802de:	d1f5      	bne.n	802cc <_write+0x18>
   802e0:	e00a      	b.n	802f8 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   802e2:	f04f 30ff 	mov.w	r0, #4294967295
   802e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   802ea:	2000      	movs	r0, #0
   802ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   802f0:	f04f 30ff 	mov.w	r0, #4294967295
   802f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   802f8:	4620      	mov	r0, r4
	}
	return nChars;
}
   802fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802fe:	bf00      	nop
   80300:	20070b14 	.word	0x20070b14
   80304:	20070b18 	.word	0x20070b18

00080308 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80308:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8030a:	23ac      	movs	r3, #172	; 0xac
   8030c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8030e:	680a      	ldr	r2, [r1, #0]
   80310:	684b      	ldr	r3, [r1, #4]
   80312:	fbb2 f3f3 	udiv	r3, r2, r3
   80316:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80318:	1e5c      	subs	r4, r3, #1
   8031a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8031e:	4294      	cmp	r4, r2
   80320:	d80a      	bhi.n	80338 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80322:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80324:	688b      	ldr	r3, [r1, #8]
   80326:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80328:	f240 2302 	movw	r3, #514	; 0x202
   8032c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80330:	2350      	movs	r3, #80	; 0x50
   80332:	6003      	str	r3, [r0, #0]

	return 0;
   80334:	2000      	movs	r0, #0
   80336:	e000      	b.n	8033a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80338:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8033a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8033e:	4770      	bx	lr

00080340 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80340:	6943      	ldr	r3, [r0, #20]
   80342:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80346:	bf1a      	itte	ne
   80348:	61c1      	strne	r1, [r0, #28]
	return 0;
   8034a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8034c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8034e:	4770      	bx	lr

00080350 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80350:	6943      	ldr	r3, [r0, #20]
   80352:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80356:	bf1d      	ittte	ne
   80358:	6983      	ldrne	r3, [r0, #24]
   8035a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8035c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8035e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80360:	4770      	bx	lr
   80362:	bf00      	nop

00080364 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80364:	6943      	ldr	r3, [r0, #20]
   80366:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8036a:	bf1d      	ittte	ne
   8036c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80370:	61c1      	strne	r1, [r0, #28]
	return 0;
   80372:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80374:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80376:	4770      	bx	lr

00080378 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80378:	6943      	ldr	r3, [r0, #20]
   8037a:	f013 0f01 	tst.w	r3, #1
   8037e:	d005      	beq.n	8038c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80380:	6983      	ldr	r3, [r0, #24]
   80382:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80386:	600b      	str	r3, [r1, #0]

	return 0;
   80388:	2000      	movs	r0, #0
   8038a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8038c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8038e:	4770      	bx	lr

00080390 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80390:	b500      	push	{lr}
   80392:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80394:	4813      	ldr	r0, [pc, #76]	; (803e4 <USART0_Handler+0x54>)
   80396:	f10d 0107 	add.w	r1, sp, #7
   8039a:	2201      	movs	r2, #1
   8039c:	4b12      	ldr	r3, [pc, #72]	; (803e8 <USART0_Handler+0x58>)
   8039e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   803a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   803a2:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   803a6:	2200      	movs	r2, #0
   803a8:	4b10      	ldr	r3, [pc, #64]	; (803ec <USART0_Handler+0x5c>)
   803aa:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   803ac:	4b10      	ldr	r3, [pc, #64]	; (803f0 <USART0_Handler+0x60>)
   803ae:	781a      	ldrb	r2, [r3, #0]
   803b0:	3201      	adds	r2, #1
   803b2:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   803b4:	4b0f      	ldr	r3, [pc, #60]	; (803f4 <USART0_Handler+0x64>)
   803b6:	781b      	ldrb	r3, [r3, #0]
   803b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803bc:	4a0e      	ldr	r2, [pc, #56]	; (803f8 <USART0_Handler+0x68>)
   803be:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   803c0:	2b9b      	cmp	r3, #155	; 0x9b
   803c2:	d103      	bne.n	803cc <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   803c4:	2200      	movs	r2, #0
   803c6:	4b0b      	ldr	r3, [pc, #44]	; (803f4 <USART0_Handler+0x64>)
   803c8:	701a      	strb	r2, [r3, #0]
   803ca:	e002      	b.n	803d2 <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   803cc:	3301      	adds	r3, #1
   803ce:	4a09      	ldr	r2, [pc, #36]	; (803f4 <USART0_Handler+0x64>)
   803d0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   803d2:	2201      	movs	r2, #1
   803d4:	4b05      	ldr	r3, [pc, #20]	; (803ec <USART0_Handler+0x5c>)
   803d6:	701a      	strb	r2, [r3, #0]
   803d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   803dc:	b662      	cpsie	i
}
   803de:	b003      	add	sp, #12
   803e0:	f85d fb04 	ldr.w	pc, [sp], #4
   803e4:	40098000 	.word	0x40098000
   803e8:	000801b1 	.word	0x000801b1
   803ec:	20070138 	.word	0x20070138
   803f0:	20070a5d 	.word	0x20070a5d
   803f4:	20070a5c 	.word	0x20070a5c
   803f8:	200709c0 	.word	0x200709c0

000803fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   803fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   803fe:	b083      	sub	sp, #12
   80400:	4604      	mov	r4, r0
   80402:	460d      	mov	r5, r1
	uint32_t val = 0;
   80404:	2300      	movs	r3, #0
   80406:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80408:	4b1f      	ldr	r3, [pc, #124]	; (80488 <usart_serial_getchar+0x8c>)
   8040a:	4298      	cmp	r0, r3
   8040c:	d107      	bne.n	8041e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8040e:	461f      	mov	r7, r3
   80410:	4e1e      	ldr	r6, [pc, #120]	; (8048c <usart_serial_getchar+0x90>)
   80412:	4638      	mov	r0, r7
   80414:	4629      	mov	r1, r5
   80416:	47b0      	blx	r6
   80418:	2800      	cmp	r0, #0
   8041a:	d1fa      	bne.n	80412 <usart_serial_getchar+0x16>
   8041c:	e019      	b.n	80452 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8041e:	4b1c      	ldr	r3, [pc, #112]	; (80490 <usart_serial_getchar+0x94>)
   80420:	4298      	cmp	r0, r3
   80422:	d109      	bne.n	80438 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80424:	461f      	mov	r7, r3
   80426:	4e1b      	ldr	r6, [pc, #108]	; (80494 <usart_serial_getchar+0x98>)
   80428:	4638      	mov	r0, r7
   8042a:	a901      	add	r1, sp, #4
   8042c:	47b0      	blx	r6
   8042e:	2800      	cmp	r0, #0
   80430:	d1fa      	bne.n	80428 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80432:	9b01      	ldr	r3, [sp, #4]
   80434:	702b      	strb	r3, [r5, #0]
   80436:	e019      	b.n	8046c <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80438:	4b17      	ldr	r3, [pc, #92]	; (80498 <usart_serial_getchar+0x9c>)
   8043a:	4298      	cmp	r0, r3
   8043c:	d109      	bne.n	80452 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8043e:	461e      	mov	r6, r3
   80440:	4c14      	ldr	r4, [pc, #80]	; (80494 <usart_serial_getchar+0x98>)
   80442:	4630      	mov	r0, r6
   80444:	a901      	add	r1, sp, #4
   80446:	47a0      	blx	r4
   80448:	2800      	cmp	r0, #0
   8044a:	d1fa      	bne.n	80442 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   8044c:	9b01      	ldr	r3, [sp, #4]
   8044e:	702b      	strb	r3, [r5, #0]
   80450:	e018      	b.n	80484 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80452:	4b12      	ldr	r3, [pc, #72]	; (8049c <usart_serial_getchar+0xa0>)
   80454:	429c      	cmp	r4, r3
   80456:	d109      	bne.n	8046c <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80458:	461e      	mov	r6, r3
   8045a:	4c0e      	ldr	r4, [pc, #56]	; (80494 <usart_serial_getchar+0x98>)
   8045c:	4630      	mov	r0, r6
   8045e:	a901      	add	r1, sp, #4
   80460:	47a0      	blx	r4
   80462:	2800      	cmp	r0, #0
   80464:	d1fa      	bne.n	8045c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80466:	9b01      	ldr	r3, [sp, #4]
   80468:	702b      	strb	r3, [r5, #0]
   8046a:	e00b      	b.n	80484 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8046c:	4b0c      	ldr	r3, [pc, #48]	; (804a0 <usart_serial_getchar+0xa4>)
   8046e:	429c      	cmp	r4, r3
   80470:	d108      	bne.n	80484 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80472:	461e      	mov	r6, r3
   80474:	4c07      	ldr	r4, [pc, #28]	; (80494 <usart_serial_getchar+0x98>)
   80476:	4630      	mov	r0, r6
   80478:	a901      	add	r1, sp, #4
   8047a:	47a0      	blx	r4
   8047c:	2800      	cmp	r0, #0
   8047e:	d1fa      	bne.n	80476 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80480:	9b01      	ldr	r3, [sp, #4]
   80482:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80484:	b003      	add	sp, #12
   80486:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80488:	400e0800 	.word	0x400e0800
   8048c:	00080351 	.word	0x00080351
   80490:	40098000 	.word	0x40098000
   80494:	00080379 	.word	0x00080379
   80498:	4009c000 	.word	0x4009c000
   8049c:	400a0000 	.word	0x400a0000
   804a0:	400a4000 	.word	0x400a4000

000804a4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   804a4:	b570      	push	{r4, r5, r6, lr}
   804a6:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   804a8:	4b21      	ldr	r3, [pc, #132]	; (80530 <usart_serial_putchar+0x8c>)
   804aa:	4298      	cmp	r0, r3
   804ac:	d107      	bne.n	804be <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   804ae:	461e      	mov	r6, r3
   804b0:	4d20      	ldr	r5, [pc, #128]	; (80534 <usart_serial_putchar+0x90>)
   804b2:	4630      	mov	r0, r6
   804b4:	4621      	mov	r1, r4
   804b6:	47a8      	blx	r5
   804b8:	2800      	cmp	r0, #0
   804ba:	d1fa      	bne.n	804b2 <usart_serial_putchar+0xe>
   804bc:	e02b      	b.n	80516 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   804be:	4b1e      	ldr	r3, [pc, #120]	; (80538 <usart_serial_putchar+0x94>)
   804c0:	4298      	cmp	r0, r3
   804c2:	d107      	bne.n	804d4 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   804c4:	461e      	mov	r6, r3
   804c6:	4d1d      	ldr	r5, [pc, #116]	; (8053c <usart_serial_putchar+0x98>)
   804c8:	4630      	mov	r0, r6
   804ca:	4621      	mov	r1, r4
   804cc:	47a8      	blx	r5
   804ce:	2800      	cmp	r0, #0
   804d0:	d1fa      	bne.n	804c8 <usart_serial_putchar+0x24>
   804d2:	e022      	b.n	8051a <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   804d4:	4b1a      	ldr	r3, [pc, #104]	; (80540 <usart_serial_putchar+0x9c>)
   804d6:	4298      	cmp	r0, r3
   804d8:	d107      	bne.n	804ea <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   804da:	461e      	mov	r6, r3
   804dc:	4d17      	ldr	r5, [pc, #92]	; (8053c <usart_serial_putchar+0x98>)
   804de:	4630      	mov	r0, r6
   804e0:	4621      	mov	r1, r4
   804e2:	47a8      	blx	r5
   804e4:	2800      	cmp	r0, #0
   804e6:	d1fa      	bne.n	804de <usart_serial_putchar+0x3a>
   804e8:	e019      	b.n	8051e <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   804ea:	4b16      	ldr	r3, [pc, #88]	; (80544 <usart_serial_putchar+0xa0>)
   804ec:	4298      	cmp	r0, r3
   804ee:	d107      	bne.n	80500 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   804f0:	461e      	mov	r6, r3
   804f2:	4d12      	ldr	r5, [pc, #72]	; (8053c <usart_serial_putchar+0x98>)
   804f4:	4630      	mov	r0, r6
   804f6:	4621      	mov	r1, r4
   804f8:	47a8      	blx	r5
   804fa:	2800      	cmp	r0, #0
   804fc:	d1fa      	bne.n	804f4 <usart_serial_putchar+0x50>
   804fe:	e010      	b.n	80522 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80500:	4b11      	ldr	r3, [pc, #68]	; (80548 <usart_serial_putchar+0xa4>)
   80502:	4298      	cmp	r0, r3
   80504:	d10f      	bne.n	80526 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80506:	461e      	mov	r6, r3
   80508:	4d0c      	ldr	r5, [pc, #48]	; (8053c <usart_serial_putchar+0x98>)
   8050a:	4630      	mov	r0, r6
   8050c:	4621      	mov	r1, r4
   8050e:	47a8      	blx	r5
   80510:	2800      	cmp	r0, #0
   80512:	d1fa      	bne.n	8050a <usart_serial_putchar+0x66>
   80514:	e009      	b.n	8052a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80516:	2001      	movs	r0, #1
   80518:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8051a:	2001      	movs	r0, #1
   8051c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8051e:	2001      	movs	r0, #1
   80520:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80522:	2001      	movs	r0, #1
   80524:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80526:	2000      	movs	r0, #0
   80528:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8052a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8052c:	bd70      	pop	{r4, r5, r6, pc}
   8052e:	bf00      	nop
   80530:	400e0800 	.word	0x400e0800
   80534:	00080341 	.word	0x00080341
   80538:	40098000 	.word	0x40098000
   8053c:	00080365 	.word	0x00080365
   80540:	4009c000 	.word	0x4009c000
   80544:	400a0000 	.word	0x400a0000
   80548:	400a4000 	.word	0x400a4000

0008054c <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   8054c:	b530      	push	{r4, r5, lr}
   8054e:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80550:	2008      	movs	r0, #8
   80552:	4d13      	ldr	r5, [pc, #76]	; (805a0 <configureConsole+0x54>)
   80554:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80556:	4c13      	ldr	r4, [pc, #76]	; (805a4 <configureConsole+0x58>)
   80558:	4b13      	ldr	r3, [pc, #76]	; (805a8 <configureConsole+0x5c>)
   8055a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8055c:	4a13      	ldr	r2, [pc, #76]	; (805ac <configureConsole+0x60>)
   8055e:	4b14      	ldr	r3, [pc, #80]	; (805b0 <configureConsole+0x64>)
   80560:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80562:	4a14      	ldr	r2, [pc, #80]	; (805b4 <configureConsole+0x68>)
   80564:	4b14      	ldr	r3, [pc, #80]	; (805b8 <configureConsole+0x6c>)
   80566:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80568:	4b14      	ldr	r3, [pc, #80]	; (805bc <configureConsole+0x70>)
   8056a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8056c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80570:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80572:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80576:	9303      	str	r3, [sp, #12]
   80578:	2008      	movs	r0, #8
   8057a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8057c:	4620      	mov	r0, r4
   8057e:	a901      	add	r1, sp, #4
   80580:	4b0f      	ldr	r3, [pc, #60]	; (805c0 <configureConsole+0x74>)
   80582:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80584:	4d0f      	ldr	r5, [pc, #60]	; (805c4 <configureConsole+0x78>)
   80586:	682b      	ldr	r3, [r5, #0]
   80588:	6898      	ldr	r0, [r3, #8]
   8058a:	2100      	movs	r1, #0
   8058c:	4c0e      	ldr	r4, [pc, #56]	; (805c8 <configureConsole+0x7c>)
   8058e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80590:	682b      	ldr	r3, [r5, #0]
   80592:	6858      	ldr	r0, [r3, #4]
   80594:	2100      	movs	r1, #0
   80596:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   80598:	2000      	movs	r0, #0
   8059a:	b005      	add	sp, #20
   8059c:	bd30      	pop	{r4, r5, pc}
   8059e:	bf00      	nop
   805a0:	00080bbd 	.word	0x00080bbd
   805a4:	400e0800 	.word	0x400e0800
   805a8:	20070b18 	.word	0x20070b18
   805ac:	000804a5 	.word	0x000804a5
   805b0:	20070b14 	.word	0x20070b14
   805b4:	000803fd 	.word	0x000803fd
   805b8:	20070b10 	.word	0x20070b10
   805bc:	0501bd00 	.word	0x0501bd00
   805c0:	00080309 	.word	0x00080309
   805c4:	20070568 	.word	0x20070568
   805c8:	00080ffd 	.word	0x00080ffd

000805cc <pin12_edge_handler>:
	

}

// Handler which calls when pin 53 is toggle.  
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   805cc:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   805ce:	4806      	ldr	r0, [pc, #24]	; (805e8 <pin12_edge_handler+0x1c>)
   805d0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   805d8:	4b04      	ldr	r3, [pc, #16]	; (805ec <pin12_edge_handler+0x20>)
   805da:	4798      	blx	r3
   805dc:	b118      	cbz	r0, 805e6 <pin12_edge_handler+0x1a>
		//increase the counter value
		counter_2++;
   805de:	4b04      	ldr	r3, [pc, #16]	; (805f0 <pin12_edge_handler+0x24>)
   805e0:	881a      	ldrh	r2, [r3, #0]
   805e2:	3201      	adds	r2, #1
   805e4:	801a      	strh	r2, [r3, #0]
   805e6:	bd08      	pop	{r3, pc}
   805e8:	400e1200 	.word	0x400e1200
   805ec:	00080871 	.word	0x00080871
   805f0:	20070a60 	.word	0x20070a60

000805f4 <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}	
}

// Handler which calls when pin 51 is toggle. 
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   805f4:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   805f6:	4806      	ldr	r0, [pc, #24]	; (80610 <pin14_edge_handler+0x1c>)
   805f8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80600:	4b04      	ldr	r3, [pc, #16]	; (80614 <pin14_edge_handler+0x20>)
   80602:	4798      	blx	r3
   80604:	b118      	cbz	r0, 8060e <pin14_edge_handler+0x1a>
	//Increase the counter value
			counter_1++;
   80606:	4b04      	ldr	r3, [pc, #16]	; (80618 <pin14_edge_handler+0x24>)
   80608:	881a      	ldrh	r2, [r3, #0]
   8060a:	3201      	adds	r2, #1
   8060c:	801a      	strh	r2, [r3, #0]
   8060e:	bd08      	pop	{r3, pc}
   80610:	400e1000 	.word	0x400e1000
   80614:	00080871 	.word	0x00080871
   80618:	20070a5e 	.word	0x20070a5e

0008061c <configInterrupts>:
// Counter for Arlo Robot encoders for right and left wheel
 uint16_t counter_1 = 0;
 uint16_t counter_2 = 0;


void configInterrupts(void){
   8061c:	b570      	push	{r4, r5, r6, lr}
   8061e:	b082      	sub	sp, #8
	
	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   80620:	200c      	movs	r0, #12
   80622:	4c1a      	ldr	r4, [pc, #104]	; (8068c <configInterrupts+0x70>)
   80624:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);	
   80626:	200d      	movs	r0, #13
   80628:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   8062a:	4d19      	ldr	r5, [pc, #100]	; (80690 <configInterrupts+0x74>)
   8062c:	4628      	mov	r0, r5
   8062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80632:	2201      	movs	r2, #1
   80634:	4e17      	ldr	r6, [pc, #92]	; (80694 <configInterrupts+0x78>)
   80636:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   80638:	4c17      	ldr	r4, [pc, #92]	; (80698 <configInterrupts+0x7c>)
   8063a:	4620      	mov	r0, r4
   8063c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80640:	2201      	movs	r2, #1
   80642:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   80644:	4b15      	ldr	r3, [pc, #84]	; (8069c <configInterrupts+0x80>)
   80646:	9300      	str	r3, [sp, #0]
   80648:	4628      	mov	r0, r5
   8064a:	210d      	movs	r1, #13
   8064c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80650:	2340      	movs	r3, #64	; 0x40
   80652:	4e13      	ldr	r6, [pc, #76]	; (806a0 <configInterrupts+0x84>)
   80654:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   80656:	4b13      	ldr	r3, [pc, #76]	; (806a4 <configInterrupts+0x88>)
   80658:	9300      	str	r3, [sp, #0]
   8065a:	4620      	mov	r0, r4
   8065c:	210c      	movs	r1, #12
   8065e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80662:	2340      	movs	r3, #64	; 0x40
   80664:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   80666:	4628      	mov	r0, r5
   80668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8066c:	4d0e      	ldr	r5, [pc, #56]	; (806a8 <configInterrupts+0x8c>)
   8066e:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   80670:	4620      	mov	r0, r4
   80672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80676:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80678:	4b0c      	ldr	r3, [pc, #48]	; (806ac <configInterrupts+0x90>)
   8067a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8067e:	601a      	str	r2, [r3, #0]
   80680:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80684:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);
	

}
   80686:	b002      	add	sp, #8
   80688:	bd70      	pop	{r4, r5, r6, pc}
   8068a:	bf00      	nop
   8068c:	00080bbd 	.word	0x00080bbd
   80690:	400e1200 	.word	0x400e1200
   80694:	000808c9 	.word	0x000808c9
   80698:	400e1000 	.word	0x400e1000
   8069c:	000805cd 	.word	0x000805cd
   806a0:	00080b31 	.word	0x00080b31
   806a4:	000805f5 	.word	0x000805f5
   806a8:	00080955 	.word	0x00080955
   806ac:	e000e100 	.word	0xe000e100

000806b0 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   806b0:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   806b2:	2055      	movs	r0, #85	; 0x55
   806b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   806b8:	4b0b      	ldr	r3, [pc, #44]	; (806e8 <initPin21+0x38>)
   806ba:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   806bc:	4b0b      	ldr	r3, [pc, #44]	; (806ec <initPin21+0x3c>)
   806be:	2404      	movs	r4, #4
   806c0:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   806c2:	220b      	movs	r2, #11
   806c4:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   806c6:	2200      	movs	r2, #0
   806c8:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   806ca:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 7500;
   806cc:	f641 514c 	movw	r1, #7500	; 0x1d4c
   806d0:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   806d2:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   806d4:	4d06      	ldr	r5, [pc, #24]	; (806f0 <initPin21+0x40>)
   806d6:	4628      	mov	r0, r5
   806d8:	4619      	mov	r1, r3
   806da:	4b06      	ldr	r3, [pc, #24]	; (806f4 <initPin21+0x44>)
   806dc:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   806de:	4628      	mov	r0, r5
   806e0:	4621      	mov	r1, r4
   806e2:	4b05      	ldr	r3, [pc, #20]	; (806f8 <initPin21+0x48>)
   806e4:	4798      	blx	r3
   806e6:	bd38      	pop	{r3, r4, r5, pc}
   806e8:	00080965 	.word	0x00080965
   806ec:	20070b44 	.word	0x20070b44
   806f0:	40094000 	.word	0x40094000
   806f4:	00080cad 	.word	0x00080cad
   806f8:	00080dd5 	.word	0x00080dd5

000806fc <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   806fc:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   806fe:	2056      	movs	r0, #86	; 0x56
   80700:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80704:	4b0b      	ldr	r3, [pc, #44]	; (80734 <initPin22+0x38>)
   80706:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   80708:	4b0b      	ldr	r3, [pc, #44]	; (80738 <initPin22+0x3c>)
   8070a:	2405      	movs	r4, #5
   8070c:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8070e:	220b      	movs	r2, #11
   80710:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   80712:	2200      	movs	r2, #0
   80714:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   80716:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 7500;
   80718:	f641 514c 	movw	r1, #7500	; 0x1d4c
   8071c:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   8071e:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   80720:	4d06      	ldr	r5, [pc, #24]	; (8073c <initPin22+0x40>)
   80722:	4628      	mov	r0, r5
   80724:	4619      	mov	r1, r3
   80726:	4b06      	ldr	r3, [pc, #24]	; (80740 <initPin22+0x44>)
   80728:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   8072a:	4628      	mov	r0, r5
   8072c:	4621      	mov	r1, r4
   8072e:	4b05      	ldr	r3, [pc, #20]	; (80744 <initPin22+0x48>)
   80730:	4798      	blx	r3
   80732:	bd38      	pop	{r3, r4, r5, pc}
   80734:	00080965 	.word	0x00080965
   80738:	20070b1c 	.word	0x20070b1c
   8073c:	40094000 	.word	0x40094000
   80740:	00080cad 	.word	0x00080cad
   80744:	00080dd5 	.word	0x00080dd5

00080748 <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   80748:	b530      	push	{r4, r5, lr}
   8074a:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   8074c:	2024      	movs	r0, #36	; 0x24
   8074e:	4b0d      	ldr	r3, [pc, #52]	; (80784 <PWM_init+0x3c>)
   80750:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   80752:	4c0d      	ldr	r4, [pc, #52]	; (80788 <PWM_init+0x40>)
   80754:	4620      	mov	r0, r4
   80756:	2104      	movs	r1, #4
   80758:	4d0c      	ldr	r5, [pc, #48]	; (8078c <PWM_init+0x44>)
   8075a:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   8075c:	4620      	mov	r0, r4
   8075e:	2105      	movs	r1, #5
   80760:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   80762:	4b0b      	ldr	r3, [pc, #44]	; (80790 <PWM_init+0x48>)
   80764:	9301      	str	r3, [sp, #4]
   80766:	2300      	movs	r3, #0
   80768:	9302      	str	r3, [sp, #8]
   8076a:	4b0a      	ldr	r3, [pc, #40]	; (80794 <PWM_init+0x4c>)
   8076c:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   8076e:	4620      	mov	r0, r4
   80770:	a901      	add	r1, sp, #4
   80772:	4b09      	ldr	r3, [pc, #36]	; (80798 <PWM_init+0x50>)
   80774:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   80776:	4b09      	ldr	r3, [pc, #36]	; (8079c <PWM_init+0x54>)
   80778:	4798      	blx	r3
	initPin22();
   8077a:	4b09      	ldr	r3, [pc, #36]	; (807a0 <PWM_init+0x58>)
   8077c:	4798      	blx	r3
	
}
   8077e:	b005      	add	sp, #20
   80780:	bd30      	pop	{r4, r5, pc}
   80782:	bf00      	nop
   80784:	00080bbd 	.word	0x00080bbd
   80788:	40094000 	.word	0x40094000
   8078c:	00080de1 	.word	0x00080de1
   80790:	000f4240 	.word	0x000f4240
   80794:	0501bd00 	.word	0x0501bd00
   80798:	00080c6d 	.word	0x00080c6d
   8079c:	000806b1 	.word	0x000806b1
   807a0:	000806fd 	.word	0x000806fd

000807a4 <leftWheel>:
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
}
 /* This method changes the duty cycle of PWM signal on pin 9. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void leftWheel(uint32_t duty){
   807a4:	b508      	push	{r3, lr}
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_21, 2 );
   807a6:	4803      	ldr	r0, [pc, #12]	; (807b4 <leftWheel+0x10>)
   807a8:	4903      	ldr	r1, [pc, #12]	; (807b8 <leftWheel+0x14>)
   807aa:	2202      	movs	r2, #2
   807ac:	4b03      	ldr	r3, [pc, #12]	; (807bc <leftWheel+0x18>)
   807ae:	4798      	blx	r3
   807b0:	bd08      	pop	{r3, pc}
   807b2:	bf00      	nop
   807b4:	40094000 	.word	0x40094000
   807b8:	20070b44 	.word	0x20070b44
   807bc:	00080db1 	.word	0x00080db1

000807c0 <rightWheel>:
}

 /* This method changes the duty cycle of PWM signal on pin 8. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void rightWheel(uint32_t duty){
   807c0:	b508      	push	{r3, lr}
	
	if(duty<800){
   807c2:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   807c6:	d305      	bcc.n	807d4 <rightWheel+0x14>
   807c8:	f640 0298 	movw	r2, #2200	; 0x898
   807cc:	4290      	cmp	r0, r2
   807ce:	bf38      	it	cc
   807d0:	4602      	movcc	r2, r0
   807d2:	e001      	b.n	807d8 <rightWheel+0x18>
		duty=800;
   807d4:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   807d8:	4802      	ldr	r0, [pc, #8]	; (807e4 <rightWheel+0x24>)
   807da:	4903      	ldr	r1, [pc, #12]	; (807e8 <rightWheel+0x28>)
   807dc:	4b03      	ldr	r3, [pc, #12]	; (807ec <rightWheel+0x2c>)
   807de:	4798      	blx	r3
   807e0:	bd08      	pop	{r3, pc}
   807e2:	bf00      	nop
   807e4:	40094000 	.word	0x40094000
   807e8:	20070b1c 	.word	0x20070b1c
   807ec:	00080db1 	.word	0x00080db1

000807f0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   807f0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   807f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   807f6:	4b17      	ldr	r3, [pc, #92]	; (80854 <board_init+0x64>)
   807f8:	605a      	str	r2, [r3, #4]
   807fa:	200b      	movs	r0, #11
   807fc:	4c16      	ldr	r4, [pc, #88]	; (80858 <board_init+0x68>)
   807fe:	47a0      	blx	r4
   80800:	200c      	movs	r0, #12
   80802:	47a0      	blx	r4
   80804:	200d      	movs	r0, #13
   80806:	47a0      	blx	r4
   80808:	200e      	movs	r0, #14
   8080a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8080c:	203b      	movs	r0, #59	; 0x3b
   8080e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80812:	4c12      	ldr	r4, [pc, #72]	; (8085c <board_init+0x6c>)
   80814:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80816:	2055      	movs	r0, #85	; 0x55
   80818:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8081c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8081e:	2056      	movs	r0, #86	; 0x56
   80820:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80824:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80826:	2068      	movs	r0, #104	; 0x68
   80828:	490d      	ldr	r1, [pc, #52]	; (80860 <board_init+0x70>)
   8082a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8082c:	205c      	movs	r0, #92	; 0x5c
   8082e:	490d      	ldr	r1, [pc, #52]	; (80864 <board_init+0x74>)
   80830:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80832:	480d      	ldr	r0, [pc, #52]	; (80868 <board_init+0x78>)
   80834:	f44f 7140 	mov.w	r1, #768	; 0x300
   80838:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8083c:	4b0b      	ldr	r3, [pc, #44]	; (8086c <board_init+0x7c>)
   8083e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80840:	202b      	movs	r0, #43	; 0x2b
   80842:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80846:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80848:	202a      	movs	r0, #42	; 0x2a
   8084a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8084e:	47a0      	blx	r4
   80850:	bd10      	pop	{r4, pc}
   80852:	bf00      	nop
   80854:	400e1a50 	.word	0x400e1a50
   80858:	00080bbd 	.word	0x00080bbd
   8085c:	00080965 	.word	0x00080965
   80860:	28000079 	.word	0x28000079
   80864:	28000001 	.word	0x28000001
   80868:	400e0e00 	.word	0x400e0e00
   8086c:	00080a39 	.word	0x00080a39

00080870 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80870:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80874:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   80878:	bf0c      	ite	eq
   8087a:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   8087c:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   8087e:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   80880:	bf0c      	ite	eq
   80882:	2000      	moveq	r0, #0
   80884:	2001      	movne	r0, #1
   80886:	4770      	bx	lr

00080888 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80888:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8088a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8088e:	d016      	beq.n	808be <pio_set_peripheral+0x36>
   80890:	d804      	bhi.n	8089c <pio_set_peripheral+0x14>
   80892:	b1c1      	cbz	r1, 808c6 <pio_set_peripheral+0x3e>
   80894:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80898:	d00a      	beq.n	808b0 <pio_set_peripheral+0x28>
   8089a:	e013      	b.n	808c4 <pio_set_peripheral+0x3c>
   8089c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   808a0:	d011      	beq.n	808c6 <pio_set_peripheral+0x3e>
   808a2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   808a6:	d00e      	beq.n	808c6 <pio_set_peripheral+0x3e>
   808a8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   808ac:	d10a      	bne.n	808c4 <pio_set_peripheral+0x3c>
   808ae:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   808b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   808b2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   808b4:	400b      	ands	r3, r1
   808b6:	ea23 0302 	bic.w	r3, r3, r2
   808ba:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   808bc:	e002      	b.n	808c4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   808be:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   808c0:	4313      	orrs	r3, r2
   808c2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   808c4:	6042      	str	r2, [r0, #4]
   808c6:	4770      	bx	lr

000808c8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   808c8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808ca:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   808ce:	bf14      	ite	ne
   808d0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808d2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   808d4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   808d8:	bf14      	ite	ne
   808da:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   808dc:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   808de:	f012 0f02 	tst.w	r2, #2
   808e2:	d002      	beq.n	808ea <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   808e4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   808e8:	e004      	b.n	808f4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   808ea:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   808ee:	bf18      	it	ne
   808f0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   808f4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   808f6:	6001      	str	r1, [r0, #0]
   808f8:	4770      	bx	lr
   808fa:	bf00      	nop

000808fc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   808fc:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   808fe:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80900:	9c01      	ldr	r4, [sp, #4]
   80902:	b10c      	cbz	r4, 80908 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80904:	6641      	str	r1, [r0, #100]	; 0x64
   80906:	e000      	b.n	8090a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80908:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8090a:	b10b      	cbz	r3, 80910 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8090c:	6501      	str	r1, [r0, #80]	; 0x50
   8090e:	e000      	b.n	80912 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80910:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80912:	b10a      	cbz	r2, 80918 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80914:	6301      	str	r1, [r0, #48]	; 0x30
   80916:	e000      	b.n	8091a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80918:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8091a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8091c:	6001      	str	r1, [r0, #0]
}
   8091e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80922:	4770      	bx	lr

00080924 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   80924:	f012 0f10 	tst.w	r2, #16
   80928:	d010      	beq.n	8094c <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   8092a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8092e:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   80932:	bf14      	ite	ne
   80934:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80938:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   8093c:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   80940:	bf14      	ite	ne
   80942:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   80946:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   8094a:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   8094c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80950:	4770      	bx	lr
   80952:	bf00      	nop

00080954 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   80954:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   80956:	6401      	str	r1, [r0, #64]	; 0x40
   80958:	4770      	bx	lr
   8095a:	bf00      	nop

0008095c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8095c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8095e:	4770      	bx	lr

00080960 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80960:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80962:	4770      	bx	lr

00080964 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80964:	b570      	push	{r4, r5, r6, lr}
   80966:	b082      	sub	sp, #8
   80968:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8096a:	0944      	lsrs	r4, r0, #5
   8096c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80970:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80974:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80976:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8097a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8097e:	d030      	beq.n	809e2 <pio_configure_pin+0x7e>
   80980:	d806      	bhi.n	80990 <pio_configure_pin+0x2c>
   80982:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80986:	d00a      	beq.n	8099e <pio_configure_pin+0x3a>
   80988:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8098c:	d018      	beq.n	809c0 <pio_configure_pin+0x5c>
   8098e:	e049      	b.n	80a24 <pio_configure_pin+0xc0>
   80990:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80994:	d030      	beq.n	809f8 <pio_configure_pin+0x94>
   80996:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8099a:	d02d      	beq.n	809f8 <pio_configure_pin+0x94>
   8099c:	e042      	b.n	80a24 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8099e:	f000 001f 	and.w	r0, r0, #31
   809a2:	2401      	movs	r4, #1
   809a4:	4084      	lsls	r4, r0
   809a6:	4630      	mov	r0, r6
   809a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809ac:	4622      	mov	r2, r4
   809ae:	4b1f      	ldr	r3, [pc, #124]	; (80a2c <pio_configure_pin+0xc8>)
   809b0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809b2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809b6:	bf14      	ite	ne
   809b8:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809ba:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809bc:	2001      	movs	r0, #1
   809be:	e032      	b.n	80a26 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   809c0:	f000 001f 	and.w	r0, r0, #31
   809c4:	2401      	movs	r4, #1
   809c6:	4084      	lsls	r4, r0
   809c8:	4630      	mov	r0, r6
   809ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809ce:	4622      	mov	r2, r4
   809d0:	4b16      	ldr	r3, [pc, #88]	; (80a2c <pio_configure_pin+0xc8>)
   809d2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809d4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809d8:	bf14      	ite	ne
   809da:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809dc:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809de:	2001      	movs	r0, #1
   809e0:	e021      	b.n	80a26 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   809e2:	f000 011f 	and.w	r1, r0, #31
   809e6:	2401      	movs	r4, #1
   809e8:	4630      	mov	r0, r6
   809ea:	fa04 f101 	lsl.w	r1, r4, r1
   809ee:	462a      	mov	r2, r5
   809f0:	4b0f      	ldr	r3, [pc, #60]	; (80a30 <pio_configure_pin+0xcc>)
   809f2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   809f4:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   809f6:	e016      	b.n	80a26 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809f8:	f000 011f 	and.w	r1, r0, #31
   809fc:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   809fe:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80a02:	ea05 0304 	and.w	r3, r5, r4
   80a06:	9300      	str	r3, [sp, #0]
   80a08:	4630      	mov	r0, r6
   80a0a:	fa04 f101 	lsl.w	r1, r4, r1
   80a0e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a12:	bf14      	ite	ne
   80a14:	2200      	movne	r2, #0
   80a16:	2201      	moveq	r2, #1
   80a18:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a1c:	4d05      	ldr	r5, [pc, #20]	; (80a34 <pio_configure_pin+0xd0>)
   80a1e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80a20:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a22:	e000      	b.n	80a26 <pio_configure_pin+0xc2>

	default:
		return 0;
   80a24:	2000      	movs	r0, #0
	}

	return 1;
}
   80a26:	b002      	add	sp, #8
   80a28:	bd70      	pop	{r4, r5, r6, pc}
   80a2a:	bf00      	nop
   80a2c:	00080889 	.word	0x00080889
   80a30:	000808c9 	.word	0x000808c9
   80a34:	000808fd 	.word	0x000808fd

00080a38 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a3a:	b083      	sub	sp, #12
   80a3c:	4607      	mov	r7, r0
   80a3e:	460e      	mov	r6, r1
   80a40:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80a42:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80a46:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80a4a:	d026      	beq.n	80a9a <pio_configure_pin_group+0x62>
   80a4c:	d806      	bhi.n	80a5c <pio_configure_pin_group+0x24>
   80a4e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80a52:	d00a      	beq.n	80a6a <pio_configure_pin_group+0x32>
   80a54:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80a58:	d013      	beq.n	80a82 <pio_configure_pin_group+0x4a>
   80a5a:	e034      	b.n	80ac6 <pio_configure_pin_group+0x8e>
   80a5c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a60:	d01f      	beq.n	80aa2 <pio_configure_pin_group+0x6a>
   80a62:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a66:	d01c      	beq.n	80aa2 <pio_configure_pin_group+0x6a>
   80a68:	e02d      	b.n	80ac6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80a6a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a6e:	4632      	mov	r2, r6
   80a70:	4b16      	ldr	r3, [pc, #88]	; (80acc <pio_configure_pin_group+0x94>)
   80a72:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a74:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a78:	bf14      	ite	ne
   80a7a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a7c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a7e:	2001      	movs	r0, #1
   80a80:	e022      	b.n	80ac8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80a82:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a86:	4632      	mov	r2, r6
   80a88:	4b10      	ldr	r3, [pc, #64]	; (80acc <pio_configure_pin_group+0x94>)
   80a8a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a8c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a90:	bf14      	ite	ne
   80a92:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a94:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a96:	2001      	movs	r0, #1
   80a98:	e016      	b.n	80ac8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80a9a:	4b0d      	ldr	r3, [pc, #52]	; (80ad0 <pio_configure_pin_group+0x98>)
   80a9c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a9e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80aa0:	e012      	b.n	80ac8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80aa2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80aa6:	f005 0301 	and.w	r3, r5, #1
   80aaa:	9300      	str	r3, [sp, #0]
   80aac:	4638      	mov	r0, r7
   80aae:	4631      	mov	r1, r6
   80ab0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80ab4:	bf14      	ite	ne
   80ab6:	2200      	movne	r2, #0
   80ab8:	2201      	moveq	r2, #1
   80aba:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80abe:	4c05      	ldr	r4, [pc, #20]	; (80ad4 <pio_configure_pin_group+0x9c>)
   80ac0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80ac2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80ac4:	e000      	b.n	80ac8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80ac6:	2000      	movs	r0, #0
	}

	return 1;
}
   80ac8:	b003      	add	sp, #12
   80aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80acc:	00080889 	.word	0x00080889
   80ad0:	000808c9 	.word	0x000808c9
   80ad4:	000808fd 	.word	0x000808fd

00080ad8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80adc:	4604      	mov	r4, r0
   80ade:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80ae0:	4b10      	ldr	r3, [pc, #64]	; (80b24 <pio_handler_process+0x4c>)
   80ae2:	4798      	blx	r3
   80ae4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80ae6:	4620      	mov	r0, r4
   80ae8:	4b0f      	ldr	r3, [pc, #60]	; (80b28 <pio_handler_process+0x50>)
   80aea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80aec:	4005      	ands	r5, r0
   80aee:	d017      	beq.n	80b20 <pio_handler_process+0x48>
   80af0:	4f0e      	ldr	r7, [pc, #56]	; (80b2c <pio_handler_process+0x54>)
   80af2:	f107 040c 	add.w	r4, r7, #12
   80af6:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80af8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80afc:	42b3      	cmp	r3, r6
   80afe:	d10a      	bne.n	80b16 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80b00:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80b04:	4229      	tst	r1, r5
   80b06:	d006      	beq.n	80b16 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80b08:	6823      	ldr	r3, [r4, #0]
   80b0a:	4630      	mov	r0, r6
   80b0c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80b0e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80b12:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80b16:	42bc      	cmp	r4, r7
   80b18:	d002      	beq.n	80b20 <pio_handler_process+0x48>
   80b1a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80b1c:	2d00      	cmp	r5, #0
   80b1e:	d1eb      	bne.n	80af8 <pio_handler_process+0x20>
   80b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b24:	0008095d 	.word	0x0008095d
   80b28:	00080961 	.word	0x00080961
   80b2c:	20070a68 	.word	0x20070a68

00080b30 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80b32:	4c0b      	ldr	r4, [pc, #44]	; (80b60 <pio_handler_set+0x30>)
   80b34:	6824      	ldr	r4, [r4, #0]
   80b36:	2c06      	cmp	r4, #6
   80b38:	d810      	bhi.n	80b5c <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   80b3a:	4f0a      	ldr	r7, [pc, #40]	; (80b64 <pio_handler_set+0x34>)
   80b3c:	0126      	lsls	r6, r4, #4
   80b3e:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   80b40:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   80b42:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   80b44:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   80b46:	9906      	ldr	r1, [sp, #24]
   80b48:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   80b4a:	3401      	adds	r4, #1
   80b4c:	4904      	ldr	r1, [pc, #16]	; (80b60 <pio_handler_set+0x30>)
   80b4e:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80b50:	4611      	mov	r1, r2
   80b52:	461a      	mov	r2, r3
   80b54:	4b04      	ldr	r3, [pc, #16]	; (80b68 <pio_handler_set+0x38>)
   80b56:	4798      	blx	r3

	return 0;
   80b58:	2000      	movs	r0, #0
   80b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80b5c:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b60:	20070a64 	.word	0x20070a64
   80b64:	20070a68 	.word	0x20070a68
   80b68:	00080925 	.word	0x00080925

00080b6c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80b6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80b6e:	4802      	ldr	r0, [pc, #8]	; (80b78 <PIOA_Handler+0xc>)
   80b70:	210b      	movs	r1, #11
   80b72:	4b02      	ldr	r3, [pc, #8]	; (80b7c <PIOA_Handler+0x10>)
   80b74:	4798      	blx	r3
   80b76:	bd08      	pop	{r3, pc}
   80b78:	400e0e00 	.word	0x400e0e00
   80b7c:	00080ad9 	.word	0x00080ad9

00080b80 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80b80:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80b82:	4802      	ldr	r0, [pc, #8]	; (80b8c <PIOB_Handler+0xc>)
   80b84:	210c      	movs	r1, #12
   80b86:	4b02      	ldr	r3, [pc, #8]	; (80b90 <PIOB_Handler+0x10>)
   80b88:	4798      	blx	r3
   80b8a:	bd08      	pop	{r3, pc}
   80b8c:	400e1000 	.word	0x400e1000
   80b90:	00080ad9 	.word	0x00080ad9

00080b94 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80b94:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80b96:	4802      	ldr	r0, [pc, #8]	; (80ba0 <PIOC_Handler+0xc>)
   80b98:	210d      	movs	r1, #13
   80b9a:	4b02      	ldr	r3, [pc, #8]	; (80ba4 <PIOC_Handler+0x10>)
   80b9c:	4798      	blx	r3
   80b9e:	bd08      	pop	{r3, pc}
   80ba0:	400e1200 	.word	0x400e1200
   80ba4:	00080ad9 	.word	0x00080ad9

00080ba8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80ba8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80baa:	4802      	ldr	r0, [pc, #8]	; (80bb4 <PIOD_Handler+0xc>)
   80bac:	210e      	movs	r1, #14
   80bae:	4b02      	ldr	r3, [pc, #8]	; (80bb8 <PIOD_Handler+0x10>)
   80bb0:	4798      	blx	r3
   80bb2:	bd08      	pop	{r3, pc}
   80bb4:	400e1400 	.word	0x400e1400
   80bb8:	00080ad9 	.word	0x00080ad9

00080bbc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80bbc:	282c      	cmp	r0, #44	; 0x2c
   80bbe:	d820      	bhi.n	80c02 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80bc0:	281f      	cmp	r0, #31
   80bc2:	d80d      	bhi.n	80be0 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80bc4:	4b12      	ldr	r3, [pc, #72]	; (80c10 <pmc_enable_periph_clk+0x54>)
   80bc6:	699a      	ldr	r2, [r3, #24]
   80bc8:	2301      	movs	r3, #1
   80bca:	4083      	lsls	r3, r0
   80bcc:	401a      	ands	r2, r3
   80bce:	4293      	cmp	r3, r2
   80bd0:	d019      	beq.n	80c06 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80bd2:	2301      	movs	r3, #1
   80bd4:	fa03 f000 	lsl.w	r0, r3, r0
   80bd8:	4b0d      	ldr	r3, [pc, #52]	; (80c10 <pmc_enable_periph_clk+0x54>)
   80bda:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80bdc:	2000      	movs	r0, #0
   80bde:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80be0:	4b0b      	ldr	r3, [pc, #44]	; (80c10 <pmc_enable_periph_clk+0x54>)
   80be2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80be6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80be8:	2301      	movs	r3, #1
   80bea:	4083      	lsls	r3, r0
   80bec:	401a      	ands	r2, r3
   80bee:	4293      	cmp	r3, r2
   80bf0:	d00b      	beq.n	80c0a <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80bf2:	2301      	movs	r3, #1
   80bf4:	fa03 f000 	lsl.w	r0, r3, r0
   80bf8:	4b05      	ldr	r3, [pc, #20]	; (80c10 <pmc_enable_periph_clk+0x54>)
   80bfa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80bfe:	2000      	movs	r0, #0
   80c00:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80c02:	2001      	movs	r0, #1
   80c04:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c06:	2000      	movs	r0, #0
   80c08:	4770      	bx	lr
   80c0a:	2000      	movs	r0, #0
}
   80c0c:	4770      	bx	lr
   80c0e:	bf00      	nop
   80c10:	400e0600 	.word	0x400e0600

00080c14 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80c14:	b4f0      	push	{r4, r5, r6, r7}
   80c16:	b08c      	sub	sp, #48	; 0x30
   80c18:	4607      	mov	r7, r0
   80c1a:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80c1c:	ac01      	add	r4, sp, #4
   80c1e:	4d12      	ldr	r5, [pc, #72]	; (80c68 <pwm_clocks_generate+0x54>)
   80c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80c28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80c2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80c30:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80c32:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80c34:	f852 4f04 	ldr.w	r4, [r2, #4]!
   80c38:	fbb6 f4f4 	udiv	r4, r6, r4
   80c3c:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80c40:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   80c44:	d903      	bls.n	80c4e <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   80c46:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80c48:	2b0b      	cmp	r3, #11
   80c4a:	d1f3      	bne.n	80c34 <pwm_clocks_generate+0x20>
   80c4c:	e004      	b.n	80c58 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80c4e:	2b0a      	cmp	r3, #10
   80c50:	d805      	bhi.n	80c5e <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   80c52:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   80c56:	e004      	b.n	80c62 <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80c58:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80c5c:	e001      	b.n	80c62 <pwm_clocks_generate+0x4e>
   80c5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   80c62:	b00c      	add	sp, #48	; 0x30
   80c64:	bcf0      	pop	{r4, r5, r6, r7}
   80c66:	4770      	bx	lr
   80c68:	00083e8c 	.word	0x00083e8c

00080c6c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80c6c:	b570      	push	{r4, r5, r6, lr}
   80c6e:	4606      	mov	r6, r0
   80c70:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80c72:	6808      	ldr	r0, [r1, #0]
   80c74:	b140      	cbz	r0, 80c88 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80c76:	6889      	ldr	r1, [r1, #8]
   80c78:	4b0b      	ldr	r3, [pc, #44]	; (80ca8 <pwm_init+0x3c>)
   80c7a:	4798      	blx	r3
   80c7c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80c82:	4298      	cmp	r0, r3
   80c84:	d101      	bne.n	80c8a <pwm_init+0x1e>
   80c86:	e00e      	b.n	80ca6 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80c88:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80c8a:	6860      	ldr	r0, [r4, #4]
   80c8c:	b140      	cbz	r0, 80ca0 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80c8e:	68a1      	ldr	r1, [r4, #8]
   80c90:	4b05      	ldr	r3, [pc, #20]	; (80ca8 <pwm_init+0x3c>)
   80c92:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80c98:	4298      	cmp	r0, r3
   80c9a:	d004      	beq.n	80ca6 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80c9c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80ca0:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80ca2:	2000      	movs	r0, #0
   80ca4:	bd70      	pop	{r4, r5, r6, pc}
}
   80ca6:	bd70      	pop	{r4, r5, r6, pc}
   80ca8:	00080c15 	.word	0x00080c15

00080cac <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80cac:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80cae:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80cb0:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80cb2:	684a      	ldr	r2, [r1, #4]
   80cb4:	f002 020f 	and.w	r2, r2, #15
   80cb8:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80cba:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80cbc:	432c      	orrs	r4, r5
   80cbe:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80cc0:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80cc4:	7d8a      	ldrb	r2, [r1, #22]
   80cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80cca:	7dca      	ldrb	r2, [r1, #23]
   80ccc:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80cd0:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80cd2:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   80cd6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80cda:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80cde:	68cc      	ldr	r4, [r1, #12]
   80ce0:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80ce4:	690c      	ldr	r4, [r1, #16]
   80ce6:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80cea:	7d8a      	ldrb	r2, [r1, #22]
   80cec:	b13a      	cbz	r2, 80cfe <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80cee:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80cf0:	8b4a      	ldrh	r2, [r1, #26]
   80cf2:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80cf6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   80cfa:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80cfe:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80d00:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80d04:	409a      	lsls	r2, r3
   80d06:	43d2      	mvns	r2, r2
   80d08:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80d0a:	7fce      	ldrb	r6, [r1, #31]
   80d0c:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80d0e:	7f8c      	ldrb	r4, [r1, #30]
   80d10:	409c      	lsls	r4, r3
   80d12:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80d16:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80d18:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80d1a:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80d1c:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80d1e:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80d22:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80d24:	f891 4020 	ldrb.w	r4, [r1, #32]
   80d28:	409c      	lsls	r4, r3
   80d2a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80d2e:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80d30:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80d32:	2201      	movs	r2, #1
   80d34:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80d36:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80d3a:	b11c      	cbz	r4, 80d44 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80d3c:	6a04      	ldr	r4, [r0, #32]
   80d3e:	4314      	orrs	r4, r2
   80d40:	6204      	str	r4, [r0, #32]
   80d42:	e003      	b.n	80d4c <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80d44:	6a04      	ldr	r4, [r0, #32]
   80d46:	ea24 0402 	bic.w	r4, r4, r2
   80d4a:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80d4c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80d50:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80d52:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80d54:	bf0c      	ite	eq
   80d56:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80d58:	4394      	bicne	r4, r2
   80d5a:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80d5c:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80d60:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80d62:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80d64:	bf0c      	ite	eq
   80d66:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80d6a:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80d6e:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80d70:	2b03      	cmp	r3, #3
   80d72:	d80c      	bhi.n	80d8e <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80d74:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80d76:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80d78:	22ff      	movs	r2, #255	; 0xff
   80d7a:	409a      	lsls	r2, r3
   80d7c:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80d80:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80d84:	fa01 f303 	lsl.w	r3, r1, r3
   80d88:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80d8a:	66c3      	str	r3, [r0, #108]	; 0x6c
   80d8c:	e00c      	b.n	80da8 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80d8e:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80d90:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80d92:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80d94:	22ff      	movs	r2, #255	; 0xff
   80d96:	409a      	lsls	r2, r3
   80d98:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80d9c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80da0:	fa01 f303 	lsl.w	r3, r1, r3
   80da4:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80da6:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80da8:	2000      	movs	r0, #0
   80daa:	bc70      	pop	{r4, r5, r6}
   80dac:	4770      	bx	lr
   80dae:	bf00      	nop

00080db0 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80db0:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   80db2:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80db4:	690b      	ldr	r3, [r1, #16]
   80db6:	4293      	cmp	r3, r2
   80db8:	d306      	bcc.n	80dc8 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80dba:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80dbc:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80dc0:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   80dc4:	2000      	movs	r0, #0
   80dc6:	e001      	b.n	80dcc <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80dc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
   80dd0:	4770      	bx	lr
   80dd2:	bf00      	nop

00080dd4 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80dd4:	2301      	movs	r3, #1
   80dd6:	fa03 f101 	lsl.w	r1, r3, r1
   80dda:	6041      	str	r1, [r0, #4]
   80ddc:	4770      	bx	lr
   80dde:	bf00      	nop

00080de0 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80de0:	2301      	movs	r3, #1
   80de2:	fa03 f101 	lsl.w	r1, r3, r1
   80de6:	6081      	str	r1, [r0, #8]
   80de8:	4770      	bx	lr
   80dea:	bf00      	nop

00080dec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80dec:	e7fe      	b.n	80dec <Dummy_Handler>
   80dee:	bf00      	nop

00080df0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80df0:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80df2:	4b1e      	ldr	r3, [pc, #120]	; (80e6c <Reset_Handler+0x7c>)
   80df4:	4a1e      	ldr	r2, [pc, #120]	; (80e70 <Reset_Handler+0x80>)
   80df6:	429a      	cmp	r2, r3
   80df8:	d003      	beq.n	80e02 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80dfa:	4b1e      	ldr	r3, [pc, #120]	; (80e74 <Reset_Handler+0x84>)
   80dfc:	4a1b      	ldr	r2, [pc, #108]	; (80e6c <Reset_Handler+0x7c>)
   80dfe:	429a      	cmp	r2, r3
   80e00:	d304      	bcc.n	80e0c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e02:	4b1d      	ldr	r3, [pc, #116]	; (80e78 <Reset_Handler+0x88>)
   80e04:	4a1d      	ldr	r2, [pc, #116]	; (80e7c <Reset_Handler+0x8c>)
   80e06:	429a      	cmp	r2, r3
   80e08:	d30f      	bcc.n	80e2a <Reset_Handler+0x3a>
   80e0a:	e01a      	b.n	80e42 <Reset_Handler+0x52>
   80e0c:	4b1c      	ldr	r3, [pc, #112]	; (80e80 <Reset_Handler+0x90>)
   80e0e:	4c1d      	ldr	r4, [pc, #116]	; (80e84 <Reset_Handler+0x94>)
   80e10:	1ae4      	subs	r4, r4, r3
   80e12:	f024 0403 	bic.w	r4, r4, #3
   80e16:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80e18:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80e1a:	4814      	ldr	r0, [pc, #80]	; (80e6c <Reset_Handler+0x7c>)
   80e1c:	4914      	ldr	r1, [pc, #80]	; (80e70 <Reset_Handler+0x80>)
   80e1e:	585a      	ldr	r2, [r3, r1]
   80e20:	501a      	str	r2, [r3, r0]
   80e22:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80e24:	42a3      	cmp	r3, r4
   80e26:	d1fa      	bne.n	80e1e <Reset_Handler+0x2e>
   80e28:	e7eb      	b.n	80e02 <Reset_Handler+0x12>
   80e2a:	4b17      	ldr	r3, [pc, #92]	; (80e88 <Reset_Handler+0x98>)
   80e2c:	4917      	ldr	r1, [pc, #92]	; (80e8c <Reset_Handler+0x9c>)
   80e2e:	1ac9      	subs	r1, r1, r3
   80e30:	f021 0103 	bic.w	r1, r1, #3
   80e34:	1d1a      	adds	r2, r3, #4
   80e36:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80e38:	2200      	movs	r2, #0
   80e3a:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e3e:	428b      	cmp	r3, r1
   80e40:	d1fb      	bne.n	80e3a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e42:	4a13      	ldr	r2, [pc, #76]	; (80e90 <Reset_Handler+0xa0>)
   80e44:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80e48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80e4c:	4911      	ldr	r1, [pc, #68]	; (80e94 <Reset_Handler+0xa4>)
   80e4e:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80e50:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80e54:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80e58:	d203      	bcs.n	80e62 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e5a:	688a      	ldr	r2, [r1, #8]
   80e5c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80e60:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80e62:	4b0d      	ldr	r3, [pc, #52]	; (80e98 <Reset_Handler+0xa8>)
   80e64:	4798      	blx	r3

	/* Branch to main function */
	main();
   80e66:	4b0d      	ldr	r3, [pc, #52]	; (80e9c <Reset_Handler+0xac>)
   80e68:	4798      	blx	r3
   80e6a:	e7fe      	b.n	80e6a <Reset_Handler+0x7a>
   80e6c:	20070000 	.word	0x20070000
   80e70:	00083f3c 	.word	0x00083f3c
   80e74:	200709a4 	.word	0x200709a4
   80e78:	20070b70 	.word	0x20070b70
   80e7c:	200709a4 	.word	0x200709a4
   80e80:	20070004 	.word	0x20070004
   80e84:	200709a7 	.word	0x200709a7
   80e88:	200709a0 	.word	0x200709a0
   80e8c:	20070b6b 	.word	0x20070b6b
   80e90:	00080000 	.word	0x00080000
   80e94:	e000ed00 	.word	0xe000ed00
   80e98:	00080ef1 	.word	0x00080ef1
   80e9c:	00080149 	.word	0x00080149

00080ea0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80ea0:	4b09      	ldr	r3, [pc, #36]	; (80ec8 <_sbrk+0x28>)
   80ea2:	681b      	ldr	r3, [r3, #0]
   80ea4:	b913      	cbnz	r3, 80eac <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80ea6:	4a09      	ldr	r2, [pc, #36]	; (80ecc <_sbrk+0x2c>)
   80ea8:	4b07      	ldr	r3, [pc, #28]	; (80ec8 <_sbrk+0x28>)
   80eaa:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80eac:	4b06      	ldr	r3, [pc, #24]	; (80ec8 <_sbrk+0x28>)
   80eae:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80eb0:	181a      	adds	r2, r3, r0
   80eb2:	4907      	ldr	r1, [pc, #28]	; (80ed0 <_sbrk+0x30>)
   80eb4:	4291      	cmp	r1, r2
   80eb6:	db04      	blt.n	80ec2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80eb8:	4610      	mov	r0, r2
   80eba:	4a03      	ldr	r2, [pc, #12]	; (80ec8 <_sbrk+0x28>)
   80ebc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80ebe:	4618      	mov	r0, r3
   80ec0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80ec2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80ec6:	4770      	bx	lr
   80ec8:	20070ad8 	.word	0x20070ad8
   80ecc:	20072b70 	.word	0x20072b70
   80ed0:	20087ffc 	.word	0x20087ffc

00080ed4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80ed4:	f04f 30ff 	mov.w	r0, #4294967295
   80ed8:	4770      	bx	lr
   80eda:	bf00      	nop

00080edc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80ee0:	604b      	str	r3, [r1, #4]

	return 0;
}
   80ee2:	2000      	movs	r0, #0
   80ee4:	4770      	bx	lr
   80ee6:	bf00      	nop

00080ee8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80ee8:	2001      	movs	r0, #1
   80eea:	4770      	bx	lr

00080eec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80eec:	2000      	movs	r0, #0
   80eee:	4770      	bx	lr

00080ef0 <__libc_init_array>:
   80ef0:	b570      	push	{r4, r5, r6, lr}
   80ef2:	4e0f      	ldr	r6, [pc, #60]	; (80f30 <__libc_init_array+0x40>)
   80ef4:	4d0f      	ldr	r5, [pc, #60]	; (80f34 <__libc_init_array+0x44>)
   80ef6:	1b76      	subs	r6, r6, r5
   80ef8:	10b6      	asrs	r6, r6, #2
   80efa:	d007      	beq.n	80f0c <__libc_init_array+0x1c>
   80efc:	3d04      	subs	r5, #4
   80efe:	2400      	movs	r4, #0
   80f00:	3401      	adds	r4, #1
   80f02:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80f06:	4798      	blx	r3
   80f08:	42a6      	cmp	r6, r4
   80f0a:	d1f9      	bne.n	80f00 <__libc_init_array+0x10>
   80f0c:	4e0a      	ldr	r6, [pc, #40]	; (80f38 <__libc_init_array+0x48>)
   80f0e:	4d0b      	ldr	r5, [pc, #44]	; (80f3c <__libc_init_array+0x4c>)
   80f10:	f002 fffe 	bl	83f10 <_init>
   80f14:	1b76      	subs	r6, r6, r5
   80f16:	10b6      	asrs	r6, r6, #2
   80f18:	d008      	beq.n	80f2c <__libc_init_array+0x3c>
   80f1a:	3d04      	subs	r5, #4
   80f1c:	2400      	movs	r4, #0
   80f1e:	3401      	adds	r4, #1
   80f20:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80f24:	4798      	blx	r3
   80f26:	42a6      	cmp	r6, r4
   80f28:	d1f9      	bne.n	80f1e <__libc_init_array+0x2e>
   80f2a:	bd70      	pop	{r4, r5, r6, pc}
   80f2c:	bd70      	pop	{r4, r5, r6, pc}
   80f2e:	bf00      	nop
   80f30:	00083f1c 	.word	0x00083f1c
   80f34:	00083f1c 	.word	0x00083f1c
   80f38:	00083f24 	.word	0x00083f24
   80f3c:	00083f1c 	.word	0x00083f1c

00080f40 <iprintf>:
   80f40:	b40f      	push	{r0, r1, r2, r3}
   80f42:	b510      	push	{r4, lr}
   80f44:	4b07      	ldr	r3, [pc, #28]	; (80f64 <iprintf+0x24>)
   80f46:	b082      	sub	sp, #8
   80f48:	ac04      	add	r4, sp, #16
   80f4a:	f854 2b04 	ldr.w	r2, [r4], #4
   80f4e:	6818      	ldr	r0, [r3, #0]
   80f50:	4623      	mov	r3, r4
   80f52:	6881      	ldr	r1, [r0, #8]
   80f54:	9401      	str	r4, [sp, #4]
   80f56:	f000 f945 	bl	811e4 <_vfiprintf_r>
   80f5a:	b002      	add	sp, #8
   80f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80f60:	b004      	add	sp, #16
   80f62:	4770      	bx	lr
   80f64:	20070568 	.word	0x20070568

00080f68 <memset>:
   80f68:	b4f0      	push	{r4, r5, r6, r7}
   80f6a:	0784      	lsls	r4, r0, #30
   80f6c:	d043      	beq.n	80ff6 <memset+0x8e>
   80f6e:	1e54      	subs	r4, r2, #1
   80f70:	2a00      	cmp	r2, #0
   80f72:	d03e      	beq.n	80ff2 <memset+0x8a>
   80f74:	b2cd      	uxtb	r5, r1
   80f76:	4603      	mov	r3, r0
   80f78:	e003      	b.n	80f82 <memset+0x1a>
   80f7a:	1e62      	subs	r2, r4, #1
   80f7c:	2c00      	cmp	r4, #0
   80f7e:	d038      	beq.n	80ff2 <memset+0x8a>
   80f80:	4614      	mov	r4, r2
   80f82:	f803 5b01 	strb.w	r5, [r3], #1
   80f86:	079a      	lsls	r2, r3, #30
   80f88:	d1f7      	bne.n	80f7a <memset+0x12>
   80f8a:	2c03      	cmp	r4, #3
   80f8c:	d92a      	bls.n	80fe4 <memset+0x7c>
   80f8e:	b2cd      	uxtb	r5, r1
   80f90:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80f94:	2c0f      	cmp	r4, #15
   80f96:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80f9a:	d915      	bls.n	80fc8 <memset+0x60>
   80f9c:	f1a4 0710 	sub.w	r7, r4, #16
   80fa0:	093f      	lsrs	r7, r7, #4
   80fa2:	f103 0610 	add.w	r6, r3, #16
   80fa6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   80faa:	461a      	mov	r2, r3
   80fac:	6015      	str	r5, [r2, #0]
   80fae:	6055      	str	r5, [r2, #4]
   80fb0:	6095      	str	r5, [r2, #8]
   80fb2:	60d5      	str	r5, [r2, #12]
   80fb4:	3210      	adds	r2, #16
   80fb6:	42b2      	cmp	r2, r6
   80fb8:	d1f8      	bne.n	80fac <memset+0x44>
   80fba:	f004 040f 	and.w	r4, r4, #15
   80fbe:	3701      	adds	r7, #1
   80fc0:	2c03      	cmp	r4, #3
   80fc2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   80fc6:	d90d      	bls.n	80fe4 <memset+0x7c>
   80fc8:	461e      	mov	r6, r3
   80fca:	4622      	mov	r2, r4
   80fcc:	3a04      	subs	r2, #4
   80fce:	2a03      	cmp	r2, #3
   80fd0:	f846 5b04 	str.w	r5, [r6], #4
   80fd4:	d8fa      	bhi.n	80fcc <memset+0x64>
   80fd6:	1f22      	subs	r2, r4, #4
   80fd8:	f022 0203 	bic.w	r2, r2, #3
   80fdc:	3204      	adds	r2, #4
   80fde:	4413      	add	r3, r2
   80fe0:	f004 0403 	and.w	r4, r4, #3
   80fe4:	b12c      	cbz	r4, 80ff2 <memset+0x8a>
   80fe6:	b2c9      	uxtb	r1, r1
   80fe8:	441c      	add	r4, r3
   80fea:	f803 1b01 	strb.w	r1, [r3], #1
   80fee:	42a3      	cmp	r3, r4
   80ff0:	d1fb      	bne.n	80fea <memset+0x82>
   80ff2:	bcf0      	pop	{r4, r5, r6, r7}
   80ff4:	4770      	bx	lr
   80ff6:	4614      	mov	r4, r2
   80ff8:	4603      	mov	r3, r0
   80ffa:	e7c6      	b.n	80f8a <memset+0x22>

00080ffc <setbuf>:
   80ffc:	2900      	cmp	r1, #0
   80ffe:	bf0c      	ite	eq
   81000:	2202      	moveq	r2, #2
   81002:	2200      	movne	r2, #0
   81004:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81008:	f000 b800 	b.w	8100c <setvbuf>

0008100c <setvbuf>:
   8100c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81010:	4d3c      	ldr	r5, [pc, #240]	; (81104 <setvbuf+0xf8>)
   81012:	4604      	mov	r4, r0
   81014:	682d      	ldr	r5, [r5, #0]
   81016:	4688      	mov	r8, r1
   81018:	4616      	mov	r6, r2
   8101a:	461f      	mov	r7, r3
   8101c:	b115      	cbz	r5, 81024 <setvbuf+0x18>
   8101e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81020:	2b00      	cmp	r3, #0
   81022:	d04f      	beq.n	810c4 <setvbuf+0xb8>
   81024:	2e02      	cmp	r6, #2
   81026:	d830      	bhi.n	8108a <setvbuf+0x7e>
   81028:	2f00      	cmp	r7, #0
   8102a:	db2e      	blt.n	8108a <setvbuf+0x7e>
   8102c:	4628      	mov	r0, r5
   8102e:	4621      	mov	r1, r4
   81030:	f001 f856 	bl	820e0 <_fflush_r>
   81034:	89a3      	ldrh	r3, [r4, #12]
   81036:	2200      	movs	r2, #0
   81038:	6062      	str	r2, [r4, #4]
   8103a:	61a2      	str	r2, [r4, #24]
   8103c:	061a      	lsls	r2, r3, #24
   8103e:	d428      	bmi.n	81092 <setvbuf+0x86>
   81040:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81044:	b29b      	uxth	r3, r3
   81046:	2e02      	cmp	r6, #2
   81048:	81a3      	strh	r3, [r4, #12]
   8104a:	d02d      	beq.n	810a8 <setvbuf+0x9c>
   8104c:	f1b8 0f00 	cmp.w	r8, #0
   81050:	d03c      	beq.n	810cc <setvbuf+0xc0>
   81052:	2e01      	cmp	r6, #1
   81054:	d013      	beq.n	8107e <setvbuf+0x72>
   81056:	b29b      	uxth	r3, r3
   81058:	f003 0008 	and.w	r0, r3, #8
   8105c:	4a2a      	ldr	r2, [pc, #168]	; (81108 <setvbuf+0xfc>)
   8105e:	b280      	uxth	r0, r0
   81060:	63ea      	str	r2, [r5, #60]	; 0x3c
   81062:	f8c4 8000 	str.w	r8, [r4]
   81066:	f8c4 8010 	str.w	r8, [r4, #16]
   8106a:	6167      	str	r7, [r4, #20]
   8106c:	b178      	cbz	r0, 8108e <setvbuf+0x82>
   8106e:	f013 0f03 	tst.w	r3, #3
   81072:	bf18      	it	ne
   81074:	2700      	movne	r7, #0
   81076:	60a7      	str	r7, [r4, #8]
   81078:	2000      	movs	r0, #0
   8107a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8107e:	f043 0301 	orr.w	r3, r3, #1
   81082:	427a      	negs	r2, r7
   81084:	81a3      	strh	r3, [r4, #12]
   81086:	61a2      	str	r2, [r4, #24]
   81088:	e7e5      	b.n	81056 <setvbuf+0x4a>
   8108a:	f04f 30ff 	mov.w	r0, #4294967295
   8108e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81092:	4628      	mov	r0, r5
   81094:	6921      	ldr	r1, [r4, #16]
   81096:	f001 f983 	bl	823a0 <_free_r>
   8109a:	89a3      	ldrh	r3, [r4, #12]
   8109c:	2e02      	cmp	r6, #2
   8109e:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   810a2:	b29b      	uxth	r3, r3
   810a4:	81a3      	strh	r3, [r4, #12]
   810a6:	d1d1      	bne.n	8104c <setvbuf+0x40>
   810a8:	2000      	movs	r0, #0
   810aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
   810ae:	f043 0302 	orr.w	r3, r3, #2
   810b2:	2500      	movs	r5, #0
   810b4:	2101      	movs	r1, #1
   810b6:	81a3      	strh	r3, [r4, #12]
   810b8:	60a5      	str	r5, [r4, #8]
   810ba:	6022      	str	r2, [r4, #0]
   810bc:	6122      	str	r2, [r4, #16]
   810be:	6161      	str	r1, [r4, #20]
   810c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810c4:	4628      	mov	r0, r5
   810c6:	f001 f827 	bl	82118 <__sinit>
   810ca:	e7ab      	b.n	81024 <setvbuf+0x18>
   810cc:	2f00      	cmp	r7, #0
   810ce:	bf08      	it	eq
   810d0:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   810d4:	4638      	mov	r0, r7
   810d6:	f001 fc59 	bl	8298c <malloc>
   810da:	4680      	mov	r8, r0
   810dc:	b128      	cbz	r0, 810ea <setvbuf+0xde>
   810de:	89a3      	ldrh	r3, [r4, #12]
   810e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   810e4:	b29b      	uxth	r3, r3
   810e6:	81a3      	strh	r3, [r4, #12]
   810e8:	e7b3      	b.n	81052 <setvbuf+0x46>
   810ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
   810ee:	f001 fc4d 	bl	8298c <malloc>
   810f2:	4680      	mov	r8, r0
   810f4:	b918      	cbnz	r0, 810fe <setvbuf+0xf2>
   810f6:	89a3      	ldrh	r3, [r4, #12]
   810f8:	f04f 30ff 	mov.w	r0, #4294967295
   810fc:	e7d5      	b.n	810aa <setvbuf+0x9e>
   810fe:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81102:	e7ec      	b.n	810de <setvbuf+0xd2>
   81104:	20070568 	.word	0x20070568
   81108:	0008210d 	.word	0x0008210d

0008110c <strlen>:
   8110c:	f020 0103 	bic.w	r1, r0, #3
   81110:	f010 0003 	ands.w	r0, r0, #3
   81114:	f1c0 0000 	rsb	r0, r0, #0
   81118:	f851 3b04 	ldr.w	r3, [r1], #4
   8111c:	f100 0c04 	add.w	ip, r0, #4
   81120:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81124:	f06f 0200 	mvn.w	r2, #0
   81128:	bf1c      	itt	ne
   8112a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8112e:	4313      	orrne	r3, r2
   81130:	f04f 0c01 	mov.w	ip, #1
   81134:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81138:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8113c:	eba3 020c 	sub.w	r2, r3, ip
   81140:	ea22 0203 	bic.w	r2, r2, r3
   81144:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81148:	bf04      	itt	eq
   8114a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8114e:	3004      	addeq	r0, #4
   81150:	d0f4      	beq.n	8113c <strlen+0x30>
   81152:	f013 0fff 	tst.w	r3, #255	; 0xff
   81156:	bf1f      	itttt	ne
   81158:	3001      	addne	r0, #1
   8115a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8115e:	3001      	addne	r0, #1
   81160:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   81164:	bf18      	it	ne
   81166:	3001      	addne	r0, #1
   81168:	4770      	bx	lr
   8116a:	bf00      	nop

0008116c <__sprint_r.part.0>:
   8116c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8116e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81172:	049c      	lsls	r4, r3, #18
   81174:	460e      	mov	r6, r1
   81176:	4680      	mov	r8, r0
   81178:	4691      	mov	r9, r2
   8117a:	d52a      	bpl.n	811d2 <__sprint_r.part.0+0x66>
   8117c:	6893      	ldr	r3, [r2, #8]
   8117e:	6812      	ldr	r2, [r2, #0]
   81180:	f102 0a08 	add.w	sl, r2, #8
   81184:	b31b      	cbz	r3, 811ce <__sprint_r.part.0+0x62>
   81186:	e91a 00a0 	ldmdb	sl, {r5, r7}
   8118a:	08bf      	lsrs	r7, r7, #2
   8118c:	d017      	beq.n	811be <__sprint_r.part.0+0x52>
   8118e:	3d04      	subs	r5, #4
   81190:	2400      	movs	r4, #0
   81192:	e001      	b.n	81198 <__sprint_r.part.0+0x2c>
   81194:	42a7      	cmp	r7, r4
   81196:	d010      	beq.n	811ba <__sprint_r.part.0+0x4e>
   81198:	4640      	mov	r0, r8
   8119a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8119e:	4632      	mov	r2, r6
   811a0:	f001 f850 	bl	82244 <_fputwc_r>
   811a4:	1c43      	adds	r3, r0, #1
   811a6:	f104 0401 	add.w	r4, r4, #1
   811aa:	d1f3      	bne.n	81194 <__sprint_r.part.0+0x28>
   811ac:	2300      	movs	r3, #0
   811ae:	f8c9 3008 	str.w	r3, [r9, #8]
   811b2:	f8c9 3004 	str.w	r3, [r9, #4]
   811b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   811ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
   811be:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   811c2:	f8c9 3008 	str.w	r3, [r9, #8]
   811c6:	f10a 0a08 	add.w	sl, sl, #8
   811ca:	2b00      	cmp	r3, #0
   811cc:	d1db      	bne.n	81186 <__sprint_r.part.0+0x1a>
   811ce:	2000      	movs	r0, #0
   811d0:	e7ec      	b.n	811ac <__sprint_r.part.0+0x40>
   811d2:	f001 f9b1 	bl	82538 <__sfvwrite_r>
   811d6:	2300      	movs	r3, #0
   811d8:	f8c9 3008 	str.w	r3, [r9, #8]
   811dc:	f8c9 3004 	str.w	r3, [r9, #4]
   811e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000811e4 <_vfiprintf_r>:
   811e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   811e8:	b0b1      	sub	sp, #196	; 0xc4
   811ea:	461c      	mov	r4, r3
   811ec:	9102      	str	r1, [sp, #8]
   811ee:	4690      	mov	r8, r2
   811f0:	9308      	str	r3, [sp, #32]
   811f2:	9006      	str	r0, [sp, #24]
   811f4:	b118      	cbz	r0, 811fe <_vfiprintf_r+0x1a>
   811f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   811f8:	2b00      	cmp	r3, #0
   811fa:	f000 80e8 	beq.w	813ce <_vfiprintf_r+0x1ea>
   811fe:	9d02      	ldr	r5, [sp, #8]
   81200:	89ab      	ldrh	r3, [r5, #12]
   81202:	b29a      	uxth	r2, r3
   81204:	0490      	lsls	r0, r2, #18
   81206:	d407      	bmi.n	81218 <_vfiprintf_r+0x34>
   81208:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   8120a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8120e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81212:	81ab      	strh	r3, [r5, #12]
   81214:	b29a      	uxth	r2, r3
   81216:	6669      	str	r1, [r5, #100]	; 0x64
   81218:	0711      	lsls	r1, r2, #28
   8121a:	f140 80b7 	bpl.w	8138c <_vfiprintf_r+0x1a8>
   8121e:	f8dd b008 	ldr.w	fp, [sp, #8]
   81222:	f8db 3010 	ldr.w	r3, [fp, #16]
   81226:	2b00      	cmp	r3, #0
   81228:	f000 80b0 	beq.w	8138c <_vfiprintf_r+0x1a8>
   8122c:	f002 021a 	and.w	r2, r2, #26
   81230:	2a0a      	cmp	r2, #10
   81232:	f000 80b7 	beq.w	813a4 <_vfiprintf_r+0x1c0>
   81236:	2300      	movs	r3, #0
   81238:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   8123c:	930a      	str	r3, [sp, #40]	; 0x28
   8123e:	9315      	str	r3, [sp, #84]	; 0x54
   81240:	9314      	str	r3, [sp, #80]	; 0x50
   81242:	9309      	str	r3, [sp, #36]	; 0x24
   81244:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81248:	464e      	mov	r6, r9
   8124a:	f898 3000 	ldrb.w	r3, [r8]
   8124e:	2b00      	cmp	r3, #0
   81250:	f000 84c8 	beq.w	81be4 <_vfiprintf_r+0xa00>
   81254:	2b25      	cmp	r3, #37	; 0x25
   81256:	f000 84c5 	beq.w	81be4 <_vfiprintf_r+0xa00>
   8125a:	f108 0201 	add.w	r2, r8, #1
   8125e:	e001      	b.n	81264 <_vfiprintf_r+0x80>
   81260:	2b25      	cmp	r3, #37	; 0x25
   81262:	d004      	beq.n	8126e <_vfiprintf_r+0x8a>
   81264:	7813      	ldrb	r3, [r2, #0]
   81266:	4614      	mov	r4, r2
   81268:	3201      	adds	r2, #1
   8126a:	2b00      	cmp	r3, #0
   8126c:	d1f8      	bne.n	81260 <_vfiprintf_r+0x7c>
   8126e:	ebc8 0504 	rsb	r5, r8, r4
   81272:	b195      	cbz	r5, 8129a <_vfiprintf_r+0xb6>
   81274:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81276:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81278:	3301      	adds	r3, #1
   8127a:	442a      	add	r2, r5
   8127c:	2b07      	cmp	r3, #7
   8127e:	f8c6 8000 	str.w	r8, [r6]
   81282:	6075      	str	r5, [r6, #4]
   81284:	9215      	str	r2, [sp, #84]	; 0x54
   81286:	9314      	str	r3, [sp, #80]	; 0x50
   81288:	dd7b      	ble.n	81382 <_vfiprintf_r+0x19e>
   8128a:	2a00      	cmp	r2, #0
   8128c:	f040 84d5 	bne.w	81c3a <_vfiprintf_r+0xa56>
   81290:	9809      	ldr	r0, [sp, #36]	; 0x24
   81292:	9214      	str	r2, [sp, #80]	; 0x50
   81294:	4428      	add	r0, r5
   81296:	464e      	mov	r6, r9
   81298:	9009      	str	r0, [sp, #36]	; 0x24
   8129a:	7823      	ldrb	r3, [r4, #0]
   8129c:	2b00      	cmp	r3, #0
   8129e:	f000 83ed 	beq.w	81a7c <_vfiprintf_r+0x898>
   812a2:	2100      	movs	r1, #0
   812a4:	f04f 0200 	mov.w	r2, #0
   812a8:	f04f 3cff 	mov.w	ip, #4294967295
   812ac:	7863      	ldrb	r3, [r4, #1]
   812ae:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   812b2:	9104      	str	r1, [sp, #16]
   812b4:	468a      	mov	sl, r1
   812b6:	f104 0801 	add.w	r8, r4, #1
   812ba:	4608      	mov	r0, r1
   812bc:	4665      	mov	r5, ip
   812be:	f108 0801 	add.w	r8, r8, #1
   812c2:	f1a3 0220 	sub.w	r2, r3, #32
   812c6:	2a58      	cmp	r2, #88	; 0x58
   812c8:	f200 82d9 	bhi.w	8187e <_vfiprintf_r+0x69a>
   812cc:	e8df f012 	tbh	[pc, r2, lsl #1]
   812d0:	02d702cb 	.word	0x02d702cb
   812d4:	02d202d7 	.word	0x02d202d7
   812d8:	02d702d7 	.word	0x02d702d7
   812dc:	02d702d7 	.word	0x02d702d7
   812e0:	02d702d7 	.word	0x02d702d7
   812e4:	028f0282 	.word	0x028f0282
   812e8:	008402d7 	.word	0x008402d7
   812ec:	02d70293 	.word	0x02d70293
   812f0:	0196012b 	.word	0x0196012b
   812f4:	01960196 	.word	0x01960196
   812f8:	01960196 	.word	0x01960196
   812fc:	01960196 	.word	0x01960196
   81300:	01960196 	.word	0x01960196
   81304:	02d702d7 	.word	0x02d702d7
   81308:	02d702d7 	.word	0x02d702d7
   8130c:	02d702d7 	.word	0x02d702d7
   81310:	02d702d7 	.word	0x02d702d7
   81314:	02d702d7 	.word	0x02d702d7
   81318:	02d70130 	.word	0x02d70130
   8131c:	02d702d7 	.word	0x02d702d7
   81320:	02d702d7 	.word	0x02d702d7
   81324:	02d702d7 	.word	0x02d702d7
   81328:	02d702d7 	.word	0x02d702d7
   8132c:	017b02d7 	.word	0x017b02d7
   81330:	02d702d7 	.word	0x02d702d7
   81334:	02d702d7 	.word	0x02d702d7
   81338:	01a402d7 	.word	0x01a402d7
   8133c:	02d702d7 	.word	0x02d702d7
   81340:	02d701bf 	.word	0x02d701bf
   81344:	02d702d7 	.word	0x02d702d7
   81348:	02d702d7 	.word	0x02d702d7
   8134c:	02d702d7 	.word	0x02d702d7
   81350:	02d702d7 	.word	0x02d702d7
   81354:	01e402d7 	.word	0x01e402d7
   81358:	02d701fa 	.word	0x02d701fa
   8135c:	02d702d7 	.word	0x02d702d7
   81360:	01fa0216 	.word	0x01fa0216
   81364:	02d702d7 	.word	0x02d702d7
   81368:	02d7021b 	.word	0x02d7021b
   8136c:	00890228 	.word	0x00890228
   81370:	027d0266 	.word	0x027d0266
   81374:	023a02d7 	.word	0x023a02d7
   81378:	011902d7 	.word	0x011902d7
   8137c:	02d702d7 	.word	0x02d702d7
   81380:	02af      	.short	0x02af
   81382:	3608      	adds	r6, #8
   81384:	9809      	ldr	r0, [sp, #36]	; 0x24
   81386:	4428      	add	r0, r5
   81388:	9009      	str	r0, [sp, #36]	; 0x24
   8138a:	e786      	b.n	8129a <_vfiprintf_r+0xb6>
   8138c:	9806      	ldr	r0, [sp, #24]
   8138e:	9902      	ldr	r1, [sp, #8]
   81390:	f000 fd90 	bl	81eb4 <__swsetup_r>
   81394:	b9b0      	cbnz	r0, 813c4 <_vfiprintf_r+0x1e0>
   81396:	9d02      	ldr	r5, [sp, #8]
   81398:	89aa      	ldrh	r2, [r5, #12]
   8139a:	f002 021a 	and.w	r2, r2, #26
   8139e:	2a0a      	cmp	r2, #10
   813a0:	f47f af49 	bne.w	81236 <_vfiprintf_r+0x52>
   813a4:	f8dd b008 	ldr.w	fp, [sp, #8]
   813a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   813ac:	2b00      	cmp	r3, #0
   813ae:	f6ff af42 	blt.w	81236 <_vfiprintf_r+0x52>
   813b2:	9806      	ldr	r0, [sp, #24]
   813b4:	4659      	mov	r1, fp
   813b6:	4642      	mov	r2, r8
   813b8:	4623      	mov	r3, r4
   813ba:	f000 fd3d 	bl	81e38 <__sbprintf>
   813be:	b031      	add	sp, #196	; 0xc4
   813c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813c4:	f04f 30ff 	mov.w	r0, #4294967295
   813c8:	b031      	add	sp, #196	; 0xc4
   813ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813ce:	f000 fea3 	bl	82118 <__sinit>
   813d2:	e714      	b.n	811fe <_vfiprintf_r+0x1a>
   813d4:	4240      	negs	r0, r0
   813d6:	9308      	str	r3, [sp, #32]
   813d8:	f04a 0a04 	orr.w	sl, sl, #4
   813dc:	f898 3000 	ldrb.w	r3, [r8]
   813e0:	e76d      	b.n	812be <_vfiprintf_r+0xda>
   813e2:	f01a 0320 	ands.w	r3, sl, #32
   813e6:	9004      	str	r0, [sp, #16]
   813e8:	46ac      	mov	ip, r5
   813ea:	f000 80f4 	beq.w	815d6 <_vfiprintf_r+0x3f2>
   813ee:	f8dd b020 	ldr.w	fp, [sp, #32]
   813f2:	f10b 0307 	add.w	r3, fp, #7
   813f6:	f023 0307 	bic.w	r3, r3, #7
   813fa:	f103 0408 	add.w	r4, r3, #8
   813fe:	9408      	str	r4, [sp, #32]
   81400:	e9d3 4500 	ldrd	r4, r5, [r3]
   81404:	2300      	movs	r3, #0
   81406:	f04f 0000 	mov.w	r0, #0
   8140a:	2100      	movs	r1, #0
   8140c:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   81410:	f8cd c014 	str.w	ip, [sp, #20]
   81414:	9107      	str	r1, [sp, #28]
   81416:	f1bc 0f00 	cmp.w	ip, #0
   8141a:	bfa8      	it	ge
   8141c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81420:	ea54 0205 	orrs.w	r2, r4, r5
   81424:	f040 80ad 	bne.w	81582 <_vfiprintf_r+0x39e>
   81428:	f1bc 0f00 	cmp.w	ip, #0
   8142c:	f040 80a9 	bne.w	81582 <_vfiprintf_r+0x39e>
   81430:	2b00      	cmp	r3, #0
   81432:	f040 83c0 	bne.w	81bb6 <_vfiprintf_r+0x9d2>
   81436:	f01a 0f01 	tst.w	sl, #1
   8143a:	f000 83bc 	beq.w	81bb6 <_vfiprintf_r+0x9d2>
   8143e:	2330      	movs	r3, #48	; 0x30
   81440:	af30      	add	r7, sp, #192	; 0xc0
   81442:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81446:	ebc7 0409 	rsb	r4, r7, r9
   8144a:	9405      	str	r4, [sp, #20]
   8144c:	f8dd b014 	ldr.w	fp, [sp, #20]
   81450:	9c07      	ldr	r4, [sp, #28]
   81452:	45e3      	cmp	fp, ip
   81454:	bfb8      	it	lt
   81456:	46e3      	movlt	fp, ip
   81458:	f8cd b00c 	str.w	fp, [sp, #12]
   8145c:	b11c      	cbz	r4, 81466 <_vfiprintf_r+0x282>
   8145e:	f10b 0b01 	add.w	fp, fp, #1
   81462:	f8cd b00c 	str.w	fp, [sp, #12]
   81466:	f01a 0502 	ands.w	r5, sl, #2
   8146a:	9507      	str	r5, [sp, #28]
   8146c:	d005      	beq.n	8147a <_vfiprintf_r+0x296>
   8146e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81472:	f10b 0b02 	add.w	fp, fp, #2
   81476:	f8cd b00c 	str.w	fp, [sp, #12]
   8147a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   8147e:	930b      	str	r3, [sp, #44]	; 0x2c
   81480:	f040 821b 	bne.w	818ba <_vfiprintf_r+0x6d6>
   81484:	9d04      	ldr	r5, [sp, #16]
   81486:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8148a:	ebcb 0405 	rsb	r4, fp, r5
   8148e:	2c00      	cmp	r4, #0
   81490:	f340 8213 	ble.w	818ba <_vfiprintf_r+0x6d6>
   81494:	2c10      	cmp	r4, #16
   81496:	f340 8489 	ble.w	81dac <_vfiprintf_r+0xbc8>
   8149a:	4dbe      	ldr	r5, [pc, #760]	; (81794 <_vfiprintf_r+0x5b0>)
   8149c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8149e:	462b      	mov	r3, r5
   814a0:	9814      	ldr	r0, [sp, #80]	; 0x50
   814a2:	4625      	mov	r5, r4
   814a4:	f04f 0b10 	mov.w	fp, #16
   814a8:	4664      	mov	r4, ip
   814aa:	46b4      	mov	ip, r6
   814ac:	461e      	mov	r6, r3
   814ae:	e006      	b.n	814be <_vfiprintf_r+0x2da>
   814b0:	1c83      	adds	r3, r0, #2
   814b2:	f10c 0c08 	add.w	ip, ip, #8
   814b6:	4608      	mov	r0, r1
   814b8:	3d10      	subs	r5, #16
   814ba:	2d10      	cmp	r5, #16
   814bc:	dd11      	ble.n	814e2 <_vfiprintf_r+0x2fe>
   814be:	1c41      	adds	r1, r0, #1
   814c0:	3210      	adds	r2, #16
   814c2:	2907      	cmp	r1, #7
   814c4:	9215      	str	r2, [sp, #84]	; 0x54
   814c6:	e88c 0840 	stmia.w	ip, {r6, fp}
   814ca:	9114      	str	r1, [sp, #80]	; 0x50
   814cc:	ddf0      	ble.n	814b0 <_vfiprintf_r+0x2cc>
   814ce:	2a00      	cmp	r2, #0
   814d0:	f040 81e6 	bne.w	818a0 <_vfiprintf_r+0x6bc>
   814d4:	3d10      	subs	r5, #16
   814d6:	2d10      	cmp	r5, #16
   814d8:	f04f 0301 	mov.w	r3, #1
   814dc:	4610      	mov	r0, r2
   814de:	46cc      	mov	ip, r9
   814e0:	dced      	bgt.n	814be <_vfiprintf_r+0x2da>
   814e2:	4631      	mov	r1, r6
   814e4:	4666      	mov	r6, ip
   814e6:	46a4      	mov	ip, r4
   814e8:	462c      	mov	r4, r5
   814ea:	460d      	mov	r5, r1
   814ec:	4422      	add	r2, r4
   814ee:	2b07      	cmp	r3, #7
   814f0:	9215      	str	r2, [sp, #84]	; 0x54
   814f2:	6035      	str	r5, [r6, #0]
   814f4:	6074      	str	r4, [r6, #4]
   814f6:	9314      	str	r3, [sp, #80]	; 0x50
   814f8:	f300 836d 	bgt.w	81bd6 <_vfiprintf_r+0x9f2>
   814fc:	3608      	adds	r6, #8
   814fe:	1c59      	adds	r1, r3, #1
   81500:	e1de      	b.n	818c0 <_vfiprintf_r+0x6dc>
   81502:	f01a 0f20 	tst.w	sl, #32
   81506:	9004      	str	r0, [sp, #16]
   81508:	46ac      	mov	ip, r5
   8150a:	f000 808d 	beq.w	81628 <_vfiprintf_r+0x444>
   8150e:	9d08      	ldr	r5, [sp, #32]
   81510:	1deb      	adds	r3, r5, #7
   81512:	f023 0307 	bic.w	r3, r3, #7
   81516:	f103 0b08 	add.w	fp, r3, #8
   8151a:	e9d3 4500 	ldrd	r4, r5, [r3]
   8151e:	f8cd b020 	str.w	fp, [sp, #32]
   81522:	2301      	movs	r3, #1
   81524:	e76f      	b.n	81406 <_vfiprintf_r+0x222>
   81526:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   8152a:	f898 3000 	ldrb.w	r3, [r8]
   8152e:	e6c6      	b.n	812be <_vfiprintf_r+0xda>
   81530:	f04a 0a10 	orr.w	sl, sl, #16
   81534:	f01a 0f20 	tst.w	sl, #32
   81538:	9004      	str	r0, [sp, #16]
   8153a:	46ac      	mov	ip, r5
   8153c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81540:	f000 80c8 	beq.w	816d4 <_vfiprintf_r+0x4f0>
   81544:	9c08      	ldr	r4, [sp, #32]
   81546:	1de1      	adds	r1, r4, #7
   81548:	f021 0107 	bic.w	r1, r1, #7
   8154c:	e9d1 2300 	ldrd	r2, r3, [r1]
   81550:	3108      	adds	r1, #8
   81552:	9108      	str	r1, [sp, #32]
   81554:	4614      	mov	r4, r2
   81556:	461d      	mov	r5, r3
   81558:	2a00      	cmp	r2, #0
   8155a:	f173 0b00 	sbcs.w	fp, r3, #0
   8155e:	f2c0 83ce 	blt.w	81cfe <_vfiprintf_r+0xb1a>
   81562:	f1bc 0f00 	cmp.w	ip, #0
   81566:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8156a:	bfa8      	it	ge
   8156c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81570:	ea54 0205 	orrs.w	r2, r4, r5
   81574:	9007      	str	r0, [sp, #28]
   81576:	f8cd c014 	str.w	ip, [sp, #20]
   8157a:	f04f 0301 	mov.w	r3, #1
   8157e:	f43f af53 	beq.w	81428 <_vfiprintf_r+0x244>
   81582:	2b01      	cmp	r3, #1
   81584:	f000 8319 	beq.w	81bba <_vfiprintf_r+0x9d6>
   81588:	2b02      	cmp	r3, #2
   8158a:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   8158e:	f040 824c 	bne.w	81a2a <_vfiprintf_r+0x846>
   81592:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81596:	4619      	mov	r1, r3
   81598:	f004 000f 	and.w	r0, r4, #15
   8159c:	0922      	lsrs	r2, r4, #4
   8159e:	f81b 0000 	ldrb.w	r0, [fp, r0]
   815a2:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   815a6:	092b      	lsrs	r3, r5, #4
   815a8:	7008      	strb	r0, [r1, #0]
   815aa:	ea52 0003 	orrs.w	r0, r2, r3
   815ae:	460f      	mov	r7, r1
   815b0:	4614      	mov	r4, r2
   815b2:	461d      	mov	r5, r3
   815b4:	f101 31ff 	add.w	r1, r1, #4294967295
   815b8:	d1ee      	bne.n	81598 <_vfiprintf_r+0x3b4>
   815ba:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   815be:	ebc7 0309 	rsb	r3, r7, r9
   815c2:	9305      	str	r3, [sp, #20]
   815c4:	e742      	b.n	8144c <_vfiprintf_r+0x268>
   815c6:	f04a 0a10 	orr.w	sl, sl, #16
   815ca:	f01a 0320 	ands.w	r3, sl, #32
   815ce:	9004      	str	r0, [sp, #16]
   815d0:	46ac      	mov	ip, r5
   815d2:	f47f af0c 	bne.w	813ee <_vfiprintf_r+0x20a>
   815d6:	f01a 0210 	ands.w	r2, sl, #16
   815da:	f040 8311 	bne.w	81c00 <_vfiprintf_r+0xa1c>
   815de:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   815e2:	f000 830d 	beq.w	81c00 <_vfiprintf_r+0xa1c>
   815e6:	f8dd b020 	ldr.w	fp, [sp, #32]
   815ea:	4613      	mov	r3, r2
   815ec:	f8bb 4000 	ldrh.w	r4, [fp]
   815f0:	f10b 0b04 	add.w	fp, fp, #4
   815f4:	2500      	movs	r5, #0
   815f6:	f8cd b020 	str.w	fp, [sp, #32]
   815fa:	e704      	b.n	81406 <_vfiprintf_r+0x222>
   815fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81600:	2000      	movs	r0, #0
   81602:	f818 3b01 	ldrb.w	r3, [r8], #1
   81606:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8160a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   8160e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81612:	2a09      	cmp	r2, #9
   81614:	d9f5      	bls.n	81602 <_vfiprintf_r+0x41e>
   81616:	e654      	b.n	812c2 <_vfiprintf_r+0xde>
   81618:	f04a 0a10 	orr.w	sl, sl, #16
   8161c:	f01a 0f20 	tst.w	sl, #32
   81620:	9004      	str	r0, [sp, #16]
   81622:	46ac      	mov	ip, r5
   81624:	f47f af73 	bne.w	8150e <_vfiprintf_r+0x32a>
   81628:	f01a 0f10 	tst.w	sl, #16
   8162c:	f040 82ef 	bne.w	81c0e <_vfiprintf_r+0xa2a>
   81630:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81634:	f000 82eb 	beq.w	81c0e <_vfiprintf_r+0xa2a>
   81638:	f8dd b020 	ldr.w	fp, [sp, #32]
   8163c:	2500      	movs	r5, #0
   8163e:	f8bb 4000 	ldrh.w	r4, [fp]
   81642:	f10b 0b04 	add.w	fp, fp, #4
   81646:	2301      	movs	r3, #1
   81648:	f8cd b020 	str.w	fp, [sp, #32]
   8164c:	e6db      	b.n	81406 <_vfiprintf_r+0x222>
   8164e:	46ac      	mov	ip, r5
   81650:	4d51      	ldr	r5, [pc, #324]	; (81798 <_vfiprintf_r+0x5b4>)
   81652:	f01a 0f20 	tst.w	sl, #32
   81656:	9004      	str	r0, [sp, #16]
   81658:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8165c:	950a      	str	r5, [sp, #40]	; 0x28
   8165e:	f000 80f0 	beq.w	81842 <_vfiprintf_r+0x65e>
   81662:	9d08      	ldr	r5, [sp, #32]
   81664:	1dea      	adds	r2, r5, #7
   81666:	f022 0207 	bic.w	r2, r2, #7
   8166a:	f102 0b08 	add.w	fp, r2, #8
   8166e:	f8cd b020 	str.w	fp, [sp, #32]
   81672:	e9d2 4500 	ldrd	r4, r5, [r2]
   81676:	f01a 0f01 	tst.w	sl, #1
   8167a:	f000 82aa 	beq.w	81bd2 <_vfiprintf_r+0x9ee>
   8167e:	ea54 0b05 	orrs.w	fp, r4, r5
   81682:	f000 82a6 	beq.w	81bd2 <_vfiprintf_r+0x9ee>
   81686:	2230      	movs	r2, #48	; 0x30
   81688:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8168c:	f04a 0a02 	orr.w	sl, sl, #2
   81690:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81694:	2302      	movs	r3, #2
   81696:	e6b6      	b.n	81406 <_vfiprintf_r+0x222>
   81698:	9b08      	ldr	r3, [sp, #32]
   8169a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8169e:	681b      	ldr	r3, [r3, #0]
   816a0:	2401      	movs	r4, #1
   816a2:	f04f 0500 	mov.w	r5, #0
   816a6:	f10b 0b04 	add.w	fp, fp, #4
   816aa:	9004      	str	r0, [sp, #16]
   816ac:	9403      	str	r4, [sp, #12]
   816ae:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   816b2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   816b6:	f8cd b020 	str.w	fp, [sp, #32]
   816ba:	9405      	str	r4, [sp, #20]
   816bc:	af16      	add	r7, sp, #88	; 0x58
   816be:	f04f 0c00 	mov.w	ip, #0
   816c2:	e6d0      	b.n	81466 <_vfiprintf_r+0x282>
   816c4:	f01a 0f20 	tst.w	sl, #32
   816c8:	9004      	str	r0, [sp, #16]
   816ca:	46ac      	mov	ip, r5
   816cc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   816d0:	f47f af38 	bne.w	81544 <_vfiprintf_r+0x360>
   816d4:	f01a 0f10 	tst.w	sl, #16
   816d8:	f040 82a7 	bne.w	81c2a <_vfiprintf_r+0xa46>
   816dc:	f01a 0f40 	tst.w	sl, #64	; 0x40
   816e0:	f000 82a3 	beq.w	81c2a <_vfiprintf_r+0xa46>
   816e4:	f8dd b020 	ldr.w	fp, [sp, #32]
   816e8:	f9bb 4000 	ldrsh.w	r4, [fp]
   816ec:	f10b 0b04 	add.w	fp, fp, #4
   816f0:	17e5      	asrs	r5, r4, #31
   816f2:	4622      	mov	r2, r4
   816f4:	462b      	mov	r3, r5
   816f6:	f8cd b020 	str.w	fp, [sp, #32]
   816fa:	e72d      	b.n	81558 <_vfiprintf_r+0x374>
   816fc:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81700:	f898 3000 	ldrb.w	r3, [r8]
   81704:	e5db      	b.n	812be <_vfiprintf_r+0xda>
   81706:	f898 3000 	ldrb.w	r3, [r8]
   8170a:	4642      	mov	r2, r8
   8170c:	2b6c      	cmp	r3, #108	; 0x6c
   8170e:	bf03      	ittte	eq
   81710:	f108 0801 	addeq.w	r8, r8, #1
   81714:	f04a 0a20 	orreq.w	sl, sl, #32
   81718:	7853      	ldrbeq	r3, [r2, #1]
   8171a:	f04a 0a10 	orrne.w	sl, sl, #16
   8171e:	e5ce      	b.n	812be <_vfiprintf_r+0xda>
   81720:	f01a 0f20 	tst.w	sl, #32
   81724:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81728:	f000 82f7 	beq.w	81d1a <_vfiprintf_r+0xb36>
   8172c:	9c08      	ldr	r4, [sp, #32]
   8172e:	6821      	ldr	r1, [r4, #0]
   81730:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81732:	17e5      	asrs	r5, r4, #31
   81734:	462b      	mov	r3, r5
   81736:	9d08      	ldr	r5, [sp, #32]
   81738:	4622      	mov	r2, r4
   8173a:	3504      	adds	r5, #4
   8173c:	9508      	str	r5, [sp, #32]
   8173e:	e9c1 2300 	strd	r2, r3, [r1]
   81742:	e582      	b.n	8124a <_vfiprintf_r+0x66>
   81744:	9c08      	ldr	r4, [sp, #32]
   81746:	46ac      	mov	ip, r5
   81748:	6827      	ldr	r7, [r4, #0]
   8174a:	f04f 0500 	mov.w	r5, #0
   8174e:	9004      	str	r0, [sp, #16]
   81750:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81754:	3404      	adds	r4, #4
   81756:	2f00      	cmp	r7, #0
   81758:	f000 8332 	beq.w	81dc0 <_vfiprintf_r+0xbdc>
   8175c:	f1bc 0f00 	cmp.w	ip, #0
   81760:	4638      	mov	r0, r7
   81762:	f2c0 8307 	blt.w	81d74 <_vfiprintf_r+0xb90>
   81766:	4662      	mov	r2, ip
   81768:	2100      	movs	r1, #0
   8176a:	f8cd c004 	str.w	ip, [sp, #4]
   8176e:	f001 fbb1 	bl	82ed4 <memchr>
   81772:	f8dd c004 	ldr.w	ip, [sp, #4]
   81776:	2800      	cmp	r0, #0
   81778:	f000 833a 	beq.w	81df0 <_vfiprintf_r+0xc0c>
   8177c:	1bc0      	subs	r0, r0, r7
   8177e:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81782:	4560      	cmp	r0, ip
   81784:	bfa8      	it	ge
   81786:	4660      	movge	r0, ip
   81788:	9005      	str	r0, [sp, #20]
   8178a:	9408      	str	r4, [sp, #32]
   8178c:	9507      	str	r5, [sp, #28]
   8178e:	f04f 0c00 	mov.w	ip, #0
   81792:	e65b      	b.n	8144c <_vfiprintf_r+0x268>
   81794:	00083f00 	.word	0x00083f00
   81798:	00083ec0 	.word	0x00083ec0
   8179c:	9b08      	ldr	r3, [sp, #32]
   8179e:	f8dd b020 	ldr.w	fp, [sp, #32]
   817a2:	9004      	str	r0, [sp, #16]
   817a4:	48b2      	ldr	r0, [pc, #712]	; (81a70 <_vfiprintf_r+0x88c>)
   817a6:	681c      	ldr	r4, [r3, #0]
   817a8:	2230      	movs	r2, #48	; 0x30
   817aa:	2378      	movs	r3, #120	; 0x78
   817ac:	f10b 0b04 	add.w	fp, fp, #4
   817b0:	46ac      	mov	ip, r5
   817b2:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   817b6:	f04a 0a02 	orr.w	sl, sl, #2
   817ba:	f8cd b020 	str.w	fp, [sp, #32]
   817be:	2500      	movs	r5, #0
   817c0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   817c4:	900a      	str	r0, [sp, #40]	; 0x28
   817c6:	2302      	movs	r3, #2
   817c8:	e61d      	b.n	81406 <_vfiprintf_r+0x222>
   817ca:	f04a 0a20 	orr.w	sl, sl, #32
   817ce:	f898 3000 	ldrb.w	r3, [r8]
   817d2:	e574      	b.n	812be <_vfiprintf_r+0xda>
   817d4:	f8dd b020 	ldr.w	fp, [sp, #32]
   817d8:	f8db 0000 	ldr.w	r0, [fp]
   817dc:	f10b 0304 	add.w	r3, fp, #4
   817e0:	2800      	cmp	r0, #0
   817e2:	f6ff adf7 	blt.w	813d4 <_vfiprintf_r+0x1f0>
   817e6:	9308      	str	r3, [sp, #32]
   817e8:	f898 3000 	ldrb.w	r3, [r8]
   817ec:	e567      	b.n	812be <_vfiprintf_r+0xda>
   817ee:	f898 3000 	ldrb.w	r3, [r8]
   817f2:	212b      	movs	r1, #43	; 0x2b
   817f4:	e563      	b.n	812be <_vfiprintf_r+0xda>
   817f6:	f898 3000 	ldrb.w	r3, [r8]
   817fa:	f108 0401 	add.w	r4, r8, #1
   817fe:	2b2a      	cmp	r3, #42	; 0x2a
   81800:	f000 8305 	beq.w	81e0e <_vfiprintf_r+0xc2a>
   81804:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81808:	2a09      	cmp	r2, #9
   8180a:	bf98      	it	ls
   8180c:	2500      	movls	r5, #0
   8180e:	f200 82fa 	bhi.w	81e06 <_vfiprintf_r+0xc22>
   81812:	f814 3b01 	ldrb.w	r3, [r4], #1
   81816:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8181a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8181e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81822:	2a09      	cmp	r2, #9
   81824:	d9f5      	bls.n	81812 <_vfiprintf_r+0x62e>
   81826:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   8182a:	46a0      	mov	r8, r4
   8182c:	e549      	b.n	812c2 <_vfiprintf_r+0xde>
   8182e:	4c90      	ldr	r4, [pc, #576]	; (81a70 <_vfiprintf_r+0x88c>)
   81830:	f01a 0f20 	tst.w	sl, #32
   81834:	9004      	str	r0, [sp, #16]
   81836:	46ac      	mov	ip, r5
   81838:	940a      	str	r4, [sp, #40]	; 0x28
   8183a:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8183e:	f47f af10 	bne.w	81662 <_vfiprintf_r+0x47e>
   81842:	f01a 0f10 	tst.w	sl, #16
   81846:	f040 81ea 	bne.w	81c1e <_vfiprintf_r+0xa3a>
   8184a:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8184e:	f000 81e6 	beq.w	81c1e <_vfiprintf_r+0xa3a>
   81852:	f8dd b020 	ldr.w	fp, [sp, #32]
   81856:	2500      	movs	r5, #0
   81858:	f8bb 4000 	ldrh.w	r4, [fp]
   8185c:	f10b 0b04 	add.w	fp, fp, #4
   81860:	f8cd b020 	str.w	fp, [sp, #32]
   81864:	e707      	b.n	81676 <_vfiprintf_r+0x492>
   81866:	f898 3000 	ldrb.w	r3, [r8]
   8186a:	2900      	cmp	r1, #0
   8186c:	f47f ad27 	bne.w	812be <_vfiprintf_r+0xda>
   81870:	2120      	movs	r1, #32
   81872:	e524      	b.n	812be <_vfiprintf_r+0xda>
   81874:	f04a 0a01 	orr.w	sl, sl, #1
   81878:	f898 3000 	ldrb.w	r3, [r8]
   8187c:	e51f      	b.n	812be <_vfiprintf_r+0xda>
   8187e:	9004      	str	r0, [sp, #16]
   81880:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81884:	2b00      	cmp	r3, #0
   81886:	f000 80f9 	beq.w	81a7c <_vfiprintf_r+0x898>
   8188a:	2501      	movs	r5, #1
   8188c:	f04f 0b00 	mov.w	fp, #0
   81890:	9503      	str	r5, [sp, #12]
   81892:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81896:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   8189a:	9505      	str	r5, [sp, #20]
   8189c:	af16      	add	r7, sp, #88	; 0x58
   8189e:	e70e      	b.n	816be <_vfiprintf_r+0x4da>
   818a0:	9806      	ldr	r0, [sp, #24]
   818a2:	9902      	ldr	r1, [sp, #8]
   818a4:	aa13      	add	r2, sp, #76	; 0x4c
   818a6:	f7ff fc61 	bl	8116c <__sprint_r.part.0>
   818aa:	2800      	cmp	r0, #0
   818ac:	f040 80ed 	bne.w	81a8a <_vfiprintf_r+0x8a6>
   818b0:	9814      	ldr	r0, [sp, #80]	; 0x50
   818b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   818b4:	1c43      	adds	r3, r0, #1
   818b6:	46cc      	mov	ip, r9
   818b8:	e5fe      	b.n	814b8 <_vfiprintf_r+0x2d4>
   818ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   818bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   818be:	1c59      	adds	r1, r3, #1
   818c0:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   818c4:	b168      	cbz	r0, 818e2 <_vfiprintf_r+0x6fe>
   818c6:	3201      	adds	r2, #1
   818c8:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   818cc:	2301      	movs	r3, #1
   818ce:	2907      	cmp	r1, #7
   818d0:	9215      	str	r2, [sp, #84]	; 0x54
   818d2:	9114      	str	r1, [sp, #80]	; 0x50
   818d4:	e886 0009 	stmia.w	r6, {r0, r3}
   818d8:	f300 8160 	bgt.w	81b9c <_vfiprintf_r+0x9b8>
   818dc:	460b      	mov	r3, r1
   818de:	3608      	adds	r6, #8
   818e0:	3101      	adds	r1, #1
   818e2:	9c07      	ldr	r4, [sp, #28]
   818e4:	b164      	cbz	r4, 81900 <_vfiprintf_r+0x71c>
   818e6:	3202      	adds	r2, #2
   818e8:	a812      	add	r0, sp, #72	; 0x48
   818ea:	2302      	movs	r3, #2
   818ec:	2907      	cmp	r1, #7
   818ee:	9215      	str	r2, [sp, #84]	; 0x54
   818f0:	9114      	str	r1, [sp, #80]	; 0x50
   818f2:	e886 0009 	stmia.w	r6, {r0, r3}
   818f6:	f300 8157 	bgt.w	81ba8 <_vfiprintf_r+0x9c4>
   818fa:	460b      	mov	r3, r1
   818fc:	3608      	adds	r6, #8
   818fe:	3101      	adds	r1, #1
   81900:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81902:	2d80      	cmp	r5, #128	; 0x80
   81904:	f000 8101 	beq.w	81b0a <_vfiprintf_r+0x926>
   81908:	9d05      	ldr	r5, [sp, #20]
   8190a:	ebc5 040c 	rsb	r4, r5, ip
   8190e:	2c00      	cmp	r4, #0
   81910:	dd2f      	ble.n	81972 <_vfiprintf_r+0x78e>
   81912:	2c10      	cmp	r4, #16
   81914:	4d57      	ldr	r5, [pc, #348]	; (81a74 <_vfiprintf_r+0x890>)
   81916:	dd22      	ble.n	8195e <_vfiprintf_r+0x77a>
   81918:	4630      	mov	r0, r6
   8191a:	f04f 0b10 	mov.w	fp, #16
   8191e:	462e      	mov	r6, r5
   81920:	4625      	mov	r5, r4
   81922:	9c06      	ldr	r4, [sp, #24]
   81924:	e006      	b.n	81934 <_vfiprintf_r+0x750>
   81926:	f103 0c02 	add.w	ip, r3, #2
   8192a:	3008      	adds	r0, #8
   8192c:	460b      	mov	r3, r1
   8192e:	3d10      	subs	r5, #16
   81930:	2d10      	cmp	r5, #16
   81932:	dd10      	ble.n	81956 <_vfiprintf_r+0x772>
   81934:	1c59      	adds	r1, r3, #1
   81936:	3210      	adds	r2, #16
   81938:	2907      	cmp	r1, #7
   8193a:	9215      	str	r2, [sp, #84]	; 0x54
   8193c:	e880 0840 	stmia.w	r0, {r6, fp}
   81940:	9114      	str	r1, [sp, #80]	; 0x50
   81942:	ddf0      	ble.n	81926 <_vfiprintf_r+0x742>
   81944:	2a00      	cmp	r2, #0
   81946:	d163      	bne.n	81a10 <_vfiprintf_r+0x82c>
   81948:	3d10      	subs	r5, #16
   8194a:	2d10      	cmp	r5, #16
   8194c:	f04f 0c01 	mov.w	ip, #1
   81950:	4613      	mov	r3, r2
   81952:	4648      	mov	r0, r9
   81954:	dcee      	bgt.n	81934 <_vfiprintf_r+0x750>
   81956:	462c      	mov	r4, r5
   81958:	4661      	mov	r1, ip
   8195a:	4635      	mov	r5, r6
   8195c:	4606      	mov	r6, r0
   8195e:	4422      	add	r2, r4
   81960:	2907      	cmp	r1, #7
   81962:	9215      	str	r2, [sp, #84]	; 0x54
   81964:	6035      	str	r5, [r6, #0]
   81966:	6074      	str	r4, [r6, #4]
   81968:	9114      	str	r1, [sp, #80]	; 0x50
   8196a:	f300 80c1 	bgt.w	81af0 <_vfiprintf_r+0x90c>
   8196e:	3608      	adds	r6, #8
   81970:	3101      	adds	r1, #1
   81972:	9d05      	ldr	r5, [sp, #20]
   81974:	2907      	cmp	r1, #7
   81976:	442a      	add	r2, r5
   81978:	9215      	str	r2, [sp, #84]	; 0x54
   8197a:	6037      	str	r7, [r6, #0]
   8197c:	6075      	str	r5, [r6, #4]
   8197e:	9114      	str	r1, [sp, #80]	; 0x50
   81980:	f340 80c1 	ble.w	81b06 <_vfiprintf_r+0x922>
   81984:	2a00      	cmp	r2, #0
   81986:	f040 8130 	bne.w	81bea <_vfiprintf_r+0xa06>
   8198a:	9214      	str	r2, [sp, #80]	; 0x50
   8198c:	464e      	mov	r6, r9
   8198e:	f01a 0f04 	tst.w	sl, #4
   81992:	f000 808b 	beq.w	81aac <_vfiprintf_r+0x8c8>
   81996:	9d04      	ldr	r5, [sp, #16]
   81998:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8199c:	ebcb 0405 	rsb	r4, fp, r5
   819a0:	2c00      	cmp	r4, #0
   819a2:	f340 8083 	ble.w	81aac <_vfiprintf_r+0x8c8>
   819a6:	2c10      	cmp	r4, #16
   819a8:	f340 821e 	ble.w	81de8 <_vfiprintf_r+0xc04>
   819ac:	9914      	ldr	r1, [sp, #80]	; 0x50
   819ae:	4d32      	ldr	r5, [pc, #200]	; (81a78 <_vfiprintf_r+0x894>)
   819b0:	2710      	movs	r7, #16
   819b2:	f8dd a018 	ldr.w	sl, [sp, #24]
   819b6:	f8dd b008 	ldr.w	fp, [sp, #8]
   819ba:	e005      	b.n	819c8 <_vfiprintf_r+0x7e4>
   819bc:	1c88      	adds	r0, r1, #2
   819be:	3608      	adds	r6, #8
   819c0:	4619      	mov	r1, r3
   819c2:	3c10      	subs	r4, #16
   819c4:	2c10      	cmp	r4, #16
   819c6:	dd10      	ble.n	819ea <_vfiprintf_r+0x806>
   819c8:	1c4b      	adds	r3, r1, #1
   819ca:	3210      	adds	r2, #16
   819cc:	2b07      	cmp	r3, #7
   819ce:	9215      	str	r2, [sp, #84]	; 0x54
   819d0:	e886 00a0 	stmia.w	r6, {r5, r7}
   819d4:	9314      	str	r3, [sp, #80]	; 0x50
   819d6:	ddf1      	ble.n	819bc <_vfiprintf_r+0x7d8>
   819d8:	2a00      	cmp	r2, #0
   819da:	d17d      	bne.n	81ad8 <_vfiprintf_r+0x8f4>
   819dc:	3c10      	subs	r4, #16
   819de:	2c10      	cmp	r4, #16
   819e0:	f04f 0001 	mov.w	r0, #1
   819e4:	4611      	mov	r1, r2
   819e6:	464e      	mov	r6, r9
   819e8:	dcee      	bgt.n	819c8 <_vfiprintf_r+0x7e4>
   819ea:	4422      	add	r2, r4
   819ec:	2807      	cmp	r0, #7
   819ee:	9215      	str	r2, [sp, #84]	; 0x54
   819f0:	6035      	str	r5, [r6, #0]
   819f2:	6074      	str	r4, [r6, #4]
   819f4:	9014      	str	r0, [sp, #80]	; 0x50
   819f6:	dd59      	ble.n	81aac <_vfiprintf_r+0x8c8>
   819f8:	2a00      	cmp	r2, #0
   819fa:	d14f      	bne.n	81a9c <_vfiprintf_r+0x8b8>
   819fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   819fe:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a02:	9d04      	ldr	r5, [sp, #16]
   81a04:	45ab      	cmp	fp, r5
   81a06:	bfac      	ite	ge
   81a08:	445c      	addge	r4, fp
   81a0a:	1964      	addlt	r4, r4, r5
   81a0c:	9409      	str	r4, [sp, #36]	; 0x24
   81a0e:	e05e      	b.n	81ace <_vfiprintf_r+0x8ea>
   81a10:	4620      	mov	r0, r4
   81a12:	9902      	ldr	r1, [sp, #8]
   81a14:	aa13      	add	r2, sp, #76	; 0x4c
   81a16:	f7ff fba9 	bl	8116c <__sprint_r.part.0>
   81a1a:	2800      	cmp	r0, #0
   81a1c:	d135      	bne.n	81a8a <_vfiprintf_r+0x8a6>
   81a1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81a20:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a22:	f103 0c01 	add.w	ip, r3, #1
   81a26:	4648      	mov	r0, r9
   81a28:	e781      	b.n	8192e <_vfiprintf_r+0x74a>
   81a2a:	08e0      	lsrs	r0, r4, #3
   81a2c:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81a30:	f004 0207 	and.w	r2, r4, #7
   81a34:	08e9      	lsrs	r1, r5, #3
   81a36:	3230      	adds	r2, #48	; 0x30
   81a38:	ea50 0b01 	orrs.w	fp, r0, r1
   81a3c:	461f      	mov	r7, r3
   81a3e:	701a      	strb	r2, [r3, #0]
   81a40:	4604      	mov	r4, r0
   81a42:	460d      	mov	r5, r1
   81a44:	f103 33ff 	add.w	r3, r3, #4294967295
   81a48:	d1ef      	bne.n	81a2a <_vfiprintf_r+0x846>
   81a4a:	f01a 0f01 	tst.w	sl, #1
   81a4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81a52:	4639      	mov	r1, r7
   81a54:	f000 80b9 	beq.w	81bca <_vfiprintf_r+0x9e6>
   81a58:	2a30      	cmp	r2, #48	; 0x30
   81a5a:	f43f acf4 	beq.w	81446 <_vfiprintf_r+0x262>
   81a5e:	461f      	mov	r7, r3
   81a60:	ebc7 0509 	rsb	r5, r7, r9
   81a64:	2330      	movs	r3, #48	; 0x30
   81a66:	9505      	str	r5, [sp, #20]
   81a68:	f801 3c01 	strb.w	r3, [r1, #-1]
   81a6c:	e4ee      	b.n	8144c <_vfiprintf_r+0x268>
   81a6e:	bf00      	nop
   81a70:	00083ed4 	.word	0x00083ed4
   81a74:	00083ef0 	.word	0x00083ef0
   81a78:	00083f00 	.word	0x00083f00
   81a7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81a7e:	b123      	cbz	r3, 81a8a <_vfiprintf_r+0x8a6>
   81a80:	9806      	ldr	r0, [sp, #24]
   81a82:	9902      	ldr	r1, [sp, #8]
   81a84:	aa13      	add	r2, sp, #76	; 0x4c
   81a86:	f7ff fb71 	bl	8116c <__sprint_r.part.0>
   81a8a:	9c02      	ldr	r4, [sp, #8]
   81a8c:	89a3      	ldrh	r3, [r4, #12]
   81a8e:	065b      	lsls	r3, r3, #25
   81a90:	f53f ac98 	bmi.w	813c4 <_vfiprintf_r+0x1e0>
   81a94:	9809      	ldr	r0, [sp, #36]	; 0x24
   81a96:	b031      	add	sp, #196	; 0xc4
   81a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a9c:	9806      	ldr	r0, [sp, #24]
   81a9e:	9902      	ldr	r1, [sp, #8]
   81aa0:	aa13      	add	r2, sp, #76	; 0x4c
   81aa2:	f7ff fb63 	bl	8116c <__sprint_r.part.0>
   81aa6:	2800      	cmp	r0, #0
   81aa8:	d1ef      	bne.n	81a8a <_vfiprintf_r+0x8a6>
   81aaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81aac:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81aae:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81ab2:	9d04      	ldr	r5, [sp, #16]
   81ab4:	45ab      	cmp	fp, r5
   81ab6:	bfac      	ite	ge
   81ab8:	445c      	addge	r4, fp
   81aba:	1964      	addlt	r4, r4, r5
   81abc:	9409      	str	r4, [sp, #36]	; 0x24
   81abe:	b132      	cbz	r2, 81ace <_vfiprintf_r+0x8ea>
   81ac0:	9806      	ldr	r0, [sp, #24]
   81ac2:	9902      	ldr	r1, [sp, #8]
   81ac4:	aa13      	add	r2, sp, #76	; 0x4c
   81ac6:	f7ff fb51 	bl	8116c <__sprint_r.part.0>
   81aca:	2800      	cmp	r0, #0
   81acc:	d1dd      	bne.n	81a8a <_vfiprintf_r+0x8a6>
   81ace:	2000      	movs	r0, #0
   81ad0:	9014      	str	r0, [sp, #80]	; 0x50
   81ad2:	464e      	mov	r6, r9
   81ad4:	f7ff bbb9 	b.w	8124a <_vfiprintf_r+0x66>
   81ad8:	4650      	mov	r0, sl
   81ada:	4659      	mov	r1, fp
   81adc:	aa13      	add	r2, sp, #76	; 0x4c
   81ade:	f7ff fb45 	bl	8116c <__sprint_r.part.0>
   81ae2:	2800      	cmp	r0, #0
   81ae4:	d1d1      	bne.n	81a8a <_vfiprintf_r+0x8a6>
   81ae6:	9914      	ldr	r1, [sp, #80]	; 0x50
   81ae8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81aea:	1c48      	adds	r0, r1, #1
   81aec:	464e      	mov	r6, r9
   81aee:	e768      	b.n	819c2 <_vfiprintf_r+0x7de>
   81af0:	2a00      	cmp	r2, #0
   81af2:	f040 80f7 	bne.w	81ce4 <_vfiprintf_r+0xb00>
   81af6:	9c05      	ldr	r4, [sp, #20]
   81af8:	2301      	movs	r3, #1
   81afa:	9720      	str	r7, [sp, #128]	; 0x80
   81afc:	9421      	str	r4, [sp, #132]	; 0x84
   81afe:	9415      	str	r4, [sp, #84]	; 0x54
   81b00:	4622      	mov	r2, r4
   81b02:	9314      	str	r3, [sp, #80]	; 0x50
   81b04:	464e      	mov	r6, r9
   81b06:	3608      	adds	r6, #8
   81b08:	e741      	b.n	8198e <_vfiprintf_r+0x7aa>
   81b0a:	9d04      	ldr	r5, [sp, #16]
   81b0c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81b10:	ebcb 0405 	rsb	r4, fp, r5
   81b14:	2c00      	cmp	r4, #0
   81b16:	f77f aef7 	ble.w	81908 <_vfiprintf_r+0x724>
   81b1a:	2c10      	cmp	r4, #16
   81b1c:	4da6      	ldr	r5, [pc, #664]	; (81db8 <_vfiprintf_r+0xbd4>)
   81b1e:	f340 8170 	ble.w	81e02 <_vfiprintf_r+0xc1e>
   81b22:	4629      	mov	r1, r5
   81b24:	f04f 0b10 	mov.w	fp, #16
   81b28:	4625      	mov	r5, r4
   81b2a:	4664      	mov	r4, ip
   81b2c:	46b4      	mov	ip, r6
   81b2e:	460e      	mov	r6, r1
   81b30:	e006      	b.n	81b40 <_vfiprintf_r+0x95c>
   81b32:	1c98      	adds	r0, r3, #2
   81b34:	f10c 0c08 	add.w	ip, ip, #8
   81b38:	460b      	mov	r3, r1
   81b3a:	3d10      	subs	r5, #16
   81b3c:	2d10      	cmp	r5, #16
   81b3e:	dd0f      	ble.n	81b60 <_vfiprintf_r+0x97c>
   81b40:	1c59      	adds	r1, r3, #1
   81b42:	3210      	adds	r2, #16
   81b44:	2907      	cmp	r1, #7
   81b46:	9215      	str	r2, [sp, #84]	; 0x54
   81b48:	e88c 0840 	stmia.w	ip, {r6, fp}
   81b4c:	9114      	str	r1, [sp, #80]	; 0x50
   81b4e:	ddf0      	ble.n	81b32 <_vfiprintf_r+0x94e>
   81b50:	b9ba      	cbnz	r2, 81b82 <_vfiprintf_r+0x99e>
   81b52:	3d10      	subs	r5, #16
   81b54:	2d10      	cmp	r5, #16
   81b56:	f04f 0001 	mov.w	r0, #1
   81b5a:	4613      	mov	r3, r2
   81b5c:	46cc      	mov	ip, r9
   81b5e:	dcef      	bgt.n	81b40 <_vfiprintf_r+0x95c>
   81b60:	4633      	mov	r3, r6
   81b62:	4666      	mov	r6, ip
   81b64:	46a4      	mov	ip, r4
   81b66:	462c      	mov	r4, r5
   81b68:	461d      	mov	r5, r3
   81b6a:	4422      	add	r2, r4
   81b6c:	2807      	cmp	r0, #7
   81b6e:	9215      	str	r2, [sp, #84]	; 0x54
   81b70:	6035      	str	r5, [r6, #0]
   81b72:	6074      	str	r4, [r6, #4]
   81b74:	9014      	str	r0, [sp, #80]	; 0x50
   81b76:	f300 80af 	bgt.w	81cd8 <_vfiprintf_r+0xaf4>
   81b7a:	3608      	adds	r6, #8
   81b7c:	1c41      	adds	r1, r0, #1
   81b7e:	4603      	mov	r3, r0
   81b80:	e6c2      	b.n	81908 <_vfiprintf_r+0x724>
   81b82:	9806      	ldr	r0, [sp, #24]
   81b84:	9902      	ldr	r1, [sp, #8]
   81b86:	aa13      	add	r2, sp, #76	; 0x4c
   81b88:	f7ff faf0 	bl	8116c <__sprint_r.part.0>
   81b8c:	2800      	cmp	r0, #0
   81b8e:	f47f af7c 	bne.w	81a8a <_vfiprintf_r+0x8a6>
   81b92:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b94:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b96:	1c58      	adds	r0, r3, #1
   81b98:	46cc      	mov	ip, r9
   81b9a:	e7ce      	b.n	81b3a <_vfiprintf_r+0x956>
   81b9c:	2a00      	cmp	r2, #0
   81b9e:	d179      	bne.n	81c94 <_vfiprintf_r+0xab0>
   81ba0:	4619      	mov	r1, r3
   81ba2:	464e      	mov	r6, r9
   81ba4:	4613      	mov	r3, r2
   81ba6:	e69c      	b.n	818e2 <_vfiprintf_r+0x6fe>
   81ba8:	2a00      	cmp	r2, #0
   81baa:	f040 8084 	bne.w	81cb6 <_vfiprintf_r+0xad2>
   81bae:	2101      	movs	r1, #1
   81bb0:	4613      	mov	r3, r2
   81bb2:	464e      	mov	r6, r9
   81bb4:	e6a4      	b.n	81900 <_vfiprintf_r+0x71c>
   81bb6:	464f      	mov	r7, r9
   81bb8:	e448      	b.n	8144c <_vfiprintf_r+0x268>
   81bba:	2d00      	cmp	r5, #0
   81bbc:	bf08      	it	eq
   81bbe:	2c0a      	cmpeq	r4, #10
   81bc0:	d246      	bcs.n	81c50 <_vfiprintf_r+0xa6c>
   81bc2:	3430      	adds	r4, #48	; 0x30
   81bc4:	af30      	add	r7, sp, #192	; 0xc0
   81bc6:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81bca:	ebc7 0309 	rsb	r3, r7, r9
   81bce:	9305      	str	r3, [sp, #20]
   81bd0:	e43c      	b.n	8144c <_vfiprintf_r+0x268>
   81bd2:	2302      	movs	r3, #2
   81bd4:	e417      	b.n	81406 <_vfiprintf_r+0x222>
   81bd6:	2a00      	cmp	r2, #0
   81bd8:	f040 80af 	bne.w	81d3a <_vfiprintf_r+0xb56>
   81bdc:	4613      	mov	r3, r2
   81bde:	2101      	movs	r1, #1
   81be0:	464e      	mov	r6, r9
   81be2:	e66d      	b.n	818c0 <_vfiprintf_r+0x6dc>
   81be4:	4644      	mov	r4, r8
   81be6:	f7ff bb58 	b.w	8129a <_vfiprintf_r+0xb6>
   81bea:	9806      	ldr	r0, [sp, #24]
   81bec:	9902      	ldr	r1, [sp, #8]
   81bee:	aa13      	add	r2, sp, #76	; 0x4c
   81bf0:	f7ff fabc 	bl	8116c <__sprint_r.part.0>
   81bf4:	2800      	cmp	r0, #0
   81bf6:	f47f af48 	bne.w	81a8a <_vfiprintf_r+0x8a6>
   81bfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bfc:	464e      	mov	r6, r9
   81bfe:	e6c6      	b.n	8198e <_vfiprintf_r+0x7aa>
   81c00:	9d08      	ldr	r5, [sp, #32]
   81c02:	682c      	ldr	r4, [r5, #0]
   81c04:	3504      	adds	r5, #4
   81c06:	9508      	str	r5, [sp, #32]
   81c08:	2500      	movs	r5, #0
   81c0a:	f7ff bbfc 	b.w	81406 <_vfiprintf_r+0x222>
   81c0e:	9d08      	ldr	r5, [sp, #32]
   81c10:	2301      	movs	r3, #1
   81c12:	682c      	ldr	r4, [r5, #0]
   81c14:	3504      	adds	r5, #4
   81c16:	9508      	str	r5, [sp, #32]
   81c18:	2500      	movs	r5, #0
   81c1a:	f7ff bbf4 	b.w	81406 <_vfiprintf_r+0x222>
   81c1e:	9d08      	ldr	r5, [sp, #32]
   81c20:	682c      	ldr	r4, [r5, #0]
   81c22:	3504      	adds	r5, #4
   81c24:	9508      	str	r5, [sp, #32]
   81c26:	2500      	movs	r5, #0
   81c28:	e525      	b.n	81676 <_vfiprintf_r+0x492>
   81c2a:	9d08      	ldr	r5, [sp, #32]
   81c2c:	682c      	ldr	r4, [r5, #0]
   81c2e:	3504      	adds	r5, #4
   81c30:	9508      	str	r5, [sp, #32]
   81c32:	17e5      	asrs	r5, r4, #31
   81c34:	4622      	mov	r2, r4
   81c36:	462b      	mov	r3, r5
   81c38:	e48e      	b.n	81558 <_vfiprintf_r+0x374>
   81c3a:	9806      	ldr	r0, [sp, #24]
   81c3c:	9902      	ldr	r1, [sp, #8]
   81c3e:	aa13      	add	r2, sp, #76	; 0x4c
   81c40:	f7ff fa94 	bl	8116c <__sprint_r.part.0>
   81c44:	2800      	cmp	r0, #0
   81c46:	f47f af20 	bne.w	81a8a <_vfiprintf_r+0x8a6>
   81c4a:	464e      	mov	r6, r9
   81c4c:	f7ff bb9a 	b.w	81384 <_vfiprintf_r+0x1a0>
   81c50:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81c54:	9603      	str	r6, [sp, #12]
   81c56:	465e      	mov	r6, fp
   81c58:	46e3      	mov	fp, ip
   81c5a:	4620      	mov	r0, r4
   81c5c:	4629      	mov	r1, r5
   81c5e:	220a      	movs	r2, #10
   81c60:	2300      	movs	r3, #0
   81c62:	f001 fe2f 	bl	838c4 <__aeabi_uldivmod>
   81c66:	3230      	adds	r2, #48	; 0x30
   81c68:	7032      	strb	r2, [r6, #0]
   81c6a:	4620      	mov	r0, r4
   81c6c:	4629      	mov	r1, r5
   81c6e:	220a      	movs	r2, #10
   81c70:	2300      	movs	r3, #0
   81c72:	f001 fe27 	bl	838c4 <__aeabi_uldivmod>
   81c76:	4604      	mov	r4, r0
   81c78:	460d      	mov	r5, r1
   81c7a:	ea54 0005 	orrs.w	r0, r4, r5
   81c7e:	4637      	mov	r7, r6
   81c80:	f106 36ff 	add.w	r6, r6, #4294967295
   81c84:	d1e9      	bne.n	81c5a <_vfiprintf_r+0xa76>
   81c86:	ebc7 0309 	rsb	r3, r7, r9
   81c8a:	46dc      	mov	ip, fp
   81c8c:	9e03      	ldr	r6, [sp, #12]
   81c8e:	9305      	str	r3, [sp, #20]
   81c90:	f7ff bbdc 	b.w	8144c <_vfiprintf_r+0x268>
   81c94:	9806      	ldr	r0, [sp, #24]
   81c96:	9902      	ldr	r1, [sp, #8]
   81c98:	aa13      	add	r2, sp, #76	; 0x4c
   81c9a:	f8cd c004 	str.w	ip, [sp, #4]
   81c9e:	f7ff fa65 	bl	8116c <__sprint_r.part.0>
   81ca2:	f8dd c004 	ldr.w	ip, [sp, #4]
   81ca6:	2800      	cmp	r0, #0
   81ca8:	f47f aeef 	bne.w	81a8a <_vfiprintf_r+0x8a6>
   81cac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81cae:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cb0:	1c59      	adds	r1, r3, #1
   81cb2:	464e      	mov	r6, r9
   81cb4:	e615      	b.n	818e2 <_vfiprintf_r+0x6fe>
   81cb6:	9806      	ldr	r0, [sp, #24]
   81cb8:	9902      	ldr	r1, [sp, #8]
   81cba:	aa13      	add	r2, sp, #76	; 0x4c
   81cbc:	f8cd c004 	str.w	ip, [sp, #4]
   81cc0:	f7ff fa54 	bl	8116c <__sprint_r.part.0>
   81cc4:	f8dd c004 	ldr.w	ip, [sp, #4]
   81cc8:	2800      	cmp	r0, #0
   81cca:	f47f aede 	bne.w	81a8a <_vfiprintf_r+0x8a6>
   81cce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81cd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cd2:	1c59      	adds	r1, r3, #1
   81cd4:	464e      	mov	r6, r9
   81cd6:	e613      	b.n	81900 <_vfiprintf_r+0x71c>
   81cd8:	2a00      	cmp	r2, #0
   81cda:	d156      	bne.n	81d8a <_vfiprintf_r+0xba6>
   81cdc:	2101      	movs	r1, #1
   81cde:	4613      	mov	r3, r2
   81ce0:	464e      	mov	r6, r9
   81ce2:	e611      	b.n	81908 <_vfiprintf_r+0x724>
   81ce4:	9806      	ldr	r0, [sp, #24]
   81ce6:	9902      	ldr	r1, [sp, #8]
   81ce8:	aa13      	add	r2, sp, #76	; 0x4c
   81cea:	f7ff fa3f 	bl	8116c <__sprint_r.part.0>
   81cee:	2800      	cmp	r0, #0
   81cf0:	f47f aecb 	bne.w	81a8a <_vfiprintf_r+0x8a6>
   81cf4:	9914      	ldr	r1, [sp, #80]	; 0x50
   81cf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cf8:	3101      	adds	r1, #1
   81cfa:	464e      	mov	r6, r9
   81cfc:	e639      	b.n	81972 <_vfiprintf_r+0x78e>
   81cfe:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81d02:	4264      	negs	r4, r4
   81d04:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81d08:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81d0c:	f8cd b01c 	str.w	fp, [sp, #28]
   81d10:	f8cd c014 	str.w	ip, [sp, #20]
   81d14:	2301      	movs	r3, #1
   81d16:	f7ff bb7e 	b.w	81416 <_vfiprintf_r+0x232>
   81d1a:	f01a 0f10 	tst.w	sl, #16
   81d1e:	d11d      	bne.n	81d5c <_vfiprintf_r+0xb78>
   81d20:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81d24:	d058      	beq.n	81dd8 <_vfiprintf_r+0xbf4>
   81d26:	9d08      	ldr	r5, [sp, #32]
   81d28:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81d2c:	682b      	ldr	r3, [r5, #0]
   81d2e:	3504      	adds	r5, #4
   81d30:	9508      	str	r5, [sp, #32]
   81d32:	f8a3 b000 	strh.w	fp, [r3]
   81d36:	f7ff ba88 	b.w	8124a <_vfiprintf_r+0x66>
   81d3a:	9806      	ldr	r0, [sp, #24]
   81d3c:	9902      	ldr	r1, [sp, #8]
   81d3e:	aa13      	add	r2, sp, #76	; 0x4c
   81d40:	f8cd c004 	str.w	ip, [sp, #4]
   81d44:	f7ff fa12 	bl	8116c <__sprint_r.part.0>
   81d48:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d4c:	2800      	cmp	r0, #0
   81d4e:	f47f ae9c 	bne.w	81a8a <_vfiprintf_r+0x8a6>
   81d52:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d54:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d56:	1c59      	adds	r1, r3, #1
   81d58:	464e      	mov	r6, r9
   81d5a:	e5b1      	b.n	818c0 <_vfiprintf_r+0x6dc>
   81d5c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81d60:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81d62:	f8db 3000 	ldr.w	r3, [fp]
   81d66:	f10b 0b04 	add.w	fp, fp, #4
   81d6a:	f8cd b020 	str.w	fp, [sp, #32]
   81d6e:	601c      	str	r4, [r3, #0]
   81d70:	f7ff ba6b 	b.w	8124a <_vfiprintf_r+0x66>
   81d74:	9408      	str	r4, [sp, #32]
   81d76:	f7ff f9c9 	bl	8110c <strlen>
   81d7a:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81d7e:	9005      	str	r0, [sp, #20]
   81d80:	9407      	str	r4, [sp, #28]
   81d82:	f04f 0c00 	mov.w	ip, #0
   81d86:	f7ff bb61 	b.w	8144c <_vfiprintf_r+0x268>
   81d8a:	9806      	ldr	r0, [sp, #24]
   81d8c:	9902      	ldr	r1, [sp, #8]
   81d8e:	aa13      	add	r2, sp, #76	; 0x4c
   81d90:	f8cd c004 	str.w	ip, [sp, #4]
   81d94:	f7ff f9ea 	bl	8116c <__sprint_r.part.0>
   81d98:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d9c:	2800      	cmp	r0, #0
   81d9e:	f47f ae74 	bne.w	81a8a <_vfiprintf_r+0x8a6>
   81da2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81da4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81da6:	1c59      	adds	r1, r3, #1
   81da8:	464e      	mov	r6, r9
   81daa:	e5ad      	b.n	81908 <_vfiprintf_r+0x724>
   81dac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81dae:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81db0:	3301      	adds	r3, #1
   81db2:	4d02      	ldr	r5, [pc, #8]	; (81dbc <_vfiprintf_r+0xbd8>)
   81db4:	f7ff bb9a 	b.w	814ec <_vfiprintf_r+0x308>
   81db8:	00083ef0 	.word	0x00083ef0
   81dbc:	00083f00 	.word	0x00083f00
   81dc0:	f1bc 0f06 	cmp.w	ip, #6
   81dc4:	bf34      	ite	cc
   81dc6:	4663      	movcc	r3, ip
   81dc8:	2306      	movcs	r3, #6
   81dca:	9408      	str	r4, [sp, #32]
   81dcc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81dd0:	9305      	str	r3, [sp, #20]
   81dd2:	9403      	str	r4, [sp, #12]
   81dd4:	4f16      	ldr	r7, [pc, #88]	; (81e30 <_vfiprintf_r+0xc4c>)
   81dd6:	e472      	b.n	816be <_vfiprintf_r+0x4da>
   81dd8:	9c08      	ldr	r4, [sp, #32]
   81dda:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81ddc:	6823      	ldr	r3, [r4, #0]
   81dde:	3404      	adds	r4, #4
   81de0:	9408      	str	r4, [sp, #32]
   81de2:	601d      	str	r5, [r3, #0]
   81de4:	f7ff ba31 	b.w	8124a <_vfiprintf_r+0x66>
   81de8:	9814      	ldr	r0, [sp, #80]	; 0x50
   81dea:	4d12      	ldr	r5, [pc, #72]	; (81e34 <_vfiprintf_r+0xc50>)
   81dec:	3001      	adds	r0, #1
   81dee:	e5fc      	b.n	819ea <_vfiprintf_r+0x806>
   81df0:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81df4:	f8cd c014 	str.w	ip, [sp, #20]
   81df8:	9507      	str	r5, [sp, #28]
   81dfa:	9408      	str	r4, [sp, #32]
   81dfc:	4684      	mov	ip, r0
   81dfe:	f7ff bb25 	b.w	8144c <_vfiprintf_r+0x268>
   81e02:	4608      	mov	r0, r1
   81e04:	e6b1      	b.n	81b6a <_vfiprintf_r+0x986>
   81e06:	46a0      	mov	r8, r4
   81e08:	2500      	movs	r5, #0
   81e0a:	f7ff ba5a 	b.w	812c2 <_vfiprintf_r+0xde>
   81e0e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81e12:	f898 3001 	ldrb.w	r3, [r8, #1]
   81e16:	f8db 5000 	ldr.w	r5, [fp]
   81e1a:	f10b 0204 	add.w	r2, fp, #4
   81e1e:	2d00      	cmp	r5, #0
   81e20:	9208      	str	r2, [sp, #32]
   81e22:	46a0      	mov	r8, r4
   81e24:	f6bf aa4b 	bge.w	812be <_vfiprintf_r+0xda>
   81e28:	f04f 35ff 	mov.w	r5, #4294967295
   81e2c:	f7ff ba47 	b.w	812be <_vfiprintf_r+0xda>
   81e30:	00083ee8 	.word	0x00083ee8
   81e34:	00083f00 	.word	0x00083f00

00081e38 <__sbprintf>:
   81e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81e3c:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81e3e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81e42:	4688      	mov	r8, r1
   81e44:	9719      	str	r7, [sp, #100]	; 0x64
   81e46:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81e4a:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81e4e:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81e52:	9707      	str	r7, [sp, #28]
   81e54:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81e58:	ac1a      	add	r4, sp, #104	; 0x68
   81e5a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81e5e:	f02a 0a02 	bic.w	sl, sl, #2
   81e62:	2600      	movs	r6, #0
   81e64:	4669      	mov	r1, sp
   81e66:	9400      	str	r4, [sp, #0]
   81e68:	9404      	str	r4, [sp, #16]
   81e6a:	9502      	str	r5, [sp, #8]
   81e6c:	9505      	str	r5, [sp, #20]
   81e6e:	f8ad a00c 	strh.w	sl, [sp, #12]
   81e72:	f8ad 900e 	strh.w	r9, [sp, #14]
   81e76:	9709      	str	r7, [sp, #36]	; 0x24
   81e78:	9606      	str	r6, [sp, #24]
   81e7a:	4605      	mov	r5, r0
   81e7c:	f7ff f9b2 	bl	811e4 <_vfiprintf_r>
   81e80:	1e04      	subs	r4, r0, #0
   81e82:	db07      	blt.n	81e94 <__sbprintf+0x5c>
   81e84:	4628      	mov	r0, r5
   81e86:	4669      	mov	r1, sp
   81e88:	f000 f92a 	bl	820e0 <_fflush_r>
   81e8c:	42b0      	cmp	r0, r6
   81e8e:	bf18      	it	ne
   81e90:	f04f 34ff 	movne.w	r4, #4294967295
   81e94:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81e98:	065b      	lsls	r3, r3, #25
   81e9a:	d505      	bpl.n	81ea8 <__sbprintf+0x70>
   81e9c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81ea4:	f8a8 300c 	strh.w	r3, [r8, #12]
   81ea8:	4620      	mov	r0, r4
   81eaa:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81eb2:	bf00      	nop

00081eb4 <__swsetup_r>:
   81eb4:	4b2f      	ldr	r3, [pc, #188]	; (81f74 <__swsetup_r+0xc0>)
   81eb6:	b570      	push	{r4, r5, r6, lr}
   81eb8:	4606      	mov	r6, r0
   81eba:	6818      	ldr	r0, [r3, #0]
   81ebc:	460c      	mov	r4, r1
   81ebe:	b110      	cbz	r0, 81ec6 <__swsetup_r+0x12>
   81ec0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81ec2:	2a00      	cmp	r2, #0
   81ec4:	d036      	beq.n	81f34 <__swsetup_r+0x80>
   81ec6:	89a5      	ldrh	r5, [r4, #12]
   81ec8:	b2ab      	uxth	r3, r5
   81eca:	0719      	lsls	r1, r3, #28
   81ecc:	d50c      	bpl.n	81ee8 <__swsetup_r+0x34>
   81ece:	6922      	ldr	r2, [r4, #16]
   81ed0:	b1aa      	cbz	r2, 81efe <__swsetup_r+0x4a>
   81ed2:	f013 0101 	ands.w	r1, r3, #1
   81ed6:	d01e      	beq.n	81f16 <__swsetup_r+0x62>
   81ed8:	6963      	ldr	r3, [r4, #20]
   81eda:	2100      	movs	r1, #0
   81edc:	425b      	negs	r3, r3
   81ede:	61a3      	str	r3, [r4, #24]
   81ee0:	60a1      	str	r1, [r4, #8]
   81ee2:	b1f2      	cbz	r2, 81f22 <__swsetup_r+0x6e>
   81ee4:	2000      	movs	r0, #0
   81ee6:	bd70      	pop	{r4, r5, r6, pc}
   81ee8:	06da      	lsls	r2, r3, #27
   81eea:	d53a      	bpl.n	81f62 <__swsetup_r+0xae>
   81eec:	075b      	lsls	r3, r3, #29
   81eee:	d424      	bmi.n	81f3a <__swsetup_r+0x86>
   81ef0:	6922      	ldr	r2, [r4, #16]
   81ef2:	f045 0308 	orr.w	r3, r5, #8
   81ef6:	81a3      	strh	r3, [r4, #12]
   81ef8:	b29b      	uxth	r3, r3
   81efa:	2a00      	cmp	r2, #0
   81efc:	d1e9      	bne.n	81ed2 <__swsetup_r+0x1e>
   81efe:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81f02:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81f06:	d0e4      	beq.n	81ed2 <__swsetup_r+0x1e>
   81f08:	4630      	mov	r0, r6
   81f0a:	4621      	mov	r1, r4
   81f0c:	f000 fcce 	bl	828ac <__smakebuf_r>
   81f10:	89a3      	ldrh	r3, [r4, #12]
   81f12:	6922      	ldr	r2, [r4, #16]
   81f14:	e7dd      	b.n	81ed2 <__swsetup_r+0x1e>
   81f16:	0798      	lsls	r0, r3, #30
   81f18:	bf58      	it	pl
   81f1a:	6961      	ldrpl	r1, [r4, #20]
   81f1c:	60a1      	str	r1, [r4, #8]
   81f1e:	2a00      	cmp	r2, #0
   81f20:	d1e0      	bne.n	81ee4 <__swsetup_r+0x30>
   81f22:	89a3      	ldrh	r3, [r4, #12]
   81f24:	061a      	lsls	r2, r3, #24
   81f26:	d5dd      	bpl.n	81ee4 <__swsetup_r+0x30>
   81f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f2c:	81a3      	strh	r3, [r4, #12]
   81f2e:	f04f 30ff 	mov.w	r0, #4294967295
   81f32:	bd70      	pop	{r4, r5, r6, pc}
   81f34:	f000 f8f0 	bl	82118 <__sinit>
   81f38:	e7c5      	b.n	81ec6 <__swsetup_r+0x12>
   81f3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81f3c:	b149      	cbz	r1, 81f52 <__swsetup_r+0x9e>
   81f3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81f42:	4299      	cmp	r1, r3
   81f44:	d003      	beq.n	81f4e <__swsetup_r+0x9a>
   81f46:	4630      	mov	r0, r6
   81f48:	f000 fa2a 	bl	823a0 <_free_r>
   81f4c:	89a5      	ldrh	r5, [r4, #12]
   81f4e:	2300      	movs	r3, #0
   81f50:	6323      	str	r3, [r4, #48]	; 0x30
   81f52:	6922      	ldr	r2, [r4, #16]
   81f54:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81f58:	2100      	movs	r1, #0
   81f5a:	b2ad      	uxth	r5, r5
   81f5c:	6022      	str	r2, [r4, #0]
   81f5e:	6061      	str	r1, [r4, #4]
   81f60:	e7c7      	b.n	81ef2 <__swsetup_r+0x3e>
   81f62:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81f66:	2309      	movs	r3, #9
   81f68:	6033      	str	r3, [r6, #0]
   81f6a:	f04f 30ff 	mov.w	r0, #4294967295
   81f6e:	81a5      	strh	r5, [r4, #12]
   81f70:	bd70      	pop	{r4, r5, r6, pc}
   81f72:	bf00      	nop
   81f74:	20070568 	.word	0x20070568

00081f78 <register_fini>:
   81f78:	4b02      	ldr	r3, [pc, #8]	; (81f84 <register_fini+0xc>)
   81f7a:	b113      	cbz	r3, 81f82 <register_fini+0xa>
   81f7c:	4802      	ldr	r0, [pc, #8]	; (81f88 <register_fini+0x10>)
   81f7e:	f000 b805 	b.w	81f8c <atexit>
   81f82:	4770      	bx	lr
   81f84:	00000000 	.word	0x00000000
   81f88:	00082215 	.word	0x00082215

00081f8c <atexit>:
   81f8c:	4601      	mov	r1, r0
   81f8e:	2000      	movs	r0, #0
   81f90:	4602      	mov	r2, r0
   81f92:	4603      	mov	r3, r0
   81f94:	f001 bb9a 	b.w	836cc <__register_exitproc>

00081f98 <__sflush_r>:
   81f98:	898b      	ldrh	r3, [r1, #12]
   81f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f9e:	b29a      	uxth	r2, r3
   81fa0:	460d      	mov	r5, r1
   81fa2:	0711      	lsls	r1, r2, #28
   81fa4:	4680      	mov	r8, r0
   81fa6:	d43c      	bmi.n	82022 <__sflush_r+0x8a>
   81fa8:	686a      	ldr	r2, [r5, #4]
   81faa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81fae:	2a00      	cmp	r2, #0
   81fb0:	81ab      	strh	r3, [r5, #12]
   81fb2:	dd59      	ble.n	82068 <__sflush_r+0xd0>
   81fb4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81fb6:	2c00      	cmp	r4, #0
   81fb8:	d04b      	beq.n	82052 <__sflush_r+0xba>
   81fba:	b29b      	uxth	r3, r3
   81fbc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81fc0:	2100      	movs	r1, #0
   81fc2:	b292      	uxth	r2, r2
   81fc4:	f8d8 6000 	ldr.w	r6, [r8]
   81fc8:	f8c8 1000 	str.w	r1, [r8]
   81fcc:	2a00      	cmp	r2, #0
   81fce:	d04f      	beq.n	82070 <__sflush_r+0xd8>
   81fd0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81fd2:	075f      	lsls	r7, r3, #29
   81fd4:	d505      	bpl.n	81fe2 <__sflush_r+0x4a>
   81fd6:	6869      	ldr	r1, [r5, #4]
   81fd8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81fda:	1a52      	subs	r2, r2, r1
   81fdc:	b10b      	cbz	r3, 81fe2 <__sflush_r+0x4a>
   81fde:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81fe0:	1ad2      	subs	r2, r2, r3
   81fe2:	4640      	mov	r0, r8
   81fe4:	69e9      	ldr	r1, [r5, #28]
   81fe6:	2300      	movs	r3, #0
   81fe8:	47a0      	blx	r4
   81fea:	1c44      	adds	r4, r0, #1
   81fec:	d04a      	beq.n	82084 <__sflush_r+0xec>
   81fee:	89ab      	ldrh	r3, [r5, #12]
   81ff0:	692a      	ldr	r2, [r5, #16]
   81ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81ff6:	b29b      	uxth	r3, r3
   81ff8:	2100      	movs	r1, #0
   81ffa:	602a      	str	r2, [r5, #0]
   81ffc:	04da      	lsls	r2, r3, #19
   81ffe:	81ab      	strh	r3, [r5, #12]
   82000:	6069      	str	r1, [r5, #4]
   82002:	d44c      	bmi.n	8209e <__sflush_r+0x106>
   82004:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82006:	f8c8 6000 	str.w	r6, [r8]
   8200a:	b311      	cbz	r1, 82052 <__sflush_r+0xba>
   8200c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82010:	4299      	cmp	r1, r3
   82012:	d002      	beq.n	8201a <__sflush_r+0x82>
   82014:	4640      	mov	r0, r8
   82016:	f000 f9c3 	bl	823a0 <_free_r>
   8201a:	2000      	movs	r0, #0
   8201c:	6328      	str	r0, [r5, #48]	; 0x30
   8201e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82022:	692e      	ldr	r6, [r5, #16]
   82024:	b1ae      	cbz	r6, 82052 <__sflush_r+0xba>
   82026:	0791      	lsls	r1, r2, #30
   82028:	682c      	ldr	r4, [r5, #0]
   8202a:	bf0c      	ite	eq
   8202c:	696b      	ldreq	r3, [r5, #20]
   8202e:	2300      	movne	r3, #0
   82030:	602e      	str	r6, [r5, #0]
   82032:	1ba4      	subs	r4, r4, r6
   82034:	60ab      	str	r3, [r5, #8]
   82036:	e00a      	b.n	8204e <__sflush_r+0xb6>
   82038:	4632      	mov	r2, r6
   8203a:	4623      	mov	r3, r4
   8203c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8203e:	4640      	mov	r0, r8
   82040:	69e9      	ldr	r1, [r5, #28]
   82042:	47b8      	blx	r7
   82044:	2800      	cmp	r0, #0
   82046:	ebc0 0404 	rsb	r4, r0, r4
   8204a:	4406      	add	r6, r0
   8204c:	dd04      	ble.n	82058 <__sflush_r+0xc0>
   8204e:	2c00      	cmp	r4, #0
   82050:	dcf2      	bgt.n	82038 <__sflush_r+0xa0>
   82052:	2000      	movs	r0, #0
   82054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82058:	89ab      	ldrh	r3, [r5, #12]
   8205a:	f04f 30ff 	mov.w	r0, #4294967295
   8205e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82062:	81ab      	strh	r3, [r5, #12]
   82064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82068:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8206a:	2a00      	cmp	r2, #0
   8206c:	dca2      	bgt.n	81fb4 <__sflush_r+0x1c>
   8206e:	e7f0      	b.n	82052 <__sflush_r+0xba>
   82070:	2301      	movs	r3, #1
   82072:	4640      	mov	r0, r8
   82074:	69e9      	ldr	r1, [r5, #28]
   82076:	47a0      	blx	r4
   82078:	1c43      	adds	r3, r0, #1
   8207a:	4602      	mov	r2, r0
   8207c:	d01e      	beq.n	820bc <__sflush_r+0x124>
   8207e:	89ab      	ldrh	r3, [r5, #12]
   82080:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82082:	e7a6      	b.n	81fd2 <__sflush_r+0x3a>
   82084:	f8d8 3000 	ldr.w	r3, [r8]
   82088:	b95b      	cbnz	r3, 820a2 <__sflush_r+0x10a>
   8208a:	89aa      	ldrh	r2, [r5, #12]
   8208c:	6929      	ldr	r1, [r5, #16]
   8208e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82092:	b292      	uxth	r2, r2
   82094:	606b      	str	r3, [r5, #4]
   82096:	04d3      	lsls	r3, r2, #19
   82098:	81aa      	strh	r2, [r5, #12]
   8209a:	6029      	str	r1, [r5, #0]
   8209c:	d5b2      	bpl.n	82004 <__sflush_r+0x6c>
   8209e:	6528      	str	r0, [r5, #80]	; 0x50
   820a0:	e7b0      	b.n	82004 <__sflush_r+0x6c>
   820a2:	2b1d      	cmp	r3, #29
   820a4:	d001      	beq.n	820aa <__sflush_r+0x112>
   820a6:	2b16      	cmp	r3, #22
   820a8:	d113      	bne.n	820d2 <__sflush_r+0x13a>
   820aa:	89a9      	ldrh	r1, [r5, #12]
   820ac:	692b      	ldr	r3, [r5, #16]
   820ae:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   820b2:	2200      	movs	r2, #0
   820b4:	81a9      	strh	r1, [r5, #12]
   820b6:	602b      	str	r3, [r5, #0]
   820b8:	606a      	str	r2, [r5, #4]
   820ba:	e7a3      	b.n	82004 <__sflush_r+0x6c>
   820bc:	f8d8 3000 	ldr.w	r3, [r8]
   820c0:	2b00      	cmp	r3, #0
   820c2:	d0dc      	beq.n	8207e <__sflush_r+0xe6>
   820c4:	2b1d      	cmp	r3, #29
   820c6:	d001      	beq.n	820cc <__sflush_r+0x134>
   820c8:	2b16      	cmp	r3, #22
   820ca:	d1c5      	bne.n	82058 <__sflush_r+0xc0>
   820cc:	f8c8 6000 	str.w	r6, [r8]
   820d0:	e7bf      	b.n	82052 <__sflush_r+0xba>
   820d2:	89ab      	ldrh	r3, [r5, #12]
   820d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   820d8:	81ab      	strh	r3, [r5, #12]
   820da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820de:	bf00      	nop

000820e0 <_fflush_r>:
   820e0:	b510      	push	{r4, lr}
   820e2:	4604      	mov	r4, r0
   820e4:	b082      	sub	sp, #8
   820e6:	b108      	cbz	r0, 820ec <_fflush_r+0xc>
   820e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   820ea:	b153      	cbz	r3, 82102 <_fflush_r+0x22>
   820ec:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   820f0:	b908      	cbnz	r0, 820f6 <_fflush_r+0x16>
   820f2:	b002      	add	sp, #8
   820f4:	bd10      	pop	{r4, pc}
   820f6:	4620      	mov	r0, r4
   820f8:	b002      	add	sp, #8
   820fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   820fe:	f7ff bf4b 	b.w	81f98 <__sflush_r>
   82102:	9101      	str	r1, [sp, #4]
   82104:	f000 f808 	bl	82118 <__sinit>
   82108:	9901      	ldr	r1, [sp, #4]
   8210a:	e7ef      	b.n	820ec <_fflush_r+0xc>

0008210c <_cleanup_r>:
   8210c:	4901      	ldr	r1, [pc, #4]	; (82114 <_cleanup_r+0x8>)
   8210e:	f000 bb9f 	b.w	82850 <_fwalk>
   82112:	bf00      	nop
   82114:	00083819 	.word	0x00083819

00082118 <__sinit>:
   82118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8211c:	6b84      	ldr	r4, [r0, #56]	; 0x38
   8211e:	b083      	sub	sp, #12
   82120:	4607      	mov	r7, r0
   82122:	2c00      	cmp	r4, #0
   82124:	d165      	bne.n	821f2 <__sinit+0xda>
   82126:	687d      	ldr	r5, [r7, #4]
   82128:	4833      	ldr	r0, [pc, #204]	; (821f8 <__sinit+0xe0>)
   8212a:	2304      	movs	r3, #4
   8212c:	2103      	movs	r1, #3
   8212e:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82132:	63f8      	str	r0, [r7, #60]	; 0x3c
   82134:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82138:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8213c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82140:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82144:	81ab      	strh	r3, [r5, #12]
   82146:	602c      	str	r4, [r5, #0]
   82148:	606c      	str	r4, [r5, #4]
   8214a:	60ac      	str	r4, [r5, #8]
   8214c:	666c      	str	r4, [r5, #100]	; 0x64
   8214e:	81ec      	strh	r4, [r5, #14]
   82150:	612c      	str	r4, [r5, #16]
   82152:	616c      	str	r4, [r5, #20]
   82154:	61ac      	str	r4, [r5, #24]
   82156:	4621      	mov	r1, r4
   82158:	2208      	movs	r2, #8
   8215a:	f7fe ff05 	bl	80f68 <memset>
   8215e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 821fc <__sinit+0xe4>
   82162:	68be      	ldr	r6, [r7, #8]
   82164:	f8df a098 	ldr.w	sl, [pc, #152]	; 82200 <__sinit+0xe8>
   82168:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82204 <__sinit+0xec>
   8216c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82208 <__sinit+0xf0>
   82170:	2301      	movs	r3, #1
   82172:	2209      	movs	r2, #9
   82174:	61ed      	str	r5, [r5, #28]
   82176:	f8c5 b020 	str.w	fp, [r5, #32]
   8217a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8217e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82182:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82186:	4621      	mov	r1, r4
   82188:	81f3      	strh	r3, [r6, #14]
   8218a:	81b2      	strh	r2, [r6, #12]
   8218c:	6034      	str	r4, [r6, #0]
   8218e:	6074      	str	r4, [r6, #4]
   82190:	60b4      	str	r4, [r6, #8]
   82192:	6674      	str	r4, [r6, #100]	; 0x64
   82194:	6134      	str	r4, [r6, #16]
   82196:	6174      	str	r4, [r6, #20]
   82198:	61b4      	str	r4, [r6, #24]
   8219a:	2208      	movs	r2, #8
   8219c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   821a0:	9301      	str	r3, [sp, #4]
   821a2:	f7fe fee1 	bl	80f68 <memset>
   821a6:	68fd      	ldr	r5, [r7, #12]
   821a8:	2012      	movs	r0, #18
   821aa:	2202      	movs	r2, #2
   821ac:	61f6      	str	r6, [r6, #28]
   821ae:	f8c6 b020 	str.w	fp, [r6, #32]
   821b2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   821b6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   821ba:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   821be:	4621      	mov	r1, r4
   821c0:	81a8      	strh	r0, [r5, #12]
   821c2:	81ea      	strh	r2, [r5, #14]
   821c4:	602c      	str	r4, [r5, #0]
   821c6:	606c      	str	r4, [r5, #4]
   821c8:	60ac      	str	r4, [r5, #8]
   821ca:	666c      	str	r4, [r5, #100]	; 0x64
   821cc:	612c      	str	r4, [r5, #16]
   821ce:	616c      	str	r4, [r5, #20]
   821d0:	61ac      	str	r4, [r5, #24]
   821d2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   821d6:	2208      	movs	r2, #8
   821d8:	f7fe fec6 	bl	80f68 <memset>
   821dc:	9b01      	ldr	r3, [sp, #4]
   821de:	61ed      	str	r5, [r5, #28]
   821e0:	f8c5 b020 	str.w	fp, [r5, #32]
   821e4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   821e8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   821ec:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   821f0:	63bb      	str	r3, [r7, #56]	; 0x38
   821f2:	b003      	add	sp, #12
   821f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   821f8:	0008210d 	.word	0x0008210d
   821fc:	0008350d 	.word	0x0008350d
   82200:	00083531 	.word	0x00083531
   82204:	00083569 	.word	0x00083569
   82208:	00083589 	.word	0x00083589

0008220c <__sfp_lock_acquire>:
   8220c:	4770      	bx	lr
   8220e:	bf00      	nop

00082210 <__sfp_lock_release>:
   82210:	4770      	bx	lr
   82212:	bf00      	nop

00082214 <__libc_fini_array>:
   82214:	b538      	push	{r3, r4, r5, lr}
   82216:	4d09      	ldr	r5, [pc, #36]	; (8223c <__libc_fini_array+0x28>)
   82218:	4c09      	ldr	r4, [pc, #36]	; (82240 <__libc_fini_array+0x2c>)
   8221a:	1b64      	subs	r4, r4, r5
   8221c:	10a4      	asrs	r4, r4, #2
   8221e:	bf18      	it	ne
   82220:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82224:	d005      	beq.n	82232 <__libc_fini_array+0x1e>
   82226:	3c01      	subs	r4, #1
   82228:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8222c:	4798      	blx	r3
   8222e:	2c00      	cmp	r4, #0
   82230:	d1f9      	bne.n	82226 <__libc_fini_array+0x12>
   82232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82236:	f001 be75 	b.w	83f24 <_fini>
   8223a:	bf00      	nop
   8223c:	00083f30 	.word	0x00083f30
   82240:	00083f34 	.word	0x00083f34

00082244 <_fputwc_r>:
   82244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82248:	8993      	ldrh	r3, [r2, #12]
   8224a:	460f      	mov	r7, r1
   8224c:	0499      	lsls	r1, r3, #18
   8224e:	b082      	sub	sp, #8
   82250:	4614      	mov	r4, r2
   82252:	4680      	mov	r8, r0
   82254:	d406      	bmi.n	82264 <_fputwc_r+0x20>
   82256:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82258:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8225c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82260:	81a3      	strh	r3, [r4, #12]
   82262:	6662      	str	r2, [r4, #100]	; 0x64
   82264:	f000 fb1c 	bl	828a0 <__locale_mb_cur_max>
   82268:	2801      	cmp	r0, #1
   8226a:	d03e      	beq.n	822ea <_fputwc_r+0xa6>
   8226c:	463a      	mov	r2, r7
   8226e:	4640      	mov	r0, r8
   82270:	a901      	add	r1, sp, #4
   82272:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82276:	f001 f9df 	bl	83638 <_wcrtomb_r>
   8227a:	1c42      	adds	r2, r0, #1
   8227c:	4606      	mov	r6, r0
   8227e:	d02d      	beq.n	822dc <_fputwc_r+0x98>
   82280:	2800      	cmp	r0, #0
   82282:	d03a      	beq.n	822fa <_fputwc_r+0xb6>
   82284:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82288:	2500      	movs	r5, #0
   8228a:	e009      	b.n	822a0 <_fputwc_r+0x5c>
   8228c:	6823      	ldr	r3, [r4, #0]
   8228e:	7019      	strb	r1, [r3, #0]
   82290:	6823      	ldr	r3, [r4, #0]
   82292:	3301      	adds	r3, #1
   82294:	6023      	str	r3, [r4, #0]
   82296:	3501      	adds	r5, #1
   82298:	42b5      	cmp	r5, r6
   8229a:	d22e      	bcs.n	822fa <_fputwc_r+0xb6>
   8229c:	ab01      	add	r3, sp, #4
   8229e:	5ce9      	ldrb	r1, [r5, r3]
   822a0:	68a3      	ldr	r3, [r4, #8]
   822a2:	3b01      	subs	r3, #1
   822a4:	2b00      	cmp	r3, #0
   822a6:	60a3      	str	r3, [r4, #8]
   822a8:	daf0      	bge.n	8228c <_fputwc_r+0x48>
   822aa:	69a2      	ldr	r2, [r4, #24]
   822ac:	4293      	cmp	r3, r2
   822ae:	db06      	blt.n	822be <_fputwc_r+0x7a>
   822b0:	6823      	ldr	r3, [r4, #0]
   822b2:	7019      	strb	r1, [r3, #0]
   822b4:	6823      	ldr	r3, [r4, #0]
   822b6:	7819      	ldrb	r1, [r3, #0]
   822b8:	3301      	adds	r3, #1
   822ba:	290a      	cmp	r1, #10
   822bc:	d1ea      	bne.n	82294 <_fputwc_r+0x50>
   822be:	4640      	mov	r0, r8
   822c0:	4622      	mov	r2, r4
   822c2:	f001 f965 	bl	83590 <__swbuf_r>
   822c6:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   822ca:	4258      	negs	r0, r3
   822cc:	4158      	adcs	r0, r3
   822ce:	2800      	cmp	r0, #0
   822d0:	d0e1      	beq.n	82296 <_fputwc_r+0x52>
   822d2:	f04f 30ff 	mov.w	r0, #4294967295
   822d6:	b002      	add	sp, #8
   822d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822dc:	89a3      	ldrh	r3, [r4, #12]
   822de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   822e2:	81a3      	strh	r3, [r4, #12]
   822e4:	b002      	add	sp, #8
   822e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822ea:	1e7b      	subs	r3, r7, #1
   822ec:	2bfe      	cmp	r3, #254	; 0xfe
   822ee:	d8bd      	bhi.n	8226c <_fputwc_r+0x28>
   822f0:	b2f9      	uxtb	r1, r7
   822f2:	4606      	mov	r6, r0
   822f4:	f88d 1004 	strb.w	r1, [sp, #4]
   822f8:	e7c6      	b.n	82288 <_fputwc_r+0x44>
   822fa:	4638      	mov	r0, r7
   822fc:	b002      	add	sp, #8
   822fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82302:	bf00      	nop

00082304 <_malloc_trim_r>:
   82304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82306:	4d23      	ldr	r5, [pc, #140]	; (82394 <_malloc_trim_r+0x90>)
   82308:	460f      	mov	r7, r1
   8230a:	4604      	mov	r4, r0
   8230c:	f000 ff08 	bl	83120 <__malloc_lock>
   82310:	68ab      	ldr	r3, [r5, #8]
   82312:	685e      	ldr	r6, [r3, #4]
   82314:	f026 0603 	bic.w	r6, r6, #3
   82318:	1bf1      	subs	r1, r6, r7
   8231a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8231e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82322:	f021 010f 	bic.w	r1, r1, #15
   82326:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8232a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8232e:	db07      	blt.n	82340 <_malloc_trim_r+0x3c>
   82330:	4620      	mov	r0, r4
   82332:	2100      	movs	r1, #0
   82334:	f001 f8d8 	bl	834e8 <_sbrk_r>
   82338:	68ab      	ldr	r3, [r5, #8]
   8233a:	4433      	add	r3, r6
   8233c:	4298      	cmp	r0, r3
   8233e:	d004      	beq.n	8234a <_malloc_trim_r+0x46>
   82340:	4620      	mov	r0, r4
   82342:	f000 feef 	bl	83124 <__malloc_unlock>
   82346:	2000      	movs	r0, #0
   82348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8234a:	4620      	mov	r0, r4
   8234c:	4279      	negs	r1, r7
   8234e:	f001 f8cb 	bl	834e8 <_sbrk_r>
   82352:	3001      	adds	r0, #1
   82354:	d00d      	beq.n	82372 <_malloc_trim_r+0x6e>
   82356:	4b10      	ldr	r3, [pc, #64]	; (82398 <_malloc_trim_r+0x94>)
   82358:	68aa      	ldr	r2, [r5, #8]
   8235a:	6819      	ldr	r1, [r3, #0]
   8235c:	1bf6      	subs	r6, r6, r7
   8235e:	f046 0601 	orr.w	r6, r6, #1
   82362:	4620      	mov	r0, r4
   82364:	1bc9      	subs	r1, r1, r7
   82366:	6056      	str	r6, [r2, #4]
   82368:	6019      	str	r1, [r3, #0]
   8236a:	f000 fedb 	bl	83124 <__malloc_unlock>
   8236e:	2001      	movs	r0, #1
   82370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82372:	4620      	mov	r0, r4
   82374:	2100      	movs	r1, #0
   82376:	f001 f8b7 	bl	834e8 <_sbrk_r>
   8237a:	68ab      	ldr	r3, [r5, #8]
   8237c:	1ac2      	subs	r2, r0, r3
   8237e:	2a0f      	cmp	r2, #15
   82380:	ddde      	ble.n	82340 <_malloc_trim_r+0x3c>
   82382:	4d06      	ldr	r5, [pc, #24]	; (8239c <_malloc_trim_r+0x98>)
   82384:	4904      	ldr	r1, [pc, #16]	; (82398 <_malloc_trim_r+0x94>)
   82386:	682d      	ldr	r5, [r5, #0]
   82388:	f042 0201 	orr.w	r2, r2, #1
   8238c:	1b40      	subs	r0, r0, r5
   8238e:	605a      	str	r2, [r3, #4]
   82390:	6008      	str	r0, [r1, #0]
   82392:	e7d5      	b.n	82340 <_malloc_trim_r+0x3c>
   82394:	20070590 	.word	0x20070590
   82398:	20070ae8 	.word	0x20070ae8
   8239c:	2007099c 	.word	0x2007099c

000823a0 <_free_r>:
   823a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823a4:	460d      	mov	r5, r1
   823a6:	4606      	mov	r6, r0
   823a8:	2900      	cmp	r1, #0
   823aa:	d055      	beq.n	82458 <_free_r+0xb8>
   823ac:	f000 feb8 	bl	83120 <__malloc_lock>
   823b0:	f855 1c04 	ldr.w	r1, [r5, #-4]
   823b4:	f8df c170 	ldr.w	ip, [pc, #368]	; 82528 <_free_r+0x188>
   823b8:	f1a5 0408 	sub.w	r4, r5, #8
   823bc:	f021 0301 	bic.w	r3, r1, #1
   823c0:	18e2      	adds	r2, r4, r3
   823c2:	f8dc 0008 	ldr.w	r0, [ip, #8]
   823c6:	6857      	ldr	r7, [r2, #4]
   823c8:	4290      	cmp	r0, r2
   823ca:	f027 0703 	bic.w	r7, r7, #3
   823ce:	d068      	beq.n	824a2 <_free_r+0x102>
   823d0:	f011 0101 	ands.w	r1, r1, #1
   823d4:	6057      	str	r7, [r2, #4]
   823d6:	d032      	beq.n	8243e <_free_r+0x9e>
   823d8:	2100      	movs	r1, #0
   823da:	19d0      	adds	r0, r2, r7
   823dc:	6840      	ldr	r0, [r0, #4]
   823de:	07c0      	lsls	r0, r0, #31
   823e0:	d406      	bmi.n	823f0 <_free_r+0x50>
   823e2:	443b      	add	r3, r7
   823e4:	6890      	ldr	r0, [r2, #8]
   823e6:	2900      	cmp	r1, #0
   823e8:	d04d      	beq.n	82486 <_free_r+0xe6>
   823ea:	68d2      	ldr	r2, [r2, #12]
   823ec:	60c2      	str	r2, [r0, #12]
   823ee:	6090      	str	r0, [r2, #8]
   823f0:	f043 0201 	orr.w	r2, r3, #1
   823f4:	6062      	str	r2, [r4, #4]
   823f6:	50e3      	str	r3, [r4, r3]
   823f8:	b9e1      	cbnz	r1, 82434 <_free_r+0x94>
   823fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   823fe:	d32d      	bcc.n	8245c <_free_r+0xbc>
   82400:	0a5a      	lsrs	r2, r3, #9
   82402:	2a04      	cmp	r2, #4
   82404:	d869      	bhi.n	824da <_free_r+0x13a>
   82406:	0998      	lsrs	r0, r3, #6
   82408:	3038      	adds	r0, #56	; 0x38
   8240a:	0041      	lsls	r1, r0, #1
   8240c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82410:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82414:	4944      	ldr	r1, [pc, #272]	; (82528 <_free_r+0x188>)
   82416:	4562      	cmp	r2, ip
   82418:	d065      	beq.n	824e6 <_free_r+0x146>
   8241a:	6851      	ldr	r1, [r2, #4]
   8241c:	f021 0103 	bic.w	r1, r1, #3
   82420:	428b      	cmp	r3, r1
   82422:	d202      	bcs.n	8242a <_free_r+0x8a>
   82424:	6892      	ldr	r2, [r2, #8]
   82426:	4594      	cmp	ip, r2
   82428:	d1f7      	bne.n	8241a <_free_r+0x7a>
   8242a:	68d3      	ldr	r3, [r2, #12]
   8242c:	60e3      	str	r3, [r4, #12]
   8242e:	60a2      	str	r2, [r4, #8]
   82430:	609c      	str	r4, [r3, #8]
   82432:	60d4      	str	r4, [r2, #12]
   82434:	4630      	mov	r0, r6
   82436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8243a:	f000 be73 	b.w	83124 <__malloc_unlock>
   8243e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82442:	f10c 0808 	add.w	r8, ip, #8
   82446:	1b64      	subs	r4, r4, r5
   82448:	68a0      	ldr	r0, [r4, #8]
   8244a:	442b      	add	r3, r5
   8244c:	4540      	cmp	r0, r8
   8244e:	d042      	beq.n	824d6 <_free_r+0x136>
   82450:	68e5      	ldr	r5, [r4, #12]
   82452:	60c5      	str	r5, [r0, #12]
   82454:	60a8      	str	r0, [r5, #8]
   82456:	e7c0      	b.n	823da <_free_r+0x3a>
   82458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8245c:	08db      	lsrs	r3, r3, #3
   8245e:	109a      	asrs	r2, r3, #2
   82460:	2001      	movs	r0, #1
   82462:	4090      	lsls	r0, r2
   82464:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82468:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   8246c:	689a      	ldr	r2, [r3, #8]
   8246e:	4301      	orrs	r1, r0
   82470:	60a2      	str	r2, [r4, #8]
   82472:	60e3      	str	r3, [r4, #12]
   82474:	f8cc 1004 	str.w	r1, [ip, #4]
   82478:	4630      	mov	r0, r6
   8247a:	609c      	str	r4, [r3, #8]
   8247c:	60d4      	str	r4, [r2, #12]
   8247e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82482:	f000 be4f 	b.w	83124 <__malloc_unlock>
   82486:	4d29      	ldr	r5, [pc, #164]	; (8252c <_free_r+0x18c>)
   82488:	42a8      	cmp	r0, r5
   8248a:	d1ae      	bne.n	823ea <_free_r+0x4a>
   8248c:	f043 0201 	orr.w	r2, r3, #1
   82490:	f8cc 4014 	str.w	r4, [ip, #20]
   82494:	f8cc 4010 	str.w	r4, [ip, #16]
   82498:	60e0      	str	r0, [r4, #12]
   8249a:	60a0      	str	r0, [r4, #8]
   8249c:	6062      	str	r2, [r4, #4]
   8249e:	50e3      	str	r3, [r4, r3]
   824a0:	e7c8      	b.n	82434 <_free_r+0x94>
   824a2:	441f      	add	r7, r3
   824a4:	07cb      	lsls	r3, r1, #31
   824a6:	d407      	bmi.n	824b8 <_free_r+0x118>
   824a8:	f855 1c08 	ldr.w	r1, [r5, #-8]
   824ac:	1a64      	subs	r4, r4, r1
   824ae:	68e3      	ldr	r3, [r4, #12]
   824b0:	68a2      	ldr	r2, [r4, #8]
   824b2:	440f      	add	r7, r1
   824b4:	60d3      	str	r3, [r2, #12]
   824b6:	609a      	str	r2, [r3, #8]
   824b8:	4b1d      	ldr	r3, [pc, #116]	; (82530 <_free_r+0x190>)
   824ba:	f047 0201 	orr.w	r2, r7, #1
   824be:	681b      	ldr	r3, [r3, #0]
   824c0:	6062      	str	r2, [r4, #4]
   824c2:	429f      	cmp	r7, r3
   824c4:	f8cc 4008 	str.w	r4, [ip, #8]
   824c8:	d3b4      	bcc.n	82434 <_free_r+0x94>
   824ca:	4b1a      	ldr	r3, [pc, #104]	; (82534 <_free_r+0x194>)
   824cc:	4630      	mov	r0, r6
   824ce:	6819      	ldr	r1, [r3, #0]
   824d0:	f7ff ff18 	bl	82304 <_malloc_trim_r>
   824d4:	e7ae      	b.n	82434 <_free_r+0x94>
   824d6:	2101      	movs	r1, #1
   824d8:	e77f      	b.n	823da <_free_r+0x3a>
   824da:	2a14      	cmp	r2, #20
   824dc:	d80b      	bhi.n	824f6 <_free_r+0x156>
   824de:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   824e2:	0041      	lsls	r1, r0, #1
   824e4:	e792      	b.n	8240c <_free_r+0x6c>
   824e6:	1080      	asrs	r0, r0, #2
   824e8:	2501      	movs	r5, #1
   824ea:	4085      	lsls	r5, r0
   824ec:	6848      	ldr	r0, [r1, #4]
   824ee:	4613      	mov	r3, r2
   824f0:	4328      	orrs	r0, r5
   824f2:	6048      	str	r0, [r1, #4]
   824f4:	e79a      	b.n	8242c <_free_r+0x8c>
   824f6:	2a54      	cmp	r2, #84	; 0x54
   824f8:	d803      	bhi.n	82502 <_free_r+0x162>
   824fa:	0b18      	lsrs	r0, r3, #12
   824fc:	306e      	adds	r0, #110	; 0x6e
   824fe:	0041      	lsls	r1, r0, #1
   82500:	e784      	b.n	8240c <_free_r+0x6c>
   82502:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82506:	d803      	bhi.n	82510 <_free_r+0x170>
   82508:	0bd8      	lsrs	r0, r3, #15
   8250a:	3077      	adds	r0, #119	; 0x77
   8250c:	0041      	lsls	r1, r0, #1
   8250e:	e77d      	b.n	8240c <_free_r+0x6c>
   82510:	f240 5154 	movw	r1, #1364	; 0x554
   82514:	428a      	cmp	r2, r1
   82516:	d803      	bhi.n	82520 <_free_r+0x180>
   82518:	0c98      	lsrs	r0, r3, #18
   8251a:	307c      	adds	r0, #124	; 0x7c
   8251c:	0041      	lsls	r1, r0, #1
   8251e:	e775      	b.n	8240c <_free_r+0x6c>
   82520:	21fc      	movs	r1, #252	; 0xfc
   82522:	207e      	movs	r0, #126	; 0x7e
   82524:	e772      	b.n	8240c <_free_r+0x6c>
   82526:	bf00      	nop
   82528:	20070590 	.word	0x20070590
   8252c:	20070598 	.word	0x20070598
   82530:	20070998 	.word	0x20070998
   82534:	20070ae4 	.word	0x20070ae4

00082538 <__sfvwrite_r>:
   82538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8253c:	6893      	ldr	r3, [r2, #8]
   8253e:	b083      	sub	sp, #12
   82540:	4616      	mov	r6, r2
   82542:	4681      	mov	r9, r0
   82544:	460c      	mov	r4, r1
   82546:	b32b      	cbz	r3, 82594 <__sfvwrite_r+0x5c>
   82548:	898b      	ldrh	r3, [r1, #12]
   8254a:	0719      	lsls	r1, r3, #28
   8254c:	d526      	bpl.n	8259c <__sfvwrite_r+0x64>
   8254e:	6922      	ldr	r2, [r4, #16]
   82550:	b322      	cbz	r2, 8259c <__sfvwrite_r+0x64>
   82552:	f003 0202 	and.w	r2, r3, #2
   82556:	b292      	uxth	r2, r2
   82558:	6835      	ldr	r5, [r6, #0]
   8255a:	2a00      	cmp	r2, #0
   8255c:	d02c      	beq.n	825b8 <__sfvwrite_r+0x80>
   8255e:	f04f 0a00 	mov.w	sl, #0
   82562:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8284c <__sfvwrite_r+0x314>
   82566:	46d0      	mov	r8, sl
   82568:	45d8      	cmp	r8, fp
   8256a:	bf34      	ite	cc
   8256c:	4643      	movcc	r3, r8
   8256e:	465b      	movcs	r3, fp
   82570:	4652      	mov	r2, sl
   82572:	4648      	mov	r0, r9
   82574:	f1b8 0f00 	cmp.w	r8, #0
   82578:	d04f      	beq.n	8261a <__sfvwrite_r+0xe2>
   8257a:	69e1      	ldr	r1, [r4, #28]
   8257c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8257e:	47b8      	blx	r7
   82580:	2800      	cmp	r0, #0
   82582:	dd56      	ble.n	82632 <__sfvwrite_r+0xfa>
   82584:	68b3      	ldr	r3, [r6, #8]
   82586:	4482      	add	sl, r0
   82588:	1a1b      	subs	r3, r3, r0
   8258a:	ebc0 0808 	rsb	r8, r0, r8
   8258e:	60b3      	str	r3, [r6, #8]
   82590:	2b00      	cmp	r3, #0
   82592:	d1e9      	bne.n	82568 <__sfvwrite_r+0x30>
   82594:	2000      	movs	r0, #0
   82596:	b003      	add	sp, #12
   82598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8259c:	4648      	mov	r0, r9
   8259e:	4621      	mov	r1, r4
   825a0:	f7ff fc88 	bl	81eb4 <__swsetup_r>
   825a4:	2800      	cmp	r0, #0
   825a6:	f040 8148 	bne.w	8283a <__sfvwrite_r+0x302>
   825aa:	89a3      	ldrh	r3, [r4, #12]
   825ac:	6835      	ldr	r5, [r6, #0]
   825ae:	f003 0202 	and.w	r2, r3, #2
   825b2:	b292      	uxth	r2, r2
   825b4:	2a00      	cmp	r2, #0
   825b6:	d1d2      	bne.n	8255e <__sfvwrite_r+0x26>
   825b8:	f013 0a01 	ands.w	sl, r3, #1
   825bc:	d142      	bne.n	82644 <__sfvwrite_r+0x10c>
   825be:	46d0      	mov	r8, sl
   825c0:	f1b8 0f00 	cmp.w	r8, #0
   825c4:	d023      	beq.n	8260e <__sfvwrite_r+0xd6>
   825c6:	059a      	lsls	r2, r3, #22
   825c8:	68a7      	ldr	r7, [r4, #8]
   825ca:	d576      	bpl.n	826ba <__sfvwrite_r+0x182>
   825cc:	45b8      	cmp	r8, r7
   825ce:	f0c0 80a4 	bcc.w	8271a <__sfvwrite_r+0x1e2>
   825d2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   825d6:	f040 80b2 	bne.w	8273e <__sfvwrite_r+0x206>
   825da:	6820      	ldr	r0, [r4, #0]
   825dc:	46bb      	mov	fp, r7
   825de:	4651      	mov	r1, sl
   825e0:	465a      	mov	r2, fp
   825e2:	f000 fd37 	bl	83054 <memmove>
   825e6:	68a2      	ldr	r2, [r4, #8]
   825e8:	6821      	ldr	r1, [r4, #0]
   825ea:	1bd2      	subs	r2, r2, r7
   825ec:	eb01 030b 	add.w	r3, r1, fp
   825f0:	60a2      	str	r2, [r4, #8]
   825f2:	6023      	str	r3, [r4, #0]
   825f4:	4642      	mov	r2, r8
   825f6:	68b3      	ldr	r3, [r6, #8]
   825f8:	4492      	add	sl, r2
   825fa:	1a9b      	subs	r3, r3, r2
   825fc:	ebc2 0808 	rsb	r8, r2, r8
   82600:	60b3      	str	r3, [r6, #8]
   82602:	2b00      	cmp	r3, #0
   82604:	d0c6      	beq.n	82594 <__sfvwrite_r+0x5c>
   82606:	89a3      	ldrh	r3, [r4, #12]
   82608:	f1b8 0f00 	cmp.w	r8, #0
   8260c:	d1db      	bne.n	825c6 <__sfvwrite_r+0x8e>
   8260e:	f8d5 a000 	ldr.w	sl, [r5]
   82612:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82616:	3508      	adds	r5, #8
   82618:	e7d2      	b.n	825c0 <__sfvwrite_r+0x88>
   8261a:	f8d5 a000 	ldr.w	sl, [r5]
   8261e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82622:	3508      	adds	r5, #8
   82624:	e7a0      	b.n	82568 <__sfvwrite_r+0x30>
   82626:	4648      	mov	r0, r9
   82628:	4621      	mov	r1, r4
   8262a:	f7ff fd59 	bl	820e0 <_fflush_r>
   8262e:	2800      	cmp	r0, #0
   82630:	d059      	beq.n	826e6 <__sfvwrite_r+0x1ae>
   82632:	89a3      	ldrh	r3, [r4, #12]
   82634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82638:	f04f 30ff 	mov.w	r0, #4294967295
   8263c:	81a3      	strh	r3, [r4, #12]
   8263e:	b003      	add	sp, #12
   82640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82644:	4692      	mov	sl, r2
   82646:	9201      	str	r2, [sp, #4]
   82648:	4693      	mov	fp, r2
   8264a:	4690      	mov	r8, r2
   8264c:	f1b8 0f00 	cmp.w	r8, #0
   82650:	d02b      	beq.n	826aa <__sfvwrite_r+0x172>
   82652:	9f01      	ldr	r7, [sp, #4]
   82654:	2f00      	cmp	r7, #0
   82656:	d064      	beq.n	82722 <__sfvwrite_r+0x1ea>
   82658:	6820      	ldr	r0, [r4, #0]
   8265a:	6921      	ldr	r1, [r4, #16]
   8265c:	45c2      	cmp	sl, r8
   8265e:	bf34      	ite	cc
   82660:	4653      	movcc	r3, sl
   82662:	4643      	movcs	r3, r8
   82664:	4288      	cmp	r0, r1
   82666:	461f      	mov	r7, r3
   82668:	f8d4 c008 	ldr.w	ip, [r4, #8]
   8266c:	6962      	ldr	r2, [r4, #20]
   8266e:	d903      	bls.n	82678 <__sfvwrite_r+0x140>
   82670:	4494      	add	ip, r2
   82672:	4563      	cmp	r3, ip
   82674:	f300 80ae 	bgt.w	827d4 <__sfvwrite_r+0x29c>
   82678:	4293      	cmp	r3, r2
   8267a:	db36      	blt.n	826ea <__sfvwrite_r+0x1b2>
   8267c:	4613      	mov	r3, r2
   8267e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82680:	4648      	mov	r0, r9
   82682:	69e1      	ldr	r1, [r4, #28]
   82684:	465a      	mov	r2, fp
   82686:	47b8      	blx	r7
   82688:	1e07      	subs	r7, r0, #0
   8268a:	ddd2      	ble.n	82632 <__sfvwrite_r+0xfa>
   8268c:	ebba 0a07 	subs.w	sl, sl, r7
   82690:	d03a      	beq.n	82708 <__sfvwrite_r+0x1d0>
   82692:	68b3      	ldr	r3, [r6, #8]
   82694:	44bb      	add	fp, r7
   82696:	1bdb      	subs	r3, r3, r7
   82698:	ebc7 0808 	rsb	r8, r7, r8
   8269c:	60b3      	str	r3, [r6, #8]
   8269e:	2b00      	cmp	r3, #0
   826a0:	f43f af78 	beq.w	82594 <__sfvwrite_r+0x5c>
   826a4:	f1b8 0f00 	cmp.w	r8, #0
   826a8:	d1d3      	bne.n	82652 <__sfvwrite_r+0x11a>
   826aa:	2700      	movs	r7, #0
   826ac:	f8d5 b000 	ldr.w	fp, [r5]
   826b0:	f8d5 8004 	ldr.w	r8, [r5, #4]
   826b4:	9701      	str	r7, [sp, #4]
   826b6:	3508      	adds	r5, #8
   826b8:	e7c8      	b.n	8264c <__sfvwrite_r+0x114>
   826ba:	6820      	ldr	r0, [r4, #0]
   826bc:	6923      	ldr	r3, [r4, #16]
   826be:	4298      	cmp	r0, r3
   826c0:	d802      	bhi.n	826c8 <__sfvwrite_r+0x190>
   826c2:	6963      	ldr	r3, [r4, #20]
   826c4:	4598      	cmp	r8, r3
   826c6:	d272      	bcs.n	827ae <__sfvwrite_r+0x276>
   826c8:	45b8      	cmp	r8, r7
   826ca:	bf38      	it	cc
   826cc:	4647      	movcc	r7, r8
   826ce:	463a      	mov	r2, r7
   826d0:	4651      	mov	r1, sl
   826d2:	f000 fcbf 	bl	83054 <memmove>
   826d6:	68a3      	ldr	r3, [r4, #8]
   826d8:	6822      	ldr	r2, [r4, #0]
   826da:	1bdb      	subs	r3, r3, r7
   826dc:	443a      	add	r2, r7
   826de:	60a3      	str	r3, [r4, #8]
   826e0:	6022      	str	r2, [r4, #0]
   826e2:	2b00      	cmp	r3, #0
   826e4:	d09f      	beq.n	82626 <__sfvwrite_r+0xee>
   826e6:	463a      	mov	r2, r7
   826e8:	e785      	b.n	825f6 <__sfvwrite_r+0xbe>
   826ea:	461a      	mov	r2, r3
   826ec:	4659      	mov	r1, fp
   826ee:	9300      	str	r3, [sp, #0]
   826f0:	f000 fcb0 	bl	83054 <memmove>
   826f4:	9b00      	ldr	r3, [sp, #0]
   826f6:	68a1      	ldr	r1, [r4, #8]
   826f8:	6822      	ldr	r2, [r4, #0]
   826fa:	1ac9      	subs	r1, r1, r3
   826fc:	ebba 0a07 	subs.w	sl, sl, r7
   82700:	4413      	add	r3, r2
   82702:	60a1      	str	r1, [r4, #8]
   82704:	6023      	str	r3, [r4, #0]
   82706:	d1c4      	bne.n	82692 <__sfvwrite_r+0x15a>
   82708:	4648      	mov	r0, r9
   8270a:	4621      	mov	r1, r4
   8270c:	f7ff fce8 	bl	820e0 <_fflush_r>
   82710:	2800      	cmp	r0, #0
   82712:	d18e      	bne.n	82632 <__sfvwrite_r+0xfa>
   82714:	f8cd a004 	str.w	sl, [sp, #4]
   82718:	e7bb      	b.n	82692 <__sfvwrite_r+0x15a>
   8271a:	6820      	ldr	r0, [r4, #0]
   8271c:	4647      	mov	r7, r8
   8271e:	46c3      	mov	fp, r8
   82720:	e75d      	b.n	825de <__sfvwrite_r+0xa6>
   82722:	4658      	mov	r0, fp
   82724:	210a      	movs	r1, #10
   82726:	4642      	mov	r2, r8
   82728:	f000 fbd4 	bl	82ed4 <memchr>
   8272c:	2800      	cmp	r0, #0
   8272e:	d07f      	beq.n	82830 <__sfvwrite_r+0x2f8>
   82730:	f100 0a01 	add.w	sl, r0, #1
   82734:	2701      	movs	r7, #1
   82736:	ebcb 0a0a 	rsb	sl, fp, sl
   8273a:	9701      	str	r7, [sp, #4]
   8273c:	e78c      	b.n	82658 <__sfvwrite_r+0x120>
   8273e:	6822      	ldr	r2, [r4, #0]
   82740:	6921      	ldr	r1, [r4, #16]
   82742:	6967      	ldr	r7, [r4, #20]
   82744:	ebc1 0c02 	rsb	ip, r1, r2
   82748:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8274c:	f10c 0201 	add.w	r2, ip, #1
   82750:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82754:	4442      	add	r2, r8
   82756:	107f      	asrs	r7, r7, #1
   82758:	4297      	cmp	r7, r2
   8275a:	bf34      	ite	cc
   8275c:	4617      	movcc	r7, r2
   8275e:	463a      	movcs	r2, r7
   82760:	055b      	lsls	r3, r3, #21
   82762:	d54f      	bpl.n	82804 <__sfvwrite_r+0x2cc>
   82764:	4611      	mov	r1, r2
   82766:	4648      	mov	r0, r9
   82768:	f8cd c000 	str.w	ip, [sp]
   8276c:	f000 f916 	bl	8299c <_malloc_r>
   82770:	f8dd c000 	ldr.w	ip, [sp]
   82774:	4683      	mov	fp, r0
   82776:	2800      	cmp	r0, #0
   82778:	d062      	beq.n	82840 <__sfvwrite_r+0x308>
   8277a:	4662      	mov	r2, ip
   8277c:	6921      	ldr	r1, [r4, #16]
   8277e:	f8cd c000 	str.w	ip, [sp]
   82782:	f000 fbf1 	bl	82f68 <memcpy>
   82786:	89a2      	ldrh	r2, [r4, #12]
   82788:	f8dd c000 	ldr.w	ip, [sp]
   8278c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82790:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82794:	81a2      	strh	r2, [r4, #12]
   82796:	eb0b 000c 	add.w	r0, fp, ip
   8279a:	ebcc 0207 	rsb	r2, ip, r7
   8279e:	f8c4 b010 	str.w	fp, [r4, #16]
   827a2:	6167      	str	r7, [r4, #20]
   827a4:	6020      	str	r0, [r4, #0]
   827a6:	60a2      	str	r2, [r4, #8]
   827a8:	4647      	mov	r7, r8
   827aa:	46c3      	mov	fp, r8
   827ac:	e717      	b.n	825de <__sfvwrite_r+0xa6>
   827ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   827b2:	4590      	cmp	r8, r2
   827b4:	bf38      	it	cc
   827b6:	4642      	movcc	r2, r8
   827b8:	fb92 f2f3 	sdiv	r2, r2, r3
   827bc:	fb02 f303 	mul.w	r3, r2, r3
   827c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   827c2:	4648      	mov	r0, r9
   827c4:	69e1      	ldr	r1, [r4, #28]
   827c6:	4652      	mov	r2, sl
   827c8:	47b8      	blx	r7
   827ca:	2800      	cmp	r0, #0
   827cc:	f77f af31 	ble.w	82632 <__sfvwrite_r+0xfa>
   827d0:	4602      	mov	r2, r0
   827d2:	e710      	b.n	825f6 <__sfvwrite_r+0xbe>
   827d4:	4662      	mov	r2, ip
   827d6:	4659      	mov	r1, fp
   827d8:	f8cd c000 	str.w	ip, [sp]
   827dc:	f000 fc3a 	bl	83054 <memmove>
   827e0:	f8dd c000 	ldr.w	ip, [sp]
   827e4:	6823      	ldr	r3, [r4, #0]
   827e6:	4648      	mov	r0, r9
   827e8:	4463      	add	r3, ip
   827ea:	6023      	str	r3, [r4, #0]
   827ec:	4621      	mov	r1, r4
   827ee:	f8cd c000 	str.w	ip, [sp]
   827f2:	f7ff fc75 	bl	820e0 <_fflush_r>
   827f6:	f8dd c000 	ldr.w	ip, [sp]
   827fa:	2800      	cmp	r0, #0
   827fc:	f47f af19 	bne.w	82632 <__sfvwrite_r+0xfa>
   82800:	4667      	mov	r7, ip
   82802:	e743      	b.n	8268c <__sfvwrite_r+0x154>
   82804:	4648      	mov	r0, r9
   82806:	f8cd c000 	str.w	ip, [sp]
   8280a:	f000 fc8d 	bl	83128 <_realloc_r>
   8280e:	f8dd c000 	ldr.w	ip, [sp]
   82812:	4683      	mov	fp, r0
   82814:	2800      	cmp	r0, #0
   82816:	d1be      	bne.n	82796 <__sfvwrite_r+0x25e>
   82818:	4648      	mov	r0, r9
   8281a:	6921      	ldr	r1, [r4, #16]
   8281c:	f7ff fdc0 	bl	823a0 <_free_r>
   82820:	89a3      	ldrh	r3, [r4, #12]
   82822:	220c      	movs	r2, #12
   82824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82828:	b29b      	uxth	r3, r3
   8282a:	f8c9 2000 	str.w	r2, [r9]
   8282e:	e701      	b.n	82634 <__sfvwrite_r+0xfc>
   82830:	2701      	movs	r7, #1
   82832:	f108 0a01 	add.w	sl, r8, #1
   82836:	9701      	str	r7, [sp, #4]
   82838:	e70e      	b.n	82658 <__sfvwrite_r+0x120>
   8283a:	f04f 30ff 	mov.w	r0, #4294967295
   8283e:	e6aa      	b.n	82596 <__sfvwrite_r+0x5e>
   82840:	230c      	movs	r3, #12
   82842:	f8c9 3000 	str.w	r3, [r9]
   82846:	89a3      	ldrh	r3, [r4, #12]
   82848:	e6f4      	b.n	82634 <__sfvwrite_r+0xfc>
   8284a:	bf00      	nop
   8284c:	7ffffc00 	.word	0x7ffffc00

00082850 <_fwalk>:
   82850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82854:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82858:	4688      	mov	r8, r1
   8285a:	d019      	beq.n	82890 <_fwalk+0x40>
   8285c:	2600      	movs	r6, #0
   8285e:	687d      	ldr	r5, [r7, #4]
   82860:	68bc      	ldr	r4, [r7, #8]
   82862:	3d01      	subs	r5, #1
   82864:	d40e      	bmi.n	82884 <_fwalk+0x34>
   82866:	89a3      	ldrh	r3, [r4, #12]
   82868:	3d01      	subs	r5, #1
   8286a:	2b01      	cmp	r3, #1
   8286c:	d906      	bls.n	8287c <_fwalk+0x2c>
   8286e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82872:	4620      	mov	r0, r4
   82874:	3301      	adds	r3, #1
   82876:	d001      	beq.n	8287c <_fwalk+0x2c>
   82878:	47c0      	blx	r8
   8287a:	4306      	orrs	r6, r0
   8287c:	1c6b      	adds	r3, r5, #1
   8287e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82882:	d1f0      	bne.n	82866 <_fwalk+0x16>
   82884:	683f      	ldr	r7, [r7, #0]
   82886:	2f00      	cmp	r7, #0
   82888:	d1e9      	bne.n	8285e <_fwalk+0xe>
   8288a:	4630      	mov	r0, r6
   8288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82890:	463e      	mov	r6, r7
   82892:	4630      	mov	r0, r6
   82894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082898 <__locale_charset>:
   82898:	4800      	ldr	r0, [pc, #0]	; (8289c <__locale_charset+0x4>)
   8289a:	4770      	bx	lr
   8289c:	2007056c 	.word	0x2007056c

000828a0 <__locale_mb_cur_max>:
   828a0:	4b01      	ldr	r3, [pc, #4]	; (828a8 <__locale_mb_cur_max+0x8>)
   828a2:	6818      	ldr	r0, [r3, #0]
   828a4:	4770      	bx	lr
   828a6:	bf00      	nop
   828a8:	2007058c 	.word	0x2007058c

000828ac <__smakebuf_r>:
   828ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   828ae:	898b      	ldrh	r3, [r1, #12]
   828b0:	b091      	sub	sp, #68	; 0x44
   828b2:	b29a      	uxth	r2, r3
   828b4:	0796      	lsls	r6, r2, #30
   828b6:	460c      	mov	r4, r1
   828b8:	4605      	mov	r5, r0
   828ba:	d437      	bmi.n	8292c <__smakebuf_r+0x80>
   828bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   828c0:	2900      	cmp	r1, #0
   828c2:	db17      	blt.n	828f4 <__smakebuf_r+0x48>
   828c4:	aa01      	add	r2, sp, #4
   828c6:	f000 ffaf 	bl	83828 <_fstat_r>
   828ca:	2800      	cmp	r0, #0
   828cc:	db10      	blt.n	828f0 <__smakebuf_r+0x44>
   828ce:	9b02      	ldr	r3, [sp, #8]
   828d0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   828d4:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   828d8:	424f      	negs	r7, r1
   828da:	414f      	adcs	r7, r1
   828dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   828e0:	d02c      	beq.n	8293c <__smakebuf_r+0x90>
   828e2:	89a3      	ldrh	r3, [r4, #12]
   828e4:	f44f 6680 	mov.w	r6, #1024	; 0x400
   828e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   828ec:	81a3      	strh	r3, [r4, #12]
   828ee:	e00b      	b.n	82908 <__smakebuf_r+0x5c>
   828f0:	89a3      	ldrh	r3, [r4, #12]
   828f2:	b29a      	uxth	r2, r3
   828f4:	f012 0f80 	tst.w	r2, #128	; 0x80
   828f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   828fc:	81a3      	strh	r3, [r4, #12]
   828fe:	bf14      	ite	ne
   82900:	2640      	movne	r6, #64	; 0x40
   82902:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82906:	2700      	movs	r7, #0
   82908:	4628      	mov	r0, r5
   8290a:	4631      	mov	r1, r6
   8290c:	f000 f846 	bl	8299c <_malloc_r>
   82910:	89a3      	ldrh	r3, [r4, #12]
   82912:	2800      	cmp	r0, #0
   82914:	d029      	beq.n	8296a <__smakebuf_r+0xbe>
   82916:	4a1b      	ldr	r2, [pc, #108]	; (82984 <__smakebuf_r+0xd8>)
   82918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8291c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8291e:	81a3      	strh	r3, [r4, #12]
   82920:	6020      	str	r0, [r4, #0]
   82922:	6120      	str	r0, [r4, #16]
   82924:	6166      	str	r6, [r4, #20]
   82926:	b9a7      	cbnz	r7, 82952 <__smakebuf_r+0xa6>
   82928:	b011      	add	sp, #68	; 0x44
   8292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8292c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82930:	2201      	movs	r2, #1
   82932:	600b      	str	r3, [r1, #0]
   82934:	610b      	str	r3, [r1, #16]
   82936:	614a      	str	r2, [r1, #20]
   82938:	b011      	add	sp, #68	; 0x44
   8293a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8293c:	4a12      	ldr	r2, [pc, #72]	; (82988 <__smakebuf_r+0xdc>)
   8293e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82940:	4293      	cmp	r3, r2
   82942:	d1ce      	bne.n	828e2 <__smakebuf_r+0x36>
   82944:	89a3      	ldrh	r3, [r4, #12]
   82946:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8294a:	4333      	orrs	r3, r6
   8294c:	81a3      	strh	r3, [r4, #12]
   8294e:	64e6      	str	r6, [r4, #76]	; 0x4c
   82950:	e7da      	b.n	82908 <__smakebuf_r+0x5c>
   82952:	4628      	mov	r0, r5
   82954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82958:	f000 ff7a 	bl	83850 <_isatty_r>
   8295c:	2800      	cmp	r0, #0
   8295e:	d0e3      	beq.n	82928 <__smakebuf_r+0x7c>
   82960:	89a3      	ldrh	r3, [r4, #12]
   82962:	f043 0301 	orr.w	r3, r3, #1
   82966:	81a3      	strh	r3, [r4, #12]
   82968:	e7de      	b.n	82928 <__smakebuf_r+0x7c>
   8296a:	059a      	lsls	r2, r3, #22
   8296c:	d4dc      	bmi.n	82928 <__smakebuf_r+0x7c>
   8296e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82972:	f043 0302 	orr.w	r3, r3, #2
   82976:	2101      	movs	r1, #1
   82978:	81a3      	strh	r3, [r4, #12]
   8297a:	6022      	str	r2, [r4, #0]
   8297c:	6122      	str	r2, [r4, #16]
   8297e:	6161      	str	r1, [r4, #20]
   82980:	e7d2      	b.n	82928 <__smakebuf_r+0x7c>
   82982:	bf00      	nop
   82984:	0008210d 	.word	0x0008210d
   82988:	00083569 	.word	0x00083569

0008298c <malloc>:
   8298c:	4b02      	ldr	r3, [pc, #8]	; (82998 <malloc+0xc>)
   8298e:	4601      	mov	r1, r0
   82990:	6818      	ldr	r0, [r3, #0]
   82992:	f000 b803 	b.w	8299c <_malloc_r>
   82996:	bf00      	nop
   82998:	20070568 	.word	0x20070568

0008299c <_malloc_r>:
   8299c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   829a0:	f101 050b 	add.w	r5, r1, #11
   829a4:	2d16      	cmp	r5, #22
   829a6:	b083      	sub	sp, #12
   829a8:	4606      	mov	r6, r0
   829aa:	d927      	bls.n	829fc <_malloc_r+0x60>
   829ac:	f035 0507 	bics.w	r5, r5, #7
   829b0:	d427      	bmi.n	82a02 <_malloc_r+0x66>
   829b2:	42a9      	cmp	r1, r5
   829b4:	d825      	bhi.n	82a02 <_malloc_r+0x66>
   829b6:	4630      	mov	r0, r6
   829b8:	f000 fbb2 	bl	83120 <__malloc_lock>
   829bc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   829c0:	d226      	bcs.n	82a10 <_malloc_r+0x74>
   829c2:	4fc1      	ldr	r7, [pc, #772]	; (82cc8 <_malloc_r+0x32c>)
   829c4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   829c8:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   829cc:	68dc      	ldr	r4, [r3, #12]
   829ce:	429c      	cmp	r4, r3
   829d0:	f000 81d2 	beq.w	82d78 <_malloc_r+0x3dc>
   829d4:	6863      	ldr	r3, [r4, #4]
   829d6:	68e2      	ldr	r2, [r4, #12]
   829d8:	f023 0303 	bic.w	r3, r3, #3
   829dc:	4423      	add	r3, r4
   829de:	6858      	ldr	r0, [r3, #4]
   829e0:	68a1      	ldr	r1, [r4, #8]
   829e2:	f040 0501 	orr.w	r5, r0, #1
   829e6:	60ca      	str	r2, [r1, #12]
   829e8:	4630      	mov	r0, r6
   829ea:	6091      	str	r1, [r2, #8]
   829ec:	605d      	str	r5, [r3, #4]
   829ee:	f000 fb99 	bl	83124 <__malloc_unlock>
   829f2:	3408      	adds	r4, #8
   829f4:	4620      	mov	r0, r4
   829f6:	b003      	add	sp, #12
   829f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829fc:	2510      	movs	r5, #16
   829fe:	42a9      	cmp	r1, r5
   82a00:	d9d9      	bls.n	829b6 <_malloc_r+0x1a>
   82a02:	2400      	movs	r4, #0
   82a04:	230c      	movs	r3, #12
   82a06:	4620      	mov	r0, r4
   82a08:	6033      	str	r3, [r6, #0]
   82a0a:	b003      	add	sp, #12
   82a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a10:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82a14:	f000 8089 	beq.w	82b2a <_malloc_r+0x18e>
   82a18:	f1bc 0f04 	cmp.w	ip, #4
   82a1c:	f200 8160 	bhi.w	82ce0 <_malloc_r+0x344>
   82a20:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82a24:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82a28:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82a2c:	4fa6      	ldr	r7, [pc, #664]	; (82cc8 <_malloc_r+0x32c>)
   82a2e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82a32:	68cc      	ldr	r4, [r1, #12]
   82a34:	42a1      	cmp	r1, r4
   82a36:	d105      	bne.n	82a44 <_malloc_r+0xa8>
   82a38:	e00c      	b.n	82a54 <_malloc_r+0xb8>
   82a3a:	2b00      	cmp	r3, #0
   82a3c:	da79      	bge.n	82b32 <_malloc_r+0x196>
   82a3e:	68e4      	ldr	r4, [r4, #12]
   82a40:	42a1      	cmp	r1, r4
   82a42:	d007      	beq.n	82a54 <_malloc_r+0xb8>
   82a44:	6862      	ldr	r2, [r4, #4]
   82a46:	f022 0203 	bic.w	r2, r2, #3
   82a4a:	1b53      	subs	r3, r2, r5
   82a4c:	2b0f      	cmp	r3, #15
   82a4e:	ddf4      	ble.n	82a3a <_malloc_r+0x9e>
   82a50:	f10c 3cff 	add.w	ip, ip, #4294967295
   82a54:	f10c 0c01 	add.w	ip, ip, #1
   82a58:	4b9b      	ldr	r3, [pc, #620]	; (82cc8 <_malloc_r+0x32c>)
   82a5a:	693c      	ldr	r4, [r7, #16]
   82a5c:	f103 0e08 	add.w	lr, r3, #8
   82a60:	4574      	cmp	r4, lr
   82a62:	f000 817e 	beq.w	82d62 <_malloc_r+0x3c6>
   82a66:	6861      	ldr	r1, [r4, #4]
   82a68:	f021 0103 	bic.w	r1, r1, #3
   82a6c:	1b4a      	subs	r2, r1, r5
   82a6e:	2a0f      	cmp	r2, #15
   82a70:	f300 8164 	bgt.w	82d3c <_malloc_r+0x3a0>
   82a74:	2a00      	cmp	r2, #0
   82a76:	f8c3 e014 	str.w	lr, [r3, #20]
   82a7a:	f8c3 e010 	str.w	lr, [r3, #16]
   82a7e:	da69      	bge.n	82b54 <_malloc_r+0x1b8>
   82a80:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82a84:	f080 813a 	bcs.w	82cfc <_malloc_r+0x360>
   82a88:	08c9      	lsrs	r1, r1, #3
   82a8a:	108a      	asrs	r2, r1, #2
   82a8c:	f04f 0801 	mov.w	r8, #1
   82a90:	fa08 f802 	lsl.w	r8, r8, r2
   82a94:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82a98:	685a      	ldr	r2, [r3, #4]
   82a9a:	6888      	ldr	r0, [r1, #8]
   82a9c:	ea48 0202 	orr.w	r2, r8, r2
   82aa0:	60a0      	str	r0, [r4, #8]
   82aa2:	60e1      	str	r1, [r4, #12]
   82aa4:	605a      	str	r2, [r3, #4]
   82aa6:	608c      	str	r4, [r1, #8]
   82aa8:	60c4      	str	r4, [r0, #12]
   82aaa:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82aae:	2001      	movs	r0, #1
   82ab0:	4098      	lsls	r0, r3
   82ab2:	4290      	cmp	r0, r2
   82ab4:	d85b      	bhi.n	82b6e <_malloc_r+0x1d2>
   82ab6:	4202      	tst	r2, r0
   82ab8:	d106      	bne.n	82ac8 <_malloc_r+0x12c>
   82aba:	f02c 0c03 	bic.w	ip, ip, #3
   82abe:	0040      	lsls	r0, r0, #1
   82ac0:	4202      	tst	r2, r0
   82ac2:	f10c 0c04 	add.w	ip, ip, #4
   82ac6:	d0fa      	beq.n	82abe <_malloc_r+0x122>
   82ac8:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82acc:	4644      	mov	r4, r8
   82ace:	46e1      	mov	r9, ip
   82ad0:	68e3      	ldr	r3, [r4, #12]
   82ad2:	429c      	cmp	r4, r3
   82ad4:	d107      	bne.n	82ae6 <_malloc_r+0x14a>
   82ad6:	e146      	b.n	82d66 <_malloc_r+0x3ca>
   82ad8:	2a00      	cmp	r2, #0
   82ada:	f280 8157 	bge.w	82d8c <_malloc_r+0x3f0>
   82ade:	68db      	ldr	r3, [r3, #12]
   82ae0:	429c      	cmp	r4, r3
   82ae2:	f000 8140 	beq.w	82d66 <_malloc_r+0x3ca>
   82ae6:	6859      	ldr	r1, [r3, #4]
   82ae8:	f021 0103 	bic.w	r1, r1, #3
   82aec:	1b4a      	subs	r2, r1, r5
   82aee:	2a0f      	cmp	r2, #15
   82af0:	ddf2      	ble.n	82ad8 <_malloc_r+0x13c>
   82af2:	461c      	mov	r4, r3
   82af4:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82af8:	68d9      	ldr	r1, [r3, #12]
   82afa:	f045 0901 	orr.w	r9, r5, #1
   82afe:	f042 0801 	orr.w	r8, r2, #1
   82b02:	441d      	add	r5, r3
   82b04:	f8c3 9004 	str.w	r9, [r3, #4]
   82b08:	4630      	mov	r0, r6
   82b0a:	f8cc 100c 	str.w	r1, [ip, #12]
   82b0e:	f8c1 c008 	str.w	ip, [r1, #8]
   82b12:	617d      	str	r5, [r7, #20]
   82b14:	613d      	str	r5, [r7, #16]
   82b16:	f8c5 e00c 	str.w	lr, [r5, #12]
   82b1a:	f8c5 e008 	str.w	lr, [r5, #8]
   82b1e:	f8c5 8004 	str.w	r8, [r5, #4]
   82b22:	50aa      	str	r2, [r5, r2]
   82b24:	f000 fafe 	bl	83124 <__malloc_unlock>
   82b28:	e764      	b.n	829f4 <_malloc_r+0x58>
   82b2a:	217e      	movs	r1, #126	; 0x7e
   82b2c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82b30:	e77c      	b.n	82a2c <_malloc_r+0x90>
   82b32:	4422      	add	r2, r4
   82b34:	6850      	ldr	r0, [r2, #4]
   82b36:	68e3      	ldr	r3, [r4, #12]
   82b38:	68a1      	ldr	r1, [r4, #8]
   82b3a:	f040 0501 	orr.w	r5, r0, #1
   82b3e:	60cb      	str	r3, [r1, #12]
   82b40:	4630      	mov	r0, r6
   82b42:	6099      	str	r1, [r3, #8]
   82b44:	6055      	str	r5, [r2, #4]
   82b46:	f000 faed 	bl	83124 <__malloc_unlock>
   82b4a:	3408      	adds	r4, #8
   82b4c:	4620      	mov	r0, r4
   82b4e:	b003      	add	sp, #12
   82b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b54:	4421      	add	r1, r4
   82b56:	684b      	ldr	r3, [r1, #4]
   82b58:	4630      	mov	r0, r6
   82b5a:	f043 0301 	orr.w	r3, r3, #1
   82b5e:	604b      	str	r3, [r1, #4]
   82b60:	f000 fae0 	bl	83124 <__malloc_unlock>
   82b64:	3408      	adds	r4, #8
   82b66:	4620      	mov	r0, r4
   82b68:	b003      	add	sp, #12
   82b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b6e:	68bc      	ldr	r4, [r7, #8]
   82b70:	6863      	ldr	r3, [r4, #4]
   82b72:	f023 0903 	bic.w	r9, r3, #3
   82b76:	45a9      	cmp	r9, r5
   82b78:	d304      	bcc.n	82b84 <_malloc_r+0x1e8>
   82b7a:	ebc5 0309 	rsb	r3, r5, r9
   82b7e:	2b0f      	cmp	r3, #15
   82b80:	f300 8091 	bgt.w	82ca6 <_malloc_r+0x30a>
   82b84:	4b51      	ldr	r3, [pc, #324]	; (82ccc <_malloc_r+0x330>)
   82b86:	4a52      	ldr	r2, [pc, #328]	; (82cd0 <_malloc_r+0x334>)
   82b88:	6819      	ldr	r1, [r3, #0]
   82b8a:	6813      	ldr	r3, [r2, #0]
   82b8c:	eb05 0a01 	add.w	sl, r5, r1
   82b90:	3301      	adds	r3, #1
   82b92:	eb04 0b09 	add.w	fp, r4, r9
   82b96:	f000 8161 	beq.w	82e5c <_malloc_r+0x4c0>
   82b9a:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82b9e:	f10a 0a0f 	add.w	sl, sl, #15
   82ba2:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82ba6:	f02a 0a0f 	bic.w	sl, sl, #15
   82baa:	4630      	mov	r0, r6
   82bac:	4651      	mov	r1, sl
   82bae:	9201      	str	r2, [sp, #4]
   82bb0:	f000 fc9a 	bl	834e8 <_sbrk_r>
   82bb4:	f1b0 3fff 	cmp.w	r0, #4294967295
   82bb8:	4680      	mov	r8, r0
   82bba:	9a01      	ldr	r2, [sp, #4]
   82bbc:	f000 8101 	beq.w	82dc2 <_malloc_r+0x426>
   82bc0:	4583      	cmp	fp, r0
   82bc2:	f200 80fb 	bhi.w	82dbc <_malloc_r+0x420>
   82bc6:	f8df c114 	ldr.w	ip, [pc, #276]	; 82cdc <_malloc_r+0x340>
   82bca:	45c3      	cmp	fp, r8
   82bcc:	f8dc 3000 	ldr.w	r3, [ip]
   82bd0:	4453      	add	r3, sl
   82bd2:	f8cc 3000 	str.w	r3, [ip]
   82bd6:	f000 814a 	beq.w	82e6e <_malloc_r+0x4d2>
   82bda:	6812      	ldr	r2, [r2, #0]
   82bdc:	493c      	ldr	r1, [pc, #240]	; (82cd0 <_malloc_r+0x334>)
   82bde:	3201      	adds	r2, #1
   82be0:	bf1b      	ittet	ne
   82be2:	ebcb 0b08 	rsbne	fp, fp, r8
   82be6:	445b      	addne	r3, fp
   82be8:	f8c1 8000 	streq.w	r8, [r1]
   82bec:	f8cc 3000 	strne.w	r3, [ip]
   82bf0:	f018 0307 	ands.w	r3, r8, #7
   82bf4:	f000 8114 	beq.w	82e20 <_malloc_r+0x484>
   82bf8:	f1c3 0208 	rsb	r2, r3, #8
   82bfc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82c00:	4490      	add	r8, r2
   82c02:	3308      	adds	r3, #8
   82c04:	44c2      	add	sl, r8
   82c06:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82c0a:	ebca 0a03 	rsb	sl, sl, r3
   82c0e:	4651      	mov	r1, sl
   82c10:	4630      	mov	r0, r6
   82c12:	f8cd c004 	str.w	ip, [sp, #4]
   82c16:	f000 fc67 	bl	834e8 <_sbrk_r>
   82c1a:	1c43      	adds	r3, r0, #1
   82c1c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82c20:	f000 8135 	beq.w	82e8e <_malloc_r+0x4f2>
   82c24:	ebc8 0200 	rsb	r2, r8, r0
   82c28:	4452      	add	r2, sl
   82c2a:	f042 0201 	orr.w	r2, r2, #1
   82c2e:	f8dc 3000 	ldr.w	r3, [ip]
   82c32:	42bc      	cmp	r4, r7
   82c34:	4453      	add	r3, sl
   82c36:	f8c7 8008 	str.w	r8, [r7, #8]
   82c3a:	f8cc 3000 	str.w	r3, [ip]
   82c3e:	f8c8 2004 	str.w	r2, [r8, #4]
   82c42:	f8df a098 	ldr.w	sl, [pc, #152]	; 82cdc <_malloc_r+0x340>
   82c46:	d015      	beq.n	82c74 <_malloc_r+0x2d8>
   82c48:	f1b9 0f0f 	cmp.w	r9, #15
   82c4c:	f240 80eb 	bls.w	82e26 <_malloc_r+0x48a>
   82c50:	6861      	ldr	r1, [r4, #4]
   82c52:	f1a9 020c 	sub.w	r2, r9, #12
   82c56:	f022 0207 	bic.w	r2, r2, #7
   82c5a:	f001 0101 	and.w	r1, r1, #1
   82c5e:	ea42 0e01 	orr.w	lr, r2, r1
   82c62:	2005      	movs	r0, #5
   82c64:	18a1      	adds	r1, r4, r2
   82c66:	2a0f      	cmp	r2, #15
   82c68:	f8c4 e004 	str.w	lr, [r4, #4]
   82c6c:	6048      	str	r0, [r1, #4]
   82c6e:	6088      	str	r0, [r1, #8]
   82c70:	f200 8111 	bhi.w	82e96 <_malloc_r+0x4fa>
   82c74:	4a17      	ldr	r2, [pc, #92]	; (82cd4 <_malloc_r+0x338>)
   82c76:	68bc      	ldr	r4, [r7, #8]
   82c78:	6811      	ldr	r1, [r2, #0]
   82c7a:	428b      	cmp	r3, r1
   82c7c:	bf88      	it	hi
   82c7e:	6013      	strhi	r3, [r2, #0]
   82c80:	4a15      	ldr	r2, [pc, #84]	; (82cd8 <_malloc_r+0x33c>)
   82c82:	6811      	ldr	r1, [r2, #0]
   82c84:	428b      	cmp	r3, r1
   82c86:	bf88      	it	hi
   82c88:	6013      	strhi	r3, [r2, #0]
   82c8a:	6862      	ldr	r2, [r4, #4]
   82c8c:	f022 0203 	bic.w	r2, r2, #3
   82c90:	4295      	cmp	r5, r2
   82c92:	ebc5 0302 	rsb	r3, r5, r2
   82c96:	d801      	bhi.n	82c9c <_malloc_r+0x300>
   82c98:	2b0f      	cmp	r3, #15
   82c9a:	dc04      	bgt.n	82ca6 <_malloc_r+0x30a>
   82c9c:	4630      	mov	r0, r6
   82c9e:	f000 fa41 	bl	83124 <__malloc_unlock>
   82ca2:	2400      	movs	r4, #0
   82ca4:	e6a6      	b.n	829f4 <_malloc_r+0x58>
   82ca6:	f045 0201 	orr.w	r2, r5, #1
   82caa:	f043 0301 	orr.w	r3, r3, #1
   82cae:	4425      	add	r5, r4
   82cb0:	6062      	str	r2, [r4, #4]
   82cb2:	4630      	mov	r0, r6
   82cb4:	60bd      	str	r5, [r7, #8]
   82cb6:	606b      	str	r3, [r5, #4]
   82cb8:	f000 fa34 	bl	83124 <__malloc_unlock>
   82cbc:	3408      	adds	r4, #8
   82cbe:	4620      	mov	r0, r4
   82cc0:	b003      	add	sp, #12
   82cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cc6:	bf00      	nop
   82cc8:	20070590 	.word	0x20070590
   82ccc:	20070ae4 	.word	0x20070ae4
   82cd0:	2007099c 	.word	0x2007099c
   82cd4:	20070ae0 	.word	0x20070ae0
   82cd8:	20070adc 	.word	0x20070adc
   82cdc:	20070ae8 	.word	0x20070ae8
   82ce0:	f1bc 0f14 	cmp.w	ip, #20
   82ce4:	d961      	bls.n	82daa <_malloc_r+0x40e>
   82ce6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82cea:	f200 808f 	bhi.w	82e0c <_malloc_r+0x470>
   82cee:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82cf2:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82cf6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82cfa:	e697      	b.n	82a2c <_malloc_r+0x90>
   82cfc:	0a4b      	lsrs	r3, r1, #9
   82cfe:	2b04      	cmp	r3, #4
   82d00:	d958      	bls.n	82db4 <_malloc_r+0x418>
   82d02:	2b14      	cmp	r3, #20
   82d04:	f200 80ad 	bhi.w	82e62 <_malloc_r+0x4c6>
   82d08:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82d0c:	0050      	lsls	r0, r2, #1
   82d0e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82d12:	6883      	ldr	r3, [r0, #8]
   82d14:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82ed0 <_malloc_r+0x534>
   82d18:	4283      	cmp	r3, r0
   82d1a:	f000 808a 	beq.w	82e32 <_malloc_r+0x496>
   82d1e:	685a      	ldr	r2, [r3, #4]
   82d20:	f022 0203 	bic.w	r2, r2, #3
   82d24:	4291      	cmp	r1, r2
   82d26:	d202      	bcs.n	82d2e <_malloc_r+0x392>
   82d28:	689b      	ldr	r3, [r3, #8]
   82d2a:	4298      	cmp	r0, r3
   82d2c:	d1f7      	bne.n	82d1e <_malloc_r+0x382>
   82d2e:	68d9      	ldr	r1, [r3, #12]
   82d30:	687a      	ldr	r2, [r7, #4]
   82d32:	60e1      	str	r1, [r4, #12]
   82d34:	60a3      	str	r3, [r4, #8]
   82d36:	608c      	str	r4, [r1, #8]
   82d38:	60dc      	str	r4, [r3, #12]
   82d3a:	e6b6      	b.n	82aaa <_malloc_r+0x10e>
   82d3c:	f045 0701 	orr.w	r7, r5, #1
   82d40:	f042 0101 	orr.w	r1, r2, #1
   82d44:	4425      	add	r5, r4
   82d46:	6067      	str	r7, [r4, #4]
   82d48:	4630      	mov	r0, r6
   82d4a:	615d      	str	r5, [r3, #20]
   82d4c:	611d      	str	r5, [r3, #16]
   82d4e:	f8c5 e00c 	str.w	lr, [r5, #12]
   82d52:	f8c5 e008 	str.w	lr, [r5, #8]
   82d56:	6069      	str	r1, [r5, #4]
   82d58:	50aa      	str	r2, [r5, r2]
   82d5a:	3408      	adds	r4, #8
   82d5c:	f000 f9e2 	bl	83124 <__malloc_unlock>
   82d60:	e648      	b.n	829f4 <_malloc_r+0x58>
   82d62:	685a      	ldr	r2, [r3, #4]
   82d64:	e6a1      	b.n	82aaa <_malloc_r+0x10e>
   82d66:	f109 0901 	add.w	r9, r9, #1
   82d6a:	f019 0f03 	tst.w	r9, #3
   82d6e:	f104 0408 	add.w	r4, r4, #8
   82d72:	f47f aead 	bne.w	82ad0 <_malloc_r+0x134>
   82d76:	e02d      	b.n	82dd4 <_malloc_r+0x438>
   82d78:	f104 0308 	add.w	r3, r4, #8
   82d7c:	6964      	ldr	r4, [r4, #20]
   82d7e:	42a3      	cmp	r3, r4
   82d80:	bf08      	it	eq
   82d82:	f10c 0c02 	addeq.w	ip, ip, #2
   82d86:	f43f ae67 	beq.w	82a58 <_malloc_r+0xbc>
   82d8a:	e623      	b.n	829d4 <_malloc_r+0x38>
   82d8c:	4419      	add	r1, r3
   82d8e:	6848      	ldr	r0, [r1, #4]
   82d90:	461c      	mov	r4, r3
   82d92:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82d96:	68db      	ldr	r3, [r3, #12]
   82d98:	f040 0501 	orr.w	r5, r0, #1
   82d9c:	604d      	str	r5, [r1, #4]
   82d9e:	4630      	mov	r0, r6
   82da0:	60d3      	str	r3, [r2, #12]
   82da2:	609a      	str	r2, [r3, #8]
   82da4:	f000 f9be 	bl	83124 <__malloc_unlock>
   82da8:	e624      	b.n	829f4 <_malloc_r+0x58>
   82daa:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82dae:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82db2:	e63b      	b.n	82a2c <_malloc_r+0x90>
   82db4:	098a      	lsrs	r2, r1, #6
   82db6:	3238      	adds	r2, #56	; 0x38
   82db8:	0050      	lsls	r0, r2, #1
   82dba:	e7a8      	b.n	82d0e <_malloc_r+0x372>
   82dbc:	42bc      	cmp	r4, r7
   82dbe:	f43f af02 	beq.w	82bc6 <_malloc_r+0x22a>
   82dc2:	68bc      	ldr	r4, [r7, #8]
   82dc4:	6862      	ldr	r2, [r4, #4]
   82dc6:	f022 0203 	bic.w	r2, r2, #3
   82dca:	e761      	b.n	82c90 <_malloc_r+0x2f4>
   82dcc:	f8d8 8000 	ldr.w	r8, [r8]
   82dd0:	4598      	cmp	r8, r3
   82dd2:	d17a      	bne.n	82eca <_malloc_r+0x52e>
   82dd4:	f01c 0f03 	tst.w	ip, #3
   82dd8:	f1a8 0308 	sub.w	r3, r8, #8
   82ddc:	f10c 3cff 	add.w	ip, ip, #4294967295
   82de0:	d1f4      	bne.n	82dcc <_malloc_r+0x430>
   82de2:	687b      	ldr	r3, [r7, #4]
   82de4:	ea23 0300 	bic.w	r3, r3, r0
   82de8:	607b      	str	r3, [r7, #4]
   82dea:	0040      	lsls	r0, r0, #1
   82dec:	4298      	cmp	r0, r3
   82dee:	f63f aebe 	bhi.w	82b6e <_malloc_r+0x1d2>
   82df2:	2800      	cmp	r0, #0
   82df4:	f43f aebb 	beq.w	82b6e <_malloc_r+0x1d2>
   82df8:	4203      	tst	r3, r0
   82dfa:	46cc      	mov	ip, r9
   82dfc:	f47f ae64 	bne.w	82ac8 <_malloc_r+0x12c>
   82e00:	0040      	lsls	r0, r0, #1
   82e02:	4203      	tst	r3, r0
   82e04:	f10c 0c04 	add.w	ip, ip, #4
   82e08:	d0fa      	beq.n	82e00 <_malloc_r+0x464>
   82e0a:	e65d      	b.n	82ac8 <_malloc_r+0x12c>
   82e0c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82e10:	d819      	bhi.n	82e46 <_malloc_r+0x4aa>
   82e12:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82e16:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82e1a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e1e:	e605      	b.n	82a2c <_malloc_r+0x90>
   82e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82e24:	e6ee      	b.n	82c04 <_malloc_r+0x268>
   82e26:	2301      	movs	r3, #1
   82e28:	f8c8 3004 	str.w	r3, [r8, #4]
   82e2c:	4644      	mov	r4, r8
   82e2e:	2200      	movs	r2, #0
   82e30:	e72e      	b.n	82c90 <_malloc_r+0x2f4>
   82e32:	1092      	asrs	r2, r2, #2
   82e34:	2001      	movs	r0, #1
   82e36:	4090      	lsls	r0, r2
   82e38:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82e3c:	4619      	mov	r1, r3
   82e3e:	4302      	orrs	r2, r0
   82e40:	f8c8 2004 	str.w	r2, [r8, #4]
   82e44:	e775      	b.n	82d32 <_malloc_r+0x396>
   82e46:	f240 5354 	movw	r3, #1364	; 0x554
   82e4a:	459c      	cmp	ip, r3
   82e4c:	d81b      	bhi.n	82e86 <_malloc_r+0x4ea>
   82e4e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82e52:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82e56:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e5a:	e5e7      	b.n	82a2c <_malloc_r+0x90>
   82e5c:	f10a 0a10 	add.w	sl, sl, #16
   82e60:	e6a3      	b.n	82baa <_malloc_r+0x20e>
   82e62:	2b54      	cmp	r3, #84	; 0x54
   82e64:	d81f      	bhi.n	82ea6 <_malloc_r+0x50a>
   82e66:	0b0a      	lsrs	r2, r1, #12
   82e68:	326e      	adds	r2, #110	; 0x6e
   82e6a:	0050      	lsls	r0, r2, #1
   82e6c:	e74f      	b.n	82d0e <_malloc_r+0x372>
   82e6e:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82e72:	2900      	cmp	r1, #0
   82e74:	f47f aeb1 	bne.w	82bda <_malloc_r+0x23e>
   82e78:	eb0a 0109 	add.w	r1, sl, r9
   82e7c:	68ba      	ldr	r2, [r7, #8]
   82e7e:	f041 0101 	orr.w	r1, r1, #1
   82e82:	6051      	str	r1, [r2, #4]
   82e84:	e6f6      	b.n	82c74 <_malloc_r+0x2d8>
   82e86:	21fc      	movs	r1, #252	; 0xfc
   82e88:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82e8c:	e5ce      	b.n	82a2c <_malloc_r+0x90>
   82e8e:	2201      	movs	r2, #1
   82e90:	f04f 0a00 	mov.w	sl, #0
   82e94:	e6cb      	b.n	82c2e <_malloc_r+0x292>
   82e96:	f104 0108 	add.w	r1, r4, #8
   82e9a:	4630      	mov	r0, r6
   82e9c:	f7ff fa80 	bl	823a0 <_free_r>
   82ea0:	f8da 3000 	ldr.w	r3, [sl]
   82ea4:	e6e6      	b.n	82c74 <_malloc_r+0x2d8>
   82ea6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82eaa:	d803      	bhi.n	82eb4 <_malloc_r+0x518>
   82eac:	0bca      	lsrs	r2, r1, #15
   82eae:	3277      	adds	r2, #119	; 0x77
   82eb0:	0050      	lsls	r0, r2, #1
   82eb2:	e72c      	b.n	82d0e <_malloc_r+0x372>
   82eb4:	f240 5254 	movw	r2, #1364	; 0x554
   82eb8:	4293      	cmp	r3, r2
   82eba:	d803      	bhi.n	82ec4 <_malloc_r+0x528>
   82ebc:	0c8a      	lsrs	r2, r1, #18
   82ebe:	327c      	adds	r2, #124	; 0x7c
   82ec0:	0050      	lsls	r0, r2, #1
   82ec2:	e724      	b.n	82d0e <_malloc_r+0x372>
   82ec4:	20fc      	movs	r0, #252	; 0xfc
   82ec6:	227e      	movs	r2, #126	; 0x7e
   82ec8:	e721      	b.n	82d0e <_malloc_r+0x372>
   82eca:	687b      	ldr	r3, [r7, #4]
   82ecc:	e78d      	b.n	82dea <_malloc_r+0x44e>
   82ece:	bf00      	nop
   82ed0:	20070590 	.word	0x20070590

00082ed4 <memchr>:
   82ed4:	0783      	lsls	r3, r0, #30
   82ed6:	b470      	push	{r4, r5, r6}
   82ed8:	b2c9      	uxtb	r1, r1
   82eda:	d040      	beq.n	82f5e <memchr+0x8a>
   82edc:	1e54      	subs	r4, r2, #1
   82ede:	b32a      	cbz	r2, 82f2c <memchr+0x58>
   82ee0:	7803      	ldrb	r3, [r0, #0]
   82ee2:	428b      	cmp	r3, r1
   82ee4:	d023      	beq.n	82f2e <memchr+0x5a>
   82ee6:	1c43      	adds	r3, r0, #1
   82ee8:	e004      	b.n	82ef4 <memchr+0x20>
   82eea:	b1fc      	cbz	r4, 82f2c <memchr+0x58>
   82eec:	7805      	ldrb	r5, [r0, #0]
   82eee:	4614      	mov	r4, r2
   82ef0:	428d      	cmp	r5, r1
   82ef2:	d01c      	beq.n	82f2e <memchr+0x5a>
   82ef4:	f013 0f03 	tst.w	r3, #3
   82ef8:	4618      	mov	r0, r3
   82efa:	f104 32ff 	add.w	r2, r4, #4294967295
   82efe:	f103 0301 	add.w	r3, r3, #1
   82f02:	d1f2      	bne.n	82eea <memchr+0x16>
   82f04:	2c03      	cmp	r4, #3
   82f06:	d814      	bhi.n	82f32 <memchr+0x5e>
   82f08:	1e65      	subs	r5, r4, #1
   82f0a:	b354      	cbz	r4, 82f62 <memchr+0x8e>
   82f0c:	7803      	ldrb	r3, [r0, #0]
   82f0e:	428b      	cmp	r3, r1
   82f10:	d00d      	beq.n	82f2e <memchr+0x5a>
   82f12:	1c42      	adds	r2, r0, #1
   82f14:	2300      	movs	r3, #0
   82f16:	e002      	b.n	82f1e <memchr+0x4a>
   82f18:	7804      	ldrb	r4, [r0, #0]
   82f1a:	428c      	cmp	r4, r1
   82f1c:	d007      	beq.n	82f2e <memchr+0x5a>
   82f1e:	42ab      	cmp	r3, r5
   82f20:	4610      	mov	r0, r2
   82f22:	f103 0301 	add.w	r3, r3, #1
   82f26:	f102 0201 	add.w	r2, r2, #1
   82f2a:	d1f5      	bne.n	82f18 <memchr+0x44>
   82f2c:	2000      	movs	r0, #0
   82f2e:	bc70      	pop	{r4, r5, r6}
   82f30:	4770      	bx	lr
   82f32:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82f36:	4603      	mov	r3, r0
   82f38:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82f3c:	681a      	ldr	r2, [r3, #0]
   82f3e:	4618      	mov	r0, r3
   82f40:	4072      	eors	r2, r6
   82f42:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   82f46:	ea25 0202 	bic.w	r2, r5, r2
   82f4a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   82f4e:	f103 0304 	add.w	r3, r3, #4
   82f52:	d1d9      	bne.n	82f08 <memchr+0x34>
   82f54:	3c04      	subs	r4, #4
   82f56:	2c03      	cmp	r4, #3
   82f58:	4618      	mov	r0, r3
   82f5a:	d8ef      	bhi.n	82f3c <memchr+0x68>
   82f5c:	e7d4      	b.n	82f08 <memchr+0x34>
   82f5e:	4614      	mov	r4, r2
   82f60:	e7d0      	b.n	82f04 <memchr+0x30>
   82f62:	4620      	mov	r0, r4
   82f64:	e7e3      	b.n	82f2e <memchr+0x5a>
   82f66:	bf00      	nop

00082f68 <memcpy>:
   82f68:	4684      	mov	ip, r0
   82f6a:	ea41 0300 	orr.w	r3, r1, r0
   82f6e:	f013 0303 	ands.w	r3, r3, #3
   82f72:	d149      	bne.n	83008 <memcpy+0xa0>
   82f74:	3a40      	subs	r2, #64	; 0x40
   82f76:	d323      	bcc.n	82fc0 <memcpy+0x58>
   82f78:	680b      	ldr	r3, [r1, #0]
   82f7a:	6003      	str	r3, [r0, #0]
   82f7c:	684b      	ldr	r3, [r1, #4]
   82f7e:	6043      	str	r3, [r0, #4]
   82f80:	688b      	ldr	r3, [r1, #8]
   82f82:	6083      	str	r3, [r0, #8]
   82f84:	68cb      	ldr	r3, [r1, #12]
   82f86:	60c3      	str	r3, [r0, #12]
   82f88:	690b      	ldr	r3, [r1, #16]
   82f8a:	6103      	str	r3, [r0, #16]
   82f8c:	694b      	ldr	r3, [r1, #20]
   82f8e:	6143      	str	r3, [r0, #20]
   82f90:	698b      	ldr	r3, [r1, #24]
   82f92:	6183      	str	r3, [r0, #24]
   82f94:	69cb      	ldr	r3, [r1, #28]
   82f96:	61c3      	str	r3, [r0, #28]
   82f98:	6a0b      	ldr	r3, [r1, #32]
   82f9a:	6203      	str	r3, [r0, #32]
   82f9c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82f9e:	6243      	str	r3, [r0, #36]	; 0x24
   82fa0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82fa2:	6283      	str	r3, [r0, #40]	; 0x28
   82fa4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82fa6:	62c3      	str	r3, [r0, #44]	; 0x2c
   82fa8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82faa:	6303      	str	r3, [r0, #48]	; 0x30
   82fac:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82fae:	6343      	str	r3, [r0, #52]	; 0x34
   82fb0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82fb2:	6383      	str	r3, [r0, #56]	; 0x38
   82fb4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82fb6:	63c3      	str	r3, [r0, #60]	; 0x3c
   82fb8:	3040      	adds	r0, #64	; 0x40
   82fba:	3140      	adds	r1, #64	; 0x40
   82fbc:	3a40      	subs	r2, #64	; 0x40
   82fbe:	d2db      	bcs.n	82f78 <memcpy+0x10>
   82fc0:	3230      	adds	r2, #48	; 0x30
   82fc2:	d30b      	bcc.n	82fdc <memcpy+0x74>
   82fc4:	680b      	ldr	r3, [r1, #0]
   82fc6:	6003      	str	r3, [r0, #0]
   82fc8:	684b      	ldr	r3, [r1, #4]
   82fca:	6043      	str	r3, [r0, #4]
   82fcc:	688b      	ldr	r3, [r1, #8]
   82fce:	6083      	str	r3, [r0, #8]
   82fd0:	68cb      	ldr	r3, [r1, #12]
   82fd2:	60c3      	str	r3, [r0, #12]
   82fd4:	3010      	adds	r0, #16
   82fd6:	3110      	adds	r1, #16
   82fd8:	3a10      	subs	r2, #16
   82fda:	d2f3      	bcs.n	82fc4 <memcpy+0x5c>
   82fdc:	320c      	adds	r2, #12
   82fde:	d305      	bcc.n	82fec <memcpy+0x84>
   82fe0:	f851 3b04 	ldr.w	r3, [r1], #4
   82fe4:	f840 3b04 	str.w	r3, [r0], #4
   82fe8:	3a04      	subs	r2, #4
   82fea:	d2f9      	bcs.n	82fe0 <memcpy+0x78>
   82fec:	3204      	adds	r2, #4
   82fee:	d008      	beq.n	83002 <memcpy+0x9a>
   82ff0:	07d2      	lsls	r2, r2, #31
   82ff2:	bf1c      	itt	ne
   82ff4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82ff8:	f800 3b01 	strbne.w	r3, [r0], #1
   82ffc:	d301      	bcc.n	83002 <memcpy+0x9a>
   82ffe:	880b      	ldrh	r3, [r1, #0]
   83000:	8003      	strh	r3, [r0, #0]
   83002:	4660      	mov	r0, ip
   83004:	4770      	bx	lr
   83006:	bf00      	nop
   83008:	2a08      	cmp	r2, #8
   8300a:	d313      	bcc.n	83034 <memcpy+0xcc>
   8300c:	078b      	lsls	r3, r1, #30
   8300e:	d0b1      	beq.n	82f74 <memcpy+0xc>
   83010:	f010 0303 	ands.w	r3, r0, #3
   83014:	d0ae      	beq.n	82f74 <memcpy+0xc>
   83016:	f1c3 0304 	rsb	r3, r3, #4
   8301a:	1ad2      	subs	r2, r2, r3
   8301c:	07db      	lsls	r3, r3, #31
   8301e:	bf1c      	itt	ne
   83020:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83024:	f800 3b01 	strbne.w	r3, [r0], #1
   83028:	d3a4      	bcc.n	82f74 <memcpy+0xc>
   8302a:	f831 3b02 	ldrh.w	r3, [r1], #2
   8302e:	f820 3b02 	strh.w	r3, [r0], #2
   83032:	e79f      	b.n	82f74 <memcpy+0xc>
   83034:	3a04      	subs	r2, #4
   83036:	d3d9      	bcc.n	82fec <memcpy+0x84>
   83038:	3a01      	subs	r2, #1
   8303a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8303e:	f800 3b01 	strb.w	r3, [r0], #1
   83042:	d2f9      	bcs.n	83038 <memcpy+0xd0>
   83044:	780b      	ldrb	r3, [r1, #0]
   83046:	7003      	strb	r3, [r0, #0]
   83048:	784b      	ldrb	r3, [r1, #1]
   8304a:	7043      	strb	r3, [r0, #1]
   8304c:	788b      	ldrb	r3, [r1, #2]
   8304e:	7083      	strb	r3, [r0, #2]
   83050:	4660      	mov	r0, ip
   83052:	4770      	bx	lr

00083054 <memmove>:
   83054:	4288      	cmp	r0, r1
   83056:	b4f0      	push	{r4, r5, r6, r7}
   83058:	d910      	bls.n	8307c <memmove+0x28>
   8305a:	188c      	adds	r4, r1, r2
   8305c:	42a0      	cmp	r0, r4
   8305e:	d20d      	bcs.n	8307c <memmove+0x28>
   83060:	1885      	adds	r5, r0, r2
   83062:	1e53      	subs	r3, r2, #1
   83064:	b142      	cbz	r2, 83078 <memmove+0x24>
   83066:	4621      	mov	r1, r4
   83068:	462a      	mov	r2, r5
   8306a:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   8306e:	3b01      	subs	r3, #1
   83070:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83074:	1c5c      	adds	r4, r3, #1
   83076:	d1f8      	bne.n	8306a <memmove+0x16>
   83078:	bcf0      	pop	{r4, r5, r6, r7}
   8307a:	4770      	bx	lr
   8307c:	2a0f      	cmp	r2, #15
   8307e:	d944      	bls.n	8310a <memmove+0xb6>
   83080:	ea40 0301 	orr.w	r3, r0, r1
   83084:	079b      	lsls	r3, r3, #30
   83086:	d144      	bne.n	83112 <memmove+0xbe>
   83088:	f1a2 0710 	sub.w	r7, r2, #16
   8308c:	093f      	lsrs	r7, r7, #4
   8308e:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   83092:	3610      	adds	r6, #16
   83094:	460c      	mov	r4, r1
   83096:	4603      	mov	r3, r0
   83098:	6825      	ldr	r5, [r4, #0]
   8309a:	3310      	adds	r3, #16
   8309c:	f843 5c10 	str.w	r5, [r3, #-16]
   830a0:	6865      	ldr	r5, [r4, #4]
   830a2:	3410      	adds	r4, #16
   830a4:	f843 5c0c 	str.w	r5, [r3, #-12]
   830a8:	f854 5c08 	ldr.w	r5, [r4, #-8]
   830ac:	f843 5c08 	str.w	r5, [r3, #-8]
   830b0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   830b4:	f843 5c04 	str.w	r5, [r3, #-4]
   830b8:	42b3      	cmp	r3, r6
   830ba:	d1ed      	bne.n	83098 <memmove+0x44>
   830bc:	1c7b      	adds	r3, r7, #1
   830be:	f002 0c0f 	and.w	ip, r2, #15
   830c2:	011b      	lsls	r3, r3, #4
   830c4:	f1bc 0f03 	cmp.w	ip, #3
   830c8:	4419      	add	r1, r3
   830ca:	4403      	add	r3, r0
   830cc:	d923      	bls.n	83116 <memmove+0xc2>
   830ce:	460e      	mov	r6, r1
   830d0:	461d      	mov	r5, r3
   830d2:	4664      	mov	r4, ip
   830d4:	f856 7b04 	ldr.w	r7, [r6], #4
   830d8:	3c04      	subs	r4, #4
   830da:	2c03      	cmp	r4, #3
   830dc:	f845 7b04 	str.w	r7, [r5], #4
   830e0:	d8f8      	bhi.n	830d4 <memmove+0x80>
   830e2:	f1ac 0404 	sub.w	r4, ip, #4
   830e6:	f024 0403 	bic.w	r4, r4, #3
   830ea:	3404      	adds	r4, #4
   830ec:	f002 0203 	and.w	r2, r2, #3
   830f0:	4423      	add	r3, r4
   830f2:	4421      	add	r1, r4
   830f4:	2a00      	cmp	r2, #0
   830f6:	d0bf      	beq.n	83078 <memmove+0x24>
   830f8:	441a      	add	r2, r3
   830fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   830fe:	f803 4b01 	strb.w	r4, [r3], #1
   83102:	4293      	cmp	r3, r2
   83104:	d1f9      	bne.n	830fa <memmove+0xa6>
   83106:	bcf0      	pop	{r4, r5, r6, r7}
   83108:	4770      	bx	lr
   8310a:	4603      	mov	r3, r0
   8310c:	2a00      	cmp	r2, #0
   8310e:	d1f3      	bne.n	830f8 <memmove+0xa4>
   83110:	e7b2      	b.n	83078 <memmove+0x24>
   83112:	4603      	mov	r3, r0
   83114:	e7f0      	b.n	830f8 <memmove+0xa4>
   83116:	4662      	mov	r2, ip
   83118:	2a00      	cmp	r2, #0
   8311a:	d1ed      	bne.n	830f8 <memmove+0xa4>
   8311c:	e7ac      	b.n	83078 <memmove+0x24>
   8311e:	bf00      	nop

00083120 <__malloc_lock>:
   83120:	4770      	bx	lr
   83122:	bf00      	nop

00083124 <__malloc_unlock>:
   83124:	4770      	bx	lr
   83126:	bf00      	nop

00083128 <_realloc_r>:
   83128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8312c:	460c      	mov	r4, r1
   8312e:	b083      	sub	sp, #12
   83130:	4690      	mov	r8, r2
   83132:	4681      	mov	r9, r0
   83134:	2900      	cmp	r1, #0
   83136:	f000 80ba 	beq.w	832ae <_realloc_r+0x186>
   8313a:	f7ff fff1 	bl	83120 <__malloc_lock>
   8313e:	f108 060b 	add.w	r6, r8, #11
   83142:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83146:	2e16      	cmp	r6, #22
   83148:	f023 0503 	bic.w	r5, r3, #3
   8314c:	f1a4 0708 	sub.w	r7, r4, #8
   83150:	d84b      	bhi.n	831ea <_realloc_r+0xc2>
   83152:	2110      	movs	r1, #16
   83154:	460e      	mov	r6, r1
   83156:	45b0      	cmp	r8, r6
   83158:	d84c      	bhi.n	831f4 <_realloc_r+0xcc>
   8315a:	428d      	cmp	r5, r1
   8315c:	da51      	bge.n	83202 <_realloc_r+0xda>
   8315e:	f8df b384 	ldr.w	fp, [pc, #900]	; 834e4 <_realloc_r+0x3bc>
   83162:	1978      	adds	r0, r7, r5
   83164:	f8db e008 	ldr.w	lr, [fp, #8]
   83168:	4586      	cmp	lr, r0
   8316a:	f000 80a6 	beq.w	832ba <_realloc_r+0x192>
   8316e:	6842      	ldr	r2, [r0, #4]
   83170:	f022 0c01 	bic.w	ip, r2, #1
   83174:	4484      	add	ip, r0
   83176:	f8dc c004 	ldr.w	ip, [ip, #4]
   8317a:	f01c 0f01 	tst.w	ip, #1
   8317e:	d054      	beq.n	8322a <_realloc_r+0x102>
   83180:	2200      	movs	r2, #0
   83182:	4610      	mov	r0, r2
   83184:	07db      	lsls	r3, r3, #31
   83186:	d46f      	bmi.n	83268 <_realloc_r+0x140>
   83188:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8318c:	ebc3 0a07 	rsb	sl, r3, r7
   83190:	f8da 3004 	ldr.w	r3, [sl, #4]
   83194:	f023 0303 	bic.w	r3, r3, #3
   83198:	442b      	add	r3, r5
   8319a:	2800      	cmp	r0, #0
   8319c:	d062      	beq.n	83264 <_realloc_r+0x13c>
   8319e:	4570      	cmp	r0, lr
   831a0:	f000 80e9 	beq.w	83376 <_realloc_r+0x24e>
   831a4:	eb02 0e03 	add.w	lr, r2, r3
   831a8:	458e      	cmp	lr, r1
   831aa:	db5b      	blt.n	83264 <_realloc_r+0x13c>
   831ac:	68c3      	ldr	r3, [r0, #12]
   831ae:	6882      	ldr	r2, [r0, #8]
   831b0:	46d0      	mov	r8, sl
   831b2:	60d3      	str	r3, [r2, #12]
   831b4:	609a      	str	r2, [r3, #8]
   831b6:	f858 1f08 	ldr.w	r1, [r8, #8]!
   831ba:	f8da 300c 	ldr.w	r3, [sl, #12]
   831be:	1f2a      	subs	r2, r5, #4
   831c0:	2a24      	cmp	r2, #36	; 0x24
   831c2:	60cb      	str	r3, [r1, #12]
   831c4:	6099      	str	r1, [r3, #8]
   831c6:	f200 8123 	bhi.w	83410 <_realloc_r+0x2e8>
   831ca:	2a13      	cmp	r2, #19
   831cc:	f240 80b0 	bls.w	83330 <_realloc_r+0x208>
   831d0:	6823      	ldr	r3, [r4, #0]
   831d2:	2a1b      	cmp	r2, #27
   831d4:	f8ca 3008 	str.w	r3, [sl, #8]
   831d8:	6863      	ldr	r3, [r4, #4]
   831da:	f8ca 300c 	str.w	r3, [sl, #12]
   831de:	f200 812b 	bhi.w	83438 <_realloc_r+0x310>
   831e2:	3408      	adds	r4, #8
   831e4:	f10a 0310 	add.w	r3, sl, #16
   831e8:	e0a3      	b.n	83332 <_realloc_r+0x20a>
   831ea:	f026 0607 	bic.w	r6, r6, #7
   831ee:	2e00      	cmp	r6, #0
   831f0:	4631      	mov	r1, r6
   831f2:	dab0      	bge.n	83156 <_realloc_r+0x2e>
   831f4:	230c      	movs	r3, #12
   831f6:	2000      	movs	r0, #0
   831f8:	f8c9 3000 	str.w	r3, [r9]
   831fc:	b003      	add	sp, #12
   831fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83202:	46a0      	mov	r8, r4
   83204:	1baa      	subs	r2, r5, r6
   83206:	2a0f      	cmp	r2, #15
   83208:	f003 0301 	and.w	r3, r3, #1
   8320c:	d81a      	bhi.n	83244 <_realloc_r+0x11c>
   8320e:	432b      	orrs	r3, r5
   83210:	607b      	str	r3, [r7, #4]
   83212:	443d      	add	r5, r7
   83214:	686b      	ldr	r3, [r5, #4]
   83216:	f043 0301 	orr.w	r3, r3, #1
   8321a:	606b      	str	r3, [r5, #4]
   8321c:	4648      	mov	r0, r9
   8321e:	f7ff ff81 	bl	83124 <__malloc_unlock>
   83222:	4640      	mov	r0, r8
   83224:	b003      	add	sp, #12
   83226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8322a:	f022 0203 	bic.w	r2, r2, #3
   8322e:	eb02 0c05 	add.w	ip, r2, r5
   83232:	458c      	cmp	ip, r1
   83234:	dba6      	blt.n	83184 <_realloc_r+0x5c>
   83236:	68c2      	ldr	r2, [r0, #12]
   83238:	6881      	ldr	r1, [r0, #8]
   8323a:	46a0      	mov	r8, r4
   8323c:	60ca      	str	r2, [r1, #12]
   8323e:	4665      	mov	r5, ip
   83240:	6091      	str	r1, [r2, #8]
   83242:	e7df      	b.n	83204 <_realloc_r+0xdc>
   83244:	19b9      	adds	r1, r7, r6
   83246:	4333      	orrs	r3, r6
   83248:	f042 0001 	orr.w	r0, r2, #1
   8324c:	607b      	str	r3, [r7, #4]
   8324e:	440a      	add	r2, r1
   83250:	6048      	str	r0, [r1, #4]
   83252:	6853      	ldr	r3, [r2, #4]
   83254:	3108      	adds	r1, #8
   83256:	f043 0301 	orr.w	r3, r3, #1
   8325a:	6053      	str	r3, [r2, #4]
   8325c:	4648      	mov	r0, r9
   8325e:	f7ff f89f 	bl	823a0 <_free_r>
   83262:	e7db      	b.n	8321c <_realloc_r+0xf4>
   83264:	428b      	cmp	r3, r1
   83266:	da33      	bge.n	832d0 <_realloc_r+0x1a8>
   83268:	4641      	mov	r1, r8
   8326a:	4648      	mov	r0, r9
   8326c:	f7ff fb96 	bl	8299c <_malloc_r>
   83270:	4680      	mov	r8, r0
   83272:	2800      	cmp	r0, #0
   83274:	d0d2      	beq.n	8321c <_realloc_r+0xf4>
   83276:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8327a:	f1a0 0108 	sub.w	r1, r0, #8
   8327e:	f023 0201 	bic.w	r2, r3, #1
   83282:	443a      	add	r2, r7
   83284:	4291      	cmp	r1, r2
   83286:	f000 80bc 	beq.w	83402 <_realloc_r+0x2da>
   8328a:	1f2a      	subs	r2, r5, #4
   8328c:	2a24      	cmp	r2, #36	; 0x24
   8328e:	d86e      	bhi.n	8336e <_realloc_r+0x246>
   83290:	2a13      	cmp	r2, #19
   83292:	d842      	bhi.n	8331a <_realloc_r+0x1f2>
   83294:	4603      	mov	r3, r0
   83296:	4622      	mov	r2, r4
   83298:	6811      	ldr	r1, [r2, #0]
   8329a:	6019      	str	r1, [r3, #0]
   8329c:	6851      	ldr	r1, [r2, #4]
   8329e:	6059      	str	r1, [r3, #4]
   832a0:	6892      	ldr	r2, [r2, #8]
   832a2:	609a      	str	r2, [r3, #8]
   832a4:	4621      	mov	r1, r4
   832a6:	4648      	mov	r0, r9
   832a8:	f7ff f87a 	bl	823a0 <_free_r>
   832ac:	e7b6      	b.n	8321c <_realloc_r+0xf4>
   832ae:	4611      	mov	r1, r2
   832b0:	b003      	add	sp, #12
   832b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   832b6:	f7ff bb71 	b.w	8299c <_malloc_r>
   832ba:	f8de 2004 	ldr.w	r2, [lr, #4]
   832be:	f106 0c10 	add.w	ip, r6, #16
   832c2:	f022 0203 	bic.w	r2, r2, #3
   832c6:	1950      	adds	r0, r2, r5
   832c8:	4560      	cmp	r0, ip
   832ca:	da3d      	bge.n	83348 <_realloc_r+0x220>
   832cc:	4670      	mov	r0, lr
   832ce:	e759      	b.n	83184 <_realloc_r+0x5c>
   832d0:	46d0      	mov	r8, sl
   832d2:	f858 0f08 	ldr.w	r0, [r8, #8]!
   832d6:	f8da 100c 	ldr.w	r1, [sl, #12]
   832da:	1f2a      	subs	r2, r5, #4
   832dc:	2a24      	cmp	r2, #36	; 0x24
   832de:	60c1      	str	r1, [r0, #12]
   832e0:	6088      	str	r0, [r1, #8]
   832e2:	f200 80a0 	bhi.w	83426 <_realloc_r+0x2fe>
   832e6:	2a13      	cmp	r2, #19
   832e8:	f240 809b 	bls.w	83422 <_realloc_r+0x2fa>
   832ec:	6821      	ldr	r1, [r4, #0]
   832ee:	2a1b      	cmp	r2, #27
   832f0:	f8ca 1008 	str.w	r1, [sl, #8]
   832f4:	6861      	ldr	r1, [r4, #4]
   832f6:	f8ca 100c 	str.w	r1, [sl, #12]
   832fa:	f200 80b2 	bhi.w	83462 <_realloc_r+0x33a>
   832fe:	3408      	adds	r4, #8
   83300:	f10a 0210 	add.w	r2, sl, #16
   83304:	6821      	ldr	r1, [r4, #0]
   83306:	461d      	mov	r5, r3
   83308:	6011      	str	r1, [r2, #0]
   8330a:	6861      	ldr	r1, [r4, #4]
   8330c:	4657      	mov	r7, sl
   8330e:	6051      	str	r1, [r2, #4]
   83310:	68a3      	ldr	r3, [r4, #8]
   83312:	6093      	str	r3, [r2, #8]
   83314:	f8da 3004 	ldr.w	r3, [sl, #4]
   83318:	e774      	b.n	83204 <_realloc_r+0xdc>
   8331a:	6823      	ldr	r3, [r4, #0]
   8331c:	2a1b      	cmp	r2, #27
   8331e:	6003      	str	r3, [r0, #0]
   83320:	6863      	ldr	r3, [r4, #4]
   83322:	6043      	str	r3, [r0, #4]
   83324:	d862      	bhi.n	833ec <_realloc_r+0x2c4>
   83326:	f100 0308 	add.w	r3, r0, #8
   8332a:	f104 0208 	add.w	r2, r4, #8
   8332e:	e7b3      	b.n	83298 <_realloc_r+0x170>
   83330:	4643      	mov	r3, r8
   83332:	6822      	ldr	r2, [r4, #0]
   83334:	4675      	mov	r5, lr
   83336:	601a      	str	r2, [r3, #0]
   83338:	6862      	ldr	r2, [r4, #4]
   8333a:	4657      	mov	r7, sl
   8333c:	605a      	str	r2, [r3, #4]
   8333e:	68a2      	ldr	r2, [r4, #8]
   83340:	609a      	str	r2, [r3, #8]
   83342:	f8da 3004 	ldr.w	r3, [sl, #4]
   83346:	e75d      	b.n	83204 <_realloc_r+0xdc>
   83348:	1b83      	subs	r3, r0, r6
   8334a:	4437      	add	r7, r6
   8334c:	f043 0301 	orr.w	r3, r3, #1
   83350:	f8cb 7008 	str.w	r7, [fp, #8]
   83354:	607b      	str	r3, [r7, #4]
   83356:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8335a:	4648      	mov	r0, r9
   8335c:	f003 0301 	and.w	r3, r3, #1
   83360:	431e      	orrs	r6, r3
   83362:	f844 6c04 	str.w	r6, [r4, #-4]
   83366:	f7ff fedd 	bl	83124 <__malloc_unlock>
   8336a:	4620      	mov	r0, r4
   8336c:	e75a      	b.n	83224 <_realloc_r+0xfc>
   8336e:	4621      	mov	r1, r4
   83370:	f7ff fe70 	bl	83054 <memmove>
   83374:	e796      	b.n	832a4 <_realloc_r+0x17c>
   83376:	eb02 0c03 	add.w	ip, r2, r3
   8337a:	f106 0210 	add.w	r2, r6, #16
   8337e:	4594      	cmp	ip, r2
   83380:	f6ff af70 	blt.w	83264 <_realloc_r+0x13c>
   83384:	4657      	mov	r7, sl
   83386:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8338a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8338e:	1f2a      	subs	r2, r5, #4
   83390:	2a24      	cmp	r2, #36	; 0x24
   83392:	60cb      	str	r3, [r1, #12]
   83394:	6099      	str	r1, [r3, #8]
   83396:	f200 8086 	bhi.w	834a6 <_realloc_r+0x37e>
   8339a:	2a13      	cmp	r2, #19
   8339c:	d977      	bls.n	8348e <_realloc_r+0x366>
   8339e:	6823      	ldr	r3, [r4, #0]
   833a0:	2a1b      	cmp	r2, #27
   833a2:	f8ca 3008 	str.w	r3, [sl, #8]
   833a6:	6863      	ldr	r3, [r4, #4]
   833a8:	f8ca 300c 	str.w	r3, [sl, #12]
   833ac:	f200 8084 	bhi.w	834b8 <_realloc_r+0x390>
   833b0:	3408      	adds	r4, #8
   833b2:	f10a 0310 	add.w	r3, sl, #16
   833b6:	6822      	ldr	r2, [r4, #0]
   833b8:	601a      	str	r2, [r3, #0]
   833ba:	6862      	ldr	r2, [r4, #4]
   833bc:	605a      	str	r2, [r3, #4]
   833be:	68a2      	ldr	r2, [r4, #8]
   833c0:	609a      	str	r2, [r3, #8]
   833c2:	ebc6 020c 	rsb	r2, r6, ip
   833c6:	eb0a 0306 	add.w	r3, sl, r6
   833ca:	f042 0201 	orr.w	r2, r2, #1
   833ce:	f8cb 3008 	str.w	r3, [fp, #8]
   833d2:	605a      	str	r2, [r3, #4]
   833d4:	f8da 3004 	ldr.w	r3, [sl, #4]
   833d8:	4648      	mov	r0, r9
   833da:	f003 0301 	and.w	r3, r3, #1
   833de:	431e      	orrs	r6, r3
   833e0:	f8ca 6004 	str.w	r6, [sl, #4]
   833e4:	f7ff fe9e 	bl	83124 <__malloc_unlock>
   833e8:	4638      	mov	r0, r7
   833ea:	e71b      	b.n	83224 <_realloc_r+0xfc>
   833ec:	68a3      	ldr	r3, [r4, #8]
   833ee:	2a24      	cmp	r2, #36	; 0x24
   833f0:	6083      	str	r3, [r0, #8]
   833f2:	68e3      	ldr	r3, [r4, #12]
   833f4:	60c3      	str	r3, [r0, #12]
   833f6:	d02b      	beq.n	83450 <_realloc_r+0x328>
   833f8:	f100 0310 	add.w	r3, r0, #16
   833fc:	f104 0210 	add.w	r2, r4, #16
   83400:	e74a      	b.n	83298 <_realloc_r+0x170>
   83402:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83406:	46a0      	mov	r8, r4
   83408:	f022 0203 	bic.w	r2, r2, #3
   8340c:	4415      	add	r5, r2
   8340e:	e6f9      	b.n	83204 <_realloc_r+0xdc>
   83410:	4621      	mov	r1, r4
   83412:	4640      	mov	r0, r8
   83414:	4675      	mov	r5, lr
   83416:	4657      	mov	r7, sl
   83418:	f7ff fe1c 	bl	83054 <memmove>
   8341c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83420:	e6f0      	b.n	83204 <_realloc_r+0xdc>
   83422:	4642      	mov	r2, r8
   83424:	e76e      	b.n	83304 <_realloc_r+0x1dc>
   83426:	4621      	mov	r1, r4
   83428:	4640      	mov	r0, r8
   8342a:	461d      	mov	r5, r3
   8342c:	4657      	mov	r7, sl
   8342e:	f7ff fe11 	bl	83054 <memmove>
   83432:	f8da 3004 	ldr.w	r3, [sl, #4]
   83436:	e6e5      	b.n	83204 <_realloc_r+0xdc>
   83438:	68a3      	ldr	r3, [r4, #8]
   8343a:	2a24      	cmp	r2, #36	; 0x24
   8343c:	f8ca 3010 	str.w	r3, [sl, #16]
   83440:	68e3      	ldr	r3, [r4, #12]
   83442:	f8ca 3014 	str.w	r3, [sl, #20]
   83446:	d018      	beq.n	8347a <_realloc_r+0x352>
   83448:	3410      	adds	r4, #16
   8344a:	f10a 0318 	add.w	r3, sl, #24
   8344e:	e770      	b.n	83332 <_realloc_r+0x20a>
   83450:	6922      	ldr	r2, [r4, #16]
   83452:	f100 0318 	add.w	r3, r0, #24
   83456:	6102      	str	r2, [r0, #16]
   83458:	6961      	ldr	r1, [r4, #20]
   8345a:	f104 0218 	add.w	r2, r4, #24
   8345e:	6141      	str	r1, [r0, #20]
   83460:	e71a      	b.n	83298 <_realloc_r+0x170>
   83462:	68a1      	ldr	r1, [r4, #8]
   83464:	2a24      	cmp	r2, #36	; 0x24
   83466:	f8ca 1010 	str.w	r1, [sl, #16]
   8346a:	68e1      	ldr	r1, [r4, #12]
   8346c:	f8ca 1014 	str.w	r1, [sl, #20]
   83470:	d00f      	beq.n	83492 <_realloc_r+0x36a>
   83472:	3410      	adds	r4, #16
   83474:	f10a 0218 	add.w	r2, sl, #24
   83478:	e744      	b.n	83304 <_realloc_r+0x1dc>
   8347a:	6922      	ldr	r2, [r4, #16]
   8347c:	f10a 0320 	add.w	r3, sl, #32
   83480:	f8ca 2018 	str.w	r2, [sl, #24]
   83484:	6962      	ldr	r2, [r4, #20]
   83486:	3418      	adds	r4, #24
   83488:	f8ca 201c 	str.w	r2, [sl, #28]
   8348c:	e751      	b.n	83332 <_realloc_r+0x20a>
   8348e:	463b      	mov	r3, r7
   83490:	e791      	b.n	833b6 <_realloc_r+0x28e>
   83492:	6921      	ldr	r1, [r4, #16]
   83494:	f10a 0220 	add.w	r2, sl, #32
   83498:	f8ca 1018 	str.w	r1, [sl, #24]
   8349c:	6961      	ldr	r1, [r4, #20]
   8349e:	3418      	adds	r4, #24
   834a0:	f8ca 101c 	str.w	r1, [sl, #28]
   834a4:	e72e      	b.n	83304 <_realloc_r+0x1dc>
   834a6:	4621      	mov	r1, r4
   834a8:	4638      	mov	r0, r7
   834aa:	f8cd c004 	str.w	ip, [sp, #4]
   834ae:	f7ff fdd1 	bl	83054 <memmove>
   834b2:	f8dd c004 	ldr.w	ip, [sp, #4]
   834b6:	e784      	b.n	833c2 <_realloc_r+0x29a>
   834b8:	68a3      	ldr	r3, [r4, #8]
   834ba:	2a24      	cmp	r2, #36	; 0x24
   834bc:	f8ca 3010 	str.w	r3, [sl, #16]
   834c0:	68e3      	ldr	r3, [r4, #12]
   834c2:	f8ca 3014 	str.w	r3, [sl, #20]
   834c6:	d003      	beq.n	834d0 <_realloc_r+0x3a8>
   834c8:	3410      	adds	r4, #16
   834ca:	f10a 0318 	add.w	r3, sl, #24
   834ce:	e772      	b.n	833b6 <_realloc_r+0x28e>
   834d0:	6922      	ldr	r2, [r4, #16]
   834d2:	f10a 0320 	add.w	r3, sl, #32
   834d6:	f8ca 2018 	str.w	r2, [sl, #24]
   834da:	6962      	ldr	r2, [r4, #20]
   834dc:	3418      	adds	r4, #24
   834de:	f8ca 201c 	str.w	r2, [sl, #28]
   834e2:	e768      	b.n	833b6 <_realloc_r+0x28e>
   834e4:	20070590 	.word	0x20070590

000834e8 <_sbrk_r>:
   834e8:	b538      	push	{r3, r4, r5, lr}
   834ea:	4c07      	ldr	r4, [pc, #28]	; (83508 <_sbrk_r+0x20>)
   834ec:	2300      	movs	r3, #0
   834ee:	4605      	mov	r5, r0
   834f0:	4608      	mov	r0, r1
   834f2:	6023      	str	r3, [r4, #0]
   834f4:	f7fd fcd4 	bl	80ea0 <_sbrk>
   834f8:	1c43      	adds	r3, r0, #1
   834fa:	d000      	beq.n	834fe <_sbrk_r+0x16>
   834fc:	bd38      	pop	{r3, r4, r5, pc}
   834fe:	6823      	ldr	r3, [r4, #0]
   83500:	2b00      	cmp	r3, #0
   83502:	d0fb      	beq.n	834fc <_sbrk_r+0x14>
   83504:	602b      	str	r3, [r5, #0]
   83506:	bd38      	pop	{r3, r4, r5, pc}
   83508:	20070b6c 	.word	0x20070b6c

0008350c <__sread>:
   8350c:	b510      	push	{r4, lr}
   8350e:	460c      	mov	r4, r1
   83510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83514:	f000 f9c2 	bl	8389c <_read_r>
   83518:	2800      	cmp	r0, #0
   8351a:	db03      	blt.n	83524 <__sread+0x18>
   8351c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8351e:	4403      	add	r3, r0
   83520:	6523      	str	r3, [r4, #80]	; 0x50
   83522:	bd10      	pop	{r4, pc}
   83524:	89a3      	ldrh	r3, [r4, #12]
   83526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8352a:	81a3      	strh	r3, [r4, #12]
   8352c:	bd10      	pop	{r4, pc}
   8352e:	bf00      	nop

00083530 <__swrite>:
   83530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83534:	460c      	mov	r4, r1
   83536:	8989      	ldrh	r1, [r1, #12]
   83538:	461d      	mov	r5, r3
   8353a:	05cb      	lsls	r3, r1, #23
   8353c:	4616      	mov	r6, r2
   8353e:	4607      	mov	r7, r0
   83540:	d506      	bpl.n	83550 <__swrite+0x20>
   83542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83546:	2200      	movs	r2, #0
   83548:	2302      	movs	r3, #2
   8354a:	f000 f993 	bl	83874 <_lseek_r>
   8354e:	89a1      	ldrh	r1, [r4, #12]
   83550:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83554:	81a1      	strh	r1, [r4, #12]
   83556:	4638      	mov	r0, r7
   83558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8355c:	4632      	mov	r2, r6
   8355e:	462b      	mov	r3, r5
   83560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83564:	f000 b89e 	b.w	836a4 <_write_r>

00083568 <__sseek>:
   83568:	b510      	push	{r4, lr}
   8356a:	460c      	mov	r4, r1
   8356c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83570:	f000 f980 	bl	83874 <_lseek_r>
   83574:	89a3      	ldrh	r3, [r4, #12]
   83576:	1c42      	adds	r2, r0, #1
   83578:	bf0e      	itee	eq
   8357a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8357e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83582:	6520      	strne	r0, [r4, #80]	; 0x50
   83584:	81a3      	strh	r3, [r4, #12]
   83586:	bd10      	pop	{r4, pc}

00083588 <__sclose>:
   83588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8358c:	f000 b8f2 	b.w	83774 <_close_r>

00083590 <__swbuf_r>:
   83590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83592:	460d      	mov	r5, r1
   83594:	4614      	mov	r4, r2
   83596:	4607      	mov	r7, r0
   83598:	b110      	cbz	r0, 835a0 <__swbuf_r+0x10>
   8359a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8359c:	2b00      	cmp	r3, #0
   8359e:	d048      	beq.n	83632 <__swbuf_r+0xa2>
   835a0:	89a2      	ldrh	r2, [r4, #12]
   835a2:	69a0      	ldr	r0, [r4, #24]
   835a4:	b293      	uxth	r3, r2
   835a6:	60a0      	str	r0, [r4, #8]
   835a8:	0718      	lsls	r0, r3, #28
   835aa:	d538      	bpl.n	8361e <__swbuf_r+0x8e>
   835ac:	6926      	ldr	r6, [r4, #16]
   835ae:	2e00      	cmp	r6, #0
   835b0:	d035      	beq.n	8361e <__swbuf_r+0x8e>
   835b2:	0499      	lsls	r1, r3, #18
   835b4:	b2ed      	uxtb	r5, r5
   835b6:	d515      	bpl.n	835e4 <__swbuf_r+0x54>
   835b8:	6823      	ldr	r3, [r4, #0]
   835ba:	6962      	ldr	r2, [r4, #20]
   835bc:	1b9e      	subs	r6, r3, r6
   835be:	4296      	cmp	r6, r2
   835c0:	da1c      	bge.n	835fc <__swbuf_r+0x6c>
   835c2:	3601      	adds	r6, #1
   835c4:	68a2      	ldr	r2, [r4, #8]
   835c6:	1c59      	adds	r1, r3, #1
   835c8:	3a01      	subs	r2, #1
   835ca:	60a2      	str	r2, [r4, #8]
   835cc:	6021      	str	r1, [r4, #0]
   835ce:	701d      	strb	r5, [r3, #0]
   835d0:	6963      	ldr	r3, [r4, #20]
   835d2:	42b3      	cmp	r3, r6
   835d4:	d01a      	beq.n	8360c <__swbuf_r+0x7c>
   835d6:	89a3      	ldrh	r3, [r4, #12]
   835d8:	07db      	lsls	r3, r3, #31
   835da:	d501      	bpl.n	835e0 <__swbuf_r+0x50>
   835dc:	2d0a      	cmp	r5, #10
   835de:	d015      	beq.n	8360c <__swbuf_r+0x7c>
   835e0:	4628      	mov	r0, r5
   835e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   835e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   835e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   835ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   835ee:	6663      	str	r3, [r4, #100]	; 0x64
   835f0:	6823      	ldr	r3, [r4, #0]
   835f2:	81a2      	strh	r2, [r4, #12]
   835f4:	6962      	ldr	r2, [r4, #20]
   835f6:	1b9e      	subs	r6, r3, r6
   835f8:	4296      	cmp	r6, r2
   835fa:	dbe2      	blt.n	835c2 <__swbuf_r+0x32>
   835fc:	4638      	mov	r0, r7
   835fe:	4621      	mov	r1, r4
   83600:	f7fe fd6e 	bl	820e0 <_fflush_r>
   83604:	b940      	cbnz	r0, 83618 <__swbuf_r+0x88>
   83606:	6823      	ldr	r3, [r4, #0]
   83608:	2601      	movs	r6, #1
   8360a:	e7db      	b.n	835c4 <__swbuf_r+0x34>
   8360c:	4638      	mov	r0, r7
   8360e:	4621      	mov	r1, r4
   83610:	f7fe fd66 	bl	820e0 <_fflush_r>
   83614:	2800      	cmp	r0, #0
   83616:	d0e3      	beq.n	835e0 <__swbuf_r+0x50>
   83618:	f04f 30ff 	mov.w	r0, #4294967295
   8361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8361e:	4638      	mov	r0, r7
   83620:	4621      	mov	r1, r4
   83622:	f7fe fc47 	bl	81eb4 <__swsetup_r>
   83626:	2800      	cmp	r0, #0
   83628:	d1f6      	bne.n	83618 <__swbuf_r+0x88>
   8362a:	89a2      	ldrh	r2, [r4, #12]
   8362c:	6926      	ldr	r6, [r4, #16]
   8362e:	b293      	uxth	r3, r2
   83630:	e7bf      	b.n	835b2 <__swbuf_r+0x22>
   83632:	f7fe fd71 	bl	82118 <__sinit>
   83636:	e7b3      	b.n	835a0 <__swbuf_r+0x10>

00083638 <_wcrtomb_r>:
   83638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8363c:	461e      	mov	r6, r3
   8363e:	b086      	sub	sp, #24
   83640:	460c      	mov	r4, r1
   83642:	4605      	mov	r5, r0
   83644:	4617      	mov	r7, r2
   83646:	4b0f      	ldr	r3, [pc, #60]	; (83684 <_wcrtomb_r+0x4c>)
   83648:	b191      	cbz	r1, 83670 <_wcrtomb_r+0x38>
   8364a:	f8d3 8000 	ldr.w	r8, [r3]
   8364e:	f7ff f923 	bl	82898 <__locale_charset>
   83652:	9600      	str	r6, [sp, #0]
   83654:	4603      	mov	r3, r0
   83656:	4621      	mov	r1, r4
   83658:	463a      	mov	r2, r7
   8365a:	4628      	mov	r0, r5
   8365c:	47c0      	blx	r8
   8365e:	1c43      	adds	r3, r0, #1
   83660:	d103      	bne.n	8366a <_wcrtomb_r+0x32>
   83662:	2200      	movs	r2, #0
   83664:	238a      	movs	r3, #138	; 0x8a
   83666:	6032      	str	r2, [r6, #0]
   83668:	602b      	str	r3, [r5, #0]
   8366a:	b006      	add	sp, #24
   8366c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83670:	681f      	ldr	r7, [r3, #0]
   83672:	f7ff f911 	bl	82898 <__locale_charset>
   83676:	9600      	str	r6, [sp, #0]
   83678:	4603      	mov	r3, r0
   8367a:	4622      	mov	r2, r4
   8367c:	4628      	mov	r0, r5
   8367e:	a903      	add	r1, sp, #12
   83680:	47b8      	blx	r7
   83682:	e7ec      	b.n	8365e <_wcrtomb_r+0x26>
   83684:	200709a0 	.word	0x200709a0

00083688 <__ascii_wctomb>:
   83688:	b121      	cbz	r1, 83694 <__ascii_wctomb+0xc>
   8368a:	2aff      	cmp	r2, #255	; 0xff
   8368c:	d804      	bhi.n	83698 <__ascii_wctomb+0x10>
   8368e:	700a      	strb	r2, [r1, #0]
   83690:	2001      	movs	r0, #1
   83692:	4770      	bx	lr
   83694:	4608      	mov	r0, r1
   83696:	4770      	bx	lr
   83698:	238a      	movs	r3, #138	; 0x8a
   8369a:	6003      	str	r3, [r0, #0]
   8369c:	f04f 30ff 	mov.w	r0, #4294967295
   836a0:	4770      	bx	lr
   836a2:	bf00      	nop

000836a4 <_write_r>:
   836a4:	b570      	push	{r4, r5, r6, lr}
   836a6:	4c08      	ldr	r4, [pc, #32]	; (836c8 <_write_r+0x24>)
   836a8:	4606      	mov	r6, r0
   836aa:	2500      	movs	r5, #0
   836ac:	4608      	mov	r0, r1
   836ae:	4611      	mov	r1, r2
   836b0:	461a      	mov	r2, r3
   836b2:	6025      	str	r5, [r4, #0]
   836b4:	f7fc fdfe 	bl	802b4 <_write>
   836b8:	1c43      	adds	r3, r0, #1
   836ba:	d000      	beq.n	836be <_write_r+0x1a>
   836bc:	bd70      	pop	{r4, r5, r6, pc}
   836be:	6823      	ldr	r3, [r4, #0]
   836c0:	2b00      	cmp	r3, #0
   836c2:	d0fb      	beq.n	836bc <_write_r+0x18>
   836c4:	6033      	str	r3, [r6, #0]
   836c6:	bd70      	pop	{r4, r5, r6, pc}
   836c8:	20070b6c 	.word	0x20070b6c

000836cc <__register_exitproc>:
   836cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   836ce:	4c27      	ldr	r4, [pc, #156]	; (8376c <__register_exitproc+0xa0>)
   836d0:	b085      	sub	sp, #20
   836d2:	6826      	ldr	r6, [r4, #0]
   836d4:	4607      	mov	r7, r0
   836d6:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   836da:	2c00      	cmp	r4, #0
   836dc:	d040      	beq.n	83760 <__register_exitproc+0x94>
   836de:	6865      	ldr	r5, [r4, #4]
   836e0:	2d1f      	cmp	r5, #31
   836e2:	dd1e      	ble.n	83722 <__register_exitproc+0x56>
   836e4:	4822      	ldr	r0, [pc, #136]	; (83770 <__register_exitproc+0xa4>)
   836e6:	b918      	cbnz	r0, 836f0 <__register_exitproc+0x24>
   836e8:	f04f 30ff 	mov.w	r0, #4294967295
   836ec:	b005      	add	sp, #20
   836ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   836f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   836f4:	9103      	str	r1, [sp, #12]
   836f6:	9202      	str	r2, [sp, #8]
   836f8:	9301      	str	r3, [sp, #4]
   836fa:	f7ff f947 	bl	8298c <malloc>
   836fe:	9903      	ldr	r1, [sp, #12]
   83700:	4604      	mov	r4, r0
   83702:	9a02      	ldr	r2, [sp, #8]
   83704:	9b01      	ldr	r3, [sp, #4]
   83706:	2800      	cmp	r0, #0
   83708:	d0ee      	beq.n	836e8 <__register_exitproc+0x1c>
   8370a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8370e:	2000      	movs	r0, #0
   83710:	6025      	str	r5, [r4, #0]
   83712:	6060      	str	r0, [r4, #4]
   83714:	4605      	mov	r5, r0
   83716:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8371a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8371e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83722:	b93f      	cbnz	r7, 83734 <__register_exitproc+0x68>
   83724:	1c6b      	adds	r3, r5, #1
   83726:	2000      	movs	r0, #0
   83728:	3502      	adds	r5, #2
   8372a:	6063      	str	r3, [r4, #4]
   8372c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83730:	b005      	add	sp, #20
   83732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83734:	2601      	movs	r6, #1
   83736:	40ae      	lsls	r6, r5
   83738:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   8373c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83740:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83744:	2f02      	cmp	r7, #2
   83746:	ea42 0206 	orr.w	r2, r2, r6
   8374a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8374e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83752:	d1e7      	bne.n	83724 <__register_exitproc+0x58>
   83754:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83758:	431e      	orrs	r6, r3
   8375a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8375e:	e7e1      	b.n	83724 <__register_exitproc+0x58>
   83760:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83764:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83768:	e7b9      	b.n	836de <__register_exitproc+0x12>
   8376a:	bf00      	nop
   8376c:	00083ebc 	.word	0x00083ebc
   83770:	0008298d 	.word	0x0008298d

00083774 <_close_r>:
   83774:	b538      	push	{r3, r4, r5, lr}
   83776:	4c07      	ldr	r4, [pc, #28]	; (83794 <_close_r+0x20>)
   83778:	2300      	movs	r3, #0
   8377a:	4605      	mov	r5, r0
   8377c:	4608      	mov	r0, r1
   8377e:	6023      	str	r3, [r4, #0]
   83780:	f7fd fba8 	bl	80ed4 <_close>
   83784:	1c43      	adds	r3, r0, #1
   83786:	d000      	beq.n	8378a <_close_r+0x16>
   83788:	bd38      	pop	{r3, r4, r5, pc}
   8378a:	6823      	ldr	r3, [r4, #0]
   8378c:	2b00      	cmp	r3, #0
   8378e:	d0fb      	beq.n	83788 <_close_r+0x14>
   83790:	602b      	str	r3, [r5, #0]
   83792:	bd38      	pop	{r3, r4, r5, pc}
   83794:	20070b6c 	.word	0x20070b6c

00083798 <_fclose_r>:
   83798:	b570      	push	{r4, r5, r6, lr}
   8379a:	460c      	mov	r4, r1
   8379c:	4605      	mov	r5, r0
   8379e:	b131      	cbz	r1, 837ae <_fclose_r+0x16>
   837a0:	b110      	cbz	r0, 837a8 <_fclose_r+0x10>
   837a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   837a4:	2b00      	cmp	r3, #0
   837a6:	d02f      	beq.n	83808 <_fclose_r+0x70>
   837a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   837ac:	b90b      	cbnz	r3, 837b2 <_fclose_r+0x1a>
   837ae:	2000      	movs	r0, #0
   837b0:	bd70      	pop	{r4, r5, r6, pc}
   837b2:	4628      	mov	r0, r5
   837b4:	4621      	mov	r1, r4
   837b6:	f7fe fc93 	bl	820e0 <_fflush_r>
   837ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   837bc:	4606      	mov	r6, r0
   837be:	b133      	cbz	r3, 837ce <_fclose_r+0x36>
   837c0:	4628      	mov	r0, r5
   837c2:	69e1      	ldr	r1, [r4, #28]
   837c4:	4798      	blx	r3
   837c6:	2800      	cmp	r0, #0
   837c8:	bfb8      	it	lt
   837ca:	f04f 36ff 	movlt.w	r6, #4294967295
   837ce:	89a3      	ldrh	r3, [r4, #12]
   837d0:	061b      	lsls	r3, r3, #24
   837d2:	d41c      	bmi.n	8380e <_fclose_r+0x76>
   837d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   837d6:	b141      	cbz	r1, 837ea <_fclose_r+0x52>
   837d8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   837dc:	4299      	cmp	r1, r3
   837de:	d002      	beq.n	837e6 <_fclose_r+0x4e>
   837e0:	4628      	mov	r0, r5
   837e2:	f7fe fddd 	bl	823a0 <_free_r>
   837e6:	2300      	movs	r3, #0
   837e8:	6323      	str	r3, [r4, #48]	; 0x30
   837ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
   837ec:	b121      	cbz	r1, 837f8 <_fclose_r+0x60>
   837ee:	4628      	mov	r0, r5
   837f0:	f7fe fdd6 	bl	823a0 <_free_r>
   837f4:	2300      	movs	r3, #0
   837f6:	6463      	str	r3, [r4, #68]	; 0x44
   837f8:	f7fe fd08 	bl	8220c <__sfp_lock_acquire>
   837fc:	2300      	movs	r3, #0
   837fe:	81a3      	strh	r3, [r4, #12]
   83800:	f7fe fd06 	bl	82210 <__sfp_lock_release>
   83804:	4630      	mov	r0, r6
   83806:	bd70      	pop	{r4, r5, r6, pc}
   83808:	f7fe fc86 	bl	82118 <__sinit>
   8380c:	e7cc      	b.n	837a8 <_fclose_r+0x10>
   8380e:	4628      	mov	r0, r5
   83810:	6921      	ldr	r1, [r4, #16]
   83812:	f7fe fdc5 	bl	823a0 <_free_r>
   83816:	e7dd      	b.n	837d4 <_fclose_r+0x3c>

00083818 <fclose>:
   83818:	4b02      	ldr	r3, [pc, #8]	; (83824 <fclose+0xc>)
   8381a:	4601      	mov	r1, r0
   8381c:	6818      	ldr	r0, [r3, #0]
   8381e:	f7ff bfbb 	b.w	83798 <_fclose_r>
   83822:	bf00      	nop
   83824:	20070568 	.word	0x20070568

00083828 <_fstat_r>:
   83828:	b538      	push	{r3, r4, r5, lr}
   8382a:	4c08      	ldr	r4, [pc, #32]	; (8384c <_fstat_r+0x24>)
   8382c:	2300      	movs	r3, #0
   8382e:	4605      	mov	r5, r0
   83830:	4608      	mov	r0, r1
   83832:	4611      	mov	r1, r2
   83834:	6023      	str	r3, [r4, #0]
   83836:	f7fd fb51 	bl	80edc <_fstat>
   8383a:	1c43      	adds	r3, r0, #1
   8383c:	d000      	beq.n	83840 <_fstat_r+0x18>
   8383e:	bd38      	pop	{r3, r4, r5, pc}
   83840:	6823      	ldr	r3, [r4, #0]
   83842:	2b00      	cmp	r3, #0
   83844:	d0fb      	beq.n	8383e <_fstat_r+0x16>
   83846:	602b      	str	r3, [r5, #0]
   83848:	bd38      	pop	{r3, r4, r5, pc}
   8384a:	bf00      	nop
   8384c:	20070b6c 	.word	0x20070b6c

00083850 <_isatty_r>:
   83850:	b538      	push	{r3, r4, r5, lr}
   83852:	4c07      	ldr	r4, [pc, #28]	; (83870 <_isatty_r+0x20>)
   83854:	2300      	movs	r3, #0
   83856:	4605      	mov	r5, r0
   83858:	4608      	mov	r0, r1
   8385a:	6023      	str	r3, [r4, #0]
   8385c:	f7fd fb44 	bl	80ee8 <_isatty>
   83860:	1c43      	adds	r3, r0, #1
   83862:	d000      	beq.n	83866 <_isatty_r+0x16>
   83864:	bd38      	pop	{r3, r4, r5, pc}
   83866:	6823      	ldr	r3, [r4, #0]
   83868:	2b00      	cmp	r3, #0
   8386a:	d0fb      	beq.n	83864 <_isatty_r+0x14>
   8386c:	602b      	str	r3, [r5, #0]
   8386e:	bd38      	pop	{r3, r4, r5, pc}
   83870:	20070b6c 	.word	0x20070b6c

00083874 <_lseek_r>:
   83874:	b570      	push	{r4, r5, r6, lr}
   83876:	4c08      	ldr	r4, [pc, #32]	; (83898 <_lseek_r+0x24>)
   83878:	4606      	mov	r6, r0
   8387a:	2500      	movs	r5, #0
   8387c:	4608      	mov	r0, r1
   8387e:	4611      	mov	r1, r2
   83880:	461a      	mov	r2, r3
   83882:	6025      	str	r5, [r4, #0]
   83884:	f7fd fb32 	bl	80eec <_lseek>
   83888:	1c43      	adds	r3, r0, #1
   8388a:	d000      	beq.n	8388e <_lseek_r+0x1a>
   8388c:	bd70      	pop	{r4, r5, r6, pc}
   8388e:	6823      	ldr	r3, [r4, #0]
   83890:	2b00      	cmp	r3, #0
   83892:	d0fb      	beq.n	8388c <_lseek_r+0x18>
   83894:	6033      	str	r3, [r6, #0]
   83896:	bd70      	pop	{r4, r5, r6, pc}
   83898:	20070b6c 	.word	0x20070b6c

0008389c <_read_r>:
   8389c:	b570      	push	{r4, r5, r6, lr}
   8389e:	4c08      	ldr	r4, [pc, #32]	; (838c0 <_read_r+0x24>)
   838a0:	4606      	mov	r6, r0
   838a2:	2500      	movs	r5, #0
   838a4:	4608      	mov	r0, r1
   838a6:	4611      	mov	r1, r2
   838a8:	461a      	mov	r2, r3
   838aa:	6025      	str	r5, [r4, #0]
   838ac:	f7fc fce2 	bl	80274 <_read>
   838b0:	1c43      	adds	r3, r0, #1
   838b2:	d000      	beq.n	838b6 <_read_r+0x1a>
   838b4:	bd70      	pop	{r4, r5, r6, pc}
   838b6:	6823      	ldr	r3, [r4, #0]
   838b8:	2b00      	cmp	r3, #0
   838ba:	d0fb      	beq.n	838b4 <_read_r+0x18>
   838bc:	6033      	str	r3, [r6, #0]
   838be:	bd70      	pop	{r4, r5, r6, pc}
   838c0:	20070b6c 	.word	0x20070b6c

000838c4 <__aeabi_uldivmod>:
   838c4:	b94b      	cbnz	r3, 838da <__aeabi_uldivmod+0x16>
   838c6:	b942      	cbnz	r2, 838da <__aeabi_uldivmod+0x16>
   838c8:	2900      	cmp	r1, #0
   838ca:	bf08      	it	eq
   838cc:	2800      	cmpeq	r0, #0
   838ce:	d002      	beq.n	838d6 <__aeabi_uldivmod+0x12>
   838d0:	f04f 31ff 	mov.w	r1, #4294967295
   838d4:	4608      	mov	r0, r1
   838d6:	f000 b83b 	b.w	83950 <__aeabi_idiv0>
   838da:	b082      	sub	sp, #8
   838dc:	46ec      	mov	ip, sp
   838de:	e92d 5000 	stmdb	sp!, {ip, lr}
   838e2:	f000 f81d 	bl	83920 <__gnu_uldivmod_helper>
   838e6:	f8dd e004 	ldr.w	lr, [sp, #4]
   838ea:	b002      	add	sp, #8
   838ec:	bc0c      	pop	{r2, r3}
   838ee:	4770      	bx	lr

000838f0 <__gnu_ldivmod_helper>:
   838f0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   838f4:	9e08      	ldr	r6, [sp, #32]
   838f6:	4614      	mov	r4, r2
   838f8:	461d      	mov	r5, r3
   838fa:	4680      	mov	r8, r0
   838fc:	4689      	mov	r9, r1
   838fe:	f000 f829 	bl	83954 <__divdi3>
   83902:	fb04 f301 	mul.w	r3, r4, r1
   83906:	fba4 ab00 	umull	sl, fp, r4, r0
   8390a:	fb00 3205 	mla	r2, r0, r5, r3
   8390e:	4493      	add	fp, r2
   83910:	ebb8 080a 	subs.w	r8, r8, sl
   83914:	eb69 090b 	sbc.w	r9, r9, fp
   83918:	e9c6 8900 	strd	r8, r9, [r6]
   8391c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083920 <__gnu_uldivmod_helper>:
   83920:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83924:	9e08      	ldr	r6, [sp, #32]
   83926:	4614      	mov	r4, r2
   83928:	461d      	mov	r5, r3
   8392a:	4680      	mov	r8, r0
   8392c:	4689      	mov	r9, r1
   8392e:	f000 f961 	bl	83bf4 <__udivdi3>
   83932:	fb00 f505 	mul.w	r5, r0, r5
   83936:	fba0 ab04 	umull	sl, fp, r0, r4
   8393a:	fb04 5401 	mla	r4, r4, r1, r5
   8393e:	44a3      	add	fp, r4
   83940:	ebb8 080a 	subs.w	r8, r8, sl
   83944:	eb69 090b 	sbc.w	r9, r9, fp
   83948:	e9c6 8900 	strd	r8, r9, [r6]
   8394c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083950 <__aeabi_idiv0>:
   83950:	4770      	bx	lr
   83952:	bf00      	nop

00083954 <__divdi3>:
   83954:	2900      	cmp	r1, #0
   83956:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8395a:	f2c0 80a1 	blt.w	83aa0 <__divdi3+0x14c>
   8395e:	2400      	movs	r4, #0
   83960:	2b00      	cmp	r3, #0
   83962:	f2c0 8098 	blt.w	83a96 <__divdi3+0x142>
   83966:	4615      	mov	r5, r2
   83968:	4606      	mov	r6, r0
   8396a:	460f      	mov	r7, r1
   8396c:	2b00      	cmp	r3, #0
   8396e:	d13f      	bne.n	839f0 <__divdi3+0x9c>
   83970:	428a      	cmp	r2, r1
   83972:	d958      	bls.n	83a26 <__divdi3+0xd2>
   83974:	fab2 f382 	clz	r3, r2
   83978:	b14b      	cbz	r3, 8398e <__divdi3+0x3a>
   8397a:	f1c3 0220 	rsb	r2, r3, #32
   8397e:	fa01 f703 	lsl.w	r7, r1, r3
   83982:	fa20 f202 	lsr.w	r2, r0, r2
   83986:	409d      	lsls	r5, r3
   83988:	fa00 f603 	lsl.w	r6, r0, r3
   8398c:	4317      	orrs	r7, r2
   8398e:	0c29      	lsrs	r1, r5, #16
   83990:	fbb7 f2f1 	udiv	r2, r7, r1
   83994:	fb01 7712 	mls	r7, r1, r2, r7
   83998:	b2a8      	uxth	r0, r5
   8399a:	fb00 f302 	mul.w	r3, r0, r2
   8399e:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   839a2:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   839a6:	42bb      	cmp	r3, r7
   839a8:	d909      	bls.n	839be <__divdi3+0x6a>
   839aa:	197f      	adds	r7, r7, r5
   839ac:	f102 3cff 	add.w	ip, r2, #4294967295
   839b0:	f080 8105 	bcs.w	83bbe <__divdi3+0x26a>
   839b4:	42bb      	cmp	r3, r7
   839b6:	f240 8102 	bls.w	83bbe <__divdi3+0x26a>
   839ba:	3a02      	subs	r2, #2
   839bc:	442f      	add	r7, r5
   839be:	1aff      	subs	r7, r7, r3
   839c0:	fbb7 f3f1 	udiv	r3, r7, r1
   839c4:	fb01 7113 	mls	r1, r1, r3, r7
   839c8:	fb00 f003 	mul.w	r0, r0, r3
   839cc:	b2b6      	uxth	r6, r6
   839ce:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   839d2:	4288      	cmp	r0, r1
   839d4:	d908      	bls.n	839e8 <__divdi3+0x94>
   839d6:	1949      	adds	r1, r1, r5
   839d8:	f103 37ff 	add.w	r7, r3, #4294967295
   839dc:	f080 80f1 	bcs.w	83bc2 <__divdi3+0x26e>
   839e0:	4288      	cmp	r0, r1
   839e2:	f240 80ee 	bls.w	83bc2 <__divdi3+0x26e>
   839e6:	3b02      	subs	r3, #2
   839e8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   839ec:	2300      	movs	r3, #0
   839ee:	e003      	b.n	839f8 <__divdi3+0xa4>
   839f0:	428b      	cmp	r3, r1
   839f2:	d90a      	bls.n	83a0a <__divdi3+0xb6>
   839f4:	2300      	movs	r3, #0
   839f6:	461a      	mov	r2, r3
   839f8:	4610      	mov	r0, r2
   839fa:	4619      	mov	r1, r3
   839fc:	b114      	cbz	r4, 83a04 <__divdi3+0xb0>
   839fe:	4240      	negs	r0, r0
   83a00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83a04:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83a08:	4770      	bx	lr
   83a0a:	fab3 f883 	clz	r8, r3
   83a0e:	f1b8 0f00 	cmp.w	r8, #0
   83a12:	f040 8088 	bne.w	83b26 <__divdi3+0x1d2>
   83a16:	428b      	cmp	r3, r1
   83a18:	d302      	bcc.n	83a20 <__divdi3+0xcc>
   83a1a:	4282      	cmp	r2, r0
   83a1c:	f200 80e2 	bhi.w	83be4 <__divdi3+0x290>
   83a20:	2300      	movs	r3, #0
   83a22:	2201      	movs	r2, #1
   83a24:	e7e8      	b.n	839f8 <__divdi3+0xa4>
   83a26:	b912      	cbnz	r2, 83a2e <__divdi3+0xda>
   83a28:	2301      	movs	r3, #1
   83a2a:	fbb3 f5f2 	udiv	r5, r3, r2
   83a2e:	fab5 f285 	clz	r2, r5
   83a32:	2a00      	cmp	r2, #0
   83a34:	d13a      	bne.n	83aac <__divdi3+0x158>
   83a36:	1b7f      	subs	r7, r7, r5
   83a38:	0c28      	lsrs	r0, r5, #16
   83a3a:	fa1f fc85 	uxth.w	ip, r5
   83a3e:	2301      	movs	r3, #1
   83a40:	fbb7 f1f0 	udiv	r1, r7, r0
   83a44:	fb00 7711 	mls	r7, r0, r1, r7
   83a48:	fb0c f201 	mul.w	r2, ip, r1
   83a4c:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83a50:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83a54:	42ba      	cmp	r2, r7
   83a56:	d907      	bls.n	83a68 <__divdi3+0x114>
   83a58:	197f      	adds	r7, r7, r5
   83a5a:	f101 38ff 	add.w	r8, r1, #4294967295
   83a5e:	d202      	bcs.n	83a66 <__divdi3+0x112>
   83a60:	42ba      	cmp	r2, r7
   83a62:	f200 80c4 	bhi.w	83bee <__divdi3+0x29a>
   83a66:	4641      	mov	r1, r8
   83a68:	1abf      	subs	r7, r7, r2
   83a6a:	fbb7 f2f0 	udiv	r2, r7, r0
   83a6e:	fb00 7012 	mls	r0, r0, r2, r7
   83a72:	fb0c fc02 	mul.w	ip, ip, r2
   83a76:	b2b6      	uxth	r6, r6
   83a78:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83a7c:	4584      	cmp	ip, r0
   83a7e:	d907      	bls.n	83a90 <__divdi3+0x13c>
   83a80:	1940      	adds	r0, r0, r5
   83a82:	f102 37ff 	add.w	r7, r2, #4294967295
   83a86:	d202      	bcs.n	83a8e <__divdi3+0x13a>
   83a88:	4584      	cmp	ip, r0
   83a8a:	f200 80ae 	bhi.w	83bea <__divdi3+0x296>
   83a8e:	463a      	mov	r2, r7
   83a90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83a94:	e7b0      	b.n	839f8 <__divdi3+0xa4>
   83a96:	43e4      	mvns	r4, r4
   83a98:	4252      	negs	r2, r2
   83a9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83a9e:	e762      	b.n	83966 <__divdi3+0x12>
   83aa0:	4240      	negs	r0, r0
   83aa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83aa6:	f04f 34ff 	mov.w	r4, #4294967295
   83aaa:	e759      	b.n	83960 <__divdi3+0xc>
   83aac:	4095      	lsls	r5, r2
   83aae:	f1c2 0920 	rsb	r9, r2, #32
   83ab2:	fa27 f109 	lsr.w	r1, r7, r9
   83ab6:	fa26 f909 	lsr.w	r9, r6, r9
   83aba:	4097      	lsls	r7, r2
   83abc:	0c28      	lsrs	r0, r5, #16
   83abe:	fbb1 f8f0 	udiv	r8, r1, r0
   83ac2:	fb00 1118 	mls	r1, r0, r8, r1
   83ac6:	fa1f fc85 	uxth.w	ip, r5
   83aca:	fb0c f308 	mul.w	r3, ip, r8
   83ace:	ea49 0907 	orr.w	r9, r9, r7
   83ad2:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83ad6:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83ada:	428b      	cmp	r3, r1
   83adc:	fa06 f602 	lsl.w	r6, r6, r2
   83ae0:	d908      	bls.n	83af4 <__divdi3+0x1a0>
   83ae2:	1949      	adds	r1, r1, r5
   83ae4:	f108 32ff 	add.w	r2, r8, #4294967295
   83ae8:	d27a      	bcs.n	83be0 <__divdi3+0x28c>
   83aea:	428b      	cmp	r3, r1
   83aec:	d978      	bls.n	83be0 <__divdi3+0x28c>
   83aee:	f1a8 0802 	sub.w	r8, r8, #2
   83af2:	4429      	add	r1, r5
   83af4:	1ac9      	subs	r1, r1, r3
   83af6:	fbb1 f3f0 	udiv	r3, r1, r0
   83afa:	fb00 1713 	mls	r7, r0, r3, r1
   83afe:	fb0c f203 	mul.w	r2, ip, r3
   83b02:	fa1f f989 	uxth.w	r9, r9
   83b06:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83b0a:	42ba      	cmp	r2, r7
   83b0c:	d907      	bls.n	83b1e <__divdi3+0x1ca>
   83b0e:	197f      	adds	r7, r7, r5
   83b10:	f103 31ff 	add.w	r1, r3, #4294967295
   83b14:	d260      	bcs.n	83bd8 <__divdi3+0x284>
   83b16:	42ba      	cmp	r2, r7
   83b18:	d95e      	bls.n	83bd8 <__divdi3+0x284>
   83b1a:	3b02      	subs	r3, #2
   83b1c:	442f      	add	r7, r5
   83b1e:	1abf      	subs	r7, r7, r2
   83b20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83b24:	e78c      	b.n	83a40 <__divdi3+0xec>
   83b26:	f1c8 0220 	rsb	r2, r8, #32
   83b2a:	fa25 f102 	lsr.w	r1, r5, r2
   83b2e:	fa03 fc08 	lsl.w	ip, r3, r8
   83b32:	fa27 f302 	lsr.w	r3, r7, r2
   83b36:	fa20 f202 	lsr.w	r2, r0, r2
   83b3a:	fa07 f708 	lsl.w	r7, r7, r8
   83b3e:	ea41 0c0c 	orr.w	ip, r1, ip
   83b42:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83b46:	fbb3 f1f9 	udiv	r1, r3, r9
   83b4a:	fb09 3311 	mls	r3, r9, r1, r3
   83b4e:	fa1f fa8c 	uxth.w	sl, ip
   83b52:	fb0a fb01 	mul.w	fp, sl, r1
   83b56:	4317      	orrs	r7, r2
   83b58:	0c3a      	lsrs	r2, r7, #16
   83b5a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83b5e:	459b      	cmp	fp, r3
   83b60:	fa05 f008 	lsl.w	r0, r5, r8
   83b64:	d908      	bls.n	83b78 <__divdi3+0x224>
   83b66:	eb13 030c 	adds.w	r3, r3, ip
   83b6a:	f101 32ff 	add.w	r2, r1, #4294967295
   83b6e:	d235      	bcs.n	83bdc <__divdi3+0x288>
   83b70:	459b      	cmp	fp, r3
   83b72:	d933      	bls.n	83bdc <__divdi3+0x288>
   83b74:	3902      	subs	r1, #2
   83b76:	4463      	add	r3, ip
   83b78:	ebcb 0303 	rsb	r3, fp, r3
   83b7c:	fbb3 f2f9 	udiv	r2, r3, r9
   83b80:	fb09 3312 	mls	r3, r9, r2, r3
   83b84:	fb0a fa02 	mul.w	sl, sl, r2
   83b88:	b2bf      	uxth	r7, r7
   83b8a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83b8e:	45ba      	cmp	sl, r7
   83b90:	d908      	bls.n	83ba4 <__divdi3+0x250>
   83b92:	eb17 070c 	adds.w	r7, r7, ip
   83b96:	f102 33ff 	add.w	r3, r2, #4294967295
   83b9a:	d21b      	bcs.n	83bd4 <__divdi3+0x280>
   83b9c:	45ba      	cmp	sl, r7
   83b9e:	d919      	bls.n	83bd4 <__divdi3+0x280>
   83ba0:	3a02      	subs	r2, #2
   83ba2:	4467      	add	r7, ip
   83ba4:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83ba8:	fba5 0100 	umull	r0, r1, r5, r0
   83bac:	ebca 0707 	rsb	r7, sl, r7
   83bb0:	428f      	cmp	r7, r1
   83bb2:	f04f 0300 	mov.w	r3, #0
   83bb6:	d30a      	bcc.n	83bce <__divdi3+0x27a>
   83bb8:	d005      	beq.n	83bc6 <__divdi3+0x272>
   83bba:	462a      	mov	r2, r5
   83bbc:	e71c      	b.n	839f8 <__divdi3+0xa4>
   83bbe:	4662      	mov	r2, ip
   83bc0:	e6fd      	b.n	839be <__divdi3+0x6a>
   83bc2:	463b      	mov	r3, r7
   83bc4:	e710      	b.n	839e8 <__divdi3+0x94>
   83bc6:	fa06 f608 	lsl.w	r6, r6, r8
   83bca:	4286      	cmp	r6, r0
   83bcc:	d2f5      	bcs.n	83bba <__divdi3+0x266>
   83bce:	1e6a      	subs	r2, r5, #1
   83bd0:	2300      	movs	r3, #0
   83bd2:	e711      	b.n	839f8 <__divdi3+0xa4>
   83bd4:	461a      	mov	r2, r3
   83bd6:	e7e5      	b.n	83ba4 <__divdi3+0x250>
   83bd8:	460b      	mov	r3, r1
   83bda:	e7a0      	b.n	83b1e <__divdi3+0x1ca>
   83bdc:	4611      	mov	r1, r2
   83bde:	e7cb      	b.n	83b78 <__divdi3+0x224>
   83be0:	4690      	mov	r8, r2
   83be2:	e787      	b.n	83af4 <__divdi3+0x1a0>
   83be4:	4643      	mov	r3, r8
   83be6:	4642      	mov	r2, r8
   83be8:	e706      	b.n	839f8 <__divdi3+0xa4>
   83bea:	3a02      	subs	r2, #2
   83bec:	e750      	b.n	83a90 <__divdi3+0x13c>
   83bee:	3902      	subs	r1, #2
   83bf0:	442f      	add	r7, r5
   83bf2:	e739      	b.n	83a68 <__divdi3+0x114>

00083bf4 <__udivdi3>:
   83bf4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83bf8:	4614      	mov	r4, r2
   83bfa:	4605      	mov	r5, r0
   83bfc:	460e      	mov	r6, r1
   83bfe:	2b00      	cmp	r3, #0
   83c00:	d143      	bne.n	83c8a <__udivdi3+0x96>
   83c02:	428a      	cmp	r2, r1
   83c04:	d953      	bls.n	83cae <__udivdi3+0xba>
   83c06:	fab2 f782 	clz	r7, r2
   83c0a:	b157      	cbz	r7, 83c22 <__udivdi3+0x2e>
   83c0c:	f1c7 0620 	rsb	r6, r7, #32
   83c10:	fa20 f606 	lsr.w	r6, r0, r6
   83c14:	fa01 f307 	lsl.w	r3, r1, r7
   83c18:	fa02 f407 	lsl.w	r4, r2, r7
   83c1c:	fa00 f507 	lsl.w	r5, r0, r7
   83c20:	431e      	orrs	r6, r3
   83c22:	0c21      	lsrs	r1, r4, #16
   83c24:	fbb6 f2f1 	udiv	r2, r6, r1
   83c28:	fb01 6612 	mls	r6, r1, r2, r6
   83c2c:	b2a0      	uxth	r0, r4
   83c2e:	fb00 f302 	mul.w	r3, r0, r2
   83c32:	0c2f      	lsrs	r7, r5, #16
   83c34:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83c38:	42b3      	cmp	r3, r6
   83c3a:	d909      	bls.n	83c50 <__udivdi3+0x5c>
   83c3c:	1936      	adds	r6, r6, r4
   83c3e:	f102 37ff 	add.w	r7, r2, #4294967295
   83c42:	f080 80fd 	bcs.w	83e40 <__udivdi3+0x24c>
   83c46:	42b3      	cmp	r3, r6
   83c48:	f240 80fa 	bls.w	83e40 <__udivdi3+0x24c>
   83c4c:	3a02      	subs	r2, #2
   83c4e:	4426      	add	r6, r4
   83c50:	1af6      	subs	r6, r6, r3
   83c52:	fbb6 f3f1 	udiv	r3, r6, r1
   83c56:	fb01 6113 	mls	r1, r1, r3, r6
   83c5a:	fb00 f003 	mul.w	r0, r0, r3
   83c5e:	b2ad      	uxth	r5, r5
   83c60:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83c64:	4288      	cmp	r0, r1
   83c66:	d908      	bls.n	83c7a <__udivdi3+0x86>
   83c68:	1909      	adds	r1, r1, r4
   83c6a:	f103 36ff 	add.w	r6, r3, #4294967295
   83c6e:	f080 80e9 	bcs.w	83e44 <__udivdi3+0x250>
   83c72:	4288      	cmp	r0, r1
   83c74:	f240 80e6 	bls.w	83e44 <__udivdi3+0x250>
   83c78:	3b02      	subs	r3, #2
   83c7a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83c7e:	2300      	movs	r3, #0
   83c80:	4610      	mov	r0, r2
   83c82:	4619      	mov	r1, r3
   83c84:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83c88:	4770      	bx	lr
   83c8a:	428b      	cmp	r3, r1
   83c8c:	d84c      	bhi.n	83d28 <__udivdi3+0x134>
   83c8e:	fab3 f683 	clz	r6, r3
   83c92:	2e00      	cmp	r6, #0
   83c94:	d14f      	bne.n	83d36 <__udivdi3+0x142>
   83c96:	428b      	cmp	r3, r1
   83c98:	d302      	bcc.n	83ca0 <__udivdi3+0xac>
   83c9a:	4282      	cmp	r2, r0
   83c9c:	f200 80dd 	bhi.w	83e5a <__udivdi3+0x266>
   83ca0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ca4:	2300      	movs	r3, #0
   83ca6:	2201      	movs	r2, #1
   83ca8:	4610      	mov	r0, r2
   83caa:	4619      	mov	r1, r3
   83cac:	4770      	bx	lr
   83cae:	b912      	cbnz	r2, 83cb6 <__udivdi3+0xc2>
   83cb0:	2401      	movs	r4, #1
   83cb2:	fbb4 f4f2 	udiv	r4, r4, r2
   83cb6:	fab4 f284 	clz	r2, r4
   83cba:	2a00      	cmp	r2, #0
   83cbc:	f040 8082 	bne.w	83dc4 <__udivdi3+0x1d0>
   83cc0:	1b09      	subs	r1, r1, r4
   83cc2:	0c26      	lsrs	r6, r4, #16
   83cc4:	b2a7      	uxth	r7, r4
   83cc6:	2301      	movs	r3, #1
   83cc8:	fbb1 f0f6 	udiv	r0, r1, r6
   83ccc:	fb06 1110 	mls	r1, r6, r0, r1
   83cd0:	fb07 f200 	mul.w	r2, r7, r0
   83cd4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83cd8:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83cdc:	428a      	cmp	r2, r1
   83cde:	d907      	bls.n	83cf0 <__udivdi3+0xfc>
   83ce0:	1909      	adds	r1, r1, r4
   83ce2:	f100 3cff 	add.w	ip, r0, #4294967295
   83ce6:	d202      	bcs.n	83cee <__udivdi3+0xfa>
   83ce8:	428a      	cmp	r2, r1
   83cea:	f200 80c8 	bhi.w	83e7e <__udivdi3+0x28a>
   83cee:	4660      	mov	r0, ip
   83cf0:	1a89      	subs	r1, r1, r2
   83cf2:	fbb1 f2f6 	udiv	r2, r1, r6
   83cf6:	fb06 1112 	mls	r1, r6, r2, r1
   83cfa:	fb07 f702 	mul.w	r7, r7, r2
   83cfe:	b2ad      	uxth	r5, r5
   83d00:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83d04:	42af      	cmp	r7, r5
   83d06:	d908      	bls.n	83d1a <__udivdi3+0x126>
   83d08:	192c      	adds	r4, r5, r4
   83d0a:	f102 31ff 	add.w	r1, r2, #4294967295
   83d0e:	f080 809b 	bcs.w	83e48 <__udivdi3+0x254>
   83d12:	42a7      	cmp	r7, r4
   83d14:	f240 8098 	bls.w	83e48 <__udivdi3+0x254>
   83d18:	3a02      	subs	r2, #2
   83d1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83d1e:	4610      	mov	r0, r2
   83d20:	4619      	mov	r1, r3
   83d22:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d26:	4770      	bx	lr
   83d28:	2300      	movs	r3, #0
   83d2a:	461a      	mov	r2, r3
   83d2c:	4610      	mov	r0, r2
   83d2e:	4619      	mov	r1, r3
   83d30:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d34:	4770      	bx	lr
   83d36:	f1c6 0520 	rsb	r5, r6, #32
   83d3a:	fa22 f705 	lsr.w	r7, r2, r5
   83d3e:	fa03 f406 	lsl.w	r4, r3, r6
   83d42:	fa21 f305 	lsr.w	r3, r1, r5
   83d46:	fa01 fb06 	lsl.w	fp, r1, r6
   83d4a:	fa20 f505 	lsr.w	r5, r0, r5
   83d4e:	433c      	orrs	r4, r7
   83d50:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83d54:	fbb3 fcf8 	udiv	ip, r3, r8
   83d58:	fb08 331c 	mls	r3, r8, ip, r3
   83d5c:	fa1f f984 	uxth.w	r9, r4
   83d60:	fb09 fa0c 	mul.w	sl, r9, ip
   83d64:	ea45 0b0b 	orr.w	fp, r5, fp
   83d68:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83d6c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83d70:	459a      	cmp	sl, r3
   83d72:	fa02 f206 	lsl.w	r2, r2, r6
   83d76:	d904      	bls.n	83d82 <__udivdi3+0x18e>
   83d78:	191b      	adds	r3, r3, r4
   83d7a:	f10c 35ff 	add.w	r5, ip, #4294967295
   83d7e:	d36f      	bcc.n	83e60 <__udivdi3+0x26c>
   83d80:	46ac      	mov	ip, r5
   83d82:	ebca 0303 	rsb	r3, sl, r3
   83d86:	fbb3 f5f8 	udiv	r5, r3, r8
   83d8a:	fb08 3315 	mls	r3, r8, r5, r3
   83d8e:	fb09 f905 	mul.w	r9, r9, r5
   83d92:	fa1f fb8b 	uxth.w	fp, fp
   83d96:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83d9a:	45b9      	cmp	r9, r7
   83d9c:	d904      	bls.n	83da8 <__udivdi3+0x1b4>
   83d9e:	193f      	adds	r7, r7, r4
   83da0:	f105 33ff 	add.w	r3, r5, #4294967295
   83da4:	d362      	bcc.n	83e6c <__udivdi3+0x278>
   83da6:	461d      	mov	r5, r3
   83da8:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83dac:	fbac 2302 	umull	r2, r3, ip, r2
   83db0:	ebc9 0707 	rsb	r7, r9, r7
   83db4:	429f      	cmp	r7, r3
   83db6:	f04f 0500 	mov.w	r5, #0
   83dba:	d34a      	bcc.n	83e52 <__udivdi3+0x25e>
   83dbc:	d046      	beq.n	83e4c <__udivdi3+0x258>
   83dbe:	4662      	mov	r2, ip
   83dc0:	462b      	mov	r3, r5
   83dc2:	e75d      	b.n	83c80 <__udivdi3+0x8c>
   83dc4:	4094      	lsls	r4, r2
   83dc6:	f1c2 0920 	rsb	r9, r2, #32
   83dca:	fa21 fc09 	lsr.w	ip, r1, r9
   83dce:	4091      	lsls	r1, r2
   83dd0:	fa20 f909 	lsr.w	r9, r0, r9
   83dd4:	0c26      	lsrs	r6, r4, #16
   83dd6:	fbbc f8f6 	udiv	r8, ip, r6
   83dda:	fb06 cc18 	mls	ip, r6, r8, ip
   83dde:	b2a7      	uxth	r7, r4
   83de0:	fb07 f308 	mul.w	r3, r7, r8
   83de4:	ea49 0901 	orr.w	r9, r9, r1
   83de8:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83dec:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83df0:	4563      	cmp	r3, ip
   83df2:	fa00 f502 	lsl.w	r5, r0, r2
   83df6:	d909      	bls.n	83e0c <__udivdi3+0x218>
   83df8:	eb1c 0c04 	adds.w	ip, ip, r4
   83dfc:	f108 32ff 	add.w	r2, r8, #4294967295
   83e00:	d23b      	bcs.n	83e7a <__udivdi3+0x286>
   83e02:	4563      	cmp	r3, ip
   83e04:	d939      	bls.n	83e7a <__udivdi3+0x286>
   83e06:	f1a8 0802 	sub.w	r8, r8, #2
   83e0a:	44a4      	add	ip, r4
   83e0c:	ebc3 0c0c 	rsb	ip, r3, ip
   83e10:	fbbc f3f6 	udiv	r3, ip, r6
   83e14:	fb06 c113 	mls	r1, r6, r3, ip
   83e18:	fb07 f203 	mul.w	r2, r7, r3
   83e1c:	fa1f f989 	uxth.w	r9, r9
   83e20:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83e24:	428a      	cmp	r2, r1
   83e26:	d907      	bls.n	83e38 <__udivdi3+0x244>
   83e28:	1909      	adds	r1, r1, r4
   83e2a:	f103 30ff 	add.w	r0, r3, #4294967295
   83e2e:	d222      	bcs.n	83e76 <__udivdi3+0x282>
   83e30:	428a      	cmp	r2, r1
   83e32:	d920      	bls.n	83e76 <__udivdi3+0x282>
   83e34:	3b02      	subs	r3, #2
   83e36:	4421      	add	r1, r4
   83e38:	1a89      	subs	r1, r1, r2
   83e3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83e3e:	e743      	b.n	83cc8 <__udivdi3+0xd4>
   83e40:	463a      	mov	r2, r7
   83e42:	e705      	b.n	83c50 <__udivdi3+0x5c>
   83e44:	4633      	mov	r3, r6
   83e46:	e718      	b.n	83c7a <__udivdi3+0x86>
   83e48:	460a      	mov	r2, r1
   83e4a:	e766      	b.n	83d1a <__udivdi3+0x126>
   83e4c:	40b0      	lsls	r0, r6
   83e4e:	4290      	cmp	r0, r2
   83e50:	d2b5      	bcs.n	83dbe <__udivdi3+0x1ca>
   83e52:	f10c 32ff 	add.w	r2, ip, #4294967295
   83e56:	2300      	movs	r3, #0
   83e58:	e712      	b.n	83c80 <__udivdi3+0x8c>
   83e5a:	4633      	mov	r3, r6
   83e5c:	4632      	mov	r2, r6
   83e5e:	e70f      	b.n	83c80 <__udivdi3+0x8c>
   83e60:	459a      	cmp	sl, r3
   83e62:	d98d      	bls.n	83d80 <__udivdi3+0x18c>
   83e64:	f1ac 0c02 	sub.w	ip, ip, #2
   83e68:	4423      	add	r3, r4
   83e6a:	e78a      	b.n	83d82 <__udivdi3+0x18e>
   83e6c:	45b9      	cmp	r9, r7
   83e6e:	d99a      	bls.n	83da6 <__udivdi3+0x1b2>
   83e70:	3d02      	subs	r5, #2
   83e72:	4427      	add	r7, r4
   83e74:	e798      	b.n	83da8 <__udivdi3+0x1b4>
   83e76:	4603      	mov	r3, r0
   83e78:	e7de      	b.n	83e38 <__udivdi3+0x244>
   83e7a:	4690      	mov	r8, r2
   83e7c:	e7c6      	b.n	83e0c <__udivdi3+0x218>
   83e7e:	3802      	subs	r0, #2
   83e80:	4421      	add	r1, r4
   83e82:	e735      	b.n	83cf0 <__udivdi3+0xfc>
   83e84:	72617453 	.word	0x72617453
   83e88:	00726174 	.word	0x00726174
   83e8c:	00000001 	.word	0x00000001
   83e90:	00000002 	.word	0x00000002
   83e94:	00000004 	.word	0x00000004
   83e98:	00000008 	.word	0x00000008
   83e9c:	00000010 	.word	0x00000010
   83ea0:	00000020 	.word	0x00000020
   83ea4:	00000040 	.word	0x00000040
   83ea8:	00000080 	.word	0x00000080
   83eac:	00000100 	.word	0x00000100
   83eb0:	00000200 	.word	0x00000200
   83eb4:	00000400 	.word	0x00000400
   83eb8:	00000043 	.word	0x00000043

00083ebc <_global_impure_ptr>:
   83ebc:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   83ecc:	46454443 00000000 33323130 37363534     CDEF....01234567
   83edc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83eec:	0000296c                                l)..

00083ef0 <zeroes.6721>:
   83ef0:	30303030 30303030 30303030 30303030     0000000000000000

00083f00 <blanks.6720>:
   83f00:	20202020 20202020 20202020 20202020                     

00083f10 <_init>:
   83f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f12:	bf00      	nop
   83f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83f16:	bc08      	pop	{r3}
   83f18:	469e      	mov	lr, r3
   83f1a:	4770      	bx	lr

00083f1c <__init_array_start>:
   83f1c:	00081f79 	.word	0x00081f79

00083f20 <__frame_dummy_init_array_entry>:
   83f20:	00080119                                ....

00083f24 <_fini>:
   83f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f26:	bf00      	nop
   83f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83f2a:	bc08      	pop	{r3}
   83f2c:	469e      	mov	lr, r3
   83f2e:	4770      	bx	lr

00083f30 <__fini_array_start>:
   83f30:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <g_interrupt_enabled>:
20070138:	00000001                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00083eb8 00000000 00000000 00000000     .>..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00083689                                .6..
