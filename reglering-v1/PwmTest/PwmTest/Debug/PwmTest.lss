
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057f4  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000857f4  000857f4  0000d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ac  20070000  000857fc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001cc  200709ac  000861a8  000109ac  2**2
                  ALLOC
  4 .stack        00002000  20070b78  00086374  000109ac  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109ac  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109d5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001016e  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b50  00000000  00000000  00020b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000057c4  00000000  00000000  000236ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bb0  00000000  00000000  00028eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a58  00000000  00000000  00029a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000193ce  00000000  00000000  0002a4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012202  00000000  00000000  00043888  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000620f0  00000000  00000000  00055a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002488  00000000  00000000  000b7b7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b78 	.word	0x20072b78
   80004:	000813c9 	.word	0x000813c9
   80008:	000813c5 	.word	0x000813c5
   8000c:	000813c5 	.word	0x000813c5
   80010:	000813c5 	.word	0x000813c5
   80014:	000813c5 	.word	0x000813c5
   80018:	000813c5 	.word	0x000813c5
	...
   8002c:	000813c5 	.word	0x000813c5
   80030:	000813c5 	.word	0x000813c5
   80034:	00000000 	.word	0x00000000
   80038:	000813c5 	.word	0x000813c5
   8003c:	000813c5 	.word	0x000813c5
   80040:	000813c5 	.word	0x000813c5
   80044:	000813c5 	.word	0x000813c5
   80048:	000813c5 	.word	0x000813c5
   8004c:	000813c5 	.word	0x000813c5
   80050:	000813c5 	.word	0x000813c5
   80054:	000813c5 	.word	0x000813c5
   80058:	000813c5 	.word	0x000813c5
   8005c:	000813c5 	.word	0x000813c5
   80060:	000813c5 	.word	0x000813c5
   80064:	000813c5 	.word	0x000813c5
   80068:	00000000 	.word	0x00000000
   8006c:	00081145 	.word	0x00081145
   80070:	00081159 	.word	0x00081159
   80074:	0008116d 	.word	0x0008116d
   80078:	00081181 	.word	0x00081181
	...
   80084:	00080429 	.word	0x00080429
   80088:	000813c5 	.word	0x000813c5
   8008c:	000813c5 	.word	0x000813c5
   80090:	000813c5 	.word	0x000813c5
   80094:	000813c5 	.word	0x000813c5
   80098:	000813c5 	.word	0x000813c5
   8009c:	000813c5 	.word	0x000813c5
   800a0:	000813c5 	.word	0x000813c5
   800a4:	00000000 	.word	0x00000000
   800a8:	000813c5 	.word	0x000813c5
   800ac:	000813c5 	.word	0x000813c5
   800b0:	000813c5 	.word	0x000813c5
   800b4:	000813c5 	.word	0x000813c5
   800b8:	000813c5 	.word	0x000813c5
   800bc:	000813c5 	.word	0x000813c5
   800c0:	000813c5 	.word	0x000813c5
   800c4:	000813c5 	.word	0x000813c5
   800c8:	000813c5 	.word	0x000813c5
   800cc:	000813c5 	.word	0x000813c5
   800d0:	000813c5 	.word	0x000813c5
   800d4:	000813c5 	.word	0x000813c5
   800d8:	000813c5 	.word	0x000813c5
   800dc:	000813c5 	.word	0x000813c5
   800e0:	000813c5 	.word	0x000813c5
   800e4:	000813c5 	.word	0x000813c5
   800e8:	000813c5 	.word	0x000813c5
   800ec:	000813c5 	.word	0x000813c5
   800f0:	000813c5 	.word	0x000813c5

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709ac 	.word	0x200709ac
   80110:	00000000 	.word	0x00000000
   80114:	000857fc 	.word	0x000857fc

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000857fc 	.word	0x000857fc
   8013c:	200709b0 	.word	0x200709b0
   80140:	000857fc 	.word	0x000857fc
   80144:	00000000 	.word	0x00000000

00080148 <main>:
// int e=0;
// double kp = 2;
// uint16_t speed = 1700;

int main(void)
{
   80148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8014c:	b089      	sub	sp, #36	; 0x24
	/* Initialize the SAM system */
	SystemInit();
   8014e:	4b29      	ldr	r3, [pc, #164]	; (801f4 <main+0xac>)
   80150:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   80152:	4b29      	ldr	r3, [pc, #164]	; (801f8 <main+0xb0>)
   80154:	4798      	blx	r3
	configureConsole();
   80156:	4b29      	ldr	r3, [pc, #164]	; (801fc <main+0xb4>)
   80158:	4798      	blx	r3
	configInterrupts();
   8015a:	4b29      	ldr	r3, [pc, #164]	; (80200 <main+0xb8>)
   8015c:	4798      	blx	r3
	PWM_init();
   8015e:	4b29      	ldr	r3, [pc, #164]	; (80204 <main+0xbc>)
   80160:	4798      	blx	r3
	printf("Startar");
   80162:	4829      	ldr	r0, [pc, #164]	; (80208 <main+0xc0>)
   80164:	4b29      	ldr	r3, [pc, #164]	; (8020c <main+0xc4>)
   80166:	4798      	blx	r3
    delay_s(2);
   80168:	4829      	ldr	r0, [pc, #164]	; (80210 <main+0xc8>)
   8016a:	4b2a      	ldr	r3, [pc, #168]	; (80214 <main+0xcc>)
   8016c:	4798      	blx	r3
// 		printf("Klar!\n");
// 		rightWheel(1500);
// 		leftWheel(1500);
// 		delay_s(2);

		printf("Start!");
   8016e:	4e27      	ldr	r6, [pc, #156]	; (8020c <main+0xc4>)
		int rot = calcluteRotationAngle(0,100,0,0,100,600);
   80170:	2400      	movs	r4, #0
   80172:	2500      	movs	r5, #0
   80174:	f04f 0a00 	mov.w	sl, #0
   80178:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 80238 <main+0xf0>
		rotation(rot,130);
		delay_s(1);
		int dis = calculateDistance(0,0,100,600);
		printf("distance=%d\n",dis);
		moveTo(dis,1);
		delay_s(3);
   8017c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8023c <main+0xf4>
// 		printf("Klar!\n");
// 		rightWheel(1500);
// 		leftWheel(1500);
// 		delay_s(2);

		printf("Start!");
   80180:	4825      	ldr	r0, [pc, #148]	; (80218 <main+0xd0>)
   80182:	47b0      	blx	r6
		int rot = calcluteRotationAngle(0,100,0,0,100,600);
   80184:	e9cd 4500 	strd	r4, r5, [sp]
   80188:	e9cd 4502 	strd	r4, r5, [sp, #8]
   8018c:	e9cd ab04 	strd	sl, fp, [sp, #16]
   80190:	2200      	movs	r2, #0
   80192:	4b22      	ldr	r3, [pc, #136]	; (8021c <main+0xd4>)
   80194:	e9cd 2306 	strd	r2, r3, [sp, #24]
   80198:	4620      	mov	r0, r4
   8019a:	4629      	mov	r1, r5
   8019c:	4652      	mov	r2, sl
   8019e:	465b      	mov	r3, fp
   801a0:	4f1f      	ldr	r7, [pc, #124]	; (80220 <main+0xd8>)
   801a2:	47b8      	blx	r7
   801a4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80240 <main+0xf8>
   801a8:	47c0      	blx	r8
   801aa:	4607      	mov	r7, r0
		printf("rot=%d\n",rot);
   801ac:	481d      	ldr	r0, [pc, #116]	; (80224 <main+0xdc>)
   801ae:	4639      	mov	r1, r7
   801b0:	47b0      	blx	r6
		rotation(rot,130);
   801b2:	4638      	mov	r0, r7
   801b4:	2182      	movs	r1, #130	; 0x82
   801b6:	4b1c      	ldr	r3, [pc, #112]	; (80228 <main+0xe0>)
   801b8:	4798      	blx	r3
		delay_s(1);
   801ba:	481c      	ldr	r0, [pc, #112]	; (8022c <main+0xe4>)
   801bc:	4f15      	ldr	r7, [pc, #84]	; (80214 <main+0xcc>)
   801be:	47b8      	blx	r7
		int dis = calculateDistance(0,0,100,600);
   801c0:	e9cd ab00 	strd	sl, fp, [sp]
   801c4:	2200      	movs	r2, #0
   801c6:	4b15      	ldr	r3, [pc, #84]	; (8021c <main+0xd4>)
   801c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   801cc:	4620      	mov	r0, r4
   801ce:	4629      	mov	r1, r5
   801d0:	4622      	mov	r2, r4
   801d2:	462b      	mov	r3, r5
   801d4:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80244 <main+0xfc>
   801d8:	47e0      	blx	ip
   801da:	47c0      	blx	r8
   801dc:	4680      	mov	r8, r0
		printf("distance=%d\n",dis);
   801de:	4814      	ldr	r0, [pc, #80]	; (80230 <main+0xe8>)
   801e0:	4641      	mov	r1, r8
   801e2:	47b0      	blx	r6
		moveTo(dis,1);
   801e4:	4640      	mov	r0, r8
   801e6:	2101      	movs	r1, #1
   801e8:	4b12      	ldr	r3, [pc, #72]	; (80234 <main+0xec>)
   801ea:	4798      	blx	r3
		delay_s(3);
   801ec:	4648      	mov	r0, r9
   801ee:	47b8      	blx	r7
   801f0:	e7c6      	b.n	80180 <main+0x38>
   801f2:	bf00      	nop
   801f4:	2007000d 	.word	0x2007000d
   801f8:	00080dd9 	.word	0x00080dd9
   801fc:	000805e5 	.word	0x000805e5
   80200:	000806cd 	.word	0x000806cd
   80204:	00080d1d 	.word	0x00080d1d
   80208:	000856dc 	.word	0x000856dc
   8020c:	00082799 	.word	0x00082799
   80210:	00b71b00 	.word	0x00b71b00
   80214:	20070001 	.word	0x20070001
   80218:	000856e4 	.word	0x000856e4
   8021c:	4082c000 	.word	0x4082c000
   80220:	000809f9 	.word	0x000809f9
   80224:	000856ec 	.word	0x000856ec
   80228:	00080be1 	.word	0x00080be1
   8022c:	005b8d80 	.word	0x005b8d80
   80230:	000856f4 	.word	0x000856f4
   80234:	00080a79 	.word	0x00080a79
   80238:	40590000 	.word	0x40590000
   8023c:	0112a880 	.word	0x0112a880
   80240:	00082345 	.word	0x00082345
   80244:	00080775 	.word	0x00080775

00080248 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8024c:	b083      	sub	sp, #12
   8024e:	4605      	mov	r5, r0
	while (len) {
   80250:	4690      	mov	r8, r2
   80252:	2a00      	cmp	r2, #0
   80254:	d047      	beq.n	802e6 <usart_serial_read_packet+0x9e>
   80256:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80258:	4f25      	ldr	r7, [pc, #148]	; (802f0 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8025a:	4c26      	ldr	r4, [pc, #152]	; (802f4 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8025c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80308 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80260:	f8df b094 	ldr.w	fp, [pc, #148]	; 802f8 <usart_serial_read_packet+0xb0>
   80264:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80268:	2300      	movs	r3, #0
   8026a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8026c:	4b22      	ldr	r3, [pc, #136]	; (802f8 <usart_serial_read_packet+0xb0>)
   8026e:	429d      	cmp	r5, r3
   80270:	d106      	bne.n	80280 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80272:	4658      	mov	r0, fp
   80274:	4649      	mov	r1, r9
   80276:	4b21      	ldr	r3, [pc, #132]	; (802fc <usart_serial_read_packet+0xb4>)
   80278:	4798      	blx	r3
   8027a:	2800      	cmp	r0, #0
   8027c:	d1f9      	bne.n	80272 <usart_serial_read_packet+0x2a>
   8027e:	e019      	b.n	802b4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80280:	4b1f      	ldr	r3, [pc, #124]	; (80300 <usart_serial_read_packet+0xb8>)
   80282:	429d      	cmp	r5, r3
   80284:	d109      	bne.n	8029a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80286:	4699      	mov	r9, r3
   80288:	4648      	mov	r0, r9
   8028a:	a901      	add	r1, sp, #4
   8028c:	47a0      	blx	r4
   8028e:	2800      	cmp	r0, #0
   80290:	d1fa      	bne.n	80288 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80292:	9b01      	ldr	r3, [sp, #4]
   80294:	f806 3c01 	strb.w	r3, [r6, #-1]
   80298:	e017      	b.n	802ca <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8029a:	4b1a      	ldr	r3, [pc, #104]	; (80304 <usart_serial_read_packet+0xbc>)
   8029c:	429d      	cmp	r5, r3
   8029e:	d109      	bne.n	802b4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   802a0:	4699      	mov	r9, r3
   802a2:	4648      	mov	r0, r9
   802a4:	a901      	add	r1, sp, #4
   802a6:	47a0      	blx	r4
   802a8:	2800      	cmp	r0, #0
   802aa:	d1fa      	bne.n	802a2 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   802ac:	9b01      	ldr	r3, [sp, #4]
   802ae:	f806 3c01 	strb.w	r3, [r6, #-1]
   802b2:	e014      	b.n	802de <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   802b4:	4555      	cmp	r5, sl
   802b6:	d108      	bne.n	802ca <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   802b8:	4650      	mov	r0, sl
   802ba:	a901      	add	r1, sp, #4
   802bc:	47a0      	blx	r4
   802be:	2800      	cmp	r0, #0
   802c0:	d1fa      	bne.n	802b8 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   802c2:	9b01      	ldr	r3, [sp, #4]
   802c4:	f806 3c01 	strb.w	r3, [r6, #-1]
   802c8:	e009      	b.n	802de <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802ca:	42bd      	cmp	r5, r7
   802cc:	d107      	bne.n	802de <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   802ce:	4638      	mov	r0, r7
   802d0:	a901      	add	r1, sp, #4
   802d2:	47a0      	blx	r4
   802d4:	2800      	cmp	r0, #0
   802d6:	d1fa      	bne.n	802ce <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   802d8:	9b01      	ldr	r3, [sp, #4]
   802da:	f806 3c01 	strb.w	r3, [r6, #-1]
   802de:	3601      	adds	r6, #1
   802e0:	f1b8 0801 	subs.w	r8, r8, #1
   802e4:	d1be      	bne.n	80264 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   802e6:	2000      	movs	r0, #0
   802e8:	b003      	add	sp, #12
   802ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   802ee:	bf00      	nop
   802f0:	400a4000 	.word	0x400a4000
   802f4:	00080411 	.word	0x00080411
   802f8:	400e0800 	.word	0x400e0800
   802fc:	000803e9 	.word	0x000803e9
   80300:	40098000 	.word	0x40098000
   80304:	4009c000 	.word	0x4009c000
   80308:	400a0000 	.word	0x400a0000

0008030c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8030c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80310:	460c      	mov	r4, r1
   80312:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80314:	b960      	cbnz	r0, 80330 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80316:	2a00      	cmp	r2, #0
   80318:	dd0e      	ble.n	80338 <_read+0x2c>
   8031a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8031c:	4e09      	ldr	r6, [pc, #36]	; (80344 <_read+0x38>)
   8031e:	4d0a      	ldr	r5, [pc, #40]	; (80348 <_read+0x3c>)
   80320:	6830      	ldr	r0, [r6, #0]
   80322:	4621      	mov	r1, r4
   80324:	682b      	ldr	r3, [r5, #0]
   80326:	4798      	blx	r3
		ptr++;
   80328:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8032a:	42bc      	cmp	r4, r7
   8032c:	d1f8      	bne.n	80320 <_read+0x14>
   8032e:	e006      	b.n	8033e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80330:	f04f 30ff 	mov.w	r0, #4294967295
   80334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80338:	2000      	movs	r0, #0
   8033a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8033e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80344:	20070b20 	.word	0x20070b20
   80348:	20070b18 	.word	0x20070b18

0008034c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8034c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80350:	460e      	mov	r6, r1
   80352:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80354:	3801      	subs	r0, #1
   80356:	2802      	cmp	r0, #2
   80358:	d80f      	bhi.n	8037a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8035a:	b192      	cbz	r2, 80382 <_write+0x36>
   8035c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8035e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8039c <_write+0x50>
   80362:	4f0d      	ldr	r7, [pc, #52]	; (80398 <_write+0x4c>)
   80364:	f8d8 0000 	ldr.w	r0, [r8]
   80368:	5d31      	ldrb	r1, [r6, r4]
   8036a:	683b      	ldr	r3, [r7, #0]
   8036c:	4798      	blx	r3
   8036e:	2800      	cmp	r0, #0
   80370:	db0a      	blt.n	80388 <_write+0x3c>
			return -1;
		}
		++nChars;
   80372:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80374:	42a5      	cmp	r5, r4
   80376:	d1f5      	bne.n	80364 <_write+0x18>
   80378:	e00a      	b.n	80390 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8037a:	f04f 30ff 	mov.w	r0, #4294967295
   8037e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80382:	2000      	movs	r0, #0
   80384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80388:	f04f 30ff 	mov.w	r0, #4294967295
   8038c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80390:	4620      	mov	r0, r4
	}
	return nChars;
}
   80392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80396:	bf00      	nop
   80398:	20070b1c 	.word	0x20070b1c
   8039c:	20070b20 	.word	0x20070b20

000803a0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   803a0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   803a2:	23ac      	movs	r3, #172	; 0xac
   803a4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   803a6:	680a      	ldr	r2, [r1, #0]
   803a8:	684b      	ldr	r3, [r1, #4]
   803aa:	fbb2 f3f3 	udiv	r3, r2, r3
   803ae:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   803b0:	1e5c      	subs	r4, r3, #1
   803b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   803b6:	4294      	cmp	r4, r2
   803b8:	d80a      	bhi.n	803d0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   803ba:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   803bc:	688b      	ldr	r3, [r1, #8]
   803be:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   803c0:	f240 2302 	movw	r3, #514	; 0x202
   803c4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   803c8:	2350      	movs	r3, #80	; 0x50
   803ca:	6003      	str	r3, [r0, #0]

	return 0;
   803cc:	2000      	movs	r0, #0
   803ce:	e000      	b.n	803d2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   803d0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   803d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   803d6:	4770      	bx	lr

000803d8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   803d8:	6943      	ldr	r3, [r0, #20]
   803da:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   803de:	bf1a      	itte	ne
   803e0:	61c1      	strne	r1, [r0, #28]
	return 0;
   803e2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   803e4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   803e6:	4770      	bx	lr

000803e8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   803e8:	6943      	ldr	r3, [r0, #20]
   803ea:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   803ee:	bf1d      	ittte	ne
   803f0:	6983      	ldrne	r3, [r0, #24]
   803f2:	700b      	strbne	r3, [r1, #0]
	return 0;
   803f4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   803f6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   803f8:	4770      	bx	lr
   803fa:	bf00      	nop

000803fc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   803fc:	6943      	ldr	r3, [r0, #20]
   803fe:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80402:	bf1d      	ittte	ne
   80404:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80408:	61c1      	strne	r1, [r0, #28]
	return 0;
   8040a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8040c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8040e:	4770      	bx	lr

00080410 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80410:	6943      	ldr	r3, [r0, #20]
   80412:	f013 0f01 	tst.w	r3, #1
   80416:	d005      	beq.n	80424 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80418:	6983      	ldr	r3, [r0, #24]
   8041a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8041e:	600b      	str	r3, [r1, #0]

	return 0;
   80420:	2000      	movs	r0, #0
   80422:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80424:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80426:	4770      	bx	lr

00080428 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80428:	b500      	push	{lr}
   8042a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   8042c:	4813      	ldr	r0, [pc, #76]	; (8047c <USART0_Handler+0x54>)
   8042e:	f10d 0107 	add.w	r1, sp, #7
   80432:	2201      	movs	r2, #1
   80434:	4b12      	ldr	r3, [pc, #72]	; (80480 <USART0_Handler+0x58>)
   80436:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80438:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8043a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8043e:	2200      	movs	r2, #0
   80440:	4b10      	ldr	r3, [pc, #64]	; (80484 <USART0_Handler+0x5c>)
   80442:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   80444:	4b10      	ldr	r3, [pc, #64]	; (80488 <USART0_Handler+0x60>)
   80446:	781a      	ldrb	r2, [r3, #0]
   80448:	3201      	adds	r2, #1
   8044a:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8044c:	4b0f      	ldr	r3, [pc, #60]	; (8048c <USART0_Handler+0x64>)
   8044e:	781b      	ldrb	r3, [r3, #0]
   80450:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80454:	4a0e      	ldr	r2, [pc, #56]	; (80490 <USART0_Handler+0x68>)
   80456:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80458:	2b9b      	cmp	r3, #155	; 0x9b
   8045a:	d103      	bne.n	80464 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   8045c:	2200      	movs	r2, #0
   8045e:	4b0b      	ldr	r3, [pc, #44]	; (8048c <USART0_Handler+0x64>)
   80460:	701a      	strb	r2, [r3, #0]
   80462:	e002      	b.n	8046a <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   80464:	3301      	adds	r3, #1
   80466:	4a09      	ldr	r2, [pc, #36]	; (8048c <USART0_Handler+0x64>)
   80468:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8046a:	2201      	movs	r2, #1
   8046c:	4b05      	ldr	r3, [pc, #20]	; (80484 <USART0_Handler+0x5c>)
   8046e:	701a      	strb	r2, [r3, #0]
   80470:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80474:	b662      	cpsie	i
}
   80476:	b003      	add	sp, #12
   80478:	f85d fb04 	ldr.w	pc, [sp], #4
   8047c:	40098000 	.word	0x40098000
   80480:	00080249 	.word	0x00080249
   80484:	2007013a 	.word	0x2007013a
   80488:	20070a65 	.word	0x20070a65
   8048c:	20070a64 	.word	0x20070a64
   80490:	200709c8 	.word	0x200709c8

00080494 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80494:	b5f0      	push	{r4, r5, r6, r7, lr}
   80496:	b083      	sub	sp, #12
   80498:	4604      	mov	r4, r0
   8049a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8049c:	2300      	movs	r3, #0
   8049e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   804a0:	4b1f      	ldr	r3, [pc, #124]	; (80520 <usart_serial_getchar+0x8c>)
   804a2:	4298      	cmp	r0, r3
   804a4:	d107      	bne.n	804b6 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   804a6:	461f      	mov	r7, r3
   804a8:	4e1e      	ldr	r6, [pc, #120]	; (80524 <usart_serial_getchar+0x90>)
   804aa:	4638      	mov	r0, r7
   804ac:	4629      	mov	r1, r5
   804ae:	47b0      	blx	r6
   804b0:	2800      	cmp	r0, #0
   804b2:	d1fa      	bne.n	804aa <usart_serial_getchar+0x16>
   804b4:	e019      	b.n	804ea <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   804b6:	4b1c      	ldr	r3, [pc, #112]	; (80528 <usart_serial_getchar+0x94>)
   804b8:	4298      	cmp	r0, r3
   804ba:	d109      	bne.n	804d0 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   804bc:	461f      	mov	r7, r3
   804be:	4e1b      	ldr	r6, [pc, #108]	; (8052c <usart_serial_getchar+0x98>)
   804c0:	4638      	mov	r0, r7
   804c2:	a901      	add	r1, sp, #4
   804c4:	47b0      	blx	r6
   804c6:	2800      	cmp	r0, #0
   804c8:	d1fa      	bne.n	804c0 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   804ca:	9b01      	ldr	r3, [sp, #4]
   804cc:	702b      	strb	r3, [r5, #0]
   804ce:	e019      	b.n	80504 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   804d0:	4b17      	ldr	r3, [pc, #92]	; (80530 <usart_serial_getchar+0x9c>)
   804d2:	4298      	cmp	r0, r3
   804d4:	d109      	bne.n	804ea <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   804d6:	461e      	mov	r6, r3
   804d8:	4c14      	ldr	r4, [pc, #80]	; (8052c <usart_serial_getchar+0x98>)
   804da:	4630      	mov	r0, r6
   804dc:	a901      	add	r1, sp, #4
   804de:	47a0      	blx	r4
   804e0:	2800      	cmp	r0, #0
   804e2:	d1fa      	bne.n	804da <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   804e4:	9b01      	ldr	r3, [sp, #4]
   804e6:	702b      	strb	r3, [r5, #0]
   804e8:	e018      	b.n	8051c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   804ea:	4b12      	ldr	r3, [pc, #72]	; (80534 <usart_serial_getchar+0xa0>)
   804ec:	429c      	cmp	r4, r3
   804ee:	d109      	bne.n	80504 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   804f0:	461e      	mov	r6, r3
   804f2:	4c0e      	ldr	r4, [pc, #56]	; (8052c <usart_serial_getchar+0x98>)
   804f4:	4630      	mov	r0, r6
   804f6:	a901      	add	r1, sp, #4
   804f8:	47a0      	blx	r4
   804fa:	2800      	cmp	r0, #0
   804fc:	d1fa      	bne.n	804f4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   804fe:	9b01      	ldr	r3, [sp, #4]
   80500:	702b      	strb	r3, [r5, #0]
   80502:	e00b      	b.n	8051c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80504:	4b0c      	ldr	r3, [pc, #48]	; (80538 <usart_serial_getchar+0xa4>)
   80506:	429c      	cmp	r4, r3
   80508:	d108      	bne.n	8051c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8050a:	461e      	mov	r6, r3
   8050c:	4c07      	ldr	r4, [pc, #28]	; (8052c <usart_serial_getchar+0x98>)
   8050e:	4630      	mov	r0, r6
   80510:	a901      	add	r1, sp, #4
   80512:	47a0      	blx	r4
   80514:	2800      	cmp	r0, #0
   80516:	d1fa      	bne.n	8050e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80518:	9b01      	ldr	r3, [sp, #4]
   8051a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8051c:	b003      	add	sp, #12
   8051e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80520:	400e0800 	.word	0x400e0800
   80524:	000803e9 	.word	0x000803e9
   80528:	40098000 	.word	0x40098000
   8052c:	00080411 	.word	0x00080411
   80530:	4009c000 	.word	0x4009c000
   80534:	400a0000 	.word	0x400a0000
   80538:	400a4000 	.word	0x400a4000

0008053c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   8053c:	b570      	push	{r4, r5, r6, lr}
   8053e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80540:	4b21      	ldr	r3, [pc, #132]	; (805c8 <usart_serial_putchar+0x8c>)
   80542:	4298      	cmp	r0, r3
   80544:	d107      	bne.n	80556 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80546:	461e      	mov	r6, r3
   80548:	4d20      	ldr	r5, [pc, #128]	; (805cc <usart_serial_putchar+0x90>)
   8054a:	4630      	mov	r0, r6
   8054c:	4621      	mov	r1, r4
   8054e:	47a8      	blx	r5
   80550:	2800      	cmp	r0, #0
   80552:	d1fa      	bne.n	8054a <usart_serial_putchar+0xe>
   80554:	e02b      	b.n	805ae <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80556:	4b1e      	ldr	r3, [pc, #120]	; (805d0 <usart_serial_putchar+0x94>)
   80558:	4298      	cmp	r0, r3
   8055a:	d107      	bne.n	8056c <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   8055c:	461e      	mov	r6, r3
   8055e:	4d1d      	ldr	r5, [pc, #116]	; (805d4 <usart_serial_putchar+0x98>)
   80560:	4630      	mov	r0, r6
   80562:	4621      	mov	r1, r4
   80564:	47a8      	blx	r5
   80566:	2800      	cmp	r0, #0
   80568:	d1fa      	bne.n	80560 <usart_serial_putchar+0x24>
   8056a:	e022      	b.n	805b2 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8056c:	4b1a      	ldr	r3, [pc, #104]	; (805d8 <usart_serial_putchar+0x9c>)
   8056e:	4298      	cmp	r0, r3
   80570:	d107      	bne.n	80582 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80572:	461e      	mov	r6, r3
   80574:	4d17      	ldr	r5, [pc, #92]	; (805d4 <usart_serial_putchar+0x98>)
   80576:	4630      	mov	r0, r6
   80578:	4621      	mov	r1, r4
   8057a:	47a8      	blx	r5
   8057c:	2800      	cmp	r0, #0
   8057e:	d1fa      	bne.n	80576 <usart_serial_putchar+0x3a>
   80580:	e019      	b.n	805b6 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80582:	4b16      	ldr	r3, [pc, #88]	; (805dc <usart_serial_putchar+0xa0>)
   80584:	4298      	cmp	r0, r3
   80586:	d107      	bne.n	80598 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80588:	461e      	mov	r6, r3
   8058a:	4d12      	ldr	r5, [pc, #72]	; (805d4 <usart_serial_putchar+0x98>)
   8058c:	4630      	mov	r0, r6
   8058e:	4621      	mov	r1, r4
   80590:	47a8      	blx	r5
   80592:	2800      	cmp	r0, #0
   80594:	d1fa      	bne.n	8058c <usart_serial_putchar+0x50>
   80596:	e010      	b.n	805ba <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80598:	4b11      	ldr	r3, [pc, #68]	; (805e0 <usart_serial_putchar+0xa4>)
   8059a:	4298      	cmp	r0, r3
   8059c:	d10f      	bne.n	805be <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8059e:	461e      	mov	r6, r3
   805a0:	4d0c      	ldr	r5, [pc, #48]	; (805d4 <usart_serial_putchar+0x98>)
   805a2:	4630      	mov	r0, r6
   805a4:	4621      	mov	r1, r4
   805a6:	47a8      	blx	r5
   805a8:	2800      	cmp	r0, #0
   805aa:	d1fa      	bne.n	805a2 <usart_serial_putchar+0x66>
   805ac:	e009      	b.n	805c2 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   805ae:	2001      	movs	r0, #1
   805b0:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805b2:	2001      	movs	r0, #1
   805b4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805b6:	2001      	movs	r0, #1
   805b8:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805ba:	2001      	movs	r0, #1
   805bc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   805be:	2000      	movs	r0, #0
   805c0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805c2:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   805c4:	bd70      	pop	{r4, r5, r6, pc}
   805c6:	bf00      	nop
   805c8:	400e0800 	.word	0x400e0800
   805cc:	000803d9 	.word	0x000803d9
   805d0:	40098000 	.word	0x40098000
   805d4:	000803fd 	.word	0x000803fd
   805d8:	4009c000 	.word	0x4009c000
   805dc:	400a0000 	.word	0x400a0000
   805e0:	400a4000 	.word	0x400a4000

000805e4 <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   805e4:	b530      	push	{r4, r5, lr}
   805e6:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805e8:	2008      	movs	r0, #8
   805ea:	4d13      	ldr	r5, [pc, #76]	; (80638 <configureConsole+0x54>)
   805ec:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   805ee:	4c13      	ldr	r4, [pc, #76]	; (8063c <configureConsole+0x58>)
   805f0:	4b13      	ldr	r3, [pc, #76]	; (80640 <configureConsole+0x5c>)
   805f2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   805f4:	4a13      	ldr	r2, [pc, #76]	; (80644 <configureConsole+0x60>)
   805f6:	4b14      	ldr	r3, [pc, #80]	; (80648 <configureConsole+0x64>)
   805f8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   805fa:	4a14      	ldr	r2, [pc, #80]	; (8064c <configureConsole+0x68>)
   805fc:	4b14      	ldr	r3, [pc, #80]	; (80650 <configureConsole+0x6c>)
   805fe:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80600:	4b14      	ldr	r3, [pc, #80]	; (80654 <configureConsole+0x70>)
   80602:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80604:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80608:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8060a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8060e:	9303      	str	r3, [sp, #12]
   80610:	2008      	movs	r0, #8
   80612:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80614:	4620      	mov	r0, r4
   80616:	a901      	add	r1, sp, #4
   80618:	4b0f      	ldr	r3, [pc, #60]	; (80658 <configureConsole+0x74>)
   8061a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8061c:	4d0f      	ldr	r5, [pc, #60]	; (8065c <configureConsole+0x78>)
   8061e:	682b      	ldr	r3, [r5, #0]
   80620:	6898      	ldr	r0, [r3, #8]
   80622:	2100      	movs	r1, #0
   80624:	4c0e      	ldr	r4, [pc, #56]	; (80660 <configureConsole+0x7c>)
   80626:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80628:	682b      	ldr	r3, [r5, #0]
   8062a:	6858      	ldr	r0, [r3, #4]
   8062c:	2100      	movs	r1, #0
   8062e:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   80630:	2000      	movs	r0, #0
   80632:	b005      	add	sp, #20
   80634:	bd30      	pop	{r4, r5, pc}
   80636:	bf00      	nop
   80638:	00081195 	.word	0x00081195
   8063c:	400e0800 	.word	0x400e0800
   80640:	20070b20 	.word	0x20070b20
   80644:	0008053d 	.word	0x0008053d
   80648:	20070b1c 	.word	0x20070b1c
   8064c:	00080495 	.word	0x00080495
   80650:	20070b18 	.word	0x20070b18
   80654:	0501bd00 	.word	0x0501bd00
   80658:	000803a1 	.word	0x000803a1
   8065c:	20070570 	.word	0x20070570
   80660:	00082855 	.word	0x00082855

00080664 <pin12_edge_handler>:


}

// Handler which calls when pin 53 is toggle.
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   80664:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   80666:	4808      	ldr	r0, [pc, #32]	; (80688 <pin12_edge_handler+0x24>)
   80668:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8066c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80670:	4b06      	ldr	r3, [pc, #24]	; (8068c <pin12_edge_handler+0x28>)
   80672:	4798      	blx	r3
   80674:	b130      	cbz	r0, 80684 <pin12_edge_handler+0x20>
		//increase the counter value
		counter_2++;
   80676:	4b06      	ldr	r3, [pc, #24]	; (80690 <pin12_edge_handler+0x2c>)
   80678:	881a      	ldrh	r2, [r3, #0]
   8067a:	3201      	adds	r2, #1
   8067c:	801a      	strh	r2, [r3, #0]
		c2Loop = true;
   8067e:	2201      	movs	r2, #1
   80680:	4b04      	ldr	r3, [pc, #16]	; (80694 <pin12_edge_handler+0x30>)
   80682:	701a      	strb	r2, [r3, #0]
   80684:	bd08      	pop	{r3, pc}
   80686:	bf00      	nop
   80688:	400e1200 	.word	0x400e1200
   8068c:	00080e49 	.word	0x00080e49
   80690:	20070a68 	.word	0x20070a68
   80694:	20070139 	.word	0x20070139

00080698 <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}
}

// Handler which calls when pin 51 is toggle.
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   80698:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   8069a:	4808      	ldr	r0, [pc, #32]	; (806bc <pin14_edge_handler+0x24>)
   8069c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   806a4:	4b06      	ldr	r3, [pc, #24]	; (806c0 <pin14_edge_handler+0x28>)
   806a6:	4798      	blx	r3
   806a8:	b130      	cbz	r0, 806b8 <pin14_edge_handler+0x20>
	//Increase the counter value
			counter_1++;
   806aa:	4b06      	ldr	r3, [pc, #24]	; (806c4 <pin14_edge_handler+0x2c>)
   806ac:	881a      	ldrh	r2, [r3, #0]
   806ae:	3201      	adds	r2, #1
   806b0:	801a      	strh	r2, [r3, #0]
			c1Loop = true;
   806b2:	2201      	movs	r2, #1
   806b4:	4b04      	ldr	r3, [pc, #16]	; (806c8 <pin14_edge_handler+0x30>)
   806b6:	701a      	strb	r2, [r3, #0]
   806b8:	bd08      	pop	{r3, pc}
   806ba:	bf00      	nop
   806bc:	400e1000 	.word	0x400e1000
   806c0:	00080e49 	.word	0x00080e49
   806c4:	20070a66 	.word	0x20070a66
   806c8:	20070138 	.word	0x20070138

000806cc <configInterrupts>:
 uint16_t counter_2 = 0;
 bool c1Loop = true;
 bool c2Loop = true;


void configInterrupts(void){
   806cc:	b570      	push	{r4, r5, r6, lr}
   806ce:	b082      	sub	sp, #8

	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   806d0:	200c      	movs	r0, #12
   806d2:	4c1a      	ldr	r4, [pc, #104]	; (8073c <configInterrupts+0x70>)
   806d4:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);
   806d6:	200d      	movs	r0, #13
   806d8:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   806da:	4d19      	ldr	r5, [pc, #100]	; (80740 <configInterrupts+0x74>)
   806dc:	4628      	mov	r0, r5
   806de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   806e2:	2201      	movs	r2, #1
   806e4:	4e17      	ldr	r6, [pc, #92]	; (80744 <configInterrupts+0x78>)
   806e6:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   806e8:	4c17      	ldr	r4, [pc, #92]	; (80748 <configInterrupts+0x7c>)
   806ea:	4620      	mov	r0, r4
   806ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   806f0:	2201      	movs	r2, #1
   806f2:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   806f4:	4b15      	ldr	r3, [pc, #84]	; (8074c <configInterrupts+0x80>)
   806f6:	9300      	str	r3, [sp, #0]
   806f8:	4628      	mov	r0, r5
   806fa:	210d      	movs	r1, #13
   806fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80700:	2340      	movs	r3, #64	; 0x40
   80702:	4e13      	ldr	r6, [pc, #76]	; (80750 <configInterrupts+0x84>)
   80704:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   80706:	4b13      	ldr	r3, [pc, #76]	; (80754 <configInterrupts+0x88>)
   80708:	9300      	str	r3, [sp, #0]
   8070a:	4620      	mov	r0, r4
   8070c:	210c      	movs	r1, #12
   8070e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80712:	2340      	movs	r3, #64	; 0x40
   80714:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   80716:	4628      	mov	r0, r5
   80718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8071c:	4d0e      	ldr	r5, [pc, #56]	; (80758 <configInterrupts+0x8c>)
   8071e:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   80720:	4620      	mov	r0, r4
   80722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80726:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80728:	4b0c      	ldr	r3, [pc, #48]	; (8075c <configInterrupts+0x90>)
   8072a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8072e:	601a      	str	r2, [r3, #0]
   80730:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80734:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);


}
   80736:	b002      	add	sp, #8
   80738:	bd70      	pop	{r4, r5, r6, pc}
   8073a:	bf00      	nop
   8073c:	00081195 	.word	0x00081195
   80740:	400e1200 	.word	0x400e1200
   80744:	00080ea1 	.word	0x00080ea1
   80748:	400e1000 	.word	0x400e1000
   8074c:	00080665 	.word	0x00080665
   80750:	00081109 	.word	0x00081109
   80754:	00080699 	.word	0x00080699
   80758:	00080f2d 	.word	0x00080f2d
   8075c:	e000e100 	.word	0xe000e100

00080760 <reset_Counter>:
			//printf("\n c2 = %d",counter_2);
	}
}

void reset_Counter(void){
	counter_1=0;
   80760:	2300      	movs	r3, #0
   80762:	4a02      	ldr	r2, [pc, #8]	; (8076c <reset_Counter+0xc>)
   80764:	8013      	strh	r3, [r2, #0]
	counter_2=0;
   80766:	4a02      	ldr	r2, [pc, #8]	; (80770 <reset_Counter+0x10>)
   80768:	8013      	strh	r3, [r2, #0]
   8076a:	4770      	bx	lr
   8076c:	20070a66 	.word	0x20070a66
   80770:	20070a68 	.word	0x20070a68

00080774 <calculateDistance>:
	double degree;
	degree = radian*(180/M_PI);
	return degree;
}

double calculateDistance (double Xa, double Ya, double Xb, double Yb){
   80774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80778:	4606      	mov	r6, r0
   8077a:	460f      	mov	r7, r1
   8077c:	4614      	mov	r4, r2
   8077e:	461d      	mov	r5, r3
	double distance;
	double deltaX = Xb - Xa;
   80780:	f8df a054 	ldr.w	sl, [pc, #84]	; 807d8 <calculateDistance+0x64>
   80784:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   80788:	4632      	mov	r2, r6
   8078a:	463b      	mov	r3, r7
   8078c:	47d0      	blx	sl
   8078e:	4680      	mov	r8, r0
   80790:	4689      	mov	r9, r1
	double deltaY = Yb - Ya;
   80792:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   80796:	4622      	mov	r2, r4
   80798:	462b      	mov	r3, r5
   8079a:	47d0      	blx	sl
   8079c:	4604      	mov	r4, r0
   8079e:	460d      	mov	r5, r1
	distance = sqrt((deltaX*deltaX) + (deltaY*deltaY));
   807a0:	f8df a038 	ldr.w	sl, [pc, #56]	; 807dc <calculateDistance+0x68>
   807a4:	f8df b038 	ldr.w	fp, [pc, #56]	; 807e0 <calculateDistance+0x6c>
   807a8:	4640      	mov	r0, r8
   807aa:	4649      	mov	r1, r9
   807ac:	4642      	mov	r2, r8
   807ae:	464b      	mov	r3, r9
   807b0:	47d0      	blx	sl
   807b2:	4606      	mov	r6, r0
   807b4:	460f      	mov	r7, r1
   807b6:	4620      	mov	r0, r4
   807b8:	4629      	mov	r1, r5
   807ba:	4622      	mov	r2, r4
   807bc:	462b      	mov	r3, r5
   807be:	47d0      	blx	sl
   807c0:	4602      	mov	r2, r0
   807c2:	460b      	mov	r3, r1
   807c4:	4630      	mov	r0, r6
   807c6:	4639      	mov	r1, r7
   807c8:	47d8      	blx	fp
   807ca:	4b02      	ldr	r3, [pc, #8]	; (807d4 <calculateDistance+0x60>)
   807cc:	4798      	blx	r3
	return distance;
}
   807ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807d2:	bf00      	nop
   807d4:	00081821 	.word	0x00081821
   807d8:	00081aa9 	.word	0x00081aa9
   807dc:	00081e11 	.word	0x00081e11
   807e0:	00081aad 	.word	0x00081aad
   807e4:	00000000 	.word	0x00000000

000807e8 <calculateAzimuthAngle>:

double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
   807e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807ec:	4604      	mov	r4, r0
   807ee:	460d      	mov	r5, r1
   807f0:	4616      	mov	r6, r2
   807f2:	461f      	mov	r7, r3
	double azimutAngle = 0;
	double deltaX = Xb-Xa;
   807f4:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 809ec <calculateAzimuthAngle+0x204>
   807f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   807fc:	4622      	mov	r2, r4
   807fe:	462b      	mov	r3, r5
   80800:	47c0      	blx	r8
   80802:	4604      	mov	r4, r0
   80804:	460d      	mov	r5, r1
	double deltaY = Yb-Ya;
   80806:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8080a:	4632      	mov	r2, r6
   8080c:	463b      	mov	r3, r7
   8080e:	47c0      	blx	r8
   80810:	4606      	mov	r6, r0
   80812:	460f      	mov	r7, r1
	
	if ( (deltaX == 0) && (deltaY == 0) )
   80814:	4620      	mov	r0, r4
   80816:	4629      	mov	r1, r5
   80818:	2200      	movs	r2, #0
   8081a:	2300      	movs	r3, #0
   8081c:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 809c8 <calculateAzimuthAngle+0x1e0>
   80820:	47e0      	blx	ip
   80822:	b1a8      	cbz	r0, 80850 <calculateAzimuthAngle+0x68>
   80824:	4630      	mov	r0, r6
   80826:	4639      	mov	r1, r7
   80828:	2200      	movs	r2, #0
   8082a:	2300      	movs	r3, #0
   8082c:	4c66      	ldr	r4, [pc, #408]	; (809c8 <calculateAzimuthAngle+0x1e0>)
   8082e:	47a0      	blx	r4
   80830:	2800      	cmp	r0, #0
   80832:	f040 80aa 	bne.w	8098a <calculateAzimuthAngle+0x1a2>
	{
		azimutAngle = 0;
	} 
	else if (deltaX == 0)
	{
		if (deltaY>0)
   80836:	4630      	mov	r0, r6
   80838:	4639      	mov	r1, r7
   8083a:	2200      	movs	r2, #0
   8083c:	2300      	movs	r3, #0
   8083e:	4c63      	ldr	r4, [pc, #396]	; (809cc <calculateAzimuthAngle+0x1e4>)
   80840:	47a0      	blx	r4
   80842:	2800      	cmp	r0, #0
   80844:	f000 80a5 	beq.w	80992 <calculateAzimuthAngle+0x1aa>
		{
			azimutAngle = 0;
   80848:	2000      	movs	r0, #0
   8084a:	2100      	movs	r1, #0
   8084c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 180;
		}
		
	}
	else if (deltaY == 0)
   80850:	4630      	mov	r0, r6
   80852:	4639      	mov	r1, r7
   80854:	2200      	movs	r2, #0
   80856:	2300      	movs	r3, #0
   80858:	f8df c16c 	ldr.w	ip, [pc, #364]	; 809c8 <calculateAzimuthAngle+0x1e0>
   8085c:	47e0      	blx	ip
   8085e:	b160      	cbz	r0, 8087a <calculateAzimuthAngle+0x92>
	{
		if (deltaX>0)
   80860:	4620      	mov	r0, r4
   80862:	4629      	mov	r1, r5
   80864:	2200      	movs	r2, #0
   80866:	2300      	movs	r3, #0
   80868:	4c58      	ldr	r4, [pc, #352]	; (809cc <calculateAzimuthAngle+0x1e4>)
   8086a:	47a0      	blx	r4
   8086c:	2800      	cmp	r0, #0
   8086e:	f000 8094 	beq.w	8099a <calculateAzimuthAngle+0x1b2>
		{
			azimutAngle = 90;
   80872:	2000      	movs	r0, #0
   80874:	4956      	ldr	r1, [pc, #344]	; (809d0 <calculateAzimuthAngle+0x1e8>)
   80876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		
	}
	else
	{
		if ( (deltaX > 0) && (deltaY > 0 ) )
   8087a:	4620      	mov	r0, r4
   8087c:	4629      	mov	r1, r5
   8087e:	2200      	movs	r2, #0
   80880:	2300      	movs	r3, #0
   80882:	f8df c148 	ldr.w	ip, [pc, #328]	; 809cc <calculateAzimuthAngle+0x1e4>
   80886:	47e0      	blx	ip
   80888:	b1b0      	cbz	r0, 808b8 <calculateAzimuthAngle+0xd0>
   8088a:	4630      	mov	r0, r6
   8088c:	4639      	mov	r1, r7
   8088e:	2200      	movs	r2, #0
   80890:	2300      	movs	r3, #0
   80892:	f8df c138 	ldr.w	ip, [pc, #312]	; 809cc <calculateAzimuthAngle+0x1e4>
   80896:	47e0      	blx	ip
   80898:	b1b0      	cbz	r0, 808c8 <calculateAzimuthAngle+0xe0>
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   8089a:	4620      	mov	r0, r4
   8089c:	4629      	mov	r1, r5
   8089e:	4632      	mov	r2, r6
   808a0:	463b      	mov	r3, r7
   808a2:	4c4c      	ldr	r4, [pc, #304]	; (809d4 <calculateAzimuthAngle+0x1ec>)
   808a4:	47a0      	blx	r4
   808a6:	4b4c      	ldr	r3, [pc, #304]	; (809d8 <calculateAzimuthAngle+0x1f0>)
   808a8:	4798      	blx	r3
#include "MathFunctions.h"


double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   808aa:	a343      	add	r3, pc, #268	; (adr r3, 809b8 <calculateAzimuthAngle+0x1d0>)
   808ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   808b0:	4c4a      	ldr	r4, [pc, #296]	; (809dc <calculateAzimuthAngle+0x1f4>)
   808b2:	47a0      	blx	r4
	}
	else
	{
		if ( (deltaX > 0) && (deltaY > 0 ) )
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   808b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} 
		else if ( (deltaX > 0) && (deltaY < 0 ) )
   808b8:	4620      	mov	r0, r4
   808ba:	4629      	mov	r1, r5
   808bc:	2200      	movs	r2, #0
   808be:	2300      	movs	r3, #0
   808c0:	f8df c108 	ldr.w	ip, [pc, #264]	; 809cc <calculateAzimuthAngle+0x1e4>
   808c4:	47e0      	blx	ip
   808c6:	b1d0      	cbz	r0, 808fe <calculateAzimuthAngle+0x116>
   808c8:	4630      	mov	r0, r6
   808ca:	4639      	mov	r1, r7
   808cc:	2200      	movs	r2, #0
   808ce:	2300      	movs	r3, #0
   808d0:	f8df c11c 	ldr.w	ip, [pc, #284]	; 809f0 <calculateAzimuthAngle+0x208>
   808d4:	47e0      	blx	ip
   808d6:	b190      	cbz	r0, 808fe <calculateAzimuthAngle+0x116>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   808d8:	4620      	mov	r0, r4
   808da:	4629      	mov	r1, r5
   808dc:	4632      	mov	r2, r6
   808de:	463b      	mov	r3, r7
   808e0:	4c3c      	ldr	r4, [pc, #240]	; (809d4 <calculateAzimuthAngle+0x1ec>)
   808e2:	47a0      	blx	r4
   808e4:	4b3c      	ldr	r3, [pc, #240]	; (809d8 <calculateAzimuthAngle+0x1f0>)
   808e6:	4798      	blx	r3
#include "MathFunctions.h"


double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   808e8:	a333      	add	r3, pc, #204	; (adr r3, 809b8 <calculateAzimuthAngle+0x1d0>)
   808ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   808ee:	4c3b      	ldr	r4, [pc, #236]	; (809dc <calculateAzimuthAngle+0x1f4>)
   808f0:	47a0      	blx	r4
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
		} 
		else if ( (deltaX > 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   808f2:	2200      	movs	r2, #0
   808f4:	4b3a      	ldr	r3, [pc, #232]	; (809e0 <calculateAzimuthAngle+0x1f8>)
   808f6:	4c3b      	ldr	r4, [pc, #236]	; (809e4 <calculateAzimuthAngle+0x1fc>)
   808f8:	47a0      	blx	r4
   808fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		else if ( (deltaX < 0) && (deltaY < 0 ) )
   808fe:	4620      	mov	r0, r4
   80900:	4629      	mov	r1, r5
   80902:	2200      	movs	r2, #0
   80904:	2300      	movs	r3, #0
   80906:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 809f0 <calculateAzimuthAngle+0x208>
   8090a:	47e0      	blx	ip
   8090c:	b1d0      	cbz	r0, 80944 <calculateAzimuthAngle+0x15c>
   8090e:	4630      	mov	r0, r6
   80910:	4639      	mov	r1, r7
   80912:	2200      	movs	r2, #0
   80914:	2300      	movs	r3, #0
   80916:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 809f0 <calculateAzimuthAngle+0x208>
   8091a:	47e0      	blx	ip
   8091c:	b1d0      	cbz	r0, 80954 <calculateAzimuthAngle+0x16c>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   8091e:	4620      	mov	r0, r4
   80920:	4629      	mov	r1, r5
   80922:	4632      	mov	r2, r6
   80924:	463b      	mov	r3, r7
   80926:	4c2b      	ldr	r4, [pc, #172]	; (809d4 <calculateAzimuthAngle+0x1ec>)
   80928:	47a0      	blx	r4
   8092a:	4b2b      	ldr	r3, [pc, #172]	; (809d8 <calculateAzimuthAngle+0x1f0>)
   8092c:	4798      	blx	r3
#include "MathFunctions.h"


double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   8092e:	a322      	add	r3, pc, #136	; (adr r3, 809b8 <calculateAzimuthAngle+0x1d0>)
   80930:	e9d3 2300 	ldrd	r2, r3, [r3]
   80934:	4c29      	ldr	r4, [pc, #164]	; (809dc <calculateAzimuthAngle+0x1f4>)
   80936:	47a0      	blx	r4
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
		}
		else if ( (deltaX < 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   80938:	2200      	movs	r2, #0
   8093a:	4b29      	ldr	r3, [pc, #164]	; (809e0 <calculateAzimuthAngle+0x1f8>)
   8093c:	4c29      	ldr	r4, [pc, #164]	; (809e4 <calculateAzimuthAngle+0x1fc>)
   8093e:	47a0      	blx	r4
   80940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		else if ( (deltaX < 0) && (deltaY > 0 ) )
   80944:	4620      	mov	r0, r4
   80946:	4629      	mov	r1, r5
   80948:	2200      	movs	r2, #0
   8094a:	2300      	movs	r3, #0
   8094c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 809f0 <calculateAzimuthAngle+0x208>
   80950:	47e0      	blx	ip
   80952:	b338      	cbz	r0, 809a4 <calculateAzimuthAngle+0x1bc>
   80954:	4630      	mov	r0, r6
   80956:	4639      	mov	r1, r7
   80958:	2200      	movs	r2, #0
   8095a:	2300      	movs	r3, #0
   8095c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 809cc <calculateAzimuthAngle+0x1e4>
   80960:	47e0      	blx	ip
   80962:	b318      	cbz	r0, 809ac <calculateAzimuthAngle+0x1c4>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   80964:	4620      	mov	r0, r4
   80966:	4629      	mov	r1, r5
   80968:	4632      	mov	r2, r6
   8096a:	463b      	mov	r3, r7
   8096c:	4c19      	ldr	r4, [pc, #100]	; (809d4 <calculateAzimuthAngle+0x1ec>)
   8096e:	47a0      	blx	r4
   80970:	4b19      	ldr	r3, [pc, #100]	; (809d8 <calculateAzimuthAngle+0x1f0>)
   80972:	4798      	blx	r3
#include "MathFunctions.h"


double radianToDegree (double radian){
	double degree;
	degree = radian*(180/M_PI);
   80974:	a310      	add	r3, pc, #64	; (adr r3, 809b8 <calculateAzimuthAngle+0x1d0>)
   80976:	e9d3 2300 	ldrd	r2, r3, [r3]
   8097a:	4c18      	ldr	r4, [pc, #96]	; (809dc <calculateAzimuthAngle+0x1f4>)
   8097c:	47a0      	blx	r4
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
		}
		else if ( (deltaX < 0) && (deltaY > 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   8097e:	2200      	movs	r2, #0
   80980:	4b19      	ldr	r3, [pc, #100]	; (809e8 <calculateAzimuthAngle+0x200>)
   80982:	4c18      	ldr	r4, [pc, #96]	; (809e4 <calculateAzimuthAngle+0x1fc>)
   80984:	47a0      	blx	r4
   80986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	double deltaX = Xb-Xa;
	double deltaY = Yb-Ya;
	
	if ( (deltaX == 0) && (deltaY == 0) )
	{
		azimutAngle = 0;
   8098a:	2000      	movs	r0, #0
   8098c:	2100      	movs	r1, #0
   8098e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 0;
		} 
		else
		{
			azimutAngle = 180;
   80992:	2000      	movs	r0, #0
   80994:	4912      	ldr	r1, [pc, #72]	; (809e0 <calculateAzimuthAngle+0x1f8>)
   80996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 90;
		} 
		else
		{
			azimutAngle = 270;
   8099a:	a109      	add	r1, pc, #36	; (adr r1, 809c0 <calculateAzimuthAngle+0x1d8>)
   8099c:	e9d1 0100 	ldrd	r0, r1, [r1]
   809a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	distance = sqrt((deltaX*deltaX) + (deltaY*deltaY));
	return distance;
}

double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
	double azimutAngle = 0;
   809a4:	2000      	movs	r0, #0
   809a6:	2100      	movs	r1, #0
   809a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809ac:	2000      	movs	r0, #0
   809ae:	2100      	movs	r1, #0
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
		}
	}
	
	return azimutAngle;
}
   809b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809b4:	f3af 8000 	nop.w
   809b8:	1a63c1f8 	.word	0x1a63c1f8
   809bc:	404ca5dc 	.word	0x404ca5dc
   809c0:	00000000 	.word	0x00000000
   809c4:	4070e000 	.word	0x4070e000
   809c8:	000822e1 	.word	0x000822e1
   809cc:	00082331 	.word	0x00082331
   809d0:	40568000 	.word	0x40568000
   809d4:	00082065 	.word	0x00082065
   809d8:	000814c9 	.word	0x000814c9
   809dc:	00081e11 	.word	0x00081e11
   809e0:	40668000 	.word	0x40668000
   809e4:	00081aad 	.word	0x00081aad
   809e8:	40768000 	.word	0x40768000
   809ec:	00081aa9 	.word	0x00081aa9
   809f0:	000822f5 	.word	0x000822f5
   809f4:	f3af 8000 	nop.w

000809f8 <calcluteRotationAngle>:

double calcluteRotationAngle (double Xa, double Ya, double Xb, double Yb, double Xc, double Yc){
   809f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   809fc:	b084      	sub	sp, #16
   809fe:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
   80a02:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
	
	double AoB = calculateAzimuthAngle(Xa, Ya, Xb, Yb);
   80a06:	e9cd 4500 	strd	r4, r5, [sp]
   80a0a:	e9cd 8902 	strd	r8, r9, [sp, #8]
   80a0e:	f8df a064 	ldr.w	sl, [pc, #100]	; 80a74 <calcluteRotationAngle+0x7c>
   80a12:	47d0      	blx	sl
   80a14:	4606      	mov	r6, r0
   80a16:	460f      	mov	r7, r1
	double BoC = calculateAzimuthAngle(Xb, Yb, Xc, Yc);
   80a18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   80a1c:	e9cd 2300 	strd	r2, r3, [sp]
   80a20:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   80a24:	e9cd 2302 	strd	r2, r3, [sp, #8]
   80a28:	4620      	mov	r0, r4
   80a2a:	4629      	mov	r1, r5
   80a2c:	4642      	mov	r2, r8
   80a2e:	464b      	mov	r3, r9
   80a30:	47d0      	blx	sl
	double rotationAngle = BoC-AoB;
   80a32:	4632      	mov	r2, r6
   80a34:	463b      	mov	r3, r7
   80a36:	4c0b      	ldr	r4, [pc, #44]	; (80a64 <calcluteRotationAngle+0x6c>)
   80a38:	47a0      	blx	r4
   80a3a:	4604      	mov	r4, r0
   80a3c:	460d      	mov	r5, r1
	if (rotationAngle > 180)
   80a3e:	2200      	movs	r2, #0
   80a40:	4b09      	ldr	r3, [pc, #36]	; (80a68 <calcluteRotationAngle+0x70>)
   80a42:	4e0a      	ldr	r6, [pc, #40]	; (80a6c <calcluteRotationAngle+0x74>)
   80a44:	47b0      	blx	r6
   80a46:	b138      	cbz	r0, 80a58 <calcluteRotationAngle+0x60>
	{
		rotationAngle =  rotationAngle - 360;
   80a48:	4620      	mov	r0, r4
   80a4a:	4629      	mov	r1, r5
   80a4c:	2200      	movs	r2, #0
   80a4e:	4b08      	ldr	r3, [pc, #32]	; (80a70 <calcluteRotationAngle+0x78>)
   80a50:	4c04      	ldr	r4, [pc, #16]	; (80a64 <calcluteRotationAngle+0x6c>)
   80a52:	47a0      	blx	r4
   80a54:	4604      	mov	r4, r0
   80a56:	460d      	mov	r5, r1
	}

	return rotationAngle;
   80a58:	4620      	mov	r0, r4
   80a5a:	4629      	mov	r1, r5
   80a5c:	b004      	add	sp, #16
   80a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a62:	bf00      	nop
   80a64:	00081aa9 	.word	0x00081aa9
   80a68:	40668000 	.word	0x40668000
   80a6c:	00082331 	.word	0x00082331
   80a70:	40768000 	.word	0x40768000
   80a74:	000807e9 	.word	0x000807e9

00080a78 <moveTo>:
extern uint16_t counter_2;
extern bool c1Loop;
extern bool c2Loop;


void moveTo (int distance, int direction){
   80a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float totalPulses = (distance/1.38);
   80a7c:	4b48      	ldr	r3, [pc, #288]	; (80ba0 <moveTo+0x128>)
   80a7e:	4798      	blx	r3
   80a80:	a345      	add	r3, pc, #276	; (adr r3, 80b98 <moveTo+0x120>)
   80a82:	e9d3 2300 	ldrd	r2, r3, [r3]
   80a86:	4c47      	ldr	r4, [pc, #284]	; (80ba4 <moveTo+0x12c>)
   80a88:	47a0      	blx	r4
   80a8a:	4b47      	ldr	r3, [pc, #284]	; (80ba8 <moveTo+0x130>)
   80a8c:	4798      	blx	r3
   80a8e:	4607      	mov	r7, r0
    int dPart=0;
	int kp=10;
    int kd=2;
    int ki=2;
	float totMovement = 0;
	delay_us(300);
   80a90:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   80a94:	4c45      	ldr	r4, [pc, #276]	; (80bac <moveTo+0x134>)
   80a96:	47a0      	blx	r4
	reset_Counter();
   80a98:	4b45      	ldr	r3, [pc, #276]	; (80bb0 <moveTo+0x138>)
   80a9a:	4798      	blx	r3
	delay_us(300);
   80a9c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   80aa0:	47a0      	blx	r4
	{
		direction=1;
	}

	
    while (totMovement <= totalPulses) {
   80aa2:	4638      	mov	r0, r7
   80aa4:	2100      	movs	r1, #0
   80aa6:	4b43      	ldr	r3, [pc, #268]	; (80bb4 <moveTo+0x13c>)
   80aa8:	4798      	blx	r3
   80aaa:	2800      	cmp	r0, #0
   80aac:	d066      	beq.n	80b7c <moveTo+0x104>
    int iPart=0;
    int dPart=0;
	int kp=10;
    int kd=2;
    int ki=2;
	float totMovement = 0;
   80aae:	2500      	movs	r5, #0
void moveTo (int distance, int direction){
	float totalPulses = (distance/1.38);
	uint16_t speed = 1700;
	int proportionalError = 0;
    int derivativeError=0;
    int integralError=0;
   80ab0:	f04f 0900 	mov.w	r9, #0
	}

	
    while (totMovement <= totalPulses) {
		delay_ms(1);
      if (c1Loop == true && c2Loop == true) {
   80ab4:	4e40      	ldr	r6, [pc, #256]	; (80bb8 <moveTo+0x140>)
   80ab6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80bd0 <moveTo+0x158>
		direction=1;
	}

	
    while (totMovement <= totalPulses) {
		delay_ms(1);
   80aba:	f241 7070 	movw	r0, #6000	; 0x1770
   80abe:	47a0      	blx	r4
      if (c1Loop == true && c2Loop == true) {
   80ac0:	7833      	ldrb	r3, [r6, #0]
   80ac2:	2b00      	cmp	r3, #0
   80ac4:	d054      	beq.n	80b70 <moveTo+0xf8>
   80ac6:	f898 3000 	ldrb.w	r3, [r8]
   80aca:	2b00      	cmp	r3, #0
   80acc:	d050      	beq.n	80b70 <moveTo+0xf8>
		totMovement = totMovement + ((counter_1+counter_2)/2);
   80ace:	f8df b104 	ldr.w	fp, [pc, #260]	; 80bd4 <moveTo+0x15c>
   80ad2:	f8bb 0000 	ldrh.w	r0, [fp]
   80ad6:	f8df a100 	ldr.w	sl, [pc, #256]	; 80bd8 <moveTo+0x160>
   80ada:	f8ba 3000 	ldrh.w	r3, [sl]
   80ade:	4418      	add	r0, r3
   80ae0:	1040      	asrs	r0, r0, #1
   80ae2:	4b36      	ldr	r3, [pc, #216]	; (80bbc <moveTo+0x144>)
   80ae4:	4798      	blx	r3
   80ae6:	4601      	mov	r1, r0
   80ae8:	4628      	mov	r0, r5
   80aea:	4b35      	ldr	r3, [pc, #212]	; (80bc0 <moveTo+0x148>)
   80aec:	4798      	blx	r3
   80aee:	4605      	mov	r5, r0
		delay_ms(1);
   80af0:	f241 7070 	movw	r0, #6000	; 0x1770
   80af4:	47a0      	blx	r4
        measurementValue = (counter_2-counter_1);
   80af6:	f8ba a000 	ldrh.w	sl, [sl]
   80afa:	f8bb 3000 	ldrh.w	r3, [fp]
   80afe:	ebc3 0a0a 	rsb	sl, r3, sl
		delay_us(500);
   80b02:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b06:	47a0      	blx	r4
        reset_Counter();
   80b08:	4b29      	ldr	r3, [pc, #164]	; (80bb0 <moveTo+0x138>)
   80b0a:	4798      	blx	r3
		delay_us(500);
   80b0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b10:	47a0      	blx	r4
        dPart = (kd*(proportionalError-derivativeError));
		delay_us(500);
   80b12:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b16:	47a0      	blx	r4
        iPart = (ki*integralError);
		delay_us(500);
   80b18:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b1c:	47a0      	blx	r4
		proportionalError = (referenceValue - measurementValue);
		delay_us(500);
   80b1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b22:	47a0      	blx	r4
		delay_us(500);
        dPart = (kd*(proportionalError-derivativeError));
		delay_us(500);
        iPart = (ki*integralError);
		delay_us(500);
		proportionalError = (referenceValue - measurementValue);
   80b24:	f1ca 0b00 	rsb	fp, sl, #0
		delay_us(500);
		controlValue = ((kp*proportionalError)+iPart+dPart);
   80b28:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
		delay_us(500);
        reset_Counter();
		delay_us(500);
        dPart = (kd*(proportionalError-derivativeError));
		delay_us(500);
        iPart = (ki*integralError);
   80b2c:	ea4f 0349 	mov.w	r3, r9, lsl #1
		delay_us(500);
		proportionalError = (referenceValue - measurementValue);
		delay_us(500);
		controlValue = ((kp*proportionalError)+iPart+dPart);
   80b30:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
		delay_us(500);
   80b34:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b38:	47a0      	blx	r4
// 		else if ((totMovement/totalPulses)>= 0.9)
// 		{
// 			speed = 1580;
// 		}
		
		rightWheel((speed+controlValue));
   80b3a:	f20b 60a4 	addw	r0, fp, #1700	; 0x6a4
   80b3e:	4b21      	ldr	r3, [pc, #132]	; (80bc4 <moveTo+0x14c>)
   80b40:	4798      	blx	r3
		leftWheel((speed-controlValue));
   80b42:	f5cb 60d4 	rsb	r0, fp, #1696	; 0x6a0
   80b46:	3004      	adds	r0, #4
   80b48:	4b1f      	ldr	r3, [pc, #124]	; (80bc8 <moveTo+0x150>)
   80b4a:	4798      	blx	r3
		delay_us(500);
   80b4c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b50:	47a0      	blx	r4
	    //error=error*-1;
        derivativeError = proportionalError;
		delay_us(500);
   80b52:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b56:	47a0      	blx	r4
        integralError = (integralError+proportionalError);
   80b58:	ebca 0909 	rsb	r9, sl, r9
		delay_us(500);
   80b5c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b60:	47a0      	blx	r4
        c1Loop = false;
   80b62:	2300      	movs	r3, #0
   80b64:	7033      	strb	r3, [r6, #0]
        c2Loop = false;
   80b66:	f888 3000 	strb.w	r3, [r8]
		delay_us(500);
   80b6a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b6e:	47a0      	blx	r4
	{
		direction=1;
	}

	
    while (totMovement <= totalPulses) {
   80b70:	4638      	mov	r0, r7
   80b72:	4629      	mov	r1, r5
   80b74:	4b0f      	ldr	r3, [pc, #60]	; (80bb4 <moveTo+0x13c>)
   80b76:	4798      	blx	r3
   80b78:	2800      	cmp	r0, #0
   80b7a:	d19e      	bne.n	80aba <moveTo+0x42>
		delay_us(500);
		//printf("%d\n",totMovement);
      }

	}
	rightWheel(1500);
   80b7c:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80b80:	4b10      	ldr	r3, [pc, #64]	; (80bc4 <moveTo+0x14c>)
   80b82:	4798      	blx	r3
	leftWheel(1500);
   80b84:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80b88:	4b0f      	ldr	r3, [pc, #60]	; (80bc8 <moveTo+0x150>)
   80b8a:	4798      	blx	r3
	delay_s(2);
   80b8c:	480f      	ldr	r0, [pc, #60]	; (80bcc <moveTo+0x154>)
   80b8e:	4b07      	ldr	r3, [pc, #28]	; (80bac <moveTo+0x134>)
   80b90:	4798      	blx	r3
   80b92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80b96:	bf00      	nop
   80b98:	e147ae14 	.word	0xe147ae14
   80b9c:	3ff6147a 	.word	0x3ff6147a
   80ba0:	00081d45 	.word	0x00081d45
   80ba4:	00082065 	.word	0x00082065
   80ba8:	00082395 	.word	0x00082395
   80bac:	20070001 	.word	0x20070001
   80bb0:	00080761 	.word	0x00080761
   80bb4:	00082715 	.word	0x00082715
   80bb8:	20070138 	.word	0x20070138
   80bbc:	000825a9 	.word	0x000825a9
   80bc0:	00082441 	.word	0x00082441
   80bc4:	00080da9 	.word	0x00080da9
   80bc8:	00080d79 	.word	0x00080d79
   80bcc:	00b71b00 	.word	0x00b71b00
   80bd0:	20070139 	.word	0x20070139
   80bd4:	20070a66 	.word	0x20070a66
   80bd8:	20070a68 	.word	0x20070a68
   80bdc:	f3af 8000 	nop.w

00080be0 <rotation>:

/* This method rotates the robot around its own axis at the desired degree and speed
   @param degree rotation degree
   @param ratationSpeed rotation speed
*/
void rotation (int degree, int rotationSpeed){
   80be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80be4:	4604      	mov	r4, r0
   80be6:	460f      	mov	r7, r1
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
	int totalPulses;
	int course=1;     // rotation course, 1 to right -1 to left
	rightWheel(1500);
   80be8:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80bec:	4b20      	ldr	r3, [pc, #128]	; (80c70 <rotation+0x90>)
   80bee:	4798      	blx	r3
	leftWheel(1500);
   80bf0:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80bf4:	4b1f      	ldr	r3, [pc, #124]	; (80c74 <rotation+0x94>)
   80bf6:	4798      	blx	r3
     if (degree<0)
   80bf8:	2c00      	cmp	r4, #0
     {
		 course=-1;
		 degree=degree*course;
   80bfa:	bfba      	itte	lt
   80bfc:	4264      	neglt	r4, r4
	int course=1;     // rotation course, 1 to right -1 to left
	rightWheel(1500);
	leftWheel(1500);
     if (degree<0)
     {
		 course=-1;
   80bfe:	f04f 38ff 	movlt.w	r8, #4294967295
	int controlValue=0;
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
	int totalPulses;
	int course=1;     // rotation course, 1 to right -1 to left
   80c02:	f04f 0801 	movge.w	r8, #1
     {
		 course=-1;
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
   80c06:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   80c0a:	1064      	asrs	r4, r4, #1
	reset_Counter();
   80c0c:	4b1a      	ldr	r3, [pc, #104]	; (80c78 <rotation+0x98>)
   80c0e:	4798      	blx	r3
*/
void rotation (int degree, int rotationSpeed){
	int controlValue=0;
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
   80c10:	2200      	movs	r2, #0
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80c12:	4e1a      	ldr	r6, [pc, #104]	; (80c7c <rotation+0x9c>)
   80c14:	4d1a      	ldr	r5, [pc, #104]	; (80c80 <rotation+0xa0>)
		if ((counter_1+counter_2) >= checkValue)
		{
 		measurementValue = (counter_2-counter_1);
 		controlValue = (gain*measurementValue);
		// update wheels speed
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80c16:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80c74 <rotation+0x94>
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80c1a:	e017      	b.n	80c4c <rotation+0x6c>
	{
		if ((counter_1+counter_2) >= checkValue)
   80c1c:	4293      	cmp	r3, r2
   80c1e:	db18      	blt.n	80c52 <rotation+0x72>
		{
 		measurementValue = (counter_2-counter_1);
   80c20:	ebc0 0a01 	rsb	sl, r0, r1
 		controlValue = (gain*measurementValue);
   80c24:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
		// update wheels speed
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80c28:	eb07 000a 	add.w	r0, r7, sl
   80c2c:	fb08 f000 	mul.w	r0, r8, r0
   80c30:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   80c34:	47c8      	blx	r9
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
   80c36:	ebc7 000a 	rsb	r0, r7, sl
   80c3a:	fb08 f000 	mul.w	r0, r8, r0
   80c3e:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   80c42:	4b0b      	ldr	r3, [pc, #44]	; (80c70 <rotation+0x90>)
   80c44:	4798      	blx	r3
		checkValue=counter_1+counter_2;
   80c46:	8832      	ldrh	r2, [r6, #0]
   80c48:	882b      	ldrh	r3, [r5, #0]
   80c4a:	441a      	add	r2, r3
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80c4c:	8830      	ldrh	r0, [r6, #0]
   80c4e:	8829      	ldrh	r1, [r5, #0]
   80c50:	1843      	adds	r3, r0, r1
   80c52:	429c      	cmp	r4, r3
   80c54:	dce2      	bgt.n	80c1c <rotation+0x3c>
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
		checkValue=counter_1+counter_2;
		}
	}
	//  stop wheels
	rightWheel(1500);
   80c56:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c5a:	4b05      	ldr	r3, [pc, #20]	; (80c70 <rotation+0x90>)
   80c5c:	4798      	blx	r3
	leftWheel(1500);
   80c5e:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c62:	4b04      	ldr	r3, [pc, #16]	; (80c74 <rotation+0x94>)
   80c64:	4798      	blx	r3
	reset_Counter();
   80c66:	4b04      	ldr	r3, [pc, #16]	; (80c78 <rotation+0x98>)
   80c68:	4798      	blx	r3
   80c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80c6e:	bf00      	nop
   80c70:	00080da9 	.word	0x00080da9
   80c74:	00080d79 	.word	0x00080d79
   80c78:	00080761 	.word	0x00080761
   80c7c:	20070a66 	.word	0x20070a66
   80c80:	20070a68 	.word	0x20070a68

00080c84 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   80c84:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   80c86:	2055      	movs	r0, #85	; 0x55
   80c88:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80c8c:	4b0b      	ldr	r3, [pc, #44]	; (80cbc <initPin21+0x38>)
   80c8e:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   80c90:	4b0b      	ldr	r3, [pc, #44]	; (80cc0 <initPin21+0x3c>)
   80c92:	2404      	movs	r4, #4
   80c94:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80c96:	220b      	movs	r2, #11
   80c98:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   80c9a:	2200      	movs	r2, #0
   80c9c:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   80c9e:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 7500;
   80ca0:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80ca4:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   80ca6:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   80ca8:	4d06      	ldr	r5, [pc, #24]	; (80cc4 <initPin21+0x40>)
   80caa:	4628      	mov	r0, r5
   80cac:	4619      	mov	r1, r3
   80cae:	4b06      	ldr	r3, [pc, #24]	; (80cc8 <initPin21+0x44>)
   80cb0:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80cb2:	4628      	mov	r0, r5
   80cb4:	4621      	mov	r1, r4
   80cb6:	4b05      	ldr	r3, [pc, #20]	; (80ccc <initPin21+0x48>)
   80cb8:	4798      	blx	r3
   80cba:	bd38      	pop	{r3, r4, r5, pc}
   80cbc:	00080f3d 	.word	0x00080f3d
   80cc0:	20070b4c 	.word	0x20070b4c
   80cc4:	40094000 	.word	0x40094000
   80cc8:	00081285 	.word	0x00081285
   80ccc:	000813ad 	.word	0x000813ad

00080cd0 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   80cd0:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   80cd2:	2056      	movs	r0, #86	; 0x56
   80cd4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80cd8:	4b0b      	ldr	r3, [pc, #44]	; (80d08 <initPin22+0x38>)
   80cda:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   80cdc:	4b0b      	ldr	r3, [pc, #44]	; (80d0c <initPin22+0x3c>)
   80cde:	2405      	movs	r4, #5
   80ce0:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80ce2:	220b      	movs	r2, #11
   80ce4:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   80ce6:	2200      	movs	r2, #0
   80ce8:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   80cea:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 7500;
   80cec:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80cf0:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   80cf2:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   80cf4:	4d06      	ldr	r5, [pc, #24]	; (80d10 <initPin22+0x40>)
   80cf6:	4628      	mov	r0, r5
   80cf8:	4619      	mov	r1, r3
   80cfa:	4b06      	ldr	r3, [pc, #24]	; (80d14 <initPin22+0x44>)
   80cfc:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   80cfe:	4628      	mov	r0, r5
   80d00:	4621      	mov	r1, r4
   80d02:	4b05      	ldr	r3, [pc, #20]	; (80d18 <initPin22+0x48>)
   80d04:	4798      	blx	r3
   80d06:	bd38      	pop	{r3, r4, r5, pc}
   80d08:	00080f3d 	.word	0x00080f3d
   80d0c:	20070b24 	.word	0x20070b24
   80d10:	40094000 	.word	0x40094000
   80d14:	00081285 	.word	0x00081285
   80d18:	000813ad 	.word	0x000813ad

00080d1c <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   80d1c:	b530      	push	{r4, r5, lr}
   80d1e:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   80d20:	2024      	movs	r0, #36	; 0x24
   80d22:	4b0d      	ldr	r3, [pc, #52]	; (80d58 <PWM_init+0x3c>)
   80d24:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   80d26:	4c0d      	ldr	r4, [pc, #52]	; (80d5c <PWM_init+0x40>)
   80d28:	4620      	mov	r0, r4
   80d2a:	2104      	movs	r1, #4
   80d2c:	4d0c      	ldr	r5, [pc, #48]	; (80d60 <PWM_init+0x44>)
   80d2e:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   80d30:	4620      	mov	r0, r4
   80d32:	2105      	movs	r1, #5
   80d34:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   80d36:	4b0b      	ldr	r3, [pc, #44]	; (80d64 <PWM_init+0x48>)
   80d38:	9301      	str	r3, [sp, #4]
   80d3a:	2300      	movs	r3, #0
   80d3c:	9302      	str	r3, [sp, #8]
   80d3e:	4b0a      	ldr	r3, [pc, #40]	; (80d68 <PWM_init+0x4c>)
   80d40:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   80d42:	4620      	mov	r0, r4
   80d44:	a901      	add	r1, sp, #4
   80d46:	4b09      	ldr	r3, [pc, #36]	; (80d6c <PWM_init+0x50>)
   80d48:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   80d4a:	4b09      	ldr	r3, [pc, #36]	; (80d70 <PWM_init+0x54>)
   80d4c:	4798      	blx	r3
	initPin22();
   80d4e:	4b09      	ldr	r3, [pc, #36]	; (80d74 <PWM_init+0x58>)
   80d50:	4798      	blx	r3
	
}
   80d52:	b005      	add	sp, #20
   80d54:	bd30      	pop	{r4, r5, pc}
   80d56:	bf00      	nop
   80d58:	00081195 	.word	0x00081195
   80d5c:	40094000 	.word	0x40094000
   80d60:	000813b9 	.word	0x000813b9
   80d64:	000f4240 	.word	0x000f4240
   80d68:	0501bd00 	.word	0x0501bd00
   80d6c:	00081245 	.word	0x00081245
   80d70:	00080c85 	.word	0x00080c85
   80d74:	00080cd1 	.word	0x00080cd1

00080d78 <leftWheel>:
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
}
 /* This method changes the duty cycle of PWM signal on pin 9. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void leftWheel(uint32_t duty){
   80d78:	b508      	push	{r3, lr}
	if(duty<800){
   80d7a:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80d7e:	d305      	bcc.n	80d8c <leftWheel+0x14>
   80d80:	f640 0298 	movw	r2, #2200	; 0x898
   80d84:	4290      	cmp	r0, r2
   80d86:	bf38      	it	cc
   80d88:	4602      	movcc	r2, r0
   80d8a:	e001      	b.n	80d90 <leftWheel+0x18>
		duty=800;
   80d8c:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_21, duty );
   80d90:	4802      	ldr	r0, [pc, #8]	; (80d9c <leftWheel+0x24>)
   80d92:	4903      	ldr	r1, [pc, #12]	; (80da0 <leftWheel+0x28>)
   80d94:	4b03      	ldr	r3, [pc, #12]	; (80da4 <leftWheel+0x2c>)
   80d96:	4798      	blx	r3
   80d98:	bd08      	pop	{r3, pc}
   80d9a:	bf00      	nop
   80d9c:	40094000 	.word	0x40094000
   80da0:	20070b4c 	.word	0x20070b4c
   80da4:	00081389 	.word	0x00081389

00080da8 <rightWheel>:
}

 /* This method changes the duty cycle of PWM signal on pin 8. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void rightWheel(uint32_t duty){
   80da8:	b508      	push	{r3, lr}
	
	if(duty<800){
   80daa:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80dae:	d305      	bcc.n	80dbc <rightWheel+0x14>
   80db0:	f640 0298 	movw	r2, #2200	; 0x898
   80db4:	4290      	cmp	r0, r2
   80db6:	bf38      	it	cc
   80db8:	4602      	movcc	r2, r0
   80dba:	e001      	b.n	80dc0 <rightWheel+0x18>
		duty=800;
   80dbc:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   80dc0:	4802      	ldr	r0, [pc, #8]	; (80dcc <rightWheel+0x24>)
   80dc2:	4903      	ldr	r1, [pc, #12]	; (80dd0 <rightWheel+0x28>)
   80dc4:	4b03      	ldr	r3, [pc, #12]	; (80dd4 <rightWheel+0x2c>)
   80dc6:	4798      	blx	r3
   80dc8:	bd08      	pop	{r3, pc}
   80dca:	bf00      	nop
   80dcc:	40094000 	.word	0x40094000
   80dd0:	20070b24 	.word	0x20070b24
   80dd4:	00081389 	.word	0x00081389

00080dd8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80dd8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80dda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80dde:	4b13      	ldr	r3, [pc, #76]	; (80e2c <board_init+0x54>)
   80de0:	605a      	str	r2, [r3, #4]
   80de2:	200b      	movs	r0, #11
   80de4:	4c12      	ldr	r4, [pc, #72]	; (80e30 <board_init+0x58>)
   80de6:	47a0      	blx	r4
   80de8:	200c      	movs	r0, #12
   80dea:	47a0      	blx	r4
   80dec:	200d      	movs	r0, #13
   80dee:	47a0      	blx	r4
   80df0:	200e      	movs	r0, #14
   80df2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80df4:	203b      	movs	r0, #59	; 0x3b
   80df6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80dfa:	4c0e      	ldr	r4, [pc, #56]	; (80e34 <board_init+0x5c>)
   80dfc:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80dfe:	2055      	movs	r0, #85	; 0x55
   80e00:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e04:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80e06:	2056      	movs	r0, #86	; 0x56
   80e08:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e0c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80e0e:	2068      	movs	r0, #104	; 0x68
   80e10:	4909      	ldr	r1, [pc, #36]	; (80e38 <board_init+0x60>)
   80e12:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80e14:	205c      	movs	r0, #92	; 0x5c
   80e16:	4909      	ldr	r1, [pc, #36]	; (80e3c <board_init+0x64>)
   80e18:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80e1a:	4809      	ldr	r0, [pc, #36]	; (80e40 <board_init+0x68>)
   80e1c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80e24:	4b07      	ldr	r3, [pc, #28]	; (80e44 <board_init+0x6c>)
   80e26:	4798      	blx	r3
   80e28:	bd10      	pop	{r4, pc}
   80e2a:	bf00      	nop
   80e2c:	400e1a50 	.word	0x400e1a50
   80e30:	00081195 	.word	0x00081195
   80e34:	00080f3d 	.word	0x00080f3d
   80e38:	28000079 	.word	0x28000079
   80e3c:	28000001 	.word	0x28000001
   80e40:	400e0e00 	.word	0x400e0e00
   80e44:	00081011 	.word	0x00081011

00080e48 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80e48:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80e4c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   80e50:	bf0c      	ite	eq
   80e52:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   80e54:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   80e56:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   80e58:	bf0c      	ite	eq
   80e5a:	2000      	moveq	r0, #0
   80e5c:	2001      	movne	r0, #1
   80e5e:	4770      	bx	lr

00080e60 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80e60:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80e62:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80e66:	d016      	beq.n	80e96 <pio_set_peripheral+0x36>
   80e68:	d804      	bhi.n	80e74 <pio_set_peripheral+0x14>
   80e6a:	b1c1      	cbz	r1, 80e9e <pio_set_peripheral+0x3e>
   80e6c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80e70:	d00a      	beq.n	80e88 <pio_set_peripheral+0x28>
   80e72:	e013      	b.n	80e9c <pio_set_peripheral+0x3c>
   80e74:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80e78:	d011      	beq.n	80e9e <pio_set_peripheral+0x3e>
   80e7a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80e7e:	d00e      	beq.n	80e9e <pio_set_peripheral+0x3e>
   80e80:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80e84:	d10a      	bne.n	80e9c <pio_set_peripheral+0x3c>
   80e86:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80e88:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80e8a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80e8c:	400b      	ands	r3, r1
   80e8e:	ea23 0302 	bic.w	r3, r3, r2
   80e92:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80e94:	e002      	b.n	80e9c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80e96:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80e98:	4313      	orrs	r3, r2
   80e9a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80e9c:	6042      	str	r2, [r0, #4]
   80e9e:	4770      	bx	lr

00080ea0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80ea0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ea2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80ea6:	bf14      	ite	ne
   80ea8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80eaa:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80eac:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80eb0:	bf14      	ite	ne
   80eb2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80eb4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80eb6:	f012 0f02 	tst.w	r2, #2
   80eba:	d002      	beq.n	80ec2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80ebc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80ec0:	e004      	b.n	80ecc <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80ec2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80ec6:	bf18      	it	ne
   80ec8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80ecc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80ece:	6001      	str	r1, [r0, #0]
   80ed0:	4770      	bx	lr
   80ed2:	bf00      	nop

00080ed4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80ed4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80ed6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ed8:	9c01      	ldr	r4, [sp, #4]
   80eda:	b10c      	cbz	r4, 80ee0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80edc:	6641      	str	r1, [r0, #100]	; 0x64
   80ede:	e000      	b.n	80ee2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80ee0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80ee2:	b10b      	cbz	r3, 80ee8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80ee4:	6501      	str	r1, [r0, #80]	; 0x50
   80ee6:	e000      	b.n	80eea <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80ee8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80eea:	b10a      	cbz	r2, 80ef0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80eec:	6301      	str	r1, [r0, #48]	; 0x30
   80eee:	e000      	b.n	80ef2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80ef0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80ef2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80ef4:	6001      	str	r1, [r0, #0]
}
   80ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
   80efa:	4770      	bx	lr

00080efc <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   80efc:	f012 0f10 	tst.w	r2, #16
   80f00:	d010      	beq.n	80f24 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   80f02:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80f06:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   80f0a:	bf14      	ite	ne
   80f0c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80f10:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   80f14:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   80f18:	bf14      	ite	ne
   80f1a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   80f1e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80f22:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   80f24:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80f28:	4770      	bx	lr
   80f2a:	bf00      	nop

00080f2c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   80f2c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   80f2e:	6401      	str	r1, [r0, #64]	; 0x40
   80f30:	4770      	bx	lr
   80f32:	bf00      	nop

00080f34 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80f34:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80f36:	4770      	bx	lr

00080f38 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80f38:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80f3a:	4770      	bx	lr

00080f3c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80f3c:	b570      	push	{r4, r5, r6, lr}
   80f3e:	b082      	sub	sp, #8
   80f40:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80f42:	0944      	lsrs	r4, r0, #5
   80f44:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80f48:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80f4c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80f4e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80f52:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80f56:	d030      	beq.n	80fba <pio_configure_pin+0x7e>
   80f58:	d806      	bhi.n	80f68 <pio_configure_pin+0x2c>
   80f5a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80f5e:	d00a      	beq.n	80f76 <pio_configure_pin+0x3a>
   80f60:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80f64:	d018      	beq.n	80f98 <pio_configure_pin+0x5c>
   80f66:	e049      	b.n	80ffc <pio_configure_pin+0xc0>
   80f68:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80f6c:	d030      	beq.n	80fd0 <pio_configure_pin+0x94>
   80f6e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80f72:	d02d      	beq.n	80fd0 <pio_configure_pin+0x94>
   80f74:	e042      	b.n	80ffc <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80f76:	f000 001f 	and.w	r0, r0, #31
   80f7a:	2401      	movs	r4, #1
   80f7c:	4084      	lsls	r4, r0
   80f7e:	4630      	mov	r0, r6
   80f80:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f84:	4622      	mov	r2, r4
   80f86:	4b1f      	ldr	r3, [pc, #124]	; (81004 <pio_configure_pin+0xc8>)
   80f88:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80f8a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80f8e:	bf14      	ite	ne
   80f90:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80f92:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80f94:	2001      	movs	r0, #1
   80f96:	e032      	b.n	80ffe <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80f98:	f000 001f 	and.w	r0, r0, #31
   80f9c:	2401      	movs	r4, #1
   80f9e:	4084      	lsls	r4, r0
   80fa0:	4630      	mov	r0, r6
   80fa2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80fa6:	4622      	mov	r2, r4
   80fa8:	4b16      	ldr	r3, [pc, #88]	; (81004 <pio_configure_pin+0xc8>)
   80faa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80fac:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80fb0:	bf14      	ite	ne
   80fb2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80fb4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80fb6:	2001      	movs	r0, #1
   80fb8:	e021      	b.n	80ffe <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80fba:	f000 011f 	and.w	r1, r0, #31
   80fbe:	2401      	movs	r4, #1
   80fc0:	4630      	mov	r0, r6
   80fc2:	fa04 f101 	lsl.w	r1, r4, r1
   80fc6:	462a      	mov	r2, r5
   80fc8:	4b0f      	ldr	r3, [pc, #60]	; (81008 <pio_configure_pin+0xcc>)
   80fca:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80fcc:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80fce:	e016      	b.n	80ffe <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80fd0:	f000 011f 	and.w	r1, r0, #31
   80fd4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80fd6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80fda:	ea05 0304 	and.w	r3, r5, r4
   80fde:	9300      	str	r3, [sp, #0]
   80fe0:	4630      	mov	r0, r6
   80fe2:	fa04 f101 	lsl.w	r1, r4, r1
   80fe6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80fea:	bf14      	ite	ne
   80fec:	2200      	movne	r2, #0
   80fee:	2201      	moveq	r2, #1
   80ff0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80ff4:	4d05      	ldr	r5, [pc, #20]	; (8100c <pio_configure_pin+0xd0>)
   80ff6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80ff8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80ffa:	e000      	b.n	80ffe <pio_configure_pin+0xc2>

	default:
		return 0;
   80ffc:	2000      	movs	r0, #0
	}

	return 1;
}
   80ffe:	b002      	add	sp, #8
   81000:	bd70      	pop	{r4, r5, r6, pc}
   81002:	bf00      	nop
   81004:	00080e61 	.word	0x00080e61
   81008:	00080ea1 	.word	0x00080ea1
   8100c:	00080ed5 	.word	0x00080ed5

00081010 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81010:	b5f0      	push	{r4, r5, r6, r7, lr}
   81012:	b083      	sub	sp, #12
   81014:	4607      	mov	r7, r0
   81016:	460e      	mov	r6, r1
   81018:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8101a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8101e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81022:	d026      	beq.n	81072 <pio_configure_pin_group+0x62>
   81024:	d806      	bhi.n	81034 <pio_configure_pin_group+0x24>
   81026:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8102a:	d00a      	beq.n	81042 <pio_configure_pin_group+0x32>
   8102c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81030:	d013      	beq.n	8105a <pio_configure_pin_group+0x4a>
   81032:	e034      	b.n	8109e <pio_configure_pin_group+0x8e>
   81034:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81038:	d01f      	beq.n	8107a <pio_configure_pin_group+0x6a>
   8103a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8103e:	d01c      	beq.n	8107a <pio_configure_pin_group+0x6a>
   81040:	e02d      	b.n	8109e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81042:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81046:	4632      	mov	r2, r6
   81048:	4b16      	ldr	r3, [pc, #88]	; (810a4 <pio_configure_pin_group+0x94>)
   8104a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8104c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81050:	bf14      	ite	ne
   81052:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81054:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81056:	2001      	movs	r0, #1
   81058:	e022      	b.n	810a0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8105a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8105e:	4632      	mov	r2, r6
   81060:	4b10      	ldr	r3, [pc, #64]	; (810a4 <pio_configure_pin_group+0x94>)
   81062:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81064:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81068:	bf14      	ite	ne
   8106a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8106c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8106e:	2001      	movs	r0, #1
   81070:	e016      	b.n	810a0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81072:	4b0d      	ldr	r3, [pc, #52]	; (810a8 <pio_configure_pin_group+0x98>)
   81074:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81076:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81078:	e012      	b.n	810a0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8107a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8107e:	f005 0301 	and.w	r3, r5, #1
   81082:	9300      	str	r3, [sp, #0]
   81084:	4638      	mov	r0, r7
   81086:	4631      	mov	r1, r6
   81088:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8108c:	bf14      	ite	ne
   8108e:	2200      	movne	r2, #0
   81090:	2201      	moveq	r2, #1
   81092:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81096:	4c05      	ldr	r4, [pc, #20]	; (810ac <pio_configure_pin_group+0x9c>)
   81098:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8109a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8109c:	e000      	b.n	810a0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8109e:	2000      	movs	r0, #0
	}

	return 1;
}
   810a0:	b003      	add	sp, #12
   810a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   810a4:	00080e61 	.word	0x00080e61
   810a8:	00080ea1 	.word	0x00080ea1
   810ac:	00080ed5 	.word	0x00080ed5

000810b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   810b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810b4:	4604      	mov	r4, r0
   810b6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   810b8:	4b10      	ldr	r3, [pc, #64]	; (810fc <pio_handler_process+0x4c>)
   810ba:	4798      	blx	r3
   810bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   810be:	4620      	mov	r0, r4
   810c0:	4b0f      	ldr	r3, [pc, #60]	; (81100 <pio_handler_process+0x50>)
   810c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   810c4:	4005      	ands	r5, r0
   810c6:	d017      	beq.n	810f8 <pio_handler_process+0x48>
   810c8:	4f0e      	ldr	r7, [pc, #56]	; (81104 <pio_handler_process+0x54>)
   810ca:	f107 040c 	add.w	r4, r7, #12
   810ce:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   810d0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   810d4:	42b3      	cmp	r3, r6
   810d6:	d10a      	bne.n	810ee <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   810d8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   810dc:	4229      	tst	r1, r5
   810de:	d006      	beq.n	810ee <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   810e0:	6823      	ldr	r3, [r4, #0]
   810e2:	4630      	mov	r0, r6
   810e4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   810e6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   810ea:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   810ee:	42bc      	cmp	r4, r7
   810f0:	d002      	beq.n	810f8 <pio_handler_process+0x48>
   810f2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   810f4:	2d00      	cmp	r5, #0
   810f6:	d1eb      	bne.n	810d0 <pio_handler_process+0x20>
   810f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810fc:	00080f35 	.word	0x00080f35
   81100:	00080f39 	.word	0x00080f39
   81104:	20070a70 	.word	0x20070a70

00081108 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   81108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8110a:	4c0b      	ldr	r4, [pc, #44]	; (81138 <pio_handler_set+0x30>)
   8110c:	6824      	ldr	r4, [r4, #0]
   8110e:	2c06      	cmp	r4, #6
   81110:	d810      	bhi.n	81134 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   81112:	4f0a      	ldr	r7, [pc, #40]	; (8113c <pio_handler_set+0x34>)
   81114:	0126      	lsls	r6, r4, #4
   81116:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   81118:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   8111a:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   8111c:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   8111e:	9906      	ldr	r1, [sp, #24]
   81120:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   81122:	3401      	adds	r4, #1
   81124:	4904      	ldr	r1, [pc, #16]	; (81138 <pio_handler_set+0x30>)
   81126:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81128:	4611      	mov	r1, r2
   8112a:	461a      	mov	r2, r3
   8112c:	4b04      	ldr	r3, [pc, #16]	; (81140 <pio_handler_set+0x38>)
   8112e:	4798      	blx	r3

	return 0;
   81130:	2000      	movs	r0, #0
   81132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   81134:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   81136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81138:	20070a6c 	.word	0x20070a6c
   8113c:	20070a70 	.word	0x20070a70
   81140:	00080efd 	.word	0x00080efd

00081144 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81144:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81146:	4802      	ldr	r0, [pc, #8]	; (81150 <PIOA_Handler+0xc>)
   81148:	210b      	movs	r1, #11
   8114a:	4b02      	ldr	r3, [pc, #8]	; (81154 <PIOA_Handler+0x10>)
   8114c:	4798      	blx	r3
   8114e:	bd08      	pop	{r3, pc}
   81150:	400e0e00 	.word	0x400e0e00
   81154:	000810b1 	.word	0x000810b1

00081158 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81158:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8115a:	4802      	ldr	r0, [pc, #8]	; (81164 <PIOB_Handler+0xc>)
   8115c:	210c      	movs	r1, #12
   8115e:	4b02      	ldr	r3, [pc, #8]	; (81168 <PIOB_Handler+0x10>)
   81160:	4798      	blx	r3
   81162:	bd08      	pop	{r3, pc}
   81164:	400e1000 	.word	0x400e1000
   81168:	000810b1 	.word	0x000810b1

0008116c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8116c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8116e:	4802      	ldr	r0, [pc, #8]	; (81178 <PIOC_Handler+0xc>)
   81170:	210d      	movs	r1, #13
   81172:	4b02      	ldr	r3, [pc, #8]	; (8117c <PIOC_Handler+0x10>)
   81174:	4798      	blx	r3
   81176:	bd08      	pop	{r3, pc}
   81178:	400e1200 	.word	0x400e1200
   8117c:	000810b1 	.word	0x000810b1

00081180 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81180:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81182:	4802      	ldr	r0, [pc, #8]	; (8118c <PIOD_Handler+0xc>)
   81184:	210e      	movs	r1, #14
   81186:	4b02      	ldr	r3, [pc, #8]	; (81190 <PIOD_Handler+0x10>)
   81188:	4798      	blx	r3
   8118a:	bd08      	pop	{r3, pc}
   8118c:	400e1400 	.word	0x400e1400
   81190:	000810b1 	.word	0x000810b1

00081194 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81194:	282c      	cmp	r0, #44	; 0x2c
   81196:	d820      	bhi.n	811da <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81198:	281f      	cmp	r0, #31
   8119a:	d80d      	bhi.n	811b8 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8119c:	4b12      	ldr	r3, [pc, #72]	; (811e8 <pmc_enable_periph_clk+0x54>)
   8119e:	699a      	ldr	r2, [r3, #24]
   811a0:	2301      	movs	r3, #1
   811a2:	4083      	lsls	r3, r0
   811a4:	401a      	ands	r2, r3
   811a6:	4293      	cmp	r3, r2
   811a8:	d019      	beq.n	811de <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   811aa:	2301      	movs	r3, #1
   811ac:	fa03 f000 	lsl.w	r0, r3, r0
   811b0:	4b0d      	ldr	r3, [pc, #52]	; (811e8 <pmc_enable_periph_clk+0x54>)
   811b2:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   811b4:	2000      	movs	r0, #0
   811b6:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   811b8:	4b0b      	ldr	r3, [pc, #44]	; (811e8 <pmc_enable_periph_clk+0x54>)
   811ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   811be:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   811c0:	2301      	movs	r3, #1
   811c2:	4083      	lsls	r3, r0
   811c4:	401a      	ands	r2, r3
   811c6:	4293      	cmp	r3, r2
   811c8:	d00b      	beq.n	811e2 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   811ca:	2301      	movs	r3, #1
   811cc:	fa03 f000 	lsl.w	r0, r3, r0
   811d0:	4b05      	ldr	r3, [pc, #20]	; (811e8 <pmc_enable_periph_clk+0x54>)
   811d2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   811d6:	2000      	movs	r0, #0
   811d8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   811da:	2001      	movs	r0, #1
   811dc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   811de:	2000      	movs	r0, #0
   811e0:	4770      	bx	lr
   811e2:	2000      	movs	r0, #0
}
   811e4:	4770      	bx	lr
   811e6:	bf00      	nop
   811e8:	400e0600 	.word	0x400e0600

000811ec <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   811ec:	b4f0      	push	{r4, r5, r6, r7}
   811ee:	b08c      	sub	sp, #48	; 0x30
   811f0:	4607      	mov	r7, r0
   811f2:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   811f4:	ac01      	add	r4, sp, #4
   811f6:	4d12      	ldr	r5, [pc, #72]	; (81240 <pwm_clocks_generate+0x54>)
   811f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   811fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   811fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   811fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   81204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   81208:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8120a:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8120c:	f852 4f04 	ldr.w	r4, [r2, #4]!
   81210:	fbb6 f4f4 	udiv	r4, r6, r4
   81214:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   81218:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   8121c:	d903      	bls.n	81226 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   8121e:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   81220:	2b0b      	cmp	r3, #11
   81222:	d1f3      	bne.n	8120c <pwm_clocks_generate+0x20>
   81224:	e004      	b.n	81230 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   81226:	2b0a      	cmp	r3, #10
   81228:	d805      	bhi.n	81236 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   8122a:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   8122e:	e004      	b.n	8123a <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   81230:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81234:	e001      	b.n	8123a <pwm_clocks_generate+0x4e>
   81236:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8123a:	b00c      	add	sp, #48	; 0x30
   8123c:	bcf0      	pop	{r4, r5, r6, r7}
   8123e:	4770      	bx	lr
   81240:	00085704 	.word	0x00085704

00081244 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81244:	b570      	push	{r4, r5, r6, lr}
   81246:	4606      	mov	r6, r0
   81248:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8124a:	6808      	ldr	r0, [r1, #0]
   8124c:	b140      	cbz	r0, 81260 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8124e:	6889      	ldr	r1, [r1, #8]
   81250:	4b0b      	ldr	r3, [pc, #44]	; (81280 <pwm_init+0x3c>)
   81252:	4798      	blx	r3
   81254:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   81256:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8125a:	4298      	cmp	r0, r3
   8125c:	d101      	bne.n	81262 <pwm_init+0x1e>
   8125e:	e00e      	b.n	8127e <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81260:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81262:	6860      	ldr	r0, [r4, #4]
   81264:	b140      	cbz	r0, 81278 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   81266:	68a1      	ldr	r1, [r4, #8]
   81268:	4b05      	ldr	r3, [pc, #20]	; (81280 <pwm_init+0x3c>)
   8126a:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   8126c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81270:	4298      	cmp	r0, r3
   81272:	d004      	beq.n	8127e <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   81274:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81278:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8127a:	2000      	movs	r0, #0
   8127c:	bd70      	pop	{r4, r5, r6, pc}
}
   8127e:	bd70      	pop	{r4, r5, r6, pc}
   81280:	000811ed 	.word	0x000811ed

00081284 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   81284:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   81286:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81288:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8128a:	684a      	ldr	r2, [r1, #4]
   8128c:	f002 020f 	and.w	r2, r2, #15
   81290:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   81292:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81294:	432c      	orrs	r4, r5
   81296:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   81298:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   8129c:	7d8a      	ldrb	r2, [r1, #22]
   8129e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   812a2:	7dca      	ldrb	r2, [r1, #23]
   812a4:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   812a8:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   812aa:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   812ae:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   812b2:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   812b6:	68cc      	ldr	r4, [r1, #12]
   812b8:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   812bc:	690c      	ldr	r4, [r1, #16]
   812be:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   812c2:	7d8a      	ldrb	r2, [r1, #22]
   812c4:	b13a      	cbz	r2, 812d6 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   812c6:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   812c8:	8b4a      	ldrh	r2, [r1, #26]
   812ca:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   812ce:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   812d2:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   812d6:	6c85      	ldr	r5, [r0, #72]	; 0x48
   812d8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   812dc:	409a      	lsls	r2, r3
   812de:	43d2      	mvns	r2, r2
   812e0:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   812e2:	7fce      	ldrb	r6, [r1, #31]
   812e4:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   812e6:	7f8c      	ldrb	r4, [r1, #30]
   812e8:	409c      	lsls	r4, r3
   812ea:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   812ee:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   812f0:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   812f2:	6c44      	ldr	r4, [r0, #68]	; 0x44
   812f4:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   812f6:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   812fa:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   812fc:	f891 4020 	ldrb.w	r4, [r1, #32]
   81300:	409c      	lsls	r4, r3
   81302:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   81306:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   81308:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   8130a:	2201      	movs	r2, #1
   8130c:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   8130e:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81312:	b11c      	cbz	r4, 8131c <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   81314:	6a04      	ldr	r4, [r0, #32]
   81316:	4314      	orrs	r4, r2
   81318:	6204      	str	r4, [r0, #32]
   8131a:	e003      	b.n	81324 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   8131c:	6a04      	ldr	r4, [r0, #32]
   8131e:	ea24 0402 	bic.w	r4, r4, r2
   81322:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   81324:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   81328:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8132a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8132c:	bf0c      	ite	eq
   8132e:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   81330:	4394      	bicne	r4, r2
   81332:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81334:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   81338:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8133a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8133c:	bf0c      	ite	eq
   8133e:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   81342:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   81346:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81348:	2b03      	cmp	r3, #3
   8134a:	d80c      	bhi.n	81366 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8134c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8134e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81350:	22ff      	movs	r2, #255	; 0xff
   81352:	409a      	lsls	r2, r3
   81354:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81358:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8135c:	fa01 f303 	lsl.w	r3, r1, r3
   81360:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81362:	66c3      	str	r3, [r0, #108]	; 0x6c
   81364:	e00c      	b.n	81380 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   81366:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81368:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8136a:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   8136c:	22ff      	movs	r2, #255	; 0xff
   8136e:	409a      	lsls	r2, r3
   81370:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81374:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81378:	fa01 f303 	lsl.w	r3, r1, r3
   8137c:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8137e:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   81380:	2000      	movs	r0, #0
   81382:	bc70      	pop	{r4, r5, r6}
   81384:	4770      	bx	lr
   81386:	bf00      	nop

00081388 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   81388:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   8138a:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   8138c:	690b      	ldr	r3, [r1, #16]
   8138e:	4293      	cmp	r3, r2
   81390:	d306      	bcc.n	813a0 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   81392:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   81394:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   81398:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   8139c:	2000      	movs	r0, #0
   8139e:	e001      	b.n	813a4 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   813a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   813a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   813a8:	4770      	bx	lr
   813aa:	bf00      	nop

000813ac <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   813ac:	2301      	movs	r3, #1
   813ae:	fa03 f101 	lsl.w	r1, r3, r1
   813b2:	6041      	str	r1, [r0, #4]
   813b4:	4770      	bx	lr
   813b6:	bf00      	nop

000813b8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   813b8:	2301      	movs	r3, #1
   813ba:	fa03 f101 	lsl.w	r1, r3, r1
   813be:	6081      	str	r1, [r0, #8]
   813c0:	4770      	bx	lr
   813c2:	bf00      	nop

000813c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   813c4:	e7fe      	b.n	813c4 <Dummy_Handler>
   813c6:	bf00      	nop

000813c8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   813c8:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   813ca:	4b1e      	ldr	r3, [pc, #120]	; (81444 <Reset_Handler+0x7c>)
   813cc:	4a1e      	ldr	r2, [pc, #120]	; (81448 <Reset_Handler+0x80>)
   813ce:	429a      	cmp	r2, r3
   813d0:	d003      	beq.n	813da <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   813d2:	4b1e      	ldr	r3, [pc, #120]	; (8144c <Reset_Handler+0x84>)
   813d4:	4a1b      	ldr	r2, [pc, #108]	; (81444 <Reset_Handler+0x7c>)
   813d6:	429a      	cmp	r2, r3
   813d8:	d304      	bcc.n	813e4 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   813da:	4b1d      	ldr	r3, [pc, #116]	; (81450 <Reset_Handler+0x88>)
   813dc:	4a1d      	ldr	r2, [pc, #116]	; (81454 <Reset_Handler+0x8c>)
   813de:	429a      	cmp	r2, r3
   813e0:	d30f      	bcc.n	81402 <Reset_Handler+0x3a>
   813e2:	e01a      	b.n	8141a <Reset_Handler+0x52>
   813e4:	4b1c      	ldr	r3, [pc, #112]	; (81458 <Reset_Handler+0x90>)
   813e6:	4c1d      	ldr	r4, [pc, #116]	; (8145c <Reset_Handler+0x94>)
   813e8:	1ae4      	subs	r4, r4, r3
   813ea:	f024 0403 	bic.w	r4, r4, #3
   813ee:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   813f0:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   813f2:	4814      	ldr	r0, [pc, #80]	; (81444 <Reset_Handler+0x7c>)
   813f4:	4914      	ldr	r1, [pc, #80]	; (81448 <Reset_Handler+0x80>)
   813f6:	585a      	ldr	r2, [r3, r1]
   813f8:	501a      	str	r2, [r3, r0]
   813fa:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   813fc:	42a3      	cmp	r3, r4
   813fe:	d1fa      	bne.n	813f6 <Reset_Handler+0x2e>
   81400:	e7eb      	b.n	813da <Reset_Handler+0x12>
   81402:	4b17      	ldr	r3, [pc, #92]	; (81460 <Reset_Handler+0x98>)
   81404:	4917      	ldr	r1, [pc, #92]	; (81464 <Reset_Handler+0x9c>)
   81406:	1ac9      	subs	r1, r1, r3
   81408:	f021 0103 	bic.w	r1, r1, #3
   8140c:	1d1a      	adds	r2, r3, #4
   8140e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81410:	2200      	movs	r2, #0
   81412:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81416:	428b      	cmp	r3, r1
   81418:	d1fb      	bne.n	81412 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8141a:	4a13      	ldr	r2, [pc, #76]	; (81468 <Reset_Handler+0xa0>)
   8141c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81420:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81424:	4911      	ldr	r1, [pc, #68]	; (8146c <Reset_Handler+0xa4>)
   81426:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81428:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   8142c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81430:	d203      	bcs.n	8143a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81432:	688a      	ldr	r2, [r1, #8]
   81434:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81438:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8143a:	4b0d      	ldr	r3, [pc, #52]	; (81470 <Reset_Handler+0xa8>)
   8143c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8143e:	4b0d      	ldr	r3, [pc, #52]	; (81474 <Reset_Handler+0xac>)
   81440:	4798      	blx	r3
   81442:	e7fe      	b.n	81442 <Reset_Handler+0x7a>
   81444:	20070000 	.word	0x20070000
   81448:	000857fc 	.word	0x000857fc
   8144c:	200709ac 	.word	0x200709ac
   81450:	20070b78 	.word	0x20070b78
   81454:	200709ac 	.word	0x200709ac
   81458:	20070004 	.word	0x20070004
   8145c:	200709af 	.word	0x200709af
   81460:	200709a8 	.word	0x200709a8
   81464:	20070b73 	.word	0x20070b73
   81468:	00080000 	.word	0x00080000
   8146c:	e000ed00 	.word	0xe000ed00
   81470:	00082749 	.word	0x00082749
   81474:	00080149 	.word	0x00080149

00081478 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81478:	4b09      	ldr	r3, [pc, #36]	; (814a0 <_sbrk+0x28>)
   8147a:	681b      	ldr	r3, [r3, #0]
   8147c:	b913      	cbnz	r3, 81484 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   8147e:	4a09      	ldr	r2, [pc, #36]	; (814a4 <_sbrk+0x2c>)
   81480:	4b07      	ldr	r3, [pc, #28]	; (814a0 <_sbrk+0x28>)
   81482:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81484:	4b06      	ldr	r3, [pc, #24]	; (814a0 <_sbrk+0x28>)
   81486:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81488:	181a      	adds	r2, r3, r0
   8148a:	4907      	ldr	r1, [pc, #28]	; (814a8 <_sbrk+0x30>)
   8148c:	4291      	cmp	r1, r2
   8148e:	db04      	blt.n	8149a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81490:	4610      	mov	r0, r2
   81492:	4a03      	ldr	r2, [pc, #12]	; (814a0 <_sbrk+0x28>)
   81494:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81496:	4618      	mov	r0, r3
   81498:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   8149a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   8149e:	4770      	bx	lr
   814a0:	20070ae0 	.word	0x20070ae0
   814a4:	20072b78 	.word	0x20072b78
   814a8:	20087ffc 	.word	0x20087ffc

000814ac <_close>:
}

extern int _close(int file)
{
	return -1;
}
   814ac:	f04f 30ff 	mov.w	r0, #4294967295
   814b0:	4770      	bx	lr
   814b2:	bf00      	nop

000814b4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   814b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   814b8:	604b      	str	r3, [r1, #4]

	return 0;
}
   814ba:	2000      	movs	r0, #0
   814bc:	4770      	bx	lr
   814be:	bf00      	nop

000814c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   814c0:	2001      	movs	r0, #1
   814c2:	4770      	bx	lr

000814c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   814c4:	2000      	movs	r0, #0
   814c6:	4770      	bx	lr

000814c8 <atan>:
   814c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814cc:	4bb6      	ldr	r3, [pc, #728]	; (817a8 <atan+0x2e0>)
   814ce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   814d2:	429e      	cmp	r6, r3
   814d4:	b083      	sub	sp, #12
   814d6:	4604      	mov	r4, r0
   814d8:	460d      	mov	r5, r1
   814da:	4689      	mov	r9, r1
   814dc:	dd0f      	ble.n	814fe <atan+0x36>
   814de:	49b3      	ldr	r1, [pc, #716]	; (817ac <atan+0x2e4>)
   814e0:	428e      	cmp	r6, r1
   814e2:	f300 80b3 	bgt.w	8164c <atan+0x184>
   814e6:	f000 80ae 	beq.w	81646 <atan+0x17e>
   814ea:	f1b9 0f00 	cmp.w	r9, #0
   814ee:	f340 80ef 	ble.w	816d0 <atan+0x208>
   814f2:	a191      	add	r1, pc, #580	; (adr r1, 81738 <atan+0x270>)
   814f4:	e9d1 0100 	ldrd	r0, r1, [r1]
   814f8:	b003      	add	sp, #12
   814fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814fe:	4bac      	ldr	r3, [pc, #688]	; (817b0 <atan+0x2e8>)
   81500:	429e      	cmp	r6, r3
   81502:	f300 80bd 	bgt.w	81680 <atan+0x1b8>
   81506:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   8150a:	429e      	cmp	r6, r3
   8150c:	f340 80a7 	ble.w	8165e <atan+0x196>
   81510:	f04f 3cff 	mov.w	ip, #4294967295
   81514:	4622      	mov	r2, r4
   81516:	462b      	mov	r3, r5
   81518:	4620      	mov	r0, r4
   8151a:	4629      	mov	r1, r5
   8151c:	f8cd c004 	str.w	ip, [sp, #4]
   81520:	f000 fc76 	bl	81e10 <__aeabi_dmul>
   81524:	4602      	mov	r2, r0
   81526:	460b      	mov	r3, r1
   81528:	4682      	mov	sl, r0
   8152a:	468b      	mov	fp, r1
   8152c:	f000 fc70 	bl	81e10 <__aeabi_dmul>
   81530:	a383      	add	r3, pc, #524	; (adr r3, 81740 <atan+0x278>)
   81532:	e9d3 2300 	ldrd	r2, r3, [r3]
   81536:	4606      	mov	r6, r0
   81538:	460f      	mov	r7, r1
   8153a:	f000 fc69 	bl	81e10 <__aeabi_dmul>
   8153e:	a382      	add	r3, pc, #520	; (adr r3, 81748 <atan+0x280>)
   81540:	e9d3 2300 	ldrd	r2, r3, [r3]
   81544:	f000 fab2 	bl	81aac <__adddf3>
   81548:	4632      	mov	r2, r6
   8154a:	463b      	mov	r3, r7
   8154c:	f000 fc60 	bl	81e10 <__aeabi_dmul>
   81550:	a37f      	add	r3, pc, #508	; (adr r3, 81750 <atan+0x288>)
   81552:	e9d3 2300 	ldrd	r2, r3, [r3]
   81556:	f000 faa9 	bl	81aac <__adddf3>
   8155a:	4632      	mov	r2, r6
   8155c:	463b      	mov	r3, r7
   8155e:	f000 fc57 	bl	81e10 <__aeabi_dmul>
   81562:	a37d      	add	r3, pc, #500	; (adr r3, 81758 <atan+0x290>)
   81564:	e9d3 2300 	ldrd	r2, r3, [r3]
   81568:	f000 faa0 	bl	81aac <__adddf3>
   8156c:	4632      	mov	r2, r6
   8156e:	463b      	mov	r3, r7
   81570:	f000 fc4e 	bl	81e10 <__aeabi_dmul>
   81574:	a37a      	add	r3, pc, #488	; (adr r3, 81760 <atan+0x298>)
   81576:	e9d3 2300 	ldrd	r2, r3, [r3]
   8157a:	f000 fa97 	bl	81aac <__adddf3>
   8157e:	4632      	mov	r2, r6
   81580:	463b      	mov	r3, r7
   81582:	f000 fc45 	bl	81e10 <__aeabi_dmul>
   81586:	a378      	add	r3, pc, #480	; (adr r3, 81768 <atan+0x2a0>)
   81588:	e9d3 2300 	ldrd	r2, r3, [r3]
   8158c:	f000 fa8e 	bl	81aac <__adddf3>
   81590:	4652      	mov	r2, sl
   81592:	465b      	mov	r3, fp
   81594:	f000 fc3c 	bl	81e10 <__aeabi_dmul>
   81598:	a375      	add	r3, pc, #468	; (adr r3, 81770 <atan+0x2a8>)
   8159a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8159e:	4682      	mov	sl, r0
   815a0:	468b      	mov	fp, r1
   815a2:	4630      	mov	r0, r6
   815a4:	4639      	mov	r1, r7
   815a6:	f000 fc33 	bl	81e10 <__aeabi_dmul>
   815aa:	a373      	add	r3, pc, #460	; (adr r3, 81778 <atan+0x2b0>)
   815ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   815b0:	f000 fa7a 	bl	81aa8 <__aeabi_dsub>
   815b4:	4632      	mov	r2, r6
   815b6:	463b      	mov	r3, r7
   815b8:	f000 fc2a 	bl	81e10 <__aeabi_dmul>
   815bc:	a370      	add	r3, pc, #448	; (adr r3, 81780 <atan+0x2b8>)
   815be:	e9d3 2300 	ldrd	r2, r3, [r3]
   815c2:	f000 fa71 	bl	81aa8 <__aeabi_dsub>
   815c6:	4632      	mov	r2, r6
   815c8:	463b      	mov	r3, r7
   815ca:	f000 fc21 	bl	81e10 <__aeabi_dmul>
   815ce:	a36e      	add	r3, pc, #440	; (adr r3, 81788 <atan+0x2c0>)
   815d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   815d4:	f000 fa68 	bl	81aa8 <__aeabi_dsub>
   815d8:	4632      	mov	r2, r6
   815da:	463b      	mov	r3, r7
   815dc:	f000 fc18 	bl	81e10 <__aeabi_dmul>
   815e0:	a36b      	add	r3, pc, #428	; (adr r3, 81790 <atan+0x2c8>)
   815e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   815e6:	f000 fa5f 	bl	81aa8 <__aeabi_dsub>
   815ea:	4632      	mov	r2, r6
   815ec:	463b      	mov	r3, r7
   815ee:	f000 fc0f 	bl	81e10 <__aeabi_dmul>
   815f2:	f8dd c004 	ldr.w	ip, [sp, #4]
   815f6:	4602      	mov	r2, r0
   815f8:	f1bc 3fff 	cmp.w	ip, #4294967295
   815fc:	460b      	mov	r3, r1
   815fe:	d06b      	beq.n	816d8 <atan+0x210>
   81600:	4650      	mov	r0, sl
   81602:	4659      	mov	r1, fp
   81604:	ea4f 06cc 	mov.w	r6, ip, lsl #3
   81608:	f000 fa50 	bl	81aac <__adddf3>
   8160c:	4622      	mov	r2, r4
   8160e:	462b      	mov	r3, r5
   81610:	f000 fbfe 	bl	81e10 <__aeabi_dmul>
   81614:	4f67      	ldr	r7, [pc, #412]	; (817b4 <atan+0x2ec>)
   81616:	4b68      	ldr	r3, [pc, #416]	; (817b8 <atan+0x2f0>)
   81618:	4437      	add	r7, r6
   8161a:	441e      	add	r6, r3
   8161c:	e9d6 2300 	ldrd	r2, r3, [r6]
   81620:	f000 fa42 	bl	81aa8 <__aeabi_dsub>
   81624:	4622      	mov	r2, r4
   81626:	462b      	mov	r3, r5
   81628:	f000 fa3e 	bl	81aa8 <__aeabi_dsub>
   8162c:	4602      	mov	r2, r0
   8162e:	460b      	mov	r3, r1
   81630:	e9d7 0100 	ldrd	r0, r1, [r7]
   81634:	f000 fa38 	bl	81aa8 <__aeabi_dsub>
   81638:	f1b9 0f00 	cmp.w	r9, #0
   8163c:	da0c      	bge.n	81658 <atan+0x190>
   8163e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   81642:	4629      	mov	r1, r5
   81644:	e008      	b.n	81658 <atan+0x190>
   81646:	2800      	cmp	r0, #0
   81648:	f43f af4f 	beq.w	814ea <atan+0x22>
   8164c:	4620      	mov	r0, r4
   8164e:	4629      	mov	r1, r5
   81650:	4622      	mov	r2, r4
   81652:	462b      	mov	r3, r5
   81654:	f000 fa2a 	bl	81aac <__adddf3>
   81658:	b003      	add	sp, #12
   8165a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8165e:	a34e      	add	r3, pc, #312	; (adr r3, 81798 <atan+0x2d0>)
   81660:	e9d3 2300 	ldrd	r2, r3, [r3]
   81664:	f000 fa22 	bl	81aac <__adddf3>
   81668:	2200      	movs	r2, #0
   8166a:	4b54      	ldr	r3, [pc, #336]	; (817bc <atan+0x2f4>)
   8166c:	f000 fe60 	bl	82330 <__aeabi_dcmpgt>
   81670:	2800      	cmp	r0, #0
   81672:	f43f af4d 	beq.w	81510 <atan+0x48>
   81676:	4620      	mov	r0, r4
   81678:	4629      	mov	r1, r5
   8167a:	b003      	add	sp, #12
   8167c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81680:	f000 f8ca 	bl	81818 <fabs>
   81684:	4b4e      	ldr	r3, [pc, #312]	; (817c0 <atan+0x2f8>)
   81686:	4604      	mov	r4, r0
   81688:	429e      	cmp	r6, r3
   8168a:	460d      	mov	r5, r1
   8168c:	dc33      	bgt.n	816f6 <atan+0x22e>
   8168e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   81692:	429e      	cmp	r6, r3
   81694:	f300 80a5 	bgt.w	817e2 <atan+0x31a>
   81698:	4602      	mov	r2, r0
   8169a:	460b      	mov	r3, r1
   8169c:	f000 fa06 	bl	81aac <__adddf3>
   816a0:	2200      	movs	r2, #0
   816a2:	4b46      	ldr	r3, [pc, #280]	; (817bc <atan+0x2f4>)
   816a4:	f000 fa00 	bl	81aa8 <__aeabi_dsub>
   816a8:	2200      	movs	r2, #0
   816aa:	4606      	mov	r6, r0
   816ac:	460f      	mov	r7, r1
   816ae:	4620      	mov	r0, r4
   816b0:	4629      	mov	r1, r5
   816b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   816b6:	f000 f9f9 	bl	81aac <__adddf3>
   816ba:	4602      	mov	r2, r0
   816bc:	460b      	mov	r3, r1
   816be:	4630      	mov	r0, r6
   816c0:	4639      	mov	r1, r7
   816c2:	f000 fccf 	bl	82064 <__aeabi_ddiv>
   816c6:	f04f 0c00 	mov.w	ip, #0
   816ca:	4604      	mov	r4, r0
   816cc:	460d      	mov	r5, r1
   816ce:	e721      	b.n	81514 <atan+0x4c>
   816d0:	a133      	add	r1, pc, #204	; (adr r1, 817a0 <atan+0x2d8>)
   816d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   816d6:	e7bf      	b.n	81658 <atan+0x190>
   816d8:	4650      	mov	r0, sl
   816da:	4659      	mov	r1, fp
   816dc:	f000 f9e6 	bl	81aac <__adddf3>
   816e0:	4622      	mov	r2, r4
   816e2:	462b      	mov	r3, r5
   816e4:	f000 fb94 	bl	81e10 <__aeabi_dmul>
   816e8:	4602      	mov	r2, r0
   816ea:	460b      	mov	r3, r1
   816ec:	4620      	mov	r0, r4
   816ee:	4629      	mov	r1, r5
   816f0:	f000 f9da 	bl	81aa8 <__aeabi_dsub>
   816f4:	e7b0      	b.n	81658 <atan+0x190>
   816f6:	4b33      	ldr	r3, [pc, #204]	; (817c4 <atan+0x2fc>)
   816f8:	429e      	cmp	r6, r3
   816fa:	dc67      	bgt.n	817cc <atan+0x304>
   816fc:	2200      	movs	r2, #0
   816fe:	4b32      	ldr	r3, [pc, #200]	; (817c8 <atan+0x300>)
   81700:	f000 f9d2 	bl	81aa8 <__aeabi_dsub>
   81704:	2200      	movs	r2, #0
   81706:	4606      	mov	r6, r0
   81708:	460f      	mov	r7, r1
   8170a:	4620      	mov	r0, r4
   8170c:	4629      	mov	r1, r5
   8170e:	4b2e      	ldr	r3, [pc, #184]	; (817c8 <atan+0x300>)
   81710:	f000 fb7e 	bl	81e10 <__aeabi_dmul>
   81714:	2200      	movs	r2, #0
   81716:	4b29      	ldr	r3, [pc, #164]	; (817bc <atan+0x2f4>)
   81718:	f000 f9c8 	bl	81aac <__adddf3>
   8171c:	4602      	mov	r2, r0
   8171e:	460b      	mov	r3, r1
   81720:	4630      	mov	r0, r6
   81722:	4639      	mov	r1, r7
   81724:	f000 fc9e 	bl	82064 <__aeabi_ddiv>
   81728:	f04f 0c02 	mov.w	ip, #2
   8172c:	4604      	mov	r4, r0
   8172e:	460d      	mov	r5, r1
   81730:	e6f0      	b.n	81514 <atan+0x4c>
   81732:	bf00      	nop
   81734:	f3af 8000 	nop.w
   81738:	54442d18 	.word	0x54442d18
   8173c:	3ff921fb 	.word	0x3ff921fb
   81740:	e322da11 	.word	0xe322da11
   81744:	3f90ad3a 	.word	0x3f90ad3a
   81748:	24760deb 	.word	0x24760deb
   8174c:	3fa97b4b 	.word	0x3fa97b4b
   81750:	a0d03d51 	.word	0xa0d03d51
   81754:	3fb10d66 	.word	0x3fb10d66
   81758:	c54c206e 	.word	0xc54c206e
   8175c:	3fb745cd 	.word	0x3fb745cd
   81760:	920083ff 	.word	0x920083ff
   81764:	3fc24924 	.word	0x3fc24924
   81768:	5555550d 	.word	0x5555550d
   8176c:	3fd55555 	.word	0x3fd55555
   81770:	2c6a6c2f 	.word	0x2c6a6c2f
   81774:	bfa2b444 	.word	0xbfa2b444
   81778:	52defd9a 	.word	0x52defd9a
   8177c:	3fadde2d 	.word	0x3fadde2d
   81780:	af749a6d 	.word	0xaf749a6d
   81784:	3fb3b0f2 	.word	0x3fb3b0f2
   81788:	fe231671 	.word	0xfe231671
   8178c:	3fbc71c6 	.word	0x3fbc71c6
   81790:	9998ebc4 	.word	0x9998ebc4
   81794:	3fc99999 	.word	0x3fc99999
   81798:	8800759c 	.word	0x8800759c
   8179c:	7e37e43c 	.word	0x7e37e43c
   817a0:	54442d18 	.word	0x54442d18
   817a4:	bff921fb 	.word	0xbff921fb
   817a8:	440fffff 	.word	0x440fffff
   817ac:	7ff00000 	.word	0x7ff00000
   817b0:	3fdbffff 	.word	0x3fdbffff
   817b4:	00085750 	.word	0x00085750
   817b8:	00085730 	.word	0x00085730
   817bc:	3ff00000 	.word	0x3ff00000
   817c0:	3ff2ffff 	.word	0x3ff2ffff
   817c4:	40037fff 	.word	0x40037fff
   817c8:	3ff80000 	.word	0x3ff80000
   817cc:	4602      	mov	r2, r0
   817ce:	460b      	mov	r3, r1
   817d0:	2000      	movs	r0, #0
   817d2:	490f      	ldr	r1, [pc, #60]	; (81810 <atan+0x348>)
   817d4:	f000 fc46 	bl	82064 <__aeabi_ddiv>
   817d8:	f04f 0c03 	mov.w	ip, #3
   817dc:	4604      	mov	r4, r0
   817de:	460d      	mov	r5, r1
   817e0:	e698      	b.n	81514 <atan+0x4c>
   817e2:	2200      	movs	r2, #0
   817e4:	4b0b      	ldr	r3, [pc, #44]	; (81814 <atan+0x34c>)
   817e6:	f000 f95f 	bl	81aa8 <__aeabi_dsub>
   817ea:	2200      	movs	r2, #0
   817ec:	4606      	mov	r6, r0
   817ee:	460f      	mov	r7, r1
   817f0:	4620      	mov	r0, r4
   817f2:	4629      	mov	r1, r5
   817f4:	4b07      	ldr	r3, [pc, #28]	; (81814 <atan+0x34c>)
   817f6:	f000 f959 	bl	81aac <__adddf3>
   817fa:	4602      	mov	r2, r0
   817fc:	460b      	mov	r3, r1
   817fe:	4630      	mov	r0, r6
   81800:	4639      	mov	r1, r7
   81802:	f000 fc2f 	bl	82064 <__aeabi_ddiv>
   81806:	f04f 0c01 	mov.w	ip, #1
   8180a:	4604      	mov	r4, r0
   8180c:	460d      	mov	r5, r1
   8180e:	e681      	b.n	81514 <atan+0x4c>
   81810:	bff00000 	.word	0xbff00000
   81814:	3ff00000 	.word	0x3ff00000

00081818 <fabs>:
   81818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8181c:	4770      	bx	lr
   8181e:	bf00      	nop

00081820 <sqrt>:
   81820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81824:	b08a      	sub	sp, #40	; 0x28
   81826:	4604      	mov	r4, r0
   81828:	460d      	mov	r5, r1
   8182a:	f000 f84f 	bl	818cc <__ieee754_sqrt>
   8182e:	f8df a098 	ldr.w	sl, [pc, #152]	; 818c8 <sqrt+0xa8>
   81832:	4606      	mov	r6, r0
   81834:	f99a 3000 	ldrsb.w	r3, [sl]
   81838:	460f      	mov	r7, r1
   8183a:	3301      	adds	r3, #1
   8183c:	d00f      	beq.n	8185e <sqrt+0x3e>
   8183e:	4620      	mov	r0, r4
   81840:	4629      	mov	r1, r5
   81842:	f000 f903 	bl	81a4c <__fpclassifyd>
   81846:	b150      	cbz	r0, 8185e <sqrt+0x3e>
   81848:	f04f 0800 	mov.w	r8, #0
   8184c:	f04f 0900 	mov.w	r9, #0
   81850:	4642      	mov	r2, r8
   81852:	464b      	mov	r3, r9
   81854:	4620      	mov	r0, r4
   81856:	4629      	mov	r1, r5
   81858:	f000 fd4c 	bl	822f4 <__aeabi_dcmplt>
   8185c:	b920      	cbnz	r0, 81868 <sqrt+0x48>
   8185e:	4630      	mov	r0, r6
   81860:	4639      	mov	r1, r7
   81862:	b00a      	add	sp, #40	; 0x28
   81864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81868:	4916      	ldr	r1, [pc, #88]	; (818c4 <sqrt+0xa4>)
   8186a:	f89a 6000 	ldrb.w	r6, [sl]
   8186e:	2201      	movs	r2, #1
   81870:	2300      	movs	r3, #0
   81872:	e9cd 4504 	strd	r4, r5, [sp, #16]
   81876:	e9cd 4502 	strd	r4, r5, [sp, #8]
   8187a:	9101      	str	r1, [sp, #4]
   8187c:	9200      	str	r2, [sp, #0]
   8187e:	9308      	str	r3, [sp, #32]
   81880:	b966      	cbnz	r6, 8189c <sqrt+0x7c>
   81882:	e9cd 8906 	strd	r8, r9, [sp, #24]
   81886:	4668      	mov	r0, sp
   81888:	f000 f908 	bl	81a9c <matherr>
   8188c:	b180      	cbz	r0, 818b0 <sqrt+0x90>
   8188e:	9b08      	ldr	r3, [sp, #32]
   81890:	b99b      	cbnz	r3, 818ba <sqrt+0x9a>
   81892:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   81896:	b00a      	add	sp, #40	; 0x28
   81898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8189c:	4640      	mov	r0, r8
   8189e:	4649      	mov	r1, r9
   818a0:	4642      	mov	r2, r8
   818a2:	464b      	mov	r3, r9
   818a4:	f000 fbde 	bl	82064 <__aeabi_ddiv>
   818a8:	2e02      	cmp	r6, #2
   818aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   818ae:	d1ea      	bne.n	81886 <sqrt+0x66>
   818b0:	f000 ff44 	bl	8273c <__errno>
   818b4:	2321      	movs	r3, #33	; 0x21
   818b6:	6003      	str	r3, [r0, #0]
   818b8:	e7e9      	b.n	8188e <sqrt+0x6e>
   818ba:	f000 ff3f 	bl	8273c <__errno>
   818be:	9b08      	ldr	r3, [sp, #32]
   818c0:	6003      	str	r3, [r0, #0]
   818c2:	e7e6      	b.n	81892 <sqrt+0x72>
   818c4:	00085770 	.word	0x00085770
   818c8:	20070140 	.word	0x20070140

000818cc <__ieee754_sqrt>:
   818cc:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   818d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   818d4:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
   818d8:	f8df 816c 	ldr.w	r8, [pc, #364]	; 81a48 <__ieee754_sqrt+0x17c>
   818dc:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   818e0:	45c4      	cmp	ip, r8
   818e2:	4606      	mov	r6, r0
   818e4:	460f      	mov	r7, r1
   818e6:	460b      	mov	r3, r1
   818e8:	4602      	mov	r2, r0
   818ea:	f000 808f 	beq.w	81a0c <__ieee754_sqrt+0x140>
   818ee:	2900      	cmp	r1, #0
   818f0:	dd6f      	ble.n	819d2 <__ieee754_sqrt+0x106>
   818f2:	150f      	asrs	r7, r1, #20
   818f4:	d078      	beq.n	819e8 <__ieee754_sqrt+0x11c>
   818f6:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   818fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
   818fe:	07f9      	lsls	r1, r7, #31
   81900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81904:	d460      	bmi.n	819c8 <__ieee754_sqrt+0xfc>
   81906:	0fd1      	lsrs	r1, r2, #31
   81908:	f04f 0c00 	mov.w	ip, #0
   8190c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   81910:	107f      	asrs	r7, r7, #1
   81912:	0052      	lsls	r2, r2, #1
   81914:	4665      	mov	r5, ip
   81916:	2016      	movs	r0, #22
   81918:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   8191c:	186c      	adds	r4, r5, r1
   8191e:	429c      	cmp	r4, r3
   81920:	ea4f 76d2 	mov.w	r6, r2, lsr #31
   81924:	ea4f 0242 	mov.w	r2, r2, lsl #1
   81928:	dc02      	bgt.n	81930 <__ieee754_sqrt+0x64>
   8192a:	1b1b      	subs	r3, r3, r4
   8192c:	1865      	adds	r5, r4, r1
   8192e:	448c      	add	ip, r1
   81930:	3801      	subs	r0, #1
   81932:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   81936:	ea4f 0151 	mov.w	r1, r1, lsr #1
   8193a:	d1ef      	bne.n	8191c <__ieee754_sqrt+0x50>
   8193c:	4680      	mov	r8, r0
   8193e:	2620      	movs	r6, #32
   81940:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   81944:	e009      	b.n	8195a <__ieee754_sqrt+0x8e>
   81946:	d023      	beq.n	81990 <__ieee754_sqrt+0xc4>
   81948:	0fd4      	lsrs	r4, r2, #31
   8194a:	3e01      	subs	r6, #1
   8194c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   81950:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   81954:	ea4f 0242 	mov.w	r2, r2, lsl #1
   81958:	d01e      	beq.n	81998 <__ieee754_sqrt+0xcc>
   8195a:	42ab      	cmp	r3, r5
   8195c:	eb01 0408 	add.w	r4, r1, r8
   81960:	ddf1      	ble.n	81946 <__ieee754_sqrt+0x7a>
   81962:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
   81966:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
   8196a:	eb04 0801 	add.w	r8, r4, r1
   8196e:	d009      	beq.n	81984 <__ieee754_sqrt+0xb8>
   81970:	46a9      	mov	r9, r5
   81972:	1b5b      	subs	r3, r3, r5
   81974:	4294      	cmp	r4, r2
   81976:	bf88      	it	hi
   81978:	f103 33ff 	addhi.w	r3, r3, #4294967295
   8197c:	1b12      	subs	r2, r2, r4
   8197e:	4408      	add	r0, r1
   81980:	464d      	mov	r5, r9
   81982:	e7e1      	b.n	81948 <__ieee754_sqrt+0x7c>
   81984:	f1b8 0f00 	cmp.w	r8, #0
   81988:	dbf2      	blt.n	81970 <__ieee754_sqrt+0xa4>
   8198a:	f105 0901 	add.w	r9, r5, #1
   8198e:	e7f0      	b.n	81972 <__ieee754_sqrt+0xa6>
   81990:	4294      	cmp	r4, r2
   81992:	d9e6      	bls.n	81962 <__ieee754_sqrt+0x96>
   81994:	461d      	mov	r5, r3
   81996:	e7d7      	b.n	81948 <__ieee754_sqrt+0x7c>
   81998:	431a      	orrs	r2, r3
   8199a:	d004      	beq.n	819a6 <__ieee754_sqrt+0xda>
   8199c:	1c43      	adds	r3, r0, #1
   8199e:	d041      	beq.n	81a24 <__ieee754_sqrt+0x158>
   819a0:	f000 0301 	and.w	r3, r0, #1
   819a4:	4418      	add	r0, r3
   819a6:	0846      	lsrs	r6, r0, #1
   819a8:	ea4f 036c 	mov.w	r3, ip, asr #1
   819ac:	f01c 0f01 	tst.w	ip, #1
   819b0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   819b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   819b8:	bf18      	it	ne
   819ba:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
   819be:	eb03 5107 	add.w	r1, r3, r7, lsl #20
   819c2:	4630      	mov	r0, r6
   819c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   819c8:	0fd1      	lsrs	r1, r2, #31
   819ca:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   819ce:	0052      	lsls	r2, r2, #1
   819d0:	e799      	b.n	81906 <__ieee754_sqrt+0x3a>
   819d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   819d6:	4303      	orrs	r3, r0
   819d8:	d022      	beq.n	81a20 <__ieee754_sqrt+0x154>
   819da:	bb51      	cbnz	r1, 81a32 <__ieee754_sqrt+0x166>
   819dc:	460f      	mov	r7, r1
   819de:	0ad3      	lsrs	r3, r2, #11
   819e0:	3f15      	subs	r7, #21
   819e2:	0552      	lsls	r2, r2, #21
   819e4:	2b00      	cmp	r3, #0
   819e6:	d0fa      	beq.n	819de <__ieee754_sqrt+0x112>
   819e8:	f413 1180 	ands.w	r1, r3, #1048576	; 0x100000
   819ec:	d11d      	bne.n	81a2a <__ieee754_sqrt+0x15e>
   819ee:	005b      	lsls	r3, r3, #1
   819f0:	02d8      	lsls	r0, r3, #11
   819f2:	f101 0101 	add.w	r1, r1, #1
   819f6:	d5fa      	bpl.n	819ee <__ieee754_sqrt+0x122>
   819f8:	f1c1 0001 	rsb	r0, r1, #1
   819fc:	f1c1 0420 	rsb	r4, r1, #32
   81a00:	fa22 f404 	lsr.w	r4, r2, r4
   81a04:	4407      	add	r7, r0
   81a06:	408a      	lsls	r2, r1
   81a08:	4323      	orrs	r3, r4
   81a0a:	e774      	b.n	818f6 <__ieee754_sqrt+0x2a>
   81a0c:	4602      	mov	r2, r0
   81a0e:	460b      	mov	r3, r1
   81a10:	f000 f9fe 	bl	81e10 <__aeabi_dmul>
   81a14:	4632      	mov	r2, r6
   81a16:	463b      	mov	r3, r7
   81a18:	f000 f848 	bl	81aac <__adddf3>
   81a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a24:	f10c 0c01 	add.w	ip, ip, #1
   81a28:	e7be      	b.n	819a8 <__ieee754_sqrt+0xdc>
   81a2a:	2420      	movs	r4, #32
   81a2c:	2001      	movs	r0, #1
   81a2e:	2100      	movs	r1, #0
   81a30:	e7e6      	b.n	81a00 <__ieee754_sqrt+0x134>
   81a32:	4602      	mov	r2, r0
   81a34:	460b      	mov	r3, r1
   81a36:	f000 f837 	bl	81aa8 <__aeabi_dsub>
   81a3a:	4602      	mov	r2, r0
   81a3c:	460b      	mov	r3, r1
   81a3e:	f000 fb11 	bl	82064 <__aeabi_ddiv>
   81a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a46:	bf00      	nop
   81a48:	7ff00000 	.word	0x7ff00000

00081a4c <__fpclassifyd>:
   81a4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81a50:	b410      	push	{r4}
   81a52:	d008      	beq.n	81a66 <__fpclassifyd+0x1a>
   81a54:	4a0f      	ldr	r2, [pc, #60]	; (81a94 <__fpclassifyd+0x48>)
   81a56:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   81a5a:	4294      	cmp	r4, r2
   81a5c:	d80a      	bhi.n	81a74 <__fpclassifyd+0x28>
   81a5e:	2004      	movs	r0, #4
   81a60:	f85d 4b04 	ldr.w	r4, [sp], #4
   81a64:	4770      	bx	lr
   81a66:	2800      	cmp	r0, #0
   81a68:	bf0c      	ite	eq
   81a6a:	2002      	moveq	r0, #2
   81a6c:	2003      	movne	r0, #3
   81a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
   81a72:	4770      	bx	lr
   81a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81a78:	d201      	bcs.n	81a7e <__fpclassifyd+0x32>
   81a7a:	2003      	movs	r0, #3
   81a7c:	e7f7      	b.n	81a6e <__fpclassifyd+0x22>
   81a7e:	4a06      	ldr	r2, [pc, #24]	; (81a98 <__fpclassifyd+0x4c>)
   81a80:	4293      	cmp	r3, r2
   81a82:	d001      	beq.n	81a88 <__fpclassifyd+0x3c>
   81a84:	2000      	movs	r0, #0
   81a86:	e7f2      	b.n	81a6e <__fpclassifyd+0x22>
   81a88:	f1d0 0001 	rsbs	r0, r0, #1
   81a8c:	bf38      	it	cc
   81a8e:	2000      	movcc	r0, #0
   81a90:	e7ed      	b.n	81a6e <__fpclassifyd+0x22>
   81a92:	bf00      	nop
   81a94:	7fdfffff 	.word	0x7fdfffff
   81a98:	7ff00000 	.word	0x7ff00000

00081a9c <matherr>:
   81a9c:	2000      	movs	r0, #0
   81a9e:	4770      	bx	lr

00081aa0 <__aeabi_drsub>:
   81aa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81aa4:	e002      	b.n	81aac <__adddf3>
   81aa6:	bf00      	nop

00081aa8 <__aeabi_dsub>:
   81aa8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081aac <__adddf3>:
   81aac:	b530      	push	{r4, r5, lr}
   81aae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81ab2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81ab6:	ea94 0f05 	teq	r4, r5
   81aba:	bf08      	it	eq
   81abc:	ea90 0f02 	teqeq	r0, r2
   81ac0:	bf1f      	itttt	ne
   81ac2:	ea54 0c00 	orrsne.w	ip, r4, r0
   81ac6:	ea55 0c02 	orrsne.w	ip, r5, r2
   81aca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81ace:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81ad2:	f000 80e2 	beq.w	81c9a <__adddf3+0x1ee>
   81ad6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81ada:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81ade:	bfb8      	it	lt
   81ae0:	426d      	neglt	r5, r5
   81ae2:	dd0c      	ble.n	81afe <__adddf3+0x52>
   81ae4:	442c      	add	r4, r5
   81ae6:	ea80 0202 	eor.w	r2, r0, r2
   81aea:	ea81 0303 	eor.w	r3, r1, r3
   81aee:	ea82 0000 	eor.w	r0, r2, r0
   81af2:	ea83 0101 	eor.w	r1, r3, r1
   81af6:	ea80 0202 	eor.w	r2, r0, r2
   81afa:	ea81 0303 	eor.w	r3, r1, r3
   81afe:	2d36      	cmp	r5, #54	; 0x36
   81b00:	bf88      	it	hi
   81b02:	bd30      	pophi	{r4, r5, pc}
   81b04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81b08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81b0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81b10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81b14:	d002      	beq.n	81b1c <__adddf3+0x70>
   81b16:	4240      	negs	r0, r0
   81b18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81b1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81b20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81b24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81b28:	d002      	beq.n	81b30 <__adddf3+0x84>
   81b2a:	4252      	negs	r2, r2
   81b2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81b30:	ea94 0f05 	teq	r4, r5
   81b34:	f000 80a7 	beq.w	81c86 <__adddf3+0x1da>
   81b38:	f1a4 0401 	sub.w	r4, r4, #1
   81b3c:	f1d5 0e20 	rsbs	lr, r5, #32
   81b40:	db0d      	blt.n	81b5e <__adddf3+0xb2>
   81b42:	fa02 fc0e 	lsl.w	ip, r2, lr
   81b46:	fa22 f205 	lsr.w	r2, r2, r5
   81b4a:	1880      	adds	r0, r0, r2
   81b4c:	f141 0100 	adc.w	r1, r1, #0
   81b50:	fa03 f20e 	lsl.w	r2, r3, lr
   81b54:	1880      	adds	r0, r0, r2
   81b56:	fa43 f305 	asr.w	r3, r3, r5
   81b5a:	4159      	adcs	r1, r3
   81b5c:	e00e      	b.n	81b7c <__adddf3+0xd0>
   81b5e:	f1a5 0520 	sub.w	r5, r5, #32
   81b62:	f10e 0e20 	add.w	lr, lr, #32
   81b66:	2a01      	cmp	r2, #1
   81b68:	fa03 fc0e 	lsl.w	ip, r3, lr
   81b6c:	bf28      	it	cs
   81b6e:	f04c 0c02 	orrcs.w	ip, ip, #2
   81b72:	fa43 f305 	asr.w	r3, r3, r5
   81b76:	18c0      	adds	r0, r0, r3
   81b78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81b7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81b80:	d507      	bpl.n	81b92 <__adddf3+0xe6>
   81b82:	f04f 0e00 	mov.w	lr, #0
   81b86:	f1dc 0c00 	rsbs	ip, ip, #0
   81b8a:	eb7e 0000 	sbcs.w	r0, lr, r0
   81b8e:	eb6e 0101 	sbc.w	r1, lr, r1
   81b92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81b96:	d31b      	bcc.n	81bd0 <__adddf3+0x124>
   81b98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81b9c:	d30c      	bcc.n	81bb8 <__adddf3+0x10c>
   81b9e:	0849      	lsrs	r1, r1, #1
   81ba0:	ea5f 0030 	movs.w	r0, r0, rrx
   81ba4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81ba8:	f104 0401 	add.w	r4, r4, #1
   81bac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81bb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81bb4:	f080 809a 	bcs.w	81cec <__adddf3+0x240>
   81bb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81bbc:	bf08      	it	eq
   81bbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81bc2:	f150 0000 	adcs.w	r0, r0, #0
   81bc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81bca:	ea41 0105 	orr.w	r1, r1, r5
   81bce:	bd30      	pop	{r4, r5, pc}
   81bd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81bd4:	4140      	adcs	r0, r0
   81bd6:	eb41 0101 	adc.w	r1, r1, r1
   81bda:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81bde:	f1a4 0401 	sub.w	r4, r4, #1
   81be2:	d1e9      	bne.n	81bb8 <__adddf3+0x10c>
   81be4:	f091 0f00 	teq	r1, #0
   81be8:	bf04      	itt	eq
   81bea:	4601      	moveq	r1, r0
   81bec:	2000      	moveq	r0, #0
   81bee:	fab1 f381 	clz	r3, r1
   81bf2:	bf08      	it	eq
   81bf4:	3320      	addeq	r3, #32
   81bf6:	f1a3 030b 	sub.w	r3, r3, #11
   81bfa:	f1b3 0220 	subs.w	r2, r3, #32
   81bfe:	da0c      	bge.n	81c1a <__adddf3+0x16e>
   81c00:	320c      	adds	r2, #12
   81c02:	dd08      	ble.n	81c16 <__adddf3+0x16a>
   81c04:	f102 0c14 	add.w	ip, r2, #20
   81c08:	f1c2 020c 	rsb	r2, r2, #12
   81c0c:	fa01 f00c 	lsl.w	r0, r1, ip
   81c10:	fa21 f102 	lsr.w	r1, r1, r2
   81c14:	e00c      	b.n	81c30 <__adddf3+0x184>
   81c16:	f102 0214 	add.w	r2, r2, #20
   81c1a:	bfd8      	it	le
   81c1c:	f1c2 0c20 	rsble	ip, r2, #32
   81c20:	fa01 f102 	lsl.w	r1, r1, r2
   81c24:	fa20 fc0c 	lsr.w	ip, r0, ip
   81c28:	bfdc      	itt	le
   81c2a:	ea41 010c 	orrle.w	r1, r1, ip
   81c2e:	4090      	lslle	r0, r2
   81c30:	1ae4      	subs	r4, r4, r3
   81c32:	bfa2      	ittt	ge
   81c34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81c38:	4329      	orrge	r1, r5
   81c3a:	bd30      	popge	{r4, r5, pc}
   81c3c:	ea6f 0404 	mvn.w	r4, r4
   81c40:	3c1f      	subs	r4, #31
   81c42:	da1c      	bge.n	81c7e <__adddf3+0x1d2>
   81c44:	340c      	adds	r4, #12
   81c46:	dc0e      	bgt.n	81c66 <__adddf3+0x1ba>
   81c48:	f104 0414 	add.w	r4, r4, #20
   81c4c:	f1c4 0220 	rsb	r2, r4, #32
   81c50:	fa20 f004 	lsr.w	r0, r0, r4
   81c54:	fa01 f302 	lsl.w	r3, r1, r2
   81c58:	ea40 0003 	orr.w	r0, r0, r3
   81c5c:	fa21 f304 	lsr.w	r3, r1, r4
   81c60:	ea45 0103 	orr.w	r1, r5, r3
   81c64:	bd30      	pop	{r4, r5, pc}
   81c66:	f1c4 040c 	rsb	r4, r4, #12
   81c6a:	f1c4 0220 	rsb	r2, r4, #32
   81c6e:	fa20 f002 	lsr.w	r0, r0, r2
   81c72:	fa01 f304 	lsl.w	r3, r1, r4
   81c76:	ea40 0003 	orr.w	r0, r0, r3
   81c7a:	4629      	mov	r1, r5
   81c7c:	bd30      	pop	{r4, r5, pc}
   81c7e:	fa21 f004 	lsr.w	r0, r1, r4
   81c82:	4629      	mov	r1, r5
   81c84:	bd30      	pop	{r4, r5, pc}
   81c86:	f094 0f00 	teq	r4, #0
   81c8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81c8e:	bf06      	itte	eq
   81c90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81c94:	3401      	addeq	r4, #1
   81c96:	3d01      	subne	r5, #1
   81c98:	e74e      	b.n	81b38 <__adddf3+0x8c>
   81c9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81c9e:	bf18      	it	ne
   81ca0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81ca4:	d029      	beq.n	81cfa <__adddf3+0x24e>
   81ca6:	ea94 0f05 	teq	r4, r5
   81caa:	bf08      	it	eq
   81cac:	ea90 0f02 	teqeq	r0, r2
   81cb0:	d005      	beq.n	81cbe <__adddf3+0x212>
   81cb2:	ea54 0c00 	orrs.w	ip, r4, r0
   81cb6:	bf04      	itt	eq
   81cb8:	4619      	moveq	r1, r3
   81cba:	4610      	moveq	r0, r2
   81cbc:	bd30      	pop	{r4, r5, pc}
   81cbe:	ea91 0f03 	teq	r1, r3
   81cc2:	bf1e      	ittt	ne
   81cc4:	2100      	movne	r1, #0
   81cc6:	2000      	movne	r0, #0
   81cc8:	bd30      	popne	{r4, r5, pc}
   81cca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81cce:	d105      	bne.n	81cdc <__adddf3+0x230>
   81cd0:	0040      	lsls	r0, r0, #1
   81cd2:	4149      	adcs	r1, r1
   81cd4:	bf28      	it	cs
   81cd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81cda:	bd30      	pop	{r4, r5, pc}
   81cdc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81ce0:	bf3c      	itt	cc
   81ce2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81ce6:	bd30      	popcc	{r4, r5, pc}
   81ce8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81cec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81cf0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81cf4:	f04f 0000 	mov.w	r0, #0
   81cf8:	bd30      	pop	{r4, r5, pc}
   81cfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81cfe:	bf1a      	itte	ne
   81d00:	4619      	movne	r1, r3
   81d02:	4610      	movne	r0, r2
   81d04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81d08:	bf1c      	itt	ne
   81d0a:	460b      	movne	r3, r1
   81d0c:	4602      	movne	r2, r0
   81d0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81d12:	bf06      	itte	eq
   81d14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81d18:	ea91 0f03 	teqeq	r1, r3
   81d1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81d20:	bd30      	pop	{r4, r5, pc}
   81d22:	bf00      	nop

00081d24 <__aeabi_ui2d>:
   81d24:	f090 0f00 	teq	r0, #0
   81d28:	bf04      	itt	eq
   81d2a:	2100      	moveq	r1, #0
   81d2c:	4770      	bxeq	lr
   81d2e:	b530      	push	{r4, r5, lr}
   81d30:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81d34:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81d38:	f04f 0500 	mov.w	r5, #0
   81d3c:	f04f 0100 	mov.w	r1, #0
   81d40:	e750      	b.n	81be4 <__adddf3+0x138>
   81d42:	bf00      	nop

00081d44 <__aeabi_i2d>:
   81d44:	f090 0f00 	teq	r0, #0
   81d48:	bf04      	itt	eq
   81d4a:	2100      	moveq	r1, #0
   81d4c:	4770      	bxeq	lr
   81d4e:	b530      	push	{r4, r5, lr}
   81d50:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81d54:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81d58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81d5c:	bf48      	it	mi
   81d5e:	4240      	negmi	r0, r0
   81d60:	f04f 0100 	mov.w	r1, #0
   81d64:	e73e      	b.n	81be4 <__adddf3+0x138>
   81d66:	bf00      	nop

00081d68 <__aeabi_f2d>:
   81d68:	0042      	lsls	r2, r0, #1
   81d6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81d6e:	ea4f 0131 	mov.w	r1, r1, rrx
   81d72:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81d76:	bf1f      	itttt	ne
   81d78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81d7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81d80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81d84:	4770      	bxne	lr
   81d86:	f092 0f00 	teq	r2, #0
   81d8a:	bf14      	ite	ne
   81d8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81d90:	4770      	bxeq	lr
   81d92:	b530      	push	{r4, r5, lr}
   81d94:	f44f 7460 	mov.w	r4, #896	; 0x380
   81d98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81d9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81da0:	e720      	b.n	81be4 <__adddf3+0x138>
   81da2:	bf00      	nop

00081da4 <__aeabi_ul2d>:
   81da4:	ea50 0201 	orrs.w	r2, r0, r1
   81da8:	bf08      	it	eq
   81daa:	4770      	bxeq	lr
   81dac:	b530      	push	{r4, r5, lr}
   81dae:	f04f 0500 	mov.w	r5, #0
   81db2:	e00a      	b.n	81dca <__aeabi_l2d+0x16>

00081db4 <__aeabi_l2d>:
   81db4:	ea50 0201 	orrs.w	r2, r0, r1
   81db8:	bf08      	it	eq
   81dba:	4770      	bxeq	lr
   81dbc:	b530      	push	{r4, r5, lr}
   81dbe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81dc2:	d502      	bpl.n	81dca <__aeabi_l2d+0x16>
   81dc4:	4240      	negs	r0, r0
   81dc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81dca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81dce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81dd2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81dd6:	f43f aedc 	beq.w	81b92 <__adddf3+0xe6>
   81dda:	f04f 0203 	mov.w	r2, #3
   81dde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81de2:	bf18      	it	ne
   81de4:	3203      	addne	r2, #3
   81de6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81dea:	bf18      	it	ne
   81dec:	3203      	addne	r2, #3
   81dee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81df2:	f1c2 0320 	rsb	r3, r2, #32
   81df6:	fa00 fc03 	lsl.w	ip, r0, r3
   81dfa:	fa20 f002 	lsr.w	r0, r0, r2
   81dfe:	fa01 fe03 	lsl.w	lr, r1, r3
   81e02:	ea40 000e 	orr.w	r0, r0, lr
   81e06:	fa21 f102 	lsr.w	r1, r1, r2
   81e0a:	4414      	add	r4, r2
   81e0c:	e6c1      	b.n	81b92 <__adddf3+0xe6>
   81e0e:	bf00      	nop

00081e10 <__aeabi_dmul>:
   81e10:	b570      	push	{r4, r5, r6, lr}
   81e12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81e16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81e1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81e1e:	bf1d      	ittte	ne
   81e20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81e24:	ea94 0f0c 	teqne	r4, ip
   81e28:	ea95 0f0c 	teqne	r5, ip
   81e2c:	f000 f8de 	bleq	81fec <__aeabi_dmul+0x1dc>
   81e30:	442c      	add	r4, r5
   81e32:	ea81 0603 	eor.w	r6, r1, r3
   81e36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81e3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81e3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81e42:	bf18      	it	ne
   81e44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81e48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81e50:	d038      	beq.n	81ec4 <__aeabi_dmul+0xb4>
   81e52:	fba0 ce02 	umull	ip, lr, r0, r2
   81e56:	f04f 0500 	mov.w	r5, #0
   81e5a:	fbe1 e502 	umlal	lr, r5, r1, r2
   81e5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81e62:	fbe0 e503 	umlal	lr, r5, r0, r3
   81e66:	f04f 0600 	mov.w	r6, #0
   81e6a:	fbe1 5603 	umlal	r5, r6, r1, r3
   81e6e:	f09c 0f00 	teq	ip, #0
   81e72:	bf18      	it	ne
   81e74:	f04e 0e01 	orrne.w	lr, lr, #1
   81e78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81e7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81e80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81e84:	d204      	bcs.n	81e90 <__aeabi_dmul+0x80>
   81e86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81e8a:	416d      	adcs	r5, r5
   81e8c:	eb46 0606 	adc.w	r6, r6, r6
   81e90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81e94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81e98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81e9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81ea0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81ea4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81ea8:	bf88      	it	hi
   81eaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81eae:	d81e      	bhi.n	81eee <__aeabi_dmul+0xde>
   81eb0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81eb4:	bf08      	it	eq
   81eb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81eba:	f150 0000 	adcs.w	r0, r0, #0
   81ebe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81ec2:	bd70      	pop	{r4, r5, r6, pc}
   81ec4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81ec8:	ea46 0101 	orr.w	r1, r6, r1
   81ecc:	ea40 0002 	orr.w	r0, r0, r2
   81ed0:	ea81 0103 	eor.w	r1, r1, r3
   81ed4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81ed8:	bfc2      	ittt	gt
   81eda:	ebd4 050c 	rsbsgt	r5, r4, ip
   81ede:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81ee2:	bd70      	popgt	{r4, r5, r6, pc}
   81ee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81ee8:	f04f 0e00 	mov.w	lr, #0
   81eec:	3c01      	subs	r4, #1
   81eee:	f300 80ab 	bgt.w	82048 <__aeabi_dmul+0x238>
   81ef2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81ef6:	bfde      	ittt	le
   81ef8:	2000      	movle	r0, #0
   81efa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81efe:	bd70      	pople	{r4, r5, r6, pc}
   81f00:	f1c4 0400 	rsb	r4, r4, #0
   81f04:	3c20      	subs	r4, #32
   81f06:	da35      	bge.n	81f74 <__aeabi_dmul+0x164>
   81f08:	340c      	adds	r4, #12
   81f0a:	dc1b      	bgt.n	81f44 <__aeabi_dmul+0x134>
   81f0c:	f104 0414 	add.w	r4, r4, #20
   81f10:	f1c4 0520 	rsb	r5, r4, #32
   81f14:	fa00 f305 	lsl.w	r3, r0, r5
   81f18:	fa20 f004 	lsr.w	r0, r0, r4
   81f1c:	fa01 f205 	lsl.w	r2, r1, r5
   81f20:	ea40 0002 	orr.w	r0, r0, r2
   81f24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81f28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81f2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81f30:	fa21 f604 	lsr.w	r6, r1, r4
   81f34:	eb42 0106 	adc.w	r1, r2, r6
   81f38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81f3c:	bf08      	it	eq
   81f3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81f42:	bd70      	pop	{r4, r5, r6, pc}
   81f44:	f1c4 040c 	rsb	r4, r4, #12
   81f48:	f1c4 0520 	rsb	r5, r4, #32
   81f4c:	fa00 f304 	lsl.w	r3, r0, r4
   81f50:	fa20 f005 	lsr.w	r0, r0, r5
   81f54:	fa01 f204 	lsl.w	r2, r1, r4
   81f58:	ea40 0002 	orr.w	r0, r0, r2
   81f5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81f60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81f64:	f141 0100 	adc.w	r1, r1, #0
   81f68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81f6c:	bf08      	it	eq
   81f6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81f72:	bd70      	pop	{r4, r5, r6, pc}
   81f74:	f1c4 0520 	rsb	r5, r4, #32
   81f78:	fa00 f205 	lsl.w	r2, r0, r5
   81f7c:	ea4e 0e02 	orr.w	lr, lr, r2
   81f80:	fa20 f304 	lsr.w	r3, r0, r4
   81f84:	fa01 f205 	lsl.w	r2, r1, r5
   81f88:	ea43 0302 	orr.w	r3, r3, r2
   81f8c:	fa21 f004 	lsr.w	r0, r1, r4
   81f90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81f94:	fa21 f204 	lsr.w	r2, r1, r4
   81f98:	ea20 0002 	bic.w	r0, r0, r2
   81f9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81fa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81fa4:	bf08      	it	eq
   81fa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81faa:	bd70      	pop	{r4, r5, r6, pc}
   81fac:	f094 0f00 	teq	r4, #0
   81fb0:	d10f      	bne.n	81fd2 <__aeabi_dmul+0x1c2>
   81fb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81fb6:	0040      	lsls	r0, r0, #1
   81fb8:	eb41 0101 	adc.w	r1, r1, r1
   81fbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81fc0:	bf08      	it	eq
   81fc2:	3c01      	subeq	r4, #1
   81fc4:	d0f7      	beq.n	81fb6 <__aeabi_dmul+0x1a6>
   81fc6:	ea41 0106 	orr.w	r1, r1, r6
   81fca:	f095 0f00 	teq	r5, #0
   81fce:	bf18      	it	ne
   81fd0:	4770      	bxne	lr
   81fd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81fd6:	0052      	lsls	r2, r2, #1
   81fd8:	eb43 0303 	adc.w	r3, r3, r3
   81fdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81fe0:	bf08      	it	eq
   81fe2:	3d01      	subeq	r5, #1
   81fe4:	d0f7      	beq.n	81fd6 <__aeabi_dmul+0x1c6>
   81fe6:	ea43 0306 	orr.w	r3, r3, r6
   81fea:	4770      	bx	lr
   81fec:	ea94 0f0c 	teq	r4, ip
   81ff0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81ff4:	bf18      	it	ne
   81ff6:	ea95 0f0c 	teqne	r5, ip
   81ffa:	d00c      	beq.n	82016 <__aeabi_dmul+0x206>
   81ffc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82000:	bf18      	it	ne
   82002:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82006:	d1d1      	bne.n	81fac <__aeabi_dmul+0x19c>
   82008:	ea81 0103 	eor.w	r1, r1, r3
   8200c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82010:	f04f 0000 	mov.w	r0, #0
   82014:	bd70      	pop	{r4, r5, r6, pc}
   82016:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8201a:	bf06      	itte	eq
   8201c:	4610      	moveq	r0, r2
   8201e:	4619      	moveq	r1, r3
   82020:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82024:	d019      	beq.n	8205a <__aeabi_dmul+0x24a>
   82026:	ea94 0f0c 	teq	r4, ip
   8202a:	d102      	bne.n	82032 <__aeabi_dmul+0x222>
   8202c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   82030:	d113      	bne.n	8205a <__aeabi_dmul+0x24a>
   82032:	ea95 0f0c 	teq	r5, ip
   82036:	d105      	bne.n	82044 <__aeabi_dmul+0x234>
   82038:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8203c:	bf1c      	itt	ne
   8203e:	4610      	movne	r0, r2
   82040:	4619      	movne	r1, r3
   82042:	d10a      	bne.n	8205a <__aeabi_dmul+0x24a>
   82044:	ea81 0103 	eor.w	r1, r1, r3
   82048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8204c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82050:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82054:	f04f 0000 	mov.w	r0, #0
   82058:	bd70      	pop	{r4, r5, r6, pc}
   8205a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8205e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   82062:	bd70      	pop	{r4, r5, r6, pc}

00082064 <__aeabi_ddiv>:
   82064:	b570      	push	{r4, r5, r6, lr}
   82066:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8206a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8206e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82072:	bf1d      	ittte	ne
   82074:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82078:	ea94 0f0c 	teqne	r4, ip
   8207c:	ea95 0f0c 	teqne	r5, ip
   82080:	f000 f8a7 	bleq	821d2 <__aeabi_ddiv+0x16e>
   82084:	eba4 0405 	sub.w	r4, r4, r5
   82088:	ea81 0e03 	eor.w	lr, r1, r3
   8208c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82090:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82094:	f000 8088 	beq.w	821a8 <__aeabi_ddiv+0x144>
   82098:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8209c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   820a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   820a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   820a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   820ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   820b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   820b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   820b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   820bc:	429d      	cmp	r5, r3
   820be:	bf08      	it	eq
   820c0:	4296      	cmpeq	r6, r2
   820c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   820c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   820ca:	d202      	bcs.n	820d2 <__aeabi_ddiv+0x6e>
   820cc:	085b      	lsrs	r3, r3, #1
   820ce:	ea4f 0232 	mov.w	r2, r2, rrx
   820d2:	1ab6      	subs	r6, r6, r2
   820d4:	eb65 0503 	sbc.w	r5, r5, r3
   820d8:	085b      	lsrs	r3, r3, #1
   820da:	ea4f 0232 	mov.w	r2, r2, rrx
   820de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   820e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   820e6:	ebb6 0e02 	subs.w	lr, r6, r2
   820ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   820ee:	bf22      	ittt	cs
   820f0:	1ab6      	subcs	r6, r6, r2
   820f2:	4675      	movcs	r5, lr
   820f4:	ea40 000c 	orrcs.w	r0, r0, ip
   820f8:	085b      	lsrs	r3, r3, #1
   820fa:	ea4f 0232 	mov.w	r2, r2, rrx
   820fe:	ebb6 0e02 	subs.w	lr, r6, r2
   82102:	eb75 0e03 	sbcs.w	lr, r5, r3
   82106:	bf22      	ittt	cs
   82108:	1ab6      	subcs	r6, r6, r2
   8210a:	4675      	movcs	r5, lr
   8210c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82110:	085b      	lsrs	r3, r3, #1
   82112:	ea4f 0232 	mov.w	r2, r2, rrx
   82116:	ebb6 0e02 	subs.w	lr, r6, r2
   8211a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8211e:	bf22      	ittt	cs
   82120:	1ab6      	subcs	r6, r6, r2
   82122:	4675      	movcs	r5, lr
   82124:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82128:	085b      	lsrs	r3, r3, #1
   8212a:	ea4f 0232 	mov.w	r2, r2, rrx
   8212e:	ebb6 0e02 	subs.w	lr, r6, r2
   82132:	eb75 0e03 	sbcs.w	lr, r5, r3
   82136:	bf22      	ittt	cs
   82138:	1ab6      	subcs	r6, r6, r2
   8213a:	4675      	movcs	r5, lr
   8213c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82140:	ea55 0e06 	orrs.w	lr, r5, r6
   82144:	d018      	beq.n	82178 <__aeabi_ddiv+0x114>
   82146:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8214a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8214e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   82152:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   82156:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8215a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8215e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   82162:	d1c0      	bne.n	820e6 <__aeabi_ddiv+0x82>
   82164:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82168:	d10b      	bne.n	82182 <__aeabi_ddiv+0x11e>
   8216a:	ea41 0100 	orr.w	r1, r1, r0
   8216e:	f04f 0000 	mov.w	r0, #0
   82172:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   82176:	e7b6      	b.n	820e6 <__aeabi_ddiv+0x82>
   82178:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8217c:	bf04      	itt	eq
   8217e:	4301      	orreq	r1, r0
   82180:	2000      	moveq	r0, #0
   82182:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82186:	bf88      	it	hi
   82188:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8218c:	f63f aeaf 	bhi.w	81eee <__aeabi_dmul+0xde>
   82190:	ebb5 0c03 	subs.w	ip, r5, r3
   82194:	bf04      	itt	eq
   82196:	ebb6 0c02 	subseq.w	ip, r6, r2
   8219a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8219e:	f150 0000 	adcs.w	r0, r0, #0
   821a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   821a6:	bd70      	pop	{r4, r5, r6, pc}
   821a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   821ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   821b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   821b4:	bfc2      	ittt	gt
   821b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   821ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   821be:	bd70      	popgt	{r4, r5, r6, pc}
   821c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   821c4:	f04f 0e00 	mov.w	lr, #0
   821c8:	3c01      	subs	r4, #1
   821ca:	e690      	b.n	81eee <__aeabi_dmul+0xde>
   821cc:	ea45 0e06 	orr.w	lr, r5, r6
   821d0:	e68d      	b.n	81eee <__aeabi_dmul+0xde>
   821d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   821d6:	ea94 0f0c 	teq	r4, ip
   821da:	bf08      	it	eq
   821dc:	ea95 0f0c 	teqeq	r5, ip
   821e0:	f43f af3b 	beq.w	8205a <__aeabi_dmul+0x24a>
   821e4:	ea94 0f0c 	teq	r4, ip
   821e8:	d10a      	bne.n	82200 <__aeabi_ddiv+0x19c>
   821ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   821ee:	f47f af34 	bne.w	8205a <__aeabi_dmul+0x24a>
   821f2:	ea95 0f0c 	teq	r5, ip
   821f6:	f47f af25 	bne.w	82044 <__aeabi_dmul+0x234>
   821fa:	4610      	mov	r0, r2
   821fc:	4619      	mov	r1, r3
   821fe:	e72c      	b.n	8205a <__aeabi_dmul+0x24a>
   82200:	ea95 0f0c 	teq	r5, ip
   82204:	d106      	bne.n	82214 <__aeabi_ddiv+0x1b0>
   82206:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8220a:	f43f aefd 	beq.w	82008 <__aeabi_dmul+0x1f8>
   8220e:	4610      	mov	r0, r2
   82210:	4619      	mov	r1, r3
   82212:	e722      	b.n	8205a <__aeabi_dmul+0x24a>
   82214:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82218:	bf18      	it	ne
   8221a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8221e:	f47f aec5 	bne.w	81fac <__aeabi_dmul+0x19c>
   82222:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   82226:	f47f af0d 	bne.w	82044 <__aeabi_dmul+0x234>
   8222a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8222e:	f47f aeeb 	bne.w	82008 <__aeabi_dmul+0x1f8>
   82232:	e712      	b.n	8205a <__aeabi_dmul+0x24a>

00082234 <__gedf2>:
   82234:	f04f 3cff 	mov.w	ip, #4294967295
   82238:	e006      	b.n	82248 <__cmpdf2+0x4>
   8223a:	bf00      	nop

0008223c <__ledf2>:
   8223c:	f04f 0c01 	mov.w	ip, #1
   82240:	e002      	b.n	82248 <__cmpdf2+0x4>
   82242:	bf00      	nop

00082244 <__cmpdf2>:
   82244:	f04f 0c01 	mov.w	ip, #1
   82248:	f84d cd04 	str.w	ip, [sp, #-4]!
   8224c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   82250:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   82254:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   82258:	bf18      	it	ne
   8225a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8225e:	d01b      	beq.n	82298 <__cmpdf2+0x54>
   82260:	b001      	add	sp, #4
   82262:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   82266:	bf0c      	ite	eq
   82268:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8226c:	ea91 0f03 	teqne	r1, r3
   82270:	bf02      	ittt	eq
   82272:	ea90 0f02 	teqeq	r0, r2
   82276:	2000      	moveq	r0, #0
   82278:	4770      	bxeq	lr
   8227a:	f110 0f00 	cmn.w	r0, #0
   8227e:	ea91 0f03 	teq	r1, r3
   82282:	bf58      	it	pl
   82284:	4299      	cmppl	r1, r3
   82286:	bf08      	it	eq
   82288:	4290      	cmpeq	r0, r2
   8228a:	bf2c      	ite	cs
   8228c:	17d8      	asrcs	r0, r3, #31
   8228e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   82292:	f040 0001 	orr.w	r0, r0, #1
   82296:	4770      	bx	lr
   82298:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8229c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   822a0:	d102      	bne.n	822a8 <__cmpdf2+0x64>
   822a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   822a6:	d107      	bne.n	822b8 <__cmpdf2+0x74>
   822a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   822ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   822b0:	d1d6      	bne.n	82260 <__cmpdf2+0x1c>
   822b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   822b6:	d0d3      	beq.n	82260 <__cmpdf2+0x1c>
   822b8:	f85d 0b04 	ldr.w	r0, [sp], #4
   822bc:	4770      	bx	lr
   822be:	bf00      	nop

000822c0 <__aeabi_cdrcmple>:
   822c0:	4684      	mov	ip, r0
   822c2:	4610      	mov	r0, r2
   822c4:	4662      	mov	r2, ip
   822c6:	468c      	mov	ip, r1
   822c8:	4619      	mov	r1, r3
   822ca:	4663      	mov	r3, ip
   822cc:	e000      	b.n	822d0 <__aeabi_cdcmpeq>
   822ce:	bf00      	nop

000822d0 <__aeabi_cdcmpeq>:
   822d0:	b501      	push	{r0, lr}
   822d2:	f7ff ffb7 	bl	82244 <__cmpdf2>
   822d6:	2800      	cmp	r0, #0
   822d8:	bf48      	it	mi
   822da:	f110 0f00 	cmnmi.w	r0, #0
   822de:	bd01      	pop	{r0, pc}

000822e0 <__aeabi_dcmpeq>:
   822e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   822e4:	f7ff fff4 	bl	822d0 <__aeabi_cdcmpeq>
   822e8:	bf0c      	ite	eq
   822ea:	2001      	moveq	r0, #1
   822ec:	2000      	movne	r0, #0
   822ee:	f85d fb08 	ldr.w	pc, [sp], #8
   822f2:	bf00      	nop

000822f4 <__aeabi_dcmplt>:
   822f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   822f8:	f7ff ffea 	bl	822d0 <__aeabi_cdcmpeq>
   822fc:	bf34      	ite	cc
   822fe:	2001      	movcc	r0, #1
   82300:	2000      	movcs	r0, #0
   82302:	f85d fb08 	ldr.w	pc, [sp], #8
   82306:	bf00      	nop

00082308 <__aeabi_dcmple>:
   82308:	f84d ed08 	str.w	lr, [sp, #-8]!
   8230c:	f7ff ffe0 	bl	822d0 <__aeabi_cdcmpeq>
   82310:	bf94      	ite	ls
   82312:	2001      	movls	r0, #1
   82314:	2000      	movhi	r0, #0
   82316:	f85d fb08 	ldr.w	pc, [sp], #8
   8231a:	bf00      	nop

0008231c <__aeabi_dcmpge>:
   8231c:	f84d ed08 	str.w	lr, [sp, #-8]!
   82320:	f7ff ffce 	bl	822c0 <__aeabi_cdrcmple>
   82324:	bf94      	ite	ls
   82326:	2001      	movls	r0, #1
   82328:	2000      	movhi	r0, #0
   8232a:	f85d fb08 	ldr.w	pc, [sp], #8
   8232e:	bf00      	nop

00082330 <__aeabi_dcmpgt>:
   82330:	f84d ed08 	str.w	lr, [sp, #-8]!
   82334:	f7ff ffc4 	bl	822c0 <__aeabi_cdrcmple>
   82338:	bf34      	ite	cc
   8233a:	2001      	movcc	r0, #1
   8233c:	2000      	movcs	r0, #0
   8233e:	f85d fb08 	ldr.w	pc, [sp], #8
   82342:	bf00      	nop

00082344 <__aeabi_d2iz>:
   82344:	ea4f 0241 	mov.w	r2, r1, lsl #1
   82348:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8234c:	d215      	bcs.n	8237a <__aeabi_d2iz+0x36>
   8234e:	d511      	bpl.n	82374 <__aeabi_d2iz+0x30>
   82350:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   82354:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   82358:	d912      	bls.n	82380 <__aeabi_d2iz+0x3c>
   8235a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8235e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   82362:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   82366:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8236a:	fa23 f002 	lsr.w	r0, r3, r2
   8236e:	bf18      	it	ne
   82370:	4240      	negne	r0, r0
   82372:	4770      	bx	lr
   82374:	f04f 0000 	mov.w	r0, #0
   82378:	4770      	bx	lr
   8237a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8237e:	d105      	bne.n	8238c <__aeabi_d2iz+0x48>
   82380:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   82384:	bf08      	it	eq
   82386:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8238a:	4770      	bx	lr
   8238c:	f04f 0000 	mov.w	r0, #0
   82390:	4770      	bx	lr
   82392:	bf00      	nop

00082394 <__aeabi_d2f>:
   82394:	ea4f 0241 	mov.w	r2, r1, lsl #1
   82398:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   8239c:	bf24      	itt	cs
   8239e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   823a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   823a6:	d90d      	bls.n	823c4 <__aeabi_d2f+0x30>
   823a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   823ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   823b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   823b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   823b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   823bc:	bf08      	it	eq
   823be:	f020 0001 	biceq.w	r0, r0, #1
   823c2:	4770      	bx	lr
   823c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   823c8:	d121      	bne.n	8240e <__aeabi_d2f+0x7a>
   823ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   823ce:	bfbc      	itt	lt
   823d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   823d4:	4770      	bxlt	lr
   823d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   823da:	ea4f 5252 	mov.w	r2, r2, lsr #21
   823de:	f1c2 0218 	rsb	r2, r2, #24
   823e2:	f1c2 0c20 	rsb	ip, r2, #32
   823e6:	fa10 f30c 	lsls.w	r3, r0, ip
   823ea:	fa20 f002 	lsr.w	r0, r0, r2
   823ee:	bf18      	it	ne
   823f0:	f040 0001 	orrne.w	r0, r0, #1
   823f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   823f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   823fc:	fa03 fc0c 	lsl.w	ip, r3, ip
   82400:	ea40 000c 	orr.w	r0, r0, ip
   82404:	fa23 f302 	lsr.w	r3, r3, r2
   82408:	ea4f 0343 	mov.w	r3, r3, lsl #1
   8240c:	e7cc      	b.n	823a8 <__aeabi_d2f+0x14>
   8240e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   82412:	d107      	bne.n	82424 <__aeabi_d2f+0x90>
   82414:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   82418:	bf1e      	ittt	ne
   8241a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8241e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   82422:	4770      	bxne	lr
   82424:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   82428:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8242c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82430:	4770      	bx	lr
   82432:	bf00      	nop

00082434 <__aeabi_frsub>:
   82434:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   82438:	e002      	b.n	82440 <__addsf3>
   8243a:	bf00      	nop

0008243c <__aeabi_fsub>:
   8243c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00082440 <__addsf3>:
   82440:	0042      	lsls	r2, r0, #1
   82442:	bf1f      	itttt	ne
   82444:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   82448:	ea92 0f03 	teqne	r2, r3
   8244c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   82450:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82454:	d06a      	beq.n	8252c <__addsf3+0xec>
   82456:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8245a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8245e:	bfc1      	itttt	gt
   82460:	18d2      	addgt	r2, r2, r3
   82462:	4041      	eorgt	r1, r0
   82464:	4048      	eorgt	r0, r1
   82466:	4041      	eorgt	r1, r0
   82468:	bfb8      	it	lt
   8246a:	425b      	neglt	r3, r3
   8246c:	2b19      	cmp	r3, #25
   8246e:	bf88      	it	hi
   82470:	4770      	bxhi	lr
   82472:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   82476:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8247a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8247e:	bf18      	it	ne
   82480:	4240      	negne	r0, r0
   82482:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82486:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8248a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8248e:	bf18      	it	ne
   82490:	4249      	negne	r1, r1
   82492:	ea92 0f03 	teq	r2, r3
   82496:	d03f      	beq.n	82518 <__addsf3+0xd8>
   82498:	f1a2 0201 	sub.w	r2, r2, #1
   8249c:	fa41 fc03 	asr.w	ip, r1, r3
   824a0:	eb10 000c 	adds.w	r0, r0, ip
   824a4:	f1c3 0320 	rsb	r3, r3, #32
   824a8:	fa01 f103 	lsl.w	r1, r1, r3
   824ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   824b0:	d502      	bpl.n	824b8 <__addsf3+0x78>
   824b2:	4249      	negs	r1, r1
   824b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   824b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   824bc:	d313      	bcc.n	824e6 <__addsf3+0xa6>
   824be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   824c2:	d306      	bcc.n	824d2 <__addsf3+0x92>
   824c4:	0840      	lsrs	r0, r0, #1
   824c6:	ea4f 0131 	mov.w	r1, r1, rrx
   824ca:	f102 0201 	add.w	r2, r2, #1
   824ce:	2afe      	cmp	r2, #254	; 0xfe
   824d0:	d251      	bcs.n	82576 <__addsf3+0x136>
   824d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   824d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   824da:	bf08      	it	eq
   824dc:	f020 0001 	biceq.w	r0, r0, #1
   824e0:	ea40 0003 	orr.w	r0, r0, r3
   824e4:	4770      	bx	lr
   824e6:	0049      	lsls	r1, r1, #1
   824e8:	eb40 0000 	adc.w	r0, r0, r0
   824ec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   824f0:	f1a2 0201 	sub.w	r2, r2, #1
   824f4:	d1ed      	bne.n	824d2 <__addsf3+0x92>
   824f6:	fab0 fc80 	clz	ip, r0
   824fa:	f1ac 0c08 	sub.w	ip, ip, #8
   824fe:	ebb2 020c 	subs.w	r2, r2, ip
   82502:	fa00 f00c 	lsl.w	r0, r0, ip
   82506:	bfaa      	itet	ge
   82508:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8250c:	4252      	neglt	r2, r2
   8250e:	4318      	orrge	r0, r3
   82510:	bfbc      	itt	lt
   82512:	40d0      	lsrlt	r0, r2
   82514:	4318      	orrlt	r0, r3
   82516:	4770      	bx	lr
   82518:	f092 0f00 	teq	r2, #0
   8251c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   82520:	bf06      	itte	eq
   82522:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   82526:	3201      	addeq	r2, #1
   82528:	3b01      	subne	r3, #1
   8252a:	e7b5      	b.n	82498 <__addsf3+0x58>
   8252c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82530:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82534:	bf18      	it	ne
   82536:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8253a:	d021      	beq.n	82580 <__addsf3+0x140>
   8253c:	ea92 0f03 	teq	r2, r3
   82540:	d004      	beq.n	8254c <__addsf3+0x10c>
   82542:	f092 0f00 	teq	r2, #0
   82546:	bf08      	it	eq
   82548:	4608      	moveq	r0, r1
   8254a:	4770      	bx	lr
   8254c:	ea90 0f01 	teq	r0, r1
   82550:	bf1c      	itt	ne
   82552:	2000      	movne	r0, #0
   82554:	4770      	bxne	lr
   82556:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8255a:	d104      	bne.n	82566 <__addsf3+0x126>
   8255c:	0040      	lsls	r0, r0, #1
   8255e:	bf28      	it	cs
   82560:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   82564:	4770      	bx	lr
   82566:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8256a:	bf3c      	itt	cc
   8256c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   82570:	4770      	bxcc	lr
   82572:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82576:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8257a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8257e:	4770      	bx	lr
   82580:	ea7f 6222 	mvns.w	r2, r2, asr #24
   82584:	bf16      	itet	ne
   82586:	4608      	movne	r0, r1
   82588:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   8258c:	4601      	movne	r1, r0
   8258e:	0242      	lsls	r2, r0, #9
   82590:	bf06      	itte	eq
   82592:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   82596:	ea90 0f01 	teqeq	r0, r1
   8259a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8259e:	4770      	bx	lr

000825a0 <__aeabi_ui2f>:
   825a0:	f04f 0300 	mov.w	r3, #0
   825a4:	e004      	b.n	825b0 <__aeabi_i2f+0x8>
   825a6:	bf00      	nop

000825a8 <__aeabi_i2f>:
   825a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   825ac:	bf48      	it	mi
   825ae:	4240      	negmi	r0, r0
   825b0:	ea5f 0c00 	movs.w	ip, r0
   825b4:	bf08      	it	eq
   825b6:	4770      	bxeq	lr
   825b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   825bc:	4601      	mov	r1, r0
   825be:	f04f 0000 	mov.w	r0, #0
   825c2:	e01c      	b.n	825fe <__aeabi_l2f+0x2a>

000825c4 <__aeabi_ul2f>:
   825c4:	ea50 0201 	orrs.w	r2, r0, r1
   825c8:	bf08      	it	eq
   825ca:	4770      	bxeq	lr
   825cc:	f04f 0300 	mov.w	r3, #0
   825d0:	e00a      	b.n	825e8 <__aeabi_l2f+0x14>
   825d2:	bf00      	nop

000825d4 <__aeabi_l2f>:
   825d4:	ea50 0201 	orrs.w	r2, r0, r1
   825d8:	bf08      	it	eq
   825da:	4770      	bxeq	lr
   825dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   825e0:	d502      	bpl.n	825e8 <__aeabi_l2f+0x14>
   825e2:	4240      	negs	r0, r0
   825e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   825e8:	ea5f 0c01 	movs.w	ip, r1
   825ec:	bf02      	ittt	eq
   825ee:	4684      	moveq	ip, r0
   825f0:	4601      	moveq	r1, r0
   825f2:	2000      	moveq	r0, #0
   825f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   825f8:	bf08      	it	eq
   825fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   825fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   82602:	fabc f28c 	clz	r2, ip
   82606:	3a08      	subs	r2, #8
   82608:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8260c:	db10      	blt.n	82630 <__aeabi_l2f+0x5c>
   8260e:	fa01 fc02 	lsl.w	ip, r1, r2
   82612:	4463      	add	r3, ip
   82614:	fa00 fc02 	lsl.w	ip, r0, r2
   82618:	f1c2 0220 	rsb	r2, r2, #32
   8261c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82620:	fa20 f202 	lsr.w	r2, r0, r2
   82624:	eb43 0002 	adc.w	r0, r3, r2
   82628:	bf08      	it	eq
   8262a:	f020 0001 	biceq.w	r0, r0, #1
   8262e:	4770      	bx	lr
   82630:	f102 0220 	add.w	r2, r2, #32
   82634:	fa01 fc02 	lsl.w	ip, r1, r2
   82638:	f1c2 0220 	rsb	r2, r2, #32
   8263c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   82640:	fa21 f202 	lsr.w	r2, r1, r2
   82644:	eb43 0002 	adc.w	r0, r3, r2
   82648:	bf08      	it	eq
   8264a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8264e:	4770      	bx	lr

00082650 <__gesf2>:
   82650:	f04f 3cff 	mov.w	ip, #4294967295
   82654:	e006      	b.n	82664 <__cmpsf2+0x4>
   82656:	bf00      	nop

00082658 <__lesf2>:
   82658:	f04f 0c01 	mov.w	ip, #1
   8265c:	e002      	b.n	82664 <__cmpsf2+0x4>
   8265e:	bf00      	nop

00082660 <__cmpsf2>:
   82660:	f04f 0c01 	mov.w	ip, #1
   82664:	f84d cd04 	str.w	ip, [sp, #-4]!
   82668:	ea4f 0240 	mov.w	r2, r0, lsl #1
   8266c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82670:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82674:	bf18      	it	ne
   82676:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8267a:	d011      	beq.n	826a0 <__cmpsf2+0x40>
   8267c:	b001      	add	sp, #4
   8267e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   82682:	bf18      	it	ne
   82684:	ea90 0f01 	teqne	r0, r1
   82688:	bf58      	it	pl
   8268a:	ebb2 0003 	subspl.w	r0, r2, r3
   8268e:	bf88      	it	hi
   82690:	17c8      	asrhi	r0, r1, #31
   82692:	bf38      	it	cc
   82694:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   82698:	bf18      	it	ne
   8269a:	f040 0001 	orrne.w	r0, r0, #1
   8269e:	4770      	bx	lr
   826a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   826a4:	d102      	bne.n	826ac <__cmpsf2+0x4c>
   826a6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   826aa:	d105      	bne.n	826b8 <__cmpsf2+0x58>
   826ac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   826b0:	d1e4      	bne.n	8267c <__cmpsf2+0x1c>
   826b2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   826b6:	d0e1      	beq.n	8267c <__cmpsf2+0x1c>
   826b8:	f85d 0b04 	ldr.w	r0, [sp], #4
   826bc:	4770      	bx	lr
   826be:	bf00      	nop

000826c0 <__aeabi_cfrcmple>:
   826c0:	4684      	mov	ip, r0
   826c2:	4608      	mov	r0, r1
   826c4:	4661      	mov	r1, ip
   826c6:	e7ff      	b.n	826c8 <__aeabi_cfcmpeq>

000826c8 <__aeabi_cfcmpeq>:
   826c8:	b50f      	push	{r0, r1, r2, r3, lr}
   826ca:	f7ff ffc9 	bl	82660 <__cmpsf2>
   826ce:	2800      	cmp	r0, #0
   826d0:	bf48      	it	mi
   826d2:	f110 0f00 	cmnmi.w	r0, #0
   826d6:	bd0f      	pop	{r0, r1, r2, r3, pc}

000826d8 <__aeabi_fcmpeq>:
   826d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   826dc:	f7ff fff4 	bl	826c8 <__aeabi_cfcmpeq>
   826e0:	bf0c      	ite	eq
   826e2:	2001      	moveq	r0, #1
   826e4:	2000      	movne	r0, #0
   826e6:	f85d fb08 	ldr.w	pc, [sp], #8
   826ea:	bf00      	nop

000826ec <__aeabi_fcmplt>:
   826ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   826f0:	f7ff ffea 	bl	826c8 <__aeabi_cfcmpeq>
   826f4:	bf34      	ite	cc
   826f6:	2001      	movcc	r0, #1
   826f8:	2000      	movcs	r0, #0
   826fa:	f85d fb08 	ldr.w	pc, [sp], #8
   826fe:	bf00      	nop

00082700 <__aeabi_fcmple>:
   82700:	f84d ed08 	str.w	lr, [sp, #-8]!
   82704:	f7ff ffe0 	bl	826c8 <__aeabi_cfcmpeq>
   82708:	bf94      	ite	ls
   8270a:	2001      	movls	r0, #1
   8270c:	2000      	movhi	r0, #0
   8270e:	f85d fb08 	ldr.w	pc, [sp], #8
   82712:	bf00      	nop

00082714 <__aeabi_fcmpge>:
   82714:	f84d ed08 	str.w	lr, [sp, #-8]!
   82718:	f7ff ffd2 	bl	826c0 <__aeabi_cfrcmple>
   8271c:	bf94      	ite	ls
   8271e:	2001      	movls	r0, #1
   82720:	2000      	movhi	r0, #0
   82722:	f85d fb08 	ldr.w	pc, [sp], #8
   82726:	bf00      	nop

00082728 <__aeabi_fcmpgt>:
   82728:	f84d ed08 	str.w	lr, [sp, #-8]!
   8272c:	f7ff ffc8 	bl	826c0 <__aeabi_cfrcmple>
   82730:	bf34      	ite	cc
   82732:	2001      	movcc	r0, #1
   82734:	2000      	movcs	r0, #0
   82736:	f85d fb08 	ldr.w	pc, [sp], #8
   8273a:	bf00      	nop

0008273c <__errno>:
   8273c:	4b01      	ldr	r3, [pc, #4]	; (82744 <__errno+0x8>)
   8273e:	6818      	ldr	r0, [r3, #0]
   82740:	4770      	bx	lr
   82742:	bf00      	nop
   82744:	20070570 	.word	0x20070570

00082748 <__libc_init_array>:
   82748:	b570      	push	{r4, r5, r6, lr}
   8274a:	4e0f      	ldr	r6, [pc, #60]	; (82788 <__libc_init_array+0x40>)
   8274c:	4d0f      	ldr	r5, [pc, #60]	; (8278c <__libc_init_array+0x44>)
   8274e:	1b76      	subs	r6, r6, r5
   82750:	10b6      	asrs	r6, r6, #2
   82752:	d007      	beq.n	82764 <__libc_init_array+0x1c>
   82754:	3d04      	subs	r5, #4
   82756:	2400      	movs	r4, #0
   82758:	3401      	adds	r4, #1
   8275a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8275e:	4798      	blx	r3
   82760:	42a6      	cmp	r6, r4
   82762:	d1f9      	bne.n	82758 <__libc_init_array+0x10>
   82764:	4e0a      	ldr	r6, [pc, #40]	; (82790 <__libc_init_array+0x48>)
   82766:	4d0b      	ldr	r5, [pc, #44]	; (82794 <__libc_init_array+0x4c>)
   82768:	f003 f832 	bl	857d0 <_init>
   8276c:	1b76      	subs	r6, r6, r5
   8276e:	10b6      	asrs	r6, r6, #2
   82770:	d008      	beq.n	82784 <__libc_init_array+0x3c>
   82772:	3d04      	subs	r5, #4
   82774:	2400      	movs	r4, #0
   82776:	3401      	adds	r4, #1
   82778:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8277c:	4798      	blx	r3
   8277e:	42a6      	cmp	r6, r4
   82780:	d1f9      	bne.n	82776 <__libc_init_array+0x2e>
   82782:	bd70      	pop	{r4, r5, r6, pc}
   82784:	bd70      	pop	{r4, r5, r6, pc}
   82786:	bf00      	nop
   82788:	000857dc 	.word	0x000857dc
   8278c:	000857dc 	.word	0x000857dc
   82790:	000857e4 	.word	0x000857e4
   82794:	000857dc 	.word	0x000857dc

00082798 <iprintf>:
   82798:	b40f      	push	{r0, r1, r2, r3}
   8279a:	b510      	push	{r4, lr}
   8279c:	4b07      	ldr	r3, [pc, #28]	; (827bc <iprintf+0x24>)
   8279e:	b082      	sub	sp, #8
   827a0:	ac04      	add	r4, sp, #16
   827a2:	f854 2b04 	ldr.w	r2, [r4], #4
   827a6:	6818      	ldr	r0, [r3, #0]
   827a8:	4623      	mov	r3, r4
   827aa:	6881      	ldr	r1, [r0, #8]
   827ac:	9401      	str	r4, [sp, #4]
   827ae:	f000 f945 	bl	82a3c <_vfiprintf_r>
   827b2:	b002      	add	sp, #8
   827b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   827b8:	b004      	add	sp, #16
   827ba:	4770      	bx	lr
   827bc:	20070570 	.word	0x20070570

000827c0 <memset>:
   827c0:	b4f0      	push	{r4, r5, r6, r7}
   827c2:	0784      	lsls	r4, r0, #30
   827c4:	d043      	beq.n	8284e <memset+0x8e>
   827c6:	1e54      	subs	r4, r2, #1
   827c8:	2a00      	cmp	r2, #0
   827ca:	d03e      	beq.n	8284a <memset+0x8a>
   827cc:	b2cd      	uxtb	r5, r1
   827ce:	4603      	mov	r3, r0
   827d0:	e003      	b.n	827da <memset+0x1a>
   827d2:	1e62      	subs	r2, r4, #1
   827d4:	2c00      	cmp	r4, #0
   827d6:	d038      	beq.n	8284a <memset+0x8a>
   827d8:	4614      	mov	r4, r2
   827da:	f803 5b01 	strb.w	r5, [r3], #1
   827de:	079a      	lsls	r2, r3, #30
   827e0:	d1f7      	bne.n	827d2 <memset+0x12>
   827e2:	2c03      	cmp	r4, #3
   827e4:	d92a      	bls.n	8283c <memset+0x7c>
   827e6:	b2cd      	uxtb	r5, r1
   827e8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   827ec:	2c0f      	cmp	r4, #15
   827ee:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   827f2:	d915      	bls.n	82820 <memset+0x60>
   827f4:	f1a4 0710 	sub.w	r7, r4, #16
   827f8:	093f      	lsrs	r7, r7, #4
   827fa:	f103 0610 	add.w	r6, r3, #16
   827fe:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   82802:	461a      	mov	r2, r3
   82804:	6015      	str	r5, [r2, #0]
   82806:	6055      	str	r5, [r2, #4]
   82808:	6095      	str	r5, [r2, #8]
   8280a:	60d5      	str	r5, [r2, #12]
   8280c:	3210      	adds	r2, #16
   8280e:	42b2      	cmp	r2, r6
   82810:	d1f8      	bne.n	82804 <memset+0x44>
   82812:	f004 040f 	and.w	r4, r4, #15
   82816:	3701      	adds	r7, #1
   82818:	2c03      	cmp	r4, #3
   8281a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8281e:	d90d      	bls.n	8283c <memset+0x7c>
   82820:	461e      	mov	r6, r3
   82822:	4622      	mov	r2, r4
   82824:	3a04      	subs	r2, #4
   82826:	2a03      	cmp	r2, #3
   82828:	f846 5b04 	str.w	r5, [r6], #4
   8282c:	d8fa      	bhi.n	82824 <memset+0x64>
   8282e:	1f22      	subs	r2, r4, #4
   82830:	f022 0203 	bic.w	r2, r2, #3
   82834:	3204      	adds	r2, #4
   82836:	4413      	add	r3, r2
   82838:	f004 0403 	and.w	r4, r4, #3
   8283c:	b12c      	cbz	r4, 8284a <memset+0x8a>
   8283e:	b2c9      	uxtb	r1, r1
   82840:	441c      	add	r4, r3
   82842:	f803 1b01 	strb.w	r1, [r3], #1
   82846:	42a3      	cmp	r3, r4
   82848:	d1fb      	bne.n	82842 <memset+0x82>
   8284a:	bcf0      	pop	{r4, r5, r6, r7}
   8284c:	4770      	bx	lr
   8284e:	4614      	mov	r4, r2
   82850:	4603      	mov	r3, r0
   82852:	e7c6      	b.n	827e2 <memset+0x22>

00082854 <setbuf>:
   82854:	2900      	cmp	r1, #0
   82856:	bf0c      	ite	eq
   82858:	2202      	moveq	r2, #2
   8285a:	2200      	movne	r2, #0
   8285c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82860:	f000 b800 	b.w	82864 <setvbuf>

00082864 <setvbuf>:
   82864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82868:	4d3c      	ldr	r5, [pc, #240]	; (8295c <setvbuf+0xf8>)
   8286a:	4604      	mov	r4, r0
   8286c:	682d      	ldr	r5, [r5, #0]
   8286e:	4688      	mov	r8, r1
   82870:	4616      	mov	r6, r2
   82872:	461f      	mov	r7, r3
   82874:	b115      	cbz	r5, 8287c <setvbuf+0x18>
   82876:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82878:	2b00      	cmp	r3, #0
   8287a:	d04f      	beq.n	8291c <setvbuf+0xb8>
   8287c:	2e02      	cmp	r6, #2
   8287e:	d830      	bhi.n	828e2 <setvbuf+0x7e>
   82880:	2f00      	cmp	r7, #0
   82882:	db2e      	blt.n	828e2 <setvbuf+0x7e>
   82884:	4628      	mov	r0, r5
   82886:	4621      	mov	r1, r4
   82888:	f001 f856 	bl	83938 <_fflush_r>
   8288c:	89a3      	ldrh	r3, [r4, #12]
   8288e:	2200      	movs	r2, #0
   82890:	6062      	str	r2, [r4, #4]
   82892:	61a2      	str	r2, [r4, #24]
   82894:	061a      	lsls	r2, r3, #24
   82896:	d428      	bmi.n	828ea <setvbuf+0x86>
   82898:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8289c:	b29b      	uxth	r3, r3
   8289e:	2e02      	cmp	r6, #2
   828a0:	81a3      	strh	r3, [r4, #12]
   828a2:	d02d      	beq.n	82900 <setvbuf+0x9c>
   828a4:	f1b8 0f00 	cmp.w	r8, #0
   828a8:	d03c      	beq.n	82924 <setvbuf+0xc0>
   828aa:	2e01      	cmp	r6, #1
   828ac:	d013      	beq.n	828d6 <setvbuf+0x72>
   828ae:	b29b      	uxth	r3, r3
   828b0:	f003 0008 	and.w	r0, r3, #8
   828b4:	4a2a      	ldr	r2, [pc, #168]	; (82960 <setvbuf+0xfc>)
   828b6:	b280      	uxth	r0, r0
   828b8:	63ea      	str	r2, [r5, #60]	; 0x3c
   828ba:	f8c4 8000 	str.w	r8, [r4]
   828be:	f8c4 8010 	str.w	r8, [r4, #16]
   828c2:	6167      	str	r7, [r4, #20]
   828c4:	b178      	cbz	r0, 828e6 <setvbuf+0x82>
   828c6:	f013 0f03 	tst.w	r3, #3
   828ca:	bf18      	it	ne
   828cc:	2700      	movne	r7, #0
   828ce:	60a7      	str	r7, [r4, #8]
   828d0:	2000      	movs	r0, #0
   828d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828d6:	f043 0301 	orr.w	r3, r3, #1
   828da:	427a      	negs	r2, r7
   828dc:	81a3      	strh	r3, [r4, #12]
   828de:	61a2      	str	r2, [r4, #24]
   828e0:	e7e5      	b.n	828ae <setvbuf+0x4a>
   828e2:	f04f 30ff 	mov.w	r0, #4294967295
   828e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828ea:	4628      	mov	r0, r5
   828ec:	6921      	ldr	r1, [r4, #16]
   828ee:	f001 f983 	bl	83bf8 <_free_r>
   828f2:	89a3      	ldrh	r3, [r4, #12]
   828f4:	2e02      	cmp	r6, #2
   828f6:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   828fa:	b29b      	uxth	r3, r3
   828fc:	81a3      	strh	r3, [r4, #12]
   828fe:	d1d1      	bne.n	828a4 <setvbuf+0x40>
   82900:	2000      	movs	r0, #0
   82902:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82906:	f043 0302 	orr.w	r3, r3, #2
   8290a:	2500      	movs	r5, #0
   8290c:	2101      	movs	r1, #1
   8290e:	81a3      	strh	r3, [r4, #12]
   82910:	60a5      	str	r5, [r4, #8]
   82912:	6022      	str	r2, [r4, #0]
   82914:	6122      	str	r2, [r4, #16]
   82916:	6161      	str	r1, [r4, #20]
   82918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8291c:	4628      	mov	r0, r5
   8291e:	f001 f827 	bl	83970 <__sinit>
   82922:	e7ab      	b.n	8287c <setvbuf+0x18>
   82924:	2f00      	cmp	r7, #0
   82926:	bf08      	it	eq
   82928:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   8292c:	4638      	mov	r0, r7
   8292e:	f001 fc59 	bl	841e4 <malloc>
   82932:	4680      	mov	r8, r0
   82934:	b128      	cbz	r0, 82942 <setvbuf+0xde>
   82936:	89a3      	ldrh	r3, [r4, #12]
   82938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8293c:	b29b      	uxth	r3, r3
   8293e:	81a3      	strh	r3, [r4, #12]
   82940:	e7b3      	b.n	828aa <setvbuf+0x46>
   82942:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82946:	f001 fc4d 	bl	841e4 <malloc>
   8294a:	4680      	mov	r8, r0
   8294c:	b918      	cbnz	r0, 82956 <setvbuf+0xf2>
   8294e:	89a3      	ldrh	r3, [r4, #12]
   82950:	f04f 30ff 	mov.w	r0, #4294967295
   82954:	e7d5      	b.n	82902 <setvbuf+0x9e>
   82956:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8295a:	e7ec      	b.n	82936 <setvbuf+0xd2>
   8295c:	20070570 	.word	0x20070570
   82960:	00083965 	.word	0x00083965

00082964 <strlen>:
   82964:	f020 0103 	bic.w	r1, r0, #3
   82968:	f010 0003 	ands.w	r0, r0, #3
   8296c:	f1c0 0000 	rsb	r0, r0, #0
   82970:	f851 3b04 	ldr.w	r3, [r1], #4
   82974:	f100 0c04 	add.w	ip, r0, #4
   82978:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8297c:	f06f 0200 	mvn.w	r2, #0
   82980:	bf1c      	itt	ne
   82982:	fa22 f20c 	lsrne.w	r2, r2, ip
   82986:	4313      	orrne	r3, r2
   82988:	f04f 0c01 	mov.w	ip, #1
   8298c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82990:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82994:	eba3 020c 	sub.w	r2, r3, ip
   82998:	ea22 0203 	bic.w	r2, r2, r3
   8299c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   829a0:	bf04      	itt	eq
   829a2:	f851 3b04 	ldreq.w	r3, [r1], #4
   829a6:	3004      	addeq	r0, #4
   829a8:	d0f4      	beq.n	82994 <strlen+0x30>
   829aa:	f013 0fff 	tst.w	r3, #255	; 0xff
   829ae:	bf1f      	itttt	ne
   829b0:	3001      	addne	r0, #1
   829b2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   829b6:	3001      	addne	r0, #1
   829b8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   829bc:	bf18      	it	ne
   829be:	3001      	addne	r0, #1
   829c0:	4770      	bx	lr
   829c2:	bf00      	nop

000829c4 <__sprint_r.part.0>:
   829c4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   829c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   829ca:	049c      	lsls	r4, r3, #18
   829cc:	460e      	mov	r6, r1
   829ce:	4680      	mov	r8, r0
   829d0:	4691      	mov	r9, r2
   829d2:	d52a      	bpl.n	82a2a <__sprint_r.part.0+0x66>
   829d4:	6893      	ldr	r3, [r2, #8]
   829d6:	6812      	ldr	r2, [r2, #0]
   829d8:	f102 0a08 	add.w	sl, r2, #8
   829dc:	b31b      	cbz	r3, 82a26 <__sprint_r.part.0+0x62>
   829de:	e91a 00a0 	ldmdb	sl, {r5, r7}
   829e2:	08bf      	lsrs	r7, r7, #2
   829e4:	d017      	beq.n	82a16 <__sprint_r.part.0+0x52>
   829e6:	3d04      	subs	r5, #4
   829e8:	2400      	movs	r4, #0
   829ea:	e001      	b.n	829f0 <__sprint_r.part.0+0x2c>
   829ec:	42a7      	cmp	r7, r4
   829ee:	d010      	beq.n	82a12 <__sprint_r.part.0+0x4e>
   829f0:	4640      	mov	r0, r8
   829f2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   829f6:	4632      	mov	r2, r6
   829f8:	f001 f850 	bl	83a9c <_fputwc_r>
   829fc:	1c43      	adds	r3, r0, #1
   829fe:	f104 0401 	add.w	r4, r4, #1
   82a02:	d1f3      	bne.n	829ec <__sprint_r.part.0+0x28>
   82a04:	2300      	movs	r3, #0
   82a06:	f8c9 3008 	str.w	r3, [r9, #8]
   82a0a:	f8c9 3004 	str.w	r3, [r9, #4]
   82a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82a12:	f8d9 3008 	ldr.w	r3, [r9, #8]
   82a16:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   82a1a:	f8c9 3008 	str.w	r3, [r9, #8]
   82a1e:	f10a 0a08 	add.w	sl, sl, #8
   82a22:	2b00      	cmp	r3, #0
   82a24:	d1db      	bne.n	829de <__sprint_r.part.0+0x1a>
   82a26:	2000      	movs	r0, #0
   82a28:	e7ec      	b.n	82a04 <__sprint_r.part.0+0x40>
   82a2a:	f001 f9b1 	bl	83d90 <__sfvwrite_r>
   82a2e:	2300      	movs	r3, #0
   82a30:	f8c9 3008 	str.w	r3, [r9, #8]
   82a34:	f8c9 3004 	str.w	r3, [r9, #4]
   82a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00082a3c <_vfiprintf_r>:
   82a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a40:	b0b1      	sub	sp, #196	; 0xc4
   82a42:	461c      	mov	r4, r3
   82a44:	9102      	str	r1, [sp, #8]
   82a46:	4690      	mov	r8, r2
   82a48:	9308      	str	r3, [sp, #32]
   82a4a:	9006      	str	r0, [sp, #24]
   82a4c:	b118      	cbz	r0, 82a56 <_vfiprintf_r+0x1a>
   82a4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82a50:	2b00      	cmp	r3, #0
   82a52:	f000 80e8 	beq.w	82c26 <_vfiprintf_r+0x1ea>
   82a56:	9d02      	ldr	r5, [sp, #8]
   82a58:	89ab      	ldrh	r3, [r5, #12]
   82a5a:	b29a      	uxth	r2, r3
   82a5c:	0490      	lsls	r0, r2, #18
   82a5e:	d407      	bmi.n	82a70 <_vfiprintf_r+0x34>
   82a60:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   82a62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82a66:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   82a6a:	81ab      	strh	r3, [r5, #12]
   82a6c:	b29a      	uxth	r2, r3
   82a6e:	6669      	str	r1, [r5, #100]	; 0x64
   82a70:	0711      	lsls	r1, r2, #28
   82a72:	f140 80b7 	bpl.w	82be4 <_vfiprintf_r+0x1a8>
   82a76:	f8dd b008 	ldr.w	fp, [sp, #8]
   82a7a:	f8db 3010 	ldr.w	r3, [fp, #16]
   82a7e:	2b00      	cmp	r3, #0
   82a80:	f000 80b0 	beq.w	82be4 <_vfiprintf_r+0x1a8>
   82a84:	f002 021a 	and.w	r2, r2, #26
   82a88:	2a0a      	cmp	r2, #10
   82a8a:	f000 80b7 	beq.w	82bfc <_vfiprintf_r+0x1c0>
   82a8e:	2300      	movs	r3, #0
   82a90:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   82a94:	930a      	str	r3, [sp, #40]	; 0x28
   82a96:	9315      	str	r3, [sp, #84]	; 0x54
   82a98:	9314      	str	r3, [sp, #80]	; 0x50
   82a9a:	9309      	str	r3, [sp, #36]	; 0x24
   82a9c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   82aa0:	464e      	mov	r6, r9
   82aa2:	f898 3000 	ldrb.w	r3, [r8]
   82aa6:	2b00      	cmp	r3, #0
   82aa8:	f000 84c8 	beq.w	8343c <_vfiprintf_r+0xa00>
   82aac:	2b25      	cmp	r3, #37	; 0x25
   82aae:	f000 84c5 	beq.w	8343c <_vfiprintf_r+0xa00>
   82ab2:	f108 0201 	add.w	r2, r8, #1
   82ab6:	e001      	b.n	82abc <_vfiprintf_r+0x80>
   82ab8:	2b25      	cmp	r3, #37	; 0x25
   82aba:	d004      	beq.n	82ac6 <_vfiprintf_r+0x8a>
   82abc:	7813      	ldrb	r3, [r2, #0]
   82abe:	4614      	mov	r4, r2
   82ac0:	3201      	adds	r2, #1
   82ac2:	2b00      	cmp	r3, #0
   82ac4:	d1f8      	bne.n	82ab8 <_vfiprintf_r+0x7c>
   82ac6:	ebc8 0504 	rsb	r5, r8, r4
   82aca:	b195      	cbz	r5, 82af2 <_vfiprintf_r+0xb6>
   82acc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82ace:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82ad0:	3301      	adds	r3, #1
   82ad2:	442a      	add	r2, r5
   82ad4:	2b07      	cmp	r3, #7
   82ad6:	f8c6 8000 	str.w	r8, [r6]
   82ada:	6075      	str	r5, [r6, #4]
   82adc:	9215      	str	r2, [sp, #84]	; 0x54
   82ade:	9314      	str	r3, [sp, #80]	; 0x50
   82ae0:	dd7b      	ble.n	82bda <_vfiprintf_r+0x19e>
   82ae2:	2a00      	cmp	r2, #0
   82ae4:	f040 84d5 	bne.w	83492 <_vfiprintf_r+0xa56>
   82ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
   82aea:	9214      	str	r2, [sp, #80]	; 0x50
   82aec:	4428      	add	r0, r5
   82aee:	464e      	mov	r6, r9
   82af0:	9009      	str	r0, [sp, #36]	; 0x24
   82af2:	7823      	ldrb	r3, [r4, #0]
   82af4:	2b00      	cmp	r3, #0
   82af6:	f000 83ed 	beq.w	832d4 <_vfiprintf_r+0x898>
   82afa:	2100      	movs	r1, #0
   82afc:	f04f 0200 	mov.w	r2, #0
   82b00:	f04f 3cff 	mov.w	ip, #4294967295
   82b04:	7863      	ldrb	r3, [r4, #1]
   82b06:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   82b0a:	9104      	str	r1, [sp, #16]
   82b0c:	468a      	mov	sl, r1
   82b0e:	f104 0801 	add.w	r8, r4, #1
   82b12:	4608      	mov	r0, r1
   82b14:	4665      	mov	r5, ip
   82b16:	f108 0801 	add.w	r8, r8, #1
   82b1a:	f1a3 0220 	sub.w	r2, r3, #32
   82b1e:	2a58      	cmp	r2, #88	; 0x58
   82b20:	f200 82d9 	bhi.w	830d6 <_vfiprintf_r+0x69a>
   82b24:	e8df f012 	tbh	[pc, r2, lsl #1]
   82b28:	02d702cb 	.word	0x02d702cb
   82b2c:	02d202d7 	.word	0x02d202d7
   82b30:	02d702d7 	.word	0x02d702d7
   82b34:	02d702d7 	.word	0x02d702d7
   82b38:	02d702d7 	.word	0x02d702d7
   82b3c:	028f0282 	.word	0x028f0282
   82b40:	008402d7 	.word	0x008402d7
   82b44:	02d70293 	.word	0x02d70293
   82b48:	0196012b 	.word	0x0196012b
   82b4c:	01960196 	.word	0x01960196
   82b50:	01960196 	.word	0x01960196
   82b54:	01960196 	.word	0x01960196
   82b58:	01960196 	.word	0x01960196
   82b5c:	02d702d7 	.word	0x02d702d7
   82b60:	02d702d7 	.word	0x02d702d7
   82b64:	02d702d7 	.word	0x02d702d7
   82b68:	02d702d7 	.word	0x02d702d7
   82b6c:	02d702d7 	.word	0x02d702d7
   82b70:	02d70130 	.word	0x02d70130
   82b74:	02d702d7 	.word	0x02d702d7
   82b78:	02d702d7 	.word	0x02d702d7
   82b7c:	02d702d7 	.word	0x02d702d7
   82b80:	02d702d7 	.word	0x02d702d7
   82b84:	017b02d7 	.word	0x017b02d7
   82b88:	02d702d7 	.word	0x02d702d7
   82b8c:	02d702d7 	.word	0x02d702d7
   82b90:	01a402d7 	.word	0x01a402d7
   82b94:	02d702d7 	.word	0x02d702d7
   82b98:	02d701bf 	.word	0x02d701bf
   82b9c:	02d702d7 	.word	0x02d702d7
   82ba0:	02d702d7 	.word	0x02d702d7
   82ba4:	02d702d7 	.word	0x02d702d7
   82ba8:	02d702d7 	.word	0x02d702d7
   82bac:	01e402d7 	.word	0x01e402d7
   82bb0:	02d701fa 	.word	0x02d701fa
   82bb4:	02d702d7 	.word	0x02d702d7
   82bb8:	01fa0216 	.word	0x01fa0216
   82bbc:	02d702d7 	.word	0x02d702d7
   82bc0:	02d7021b 	.word	0x02d7021b
   82bc4:	00890228 	.word	0x00890228
   82bc8:	027d0266 	.word	0x027d0266
   82bcc:	023a02d7 	.word	0x023a02d7
   82bd0:	011902d7 	.word	0x011902d7
   82bd4:	02d702d7 	.word	0x02d702d7
   82bd8:	02af      	.short	0x02af
   82bda:	3608      	adds	r6, #8
   82bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
   82bde:	4428      	add	r0, r5
   82be0:	9009      	str	r0, [sp, #36]	; 0x24
   82be2:	e786      	b.n	82af2 <_vfiprintf_r+0xb6>
   82be4:	9806      	ldr	r0, [sp, #24]
   82be6:	9902      	ldr	r1, [sp, #8]
   82be8:	f000 fd90 	bl	8370c <__swsetup_r>
   82bec:	b9b0      	cbnz	r0, 82c1c <_vfiprintf_r+0x1e0>
   82bee:	9d02      	ldr	r5, [sp, #8]
   82bf0:	89aa      	ldrh	r2, [r5, #12]
   82bf2:	f002 021a 	and.w	r2, r2, #26
   82bf6:	2a0a      	cmp	r2, #10
   82bf8:	f47f af49 	bne.w	82a8e <_vfiprintf_r+0x52>
   82bfc:	f8dd b008 	ldr.w	fp, [sp, #8]
   82c00:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82c04:	2b00      	cmp	r3, #0
   82c06:	f6ff af42 	blt.w	82a8e <_vfiprintf_r+0x52>
   82c0a:	9806      	ldr	r0, [sp, #24]
   82c0c:	4659      	mov	r1, fp
   82c0e:	4642      	mov	r2, r8
   82c10:	4623      	mov	r3, r4
   82c12:	f000 fd3d 	bl	83690 <__sbprintf>
   82c16:	b031      	add	sp, #196	; 0xc4
   82c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c1c:	f04f 30ff 	mov.w	r0, #4294967295
   82c20:	b031      	add	sp, #196	; 0xc4
   82c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c26:	f000 fea3 	bl	83970 <__sinit>
   82c2a:	e714      	b.n	82a56 <_vfiprintf_r+0x1a>
   82c2c:	4240      	negs	r0, r0
   82c2e:	9308      	str	r3, [sp, #32]
   82c30:	f04a 0a04 	orr.w	sl, sl, #4
   82c34:	f898 3000 	ldrb.w	r3, [r8]
   82c38:	e76d      	b.n	82b16 <_vfiprintf_r+0xda>
   82c3a:	f01a 0320 	ands.w	r3, sl, #32
   82c3e:	9004      	str	r0, [sp, #16]
   82c40:	46ac      	mov	ip, r5
   82c42:	f000 80f4 	beq.w	82e2e <_vfiprintf_r+0x3f2>
   82c46:	f8dd b020 	ldr.w	fp, [sp, #32]
   82c4a:	f10b 0307 	add.w	r3, fp, #7
   82c4e:	f023 0307 	bic.w	r3, r3, #7
   82c52:	f103 0408 	add.w	r4, r3, #8
   82c56:	9408      	str	r4, [sp, #32]
   82c58:	e9d3 4500 	ldrd	r4, r5, [r3]
   82c5c:	2300      	movs	r3, #0
   82c5e:	f04f 0000 	mov.w	r0, #0
   82c62:	2100      	movs	r1, #0
   82c64:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   82c68:	f8cd c014 	str.w	ip, [sp, #20]
   82c6c:	9107      	str	r1, [sp, #28]
   82c6e:	f1bc 0f00 	cmp.w	ip, #0
   82c72:	bfa8      	it	ge
   82c74:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82c78:	ea54 0205 	orrs.w	r2, r4, r5
   82c7c:	f040 80ad 	bne.w	82dda <_vfiprintf_r+0x39e>
   82c80:	f1bc 0f00 	cmp.w	ip, #0
   82c84:	f040 80a9 	bne.w	82dda <_vfiprintf_r+0x39e>
   82c88:	2b00      	cmp	r3, #0
   82c8a:	f040 83c0 	bne.w	8340e <_vfiprintf_r+0x9d2>
   82c8e:	f01a 0f01 	tst.w	sl, #1
   82c92:	f000 83bc 	beq.w	8340e <_vfiprintf_r+0x9d2>
   82c96:	2330      	movs	r3, #48	; 0x30
   82c98:	af30      	add	r7, sp, #192	; 0xc0
   82c9a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   82c9e:	ebc7 0409 	rsb	r4, r7, r9
   82ca2:	9405      	str	r4, [sp, #20]
   82ca4:	f8dd b014 	ldr.w	fp, [sp, #20]
   82ca8:	9c07      	ldr	r4, [sp, #28]
   82caa:	45e3      	cmp	fp, ip
   82cac:	bfb8      	it	lt
   82cae:	46e3      	movlt	fp, ip
   82cb0:	f8cd b00c 	str.w	fp, [sp, #12]
   82cb4:	b11c      	cbz	r4, 82cbe <_vfiprintf_r+0x282>
   82cb6:	f10b 0b01 	add.w	fp, fp, #1
   82cba:	f8cd b00c 	str.w	fp, [sp, #12]
   82cbe:	f01a 0502 	ands.w	r5, sl, #2
   82cc2:	9507      	str	r5, [sp, #28]
   82cc4:	d005      	beq.n	82cd2 <_vfiprintf_r+0x296>
   82cc6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82cca:	f10b 0b02 	add.w	fp, fp, #2
   82cce:	f8cd b00c 	str.w	fp, [sp, #12]
   82cd2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   82cd6:	930b      	str	r3, [sp, #44]	; 0x2c
   82cd8:	f040 821b 	bne.w	83112 <_vfiprintf_r+0x6d6>
   82cdc:	9d04      	ldr	r5, [sp, #16]
   82cde:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82ce2:	ebcb 0405 	rsb	r4, fp, r5
   82ce6:	2c00      	cmp	r4, #0
   82ce8:	f340 8213 	ble.w	83112 <_vfiprintf_r+0x6d6>
   82cec:	2c10      	cmp	r4, #16
   82cee:	f340 8489 	ble.w	83604 <_vfiprintf_r+0xbc8>
   82cf2:	4dbe      	ldr	r5, [pc, #760]	; (82fec <_vfiprintf_r+0x5b0>)
   82cf4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82cf6:	462b      	mov	r3, r5
   82cf8:	9814      	ldr	r0, [sp, #80]	; 0x50
   82cfa:	4625      	mov	r5, r4
   82cfc:	f04f 0b10 	mov.w	fp, #16
   82d00:	4664      	mov	r4, ip
   82d02:	46b4      	mov	ip, r6
   82d04:	461e      	mov	r6, r3
   82d06:	e006      	b.n	82d16 <_vfiprintf_r+0x2da>
   82d08:	1c83      	adds	r3, r0, #2
   82d0a:	f10c 0c08 	add.w	ip, ip, #8
   82d0e:	4608      	mov	r0, r1
   82d10:	3d10      	subs	r5, #16
   82d12:	2d10      	cmp	r5, #16
   82d14:	dd11      	ble.n	82d3a <_vfiprintf_r+0x2fe>
   82d16:	1c41      	adds	r1, r0, #1
   82d18:	3210      	adds	r2, #16
   82d1a:	2907      	cmp	r1, #7
   82d1c:	9215      	str	r2, [sp, #84]	; 0x54
   82d1e:	e88c 0840 	stmia.w	ip, {r6, fp}
   82d22:	9114      	str	r1, [sp, #80]	; 0x50
   82d24:	ddf0      	ble.n	82d08 <_vfiprintf_r+0x2cc>
   82d26:	2a00      	cmp	r2, #0
   82d28:	f040 81e6 	bne.w	830f8 <_vfiprintf_r+0x6bc>
   82d2c:	3d10      	subs	r5, #16
   82d2e:	2d10      	cmp	r5, #16
   82d30:	f04f 0301 	mov.w	r3, #1
   82d34:	4610      	mov	r0, r2
   82d36:	46cc      	mov	ip, r9
   82d38:	dced      	bgt.n	82d16 <_vfiprintf_r+0x2da>
   82d3a:	4631      	mov	r1, r6
   82d3c:	4666      	mov	r6, ip
   82d3e:	46a4      	mov	ip, r4
   82d40:	462c      	mov	r4, r5
   82d42:	460d      	mov	r5, r1
   82d44:	4422      	add	r2, r4
   82d46:	2b07      	cmp	r3, #7
   82d48:	9215      	str	r2, [sp, #84]	; 0x54
   82d4a:	6035      	str	r5, [r6, #0]
   82d4c:	6074      	str	r4, [r6, #4]
   82d4e:	9314      	str	r3, [sp, #80]	; 0x50
   82d50:	f300 836d 	bgt.w	8342e <_vfiprintf_r+0x9f2>
   82d54:	3608      	adds	r6, #8
   82d56:	1c59      	adds	r1, r3, #1
   82d58:	e1de      	b.n	83118 <_vfiprintf_r+0x6dc>
   82d5a:	f01a 0f20 	tst.w	sl, #32
   82d5e:	9004      	str	r0, [sp, #16]
   82d60:	46ac      	mov	ip, r5
   82d62:	f000 808d 	beq.w	82e80 <_vfiprintf_r+0x444>
   82d66:	9d08      	ldr	r5, [sp, #32]
   82d68:	1deb      	adds	r3, r5, #7
   82d6a:	f023 0307 	bic.w	r3, r3, #7
   82d6e:	f103 0b08 	add.w	fp, r3, #8
   82d72:	e9d3 4500 	ldrd	r4, r5, [r3]
   82d76:	f8cd b020 	str.w	fp, [sp, #32]
   82d7a:	2301      	movs	r3, #1
   82d7c:	e76f      	b.n	82c5e <_vfiprintf_r+0x222>
   82d7e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   82d82:	f898 3000 	ldrb.w	r3, [r8]
   82d86:	e6c6      	b.n	82b16 <_vfiprintf_r+0xda>
   82d88:	f04a 0a10 	orr.w	sl, sl, #16
   82d8c:	f01a 0f20 	tst.w	sl, #32
   82d90:	9004      	str	r0, [sp, #16]
   82d92:	46ac      	mov	ip, r5
   82d94:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82d98:	f000 80c8 	beq.w	82f2c <_vfiprintf_r+0x4f0>
   82d9c:	9c08      	ldr	r4, [sp, #32]
   82d9e:	1de1      	adds	r1, r4, #7
   82da0:	f021 0107 	bic.w	r1, r1, #7
   82da4:	e9d1 2300 	ldrd	r2, r3, [r1]
   82da8:	3108      	adds	r1, #8
   82daa:	9108      	str	r1, [sp, #32]
   82dac:	4614      	mov	r4, r2
   82dae:	461d      	mov	r5, r3
   82db0:	2a00      	cmp	r2, #0
   82db2:	f173 0b00 	sbcs.w	fp, r3, #0
   82db6:	f2c0 83ce 	blt.w	83556 <_vfiprintf_r+0xb1a>
   82dba:	f1bc 0f00 	cmp.w	ip, #0
   82dbe:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   82dc2:	bfa8      	it	ge
   82dc4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82dc8:	ea54 0205 	orrs.w	r2, r4, r5
   82dcc:	9007      	str	r0, [sp, #28]
   82dce:	f8cd c014 	str.w	ip, [sp, #20]
   82dd2:	f04f 0301 	mov.w	r3, #1
   82dd6:	f43f af53 	beq.w	82c80 <_vfiprintf_r+0x244>
   82dda:	2b01      	cmp	r3, #1
   82ddc:	f000 8319 	beq.w	83412 <_vfiprintf_r+0x9d6>
   82de0:	2b02      	cmp	r3, #2
   82de2:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   82de6:	f040 824c 	bne.w	83282 <_vfiprintf_r+0x846>
   82dea:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   82dee:	4619      	mov	r1, r3
   82df0:	f004 000f 	and.w	r0, r4, #15
   82df4:	0922      	lsrs	r2, r4, #4
   82df6:	f81b 0000 	ldrb.w	r0, [fp, r0]
   82dfa:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   82dfe:	092b      	lsrs	r3, r5, #4
   82e00:	7008      	strb	r0, [r1, #0]
   82e02:	ea52 0003 	orrs.w	r0, r2, r3
   82e06:	460f      	mov	r7, r1
   82e08:	4614      	mov	r4, r2
   82e0a:	461d      	mov	r5, r3
   82e0c:	f101 31ff 	add.w	r1, r1, #4294967295
   82e10:	d1ee      	bne.n	82df0 <_vfiprintf_r+0x3b4>
   82e12:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   82e16:	ebc7 0309 	rsb	r3, r7, r9
   82e1a:	9305      	str	r3, [sp, #20]
   82e1c:	e742      	b.n	82ca4 <_vfiprintf_r+0x268>
   82e1e:	f04a 0a10 	orr.w	sl, sl, #16
   82e22:	f01a 0320 	ands.w	r3, sl, #32
   82e26:	9004      	str	r0, [sp, #16]
   82e28:	46ac      	mov	ip, r5
   82e2a:	f47f af0c 	bne.w	82c46 <_vfiprintf_r+0x20a>
   82e2e:	f01a 0210 	ands.w	r2, sl, #16
   82e32:	f040 8311 	bne.w	83458 <_vfiprintf_r+0xa1c>
   82e36:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   82e3a:	f000 830d 	beq.w	83458 <_vfiprintf_r+0xa1c>
   82e3e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82e42:	4613      	mov	r3, r2
   82e44:	f8bb 4000 	ldrh.w	r4, [fp]
   82e48:	f10b 0b04 	add.w	fp, fp, #4
   82e4c:	2500      	movs	r5, #0
   82e4e:	f8cd b020 	str.w	fp, [sp, #32]
   82e52:	e704      	b.n	82c5e <_vfiprintf_r+0x222>
   82e54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82e58:	2000      	movs	r0, #0
   82e5a:	f818 3b01 	ldrb.w	r3, [r8], #1
   82e5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   82e62:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   82e66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82e6a:	2a09      	cmp	r2, #9
   82e6c:	d9f5      	bls.n	82e5a <_vfiprintf_r+0x41e>
   82e6e:	e654      	b.n	82b1a <_vfiprintf_r+0xde>
   82e70:	f04a 0a10 	orr.w	sl, sl, #16
   82e74:	f01a 0f20 	tst.w	sl, #32
   82e78:	9004      	str	r0, [sp, #16]
   82e7a:	46ac      	mov	ip, r5
   82e7c:	f47f af73 	bne.w	82d66 <_vfiprintf_r+0x32a>
   82e80:	f01a 0f10 	tst.w	sl, #16
   82e84:	f040 82ef 	bne.w	83466 <_vfiprintf_r+0xa2a>
   82e88:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82e8c:	f000 82eb 	beq.w	83466 <_vfiprintf_r+0xa2a>
   82e90:	f8dd b020 	ldr.w	fp, [sp, #32]
   82e94:	2500      	movs	r5, #0
   82e96:	f8bb 4000 	ldrh.w	r4, [fp]
   82e9a:	f10b 0b04 	add.w	fp, fp, #4
   82e9e:	2301      	movs	r3, #1
   82ea0:	f8cd b020 	str.w	fp, [sp, #32]
   82ea4:	e6db      	b.n	82c5e <_vfiprintf_r+0x222>
   82ea6:	46ac      	mov	ip, r5
   82ea8:	4d51      	ldr	r5, [pc, #324]	; (82ff0 <_vfiprintf_r+0x5b4>)
   82eaa:	f01a 0f20 	tst.w	sl, #32
   82eae:	9004      	str	r0, [sp, #16]
   82eb0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82eb4:	950a      	str	r5, [sp, #40]	; 0x28
   82eb6:	f000 80f0 	beq.w	8309a <_vfiprintf_r+0x65e>
   82eba:	9d08      	ldr	r5, [sp, #32]
   82ebc:	1dea      	adds	r2, r5, #7
   82ebe:	f022 0207 	bic.w	r2, r2, #7
   82ec2:	f102 0b08 	add.w	fp, r2, #8
   82ec6:	f8cd b020 	str.w	fp, [sp, #32]
   82eca:	e9d2 4500 	ldrd	r4, r5, [r2]
   82ece:	f01a 0f01 	tst.w	sl, #1
   82ed2:	f000 82aa 	beq.w	8342a <_vfiprintf_r+0x9ee>
   82ed6:	ea54 0b05 	orrs.w	fp, r4, r5
   82eda:	f000 82a6 	beq.w	8342a <_vfiprintf_r+0x9ee>
   82ede:	2230      	movs	r2, #48	; 0x30
   82ee0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   82ee4:	f04a 0a02 	orr.w	sl, sl, #2
   82ee8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82eec:	2302      	movs	r3, #2
   82eee:	e6b6      	b.n	82c5e <_vfiprintf_r+0x222>
   82ef0:	9b08      	ldr	r3, [sp, #32]
   82ef2:	f8dd b020 	ldr.w	fp, [sp, #32]
   82ef6:	681b      	ldr	r3, [r3, #0]
   82ef8:	2401      	movs	r4, #1
   82efa:	f04f 0500 	mov.w	r5, #0
   82efe:	f10b 0b04 	add.w	fp, fp, #4
   82f02:	9004      	str	r0, [sp, #16]
   82f04:	9403      	str	r4, [sp, #12]
   82f06:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82f0a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   82f0e:	f8cd b020 	str.w	fp, [sp, #32]
   82f12:	9405      	str	r4, [sp, #20]
   82f14:	af16      	add	r7, sp, #88	; 0x58
   82f16:	f04f 0c00 	mov.w	ip, #0
   82f1a:	e6d0      	b.n	82cbe <_vfiprintf_r+0x282>
   82f1c:	f01a 0f20 	tst.w	sl, #32
   82f20:	9004      	str	r0, [sp, #16]
   82f22:	46ac      	mov	ip, r5
   82f24:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82f28:	f47f af38 	bne.w	82d9c <_vfiprintf_r+0x360>
   82f2c:	f01a 0f10 	tst.w	sl, #16
   82f30:	f040 82a7 	bne.w	83482 <_vfiprintf_r+0xa46>
   82f34:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82f38:	f000 82a3 	beq.w	83482 <_vfiprintf_r+0xa46>
   82f3c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82f40:	f9bb 4000 	ldrsh.w	r4, [fp]
   82f44:	f10b 0b04 	add.w	fp, fp, #4
   82f48:	17e5      	asrs	r5, r4, #31
   82f4a:	4622      	mov	r2, r4
   82f4c:	462b      	mov	r3, r5
   82f4e:	f8cd b020 	str.w	fp, [sp, #32]
   82f52:	e72d      	b.n	82db0 <_vfiprintf_r+0x374>
   82f54:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   82f58:	f898 3000 	ldrb.w	r3, [r8]
   82f5c:	e5db      	b.n	82b16 <_vfiprintf_r+0xda>
   82f5e:	f898 3000 	ldrb.w	r3, [r8]
   82f62:	4642      	mov	r2, r8
   82f64:	2b6c      	cmp	r3, #108	; 0x6c
   82f66:	bf03      	ittte	eq
   82f68:	f108 0801 	addeq.w	r8, r8, #1
   82f6c:	f04a 0a20 	orreq.w	sl, sl, #32
   82f70:	7853      	ldrbeq	r3, [r2, #1]
   82f72:	f04a 0a10 	orrne.w	sl, sl, #16
   82f76:	e5ce      	b.n	82b16 <_vfiprintf_r+0xda>
   82f78:	f01a 0f20 	tst.w	sl, #32
   82f7c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82f80:	f000 82f7 	beq.w	83572 <_vfiprintf_r+0xb36>
   82f84:	9c08      	ldr	r4, [sp, #32]
   82f86:	6821      	ldr	r1, [r4, #0]
   82f88:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82f8a:	17e5      	asrs	r5, r4, #31
   82f8c:	462b      	mov	r3, r5
   82f8e:	9d08      	ldr	r5, [sp, #32]
   82f90:	4622      	mov	r2, r4
   82f92:	3504      	adds	r5, #4
   82f94:	9508      	str	r5, [sp, #32]
   82f96:	e9c1 2300 	strd	r2, r3, [r1]
   82f9a:	e582      	b.n	82aa2 <_vfiprintf_r+0x66>
   82f9c:	9c08      	ldr	r4, [sp, #32]
   82f9e:	46ac      	mov	ip, r5
   82fa0:	6827      	ldr	r7, [r4, #0]
   82fa2:	f04f 0500 	mov.w	r5, #0
   82fa6:	9004      	str	r0, [sp, #16]
   82fa8:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82fac:	3404      	adds	r4, #4
   82fae:	2f00      	cmp	r7, #0
   82fb0:	f000 8332 	beq.w	83618 <_vfiprintf_r+0xbdc>
   82fb4:	f1bc 0f00 	cmp.w	ip, #0
   82fb8:	4638      	mov	r0, r7
   82fba:	f2c0 8307 	blt.w	835cc <_vfiprintf_r+0xb90>
   82fbe:	4662      	mov	r2, ip
   82fc0:	2100      	movs	r1, #0
   82fc2:	f8cd c004 	str.w	ip, [sp, #4]
   82fc6:	f001 fbb1 	bl	8472c <memchr>
   82fca:	f8dd c004 	ldr.w	ip, [sp, #4]
   82fce:	2800      	cmp	r0, #0
   82fd0:	f000 833a 	beq.w	83648 <_vfiprintf_r+0xc0c>
   82fd4:	1bc0      	subs	r0, r0, r7
   82fd6:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82fda:	4560      	cmp	r0, ip
   82fdc:	bfa8      	it	ge
   82fde:	4660      	movge	r0, ip
   82fe0:	9005      	str	r0, [sp, #20]
   82fe2:	9408      	str	r4, [sp, #32]
   82fe4:	9507      	str	r5, [sp, #28]
   82fe6:	f04f 0c00 	mov.w	ip, #0
   82fea:	e65b      	b.n	82ca4 <_vfiprintf_r+0x268>
   82fec:	000857c0 	.word	0x000857c0
   82ff0:	00085780 	.word	0x00085780
   82ff4:	9b08      	ldr	r3, [sp, #32]
   82ff6:	f8dd b020 	ldr.w	fp, [sp, #32]
   82ffa:	9004      	str	r0, [sp, #16]
   82ffc:	48b2      	ldr	r0, [pc, #712]	; (832c8 <_vfiprintf_r+0x88c>)
   82ffe:	681c      	ldr	r4, [r3, #0]
   83000:	2230      	movs	r2, #48	; 0x30
   83002:	2378      	movs	r3, #120	; 0x78
   83004:	f10b 0b04 	add.w	fp, fp, #4
   83008:	46ac      	mov	ip, r5
   8300a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8300e:	f04a 0a02 	orr.w	sl, sl, #2
   83012:	f8cd b020 	str.w	fp, [sp, #32]
   83016:	2500      	movs	r5, #0
   83018:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8301c:	900a      	str	r0, [sp, #40]	; 0x28
   8301e:	2302      	movs	r3, #2
   83020:	e61d      	b.n	82c5e <_vfiprintf_r+0x222>
   83022:	f04a 0a20 	orr.w	sl, sl, #32
   83026:	f898 3000 	ldrb.w	r3, [r8]
   8302a:	e574      	b.n	82b16 <_vfiprintf_r+0xda>
   8302c:	f8dd b020 	ldr.w	fp, [sp, #32]
   83030:	f8db 0000 	ldr.w	r0, [fp]
   83034:	f10b 0304 	add.w	r3, fp, #4
   83038:	2800      	cmp	r0, #0
   8303a:	f6ff adf7 	blt.w	82c2c <_vfiprintf_r+0x1f0>
   8303e:	9308      	str	r3, [sp, #32]
   83040:	f898 3000 	ldrb.w	r3, [r8]
   83044:	e567      	b.n	82b16 <_vfiprintf_r+0xda>
   83046:	f898 3000 	ldrb.w	r3, [r8]
   8304a:	212b      	movs	r1, #43	; 0x2b
   8304c:	e563      	b.n	82b16 <_vfiprintf_r+0xda>
   8304e:	f898 3000 	ldrb.w	r3, [r8]
   83052:	f108 0401 	add.w	r4, r8, #1
   83056:	2b2a      	cmp	r3, #42	; 0x2a
   83058:	f000 8305 	beq.w	83666 <_vfiprintf_r+0xc2a>
   8305c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83060:	2a09      	cmp	r2, #9
   83062:	bf98      	it	ls
   83064:	2500      	movls	r5, #0
   83066:	f200 82fa 	bhi.w	8365e <_vfiprintf_r+0xc22>
   8306a:	f814 3b01 	ldrb.w	r3, [r4], #1
   8306e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   83072:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   83076:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8307a:	2a09      	cmp	r2, #9
   8307c:	d9f5      	bls.n	8306a <_vfiprintf_r+0x62e>
   8307e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   83082:	46a0      	mov	r8, r4
   83084:	e549      	b.n	82b1a <_vfiprintf_r+0xde>
   83086:	4c90      	ldr	r4, [pc, #576]	; (832c8 <_vfiprintf_r+0x88c>)
   83088:	f01a 0f20 	tst.w	sl, #32
   8308c:	9004      	str	r0, [sp, #16]
   8308e:	46ac      	mov	ip, r5
   83090:	940a      	str	r4, [sp, #40]	; 0x28
   83092:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83096:	f47f af10 	bne.w	82eba <_vfiprintf_r+0x47e>
   8309a:	f01a 0f10 	tst.w	sl, #16
   8309e:	f040 81ea 	bne.w	83476 <_vfiprintf_r+0xa3a>
   830a2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   830a6:	f000 81e6 	beq.w	83476 <_vfiprintf_r+0xa3a>
   830aa:	f8dd b020 	ldr.w	fp, [sp, #32]
   830ae:	2500      	movs	r5, #0
   830b0:	f8bb 4000 	ldrh.w	r4, [fp]
   830b4:	f10b 0b04 	add.w	fp, fp, #4
   830b8:	f8cd b020 	str.w	fp, [sp, #32]
   830bc:	e707      	b.n	82ece <_vfiprintf_r+0x492>
   830be:	f898 3000 	ldrb.w	r3, [r8]
   830c2:	2900      	cmp	r1, #0
   830c4:	f47f ad27 	bne.w	82b16 <_vfiprintf_r+0xda>
   830c8:	2120      	movs	r1, #32
   830ca:	e524      	b.n	82b16 <_vfiprintf_r+0xda>
   830cc:	f04a 0a01 	orr.w	sl, sl, #1
   830d0:	f898 3000 	ldrb.w	r3, [r8]
   830d4:	e51f      	b.n	82b16 <_vfiprintf_r+0xda>
   830d6:	9004      	str	r0, [sp, #16]
   830d8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   830dc:	2b00      	cmp	r3, #0
   830de:	f000 80f9 	beq.w	832d4 <_vfiprintf_r+0x898>
   830e2:	2501      	movs	r5, #1
   830e4:	f04f 0b00 	mov.w	fp, #0
   830e8:	9503      	str	r5, [sp, #12]
   830ea:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   830ee:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   830f2:	9505      	str	r5, [sp, #20]
   830f4:	af16      	add	r7, sp, #88	; 0x58
   830f6:	e70e      	b.n	82f16 <_vfiprintf_r+0x4da>
   830f8:	9806      	ldr	r0, [sp, #24]
   830fa:	9902      	ldr	r1, [sp, #8]
   830fc:	aa13      	add	r2, sp, #76	; 0x4c
   830fe:	f7ff fc61 	bl	829c4 <__sprint_r.part.0>
   83102:	2800      	cmp	r0, #0
   83104:	f040 80ed 	bne.w	832e2 <_vfiprintf_r+0x8a6>
   83108:	9814      	ldr	r0, [sp, #80]	; 0x50
   8310a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8310c:	1c43      	adds	r3, r0, #1
   8310e:	46cc      	mov	ip, r9
   83110:	e5fe      	b.n	82d10 <_vfiprintf_r+0x2d4>
   83112:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83114:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83116:	1c59      	adds	r1, r3, #1
   83118:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8311c:	b168      	cbz	r0, 8313a <_vfiprintf_r+0x6fe>
   8311e:	3201      	adds	r2, #1
   83120:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   83124:	2301      	movs	r3, #1
   83126:	2907      	cmp	r1, #7
   83128:	9215      	str	r2, [sp, #84]	; 0x54
   8312a:	9114      	str	r1, [sp, #80]	; 0x50
   8312c:	e886 0009 	stmia.w	r6, {r0, r3}
   83130:	f300 8160 	bgt.w	833f4 <_vfiprintf_r+0x9b8>
   83134:	460b      	mov	r3, r1
   83136:	3608      	adds	r6, #8
   83138:	3101      	adds	r1, #1
   8313a:	9c07      	ldr	r4, [sp, #28]
   8313c:	b164      	cbz	r4, 83158 <_vfiprintf_r+0x71c>
   8313e:	3202      	adds	r2, #2
   83140:	a812      	add	r0, sp, #72	; 0x48
   83142:	2302      	movs	r3, #2
   83144:	2907      	cmp	r1, #7
   83146:	9215      	str	r2, [sp, #84]	; 0x54
   83148:	9114      	str	r1, [sp, #80]	; 0x50
   8314a:	e886 0009 	stmia.w	r6, {r0, r3}
   8314e:	f300 8157 	bgt.w	83400 <_vfiprintf_r+0x9c4>
   83152:	460b      	mov	r3, r1
   83154:	3608      	adds	r6, #8
   83156:	3101      	adds	r1, #1
   83158:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8315a:	2d80      	cmp	r5, #128	; 0x80
   8315c:	f000 8101 	beq.w	83362 <_vfiprintf_r+0x926>
   83160:	9d05      	ldr	r5, [sp, #20]
   83162:	ebc5 040c 	rsb	r4, r5, ip
   83166:	2c00      	cmp	r4, #0
   83168:	dd2f      	ble.n	831ca <_vfiprintf_r+0x78e>
   8316a:	2c10      	cmp	r4, #16
   8316c:	4d57      	ldr	r5, [pc, #348]	; (832cc <_vfiprintf_r+0x890>)
   8316e:	dd22      	ble.n	831b6 <_vfiprintf_r+0x77a>
   83170:	4630      	mov	r0, r6
   83172:	f04f 0b10 	mov.w	fp, #16
   83176:	462e      	mov	r6, r5
   83178:	4625      	mov	r5, r4
   8317a:	9c06      	ldr	r4, [sp, #24]
   8317c:	e006      	b.n	8318c <_vfiprintf_r+0x750>
   8317e:	f103 0c02 	add.w	ip, r3, #2
   83182:	3008      	adds	r0, #8
   83184:	460b      	mov	r3, r1
   83186:	3d10      	subs	r5, #16
   83188:	2d10      	cmp	r5, #16
   8318a:	dd10      	ble.n	831ae <_vfiprintf_r+0x772>
   8318c:	1c59      	adds	r1, r3, #1
   8318e:	3210      	adds	r2, #16
   83190:	2907      	cmp	r1, #7
   83192:	9215      	str	r2, [sp, #84]	; 0x54
   83194:	e880 0840 	stmia.w	r0, {r6, fp}
   83198:	9114      	str	r1, [sp, #80]	; 0x50
   8319a:	ddf0      	ble.n	8317e <_vfiprintf_r+0x742>
   8319c:	2a00      	cmp	r2, #0
   8319e:	d163      	bne.n	83268 <_vfiprintf_r+0x82c>
   831a0:	3d10      	subs	r5, #16
   831a2:	2d10      	cmp	r5, #16
   831a4:	f04f 0c01 	mov.w	ip, #1
   831a8:	4613      	mov	r3, r2
   831aa:	4648      	mov	r0, r9
   831ac:	dcee      	bgt.n	8318c <_vfiprintf_r+0x750>
   831ae:	462c      	mov	r4, r5
   831b0:	4661      	mov	r1, ip
   831b2:	4635      	mov	r5, r6
   831b4:	4606      	mov	r6, r0
   831b6:	4422      	add	r2, r4
   831b8:	2907      	cmp	r1, #7
   831ba:	9215      	str	r2, [sp, #84]	; 0x54
   831bc:	6035      	str	r5, [r6, #0]
   831be:	6074      	str	r4, [r6, #4]
   831c0:	9114      	str	r1, [sp, #80]	; 0x50
   831c2:	f300 80c1 	bgt.w	83348 <_vfiprintf_r+0x90c>
   831c6:	3608      	adds	r6, #8
   831c8:	3101      	adds	r1, #1
   831ca:	9d05      	ldr	r5, [sp, #20]
   831cc:	2907      	cmp	r1, #7
   831ce:	442a      	add	r2, r5
   831d0:	9215      	str	r2, [sp, #84]	; 0x54
   831d2:	6037      	str	r7, [r6, #0]
   831d4:	6075      	str	r5, [r6, #4]
   831d6:	9114      	str	r1, [sp, #80]	; 0x50
   831d8:	f340 80c1 	ble.w	8335e <_vfiprintf_r+0x922>
   831dc:	2a00      	cmp	r2, #0
   831de:	f040 8130 	bne.w	83442 <_vfiprintf_r+0xa06>
   831e2:	9214      	str	r2, [sp, #80]	; 0x50
   831e4:	464e      	mov	r6, r9
   831e6:	f01a 0f04 	tst.w	sl, #4
   831ea:	f000 808b 	beq.w	83304 <_vfiprintf_r+0x8c8>
   831ee:	9d04      	ldr	r5, [sp, #16]
   831f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   831f4:	ebcb 0405 	rsb	r4, fp, r5
   831f8:	2c00      	cmp	r4, #0
   831fa:	f340 8083 	ble.w	83304 <_vfiprintf_r+0x8c8>
   831fe:	2c10      	cmp	r4, #16
   83200:	f340 821e 	ble.w	83640 <_vfiprintf_r+0xc04>
   83204:	9914      	ldr	r1, [sp, #80]	; 0x50
   83206:	4d32      	ldr	r5, [pc, #200]	; (832d0 <_vfiprintf_r+0x894>)
   83208:	2710      	movs	r7, #16
   8320a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8320e:	f8dd b008 	ldr.w	fp, [sp, #8]
   83212:	e005      	b.n	83220 <_vfiprintf_r+0x7e4>
   83214:	1c88      	adds	r0, r1, #2
   83216:	3608      	adds	r6, #8
   83218:	4619      	mov	r1, r3
   8321a:	3c10      	subs	r4, #16
   8321c:	2c10      	cmp	r4, #16
   8321e:	dd10      	ble.n	83242 <_vfiprintf_r+0x806>
   83220:	1c4b      	adds	r3, r1, #1
   83222:	3210      	adds	r2, #16
   83224:	2b07      	cmp	r3, #7
   83226:	9215      	str	r2, [sp, #84]	; 0x54
   83228:	e886 00a0 	stmia.w	r6, {r5, r7}
   8322c:	9314      	str	r3, [sp, #80]	; 0x50
   8322e:	ddf1      	ble.n	83214 <_vfiprintf_r+0x7d8>
   83230:	2a00      	cmp	r2, #0
   83232:	d17d      	bne.n	83330 <_vfiprintf_r+0x8f4>
   83234:	3c10      	subs	r4, #16
   83236:	2c10      	cmp	r4, #16
   83238:	f04f 0001 	mov.w	r0, #1
   8323c:	4611      	mov	r1, r2
   8323e:	464e      	mov	r6, r9
   83240:	dcee      	bgt.n	83220 <_vfiprintf_r+0x7e4>
   83242:	4422      	add	r2, r4
   83244:	2807      	cmp	r0, #7
   83246:	9215      	str	r2, [sp, #84]	; 0x54
   83248:	6035      	str	r5, [r6, #0]
   8324a:	6074      	str	r4, [r6, #4]
   8324c:	9014      	str	r0, [sp, #80]	; 0x50
   8324e:	dd59      	ble.n	83304 <_vfiprintf_r+0x8c8>
   83250:	2a00      	cmp	r2, #0
   83252:	d14f      	bne.n	832f4 <_vfiprintf_r+0x8b8>
   83254:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83256:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8325a:	9d04      	ldr	r5, [sp, #16]
   8325c:	45ab      	cmp	fp, r5
   8325e:	bfac      	ite	ge
   83260:	445c      	addge	r4, fp
   83262:	1964      	addlt	r4, r4, r5
   83264:	9409      	str	r4, [sp, #36]	; 0x24
   83266:	e05e      	b.n	83326 <_vfiprintf_r+0x8ea>
   83268:	4620      	mov	r0, r4
   8326a:	9902      	ldr	r1, [sp, #8]
   8326c:	aa13      	add	r2, sp, #76	; 0x4c
   8326e:	f7ff fba9 	bl	829c4 <__sprint_r.part.0>
   83272:	2800      	cmp	r0, #0
   83274:	d135      	bne.n	832e2 <_vfiprintf_r+0x8a6>
   83276:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83278:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8327a:	f103 0c01 	add.w	ip, r3, #1
   8327e:	4648      	mov	r0, r9
   83280:	e781      	b.n	83186 <_vfiprintf_r+0x74a>
   83282:	08e0      	lsrs	r0, r4, #3
   83284:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   83288:	f004 0207 	and.w	r2, r4, #7
   8328c:	08e9      	lsrs	r1, r5, #3
   8328e:	3230      	adds	r2, #48	; 0x30
   83290:	ea50 0b01 	orrs.w	fp, r0, r1
   83294:	461f      	mov	r7, r3
   83296:	701a      	strb	r2, [r3, #0]
   83298:	4604      	mov	r4, r0
   8329a:	460d      	mov	r5, r1
   8329c:	f103 33ff 	add.w	r3, r3, #4294967295
   832a0:	d1ef      	bne.n	83282 <_vfiprintf_r+0x846>
   832a2:	f01a 0f01 	tst.w	sl, #1
   832a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   832aa:	4639      	mov	r1, r7
   832ac:	f000 80b9 	beq.w	83422 <_vfiprintf_r+0x9e6>
   832b0:	2a30      	cmp	r2, #48	; 0x30
   832b2:	f43f acf4 	beq.w	82c9e <_vfiprintf_r+0x262>
   832b6:	461f      	mov	r7, r3
   832b8:	ebc7 0509 	rsb	r5, r7, r9
   832bc:	2330      	movs	r3, #48	; 0x30
   832be:	9505      	str	r5, [sp, #20]
   832c0:	f801 3c01 	strb.w	r3, [r1, #-1]
   832c4:	e4ee      	b.n	82ca4 <_vfiprintf_r+0x268>
   832c6:	bf00      	nop
   832c8:	00085794 	.word	0x00085794
   832cc:	000857b0 	.word	0x000857b0
   832d0:	000857c0 	.word	0x000857c0
   832d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   832d6:	b123      	cbz	r3, 832e2 <_vfiprintf_r+0x8a6>
   832d8:	9806      	ldr	r0, [sp, #24]
   832da:	9902      	ldr	r1, [sp, #8]
   832dc:	aa13      	add	r2, sp, #76	; 0x4c
   832de:	f7ff fb71 	bl	829c4 <__sprint_r.part.0>
   832e2:	9c02      	ldr	r4, [sp, #8]
   832e4:	89a3      	ldrh	r3, [r4, #12]
   832e6:	065b      	lsls	r3, r3, #25
   832e8:	f53f ac98 	bmi.w	82c1c <_vfiprintf_r+0x1e0>
   832ec:	9809      	ldr	r0, [sp, #36]	; 0x24
   832ee:	b031      	add	sp, #196	; 0xc4
   832f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832f4:	9806      	ldr	r0, [sp, #24]
   832f6:	9902      	ldr	r1, [sp, #8]
   832f8:	aa13      	add	r2, sp, #76	; 0x4c
   832fa:	f7ff fb63 	bl	829c4 <__sprint_r.part.0>
   832fe:	2800      	cmp	r0, #0
   83300:	d1ef      	bne.n	832e2 <_vfiprintf_r+0x8a6>
   83302:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83304:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83306:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8330a:	9d04      	ldr	r5, [sp, #16]
   8330c:	45ab      	cmp	fp, r5
   8330e:	bfac      	ite	ge
   83310:	445c      	addge	r4, fp
   83312:	1964      	addlt	r4, r4, r5
   83314:	9409      	str	r4, [sp, #36]	; 0x24
   83316:	b132      	cbz	r2, 83326 <_vfiprintf_r+0x8ea>
   83318:	9806      	ldr	r0, [sp, #24]
   8331a:	9902      	ldr	r1, [sp, #8]
   8331c:	aa13      	add	r2, sp, #76	; 0x4c
   8331e:	f7ff fb51 	bl	829c4 <__sprint_r.part.0>
   83322:	2800      	cmp	r0, #0
   83324:	d1dd      	bne.n	832e2 <_vfiprintf_r+0x8a6>
   83326:	2000      	movs	r0, #0
   83328:	9014      	str	r0, [sp, #80]	; 0x50
   8332a:	464e      	mov	r6, r9
   8332c:	f7ff bbb9 	b.w	82aa2 <_vfiprintf_r+0x66>
   83330:	4650      	mov	r0, sl
   83332:	4659      	mov	r1, fp
   83334:	aa13      	add	r2, sp, #76	; 0x4c
   83336:	f7ff fb45 	bl	829c4 <__sprint_r.part.0>
   8333a:	2800      	cmp	r0, #0
   8333c:	d1d1      	bne.n	832e2 <_vfiprintf_r+0x8a6>
   8333e:	9914      	ldr	r1, [sp, #80]	; 0x50
   83340:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83342:	1c48      	adds	r0, r1, #1
   83344:	464e      	mov	r6, r9
   83346:	e768      	b.n	8321a <_vfiprintf_r+0x7de>
   83348:	2a00      	cmp	r2, #0
   8334a:	f040 80f7 	bne.w	8353c <_vfiprintf_r+0xb00>
   8334e:	9c05      	ldr	r4, [sp, #20]
   83350:	2301      	movs	r3, #1
   83352:	9720      	str	r7, [sp, #128]	; 0x80
   83354:	9421      	str	r4, [sp, #132]	; 0x84
   83356:	9415      	str	r4, [sp, #84]	; 0x54
   83358:	4622      	mov	r2, r4
   8335a:	9314      	str	r3, [sp, #80]	; 0x50
   8335c:	464e      	mov	r6, r9
   8335e:	3608      	adds	r6, #8
   83360:	e741      	b.n	831e6 <_vfiprintf_r+0x7aa>
   83362:	9d04      	ldr	r5, [sp, #16]
   83364:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83368:	ebcb 0405 	rsb	r4, fp, r5
   8336c:	2c00      	cmp	r4, #0
   8336e:	f77f aef7 	ble.w	83160 <_vfiprintf_r+0x724>
   83372:	2c10      	cmp	r4, #16
   83374:	4da6      	ldr	r5, [pc, #664]	; (83610 <_vfiprintf_r+0xbd4>)
   83376:	f340 8170 	ble.w	8365a <_vfiprintf_r+0xc1e>
   8337a:	4629      	mov	r1, r5
   8337c:	f04f 0b10 	mov.w	fp, #16
   83380:	4625      	mov	r5, r4
   83382:	4664      	mov	r4, ip
   83384:	46b4      	mov	ip, r6
   83386:	460e      	mov	r6, r1
   83388:	e006      	b.n	83398 <_vfiprintf_r+0x95c>
   8338a:	1c98      	adds	r0, r3, #2
   8338c:	f10c 0c08 	add.w	ip, ip, #8
   83390:	460b      	mov	r3, r1
   83392:	3d10      	subs	r5, #16
   83394:	2d10      	cmp	r5, #16
   83396:	dd0f      	ble.n	833b8 <_vfiprintf_r+0x97c>
   83398:	1c59      	adds	r1, r3, #1
   8339a:	3210      	adds	r2, #16
   8339c:	2907      	cmp	r1, #7
   8339e:	9215      	str	r2, [sp, #84]	; 0x54
   833a0:	e88c 0840 	stmia.w	ip, {r6, fp}
   833a4:	9114      	str	r1, [sp, #80]	; 0x50
   833a6:	ddf0      	ble.n	8338a <_vfiprintf_r+0x94e>
   833a8:	b9ba      	cbnz	r2, 833da <_vfiprintf_r+0x99e>
   833aa:	3d10      	subs	r5, #16
   833ac:	2d10      	cmp	r5, #16
   833ae:	f04f 0001 	mov.w	r0, #1
   833b2:	4613      	mov	r3, r2
   833b4:	46cc      	mov	ip, r9
   833b6:	dcef      	bgt.n	83398 <_vfiprintf_r+0x95c>
   833b8:	4633      	mov	r3, r6
   833ba:	4666      	mov	r6, ip
   833bc:	46a4      	mov	ip, r4
   833be:	462c      	mov	r4, r5
   833c0:	461d      	mov	r5, r3
   833c2:	4422      	add	r2, r4
   833c4:	2807      	cmp	r0, #7
   833c6:	9215      	str	r2, [sp, #84]	; 0x54
   833c8:	6035      	str	r5, [r6, #0]
   833ca:	6074      	str	r4, [r6, #4]
   833cc:	9014      	str	r0, [sp, #80]	; 0x50
   833ce:	f300 80af 	bgt.w	83530 <_vfiprintf_r+0xaf4>
   833d2:	3608      	adds	r6, #8
   833d4:	1c41      	adds	r1, r0, #1
   833d6:	4603      	mov	r3, r0
   833d8:	e6c2      	b.n	83160 <_vfiprintf_r+0x724>
   833da:	9806      	ldr	r0, [sp, #24]
   833dc:	9902      	ldr	r1, [sp, #8]
   833de:	aa13      	add	r2, sp, #76	; 0x4c
   833e0:	f7ff faf0 	bl	829c4 <__sprint_r.part.0>
   833e4:	2800      	cmp	r0, #0
   833e6:	f47f af7c 	bne.w	832e2 <_vfiprintf_r+0x8a6>
   833ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   833ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   833ee:	1c58      	adds	r0, r3, #1
   833f0:	46cc      	mov	ip, r9
   833f2:	e7ce      	b.n	83392 <_vfiprintf_r+0x956>
   833f4:	2a00      	cmp	r2, #0
   833f6:	d179      	bne.n	834ec <_vfiprintf_r+0xab0>
   833f8:	4619      	mov	r1, r3
   833fa:	464e      	mov	r6, r9
   833fc:	4613      	mov	r3, r2
   833fe:	e69c      	b.n	8313a <_vfiprintf_r+0x6fe>
   83400:	2a00      	cmp	r2, #0
   83402:	f040 8084 	bne.w	8350e <_vfiprintf_r+0xad2>
   83406:	2101      	movs	r1, #1
   83408:	4613      	mov	r3, r2
   8340a:	464e      	mov	r6, r9
   8340c:	e6a4      	b.n	83158 <_vfiprintf_r+0x71c>
   8340e:	464f      	mov	r7, r9
   83410:	e448      	b.n	82ca4 <_vfiprintf_r+0x268>
   83412:	2d00      	cmp	r5, #0
   83414:	bf08      	it	eq
   83416:	2c0a      	cmpeq	r4, #10
   83418:	d246      	bcs.n	834a8 <_vfiprintf_r+0xa6c>
   8341a:	3430      	adds	r4, #48	; 0x30
   8341c:	af30      	add	r7, sp, #192	; 0xc0
   8341e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   83422:	ebc7 0309 	rsb	r3, r7, r9
   83426:	9305      	str	r3, [sp, #20]
   83428:	e43c      	b.n	82ca4 <_vfiprintf_r+0x268>
   8342a:	2302      	movs	r3, #2
   8342c:	e417      	b.n	82c5e <_vfiprintf_r+0x222>
   8342e:	2a00      	cmp	r2, #0
   83430:	f040 80af 	bne.w	83592 <_vfiprintf_r+0xb56>
   83434:	4613      	mov	r3, r2
   83436:	2101      	movs	r1, #1
   83438:	464e      	mov	r6, r9
   8343a:	e66d      	b.n	83118 <_vfiprintf_r+0x6dc>
   8343c:	4644      	mov	r4, r8
   8343e:	f7ff bb58 	b.w	82af2 <_vfiprintf_r+0xb6>
   83442:	9806      	ldr	r0, [sp, #24]
   83444:	9902      	ldr	r1, [sp, #8]
   83446:	aa13      	add	r2, sp, #76	; 0x4c
   83448:	f7ff fabc 	bl	829c4 <__sprint_r.part.0>
   8344c:	2800      	cmp	r0, #0
   8344e:	f47f af48 	bne.w	832e2 <_vfiprintf_r+0x8a6>
   83452:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83454:	464e      	mov	r6, r9
   83456:	e6c6      	b.n	831e6 <_vfiprintf_r+0x7aa>
   83458:	9d08      	ldr	r5, [sp, #32]
   8345a:	682c      	ldr	r4, [r5, #0]
   8345c:	3504      	adds	r5, #4
   8345e:	9508      	str	r5, [sp, #32]
   83460:	2500      	movs	r5, #0
   83462:	f7ff bbfc 	b.w	82c5e <_vfiprintf_r+0x222>
   83466:	9d08      	ldr	r5, [sp, #32]
   83468:	2301      	movs	r3, #1
   8346a:	682c      	ldr	r4, [r5, #0]
   8346c:	3504      	adds	r5, #4
   8346e:	9508      	str	r5, [sp, #32]
   83470:	2500      	movs	r5, #0
   83472:	f7ff bbf4 	b.w	82c5e <_vfiprintf_r+0x222>
   83476:	9d08      	ldr	r5, [sp, #32]
   83478:	682c      	ldr	r4, [r5, #0]
   8347a:	3504      	adds	r5, #4
   8347c:	9508      	str	r5, [sp, #32]
   8347e:	2500      	movs	r5, #0
   83480:	e525      	b.n	82ece <_vfiprintf_r+0x492>
   83482:	9d08      	ldr	r5, [sp, #32]
   83484:	682c      	ldr	r4, [r5, #0]
   83486:	3504      	adds	r5, #4
   83488:	9508      	str	r5, [sp, #32]
   8348a:	17e5      	asrs	r5, r4, #31
   8348c:	4622      	mov	r2, r4
   8348e:	462b      	mov	r3, r5
   83490:	e48e      	b.n	82db0 <_vfiprintf_r+0x374>
   83492:	9806      	ldr	r0, [sp, #24]
   83494:	9902      	ldr	r1, [sp, #8]
   83496:	aa13      	add	r2, sp, #76	; 0x4c
   83498:	f7ff fa94 	bl	829c4 <__sprint_r.part.0>
   8349c:	2800      	cmp	r0, #0
   8349e:	f47f af20 	bne.w	832e2 <_vfiprintf_r+0x8a6>
   834a2:	464e      	mov	r6, r9
   834a4:	f7ff bb9a 	b.w	82bdc <_vfiprintf_r+0x1a0>
   834a8:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   834ac:	9603      	str	r6, [sp, #12]
   834ae:	465e      	mov	r6, fp
   834b0:	46e3      	mov	fp, ip
   834b2:	4620      	mov	r0, r4
   834b4:	4629      	mov	r1, r5
   834b6:	220a      	movs	r2, #10
   834b8:	2300      	movs	r3, #0
   834ba:	f001 fe2f 	bl	8511c <__aeabi_uldivmod>
   834be:	3230      	adds	r2, #48	; 0x30
   834c0:	7032      	strb	r2, [r6, #0]
   834c2:	4620      	mov	r0, r4
   834c4:	4629      	mov	r1, r5
   834c6:	220a      	movs	r2, #10
   834c8:	2300      	movs	r3, #0
   834ca:	f001 fe27 	bl	8511c <__aeabi_uldivmod>
   834ce:	4604      	mov	r4, r0
   834d0:	460d      	mov	r5, r1
   834d2:	ea54 0005 	orrs.w	r0, r4, r5
   834d6:	4637      	mov	r7, r6
   834d8:	f106 36ff 	add.w	r6, r6, #4294967295
   834dc:	d1e9      	bne.n	834b2 <_vfiprintf_r+0xa76>
   834de:	ebc7 0309 	rsb	r3, r7, r9
   834e2:	46dc      	mov	ip, fp
   834e4:	9e03      	ldr	r6, [sp, #12]
   834e6:	9305      	str	r3, [sp, #20]
   834e8:	f7ff bbdc 	b.w	82ca4 <_vfiprintf_r+0x268>
   834ec:	9806      	ldr	r0, [sp, #24]
   834ee:	9902      	ldr	r1, [sp, #8]
   834f0:	aa13      	add	r2, sp, #76	; 0x4c
   834f2:	f8cd c004 	str.w	ip, [sp, #4]
   834f6:	f7ff fa65 	bl	829c4 <__sprint_r.part.0>
   834fa:	f8dd c004 	ldr.w	ip, [sp, #4]
   834fe:	2800      	cmp	r0, #0
   83500:	f47f aeef 	bne.w	832e2 <_vfiprintf_r+0x8a6>
   83504:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83506:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83508:	1c59      	adds	r1, r3, #1
   8350a:	464e      	mov	r6, r9
   8350c:	e615      	b.n	8313a <_vfiprintf_r+0x6fe>
   8350e:	9806      	ldr	r0, [sp, #24]
   83510:	9902      	ldr	r1, [sp, #8]
   83512:	aa13      	add	r2, sp, #76	; 0x4c
   83514:	f8cd c004 	str.w	ip, [sp, #4]
   83518:	f7ff fa54 	bl	829c4 <__sprint_r.part.0>
   8351c:	f8dd c004 	ldr.w	ip, [sp, #4]
   83520:	2800      	cmp	r0, #0
   83522:	f47f aede 	bne.w	832e2 <_vfiprintf_r+0x8a6>
   83526:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83528:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8352a:	1c59      	adds	r1, r3, #1
   8352c:	464e      	mov	r6, r9
   8352e:	e613      	b.n	83158 <_vfiprintf_r+0x71c>
   83530:	2a00      	cmp	r2, #0
   83532:	d156      	bne.n	835e2 <_vfiprintf_r+0xba6>
   83534:	2101      	movs	r1, #1
   83536:	4613      	mov	r3, r2
   83538:	464e      	mov	r6, r9
   8353a:	e611      	b.n	83160 <_vfiprintf_r+0x724>
   8353c:	9806      	ldr	r0, [sp, #24]
   8353e:	9902      	ldr	r1, [sp, #8]
   83540:	aa13      	add	r2, sp, #76	; 0x4c
   83542:	f7ff fa3f 	bl	829c4 <__sprint_r.part.0>
   83546:	2800      	cmp	r0, #0
   83548:	f47f aecb 	bne.w	832e2 <_vfiprintf_r+0x8a6>
   8354c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8354e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83550:	3101      	adds	r1, #1
   83552:	464e      	mov	r6, r9
   83554:	e639      	b.n	831ca <_vfiprintf_r+0x78e>
   83556:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8355a:	4264      	negs	r4, r4
   8355c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   83560:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   83564:	f8cd b01c 	str.w	fp, [sp, #28]
   83568:	f8cd c014 	str.w	ip, [sp, #20]
   8356c:	2301      	movs	r3, #1
   8356e:	f7ff bb7e 	b.w	82c6e <_vfiprintf_r+0x232>
   83572:	f01a 0f10 	tst.w	sl, #16
   83576:	d11d      	bne.n	835b4 <_vfiprintf_r+0xb78>
   83578:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8357c:	d058      	beq.n	83630 <_vfiprintf_r+0xbf4>
   8357e:	9d08      	ldr	r5, [sp, #32]
   83580:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   83584:	682b      	ldr	r3, [r5, #0]
   83586:	3504      	adds	r5, #4
   83588:	9508      	str	r5, [sp, #32]
   8358a:	f8a3 b000 	strh.w	fp, [r3]
   8358e:	f7ff ba88 	b.w	82aa2 <_vfiprintf_r+0x66>
   83592:	9806      	ldr	r0, [sp, #24]
   83594:	9902      	ldr	r1, [sp, #8]
   83596:	aa13      	add	r2, sp, #76	; 0x4c
   83598:	f8cd c004 	str.w	ip, [sp, #4]
   8359c:	f7ff fa12 	bl	829c4 <__sprint_r.part.0>
   835a0:	f8dd c004 	ldr.w	ip, [sp, #4]
   835a4:	2800      	cmp	r0, #0
   835a6:	f47f ae9c 	bne.w	832e2 <_vfiprintf_r+0x8a6>
   835aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   835ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
   835ae:	1c59      	adds	r1, r3, #1
   835b0:	464e      	mov	r6, r9
   835b2:	e5b1      	b.n	83118 <_vfiprintf_r+0x6dc>
   835b4:	f8dd b020 	ldr.w	fp, [sp, #32]
   835b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   835ba:	f8db 3000 	ldr.w	r3, [fp]
   835be:	f10b 0b04 	add.w	fp, fp, #4
   835c2:	f8cd b020 	str.w	fp, [sp, #32]
   835c6:	601c      	str	r4, [r3, #0]
   835c8:	f7ff ba6b 	b.w	82aa2 <_vfiprintf_r+0x66>
   835cc:	9408      	str	r4, [sp, #32]
   835ce:	f7ff f9c9 	bl	82964 <strlen>
   835d2:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   835d6:	9005      	str	r0, [sp, #20]
   835d8:	9407      	str	r4, [sp, #28]
   835da:	f04f 0c00 	mov.w	ip, #0
   835de:	f7ff bb61 	b.w	82ca4 <_vfiprintf_r+0x268>
   835e2:	9806      	ldr	r0, [sp, #24]
   835e4:	9902      	ldr	r1, [sp, #8]
   835e6:	aa13      	add	r2, sp, #76	; 0x4c
   835e8:	f8cd c004 	str.w	ip, [sp, #4]
   835ec:	f7ff f9ea 	bl	829c4 <__sprint_r.part.0>
   835f0:	f8dd c004 	ldr.w	ip, [sp, #4]
   835f4:	2800      	cmp	r0, #0
   835f6:	f47f ae74 	bne.w	832e2 <_vfiprintf_r+0x8a6>
   835fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   835fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   835fe:	1c59      	adds	r1, r3, #1
   83600:	464e      	mov	r6, r9
   83602:	e5ad      	b.n	83160 <_vfiprintf_r+0x724>
   83604:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83606:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83608:	3301      	adds	r3, #1
   8360a:	4d02      	ldr	r5, [pc, #8]	; (83614 <_vfiprintf_r+0xbd8>)
   8360c:	f7ff bb9a 	b.w	82d44 <_vfiprintf_r+0x308>
   83610:	000857b0 	.word	0x000857b0
   83614:	000857c0 	.word	0x000857c0
   83618:	f1bc 0f06 	cmp.w	ip, #6
   8361c:	bf34      	ite	cc
   8361e:	4663      	movcc	r3, ip
   83620:	2306      	movcs	r3, #6
   83622:	9408      	str	r4, [sp, #32]
   83624:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   83628:	9305      	str	r3, [sp, #20]
   8362a:	9403      	str	r4, [sp, #12]
   8362c:	4f16      	ldr	r7, [pc, #88]	; (83688 <_vfiprintf_r+0xc4c>)
   8362e:	e472      	b.n	82f16 <_vfiprintf_r+0x4da>
   83630:	9c08      	ldr	r4, [sp, #32]
   83632:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83634:	6823      	ldr	r3, [r4, #0]
   83636:	3404      	adds	r4, #4
   83638:	9408      	str	r4, [sp, #32]
   8363a:	601d      	str	r5, [r3, #0]
   8363c:	f7ff ba31 	b.w	82aa2 <_vfiprintf_r+0x66>
   83640:	9814      	ldr	r0, [sp, #80]	; 0x50
   83642:	4d12      	ldr	r5, [pc, #72]	; (8368c <_vfiprintf_r+0xc50>)
   83644:	3001      	adds	r0, #1
   83646:	e5fc      	b.n	83242 <_vfiprintf_r+0x806>
   83648:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8364c:	f8cd c014 	str.w	ip, [sp, #20]
   83650:	9507      	str	r5, [sp, #28]
   83652:	9408      	str	r4, [sp, #32]
   83654:	4684      	mov	ip, r0
   83656:	f7ff bb25 	b.w	82ca4 <_vfiprintf_r+0x268>
   8365a:	4608      	mov	r0, r1
   8365c:	e6b1      	b.n	833c2 <_vfiprintf_r+0x986>
   8365e:	46a0      	mov	r8, r4
   83660:	2500      	movs	r5, #0
   83662:	f7ff ba5a 	b.w	82b1a <_vfiprintf_r+0xde>
   83666:	f8dd b020 	ldr.w	fp, [sp, #32]
   8366a:	f898 3001 	ldrb.w	r3, [r8, #1]
   8366e:	f8db 5000 	ldr.w	r5, [fp]
   83672:	f10b 0204 	add.w	r2, fp, #4
   83676:	2d00      	cmp	r5, #0
   83678:	9208      	str	r2, [sp, #32]
   8367a:	46a0      	mov	r8, r4
   8367c:	f6bf aa4b 	bge.w	82b16 <_vfiprintf_r+0xda>
   83680:	f04f 35ff 	mov.w	r5, #4294967295
   83684:	f7ff ba47 	b.w	82b16 <_vfiprintf_r+0xda>
   83688:	000857a8 	.word	0x000857a8
   8368c:	000857c0 	.word	0x000857c0

00083690 <__sbprintf>:
   83690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83694:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   83696:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8369a:	4688      	mov	r8, r1
   8369c:	9719      	str	r7, [sp, #100]	; 0x64
   8369e:	f8d8 701c 	ldr.w	r7, [r8, #28]
   836a2:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   836a6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   836aa:	9707      	str	r7, [sp, #28]
   836ac:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   836b0:	ac1a      	add	r4, sp, #104	; 0x68
   836b2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   836b6:	f02a 0a02 	bic.w	sl, sl, #2
   836ba:	2600      	movs	r6, #0
   836bc:	4669      	mov	r1, sp
   836be:	9400      	str	r4, [sp, #0]
   836c0:	9404      	str	r4, [sp, #16]
   836c2:	9502      	str	r5, [sp, #8]
   836c4:	9505      	str	r5, [sp, #20]
   836c6:	f8ad a00c 	strh.w	sl, [sp, #12]
   836ca:	f8ad 900e 	strh.w	r9, [sp, #14]
   836ce:	9709      	str	r7, [sp, #36]	; 0x24
   836d0:	9606      	str	r6, [sp, #24]
   836d2:	4605      	mov	r5, r0
   836d4:	f7ff f9b2 	bl	82a3c <_vfiprintf_r>
   836d8:	1e04      	subs	r4, r0, #0
   836da:	db07      	blt.n	836ec <__sbprintf+0x5c>
   836dc:	4628      	mov	r0, r5
   836de:	4669      	mov	r1, sp
   836e0:	f000 f92a 	bl	83938 <_fflush_r>
   836e4:	42b0      	cmp	r0, r6
   836e6:	bf18      	it	ne
   836e8:	f04f 34ff 	movne.w	r4, #4294967295
   836ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   836f0:	065b      	lsls	r3, r3, #25
   836f2:	d505      	bpl.n	83700 <__sbprintf+0x70>
   836f4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   836f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   836fc:	f8a8 300c 	strh.w	r3, [r8, #12]
   83700:	4620      	mov	r0, r4
   83702:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   83706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8370a:	bf00      	nop

0008370c <__swsetup_r>:
   8370c:	4b2f      	ldr	r3, [pc, #188]	; (837cc <__swsetup_r+0xc0>)
   8370e:	b570      	push	{r4, r5, r6, lr}
   83710:	4606      	mov	r6, r0
   83712:	6818      	ldr	r0, [r3, #0]
   83714:	460c      	mov	r4, r1
   83716:	b110      	cbz	r0, 8371e <__swsetup_r+0x12>
   83718:	6b82      	ldr	r2, [r0, #56]	; 0x38
   8371a:	2a00      	cmp	r2, #0
   8371c:	d036      	beq.n	8378c <__swsetup_r+0x80>
   8371e:	89a5      	ldrh	r5, [r4, #12]
   83720:	b2ab      	uxth	r3, r5
   83722:	0719      	lsls	r1, r3, #28
   83724:	d50c      	bpl.n	83740 <__swsetup_r+0x34>
   83726:	6922      	ldr	r2, [r4, #16]
   83728:	b1aa      	cbz	r2, 83756 <__swsetup_r+0x4a>
   8372a:	f013 0101 	ands.w	r1, r3, #1
   8372e:	d01e      	beq.n	8376e <__swsetup_r+0x62>
   83730:	6963      	ldr	r3, [r4, #20]
   83732:	2100      	movs	r1, #0
   83734:	425b      	negs	r3, r3
   83736:	61a3      	str	r3, [r4, #24]
   83738:	60a1      	str	r1, [r4, #8]
   8373a:	b1f2      	cbz	r2, 8377a <__swsetup_r+0x6e>
   8373c:	2000      	movs	r0, #0
   8373e:	bd70      	pop	{r4, r5, r6, pc}
   83740:	06da      	lsls	r2, r3, #27
   83742:	d53a      	bpl.n	837ba <__swsetup_r+0xae>
   83744:	075b      	lsls	r3, r3, #29
   83746:	d424      	bmi.n	83792 <__swsetup_r+0x86>
   83748:	6922      	ldr	r2, [r4, #16]
   8374a:	f045 0308 	orr.w	r3, r5, #8
   8374e:	81a3      	strh	r3, [r4, #12]
   83750:	b29b      	uxth	r3, r3
   83752:	2a00      	cmp	r2, #0
   83754:	d1e9      	bne.n	8372a <__swsetup_r+0x1e>
   83756:	f403 7120 	and.w	r1, r3, #640	; 0x280
   8375a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8375e:	d0e4      	beq.n	8372a <__swsetup_r+0x1e>
   83760:	4630      	mov	r0, r6
   83762:	4621      	mov	r1, r4
   83764:	f000 fcce 	bl	84104 <__smakebuf_r>
   83768:	89a3      	ldrh	r3, [r4, #12]
   8376a:	6922      	ldr	r2, [r4, #16]
   8376c:	e7dd      	b.n	8372a <__swsetup_r+0x1e>
   8376e:	0798      	lsls	r0, r3, #30
   83770:	bf58      	it	pl
   83772:	6961      	ldrpl	r1, [r4, #20]
   83774:	60a1      	str	r1, [r4, #8]
   83776:	2a00      	cmp	r2, #0
   83778:	d1e0      	bne.n	8373c <__swsetup_r+0x30>
   8377a:	89a3      	ldrh	r3, [r4, #12]
   8377c:	061a      	lsls	r2, r3, #24
   8377e:	d5dd      	bpl.n	8373c <__swsetup_r+0x30>
   83780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83784:	81a3      	strh	r3, [r4, #12]
   83786:	f04f 30ff 	mov.w	r0, #4294967295
   8378a:	bd70      	pop	{r4, r5, r6, pc}
   8378c:	f000 f8f0 	bl	83970 <__sinit>
   83790:	e7c5      	b.n	8371e <__swsetup_r+0x12>
   83792:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83794:	b149      	cbz	r1, 837aa <__swsetup_r+0x9e>
   83796:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8379a:	4299      	cmp	r1, r3
   8379c:	d003      	beq.n	837a6 <__swsetup_r+0x9a>
   8379e:	4630      	mov	r0, r6
   837a0:	f000 fa2a 	bl	83bf8 <_free_r>
   837a4:	89a5      	ldrh	r5, [r4, #12]
   837a6:	2300      	movs	r3, #0
   837a8:	6323      	str	r3, [r4, #48]	; 0x30
   837aa:	6922      	ldr	r2, [r4, #16]
   837ac:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   837b0:	2100      	movs	r1, #0
   837b2:	b2ad      	uxth	r5, r5
   837b4:	6022      	str	r2, [r4, #0]
   837b6:	6061      	str	r1, [r4, #4]
   837b8:	e7c7      	b.n	8374a <__swsetup_r+0x3e>
   837ba:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   837be:	2309      	movs	r3, #9
   837c0:	6033      	str	r3, [r6, #0]
   837c2:	f04f 30ff 	mov.w	r0, #4294967295
   837c6:	81a5      	strh	r5, [r4, #12]
   837c8:	bd70      	pop	{r4, r5, r6, pc}
   837ca:	bf00      	nop
   837cc:	20070570 	.word	0x20070570

000837d0 <register_fini>:
   837d0:	4b02      	ldr	r3, [pc, #8]	; (837dc <register_fini+0xc>)
   837d2:	b113      	cbz	r3, 837da <register_fini+0xa>
   837d4:	4802      	ldr	r0, [pc, #8]	; (837e0 <register_fini+0x10>)
   837d6:	f000 b805 	b.w	837e4 <atexit>
   837da:	4770      	bx	lr
   837dc:	00000000 	.word	0x00000000
   837e0:	00083a6d 	.word	0x00083a6d

000837e4 <atexit>:
   837e4:	4601      	mov	r1, r0
   837e6:	2000      	movs	r0, #0
   837e8:	4602      	mov	r2, r0
   837ea:	4603      	mov	r3, r0
   837ec:	f001 bb9a 	b.w	84f24 <__register_exitproc>

000837f0 <__sflush_r>:
   837f0:	898b      	ldrh	r3, [r1, #12]
   837f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   837f6:	b29a      	uxth	r2, r3
   837f8:	460d      	mov	r5, r1
   837fa:	0711      	lsls	r1, r2, #28
   837fc:	4680      	mov	r8, r0
   837fe:	d43c      	bmi.n	8387a <__sflush_r+0x8a>
   83800:	686a      	ldr	r2, [r5, #4]
   83802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83806:	2a00      	cmp	r2, #0
   83808:	81ab      	strh	r3, [r5, #12]
   8380a:	dd59      	ble.n	838c0 <__sflush_r+0xd0>
   8380c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8380e:	2c00      	cmp	r4, #0
   83810:	d04b      	beq.n	838aa <__sflush_r+0xba>
   83812:	b29b      	uxth	r3, r3
   83814:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   83818:	2100      	movs	r1, #0
   8381a:	b292      	uxth	r2, r2
   8381c:	f8d8 6000 	ldr.w	r6, [r8]
   83820:	f8c8 1000 	str.w	r1, [r8]
   83824:	2a00      	cmp	r2, #0
   83826:	d04f      	beq.n	838c8 <__sflush_r+0xd8>
   83828:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8382a:	075f      	lsls	r7, r3, #29
   8382c:	d505      	bpl.n	8383a <__sflush_r+0x4a>
   8382e:	6869      	ldr	r1, [r5, #4]
   83830:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83832:	1a52      	subs	r2, r2, r1
   83834:	b10b      	cbz	r3, 8383a <__sflush_r+0x4a>
   83836:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83838:	1ad2      	subs	r2, r2, r3
   8383a:	4640      	mov	r0, r8
   8383c:	69e9      	ldr	r1, [r5, #28]
   8383e:	2300      	movs	r3, #0
   83840:	47a0      	blx	r4
   83842:	1c44      	adds	r4, r0, #1
   83844:	d04a      	beq.n	838dc <__sflush_r+0xec>
   83846:	89ab      	ldrh	r3, [r5, #12]
   83848:	692a      	ldr	r2, [r5, #16]
   8384a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8384e:	b29b      	uxth	r3, r3
   83850:	2100      	movs	r1, #0
   83852:	602a      	str	r2, [r5, #0]
   83854:	04da      	lsls	r2, r3, #19
   83856:	81ab      	strh	r3, [r5, #12]
   83858:	6069      	str	r1, [r5, #4]
   8385a:	d44c      	bmi.n	838f6 <__sflush_r+0x106>
   8385c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8385e:	f8c8 6000 	str.w	r6, [r8]
   83862:	b311      	cbz	r1, 838aa <__sflush_r+0xba>
   83864:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83868:	4299      	cmp	r1, r3
   8386a:	d002      	beq.n	83872 <__sflush_r+0x82>
   8386c:	4640      	mov	r0, r8
   8386e:	f000 f9c3 	bl	83bf8 <_free_r>
   83872:	2000      	movs	r0, #0
   83874:	6328      	str	r0, [r5, #48]	; 0x30
   83876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8387a:	692e      	ldr	r6, [r5, #16]
   8387c:	b1ae      	cbz	r6, 838aa <__sflush_r+0xba>
   8387e:	0791      	lsls	r1, r2, #30
   83880:	682c      	ldr	r4, [r5, #0]
   83882:	bf0c      	ite	eq
   83884:	696b      	ldreq	r3, [r5, #20]
   83886:	2300      	movne	r3, #0
   83888:	602e      	str	r6, [r5, #0]
   8388a:	1ba4      	subs	r4, r4, r6
   8388c:	60ab      	str	r3, [r5, #8]
   8388e:	e00a      	b.n	838a6 <__sflush_r+0xb6>
   83890:	4632      	mov	r2, r6
   83892:	4623      	mov	r3, r4
   83894:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83896:	4640      	mov	r0, r8
   83898:	69e9      	ldr	r1, [r5, #28]
   8389a:	47b8      	blx	r7
   8389c:	2800      	cmp	r0, #0
   8389e:	ebc0 0404 	rsb	r4, r0, r4
   838a2:	4406      	add	r6, r0
   838a4:	dd04      	ble.n	838b0 <__sflush_r+0xc0>
   838a6:	2c00      	cmp	r4, #0
   838a8:	dcf2      	bgt.n	83890 <__sflush_r+0xa0>
   838aa:	2000      	movs	r0, #0
   838ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   838b0:	89ab      	ldrh	r3, [r5, #12]
   838b2:	f04f 30ff 	mov.w	r0, #4294967295
   838b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   838ba:	81ab      	strh	r3, [r5, #12]
   838bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   838c0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   838c2:	2a00      	cmp	r2, #0
   838c4:	dca2      	bgt.n	8380c <__sflush_r+0x1c>
   838c6:	e7f0      	b.n	838aa <__sflush_r+0xba>
   838c8:	2301      	movs	r3, #1
   838ca:	4640      	mov	r0, r8
   838cc:	69e9      	ldr	r1, [r5, #28]
   838ce:	47a0      	blx	r4
   838d0:	1c43      	adds	r3, r0, #1
   838d2:	4602      	mov	r2, r0
   838d4:	d01e      	beq.n	83914 <__sflush_r+0x124>
   838d6:	89ab      	ldrh	r3, [r5, #12]
   838d8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   838da:	e7a6      	b.n	8382a <__sflush_r+0x3a>
   838dc:	f8d8 3000 	ldr.w	r3, [r8]
   838e0:	b95b      	cbnz	r3, 838fa <__sflush_r+0x10a>
   838e2:	89aa      	ldrh	r2, [r5, #12]
   838e4:	6929      	ldr	r1, [r5, #16]
   838e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   838ea:	b292      	uxth	r2, r2
   838ec:	606b      	str	r3, [r5, #4]
   838ee:	04d3      	lsls	r3, r2, #19
   838f0:	81aa      	strh	r2, [r5, #12]
   838f2:	6029      	str	r1, [r5, #0]
   838f4:	d5b2      	bpl.n	8385c <__sflush_r+0x6c>
   838f6:	6528      	str	r0, [r5, #80]	; 0x50
   838f8:	e7b0      	b.n	8385c <__sflush_r+0x6c>
   838fa:	2b1d      	cmp	r3, #29
   838fc:	d001      	beq.n	83902 <__sflush_r+0x112>
   838fe:	2b16      	cmp	r3, #22
   83900:	d113      	bne.n	8392a <__sflush_r+0x13a>
   83902:	89a9      	ldrh	r1, [r5, #12]
   83904:	692b      	ldr	r3, [r5, #16]
   83906:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   8390a:	2200      	movs	r2, #0
   8390c:	81a9      	strh	r1, [r5, #12]
   8390e:	602b      	str	r3, [r5, #0]
   83910:	606a      	str	r2, [r5, #4]
   83912:	e7a3      	b.n	8385c <__sflush_r+0x6c>
   83914:	f8d8 3000 	ldr.w	r3, [r8]
   83918:	2b00      	cmp	r3, #0
   8391a:	d0dc      	beq.n	838d6 <__sflush_r+0xe6>
   8391c:	2b1d      	cmp	r3, #29
   8391e:	d001      	beq.n	83924 <__sflush_r+0x134>
   83920:	2b16      	cmp	r3, #22
   83922:	d1c5      	bne.n	838b0 <__sflush_r+0xc0>
   83924:	f8c8 6000 	str.w	r6, [r8]
   83928:	e7bf      	b.n	838aa <__sflush_r+0xba>
   8392a:	89ab      	ldrh	r3, [r5, #12]
   8392c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83930:	81ab      	strh	r3, [r5, #12]
   83932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83936:	bf00      	nop

00083938 <_fflush_r>:
   83938:	b510      	push	{r4, lr}
   8393a:	4604      	mov	r4, r0
   8393c:	b082      	sub	sp, #8
   8393e:	b108      	cbz	r0, 83944 <_fflush_r+0xc>
   83940:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83942:	b153      	cbz	r3, 8395a <_fflush_r+0x22>
   83944:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   83948:	b908      	cbnz	r0, 8394e <_fflush_r+0x16>
   8394a:	b002      	add	sp, #8
   8394c:	bd10      	pop	{r4, pc}
   8394e:	4620      	mov	r0, r4
   83950:	b002      	add	sp, #8
   83952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83956:	f7ff bf4b 	b.w	837f0 <__sflush_r>
   8395a:	9101      	str	r1, [sp, #4]
   8395c:	f000 f808 	bl	83970 <__sinit>
   83960:	9901      	ldr	r1, [sp, #4]
   83962:	e7ef      	b.n	83944 <_fflush_r+0xc>

00083964 <_cleanup_r>:
   83964:	4901      	ldr	r1, [pc, #4]	; (8396c <_cleanup_r+0x8>)
   83966:	f000 bb9f 	b.w	840a8 <_fwalk>
   8396a:	bf00      	nop
   8396c:	00085071 	.word	0x00085071

00083970 <__sinit>:
   83970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83974:	6b84      	ldr	r4, [r0, #56]	; 0x38
   83976:	b083      	sub	sp, #12
   83978:	4607      	mov	r7, r0
   8397a:	2c00      	cmp	r4, #0
   8397c:	d165      	bne.n	83a4a <__sinit+0xda>
   8397e:	687d      	ldr	r5, [r7, #4]
   83980:	4833      	ldr	r0, [pc, #204]	; (83a50 <__sinit+0xe0>)
   83982:	2304      	movs	r3, #4
   83984:	2103      	movs	r1, #3
   83986:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8398a:	63f8      	str	r0, [r7, #60]	; 0x3c
   8398c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   83990:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   83994:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   83998:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8399c:	81ab      	strh	r3, [r5, #12]
   8399e:	602c      	str	r4, [r5, #0]
   839a0:	606c      	str	r4, [r5, #4]
   839a2:	60ac      	str	r4, [r5, #8]
   839a4:	666c      	str	r4, [r5, #100]	; 0x64
   839a6:	81ec      	strh	r4, [r5, #14]
   839a8:	612c      	str	r4, [r5, #16]
   839aa:	616c      	str	r4, [r5, #20]
   839ac:	61ac      	str	r4, [r5, #24]
   839ae:	4621      	mov	r1, r4
   839b0:	2208      	movs	r2, #8
   839b2:	f7fe ff05 	bl	827c0 <memset>
   839b6:	f8df b09c 	ldr.w	fp, [pc, #156]	; 83a54 <__sinit+0xe4>
   839ba:	68be      	ldr	r6, [r7, #8]
   839bc:	f8df a098 	ldr.w	sl, [pc, #152]	; 83a58 <__sinit+0xe8>
   839c0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83a5c <__sinit+0xec>
   839c4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83a60 <__sinit+0xf0>
   839c8:	2301      	movs	r3, #1
   839ca:	2209      	movs	r2, #9
   839cc:	61ed      	str	r5, [r5, #28]
   839ce:	f8c5 b020 	str.w	fp, [r5, #32]
   839d2:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   839d6:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   839da:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   839de:	4621      	mov	r1, r4
   839e0:	81f3      	strh	r3, [r6, #14]
   839e2:	81b2      	strh	r2, [r6, #12]
   839e4:	6034      	str	r4, [r6, #0]
   839e6:	6074      	str	r4, [r6, #4]
   839e8:	60b4      	str	r4, [r6, #8]
   839ea:	6674      	str	r4, [r6, #100]	; 0x64
   839ec:	6134      	str	r4, [r6, #16]
   839ee:	6174      	str	r4, [r6, #20]
   839f0:	61b4      	str	r4, [r6, #24]
   839f2:	2208      	movs	r2, #8
   839f4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   839f8:	9301      	str	r3, [sp, #4]
   839fa:	f7fe fee1 	bl	827c0 <memset>
   839fe:	68fd      	ldr	r5, [r7, #12]
   83a00:	2012      	movs	r0, #18
   83a02:	2202      	movs	r2, #2
   83a04:	61f6      	str	r6, [r6, #28]
   83a06:	f8c6 b020 	str.w	fp, [r6, #32]
   83a0a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   83a0e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   83a12:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   83a16:	4621      	mov	r1, r4
   83a18:	81a8      	strh	r0, [r5, #12]
   83a1a:	81ea      	strh	r2, [r5, #14]
   83a1c:	602c      	str	r4, [r5, #0]
   83a1e:	606c      	str	r4, [r5, #4]
   83a20:	60ac      	str	r4, [r5, #8]
   83a22:	666c      	str	r4, [r5, #100]	; 0x64
   83a24:	612c      	str	r4, [r5, #16]
   83a26:	616c      	str	r4, [r5, #20]
   83a28:	61ac      	str	r4, [r5, #24]
   83a2a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83a2e:	2208      	movs	r2, #8
   83a30:	f7fe fec6 	bl	827c0 <memset>
   83a34:	9b01      	ldr	r3, [sp, #4]
   83a36:	61ed      	str	r5, [r5, #28]
   83a38:	f8c5 b020 	str.w	fp, [r5, #32]
   83a3c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83a40:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83a44:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83a48:	63bb      	str	r3, [r7, #56]	; 0x38
   83a4a:	b003      	add	sp, #12
   83a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83a50:	00083965 	.word	0x00083965
   83a54:	00084d65 	.word	0x00084d65
   83a58:	00084d89 	.word	0x00084d89
   83a5c:	00084dc1 	.word	0x00084dc1
   83a60:	00084de1 	.word	0x00084de1

00083a64 <__sfp_lock_acquire>:
   83a64:	4770      	bx	lr
   83a66:	bf00      	nop

00083a68 <__sfp_lock_release>:
   83a68:	4770      	bx	lr
   83a6a:	bf00      	nop

00083a6c <__libc_fini_array>:
   83a6c:	b538      	push	{r3, r4, r5, lr}
   83a6e:	4d09      	ldr	r5, [pc, #36]	; (83a94 <__libc_fini_array+0x28>)
   83a70:	4c09      	ldr	r4, [pc, #36]	; (83a98 <__libc_fini_array+0x2c>)
   83a72:	1b64      	subs	r4, r4, r5
   83a74:	10a4      	asrs	r4, r4, #2
   83a76:	bf18      	it	ne
   83a78:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83a7c:	d005      	beq.n	83a8a <__libc_fini_array+0x1e>
   83a7e:	3c01      	subs	r4, #1
   83a80:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83a84:	4798      	blx	r3
   83a86:	2c00      	cmp	r4, #0
   83a88:	d1f9      	bne.n	83a7e <__libc_fini_array+0x12>
   83a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83a8e:	f001 bea9 	b.w	857e4 <_fini>
   83a92:	bf00      	nop
   83a94:	000857f0 	.word	0x000857f0
   83a98:	000857f4 	.word	0x000857f4

00083a9c <_fputwc_r>:
   83a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83aa0:	8993      	ldrh	r3, [r2, #12]
   83aa2:	460f      	mov	r7, r1
   83aa4:	0499      	lsls	r1, r3, #18
   83aa6:	b082      	sub	sp, #8
   83aa8:	4614      	mov	r4, r2
   83aaa:	4680      	mov	r8, r0
   83aac:	d406      	bmi.n	83abc <_fputwc_r+0x20>
   83aae:	6e52      	ldr	r2, [r2, #100]	; 0x64
   83ab0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83ab8:	81a3      	strh	r3, [r4, #12]
   83aba:	6662      	str	r2, [r4, #100]	; 0x64
   83abc:	f000 fb1c 	bl	840f8 <__locale_mb_cur_max>
   83ac0:	2801      	cmp	r0, #1
   83ac2:	d03e      	beq.n	83b42 <_fputwc_r+0xa6>
   83ac4:	463a      	mov	r2, r7
   83ac6:	4640      	mov	r0, r8
   83ac8:	a901      	add	r1, sp, #4
   83aca:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83ace:	f001 f9df 	bl	84e90 <_wcrtomb_r>
   83ad2:	1c42      	adds	r2, r0, #1
   83ad4:	4606      	mov	r6, r0
   83ad6:	d02d      	beq.n	83b34 <_fputwc_r+0x98>
   83ad8:	2800      	cmp	r0, #0
   83ada:	d03a      	beq.n	83b52 <_fputwc_r+0xb6>
   83adc:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83ae0:	2500      	movs	r5, #0
   83ae2:	e009      	b.n	83af8 <_fputwc_r+0x5c>
   83ae4:	6823      	ldr	r3, [r4, #0]
   83ae6:	7019      	strb	r1, [r3, #0]
   83ae8:	6823      	ldr	r3, [r4, #0]
   83aea:	3301      	adds	r3, #1
   83aec:	6023      	str	r3, [r4, #0]
   83aee:	3501      	adds	r5, #1
   83af0:	42b5      	cmp	r5, r6
   83af2:	d22e      	bcs.n	83b52 <_fputwc_r+0xb6>
   83af4:	ab01      	add	r3, sp, #4
   83af6:	5ce9      	ldrb	r1, [r5, r3]
   83af8:	68a3      	ldr	r3, [r4, #8]
   83afa:	3b01      	subs	r3, #1
   83afc:	2b00      	cmp	r3, #0
   83afe:	60a3      	str	r3, [r4, #8]
   83b00:	daf0      	bge.n	83ae4 <_fputwc_r+0x48>
   83b02:	69a2      	ldr	r2, [r4, #24]
   83b04:	4293      	cmp	r3, r2
   83b06:	db06      	blt.n	83b16 <_fputwc_r+0x7a>
   83b08:	6823      	ldr	r3, [r4, #0]
   83b0a:	7019      	strb	r1, [r3, #0]
   83b0c:	6823      	ldr	r3, [r4, #0]
   83b0e:	7819      	ldrb	r1, [r3, #0]
   83b10:	3301      	adds	r3, #1
   83b12:	290a      	cmp	r1, #10
   83b14:	d1ea      	bne.n	83aec <_fputwc_r+0x50>
   83b16:	4640      	mov	r0, r8
   83b18:	4622      	mov	r2, r4
   83b1a:	f001 f965 	bl	84de8 <__swbuf_r>
   83b1e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   83b22:	4258      	negs	r0, r3
   83b24:	4158      	adcs	r0, r3
   83b26:	2800      	cmp	r0, #0
   83b28:	d0e1      	beq.n	83aee <_fputwc_r+0x52>
   83b2a:	f04f 30ff 	mov.w	r0, #4294967295
   83b2e:	b002      	add	sp, #8
   83b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b34:	89a3      	ldrh	r3, [r4, #12]
   83b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83b3a:	81a3      	strh	r3, [r4, #12]
   83b3c:	b002      	add	sp, #8
   83b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b42:	1e7b      	subs	r3, r7, #1
   83b44:	2bfe      	cmp	r3, #254	; 0xfe
   83b46:	d8bd      	bhi.n	83ac4 <_fputwc_r+0x28>
   83b48:	b2f9      	uxtb	r1, r7
   83b4a:	4606      	mov	r6, r0
   83b4c:	f88d 1004 	strb.w	r1, [sp, #4]
   83b50:	e7c6      	b.n	83ae0 <_fputwc_r+0x44>
   83b52:	4638      	mov	r0, r7
   83b54:	b002      	add	sp, #8
   83b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b5a:	bf00      	nop

00083b5c <_malloc_trim_r>:
   83b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b5e:	4d23      	ldr	r5, [pc, #140]	; (83bec <_malloc_trim_r+0x90>)
   83b60:	460f      	mov	r7, r1
   83b62:	4604      	mov	r4, r0
   83b64:	f000 ff08 	bl	84978 <__malloc_lock>
   83b68:	68ab      	ldr	r3, [r5, #8]
   83b6a:	685e      	ldr	r6, [r3, #4]
   83b6c:	f026 0603 	bic.w	r6, r6, #3
   83b70:	1bf1      	subs	r1, r6, r7
   83b72:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   83b76:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83b7a:	f021 010f 	bic.w	r1, r1, #15
   83b7e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   83b82:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   83b86:	db07      	blt.n	83b98 <_malloc_trim_r+0x3c>
   83b88:	4620      	mov	r0, r4
   83b8a:	2100      	movs	r1, #0
   83b8c:	f001 f8d8 	bl	84d40 <_sbrk_r>
   83b90:	68ab      	ldr	r3, [r5, #8]
   83b92:	4433      	add	r3, r6
   83b94:	4298      	cmp	r0, r3
   83b96:	d004      	beq.n	83ba2 <_malloc_trim_r+0x46>
   83b98:	4620      	mov	r0, r4
   83b9a:	f000 feef 	bl	8497c <__malloc_unlock>
   83b9e:	2000      	movs	r0, #0
   83ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ba2:	4620      	mov	r0, r4
   83ba4:	4279      	negs	r1, r7
   83ba6:	f001 f8cb 	bl	84d40 <_sbrk_r>
   83baa:	3001      	adds	r0, #1
   83bac:	d00d      	beq.n	83bca <_malloc_trim_r+0x6e>
   83bae:	4b10      	ldr	r3, [pc, #64]	; (83bf0 <_malloc_trim_r+0x94>)
   83bb0:	68aa      	ldr	r2, [r5, #8]
   83bb2:	6819      	ldr	r1, [r3, #0]
   83bb4:	1bf6      	subs	r6, r6, r7
   83bb6:	f046 0601 	orr.w	r6, r6, #1
   83bba:	4620      	mov	r0, r4
   83bbc:	1bc9      	subs	r1, r1, r7
   83bbe:	6056      	str	r6, [r2, #4]
   83bc0:	6019      	str	r1, [r3, #0]
   83bc2:	f000 fedb 	bl	8497c <__malloc_unlock>
   83bc6:	2001      	movs	r0, #1
   83bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83bca:	4620      	mov	r0, r4
   83bcc:	2100      	movs	r1, #0
   83bce:	f001 f8b7 	bl	84d40 <_sbrk_r>
   83bd2:	68ab      	ldr	r3, [r5, #8]
   83bd4:	1ac2      	subs	r2, r0, r3
   83bd6:	2a0f      	cmp	r2, #15
   83bd8:	ddde      	ble.n	83b98 <_malloc_trim_r+0x3c>
   83bda:	4d06      	ldr	r5, [pc, #24]	; (83bf4 <_malloc_trim_r+0x98>)
   83bdc:	4904      	ldr	r1, [pc, #16]	; (83bf0 <_malloc_trim_r+0x94>)
   83bde:	682d      	ldr	r5, [r5, #0]
   83be0:	f042 0201 	orr.w	r2, r2, #1
   83be4:	1b40      	subs	r0, r0, r5
   83be6:	605a      	str	r2, [r3, #4]
   83be8:	6008      	str	r0, [r1, #0]
   83bea:	e7d5      	b.n	83b98 <_malloc_trim_r+0x3c>
   83bec:	20070598 	.word	0x20070598
   83bf0:	20070af0 	.word	0x20070af0
   83bf4:	200709a4 	.word	0x200709a4

00083bf8 <_free_r>:
   83bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83bfc:	460d      	mov	r5, r1
   83bfe:	4606      	mov	r6, r0
   83c00:	2900      	cmp	r1, #0
   83c02:	d055      	beq.n	83cb0 <_free_r+0xb8>
   83c04:	f000 feb8 	bl	84978 <__malloc_lock>
   83c08:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83c0c:	f8df c170 	ldr.w	ip, [pc, #368]	; 83d80 <_free_r+0x188>
   83c10:	f1a5 0408 	sub.w	r4, r5, #8
   83c14:	f021 0301 	bic.w	r3, r1, #1
   83c18:	18e2      	adds	r2, r4, r3
   83c1a:	f8dc 0008 	ldr.w	r0, [ip, #8]
   83c1e:	6857      	ldr	r7, [r2, #4]
   83c20:	4290      	cmp	r0, r2
   83c22:	f027 0703 	bic.w	r7, r7, #3
   83c26:	d068      	beq.n	83cfa <_free_r+0x102>
   83c28:	f011 0101 	ands.w	r1, r1, #1
   83c2c:	6057      	str	r7, [r2, #4]
   83c2e:	d032      	beq.n	83c96 <_free_r+0x9e>
   83c30:	2100      	movs	r1, #0
   83c32:	19d0      	adds	r0, r2, r7
   83c34:	6840      	ldr	r0, [r0, #4]
   83c36:	07c0      	lsls	r0, r0, #31
   83c38:	d406      	bmi.n	83c48 <_free_r+0x50>
   83c3a:	443b      	add	r3, r7
   83c3c:	6890      	ldr	r0, [r2, #8]
   83c3e:	2900      	cmp	r1, #0
   83c40:	d04d      	beq.n	83cde <_free_r+0xe6>
   83c42:	68d2      	ldr	r2, [r2, #12]
   83c44:	60c2      	str	r2, [r0, #12]
   83c46:	6090      	str	r0, [r2, #8]
   83c48:	f043 0201 	orr.w	r2, r3, #1
   83c4c:	6062      	str	r2, [r4, #4]
   83c4e:	50e3      	str	r3, [r4, r3]
   83c50:	b9e1      	cbnz	r1, 83c8c <_free_r+0x94>
   83c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83c56:	d32d      	bcc.n	83cb4 <_free_r+0xbc>
   83c58:	0a5a      	lsrs	r2, r3, #9
   83c5a:	2a04      	cmp	r2, #4
   83c5c:	d869      	bhi.n	83d32 <_free_r+0x13a>
   83c5e:	0998      	lsrs	r0, r3, #6
   83c60:	3038      	adds	r0, #56	; 0x38
   83c62:	0041      	lsls	r1, r0, #1
   83c64:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   83c68:	f8dc 2008 	ldr.w	r2, [ip, #8]
   83c6c:	4944      	ldr	r1, [pc, #272]	; (83d80 <_free_r+0x188>)
   83c6e:	4562      	cmp	r2, ip
   83c70:	d065      	beq.n	83d3e <_free_r+0x146>
   83c72:	6851      	ldr	r1, [r2, #4]
   83c74:	f021 0103 	bic.w	r1, r1, #3
   83c78:	428b      	cmp	r3, r1
   83c7a:	d202      	bcs.n	83c82 <_free_r+0x8a>
   83c7c:	6892      	ldr	r2, [r2, #8]
   83c7e:	4594      	cmp	ip, r2
   83c80:	d1f7      	bne.n	83c72 <_free_r+0x7a>
   83c82:	68d3      	ldr	r3, [r2, #12]
   83c84:	60e3      	str	r3, [r4, #12]
   83c86:	60a2      	str	r2, [r4, #8]
   83c88:	609c      	str	r4, [r3, #8]
   83c8a:	60d4      	str	r4, [r2, #12]
   83c8c:	4630      	mov	r0, r6
   83c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83c92:	f000 be73 	b.w	8497c <__malloc_unlock>
   83c96:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83c9a:	f10c 0808 	add.w	r8, ip, #8
   83c9e:	1b64      	subs	r4, r4, r5
   83ca0:	68a0      	ldr	r0, [r4, #8]
   83ca2:	442b      	add	r3, r5
   83ca4:	4540      	cmp	r0, r8
   83ca6:	d042      	beq.n	83d2e <_free_r+0x136>
   83ca8:	68e5      	ldr	r5, [r4, #12]
   83caa:	60c5      	str	r5, [r0, #12]
   83cac:	60a8      	str	r0, [r5, #8]
   83cae:	e7c0      	b.n	83c32 <_free_r+0x3a>
   83cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83cb4:	08db      	lsrs	r3, r3, #3
   83cb6:	109a      	asrs	r2, r3, #2
   83cb8:	2001      	movs	r0, #1
   83cba:	4090      	lsls	r0, r2
   83cbc:	f8dc 1004 	ldr.w	r1, [ip, #4]
   83cc0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   83cc4:	689a      	ldr	r2, [r3, #8]
   83cc6:	4301      	orrs	r1, r0
   83cc8:	60a2      	str	r2, [r4, #8]
   83cca:	60e3      	str	r3, [r4, #12]
   83ccc:	f8cc 1004 	str.w	r1, [ip, #4]
   83cd0:	4630      	mov	r0, r6
   83cd2:	609c      	str	r4, [r3, #8]
   83cd4:	60d4      	str	r4, [r2, #12]
   83cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83cda:	f000 be4f 	b.w	8497c <__malloc_unlock>
   83cde:	4d29      	ldr	r5, [pc, #164]	; (83d84 <_free_r+0x18c>)
   83ce0:	42a8      	cmp	r0, r5
   83ce2:	d1ae      	bne.n	83c42 <_free_r+0x4a>
   83ce4:	f043 0201 	orr.w	r2, r3, #1
   83ce8:	f8cc 4014 	str.w	r4, [ip, #20]
   83cec:	f8cc 4010 	str.w	r4, [ip, #16]
   83cf0:	60e0      	str	r0, [r4, #12]
   83cf2:	60a0      	str	r0, [r4, #8]
   83cf4:	6062      	str	r2, [r4, #4]
   83cf6:	50e3      	str	r3, [r4, r3]
   83cf8:	e7c8      	b.n	83c8c <_free_r+0x94>
   83cfa:	441f      	add	r7, r3
   83cfc:	07cb      	lsls	r3, r1, #31
   83cfe:	d407      	bmi.n	83d10 <_free_r+0x118>
   83d00:	f855 1c08 	ldr.w	r1, [r5, #-8]
   83d04:	1a64      	subs	r4, r4, r1
   83d06:	68e3      	ldr	r3, [r4, #12]
   83d08:	68a2      	ldr	r2, [r4, #8]
   83d0a:	440f      	add	r7, r1
   83d0c:	60d3      	str	r3, [r2, #12]
   83d0e:	609a      	str	r2, [r3, #8]
   83d10:	4b1d      	ldr	r3, [pc, #116]	; (83d88 <_free_r+0x190>)
   83d12:	f047 0201 	orr.w	r2, r7, #1
   83d16:	681b      	ldr	r3, [r3, #0]
   83d18:	6062      	str	r2, [r4, #4]
   83d1a:	429f      	cmp	r7, r3
   83d1c:	f8cc 4008 	str.w	r4, [ip, #8]
   83d20:	d3b4      	bcc.n	83c8c <_free_r+0x94>
   83d22:	4b1a      	ldr	r3, [pc, #104]	; (83d8c <_free_r+0x194>)
   83d24:	4630      	mov	r0, r6
   83d26:	6819      	ldr	r1, [r3, #0]
   83d28:	f7ff ff18 	bl	83b5c <_malloc_trim_r>
   83d2c:	e7ae      	b.n	83c8c <_free_r+0x94>
   83d2e:	2101      	movs	r1, #1
   83d30:	e77f      	b.n	83c32 <_free_r+0x3a>
   83d32:	2a14      	cmp	r2, #20
   83d34:	d80b      	bhi.n	83d4e <_free_r+0x156>
   83d36:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   83d3a:	0041      	lsls	r1, r0, #1
   83d3c:	e792      	b.n	83c64 <_free_r+0x6c>
   83d3e:	1080      	asrs	r0, r0, #2
   83d40:	2501      	movs	r5, #1
   83d42:	4085      	lsls	r5, r0
   83d44:	6848      	ldr	r0, [r1, #4]
   83d46:	4613      	mov	r3, r2
   83d48:	4328      	orrs	r0, r5
   83d4a:	6048      	str	r0, [r1, #4]
   83d4c:	e79a      	b.n	83c84 <_free_r+0x8c>
   83d4e:	2a54      	cmp	r2, #84	; 0x54
   83d50:	d803      	bhi.n	83d5a <_free_r+0x162>
   83d52:	0b18      	lsrs	r0, r3, #12
   83d54:	306e      	adds	r0, #110	; 0x6e
   83d56:	0041      	lsls	r1, r0, #1
   83d58:	e784      	b.n	83c64 <_free_r+0x6c>
   83d5a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83d5e:	d803      	bhi.n	83d68 <_free_r+0x170>
   83d60:	0bd8      	lsrs	r0, r3, #15
   83d62:	3077      	adds	r0, #119	; 0x77
   83d64:	0041      	lsls	r1, r0, #1
   83d66:	e77d      	b.n	83c64 <_free_r+0x6c>
   83d68:	f240 5154 	movw	r1, #1364	; 0x554
   83d6c:	428a      	cmp	r2, r1
   83d6e:	d803      	bhi.n	83d78 <_free_r+0x180>
   83d70:	0c98      	lsrs	r0, r3, #18
   83d72:	307c      	adds	r0, #124	; 0x7c
   83d74:	0041      	lsls	r1, r0, #1
   83d76:	e775      	b.n	83c64 <_free_r+0x6c>
   83d78:	21fc      	movs	r1, #252	; 0xfc
   83d7a:	207e      	movs	r0, #126	; 0x7e
   83d7c:	e772      	b.n	83c64 <_free_r+0x6c>
   83d7e:	bf00      	nop
   83d80:	20070598 	.word	0x20070598
   83d84:	200705a0 	.word	0x200705a0
   83d88:	200709a0 	.word	0x200709a0
   83d8c:	20070aec 	.word	0x20070aec

00083d90 <__sfvwrite_r>:
   83d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d94:	6893      	ldr	r3, [r2, #8]
   83d96:	b083      	sub	sp, #12
   83d98:	4616      	mov	r6, r2
   83d9a:	4681      	mov	r9, r0
   83d9c:	460c      	mov	r4, r1
   83d9e:	b32b      	cbz	r3, 83dec <__sfvwrite_r+0x5c>
   83da0:	898b      	ldrh	r3, [r1, #12]
   83da2:	0719      	lsls	r1, r3, #28
   83da4:	d526      	bpl.n	83df4 <__sfvwrite_r+0x64>
   83da6:	6922      	ldr	r2, [r4, #16]
   83da8:	b322      	cbz	r2, 83df4 <__sfvwrite_r+0x64>
   83daa:	f003 0202 	and.w	r2, r3, #2
   83dae:	b292      	uxth	r2, r2
   83db0:	6835      	ldr	r5, [r6, #0]
   83db2:	2a00      	cmp	r2, #0
   83db4:	d02c      	beq.n	83e10 <__sfvwrite_r+0x80>
   83db6:	f04f 0a00 	mov.w	sl, #0
   83dba:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 840a4 <__sfvwrite_r+0x314>
   83dbe:	46d0      	mov	r8, sl
   83dc0:	45d8      	cmp	r8, fp
   83dc2:	bf34      	ite	cc
   83dc4:	4643      	movcc	r3, r8
   83dc6:	465b      	movcs	r3, fp
   83dc8:	4652      	mov	r2, sl
   83dca:	4648      	mov	r0, r9
   83dcc:	f1b8 0f00 	cmp.w	r8, #0
   83dd0:	d04f      	beq.n	83e72 <__sfvwrite_r+0xe2>
   83dd2:	69e1      	ldr	r1, [r4, #28]
   83dd4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83dd6:	47b8      	blx	r7
   83dd8:	2800      	cmp	r0, #0
   83dda:	dd56      	ble.n	83e8a <__sfvwrite_r+0xfa>
   83ddc:	68b3      	ldr	r3, [r6, #8]
   83dde:	4482      	add	sl, r0
   83de0:	1a1b      	subs	r3, r3, r0
   83de2:	ebc0 0808 	rsb	r8, r0, r8
   83de6:	60b3      	str	r3, [r6, #8]
   83de8:	2b00      	cmp	r3, #0
   83dea:	d1e9      	bne.n	83dc0 <__sfvwrite_r+0x30>
   83dec:	2000      	movs	r0, #0
   83dee:	b003      	add	sp, #12
   83df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83df4:	4648      	mov	r0, r9
   83df6:	4621      	mov	r1, r4
   83df8:	f7ff fc88 	bl	8370c <__swsetup_r>
   83dfc:	2800      	cmp	r0, #0
   83dfe:	f040 8148 	bne.w	84092 <__sfvwrite_r+0x302>
   83e02:	89a3      	ldrh	r3, [r4, #12]
   83e04:	6835      	ldr	r5, [r6, #0]
   83e06:	f003 0202 	and.w	r2, r3, #2
   83e0a:	b292      	uxth	r2, r2
   83e0c:	2a00      	cmp	r2, #0
   83e0e:	d1d2      	bne.n	83db6 <__sfvwrite_r+0x26>
   83e10:	f013 0a01 	ands.w	sl, r3, #1
   83e14:	d142      	bne.n	83e9c <__sfvwrite_r+0x10c>
   83e16:	46d0      	mov	r8, sl
   83e18:	f1b8 0f00 	cmp.w	r8, #0
   83e1c:	d023      	beq.n	83e66 <__sfvwrite_r+0xd6>
   83e1e:	059a      	lsls	r2, r3, #22
   83e20:	68a7      	ldr	r7, [r4, #8]
   83e22:	d576      	bpl.n	83f12 <__sfvwrite_r+0x182>
   83e24:	45b8      	cmp	r8, r7
   83e26:	f0c0 80a4 	bcc.w	83f72 <__sfvwrite_r+0x1e2>
   83e2a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83e2e:	f040 80b2 	bne.w	83f96 <__sfvwrite_r+0x206>
   83e32:	6820      	ldr	r0, [r4, #0]
   83e34:	46bb      	mov	fp, r7
   83e36:	4651      	mov	r1, sl
   83e38:	465a      	mov	r2, fp
   83e3a:	f000 fd37 	bl	848ac <memmove>
   83e3e:	68a2      	ldr	r2, [r4, #8]
   83e40:	6821      	ldr	r1, [r4, #0]
   83e42:	1bd2      	subs	r2, r2, r7
   83e44:	eb01 030b 	add.w	r3, r1, fp
   83e48:	60a2      	str	r2, [r4, #8]
   83e4a:	6023      	str	r3, [r4, #0]
   83e4c:	4642      	mov	r2, r8
   83e4e:	68b3      	ldr	r3, [r6, #8]
   83e50:	4492      	add	sl, r2
   83e52:	1a9b      	subs	r3, r3, r2
   83e54:	ebc2 0808 	rsb	r8, r2, r8
   83e58:	60b3      	str	r3, [r6, #8]
   83e5a:	2b00      	cmp	r3, #0
   83e5c:	d0c6      	beq.n	83dec <__sfvwrite_r+0x5c>
   83e5e:	89a3      	ldrh	r3, [r4, #12]
   83e60:	f1b8 0f00 	cmp.w	r8, #0
   83e64:	d1db      	bne.n	83e1e <__sfvwrite_r+0x8e>
   83e66:	f8d5 a000 	ldr.w	sl, [r5]
   83e6a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83e6e:	3508      	adds	r5, #8
   83e70:	e7d2      	b.n	83e18 <__sfvwrite_r+0x88>
   83e72:	f8d5 a000 	ldr.w	sl, [r5]
   83e76:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83e7a:	3508      	adds	r5, #8
   83e7c:	e7a0      	b.n	83dc0 <__sfvwrite_r+0x30>
   83e7e:	4648      	mov	r0, r9
   83e80:	4621      	mov	r1, r4
   83e82:	f7ff fd59 	bl	83938 <_fflush_r>
   83e86:	2800      	cmp	r0, #0
   83e88:	d059      	beq.n	83f3e <__sfvwrite_r+0x1ae>
   83e8a:	89a3      	ldrh	r3, [r4, #12]
   83e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83e90:	f04f 30ff 	mov.w	r0, #4294967295
   83e94:	81a3      	strh	r3, [r4, #12]
   83e96:	b003      	add	sp, #12
   83e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e9c:	4692      	mov	sl, r2
   83e9e:	9201      	str	r2, [sp, #4]
   83ea0:	4693      	mov	fp, r2
   83ea2:	4690      	mov	r8, r2
   83ea4:	f1b8 0f00 	cmp.w	r8, #0
   83ea8:	d02b      	beq.n	83f02 <__sfvwrite_r+0x172>
   83eaa:	9f01      	ldr	r7, [sp, #4]
   83eac:	2f00      	cmp	r7, #0
   83eae:	d064      	beq.n	83f7a <__sfvwrite_r+0x1ea>
   83eb0:	6820      	ldr	r0, [r4, #0]
   83eb2:	6921      	ldr	r1, [r4, #16]
   83eb4:	45c2      	cmp	sl, r8
   83eb6:	bf34      	ite	cc
   83eb8:	4653      	movcc	r3, sl
   83eba:	4643      	movcs	r3, r8
   83ebc:	4288      	cmp	r0, r1
   83ebe:	461f      	mov	r7, r3
   83ec0:	f8d4 c008 	ldr.w	ip, [r4, #8]
   83ec4:	6962      	ldr	r2, [r4, #20]
   83ec6:	d903      	bls.n	83ed0 <__sfvwrite_r+0x140>
   83ec8:	4494      	add	ip, r2
   83eca:	4563      	cmp	r3, ip
   83ecc:	f300 80ae 	bgt.w	8402c <__sfvwrite_r+0x29c>
   83ed0:	4293      	cmp	r3, r2
   83ed2:	db36      	blt.n	83f42 <__sfvwrite_r+0x1b2>
   83ed4:	4613      	mov	r3, r2
   83ed6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83ed8:	4648      	mov	r0, r9
   83eda:	69e1      	ldr	r1, [r4, #28]
   83edc:	465a      	mov	r2, fp
   83ede:	47b8      	blx	r7
   83ee0:	1e07      	subs	r7, r0, #0
   83ee2:	ddd2      	ble.n	83e8a <__sfvwrite_r+0xfa>
   83ee4:	ebba 0a07 	subs.w	sl, sl, r7
   83ee8:	d03a      	beq.n	83f60 <__sfvwrite_r+0x1d0>
   83eea:	68b3      	ldr	r3, [r6, #8]
   83eec:	44bb      	add	fp, r7
   83eee:	1bdb      	subs	r3, r3, r7
   83ef0:	ebc7 0808 	rsb	r8, r7, r8
   83ef4:	60b3      	str	r3, [r6, #8]
   83ef6:	2b00      	cmp	r3, #0
   83ef8:	f43f af78 	beq.w	83dec <__sfvwrite_r+0x5c>
   83efc:	f1b8 0f00 	cmp.w	r8, #0
   83f00:	d1d3      	bne.n	83eaa <__sfvwrite_r+0x11a>
   83f02:	2700      	movs	r7, #0
   83f04:	f8d5 b000 	ldr.w	fp, [r5]
   83f08:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83f0c:	9701      	str	r7, [sp, #4]
   83f0e:	3508      	adds	r5, #8
   83f10:	e7c8      	b.n	83ea4 <__sfvwrite_r+0x114>
   83f12:	6820      	ldr	r0, [r4, #0]
   83f14:	6923      	ldr	r3, [r4, #16]
   83f16:	4298      	cmp	r0, r3
   83f18:	d802      	bhi.n	83f20 <__sfvwrite_r+0x190>
   83f1a:	6963      	ldr	r3, [r4, #20]
   83f1c:	4598      	cmp	r8, r3
   83f1e:	d272      	bcs.n	84006 <__sfvwrite_r+0x276>
   83f20:	45b8      	cmp	r8, r7
   83f22:	bf38      	it	cc
   83f24:	4647      	movcc	r7, r8
   83f26:	463a      	mov	r2, r7
   83f28:	4651      	mov	r1, sl
   83f2a:	f000 fcbf 	bl	848ac <memmove>
   83f2e:	68a3      	ldr	r3, [r4, #8]
   83f30:	6822      	ldr	r2, [r4, #0]
   83f32:	1bdb      	subs	r3, r3, r7
   83f34:	443a      	add	r2, r7
   83f36:	60a3      	str	r3, [r4, #8]
   83f38:	6022      	str	r2, [r4, #0]
   83f3a:	2b00      	cmp	r3, #0
   83f3c:	d09f      	beq.n	83e7e <__sfvwrite_r+0xee>
   83f3e:	463a      	mov	r2, r7
   83f40:	e785      	b.n	83e4e <__sfvwrite_r+0xbe>
   83f42:	461a      	mov	r2, r3
   83f44:	4659      	mov	r1, fp
   83f46:	9300      	str	r3, [sp, #0]
   83f48:	f000 fcb0 	bl	848ac <memmove>
   83f4c:	9b00      	ldr	r3, [sp, #0]
   83f4e:	68a1      	ldr	r1, [r4, #8]
   83f50:	6822      	ldr	r2, [r4, #0]
   83f52:	1ac9      	subs	r1, r1, r3
   83f54:	ebba 0a07 	subs.w	sl, sl, r7
   83f58:	4413      	add	r3, r2
   83f5a:	60a1      	str	r1, [r4, #8]
   83f5c:	6023      	str	r3, [r4, #0]
   83f5e:	d1c4      	bne.n	83eea <__sfvwrite_r+0x15a>
   83f60:	4648      	mov	r0, r9
   83f62:	4621      	mov	r1, r4
   83f64:	f7ff fce8 	bl	83938 <_fflush_r>
   83f68:	2800      	cmp	r0, #0
   83f6a:	d18e      	bne.n	83e8a <__sfvwrite_r+0xfa>
   83f6c:	f8cd a004 	str.w	sl, [sp, #4]
   83f70:	e7bb      	b.n	83eea <__sfvwrite_r+0x15a>
   83f72:	6820      	ldr	r0, [r4, #0]
   83f74:	4647      	mov	r7, r8
   83f76:	46c3      	mov	fp, r8
   83f78:	e75d      	b.n	83e36 <__sfvwrite_r+0xa6>
   83f7a:	4658      	mov	r0, fp
   83f7c:	210a      	movs	r1, #10
   83f7e:	4642      	mov	r2, r8
   83f80:	f000 fbd4 	bl	8472c <memchr>
   83f84:	2800      	cmp	r0, #0
   83f86:	d07f      	beq.n	84088 <__sfvwrite_r+0x2f8>
   83f88:	f100 0a01 	add.w	sl, r0, #1
   83f8c:	2701      	movs	r7, #1
   83f8e:	ebcb 0a0a 	rsb	sl, fp, sl
   83f92:	9701      	str	r7, [sp, #4]
   83f94:	e78c      	b.n	83eb0 <__sfvwrite_r+0x120>
   83f96:	6822      	ldr	r2, [r4, #0]
   83f98:	6921      	ldr	r1, [r4, #16]
   83f9a:	6967      	ldr	r7, [r4, #20]
   83f9c:	ebc1 0c02 	rsb	ip, r1, r2
   83fa0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   83fa4:	f10c 0201 	add.w	r2, ip, #1
   83fa8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   83fac:	4442      	add	r2, r8
   83fae:	107f      	asrs	r7, r7, #1
   83fb0:	4297      	cmp	r7, r2
   83fb2:	bf34      	ite	cc
   83fb4:	4617      	movcc	r7, r2
   83fb6:	463a      	movcs	r2, r7
   83fb8:	055b      	lsls	r3, r3, #21
   83fba:	d54f      	bpl.n	8405c <__sfvwrite_r+0x2cc>
   83fbc:	4611      	mov	r1, r2
   83fbe:	4648      	mov	r0, r9
   83fc0:	f8cd c000 	str.w	ip, [sp]
   83fc4:	f000 f916 	bl	841f4 <_malloc_r>
   83fc8:	f8dd c000 	ldr.w	ip, [sp]
   83fcc:	4683      	mov	fp, r0
   83fce:	2800      	cmp	r0, #0
   83fd0:	d062      	beq.n	84098 <__sfvwrite_r+0x308>
   83fd2:	4662      	mov	r2, ip
   83fd4:	6921      	ldr	r1, [r4, #16]
   83fd6:	f8cd c000 	str.w	ip, [sp]
   83fda:	f000 fbf1 	bl	847c0 <memcpy>
   83fde:	89a2      	ldrh	r2, [r4, #12]
   83fe0:	f8dd c000 	ldr.w	ip, [sp]
   83fe4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83fe8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83fec:	81a2      	strh	r2, [r4, #12]
   83fee:	eb0b 000c 	add.w	r0, fp, ip
   83ff2:	ebcc 0207 	rsb	r2, ip, r7
   83ff6:	f8c4 b010 	str.w	fp, [r4, #16]
   83ffa:	6167      	str	r7, [r4, #20]
   83ffc:	6020      	str	r0, [r4, #0]
   83ffe:	60a2      	str	r2, [r4, #8]
   84000:	4647      	mov	r7, r8
   84002:	46c3      	mov	fp, r8
   84004:	e717      	b.n	83e36 <__sfvwrite_r+0xa6>
   84006:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8400a:	4590      	cmp	r8, r2
   8400c:	bf38      	it	cc
   8400e:	4642      	movcc	r2, r8
   84010:	fb92 f2f3 	sdiv	r2, r2, r3
   84014:	fb02 f303 	mul.w	r3, r2, r3
   84018:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8401a:	4648      	mov	r0, r9
   8401c:	69e1      	ldr	r1, [r4, #28]
   8401e:	4652      	mov	r2, sl
   84020:	47b8      	blx	r7
   84022:	2800      	cmp	r0, #0
   84024:	f77f af31 	ble.w	83e8a <__sfvwrite_r+0xfa>
   84028:	4602      	mov	r2, r0
   8402a:	e710      	b.n	83e4e <__sfvwrite_r+0xbe>
   8402c:	4662      	mov	r2, ip
   8402e:	4659      	mov	r1, fp
   84030:	f8cd c000 	str.w	ip, [sp]
   84034:	f000 fc3a 	bl	848ac <memmove>
   84038:	f8dd c000 	ldr.w	ip, [sp]
   8403c:	6823      	ldr	r3, [r4, #0]
   8403e:	4648      	mov	r0, r9
   84040:	4463      	add	r3, ip
   84042:	6023      	str	r3, [r4, #0]
   84044:	4621      	mov	r1, r4
   84046:	f8cd c000 	str.w	ip, [sp]
   8404a:	f7ff fc75 	bl	83938 <_fflush_r>
   8404e:	f8dd c000 	ldr.w	ip, [sp]
   84052:	2800      	cmp	r0, #0
   84054:	f47f af19 	bne.w	83e8a <__sfvwrite_r+0xfa>
   84058:	4667      	mov	r7, ip
   8405a:	e743      	b.n	83ee4 <__sfvwrite_r+0x154>
   8405c:	4648      	mov	r0, r9
   8405e:	f8cd c000 	str.w	ip, [sp]
   84062:	f000 fc8d 	bl	84980 <_realloc_r>
   84066:	f8dd c000 	ldr.w	ip, [sp]
   8406a:	4683      	mov	fp, r0
   8406c:	2800      	cmp	r0, #0
   8406e:	d1be      	bne.n	83fee <__sfvwrite_r+0x25e>
   84070:	4648      	mov	r0, r9
   84072:	6921      	ldr	r1, [r4, #16]
   84074:	f7ff fdc0 	bl	83bf8 <_free_r>
   84078:	89a3      	ldrh	r3, [r4, #12]
   8407a:	220c      	movs	r2, #12
   8407c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84080:	b29b      	uxth	r3, r3
   84082:	f8c9 2000 	str.w	r2, [r9]
   84086:	e701      	b.n	83e8c <__sfvwrite_r+0xfc>
   84088:	2701      	movs	r7, #1
   8408a:	f108 0a01 	add.w	sl, r8, #1
   8408e:	9701      	str	r7, [sp, #4]
   84090:	e70e      	b.n	83eb0 <__sfvwrite_r+0x120>
   84092:	f04f 30ff 	mov.w	r0, #4294967295
   84096:	e6aa      	b.n	83dee <__sfvwrite_r+0x5e>
   84098:	230c      	movs	r3, #12
   8409a:	f8c9 3000 	str.w	r3, [r9]
   8409e:	89a3      	ldrh	r3, [r4, #12]
   840a0:	e6f4      	b.n	83e8c <__sfvwrite_r+0xfc>
   840a2:	bf00      	nop
   840a4:	7ffffc00 	.word	0x7ffffc00

000840a8 <_fwalk>:
   840a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   840ac:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   840b0:	4688      	mov	r8, r1
   840b2:	d019      	beq.n	840e8 <_fwalk+0x40>
   840b4:	2600      	movs	r6, #0
   840b6:	687d      	ldr	r5, [r7, #4]
   840b8:	68bc      	ldr	r4, [r7, #8]
   840ba:	3d01      	subs	r5, #1
   840bc:	d40e      	bmi.n	840dc <_fwalk+0x34>
   840be:	89a3      	ldrh	r3, [r4, #12]
   840c0:	3d01      	subs	r5, #1
   840c2:	2b01      	cmp	r3, #1
   840c4:	d906      	bls.n	840d4 <_fwalk+0x2c>
   840c6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   840ca:	4620      	mov	r0, r4
   840cc:	3301      	adds	r3, #1
   840ce:	d001      	beq.n	840d4 <_fwalk+0x2c>
   840d0:	47c0      	blx	r8
   840d2:	4306      	orrs	r6, r0
   840d4:	1c6b      	adds	r3, r5, #1
   840d6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   840da:	d1f0      	bne.n	840be <_fwalk+0x16>
   840dc:	683f      	ldr	r7, [r7, #0]
   840de:	2f00      	cmp	r7, #0
   840e0:	d1e9      	bne.n	840b6 <_fwalk+0xe>
   840e2:	4630      	mov	r0, r6
   840e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   840e8:	463e      	mov	r6, r7
   840ea:	4630      	mov	r0, r6
   840ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000840f0 <__locale_charset>:
   840f0:	4800      	ldr	r0, [pc, #0]	; (840f4 <__locale_charset+0x4>)
   840f2:	4770      	bx	lr
   840f4:	20070574 	.word	0x20070574

000840f8 <__locale_mb_cur_max>:
   840f8:	4b01      	ldr	r3, [pc, #4]	; (84100 <__locale_mb_cur_max+0x8>)
   840fa:	6818      	ldr	r0, [r3, #0]
   840fc:	4770      	bx	lr
   840fe:	bf00      	nop
   84100:	20070594 	.word	0x20070594

00084104 <__smakebuf_r>:
   84104:	b5f0      	push	{r4, r5, r6, r7, lr}
   84106:	898b      	ldrh	r3, [r1, #12]
   84108:	b091      	sub	sp, #68	; 0x44
   8410a:	b29a      	uxth	r2, r3
   8410c:	0796      	lsls	r6, r2, #30
   8410e:	460c      	mov	r4, r1
   84110:	4605      	mov	r5, r0
   84112:	d437      	bmi.n	84184 <__smakebuf_r+0x80>
   84114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84118:	2900      	cmp	r1, #0
   8411a:	db17      	blt.n	8414c <__smakebuf_r+0x48>
   8411c:	aa01      	add	r2, sp, #4
   8411e:	f000 ffaf 	bl	85080 <_fstat_r>
   84122:	2800      	cmp	r0, #0
   84124:	db10      	blt.n	84148 <__smakebuf_r+0x44>
   84126:	9b02      	ldr	r3, [sp, #8]
   84128:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8412c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   84130:	424f      	negs	r7, r1
   84132:	414f      	adcs	r7, r1
   84134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84138:	d02c      	beq.n	84194 <__smakebuf_r+0x90>
   8413a:	89a3      	ldrh	r3, [r4, #12]
   8413c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84144:	81a3      	strh	r3, [r4, #12]
   84146:	e00b      	b.n	84160 <__smakebuf_r+0x5c>
   84148:	89a3      	ldrh	r3, [r4, #12]
   8414a:	b29a      	uxth	r2, r3
   8414c:	f012 0f80 	tst.w	r2, #128	; 0x80
   84150:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84154:	81a3      	strh	r3, [r4, #12]
   84156:	bf14      	ite	ne
   84158:	2640      	movne	r6, #64	; 0x40
   8415a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8415e:	2700      	movs	r7, #0
   84160:	4628      	mov	r0, r5
   84162:	4631      	mov	r1, r6
   84164:	f000 f846 	bl	841f4 <_malloc_r>
   84168:	89a3      	ldrh	r3, [r4, #12]
   8416a:	2800      	cmp	r0, #0
   8416c:	d029      	beq.n	841c2 <__smakebuf_r+0xbe>
   8416e:	4a1b      	ldr	r2, [pc, #108]	; (841dc <__smakebuf_r+0xd8>)
   84170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84174:	63ea      	str	r2, [r5, #60]	; 0x3c
   84176:	81a3      	strh	r3, [r4, #12]
   84178:	6020      	str	r0, [r4, #0]
   8417a:	6120      	str	r0, [r4, #16]
   8417c:	6166      	str	r6, [r4, #20]
   8417e:	b9a7      	cbnz	r7, 841aa <__smakebuf_r+0xa6>
   84180:	b011      	add	sp, #68	; 0x44
   84182:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84184:	f101 0343 	add.w	r3, r1, #67	; 0x43
   84188:	2201      	movs	r2, #1
   8418a:	600b      	str	r3, [r1, #0]
   8418c:	610b      	str	r3, [r1, #16]
   8418e:	614a      	str	r2, [r1, #20]
   84190:	b011      	add	sp, #68	; 0x44
   84192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84194:	4a12      	ldr	r2, [pc, #72]	; (841e0 <__smakebuf_r+0xdc>)
   84196:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   84198:	4293      	cmp	r3, r2
   8419a:	d1ce      	bne.n	8413a <__smakebuf_r+0x36>
   8419c:	89a3      	ldrh	r3, [r4, #12]
   8419e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   841a2:	4333      	orrs	r3, r6
   841a4:	81a3      	strh	r3, [r4, #12]
   841a6:	64e6      	str	r6, [r4, #76]	; 0x4c
   841a8:	e7da      	b.n	84160 <__smakebuf_r+0x5c>
   841aa:	4628      	mov	r0, r5
   841ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   841b0:	f000 ff7a 	bl	850a8 <_isatty_r>
   841b4:	2800      	cmp	r0, #0
   841b6:	d0e3      	beq.n	84180 <__smakebuf_r+0x7c>
   841b8:	89a3      	ldrh	r3, [r4, #12]
   841ba:	f043 0301 	orr.w	r3, r3, #1
   841be:	81a3      	strh	r3, [r4, #12]
   841c0:	e7de      	b.n	84180 <__smakebuf_r+0x7c>
   841c2:	059a      	lsls	r2, r3, #22
   841c4:	d4dc      	bmi.n	84180 <__smakebuf_r+0x7c>
   841c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   841ca:	f043 0302 	orr.w	r3, r3, #2
   841ce:	2101      	movs	r1, #1
   841d0:	81a3      	strh	r3, [r4, #12]
   841d2:	6022      	str	r2, [r4, #0]
   841d4:	6122      	str	r2, [r4, #16]
   841d6:	6161      	str	r1, [r4, #20]
   841d8:	e7d2      	b.n	84180 <__smakebuf_r+0x7c>
   841da:	bf00      	nop
   841dc:	00083965 	.word	0x00083965
   841e0:	00084dc1 	.word	0x00084dc1

000841e4 <malloc>:
   841e4:	4b02      	ldr	r3, [pc, #8]	; (841f0 <malloc+0xc>)
   841e6:	4601      	mov	r1, r0
   841e8:	6818      	ldr	r0, [r3, #0]
   841ea:	f000 b803 	b.w	841f4 <_malloc_r>
   841ee:	bf00      	nop
   841f0:	20070570 	.word	0x20070570

000841f4 <_malloc_r>:
   841f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   841f8:	f101 050b 	add.w	r5, r1, #11
   841fc:	2d16      	cmp	r5, #22
   841fe:	b083      	sub	sp, #12
   84200:	4606      	mov	r6, r0
   84202:	d927      	bls.n	84254 <_malloc_r+0x60>
   84204:	f035 0507 	bics.w	r5, r5, #7
   84208:	d427      	bmi.n	8425a <_malloc_r+0x66>
   8420a:	42a9      	cmp	r1, r5
   8420c:	d825      	bhi.n	8425a <_malloc_r+0x66>
   8420e:	4630      	mov	r0, r6
   84210:	f000 fbb2 	bl	84978 <__malloc_lock>
   84214:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84218:	d226      	bcs.n	84268 <_malloc_r+0x74>
   8421a:	4fc1      	ldr	r7, [pc, #772]	; (84520 <_malloc_r+0x32c>)
   8421c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   84220:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   84224:	68dc      	ldr	r4, [r3, #12]
   84226:	429c      	cmp	r4, r3
   84228:	f000 81d2 	beq.w	845d0 <_malloc_r+0x3dc>
   8422c:	6863      	ldr	r3, [r4, #4]
   8422e:	68e2      	ldr	r2, [r4, #12]
   84230:	f023 0303 	bic.w	r3, r3, #3
   84234:	4423      	add	r3, r4
   84236:	6858      	ldr	r0, [r3, #4]
   84238:	68a1      	ldr	r1, [r4, #8]
   8423a:	f040 0501 	orr.w	r5, r0, #1
   8423e:	60ca      	str	r2, [r1, #12]
   84240:	4630      	mov	r0, r6
   84242:	6091      	str	r1, [r2, #8]
   84244:	605d      	str	r5, [r3, #4]
   84246:	f000 fb99 	bl	8497c <__malloc_unlock>
   8424a:	3408      	adds	r4, #8
   8424c:	4620      	mov	r0, r4
   8424e:	b003      	add	sp, #12
   84250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84254:	2510      	movs	r5, #16
   84256:	42a9      	cmp	r1, r5
   84258:	d9d9      	bls.n	8420e <_malloc_r+0x1a>
   8425a:	2400      	movs	r4, #0
   8425c:	230c      	movs	r3, #12
   8425e:	4620      	mov	r0, r4
   84260:	6033      	str	r3, [r6, #0]
   84262:	b003      	add	sp, #12
   84264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84268:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   8426c:	f000 8089 	beq.w	84382 <_malloc_r+0x18e>
   84270:	f1bc 0f04 	cmp.w	ip, #4
   84274:	f200 8160 	bhi.w	84538 <_malloc_r+0x344>
   84278:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   8427c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   84280:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84284:	4fa6      	ldr	r7, [pc, #664]	; (84520 <_malloc_r+0x32c>)
   84286:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8428a:	68cc      	ldr	r4, [r1, #12]
   8428c:	42a1      	cmp	r1, r4
   8428e:	d105      	bne.n	8429c <_malloc_r+0xa8>
   84290:	e00c      	b.n	842ac <_malloc_r+0xb8>
   84292:	2b00      	cmp	r3, #0
   84294:	da79      	bge.n	8438a <_malloc_r+0x196>
   84296:	68e4      	ldr	r4, [r4, #12]
   84298:	42a1      	cmp	r1, r4
   8429a:	d007      	beq.n	842ac <_malloc_r+0xb8>
   8429c:	6862      	ldr	r2, [r4, #4]
   8429e:	f022 0203 	bic.w	r2, r2, #3
   842a2:	1b53      	subs	r3, r2, r5
   842a4:	2b0f      	cmp	r3, #15
   842a6:	ddf4      	ble.n	84292 <_malloc_r+0x9e>
   842a8:	f10c 3cff 	add.w	ip, ip, #4294967295
   842ac:	f10c 0c01 	add.w	ip, ip, #1
   842b0:	4b9b      	ldr	r3, [pc, #620]	; (84520 <_malloc_r+0x32c>)
   842b2:	693c      	ldr	r4, [r7, #16]
   842b4:	f103 0e08 	add.w	lr, r3, #8
   842b8:	4574      	cmp	r4, lr
   842ba:	f000 817e 	beq.w	845ba <_malloc_r+0x3c6>
   842be:	6861      	ldr	r1, [r4, #4]
   842c0:	f021 0103 	bic.w	r1, r1, #3
   842c4:	1b4a      	subs	r2, r1, r5
   842c6:	2a0f      	cmp	r2, #15
   842c8:	f300 8164 	bgt.w	84594 <_malloc_r+0x3a0>
   842cc:	2a00      	cmp	r2, #0
   842ce:	f8c3 e014 	str.w	lr, [r3, #20]
   842d2:	f8c3 e010 	str.w	lr, [r3, #16]
   842d6:	da69      	bge.n	843ac <_malloc_r+0x1b8>
   842d8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   842dc:	f080 813a 	bcs.w	84554 <_malloc_r+0x360>
   842e0:	08c9      	lsrs	r1, r1, #3
   842e2:	108a      	asrs	r2, r1, #2
   842e4:	f04f 0801 	mov.w	r8, #1
   842e8:	fa08 f802 	lsl.w	r8, r8, r2
   842ec:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   842f0:	685a      	ldr	r2, [r3, #4]
   842f2:	6888      	ldr	r0, [r1, #8]
   842f4:	ea48 0202 	orr.w	r2, r8, r2
   842f8:	60a0      	str	r0, [r4, #8]
   842fa:	60e1      	str	r1, [r4, #12]
   842fc:	605a      	str	r2, [r3, #4]
   842fe:	608c      	str	r4, [r1, #8]
   84300:	60c4      	str	r4, [r0, #12]
   84302:	ea4f 03ac 	mov.w	r3, ip, asr #2
   84306:	2001      	movs	r0, #1
   84308:	4098      	lsls	r0, r3
   8430a:	4290      	cmp	r0, r2
   8430c:	d85b      	bhi.n	843c6 <_malloc_r+0x1d2>
   8430e:	4202      	tst	r2, r0
   84310:	d106      	bne.n	84320 <_malloc_r+0x12c>
   84312:	f02c 0c03 	bic.w	ip, ip, #3
   84316:	0040      	lsls	r0, r0, #1
   84318:	4202      	tst	r2, r0
   8431a:	f10c 0c04 	add.w	ip, ip, #4
   8431e:	d0fa      	beq.n	84316 <_malloc_r+0x122>
   84320:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   84324:	4644      	mov	r4, r8
   84326:	46e1      	mov	r9, ip
   84328:	68e3      	ldr	r3, [r4, #12]
   8432a:	429c      	cmp	r4, r3
   8432c:	d107      	bne.n	8433e <_malloc_r+0x14a>
   8432e:	e146      	b.n	845be <_malloc_r+0x3ca>
   84330:	2a00      	cmp	r2, #0
   84332:	f280 8157 	bge.w	845e4 <_malloc_r+0x3f0>
   84336:	68db      	ldr	r3, [r3, #12]
   84338:	429c      	cmp	r4, r3
   8433a:	f000 8140 	beq.w	845be <_malloc_r+0x3ca>
   8433e:	6859      	ldr	r1, [r3, #4]
   84340:	f021 0103 	bic.w	r1, r1, #3
   84344:	1b4a      	subs	r2, r1, r5
   84346:	2a0f      	cmp	r2, #15
   84348:	ddf2      	ble.n	84330 <_malloc_r+0x13c>
   8434a:	461c      	mov	r4, r3
   8434c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   84350:	68d9      	ldr	r1, [r3, #12]
   84352:	f045 0901 	orr.w	r9, r5, #1
   84356:	f042 0801 	orr.w	r8, r2, #1
   8435a:	441d      	add	r5, r3
   8435c:	f8c3 9004 	str.w	r9, [r3, #4]
   84360:	4630      	mov	r0, r6
   84362:	f8cc 100c 	str.w	r1, [ip, #12]
   84366:	f8c1 c008 	str.w	ip, [r1, #8]
   8436a:	617d      	str	r5, [r7, #20]
   8436c:	613d      	str	r5, [r7, #16]
   8436e:	f8c5 e00c 	str.w	lr, [r5, #12]
   84372:	f8c5 e008 	str.w	lr, [r5, #8]
   84376:	f8c5 8004 	str.w	r8, [r5, #4]
   8437a:	50aa      	str	r2, [r5, r2]
   8437c:	f000 fafe 	bl	8497c <__malloc_unlock>
   84380:	e764      	b.n	8424c <_malloc_r+0x58>
   84382:	217e      	movs	r1, #126	; 0x7e
   84384:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   84388:	e77c      	b.n	84284 <_malloc_r+0x90>
   8438a:	4422      	add	r2, r4
   8438c:	6850      	ldr	r0, [r2, #4]
   8438e:	68e3      	ldr	r3, [r4, #12]
   84390:	68a1      	ldr	r1, [r4, #8]
   84392:	f040 0501 	orr.w	r5, r0, #1
   84396:	60cb      	str	r3, [r1, #12]
   84398:	4630      	mov	r0, r6
   8439a:	6099      	str	r1, [r3, #8]
   8439c:	6055      	str	r5, [r2, #4]
   8439e:	f000 faed 	bl	8497c <__malloc_unlock>
   843a2:	3408      	adds	r4, #8
   843a4:	4620      	mov	r0, r4
   843a6:	b003      	add	sp, #12
   843a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   843ac:	4421      	add	r1, r4
   843ae:	684b      	ldr	r3, [r1, #4]
   843b0:	4630      	mov	r0, r6
   843b2:	f043 0301 	orr.w	r3, r3, #1
   843b6:	604b      	str	r3, [r1, #4]
   843b8:	f000 fae0 	bl	8497c <__malloc_unlock>
   843bc:	3408      	adds	r4, #8
   843be:	4620      	mov	r0, r4
   843c0:	b003      	add	sp, #12
   843c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   843c6:	68bc      	ldr	r4, [r7, #8]
   843c8:	6863      	ldr	r3, [r4, #4]
   843ca:	f023 0903 	bic.w	r9, r3, #3
   843ce:	45a9      	cmp	r9, r5
   843d0:	d304      	bcc.n	843dc <_malloc_r+0x1e8>
   843d2:	ebc5 0309 	rsb	r3, r5, r9
   843d6:	2b0f      	cmp	r3, #15
   843d8:	f300 8091 	bgt.w	844fe <_malloc_r+0x30a>
   843dc:	4b51      	ldr	r3, [pc, #324]	; (84524 <_malloc_r+0x330>)
   843de:	4a52      	ldr	r2, [pc, #328]	; (84528 <_malloc_r+0x334>)
   843e0:	6819      	ldr	r1, [r3, #0]
   843e2:	6813      	ldr	r3, [r2, #0]
   843e4:	eb05 0a01 	add.w	sl, r5, r1
   843e8:	3301      	adds	r3, #1
   843ea:	eb04 0b09 	add.w	fp, r4, r9
   843ee:	f000 8161 	beq.w	846b4 <_malloc_r+0x4c0>
   843f2:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   843f6:	f10a 0a0f 	add.w	sl, sl, #15
   843fa:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   843fe:	f02a 0a0f 	bic.w	sl, sl, #15
   84402:	4630      	mov	r0, r6
   84404:	4651      	mov	r1, sl
   84406:	9201      	str	r2, [sp, #4]
   84408:	f000 fc9a 	bl	84d40 <_sbrk_r>
   8440c:	f1b0 3fff 	cmp.w	r0, #4294967295
   84410:	4680      	mov	r8, r0
   84412:	9a01      	ldr	r2, [sp, #4]
   84414:	f000 8101 	beq.w	8461a <_malloc_r+0x426>
   84418:	4583      	cmp	fp, r0
   8441a:	f200 80fb 	bhi.w	84614 <_malloc_r+0x420>
   8441e:	f8df c114 	ldr.w	ip, [pc, #276]	; 84534 <_malloc_r+0x340>
   84422:	45c3      	cmp	fp, r8
   84424:	f8dc 3000 	ldr.w	r3, [ip]
   84428:	4453      	add	r3, sl
   8442a:	f8cc 3000 	str.w	r3, [ip]
   8442e:	f000 814a 	beq.w	846c6 <_malloc_r+0x4d2>
   84432:	6812      	ldr	r2, [r2, #0]
   84434:	493c      	ldr	r1, [pc, #240]	; (84528 <_malloc_r+0x334>)
   84436:	3201      	adds	r2, #1
   84438:	bf1b      	ittet	ne
   8443a:	ebcb 0b08 	rsbne	fp, fp, r8
   8443e:	445b      	addne	r3, fp
   84440:	f8c1 8000 	streq.w	r8, [r1]
   84444:	f8cc 3000 	strne.w	r3, [ip]
   84448:	f018 0307 	ands.w	r3, r8, #7
   8444c:	f000 8114 	beq.w	84678 <_malloc_r+0x484>
   84450:	f1c3 0208 	rsb	r2, r3, #8
   84454:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   84458:	4490      	add	r8, r2
   8445a:	3308      	adds	r3, #8
   8445c:	44c2      	add	sl, r8
   8445e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   84462:	ebca 0a03 	rsb	sl, sl, r3
   84466:	4651      	mov	r1, sl
   84468:	4630      	mov	r0, r6
   8446a:	f8cd c004 	str.w	ip, [sp, #4]
   8446e:	f000 fc67 	bl	84d40 <_sbrk_r>
   84472:	1c43      	adds	r3, r0, #1
   84474:	f8dd c004 	ldr.w	ip, [sp, #4]
   84478:	f000 8135 	beq.w	846e6 <_malloc_r+0x4f2>
   8447c:	ebc8 0200 	rsb	r2, r8, r0
   84480:	4452      	add	r2, sl
   84482:	f042 0201 	orr.w	r2, r2, #1
   84486:	f8dc 3000 	ldr.w	r3, [ip]
   8448a:	42bc      	cmp	r4, r7
   8448c:	4453      	add	r3, sl
   8448e:	f8c7 8008 	str.w	r8, [r7, #8]
   84492:	f8cc 3000 	str.w	r3, [ip]
   84496:	f8c8 2004 	str.w	r2, [r8, #4]
   8449a:	f8df a098 	ldr.w	sl, [pc, #152]	; 84534 <_malloc_r+0x340>
   8449e:	d015      	beq.n	844cc <_malloc_r+0x2d8>
   844a0:	f1b9 0f0f 	cmp.w	r9, #15
   844a4:	f240 80eb 	bls.w	8467e <_malloc_r+0x48a>
   844a8:	6861      	ldr	r1, [r4, #4]
   844aa:	f1a9 020c 	sub.w	r2, r9, #12
   844ae:	f022 0207 	bic.w	r2, r2, #7
   844b2:	f001 0101 	and.w	r1, r1, #1
   844b6:	ea42 0e01 	orr.w	lr, r2, r1
   844ba:	2005      	movs	r0, #5
   844bc:	18a1      	adds	r1, r4, r2
   844be:	2a0f      	cmp	r2, #15
   844c0:	f8c4 e004 	str.w	lr, [r4, #4]
   844c4:	6048      	str	r0, [r1, #4]
   844c6:	6088      	str	r0, [r1, #8]
   844c8:	f200 8111 	bhi.w	846ee <_malloc_r+0x4fa>
   844cc:	4a17      	ldr	r2, [pc, #92]	; (8452c <_malloc_r+0x338>)
   844ce:	68bc      	ldr	r4, [r7, #8]
   844d0:	6811      	ldr	r1, [r2, #0]
   844d2:	428b      	cmp	r3, r1
   844d4:	bf88      	it	hi
   844d6:	6013      	strhi	r3, [r2, #0]
   844d8:	4a15      	ldr	r2, [pc, #84]	; (84530 <_malloc_r+0x33c>)
   844da:	6811      	ldr	r1, [r2, #0]
   844dc:	428b      	cmp	r3, r1
   844de:	bf88      	it	hi
   844e0:	6013      	strhi	r3, [r2, #0]
   844e2:	6862      	ldr	r2, [r4, #4]
   844e4:	f022 0203 	bic.w	r2, r2, #3
   844e8:	4295      	cmp	r5, r2
   844ea:	ebc5 0302 	rsb	r3, r5, r2
   844ee:	d801      	bhi.n	844f4 <_malloc_r+0x300>
   844f0:	2b0f      	cmp	r3, #15
   844f2:	dc04      	bgt.n	844fe <_malloc_r+0x30a>
   844f4:	4630      	mov	r0, r6
   844f6:	f000 fa41 	bl	8497c <__malloc_unlock>
   844fa:	2400      	movs	r4, #0
   844fc:	e6a6      	b.n	8424c <_malloc_r+0x58>
   844fe:	f045 0201 	orr.w	r2, r5, #1
   84502:	f043 0301 	orr.w	r3, r3, #1
   84506:	4425      	add	r5, r4
   84508:	6062      	str	r2, [r4, #4]
   8450a:	4630      	mov	r0, r6
   8450c:	60bd      	str	r5, [r7, #8]
   8450e:	606b      	str	r3, [r5, #4]
   84510:	f000 fa34 	bl	8497c <__malloc_unlock>
   84514:	3408      	adds	r4, #8
   84516:	4620      	mov	r0, r4
   84518:	b003      	add	sp, #12
   8451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8451e:	bf00      	nop
   84520:	20070598 	.word	0x20070598
   84524:	20070aec 	.word	0x20070aec
   84528:	200709a4 	.word	0x200709a4
   8452c:	20070ae8 	.word	0x20070ae8
   84530:	20070ae4 	.word	0x20070ae4
   84534:	20070af0 	.word	0x20070af0
   84538:	f1bc 0f14 	cmp.w	ip, #20
   8453c:	d961      	bls.n	84602 <_malloc_r+0x40e>
   8453e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   84542:	f200 808f 	bhi.w	84664 <_malloc_r+0x470>
   84546:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8454a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8454e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84552:	e697      	b.n	84284 <_malloc_r+0x90>
   84554:	0a4b      	lsrs	r3, r1, #9
   84556:	2b04      	cmp	r3, #4
   84558:	d958      	bls.n	8460c <_malloc_r+0x418>
   8455a:	2b14      	cmp	r3, #20
   8455c:	f200 80ad 	bhi.w	846ba <_malloc_r+0x4c6>
   84560:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   84564:	0050      	lsls	r0, r2, #1
   84566:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8456a:	6883      	ldr	r3, [r0, #8]
   8456c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 84728 <_malloc_r+0x534>
   84570:	4283      	cmp	r3, r0
   84572:	f000 808a 	beq.w	8468a <_malloc_r+0x496>
   84576:	685a      	ldr	r2, [r3, #4]
   84578:	f022 0203 	bic.w	r2, r2, #3
   8457c:	4291      	cmp	r1, r2
   8457e:	d202      	bcs.n	84586 <_malloc_r+0x392>
   84580:	689b      	ldr	r3, [r3, #8]
   84582:	4298      	cmp	r0, r3
   84584:	d1f7      	bne.n	84576 <_malloc_r+0x382>
   84586:	68d9      	ldr	r1, [r3, #12]
   84588:	687a      	ldr	r2, [r7, #4]
   8458a:	60e1      	str	r1, [r4, #12]
   8458c:	60a3      	str	r3, [r4, #8]
   8458e:	608c      	str	r4, [r1, #8]
   84590:	60dc      	str	r4, [r3, #12]
   84592:	e6b6      	b.n	84302 <_malloc_r+0x10e>
   84594:	f045 0701 	orr.w	r7, r5, #1
   84598:	f042 0101 	orr.w	r1, r2, #1
   8459c:	4425      	add	r5, r4
   8459e:	6067      	str	r7, [r4, #4]
   845a0:	4630      	mov	r0, r6
   845a2:	615d      	str	r5, [r3, #20]
   845a4:	611d      	str	r5, [r3, #16]
   845a6:	f8c5 e00c 	str.w	lr, [r5, #12]
   845aa:	f8c5 e008 	str.w	lr, [r5, #8]
   845ae:	6069      	str	r1, [r5, #4]
   845b0:	50aa      	str	r2, [r5, r2]
   845b2:	3408      	adds	r4, #8
   845b4:	f000 f9e2 	bl	8497c <__malloc_unlock>
   845b8:	e648      	b.n	8424c <_malloc_r+0x58>
   845ba:	685a      	ldr	r2, [r3, #4]
   845bc:	e6a1      	b.n	84302 <_malloc_r+0x10e>
   845be:	f109 0901 	add.w	r9, r9, #1
   845c2:	f019 0f03 	tst.w	r9, #3
   845c6:	f104 0408 	add.w	r4, r4, #8
   845ca:	f47f aead 	bne.w	84328 <_malloc_r+0x134>
   845ce:	e02d      	b.n	8462c <_malloc_r+0x438>
   845d0:	f104 0308 	add.w	r3, r4, #8
   845d4:	6964      	ldr	r4, [r4, #20]
   845d6:	42a3      	cmp	r3, r4
   845d8:	bf08      	it	eq
   845da:	f10c 0c02 	addeq.w	ip, ip, #2
   845de:	f43f ae67 	beq.w	842b0 <_malloc_r+0xbc>
   845e2:	e623      	b.n	8422c <_malloc_r+0x38>
   845e4:	4419      	add	r1, r3
   845e6:	6848      	ldr	r0, [r1, #4]
   845e8:	461c      	mov	r4, r3
   845ea:	f854 2f08 	ldr.w	r2, [r4, #8]!
   845ee:	68db      	ldr	r3, [r3, #12]
   845f0:	f040 0501 	orr.w	r5, r0, #1
   845f4:	604d      	str	r5, [r1, #4]
   845f6:	4630      	mov	r0, r6
   845f8:	60d3      	str	r3, [r2, #12]
   845fa:	609a      	str	r2, [r3, #8]
   845fc:	f000 f9be 	bl	8497c <__malloc_unlock>
   84600:	e624      	b.n	8424c <_malloc_r+0x58>
   84602:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   84606:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8460a:	e63b      	b.n	84284 <_malloc_r+0x90>
   8460c:	098a      	lsrs	r2, r1, #6
   8460e:	3238      	adds	r2, #56	; 0x38
   84610:	0050      	lsls	r0, r2, #1
   84612:	e7a8      	b.n	84566 <_malloc_r+0x372>
   84614:	42bc      	cmp	r4, r7
   84616:	f43f af02 	beq.w	8441e <_malloc_r+0x22a>
   8461a:	68bc      	ldr	r4, [r7, #8]
   8461c:	6862      	ldr	r2, [r4, #4]
   8461e:	f022 0203 	bic.w	r2, r2, #3
   84622:	e761      	b.n	844e8 <_malloc_r+0x2f4>
   84624:	f8d8 8000 	ldr.w	r8, [r8]
   84628:	4598      	cmp	r8, r3
   8462a:	d17a      	bne.n	84722 <_malloc_r+0x52e>
   8462c:	f01c 0f03 	tst.w	ip, #3
   84630:	f1a8 0308 	sub.w	r3, r8, #8
   84634:	f10c 3cff 	add.w	ip, ip, #4294967295
   84638:	d1f4      	bne.n	84624 <_malloc_r+0x430>
   8463a:	687b      	ldr	r3, [r7, #4]
   8463c:	ea23 0300 	bic.w	r3, r3, r0
   84640:	607b      	str	r3, [r7, #4]
   84642:	0040      	lsls	r0, r0, #1
   84644:	4298      	cmp	r0, r3
   84646:	f63f aebe 	bhi.w	843c6 <_malloc_r+0x1d2>
   8464a:	2800      	cmp	r0, #0
   8464c:	f43f aebb 	beq.w	843c6 <_malloc_r+0x1d2>
   84650:	4203      	tst	r3, r0
   84652:	46cc      	mov	ip, r9
   84654:	f47f ae64 	bne.w	84320 <_malloc_r+0x12c>
   84658:	0040      	lsls	r0, r0, #1
   8465a:	4203      	tst	r3, r0
   8465c:	f10c 0c04 	add.w	ip, ip, #4
   84660:	d0fa      	beq.n	84658 <_malloc_r+0x464>
   84662:	e65d      	b.n	84320 <_malloc_r+0x12c>
   84664:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   84668:	d819      	bhi.n	8469e <_malloc_r+0x4aa>
   8466a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8466e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   84672:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84676:	e605      	b.n	84284 <_malloc_r+0x90>
   84678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8467c:	e6ee      	b.n	8445c <_malloc_r+0x268>
   8467e:	2301      	movs	r3, #1
   84680:	f8c8 3004 	str.w	r3, [r8, #4]
   84684:	4644      	mov	r4, r8
   84686:	2200      	movs	r2, #0
   84688:	e72e      	b.n	844e8 <_malloc_r+0x2f4>
   8468a:	1092      	asrs	r2, r2, #2
   8468c:	2001      	movs	r0, #1
   8468e:	4090      	lsls	r0, r2
   84690:	f8d8 2004 	ldr.w	r2, [r8, #4]
   84694:	4619      	mov	r1, r3
   84696:	4302      	orrs	r2, r0
   84698:	f8c8 2004 	str.w	r2, [r8, #4]
   8469c:	e775      	b.n	8458a <_malloc_r+0x396>
   8469e:	f240 5354 	movw	r3, #1364	; 0x554
   846a2:	459c      	cmp	ip, r3
   846a4:	d81b      	bhi.n	846de <_malloc_r+0x4ea>
   846a6:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   846aa:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   846ae:	ea4f 014c 	mov.w	r1, ip, lsl #1
   846b2:	e5e7      	b.n	84284 <_malloc_r+0x90>
   846b4:	f10a 0a10 	add.w	sl, sl, #16
   846b8:	e6a3      	b.n	84402 <_malloc_r+0x20e>
   846ba:	2b54      	cmp	r3, #84	; 0x54
   846bc:	d81f      	bhi.n	846fe <_malloc_r+0x50a>
   846be:	0b0a      	lsrs	r2, r1, #12
   846c0:	326e      	adds	r2, #110	; 0x6e
   846c2:	0050      	lsls	r0, r2, #1
   846c4:	e74f      	b.n	84566 <_malloc_r+0x372>
   846c6:	f3cb 010b 	ubfx	r1, fp, #0, #12
   846ca:	2900      	cmp	r1, #0
   846cc:	f47f aeb1 	bne.w	84432 <_malloc_r+0x23e>
   846d0:	eb0a 0109 	add.w	r1, sl, r9
   846d4:	68ba      	ldr	r2, [r7, #8]
   846d6:	f041 0101 	orr.w	r1, r1, #1
   846da:	6051      	str	r1, [r2, #4]
   846dc:	e6f6      	b.n	844cc <_malloc_r+0x2d8>
   846de:	21fc      	movs	r1, #252	; 0xfc
   846e0:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   846e4:	e5ce      	b.n	84284 <_malloc_r+0x90>
   846e6:	2201      	movs	r2, #1
   846e8:	f04f 0a00 	mov.w	sl, #0
   846ec:	e6cb      	b.n	84486 <_malloc_r+0x292>
   846ee:	f104 0108 	add.w	r1, r4, #8
   846f2:	4630      	mov	r0, r6
   846f4:	f7ff fa80 	bl	83bf8 <_free_r>
   846f8:	f8da 3000 	ldr.w	r3, [sl]
   846fc:	e6e6      	b.n	844cc <_malloc_r+0x2d8>
   846fe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84702:	d803      	bhi.n	8470c <_malloc_r+0x518>
   84704:	0bca      	lsrs	r2, r1, #15
   84706:	3277      	adds	r2, #119	; 0x77
   84708:	0050      	lsls	r0, r2, #1
   8470a:	e72c      	b.n	84566 <_malloc_r+0x372>
   8470c:	f240 5254 	movw	r2, #1364	; 0x554
   84710:	4293      	cmp	r3, r2
   84712:	d803      	bhi.n	8471c <_malloc_r+0x528>
   84714:	0c8a      	lsrs	r2, r1, #18
   84716:	327c      	adds	r2, #124	; 0x7c
   84718:	0050      	lsls	r0, r2, #1
   8471a:	e724      	b.n	84566 <_malloc_r+0x372>
   8471c:	20fc      	movs	r0, #252	; 0xfc
   8471e:	227e      	movs	r2, #126	; 0x7e
   84720:	e721      	b.n	84566 <_malloc_r+0x372>
   84722:	687b      	ldr	r3, [r7, #4]
   84724:	e78d      	b.n	84642 <_malloc_r+0x44e>
   84726:	bf00      	nop
   84728:	20070598 	.word	0x20070598

0008472c <memchr>:
   8472c:	0783      	lsls	r3, r0, #30
   8472e:	b470      	push	{r4, r5, r6}
   84730:	b2c9      	uxtb	r1, r1
   84732:	d040      	beq.n	847b6 <memchr+0x8a>
   84734:	1e54      	subs	r4, r2, #1
   84736:	b32a      	cbz	r2, 84784 <memchr+0x58>
   84738:	7803      	ldrb	r3, [r0, #0]
   8473a:	428b      	cmp	r3, r1
   8473c:	d023      	beq.n	84786 <memchr+0x5a>
   8473e:	1c43      	adds	r3, r0, #1
   84740:	e004      	b.n	8474c <memchr+0x20>
   84742:	b1fc      	cbz	r4, 84784 <memchr+0x58>
   84744:	7805      	ldrb	r5, [r0, #0]
   84746:	4614      	mov	r4, r2
   84748:	428d      	cmp	r5, r1
   8474a:	d01c      	beq.n	84786 <memchr+0x5a>
   8474c:	f013 0f03 	tst.w	r3, #3
   84750:	4618      	mov	r0, r3
   84752:	f104 32ff 	add.w	r2, r4, #4294967295
   84756:	f103 0301 	add.w	r3, r3, #1
   8475a:	d1f2      	bne.n	84742 <memchr+0x16>
   8475c:	2c03      	cmp	r4, #3
   8475e:	d814      	bhi.n	8478a <memchr+0x5e>
   84760:	1e65      	subs	r5, r4, #1
   84762:	b354      	cbz	r4, 847ba <memchr+0x8e>
   84764:	7803      	ldrb	r3, [r0, #0]
   84766:	428b      	cmp	r3, r1
   84768:	d00d      	beq.n	84786 <memchr+0x5a>
   8476a:	1c42      	adds	r2, r0, #1
   8476c:	2300      	movs	r3, #0
   8476e:	e002      	b.n	84776 <memchr+0x4a>
   84770:	7804      	ldrb	r4, [r0, #0]
   84772:	428c      	cmp	r4, r1
   84774:	d007      	beq.n	84786 <memchr+0x5a>
   84776:	42ab      	cmp	r3, r5
   84778:	4610      	mov	r0, r2
   8477a:	f103 0301 	add.w	r3, r3, #1
   8477e:	f102 0201 	add.w	r2, r2, #1
   84782:	d1f5      	bne.n	84770 <memchr+0x44>
   84784:	2000      	movs	r0, #0
   84786:	bc70      	pop	{r4, r5, r6}
   84788:	4770      	bx	lr
   8478a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   8478e:	4603      	mov	r3, r0
   84790:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   84794:	681a      	ldr	r2, [r3, #0]
   84796:	4618      	mov	r0, r3
   84798:	4072      	eors	r2, r6
   8479a:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   8479e:	ea25 0202 	bic.w	r2, r5, r2
   847a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   847a6:	f103 0304 	add.w	r3, r3, #4
   847aa:	d1d9      	bne.n	84760 <memchr+0x34>
   847ac:	3c04      	subs	r4, #4
   847ae:	2c03      	cmp	r4, #3
   847b0:	4618      	mov	r0, r3
   847b2:	d8ef      	bhi.n	84794 <memchr+0x68>
   847b4:	e7d4      	b.n	84760 <memchr+0x34>
   847b6:	4614      	mov	r4, r2
   847b8:	e7d0      	b.n	8475c <memchr+0x30>
   847ba:	4620      	mov	r0, r4
   847bc:	e7e3      	b.n	84786 <memchr+0x5a>
   847be:	bf00      	nop

000847c0 <memcpy>:
   847c0:	4684      	mov	ip, r0
   847c2:	ea41 0300 	orr.w	r3, r1, r0
   847c6:	f013 0303 	ands.w	r3, r3, #3
   847ca:	d149      	bne.n	84860 <memcpy+0xa0>
   847cc:	3a40      	subs	r2, #64	; 0x40
   847ce:	d323      	bcc.n	84818 <memcpy+0x58>
   847d0:	680b      	ldr	r3, [r1, #0]
   847d2:	6003      	str	r3, [r0, #0]
   847d4:	684b      	ldr	r3, [r1, #4]
   847d6:	6043      	str	r3, [r0, #4]
   847d8:	688b      	ldr	r3, [r1, #8]
   847da:	6083      	str	r3, [r0, #8]
   847dc:	68cb      	ldr	r3, [r1, #12]
   847de:	60c3      	str	r3, [r0, #12]
   847e0:	690b      	ldr	r3, [r1, #16]
   847e2:	6103      	str	r3, [r0, #16]
   847e4:	694b      	ldr	r3, [r1, #20]
   847e6:	6143      	str	r3, [r0, #20]
   847e8:	698b      	ldr	r3, [r1, #24]
   847ea:	6183      	str	r3, [r0, #24]
   847ec:	69cb      	ldr	r3, [r1, #28]
   847ee:	61c3      	str	r3, [r0, #28]
   847f0:	6a0b      	ldr	r3, [r1, #32]
   847f2:	6203      	str	r3, [r0, #32]
   847f4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   847f6:	6243      	str	r3, [r0, #36]	; 0x24
   847f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   847fa:	6283      	str	r3, [r0, #40]	; 0x28
   847fc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   847fe:	62c3      	str	r3, [r0, #44]	; 0x2c
   84800:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84802:	6303      	str	r3, [r0, #48]	; 0x30
   84804:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84806:	6343      	str	r3, [r0, #52]	; 0x34
   84808:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8480a:	6383      	str	r3, [r0, #56]	; 0x38
   8480c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8480e:	63c3      	str	r3, [r0, #60]	; 0x3c
   84810:	3040      	adds	r0, #64	; 0x40
   84812:	3140      	adds	r1, #64	; 0x40
   84814:	3a40      	subs	r2, #64	; 0x40
   84816:	d2db      	bcs.n	847d0 <memcpy+0x10>
   84818:	3230      	adds	r2, #48	; 0x30
   8481a:	d30b      	bcc.n	84834 <memcpy+0x74>
   8481c:	680b      	ldr	r3, [r1, #0]
   8481e:	6003      	str	r3, [r0, #0]
   84820:	684b      	ldr	r3, [r1, #4]
   84822:	6043      	str	r3, [r0, #4]
   84824:	688b      	ldr	r3, [r1, #8]
   84826:	6083      	str	r3, [r0, #8]
   84828:	68cb      	ldr	r3, [r1, #12]
   8482a:	60c3      	str	r3, [r0, #12]
   8482c:	3010      	adds	r0, #16
   8482e:	3110      	adds	r1, #16
   84830:	3a10      	subs	r2, #16
   84832:	d2f3      	bcs.n	8481c <memcpy+0x5c>
   84834:	320c      	adds	r2, #12
   84836:	d305      	bcc.n	84844 <memcpy+0x84>
   84838:	f851 3b04 	ldr.w	r3, [r1], #4
   8483c:	f840 3b04 	str.w	r3, [r0], #4
   84840:	3a04      	subs	r2, #4
   84842:	d2f9      	bcs.n	84838 <memcpy+0x78>
   84844:	3204      	adds	r2, #4
   84846:	d008      	beq.n	8485a <memcpy+0x9a>
   84848:	07d2      	lsls	r2, r2, #31
   8484a:	bf1c      	itt	ne
   8484c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84850:	f800 3b01 	strbne.w	r3, [r0], #1
   84854:	d301      	bcc.n	8485a <memcpy+0x9a>
   84856:	880b      	ldrh	r3, [r1, #0]
   84858:	8003      	strh	r3, [r0, #0]
   8485a:	4660      	mov	r0, ip
   8485c:	4770      	bx	lr
   8485e:	bf00      	nop
   84860:	2a08      	cmp	r2, #8
   84862:	d313      	bcc.n	8488c <memcpy+0xcc>
   84864:	078b      	lsls	r3, r1, #30
   84866:	d0b1      	beq.n	847cc <memcpy+0xc>
   84868:	f010 0303 	ands.w	r3, r0, #3
   8486c:	d0ae      	beq.n	847cc <memcpy+0xc>
   8486e:	f1c3 0304 	rsb	r3, r3, #4
   84872:	1ad2      	subs	r2, r2, r3
   84874:	07db      	lsls	r3, r3, #31
   84876:	bf1c      	itt	ne
   84878:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8487c:	f800 3b01 	strbne.w	r3, [r0], #1
   84880:	d3a4      	bcc.n	847cc <memcpy+0xc>
   84882:	f831 3b02 	ldrh.w	r3, [r1], #2
   84886:	f820 3b02 	strh.w	r3, [r0], #2
   8488a:	e79f      	b.n	847cc <memcpy+0xc>
   8488c:	3a04      	subs	r2, #4
   8488e:	d3d9      	bcc.n	84844 <memcpy+0x84>
   84890:	3a01      	subs	r2, #1
   84892:	f811 3b01 	ldrb.w	r3, [r1], #1
   84896:	f800 3b01 	strb.w	r3, [r0], #1
   8489a:	d2f9      	bcs.n	84890 <memcpy+0xd0>
   8489c:	780b      	ldrb	r3, [r1, #0]
   8489e:	7003      	strb	r3, [r0, #0]
   848a0:	784b      	ldrb	r3, [r1, #1]
   848a2:	7043      	strb	r3, [r0, #1]
   848a4:	788b      	ldrb	r3, [r1, #2]
   848a6:	7083      	strb	r3, [r0, #2]
   848a8:	4660      	mov	r0, ip
   848aa:	4770      	bx	lr

000848ac <memmove>:
   848ac:	4288      	cmp	r0, r1
   848ae:	b4f0      	push	{r4, r5, r6, r7}
   848b0:	d910      	bls.n	848d4 <memmove+0x28>
   848b2:	188c      	adds	r4, r1, r2
   848b4:	42a0      	cmp	r0, r4
   848b6:	d20d      	bcs.n	848d4 <memmove+0x28>
   848b8:	1885      	adds	r5, r0, r2
   848ba:	1e53      	subs	r3, r2, #1
   848bc:	b142      	cbz	r2, 848d0 <memmove+0x24>
   848be:	4621      	mov	r1, r4
   848c0:	462a      	mov	r2, r5
   848c2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   848c6:	3b01      	subs	r3, #1
   848c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   848cc:	1c5c      	adds	r4, r3, #1
   848ce:	d1f8      	bne.n	848c2 <memmove+0x16>
   848d0:	bcf0      	pop	{r4, r5, r6, r7}
   848d2:	4770      	bx	lr
   848d4:	2a0f      	cmp	r2, #15
   848d6:	d944      	bls.n	84962 <memmove+0xb6>
   848d8:	ea40 0301 	orr.w	r3, r0, r1
   848dc:	079b      	lsls	r3, r3, #30
   848de:	d144      	bne.n	8496a <memmove+0xbe>
   848e0:	f1a2 0710 	sub.w	r7, r2, #16
   848e4:	093f      	lsrs	r7, r7, #4
   848e6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   848ea:	3610      	adds	r6, #16
   848ec:	460c      	mov	r4, r1
   848ee:	4603      	mov	r3, r0
   848f0:	6825      	ldr	r5, [r4, #0]
   848f2:	3310      	adds	r3, #16
   848f4:	f843 5c10 	str.w	r5, [r3, #-16]
   848f8:	6865      	ldr	r5, [r4, #4]
   848fa:	3410      	adds	r4, #16
   848fc:	f843 5c0c 	str.w	r5, [r3, #-12]
   84900:	f854 5c08 	ldr.w	r5, [r4, #-8]
   84904:	f843 5c08 	str.w	r5, [r3, #-8]
   84908:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8490c:	f843 5c04 	str.w	r5, [r3, #-4]
   84910:	42b3      	cmp	r3, r6
   84912:	d1ed      	bne.n	848f0 <memmove+0x44>
   84914:	1c7b      	adds	r3, r7, #1
   84916:	f002 0c0f 	and.w	ip, r2, #15
   8491a:	011b      	lsls	r3, r3, #4
   8491c:	f1bc 0f03 	cmp.w	ip, #3
   84920:	4419      	add	r1, r3
   84922:	4403      	add	r3, r0
   84924:	d923      	bls.n	8496e <memmove+0xc2>
   84926:	460e      	mov	r6, r1
   84928:	461d      	mov	r5, r3
   8492a:	4664      	mov	r4, ip
   8492c:	f856 7b04 	ldr.w	r7, [r6], #4
   84930:	3c04      	subs	r4, #4
   84932:	2c03      	cmp	r4, #3
   84934:	f845 7b04 	str.w	r7, [r5], #4
   84938:	d8f8      	bhi.n	8492c <memmove+0x80>
   8493a:	f1ac 0404 	sub.w	r4, ip, #4
   8493e:	f024 0403 	bic.w	r4, r4, #3
   84942:	3404      	adds	r4, #4
   84944:	f002 0203 	and.w	r2, r2, #3
   84948:	4423      	add	r3, r4
   8494a:	4421      	add	r1, r4
   8494c:	2a00      	cmp	r2, #0
   8494e:	d0bf      	beq.n	848d0 <memmove+0x24>
   84950:	441a      	add	r2, r3
   84952:	f811 4b01 	ldrb.w	r4, [r1], #1
   84956:	f803 4b01 	strb.w	r4, [r3], #1
   8495a:	4293      	cmp	r3, r2
   8495c:	d1f9      	bne.n	84952 <memmove+0xa6>
   8495e:	bcf0      	pop	{r4, r5, r6, r7}
   84960:	4770      	bx	lr
   84962:	4603      	mov	r3, r0
   84964:	2a00      	cmp	r2, #0
   84966:	d1f3      	bne.n	84950 <memmove+0xa4>
   84968:	e7b2      	b.n	848d0 <memmove+0x24>
   8496a:	4603      	mov	r3, r0
   8496c:	e7f0      	b.n	84950 <memmove+0xa4>
   8496e:	4662      	mov	r2, ip
   84970:	2a00      	cmp	r2, #0
   84972:	d1ed      	bne.n	84950 <memmove+0xa4>
   84974:	e7ac      	b.n	848d0 <memmove+0x24>
   84976:	bf00      	nop

00084978 <__malloc_lock>:
   84978:	4770      	bx	lr
   8497a:	bf00      	nop

0008497c <__malloc_unlock>:
   8497c:	4770      	bx	lr
   8497e:	bf00      	nop

00084980 <_realloc_r>:
   84980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84984:	460c      	mov	r4, r1
   84986:	b083      	sub	sp, #12
   84988:	4690      	mov	r8, r2
   8498a:	4681      	mov	r9, r0
   8498c:	2900      	cmp	r1, #0
   8498e:	f000 80ba 	beq.w	84b06 <_realloc_r+0x186>
   84992:	f7ff fff1 	bl	84978 <__malloc_lock>
   84996:	f108 060b 	add.w	r6, r8, #11
   8499a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8499e:	2e16      	cmp	r6, #22
   849a0:	f023 0503 	bic.w	r5, r3, #3
   849a4:	f1a4 0708 	sub.w	r7, r4, #8
   849a8:	d84b      	bhi.n	84a42 <_realloc_r+0xc2>
   849aa:	2110      	movs	r1, #16
   849ac:	460e      	mov	r6, r1
   849ae:	45b0      	cmp	r8, r6
   849b0:	d84c      	bhi.n	84a4c <_realloc_r+0xcc>
   849b2:	428d      	cmp	r5, r1
   849b4:	da51      	bge.n	84a5a <_realloc_r+0xda>
   849b6:	f8df b384 	ldr.w	fp, [pc, #900]	; 84d3c <_realloc_r+0x3bc>
   849ba:	1978      	adds	r0, r7, r5
   849bc:	f8db e008 	ldr.w	lr, [fp, #8]
   849c0:	4586      	cmp	lr, r0
   849c2:	f000 80a6 	beq.w	84b12 <_realloc_r+0x192>
   849c6:	6842      	ldr	r2, [r0, #4]
   849c8:	f022 0c01 	bic.w	ip, r2, #1
   849cc:	4484      	add	ip, r0
   849ce:	f8dc c004 	ldr.w	ip, [ip, #4]
   849d2:	f01c 0f01 	tst.w	ip, #1
   849d6:	d054      	beq.n	84a82 <_realloc_r+0x102>
   849d8:	2200      	movs	r2, #0
   849da:	4610      	mov	r0, r2
   849dc:	07db      	lsls	r3, r3, #31
   849de:	d46f      	bmi.n	84ac0 <_realloc_r+0x140>
   849e0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   849e4:	ebc3 0a07 	rsb	sl, r3, r7
   849e8:	f8da 3004 	ldr.w	r3, [sl, #4]
   849ec:	f023 0303 	bic.w	r3, r3, #3
   849f0:	442b      	add	r3, r5
   849f2:	2800      	cmp	r0, #0
   849f4:	d062      	beq.n	84abc <_realloc_r+0x13c>
   849f6:	4570      	cmp	r0, lr
   849f8:	f000 80e9 	beq.w	84bce <_realloc_r+0x24e>
   849fc:	eb02 0e03 	add.w	lr, r2, r3
   84a00:	458e      	cmp	lr, r1
   84a02:	db5b      	blt.n	84abc <_realloc_r+0x13c>
   84a04:	68c3      	ldr	r3, [r0, #12]
   84a06:	6882      	ldr	r2, [r0, #8]
   84a08:	46d0      	mov	r8, sl
   84a0a:	60d3      	str	r3, [r2, #12]
   84a0c:	609a      	str	r2, [r3, #8]
   84a0e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   84a12:	f8da 300c 	ldr.w	r3, [sl, #12]
   84a16:	1f2a      	subs	r2, r5, #4
   84a18:	2a24      	cmp	r2, #36	; 0x24
   84a1a:	60cb      	str	r3, [r1, #12]
   84a1c:	6099      	str	r1, [r3, #8]
   84a1e:	f200 8123 	bhi.w	84c68 <_realloc_r+0x2e8>
   84a22:	2a13      	cmp	r2, #19
   84a24:	f240 80b0 	bls.w	84b88 <_realloc_r+0x208>
   84a28:	6823      	ldr	r3, [r4, #0]
   84a2a:	2a1b      	cmp	r2, #27
   84a2c:	f8ca 3008 	str.w	r3, [sl, #8]
   84a30:	6863      	ldr	r3, [r4, #4]
   84a32:	f8ca 300c 	str.w	r3, [sl, #12]
   84a36:	f200 812b 	bhi.w	84c90 <_realloc_r+0x310>
   84a3a:	3408      	adds	r4, #8
   84a3c:	f10a 0310 	add.w	r3, sl, #16
   84a40:	e0a3      	b.n	84b8a <_realloc_r+0x20a>
   84a42:	f026 0607 	bic.w	r6, r6, #7
   84a46:	2e00      	cmp	r6, #0
   84a48:	4631      	mov	r1, r6
   84a4a:	dab0      	bge.n	849ae <_realloc_r+0x2e>
   84a4c:	230c      	movs	r3, #12
   84a4e:	2000      	movs	r0, #0
   84a50:	f8c9 3000 	str.w	r3, [r9]
   84a54:	b003      	add	sp, #12
   84a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84a5a:	46a0      	mov	r8, r4
   84a5c:	1baa      	subs	r2, r5, r6
   84a5e:	2a0f      	cmp	r2, #15
   84a60:	f003 0301 	and.w	r3, r3, #1
   84a64:	d81a      	bhi.n	84a9c <_realloc_r+0x11c>
   84a66:	432b      	orrs	r3, r5
   84a68:	607b      	str	r3, [r7, #4]
   84a6a:	443d      	add	r5, r7
   84a6c:	686b      	ldr	r3, [r5, #4]
   84a6e:	f043 0301 	orr.w	r3, r3, #1
   84a72:	606b      	str	r3, [r5, #4]
   84a74:	4648      	mov	r0, r9
   84a76:	f7ff ff81 	bl	8497c <__malloc_unlock>
   84a7a:	4640      	mov	r0, r8
   84a7c:	b003      	add	sp, #12
   84a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84a82:	f022 0203 	bic.w	r2, r2, #3
   84a86:	eb02 0c05 	add.w	ip, r2, r5
   84a8a:	458c      	cmp	ip, r1
   84a8c:	dba6      	blt.n	849dc <_realloc_r+0x5c>
   84a8e:	68c2      	ldr	r2, [r0, #12]
   84a90:	6881      	ldr	r1, [r0, #8]
   84a92:	46a0      	mov	r8, r4
   84a94:	60ca      	str	r2, [r1, #12]
   84a96:	4665      	mov	r5, ip
   84a98:	6091      	str	r1, [r2, #8]
   84a9a:	e7df      	b.n	84a5c <_realloc_r+0xdc>
   84a9c:	19b9      	adds	r1, r7, r6
   84a9e:	4333      	orrs	r3, r6
   84aa0:	f042 0001 	orr.w	r0, r2, #1
   84aa4:	607b      	str	r3, [r7, #4]
   84aa6:	440a      	add	r2, r1
   84aa8:	6048      	str	r0, [r1, #4]
   84aaa:	6853      	ldr	r3, [r2, #4]
   84aac:	3108      	adds	r1, #8
   84aae:	f043 0301 	orr.w	r3, r3, #1
   84ab2:	6053      	str	r3, [r2, #4]
   84ab4:	4648      	mov	r0, r9
   84ab6:	f7ff f89f 	bl	83bf8 <_free_r>
   84aba:	e7db      	b.n	84a74 <_realloc_r+0xf4>
   84abc:	428b      	cmp	r3, r1
   84abe:	da33      	bge.n	84b28 <_realloc_r+0x1a8>
   84ac0:	4641      	mov	r1, r8
   84ac2:	4648      	mov	r0, r9
   84ac4:	f7ff fb96 	bl	841f4 <_malloc_r>
   84ac8:	4680      	mov	r8, r0
   84aca:	2800      	cmp	r0, #0
   84acc:	d0d2      	beq.n	84a74 <_realloc_r+0xf4>
   84ace:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84ad2:	f1a0 0108 	sub.w	r1, r0, #8
   84ad6:	f023 0201 	bic.w	r2, r3, #1
   84ada:	443a      	add	r2, r7
   84adc:	4291      	cmp	r1, r2
   84ade:	f000 80bc 	beq.w	84c5a <_realloc_r+0x2da>
   84ae2:	1f2a      	subs	r2, r5, #4
   84ae4:	2a24      	cmp	r2, #36	; 0x24
   84ae6:	d86e      	bhi.n	84bc6 <_realloc_r+0x246>
   84ae8:	2a13      	cmp	r2, #19
   84aea:	d842      	bhi.n	84b72 <_realloc_r+0x1f2>
   84aec:	4603      	mov	r3, r0
   84aee:	4622      	mov	r2, r4
   84af0:	6811      	ldr	r1, [r2, #0]
   84af2:	6019      	str	r1, [r3, #0]
   84af4:	6851      	ldr	r1, [r2, #4]
   84af6:	6059      	str	r1, [r3, #4]
   84af8:	6892      	ldr	r2, [r2, #8]
   84afa:	609a      	str	r2, [r3, #8]
   84afc:	4621      	mov	r1, r4
   84afe:	4648      	mov	r0, r9
   84b00:	f7ff f87a 	bl	83bf8 <_free_r>
   84b04:	e7b6      	b.n	84a74 <_realloc_r+0xf4>
   84b06:	4611      	mov	r1, r2
   84b08:	b003      	add	sp, #12
   84b0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84b0e:	f7ff bb71 	b.w	841f4 <_malloc_r>
   84b12:	f8de 2004 	ldr.w	r2, [lr, #4]
   84b16:	f106 0c10 	add.w	ip, r6, #16
   84b1a:	f022 0203 	bic.w	r2, r2, #3
   84b1e:	1950      	adds	r0, r2, r5
   84b20:	4560      	cmp	r0, ip
   84b22:	da3d      	bge.n	84ba0 <_realloc_r+0x220>
   84b24:	4670      	mov	r0, lr
   84b26:	e759      	b.n	849dc <_realloc_r+0x5c>
   84b28:	46d0      	mov	r8, sl
   84b2a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   84b2e:	f8da 100c 	ldr.w	r1, [sl, #12]
   84b32:	1f2a      	subs	r2, r5, #4
   84b34:	2a24      	cmp	r2, #36	; 0x24
   84b36:	60c1      	str	r1, [r0, #12]
   84b38:	6088      	str	r0, [r1, #8]
   84b3a:	f200 80a0 	bhi.w	84c7e <_realloc_r+0x2fe>
   84b3e:	2a13      	cmp	r2, #19
   84b40:	f240 809b 	bls.w	84c7a <_realloc_r+0x2fa>
   84b44:	6821      	ldr	r1, [r4, #0]
   84b46:	2a1b      	cmp	r2, #27
   84b48:	f8ca 1008 	str.w	r1, [sl, #8]
   84b4c:	6861      	ldr	r1, [r4, #4]
   84b4e:	f8ca 100c 	str.w	r1, [sl, #12]
   84b52:	f200 80b2 	bhi.w	84cba <_realloc_r+0x33a>
   84b56:	3408      	adds	r4, #8
   84b58:	f10a 0210 	add.w	r2, sl, #16
   84b5c:	6821      	ldr	r1, [r4, #0]
   84b5e:	461d      	mov	r5, r3
   84b60:	6011      	str	r1, [r2, #0]
   84b62:	6861      	ldr	r1, [r4, #4]
   84b64:	4657      	mov	r7, sl
   84b66:	6051      	str	r1, [r2, #4]
   84b68:	68a3      	ldr	r3, [r4, #8]
   84b6a:	6093      	str	r3, [r2, #8]
   84b6c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84b70:	e774      	b.n	84a5c <_realloc_r+0xdc>
   84b72:	6823      	ldr	r3, [r4, #0]
   84b74:	2a1b      	cmp	r2, #27
   84b76:	6003      	str	r3, [r0, #0]
   84b78:	6863      	ldr	r3, [r4, #4]
   84b7a:	6043      	str	r3, [r0, #4]
   84b7c:	d862      	bhi.n	84c44 <_realloc_r+0x2c4>
   84b7e:	f100 0308 	add.w	r3, r0, #8
   84b82:	f104 0208 	add.w	r2, r4, #8
   84b86:	e7b3      	b.n	84af0 <_realloc_r+0x170>
   84b88:	4643      	mov	r3, r8
   84b8a:	6822      	ldr	r2, [r4, #0]
   84b8c:	4675      	mov	r5, lr
   84b8e:	601a      	str	r2, [r3, #0]
   84b90:	6862      	ldr	r2, [r4, #4]
   84b92:	4657      	mov	r7, sl
   84b94:	605a      	str	r2, [r3, #4]
   84b96:	68a2      	ldr	r2, [r4, #8]
   84b98:	609a      	str	r2, [r3, #8]
   84b9a:	f8da 3004 	ldr.w	r3, [sl, #4]
   84b9e:	e75d      	b.n	84a5c <_realloc_r+0xdc>
   84ba0:	1b83      	subs	r3, r0, r6
   84ba2:	4437      	add	r7, r6
   84ba4:	f043 0301 	orr.w	r3, r3, #1
   84ba8:	f8cb 7008 	str.w	r7, [fp, #8]
   84bac:	607b      	str	r3, [r7, #4]
   84bae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84bb2:	4648      	mov	r0, r9
   84bb4:	f003 0301 	and.w	r3, r3, #1
   84bb8:	431e      	orrs	r6, r3
   84bba:	f844 6c04 	str.w	r6, [r4, #-4]
   84bbe:	f7ff fedd 	bl	8497c <__malloc_unlock>
   84bc2:	4620      	mov	r0, r4
   84bc4:	e75a      	b.n	84a7c <_realloc_r+0xfc>
   84bc6:	4621      	mov	r1, r4
   84bc8:	f7ff fe70 	bl	848ac <memmove>
   84bcc:	e796      	b.n	84afc <_realloc_r+0x17c>
   84bce:	eb02 0c03 	add.w	ip, r2, r3
   84bd2:	f106 0210 	add.w	r2, r6, #16
   84bd6:	4594      	cmp	ip, r2
   84bd8:	f6ff af70 	blt.w	84abc <_realloc_r+0x13c>
   84bdc:	4657      	mov	r7, sl
   84bde:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84be2:	f8da 300c 	ldr.w	r3, [sl, #12]
   84be6:	1f2a      	subs	r2, r5, #4
   84be8:	2a24      	cmp	r2, #36	; 0x24
   84bea:	60cb      	str	r3, [r1, #12]
   84bec:	6099      	str	r1, [r3, #8]
   84bee:	f200 8086 	bhi.w	84cfe <_realloc_r+0x37e>
   84bf2:	2a13      	cmp	r2, #19
   84bf4:	d977      	bls.n	84ce6 <_realloc_r+0x366>
   84bf6:	6823      	ldr	r3, [r4, #0]
   84bf8:	2a1b      	cmp	r2, #27
   84bfa:	f8ca 3008 	str.w	r3, [sl, #8]
   84bfe:	6863      	ldr	r3, [r4, #4]
   84c00:	f8ca 300c 	str.w	r3, [sl, #12]
   84c04:	f200 8084 	bhi.w	84d10 <_realloc_r+0x390>
   84c08:	3408      	adds	r4, #8
   84c0a:	f10a 0310 	add.w	r3, sl, #16
   84c0e:	6822      	ldr	r2, [r4, #0]
   84c10:	601a      	str	r2, [r3, #0]
   84c12:	6862      	ldr	r2, [r4, #4]
   84c14:	605a      	str	r2, [r3, #4]
   84c16:	68a2      	ldr	r2, [r4, #8]
   84c18:	609a      	str	r2, [r3, #8]
   84c1a:	ebc6 020c 	rsb	r2, r6, ip
   84c1e:	eb0a 0306 	add.w	r3, sl, r6
   84c22:	f042 0201 	orr.w	r2, r2, #1
   84c26:	f8cb 3008 	str.w	r3, [fp, #8]
   84c2a:	605a      	str	r2, [r3, #4]
   84c2c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84c30:	4648      	mov	r0, r9
   84c32:	f003 0301 	and.w	r3, r3, #1
   84c36:	431e      	orrs	r6, r3
   84c38:	f8ca 6004 	str.w	r6, [sl, #4]
   84c3c:	f7ff fe9e 	bl	8497c <__malloc_unlock>
   84c40:	4638      	mov	r0, r7
   84c42:	e71b      	b.n	84a7c <_realloc_r+0xfc>
   84c44:	68a3      	ldr	r3, [r4, #8]
   84c46:	2a24      	cmp	r2, #36	; 0x24
   84c48:	6083      	str	r3, [r0, #8]
   84c4a:	68e3      	ldr	r3, [r4, #12]
   84c4c:	60c3      	str	r3, [r0, #12]
   84c4e:	d02b      	beq.n	84ca8 <_realloc_r+0x328>
   84c50:	f100 0310 	add.w	r3, r0, #16
   84c54:	f104 0210 	add.w	r2, r4, #16
   84c58:	e74a      	b.n	84af0 <_realloc_r+0x170>
   84c5a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   84c5e:	46a0      	mov	r8, r4
   84c60:	f022 0203 	bic.w	r2, r2, #3
   84c64:	4415      	add	r5, r2
   84c66:	e6f9      	b.n	84a5c <_realloc_r+0xdc>
   84c68:	4621      	mov	r1, r4
   84c6a:	4640      	mov	r0, r8
   84c6c:	4675      	mov	r5, lr
   84c6e:	4657      	mov	r7, sl
   84c70:	f7ff fe1c 	bl	848ac <memmove>
   84c74:	f8da 3004 	ldr.w	r3, [sl, #4]
   84c78:	e6f0      	b.n	84a5c <_realloc_r+0xdc>
   84c7a:	4642      	mov	r2, r8
   84c7c:	e76e      	b.n	84b5c <_realloc_r+0x1dc>
   84c7e:	4621      	mov	r1, r4
   84c80:	4640      	mov	r0, r8
   84c82:	461d      	mov	r5, r3
   84c84:	4657      	mov	r7, sl
   84c86:	f7ff fe11 	bl	848ac <memmove>
   84c8a:	f8da 3004 	ldr.w	r3, [sl, #4]
   84c8e:	e6e5      	b.n	84a5c <_realloc_r+0xdc>
   84c90:	68a3      	ldr	r3, [r4, #8]
   84c92:	2a24      	cmp	r2, #36	; 0x24
   84c94:	f8ca 3010 	str.w	r3, [sl, #16]
   84c98:	68e3      	ldr	r3, [r4, #12]
   84c9a:	f8ca 3014 	str.w	r3, [sl, #20]
   84c9e:	d018      	beq.n	84cd2 <_realloc_r+0x352>
   84ca0:	3410      	adds	r4, #16
   84ca2:	f10a 0318 	add.w	r3, sl, #24
   84ca6:	e770      	b.n	84b8a <_realloc_r+0x20a>
   84ca8:	6922      	ldr	r2, [r4, #16]
   84caa:	f100 0318 	add.w	r3, r0, #24
   84cae:	6102      	str	r2, [r0, #16]
   84cb0:	6961      	ldr	r1, [r4, #20]
   84cb2:	f104 0218 	add.w	r2, r4, #24
   84cb6:	6141      	str	r1, [r0, #20]
   84cb8:	e71a      	b.n	84af0 <_realloc_r+0x170>
   84cba:	68a1      	ldr	r1, [r4, #8]
   84cbc:	2a24      	cmp	r2, #36	; 0x24
   84cbe:	f8ca 1010 	str.w	r1, [sl, #16]
   84cc2:	68e1      	ldr	r1, [r4, #12]
   84cc4:	f8ca 1014 	str.w	r1, [sl, #20]
   84cc8:	d00f      	beq.n	84cea <_realloc_r+0x36a>
   84cca:	3410      	adds	r4, #16
   84ccc:	f10a 0218 	add.w	r2, sl, #24
   84cd0:	e744      	b.n	84b5c <_realloc_r+0x1dc>
   84cd2:	6922      	ldr	r2, [r4, #16]
   84cd4:	f10a 0320 	add.w	r3, sl, #32
   84cd8:	f8ca 2018 	str.w	r2, [sl, #24]
   84cdc:	6962      	ldr	r2, [r4, #20]
   84cde:	3418      	adds	r4, #24
   84ce0:	f8ca 201c 	str.w	r2, [sl, #28]
   84ce4:	e751      	b.n	84b8a <_realloc_r+0x20a>
   84ce6:	463b      	mov	r3, r7
   84ce8:	e791      	b.n	84c0e <_realloc_r+0x28e>
   84cea:	6921      	ldr	r1, [r4, #16]
   84cec:	f10a 0220 	add.w	r2, sl, #32
   84cf0:	f8ca 1018 	str.w	r1, [sl, #24]
   84cf4:	6961      	ldr	r1, [r4, #20]
   84cf6:	3418      	adds	r4, #24
   84cf8:	f8ca 101c 	str.w	r1, [sl, #28]
   84cfc:	e72e      	b.n	84b5c <_realloc_r+0x1dc>
   84cfe:	4621      	mov	r1, r4
   84d00:	4638      	mov	r0, r7
   84d02:	f8cd c004 	str.w	ip, [sp, #4]
   84d06:	f7ff fdd1 	bl	848ac <memmove>
   84d0a:	f8dd c004 	ldr.w	ip, [sp, #4]
   84d0e:	e784      	b.n	84c1a <_realloc_r+0x29a>
   84d10:	68a3      	ldr	r3, [r4, #8]
   84d12:	2a24      	cmp	r2, #36	; 0x24
   84d14:	f8ca 3010 	str.w	r3, [sl, #16]
   84d18:	68e3      	ldr	r3, [r4, #12]
   84d1a:	f8ca 3014 	str.w	r3, [sl, #20]
   84d1e:	d003      	beq.n	84d28 <_realloc_r+0x3a8>
   84d20:	3410      	adds	r4, #16
   84d22:	f10a 0318 	add.w	r3, sl, #24
   84d26:	e772      	b.n	84c0e <_realloc_r+0x28e>
   84d28:	6922      	ldr	r2, [r4, #16]
   84d2a:	f10a 0320 	add.w	r3, sl, #32
   84d2e:	f8ca 2018 	str.w	r2, [sl, #24]
   84d32:	6962      	ldr	r2, [r4, #20]
   84d34:	3418      	adds	r4, #24
   84d36:	f8ca 201c 	str.w	r2, [sl, #28]
   84d3a:	e768      	b.n	84c0e <_realloc_r+0x28e>
   84d3c:	20070598 	.word	0x20070598

00084d40 <_sbrk_r>:
   84d40:	b538      	push	{r3, r4, r5, lr}
   84d42:	4c07      	ldr	r4, [pc, #28]	; (84d60 <_sbrk_r+0x20>)
   84d44:	2300      	movs	r3, #0
   84d46:	4605      	mov	r5, r0
   84d48:	4608      	mov	r0, r1
   84d4a:	6023      	str	r3, [r4, #0]
   84d4c:	f7fc fb94 	bl	81478 <_sbrk>
   84d50:	1c43      	adds	r3, r0, #1
   84d52:	d000      	beq.n	84d56 <_sbrk_r+0x16>
   84d54:	bd38      	pop	{r3, r4, r5, pc}
   84d56:	6823      	ldr	r3, [r4, #0]
   84d58:	2b00      	cmp	r3, #0
   84d5a:	d0fb      	beq.n	84d54 <_sbrk_r+0x14>
   84d5c:	602b      	str	r3, [r5, #0]
   84d5e:	bd38      	pop	{r3, r4, r5, pc}
   84d60:	20070b74 	.word	0x20070b74

00084d64 <__sread>:
   84d64:	b510      	push	{r4, lr}
   84d66:	460c      	mov	r4, r1
   84d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84d6c:	f000 f9c2 	bl	850f4 <_read_r>
   84d70:	2800      	cmp	r0, #0
   84d72:	db03      	blt.n	84d7c <__sread+0x18>
   84d74:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84d76:	4403      	add	r3, r0
   84d78:	6523      	str	r3, [r4, #80]	; 0x50
   84d7a:	bd10      	pop	{r4, pc}
   84d7c:	89a3      	ldrh	r3, [r4, #12]
   84d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84d82:	81a3      	strh	r3, [r4, #12]
   84d84:	bd10      	pop	{r4, pc}
   84d86:	bf00      	nop

00084d88 <__swrite>:
   84d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d8c:	460c      	mov	r4, r1
   84d8e:	8989      	ldrh	r1, [r1, #12]
   84d90:	461d      	mov	r5, r3
   84d92:	05cb      	lsls	r3, r1, #23
   84d94:	4616      	mov	r6, r2
   84d96:	4607      	mov	r7, r0
   84d98:	d506      	bpl.n	84da8 <__swrite+0x20>
   84d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84d9e:	2200      	movs	r2, #0
   84da0:	2302      	movs	r3, #2
   84da2:	f000 f993 	bl	850cc <_lseek_r>
   84da6:	89a1      	ldrh	r1, [r4, #12]
   84da8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84dac:	81a1      	strh	r1, [r4, #12]
   84dae:	4638      	mov	r0, r7
   84db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84db4:	4632      	mov	r2, r6
   84db6:	462b      	mov	r3, r5
   84db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84dbc:	f000 b89e 	b.w	84efc <_write_r>

00084dc0 <__sseek>:
   84dc0:	b510      	push	{r4, lr}
   84dc2:	460c      	mov	r4, r1
   84dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84dc8:	f000 f980 	bl	850cc <_lseek_r>
   84dcc:	89a3      	ldrh	r3, [r4, #12]
   84dce:	1c42      	adds	r2, r0, #1
   84dd0:	bf0e      	itee	eq
   84dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84dda:	6520      	strne	r0, [r4, #80]	; 0x50
   84ddc:	81a3      	strh	r3, [r4, #12]
   84dde:	bd10      	pop	{r4, pc}

00084de0 <__sclose>:
   84de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84de4:	f000 b8f2 	b.w	84fcc <_close_r>

00084de8 <__swbuf_r>:
   84de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84dea:	460d      	mov	r5, r1
   84dec:	4614      	mov	r4, r2
   84dee:	4607      	mov	r7, r0
   84df0:	b110      	cbz	r0, 84df8 <__swbuf_r+0x10>
   84df2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84df4:	2b00      	cmp	r3, #0
   84df6:	d048      	beq.n	84e8a <__swbuf_r+0xa2>
   84df8:	89a2      	ldrh	r2, [r4, #12]
   84dfa:	69a0      	ldr	r0, [r4, #24]
   84dfc:	b293      	uxth	r3, r2
   84dfe:	60a0      	str	r0, [r4, #8]
   84e00:	0718      	lsls	r0, r3, #28
   84e02:	d538      	bpl.n	84e76 <__swbuf_r+0x8e>
   84e04:	6926      	ldr	r6, [r4, #16]
   84e06:	2e00      	cmp	r6, #0
   84e08:	d035      	beq.n	84e76 <__swbuf_r+0x8e>
   84e0a:	0499      	lsls	r1, r3, #18
   84e0c:	b2ed      	uxtb	r5, r5
   84e0e:	d515      	bpl.n	84e3c <__swbuf_r+0x54>
   84e10:	6823      	ldr	r3, [r4, #0]
   84e12:	6962      	ldr	r2, [r4, #20]
   84e14:	1b9e      	subs	r6, r3, r6
   84e16:	4296      	cmp	r6, r2
   84e18:	da1c      	bge.n	84e54 <__swbuf_r+0x6c>
   84e1a:	3601      	adds	r6, #1
   84e1c:	68a2      	ldr	r2, [r4, #8]
   84e1e:	1c59      	adds	r1, r3, #1
   84e20:	3a01      	subs	r2, #1
   84e22:	60a2      	str	r2, [r4, #8]
   84e24:	6021      	str	r1, [r4, #0]
   84e26:	701d      	strb	r5, [r3, #0]
   84e28:	6963      	ldr	r3, [r4, #20]
   84e2a:	42b3      	cmp	r3, r6
   84e2c:	d01a      	beq.n	84e64 <__swbuf_r+0x7c>
   84e2e:	89a3      	ldrh	r3, [r4, #12]
   84e30:	07db      	lsls	r3, r3, #31
   84e32:	d501      	bpl.n	84e38 <__swbuf_r+0x50>
   84e34:	2d0a      	cmp	r5, #10
   84e36:	d015      	beq.n	84e64 <__swbuf_r+0x7c>
   84e38:	4628      	mov	r0, r5
   84e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84e3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   84e46:	6663      	str	r3, [r4, #100]	; 0x64
   84e48:	6823      	ldr	r3, [r4, #0]
   84e4a:	81a2      	strh	r2, [r4, #12]
   84e4c:	6962      	ldr	r2, [r4, #20]
   84e4e:	1b9e      	subs	r6, r3, r6
   84e50:	4296      	cmp	r6, r2
   84e52:	dbe2      	blt.n	84e1a <__swbuf_r+0x32>
   84e54:	4638      	mov	r0, r7
   84e56:	4621      	mov	r1, r4
   84e58:	f7fe fd6e 	bl	83938 <_fflush_r>
   84e5c:	b940      	cbnz	r0, 84e70 <__swbuf_r+0x88>
   84e5e:	6823      	ldr	r3, [r4, #0]
   84e60:	2601      	movs	r6, #1
   84e62:	e7db      	b.n	84e1c <__swbuf_r+0x34>
   84e64:	4638      	mov	r0, r7
   84e66:	4621      	mov	r1, r4
   84e68:	f7fe fd66 	bl	83938 <_fflush_r>
   84e6c:	2800      	cmp	r0, #0
   84e6e:	d0e3      	beq.n	84e38 <__swbuf_r+0x50>
   84e70:	f04f 30ff 	mov.w	r0, #4294967295
   84e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e76:	4638      	mov	r0, r7
   84e78:	4621      	mov	r1, r4
   84e7a:	f7fe fc47 	bl	8370c <__swsetup_r>
   84e7e:	2800      	cmp	r0, #0
   84e80:	d1f6      	bne.n	84e70 <__swbuf_r+0x88>
   84e82:	89a2      	ldrh	r2, [r4, #12]
   84e84:	6926      	ldr	r6, [r4, #16]
   84e86:	b293      	uxth	r3, r2
   84e88:	e7bf      	b.n	84e0a <__swbuf_r+0x22>
   84e8a:	f7fe fd71 	bl	83970 <__sinit>
   84e8e:	e7b3      	b.n	84df8 <__swbuf_r+0x10>

00084e90 <_wcrtomb_r>:
   84e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84e94:	461e      	mov	r6, r3
   84e96:	b086      	sub	sp, #24
   84e98:	460c      	mov	r4, r1
   84e9a:	4605      	mov	r5, r0
   84e9c:	4617      	mov	r7, r2
   84e9e:	4b0f      	ldr	r3, [pc, #60]	; (84edc <_wcrtomb_r+0x4c>)
   84ea0:	b191      	cbz	r1, 84ec8 <_wcrtomb_r+0x38>
   84ea2:	f8d3 8000 	ldr.w	r8, [r3]
   84ea6:	f7ff f923 	bl	840f0 <__locale_charset>
   84eaa:	9600      	str	r6, [sp, #0]
   84eac:	4603      	mov	r3, r0
   84eae:	4621      	mov	r1, r4
   84eb0:	463a      	mov	r2, r7
   84eb2:	4628      	mov	r0, r5
   84eb4:	47c0      	blx	r8
   84eb6:	1c43      	adds	r3, r0, #1
   84eb8:	d103      	bne.n	84ec2 <_wcrtomb_r+0x32>
   84eba:	2200      	movs	r2, #0
   84ebc:	238a      	movs	r3, #138	; 0x8a
   84ebe:	6032      	str	r2, [r6, #0]
   84ec0:	602b      	str	r3, [r5, #0]
   84ec2:	b006      	add	sp, #24
   84ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ec8:	681f      	ldr	r7, [r3, #0]
   84eca:	f7ff f911 	bl	840f0 <__locale_charset>
   84ece:	9600      	str	r6, [sp, #0]
   84ed0:	4603      	mov	r3, r0
   84ed2:	4622      	mov	r2, r4
   84ed4:	4628      	mov	r0, r5
   84ed6:	a903      	add	r1, sp, #12
   84ed8:	47b8      	blx	r7
   84eda:	e7ec      	b.n	84eb6 <_wcrtomb_r+0x26>
   84edc:	200709a8 	.word	0x200709a8

00084ee0 <__ascii_wctomb>:
   84ee0:	b121      	cbz	r1, 84eec <__ascii_wctomb+0xc>
   84ee2:	2aff      	cmp	r2, #255	; 0xff
   84ee4:	d804      	bhi.n	84ef0 <__ascii_wctomb+0x10>
   84ee6:	700a      	strb	r2, [r1, #0]
   84ee8:	2001      	movs	r0, #1
   84eea:	4770      	bx	lr
   84eec:	4608      	mov	r0, r1
   84eee:	4770      	bx	lr
   84ef0:	238a      	movs	r3, #138	; 0x8a
   84ef2:	6003      	str	r3, [r0, #0]
   84ef4:	f04f 30ff 	mov.w	r0, #4294967295
   84ef8:	4770      	bx	lr
   84efa:	bf00      	nop

00084efc <_write_r>:
   84efc:	b570      	push	{r4, r5, r6, lr}
   84efe:	4c08      	ldr	r4, [pc, #32]	; (84f20 <_write_r+0x24>)
   84f00:	4606      	mov	r6, r0
   84f02:	2500      	movs	r5, #0
   84f04:	4608      	mov	r0, r1
   84f06:	4611      	mov	r1, r2
   84f08:	461a      	mov	r2, r3
   84f0a:	6025      	str	r5, [r4, #0]
   84f0c:	f7fb fa1e 	bl	8034c <_write>
   84f10:	1c43      	adds	r3, r0, #1
   84f12:	d000      	beq.n	84f16 <_write_r+0x1a>
   84f14:	bd70      	pop	{r4, r5, r6, pc}
   84f16:	6823      	ldr	r3, [r4, #0]
   84f18:	2b00      	cmp	r3, #0
   84f1a:	d0fb      	beq.n	84f14 <_write_r+0x18>
   84f1c:	6033      	str	r3, [r6, #0]
   84f1e:	bd70      	pop	{r4, r5, r6, pc}
   84f20:	20070b74 	.word	0x20070b74

00084f24 <__register_exitproc>:
   84f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   84f26:	4c27      	ldr	r4, [pc, #156]	; (84fc4 <__register_exitproc+0xa0>)
   84f28:	b085      	sub	sp, #20
   84f2a:	6826      	ldr	r6, [r4, #0]
   84f2c:	4607      	mov	r7, r0
   84f2e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   84f32:	2c00      	cmp	r4, #0
   84f34:	d040      	beq.n	84fb8 <__register_exitproc+0x94>
   84f36:	6865      	ldr	r5, [r4, #4]
   84f38:	2d1f      	cmp	r5, #31
   84f3a:	dd1e      	ble.n	84f7a <__register_exitproc+0x56>
   84f3c:	4822      	ldr	r0, [pc, #136]	; (84fc8 <__register_exitproc+0xa4>)
   84f3e:	b918      	cbnz	r0, 84f48 <__register_exitproc+0x24>
   84f40:	f04f 30ff 	mov.w	r0, #4294967295
   84f44:	b005      	add	sp, #20
   84f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84f48:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84f4c:	9103      	str	r1, [sp, #12]
   84f4e:	9202      	str	r2, [sp, #8]
   84f50:	9301      	str	r3, [sp, #4]
   84f52:	f7ff f947 	bl	841e4 <malloc>
   84f56:	9903      	ldr	r1, [sp, #12]
   84f58:	4604      	mov	r4, r0
   84f5a:	9a02      	ldr	r2, [sp, #8]
   84f5c:	9b01      	ldr	r3, [sp, #4]
   84f5e:	2800      	cmp	r0, #0
   84f60:	d0ee      	beq.n	84f40 <__register_exitproc+0x1c>
   84f62:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   84f66:	2000      	movs	r0, #0
   84f68:	6025      	str	r5, [r4, #0]
   84f6a:	6060      	str	r0, [r4, #4]
   84f6c:	4605      	mov	r5, r0
   84f6e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84f72:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   84f76:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   84f7a:	b93f      	cbnz	r7, 84f8c <__register_exitproc+0x68>
   84f7c:	1c6b      	adds	r3, r5, #1
   84f7e:	2000      	movs	r0, #0
   84f80:	3502      	adds	r5, #2
   84f82:	6063      	str	r3, [r4, #4]
   84f84:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   84f88:	b005      	add	sp, #20
   84f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84f8c:	2601      	movs	r6, #1
   84f8e:	40ae      	lsls	r6, r5
   84f90:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84f94:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   84f98:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   84f9c:	2f02      	cmp	r7, #2
   84f9e:	ea42 0206 	orr.w	r2, r2, r6
   84fa2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   84fa6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   84faa:	d1e7      	bne.n	84f7c <__register_exitproc+0x58>
   84fac:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84fb0:	431e      	orrs	r6, r3
   84fb2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   84fb6:	e7e1      	b.n	84f7c <__register_exitproc+0x58>
   84fb8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   84fbc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84fc0:	e7b9      	b.n	84f36 <__register_exitproc+0x12>
   84fc2:	bf00      	nop
   84fc4:	0008577c 	.word	0x0008577c
   84fc8:	000841e5 	.word	0x000841e5

00084fcc <_close_r>:
   84fcc:	b538      	push	{r3, r4, r5, lr}
   84fce:	4c07      	ldr	r4, [pc, #28]	; (84fec <_close_r+0x20>)
   84fd0:	2300      	movs	r3, #0
   84fd2:	4605      	mov	r5, r0
   84fd4:	4608      	mov	r0, r1
   84fd6:	6023      	str	r3, [r4, #0]
   84fd8:	f7fc fa68 	bl	814ac <_close>
   84fdc:	1c43      	adds	r3, r0, #1
   84fde:	d000      	beq.n	84fe2 <_close_r+0x16>
   84fe0:	bd38      	pop	{r3, r4, r5, pc}
   84fe2:	6823      	ldr	r3, [r4, #0]
   84fe4:	2b00      	cmp	r3, #0
   84fe6:	d0fb      	beq.n	84fe0 <_close_r+0x14>
   84fe8:	602b      	str	r3, [r5, #0]
   84fea:	bd38      	pop	{r3, r4, r5, pc}
   84fec:	20070b74 	.word	0x20070b74

00084ff0 <_fclose_r>:
   84ff0:	b570      	push	{r4, r5, r6, lr}
   84ff2:	460c      	mov	r4, r1
   84ff4:	4605      	mov	r5, r0
   84ff6:	b131      	cbz	r1, 85006 <_fclose_r+0x16>
   84ff8:	b110      	cbz	r0, 85000 <_fclose_r+0x10>
   84ffa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84ffc:	2b00      	cmp	r3, #0
   84ffe:	d02f      	beq.n	85060 <_fclose_r+0x70>
   85000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85004:	b90b      	cbnz	r3, 8500a <_fclose_r+0x1a>
   85006:	2000      	movs	r0, #0
   85008:	bd70      	pop	{r4, r5, r6, pc}
   8500a:	4628      	mov	r0, r5
   8500c:	4621      	mov	r1, r4
   8500e:	f7fe fc93 	bl	83938 <_fflush_r>
   85012:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85014:	4606      	mov	r6, r0
   85016:	b133      	cbz	r3, 85026 <_fclose_r+0x36>
   85018:	4628      	mov	r0, r5
   8501a:	69e1      	ldr	r1, [r4, #28]
   8501c:	4798      	blx	r3
   8501e:	2800      	cmp	r0, #0
   85020:	bfb8      	it	lt
   85022:	f04f 36ff 	movlt.w	r6, #4294967295
   85026:	89a3      	ldrh	r3, [r4, #12]
   85028:	061b      	lsls	r3, r3, #24
   8502a:	d41c      	bmi.n	85066 <_fclose_r+0x76>
   8502c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8502e:	b141      	cbz	r1, 85042 <_fclose_r+0x52>
   85030:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85034:	4299      	cmp	r1, r3
   85036:	d002      	beq.n	8503e <_fclose_r+0x4e>
   85038:	4628      	mov	r0, r5
   8503a:	f7fe fddd 	bl	83bf8 <_free_r>
   8503e:	2300      	movs	r3, #0
   85040:	6323      	str	r3, [r4, #48]	; 0x30
   85042:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85044:	b121      	cbz	r1, 85050 <_fclose_r+0x60>
   85046:	4628      	mov	r0, r5
   85048:	f7fe fdd6 	bl	83bf8 <_free_r>
   8504c:	2300      	movs	r3, #0
   8504e:	6463      	str	r3, [r4, #68]	; 0x44
   85050:	f7fe fd08 	bl	83a64 <__sfp_lock_acquire>
   85054:	2300      	movs	r3, #0
   85056:	81a3      	strh	r3, [r4, #12]
   85058:	f7fe fd06 	bl	83a68 <__sfp_lock_release>
   8505c:	4630      	mov	r0, r6
   8505e:	bd70      	pop	{r4, r5, r6, pc}
   85060:	f7fe fc86 	bl	83970 <__sinit>
   85064:	e7cc      	b.n	85000 <_fclose_r+0x10>
   85066:	4628      	mov	r0, r5
   85068:	6921      	ldr	r1, [r4, #16]
   8506a:	f7fe fdc5 	bl	83bf8 <_free_r>
   8506e:	e7dd      	b.n	8502c <_fclose_r+0x3c>

00085070 <fclose>:
   85070:	4b02      	ldr	r3, [pc, #8]	; (8507c <fclose+0xc>)
   85072:	4601      	mov	r1, r0
   85074:	6818      	ldr	r0, [r3, #0]
   85076:	f7ff bfbb 	b.w	84ff0 <_fclose_r>
   8507a:	bf00      	nop
   8507c:	20070570 	.word	0x20070570

00085080 <_fstat_r>:
   85080:	b538      	push	{r3, r4, r5, lr}
   85082:	4c08      	ldr	r4, [pc, #32]	; (850a4 <_fstat_r+0x24>)
   85084:	2300      	movs	r3, #0
   85086:	4605      	mov	r5, r0
   85088:	4608      	mov	r0, r1
   8508a:	4611      	mov	r1, r2
   8508c:	6023      	str	r3, [r4, #0]
   8508e:	f7fc fa11 	bl	814b4 <_fstat>
   85092:	1c43      	adds	r3, r0, #1
   85094:	d000      	beq.n	85098 <_fstat_r+0x18>
   85096:	bd38      	pop	{r3, r4, r5, pc}
   85098:	6823      	ldr	r3, [r4, #0]
   8509a:	2b00      	cmp	r3, #0
   8509c:	d0fb      	beq.n	85096 <_fstat_r+0x16>
   8509e:	602b      	str	r3, [r5, #0]
   850a0:	bd38      	pop	{r3, r4, r5, pc}
   850a2:	bf00      	nop
   850a4:	20070b74 	.word	0x20070b74

000850a8 <_isatty_r>:
   850a8:	b538      	push	{r3, r4, r5, lr}
   850aa:	4c07      	ldr	r4, [pc, #28]	; (850c8 <_isatty_r+0x20>)
   850ac:	2300      	movs	r3, #0
   850ae:	4605      	mov	r5, r0
   850b0:	4608      	mov	r0, r1
   850b2:	6023      	str	r3, [r4, #0]
   850b4:	f7fc fa04 	bl	814c0 <_isatty>
   850b8:	1c43      	adds	r3, r0, #1
   850ba:	d000      	beq.n	850be <_isatty_r+0x16>
   850bc:	bd38      	pop	{r3, r4, r5, pc}
   850be:	6823      	ldr	r3, [r4, #0]
   850c0:	2b00      	cmp	r3, #0
   850c2:	d0fb      	beq.n	850bc <_isatty_r+0x14>
   850c4:	602b      	str	r3, [r5, #0]
   850c6:	bd38      	pop	{r3, r4, r5, pc}
   850c8:	20070b74 	.word	0x20070b74

000850cc <_lseek_r>:
   850cc:	b570      	push	{r4, r5, r6, lr}
   850ce:	4c08      	ldr	r4, [pc, #32]	; (850f0 <_lseek_r+0x24>)
   850d0:	4606      	mov	r6, r0
   850d2:	2500      	movs	r5, #0
   850d4:	4608      	mov	r0, r1
   850d6:	4611      	mov	r1, r2
   850d8:	461a      	mov	r2, r3
   850da:	6025      	str	r5, [r4, #0]
   850dc:	f7fc f9f2 	bl	814c4 <_lseek>
   850e0:	1c43      	adds	r3, r0, #1
   850e2:	d000      	beq.n	850e6 <_lseek_r+0x1a>
   850e4:	bd70      	pop	{r4, r5, r6, pc}
   850e6:	6823      	ldr	r3, [r4, #0]
   850e8:	2b00      	cmp	r3, #0
   850ea:	d0fb      	beq.n	850e4 <_lseek_r+0x18>
   850ec:	6033      	str	r3, [r6, #0]
   850ee:	bd70      	pop	{r4, r5, r6, pc}
   850f0:	20070b74 	.word	0x20070b74

000850f4 <_read_r>:
   850f4:	b570      	push	{r4, r5, r6, lr}
   850f6:	4c08      	ldr	r4, [pc, #32]	; (85118 <_read_r+0x24>)
   850f8:	4606      	mov	r6, r0
   850fa:	2500      	movs	r5, #0
   850fc:	4608      	mov	r0, r1
   850fe:	4611      	mov	r1, r2
   85100:	461a      	mov	r2, r3
   85102:	6025      	str	r5, [r4, #0]
   85104:	f7fb f902 	bl	8030c <_read>
   85108:	1c43      	adds	r3, r0, #1
   8510a:	d000      	beq.n	8510e <_read_r+0x1a>
   8510c:	bd70      	pop	{r4, r5, r6, pc}
   8510e:	6823      	ldr	r3, [r4, #0]
   85110:	2b00      	cmp	r3, #0
   85112:	d0fb      	beq.n	8510c <_read_r+0x18>
   85114:	6033      	str	r3, [r6, #0]
   85116:	bd70      	pop	{r4, r5, r6, pc}
   85118:	20070b74 	.word	0x20070b74

0008511c <__aeabi_uldivmod>:
   8511c:	b94b      	cbnz	r3, 85132 <__aeabi_uldivmod+0x16>
   8511e:	b942      	cbnz	r2, 85132 <__aeabi_uldivmod+0x16>
   85120:	2900      	cmp	r1, #0
   85122:	bf08      	it	eq
   85124:	2800      	cmpeq	r0, #0
   85126:	d002      	beq.n	8512e <__aeabi_uldivmod+0x12>
   85128:	f04f 31ff 	mov.w	r1, #4294967295
   8512c:	4608      	mov	r0, r1
   8512e:	f000 b83b 	b.w	851a8 <__aeabi_idiv0>
   85132:	b082      	sub	sp, #8
   85134:	46ec      	mov	ip, sp
   85136:	e92d 5000 	stmdb	sp!, {ip, lr}
   8513a:	f000 f81d 	bl	85178 <__gnu_uldivmod_helper>
   8513e:	f8dd e004 	ldr.w	lr, [sp, #4]
   85142:	b002      	add	sp, #8
   85144:	bc0c      	pop	{r2, r3}
   85146:	4770      	bx	lr

00085148 <__gnu_ldivmod_helper>:
   85148:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8514c:	9e08      	ldr	r6, [sp, #32]
   8514e:	4614      	mov	r4, r2
   85150:	461d      	mov	r5, r3
   85152:	4680      	mov	r8, r0
   85154:	4689      	mov	r9, r1
   85156:	f000 f829 	bl	851ac <__divdi3>
   8515a:	fb04 f301 	mul.w	r3, r4, r1
   8515e:	fba4 ab00 	umull	sl, fp, r4, r0
   85162:	fb00 3205 	mla	r2, r0, r5, r3
   85166:	4493      	add	fp, r2
   85168:	ebb8 080a 	subs.w	r8, r8, sl
   8516c:	eb69 090b 	sbc.w	r9, r9, fp
   85170:	e9c6 8900 	strd	r8, r9, [r6]
   85174:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085178 <__gnu_uldivmod_helper>:
   85178:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8517c:	9e08      	ldr	r6, [sp, #32]
   8517e:	4614      	mov	r4, r2
   85180:	461d      	mov	r5, r3
   85182:	4680      	mov	r8, r0
   85184:	4689      	mov	r9, r1
   85186:	f000 f961 	bl	8544c <__udivdi3>
   8518a:	fb00 f505 	mul.w	r5, r0, r5
   8518e:	fba0 ab04 	umull	sl, fp, r0, r4
   85192:	fb04 5401 	mla	r4, r4, r1, r5
   85196:	44a3      	add	fp, r4
   85198:	ebb8 080a 	subs.w	r8, r8, sl
   8519c:	eb69 090b 	sbc.w	r9, r9, fp
   851a0:	e9c6 8900 	strd	r8, r9, [r6]
   851a4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000851a8 <__aeabi_idiv0>:
   851a8:	4770      	bx	lr
   851aa:	bf00      	nop

000851ac <__divdi3>:
   851ac:	2900      	cmp	r1, #0
   851ae:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   851b2:	f2c0 80a1 	blt.w	852f8 <__divdi3+0x14c>
   851b6:	2400      	movs	r4, #0
   851b8:	2b00      	cmp	r3, #0
   851ba:	f2c0 8098 	blt.w	852ee <__divdi3+0x142>
   851be:	4615      	mov	r5, r2
   851c0:	4606      	mov	r6, r0
   851c2:	460f      	mov	r7, r1
   851c4:	2b00      	cmp	r3, #0
   851c6:	d13f      	bne.n	85248 <__divdi3+0x9c>
   851c8:	428a      	cmp	r2, r1
   851ca:	d958      	bls.n	8527e <__divdi3+0xd2>
   851cc:	fab2 f382 	clz	r3, r2
   851d0:	b14b      	cbz	r3, 851e6 <__divdi3+0x3a>
   851d2:	f1c3 0220 	rsb	r2, r3, #32
   851d6:	fa01 f703 	lsl.w	r7, r1, r3
   851da:	fa20 f202 	lsr.w	r2, r0, r2
   851de:	409d      	lsls	r5, r3
   851e0:	fa00 f603 	lsl.w	r6, r0, r3
   851e4:	4317      	orrs	r7, r2
   851e6:	0c29      	lsrs	r1, r5, #16
   851e8:	fbb7 f2f1 	udiv	r2, r7, r1
   851ec:	fb01 7712 	mls	r7, r1, r2, r7
   851f0:	b2a8      	uxth	r0, r5
   851f2:	fb00 f302 	mul.w	r3, r0, r2
   851f6:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   851fa:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   851fe:	42bb      	cmp	r3, r7
   85200:	d909      	bls.n	85216 <__divdi3+0x6a>
   85202:	197f      	adds	r7, r7, r5
   85204:	f102 3cff 	add.w	ip, r2, #4294967295
   85208:	f080 8105 	bcs.w	85416 <__divdi3+0x26a>
   8520c:	42bb      	cmp	r3, r7
   8520e:	f240 8102 	bls.w	85416 <__divdi3+0x26a>
   85212:	3a02      	subs	r2, #2
   85214:	442f      	add	r7, r5
   85216:	1aff      	subs	r7, r7, r3
   85218:	fbb7 f3f1 	udiv	r3, r7, r1
   8521c:	fb01 7113 	mls	r1, r1, r3, r7
   85220:	fb00 f003 	mul.w	r0, r0, r3
   85224:	b2b6      	uxth	r6, r6
   85226:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   8522a:	4288      	cmp	r0, r1
   8522c:	d908      	bls.n	85240 <__divdi3+0x94>
   8522e:	1949      	adds	r1, r1, r5
   85230:	f103 37ff 	add.w	r7, r3, #4294967295
   85234:	f080 80f1 	bcs.w	8541a <__divdi3+0x26e>
   85238:	4288      	cmp	r0, r1
   8523a:	f240 80ee 	bls.w	8541a <__divdi3+0x26e>
   8523e:	3b02      	subs	r3, #2
   85240:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85244:	2300      	movs	r3, #0
   85246:	e003      	b.n	85250 <__divdi3+0xa4>
   85248:	428b      	cmp	r3, r1
   8524a:	d90a      	bls.n	85262 <__divdi3+0xb6>
   8524c:	2300      	movs	r3, #0
   8524e:	461a      	mov	r2, r3
   85250:	4610      	mov	r0, r2
   85252:	4619      	mov	r1, r3
   85254:	b114      	cbz	r4, 8525c <__divdi3+0xb0>
   85256:	4240      	negs	r0, r0
   85258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8525c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85260:	4770      	bx	lr
   85262:	fab3 f883 	clz	r8, r3
   85266:	f1b8 0f00 	cmp.w	r8, #0
   8526a:	f040 8088 	bne.w	8537e <__divdi3+0x1d2>
   8526e:	428b      	cmp	r3, r1
   85270:	d302      	bcc.n	85278 <__divdi3+0xcc>
   85272:	4282      	cmp	r2, r0
   85274:	f200 80e2 	bhi.w	8543c <__divdi3+0x290>
   85278:	2300      	movs	r3, #0
   8527a:	2201      	movs	r2, #1
   8527c:	e7e8      	b.n	85250 <__divdi3+0xa4>
   8527e:	b912      	cbnz	r2, 85286 <__divdi3+0xda>
   85280:	2301      	movs	r3, #1
   85282:	fbb3 f5f2 	udiv	r5, r3, r2
   85286:	fab5 f285 	clz	r2, r5
   8528a:	2a00      	cmp	r2, #0
   8528c:	d13a      	bne.n	85304 <__divdi3+0x158>
   8528e:	1b7f      	subs	r7, r7, r5
   85290:	0c28      	lsrs	r0, r5, #16
   85292:	fa1f fc85 	uxth.w	ip, r5
   85296:	2301      	movs	r3, #1
   85298:	fbb7 f1f0 	udiv	r1, r7, r0
   8529c:	fb00 7711 	mls	r7, r0, r1, r7
   852a0:	fb0c f201 	mul.w	r2, ip, r1
   852a4:	ea4f 4816 	mov.w	r8, r6, lsr #16
   852a8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   852ac:	42ba      	cmp	r2, r7
   852ae:	d907      	bls.n	852c0 <__divdi3+0x114>
   852b0:	197f      	adds	r7, r7, r5
   852b2:	f101 38ff 	add.w	r8, r1, #4294967295
   852b6:	d202      	bcs.n	852be <__divdi3+0x112>
   852b8:	42ba      	cmp	r2, r7
   852ba:	f200 80c4 	bhi.w	85446 <__divdi3+0x29a>
   852be:	4641      	mov	r1, r8
   852c0:	1abf      	subs	r7, r7, r2
   852c2:	fbb7 f2f0 	udiv	r2, r7, r0
   852c6:	fb00 7012 	mls	r0, r0, r2, r7
   852ca:	fb0c fc02 	mul.w	ip, ip, r2
   852ce:	b2b6      	uxth	r6, r6
   852d0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   852d4:	4584      	cmp	ip, r0
   852d6:	d907      	bls.n	852e8 <__divdi3+0x13c>
   852d8:	1940      	adds	r0, r0, r5
   852da:	f102 37ff 	add.w	r7, r2, #4294967295
   852de:	d202      	bcs.n	852e6 <__divdi3+0x13a>
   852e0:	4584      	cmp	ip, r0
   852e2:	f200 80ae 	bhi.w	85442 <__divdi3+0x296>
   852e6:	463a      	mov	r2, r7
   852e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   852ec:	e7b0      	b.n	85250 <__divdi3+0xa4>
   852ee:	43e4      	mvns	r4, r4
   852f0:	4252      	negs	r2, r2
   852f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   852f6:	e762      	b.n	851be <__divdi3+0x12>
   852f8:	4240      	negs	r0, r0
   852fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   852fe:	f04f 34ff 	mov.w	r4, #4294967295
   85302:	e759      	b.n	851b8 <__divdi3+0xc>
   85304:	4095      	lsls	r5, r2
   85306:	f1c2 0920 	rsb	r9, r2, #32
   8530a:	fa27 f109 	lsr.w	r1, r7, r9
   8530e:	fa26 f909 	lsr.w	r9, r6, r9
   85312:	4097      	lsls	r7, r2
   85314:	0c28      	lsrs	r0, r5, #16
   85316:	fbb1 f8f0 	udiv	r8, r1, r0
   8531a:	fb00 1118 	mls	r1, r0, r8, r1
   8531e:	fa1f fc85 	uxth.w	ip, r5
   85322:	fb0c f308 	mul.w	r3, ip, r8
   85326:	ea49 0907 	orr.w	r9, r9, r7
   8532a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   8532e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   85332:	428b      	cmp	r3, r1
   85334:	fa06 f602 	lsl.w	r6, r6, r2
   85338:	d908      	bls.n	8534c <__divdi3+0x1a0>
   8533a:	1949      	adds	r1, r1, r5
   8533c:	f108 32ff 	add.w	r2, r8, #4294967295
   85340:	d27a      	bcs.n	85438 <__divdi3+0x28c>
   85342:	428b      	cmp	r3, r1
   85344:	d978      	bls.n	85438 <__divdi3+0x28c>
   85346:	f1a8 0802 	sub.w	r8, r8, #2
   8534a:	4429      	add	r1, r5
   8534c:	1ac9      	subs	r1, r1, r3
   8534e:	fbb1 f3f0 	udiv	r3, r1, r0
   85352:	fb00 1713 	mls	r7, r0, r3, r1
   85356:	fb0c f203 	mul.w	r2, ip, r3
   8535a:	fa1f f989 	uxth.w	r9, r9
   8535e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   85362:	42ba      	cmp	r2, r7
   85364:	d907      	bls.n	85376 <__divdi3+0x1ca>
   85366:	197f      	adds	r7, r7, r5
   85368:	f103 31ff 	add.w	r1, r3, #4294967295
   8536c:	d260      	bcs.n	85430 <__divdi3+0x284>
   8536e:	42ba      	cmp	r2, r7
   85370:	d95e      	bls.n	85430 <__divdi3+0x284>
   85372:	3b02      	subs	r3, #2
   85374:	442f      	add	r7, r5
   85376:	1abf      	subs	r7, r7, r2
   85378:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8537c:	e78c      	b.n	85298 <__divdi3+0xec>
   8537e:	f1c8 0220 	rsb	r2, r8, #32
   85382:	fa25 f102 	lsr.w	r1, r5, r2
   85386:	fa03 fc08 	lsl.w	ip, r3, r8
   8538a:	fa27 f302 	lsr.w	r3, r7, r2
   8538e:	fa20 f202 	lsr.w	r2, r0, r2
   85392:	fa07 f708 	lsl.w	r7, r7, r8
   85396:	ea41 0c0c 	orr.w	ip, r1, ip
   8539a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8539e:	fbb3 f1f9 	udiv	r1, r3, r9
   853a2:	fb09 3311 	mls	r3, r9, r1, r3
   853a6:	fa1f fa8c 	uxth.w	sl, ip
   853aa:	fb0a fb01 	mul.w	fp, sl, r1
   853ae:	4317      	orrs	r7, r2
   853b0:	0c3a      	lsrs	r2, r7, #16
   853b2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   853b6:	459b      	cmp	fp, r3
   853b8:	fa05 f008 	lsl.w	r0, r5, r8
   853bc:	d908      	bls.n	853d0 <__divdi3+0x224>
   853be:	eb13 030c 	adds.w	r3, r3, ip
   853c2:	f101 32ff 	add.w	r2, r1, #4294967295
   853c6:	d235      	bcs.n	85434 <__divdi3+0x288>
   853c8:	459b      	cmp	fp, r3
   853ca:	d933      	bls.n	85434 <__divdi3+0x288>
   853cc:	3902      	subs	r1, #2
   853ce:	4463      	add	r3, ip
   853d0:	ebcb 0303 	rsb	r3, fp, r3
   853d4:	fbb3 f2f9 	udiv	r2, r3, r9
   853d8:	fb09 3312 	mls	r3, r9, r2, r3
   853dc:	fb0a fa02 	mul.w	sl, sl, r2
   853e0:	b2bf      	uxth	r7, r7
   853e2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   853e6:	45ba      	cmp	sl, r7
   853e8:	d908      	bls.n	853fc <__divdi3+0x250>
   853ea:	eb17 070c 	adds.w	r7, r7, ip
   853ee:	f102 33ff 	add.w	r3, r2, #4294967295
   853f2:	d21b      	bcs.n	8542c <__divdi3+0x280>
   853f4:	45ba      	cmp	sl, r7
   853f6:	d919      	bls.n	8542c <__divdi3+0x280>
   853f8:	3a02      	subs	r2, #2
   853fa:	4467      	add	r7, ip
   853fc:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   85400:	fba5 0100 	umull	r0, r1, r5, r0
   85404:	ebca 0707 	rsb	r7, sl, r7
   85408:	428f      	cmp	r7, r1
   8540a:	f04f 0300 	mov.w	r3, #0
   8540e:	d30a      	bcc.n	85426 <__divdi3+0x27a>
   85410:	d005      	beq.n	8541e <__divdi3+0x272>
   85412:	462a      	mov	r2, r5
   85414:	e71c      	b.n	85250 <__divdi3+0xa4>
   85416:	4662      	mov	r2, ip
   85418:	e6fd      	b.n	85216 <__divdi3+0x6a>
   8541a:	463b      	mov	r3, r7
   8541c:	e710      	b.n	85240 <__divdi3+0x94>
   8541e:	fa06 f608 	lsl.w	r6, r6, r8
   85422:	4286      	cmp	r6, r0
   85424:	d2f5      	bcs.n	85412 <__divdi3+0x266>
   85426:	1e6a      	subs	r2, r5, #1
   85428:	2300      	movs	r3, #0
   8542a:	e711      	b.n	85250 <__divdi3+0xa4>
   8542c:	461a      	mov	r2, r3
   8542e:	e7e5      	b.n	853fc <__divdi3+0x250>
   85430:	460b      	mov	r3, r1
   85432:	e7a0      	b.n	85376 <__divdi3+0x1ca>
   85434:	4611      	mov	r1, r2
   85436:	e7cb      	b.n	853d0 <__divdi3+0x224>
   85438:	4690      	mov	r8, r2
   8543a:	e787      	b.n	8534c <__divdi3+0x1a0>
   8543c:	4643      	mov	r3, r8
   8543e:	4642      	mov	r2, r8
   85440:	e706      	b.n	85250 <__divdi3+0xa4>
   85442:	3a02      	subs	r2, #2
   85444:	e750      	b.n	852e8 <__divdi3+0x13c>
   85446:	3902      	subs	r1, #2
   85448:	442f      	add	r7, r5
   8544a:	e739      	b.n	852c0 <__divdi3+0x114>

0008544c <__udivdi3>:
   8544c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85450:	4614      	mov	r4, r2
   85452:	4605      	mov	r5, r0
   85454:	460e      	mov	r6, r1
   85456:	2b00      	cmp	r3, #0
   85458:	d143      	bne.n	854e2 <__udivdi3+0x96>
   8545a:	428a      	cmp	r2, r1
   8545c:	d953      	bls.n	85506 <__udivdi3+0xba>
   8545e:	fab2 f782 	clz	r7, r2
   85462:	b157      	cbz	r7, 8547a <__udivdi3+0x2e>
   85464:	f1c7 0620 	rsb	r6, r7, #32
   85468:	fa20 f606 	lsr.w	r6, r0, r6
   8546c:	fa01 f307 	lsl.w	r3, r1, r7
   85470:	fa02 f407 	lsl.w	r4, r2, r7
   85474:	fa00 f507 	lsl.w	r5, r0, r7
   85478:	431e      	orrs	r6, r3
   8547a:	0c21      	lsrs	r1, r4, #16
   8547c:	fbb6 f2f1 	udiv	r2, r6, r1
   85480:	fb01 6612 	mls	r6, r1, r2, r6
   85484:	b2a0      	uxth	r0, r4
   85486:	fb00 f302 	mul.w	r3, r0, r2
   8548a:	0c2f      	lsrs	r7, r5, #16
   8548c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   85490:	42b3      	cmp	r3, r6
   85492:	d909      	bls.n	854a8 <__udivdi3+0x5c>
   85494:	1936      	adds	r6, r6, r4
   85496:	f102 37ff 	add.w	r7, r2, #4294967295
   8549a:	f080 80fd 	bcs.w	85698 <__udivdi3+0x24c>
   8549e:	42b3      	cmp	r3, r6
   854a0:	f240 80fa 	bls.w	85698 <__udivdi3+0x24c>
   854a4:	3a02      	subs	r2, #2
   854a6:	4426      	add	r6, r4
   854a8:	1af6      	subs	r6, r6, r3
   854aa:	fbb6 f3f1 	udiv	r3, r6, r1
   854ae:	fb01 6113 	mls	r1, r1, r3, r6
   854b2:	fb00 f003 	mul.w	r0, r0, r3
   854b6:	b2ad      	uxth	r5, r5
   854b8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   854bc:	4288      	cmp	r0, r1
   854be:	d908      	bls.n	854d2 <__udivdi3+0x86>
   854c0:	1909      	adds	r1, r1, r4
   854c2:	f103 36ff 	add.w	r6, r3, #4294967295
   854c6:	f080 80e9 	bcs.w	8569c <__udivdi3+0x250>
   854ca:	4288      	cmp	r0, r1
   854cc:	f240 80e6 	bls.w	8569c <__udivdi3+0x250>
   854d0:	3b02      	subs	r3, #2
   854d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   854d6:	2300      	movs	r3, #0
   854d8:	4610      	mov	r0, r2
   854da:	4619      	mov	r1, r3
   854dc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   854e0:	4770      	bx	lr
   854e2:	428b      	cmp	r3, r1
   854e4:	d84c      	bhi.n	85580 <__udivdi3+0x134>
   854e6:	fab3 f683 	clz	r6, r3
   854ea:	2e00      	cmp	r6, #0
   854ec:	d14f      	bne.n	8558e <__udivdi3+0x142>
   854ee:	428b      	cmp	r3, r1
   854f0:	d302      	bcc.n	854f8 <__udivdi3+0xac>
   854f2:	4282      	cmp	r2, r0
   854f4:	f200 80dd 	bhi.w	856b2 <__udivdi3+0x266>
   854f8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   854fc:	2300      	movs	r3, #0
   854fe:	2201      	movs	r2, #1
   85500:	4610      	mov	r0, r2
   85502:	4619      	mov	r1, r3
   85504:	4770      	bx	lr
   85506:	b912      	cbnz	r2, 8550e <__udivdi3+0xc2>
   85508:	2401      	movs	r4, #1
   8550a:	fbb4 f4f2 	udiv	r4, r4, r2
   8550e:	fab4 f284 	clz	r2, r4
   85512:	2a00      	cmp	r2, #0
   85514:	f040 8082 	bne.w	8561c <__udivdi3+0x1d0>
   85518:	1b09      	subs	r1, r1, r4
   8551a:	0c26      	lsrs	r6, r4, #16
   8551c:	b2a7      	uxth	r7, r4
   8551e:	2301      	movs	r3, #1
   85520:	fbb1 f0f6 	udiv	r0, r1, r6
   85524:	fb06 1110 	mls	r1, r6, r0, r1
   85528:	fb07 f200 	mul.w	r2, r7, r0
   8552c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   85530:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   85534:	428a      	cmp	r2, r1
   85536:	d907      	bls.n	85548 <__udivdi3+0xfc>
   85538:	1909      	adds	r1, r1, r4
   8553a:	f100 3cff 	add.w	ip, r0, #4294967295
   8553e:	d202      	bcs.n	85546 <__udivdi3+0xfa>
   85540:	428a      	cmp	r2, r1
   85542:	f200 80c8 	bhi.w	856d6 <__udivdi3+0x28a>
   85546:	4660      	mov	r0, ip
   85548:	1a89      	subs	r1, r1, r2
   8554a:	fbb1 f2f6 	udiv	r2, r1, r6
   8554e:	fb06 1112 	mls	r1, r6, r2, r1
   85552:	fb07 f702 	mul.w	r7, r7, r2
   85556:	b2ad      	uxth	r5, r5
   85558:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8555c:	42af      	cmp	r7, r5
   8555e:	d908      	bls.n	85572 <__udivdi3+0x126>
   85560:	192c      	adds	r4, r5, r4
   85562:	f102 31ff 	add.w	r1, r2, #4294967295
   85566:	f080 809b 	bcs.w	856a0 <__udivdi3+0x254>
   8556a:	42a7      	cmp	r7, r4
   8556c:	f240 8098 	bls.w	856a0 <__udivdi3+0x254>
   85570:	3a02      	subs	r2, #2
   85572:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   85576:	4610      	mov	r0, r2
   85578:	4619      	mov	r1, r3
   8557a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8557e:	4770      	bx	lr
   85580:	2300      	movs	r3, #0
   85582:	461a      	mov	r2, r3
   85584:	4610      	mov	r0, r2
   85586:	4619      	mov	r1, r3
   85588:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8558c:	4770      	bx	lr
   8558e:	f1c6 0520 	rsb	r5, r6, #32
   85592:	fa22 f705 	lsr.w	r7, r2, r5
   85596:	fa03 f406 	lsl.w	r4, r3, r6
   8559a:	fa21 f305 	lsr.w	r3, r1, r5
   8559e:	fa01 fb06 	lsl.w	fp, r1, r6
   855a2:	fa20 f505 	lsr.w	r5, r0, r5
   855a6:	433c      	orrs	r4, r7
   855a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   855ac:	fbb3 fcf8 	udiv	ip, r3, r8
   855b0:	fb08 331c 	mls	r3, r8, ip, r3
   855b4:	fa1f f984 	uxth.w	r9, r4
   855b8:	fb09 fa0c 	mul.w	sl, r9, ip
   855bc:	ea45 0b0b 	orr.w	fp, r5, fp
   855c0:	ea4f 451b 	mov.w	r5, fp, lsr #16
   855c4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   855c8:	459a      	cmp	sl, r3
   855ca:	fa02 f206 	lsl.w	r2, r2, r6
   855ce:	d904      	bls.n	855da <__udivdi3+0x18e>
   855d0:	191b      	adds	r3, r3, r4
   855d2:	f10c 35ff 	add.w	r5, ip, #4294967295
   855d6:	d36f      	bcc.n	856b8 <__udivdi3+0x26c>
   855d8:	46ac      	mov	ip, r5
   855da:	ebca 0303 	rsb	r3, sl, r3
   855de:	fbb3 f5f8 	udiv	r5, r3, r8
   855e2:	fb08 3315 	mls	r3, r8, r5, r3
   855e6:	fb09 f905 	mul.w	r9, r9, r5
   855ea:	fa1f fb8b 	uxth.w	fp, fp
   855ee:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   855f2:	45b9      	cmp	r9, r7
   855f4:	d904      	bls.n	85600 <__udivdi3+0x1b4>
   855f6:	193f      	adds	r7, r7, r4
   855f8:	f105 33ff 	add.w	r3, r5, #4294967295
   855fc:	d362      	bcc.n	856c4 <__udivdi3+0x278>
   855fe:	461d      	mov	r5, r3
   85600:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   85604:	fbac 2302 	umull	r2, r3, ip, r2
   85608:	ebc9 0707 	rsb	r7, r9, r7
   8560c:	429f      	cmp	r7, r3
   8560e:	f04f 0500 	mov.w	r5, #0
   85612:	d34a      	bcc.n	856aa <__udivdi3+0x25e>
   85614:	d046      	beq.n	856a4 <__udivdi3+0x258>
   85616:	4662      	mov	r2, ip
   85618:	462b      	mov	r3, r5
   8561a:	e75d      	b.n	854d8 <__udivdi3+0x8c>
   8561c:	4094      	lsls	r4, r2
   8561e:	f1c2 0920 	rsb	r9, r2, #32
   85622:	fa21 fc09 	lsr.w	ip, r1, r9
   85626:	4091      	lsls	r1, r2
   85628:	fa20 f909 	lsr.w	r9, r0, r9
   8562c:	0c26      	lsrs	r6, r4, #16
   8562e:	fbbc f8f6 	udiv	r8, ip, r6
   85632:	fb06 cc18 	mls	ip, r6, r8, ip
   85636:	b2a7      	uxth	r7, r4
   85638:	fb07 f308 	mul.w	r3, r7, r8
   8563c:	ea49 0901 	orr.w	r9, r9, r1
   85640:	ea4f 4119 	mov.w	r1, r9, lsr #16
   85644:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   85648:	4563      	cmp	r3, ip
   8564a:	fa00 f502 	lsl.w	r5, r0, r2
   8564e:	d909      	bls.n	85664 <__udivdi3+0x218>
   85650:	eb1c 0c04 	adds.w	ip, ip, r4
   85654:	f108 32ff 	add.w	r2, r8, #4294967295
   85658:	d23b      	bcs.n	856d2 <__udivdi3+0x286>
   8565a:	4563      	cmp	r3, ip
   8565c:	d939      	bls.n	856d2 <__udivdi3+0x286>
   8565e:	f1a8 0802 	sub.w	r8, r8, #2
   85662:	44a4      	add	ip, r4
   85664:	ebc3 0c0c 	rsb	ip, r3, ip
   85668:	fbbc f3f6 	udiv	r3, ip, r6
   8566c:	fb06 c113 	mls	r1, r6, r3, ip
   85670:	fb07 f203 	mul.w	r2, r7, r3
   85674:	fa1f f989 	uxth.w	r9, r9
   85678:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8567c:	428a      	cmp	r2, r1
   8567e:	d907      	bls.n	85690 <__udivdi3+0x244>
   85680:	1909      	adds	r1, r1, r4
   85682:	f103 30ff 	add.w	r0, r3, #4294967295
   85686:	d222      	bcs.n	856ce <__udivdi3+0x282>
   85688:	428a      	cmp	r2, r1
   8568a:	d920      	bls.n	856ce <__udivdi3+0x282>
   8568c:	3b02      	subs	r3, #2
   8568e:	4421      	add	r1, r4
   85690:	1a89      	subs	r1, r1, r2
   85692:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   85696:	e743      	b.n	85520 <__udivdi3+0xd4>
   85698:	463a      	mov	r2, r7
   8569a:	e705      	b.n	854a8 <__udivdi3+0x5c>
   8569c:	4633      	mov	r3, r6
   8569e:	e718      	b.n	854d2 <__udivdi3+0x86>
   856a0:	460a      	mov	r2, r1
   856a2:	e766      	b.n	85572 <__udivdi3+0x126>
   856a4:	40b0      	lsls	r0, r6
   856a6:	4290      	cmp	r0, r2
   856a8:	d2b5      	bcs.n	85616 <__udivdi3+0x1ca>
   856aa:	f10c 32ff 	add.w	r2, ip, #4294967295
   856ae:	2300      	movs	r3, #0
   856b0:	e712      	b.n	854d8 <__udivdi3+0x8c>
   856b2:	4633      	mov	r3, r6
   856b4:	4632      	mov	r2, r6
   856b6:	e70f      	b.n	854d8 <__udivdi3+0x8c>
   856b8:	459a      	cmp	sl, r3
   856ba:	d98d      	bls.n	855d8 <__udivdi3+0x18c>
   856bc:	f1ac 0c02 	sub.w	ip, ip, #2
   856c0:	4423      	add	r3, r4
   856c2:	e78a      	b.n	855da <__udivdi3+0x18e>
   856c4:	45b9      	cmp	r9, r7
   856c6:	d99a      	bls.n	855fe <__udivdi3+0x1b2>
   856c8:	3d02      	subs	r5, #2
   856ca:	4427      	add	r7, r4
   856cc:	e798      	b.n	85600 <__udivdi3+0x1b4>
   856ce:	4603      	mov	r3, r0
   856d0:	e7de      	b.n	85690 <__udivdi3+0x244>
   856d2:	4690      	mov	r8, r2
   856d4:	e7c6      	b.n	85664 <__udivdi3+0x218>
   856d6:	3802      	subs	r0, #2
   856d8:	4421      	add	r1, r4
   856da:	e735      	b.n	85548 <__udivdi3+0xfc>
   856dc:	72617453 	.word	0x72617453
   856e0:	00726174 	.word	0x00726174
   856e4:	72617453 	.word	0x72617453
   856e8:	00002174 	.word	0x00002174
   856ec:	3d746f72 	.word	0x3d746f72
   856f0:	000a6425 	.word	0x000a6425
   856f4:	74736964 	.word	0x74736964
   856f8:	65636e61 	.word	0x65636e61
   856fc:	0a64253d 	.word	0x0a64253d
   85700:	00000000 	.word	0x00000000
   85704:	00000001 	.word	0x00000001
   85708:	00000002 	.word	0x00000002
   8570c:	00000004 	.word	0x00000004
   85710:	00000008 	.word	0x00000008
   85714:	00000010 	.word	0x00000010
   85718:	00000020 	.word	0x00000020
   8571c:	00000040 	.word	0x00000040
   85720:	00000080 	.word	0x00000080
   85724:	00000100 	.word	0x00000100
   85728:	00000200 	.word	0x00000200
   8572c:	00000400 	.word	0x00000400

00085730 <atanlo>:
   85730:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   85740:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00085750 <atanhi>:
   85750:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   85760:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
   85770:	74727173 00000000 00000043              sqrt....C...

0008577c <_global_impure_ptr>:
   8577c:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   8578c:	46454443 00000000 33323130 37363534     CDEF....01234567
   8579c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   857ac:	0000296c                                l)..

000857b0 <zeroes.6721>:
   857b0:	30303030 30303030 30303030 30303030     0000000000000000

000857c0 <blanks.6720>:
   857c0:	20202020 20202020 20202020 20202020                     

000857d0 <_init>:
   857d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   857d2:	bf00      	nop
   857d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   857d6:	bc08      	pop	{r3}
   857d8:	469e      	mov	lr, r3
   857da:	4770      	bx	lr

000857dc <__init_array_start>:
   857dc:	000837d1 	.word	0x000837d1

000857e0 <__frame_dummy_init_array_entry>:
   857e0:	00080119                                ....

000857e4 <_fini>:
   857e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   857e6:	bf00      	nop
   857e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   857ea:	bc08      	pop	{r3}
   857ec:	469e      	mov	lr, r3
   857ee:	4770      	bx	lr

000857f0 <__fini_array_start>:
   857f0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <c1Loop>:
20070138:	00010101                                         .

20070139 <c2Loop>:
20070139:	00000101                                         .

2007013a <g_interrupt_enabled>:
2007013a:	09000001                                         ..

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <__fdlib_version>:
20070140:	00000001 00000000                       ........

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	00085778 00000000 00000000 00000000     xW..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <lc_ctype_charset>:
20070574:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070594 <__mb_cur_max>:
20070594:	00000001                                ....

20070598 <__malloc_av_>:
	...
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 

200709a0 <__malloc_trim_threshold>:
200709a0:	00020000                                ....

200709a4 <__malloc_sbrk_base>:
200709a4:	ffffffff                                ....

200709a8 <__wctomb>:
200709a8:	00084ee1                                .N..
