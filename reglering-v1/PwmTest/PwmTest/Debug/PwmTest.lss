
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004478  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084478  00084478  0000c478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00084480  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001cc  200709a4  00084e24  000109a4  2**2
                  ALLOC
  4 .stack        00002000  20070b70  00084ff0  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000f163  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002829  00000000  00000000  0001fb8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000054a4  00000000  00000000  000223b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b88  00000000  00000000  00027858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a40  00000000  00000000  000283e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018db3  00000000  00000000  00028e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011249  00000000  00000000  00041bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062016  00000000  00000000  00052e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000022d4  00000000  00000000  000b4e34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b70 	.word	0x20072b70
   80004:	00080e79 	.word	0x00080e79
   80008:	00080e75 	.word	0x00080e75
   8000c:	00080e75 	.word	0x00080e75
   80010:	00080e75 	.word	0x00080e75
   80014:	00080e75 	.word	0x00080e75
   80018:	00080e75 	.word	0x00080e75
	...
   8002c:	00080e75 	.word	0x00080e75
   80030:	00080e75 	.word	0x00080e75
   80034:	00000000 	.word	0x00000000
   80038:	00080e75 	.word	0x00080e75
   8003c:	00080e75 	.word	0x00080e75
   80040:	00080e75 	.word	0x00080e75
   80044:	00080e75 	.word	0x00080e75
   80048:	00080e75 	.word	0x00080e75
   8004c:	00080e75 	.word	0x00080e75
   80050:	00080e75 	.word	0x00080e75
   80054:	00080e75 	.word	0x00080e75
   80058:	00080e75 	.word	0x00080e75
   8005c:	00080e75 	.word	0x00080e75
   80060:	00080e75 	.word	0x00080e75
   80064:	00080e75 	.word	0x00080e75
   80068:	00000000 	.word	0x00000000
   8006c:	00080c19 	.word	0x00080c19
   80070:	00080c2d 	.word	0x00080c2d
   80074:	00080c41 	.word	0x00080c41
   80078:	00080c55 	.word	0x00080c55
	...
   80084:	00080471 	.word	0x00080471
   80088:	00080e75 	.word	0x00080e75
   8008c:	00080e75 	.word	0x00080e75
   80090:	00080e75 	.word	0x00080e75
   80094:	00080e75 	.word	0x00080e75
   80098:	00080e75 	.word	0x00080e75
   8009c:	00080e75 	.word	0x00080e75
   800a0:	00080e75 	.word	0x00080e75
   800a4:	00000000 	.word	0x00000000
   800a8:	00080e75 	.word	0x00080e75
   800ac:	00080e75 	.word	0x00080e75
   800b0:	00080e75 	.word	0x00080e75
   800b4:	00080e75 	.word	0x00080e75
   800b8:	00080e75 	.word	0x00080e75
   800bc:	00080e75 	.word	0x00080e75
   800c0:	00080e75 	.word	0x00080e75
   800c4:	00080e75 	.word	0x00080e75
   800c8:	00080e75 	.word	0x00080e75
   800cc:	00080e75 	.word	0x00080e75
   800d0:	00080e75 	.word	0x00080e75
   800d4:	00080e75 	.word	0x00080e75
   800d8:	00080e75 	.word	0x00080e75
   800dc:	00080e75 	.word	0x00080e75
   800e0:	00080e75 	.word	0x00080e75
   800e4:	00080e75 	.word	0x00080e75
   800e8:	00080e75 	.word	0x00080e75
   800ec:	00080e75 	.word	0x00080e75
   800f0:	00080e75 	.word	0x00080e75

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	00084480 	.word	0x00084480

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084480 	.word	0x00084480
   8013c:	200709a8 	.word	0x200709a8
   80140:	00084480 	.word	0x00084480
   80144:	00000000 	.word	0x00000000

00080148 <main>:
// int e=0;
// double kp = 2;
// uint16_t speed = 1700;

int main(void)
{
   80148:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	/* Initialize the SAM system */
	SystemInit();
   8014c:	4b3c      	ldr	r3, [pc, #240]	; (80240 <main+0xf8>)
   8014e:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   80150:	4b3c      	ldr	r3, [pc, #240]	; (80244 <main+0xfc>)
   80152:	4798      	blx	r3
	configureConsole();
   80154:	4b3c      	ldr	r3, [pc, #240]	; (80248 <main+0x100>)
   80156:	4798      	blx	r3
	configInterrupts();
   80158:	4b3c      	ldr	r3, [pc, #240]	; (8024c <main+0x104>)
   8015a:	4798      	blx	r3
	PWM_init();
   8015c:	4b3c      	ldr	r3, [pc, #240]	; (80250 <main+0x108>)
   8015e:	4798      	blx	r3
	printf("Startar");
   80160:	483c      	ldr	r0, [pc, #240]	; (80254 <main+0x10c>)
   80162:	4b3d      	ldr	r3, [pc, #244]	; (80258 <main+0x110>)
   80164:	4798      	blx	r3
    delay_s(2);
   80166:	483d      	ldr	r0, [pc, #244]	; (8025c <main+0x114>)
   80168:	4b3d      	ldr	r3, [pc, #244]	; (80260 <main+0x118>)
   8016a:	4798      	blx	r3
// 		printf("212 %d\n",calculateDistance(500,500,620,675));
// 		
// 		printf("167 %d\n",calculateDistance(500,500,425,650));
// 		
// 		printf("185 %d\n",calculateDistance(500,500,425,330));
		printf("0 %d\n",radianToDegree(0));
   8016c:	2600      	movs	r6, #0
   8016e:	2700      	movs	r7, #0
		
		printf("30 %d\n",radianToDegree(0.52359));
   80170:	f20f 0b8c 	addw	fp, pc, #140	; 0x8c
   80174:	e9db ab00 	ldrd	sl, fp, [fp]
		
		printf("45 %d\n",radianToDegree(0.785398));
   80178:	f20f 098c 	addw	r9, pc, #140	; 0x8c
   8017c:	e9d9 8900 	ldrd	r8, r9, [r9]
// 		printf("212 %d\n",calculateDistance(500,500,620,675));
// 		
// 		printf("167 %d\n",calculateDistance(500,500,425,650));
// 		
// 		printf("185 %d\n",calculateDistance(500,500,425,330));
		printf("0 %d\n",radianToDegree(0));
   80180:	4630      	mov	r0, r6
   80182:	4639      	mov	r1, r7
   80184:	4d37      	ldr	r5, [pc, #220]	; (80264 <main+0x11c>)
   80186:	47a8      	blx	r5
   80188:	4601      	mov	r1, r0
   8018a:	4837      	ldr	r0, [pc, #220]	; (80268 <main+0x120>)
   8018c:	4c32      	ldr	r4, [pc, #200]	; (80258 <main+0x110>)
   8018e:	47a0      	blx	r4
		
		printf("30 %d\n",radianToDegree(0.52359));
   80190:	4650      	mov	r0, sl
   80192:	4659      	mov	r1, fp
   80194:	47a8      	blx	r5
   80196:	4601      	mov	r1, r0
   80198:	4834      	ldr	r0, [pc, #208]	; (8026c <main+0x124>)
   8019a:	47a0      	blx	r4
		
		printf("45 %d\n",radianToDegree(0.785398));
   8019c:	4640      	mov	r0, r8
   8019e:	4649      	mov	r1, r9
   801a0:	47a8      	blx	r5
   801a2:	4601      	mov	r1, r0
   801a4:	4832      	ldr	r0, [pc, #200]	; (80270 <main+0x128>)
   801a6:	47a0      	blx	r4
		
		printf("60 %d\n",radianToDegree(1.0471));
   801a8:	a119      	add	r1, pc, #100	; (adr r1, 80210 <main+0xc8>)
   801aa:	e9d1 0100 	ldrd	r0, r1, [r1]
   801ae:	47a8      	blx	r5
   801b0:	4601      	mov	r1, r0
   801b2:	4830      	ldr	r0, [pc, #192]	; (80274 <main+0x12c>)
   801b4:	47a0      	blx	r4
		
		printf("90 %d\n",radianToDegree(1.5707));
   801b6:	a118      	add	r1, pc, #96	; (adr r1, 80218 <main+0xd0>)
   801b8:	e9d1 0100 	ldrd	r0, r1, [r1]
   801bc:	47a8      	blx	r5
   801be:	4601      	mov	r1, r0
   801c0:	482d      	ldr	r0, [pc, #180]	; (80278 <main+0x130>)
   801c2:	47a0      	blx	r4
		
		printf("130 %d\n",radianToDegree(2.26892));
   801c4:	a116      	add	r1, pc, #88	; (adr r1, 80220 <main+0xd8>)
   801c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   801ca:	47a8      	blx	r5
   801cc:	4601      	mov	r1, r0
   801ce:	482b      	ldr	r0, [pc, #172]	; (8027c <main+0x134>)
   801d0:	47a0      	blx	r4
		
		printf("180 %d\n",radianToDegree(3.14159));
   801d2:	a115      	add	r1, pc, #84	; (adr r1, 80228 <main+0xe0>)
   801d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   801d8:	47a8      	blx	r5
   801da:	4601      	mov	r1, r0
   801dc:	4828      	ldr	r0, [pc, #160]	; (80280 <main+0x138>)
   801de:	47a0      	blx	r4
		
		printf("270 %d\n",radianToDegree(4.71238));
   801e0:	a113      	add	r1, pc, #76	; (adr r1, 80230 <main+0xe8>)
   801e2:	e9d1 0100 	ldrd	r0, r1, [r1]
   801e6:	47a8      	blx	r5
   801e8:	4601      	mov	r1, r0
   801ea:	4826      	ldr	r0, [pc, #152]	; (80284 <main+0x13c>)
   801ec:	47a0      	blx	r4
		
		printf("360 %d\n",radianToDegree(6.265732));
   801ee:	a112      	add	r1, pc, #72	; (adr r1, 80238 <main+0xf0>)
   801f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   801f4:	47a8      	blx	r5
   801f6:	4601      	mov	r1, r0
   801f8:	4823      	ldr	r0, [pc, #140]	; (80288 <main+0x140>)
   801fa:	47a0      	blx	r4
   801fc:	e7c0      	b.n	80180 <main+0x38>
   801fe:	bf00      	nop
   80200:	d0d0678c 	.word	0xd0d0678c
   80204:	3fe0c13f 	.word	0x3fe0c13f
   80208:	fc8b007a 	.word	0xfc8b007a
   8020c:	3fe921fa 	.word	0x3fe921fa
   80210:	edfa43fe 	.word	0xedfa43fe
   80214:	3ff0c0eb 	.word	0x3ff0c0eb
   80218:	52bd3c36 	.word	0x52bd3c36
   8021c:	3ff92196 	.word	0x3ff92196
   80220:	8769ec2d 	.word	0x8769ec2d
   80224:	400226bf 	.word	0x400226bf
   80228:	f01b866e 	.word	0xf01b866e
   8022c:	400921f9 	.word	0x400921f9
   80230:	24894c44 	.word	0x24894c44
   80234:	4012d97a 	.word	0x4012d97a
   80238:	0ca600b0 	.word	0x0ca600b0
   8023c:	4019101c 	.word	0x4019101c
   80240:	2007000d 	.word	0x2007000d
   80244:	000808ad 	.word	0x000808ad
   80248:	0008062d 	.word	0x0008062d
   8024c:	000806fd 	.word	0x000806fd
   80250:	00080851 	.word	0x00080851
   80254:	00084380 	.word	0x00084380
   80258:	0008143d 	.word	0x0008143d
   8025c:	00b71b00 	.word	0x00b71b00
   80260:	20070001 	.word	0x20070001
   80264:	00080791 	.word	0x00080791
   80268:	00084388 	.word	0x00084388
   8026c:	00084390 	.word	0x00084390
   80270:	00084398 	.word	0x00084398
   80274:	000843a0 	.word	0x000843a0
   80278:	000843a8 	.word	0x000843a8
   8027c:	000843b0 	.word	0x000843b0
   80280:	000843b8 	.word	0x000843b8
   80284:	000843c0 	.word	0x000843c0
   80288:	000843c8 	.word	0x000843c8
   8028c:	f3af 8000 	nop.w

00080290 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80294:	b083      	sub	sp, #12
   80296:	4605      	mov	r5, r0
	while (len) {
   80298:	4690      	mov	r8, r2
   8029a:	2a00      	cmp	r2, #0
   8029c:	d047      	beq.n	8032e <usart_serial_read_packet+0x9e>
   8029e:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802a0:	4f25      	ldr	r7, [pc, #148]	; (80338 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   802a2:	4c26      	ldr	r4, [pc, #152]	; (8033c <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   802a4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80350 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   802a8:	f8df b094 	ldr.w	fp, [pc, #148]	; 80340 <usart_serial_read_packet+0xb0>
   802ac:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   802b0:	2300      	movs	r3, #0
   802b2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   802b4:	4b22      	ldr	r3, [pc, #136]	; (80340 <usart_serial_read_packet+0xb0>)
   802b6:	429d      	cmp	r5, r3
   802b8:	d106      	bne.n	802c8 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   802ba:	4658      	mov	r0, fp
   802bc:	4649      	mov	r1, r9
   802be:	4b21      	ldr	r3, [pc, #132]	; (80344 <usart_serial_read_packet+0xb4>)
   802c0:	4798      	blx	r3
   802c2:	2800      	cmp	r0, #0
   802c4:	d1f9      	bne.n	802ba <usart_serial_read_packet+0x2a>
   802c6:	e019      	b.n	802fc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   802c8:	4b1f      	ldr	r3, [pc, #124]	; (80348 <usart_serial_read_packet+0xb8>)
   802ca:	429d      	cmp	r5, r3
   802cc:	d109      	bne.n	802e2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   802ce:	4699      	mov	r9, r3
   802d0:	4648      	mov	r0, r9
   802d2:	a901      	add	r1, sp, #4
   802d4:	47a0      	blx	r4
   802d6:	2800      	cmp	r0, #0
   802d8:	d1fa      	bne.n	802d0 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   802da:	9b01      	ldr	r3, [sp, #4]
   802dc:	f806 3c01 	strb.w	r3, [r6, #-1]
   802e0:	e017      	b.n	80312 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   802e2:	4b1a      	ldr	r3, [pc, #104]	; (8034c <usart_serial_read_packet+0xbc>)
   802e4:	429d      	cmp	r5, r3
   802e6:	d109      	bne.n	802fc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   802e8:	4699      	mov	r9, r3
   802ea:	4648      	mov	r0, r9
   802ec:	a901      	add	r1, sp, #4
   802ee:	47a0      	blx	r4
   802f0:	2800      	cmp	r0, #0
   802f2:	d1fa      	bne.n	802ea <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   802f4:	9b01      	ldr	r3, [sp, #4]
   802f6:	f806 3c01 	strb.w	r3, [r6, #-1]
   802fa:	e014      	b.n	80326 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   802fc:	4555      	cmp	r5, sl
   802fe:	d108      	bne.n	80312 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80300:	4650      	mov	r0, sl
   80302:	a901      	add	r1, sp, #4
   80304:	47a0      	blx	r4
   80306:	2800      	cmp	r0, #0
   80308:	d1fa      	bne.n	80300 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   8030a:	9b01      	ldr	r3, [sp, #4]
   8030c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80310:	e009      	b.n	80326 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80312:	42bd      	cmp	r5, r7
   80314:	d107      	bne.n	80326 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80316:	4638      	mov	r0, r7
   80318:	a901      	add	r1, sp, #4
   8031a:	47a0      	blx	r4
   8031c:	2800      	cmp	r0, #0
   8031e:	d1fa      	bne.n	80316 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80320:	9b01      	ldr	r3, [sp, #4]
   80322:	f806 3c01 	strb.w	r3, [r6, #-1]
   80326:	3601      	adds	r6, #1
   80328:	f1b8 0801 	subs.w	r8, r8, #1
   8032c:	d1be      	bne.n	802ac <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8032e:	2000      	movs	r0, #0
   80330:	b003      	add	sp, #12
   80332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80336:	bf00      	nop
   80338:	400a4000 	.word	0x400a4000
   8033c:	00080459 	.word	0x00080459
   80340:	400e0800 	.word	0x400e0800
   80344:	00080431 	.word	0x00080431
   80348:	40098000 	.word	0x40098000
   8034c:	4009c000 	.word	0x4009c000
   80350:	400a0000 	.word	0x400a0000

00080354 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80358:	460c      	mov	r4, r1
   8035a:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   8035c:	b960      	cbnz	r0, 80378 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8035e:	2a00      	cmp	r2, #0
   80360:	dd0e      	ble.n	80380 <_read+0x2c>
   80362:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80364:	4e09      	ldr	r6, [pc, #36]	; (8038c <_read+0x38>)
   80366:	4d0a      	ldr	r5, [pc, #40]	; (80390 <_read+0x3c>)
   80368:	6830      	ldr	r0, [r6, #0]
   8036a:	4621      	mov	r1, r4
   8036c:	682b      	ldr	r3, [r5, #0]
   8036e:	4798      	blx	r3
		ptr++;
   80370:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80372:	42bc      	cmp	r4, r7
   80374:	d1f8      	bne.n	80368 <_read+0x14>
   80376:	e006      	b.n	80386 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80378:	f04f 30ff 	mov.w	r0, #4294967295
   8037c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80380:	2000      	movs	r0, #0
   80382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80386:	4640      	mov	r0, r8
	}
	return nChars;
}
   80388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8038c:	20070b18 	.word	0x20070b18
   80390:	20070b10 	.word	0x20070b10

00080394 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80398:	460e      	mov	r6, r1
   8039a:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8039c:	3801      	subs	r0, #1
   8039e:	2802      	cmp	r0, #2
   803a0:	d80f      	bhi.n	803c2 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   803a2:	b192      	cbz	r2, 803ca <_write+0x36>
   803a4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   803a6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 803e4 <_write+0x50>
   803aa:	4f0d      	ldr	r7, [pc, #52]	; (803e0 <_write+0x4c>)
   803ac:	f8d8 0000 	ldr.w	r0, [r8]
   803b0:	5d31      	ldrb	r1, [r6, r4]
   803b2:	683b      	ldr	r3, [r7, #0]
   803b4:	4798      	blx	r3
   803b6:	2800      	cmp	r0, #0
   803b8:	db0a      	blt.n	803d0 <_write+0x3c>
			return -1;
		}
		++nChars;
   803ba:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   803bc:	42a5      	cmp	r5, r4
   803be:	d1f5      	bne.n	803ac <_write+0x18>
   803c0:	e00a      	b.n	803d8 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   803c2:	f04f 30ff 	mov.w	r0, #4294967295
   803c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   803ca:	2000      	movs	r0, #0
   803cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   803d0:	f04f 30ff 	mov.w	r0, #4294967295
   803d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   803d8:	4620      	mov	r0, r4
	}
	return nChars;
}
   803da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803de:	bf00      	nop
   803e0:	20070b14 	.word	0x20070b14
   803e4:	20070b18 	.word	0x20070b18

000803e8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   803e8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   803ea:	23ac      	movs	r3, #172	; 0xac
   803ec:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   803ee:	680a      	ldr	r2, [r1, #0]
   803f0:	684b      	ldr	r3, [r1, #4]
   803f2:	fbb2 f3f3 	udiv	r3, r2, r3
   803f6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   803f8:	1e5c      	subs	r4, r3, #1
   803fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   803fe:	4294      	cmp	r4, r2
   80400:	d80a      	bhi.n	80418 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80402:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80404:	688b      	ldr	r3, [r1, #8]
   80406:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80408:	f240 2302 	movw	r3, #514	; 0x202
   8040c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80410:	2350      	movs	r3, #80	; 0x50
   80412:	6003      	str	r3, [r0, #0]

	return 0;
   80414:	2000      	movs	r0, #0
   80416:	e000      	b.n	8041a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80418:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8041a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8041e:	4770      	bx	lr

00080420 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80420:	6943      	ldr	r3, [r0, #20]
   80422:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80426:	bf1a      	itte	ne
   80428:	61c1      	strne	r1, [r0, #28]
	return 0;
   8042a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8042c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8042e:	4770      	bx	lr

00080430 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80430:	6943      	ldr	r3, [r0, #20]
   80432:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80436:	bf1d      	ittte	ne
   80438:	6983      	ldrne	r3, [r0, #24]
   8043a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8043c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8043e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80440:	4770      	bx	lr
   80442:	bf00      	nop

00080444 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80444:	6943      	ldr	r3, [r0, #20]
   80446:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8044a:	bf1d      	ittte	ne
   8044c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80450:	61c1      	strne	r1, [r0, #28]
	return 0;
   80452:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80454:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80456:	4770      	bx	lr

00080458 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80458:	6943      	ldr	r3, [r0, #20]
   8045a:	f013 0f01 	tst.w	r3, #1
   8045e:	d005      	beq.n	8046c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80460:	6983      	ldr	r3, [r0, #24]
   80462:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80466:	600b      	str	r3, [r1, #0]

	return 0;
   80468:	2000      	movs	r0, #0
   8046a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8046c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8046e:	4770      	bx	lr

00080470 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80470:	b500      	push	{lr}
   80472:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80474:	4813      	ldr	r0, [pc, #76]	; (804c4 <USART0_Handler+0x54>)
   80476:	f10d 0107 	add.w	r1, sp, #7
   8047a:	2201      	movs	r2, #1
   8047c:	4b12      	ldr	r3, [pc, #72]	; (804c8 <USART0_Handler+0x58>)
   8047e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80480:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80482:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80486:	2200      	movs	r2, #0
   80488:	4b10      	ldr	r3, [pc, #64]	; (804cc <USART0_Handler+0x5c>)
   8048a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   8048c:	4b10      	ldr	r3, [pc, #64]	; (804d0 <USART0_Handler+0x60>)
   8048e:	781a      	ldrb	r2, [r3, #0]
   80490:	3201      	adds	r2, #1
   80492:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80494:	4b0f      	ldr	r3, [pc, #60]	; (804d4 <USART0_Handler+0x64>)
   80496:	781b      	ldrb	r3, [r3, #0]
   80498:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8049c:	4a0e      	ldr	r2, [pc, #56]	; (804d8 <USART0_Handler+0x68>)
   8049e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   804a0:	2b9b      	cmp	r3, #155	; 0x9b
   804a2:	d103      	bne.n	804ac <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   804a4:	2200      	movs	r2, #0
   804a6:	4b0b      	ldr	r3, [pc, #44]	; (804d4 <USART0_Handler+0x64>)
   804a8:	701a      	strb	r2, [r3, #0]
   804aa:	e002      	b.n	804b2 <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   804ac:	3301      	adds	r3, #1
   804ae:	4a09      	ldr	r2, [pc, #36]	; (804d4 <USART0_Handler+0x64>)
   804b0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   804b2:	2201      	movs	r2, #1
   804b4:	4b05      	ldr	r3, [pc, #20]	; (804cc <USART0_Handler+0x5c>)
   804b6:	701a      	strb	r2, [r3, #0]
   804b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   804bc:	b662      	cpsie	i
}
   804be:	b003      	add	sp, #12
   804c0:	f85d fb04 	ldr.w	pc, [sp], #4
   804c4:	40098000 	.word	0x40098000
   804c8:	00080291 	.word	0x00080291
   804cc:	20070138 	.word	0x20070138
   804d0:	20070a5d 	.word	0x20070a5d
   804d4:	20070a5c 	.word	0x20070a5c
   804d8:	200709c0 	.word	0x200709c0

000804dc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   804dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   804de:	b083      	sub	sp, #12
   804e0:	4604      	mov	r4, r0
   804e2:	460d      	mov	r5, r1
	uint32_t val = 0;
   804e4:	2300      	movs	r3, #0
   804e6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   804e8:	4b1f      	ldr	r3, [pc, #124]	; (80568 <usart_serial_getchar+0x8c>)
   804ea:	4298      	cmp	r0, r3
   804ec:	d107      	bne.n	804fe <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   804ee:	461f      	mov	r7, r3
   804f0:	4e1e      	ldr	r6, [pc, #120]	; (8056c <usart_serial_getchar+0x90>)
   804f2:	4638      	mov	r0, r7
   804f4:	4629      	mov	r1, r5
   804f6:	47b0      	blx	r6
   804f8:	2800      	cmp	r0, #0
   804fa:	d1fa      	bne.n	804f2 <usart_serial_getchar+0x16>
   804fc:	e019      	b.n	80532 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   804fe:	4b1c      	ldr	r3, [pc, #112]	; (80570 <usart_serial_getchar+0x94>)
   80500:	4298      	cmp	r0, r3
   80502:	d109      	bne.n	80518 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80504:	461f      	mov	r7, r3
   80506:	4e1b      	ldr	r6, [pc, #108]	; (80574 <usart_serial_getchar+0x98>)
   80508:	4638      	mov	r0, r7
   8050a:	a901      	add	r1, sp, #4
   8050c:	47b0      	blx	r6
   8050e:	2800      	cmp	r0, #0
   80510:	d1fa      	bne.n	80508 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80512:	9b01      	ldr	r3, [sp, #4]
   80514:	702b      	strb	r3, [r5, #0]
   80516:	e019      	b.n	8054c <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80518:	4b17      	ldr	r3, [pc, #92]	; (80578 <usart_serial_getchar+0x9c>)
   8051a:	4298      	cmp	r0, r3
   8051c:	d109      	bne.n	80532 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8051e:	461e      	mov	r6, r3
   80520:	4c14      	ldr	r4, [pc, #80]	; (80574 <usart_serial_getchar+0x98>)
   80522:	4630      	mov	r0, r6
   80524:	a901      	add	r1, sp, #4
   80526:	47a0      	blx	r4
   80528:	2800      	cmp	r0, #0
   8052a:	d1fa      	bne.n	80522 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   8052c:	9b01      	ldr	r3, [sp, #4]
   8052e:	702b      	strb	r3, [r5, #0]
   80530:	e018      	b.n	80564 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80532:	4b12      	ldr	r3, [pc, #72]	; (8057c <usart_serial_getchar+0xa0>)
   80534:	429c      	cmp	r4, r3
   80536:	d109      	bne.n	8054c <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80538:	461e      	mov	r6, r3
   8053a:	4c0e      	ldr	r4, [pc, #56]	; (80574 <usart_serial_getchar+0x98>)
   8053c:	4630      	mov	r0, r6
   8053e:	a901      	add	r1, sp, #4
   80540:	47a0      	blx	r4
   80542:	2800      	cmp	r0, #0
   80544:	d1fa      	bne.n	8053c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80546:	9b01      	ldr	r3, [sp, #4]
   80548:	702b      	strb	r3, [r5, #0]
   8054a:	e00b      	b.n	80564 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8054c:	4b0c      	ldr	r3, [pc, #48]	; (80580 <usart_serial_getchar+0xa4>)
   8054e:	429c      	cmp	r4, r3
   80550:	d108      	bne.n	80564 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80552:	461e      	mov	r6, r3
   80554:	4c07      	ldr	r4, [pc, #28]	; (80574 <usart_serial_getchar+0x98>)
   80556:	4630      	mov	r0, r6
   80558:	a901      	add	r1, sp, #4
   8055a:	47a0      	blx	r4
   8055c:	2800      	cmp	r0, #0
   8055e:	d1fa      	bne.n	80556 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80560:	9b01      	ldr	r3, [sp, #4]
   80562:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80564:	b003      	add	sp, #12
   80566:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80568:	400e0800 	.word	0x400e0800
   8056c:	00080431 	.word	0x00080431
   80570:	40098000 	.word	0x40098000
   80574:	00080459 	.word	0x00080459
   80578:	4009c000 	.word	0x4009c000
   8057c:	400a0000 	.word	0x400a0000
   80580:	400a4000 	.word	0x400a4000

00080584 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80584:	b570      	push	{r4, r5, r6, lr}
   80586:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80588:	4b21      	ldr	r3, [pc, #132]	; (80610 <usart_serial_putchar+0x8c>)
   8058a:	4298      	cmp	r0, r3
   8058c:	d107      	bne.n	8059e <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8058e:	461e      	mov	r6, r3
   80590:	4d20      	ldr	r5, [pc, #128]	; (80614 <usart_serial_putchar+0x90>)
   80592:	4630      	mov	r0, r6
   80594:	4621      	mov	r1, r4
   80596:	47a8      	blx	r5
   80598:	2800      	cmp	r0, #0
   8059a:	d1fa      	bne.n	80592 <usart_serial_putchar+0xe>
   8059c:	e02b      	b.n	805f6 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8059e:	4b1e      	ldr	r3, [pc, #120]	; (80618 <usart_serial_putchar+0x94>)
   805a0:	4298      	cmp	r0, r3
   805a2:	d107      	bne.n	805b4 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   805a4:	461e      	mov	r6, r3
   805a6:	4d1d      	ldr	r5, [pc, #116]	; (8061c <usart_serial_putchar+0x98>)
   805a8:	4630      	mov	r0, r6
   805aa:	4621      	mov	r1, r4
   805ac:	47a8      	blx	r5
   805ae:	2800      	cmp	r0, #0
   805b0:	d1fa      	bne.n	805a8 <usart_serial_putchar+0x24>
   805b2:	e022      	b.n	805fa <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   805b4:	4b1a      	ldr	r3, [pc, #104]	; (80620 <usart_serial_putchar+0x9c>)
   805b6:	4298      	cmp	r0, r3
   805b8:	d107      	bne.n	805ca <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   805ba:	461e      	mov	r6, r3
   805bc:	4d17      	ldr	r5, [pc, #92]	; (8061c <usart_serial_putchar+0x98>)
   805be:	4630      	mov	r0, r6
   805c0:	4621      	mov	r1, r4
   805c2:	47a8      	blx	r5
   805c4:	2800      	cmp	r0, #0
   805c6:	d1fa      	bne.n	805be <usart_serial_putchar+0x3a>
   805c8:	e019      	b.n	805fe <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   805ca:	4b16      	ldr	r3, [pc, #88]	; (80624 <usart_serial_putchar+0xa0>)
   805cc:	4298      	cmp	r0, r3
   805ce:	d107      	bne.n	805e0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   805d0:	461e      	mov	r6, r3
   805d2:	4d12      	ldr	r5, [pc, #72]	; (8061c <usart_serial_putchar+0x98>)
   805d4:	4630      	mov	r0, r6
   805d6:	4621      	mov	r1, r4
   805d8:	47a8      	blx	r5
   805da:	2800      	cmp	r0, #0
   805dc:	d1fa      	bne.n	805d4 <usart_serial_putchar+0x50>
   805de:	e010      	b.n	80602 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   805e0:	4b11      	ldr	r3, [pc, #68]	; (80628 <usart_serial_putchar+0xa4>)
   805e2:	4298      	cmp	r0, r3
   805e4:	d10f      	bne.n	80606 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   805e6:	461e      	mov	r6, r3
   805e8:	4d0c      	ldr	r5, [pc, #48]	; (8061c <usart_serial_putchar+0x98>)
   805ea:	4630      	mov	r0, r6
   805ec:	4621      	mov	r1, r4
   805ee:	47a8      	blx	r5
   805f0:	2800      	cmp	r0, #0
   805f2:	d1fa      	bne.n	805ea <usart_serial_putchar+0x66>
   805f4:	e009      	b.n	8060a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   805f6:	2001      	movs	r0, #1
   805f8:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805fa:	2001      	movs	r0, #1
   805fc:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   805fe:	2001      	movs	r0, #1
   80600:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80602:	2001      	movs	r0, #1
   80604:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80606:	2000      	movs	r0, #0
   80608:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8060a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8060c:	bd70      	pop	{r4, r5, r6, pc}
   8060e:	bf00      	nop
   80610:	400e0800 	.word	0x400e0800
   80614:	00080421 	.word	0x00080421
   80618:	40098000 	.word	0x40098000
   8061c:	00080445 	.word	0x00080445
   80620:	4009c000 	.word	0x4009c000
   80624:	400a0000 	.word	0x400a0000
   80628:	400a4000 	.word	0x400a4000

0008062c <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   8062c:	b530      	push	{r4, r5, lr}
   8062e:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80630:	2008      	movs	r0, #8
   80632:	4d13      	ldr	r5, [pc, #76]	; (80680 <configureConsole+0x54>)
   80634:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80636:	4c13      	ldr	r4, [pc, #76]	; (80684 <configureConsole+0x58>)
   80638:	4b13      	ldr	r3, [pc, #76]	; (80688 <configureConsole+0x5c>)
   8063a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8063c:	4a13      	ldr	r2, [pc, #76]	; (8068c <configureConsole+0x60>)
   8063e:	4b14      	ldr	r3, [pc, #80]	; (80690 <configureConsole+0x64>)
   80640:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80642:	4a14      	ldr	r2, [pc, #80]	; (80694 <configureConsole+0x68>)
   80644:	4b14      	ldr	r3, [pc, #80]	; (80698 <configureConsole+0x6c>)
   80646:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80648:	4b14      	ldr	r3, [pc, #80]	; (8069c <configureConsole+0x70>)
   8064a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8064c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80650:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80652:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80656:	9303      	str	r3, [sp, #12]
   80658:	2008      	movs	r0, #8
   8065a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8065c:	4620      	mov	r0, r4
   8065e:	a901      	add	r1, sp, #4
   80660:	4b0f      	ldr	r3, [pc, #60]	; (806a0 <configureConsole+0x74>)
   80662:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80664:	4d0f      	ldr	r5, [pc, #60]	; (806a4 <configureConsole+0x78>)
   80666:	682b      	ldr	r3, [r5, #0]
   80668:	6898      	ldr	r0, [r3, #8]
   8066a:	2100      	movs	r1, #0
   8066c:	4c0e      	ldr	r4, [pc, #56]	; (806a8 <configureConsole+0x7c>)
   8066e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80670:	682b      	ldr	r3, [r5, #0]
   80672:	6858      	ldr	r0, [r3, #4]
   80674:	2100      	movs	r1, #0
   80676:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   80678:	2000      	movs	r0, #0
   8067a:	b005      	add	sp, #20
   8067c:	bd30      	pop	{r4, r5, pc}
   8067e:	bf00      	nop
   80680:	00080c69 	.word	0x00080c69
   80684:	400e0800 	.word	0x400e0800
   80688:	20070b18 	.word	0x20070b18
   8068c:	00080585 	.word	0x00080585
   80690:	20070b14 	.word	0x20070b14
   80694:	000804dd 	.word	0x000804dd
   80698:	20070b10 	.word	0x20070b10
   8069c:	0501bd00 	.word	0x0501bd00
   806a0:	000803e9 	.word	0x000803e9
   806a4:	20070568 	.word	0x20070568
   806a8:	000814f9 	.word	0x000814f9

000806ac <pin12_edge_handler>:
	

}

// Handler which calls when pin 53 is toggle.  
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   806ac:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   806ae:	4806      	ldr	r0, [pc, #24]	; (806c8 <pin12_edge_handler+0x1c>)
   806b0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   806b8:	4b04      	ldr	r3, [pc, #16]	; (806cc <pin12_edge_handler+0x20>)
   806ba:	4798      	blx	r3
   806bc:	b118      	cbz	r0, 806c6 <pin12_edge_handler+0x1a>
		//increase the counter value
		counter_2++;
   806be:	4b04      	ldr	r3, [pc, #16]	; (806d0 <pin12_edge_handler+0x24>)
   806c0:	881a      	ldrh	r2, [r3, #0]
   806c2:	3201      	adds	r2, #1
   806c4:	801a      	strh	r2, [r3, #0]
   806c6:	bd08      	pop	{r3, pc}
   806c8:	400e1200 	.word	0x400e1200
   806cc:	0008091d 	.word	0x0008091d
   806d0:	20070a60 	.word	0x20070a60

000806d4 <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}	
}

// Handler which calls when pin 51 is toggle. 
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   806d4:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   806d6:	4806      	ldr	r0, [pc, #24]	; (806f0 <pin14_edge_handler+0x1c>)
   806d8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   806e0:	4b04      	ldr	r3, [pc, #16]	; (806f4 <pin14_edge_handler+0x20>)
   806e2:	4798      	blx	r3
   806e4:	b118      	cbz	r0, 806ee <pin14_edge_handler+0x1a>
	//Increase the counter value
			counter_1++;
   806e6:	4b04      	ldr	r3, [pc, #16]	; (806f8 <pin14_edge_handler+0x24>)
   806e8:	881a      	ldrh	r2, [r3, #0]
   806ea:	3201      	adds	r2, #1
   806ec:	801a      	strh	r2, [r3, #0]
   806ee:	bd08      	pop	{r3, pc}
   806f0:	400e1000 	.word	0x400e1000
   806f4:	0008091d 	.word	0x0008091d
   806f8:	20070a5e 	.word	0x20070a5e

000806fc <configInterrupts>:
// Counter for Arlo Robot encoders for right and left wheel
 uint16_t counter_1 = 0;
 uint16_t counter_2 = 0;


void configInterrupts(void){
   806fc:	b570      	push	{r4, r5, r6, lr}
   806fe:	b082      	sub	sp, #8
	
	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   80700:	200c      	movs	r0, #12
   80702:	4c1a      	ldr	r4, [pc, #104]	; (8076c <configInterrupts+0x70>)
   80704:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);	
   80706:	200d      	movs	r0, #13
   80708:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   8070a:	4d19      	ldr	r5, [pc, #100]	; (80770 <configInterrupts+0x74>)
   8070c:	4628      	mov	r0, r5
   8070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80712:	2201      	movs	r2, #1
   80714:	4e17      	ldr	r6, [pc, #92]	; (80774 <configInterrupts+0x78>)
   80716:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   80718:	4c17      	ldr	r4, [pc, #92]	; (80778 <configInterrupts+0x7c>)
   8071a:	4620      	mov	r0, r4
   8071c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80720:	2201      	movs	r2, #1
   80722:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   80724:	4b15      	ldr	r3, [pc, #84]	; (8077c <configInterrupts+0x80>)
   80726:	9300      	str	r3, [sp, #0]
   80728:	4628      	mov	r0, r5
   8072a:	210d      	movs	r1, #13
   8072c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80730:	2340      	movs	r3, #64	; 0x40
   80732:	4e13      	ldr	r6, [pc, #76]	; (80780 <configInterrupts+0x84>)
   80734:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   80736:	4b13      	ldr	r3, [pc, #76]	; (80784 <configInterrupts+0x88>)
   80738:	9300      	str	r3, [sp, #0]
   8073a:	4620      	mov	r0, r4
   8073c:	210c      	movs	r1, #12
   8073e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80742:	2340      	movs	r3, #64	; 0x40
   80744:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   80746:	4628      	mov	r0, r5
   80748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8074c:	4d0e      	ldr	r5, [pc, #56]	; (80788 <configInterrupts+0x8c>)
   8074e:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   80750:	4620      	mov	r0, r4
   80752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80756:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80758:	4b0c      	ldr	r3, [pc, #48]	; (8078c <configInterrupts+0x90>)
   8075a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8075e:	601a      	str	r2, [r3, #0]
   80760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80764:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);
	

}
   80766:	b002      	add	sp, #8
   80768:	bd70      	pop	{r4, r5, r6, pc}
   8076a:	bf00      	nop
   8076c:	00080c69 	.word	0x00080c69
   80770:	400e1200 	.word	0x400e1200
   80774:	00080975 	.word	0x00080975
   80778:	400e1000 	.word	0x400e1000
   8077c:	000806ad 	.word	0x000806ad
   80780:	00080bdd 	.word	0x00080bdd
   80784:	000806d5 	.word	0x000806d5
   80788:	00080a01 	.word	0x00080a01
   8078c:	e000e100 	.word	0xe000e100

00080790 <radianToDegree>:

#include <math.h>
#include "MathFunctions.h"


int radianToDegree (double radian){
   80790:	b510      	push	{r4, lr}
	
	int degree;
	degree = (int) (radian*(180/M_PI));
   80792:	a305      	add	r3, pc, #20	; (adr r3, 807a8 <radianToDegree+0x18>)
   80794:	e9d3 2300 	ldrd	r2, r3, [r3]
   80798:	4c05      	ldr	r4, [pc, #20]	; (807b0 <radianToDegree+0x20>)
   8079a:	47a0      	blx	r4
   8079c:	4b05      	ldr	r3, [pc, #20]	; (807b4 <radianToDegree+0x24>)
   8079e:	4798      	blx	r3
	return degree;
	
}
   807a0:	bd10      	pop	{r4, pc}
   807a2:	bf00      	nop
   807a4:	f3af 8000 	nop.w
   807a8:	1a63c1f8 	.word	0x1a63c1f8
   807ac:	404ca5dc 	.word	0x404ca5dc
   807b0:	00080f79 	.word	0x00080f79
   807b4:	0008139d 	.word	0x0008139d

000807b8 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   807b8:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   807ba:	2055      	movs	r0, #85	; 0x55
   807bc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807c0:	4b0b      	ldr	r3, [pc, #44]	; (807f0 <initPin21+0x38>)
   807c2:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   807c4:	4b0b      	ldr	r3, [pc, #44]	; (807f4 <initPin21+0x3c>)
   807c6:	2404      	movs	r4, #4
   807c8:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   807ca:	220b      	movs	r2, #11
   807cc:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   807ce:	2200      	movs	r2, #0
   807d0:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   807d2:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 7500;
   807d4:	f641 514c 	movw	r1, #7500	; 0x1d4c
   807d8:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   807da:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   807dc:	4d06      	ldr	r5, [pc, #24]	; (807f8 <initPin21+0x40>)
   807de:	4628      	mov	r0, r5
   807e0:	4619      	mov	r1, r3
   807e2:	4b06      	ldr	r3, [pc, #24]	; (807fc <initPin21+0x44>)
   807e4:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   807e6:	4628      	mov	r0, r5
   807e8:	4621      	mov	r1, r4
   807ea:	4b05      	ldr	r3, [pc, #20]	; (80800 <initPin21+0x48>)
   807ec:	4798      	blx	r3
   807ee:	bd38      	pop	{r3, r4, r5, pc}
   807f0:	00080a11 	.word	0x00080a11
   807f4:	20070b44 	.word	0x20070b44
   807f8:	40094000 	.word	0x40094000
   807fc:	00080d59 	.word	0x00080d59
   80800:	00080e5d 	.word	0x00080e5d

00080804 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   80804:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   80806:	2056      	movs	r0, #86	; 0x56
   80808:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8080c:	4b0b      	ldr	r3, [pc, #44]	; (8083c <initPin22+0x38>)
   8080e:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   80810:	4b0b      	ldr	r3, [pc, #44]	; (80840 <initPin22+0x3c>)
   80812:	2405      	movs	r4, #5
   80814:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80816:	220b      	movs	r2, #11
   80818:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   8081a:	2200      	movs	r2, #0
   8081c:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   8081e:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 7500;
   80820:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80824:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   80826:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   80828:	4d06      	ldr	r5, [pc, #24]	; (80844 <initPin22+0x40>)
   8082a:	4628      	mov	r0, r5
   8082c:	4619      	mov	r1, r3
   8082e:	4b06      	ldr	r3, [pc, #24]	; (80848 <initPin22+0x44>)
   80830:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   80832:	4628      	mov	r0, r5
   80834:	4621      	mov	r1, r4
   80836:	4b05      	ldr	r3, [pc, #20]	; (8084c <initPin22+0x48>)
   80838:	4798      	blx	r3
   8083a:	bd38      	pop	{r3, r4, r5, pc}
   8083c:	00080a11 	.word	0x00080a11
   80840:	20070b1c 	.word	0x20070b1c
   80844:	40094000 	.word	0x40094000
   80848:	00080d59 	.word	0x00080d59
   8084c:	00080e5d 	.word	0x00080e5d

00080850 <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   80850:	b530      	push	{r4, r5, lr}
   80852:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   80854:	2024      	movs	r0, #36	; 0x24
   80856:	4b0d      	ldr	r3, [pc, #52]	; (8088c <PWM_init+0x3c>)
   80858:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   8085a:	4c0d      	ldr	r4, [pc, #52]	; (80890 <PWM_init+0x40>)
   8085c:	4620      	mov	r0, r4
   8085e:	2104      	movs	r1, #4
   80860:	4d0c      	ldr	r5, [pc, #48]	; (80894 <PWM_init+0x44>)
   80862:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   80864:	4620      	mov	r0, r4
   80866:	2105      	movs	r1, #5
   80868:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   8086a:	4b0b      	ldr	r3, [pc, #44]	; (80898 <PWM_init+0x48>)
   8086c:	9301      	str	r3, [sp, #4]
   8086e:	2300      	movs	r3, #0
   80870:	9302      	str	r3, [sp, #8]
   80872:	4b0a      	ldr	r3, [pc, #40]	; (8089c <PWM_init+0x4c>)
   80874:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   80876:	4620      	mov	r0, r4
   80878:	a901      	add	r1, sp, #4
   8087a:	4b09      	ldr	r3, [pc, #36]	; (808a0 <PWM_init+0x50>)
   8087c:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   8087e:	4b09      	ldr	r3, [pc, #36]	; (808a4 <PWM_init+0x54>)
   80880:	4798      	blx	r3
	initPin22();
   80882:	4b09      	ldr	r3, [pc, #36]	; (808a8 <PWM_init+0x58>)
   80884:	4798      	blx	r3
	
}
   80886:	b005      	add	sp, #20
   80888:	bd30      	pop	{r4, r5, pc}
   8088a:	bf00      	nop
   8088c:	00080c69 	.word	0x00080c69
   80890:	40094000 	.word	0x40094000
   80894:	00080e69 	.word	0x00080e69
   80898:	000f4240 	.word	0x000f4240
   8089c:	0501bd00 	.word	0x0501bd00
   808a0:	00080d19 	.word	0x00080d19
   808a4:	000807b9 	.word	0x000807b9
   808a8:	00080805 	.word	0x00080805

000808ac <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   808ac:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   808ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   808b2:	4b13      	ldr	r3, [pc, #76]	; (80900 <board_init+0x54>)
   808b4:	605a      	str	r2, [r3, #4]
   808b6:	200b      	movs	r0, #11
   808b8:	4c12      	ldr	r4, [pc, #72]	; (80904 <board_init+0x58>)
   808ba:	47a0      	blx	r4
   808bc:	200c      	movs	r0, #12
   808be:	47a0      	blx	r4
   808c0:	200d      	movs	r0, #13
   808c2:	47a0      	blx	r4
   808c4:	200e      	movs	r0, #14
   808c6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   808c8:	203b      	movs	r0, #59	; 0x3b
   808ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808ce:	4c0e      	ldr	r4, [pc, #56]	; (80908 <board_init+0x5c>)
   808d0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   808d2:	2055      	movs	r0, #85	; 0x55
   808d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808d8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   808da:	2056      	movs	r0, #86	; 0x56
   808dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808e0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   808e2:	2068      	movs	r0, #104	; 0x68
   808e4:	4909      	ldr	r1, [pc, #36]	; (8090c <board_init+0x60>)
   808e6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   808e8:	205c      	movs	r0, #92	; 0x5c
   808ea:	4909      	ldr	r1, [pc, #36]	; (80910 <board_init+0x64>)
   808ec:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   808ee:	4809      	ldr	r0, [pc, #36]	; (80914 <board_init+0x68>)
   808f0:	f44f 7140 	mov.w	r1, #768	; 0x300
   808f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   808f8:	4b07      	ldr	r3, [pc, #28]	; (80918 <board_init+0x6c>)
   808fa:	4798      	blx	r3
   808fc:	bd10      	pop	{r4, pc}
   808fe:	bf00      	nop
   80900:	400e1a50 	.word	0x400e1a50
   80904:	00080c69 	.word	0x00080c69
   80908:	00080a11 	.word	0x00080a11
   8090c:	28000079 	.word	0x28000079
   80910:	28000001 	.word	0x28000001
   80914:	400e0e00 	.word	0x400e0e00
   80918:	00080ae5 	.word	0x00080ae5

0008091c <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   8091c:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80920:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   80924:	bf0c      	ite	eq
   80926:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   80928:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   8092a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   8092c:	bf0c      	ite	eq
   8092e:	2000      	moveq	r0, #0
   80930:	2001      	movne	r0, #1
   80932:	4770      	bx	lr

00080934 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80934:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80936:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8093a:	d016      	beq.n	8096a <pio_set_peripheral+0x36>
   8093c:	d804      	bhi.n	80948 <pio_set_peripheral+0x14>
   8093e:	b1c1      	cbz	r1, 80972 <pio_set_peripheral+0x3e>
   80940:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80944:	d00a      	beq.n	8095c <pio_set_peripheral+0x28>
   80946:	e013      	b.n	80970 <pio_set_peripheral+0x3c>
   80948:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8094c:	d011      	beq.n	80972 <pio_set_peripheral+0x3e>
   8094e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80952:	d00e      	beq.n	80972 <pio_set_peripheral+0x3e>
   80954:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80958:	d10a      	bne.n	80970 <pio_set_peripheral+0x3c>
   8095a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8095c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8095e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80960:	400b      	ands	r3, r1
   80962:	ea23 0302 	bic.w	r3, r3, r2
   80966:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80968:	e002      	b.n	80970 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8096a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8096c:	4313      	orrs	r3, r2
   8096e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80970:	6042      	str	r2, [r0, #4]
   80972:	4770      	bx	lr

00080974 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80974:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80976:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8097a:	bf14      	ite	ne
   8097c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8097e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80980:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80984:	bf14      	ite	ne
   80986:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80988:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8098a:	f012 0f02 	tst.w	r2, #2
   8098e:	d002      	beq.n	80996 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80990:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80994:	e004      	b.n	809a0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80996:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8099a:	bf18      	it	ne
   8099c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   809a0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   809a2:	6001      	str	r1, [r0, #0]
   809a4:	4770      	bx	lr
   809a6:	bf00      	nop

000809a8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   809a8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   809aa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809ac:	9c01      	ldr	r4, [sp, #4]
   809ae:	b10c      	cbz	r4, 809b4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   809b0:	6641      	str	r1, [r0, #100]	; 0x64
   809b2:	e000      	b.n	809b6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809b4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   809b6:	b10b      	cbz	r3, 809bc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   809b8:	6501      	str	r1, [r0, #80]	; 0x50
   809ba:	e000      	b.n	809be <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   809bc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   809be:	b10a      	cbz	r2, 809c4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   809c0:	6301      	str	r1, [r0, #48]	; 0x30
   809c2:	e000      	b.n	809c6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   809c4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   809c6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   809c8:	6001      	str	r1, [r0, #0]
}
   809ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   809ce:	4770      	bx	lr

000809d0 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   809d0:	f012 0f10 	tst.w	r2, #16
   809d4:	d010      	beq.n	809f8 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   809d6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   809da:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   809de:	bf14      	ite	ne
   809e0:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   809e4:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   809e8:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   809ec:	bf14      	ite	ne
   809ee:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   809f2:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   809f6:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   809f8:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   809fc:	4770      	bx	lr
   809fe:	bf00      	nop

00080a00 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   80a00:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   80a02:	6401      	str	r1, [r0, #64]	; 0x40
   80a04:	4770      	bx	lr
   80a06:	bf00      	nop

00080a08 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80a08:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80a0a:	4770      	bx	lr

00080a0c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80a0c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80a0e:	4770      	bx	lr

00080a10 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80a10:	b570      	push	{r4, r5, r6, lr}
   80a12:	b082      	sub	sp, #8
   80a14:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80a16:	0944      	lsrs	r4, r0, #5
   80a18:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80a1c:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80a20:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80a22:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80a26:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80a2a:	d030      	beq.n	80a8e <pio_configure_pin+0x7e>
   80a2c:	d806      	bhi.n	80a3c <pio_configure_pin+0x2c>
   80a2e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80a32:	d00a      	beq.n	80a4a <pio_configure_pin+0x3a>
   80a34:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80a38:	d018      	beq.n	80a6c <pio_configure_pin+0x5c>
   80a3a:	e049      	b.n	80ad0 <pio_configure_pin+0xc0>
   80a3c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a40:	d030      	beq.n	80aa4 <pio_configure_pin+0x94>
   80a42:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a46:	d02d      	beq.n	80aa4 <pio_configure_pin+0x94>
   80a48:	e042      	b.n	80ad0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80a4a:	f000 001f 	and.w	r0, r0, #31
   80a4e:	2401      	movs	r4, #1
   80a50:	4084      	lsls	r4, r0
   80a52:	4630      	mov	r0, r6
   80a54:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a58:	4622      	mov	r2, r4
   80a5a:	4b1f      	ldr	r3, [pc, #124]	; (80ad8 <pio_configure_pin+0xc8>)
   80a5c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a5e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a62:	bf14      	ite	ne
   80a64:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a66:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a68:	2001      	movs	r0, #1
   80a6a:	e032      	b.n	80ad2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80a6c:	f000 001f 	and.w	r0, r0, #31
   80a70:	2401      	movs	r4, #1
   80a72:	4084      	lsls	r4, r0
   80a74:	4630      	mov	r0, r6
   80a76:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a7a:	4622      	mov	r2, r4
   80a7c:	4b16      	ldr	r3, [pc, #88]	; (80ad8 <pio_configure_pin+0xc8>)
   80a7e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a80:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a84:	bf14      	ite	ne
   80a86:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a88:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a8a:	2001      	movs	r0, #1
   80a8c:	e021      	b.n	80ad2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80a8e:	f000 011f 	and.w	r1, r0, #31
   80a92:	2401      	movs	r4, #1
   80a94:	4630      	mov	r0, r6
   80a96:	fa04 f101 	lsl.w	r1, r4, r1
   80a9a:	462a      	mov	r2, r5
   80a9c:	4b0f      	ldr	r3, [pc, #60]	; (80adc <pio_configure_pin+0xcc>)
   80a9e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80aa0:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80aa2:	e016      	b.n	80ad2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80aa4:	f000 011f 	and.w	r1, r0, #31
   80aa8:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80aaa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80aae:	ea05 0304 	and.w	r3, r5, r4
   80ab2:	9300      	str	r3, [sp, #0]
   80ab4:	4630      	mov	r0, r6
   80ab6:	fa04 f101 	lsl.w	r1, r4, r1
   80aba:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80abe:	bf14      	ite	ne
   80ac0:	2200      	movne	r2, #0
   80ac2:	2201      	moveq	r2, #1
   80ac4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80ac8:	4d05      	ldr	r5, [pc, #20]	; (80ae0 <pio_configure_pin+0xd0>)
   80aca:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80acc:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80ace:	e000      	b.n	80ad2 <pio_configure_pin+0xc2>

	default:
		return 0;
   80ad0:	2000      	movs	r0, #0
	}

	return 1;
}
   80ad2:	b002      	add	sp, #8
   80ad4:	bd70      	pop	{r4, r5, r6, pc}
   80ad6:	bf00      	nop
   80ad8:	00080935 	.word	0x00080935
   80adc:	00080975 	.word	0x00080975
   80ae0:	000809a9 	.word	0x000809a9

00080ae4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80ae6:	b083      	sub	sp, #12
   80ae8:	4607      	mov	r7, r0
   80aea:	460e      	mov	r6, r1
   80aec:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80aee:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80af2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80af6:	d026      	beq.n	80b46 <pio_configure_pin_group+0x62>
   80af8:	d806      	bhi.n	80b08 <pio_configure_pin_group+0x24>
   80afa:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80afe:	d00a      	beq.n	80b16 <pio_configure_pin_group+0x32>
   80b00:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80b04:	d013      	beq.n	80b2e <pio_configure_pin_group+0x4a>
   80b06:	e034      	b.n	80b72 <pio_configure_pin_group+0x8e>
   80b08:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80b0c:	d01f      	beq.n	80b4e <pio_configure_pin_group+0x6a>
   80b0e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80b12:	d01c      	beq.n	80b4e <pio_configure_pin_group+0x6a>
   80b14:	e02d      	b.n	80b72 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80b16:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b1a:	4632      	mov	r2, r6
   80b1c:	4b16      	ldr	r3, [pc, #88]	; (80b78 <pio_configure_pin_group+0x94>)
   80b1e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b20:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b24:	bf14      	ite	ne
   80b26:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b28:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b2a:	2001      	movs	r0, #1
   80b2c:	e022      	b.n	80b74 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80b2e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b32:	4632      	mov	r2, r6
   80b34:	4b10      	ldr	r3, [pc, #64]	; (80b78 <pio_configure_pin_group+0x94>)
   80b36:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b38:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b3c:	bf14      	ite	ne
   80b3e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b40:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b42:	2001      	movs	r0, #1
   80b44:	e016      	b.n	80b74 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80b46:	4b0d      	ldr	r3, [pc, #52]	; (80b7c <pio_configure_pin_group+0x98>)
   80b48:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b4a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80b4c:	e012      	b.n	80b74 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b4e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80b52:	f005 0301 	and.w	r3, r5, #1
   80b56:	9300      	str	r3, [sp, #0]
   80b58:	4638      	mov	r0, r7
   80b5a:	4631      	mov	r1, r6
   80b5c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b60:	bf14      	ite	ne
   80b62:	2200      	movne	r2, #0
   80b64:	2201      	moveq	r2, #1
   80b66:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b6a:	4c05      	ldr	r4, [pc, #20]	; (80b80 <pio_configure_pin_group+0x9c>)
   80b6c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80b6e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80b70:	e000      	b.n	80b74 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80b72:	2000      	movs	r0, #0
	}

	return 1;
}
   80b74:	b003      	add	sp, #12
   80b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b78:	00080935 	.word	0x00080935
   80b7c:	00080975 	.word	0x00080975
   80b80:	000809a9 	.word	0x000809a9

00080b84 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80b88:	4604      	mov	r4, r0
   80b8a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80b8c:	4b10      	ldr	r3, [pc, #64]	; (80bd0 <pio_handler_process+0x4c>)
   80b8e:	4798      	blx	r3
   80b90:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80b92:	4620      	mov	r0, r4
   80b94:	4b0f      	ldr	r3, [pc, #60]	; (80bd4 <pio_handler_process+0x50>)
   80b96:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80b98:	4005      	ands	r5, r0
   80b9a:	d017      	beq.n	80bcc <pio_handler_process+0x48>
   80b9c:	4f0e      	ldr	r7, [pc, #56]	; (80bd8 <pio_handler_process+0x54>)
   80b9e:	f107 040c 	add.w	r4, r7, #12
   80ba2:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80ba4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80ba8:	42b3      	cmp	r3, r6
   80baa:	d10a      	bne.n	80bc2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80bac:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80bb0:	4229      	tst	r1, r5
   80bb2:	d006      	beq.n	80bc2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80bb4:	6823      	ldr	r3, [r4, #0]
   80bb6:	4630      	mov	r0, r6
   80bb8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80bba:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80bbe:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80bc2:	42bc      	cmp	r4, r7
   80bc4:	d002      	beq.n	80bcc <pio_handler_process+0x48>
   80bc6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80bc8:	2d00      	cmp	r5, #0
   80bca:	d1eb      	bne.n	80ba4 <pio_handler_process+0x20>
   80bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80bd0:	00080a09 	.word	0x00080a09
   80bd4:	00080a0d 	.word	0x00080a0d
   80bd8:	20070a68 	.word	0x20070a68

00080bdc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80bde:	4c0b      	ldr	r4, [pc, #44]	; (80c0c <pio_handler_set+0x30>)
   80be0:	6824      	ldr	r4, [r4, #0]
   80be2:	2c06      	cmp	r4, #6
   80be4:	d810      	bhi.n	80c08 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   80be6:	4f0a      	ldr	r7, [pc, #40]	; (80c10 <pio_handler_set+0x34>)
   80be8:	0126      	lsls	r6, r4, #4
   80bea:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   80bec:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   80bee:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   80bf0:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   80bf2:	9906      	ldr	r1, [sp, #24]
   80bf4:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   80bf6:	3401      	adds	r4, #1
   80bf8:	4904      	ldr	r1, [pc, #16]	; (80c0c <pio_handler_set+0x30>)
   80bfa:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80bfc:	4611      	mov	r1, r2
   80bfe:	461a      	mov	r2, r3
   80c00:	4b04      	ldr	r3, [pc, #16]	; (80c14 <pio_handler_set+0x38>)
   80c02:	4798      	blx	r3

	return 0;
   80c04:	2000      	movs	r0, #0
   80c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80c08:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c0c:	20070a64 	.word	0x20070a64
   80c10:	20070a68 	.word	0x20070a68
   80c14:	000809d1 	.word	0x000809d1

00080c18 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80c18:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80c1a:	4802      	ldr	r0, [pc, #8]	; (80c24 <PIOA_Handler+0xc>)
   80c1c:	210b      	movs	r1, #11
   80c1e:	4b02      	ldr	r3, [pc, #8]	; (80c28 <PIOA_Handler+0x10>)
   80c20:	4798      	blx	r3
   80c22:	bd08      	pop	{r3, pc}
   80c24:	400e0e00 	.word	0x400e0e00
   80c28:	00080b85 	.word	0x00080b85

00080c2c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80c2c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80c2e:	4802      	ldr	r0, [pc, #8]	; (80c38 <PIOB_Handler+0xc>)
   80c30:	210c      	movs	r1, #12
   80c32:	4b02      	ldr	r3, [pc, #8]	; (80c3c <PIOB_Handler+0x10>)
   80c34:	4798      	blx	r3
   80c36:	bd08      	pop	{r3, pc}
   80c38:	400e1000 	.word	0x400e1000
   80c3c:	00080b85 	.word	0x00080b85

00080c40 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80c40:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80c42:	4802      	ldr	r0, [pc, #8]	; (80c4c <PIOC_Handler+0xc>)
   80c44:	210d      	movs	r1, #13
   80c46:	4b02      	ldr	r3, [pc, #8]	; (80c50 <PIOC_Handler+0x10>)
   80c48:	4798      	blx	r3
   80c4a:	bd08      	pop	{r3, pc}
   80c4c:	400e1200 	.word	0x400e1200
   80c50:	00080b85 	.word	0x00080b85

00080c54 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80c54:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80c56:	4802      	ldr	r0, [pc, #8]	; (80c60 <PIOD_Handler+0xc>)
   80c58:	210e      	movs	r1, #14
   80c5a:	4b02      	ldr	r3, [pc, #8]	; (80c64 <PIOD_Handler+0x10>)
   80c5c:	4798      	blx	r3
   80c5e:	bd08      	pop	{r3, pc}
   80c60:	400e1400 	.word	0x400e1400
   80c64:	00080b85 	.word	0x00080b85

00080c68 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c68:	282c      	cmp	r0, #44	; 0x2c
   80c6a:	d820      	bhi.n	80cae <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80c6c:	281f      	cmp	r0, #31
   80c6e:	d80d      	bhi.n	80c8c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c70:	4b12      	ldr	r3, [pc, #72]	; (80cbc <pmc_enable_periph_clk+0x54>)
   80c72:	699a      	ldr	r2, [r3, #24]
   80c74:	2301      	movs	r3, #1
   80c76:	4083      	lsls	r3, r0
   80c78:	401a      	ands	r2, r3
   80c7a:	4293      	cmp	r3, r2
   80c7c:	d019      	beq.n	80cb2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80c7e:	2301      	movs	r3, #1
   80c80:	fa03 f000 	lsl.w	r0, r3, r0
   80c84:	4b0d      	ldr	r3, [pc, #52]	; (80cbc <pmc_enable_periph_clk+0x54>)
   80c86:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c88:	2000      	movs	r0, #0
   80c8a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c8c:	4b0b      	ldr	r3, [pc, #44]	; (80cbc <pmc_enable_periph_clk+0x54>)
   80c8e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80c92:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c94:	2301      	movs	r3, #1
   80c96:	4083      	lsls	r3, r0
   80c98:	401a      	ands	r2, r3
   80c9a:	4293      	cmp	r3, r2
   80c9c:	d00b      	beq.n	80cb6 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80c9e:	2301      	movs	r3, #1
   80ca0:	fa03 f000 	lsl.w	r0, r3, r0
   80ca4:	4b05      	ldr	r3, [pc, #20]	; (80cbc <pmc_enable_periph_clk+0x54>)
   80ca6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80caa:	2000      	movs	r0, #0
   80cac:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80cae:	2001      	movs	r0, #1
   80cb0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80cb2:	2000      	movs	r0, #0
   80cb4:	4770      	bx	lr
   80cb6:	2000      	movs	r0, #0
}
   80cb8:	4770      	bx	lr
   80cba:	bf00      	nop
   80cbc:	400e0600 	.word	0x400e0600

00080cc0 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80cc0:	b4f0      	push	{r4, r5, r6, r7}
   80cc2:	b08c      	sub	sp, #48	; 0x30
   80cc4:	4607      	mov	r7, r0
   80cc6:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80cc8:	ac01      	add	r4, sp, #4
   80cca:	4d12      	ldr	r5, [pc, #72]	; (80d14 <pwm_clocks_generate+0x54>)
   80ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80cd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80cd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80cdc:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80cde:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80ce0:	f852 4f04 	ldr.w	r4, [r2, #4]!
   80ce4:	fbb6 f4f4 	udiv	r4, r6, r4
   80ce8:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80cec:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   80cf0:	d903      	bls.n	80cfa <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   80cf2:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80cf4:	2b0b      	cmp	r3, #11
   80cf6:	d1f3      	bne.n	80ce0 <pwm_clocks_generate+0x20>
   80cf8:	e004      	b.n	80d04 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80cfa:	2b0a      	cmp	r3, #10
   80cfc:	d805      	bhi.n	80d0a <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   80cfe:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   80d02:	e004      	b.n	80d0e <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80d04:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80d08:	e001      	b.n	80d0e <pwm_clocks_generate+0x4e>
   80d0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   80d0e:	b00c      	add	sp, #48	; 0x30
   80d10:	bcf0      	pop	{r4, r5, r6, r7}
   80d12:	4770      	bx	lr
   80d14:	000843d0 	.word	0x000843d0

00080d18 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80d18:	b570      	push	{r4, r5, r6, lr}
   80d1a:	4606      	mov	r6, r0
   80d1c:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80d1e:	6808      	ldr	r0, [r1, #0]
   80d20:	b140      	cbz	r0, 80d34 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80d22:	6889      	ldr	r1, [r1, #8]
   80d24:	4b0b      	ldr	r3, [pc, #44]	; (80d54 <pwm_init+0x3c>)
   80d26:	4798      	blx	r3
   80d28:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80d2e:	4298      	cmp	r0, r3
   80d30:	d101      	bne.n	80d36 <pwm_init+0x1e>
   80d32:	e00e      	b.n	80d52 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80d34:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80d36:	6860      	ldr	r0, [r4, #4]
   80d38:	b140      	cbz	r0, 80d4c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80d3a:	68a1      	ldr	r1, [r4, #8]
   80d3c:	4b05      	ldr	r3, [pc, #20]	; (80d54 <pwm_init+0x3c>)
   80d3e:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80d44:	4298      	cmp	r0, r3
   80d46:	d004      	beq.n	80d52 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80d48:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80d4c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80d4e:	2000      	movs	r0, #0
   80d50:	bd70      	pop	{r4, r5, r6, pc}
}
   80d52:	bd70      	pop	{r4, r5, r6, pc}
   80d54:	00080cc1 	.word	0x00080cc1

00080d58 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80d58:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80d5a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80d5c:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80d5e:	684a      	ldr	r2, [r1, #4]
   80d60:	f002 020f 	and.w	r2, r2, #15
   80d64:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80d66:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80d68:	432c      	orrs	r4, r5
   80d6a:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80d6c:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80d70:	7d8a      	ldrb	r2, [r1, #22]
   80d72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80d76:	7dca      	ldrb	r2, [r1, #23]
   80d78:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80d7c:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80d7e:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   80d82:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80d86:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80d8a:	68cc      	ldr	r4, [r1, #12]
   80d8c:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80d90:	690c      	ldr	r4, [r1, #16]
   80d92:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80d96:	7d8a      	ldrb	r2, [r1, #22]
   80d98:	b13a      	cbz	r2, 80daa <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80d9a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80d9c:	8b4a      	ldrh	r2, [r1, #26]
   80d9e:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80da2:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   80da6:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80daa:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80dac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80db0:	409a      	lsls	r2, r3
   80db2:	43d2      	mvns	r2, r2
   80db4:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80db6:	7fce      	ldrb	r6, [r1, #31]
   80db8:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80dba:	7f8c      	ldrb	r4, [r1, #30]
   80dbc:	409c      	lsls	r4, r3
   80dbe:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80dc2:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80dc4:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80dc6:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80dc8:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80dca:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80dce:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80dd0:	f891 4020 	ldrb.w	r4, [r1, #32]
   80dd4:	409c      	lsls	r4, r3
   80dd6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80dda:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80ddc:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80dde:	2201      	movs	r2, #1
   80de0:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80de2:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80de6:	b11c      	cbz	r4, 80df0 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80de8:	6a04      	ldr	r4, [r0, #32]
   80dea:	4314      	orrs	r4, r2
   80dec:	6204      	str	r4, [r0, #32]
   80dee:	e003      	b.n	80df8 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80df0:	6a04      	ldr	r4, [r0, #32]
   80df2:	ea24 0402 	bic.w	r4, r4, r2
   80df6:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80df8:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80dfc:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80dfe:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80e00:	bf0c      	ite	eq
   80e02:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80e04:	4394      	bicne	r4, r2
   80e06:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80e08:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80e0c:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80e0e:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80e10:	bf0c      	ite	eq
   80e12:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80e16:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80e1a:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80e1c:	2b03      	cmp	r3, #3
   80e1e:	d80c      	bhi.n	80e3a <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80e20:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80e22:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80e24:	22ff      	movs	r2, #255	; 0xff
   80e26:	409a      	lsls	r2, r3
   80e28:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80e2c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80e30:	fa01 f303 	lsl.w	r3, r1, r3
   80e34:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80e36:	66c3      	str	r3, [r0, #108]	; 0x6c
   80e38:	e00c      	b.n	80e54 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80e3a:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80e3c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80e3e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80e40:	22ff      	movs	r2, #255	; 0xff
   80e42:	409a      	lsls	r2, r3
   80e44:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80e48:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80e4c:	fa01 f303 	lsl.w	r3, r1, r3
   80e50:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80e52:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80e54:	2000      	movs	r0, #0
   80e56:	bc70      	pop	{r4, r5, r6}
   80e58:	4770      	bx	lr
   80e5a:	bf00      	nop

00080e5c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80e5c:	2301      	movs	r3, #1
   80e5e:	fa03 f101 	lsl.w	r1, r3, r1
   80e62:	6041      	str	r1, [r0, #4]
   80e64:	4770      	bx	lr
   80e66:	bf00      	nop

00080e68 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80e68:	2301      	movs	r3, #1
   80e6a:	fa03 f101 	lsl.w	r1, r3, r1
   80e6e:	6081      	str	r1, [r0, #8]
   80e70:	4770      	bx	lr
   80e72:	bf00      	nop

00080e74 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80e74:	e7fe      	b.n	80e74 <Dummy_Handler>
   80e76:	bf00      	nop

00080e78 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80e78:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80e7a:	4b1e      	ldr	r3, [pc, #120]	; (80ef4 <Reset_Handler+0x7c>)
   80e7c:	4a1e      	ldr	r2, [pc, #120]	; (80ef8 <Reset_Handler+0x80>)
   80e7e:	429a      	cmp	r2, r3
   80e80:	d003      	beq.n	80e8a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80e82:	4b1e      	ldr	r3, [pc, #120]	; (80efc <Reset_Handler+0x84>)
   80e84:	4a1b      	ldr	r2, [pc, #108]	; (80ef4 <Reset_Handler+0x7c>)
   80e86:	429a      	cmp	r2, r3
   80e88:	d304      	bcc.n	80e94 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e8a:	4b1d      	ldr	r3, [pc, #116]	; (80f00 <Reset_Handler+0x88>)
   80e8c:	4a1d      	ldr	r2, [pc, #116]	; (80f04 <Reset_Handler+0x8c>)
   80e8e:	429a      	cmp	r2, r3
   80e90:	d30f      	bcc.n	80eb2 <Reset_Handler+0x3a>
   80e92:	e01a      	b.n	80eca <Reset_Handler+0x52>
   80e94:	4b1c      	ldr	r3, [pc, #112]	; (80f08 <Reset_Handler+0x90>)
   80e96:	4c1d      	ldr	r4, [pc, #116]	; (80f0c <Reset_Handler+0x94>)
   80e98:	1ae4      	subs	r4, r4, r3
   80e9a:	f024 0403 	bic.w	r4, r4, #3
   80e9e:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80ea0:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80ea2:	4814      	ldr	r0, [pc, #80]	; (80ef4 <Reset_Handler+0x7c>)
   80ea4:	4914      	ldr	r1, [pc, #80]	; (80ef8 <Reset_Handler+0x80>)
   80ea6:	585a      	ldr	r2, [r3, r1]
   80ea8:	501a      	str	r2, [r3, r0]
   80eaa:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80eac:	42a3      	cmp	r3, r4
   80eae:	d1fa      	bne.n	80ea6 <Reset_Handler+0x2e>
   80eb0:	e7eb      	b.n	80e8a <Reset_Handler+0x12>
   80eb2:	4b17      	ldr	r3, [pc, #92]	; (80f10 <Reset_Handler+0x98>)
   80eb4:	4917      	ldr	r1, [pc, #92]	; (80f14 <Reset_Handler+0x9c>)
   80eb6:	1ac9      	subs	r1, r1, r3
   80eb8:	f021 0103 	bic.w	r1, r1, #3
   80ebc:	1d1a      	adds	r2, r3, #4
   80ebe:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80ec0:	2200      	movs	r2, #0
   80ec2:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ec6:	428b      	cmp	r3, r1
   80ec8:	d1fb      	bne.n	80ec2 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80eca:	4a13      	ldr	r2, [pc, #76]	; (80f18 <Reset_Handler+0xa0>)
   80ecc:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80ed0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80ed4:	4911      	ldr	r1, [pc, #68]	; (80f1c <Reset_Handler+0xa4>)
   80ed6:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80ed8:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80edc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80ee0:	d203      	bcs.n	80eea <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80ee2:	688a      	ldr	r2, [r1, #8]
   80ee4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80ee8:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80eea:	4b0d      	ldr	r3, [pc, #52]	; (80f20 <Reset_Handler+0xa8>)
   80eec:	4798      	blx	r3

	/* Branch to main function */
	main();
   80eee:	4b0d      	ldr	r3, [pc, #52]	; (80f24 <Reset_Handler+0xac>)
   80ef0:	4798      	blx	r3
   80ef2:	e7fe      	b.n	80ef2 <Reset_Handler+0x7a>
   80ef4:	20070000 	.word	0x20070000
   80ef8:	00084480 	.word	0x00084480
   80efc:	200709a4 	.word	0x200709a4
   80f00:	20070b70 	.word	0x20070b70
   80f04:	200709a4 	.word	0x200709a4
   80f08:	20070004 	.word	0x20070004
   80f0c:	200709a7 	.word	0x200709a7
   80f10:	200709a0 	.word	0x200709a0
   80f14:	20070b6b 	.word	0x20070b6b
   80f18:	00080000 	.word	0x00080000
   80f1c:	e000ed00 	.word	0xe000ed00
   80f20:	000813ed 	.word	0x000813ed
   80f24:	00080149 	.word	0x00080149

00080f28 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80f28:	4b09      	ldr	r3, [pc, #36]	; (80f50 <_sbrk+0x28>)
   80f2a:	681b      	ldr	r3, [r3, #0]
   80f2c:	b913      	cbnz	r3, 80f34 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80f2e:	4a09      	ldr	r2, [pc, #36]	; (80f54 <_sbrk+0x2c>)
   80f30:	4b07      	ldr	r3, [pc, #28]	; (80f50 <_sbrk+0x28>)
   80f32:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80f34:	4b06      	ldr	r3, [pc, #24]	; (80f50 <_sbrk+0x28>)
   80f36:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80f38:	181a      	adds	r2, r3, r0
   80f3a:	4907      	ldr	r1, [pc, #28]	; (80f58 <_sbrk+0x30>)
   80f3c:	4291      	cmp	r1, r2
   80f3e:	db04      	blt.n	80f4a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80f40:	4610      	mov	r0, r2
   80f42:	4a03      	ldr	r2, [pc, #12]	; (80f50 <_sbrk+0x28>)
   80f44:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80f46:	4618      	mov	r0, r3
   80f48:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80f4a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80f4e:	4770      	bx	lr
   80f50:	20070ad8 	.word	0x20070ad8
   80f54:	20072b70 	.word	0x20072b70
   80f58:	20087ffc 	.word	0x20087ffc

00080f5c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80f5c:	f04f 30ff 	mov.w	r0, #4294967295
   80f60:	4770      	bx	lr
   80f62:	bf00      	nop

00080f64 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80f68:	604b      	str	r3, [r1, #4]

	return 0;
}
   80f6a:	2000      	movs	r0, #0
   80f6c:	4770      	bx	lr
   80f6e:	bf00      	nop

00080f70 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80f70:	2001      	movs	r0, #1
   80f72:	4770      	bx	lr

00080f74 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80f74:	2000      	movs	r0, #0
   80f76:	4770      	bx	lr

00080f78 <__aeabi_dmul>:
   80f78:	b570      	push	{r4, r5, r6, lr}
   80f7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80f7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80f82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80f86:	bf1d      	ittte	ne
   80f88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80f8c:	ea94 0f0c 	teqne	r4, ip
   80f90:	ea95 0f0c 	teqne	r5, ip
   80f94:	f000 f8de 	bleq	81154 <__aeabi_dmul+0x1dc>
   80f98:	442c      	add	r4, r5
   80f9a:	ea81 0603 	eor.w	r6, r1, r3
   80f9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   80fa2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   80fa6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   80faa:	bf18      	it	ne
   80fac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   80fb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80fb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80fb8:	d038      	beq.n	8102c <__aeabi_dmul+0xb4>
   80fba:	fba0 ce02 	umull	ip, lr, r0, r2
   80fbe:	f04f 0500 	mov.w	r5, #0
   80fc2:	fbe1 e502 	umlal	lr, r5, r1, r2
   80fc6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   80fca:	fbe0 e503 	umlal	lr, r5, r0, r3
   80fce:	f04f 0600 	mov.w	r6, #0
   80fd2:	fbe1 5603 	umlal	r5, r6, r1, r3
   80fd6:	f09c 0f00 	teq	ip, #0
   80fda:	bf18      	it	ne
   80fdc:	f04e 0e01 	orrne.w	lr, lr, #1
   80fe0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   80fe4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   80fe8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   80fec:	d204      	bcs.n	80ff8 <__aeabi_dmul+0x80>
   80fee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   80ff2:	416d      	adcs	r5, r5
   80ff4:	eb46 0606 	adc.w	r6, r6, r6
   80ff8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   80ffc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81000:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81004:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81008:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8100c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81010:	bf88      	it	hi
   81012:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81016:	d81e      	bhi.n	81056 <__aeabi_dmul+0xde>
   81018:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8101c:	bf08      	it	eq
   8101e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81022:	f150 0000 	adcs.w	r0, r0, #0
   81026:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8102a:	bd70      	pop	{r4, r5, r6, pc}
   8102c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81030:	ea46 0101 	orr.w	r1, r6, r1
   81034:	ea40 0002 	orr.w	r0, r0, r2
   81038:	ea81 0103 	eor.w	r1, r1, r3
   8103c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81040:	bfc2      	ittt	gt
   81042:	ebd4 050c 	rsbsgt	r5, r4, ip
   81046:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8104a:	bd70      	popgt	{r4, r5, r6, pc}
   8104c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81050:	f04f 0e00 	mov.w	lr, #0
   81054:	3c01      	subs	r4, #1
   81056:	f300 80ab 	bgt.w	811b0 <__aeabi_dmul+0x238>
   8105a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8105e:	bfde      	ittt	le
   81060:	2000      	movle	r0, #0
   81062:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81066:	bd70      	pople	{r4, r5, r6, pc}
   81068:	f1c4 0400 	rsb	r4, r4, #0
   8106c:	3c20      	subs	r4, #32
   8106e:	da35      	bge.n	810dc <__aeabi_dmul+0x164>
   81070:	340c      	adds	r4, #12
   81072:	dc1b      	bgt.n	810ac <__aeabi_dmul+0x134>
   81074:	f104 0414 	add.w	r4, r4, #20
   81078:	f1c4 0520 	rsb	r5, r4, #32
   8107c:	fa00 f305 	lsl.w	r3, r0, r5
   81080:	fa20 f004 	lsr.w	r0, r0, r4
   81084:	fa01 f205 	lsl.w	r2, r1, r5
   81088:	ea40 0002 	orr.w	r0, r0, r2
   8108c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81090:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81094:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81098:	fa21 f604 	lsr.w	r6, r1, r4
   8109c:	eb42 0106 	adc.w	r1, r2, r6
   810a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   810a4:	bf08      	it	eq
   810a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   810aa:	bd70      	pop	{r4, r5, r6, pc}
   810ac:	f1c4 040c 	rsb	r4, r4, #12
   810b0:	f1c4 0520 	rsb	r5, r4, #32
   810b4:	fa00 f304 	lsl.w	r3, r0, r4
   810b8:	fa20 f005 	lsr.w	r0, r0, r5
   810bc:	fa01 f204 	lsl.w	r2, r1, r4
   810c0:	ea40 0002 	orr.w	r0, r0, r2
   810c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   810c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   810cc:	f141 0100 	adc.w	r1, r1, #0
   810d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   810d4:	bf08      	it	eq
   810d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   810da:	bd70      	pop	{r4, r5, r6, pc}
   810dc:	f1c4 0520 	rsb	r5, r4, #32
   810e0:	fa00 f205 	lsl.w	r2, r0, r5
   810e4:	ea4e 0e02 	orr.w	lr, lr, r2
   810e8:	fa20 f304 	lsr.w	r3, r0, r4
   810ec:	fa01 f205 	lsl.w	r2, r1, r5
   810f0:	ea43 0302 	orr.w	r3, r3, r2
   810f4:	fa21 f004 	lsr.w	r0, r1, r4
   810f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   810fc:	fa21 f204 	lsr.w	r2, r1, r4
   81100:	ea20 0002 	bic.w	r0, r0, r2
   81104:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81108:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8110c:	bf08      	it	eq
   8110e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81112:	bd70      	pop	{r4, r5, r6, pc}
   81114:	f094 0f00 	teq	r4, #0
   81118:	d10f      	bne.n	8113a <__aeabi_dmul+0x1c2>
   8111a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8111e:	0040      	lsls	r0, r0, #1
   81120:	eb41 0101 	adc.w	r1, r1, r1
   81124:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81128:	bf08      	it	eq
   8112a:	3c01      	subeq	r4, #1
   8112c:	d0f7      	beq.n	8111e <__aeabi_dmul+0x1a6>
   8112e:	ea41 0106 	orr.w	r1, r1, r6
   81132:	f095 0f00 	teq	r5, #0
   81136:	bf18      	it	ne
   81138:	4770      	bxne	lr
   8113a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8113e:	0052      	lsls	r2, r2, #1
   81140:	eb43 0303 	adc.w	r3, r3, r3
   81144:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81148:	bf08      	it	eq
   8114a:	3d01      	subeq	r5, #1
   8114c:	d0f7      	beq.n	8113e <__aeabi_dmul+0x1c6>
   8114e:	ea43 0306 	orr.w	r3, r3, r6
   81152:	4770      	bx	lr
   81154:	ea94 0f0c 	teq	r4, ip
   81158:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8115c:	bf18      	it	ne
   8115e:	ea95 0f0c 	teqne	r5, ip
   81162:	d00c      	beq.n	8117e <__aeabi_dmul+0x206>
   81164:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81168:	bf18      	it	ne
   8116a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8116e:	d1d1      	bne.n	81114 <__aeabi_dmul+0x19c>
   81170:	ea81 0103 	eor.w	r1, r1, r3
   81174:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81178:	f04f 0000 	mov.w	r0, #0
   8117c:	bd70      	pop	{r4, r5, r6, pc}
   8117e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81182:	bf06      	itte	eq
   81184:	4610      	moveq	r0, r2
   81186:	4619      	moveq	r1, r3
   81188:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8118c:	d019      	beq.n	811c2 <__aeabi_dmul+0x24a>
   8118e:	ea94 0f0c 	teq	r4, ip
   81192:	d102      	bne.n	8119a <__aeabi_dmul+0x222>
   81194:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81198:	d113      	bne.n	811c2 <__aeabi_dmul+0x24a>
   8119a:	ea95 0f0c 	teq	r5, ip
   8119e:	d105      	bne.n	811ac <__aeabi_dmul+0x234>
   811a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   811a4:	bf1c      	itt	ne
   811a6:	4610      	movne	r0, r2
   811a8:	4619      	movne	r1, r3
   811aa:	d10a      	bne.n	811c2 <__aeabi_dmul+0x24a>
   811ac:	ea81 0103 	eor.w	r1, r1, r3
   811b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   811b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   811b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   811bc:	f04f 0000 	mov.w	r0, #0
   811c0:	bd70      	pop	{r4, r5, r6, pc}
   811c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   811c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   811ca:	bd70      	pop	{r4, r5, r6, pc}

000811cc <__aeabi_ddiv>:
   811cc:	b570      	push	{r4, r5, r6, lr}
   811ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   811d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   811d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   811da:	bf1d      	ittte	ne
   811dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   811e0:	ea94 0f0c 	teqne	r4, ip
   811e4:	ea95 0f0c 	teqne	r5, ip
   811e8:	f000 f8a7 	bleq	8133a <__aeabi_ddiv+0x16e>
   811ec:	eba4 0405 	sub.w	r4, r4, r5
   811f0:	ea81 0e03 	eor.w	lr, r1, r3
   811f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   811f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   811fc:	f000 8088 	beq.w	81310 <__aeabi_ddiv+0x144>
   81200:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81204:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81208:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8120c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81210:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81214:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81218:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8121c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81220:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81224:	429d      	cmp	r5, r3
   81226:	bf08      	it	eq
   81228:	4296      	cmpeq	r6, r2
   8122a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8122e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81232:	d202      	bcs.n	8123a <__aeabi_ddiv+0x6e>
   81234:	085b      	lsrs	r3, r3, #1
   81236:	ea4f 0232 	mov.w	r2, r2, rrx
   8123a:	1ab6      	subs	r6, r6, r2
   8123c:	eb65 0503 	sbc.w	r5, r5, r3
   81240:	085b      	lsrs	r3, r3, #1
   81242:	ea4f 0232 	mov.w	r2, r2, rrx
   81246:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8124a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8124e:	ebb6 0e02 	subs.w	lr, r6, r2
   81252:	eb75 0e03 	sbcs.w	lr, r5, r3
   81256:	bf22      	ittt	cs
   81258:	1ab6      	subcs	r6, r6, r2
   8125a:	4675      	movcs	r5, lr
   8125c:	ea40 000c 	orrcs.w	r0, r0, ip
   81260:	085b      	lsrs	r3, r3, #1
   81262:	ea4f 0232 	mov.w	r2, r2, rrx
   81266:	ebb6 0e02 	subs.w	lr, r6, r2
   8126a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8126e:	bf22      	ittt	cs
   81270:	1ab6      	subcs	r6, r6, r2
   81272:	4675      	movcs	r5, lr
   81274:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81278:	085b      	lsrs	r3, r3, #1
   8127a:	ea4f 0232 	mov.w	r2, r2, rrx
   8127e:	ebb6 0e02 	subs.w	lr, r6, r2
   81282:	eb75 0e03 	sbcs.w	lr, r5, r3
   81286:	bf22      	ittt	cs
   81288:	1ab6      	subcs	r6, r6, r2
   8128a:	4675      	movcs	r5, lr
   8128c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81290:	085b      	lsrs	r3, r3, #1
   81292:	ea4f 0232 	mov.w	r2, r2, rrx
   81296:	ebb6 0e02 	subs.w	lr, r6, r2
   8129a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8129e:	bf22      	ittt	cs
   812a0:	1ab6      	subcs	r6, r6, r2
   812a2:	4675      	movcs	r5, lr
   812a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   812a8:	ea55 0e06 	orrs.w	lr, r5, r6
   812ac:	d018      	beq.n	812e0 <__aeabi_ddiv+0x114>
   812ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   812b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   812b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   812ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   812be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   812c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   812c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   812ca:	d1c0      	bne.n	8124e <__aeabi_ddiv+0x82>
   812cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   812d0:	d10b      	bne.n	812ea <__aeabi_ddiv+0x11e>
   812d2:	ea41 0100 	orr.w	r1, r1, r0
   812d6:	f04f 0000 	mov.w	r0, #0
   812da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   812de:	e7b6      	b.n	8124e <__aeabi_ddiv+0x82>
   812e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   812e4:	bf04      	itt	eq
   812e6:	4301      	orreq	r1, r0
   812e8:	2000      	moveq	r0, #0
   812ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   812ee:	bf88      	it	hi
   812f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   812f4:	f63f aeaf 	bhi.w	81056 <__aeabi_dmul+0xde>
   812f8:	ebb5 0c03 	subs.w	ip, r5, r3
   812fc:	bf04      	itt	eq
   812fe:	ebb6 0c02 	subseq.w	ip, r6, r2
   81302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81306:	f150 0000 	adcs.w	r0, r0, #0
   8130a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8130e:	bd70      	pop	{r4, r5, r6, pc}
   81310:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81314:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81318:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8131c:	bfc2      	ittt	gt
   8131e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81322:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81326:	bd70      	popgt	{r4, r5, r6, pc}
   81328:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8132c:	f04f 0e00 	mov.w	lr, #0
   81330:	3c01      	subs	r4, #1
   81332:	e690      	b.n	81056 <__aeabi_dmul+0xde>
   81334:	ea45 0e06 	orr.w	lr, r5, r6
   81338:	e68d      	b.n	81056 <__aeabi_dmul+0xde>
   8133a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8133e:	ea94 0f0c 	teq	r4, ip
   81342:	bf08      	it	eq
   81344:	ea95 0f0c 	teqeq	r5, ip
   81348:	f43f af3b 	beq.w	811c2 <__aeabi_dmul+0x24a>
   8134c:	ea94 0f0c 	teq	r4, ip
   81350:	d10a      	bne.n	81368 <__aeabi_ddiv+0x19c>
   81352:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81356:	f47f af34 	bne.w	811c2 <__aeabi_dmul+0x24a>
   8135a:	ea95 0f0c 	teq	r5, ip
   8135e:	f47f af25 	bne.w	811ac <__aeabi_dmul+0x234>
   81362:	4610      	mov	r0, r2
   81364:	4619      	mov	r1, r3
   81366:	e72c      	b.n	811c2 <__aeabi_dmul+0x24a>
   81368:	ea95 0f0c 	teq	r5, ip
   8136c:	d106      	bne.n	8137c <__aeabi_ddiv+0x1b0>
   8136e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81372:	f43f aefd 	beq.w	81170 <__aeabi_dmul+0x1f8>
   81376:	4610      	mov	r0, r2
   81378:	4619      	mov	r1, r3
   8137a:	e722      	b.n	811c2 <__aeabi_dmul+0x24a>
   8137c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81380:	bf18      	it	ne
   81382:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81386:	f47f aec5 	bne.w	81114 <__aeabi_dmul+0x19c>
   8138a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8138e:	f47f af0d 	bne.w	811ac <__aeabi_dmul+0x234>
   81392:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81396:	f47f aeeb 	bne.w	81170 <__aeabi_dmul+0x1f8>
   8139a:	e712      	b.n	811c2 <__aeabi_dmul+0x24a>

0008139c <__aeabi_d2iz>:
   8139c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   813a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   813a4:	d215      	bcs.n	813d2 <__aeabi_d2iz+0x36>
   813a6:	d511      	bpl.n	813cc <__aeabi_d2iz+0x30>
   813a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   813ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   813b0:	d912      	bls.n	813d8 <__aeabi_d2iz+0x3c>
   813b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   813b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   813ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   813be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   813c2:	fa23 f002 	lsr.w	r0, r3, r2
   813c6:	bf18      	it	ne
   813c8:	4240      	negne	r0, r0
   813ca:	4770      	bx	lr
   813cc:	f04f 0000 	mov.w	r0, #0
   813d0:	4770      	bx	lr
   813d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   813d6:	d105      	bne.n	813e4 <__aeabi_d2iz+0x48>
   813d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   813dc:	bf08      	it	eq
   813de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   813e2:	4770      	bx	lr
   813e4:	f04f 0000 	mov.w	r0, #0
   813e8:	4770      	bx	lr
   813ea:	bf00      	nop

000813ec <__libc_init_array>:
   813ec:	b570      	push	{r4, r5, r6, lr}
   813ee:	4e0f      	ldr	r6, [pc, #60]	; (8142c <__libc_init_array+0x40>)
   813f0:	4d0f      	ldr	r5, [pc, #60]	; (81430 <__libc_init_array+0x44>)
   813f2:	1b76      	subs	r6, r6, r5
   813f4:	10b6      	asrs	r6, r6, #2
   813f6:	d007      	beq.n	81408 <__libc_init_array+0x1c>
   813f8:	3d04      	subs	r5, #4
   813fa:	2400      	movs	r4, #0
   813fc:	3401      	adds	r4, #1
   813fe:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81402:	4798      	blx	r3
   81404:	42a6      	cmp	r6, r4
   81406:	d1f9      	bne.n	813fc <__libc_init_array+0x10>
   81408:	4e0a      	ldr	r6, [pc, #40]	; (81434 <__libc_init_array+0x48>)
   8140a:	4d0b      	ldr	r5, [pc, #44]	; (81438 <__libc_init_array+0x4c>)
   8140c:	f003 f822 	bl	84454 <_init>
   81410:	1b76      	subs	r6, r6, r5
   81412:	10b6      	asrs	r6, r6, #2
   81414:	d008      	beq.n	81428 <__libc_init_array+0x3c>
   81416:	3d04      	subs	r5, #4
   81418:	2400      	movs	r4, #0
   8141a:	3401      	adds	r4, #1
   8141c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81420:	4798      	blx	r3
   81422:	42a6      	cmp	r6, r4
   81424:	d1f9      	bne.n	8141a <__libc_init_array+0x2e>
   81426:	bd70      	pop	{r4, r5, r6, pc}
   81428:	bd70      	pop	{r4, r5, r6, pc}
   8142a:	bf00      	nop
   8142c:	00084460 	.word	0x00084460
   81430:	00084460 	.word	0x00084460
   81434:	00084468 	.word	0x00084468
   81438:	00084460 	.word	0x00084460

0008143c <iprintf>:
   8143c:	b40f      	push	{r0, r1, r2, r3}
   8143e:	b510      	push	{r4, lr}
   81440:	4b07      	ldr	r3, [pc, #28]	; (81460 <iprintf+0x24>)
   81442:	b082      	sub	sp, #8
   81444:	ac04      	add	r4, sp, #16
   81446:	f854 2b04 	ldr.w	r2, [r4], #4
   8144a:	6818      	ldr	r0, [r3, #0]
   8144c:	4623      	mov	r3, r4
   8144e:	6881      	ldr	r1, [r0, #8]
   81450:	9401      	str	r4, [sp, #4]
   81452:	f000 f945 	bl	816e0 <_vfiprintf_r>
   81456:	b002      	add	sp, #8
   81458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8145c:	b004      	add	sp, #16
   8145e:	4770      	bx	lr
   81460:	20070568 	.word	0x20070568

00081464 <memset>:
   81464:	b4f0      	push	{r4, r5, r6, r7}
   81466:	0784      	lsls	r4, r0, #30
   81468:	d043      	beq.n	814f2 <memset+0x8e>
   8146a:	1e54      	subs	r4, r2, #1
   8146c:	2a00      	cmp	r2, #0
   8146e:	d03e      	beq.n	814ee <memset+0x8a>
   81470:	b2cd      	uxtb	r5, r1
   81472:	4603      	mov	r3, r0
   81474:	e003      	b.n	8147e <memset+0x1a>
   81476:	1e62      	subs	r2, r4, #1
   81478:	2c00      	cmp	r4, #0
   8147a:	d038      	beq.n	814ee <memset+0x8a>
   8147c:	4614      	mov	r4, r2
   8147e:	f803 5b01 	strb.w	r5, [r3], #1
   81482:	079a      	lsls	r2, r3, #30
   81484:	d1f7      	bne.n	81476 <memset+0x12>
   81486:	2c03      	cmp	r4, #3
   81488:	d92a      	bls.n	814e0 <memset+0x7c>
   8148a:	b2cd      	uxtb	r5, r1
   8148c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81490:	2c0f      	cmp	r4, #15
   81492:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81496:	d915      	bls.n	814c4 <memset+0x60>
   81498:	f1a4 0710 	sub.w	r7, r4, #16
   8149c:	093f      	lsrs	r7, r7, #4
   8149e:	f103 0610 	add.w	r6, r3, #16
   814a2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   814a6:	461a      	mov	r2, r3
   814a8:	6015      	str	r5, [r2, #0]
   814aa:	6055      	str	r5, [r2, #4]
   814ac:	6095      	str	r5, [r2, #8]
   814ae:	60d5      	str	r5, [r2, #12]
   814b0:	3210      	adds	r2, #16
   814b2:	42b2      	cmp	r2, r6
   814b4:	d1f8      	bne.n	814a8 <memset+0x44>
   814b6:	f004 040f 	and.w	r4, r4, #15
   814ba:	3701      	adds	r7, #1
   814bc:	2c03      	cmp	r4, #3
   814be:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   814c2:	d90d      	bls.n	814e0 <memset+0x7c>
   814c4:	461e      	mov	r6, r3
   814c6:	4622      	mov	r2, r4
   814c8:	3a04      	subs	r2, #4
   814ca:	2a03      	cmp	r2, #3
   814cc:	f846 5b04 	str.w	r5, [r6], #4
   814d0:	d8fa      	bhi.n	814c8 <memset+0x64>
   814d2:	1f22      	subs	r2, r4, #4
   814d4:	f022 0203 	bic.w	r2, r2, #3
   814d8:	3204      	adds	r2, #4
   814da:	4413      	add	r3, r2
   814dc:	f004 0403 	and.w	r4, r4, #3
   814e0:	b12c      	cbz	r4, 814ee <memset+0x8a>
   814e2:	b2c9      	uxtb	r1, r1
   814e4:	441c      	add	r4, r3
   814e6:	f803 1b01 	strb.w	r1, [r3], #1
   814ea:	42a3      	cmp	r3, r4
   814ec:	d1fb      	bne.n	814e6 <memset+0x82>
   814ee:	bcf0      	pop	{r4, r5, r6, r7}
   814f0:	4770      	bx	lr
   814f2:	4614      	mov	r4, r2
   814f4:	4603      	mov	r3, r0
   814f6:	e7c6      	b.n	81486 <memset+0x22>

000814f8 <setbuf>:
   814f8:	2900      	cmp	r1, #0
   814fa:	bf0c      	ite	eq
   814fc:	2202      	moveq	r2, #2
   814fe:	2200      	movne	r2, #0
   81500:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81504:	f000 b800 	b.w	81508 <setvbuf>

00081508 <setvbuf>:
   81508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8150c:	4d3c      	ldr	r5, [pc, #240]	; (81600 <setvbuf+0xf8>)
   8150e:	4604      	mov	r4, r0
   81510:	682d      	ldr	r5, [r5, #0]
   81512:	4688      	mov	r8, r1
   81514:	4616      	mov	r6, r2
   81516:	461f      	mov	r7, r3
   81518:	b115      	cbz	r5, 81520 <setvbuf+0x18>
   8151a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8151c:	2b00      	cmp	r3, #0
   8151e:	d04f      	beq.n	815c0 <setvbuf+0xb8>
   81520:	2e02      	cmp	r6, #2
   81522:	d830      	bhi.n	81586 <setvbuf+0x7e>
   81524:	2f00      	cmp	r7, #0
   81526:	db2e      	blt.n	81586 <setvbuf+0x7e>
   81528:	4628      	mov	r0, r5
   8152a:	4621      	mov	r1, r4
   8152c:	f001 f856 	bl	825dc <_fflush_r>
   81530:	89a3      	ldrh	r3, [r4, #12]
   81532:	2200      	movs	r2, #0
   81534:	6062      	str	r2, [r4, #4]
   81536:	61a2      	str	r2, [r4, #24]
   81538:	061a      	lsls	r2, r3, #24
   8153a:	d428      	bmi.n	8158e <setvbuf+0x86>
   8153c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81540:	b29b      	uxth	r3, r3
   81542:	2e02      	cmp	r6, #2
   81544:	81a3      	strh	r3, [r4, #12]
   81546:	d02d      	beq.n	815a4 <setvbuf+0x9c>
   81548:	f1b8 0f00 	cmp.w	r8, #0
   8154c:	d03c      	beq.n	815c8 <setvbuf+0xc0>
   8154e:	2e01      	cmp	r6, #1
   81550:	d013      	beq.n	8157a <setvbuf+0x72>
   81552:	b29b      	uxth	r3, r3
   81554:	f003 0008 	and.w	r0, r3, #8
   81558:	4a2a      	ldr	r2, [pc, #168]	; (81604 <setvbuf+0xfc>)
   8155a:	b280      	uxth	r0, r0
   8155c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8155e:	f8c4 8000 	str.w	r8, [r4]
   81562:	f8c4 8010 	str.w	r8, [r4, #16]
   81566:	6167      	str	r7, [r4, #20]
   81568:	b178      	cbz	r0, 8158a <setvbuf+0x82>
   8156a:	f013 0f03 	tst.w	r3, #3
   8156e:	bf18      	it	ne
   81570:	2700      	movne	r7, #0
   81572:	60a7      	str	r7, [r4, #8]
   81574:	2000      	movs	r0, #0
   81576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8157a:	f043 0301 	orr.w	r3, r3, #1
   8157e:	427a      	negs	r2, r7
   81580:	81a3      	strh	r3, [r4, #12]
   81582:	61a2      	str	r2, [r4, #24]
   81584:	e7e5      	b.n	81552 <setvbuf+0x4a>
   81586:	f04f 30ff 	mov.w	r0, #4294967295
   8158a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8158e:	4628      	mov	r0, r5
   81590:	6921      	ldr	r1, [r4, #16]
   81592:	f001 f983 	bl	8289c <_free_r>
   81596:	89a3      	ldrh	r3, [r4, #12]
   81598:	2e02      	cmp	r6, #2
   8159a:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8159e:	b29b      	uxth	r3, r3
   815a0:	81a3      	strh	r3, [r4, #12]
   815a2:	d1d1      	bne.n	81548 <setvbuf+0x40>
   815a4:	2000      	movs	r0, #0
   815a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   815aa:	f043 0302 	orr.w	r3, r3, #2
   815ae:	2500      	movs	r5, #0
   815b0:	2101      	movs	r1, #1
   815b2:	81a3      	strh	r3, [r4, #12]
   815b4:	60a5      	str	r5, [r4, #8]
   815b6:	6022      	str	r2, [r4, #0]
   815b8:	6122      	str	r2, [r4, #16]
   815ba:	6161      	str	r1, [r4, #20]
   815bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   815c0:	4628      	mov	r0, r5
   815c2:	f001 f827 	bl	82614 <__sinit>
   815c6:	e7ab      	b.n	81520 <setvbuf+0x18>
   815c8:	2f00      	cmp	r7, #0
   815ca:	bf08      	it	eq
   815cc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   815d0:	4638      	mov	r0, r7
   815d2:	f001 fc59 	bl	82e88 <malloc>
   815d6:	4680      	mov	r8, r0
   815d8:	b128      	cbz	r0, 815e6 <setvbuf+0xde>
   815da:	89a3      	ldrh	r3, [r4, #12]
   815dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   815e0:	b29b      	uxth	r3, r3
   815e2:	81a3      	strh	r3, [r4, #12]
   815e4:	e7b3      	b.n	8154e <setvbuf+0x46>
   815e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   815ea:	f001 fc4d 	bl	82e88 <malloc>
   815ee:	4680      	mov	r8, r0
   815f0:	b918      	cbnz	r0, 815fa <setvbuf+0xf2>
   815f2:	89a3      	ldrh	r3, [r4, #12]
   815f4:	f04f 30ff 	mov.w	r0, #4294967295
   815f8:	e7d5      	b.n	815a6 <setvbuf+0x9e>
   815fa:	f44f 6780 	mov.w	r7, #1024	; 0x400
   815fe:	e7ec      	b.n	815da <setvbuf+0xd2>
   81600:	20070568 	.word	0x20070568
   81604:	00082609 	.word	0x00082609

00081608 <strlen>:
   81608:	f020 0103 	bic.w	r1, r0, #3
   8160c:	f010 0003 	ands.w	r0, r0, #3
   81610:	f1c0 0000 	rsb	r0, r0, #0
   81614:	f851 3b04 	ldr.w	r3, [r1], #4
   81618:	f100 0c04 	add.w	ip, r0, #4
   8161c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81620:	f06f 0200 	mvn.w	r2, #0
   81624:	bf1c      	itt	ne
   81626:	fa22 f20c 	lsrne.w	r2, r2, ip
   8162a:	4313      	orrne	r3, r2
   8162c:	f04f 0c01 	mov.w	ip, #1
   81630:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81634:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81638:	eba3 020c 	sub.w	r2, r3, ip
   8163c:	ea22 0203 	bic.w	r2, r2, r3
   81640:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81644:	bf04      	itt	eq
   81646:	f851 3b04 	ldreq.w	r3, [r1], #4
   8164a:	3004      	addeq	r0, #4
   8164c:	d0f4      	beq.n	81638 <strlen+0x30>
   8164e:	f013 0fff 	tst.w	r3, #255	; 0xff
   81652:	bf1f      	itttt	ne
   81654:	3001      	addne	r0, #1
   81656:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8165a:	3001      	addne	r0, #1
   8165c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   81660:	bf18      	it	ne
   81662:	3001      	addne	r0, #1
   81664:	4770      	bx	lr
   81666:	bf00      	nop

00081668 <__sprint_r.part.0>:
   81668:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8166a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8166e:	049c      	lsls	r4, r3, #18
   81670:	460e      	mov	r6, r1
   81672:	4680      	mov	r8, r0
   81674:	4691      	mov	r9, r2
   81676:	d52a      	bpl.n	816ce <__sprint_r.part.0+0x66>
   81678:	6893      	ldr	r3, [r2, #8]
   8167a:	6812      	ldr	r2, [r2, #0]
   8167c:	f102 0a08 	add.w	sl, r2, #8
   81680:	b31b      	cbz	r3, 816ca <__sprint_r.part.0+0x62>
   81682:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81686:	08bf      	lsrs	r7, r7, #2
   81688:	d017      	beq.n	816ba <__sprint_r.part.0+0x52>
   8168a:	3d04      	subs	r5, #4
   8168c:	2400      	movs	r4, #0
   8168e:	e001      	b.n	81694 <__sprint_r.part.0+0x2c>
   81690:	42a7      	cmp	r7, r4
   81692:	d010      	beq.n	816b6 <__sprint_r.part.0+0x4e>
   81694:	4640      	mov	r0, r8
   81696:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8169a:	4632      	mov	r2, r6
   8169c:	f001 f850 	bl	82740 <_fputwc_r>
   816a0:	1c43      	adds	r3, r0, #1
   816a2:	f104 0401 	add.w	r4, r4, #1
   816a6:	d1f3      	bne.n	81690 <__sprint_r.part.0+0x28>
   816a8:	2300      	movs	r3, #0
   816aa:	f8c9 3008 	str.w	r3, [r9, #8]
   816ae:	f8c9 3004 	str.w	r3, [r9, #4]
   816b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   816b6:	f8d9 3008 	ldr.w	r3, [r9, #8]
   816ba:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   816be:	f8c9 3008 	str.w	r3, [r9, #8]
   816c2:	f10a 0a08 	add.w	sl, sl, #8
   816c6:	2b00      	cmp	r3, #0
   816c8:	d1db      	bne.n	81682 <__sprint_r.part.0+0x1a>
   816ca:	2000      	movs	r0, #0
   816cc:	e7ec      	b.n	816a8 <__sprint_r.part.0+0x40>
   816ce:	f001 f9b1 	bl	82a34 <__sfvwrite_r>
   816d2:	2300      	movs	r3, #0
   816d4:	f8c9 3008 	str.w	r3, [r9, #8]
   816d8:	f8c9 3004 	str.w	r3, [r9, #4]
   816dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000816e0 <_vfiprintf_r>:
   816e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   816e4:	b0b1      	sub	sp, #196	; 0xc4
   816e6:	461c      	mov	r4, r3
   816e8:	9102      	str	r1, [sp, #8]
   816ea:	4690      	mov	r8, r2
   816ec:	9308      	str	r3, [sp, #32]
   816ee:	9006      	str	r0, [sp, #24]
   816f0:	b118      	cbz	r0, 816fa <_vfiprintf_r+0x1a>
   816f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   816f4:	2b00      	cmp	r3, #0
   816f6:	f000 80e8 	beq.w	818ca <_vfiprintf_r+0x1ea>
   816fa:	9d02      	ldr	r5, [sp, #8]
   816fc:	89ab      	ldrh	r3, [r5, #12]
   816fe:	b29a      	uxth	r2, r3
   81700:	0490      	lsls	r0, r2, #18
   81702:	d407      	bmi.n	81714 <_vfiprintf_r+0x34>
   81704:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8170a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   8170e:	81ab      	strh	r3, [r5, #12]
   81710:	b29a      	uxth	r2, r3
   81712:	6669      	str	r1, [r5, #100]	; 0x64
   81714:	0711      	lsls	r1, r2, #28
   81716:	f140 80b7 	bpl.w	81888 <_vfiprintf_r+0x1a8>
   8171a:	f8dd b008 	ldr.w	fp, [sp, #8]
   8171e:	f8db 3010 	ldr.w	r3, [fp, #16]
   81722:	2b00      	cmp	r3, #0
   81724:	f000 80b0 	beq.w	81888 <_vfiprintf_r+0x1a8>
   81728:	f002 021a 	and.w	r2, r2, #26
   8172c:	2a0a      	cmp	r2, #10
   8172e:	f000 80b7 	beq.w	818a0 <_vfiprintf_r+0x1c0>
   81732:	2300      	movs	r3, #0
   81734:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81738:	930a      	str	r3, [sp, #40]	; 0x28
   8173a:	9315      	str	r3, [sp, #84]	; 0x54
   8173c:	9314      	str	r3, [sp, #80]	; 0x50
   8173e:	9309      	str	r3, [sp, #36]	; 0x24
   81740:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81744:	464e      	mov	r6, r9
   81746:	f898 3000 	ldrb.w	r3, [r8]
   8174a:	2b00      	cmp	r3, #0
   8174c:	f000 84c8 	beq.w	820e0 <_vfiprintf_r+0xa00>
   81750:	2b25      	cmp	r3, #37	; 0x25
   81752:	f000 84c5 	beq.w	820e0 <_vfiprintf_r+0xa00>
   81756:	f108 0201 	add.w	r2, r8, #1
   8175a:	e001      	b.n	81760 <_vfiprintf_r+0x80>
   8175c:	2b25      	cmp	r3, #37	; 0x25
   8175e:	d004      	beq.n	8176a <_vfiprintf_r+0x8a>
   81760:	7813      	ldrb	r3, [r2, #0]
   81762:	4614      	mov	r4, r2
   81764:	3201      	adds	r2, #1
   81766:	2b00      	cmp	r3, #0
   81768:	d1f8      	bne.n	8175c <_vfiprintf_r+0x7c>
   8176a:	ebc8 0504 	rsb	r5, r8, r4
   8176e:	b195      	cbz	r5, 81796 <_vfiprintf_r+0xb6>
   81770:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81772:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81774:	3301      	adds	r3, #1
   81776:	442a      	add	r2, r5
   81778:	2b07      	cmp	r3, #7
   8177a:	f8c6 8000 	str.w	r8, [r6]
   8177e:	6075      	str	r5, [r6, #4]
   81780:	9215      	str	r2, [sp, #84]	; 0x54
   81782:	9314      	str	r3, [sp, #80]	; 0x50
   81784:	dd7b      	ble.n	8187e <_vfiprintf_r+0x19e>
   81786:	2a00      	cmp	r2, #0
   81788:	f040 84d5 	bne.w	82136 <_vfiprintf_r+0xa56>
   8178c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8178e:	9214      	str	r2, [sp, #80]	; 0x50
   81790:	4428      	add	r0, r5
   81792:	464e      	mov	r6, r9
   81794:	9009      	str	r0, [sp, #36]	; 0x24
   81796:	7823      	ldrb	r3, [r4, #0]
   81798:	2b00      	cmp	r3, #0
   8179a:	f000 83ed 	beq.w	81f78 <_vfiprintf_r+0x898>
   8179e:	2100      	movs	r1, #0
   817a0:	f04f 0200 	mov.w	r2, #0
   817a4:	f04f 3cff 	mov.w	ip, #4294967295
   817a8:	7863      	ldrb	r3, [r4, #1]
   817aa:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   817ae:	9104      	str	r1, [sp, #16]
   817b0:	468a      	mov	sl, r1
   817b2:	f104 0801 	add.w	r8, r4, #1
   817b6:	4608      	mov	r0, r1
   817b8:	4665      	mov	r5, ip
   817ba:	f108 0801 	add.w	r8, r8, #1
   817be:	f1a3 0220 	sub.w	r2, r3, #32
   817c2:	2a58      	cmp	r2, #88	; 0x58
   817c4:	f200 82d9 	bhi.w	81d7a <_vfiprintf_r+0x69a>
   817c8:	e8df f012 	tbh	[pc, r2, lsl #1]
   817cc:	02d702cb 	.word	0x02d702cb
   817d0:	02d202d7 	.word	0x02d202d7
   817d4:	02d702d7 	.word	0x02d702d7
   817d8:	02d702d7 	.word	0x02d702d7
   817dc:	02d702d7 	.word	0x02d702d7
   817e0:	028f0282 	.word	0x028f0282
   817e4:	008402d7 	.word	0x008402d7
   817e8:	02d70293 	.word	0x02d70293
   817ec:	0196012b 	.word	0x0196012b
   817f0:	01960196 	.word	0x01960196
   817f4:	01960196 	.word	0x01960196
   817f8:	01960196 	.word	0x01960196
   817fc:	01960196 	.word	0x01960196
   81800:	02d702d7 	.word	0x02d702d7
   81804:	02d702d7 	.word	0x02d702d7
   81808:	02d702d7 	.word	0x02d702d7
   8180c:	02d702d7 	.word	0x02d702d7
   81810:	02d702d7 	.word	0x02d702d7
   81814:	02d70130 	.word	0x02d70130
   81818:	02d702d7 	.word	0x02d702d7
   8181c:	02d702d7 	.word	0x02d702d7
   81820:	02d702d7 	.word	0x02d702d7
   81824:	02d702d7 	.word	0x02d702d7
   81828:	017b02d7 	.word	0x017b02d7
   8182c:	02d702d7 	.word	0x02d702d7
   81830:	02d702d7 	.word	0x02d702d7
   81834:	01a402d7 	.word	0x01a402d7
   81838:	02d702d7 	.word	0x02d702d7
   8183c:	02d701bf 	.word	0x02d701bf
   81840:	02d702d7 	.word	0x02d702d7
   81844:	02d702d7 	.word	0x02d702d7
   81848:	02d702d7 	.word	0x02d702d7
   8184c:	02d702d7 	.word	0x02d702d7
   81850:	01e402d7 	.word	0x01e402d7
   81854:	02d701fa 	.word	0x02d701fa
   81858:	02d702d7 	.word	0x02d702d7
   8185c:	01fa0216 	.word	0x01fa0216
   81860:	02d702d7 	.word	0x02d702d7
   81864:	02d7021b 	.word	0x02d7021b
   81868:	00890228 	.word	0x00890228
   8186c:	027d0266 	.word	0x027d0266
   81870:	023a02d7 	.word	0x023a02d7
   81874:	011902d7 	.word	0x011902d7
   81878:	02d702d7 	.word	0x02d702d7
   8187c:	02af      	.short	0x02af
   8187e:	3608      	adds	r6, #8
   81880:	9809      	ldr	r0, [sp, #36]	; 0x24
   81882:	4428      	add	r0, r5
   81884:	9009      	str	r0, [sp, #36]	; 0x24
   81886:	e786      	b.n	81796 <_vfiprintf_r+0xb6>
   81888:	9806      	ldr	r0, [sp, #24]
   8188a:	9902      	ldr	r1, [sp, #8]
   8188c:	f000 fd90 	bl	823b0 <__swsetup_r>
   81890:	b9b0      	cbnz	r0, 818c0 <_vfiprintf_r+0x1e0>
   81892:	9d02      	ldr	r5, [sp, #8]
   81894:	89aa      	ldrh	r2, [r5, #12]
   81896:	f002 021a 	and.w	r2, r2, #26
   8189a:	2a0a      	cmp	r2, #10
   8189c:	f47f af49 	bne.w	81732 <_vfiprintf_r+0x52>
   818a0:	f8dd b008 	ldr.w	fp, [sp, #8]
   818a4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   818a8:	2b00      	cmp	r3, #0
   818aa:	f6ff af42 	blt.w	81732 <_vfiprintf_r+0x52>
   818ae:	9806      	ldr	r0, [sp, #24]
   818b0:	4659      	mov	r1, fp
   818b2:	4642      	mov	r2, r8
   818b4:	4623      	mov	r3, r4
   818b6:	f000 fd3d 	bl	82334 <__sbprintf>
   818ba:	b031      	add	sp, #196	; 0xc4
   818bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818c0:	f04f 30ff 	mov.w	r0, #4294967295
   818c4:	b031      	add	sp, #196	; 0xc4
   818c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818ca:	f000 fea3 	bl	82614 <__sinit>
   818ce:	e714      	b.n	816fa <_vfiprintf_r+0x1a>
   818d0:	4240      	negs	r0, r0
   818d2:	9308      	str	r3, [sp, #32]
   818d4:	f04a 0a04 	orr.w	sl, sl, #4
   818d8:	f898 3000 	ldrb.w	r3, [r8]
   818dc:	e76d      	b.n	817ba <_vfiprintf_r+0xda>
   818de:	f01a 0320 	ands.w	r3, sl, #32
   818e2:	9004      	str	r0, [sp, #16]
   818e4:	46ac      	mov	ip, r5
   818e6:	f000 80f4 	beq.w	81ad2 <_vfiprintf_r+0x3f2>
   818ea:	f8dd b020 	ldr.w	fp, [sp, #32]
   818ee:	f10b 0307 	add.w	r3, fp, #7
   818f2:	f023 0307 	bic.w	r3, r3, #7
   818f6:	f103 0408 	add.w	r4, r3, #8
   818fa:	9408      	str	r4, [sp, #32]
   818fc:	e9d3 4500 	ldrd	r4, r5, [r3]
   81900:	2300      	movs	r3, #0
   81902:	f04f 0000 	mov.w	r0, #0
   81906:	2100      	movs	r1, #0
   81908:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   8190c:	f8cd c014 	str.w	ip, [sp, #20]
   81910:	9107      	str	r1, [sp, #28]
   81912:	f1bc 0f00 	cmp.w	ip, #0
   81916:	bfa8      	it	ge
   81918:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   8191c:	ea54 0205 	orrs.w	r2, r4, r5
   81920:	f040 80ad 	bne.w	81a7e <_vfiprintf_r+0x39e>
   81924:	f1bc 0f00 	cmp.w	ip, #0
   81928:	f040 80a9 	bne.w	81a7e <_vfiprintf_r+0x39e>
   8192c:	2b00      	cmp	r3, #0
   8192e:	f040 83c0 	bne.w	820b2 <_vfiprintf_r+0x9d2>
   81932:	f01a 0f01 	tst.w	sl, #1
   81936:	f000 83bc 	beq.w	820b2 <_vfiprintf_r+0x9d2>
   8193a:	2330      	movs	r3, #48	; 0x30
   8193c:	af30      	add	r7, sp, #192	; 0xc0
   8193e:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81942:	ebc7 0409 	rsb	r4, r7, r9
   81946:	9405      	str	r4, [sp, #20]
   81948:	f8dd b014 	ldr.w	fp, [sp, #20]
   8194c:	9c07      	ldr	r4, [sp, #28]
   8194e:	45e3      	cmp	fp, ip
   81950:	bfb8      	it	lt
   81952:	46e3      	movlt	fp, ip
   81954:	f8cd b00c 	str.w	fp, [sp, #12]
   81958:	b11c      	cbz	r4, 81962 <_vfiprintf_r+0x282>
   8195a:	f10b 0b01 	add.w	fp, fp, #1
   8195e:	f8cd b00c 	str.w	fp, [sp, #12]
   81962:	f01a 0502 	ands.w	r5, sl, #2
   81966:	9507      	str	r5, [sp, #28]
   81968:	d005      	beq.n	81976 <_vfiprintf_r+0x296>
   8196a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8196e:	f10b 0b02 	add.w	fp, fp, #2
   81972:	f8cd b00c 	str.w	fp, [sp, #12]
   81976:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   8197a:	930b      	str	r3, [sp, #44]	; 0x2c
   8197c:	f040 821b 	bne.w	81db6 <_vfiprintf_r+0x6d6>
   81980:	9d04      	ldr	r5, [sp, #16]
   81982:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81986:	ebcb 0405 	rsb	r4, fp, r5
   8198a:	2c00      	cmp	r4, #0
   8198c:	f340 8213 	ble.w	81db6 <_vfiprintf_r+0x6d6>
   81990:	2c10      	cmp	r4, #16
   81992:	f340 8489 	ble.w	822a8 <_vfiprintf_r+0xbc8>
   81996:	4dbe      	ldr	r5, [pc, #760]	; (81c90 <_vfiprintf_r+0x5b0>)
   81998:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8199a:	462b      	mov	r3, r5
   8199c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8199e:	4625      	mov	r5, r4
   819a0:	f04f 0b10 	mov.w	fp, #16
   819a4:	4664      	mov	r4, ip
   819a6:	46b4      	mov	ip, r6
   819a8:	461e      	mov	r6, r3
   819aa:	e006      	b.n	819ba <_vfiprintf_r+0x2da>
   819ac:	1c83      	adds	r3, r0, #2
   819ae:	f10c 0c08 	add.w	ip, ip, #8
   819b2:	4608      	mov	r0, r1
   819b4:	3d10      	subs	r5, #16
   819b6:	2d10      	cmp	r5, #16
   819b8:	dd11      	ble.n	819de <_vfiprintf_r+0x2fe>
   819ba:	1c41      	adds	r1, r0, #1
   819bc:	3210      	adds	r2, #16
   819be:	2907      	cmp	r1, #7
   819c0:	9215      	str	r2, [sp, #84]	; 0x54
   819c2:	e88c 0840 	stmia.w	ip, {r6, fp}
   819c6:	9114      	str	r1, [sp, #80]	; 0x50
   819c8:	ddf0      	ble.n	819ac <_vfiprintf_r+0x2cc>
   819ca:	2a00      	cmp	r2, #0
   819cc:	f040 81e6 	bne.w	81d9c <_vfiprintf_r+0x6bc>
   819d0:	3d10      	subs	r5, #16
   819d2:	2d10      	cmp	r5, #16
   819d4:	f04f 0301 	mov.w	r3, #1
   819d8:	4610      	mov	r0, r2
   819da:	46cc      	mov	ip, r9
   819dc:	dced      	bgt.n	819ba <_vfiprintf_r+0x2da>
   819de:	4631      	mov	r1, r6
   819e0:	4666      	mov	r6, ip
   819e2:	46a4      	mov	ip, r4
   819e4:	462c      	mov	r4, r5
   819e6:	460d      	mov	r5, r1
   819e8:	4422      	add	r2, r4
   819ea:	2b07      	cmp	r3, #7
   819ec:	9215      	str	r2, [sp, #84]	; 0x54
   819ee:	6035      	str	r5, [r6, #0]
   819f0:	6074      	str	r4, [r6, #4]
   819f2:	9314      	str	r3, [sp, #80]	; 0x50
   819f4:	f300 836d 	bgt.w	820d2 <_vfiprintf_r+0x9f2>
   819f8:	3608      	adds	r6, #8
   819fa:	1c59      	adds	r1, r3, #1
   819fc:	e1de      	b.n	81dbc <_vfiprintf_r+0x6dc>
   819fe:	f01a 0f20 	tst.w	sl, #32
   81a02:	9004      	str	r0, [sp, #16]
   81a04:	46ac      	mov	ip, r5
   81a06:	f000 808d 	beq.w	81b24 <_vfiprintf_r+0x444>
   81a0a:	9d08      	ldr	r5, [sp, #32]
   81a0c:	1deb      	adds	r3, r5, #7
   81a0e:	f023 0307 	bic.w	r3, r3, #7
   81a12:	f103 0b08 	add.w	fp, r3, #8
   81a16:	e9d3 4500 	ldrd	r4, r5, [r3]
   81a1a:	f8cd b020 	str.w	fp, [sp, #32]
   81a1e:	2301      	movs	r3, #1
   81a20:	e76f      	b.n	81902 <_vfiprintf_r+0x222>
   81a22:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81a26:	f898 3000 	ldrb.w	r3, [r8]
   81a2a:	e6c6      	b.n	817ba <_vfiprintf_r+0xda>
   81a2c:	f04a 0a10 	orr.w	sl, sl, #16
   81a30:	f01a 0f20 	tst.w	sl, #32
   81a34:	9004      	str	r0, [sp, #16]
   81a36:	46ac      	mov	ip, r5
   81a38:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81a3c:	f000 80c8 	beq.w	81bd0 <_vfiprintf_r+0x4f0>
   81a40:	9c08      	ldr	r4, [sp, #32]
   81a42:	1de1      	adds	r1, r4, #7
   81a44:	f021 0107 	bic.w	r1, r1, #7
   81a48:	e9d1 2300 	ldrd	r2, r3, [r1]
   81a4c:	3108      	adds	r1, #8
   81a4e:	9108      	str	r1, [sp, #32]
   81a50:	4614      	mov	r4, r2
   81a52:	461d      	mov	r5, r3
   81a54:	2a00      	cmp	r2, #0
   81a56:	f173 0b00 	sbcs.w	fp, r3, #0
   81a5a:	f2c0 83ce 	blt.w	821fa <_vfiprintf_r+0xb1a>
   81a5e:	f1bc 0f00 	cmp.w	ip, #0
   81a62:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81a66:	bfa8      	it	ge
   81a68:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81a6c:	ea54 0205 	orrs.w	r2, r4, r5
   81a70:	9007      	str	r0, [sp, #28]
   81a72:	f8cd c014 	str.w	ip, [sp, #20]
   81a76:	f04f 0301 	mov.w	r3, #1
   81a7a:	f43f af53 	beq.w	81924 <_vfiprintf_r+0x244>
   81a7e:	2b01      	cmp	r3, #1
   81a80:	f000 8319 	beq.w	820b6 <_vfiprintf_r+0x9d6>
   81a84:	2b02      	cmp	r3, #2
   81a86:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81a8a:	f040 824c 	bne.w	81f26 <_vfiprintf_r+0x846>
   81a8e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81a92:	4619      	mov	r1, r3
   81a94:	f004 000f 	and.w	r0, r4, #15
   81a98:	0922      	lsrs	r2, r4, #4
   81a9a:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81a9e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81aa2:	092b      	lsrs	r3, r5, #4
   81aa4:	7008      	strb	r0, [r1, #0]
   81aa6:	ea52 0003 	orrs.w	r0, r2, r3
   81aaa:	460f      	mov	r7, r1
   81aac:	4614      	mov	r4, r2
   81aae:	461d      	mov	r5, r3
   81ab0:	f101 31ff 	add.w	r1, r1, #4294967295
   81ab4:	d1ee      	bne.n	81a94 <_vfiprintf_r+0x3b4>
   81ab6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81aba:	ebc7 0309 	rsb	r3, r7, r9
   81abe:	9305      	str	r3, [sp, #20]
   81ac0:	e742      	b.n	81948 <_vfiprintf_r+0x268>
   81ac2:	f04a 0a10 	orr.w	sl, sl, #16
   81ac6:	f01a 0320 	ands.w	r3, sl, #32
   81aca:	9004      	str	r0, [sp, #16]
   81acc:	46ac      	mov	ip, r5
   81ace:	f47f af0c 	bne.w	818ea <_vfiprintf_r+0x20a>
   81ad2:	f01a 0210 	ands.w	r2, sl, #16
   81ad6:	f040 8311 	bne.w	820fc <_vfiprintf_r+0xa1c>
   81ada:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   81ade:	f000 830d 	beq.w	820fc <_vfiprintf_r+0xa1c>
   81ae2:	f8dd b020 	ldr.w	fp, [sp, #32]
   81ae6:	4613      	mov	r3, r2
   81ae8:	f8bb 4000 	ldrh.w	r4, [fp]
   81aec:	f10b 0b04 	add.w	fp, fp, #4
   81af0:	2500      	movs	r5, #0
   81af2:	f8cd b020 	str.w	fp, [sp, #32]
   81af6:	e704      	b.n	81902 <_vfiprintf_r+0x222>
   81af8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81afc:	2000      	movs	r0, #0
   81afe:	f818 3b01 	ldrb.w	r3, [r8], #1
   81b02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81b06:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81b0a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81b0e:	2a09      	cmp	r2, #9
   81b10:	d9f5      	bls.n	81afe <_vfiprintf_r+0x41e>
   81b12:	e654      	b.n	817be <_vfiprintf_r+0xde>
   81b14:	f04a 0a10 	orr.w	sl, sl, #16
   81b18:	f01a 0f20 	tst.w	sl, #32
   81b1c:	9004      	str	r0, [sp, #16]
   81b1e:	46ac      	mov	ip, r5
   81b20:	f47f af73 	bne.w	81a0a <_vfiprintf_r+0x32a>
   81b24:	f01a 0f10 	tst.w	sl, #16
   81b28:	f040 82ef 	bne.w	8210a <_vfiprintf_r+0xa2a>
   81b2c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81b30:	f000 82eb 	beq.w	8210a <_vfiprintf_r+0xa2a>
   81b34:	f8dd b020 	ldr.w	fp, [sp, #32]
   81b38:	2500      	movs	r5, #0
   81b3a:	f8bb 4000 	ldrh.w	r4, [fp]
   81b3e:	f10b 0b04 	add.w	fp, fp, #4
   81b42:	2301      	movs	r3, #1
   81b44:	f8cd b020 	str.w	fp, [sp, #32]
   81b48:	e6db      	b.n	81902 <_vfiprintf_r+0x222>
   81b4a:	46ac      	mov	ip, r5
   81b4c:	4d51      	ldr	r5, [pc, #324]	; (81c94 <_vfiprintf_r+0x5b4>)
   81b4e:	f01a 0f20 	tst.w	sl, #32
   81b52:	9004      	str	r0, [sp, #16]
   81b54:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81b58:	950a      	str	r5, [sp, #40]	; 0x28
   81b5a:	f000 80f0 	beq.w	81d3e <_vfiprintf_r+0x65e>
   81b5e:	9d08      	ldr	r5, [sp, #32]
   81b60:	1dea      	adds	r2, r5, #7
   81b62:	f022 0207 	bic.w	r2, r2, #7
   81b66:	f102 0b08 	add.w	fp, r2, #8
   81b6a:	f8cd b020 	str.w	fp, [sp, #32]
   81b6e:	e9d2 4500 	ldrd	r4, r5, [r2]
   81b72:	f01a 0f01 	tst.w	sl, #1
   81b76:	f000 82aa 	beq.w	820ce <_vfiprintf_r+0x9ee>
   81b7a:	ea54 0b05 	orrs.w	fp, r4, r5
   81b7e:	f000 82a6 	beq.w	820ce <_vfiprintf_r+0x9ee>
   81b82:	2230      	movs	r2, #48	; 0x30
   81b84:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81b88:	f04a 0a02 	orr.w	sl, sl, #2
   81b8c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81b90:	2302      	movs	r3, #2
   81b92:	e6b6      	b.n	81902 <_vfiprintf_r+0x222>
   81b94:	9b08      	ldr	r3, [sp, #32]
   81b96:	f8dd b020 	ldr.w	fp, [sp, #32]
   81b9a:	681b      	ldr	r3, [r3, #0]
   81b9c:	2401      	movs	r4, #1
   81b9e:	f04f 0500 	mov.w	r5, #0
   81ba2:	f10b 0b04 	add.w	fp, fp, #4
   81ba6:	9004      	str	r0, [sp, #16]
   81ba8:	9403      	str	r4, [sp, #12]
   81baa:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81bae:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81bb2:	f8cd b020 	str.w	fp, [sp, #32]
   81bb6:	9405      	str	r4, [sp, #20]
   81bb8:	af16      	add	r7, sp, #88	; 0x58
   81bba:	f04f 0c00 	mov.w	ip, #0
   81bbe:	e6d0      	b.n	81962 <_vfiprintf_r+0x282>
   81bc0:	f01a 0f20 	tst.w	sl, #32
   81bc4:	9004      	str	r0, [sp, #16]
   81bc6:	46ac      	mov	ip, r5
   81bc8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81bcc:	f47f af38 	bne.w	81a40 <_vfiprintf_r+0x360>
   81bd0:	f01a 0f10 	tst.w	sl, #16
   81bd4:	f040 82a7 	bne.w	82126 <_vfiprintf_r+0xa46>
   81bd8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81bdc:	f000 82a3 	beq.w	82126 <_vfiprintf_r+0xa46>
   81be0:	f8dd b020 	ldr.w	fp, [sp, #32]
   81be4:	f9bb 4000 	ldrsh.w	r4, [fp]
   81be8:	f10b 0b04 	add.w	fp, fp, #4
   81bec:	17e5      	asrs	r5, r4, #31
   81bee:	4622      	mov	r2, r4
   81bf0:	462b      	mov	r3, r5
   81bf2:	f8cd b020 	str.w	fp, [sp, #32]
   81bf6:	e72d      	b.n	81a54 <_vfiprintf_r+0x374>
   81bf8:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81bfc:	f898 3000 	ldrb.w	r3, [r8]
   81c00:	e5db      	b.n	817ba <_vfiprintf_r+0xda>
   81c02:	f898 3000 	ldrb.w	r3, [r8]
   81c06:	4642      	mov	r2, r8
   81c08:	2b6c      	cmp	r3, #108	; 0x6c
   81c0a:	bf03      	ittte	eq
   81c0c:	f108 0801 	addeq.w	r8, r8, #1
   81c10:	f04a 0a20 	orreq.w	sl, sl, #32
   81c14:	7853      	ldrbeq	r3, [r2, #1]
   81c16:	f04a 0a10 	orrne.w	sl, sl, #16
   81c1a:	e5ce      	b.n	817ba <_vfiprintf_r+0xda>
   81c1c:	f01a 0f20 	tst.w	sl, #32
   81c20:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81c24:	f000 82f7 	beq.w	82216 <_vfiprintf_r+0xb36>
   81c28:	9c08      	ldr	r4, [sp, #32]
   81c2a:	6821      	ldr	r1, [r4, #0]
   81c2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81c2e:	17e5      	asrs	r5, r4, #31
   81c30:	462b      	mov	r3, r5
   81c32:	9d08      	ldr	r5, [sp, #32]
   81c34:	4622      	mov	r2, r4
   81c36:	3504      	adds	r5, #4
   81c38:	9508      	str	r5, [sp, #32]
   81c3a:	e9c1 2300 	strd	r2, r3, [r1]
   81c3e:	e582      	b.n	81746 <_vfiprintf_r+0x66>
   81c40:	9c08      	ldr	r4, [sp, #32]
   81c42:	46ac      	mov	ip, r5
   81c44:	6827      	ldr	r7, [r4, #0]
   81c46:	f04f 0500 	mov.w	r5, #0
   81c4a:	9004      	str	r0, [sp, #16]
   81c4c:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81c50:	3404      	adds	r4, #4
   81c52:	2f00      	cmp	r7, #0
   81c54:	f000 8332 	beq.w	822bc <_vfiprintf_r+0xbdc>
   81c58:	f1bc 0f00 	cmp.w	ip, #0
   81c5c:	4638      	mov	r0, r7
   81c5e:	f2c0 8307 	blt.w	82270 <_vfiprintf_r+0xb90>
   81c62:	4662      	mov	r2, ip
   81c64:	2100      	movs	r1, #0
   81c66:	f8cd c004 	str.w	ip, [sp, #4]
   81c6a:	f001 fbb1 	bl	833d0 <memchr>
   81c6e:	f8dd c004 	ldr.w	ip, [sp, #4]
   81c72:	2800      	cmp	r0, #0
   81c74:	f000 833a 	beq.w	822ec <_vfiprintf_r+0xc0c>
   81c78:	1bc0      	subs	r0, r0, r7
   81c7a:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81c7e:	4560      	cmp	r0, ip
   81c80:	bfa8      	it	ge
   81c82:	4660      	movge	r0, ip
   81c84:	9005      	str	r0, [sp, #20]
   81c86:	9408      	str	r4, [sp, #32]
   81c88:	9507      	str	r5, [sp, #28]
   81c8a:	f04f 0c00 	mov.w	ip, #0
   81c8e:	e65b      	b.n	81948 <_vfiprintf_r+0x268>
   81c90:	00084444 	.word	0x00084444
   81c94:	00084404 	.word	0x00084404
   81c98:	9b08      	ldr	r3, [sp, #32]
   81c9a:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c9e:	9004      	str	r0, [sp, #16]
   81ca0:	48b2      	ldr	r0, [pc, #712]	; (81f6c <_vfiprintf_r+0x88c>)
   81ca2:	681c      	ldr	r4, [r3, #0]
   81ca4:	2230      	movs	r2, #48	; 0x30
   81ca6:	2378      	movs	r3, #120	; 0x78
   81ca8:	f10b 0b04 	add.w	fp, fp, #4
   81cac:	46ac      	mov	ip, r5
   81cae:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81cb2:	f04a 0a02 	orr.w	sl, sl, #2
   81cb6:	f8cd b020 	str.w	fp, [sp, #32]
   81cba:	2500      	movs	r5, #0
   81cbc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81cc0:	900a      	str	r0, [sp, #40]	; 0x28
   81cc2:	2302      	movs	r3, #2
   81cc4:	e61d      	b.n	81902 <_vfiprintf_r+0x222>
   81cc6:	f04a 0a20 	orr.w	sl, sl, #32
   81cca:	f898 3000 	ldrb.w	r3, [r8]
   81cce:	e574      	b.n	817ba <_vfiprintf_r+0xda>
   81cd0:	f8dd b020 	ldr.w	fp, [sp, #32]
   81cd4:	f8db 0000 	ldr.w	r0, [fp]
   81cd8:	f10b 0304 	add.w	r3, fp, #4
   81cdc:	2800      	cmp	r0, #0
   81cde:	f6ff adf7 	blt.w	818d0 <_vfiprintf_r+0x1f0>
   81ce2:	9308      	str	r3, [sp, #32]
   81ce4:	f898 3000 	ldrb.w	r3, [r8]
   81ce8:	e567      	b.n	817ba <_vfiprintf_r+0xda>
   81cea:	f898 3000 	ldrb.w	r3, [r8]
   81cee:	212b      	movs	r1, #43	; 0x2b
   81cf0:	e563      	b.n	817ba <_vfiprintf_r+0xda>
   81cf2:	f898 3000 	ldrb.w	r3, [r8]
   81cf6:	f108 0401 	add.w	r4, r8, #1
   81cfa:	2b2a      	cmp	r3, #42	; 0x2a
   81cfc:	f000 8305 	beq.w	8230a <_vfiprintf_r+0xc2a>
   81d00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81d04:	2a09      	cmp	r2, #9
   81d06:	bf98      	it	ls
   81d08:	2500      	movls	r5, #0
   81d0a:	f200 82fa 	bhi.w	82302 <_vfiprintf_r+0xc22>
   81d0e:	f814 3b01 	ldrb.w	r3, [r4], #1
   81d12:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81d16:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81d1a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81d1e:	2a09      	cmp	r2, #9
   81d20:	d9f5      	bls.n	81d0e <_vfiprintf_r+0x62e>
   81d22:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   81d26:	46a0      	mov	r8, r4
   81d28:	e549      	b.n	817be <_vfiprintf_r+0xde>
   81d2a:	4c90      	ldr	r4, [pc, #576]	; (81f6c <_vfiprintf_r+0x88c>)
   81d2c:	f01a 0f20 	tst.w	sl, #32
   81d30:	9004      	str	r0, [sp, #16]
   81d32:	46ac      	mov	ip, r5
   81d34:	940a      	str	r4, [sp, #40]	; 0x28
   81d36:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81d3a:	f47f af10 	bne.w	81b5e <_vfiprintf_r+0x47e>
   81d3e:	f01a 0f10 	tst.w	sl, #16
   81d42:	f040 81ea 	bne.w	8211a <_vfiprintf_r+0xa3a>
   81d46:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81d4a:	f000 81e6 	beq.w	8211a <_vfiprintf_r+0xa3a>
   81d4e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81d52:	2500      	movs	r5, #0
   81d54:	f8bb 4000 	ldrh.w	r4, [fp]
   81d58:	f10b 0b04 	add.w	fp, fp, #4
   81d5c:	f8cd b020 	str.w	fp, [sp, #32]
   81d60:	e707      	b.n	81b72 <_vfiprintf_r+0x492>
   81d62:	f898 3000 	ldrb.w	r3, [r8]
   81d66:	2900      	cmp	r1, #0
   81d68:	f47f ad27 	bne.w	817ba <_vfiprintf_r+0xda>
   81d6c:	2120      	movs	r1, #32
   81d6e:	e524      	b.n	817ba <_vfiprintf_r+0xda>
   81d70:	f04a 0a01 	orr.w	sl, sl, #1
   81d74:	f898 3000 	ldrb.w	r3, [r8]
   81d78:	e51f      	b.n	817ba <_vfiprintf_r+0xda>
   81d7a:	9004      	str	r0, [sp, #16]
   81d7c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81d80:	2b00      	cmp	r3, #0
   81d82:	f000 80f9 	beq.w	81f78 <_vfiprintf_r+0x898>
   81d86:	2501      	movs	r5, #1
   81d88:	f04f 0b00 	mov.w	fp, #0
   81d8c:	9503      	str	r5, [sp, #12]
   81d8e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81d92:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81d96:	9505      	str	r5, [sp, #20]
   81d98:	af16      	add	r7, sp, #88	; 0x58
   81d9a:	e70e      	b.n	81bba <_vfiprintf_r+0x4da>
   81d9c:	9806      	ldr	r0, [sp, #24]
   81d9e:	9902      	ldr	r1, [sp, #8]
   81da0:	aa13      	add	r2, sp, #76	; 0x4c
   81da2:	f7ff fc61 	bl	81668 <__sprint_r.part.0>
   81da6:	2800      	cmp	r0, #0
   81da8:	f040 80ed 	bne.w	81f86 <_vfiprintf_r+0x8a6>
   81dac:	9814      	ldr	r0, [sp, #80]	; 0x50
   81dae:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81db0:	1c43      	adds	r3, r0, #1
   81db2:	46cc      	mov	ip, r9
   81db4:	e5fe      	b.n	819b4 <_vfiprintf_r+0x2d4>
   81db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81db8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81dba:	1c59      	adds	r1, r3, #1
   81dbc:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81dc0:	b168      	cbz	r0, 81dde <_vfiprintf_r+0x6fe>
   81dc2:	3201      	adds	r2, #1
   81dc4:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81dc8:	2301      	movs	r3, #1
   81dca:	2907      	cmp	r1, #7
   81dcc:	9215      	str	r2, [sp, #84]	; 0x54
   81dce:	9114      	str	r1, [sp, #80]	; 0x50
   81dd0:	e886 0009 	stmia.w	r6, {r0, r3}
   81dd4:	f300 8160 	bgt.w	82098 <_vfiprintf_r+0x9b8>
   81dd8:	460b      	mov	r3, r1
   81dda:	3608      	adds	r6, #8
   81ddc:	3101      	adds	r1, #1
   81dde:	9c07      	ldr	r4, [sp, #28]
   81de0:	b164      	cbz	r4, 81dfc <_vfiprintf_r+0x71c>
   81de2:	3202      	adds	r2, #2
   81de4:	a812      	add	r0, sp, #72	; 0x48
   81de6:	2302      	movs	r3, #2
   81de8:	2907      	cmp	r1, #7
   81dea:	9215      	str	r2, [sp, #84]	; 0x54
   81dec:	9114      	str	r1, [sp, #80]	; 0x50
   81dee:	e886 0009 	stmia.w	r6, {r0, r3}
   81df2:	f300 8157 	bgt.w	820a4 <_vfiprintf_r+0x9c4>
   81df6:	460b      	mov	r3, r1
   81df8:	3608      	adds	r6, #8
   81dfa:	3101      	adds	r1, #1
   81dfc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81dfe:	2d80      	cmp	r5, #128	; 0x80
   81e00:	f000 8101 	beq.w	82006 <_vfiprintf_r+0x926>
   81e04:	9d05      	ldr	r5, [sp, #20]
   81e06:	ebc5 040c 	rsb	r4, r5, ip
   81e0a:	2c00      	cmp	r4, #0
   81e0c:	dd2f      	ble.n	81e6e <_vfiprintf_r+0x78e>
   81e0e:	2c10      	cmp	r4, #16
   81e10:	4d57      	ldr	r5, [pc, #348]	; (81f70 <_vfiprintf_r+0x890>)
   81e12:	dd22      	ble.n	81e5a <_vfiprintf_r+0x77a>
   81e14:	4630      	mov	r0, r6
   81e16:	f04f 0b10 	mov.w	fp, #16
   81e1a:	462e      	mov	r6, r5
   81e1c:	4625      	mov	r5, r4
   81e1e:	9c06      	ldr	r4, [sp, #24]
   81e20:	e006      	b.n	81e30 <_vfiprintf_r+0x750>
   81e22:	f103 0c02 	add.w	ip, r3, #2
   81e26:	3008      	adds	r0, #8
   81e28:	460b      	mov	r3, r1
   81e2a:	3d10      	subs	r5, #16
   81e2c:	2d10      	cmp	r5, #16
   81e2e:	dd10      	ble.n	81e52 <_vfiprintf_r+0x772>
   81e30:	1c59      	adds	r1, r3, #1
   81e32:	3210      	adds	r2, #16
   81e34:	2907      	cmp	r1, #7
   81e36:	9215      	str	r2, [sp, #84]	; 0x54
   81e38:	e880 0840 	stmia.w	r0, {r6, fp}
   81e3c:	9114      	str	r1, [sp, #80]	; 0x50
   81e3e:	ddf0      	ble.n	81e22 <_vfiprintf_r+0x742>
   81e40:	2a00      	cmp	r2, #0
   81e42:	d163      	bne.n	81f0c <_vfiprintf_r+0x82c>
   81e44:	3d10      	subs	r5, #16
   81e46:	2d10      	cmp	r5, #16
   81e48:	f04f 0c01 	mov.w	ip, #1
   81e4c:	4613      	mov	r3, r2
   81e4e:	4648      	mov	r0, r9
   81e50:	dcee      	bgt.n	81e30 <_vfiprintf_r+0x750>
   81e52:	462c      	mov	r4, r5
   81e54:	4661      	mov	r1, ip
   81e56:	4635      	mov	r5, r6
   81e58:	4606      	mov	r6, r0
   81e5a:	4422      	add	r2, r4
   81e5c:	2907      	cmp	r1, #7
   81e5e:	9215      	str	r2, [sp, #84]	; 0x54
   81e60:	6035      	str	r5, [r6, #0]
   81e62:	6074      	str	r4, [r6, #4]
   81e64:	9114      	str	r1, [sp, #80]	; 0x50
   81e66:	f300 80c1 	bgt.w	81fec <_vfiprintf_r+0x90c>
   81e6a:	3608      	adds	r6, #8
   81e6c:	3101      	adds	r1, #1
   81e6e:	9d05      	ldr	r5, [sp, #20]
   81e70:	2907      	cmp	r1, #7
   81e72:	442a      	add	r2, r5
   81e74:	9215      	str	r2, [sp, #84]	; 0x54
   81e76:	6037      	str	r7, [r6, #0]
   81e78:	6075      	str	r5, [r6, #4]
   81e7a:	9114      	str	r1, [sp, #80]	; 0x50
   81e7c:	f340 80c1 	ble.w	82002 <_vfiprintf_r+0x922>
   81e80:	2a00      	cmp	r2, #0
   81e82:	f040 8130 	bne.w	820e6 <_vfiprintf_r+0xa06>
   81e86:	9214      	str	r2, [sp, #80]	; 0x50
   81e88:	464e      	mov	r6, r9
   81e8a:	f01a 0f04 	tst.w	sl, #4
   81e8e:	f000 808b 	beq.w	81fa8 <_vfiprintf_r+0x8c8>
   81e92:	9d04      	ldr	r5, [sp, #16]
   81e94:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81e98:	ebcb 0405 	rsb	r4, fp, r5
   81e9c:	2c00      	cmp	r4, #0
   81e9e:	f340 8083 	ble.w	81fa8 <_vfiprintf_r+0x8c8>
   81ea2:	2c10      	cmp	r4, #16
   81ea4:	f340 821e 	ble.w	822e4 <_vfiprintf_r+0xc04>
   81ea8:	9914      	ldr	r1, [sp, #80]	; 0x50
   81eaa:	4d32      	ldr	r5, [pc, #200]	; (81f74 <_vfiprintf_r+0x894>)
   81eac:	2710      	movs	r7, #16
   81eae:	f8dd a018 	ldr.w	sl, [sp, #24]
   81eb2:	f8dd b008 	ldr.w	fp, [sp, #8]
   81eb6:	e005      	b.n	81ec4 <_vfiprintf_r+0x7e4>
   81eb8:	1c88      	adds	r0, r1, #2
   81eba:	3608      	adds	r6, #8
   81ebc:	4619      	mov	r1, r3
   81ebe:	3c10      	subs	r4, #16
   81ec0:	2c10      	cmp	r4, #16
   81ec2:	dd10      	ble.n	81ee6 <_vfiprintf_r+0x806>
   81ec4:	1c4b      	adds	r3, r1, #1
   81ec6:	3210      	adds	r2, #16
   81ec8:	2b07      	cmp	r3, #7
   81eca:	9215      	str	r2, [sp, #84]	; 0x54
   81ecc:	e886 00a0 	stmia.w	r6, {r5, r7}
   81ed0:	9314      	str	r3, [sp, #80]	; 0x50
   81ed2:	ddf1      	ble.n	81eb8 <_vfiprintf_r+0x7d8>
   81ed4:	2a00      	cmp	r2, #0
   81ed6:	d17d      	bne.n	81fd4 <_vfiprintf_r+0x8f4>
   81ed8:	3c10      	subs	r4, #16
   81eda:	2c10      	cmp	r4, #16
   81edc:	f04f 0001 	mov.w	r0, #1
   81ee0:	4611      	mov	r1, r2
   81ee2:	464e      	mov	r6, r9
   81ee4:	dcee      	bgt.n	81ec4 <_vfiprintf_r+0x7e4>
   81ee6:	4422      	add	r2, r4
   81ee8:	2807      	cmp	r0, #7
   81eea:	9215      	str	r2, [sp, #84]	; 0x54
   81eec:	6035      	str	r5, [r6, #0]
   81eee:	6074      	str	r4, [r6, #4]
   81ef0:	9014      	str	r0, [sp, #80]	; 0x50
   81ef2:	dd59      	ble.n	81fa8 <_vfiprintf_r+0x8c8>
   81ef4:	2a00      	cmp	r2, #0
   81ef6:	d14f      	bne.n	81f98 <_vfiprintf_r+0x8b8>
   81ef8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81efa:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81efe:	9d04      	ldr	r5, [sp, #16]
   81f00:	45ab      	cmp	fp, r5
   81f02:	bfac      	ite	ge
   81f04:	445c      	addge	r4, fp
   81f06:	1964      	addlt	r4, r4, r5
   81f08:	9409      	str	r4, [sp, #36]	; 0x24
   81f0a:	e05e      	b.n	81fca <_vfiprintf_r+0x8ea>
   81f0c:	4620      	mov	r0, r4
   81f0e:	9902      	ldr	r1, [sp, #8]
   81f10:	aa13      	add	r2, sp, #76	; 0x4c
   81f12:	f7ff fba9 	bl	81668 <__sprint_r.part.0>
   81f16:	2800      	cmp	r0, #0
   81f18:	d135      	bne.n	81f86 <_vfiprintf_r+0x8a6>
   81f1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81f1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81f1e:	f103 0c01 	add.w	ip, r3, #1
   81f22:	4648      	mov	r0, r9
   81f24:	e781      	b.n	81e2a <_vfiprintf_r+0x74a>
   81f26:	08e0      	lsrs	r0, r4, #3
   81f28:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81f2c:	f004 0207 	and.w	r2, r4, #7
   81f30:	08e9      	lsrs	r1, r5, #3
   81f32:	3230      	adds	r2, #48	; 0x30
   81f34:	ea50 0b01 	orrs.w	fp, r0, r1
   81f38:	461f      	mov	r7, r3
   81f3a:	701a      	strb	r2, [r3, #0]
   81f3c:	4604      	mov	r4, r0
   81f3e:	460d      	mov	r5, r1
   81f40:	f103 33ff 	add.w	r3, r3, #4294967295
   81f44:	d1ef      	bne.n	81f26 <_vfiprintf_r+0x846>
   81f46:	f01a 0f01 	tst.w	sl, #1
   81f4a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81f4e:	4639      	mov	r1, r7
   81f50:	f000 80b9 	beq.w	820c6 <_vfiprintf_r+0x9e6>
   81f54:	2a30      	cmp	r2, #48	; 0x30
   81f56:	f43f acf4 	beq.w	81942 <_vfiprintf_r+0x262>
   81f5a:	461f      	mov	r7, r3
   81f5c:	ebc7 0509 	rsb	r5, r7, r9
   81f60:	2330      	movs	r3, #48	; 0x30
   81f62:	9505      	str	r5, [sp, #20]
   81f64:	f801 3c01 	strb.w	r3, [r1, #-1]
   81f68:	e4ee      	b.n	81948 <_vfiprintf_r+0x268>
   81f6a:	bf00      	nop
   81f6c:	00084418 	.word	0x00084418
   81f70:	00084434 	.word	0x00084434
   81f74:	00084444 	.word	0x00084444
   81f78:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81f7a:	b123      	cbz	r3, 81f86 <_vfiprintf_r+0x8a6>
   81f7c:	9806      	ldr	r0, [sp, #24]
   81f7e:	9902      	ldr	r1, [sp, #8]
   81f80:	aa13      	add	r2, sp, #76	; 0x4c
   81f82:	f7ff fb71 	bl	81668 <__sprint_r.part.0>
   81f86:	9c02      	ldr	r4, [sp, #8]
   81f88:	89a3      	ldrh	r3, [r4, #12]
   81f8a:	065b      	lsls	r3, r3, #25
   81f8c:	f53f ac98 	bmi.w	818c0 <_vfiprintf_r+0x1e0>
   81f90:	9809      	ldr	r0, [sp, #36]	; 0x24
   81f92:	b031      	add	sp, #196	; 0xc4
   81f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81f98:	9806      	ldr	r0, [sp, #24]
   81f9a:	9902      	ldr	r1, [sp, #8]
   81f9c:	aa13      	add	r2, sp, #76	; 0x4c
   81f9e:	f7ff fb63 	bl	81668 <__sprint_r.part.0>
   81fa2:	2800      	cmp	r0, #0
   81fa4:	d1ef      	bne.n	81f86 <_vfiprintf_r+0x8a6>
   81fa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81fa8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81faa:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81fae:	9d04      	ldr	r5, [sp, #16]
   81fb0:	45ab      	cmp	fp, r5
   81fb2:	bfac      	ite	ge
   81fb4:	445c      	addge	r4, fp
   81fb6:	1964      	addlt	r4, r4, r5
   81fb8:	9409      	str	r4, [sp, #36]	; 0x24
   81fba:	b132      	cbz	r2, 81fca <_vfiprintf_r+0x8ea>
   81fbc:	9806      	ldr	r0, [sp, #24]
   81fbe:	9902      	ldr	r1, [sp, #8]
   81fc0:	aa13      	add	r2, sp, #76	; 0x4c
   81fc2:	f7ff fb51 	bl	81668 <__sprint_r.part.0>
   81fc6:	2800      	cmp	r0, #0
   81fc8:	d1dd      	bne.n	81f86 <_vfiprintf_r+0x8a6>
   81fca:	2000      	movs	r0, #0
   81fcc:	9014      	str	r0, [sp, #80]	; 0x50
   81fce:	464e      	mov	r6, r9
   81fd0:	f7ff bbb9 	b.w	81746 <_vfiprintf_r+0x66>
   81fd4:	4650      	mov	r0, sl
   81fd6:	4659      	mov	r1, fp
   81fd8:	aa13      	add	r2, sp, #76	; 0x4c
   81fda:	f7ff fb45 	bl	81668 <__sprint_r.part.0>
   81fde:	2800      	cmp	r0, #0
   81fe0:	d1d1      	bne.n	81f86 <_vfiprintf_r+0x8a6>
   81fe2:	9914      	ldr	r1, [sp, #80]	; 0x50
   81fe4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81fe6:	1c48      	adds	r0, r1, #1
   81fe8:	464e      	mov	r6, r9
   81fea:	e768      	b.n	81ebe <_vfiprintf_r+0x7de>
   81fec:	2a00      	cmp	r2, #0
   81fee:	f040 80f7 	bne.w	821e0 <_vfiprintf_r+0xb00>
   81ff2:	9c05      	ldr	r4, [sp, #20]
   81ff4:	2301      	movs	r3, #1
   81ff6:	9720      	str	r7, [sp, #128]	; 0x80
   81ff8:	9421      	str	r4, [sp, #132]	; 0x84
   81ffa:	9415      	str	r4, [sp, #84]	; 0x54
   81ffc:	4622      	mov	r2, r4
   81ffe:	9314      	str	r3, [sp, #80]	; 0x50
   82000:	464e      	mov	r6, r9
   82002:	3608      	adds	r6, #8
   82004:	e741      	b.n	81e8a <_vfiprintf_r+0x7aa>
   82006:	9d04      	ldr	r5, [sp, #16]
   82008:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8200c:	ebcb 0405 	rsb	r4, fp, r5
   82010:	2c00      	cmp	r4, #0
   82012:	f77f aef7 	ble.w	81e04 <_vfiprintf_r+0x724>
   82016:	2c10      	cmp	r4, #16
   82018:	4da6      	ldr	r5, [pc, #664]	; (822b4 <_vfiprintf_r+0xbd4>)
   8201a:	f340 8170 	ble.w	822fe <_vfiprintf_r+0xc1e>
   8201e:	4629      	mov	r1, r5
   82020:	f04f 0b10 	mov.w	fp, #16
   82024:	4625      	mov	r5, r4
   82026:	4664      	mov	r4, ip
   82028:	46b4      	mov	ip, r6
   8202a:	460e      	mov	r6, r1
   8202c:	e006      	b.n	8203c <_vfiprintf_r+0x95c>
   8202e:	1c98      	adds	r0, r3, #2
   82030:	f10c 0c08 	add.w	ip, ip, #8
   82034:	460b      	mov	r3, r1
   82036:	3d10      	subs	r5, #16
   82038:	2d10      	cmp	r5, #16
   8203a:	dd0f      	ble.n	8205c <_vfiprintf_r+0x97c>
   8203c:	1c59      	adds	r1, r3, #1
   8203e:	3210      	adds	r2, #16
   82040:	2907      	cmp	r1, #7
   82042:	9215      	str	r2, [sp, #84]	; 0x54
   82044:	e88c 0840 	stmia.w	ip, {r6, fp}
   82048:	9114      	str	r1, [sp, #80]	; 0x50
   8204a:	ddf0      	ble.n	8202e <_vfiprintf_r+0x94e>
   8204c:	b9ba      	cbnz	r2, 8207e <_vfiprintf_r+0x99e>
   8204e:	3d10      	subs	r5, #16
   82050:	2d10      	cmp	r5, #16
   82052:	f04f 0001 	mov.w	r0, #1
   82056:	4613      	mov	r3, r2
   82058:	46cc      	mov	ip, r9
   8205a:	dcef      	bgt.n	8203c <_vfiprintf_r+0x95c>
   8205c:	4633      	mov	r3, r6
   8205e:	4666      	mov	r6, ip
   82060:	46a4      	mov	ip, r4
   82062:	462c      	mov	r4, r5
   82064:	461d      	mov	r5, r3
   82066:	4422      	add	r2, r4
   82068:	2807      	cmp	r0, #7
   8206a:	9215      	str	r2, [sp, #84]	; 0x54
   8206c:	6035      	str	r5, [r6, #0]
   8206e:	6074      	str	r4, [r6, #4]
   82070:	9014      	str	r0, [sp, #80]	; 0x50
   82072:	f300 80af 	bgt.w	821d4 <_vfiprintf_r+0xaf4>
   82076:	3608      	adds	r6, #8
   82078:	1c41      	adds	r1, r0, #1
   8207a:	4603      	mov	r3, r0
   8207c:	e6c2      	b.n	81e04 <_vfiprintf_r+0x724>
   8207e:	9806      	ldr	r0, [sp, #24]
   82080:	9902      	ldr	r1, [sp, #8]
   82082:	aa13      	add	r2, sp, #76	; 0x4c
   82084:	f7ff faf0 	bl	81668 <__sprint_r.part.0>
   82088:	2800      	cmp	r0, #0
   8208a:	f47f af7c 	bne.w	81f86 <_vfiprintf_r+0x8a6>
   8208e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82090:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82092:	1c58      	adds	r0, r3, #1
   82094:	46cc      	mov	ip, r9
   82096:	e7ce      	b.n	82036 <_vfiprintf_r+0x956>
   82098:	2a00      	cmp	r2, #0
   8209a:	d179      	bne.n	82190 <_vfiprintf_r+0xab0>
   8209c:	4619      	mov	r1, r3
   8209e:	464e      	mov	r6, r9
   820a0:	4613      	mov	r3, r2
   820a2:	e69c      	b.n	81dde <_vfiprintf_r+0x6fe>
   820a4:	2a00      	cmp	r2, #0
   820a6:	f040 8084 	bne.w	821b2 <_vfiprintf_r+0xad2>
   820aa:	2101      	movs	r1, #1
   820ac:	4613      	mov	r3, r2
   820ae:	464e      	mov	r6, r9
   820b0:	e6a4      	b.n	81dfc <_vfiprintf_r+0x71c>
   820b2:	464f      	mov	r7, r9
   820b4:	e448      	b.n	81948 <_vfiprintf_r+0x268>
   820b6:	2d00      	cmp	r5, #0
   820b8:	bf08      	it	eq
   820ba:	2c0a      	cmpeq	r4, #10
   820bc:	d246      	bcs.n	8214c <_vfiprintf_r+0xa6c>
   820be:	3430      	adds	r4, #48	; 0x30
   820c0:	af30      	add	r7, sp, #192	; 0xc0
   820c2:	f807 4d41 	strb.w	r4, [r7, #-65]!
   820c6:	ebc7 0309 	rsb	r3, r7, r9
   820ca:	9305      	str	r3, [sp, #20]
   820cc:	e43c      	b.n	81948 <_vfiprintf_r+0x268>
   820ce:	2302      	movs	r3, #2
   820d0:	e417      	b.n	81902 <_vfiprintf_r+0x222>
   820d2:	2a00      	cmp	r2, #0
   820d4:	f040 80af 	bne.w	82236 <_vfiprintf_r+0xb56>
   820d8:	4613      	mov	r3, r2
   820da:	2101      	movs	r1, #1
   820dc:	464e      	mov	r6, r9
   820de:	e66d      	b.n	81dbc <_vfiprintf_r+0x6dc>
   820e0:	4644      	mov	r4, r8
   820e2:	f7ff bb58 	b.w	81796 <_vfiprintf_r+0xb6>
   820e6:	9806      	ldr	r0, [sp, #24]
   820e8:	9902      	ldr	r1, [sp, #8]
   820ea:	aa13      	add	r2, sp, #76	; 0x4c
   820ec:	f7ff fabc 	bl	81668 <__sprint_r.part.0>
   820f0:	2800      	cmp	r0, #0
   820f2:	f47f af48 	bne.w	81f86 <_vfiprintf_r+0x8a6>
   820f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   820f8:	464e      	mov	r6, r9
   820fa:	e6c6      	b.n	81e8a <_vfiprintf_r+0x7aa>
   820fc:	9d08      	ldr	r5, [sp, #32]
   820fe:	682c      	ldr	r4, [r5, #0]
   82100:	3504      	adds	r5, #4
   82102:	9508      	str	r5, [sp, #32]
   82104:	2500      	movs	r5, #0
   82106:	f7ff bbfc 	b.w	81902 <_vfiprintf_r+0x222>
   8210a:	9d08      	ldr	r5, [sp, #32]
   8210c:	2301      	movs	r3, #1
   8210e:	682c      	ldr	r4, [r5, #0]
   82110:	3504      	adds	r5, #4
   82112:	9508      	str	r5, [sp, #32]
   82114:	2500      	movs	r5, #0
   82116:	f7ff bbf4 	b.w	81902 <_vfiprintf_r+0x222>
   8211a:	9d08      	ldr	r5, [sp, #32]
   8211c:	682c      	ldr	r4, [r5, #0]
   8211e:	3504      	adds	r5, #4
   82120:	9508      	str	r5, [sp, #32]
   82122:	2500      	movs	r5, #0
   82124:	e525      	b.n	81b72 <_vfiprintf_r+0x492>
   82126:	9d08      	ldr	r5, [sp, #32]
   82128:	682c      	ldr	r4, [r5, #0]
   8212a:	3504      	adds	r5, #4
   8212c:	9508      	str	r5, [sp, #32]
   8212e:	17e5      	asrs	r5, r4, #31
   82130:	4622      	mov	r2, r4
   82132:	462b      	mov	r3, r5
   82134:	e48e      	b.n	81a54 <_vfiprintf_r+0x374>
   82136:	9806      	ldr	r0, [sp, #24]
   82138:	9902      	ldr	r1, [sp, #8]
   8213a:	aa13      	add	r2, sp, #76	; 0x4c
   8213c:	f7ff fa94 	bl	81668 <__sprint_r.part.0>
   82140:	2800      	cmp	r0, #0
   82142:	f47f af20 	bne.w	81f86 <_vfiprintf_r+0x8a6>
   82146:	464e      	mov	r6, r9
   82148:	f7ff bb9a 	b.w	81880 <_vfiprintf_r+0x1a0>
   8214c:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   82150:	9603      	str	r6, [sp, #12]
   82152:	465e      	mov	r6, fp
   82154:	46e3      	mov	fp, ip
   82156:	4620      	mov	r0, r4
   82158:	4629      	mov	r1, r5
   8215a:	220a      	movs	r2, #10
   8215c:	2300      	movs	r3, #0
   8215e:	f001 fe2f 	bl	83dc0 <__aeabi_uldivmod>
   82162:	3230      	adds	r2, #48	; 0x30
   82164:	7032      	strb	r2, [r6, #0]
   82166:	4620      	mov	r0, r4
   82168:	4629      	mov	r1, r5
   8216a:	220a      	movs	r2, #10
   8216c:	2300      	movs	r3, #0
   8216e:	f001 fe27 	bl	83dc0 <__aeabi_uldivmod>
   82172:	4604      	mov	r4, r0
   82174:	460d      	mov	r5, r1
   82176:	ea54 0005 	orrs.w	r0, r4, r5
   8217a:	4637      	mov	r7, r6
   8217c:	f106 36ff 	add.w	r6, r6, #4294967295
   82180:	d1e9      	bne.n	82156 <_vfiprintf_r+0xa76>
   82182:	ebc7 0309 	rsb	r3, r7, r9
   82186:	46dc      	mov	ip, fp
   82188:	9e03      	ldr	r6, [sp, #12]
   8218a:	9305      	str	r3, [sp, #20]
   8218c:	f7ff bbdc 	b.w	81948 <_vfiprintf_r+0x268>
   82190:	9806      	ldr	r0, [sp, #24]
   82192:	9902      	ldr	r1, [sp, #8]
   82194:	aa13      	add	r2, sp, #76	; 0x4c
   82196:	f8cd c004 	str.w	ip, [sp, #4]
   8219a:	f7ff fa65 	bl	81668 <__sprint_r.part.0>
   8219e:	f8dd c004 	ldr.w	ip, [sp, #4]
   821a2:	2800      	cmp	r0, #0
   821a4:	f47f aeef 	bne.w	81f86 <_vfiprintf_r+0x8a6>
   821a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   821aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
   821ac:	1c59      	adds	r1, r3, #1
   821ae:	464e      	mov	r6, r9
   821b0:	e615      	b.n	81dde <_vfiprintf_r+0x6fe>
   821b2:	9806      	ldr	r0, [sp, #24]
   821b4:	9902      	ldr	r1, [sp, #8]
   821b6:	aa13      	add	r2, sp, #76	; 0x4c
   821b8:	f8cd c004 	str.w	ip, [sp, #4]
   821bc:	f7ff fa54 	bl	81668 <__sprint_r.part.0>
   821c0:	f8dd c004 	ldr.w	ip, [sp, #4]
   821c4:	2800      	cmp	r0, #0
   821c6:	f47f aede 	bne.w	81f86 <_vfiprintf_r+0x8a6>
   821ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   821cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   821ce:	1c59      	adds	r1, r3, #1
   821d0:	464e      	mov	r6, r9
   821d2:	e613      	b.n	81dfc <_vfiprintf_r+0x71c>
   821d4:	2a00      	cmp	r2, #0
   821d6:	d156      	bne.n	82286 <_vfiprintf_r+0xba6>
   821d8:	2101      	movs	r1, #1
   821da:	4613      	mov	r3, r2
   821dc:	464e      	mov	r6, r9
   821de:	e611      	b.n	81e04 <_vfiprintf_r+0x724>
   821e0:	9806      	ldr	r0, [sp, #24]
   821e2:	9902      	ldr	r1, [sp, #8]
   821e4:	aa13      	add	r2, sp, #76	; 0x4c
   821e6:	f7ff fa3f 	bl	81668 <__sprint_r.part.0>
   821ea:	2800      	cmp	r0, #0
   821ec:	f47f aecb 	bne.w	81f86 <_vfiprintf_r+0x8a6>
   821f0:	9914      	ldr	r1, [sp, #80]	; 0x50
   821f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   821f4:	3101      	adds	r1, #1
   821f6:	464e      	mov	r6, r9
   821f8:	e639      	b.n	81e6e <_vfiprintf_r+0x78e>
   821fa:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   821fe:	4264      	negs	r4, r4
   82200:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82204:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82208:	f8cd b01c 	str.w	fp, [sp, #28]
   8220c:	f8cd c014 	str.w	ip, [sp, #20]
   82210:	2301      	movs	r3, #1
   82212:	f7ff bb7e 	b.w	81912 <_vfiprintf_r+0x232>
   82216:	f01a 0f10 	tst.w	sl, #16
   8221a:	d11d      	bne.n	82258 <_vfiprintf_r+0xb78>
   8221c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82220:	d058      	beq.n	822d4 <_vfiprintf_r+0xbf4>
   82222:	9d08      	ldr	r5, [sp, #32]
   82224:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   82228:	682b      	ldr	r3, [r5, #0]
   8222a:	3504      	adds	r5, #4
   8222c:	9508      	str	r5, [sp, #32]
   8222e:	f8a3 b000 	strh.w	fp, [r3]
   82232:	f7ff ba88 	b.w	81746 <_vfiprintf_r+0x66>
   82236:	9806      	ldr	r0, [sp, #24]
   82238:	9902      	ldr	r1, [sp, #8]
   8223a:	aa13      	add	r2, sp, #76	; 0x4c
   8223c:	f8cd c004 	str.w	ip, [sp, #4]
   82240:	f7ff fa12 	bl	81668 <__sprint_r.part.0>
   82244:	f8dd c004 	ldr.w	ip, [sp, #4]
   82248:	2800      	cmp	r0, #0
   8224a:	f47f ae9c 	bne.w	81f86 <_vfiprintf_r+0x8a6>
   8224e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82250:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82252:	1c59      	adds	r1, r3, #1
   82254:	464e      	mov	r6, r9
   82256:	e5b1      	b.n	81dbc <_vfiprintf_r+0x6dc>
   82258:	f8dd b020 	ldr.w	fp, [sp, #32]
   8225c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8225e:	f8db 3000 	ldr.w	r3, [fp]
   82262:	f10b 0b04 	add.w	fp, fp, #4
   82266:	f8cd b020 	str.w	fp, [sp, #32]
   8226a:	601c      	str	r4, [r3, #0]
   8226c:	f7ff ba6b 	b.w	81746 <_vfiprintf_r+0x66>
   82270:	9408      	str	r4, [sp, #32]
   82272:	f7ff f9c9 	bl	81608 <strlen>
   82276:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   8227a:	9005      	str	r0, [sp, #20]
   8227c:	9407      	str	r4, [sp, #28]
   8227e:	f04f 0c00 	mov.w	ip, #0
   82282:	f7ff bb61 	b.w	81948 <_vfiprintf_r+0x268>
   82286:	9806      	ldr	r0, [sp, #24]
   82288:	9902      	ldr	r1, [sp, #8]
   8228a:	aa13      	add	r2, sp, #76	; 0x4c
   8228c:	f8cd c004 	str.w	ip, [sp, #4]
   82290:	f7ff f9ea 	bl	81668 <__sprint_r.part.0>
   82294:	f8dd c004 	ldr.w	ip, [sp, #4]
   82298:	2800      	cmp	r0, #0
   8229a:	f47f ae74 	bne.w	81f86 <_vfiprintf_r+0x8a6>
   8229e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   822a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   822a2:	1c59      	adds	r1, r3, #1
   822a4:	464e      	mov	r6, r9
   822a6:	e5ad      	b.n	81e04 <_vfiprintf_r+0x724>
   822a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   822aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
   822ac:	3301      	adds	r3, #1
   822ae:	4d02      	ldr	r5, [pc, #8]	; (822b8 <_vfiprintf_r+0xbd8>)
   822b0:	f7ff bb9a 	b.w	819e8 <_vfiprintf_r+0x308>
   822b4:	00084434 	.word	0x00084434
   822b8:	00084444 	.word	0x00084444
   822bc:	f1bc 0f06 	cmp.w	ip, #6
   822c0:	bf34      	ite	cc
   822c2:	4663      	movcc	r3, ip
   822c4:	2306      	movcs	r3, #6
   822c6:	9408      	str	r4, [sp, #32]
   822c8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   822cc:	9305      	str	r3, [sp, #20]
   822ce:	9403      	str	r4, [sp, #12]
   822d0:	4f16      	ldr	r7, [pc, #88]	; (8232c <_vfiprintf_r+0xc4c>)
   822d2:	e472      	b.n	81bba <_vfiprintf_r+0x4da>
   822d4:	9c08      	ldr	r4, [sp, #32]
   822d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   822d8:	6823      	ldr	r3, [r4, #0]
   822da:	3404      	adds	r4, #4
   822dc:	9408      	str	r4, [sp, #32]
   822de:	601d      	str	r5, [r3, #0]
   822e0:	f7ff ba31 	b.w	81746 <_vfiprintf_r+0x66>
   822e4:	9814      	ldr	r0, [sp, #80]	; 0x50
   822e6:	4d12      	ldr	r5, [pc, #72]	; (82330 <_vfiprintf_r+0xc50>)
   822e8:	3001      	adds	r0, #1
   822ea:	e5fc      	b.n	81ee6 <_vfiprintf_r+0x806>
   822ec:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   822f0:	f8cd c014 	str.w	ip, [sp, #20]
   822f4:	9507      	str	r5, [sp, #28]
   822f6:	9408      	str	r4, [sp, #32]
   822f8:	4684      	mov	ip, r0
   822fa:	f7ff bb25 	b.w	81948 <_vfiprintf_r+0x268>
   822fe:	4608      	mov	r0, r1
   82300:	e6b1      	b.n	82066 <_vfiprintf_r+0x986>
   82302:	46a0      	mov	r8, r4
   82304:	2500      	movs	r5, #0
   82306:	f7ff ba5a 	b.w	817be <_vfiprintf_r+0xde>
   8230a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8230e:	f898 3001 	ldrb.w	r3, [r8, #1]
   82312:	f8db 5000 	ldr.w	r5, [fp]
   82316:	f10b 0204 	add.w	r2, fp, #4
   8231a:	2d00      	cmp	r5, #0
   8231c:	9208      	str	r2, [sp, #32]
   8231e:	46a0      	mov	r8, r4
   82320:	f6bf aa4b 	bge.w	817ba <_vfiprintf_r+0xda>
   82324:	f04f 35ff 	mov.w	r5, #4294967295
   82328:	f7ff ba47 	b.w	817ba <_vfiprintf_r+0xda>
   8232c:	0008442c 	.word	0x0008442c
   82330:	00084444 	.word	0x00084444

00082334 <__sbprintf>:
   82334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82338:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   8233a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8233e:	4688      	mov	r8, r1
   82340:	9719      	str	r7, [sp, #100]	; 0x64
   82342:	f8d8 701c 	ldr.w	r7, [r8, #28]
   82346:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   8234a:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   8234e:	9707      	str	r7, [sp, #28]
   82350:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   82354:	ac1a      	add	r4, sp, #104	; 0x68
   82356:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8235a:	f02a 0a02 	bic.w	sl, sl, #2
   8235e:	2600      	movs	r6, #0
   82360:	4669      	mov	r1, sp
   82362:	9400      	str	r4, [sp, #0]
   82364:	9404      	str	r4, [sp, #16]
   82366:	9502      	str	r5, [sp, #8]
   82368:	9505      	str	r5, [sp, #20]
   8236a:	f8ad a00c 	strh.w	sl, [sp, #12]
   8236e:	f8ad 900e 	strh.w	r9, [sp, #14]
   82372:	9709      	str	r7, [sp, #36]	; 0x24
   82374:	9606      	str	r6, [sp, #24]
   82376:	4605      	mov	r5, r0
   82378:	f7ff f9b2 	bl	816e0 <_vfiprintf_r>
   8237c:	1e04      	subs	r4, r0, #0
   8237e:	db07      	blt.n	82390 <__sbprintf+0x5c>
   82380:	4628      	mov	r0, r5
   82382:	4669      	mov	r1, sp
   82384:	f000 f92a 	bl	825dc <_fflush_r>
   82388:	42b0      	cmp	r0, r6
   8238a:	bf18      	it	ne
   8238c:	f04f 34ff 	movne.w	r4, #4294967295
   82390:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82394:	065b      	lsls	r3, r3, #25
   82396:	d505      	bpl.n	823a4 <__sbprintf+0x70>
   82398:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   8239c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823a0:	f8a8 300c 	strh.w	r3, [r8, #12]
   823a4:	4620      	mov	r0, r4
   823a6:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   823aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   823ae:	bf00      	nop

000823b0 <__swsetup_r>:
   823b0:	4b2f      	ldr	r3, [pc, #188]	; (82470 <__swsetup_r+0xc0>)
   823b2:	b570      	push	{r4, r5, r6, lr}
   823b4:	4606      	mov	r6, r0
   823b6:	6818      	ldr	r0, [r3, #0]
   823b8:	460c      	mov	r4, r1
   823ba:	b110      	cbz	r0, 823c2 <__swsetup_r+0x12>
   823bc:	6b82      	ldr	r2, [r0, #56]	; 0x38
   823be:	2a00      	cmp	r2, #0
   823c0:	d036      	beq.n	82430 <__swsetup_r+0x80>
   823c2:	89a5      	ldrh	r5, [r4, #12]
   823c4:	b2ab      	uxth	r3, r5
   823c6:	0719      	lsls	r1, r3, #28
   823c8:	d50c      	bpl.n	823e4 <__swsetup_r+0x34>
   823ca:	6922      	ldr	r2, [r4, #16]
   823cc:	b1aa      	cbz	r2, 823fa <__swsetup_r+0x4a>
   823ce:	f013 0101 	ands.w	r1, r3, #1
   823d2:	d01e      	beq.n	82412 <__swsetup_r+0x62>
   823d4:	6963      	ldr	r3, [r4, #20]
   823d6:	2100      	movs	r1, #0
   823d8:	425b      	negs	r3, r3
   823da:	61a3      	str	r3, [r4, #24]
   823dc:	60a1      	str	r1, [r4, #8]
   823de:	b1f2      	cbz	r2, 8241e <__swsetup_r+0x6e>
   823e0:	2000      	movs	r0, #0
   823e2:	bd70      	pop	{r4, r5, r6, pc}
   823e4:	06da      	lsls	r2, r3, #27
   823e6:	d53a      	bpl.n	8245e <__swsetup_r+0xae>
   823e8:	075b      	lsls	r3, r3, #29
   823ea:	d424      	bmi.n	82436 <__swsetup_r+0x86>
   823ec:	6922      	ldr	r2, [r4, #16]
   823ee:	f045 0308 	orr.w	r3, r5, #8
   823f2:	81a3      	strh	r3, [r4, #12]
   823f4:	b29b      	uxth	r3, r3
   823f6:	2a00      	cmp	r2, #0
   823f8:	d1e9      	bne.n	823ce <__swsetup_r+0x1e>
   823fa:	f403 7120 	and.w	r1, r3, #640	; 0x280
   823fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82402:	d0e4      	beq.n	823ce <__swsetup_r+0x1e>
   82404:	4630      	mov	r0, r6
   82406:	4621      	mov	r1, r4
   82408:	f000 fcce 	bl	82da8 <__smakebuf_r>
   8240c:	89a3      	ldrh	r3, [r4, #12]
   8240e:	6922      	ldr	r2, [r4, #16]
   82410:	e7dd      	b.n	823ce <__swsetup_r+0x1e>
   82412:	0798      	lsls	r0, r3, #30
   82414:	bf58      	it	pl
   82416:	6961      	ldrpl	r1, [r4, #20]
   82418:	60a1      	str	r1, [r4, #8]
   8241a:	2a00      	cmp	r2, #0
   8241c:	d1e0      	bne.n	823e0 <__swsetup_r+0x30>
   8241e:	89a3      	ldrh	r3, [r4, #12]
   82420:	061a      	lsls	r2, r3, #24
   82422:	d5dd      	bpl.n	823e0 <__swsetup_r+0x30>
   82424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82428:	81a3      	strh	r3, [r4, #12]
   8242a:	f04f 30ff 	mov.w	r0, #4294967295
   8242e:	bd70      	pop	{r4, r5, r6, pc}
   82430:	f000 f8f0 	bl	82614 <__sinit>
   82434:	e7c5      	b.n	823c2 <__swsetup_r+0x12>
   82436:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82438:	b149      	cbz	r1, 8244e <__swsetup_r+0x9e>
   8243a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8243e:	4299      	cmp	r1, r3
   82440:	d003      	beq.n	8244a <__swsetup_r+0x9a>
   82442:	4630      	mov	r0, r6
   82444:	f000 fa2a 	bl	8289c <_free_r>
   82448:	89a5      	ldrh	r5, [r4, #12]
   8244a:	2300      	movs	r3, #0
   8244c:	6323      	str	r3, [r4, #48]	; 0x30
   8244e:	6922      	ldr	r2, [r4, #16]
   82450:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   82454:	2100      	movs	r1, #0
   82456:	b2ad      	uxth	r5, r5
   82458:	6022      	str	r2, [r4, #0]
   8245a:	6061      	str	r1, [r4, #4]
   8245c:	e7c7      	b.n	823ee <__swsetup_r+0x3e>
   8245e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   82462:	2309      	movs	r3, #9
   82464:	6033      	str	r3, [r6, #0]
   82466:	f04f 30ff 	mov.w	r0, #4294967295
   8246a:	81a5      	strh	r5, [r4, #12]
   8246c:	bd70      	pop	{r4, r5, r6, pc}
   8246e:	bf00      	nop
   82470:	20070568 	.word	0x20070568

00082474 <register_fini>:
   82474:	4b02      	ldr	r3, [pc, #8]	; (82480 <register_fini+0xc>)
   82476:	b113      	cbz	r3, 8247e <register_fini+0xa>
   82478:	4802      	ldr	r0, [pc, #8]	; (82484 <register_fini+0x10>)
   8247a:	f000 b805 	b.w	82488 <atexit>
   8247e:	4770      	bx	lr
   82480:	00000000 	.word	0x00000000
   82484:	00082711 	.word	0x00082711

00082488 <atexit>:
   82488:	4601      	mov	r1, r0
   8248a:	2000      	movs	r0, #0
   8248c:	4602      	mov	r2, r0
   8248e:	4603      	mov	r3, r0
   82490:	f001 bb9a 	b.w	83bc8 <__register_exitproc>

00082494 <__sflush_r>:
   82494:	898b      	ldrh	r3, [r1, #12]
   82496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8249a:	b29a      	uxth	r2, r3
   8249c:	460d      	mov	r5, r1
   8249e:	0711      	lsls	r1, r2, #28
   824a0:	4680      	mov	r8, r0
   824a2:	d43c      	bmi.n	8251e <__sflush_r+0x8a>
   824a4:	686a      	ldr	r2, [r5, #4]
   824a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   824aa:	2a00      	cmp	r2, #0
   824ac:	81ab      	strh	r3, [r5, #12]
   824ae:	dd59      	ble.n	82564 <__sflush_r+0xd0>
   824b0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   824b2:	2c00      	cmp	r4, #0
   824b4:	d04b      	beq.n	8254e <__sflush_r+0xba>
   824b6:	b29b      	uxth	r3, r3
   824b8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   824bc:	2100      	movs	r1, #0
   824be:	b292      	uxth	r2, r2
   824c0:	f8d8 6000 	ldr.w	r6, [r8]
   824c4:	f8c8 1000 	str.w	r1, [r8]
   824c8:	2a00      	cmp	r2, #0
   824ca:	d04f      	beq.n	8256c <__sflush_r+0xd8>
   824cc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   824ce:	075f      	lsls	r7, r3, #29
   824d0:	d505      	bpl.n	824de <__sflush_r+0x4a>
   824d2:	6869      	ldr	r1, [r5, #4]
   824d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   824d6:	1a52      	subs	r2, r2, r1
   824d8:	b10b      	cbz	r3, 824de <__sflush_r+0x4a>
   824da:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   824dc:	1ad2      	subs	r2, r2, r3
   824de:	4640      	mov	r0, r8
   824e0:	69e9      	ldr	r1, [r5, #28]
   824e2:	2300      	movs	r3, #0
   824e4:	47a0      	blx	r4
   824e6:	1c44      	adds	r4, r0, #1
   824e8:	d04a      	beq.n	82580 <__sflush_r+0xec>
   824ea:	89ab      	ldrh	r3, [r5, #12]
   824ec:	692a      	ldr	r2, [r5, #16]
   824ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   824f2:	b29b      	uxth	r3, r3
   824f4:	2100      	movs	r1, #0
   824f6:	602a      	str	r2, [r5, #0]
   824f8:	04da      	lsls	r2, r3, #19
   824fa:	81ab      	strh	r3, [r5, #12]
   824fc:	6069      	str	r1, [r5, #4]
   824fe:	d44c      	bmi.n	8259a <__sflush_r+0x106>
   82500:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82502:	f8c8 6000 	str.w	r6, [r8]
   82506:	b311      	cbz	r1, 8254e <__sflush_r+0xba>
   82508:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8250c:	4299      	cmp	r1, r3
   8250e:	d002      	beq.n	82516 <__sflush_r+0x82>
   82510:	4640      	mov	r0, r8
   82512:	f000 f9c3 	bl	8289c <_free_r>
   82516:	2000      	movs	r0, #0
   82518:	6328      	str	r0, [r5, #48]	; 0x30
   8251a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8251e:	692e      	ldr	r6, [r5, #16]
   82520:	b1ae      	cbz	r6, 8254e <__sflush_r+0xba>
   82522:	0791      	lsls	r1, r2, #30
   82524:	682c      	ldr	r4, [r5, #0]
   82526:	bf0c      	ite	eq
   82528:	696b      	ldreq	r3, [r5, #20]
   8252a:	2300      	movne	r3, #0
   8252c:	602e      	str	r6, [r5, #0]
   8252e:	1ba4      	subs	r4, r4, r6
   82530:	60ab      	str	r3, [r5, #8]
   82532:	e00a      	b.n	8254a <__sflush_r+0xb6>
   82534:	4632      	mov	r2, r6
   82536:	4623      	mov	r3, r4
   82538:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8253a:	4640      	mov	r0, r8
   8253c:	69e9      	ldr	r1, [r5, #28]
   8253e:	47b8      	blx	r7
   82540:	2800      	cmp	r0, #0
   82542:	ebc0 0404 	rsb	r4, r0, r4
   82546:	4406      	add	r6, r0
   82548:	dd04      	ble.n	82554 <__sflush_r+0xc0>
   8254a:	2c00      	cmp	r4, #0
   8254c:	dcf2      	bgt.n	82534 <__sflush_r+0xa0>
   8254e:	2000      	movs	r0, #0
   82550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82554:	89ab      	ldrh	r3, [r5, #12]
   82556:	f04f 30ff 	mov.w	r0, #4294967295
   8255a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8255e:	81ab      	strh	r3, [r5, #12]
   82560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82564:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82566:	2a00      	cmp	r2, #0
   82568:	dca2      	bgt.n	824b0 <__sflush_r+0x1c>
   8256a:	e7f0      	b.n	8254e <__sflush_r+0xba>
   8256c:	2301      	movs	r3, #1
   8256e:	4640      	mov	r0, r8
   82570:	69e9      	ldr	r1, [r5, #28]
   82572:	47a0      	blx	r4
   82574:	1c43      	adds	r3, r0, #1
   82576:	4602      	mov	r2, r0
   82578:	d01e      	beq.n	825b8 <__sflush_r+0x124>
   8257a:	89ab      	ldrh	r3, [r5, #12]
   8257c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8257e:	e7a6      	b.n	824ce <__sflush_r+0x3a>
   82580:	f8d8 3000 	ldr.w	r3, [r8]
   82584:	b95b      	cbnz	r3, 8259e <__sflush_r+0x10a>
   82586:	89aa      	ldrh	r2, [r5, #12]
   82588:	6929      	ldr	r1, [r5, #16]
   8258a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8258e:	b292      	uxth	r2, r2
   82590:	606b      	str	r3, [r5, #4]
   82592:	04d3      	lsls	r3, r2, #19
   82594:	81aa      	strh	r2, [r5, #12]
   82596:	6029      	str	r1, [r5, #0]
   82598:	d5b2      	bpl.n	82500 <__sflush_r+0x6c>
   8259a:	6528      	str	r0, [r5, #80]	; 0x50
   8259c:	e7b0      	b.n	82500 <__sflush_r+0x6c>
   8259e:	2b1d      	cmp	r3, #29
   825a0:	d001      	beq.n	825a6 <__sflush_r+0x112>
   825a2:	2b16      	cmp	r3, #22
   825a4:	d113      	bne.n	825ce <__sflush_r+0x13a>
   825a6:	89a9      	ldrh	r1, [r5, #12]
   825a8:	692b      	ldr	r3, [r5, #16]
   825aa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   825ae:	2200      	movs	r2, #0
   825b0:	81a9      	strh	r1, [r5, #12]
   825b2:	602b      	str	r3, [r5, #0]
   825b4:	606a      	str	r2, [r5, #4]
   825b6:	e7a3      	b.n	82500 <__sflush_r+0x6c>
   825b8:	f8d8 3000 	ldr.w	r3, [r8]
   825bc:	2b00      	cmp	r3, #0
   825be:	d0dc      	beq.n	8257a <__sflush_r+0xe6>
   825c0:	2b1d      	cmp	r3, #29
   825c2:	d001      	beq.n	825c8 <__sflush_r+0x134>
   825c4:	2b16      	cmp	r3, #22
   825c6:	d1c5      	bne.n	82554 <__sflush_r+0xc0>
   825c8:	f8c8 6000 	str.w	r6, [r8]
   825cc:	e7bf      	b.n	8254e <__sflush_r+0xba>
   825ce:	89ab      	ldrh	r3, [r5, #12]
   825d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   825d4:	81ab      	strh	r3, [r5, #12]
   825d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825da:	bf00      	nop

000825dc <_fflush_r>:
   825dc:	b510      	push	{r4, lr}
   825de:	4604      	mov	r4, r0
   825e0:	b082      	sub	sp, #8
   825e2:	b108      	cbz	r0, 825e8 <_fflush_r+0xc>
   825e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   825e6:	b153      	cbz	r3, 825fe <_fflush_r+0x22>
   825e8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   825ec:	b908      	cbnz	r0, 825f2 <_fflush_r+0x16>
   825ee:	b002      	add	sp, #8
   825f0:	bd10      	pop	{r4, pc}
   825f2:	4620      	mov	r0, r4
   825f4:	b002      	add	sp, #8
   825f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   825fa:	f7ff bf4b 	b.w	82494 <__sflush_r>
   825fe:	9101      	str	r1, [sp, #4]
   82600:	f000 f808 	bl	82614 <__sinit>
   82604:	9901      	ldr	r1, [sp, #4]
   82606:	e7ef      	b.n	825e8 <_fflush_r+0xc>

00082608 <_cleanup_r>:
   82608:	4901      	ldr	r1, [pc, #4]	; (82610 <_cleanup_r+0x8>)
   8260a:	f000 bb9f 	b.w	82d4c <_fwalk>
   8260e:	bf00      	nop
   82610:	00083d15 	.word	0x00083d15

00082614 <__sinit>:
   82614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82618:	6b84      	ldr	r4, [r0, #56]	; 0x38
   8261a:	b083      	sub	sp, #12
   8261c:	4607      	mov	r7, r0
   8261e:	2c00      	cmp	r4, #0
   82620:	d165      	bne.n	826ee <__sinit+0xda>
   82622:	687d      	ldr	r5, [r7, #4]
   82624:	4833      	ldr	r0, [pc, #204]	; (826f4 <__sinit+0xe0>)
   82626:	2304      	movs	r3, #4
   82628:	2103      	movs	r1, #3
   8262a:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8262e:	63f8      	str	r0, [r7, #60]	; 0x3c
   82630:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82634:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82638:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8263c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82640:	81ab      	strh	r3, [r5, #12]
   82642:	602c      	str	r4, [r5, #0]
   82644:	606c      	str	r4, [r5, #4]
   82646:	60ac      	str	r4, [r5, #8]
   82648:	666c      	str	r4, [r5, #100]	; 0x64
   8264a:	81ec      	strh	r4, [r5, #14]
   8264c:	612c      	str	r4, [r5, #16]
   8264e:	616c      	str	r4, [r5, #20]
   82650:	61ac      	str	r4, [r5, #24]
   82652:	4621      	mov	r1, r4
   82654:	2208      	movs	r2, #8
   82656:	f7fe ff05 	bl	81464 <memset>
   8265a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 826f8 <__sinit+0xe4>
   8265e:	68be      	ldr	r6, [r7, #8]
   82660:	f8df a098 	ldr.w	sl, [pc, #152]	; 826fc <__sinit+0xe8>
   82664:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82700 <__sinit+0xec>
   82668:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82704 <__sinit+0xf0>
   8266c:	2301      	movs	r3, #1
   8266e:	2209      	movs	r2, #9
   82670:	61ed      	str	r5, [r5, #28]
   82672:	f8c5 b020 	str.w	fp, [r5, #32]
   82676:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8267a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8267e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82682:	4621      	mov	r1, r4
   82684:	81f3      	strh	r3, [r6, #14]
   82686:	81b2      	strh	r2, [r6, #12]
   82688:	6034      	str	r4, [r6, #0]
   8268a:	6074      	str	r4, [r6, #4]
   8268c:	60b4      	str	r4, [r6, #8]
   8268e:	6674      	str	r4, [r6, #100]	; 0x64
   82690:	6134      	str	r4, [r6, #16]
   82692:	6174      	str	r4, [r6, #20]
   82694:	61b4      	str	r4, [r6, #24]
   82696:	2208      	movs	r2, #8
   82698:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   8269c:	9301      	str	r3, [sp, #4]
   8269e:	f7fe fee1 	bl	81464 <memset>
   826a2:	68fd      	ldr	r5, [r7, #12]
   826a4:	2012      	movs	r0, #18
   826a6:	2202      	movs	r2, #2
   826a8:	61f6      	str	r6, [r6, #28]
   826aa:	f8c6 b020 	str.w	fp, [r6, #32]
   826ae:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   826b2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   826b6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   826ba:	4621      	mov	r1, r4
   826bc:	81a8      	strh	r0, [r5, #12]
   826be:	81ea      	strh	r2, [r5, #14]
   826c0:	602c      	str	r4, [r5, #0]
   826c2:	606c      	str	r4, [r5, #4]
   826c4:	60ac      	str	r4, [r5, #8]
   826c6:	666c      	str	r4, [r5, #100]	; 0x64
   826c8:	612c      	str	r4, [r5, #16]
   826ca:	616c      	str	r4, [r5, #20]
   826cc:	61ac      	str	r4, [r5, #24]
   826ce:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   826d2:	2208      	movs	r2, #8
   826d4:	f7fe fec6 	bl	81464 <memset>
   826d8:	9b01      	ldr	r3, [sp, #4]
   826da:	61ed      	str	r5, [r5, #28]
   826dc:	f8c5 b020 	str.w	fp, [r5, #32]
   826e0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   826e4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   826e8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   826ec:	63bb      	str	r3, [r7, #56]	; 0x38
   826ee:	b003      	add	sp, #12
   826f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   826f4:	00082609 	.word	0x00082609
   826f8:	00083a09 	.word	0x00083a09
   826fc:	00083a2d 	.word	0x00083a2d
   82700:	00083a65 	.word	0x00083a65
   82704:	00083a85 	.word	0x00083a85

00082708 <__sfp_lock_acquire>:
   82708:	4770      	bx	lr
   8270a:	bf00      	nop

0008270c <__sfp_lock_release>:
   8270c:	4770      	bx	lr
   8270e:	bf00      	nop

00082710 <__libc_fini_array>:
   82710:	b538      	push	{r3, r4, r5, lr}
   82712:	4d09      	ldr	r5, [pc, #36]	; (82738 <__libc_fini_array+0x28>)
   82714:	4c09      	ldr	r4, [pc, #36]	; (8273c <__libc_fini_array+0x2c>)
   82716:	1b64      	subs	r4, r4, r5
   82718:	10a4      	asrs	r4, r4, #2
   8271a:	bf18      	it	ne
   8271c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82720:	d005      	beq.n	8272e <__libc_fini_array+0x1e>
   82722:	3c01      	subs	r4, #1
   82724:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82728:	4798      	blx	r3
   8272a:	2c00      	cmp	r4, #0
   8272c:	d1f9      	bne.n	82722 <__libc_fini_array+0x12>
   8272e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82732:	f001 be99 	b.w	84468 <_fini>
   82736:	bf00      	nop
   82738:	00084474 	.word	0x00084474
   8273c:	00084478 	.word	0x00084478

00082740 <_fputwc_r>:
   82740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82744:	8993      	ldrh	r3, [r2, #12]
   82746:	460f      	mov	r7, r1
   82748:	0499      	lsls	r1, r3, #18
   8274a:	b082      	sub	sp, #8
   8274c:	4614      	mov	r4, r2
   8274e:	4680      	mov	r8, r0
   82750:	d406      	bmi.n	82760 <_fputwc_r+0x20>
   82752:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82754:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8275c:	81a3      	strh	r3, [r4, #12]
   8275e:	6662      	str	r2, [r4, #100]	; 0x64
   82760:	f000 fb1c 	bl	82d9c <__locale_mb_cur_max>
   82764:	2801      	cmp	r0, #1
   82766:	d03e      	beq.n	827e6 <_fputwc_r+0xa6>
   82768:	463a      	mov	r2, r7
   8276a:	4640      	mov	r0, r8
   8276c:	a901      	add	r1, sp, #4
   8276e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82772:	f001 f9df 	bl	83b34 <_wcrtomb_r>
   82776:	1c42      	adds	r2, r0, #1
   82778:	4606      	mov	r6, r0
   8277a:	d02d      	beq.n	827d8 <_fputwc_r+0x98>
   8277c:	2800      	cmp	r0, #0
   8277e:	d03a      	beq.n	827f6 <_fputwc_r+0xb6>
   82780:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82784:	2500      	movs	r5, #0
   82786:	e009      	b.n	8279c <_fputwc_r+0x5c>
   82788:	6823      	ldr	r3, [r4, #0]
   8278a:	7019      	strb	r1, [r3, #0]
   8278c:	6823      	ldr	r3, [r4, #0]
   8278e:	3301      	adds	r3, #1
   82790:	6023      	str	r3, [r4, #0]
   82792:	3501      	adds	r5, #1
   82794:	42b5      	cmp	r5, r6
   82796:	d22e      	bcs.n	827f6 <_fputwc_r+0xb6>
   82798:	ab01      	add	r3, sp, #4
   8279a:	5ce9      	ldrb	r1, [r5, r3]
   8279c:	68a3      	ldr	r3, [r4, #8]
   8279e:	3b01      	subs	r3, #1
   827a0:	2b00      	cmp	r3, #0
   827a2:	60a3      	str	r3, [r4, #8]
   827a4:	daf0      	bge.n	82788 <_fputwc_r+0x48>
   827a6:	69a2      	ldr	r2, [r4, #24]
   827a8:	4293      	cmp	r3, r2
   827aa:	db06      	blt.n	827ba <_fputwc_r+0x7a>
   827ac:	6823      	ldr	r3, [r4, #0]
   827ae:	7019      	strb	r1, [r3, #0]
   827b0:	6823      	ldr	r3, [r4, #0]
   827b2:	7819      	ldrb	r1, [r3, #0]
   827b4:	3301      	adds	r3, #1
   827b6:	290a      	cmp	r1, #10
   827b8:	d1ea      	bne.n	82790 <_fputwc_r+0x50>
   827ba:	4640      	mov	r0, r8
   827bc:	4622      	mov	r2, r4
   827be:	f001 f965 	bl	83a8c <__swbuf_r>
   827c2:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   827c6:	4258      	negs	r0, r3
   827c8:	4158      	adcs	r0, r3
   827ca:	2800      	cmp	r0, #0
   827cc:	d0e1      	beq.n	82792 <_fputwc_r+0x52>
   827ce:	f04f 30ff 	mov.w	r0, #4294967295
   827d2:	b002      	add	sp, #8
   827d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   827d8:	89a3      	ldrh	r3, [r4, #12]
   827da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   827de:	81a3      	strh	r3, [r4, #12]
   827e0:	b002      	add	sp, #8
   827e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   827e6:	1e7b      	subs	r3, r7, #1
   827e8:	2bfe      	cmp	r3, #254	; 0xfe
   827ea:	d8bd      	bhi.n	82768 <_fputwc_r+0x28>
   827ec:	b2f9      	uxtb	r1, r7
   827ee:	4606      	mov	r6, r0
   827f0:	f88d 1004 	strb.w	r1, [sp, #4]
   827f4:	e7c6      	b.n	82784 <_fputwc_r+0x44>
   827f6:	4638      	mov	r0, r7
   827f8:	b002      	add	sp, #8
   827fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   827fe:	bf00      	nop

00082800 <_malloc_trim_r>:
   82800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82802:	4d23      	ldr	r5, [pc, #140]	; (82890 <_malloc_trim_r+0x90>)
   82804:	460f      	mov	r7, r1
   82806:	4604      	mov	r4, r0
   82808:	f000 ff08 	bl	8361c <__malloc_lock>
   8280c:	68ab      	ldr	r3, [r5, #8]
   8280e:	685e      	ldr	r6, [r3, #4]
   82810:	f026 0603 	bic.w	r6, r6, #3
   82814:	1bf1      	subs	r1, r6, r7
   82816:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8281a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8281e:	f021 010f 	bic.w	r1, r1, #15
   82822:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82826:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8282a:	db07      	blt.n	8283c <_malloc_trim_r+0x3c>
   8282c:	4620      	mov	r0, r4
   8282e:	2100      	movs	r1, #0
   82830:	f001 f8d8 	bl	839e4 <_sbrk_r>
   82834:	68ab      	ldr	r3, [r5, #8]
   82836:	4433      	add	r3, r6
   82838:	4298      	cmp	r0, r3
   8283a:	d004      	beq.n	82846 <_malloc_trim_r+0x46>
   8283c:	4620      	mov	r0, r4
   8283e:	f000 feef 	bl	83620 <__malloc_unlock>
   82842:	2000      	movs	r0, #0
   82844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82846:	4620      	mov	r0, r4
   82848:	4279      	negs	r1, r7
   8284a:	f001 f8cb 	bl	839e4 <_sbrk_r>
   8284e:	3001      	adds	r0, #1
   82850:	d00d      	beq.n	8286e <_malloc_trim_r+0x6e>
   82852:	4b10      	ldr	r3, [pc, #64]	; (82894 <_malloc_trim_r+0x94>)
   82854:	68aa      	ldr	r2, [r5, #8]
   82856:	6819      	ldr	r1, [r3, #0]
   82858:	1bf6      	subs	r6, r6, r7
   8285a:	f046 0601 	orr.w	r6, r6, #1
   8285e:	4620      	mov	r0, r4
   82860:	1bc9      	subs	r1, r1, r7
   82862:	6056      	str	r6, [r2, #4]
   82864:	6019      	str	r1, [r3, #0]
   82866:	f000 fedb 	bl	83620 <__malloc_unlock>
   8286a:	2001      	movs	r0, #1
   8286c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8286e:	4620      	mov	r0, r4
   82870:	2100      	movs	r1, #0
   82872:	f001 f8b7 	bl	839e4 <_sbrk_r>
   82876:	68ab      	ldr	r3, [r5, #8]
   82878:	1ac2      	subs	r2, r0, r3
   8287a:	2a0f      	cmp	r2, #15
   8287c:	ddde      	ble.n	8283c <_malloc_trim_r+0x3c>
   8287e:	4d06      	ldr	r5, [pc, #24]	; (82898 <_malloc_trim_r+0x98>)
   82880:	4904      	ldr	r1, [pc, #16]	; (82894 <_malloc_trim_r+0x94>)
   82882:	682d      	ldr	r5, [r5, #0]
   82884:	f042 0201 	orr.w	r2, r2, #1
   82888:	1b40      	subs	r0, r0, r5
   8288a:	605a      	str	r2, [r3, #4]
   8288c:	6008      	str	r0, [r1, #0]
   8288e:	e7d5      	b.n	8283c <_malloc_trim_r+0x3c>
   82890:	20070590 	.word	0x20070590
   82894:	20070ae8 	.word	0x20070ae8
   82898:	2007099c 	.word	0x2007099c

0008289c <_free_r>:
   8289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828a0:	460d      	mov	r5, r1
   828a2:	4606      	mov	r6, r0
   828a4:	2900      	cmp	r1, #0
   828a6:	d055      	beq.n	82954 <_free_r+0xb8>
   828a8:	f000 feb8 	bl	8361c <__malloc_lock>
   828ac:	f855 1c04 	ldr.w	r1, [r5, #-4]
   828b0:	f8df c170 	ldr.w	ip, [pc, #368]	; 82a24 <_free_r+0x188>
   828b4:	f1a5 0408 	sub.w	r4, r5, #8
   828b8:	f021 0301 	bic.w	r3, r1, #1
   828bc:	18e2      	adds	r2, r4, r3
   828be:	f8dc 0008 	ldr.w	r0, [ip, #8]
   828c2:	6857      	ldr	r7, [r2, #4]
   828c4:	4290      	cmp	r0, r2
   828c6:	f027 0703 	bic.w	r7, r7, #3
   828ca:	d068      	beq.n	8299e <_free_r+0x102>
   828cc:	f011 0101 	ands.w	r1, r1, #1
   828d0:	6057      	str	r7, [r2, #4]
   828d2:	d032      	beq.n	8293a <_free_r+0x9e>
   828d4:	2100      	movs	r1, #0
   828d6:	19d0      	adds	r0, r2, r7
   828d8:	6840      	ldr	r0, [r0, #4]
   828da:	07c0      	lsls	r0, r0, #31
   828dc:	d406      	bmi.n	828ec <_free_r+0x50>
   828de:	443b      	add	r3, r7
   828e0:	6890      	ldr	r0, [r2, #8]
   828e2:	2900      	cmp	r1, #0
   828e4:	d04d      	beq.n	82982 <_free_r+0xe6>
   828e6:	68d2      	ldr	r2, [r2, #12]
   828e8:	60c2      	str	r2, [r0, #12]
   828ea:	6090      	str	r0, [r2, #8]
   828ec:	f043 0201 	orr.w	r2, r3, #1
   828f0:	6062      	str	r2, [r4, #4]
   828f2:	50e3      	str	r3, [r4, r3]
   828f4:	b9e1      	cbnz	r1, 82930 <_free_r+0x94>
   828f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   828fa:	d32d      	bcc.n	82958 <_free_r+0xbc>
   828fc:	0a5a      	lsrs	r2, r3, #9
   828fe:	2a04      	cmp	r2, #4
   82900:	d869      	bhi.n	829d6 <_free_r+0x13a>
   82902:	0998      	lsrs	r0, r3, #6
   82904:	3038      	adds	r0, #56	; 0x38
   82906:	0041      	lsls	r1, r0, #1
   82908:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   8290c:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82910:	4944      	ldr	r1, [pc, #272]	; (82a24 <_free_r+0x188>)
   82912:	4562      	cmp	r2, ip
   82914:	d065      	beq.n	829e2 <_free_r+0x146>
   82916:	6851      	ldr	r1, [r2, #4]
   82918:	f021 0103 	bic.w	r1, r1, #3
   8291c:	428b      	cmp	r3, r1
   8291e:	d202      	bcs.n	82926 <_free_r+0x8a>
   82920:	6892      	ldr	r2, [r2, #8]
   82922:	4594      	cmp	ip, r2
   82924:	d1f7      	bne.n	82916 <_free_r+0x7a>
   82926:	68d3      	ldr	r3, [r2, #12]
   82928:	60e3      	str	r3, [r4, #12]
   8292a:	60a2      	str	r2, [r4, #8]
   8292c:	609c      	str	r4, [r3, #8]
   8292e:	60d4      	str	r4, [r2, #12]
   82930:	4630      	mov	r0, r6
   82932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82936:	f000 be73 	b.w	83620 <__malloc_unlock>
   8293a:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8293e:	f10c 0808 	add.w	r8, ip, #8
   82942:	1b64      	subs	r4, r4, r5
   82944:	68a0      	ldr	r0, [r4, #8]
   82946:	442b      	add	r3, r5
   82948:	4540      	cmp	r0, r8
   8294a:	d042      	beq.n	829d2 <_free_r+0x136>
   8294c:	68e5      	ldr	r5, [r4, #12]
   8294e:	60c5      	str	r5, [r0, #12]
   82950:	60a8      	str	r0, [r5, #8]
   82952:	e7c0      	b.n	828d6 <_free_r+0x3a>
   82954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82958:	08db      	lsrs	r3, r3, #3
   8295a:	109a      	asrs	r2, r3, #2
   8295c:	2001      	movs	r0, #1
   8295e:	4090      	lsls	r0, r2
   82960:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82964:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82968:	689a      	ldr	r2, [r3, #8]
   8296a:	4301      	orrs	r1, r0
   8296c:	60a2      	str	r2, [r4, #8]
   8296e:	60e3      	str	r3, [r4, #12]
   82970:	f8cc 1004 	str.w	r1, [ip, #4]
   82974:	4630      	mov	r0, r6
   82976:	609c      	str	r4, [r3, #8]
   82978:	60d4      	str	r4, [r2, #12]
   8297a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8297e:	f000 be4f 	b.w	83620 <__malloc_unlock>
   82982:	4d29      	ldr	r5, [pc, #164]	; (82a28 <_free_r+0x18c>)
   82984:	42a8      	cmp	r0, r5
   82986:	d1ae      	bne.n	828e6 <_free_r+0x4a>
   82988:	f043 0201 	orr.w	r2, r3, #1
   8298c:	f8cc 4014 	str.w	r4, [ip, #20]
   82990:	f8cc 4010 	str.w	r4, [ip, #16]
   82994:	60e0      	str	r0, [r4, #12]
   82996:	60a0      	str	r0, [r4, #8]
   82998:	6062      	str	r2, [r4, #4]
   8299a:	50e3      	str	r3, [r4, r3]
   8299c:	e7c8      	b.n	82930 <_free_r+0x94>
   8299e:	441f      	add	r7, r3
   829a0:	07cb      	lsls	r3, r1, #31
   829a2:	d407      	bmi.n	829b4 <_free_r+0x118>
   829a4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   829a8:	1a64      	subs	r4, r4, r1
   829aa:	68e3      	ldr	r3, [r4, #12]
   829ac:	68a2      	ldr	r2, [r4, #8]
   829ae:	440f      	add	r7, r1
   829b0:	60d3      	str	r3, [r2, #12]
   829b2:	609a      	str	r2, [r3, #8]
   829b4:	4b1d      	ldr	r3, [pc, #116]	; (82a2c <_free_r+0x190>)
   829b6:	f047 0201 	orr.w	r2, r7, #1
   829ba:	681b      	ldr	r3, [r3, #0]
   829bc:	6062      	str	r2, [r4, #4]
   829be:	429f      	cmp	r7, r3
   829c0:	f8cc 4008 	str.w	r4, [ip, #8]
   829c4:	d3b4      	bcc.n	82930 <_free_r+0x94>
   829c6:	4b1a      	ldr	r3, [pc, #104]	; (82a30 <_free_r+0x194>)
   829c8:	4630      	mov	r0, r6
   829ca:	6819      	ldr	r1, [r3, #0]
   829cc:	f7ff ff18 	bl	82800 <_malloc_trim_r>
   829d0:	e7ae      	b.n	82930 <_free_r+0x94>
   829d2:	2101      	movs	r1, #1
   829d4:	e77f      	b.n	828d6 <_free_r+0x3a>
   829d6:	2a14      	cmp	r2, #20
   829d8:	d80b      	bhi.n	829f2 <_free_r+0x156>
   829da:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   829de:	0041      	lsls	r1, r0, #1
   829e0:	e792      	b.n	82908 <_free_r+0x6c>
   829e2:	1080      	asrs	r0, r0, #2
   829e4:	2501      	movs	r5, #1
   829e6:	4085      	lsls	r5, r0
   829e8:	6848      	ldr	r0, [r1, #4]
   829ea:	4613      	mov	r3, r2
   829ec:	4328      	orrs	r0, r5
   829ee:	6048      	str	r0, [r1, #4]
   829f0:	e79a      	b.n	82928 <_free_r+0x8c>
   829f2:	2a54      	cmp	r2, #84	; 0x54
   829f4:	d803      	bhi.n	829fe <_free_r+0x162>
   829f6:	0b18      	lsrs	r0, r3, #12
   829f8:	306e      	adds	r0, #110	; 0x6e
   829fa:	0041      	lsls	r1, r0, #1
   829fc:	e784      	b.n	82908 <_free_r+0x6c>
   829fe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82a02:	d803      	bhi.n	82a0c <_free_r+0x170>
   82a04:	0bd8      	lsrs	r0, r3, #15
   82a06:	3077      	adds	r0, #119	; 0x77
   82a08:	0041      	lsls	r1, r0, #1
   82a0a:	e77d      	b.n	82908 <_free_r+0x6c>
   82a0c:	f240 5154 	movw	r1, #1364	; 0x554
   82a10:	428a      	cmp	r2, r1
   82a12:	d803      	bhi.n	82a1c <_free_r+0x180>
   82a14:	0c98      	lsrs	r0, r3, #18
   82a16:	307c      	adds	r0, #124	; 0x7c
   82a18:	0041      	lsls	r1, r0, #1
   82a1a:	e775      	b.n	82908 <_free_r+0x6c>
   82a1c:	21fc      	movs	r1, #252	; 0xfc
   82a1e:	207e      	movs	r0, #126	; 0x7e
   82a20:	e772      	b.n	82908 <_free_r+0x6c>
   82a22:	bf00      	nop
   82a24:	20070590 	.word	0x20070590
   82a28:	20070598 	.word	0x20070598
   82a2c:	20070998 	.word	0x20070998
   82a30:	20070ae4 	.word	0x20070ae4

00082a34 <__sfvwrite_r>:
   82a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a38:	6893      	ldr	r3, [r2, #8]
   82a3a:	b083      	sub	sp, #12
   82a3c:	4616      	mov	r6, r2
   82a3e:	4681      	mov	r9, r0
   82a40:	460c      	mov	r4, r1
   82a42:	b32b      	cbz	r3, 82a90 <__sfvwrite_r+0x5c>
   82a44:	898b      	ldrh	r3, [r1, #12]
   82a46:	0719      	lsls	r1, r3, #28
   82a48:	d526      	bpl.n	82a98 <__sfvwrite_r+0x64>
   82a4a:	6922      	ldr	r2, [r4, #16]
   82a4c:	b322      	cbz	r2, 82a98 <__sfvwrite_r+0x64>
   82a4e:	f003 0202 	and.w	r2, r3, #2
   82a52:	b292      	uxth	r2, r2
   82a54:	6835      	ldr	r5, [r6, #0]
   82a56:	2a00      	cmp	r2, #0
   82a58:	d02c      	beq.n	82ab4 <__sfvwrite_r+0x80>
   82a5a:	f04f 0a00 	mov.w	sl, #0
   82a5e:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82d48 <__sfvwrite_r+0x314>
   82a62:	46d0      	mov	r8, sl
   82a64:	45d8      	cmp	r8, fp
   82a66:	bf34      	ite	cc
   82a68:	4643      	movcc	r3, r8
   82a6a:	465b      	movcs	r3, fp
   82a6c:	4652      	mov	r2, sl
   82a6e:	4648      	mov	r0, r9
   82a70:	f1b8 0f00 	cmp.w	r8, #0
   82a74:	d04f      	beq.n	82b16 <__sfvwrite_r+0xe2>
   82a76:	69e1      	ldr	r1, [r4, #28]
   82a78:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82a7a:	47b8      	blx	r7
   82a7c:	2800      	cmp	r0, #0
   82a7e:	dd56      	ble.n	82b2e <__sfvwrite_r+0xfa>
   82a80:	68b3      	ldr	r3, [r6, #8]
   82a82:	4482      	add	sl, r0
   82a84:	1a1b      	subs	r3, r3, r0
   82a86:	ebc0 0808 	rsb	r8, r0, r8
   82a8a:	60b3      	str	r3, [r6, #8]
   82a8c:	2b00      	cmp	r3, #0
   82a8e:	d1e9      	bne.n	82a64 <__sfvwrite_r+0x30>
   82a90:	2000      	movs	r0, #0
   82a92:	b003      	add	sp, #12
   82a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a98:	4648      	mov	r0, r9
   82a9a:	4621      	mov	r1, r4
   82a9c:	f7ff fc88 	bl	823b0 <__swsetup_r>
   82aa0:	2800      	cmp	r0, #0
   82aa2:	f040 8148 	bne.w	82d36 <__sfvwrite_r+0x302>
   82aa6:	89a3      	ldrh	r3, [r4, #12]
   82aa8:	6835      	ldr	r5, [r6, #0]
   82aaa:	f003 0202 	and.w	r2, r3, #2
   82aae:	b292      	uxth	r2, r2
   82ab0:	2a00      	cmp	r2, #0
   82ab2:	d1d2      	bne.n	82a5a <__sfvwrite_r+0x26>
   82ab4:	f013 0a01 	ands.w	sl, r3, #1
   82ab8:	d142      	bne.n	82b40 <__sfvwrite_r+0x10c>
   82aba:	46d0      	mov	r8, sl
   82abc:	f1b8 0f00 	cmp.w	r8, #0
   82ac0:	d023      	beq.n	82b0a <__sfvwrite_r+0xd6>
   82ac2:	059a      	lsls	r2, r3, #22
   82ac4:	68a7      	ldr	r7, [r4, #8]
   82ac6:	d576      	bpl.n	82bb6 <__sfvwrite_r+0x182>
   82ac8:	45b8      	cmp	r8, r7
   82aca:	f0c0 80a4 	bcc.w	82c16 <__sfvwrite_r+0x1e2>
   82ace:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82ad2:	f040 80b2 	bne.w	82c3a <__sfvwrite_r+0x206>
   82ad6:	6820      	ldr	r0, [r4, #0]
   82ad8:	46bb      	mov	fp, r7
   82ada:	4651      	mov	r1, sl
   82adc:	465a      	mov	r2, fp
   82ade:	f000 fd37 	bl	83550 <memmove>
   82ae2:	68a2      	ldr	r2, [r4, #8]
   82ae4:	6821      	ldr	r1, [r4, #0]
   82ae6:	1bd2      	subs	r2, r2, r7
   82ae8:	eb01 030b 	add.w	r3, r1, fp
   82aec:	60a2      	str	r2, [r4, #8]
   82aee:	6023      	str	r3, [r4, #0]
   82af0:	4642      	mov	r2, r8
   82af2:	68b3      	ldr	r3, [r6, #8]
   82af4:	4492      	add	sl, r2
   82af6:	1a9b      	subs	r3, r3, r2
   82af8:	ebc2 0808 	rsb	r8, r2, r8
   82afc:	60b3      	str	r3, [r6, #8]
   82afe:	2b00      	cmp	r3, #0
   82b00:	d0c6      	beq.n	82a90 <__sfvwrite_r+0x5c>
   82b02:	89a3      	ldrh	r3, [r4, #12]
   82b04:	f1b8 0f00 	cmp.w	r8, #0
   82b08:	d1db      	bne.n	82ac2 <__sfvwrite_r+0x8e>
   82b0a:	f8d5 a000 	ldr.w	sl, [r5]
   82b0e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82b12:	3508      	adds	r5, #8
   82b14:	e7d2      	b.n	82abc <__sfvwrite_r+0x88>
   82b16:	f8d5 a000 	ldr.w	sl, [r5]
   82b1a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82b1e:	3508      	adds	r5, #8
   82b20:	e7a0      	b.n	82a64 <__sfvwrite_r+0x30>
   82b22:	4648      	mov	r0, r9
   82b24:	4621      	mov	r1, r4
   82b26:	f7ff fd59 	bl	825dc <_fflush_r>
   82b2a:	2800      	cmp	r0, #0
   82b2c:	d059      	beq.n	82be2 <__sfvwrite_r+0x1ae>
   82b2e:	89a3      	ldrh	r3, [r4, #12]
   82b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82b34:	f04f 30ff 	mov.w	r0, #4294967295
   82b38:	81a3      	strh	r3, [r4, #12]
   82b3a:	b003      	add	sp, #12
   82b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b40:	4692      	mov	sl, r2
   82b42:	9201      	str	r2, [sp, #4]
   82b44:	4693      	mov	fp, r2
   82b46:	4690      	mov	r8, r2
   82b48:	f1b8 0f00 	cmp.w	r8, #0
   82b4c:	d02b      	beq.n	82ba6 <__sfvwrite_r+0x172>
   82b4e:	9f01      	ldr	r7, [sp, #4]
   82b50:	2f00      	cmp	r7, #0
   82b52:	d064      	beq.n	82c1e <__sfvwrite_r+0x1ea>
   82b54:	6820      	ldr	r0, [r4, #0]
   82b56:	6921      	ldr	r1, [r4, #16]
   82b58:	45c2      	cmp	sl, r8
   82b5a:	bf34      	ite	cc
   82b5c:	4653      	movcc	r3, sl
   82b5e:	4643      	movcs	r3, r8
   82b60:	4288      	cmp	r0, r1
   82b62:	461f      	mov	r7, r3
   82b64:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82b68:	6962      	ldr	r2, [r4, #20]
   82b6a:	d903      	bls.n	82b74 <__sfvwrite_r+0x140>
   82b6c:	4494      	add	ip, r2
   82b6e:	4563      	cmp	r3, ip
   82b70:	f300 80ae 	bgt.w	82cd0 <__sfvwrite_r+0x29c>
   82b74:	4293      	cmp	r3, r2
   82b76:	db36      	blt.n	82be6 <__sfvwrite_r+0x1b2>
   82b78:	4613      	mov	r3, r2
   82b7a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82b7c:	4648      	mov	r0, r9
   82b7e:	69e1      	ldr	r1, [r4, #28]
   82b80:	465a      	mov	r2, fp
   82b82:	47b8      	blx	r7
   82b84:	1e07      	subs	r7, r0, #0
   82b86:	ddd2      	ble.n	82b2e <__sfvwrite_r+0xfa>
   82b88:	ebba 0a07 	subs.w	sl, sl, r7
   82b8c:	d03a      	beq.n	82c04 <__sfvwrite_r+0x1d0>
   82b8e:	68b3      	ldr	r3, [r6, #8]
   82b90:	44bb      	add	fp, r7
   82b92:	1bdb      	subs	r3, r3, r7
   82b94:	ebc7 0808 	rsb	r8, r7, r8
   82b98:	60b3      	str	r3, [r6, #8]
   82b9a:	2b00      	cmp	r3, #0
   82b9c:	f43f af78 	beq.w	82a90 <__sfvwrite_r+0x5c>
   82ba0:	f1b8 0f00 	cmp.w	r8, #0
   82ba4:	d1d3      	bne.n	82b4e <__sfvwrite_r+0x11a>
   82ba6:	2700      	movs	r7, #0
   82ba8:	f8d5 b000 	ldr.w	fp, [r5]
   82bac:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82bb0:	9701      	str	r7, [sp, #4]
   82bb2:	3508      	adds	r5, #8
   82bb4:	e7c8      	b.n	82b48 <__sfvwrite_r+0x114>
   82bb6:	6820      	ldr	r0, [r4, #0]
   82bb8:	6923      	ldr	r3, [r4, #16]
   82bba:	4298      	cmp	r0, r3
   82bbc:	d802      	bhi.n	82bc4 <__sfvwrite_r+0x190>
   82bbe:	6963      	ldr	r3, [r4, #20]
   82bc0:	4598      	cmp	r8, r3
   82bc2:	d272      	bcs.n	82caa <__sfvwrite_r+0x276>
   82bc4:	45b8      	cmp	r8, r7
   82bc6:	bf38      	it	cc
   82bc8:	4647      	movcc	r7, r8
   82bca:	463a      	mov	r2, r7
   82bcc:	4651      	mov	r1, sl
   82bce:	f000 fcbf 	bl	83550 <memmove>
   82bd2:	68a3      	ldr	r3, [r4, #8]
   82bd4:	6822      	ldr	r2, [r4, #0]
   82bd6:	1bdb      	subs	r3, r3, r7
   82bd8:	443a      	add	r2, r7
   82bda:	60a3      	str	r3, [r4, #8]
   82bdc:	6022      	str	r2, [r4, #0]
   82bde:	2b00      	cmp	r3, #0
   82be0:	d09f      	beq.n	82b22 <__sfvwrite_r+0xee>
   82be2:	463a      	mov	r2, r7
   82be4:	e785      	b.n	82af2 <__sfvwrite_r+0xbe>
   82be6:	461a      	mov	r2, r3
   82be8:	4659      	mov	r1, fp
   82bea:	9300      	str	r3, [sp, #0]
   82bec:	f000 fcb0 	bl	83550 <memmove>
   82bf0:	9b00      	ldr	r3, [sp, #0]
   82bf2:	68a1      	ldr	r1, [r4, #8]
   82bf4:	6822      	ldr	r2, [r4, #0]
   82bf6:	1ac9      	subs	r1, r1, r3
   82bf8:	ebba 0a07 	subs.w	sl, sl, r7
   82bfc:	4413      	add	r3, r2
   82bfe:	60a1      	str	r1, [r4, #8]
   82c00:	6023      	str	r3, [r4, #0]
   82c02:	d1c4      	bne.n	82b8e <__sfvwrite_r+0x15a>
   82c04:	4648      	mov	r0, r9
   82c06:	4621      	mov	r1, r4
   82c08:	f7ff fce8 	bl	825dc <_fflush_r>
   82c0c:	2800      	cmp	r0, #0
   82c0e:	d18e      	bne.n	82b2e <__sfvwrite_r+0xfa>
   82c10:	f8cd a004 	str.w	sl, [sp, #4]
   82c14:	e7bb      	b.n	82b8e <__sfvwrite_r+0x15a>
   82c16:	6820      	ldr	r0, [r4, #0]
   82c18:	4647      	mov	r7, r8
   82c1a:	46c3      	mov	fp, r8
   82c1c:	e75d      	b.n	82ada <__sfvwrite_r+0xa6>
   82c1e:	4658      	mov	r0, fp
   82c20:	210a      	movs	r1, #10
   82c22:	4642      	mov	r2, r8
   82c24:	f000 fbd4 	bl	833d0 <memchr>
   82c28:	2800      	cmp	r0, #0
   82c2a:	d07f      	beq.n	82d2c <__sfvwrite_r+0x2f8>
   82c2c:	f100 0a01 	add.w	sl, r0, #1
   82c30:	2701      	movs	r7, #1
   82c32:	ebcb 0a0a 	rsb	sl, fp, sl
   82c36:	9701      	str	r7, [sp, #4]
   82c38:	e78c      	b.n	82b54 <__sfvwrite_r+0x120>
   82c3a:	6822      	ldr	r2, [r4, #0]
   82c3c:	6921      	ldr	r1, [r4, #16]
   82c3e:	6967      	ldr	r7, [r4, #20]
   82c40:	ebc1 0c02 	rsb	ip, r1, r2
   82c44:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82c48:	f10c 0201 	add.w	r2, ip, #1
   82c4c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82c50:	4442      	add	r2, r8
   82c52:	107f      	asrs	r7, r7, #1
   82c54:	4297      	cmp	r7, r2
   82c56:	bf34      	ite	cc
   82c58:	4617      	movcc	r7, r2
   82c5a:	463a      	movcs	r2, r7
   82c5c:	055b      	lsls	r3, r3, #21
   82c5e:	d54f      	bpl.n	82d00 <__sfvwrite_r+0x2cc>
   82c60:	4611      	mov	r1, r2
   82c62:	4648      	mov	r0, r9
   82c64:	f8cd c000 	str.w	ip, [sp]
   82c68:	f000 f916 	bl	82e98 <_malloc_r>
   82c6c:	f8dd c000 	ldr.w	ip, [sp]
   82c70:	4683      	mov	fp, r0
   82c72:	2800      	cmp	r0, #0
   82c74:	d062      	beq.n	82d3c <__sfvwrite_r+0x308>
   82c76:	4662      	mov	r2, ip
   82c78:	6921      	ldr	r1, [r4, #16]
   82c7a:	f8cd c000 	str.w	ip, [sp]
   82c7e:	f000 fbf1 	bl	83464 <memcpy>
   82c82:	89a2      	ldrh	r2, [r4, #12]
   82c84:	f8dd c000 	ldr.w	ip, [sp]
   82c88:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82c8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82c90:	81a2      	strh	r2, [r4, #12]
   82c92:	eb0b 000c 	add.w	r0, fp, ip
   82c96:	ebcc 0207 	rsb	r2, ip, r7
   82c9a:	f8c4 b010 	str.w	fp, [r4, #16]
   82c9e:	6167      	str	r7, [r4, #20]
   82ca0:	6020      	str	r0, [r4, #0]
   82ca2:	60a2      	str	r2, [r4, #8]
   82ca4:	4647      	mov	r7, r8
   82ca6:	46c3      	mov	fp, r8
   82ca8:	e717      	b.n	82ada <__sfvwrite_r+0xa6>
   82caa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82cae:	4590      	cmp	r8, r2
   82cb0:	bf38      	it	cc
   82cb2:	4642      	movcc	r2, r8
   82cb4:	fb92 f2f3 	sdiv	r2, r2, r3
   82cb8:	fb02 f303 	mul.w	r3, r2, r3
   82cbc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82cbe:	4648      	mov	r0, r9
   82cc0:	69e1      	ldr	r1, [r4, #28]
   82cc2:	4652      	mov	r2, sl
   82cc4:	47b8      	blx	r7
   82cc6:	2800      	cmp	r0, #0
   82cc8:	f77f af31 	ble.w	82b2e <__sfvwrite_r+0xfa>
   82ccc:	4602      	mov	r2, r0
   82cce:	e710      	b.n	82af2 <__sfvwrite_r+0xbe>
   82cd0:	4662      	mov	r2, ip
   82cd2:	4659      	mov	r1, fp
   82cd4:	f8cd c000 	str.w	ip, [sp]
   82cd8:	f000 fc3a 	bl	83550 <memmove>
   82cdc:	f8dd c000 	ldr.w	ip, [sp]
   82ce0:	6823      	ldr	r3, [r4, #0]
   82ce2:	4648      	mov	r0, r9
   82ce4:	4463      	add	r3, ip
   82ce6:	6023      	str	r3, [r4, #0]
   82ce8:	4621      	mov	r1, r4
   82cea:	f8cd c000 	str.w	ip, [sp]
   82cee:	f7ff fc75 	bl	825dc <_fflush_r>
   82cf2:	f8dd c000 	ldr.w	ip, [sp]
   82cf6:	2800      	cmp	r0, #0
   82cf8:	f47f af19 	bne.w	82b2e <__sfvwrite_r+0xfa>
   82cfc:	4667      	mov	r7, ip
   82cfe:	e743      	b.n	82b88 <__sfvwrite_r+0x154>
   82d00:	4648      	mov	r0, r9
   82d02:	f8cd c000 	str.w	ip, [sp]
   82d06:	f000 fc8d 	bl	83624 <_realloc_r>
   82d0a:	f8dd c000 	ldr.w	ip, [sp]
   82d0e:	4683      	mov	fp, r0
   82d10:	2800      	cmp	r0, #0
   82d12:	d1be      	bne.n	82c92 <__sfvwrite_r+0x25e>
   82d14:	4648      	mov	r0, r9
   82d16:	6921      	ldr	r1, [r4, #16]
   82d18:	f7ff fdc0 	bl	8289c <_free_r>
   82d1c:	89a3      	ldrh	r3, [r4, #12]
   82d1e:	220c      	movs	r2, #12
   82d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82d24:	b29b      	uxth	r3, r3
   82d26:	f8c9 2000 	str.w	r2, [r9]
   82d2a:	e701      	b.n	82b30 <__sfvwrite_r+0xfc>
   82d2c:	2701      	movs	r7, #1
   82d2e:	f108 0a01 	add.w	sl, r8, #1
   82d32:	9701      	str	r7, [sp, #4]
   82d34:	e70e      	b.n	82b54 <__sfvwrite_r+0x120>
   82d36:	f04f 30ff 	mov.w	r0, #4294967295
   82d3a:	e6aa      	b.n	82a92 <__sfvwrite_r+0x5e>
   82d3c:	230c      	movs	r3, #12
   82d3e:	f8c9 3000 	str.w	r3, [r9]
   82d42:	89a3      	ldrh	r3, [r4, #12]
   82d44:	e6f4      	b.n	82b30 <__sfvwrite_r+0xfc>
   82d46:	bf00      	nop
   82d48:	7ffffc00 	.word	0x7ffffc00

00082d4c <_fwalk>:
   82d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82d50:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82d54:	4688      	mov	r8, r1
   82d56:	d019      	beq.n	82d8c <_fwalk+0x40>
   82d58:	2600      	movs	r6, #0
   82d5a:	687d      	ldr	r5, [r7, #4]
   82d5c:	68bc      	ldr	r4, [r7, #8]
   82d5e:	3d01      	subs	r5, #1
   82d60:	d40e      	bmi.n	82d80 <_fwalk+0x34>
   82d62:	89a3      	ldrh	r3, [r4, #12]
   82d64:	3d01      	subs	r5, #1
   82d66:	2b01      	cmp	r3, #1
   82d68:	d906      	bls.n	82d78 <_fwalk+0x2c>
   82d6a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82d6e:	4620      	mov	r0, r4
   82d70:	3301      	adds	r3, #1
   82d72:	d001      	beq.n	82d78 <_fwalk+0x2c>
   82d74:	47c0      	blx	r8
   82d76:	4306      	orrs	r6, r0
   82d78:	1c6b      	adds	r3, r5, #1
   82d7a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82d7e:	d1f0      	bne.n	82d62 <_fwalk+0x16>
   82d80:	683f      	ldr	r7, [r7, #0]
   82d82:	2f00      	cmp	r7, #0
   82d84:	d1e9      	bne.n	82d5a <_fwalk+0xe>
   82d86:	4630      	mov	r0, r6
   82d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d8c:	463e      	mov	r6, r7
   82d8e:	4630      	mov	r0, r6
   82d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082d94 <__locale_charset>:
   82d94:	4800      	ldr	r0, [pc, #0]	; (82d98 <__locale_charset+0x4>)
   82d96:	4770      	bx	lr
   82d98:	2007056c 	.word	0x2007056c

00082d9c <__locale_mb_cur_max>:
   82d9c:	4b01      	ldr	r3, [pc, #4]	; (82da4 <__locale_mb_cur_max+0x8>)
   82d9e:	6818      	ldr	r0, [r3, #0]
   82da0:	4770      	bx	lr
   82da2:	bf00      	nop
   82da4:	2007058c 	.word	0x2007058c

00082da8 <__smakebuf_r>:
   82da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   82daa:	898b      	ldrh	r3, [r1, #12]
   82dac:	b091      	sub	sp, #68	; 0x44
   82dae:	b29a      	uxth	r2, r3
   82db0:	0796      	lsls	r6, r2, #30
   82db2:	460c      	mov	r4, r1
   82db4:	4605      	mov	r5, r0
   82db6:	d437      	bmi.n	82e28 <__smakebuf_r+0x80>
   82db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82dbc:	2900      	cmp	r1, #0
   82dbe:	db17      	blt.n	82df0 <__smakebuf_r+0x48>
   82dc0:	aa01      	add	r2, sp, #4
   82dc2:	f000 ffaf 	bl	83d24 <_fstat_r>
   82dc6:	2800      	cmp	r0, #0
   82dc8:	db10      	blt.n	82dec <__smakebuf_r+0x44>
   82dca:	9b02      	ldr	r3, [sp, #8]
   82dcc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82dd0:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82dd4:	424f      	negs	r7, r1
   82dd6:	414f      	adcs	r7, r1
   82dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82ddc:	d02c      	beq.n	82e38 <__smakebuf_r+0x90>
   82dde:	89a3      	ldrh	r3, [r4, #12]
   82de0:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82de8:	81a3      	strh	r3, [r4, #12]
   82dea:	e00b      	b.n	82e04 <__smakebuf_r+0x5c>
   82dec:	89a3      	ldrh	r3, [r4, #12]
   82dee:	b29a      	uxth	r2, r3
   82df0:	f012 0f80 	tst.w	r2, #128	; 0x80
   82df4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82df8:	81a3      	strh	r3, [r4, #12]
   82dfa:	bf14      	ite	ne
   82dfc:	2640      	movne	r6, #64	; 0x40
   82dfe:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82e02:	2700      	movs	r7, #0
   82e04:	4628      	mov	r0, r5
   82e06:	4631      	mov	r1, r6
   82e08:	f000 f846 	bl	82e98 <_malloc_r>
   82e0c:	89a3      	ldrh	r3, [r4, #12]
   82e0e:	2800      	cmp	r0, #0
   82e10:	d029      	beq.n	82e66 <__smakebuf_r+0xbe>
   82e12:	4a1b      	ldr	r2, [pc, #108]	; (82e80 <__smakebuf_r+0xd8>)
   82e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82e18:	63ea      	str	r2, [r5, #60]	; 0x3c
   82e1a:	81a3      	strh	r3, [r4, #12]
   82e1c:	6020      	str	r0, [r4, #0]
   82e1e:	6120      	str	r0, [r4, #16]
   82e20:	6166      	str	r6, [r4, #20]
   82e22:	b9a7      	cbnz	r7, 82e4e <__smakebuf_r+0xa6>
   82e24:	b011      	add	sp, #68	; 0x44
   82e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82e28:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82e2c:	2201      	movs	r2, #1
   82e2e:	600b      	str	r3, [r1, #0]
   82e30:	610b      	str	r3, [r1, #16]
   82e32:	614a      	str	r2, [r1, #20]
   82e34:	b011      	add	sp, #68	; 0x44
   82e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82e38:	4a12      	ldr	r2, [pc, #72]	; (82e84 <__smakebuf_r+0xdc>)
   82e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82e3c:	4293      	cmp	r3, r2
   82e3e:	d1ce      	bne.n	82dde <__smakebuf_r+0x36>
   82e40:	89a3      	ldrh	r3, [r4, #12]
   82e42:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82e46:	4333      	orrs	r3, r6
   82e48:	81a3      	strh	r3, [r4, #12]
   82e4a:	64e6      	str	r6, [r4, #76]	; 0x4c
   82e4c:	e7da      	b.n	82e04 <__smakebuf_r+0x5c>
   82e4e:	4628      	mov	r0, r5
   82e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82e54:	f000 ff7a 	bl	83d4c <_isatty_r>
   82e58:	2800      	cmp	r0, #0
   82e5a:	d0e3      	beq.n	82e24 <__smakebuf_r+0x7c>
   82e5c:	89a3      	ldrh	r3, [r4, #12]
   82e5e:	f043 0301 	orr.w	r3, r3, #1
   82e62:	81a3      	strh	r3, [r4, #12]
   82e64:	e7de      	b.n	82e24 <__smakebuf_r+0x7c>
   82e66:	059a      	lsls	r2, r3, #22
   82e68:	d4dc      	bmi.n	82e24 <__smakebuf_r+0x7c>
   82e6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82e6e:	f043 0302 	orr.w	r3, r3, #2
   82e72:	2101      	movs	r1, #1
   82e74:	81a3      	strh	r3, [r4, #12]
   82e76:	6022      	str	r2, [r4, #0]
   82e78:	6122      	str	r2, [r4, #16]
   82e7a:	6161      	str	r1, [r4, #20]
   82e7c:	e7d2      	b.n	82e24 <__smakebuf_r+0x7c>
   82e7e:	bf00      	nop
   82e80:	00082609 	.word	0x00082609
   82e84:	00083a65 	.word	0x00083a65

00082e88 <malloc>:
   82e88:	4b02      	ldr	r3, [pc, #8]	; (82e94 <malloc+0xc>)
   82e8a:	4601      	mov	r1, r0
   82e8c:	6818      	ldr	r0, [r3, #0]
   82e8e:	f000 b803 	b.w	82e98 <_malloc_r>
   82e92:	bf00      	nop
   82e94:	20070568 	.word	0x20070568

00082e98 <_malloc_r>:
   82e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82e9c:	f101 050b 	add.w	r5, r1, #11
   82ea0:	2d16      	cmp	r5, #22
   82ea2:	b083      	sub	sp, #12
   82ea4:	4606      	mov	r6, r0
   82ea6:	d927      	bls.n	82ef8 <_malloc_r+0x60>
   82ea8:	f035 0507 	bics.w	r5, r5, #7
   82eac:	d427      	bmi.n	82efe <_malloc_r+0x66>
   82eae:	42a9      	cmp	r1, r5
   82eb0:	d825      	bhi.n	82efe <_malloc_r+0x66>
   82eb2:	4630      	mov	r0, r6
   82eb4:	f000 fbb2 	bl	8361c <__malloc_lock>
   82eb8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82ebc:	d226      	bcs.n	82f0c <_malloc_r+0x74>
   82ebe:	4fc1      	ldr	r7, [pc, #772]	; (831c4 <_malloc_r+0x32c>)
   82ec0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82ec4:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82ec8:	68dc      	ldr	r4, [r3, #12]
   82eca:	429c      	cmp	r4, r3
   82ecc:	f000 81d2 	beq.w	83274 <_malloc_r+0x3dc>
   82ed0:	6863      	ldr	r3, [r4, #4]
   82ed2:	68e2      	ldr	r2, [r4, #12]
   82ed4:	f023 0303 	bic.w	r3, r3, #3
   82ed8:	4423      	add	r3, r4
   82eda:	6858      	ldr	r0, [r3, #4]
   82edc:	68a1      	ldr	r1, [r4, #8]
   82ede:	f040 0501 	orr.w	r5, r0, #1
   82ee2:	60ca      	str	r2, [r1, #12]
   82ee4:	4630      	mov	r0, r6
   82ee6:	6091      	str	r1, [r2, #8]
   82ee8:	605d      	str	r5, [r3, #4]
   82eea:	f000 fb99 	bl	83620 <__malloc_unlock>
   82eee:	3408      	adds	r4, #8
   82ef0:	4620      	mov	r0, r4
   82ef2:	b003      	add	sp, #12
   82ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ef8:	2510      	movs	r5, #16
   82efa:	42a9      	cmp	r1, r5
   82efc:	d9d9      	bls.n	82eb2 <_malloc_r+0x1a>
   82efe:	2400      	movs	r4, #0
   82f00:	230c      	movs	r3, #12
   82f02:	4620      	mov	r0, r4
   82f04:	6033      	str	r3, [r6, #0]
   82f06:	b003      	add	sp, #12
   82f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f0c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82f10:	f000 8089 	beq.w	83026 <_malloc_r+0x18e>
   82f14:	f1bc 0f04 	cmp.w	ip, #4
   82f18:	f200 8160 	bhi.w	831dc <_malloc_r+0x344>
   82f1c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82f20:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82f24:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82f28:	4fa6      	ldr	r7, [pc, #664]	; (831c4 <_malloc_r+0x32c>)
   82f2a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82f2e:	68cc      	ldr	r4, [r1, #12]
   82f30:	42a1      	cmp	r1, r4
   82f32:	d105      	bne.n	82f40 <_malloc_r+0xa8>
   82f34:	e00c      	b.n	82f50 <_malloc_r+0xb8>
   82f36:	2b00      	cmp	r3, #0
   82f38:	da79      	bge.n	8302e <_malloc_r+0x196>
   82f3a:	68e4      	ldr	r4, [r4, #12]
   82f3c:	42a1      	cmp	r1, r4
   82f3e:	d007      	beq.n	82f50 <_malloc_r+0xb8>
   82f40:	6862      	ldr	r2, [r4, #4]
   82f42:	f022 0203 	bic.w	r2, r2, #3
   82f46:	1b53      	subs	r3, r2, r5
   82f48:	2b0f      	cmp	r3, #15
   82f4a:	ddf4      	ble.n	82f36 <_malloc_r+0x9e>
   82f4c:	f10c 3cff 	add.w	ip, ip, #4294967295
   82f50:	f10c 0c01 	add.w	ip, ip, #1
   82f54:	4b9b      	ldr	r3, [pc, #620]	; (831c4 <_malloc_r+0x32c>)
   82f56:	693c      	ldr	r4, [r7, #16]
   82f58:	f103 0e08 	add.w	lr, r3, #8
   82f5c:	4574      	cmp	r4, lr
   82f5e:	f000 817e 	beq.w	8325e <_malloc_r+0x3c6>
   82f62:	6861      	ldr	r1, [r4, #4]
   82f64:	f021 0103 	bic.w	r1, r1, #3
   82f68:	1b4a      	subs	r2, r1, r5
   82f6a:	2a0f      	cmp	r2, #15
   82f6c:	f300 8164 	bgt.w	83238 <_malloc_r+0x3a0>
   82f70:	2a00      	cmp	r2, #0
   82f72:	f8c3 e014 	str.w	lr, [r3, #20]
   82f76:	f8c3 e010 	str.w	lr, [r3, #16]
   82f7a:	da69      	bge.n	83050 <_malloc_r+0x1b8>
   82f7c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82f80:	f080 813a 	bcs.w	831f8 <_malloc_r+0x360>
   82f84:	08c9      	lsrs	r1, r1, #3
   82f86:	108a      	asrs	r2, r1, #2
   82f88:	f04f 0801 	mov.w	r8, #1
   82f8c:	fa08 f802 	lsl.w	r8, r8, r2
   82f90:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82f94:	685a      	ldr	r2, [r3, #4]
   82f96:	6888      	ldr	r0, [r1, #8]
   82f98:	ea48 0202 	orr.w	r2, r8, r2
   82f9c:	60a0      	str	r0, [r4, #8]
   82f9e:	60e1      	str	r1, [r4, #12]
   82fa0:	605a      	str	r2, [r3, #4]
   82fa2:	608c      	str	r4, [r1, #8]
   82fa4:	60c4      	str	r4, [r0, #12]
   82fa6:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82faa:	2001      	movs	r0, #1
   82fac:	4098      	lsls	r0, r3
   82fae:	4290      	cmp	r0, r2
   82fb0:	d85b      	bhi.n	8306a <_malloc_r+0x1d2>
   82fb2:	4202      	tst	r2, r0
   82fb4:	d106      	bne.n	82fc4 <_malloc_r+0x12c>
   82fb6:	f02c 0c03 	bic.w	ip, ip, #3
   82fba:	0040      	lsls	r0, r0, #1
   82fbc:	4202      	tst	r2, r0
   82fbe:	f10c 0c04 	add.w	ip, ip, #4
   82fc2:	d0fa      	beq.n	82fba <_malloc_r+0x122>
   82fc4:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82fc8:	4644      	mov	r4, r8
   82fca:	46e1      	mov	r9, ip
   82fcc:	68e3      	ldr	r3, [r4, #12]
   82fce:	429c      	cmp	r4, r3
   82fd0:	d107      	bne.n	82fe2 <_malloc_r+0x14a>
   82fd2:	e146      	b.n	83262 <_malloc_r+0x3ca>
   82fd4:	2a00      	cmp	r2, #0
   82fd6:	f280 8157 	bge.w	83288 <_malloc_r+0x3f0>
   82fda:	68db      	ldr	r3, [r3, #12]
   82fdc:	429c      	cmp	r4, r3
   82fde:	f000 8140 	beq.w	83262 <_malloc_r+0x3ca>
   82fe2:	6859      	ldr	r1, [r3, #4]
   82fe4:	f021 0103 	bic.w	r1, r1, #3
   82fe8:	1b4a      	subs	r2, r1, r5
   82fea:	2a0f      	cmp	r2, #15
   82fec:	ddf2      	ble.n	82fd4 <_malloc_r+0x13c>
   82fee:	461c      	mov	r4, r3
   82ff0:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82ff4:	68d9      	ldr	r1, [r3, #12]
   82ff6:	f045 0901 	orr.w	r9, r5, #1
   82ffa:	f042 0801 	orr.w	r8, r2, #1
   82ffe:	441d      	add	r5, r3
   83000:	f8c3 9004 	str.w	r9, [r3, #4]
   83004:	4630      	mov	r0, r6
   83006:	f8cc 100c 	str.w	r1, [ip, #12]
   8300a:	f8c1 c008 	str.w	ip, [r1, #8]
   8300e:	617d      	str	r5, [r7, #20]
   83010:	613d      	str	r5, [r7, #16]
   83012:	f8c5 e00c 	str.w	lr, [r5, #12]
   83016:	f8c5 e008 	str.w	lr, [r5, #8]
   8301a:	f8c5 8004 	str.w	r8, [r5, #4]
   8301e:	50aa      	str	r2, [r5, r2]
   83020:	f000 fafe 	bl	83620 <__malloc_unlock>
   83024:	e764      	b.n	82ef0 <_malloc_r+0x58>
   83026:	217e      	movs	r1, #126	; 0x7e
   83028:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   8302c:	e77c      	b.n	82f28 <_malloc_r+0x90>
   8302e:	4422      	add	r2, r4
   83030:	6850      	ldr	r0, [r2, #4]
   83032:	68e3      	ldr	r3, [r4, #12]
   83034:	68a1      	ldr	r1, [r4, #8]
   83036:	f040 0501 	orr.w	r5, r0, #1
   8303a:	60cb      	str	r3, [r1, #12]
   8303c:	4630      	mov	r0, r6
   8303e:	6099      	str	r1, [r3, #8]
   83040:	6055      	str	r5, [r2, #4]
   83042:	f000 faed 	bl	83620 <__malloc_unlock>
   83046:	3408      	adds	r4, #8
   83048:	4620      	mov	r0, r4
   8304a:	b003      	add	sp, #12
   8304c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83050:	4421      	add	r1, r4
   83052:	684b      	ldr	r3, [r1, #4]
   83054:	4630      	mov	r0, r6
   83056:	f043 0301 	orr.w	r3, r3, #1
   8305a:	604b      	str	r3, [r1, #4]
   8305c:	f000 fae0 	bl	83620 <__malloc_unlock>
   83060:	3408      	adds	r4, #8
   83062:	4620      	mov	r0, r4
   83064:	b003      	add	sp, #12
   83066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8306a:	68bc      	ldr	r4, [r7, #8]
   8306c:	6863      	ldr	r3, [r4, #4]
   8306e:	f023 0903 	bic.w	r9, r3, #3
   83072:	45a9      	cmp	r9, r5
   83074:	d304      	bcc.n	83080 <_malloc_r+0x1e8>
   83076:	ebc5 0309 	rsb	r3, r5, r9
   8307a:	2b0f      	cmp	r3, #15
   8307c:	f300 8091 	bgt.w	831a2 <_malloc_r+0x30a>
   83080:	4b51      	ldr	r3, [pc, #324]	; (831c8 <_malloc_r+0x330>)
   83082:	4a52      	ldr	r2, [pc, #328]	; (831cc <_malloc_r+0x334>)
   83084:	6819      	ldr	r1, [r3, #0]
   83086:	6813      	ldr	r3, [r2, #0]
   83088:	eb05 0a01 	add.w	sl, r5, r1
   8308c:	3301      	adds	r3, #1
   8308e:	eb04 0b09 	add.w	fp, r4, r9
   83092:	f000 8161 	beq.w	83358 <_malloc_r+0x4c0>
   83096:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8309a:	f10a 0a0f 	add.w	sl, sl, #15
   8309e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   830a2:	f02a 0a0f 	bic.w	sl, sl, #15
   830a6:	4630      	mov	r0, r6
   830a8:	4651      	mov	r1, sl
   830aa:	9201      	str	r2, [sp, #4]
   830ac:	f000 fc9a 	bl	839e4 <_sbrk_r>
   830b0:	f1b0 3fff 	cmp.w	r0, #4294967295
   830b4:	4680      	mov	r8, r0
   830b6:	9a01      	ldr	r2, [sp, #4]
   830b8:	f000 8101 	beq.w	832be <_malloc_r+0x426>
   830bc:	4583      	cmp	fp, r0
   830be:	f200 80fb 	bhi.w	832b8 <_malloc_r+0x420>
   830c2:	f8df c114 	ldr.w	ip, [pc, #276]	; 831d8 <_malloc_r+0x340>
   830c6:	45c3      	cmp	fp, r8
   830c8:	f8dc 3000 	ldr.w	r3, [ip]
   830cc:	4453      	add	r3, sl
   830ce:	f8cc 3000 	str.w	r3, [ip]
   830d2:	f000 814a 	beq.w	8336a <_malloc_r+0x4d2>
   830d6:	6812      	ldr	r2, [r2, #0]
   830d8:	493c      	ldr	r1, [pc, #240]	; (831cc <_malloc_r+0x334>)
   830da:	3201      	adds	r2, #1
   830dc:	bf1b      	ittet	ne
   830de:	ebcb 0b08 	rsbne	fp, fp, r8
   830e2:	445b      	addne	r3, fp
   830e4:	f8c1 8000 	streq.w	r8, [r1]
   830e8:	f8cc 3000 	strne.w	r3, [ip]
   830ec:	f018 0307 	ands.w	r3, r8, #7
   830f0:	f000 8114 	beq.w	8331c <_malloc_r+0x484>
   830f4:	f1c3 0208 	rsb	r2, r3, #8
   830f8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   830fc:	4490      	add	r8, r2
   830fe:	3308      	adds	r3, #8
   83100:	44c2      	add	sl, r8
   83102:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   83106:	ebca 0a03 	rsb	sl, sl, r3
   8310a:	4651      	mov	r1, sl
   8310c:	4630      	mov	r0, r6
   8310e:	f8cd c004 	str.w	ip, [sp, #4]
   83112:	f000 fc67 	bl	839e4 <_sbrk_r>
   83116:	1c43      	adds	r3, r0, #1
   83118:	f8dd c004 	ldr.w	ip, [sp, #4]
   8311c:	f000 8135 	beq.w	8338a <_malloc_r+0x4f2>
   83120:	ebc8 0200 	rsb	r2, r8, r0
   83124:	4452      	add	r2, sl
   83126:	f042 0201 	orr.w	r2, r2, #1
   8312a:	f8dc 3000 	ldr.w	r3, [ip]
   8312e:	42bc      	cmp	r4, r7
   83130:	4453      	add	r3, sl
   83132:	f8c7 8008 	str.w	r8, [r7, #8]
   83136:	f8cc 3000 	str.w	r3, [ip]
   8313a:	f8c8 2004 	str.w	r2, [r8, #4]
   8313e:	f8df a098 	ldr.w	sl, [pc, #152]	; 831d8 <_malloc_r+0x340>
   83142:	d015      	beq.n	83170 <_malloc_r+0x2d8>
   83144:	f1b9 0f0f 	cmp.w	r9, #15
   83148:	f240 80eb 	bls.w	83322 <_malloc_r+0x48a>
   8314c:	6861      	ldr	r1, [r4, #4]
   8314e:	f1a9 020c 	sub.w	r2, r9, #12
   83152:	f022 0207 	bic.w	r2, r2, #7
   83156:	f001 0101 	and.w	r1, r1, #1
   8315a:	ea42 0e01 	orr.w	lr, r2, r1
   8315e:	2005      	movs	r0, #5
   83160:	18a1      	adds	r1, r4, r2
   83162:	2a0f      	cmp	r2, #15
   83164:	f8c4 e004 	str.w	lr, [r4, #4]
   83168:	6048      	str	r0, [r1, #4]
   8316a:	6088      	str	r0, [r1, #8]
   8316c:	f200 8111 	bhi.w	83392 <_malloc_r+0x4fa>
   83170:	4a17      	ldr	r2, [pc, #92]	; (831d0 <_malloc_r+0x338>)
   83172:	68bc      	ldr	r4, [r7, #8]
   83174:	6811      	ldr	r1, [r2, #0]
   83176:	428b      	cmp	r3, r1
   83178:	bf88      	it	hi
   8317a:	6013      	strhi	r3, [r2, #0]
   8317c:	4a15      	ldr	r2, [pc, #84]	; (831d4 <_malloc_r+0x33c>)
   8317e:	6811      	ldr	r1, [r2, #0]
   83180:	428b      	cmp	r3, r1
   83182:	bf88      	it	hi
   83184:	6013      	strhi	r3, [r2, #0]
   83186:	6862      	ldr	r2, [r4, #4]
   83188:	f022 0203 	bic.w	r2, r2, #3
   8318c:	4295      	cmp	r5, r2
   8318e:	ebc5 0302 	rsb	r3, r5, r2
   83192:	d801      	bhi.n	83198 <_malloc_r+0x300>
   83194:	2b0f      	cmp	r3, #15
   83196:	dc04      	bgt.n	831a2 <_malloc_r+0x30a>
   83198:	4630      	mov	r0, r6
   8319a:	f000 fa41 	bl	83620 <__malloc_unlock>
   8319e:	2400      	movs	r4, #0
   831a0:	e6a6      	b.n	82ef0 <_malloc_r+0x58>
   831a2:	f045 0201 	orr.w	r2, r5, #1
   831a6:	f043 0301 	orr.w	r3, r3, #1
   831aa:	4425      	add	r5, r4
   831ac:	6062      	str	r2, [r4, #4]
   831ae:	4630      	mov	r0, r6
   831b0:	60bd      	str	r5, [r7, #8]
   831b2:	606b      	str	r3, [r5, #4]
   831b4:	f000 fa34 	bl	83620 <__malloc_unlock>
   831b8:	3408      	adds	r4, #8
   831ba:	4620      	mov	r0, r4
   831bc:	b003      	add	sp, #12
   831be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   831c2:	bf00      	nop
   831c4:	20070590 	.word	0x20070590
   831c8:	20070ae4 	.word	0x20070ae4
   831cc:	2007099c 	.word	0x2007099c
   831d0:	20070ae0 	.word	0x20070ae0
   831d4:	20070adc 	.word	0x20070adc
   831d8:	20070ae8 	.word	0x20070ae8
   831dc:	f1bc 0f14 	cmp.w	ip, #20
   831e0:	d961      	bls.n	832a6 <_malloc_r+0x40e>
   831e2:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   831e6:	f200 808f 	bhi.w	83308 <_malloc_r+0x470>
   831ea:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   831ee:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   831f2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   831f6:	e697      	b.n	82f28 <_malloc_r+0x90>
   831f8:	0a4b      	lsrs	r3, r1, #9
   831fa:	2b04      	cmp	r3, #4
   831fc:	d958      	bls.n	832b0 <_malloc_r+0x418>
   831fe:	2b14      	cmp	r3, #20
   83200:	f200 80ad 	bhi.w	8335e <_malloc_r+0x4c6>
   83204:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   83208:	0050      	lsls	r0, r2, #1
   8320a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8320e:	6883      	ldr	r3, [r0, #8]
   83210:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 833cc <_malloc_r+0x534>
   83214:	4283      	cmp	r3, r0
   83216:	f000 808a 	beq.w	8332e <_malloc_r+0x496>
   8321a:	685a      	ldr	r2, [r3, #4]
   8321c:	f022 0203 	bic.w	r2, r2, #3
   83220:	4291      	cmp	r1, r2
   83222:	d202      	bcs.n	8322a <_malloc_r+0x392>
   83224:	689b      	ldr	r3, [r3, #8]
   83226:	4298      	cmp	r0, r3
   83228:	d1f7      	bne.n	8321a <_malloc_r+0x382>
   8322a:	68d9      	ldr	r1, [r3, #12]
   8322c:	687a      	ldr	r2, [r7, #4]
   8322e:	60e1      	str	r1, [r4, #12]
   83230:	60a3      	str	r3, [r4, #8]
   83232:	608c      	str	r4, [r1, #8]
   83234:	60dc      	str	r4, [r3, #12]
   83236:	e6b6      	b.n	82fa6 <_malloc_r+0x10e>
   83238:	f045 0701 	orr.w	r7, r5, #1
   8323c:	f042 0101 	orr.w	r1, r2, #1
   83240:	4425      	add	r5, r4
   83242:	6067      	str	r7, [r4, #4]
   83244:	4630      	mov	r0, r6
   83246:	615d      	str	r5, [r3, #20]
   83248:	611d      	str	r5, [r3, #16]
   8324a:	f8c5 e00c 	str.w	lr, [r5, #12]
   8324e:	f8c5 e008 	str.w	lr, [r5, #8]
   83252:	6069      	str	r1, [r5, #4]
   83254:	50aa      	str	r2, [r5, r2]
   83256:	3408      	adds	r4, #8
   83258:	f000 f9e2 	bl	83620 <__malloc_unlock>
   8325c:	e648      	b.n	82ef0 <_malloc_r+0x58>
   8325e:	685a      	ldr	r2, [r3, #4]
   83260:	e6a1      	b.n	82fa6 <_malloc_r+0x10e>
   83262:	f109 0901 	add.w	r9, r9, #1
   83266:	f019 0f03 	tst.w	r9, #3
   8326a:	f104 0408 	add.w	r4, r4, #8
   8326e:	f47f aead 	bne.w	82fcc <_malloc_r+0x134>
   83272:	e02d      	b.n	832d0 <_malloc_r+0x438>
   83274:	f104 0308 	add.w	r3, r4, #8
   83278:	6964      	ldr	r4, [r4, #20]
   8327a:	42a3      	cmp	r3, r4
   8327c:	bf08      	it	eq
   8327e:	f10c 0c02 	addeq.w	ip, ip, #2
   83282:	f43f ae67 	beq.w	82f54 <_malloc_r+0xbc>
   83286:	e623      	b.n	82ed0 <_malloc_r+0x38>
   83288:	4419      	add	r1, r3
   8328a:	6848      	ldr	r0, [r1, #4]
   8328c:	461c      	mov	r4, r3
   8328e:	f854 2f08 	ldr.w	r2, [r4, #8]!
   83292:	68db      	ldr	r3, [r3, #12]
   83294:	f040 0501 	orr.w	r5, r0, #1
   83298:	604d      	str	r5, [r1, #4]
   8329a:	4630      	mov	r0, r6
   8329c:	60d3      	str	r3, [r2, #12]
   8329e:	609a      	str	r2, [r3, #8]
   832a0:	f000 f9be 	bl	83620 <__malloc_unlock>
   832a4:	e624      	b.n	82ef0 <_malloc_r+0x58>
   832a6:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   832aa:	ea4f 014c 	mov.w	r1, ip, lsl #1
   832ae:	e63b      	b.n	82f28 <_malloc_r+0x90>
   832b0:	098a      	lsrs	r2, r1, #6
   832b2:	3238      	adds	r2, #56	; 0x38
   832b4:	0050      	lsls	r0, r2, #1
   832b6:	e7a8      	b.n	8320a <_malloc_r+0x372>
   832b8:	42bc      	cmp	r4, r7
   832ba:	f43f af02 	beq.w	830c2 <_malloc_r+0x22a>
   832be:	68bc      	ldr	r4, [r7, #8]
   832c0:	6862      	ldr	r2, [r4, #4]
   832c2:	f022 0203 	bic.w	r2, r2, #3
   832c6:	e761      	b.n	8318c <_malloc_r+0x2f4>
   832c8:	f8d8 8000 	ldr.w	r8, [r8]
   832cc:	4598      	cmp	r8, r3
   832ce:	d17a      	bne.n	833c6 <_malloc_r+0x52e>
   832d0:	f01c 0f03 	tst.w	ip, #3
   832d4:	f1a8 0308 	sub.w	r3, r8, #8
   832d8:	f10c 3cff 	add.w	ip, ip, #4294967295
   832dc:	d1f4      	bne.n	832c8 <_malloc_r+0x430>
   832de:	687b      	ldr	r3, [r7, #4]
   832e0:	ea23 0300 	bic.w	r3, r3, r0
   832e4:	607b      	str	r3, [r7, #4]
   832e6:	0040      	lsls	r0, r0, #1
   832e8:	4298      	cmp	r0, r3
   832ea:	f63f aebe 	bhi.w	8306a <_malloc_r+0x1d2>
   832ee:	2800      	cmp	r0, #0
   832f0:	f43f aebb 	beq.w	8306a <_malloc_r+0x1d2>
   832f4:	4203      	tst	r3, r0
   832f6:	46cc      	mov	ip, r9
   832f8:	f47f ae64 	bne.w	82fc4 <_malloc_r+0x12c>
   832fc:	0040      	lsls	r0, r0, #1
   832fe:	4203      	tst	r3, r0
   83300:	f10c 0c04 	add.w	ip, ip, #4
   83304:	d0fa      	beq.n	832fc <_malloc_r+0x464>
   83306:	e65d      	b.n	82fc4 <_malloc_r+0x12c>
   83308:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   8330c:	d819      	bhi.n	83342 <_malloc_r+0x4aa>
   8330e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   83312:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   83316:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8331a:	e605      	b.n	82f28 <_malloc_r+0x90>
   8331c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83320:	e6ee      	b.n	83100 <_malloc_r+0x268>
   83322:	2301      	movs	r3, #1
   83324:	f8c8 3004 	str.w	r3, [r8, #4]
   83328:	4644      	mov	r4, r8
   8332a:	2200      	movs	r2, #0
   8332c:	e72e      	b.n	8318c <_malloc_r+0x2f4>
   8332e:	1092      	asrs	r2, r2, #2
   83330:	2001      	movs	r0, #1
   83332:	4090      	lsls	r0, r2
   83334:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83338:	4619      	mov	r1, r3
   8333a:	4302      	orrs	r2, r0
   8333c:	f8c8 2004 	str.w	r2, [r8, #4]
   83340:	e775      	b.n	8322e <_malloc_r+0x396>
   83342:	f240 5354 	movw	r3, #1364	; 0x554
   83346:	459c      	cmp	ip, r3
   83348:	d81b      	bhi.n	83382 <_malloc_r+0x4ea>
   8334a:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   8334e:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   83352:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83356:	e5e7      	b.n	82f28 <_malloc_r+0x90>
   83358:	f10a 0a10 	add.w	sl, sl, #16
   8335c:	e6a3      	b.n	830a6 <_malloc_r+0x20e>
   8335e:	2b54      	cmp	r3, #84	; 0x54
   83360:	d81f      	bhi.n	833a2 <_malloc_r+0x50a>
   83362:	0b0a      	lsrs	r2, r1, #12
   83364:	326e      	adds	r2, #110	; 0x6e
   83366:	0050      	lsls	r0, r2, #1
   83368:	e74f      	b.n	8320a <_malloc_r+0x372>
   8336a:	f3cb 010b 	ubfx	r1, fp, #0, #12
   8336e:	2900      	cmp	r1, #0
   83370:	f47f aeb1 	bne.w	830d6 <_malloc_r+0x23e>
   83374:	eb0a 0109 	add.w	r1, sl, r9
   83378:	68ba      	ldr	r2, [r7, #8]
   8337a:	f041 0101 	orr.w	r1, r1, #1
   8337e:	6051      	str	r1, [r2, #4]
   83380:	e6f6      	b.n	83170 <_malloc_r+0x2d8>
   83382:	21fc      	movs	r1, #252	; 0xfc
   83384:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83388:	e5ce      	b.n	82f28 <_malloc_r+0x90>
   8338a:	2201      	movs	r2, #1
   8338c:	f04f 0a00 	mov.w	sl, #0
   83390:	e6cb      	b.n	8312a <_malloc_r+0x292>
   83392:	f104 0108 	add.w	r1, r4, #8
   83396:	4630      	mov	r0, r6
   83398:	f7ff fa80 	bl	8289c <_free_r>
   8339c:	f8da 3000 	ldr.w	r3, [sl]
   833a0:	e6e6      	b.n	83170 <_malloc_r+0x2d8>
   833a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   833a6:	d803      	bhi.n	833b0 <_malloc_r+0x518>
   833a8:	0bca      	lsrs	r2, r1, #15
   833aa:	3277      	adds	r2, #119	; 0x77
   833ac:	0050      	lsls	r0, r2, #1
   833ae:	e72c      	b.n	8320a <_malloc_r+0x372>
   833b0:	f240 5254 	movw	r2, #1364	; 0x554
   833b4:	4293      	cmp	r3, r2
   833b6:	d803      	bhi.n	833c0 <_malloc_r+0x528>
   833b8:	0c8a      	lsrs	r2, r1, #18
   833ba:	327c      	adds	r2, #124	; 0x7c
   833bc:	0050      	lsls	r0, r2, #1
   833be:	e724      	b.n	8320a <_malloc_r+0x372>
   833c0:	20fc      	movs	r0, #252	; 0xfc
   833c2:	227e      	movs	r2, #126	; 0x7e
   833c4:	e721      	b.n	8320a <_malloc_r+0x372>
   833c6:	687b      	ldr	r3, [r7, #4]
   833c8:	e78d      	b.n	832e6 <_malloc_r+0x44e>
   833ca:	bf00      	nop
   833cc:	20070590 	.word	0x20070590

000833d0 <memchr>:
   833d0:	0783      	lsls	r3, r0, #30
   833d2:	b470      	push	{r4, r5, r6}
   833d4:	b2c9      	uxtb	r1, r1
   833d6:	d040      	beq.n	8345a <memchr+0x8a>
   833d8:	1e54      	subs	r4, r2, #1
   833da:	b32a      	cbz	r2, 83428 <memchr+0x58>
   833dc:	7803      	ldrb	r3, [r0, #0]
   833de:	428b      	cmp	r3, r1
   833e0:	d023      	beq.n	8342a <memchr+0x5a>
   833e2:	1c43      	adds	r3, r0, #1
   833e4:	e004      	b.n	833f0 <memchr+0x20>
   833e6:	b1fc      	cbz	r4, 83428 <memchr+0x58>
   833e8:	7805      	ldrb	r5, [r0, #0]
   833ea:	4614      	mov	r4, r2
   833ec:	428d      	cmp	r5, r1
   833ee:	d01c      	beq.n	8342a <memchr+0x5a>
   833f0:	f013 0f03 	tst.w	r3, #3
   833f4:	4618      	mov	r0, r3
   833f6:	f104 32ff 	add.w	r2, r4, #4294967295
   833fa:	f103 0301 	add.w	r3, r3, #1
   833fe:	d1f2      	bne.n	833e6 <memchr+0x16>
   83400:	2c03      	cmp	r4, #3
   83402:	d814      	bhi.n	8342e <memchr+0x5e>
   83404:	1e65      	subs	r5, r4, #1
   83406:	b354      	cbz	r4, 8345e <memchr+0x8e>
   83408:	7803      	ldrb	r3, [r0, #0]
   8340a:	428b      	cmp	r3, r1
   8340c:	d00d      	beq.n	8342a <memchr+0x5a>
   8340e:	1c42      	adds	r2, r0, #1
   83410:	2300      	movs	r3, #0
   83412:	e002      	b.n	8341a <memchr+0x4a>
   83414:	7804      	ldrb	r4, [r0, #0]
   83416:	428c      	cmp	r4, r1
   83418:	d007      	beq.n	8342a <memchr+0x5a>
   8341a:	42ab      	cmp	r3, r5
   8341c:	4610      	mov	r0, r2
   8341e:	f103 0301 	add.w	r3, r3, #1
   83422:	f102 0201 	add.w	r2, r2, #1
   83426:	d1f5      	bne.n	83414 <memchr+0x44>
   83428:	2000      	movs	r0, #0
   8342a:	bc70      	pop	{r4, r5, r6}
   8342c:	4770      	bx	lr
   8342e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   83432:	4603      	mov	r3, r0
   83434:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83438:	681a      	ldr	r2, [r3, #0]
   8343a:	4618      	mov	r0, r3
   8343c:	4072      	eors	r2, r6
   8343e:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   83442:	ea25 0202 	bic.w	r2, r5, r2
   83446:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   8344a:	f103 0304 	add.w	r3, r3, #4
   8344e:	d1d9      	bne.n	83404 <memchr+0x34>
   83450:	3c04      	subs	r4, #4
   83452:	2c03      	cmp	r4, #3
   83454:	4618      	mov	r0, r3
   83456:	d8ef      	bhi.n	83438 <memchr+0x68>
   83458:	e7d4      	b.n	83404 <memchr+0x34>
   8345a:	4614      	mov	r4, r2
   8345c:	e7d0      	b.n	83400 <memchr+0x30>
   8345e:	4620      	mov	r0, r4
   83460:	e7e3      	b.n	8342a <memchr+0x5a>
   83462:	bf00      	nop

00083464 <memcpy>:
   83464:	4684      	mov	ip, r0
   83466:	ea41 0300 	orr.w	r3, r1, r0
   8346a:	f013 0303 	ands.w	r3, r3, #3
   8346e:	d149      	bne.n	83504 <memcpy+0xa0>
   83470:	3a40      	subs	r2, #64	; 0x40
   83472:	d323      	bcc.n	834bc <memcpy+0x58>
   83474:	680b      	ldr	r3, [r1, #0]
   83476:	6003      	str	r3, [r0, #0]
   83478:	684b      	ldr	r3, [r1, #4]
   8347a:	6043      	str	r3, [r0, #4]
   8347c:	688b      	ldr	r3, [r1, #8]
   8347e:	6083      	str	r3, [r0, #8]
   83480:	68cb      	ldr	r3, [r1, #12]
   83482:	60c3      	str	r3, [r0, #12]
   83484:	690b      	ldr	r3, [r1, #16]
   83486:	6103      	str	r3, [r0, #16]
   83488:	694b      	ldr	r3, [r1, #20]
   8348a:	6143      	str	r3, [r0, #20]
   8348c:	698b      	ldr	r3, [r1, #24]
   8348e:	6183      	str	r3, [r0, #24]
   83490:	69cb      	ldr	r3, [r1, #28]
   83492:	61c3      	str	r3, [r0, #28]
   83494:	6a0b      	ldr	r3, [r1, #32]
   83496:	6203      	str	r3, [r0, #32]
   83498:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8349a:	6243      	str	r3, [r0, #36]	; 0x24
   8349c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8349e:	6283      	str	r3, [r0, #40]	; 0x28
   834a0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   834a2:	62c3      	str	r3, [r0, #44]	; 0x2c
   834a4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   834a6:	6303      	str	r3, [r0, #48]	; 0x30
   834a8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   834aa:	6343      	str	r3, [r0, #52]	; 0x34
   834ac:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   834ae:	6383      	str	r3, [r0, #56]	; 0x38
   834b0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   834b2:	63c3      	str	r3, [r0, #60]	; 0x3c
   834b4:	3040      	adds	r0, #64	; 0x40
   834b6:	3140      	adds	r1, #64	; 0x40
   834b8:	3a40      	subs	r2, #64	; 0x40
   834ba:	d2db      	bcs.n	83474 <memcpy+0x10>
   834bc:	3230      	adds	r2, #48	; 0x30
   834be:	d30b      	bcc.n	834d8 <memcpy+0x74>
   834c0:	680b      	ldr	r3, [r1, #0]
   834c2:	6003      	str	r3, [r0, #0]
   834c4:	684b      	ldr	r3, [r1, #4]
   834c6:	6043      	str	r3, [r0, #4]
   834c8:	688b      	ldr	r3, [r1, #8]
   834ca:	6083      	str	r3, [r0, #8]
   834cc:	68cb      	ldr	r3, [r1, #12]
   834ce:	60c3      	str	r3, [r0, #12]
   834d0:	3010      	adds	r0, #16
   834d2:	3110      	adds	r1, #16
   834d4:	3a10      	subs	r2, #16
   834d6:	d2f3      	bcs.n	834c0 <memcpy+0x5c>
   834d8:	320c      	adds	r2, #12
   834da:	d305      	bcc.n	834e8 <memcpy+0x84>
   834dc:	f851 3b04 	ldr.w	r3, [r1], #4
   834e0:	f840 3b04 	str.w	r3, [r0], #4
   834e4:	3a04      	subs	r2, #4
   834e6:	d2f9      	bcs.n	834dc <memcpy+0x78>
   834e8:	3204      	adds	r2, #4
   834ea:	d008      	beq.n	834fe <memcpy+0x9a>
   834ec:	07d2      	lsls	r2, r2, #31
   834ee:	bf1c      	itt	ne
   834f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   834f4:	f800 3b01 	strbne.w	r3, [r0], #1
   834f8:	d301      	bcc.n	834fe <memcpy+0x9a>
   834fa:	880b      	ldrh	r3, [r1, #0]
   834fc:	8003      	strh	r3, [r0, #0]
   834fe:	4660      	mov	r0, ip
   83500:	4770      	bx	lr
   83502:	bf00      	nop
   83504:	2a08      	cmp	r2, #8
   83506:	d313      	bcc.n	83530 <memcpy+0xcc>
   83508:	078b      	lsls	r3, r1, #30
   8350a:	d0b1      	beq.n	83470 <memcpy+0xc>
   8350c:	f010 0303 	ands.w	r3, r0, #3
   83510:	d0ae      	beq.n	83470 <memcpy+0xc>
   83512:	f1c3 0304 	rsb	r3, r3, #4
   83516:	1ad2      	subs	r2, r2, r3
   83518:	07db      	lsls	r3, r3, #31
   8351a:	bf1c      	itt	ne
   8351c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83520:	f800 3b01 	strbne.w	r3, [r0], #1
   83524:	d3a4      	bcc.n	83470 <memcpy+0xc>
   83526:	f831 3b02 	ldrh.w	r3, [r1], #2
   8352a:	f820 3b02 	strh.w	r3, [r0], #2
   8352e:	e79f      	b.n	83470 <memcpy+0xc>
   83530:	3a04      	subs	r2, #4
   83532:	d3d9      	bcc.n	834e8 <memcpy+0x84>
   83534:	3a01      	subs	r2, #1
   83536:	f811 3b01 	ldrb.w	r3, [r1], #1
   8353a:	f800 3b01 	strb.w	r3, [r0], #1
   8353e:	d2f9      	bcs.n	83534 <memcpy+0xd0>
   83540:	780b      	ldrb	r3, [r1, #0]
   83542:	7003      	strb	r3, [r0, #0]
   83544:	784b      	ldrb	r3, [r1, #1]
   83546:	7043      	strb	r3, [r0, #1]
   83548:	788b      	ldrb	r3, [r1, #2]
   8354a:	7083      	strb	r3, [r0, #2]
   8354c:	4660      	mov	r0, ip
   8354e:	4770      	bx	lr

00083550 <memmove>:
   83550:	4288      	cmp	r0, r1
   83552:	b4f0      	push	{r4, r5, r6, r7}
   83554:	d910      	bls.n	83578 <memmove+0x28>
   83556:	188c      	adds	r4, r1, r2
   83558:	42a0      	cmp	r0, r4
   8355a:	d20d      	bcs.n	83578 <memmove+0x28>
   8355c:	1885      	adds	r5, r0, r2
   8355e:	1e53      	subs	r3, r2, #1
   83560:	b142      	cbz	r2, 83574 <memmove+0x24>
   83562:	4621      	mov	r1, r4
   83564:	462a      	mov	r2, r5
   83566:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   8356a:	3b01      	subs	r3, #1
   8356c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83570:	1c5c      	adds	r4, r3, #1
   83572:	d1f8      	bne.n	83566 <memmove+0x16>
   83574:	bcf0      	pop	{r4, r5, r6, r7}
   83576:	4770      	bx	lr
   83578:	2a0f      	cmp	r2, #15
   8357a:	d944      	bls.n	83606 <memmove+0xb6>
   8357c:	ea40 0301 	orr.w	r3, r0, r1
   83580:	079b      	lsls	r3, r3, #30
   83582:	d144      	bne.n	8360e <memmove+0xbe>
   83584:	f1a2 0710 	sub.w	r7, r2, #16
   83588:	093f      	lsrs	r7, r7, #4
   8358a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8358e:	3610      	adds	r6, #16
   83590:	460c      	mov	r4, r1
   83592:	4603      	mov	r3, r0
   83594:	6825      	ldr	r5, [r4, #0]
   83596:	3310      	adds	r3, #16
   83598:	f843 5c10 	str.w	r5, [r3, #-16]
   8359c:	6865      	ldr	r5, [r4, #4]
   8359e:	3410      	adds	r4, #16
   835a0:	f843 5c0c 	str.w	r5, [r3, #-12]
   835a4:	f854 5c08 	ldr.w	r5, [r4, #-8]
   835a8:	f843 5c08 	str.w	r5, [r3, #-8]
   835ac:	f854 5c04 	ldr.w	r5, [r4, #-4]
   835b0:	f843 5c04 	str.w	r5, [r3, #-4]
   835b4:	42b3      	cmp	r3, r6
   835b6:	d1ed      	bne.n	83594 <memmove+0x44>
   835b8:	1c7b      	adds	r3, r7, #1
   835ba:	f002 0c0f 	and.w	ip, r2, #15
   835be:	011b      	lsls	r3, r3, #4
   835c0:	f1bc 0f03 	cmp.w	ip, #3
   835c4:	4419      	add	r1, r3
   835c6:	4403      	add	r3, r0
   835c8:	d923      	bls.n	83612 <memmove+0xc2>
   835ca:	460e      	mov	r6, r1
   835cc:	461d      	mov	r5, r3
   835ce:	4664      	mov	r4, ip
   835d0:	f856 7b04 	ldr.w	r7, [r6], #4
   835d4:	3c04      	subs	r4, #4
   835d6:	2c03      	cmp	r4, #3
   835d8:	f845 7b04 	str.w	r7, [r5], #4
   835dc:	d8f8      	bhi.n	835d0 <memmove+0x80>
   835de:	f1ac 0404 	sub.w	r4, ip, #4
   835e2:	f024 0403 	bic.w	r4, r4, #3
   835e6:	3404      	adds	r4, #4
   835e8:	f002 0203 	and.w	r2, r2, #3
   835ec:	4423      	add	r3, r4
   835ee:	4421      	add	r1, r4
   835f0:	2a00      	cmp	r2, #0
   835f2:	d0bf      	beq.n	83574 <memmove+0x24>
   835f4:	441a      	add	r2, r3
   835f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   835fa:	f803 4b01 	strb.w	r4, [r3], #1
   835fe:	4293      	cmp	r3, r2
   83600:	d1f9      	bne.n	835f6 <memmove+0xa6>
   83602:	bcf0      	pop	{r4, r5, r6, r7}
   83604:	4770      	bx	lr
   83606:	4603      	mov	r3, r0
   83608:	2a00      	cmp	r2, #0
   8360a:	d1f3      	bne.n	835f4 <memmove+0xa4>
   8360c:	e7b2      	b.n	83574 <memmove+0x24>
   8360e:	4603      	mov	r3, r0
   83610:	e7f0      	b.n	835f4 <memmove+0xa4>
   83612:	4662      	mov	r2, ip
   83614:	2a00      	cmp	r2, #0
   83616:	d1ed      	bne.n	835f4 <memmove+0xa4>
   83618:	e7ac      	b.n	83574 <memmove+0x24>
   8361a:	bf00      	nop

0008361c <__malloc_lock>:
   8361c:	4770      	bx	lr
   8361e:	bf00      	nop

00083620 <__malloc_unlock>:
   83620:	4770      	bx	lr
   83622:	bf00      	nop

00083624 <_realloc_r>:
   83624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83628:	460c      	mov	r4, r1
   8362a:	b083      	sub	sp, #12
   8362c:	4690      	mov	r8, r2
   8362e:	4681      	mov	r9, r0
   83630:	2900      	cmp	r1, #0
   83632:	f000 80ba 	beq.w	837aa <_realloc_r+0x186>
   83636:	f7ff fff1 	bl	8361c <__malloc_lock>
   8363a:	f108 060b 	add.w	r6, r8, #11
   8363e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83642:	2e16      	cmp	r6, #22
   83644:	f023 0503 	bic.w	r5, r3, #3
   83648:	f1a4 0708 	sub.w	r7, r4, #8
   8364c:	d84b      	bhi.n	836e6 <_realloc_r+0xc2>
   8364e:	2110      	movs	r1, #16
   83650:	460e      	mov	r6, r1
   83652:	45b0      	cmp	r8, r6
   83654:	d84c      	bhi.n	836f0 <_realloc_r+0xcc>
   83656:	428d      	cmp	r5, r1
   83658:	da51      	bge.n	836fe <_realloc_r+0xda>
   8365a:	f8df b384 	ldr.w	fp, [pc, #900]	; 839e0 <_realloc_r+0x3bc>
   8365e:	1978      	adds	r0, r7, r5
   83660:	f8db e008 	ldr.w	lr, [fp, #8]
   83664:	4586      	cmp	lr, r0
   83666:	f000 80a6 	beq.w	837b6 <_realloc_r+0x192>
   8366a:	6842      	ldr	r2, [r0, #4]
   8366c:	f022 0c01 	bic.w	ip, r2, #1
   83670:	4484      	add	ip, r0
   83672:	f8dc c004 	ldr.w	ip, [ip, #4]
   83676:	f01c 0f01 	tst.w	ip, #1
   8367a:	d054      	beq.n	83726 <_realloc_r+0x102>
   8367c:	2200      	movs	r2, #0
   8367e:	4610      	mov	r0, r2
   83680:	07db      	lsls	r3, r3, #31
   83682:	d46f      	bmi.n	83764 <_realloc_r+0x140>
   83684:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83688:	ebc3 0a07 	rsb	sl, r3, r7
   8368c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83690:	f023 0303 	bic.w	r3, r3, #3
   83694:	442b      	add	r3, r5
   83696:	2800      	cmp	r0, #0
   83698:	d062      	beq.n	83760 <_realloc_r+0x13c>
   8369a:	4570      	cmp	r0, lr
   8369c:	f000 80e9 	beq.w	83872 <_realloc_r+0x24e>
   836a0:	eb02 0e03 	add.w	lr, r2, r3
   836a4:	458e      	cmp	lr, r1
   836a6:	db5b      	blt.n	83760 <_realloc_r+0x13c>
   836a8:	68c3      	ldr	r3, [r0, #12]
   836aa:	6882      	ldr	r2, [r0, #8]
   836ac:	46d0      	mov	r8, sl
   836ae:	60d3      	str	r3, [r2, #12]
   836b0:	609a      	str	r2, [r3, #8]
   836b2:	f858 1f08 	ldr.w	r1, [r8, #8]!
   836b6:	f8da 300c 	ldr.w	r3, [sl, #12]
   836ba:	1f2a      	subs	r2, r5, #4
   836bc:	2a24      	cmp	r2, #36	; 0x24
   836be:	60cb      	str	r3, [r1, #12]
   836c0:	6099      	str	r1, [r3, #8]
   836c2:	f200 8123 	bhi.w	8390c <_realloc_r+0x2e8>
   836c6:	2a13      	cmp	r2, #19
   836c8:	f240 80b0 	bls.w	8382c <_realloc_r+0x208>
   836cc:	6823      	ldr	r3, [r4, #0]
   836ce:	2a1b      	cmp	r2, #27
   836d0:	f8ca 3008 	str.w	r3, [sl, #8]
   836d4:	6863      	ldr	r3, [r4, #4]
   836d6:	f8ca 300c 	str.w	r3, [sl, #12]
   836da:	f200 812b 	bhi.w	83934 <_realloc_r+0x310>
   836de:	3408      	adds	r4, #8
   836e0:	f10a 0310 	add.w	r3, sl, #16
   836e4:	e0a3      	b.n	8382e <_realloc_r+0x20a>
   836e6:	f026 0607 	bic.w	r6, r6, #7
   836ea:	2e00      	cmp	r6, #0
   836ec:	4631      	mov	r1, r6
   836ee:	dab0      	bge.n	83652 <_realloc_r+0x2e>
   836f0:	230c      	movs	r3, #12
   836f2:	2000      	movs	r0, #0
   836f4:	f8c9 3000 	str.w	r3, [r9]
   836f8:	b003      	add	sp, #12
   836fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   836fe:	46a0      	mov	r8, r4
   83700:	1baa      	subs	r2, r5, r6
   83702:	2a0f      	cmp	r2, #15
   83704:	f003 0301 	and.w	r3, r3, #1
   83708:	d81a      	bhi.n	83740 <_realloc_r+0x11c>
   8370a:	432b      	orrs	r3, r5
   8370c:	607b      	str	r3, [r7, #4]
   8370e:	443d      	add	r5, r7
   83710:	686b      	ldr	r3, [r5, #4]
   83712:	f043 0301 	orr.w	r3, r3, #1
   83716:	606b      	str	r3, [r5, #4]
   83718:	4648      	mov	r0, r9
   8371a:	f7ff ff81 	bl	83620 <__malloc_unlock>
   8371e:	4640      	mov	r0, r8
   83720:	b003      	add	sp, #12
   83722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83726:	f022 0203 	bic.w	r2, r2, #3
   8372a:	eb02 0c05 	add.w	ip, r2, r5
   8372e:	458c      	cmp	ip, r1
   83730:	dba6      	blt.n	83680 <_realloc_r+0x5c>
   83732:	68c2      	ldr	r2, [r0, #12]
   83734:	6881      	ldr	r1, [r0, #8]
   83736:	46a0      	mov	r8, r4
   83738:	60ca      	str	r2, [r1, #12]
   8373a:	4665      	mov	r5, ip
   8373c:	6091      	str	r1, [r2, #8]
   8373e:	e7df      	b.n	83700 <_realloc_r+0xdc>
   83740:	19b9      	adds	r1, r7, r6
   83742:	4333      	orrs	r3, r6
   83744:	f042 0001 	orr.w	r0, r2, #1
   83748:	607b      	str	r3, [r7, #4]
   8374a:	440a      	add	r2, r1
   8374c:	6048      	str	r0, [r1, #4]
   8374e:	6853      	ldr	r3, [r2, #4]
   83750:	3108      	adds	r1, #8
   83752:	f043 0301 	orr.w	r3, r3, #1
   83756:	6053      	str	r3, [r2, #4]
   83758:	4648      	mov	r0, r9
   8375a:	f7ff f89f 	bl	8289c <_free_r>
   8375e:	e7db      	b.n	83718 <_realloc_r+0xf4>
   83760:	428b      	cmp	r3, r1
   83762:	da33      	bge.n	837cc <_realloc_r+0x1a8>
   83764:	4641      	mov	r1, r8
   83766:	4648      	mov	r0, r9
   83768:	f7ff fb96 	bl	82e98 <_malloc_r>
   8376c:	4680      	mov	r8, r0
   8376e:	2800      	cmp	r0, #0
   83770:	d0d2      	beq.n	83718 <_realloc_r+0xf4>
   83772:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83776:	f1a0 0108 	sub.w	r1, r0, #8
   8377a:	f023 0201 	bic.w	r2, r3, #1
   8377e:	443a      	add	r2, r7
   83780:	4291      	cmp	r1, r2
   83782:	f000 80bc 	beq.w	838fe <_realloc_r+0x2da>
   83786:	1f2a      	subs	r2, r5, #4
   83788:	2a24      	cmp	r2, #36	; 0x24
   8378a:	d86e      	bhi.n	8386a <_realloc_r+0x246>
   8378c:	2a13      	cmp	r2, #19
   8378e:	d842      	bhi.n	83816 <_realloc_r+0x1f2>
   83790:	4603      	mov	r3, r0
   83792:	4622      	mov	r2, r4
   83794:	6811      	ldr	r1, [r2, #0]
   83796:	6019      	str	r1, [r3, #0]
   83798:	6851      	ldr	r1, [r2, #4]
   8379a:	6059      	str	r1, [r3, #4]
   8379c:	6892      	ldr	r2, [r2, #8]
   8379e:	609a      	str	r2, [r3, #8]
   837a0:	4621      	mov	r1, r4
   837a2:	4648      	mov	r0, r9
   837a4:	f7ff f87a 	bl	8289c <_free_r>
   837a8:	e7b6      	b.n	83718 <_realloc_r+0xf4>
   837aa:	4611      	mov	r1, r2
   837ac:	b003      	add	sp, #12
   837ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   837b2:	f7ff bb71 	b.w	82e98 <_malloc_r>
   837b6:	f8de 2004 	ldr.w	r2, [lr, #4]
   837ba:	f106 0c10 	add.w	ip, r6, #16
   837be:	f022 0203 	bic.w	r2, r2, #3
   837c2:	1950      	adds	r0, r2, r5
   837c4:	4560      	cmp	r0, ip
   837c6:	da3d      	bge.n	83844 <_realloc_r+0x220>
   837c8:	4670      	mov	r0, lr
   837ca:	e759      	b.n	83680 <_realloc_r+0x5c>
   837cc:	46d0      	mov	r8, sl
   837ce:	f858 0f08 	ldr.w	r0, [r8, #8]!
   837d2:	f8da 100c 	ldr.w	r1, [sl, #12]
   837d6:	1f2a      	subs	r2, r5, #4
   837d8:	2a24      	cmp	r2, #36	; 0x24
   837da:	60c1      	str	r1, [r0, #12]
   837dc:	6088      	str	r0, [r1, #8]
   837de:	f200 80a0 	bhi.w	83922 <_realloc_r+0x2fe>
   837e2:	2a13      	cmp	r2, #19
   837e4:	f240 809b 	bls.w	8391e <_realloc_r+0x2fa>
   837e8:	6821      	ldr	r1, [r4, #0]
   837ea:	2a1b      	cmp	r2, #27
   837ec:	f8ca 1008 	str.w	r1, [sl, #8]
   837f0:	6861      	ldr	r1, [r4, #4]
   837f2:	f8ca 100c 	str.w	r1, [sl, #12]
   837f6:	f200 80b2 	bhi.w	8395e <_realloc_r+0x33a>
   837fa:	3408      	adds	r4, #8
   837fc:	f10a 0210 	add.w	r2, sl, #16
   83800:	6821      	ldr	r1, [r4, #0]
   83802:	461d      	mov	r5, r3
   83804:	6011      	str	r1, [r2, #0]
   83806:	6861      	ldr	r1, [r4, #4]
   83808:	4657      	mov	r7, sl
   8380a:	6051      	str	r1, [r2, #4]
   8380c:	68a3      	ldr	r3, [r4, #8]
   8380e:	6093      	str	r3, [r2, #8]
   83810:	f8da 3004 	ldr.w	r3, [sl, #4]
   83814:	e774      	b.n	83700 <_realloc_r+0xdc>
   83816:	6823      	ldr	r3, [r4, #0]
   83818:	2a1b      	cmp	r2, #27
   8381a:	6003      	str	r3, [r0, #0]
   8381c:	6863      	ldr	r3, [r4, #4]
   8381e:	6043      	str	r3, [r0, #4]
   83820:	d862      	bhi.n	838e8 <_realloc_r+0x2c4>
   83822:	f100 0308 	add.w	r3, r0, #8
   83826:	f104 0208 	add.w	r2, r4, #8
   8382a:	e7b3      	b.n	83794 <_realloc_r+0x170>
   8382c:	4643      	mov	r3, r8
   8382e:	6822      	ldr	r2, [r4, #0]
   83830:	4675      	mov	r5, lr
   83832:	601a      	str	r2, [r3, #0]
   83834:	6862      	ldr	r2, [r4, #4]
   83836:	4657      	mov	r7, sl
   83838:	605a      	str	r2, [r3, #4]
   8383a:	68a2      	ldr	r2, [r4, #8]
   8383c:	609a      	str	r2, [r3, #8]
   8383e:	f8da 3004 	ldr.w	r3, [sl, #4]
   83842:	e75d      	b.n	83700 <_realloc_r+0xdc>
   83844:	1b83      	subs	r3, r0, r6
   83846:	4437      	add	r7, r6
   83848:	f043 0301 	orr.w	r3, r3, #1
   8384c:	f8cb 7008 	str.w	r7, [fp, #8]
   83850:	607b      	str	r3, [r7, #4]
   83852:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83856:	4648      	mov	r0, r9
   83858:	f003 0301 	and.w	r3, r3, #1
   8385c:	431e      	orrs	r6, r3
   8385e:	f844 6c04 	str.w	r6, [r4, #-4]
   83862:	f7ff fedd 	bl	83620 <__malloc_unlock>
   83866:	4620      	mov	r0, r4
   83868:	e75a      	b.n	83720 <_realloc_r+0xfc>
   8386a:	4621      	mov	r1, r4
   8386c:	f7ff fe70 	bl	83550 <memmove>
   83870:	e796      	b.n	837a0 <_realloc_r+0x17c>
   83872:	eb02 0c03 	add.w	ip, r2, r3
   83876:	f106 0210 	add.w	r2, r6, #16
   8387a:	4594      	cmp	ip, r2
   8387c:	f6ff af70 	blt.w	83760 <_realloc_r+0x13c>
   83880:	4657      	mov	r7, sl
   83882:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83886:	f8da 300c 	ldr.w	r3, [sl, #12]
   8388a:	1f2a      	subs	r2, r5, #4
   8388c:	2a24      	cmp	r2, #36	; 0x24
   8388e:	60cb      	str	r3, [r1, #12]
   83890:	6099      	str	r1, [r3, #8]
   83892:	f200 8086 	bhi.w	839a2 <_realloc_r+0x37e>
   83896:	2a13      	cmp	r2, #19
   83898:	d977      	bls.n	8398a <_realloc_r+0x366>
   8389a:	6823      	ldr	r3, [r4, #0]
   8389c:	2a1b      	cmp	r2, #27
   8389e:	f8ca 3008 	str.w	r3, [sl, #8]
   838a2:	6863      	ldr	r3, [r4, #4]
   838a4:	f8ca 300c 	str.w	r3, [sl, #12]
   838a8:	f200 8084 	bhi.w	839b4 <_realloc_r+0x390>
   838ac:	3408      	adds	r4, #8
   838ae:	f10a 0310 	add.w	r3, sl, #16
   838b2:	6822      	ldr	r2, [r4, #0]
   838b4:	601a      	str	r2, [r3, #0]
   838b6:	6862      	ldr	r2, [r4, #4]
   838b8:	605a      	str	r2, [r3, #4]
   838ba:	68a2      	ldr	r2, [r4, #8]
   838bc:	609a      	str	r2, [r3, #8]
   838be:	ebc6 020c 	rsb	r2, r6, ip
   838c2:	eb0a 0306 	add.w	r3, sl, r6
   838c6:	f042 0201 	orr.w	r2, r2, #1
   838ca:	f8cb 3008 	str.w	r3, [fp, #8]
   838ce:	605a      	str	r2, [r3, #4]
   838d0:	f8da 3004 	ldr.w	r3, [sl, #4]
   838d4:	4648      	mov	r0, r9
   838d6:	f003 0301 	and.w	r3, r3, #1
   838da:	431e      	orrs	r6, r3
   838dc:	f8ca 6004 	str.w	r6, [sl, #4]
   838e0:	f7ff fe9e 	bl	83620 <__malloc_unlock>
   838e4:	4638      	mov	r0, r7
   838e6:	e71b      	b.n	83720 <_realloc_r+0xfc>
   838e8:	68a3      	ldr	r3, [r4, #8]
   838ea:	2a24      	cmp	r2, #36	; 0x24
   838ec:	6083      	str	r3, [r0, #8]
   838ee:	68e3      	ldr	r3, [r4, #12]
   838f0:	60c3      	str	r3, [r0, #12]
   838f2:	d02b      	beq.n	8394c <_realloc_r+0x328>
   838f4:	f100 0310 	add.w	r3, r0, #16
   838f8:	f104 0210 	add.w	r2, r4, #16
   838fc:	e74a      	b.n	83794 <_realloc_r+0x170>
   838fe:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83902:	46a0      	mov	r8, r4
   83904:	f022 0203 	bic.w	r2, r2, #3
   83908:	4415      	add	r5, r2
   8390a:	e6f9      	b.n	83700 <_realloc_r+0xdc>
   8390c:	4621      	mov	r1, r4
   8390e:	4640      	mov	r0, r8
   83910:	4675      	mov	r5, lr
   83912:	4657      	mov	r7, sl
   83914:	f7ff fe1c 	bl	83550 <memmove>
   83918:	f8da 3004 	ldr.w	r3, [sl, #4]
   8391c:	e6f0      	b.n	83700 <_realloc_r+0xdc>
   8391e:	4642      	mov	r2, r8
   83920:	e76e      	b.n	83800 <_realloc_r+0x1dc>
   83922:	4621      	mov	r1, r4
   83924:	4640      	mov	r0, r8
   83926:	461d      	mov	r5, r3
   83928:	4657      	mov	r7, sl
   8392a:	f7ff fe11 	bl	83550 <memmove>
   8392e:	f8da 3004 	ldr.w	r3, [sl, #4]
   83932:	e6e5      	b.n	83700 <_realloc_r+0xdc>
   83934:	68a3      	ldr	r3, [r4, #8]
   83936:	2a24      	cmp	r2, #36	; 0x24
   83938:	f8ca 3010 	str.w	r3, [sl, #16]
   8393c:	68e3      	ldr	r3, [r4, #12]
   8393e:	f8ca 3014 	str.w	r3, [sl, #20]
   83942:	d018      	beq.n	83976 <_realloc_r+0x352>
   83944:	3410      	adds	r4, #16
   83946:	f10a 0318 	add.w	r3, sl, #24
   8394a:	e770      	b.n	8382e <_realloc_r+0x20a>
   8394c:	6922      	ldr	r2, [r4, #16]
   8394e:	f100 0318 	add.w	r3, r0, #24
   83952:	6102      	str	r2, [r0, #16]
   83954:	6961      	ldr	r1, [r4, #20]
   83956:	f104 0218 	add.w	r2, r4, #24
   8395a:	6141      	str	r1, [r0, #20]
   8395c:	e71a      	b.n	83794 <_realloc_r+0x170>
   8395e:	68a1      	ldr	r1, [r4, #8]
   83960:	2a24      	cmp	r2, #36	; 0x24
   83962:	f8ca 1010 	str.w	r1, [sl, #16]
   83966:	68e1      	ldr	r1, [r4, #12]
   83968:	f8ca 1014 	str.w	r1, [sl, #20]
   8396c:	d00f      	beq.n	8398e <_realloc_r+0x36a>
   8396e:	3410      	adds	r4, #16
   83970:	f10a 0218 	add.w	r2, sl, #24
   83974:	e744      	b.n	83800 <_realloc_r+0x1dc>
   83976:	6922      	ldr	r2, [r4, #16]
   83978:	f10a 0320 	add.w	r3, sl, #32
   8397c:	f8ca 2018 	str.w	r2, [sl, #24]
   83980:	6962      	ldr	r2, [r4, #20]
   83982:	3418      	adds	r4, #24
   83984:	f8ca 201c 	str.w	r2, [sl, #28]
   83988:	e751      	b.n	8382e <_realloc_r+0x20a>
   8398a:	463b      	mov	r3, r7
   8398c:	e791      	b.n	838b2 <_realloc_r+0x28e>
   8398e:	6921      	ldr	r1, [r4, #16]
   83990:	f10a 0220 	add.w	r2, sl, #32
   83994:	f8ca 1018 	str.w	r1, [sl, #24]
   83998:	6961      	ldr	r1, [r4, #20]
   8399a:	3418      	adds	r4, #24
   8399c:	f8ca 101c 	str.w	r1, [sl, #28]
   839a0:	e72e      	b.n	83800 <_realloc_r+0x1dc>
   839a2:	4621      	mov	r1, r4
   839a4:	4638      	mov	r0, r7
   839a6:	f8cd c004 	str.w	ip, [sp, #4]
   839aa:	f7ff fdd1 	bl	83550 <memmove>
   839ae:	f8dd c004 	ldr.w	ip, [sp, #4]
   839b2:	e784      	b.n	838be <_realloc_r+0x29a>
   839b4:	68a3      	ldr	r3, [r4, #8]
   839b6:	2a24      	cmp	r2, #36	; 0x24
   839b8:	f8ca 3010 	str.w	r3, [sl, #16]
   839bc:	68e3      	ldr	r3, [r4, #12]
   839be:	f8ca 3014 	str.w	r3, [sl, #20]
   839c2:	d003      	beq.n	839cc <_realloc_r+0x3a8>
   839c4:	3410      	adds	r4, #16
   839c6:	f10a 0318 	add.w	r3, sl, #24
   839ca:	e772      	b.n	838b2 <_realloc_r+0x28e>
   839cc:	6922      	ldr	r2, [r4, #16]
   839ce:	f10a 0320 	add.w	r3, sl, #32
   839d2:	f8ca 2018 	str.w	r2, [sl, #24]
   839d6:	6962      	ldr	r2, [r4, #20]
   839d8:	3418      	adds	r4, #24
   839da:	f8ca 201c 	str.w	r2, [sl, #28]
   839de:	e768      	b.n	838b2 <_realloc_r+0x28e>
   839e0:	20070590 	.word	0x20070590

000839e4 <_sbrk_r>:
   839e4:	b538      	push	{r3, r4, r5, lr}
   839e6:	4c07      	ldr	r4, [pc, #28]	; (83a04 <_sbrk_r+0x20>)
   839e8:	2300      	movs	r3, #0
   839ea:	4605      	mov	r5, r0
   839ec:	4608      	mov	r0, r1
   839ee:	6023      	str	r3, [r4, #0]
   839f0:	f7fd fa9a 	bl	80f28 <_sbrk>
   839f4:	1c43      	adds	r3, r0, #1
   839f6:	d000      	beq.n	839fa <_sbrk_r+0x16>
   839f8:	bd38      	pop	{r3, r4, r5, pc}
   839fa:	6823      	ldr	r3, [r4, #0]
   839fc:	2b00      	cmp	r3, #0
   839fe:	d0fb      	beq.n	839f8 <_sbrk_r+0x14>
   83a00:	602b      	str	r3, [r5, #0]
   83a02:	bd38      	pop	{r3, r4, r5, pc}
   83a04:	20070b6c 	.word	0x20070b6c

00083a08 <__sread>:
   83a08:	b510      	push	{r4, lr}
   83a0a:	460c      	mov	r4, r1
   83a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83a10:	f000 f9c2 	bl	83d98 <_read_r>
   83a14:	2800      	cmp	r0, #0
   83a16:	db03      	blt.n	83a20 <__sread+0x18>
   83a18:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83a1a:	4403      	add	r3, r0
   83a1c:	6523      	str	r3, [r4, #80]	; 0x50
   83a1e:	bd10      	pop	{r4, pc}
   83a20:	89a3      	ldrh	r3, [r4, #12]
   83a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83a26:	81a3      	strh	r3, [r4, #12]
   83a28:	bd10      	pop	{r4, pc}
   83a2a:	bf00      	nop

00083a2c <__swrite>:
   83a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83a30:	460c      	mov	r4, r1
   83a32:	8989      	ldrh	r1, [r1, #12]
   83a34:	461d      	mov	r5, r3
   83a36:	05cb      	lsls	r3, r1, #23
   83a38:	4616      	mov	r6, r2
   83a3a:	4607      	mov	r7, r0
   83a3c:	d506      	bpl.n	83a4c <__swrite+0x20>
   83a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83a42:	2200      	movs	r2, #0
   83a44:	2302      	movs	r3, #2
   83a46:	f000 f993 	bl	83d70 <_lseek_r>
   83a4a:	89a1      	ldrh	r1, [r4, #12]
   83a4c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83a50:	81a1      	strh	r1, [r4, #12]
   83a52:	4638      	mov	r0, r7
   83a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83a58:	4632      	mov	r2, r6
   83a5a:	462b      	mov	r3, r5
   83a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83a60:	f000 b89e 	b.w	83ba0 <_write_r>

00083a64 <__sseek>:
   83a64:	b510      	push	{r4, lr}
   83a66:	460c      	mov	r4, r1
   83a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83a6c:	f000 f980 	bl	83d70 <_lseek_r>
   83a70:	89a3      	ldrh	r3, [r4, #12]
   83a72:	1c42      	adds	r2, r0, #1
   83a74:	bf0e      	itee	eq
   83a76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83a7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83a7e:	6520      	strne	r0, [r4, #80]	; 0x50
   83a80:	81a3      	strh	r3, [r4, #12]
   83a82:	bd10      	pop	{r4, pc}

00083a84 <__sclose>:
   83a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83a88:	f000 b8f2 	b.w	83c70 <_close_r>

00083a8c <__swbuf_r>:
   83a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a8e:	460d      	mov	r5, r1
   83a90:	4614      	mov	r4, r2
   83a92:	4607      	mov	r7, r0
   83a94:	b110      	cbz	r0, 83a9c <__swbuf_r+0x10>
   83a96:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83a98:	2b00      	cmp	r3, #0
   83a9a:	d048      	beq.n	83b2e <__swbuf_r+0xa2>
   83a9c:	89a2      	ldrh	r2, [r4, #12]
   83a9e:	69a0      	ldr	r0, [r4, #24]
   83aa0:	b293      	uxth	r3, r2
   83aa2:	60a0      	str	r0, [r4, #8]
   83aa4:	0718      	lsls	r0, r3, #28
   83aa6:	d538      	bpl.n	83b1a <__swbuf_r+0x8e>
   83aa8:	6926      	ldr	r6, [r4, #16]
   83aaa:	2e00      	cmp	r6, #0
   83aac:	d035      	beq.n	83b1a <__swbuf_r+0x8e>
   83aae:	0499      	lsls	r1, r3, #18
   83ab0:	b2ed      	uxtb	r5, r5
   83ab2:	d515      	bpl.n	83ae0 <__swbuf_r+0x54>
   83ab4:	6823      	ldr	r3, [r4, #0]
   83ab6:	6962      	ldr	r2, [r4, #20]
   83ab8:	1b9e      	subs	r6, r3, r6
   83aba:	4296      	cmp	r6, r2
   83abc:	da1c      	bge.n	83af8 <__swbuf_r+0x6c>
   83abe:	3601      	adds	r6, #1
   83ac0:	68a2      	ldr	r2, [r4, #8]
   83ac2:	1c59      	adds	r1, r3, #1
   83ac4:	3a01      	subs	r2, #1
   83ac6:	60a2      	str	r2, [r4, #8]
   83ac8:	6021      	str	r1, [r4, #0]
   83aca:	701d      	strb	r5, [r3, #0]
   83acc:	6963      	ldr	r3, [r4, #20]
   83ace:	42b3      	cmp	r3, r6
   83ad0:	d01a      	beq.n	83b08 <__swbuf_r+0x7c>
   83ad2:	89a3      	ldrh	r3, [r4, #12]
   83ad4:	07db      	lsls	r3, r3, #31
   83ad6:	d501      	bpl.n	83adc <__swbuf_r+0x50>
   83ad8:	2d0a      	cmp	r5, #10
   83ada:	d015      	beq.n	83b08 <__swbuf_r+0x7c>
   83adc:	4628      	mov	r0, r5
   83ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ae0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83ae2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83aea:	6663      	str	r3, [r4, #100]	; 0x64
   83aec:	6823      	ldr	r3, [r4, #0]
   83aee:	81a2      	strh	r2, [r4, #12]
   83af0:	6962      	ldr	r2, [r4, #20]
   83af2:	1b9e      	subs	r6, r3, r6
   83af4:	4296      	cmp	r6, r2
   83af6:	dbe2      	blt.n	83abe <__swbuf_r+0x32>
   83af8:	4638      	mov	r0, r7
   83afa:	4621      	mov	r1, r4
   83afc:	f7fe fd6e 	bl	825dc <_fflush_r>
   83b00:	b940      	cbnz	r0, 83b14 <__swbuf_r+0x88>
   83b02:	6823      	ldr	r3, [r4, #0]
   83b04:	2601      	movs	r6, #1
   83b06:	e7db      	b.n	83ac0 <__swbuf_r+0x34>
   83b08:	4638      	mov	r0, r7
   83b0a:	4621      	mov	r1, r4
   83b0c:	f7fe fd66 	bl	825dc <_fflush_r>
   83b10:	2800      	cmp	r0, #0
   83b12:	d0e3      	beq.n	83adc <__swbuf_r+0x50>
   83b14:	f04f 30ff 	mov.w	r0, #4294967295
   83b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83b1a:	4638      	mov	r0, r7
   83b1c:	4621      	mov	r1, r4
   83b1e:	f7fe fc47 	bl	823b0 <__swsetup_r>
   83b22:	2800      	cmp	r0, #0
   83b24:	d1f6      	bne.n	83b14 <__swbuf_r+0x88>
   83b26:	89a2      	ldrh	r2, [r4, #12]
   83b28:	6926      	ldr	r6, [r4, #16]
   83b2a:	b293      	uxth	r3, r2
   83b2c:	e7bf      	b.n	83aae <__swbuf_r+0x22>
   83b2e:	f7fe fd71 	bl	82614 <__sinit>
   83b32:	e7b3      	b.n	83a9c <__swbuf_r+0x10>

00083b34 <_wcrtomb_r>:
   83b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83b38:	461e      	mov	r6, r3
   83b3a:	b086      	sub	sp, #24
   83b3c:	460c      	mov	r4, r1
   83b3e:	4605      	mov	r5, r0
   83b40:	4617      	mov	r7, r2
   83b42:	4b0f      	ldr	r3, [pc, #60]	; (83b80 <_wcrtomb_r+0x4c>)
   83b44:	b191      	cbz	r1, 83b6c <_wcrtomb_r+0x38>
   83b46:	f8d3 8000 	ldr.w	r8, [r3]
   83b4a:	f7ff f923 	bl	82d94 <__locale_charset>
   83b4e:	9600      	str	r6, [sp, #0]
   83b50:	4603      	mov	r3, r0
   83b52:	4621      	mov	r1, r4
   83b54:	463a      	mov	r2, r7
   83b56:	4628      	mov	r0, r5
   83b58:	47c0      	blx	r8
   83b5a:	1c43      	adds	r3, r0, #1
   83b5c:	d103      	bne.n	83b66 <_wcrtomb_r+0x32>
   83b5e:	2200      	movs	r2, #0
   83b60:	238a      	movs	r3, #138	; 0x8a
   83b62:	6032      	str	r2, [r6, #0]
   83b64:	602b      	str	r3, [r5, #0]
   83b66:	b006      	add	sp, #24
   83b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b6c:	681f      	ldr	r7, [r3, #0]
   83b6e:	f7ff f911 	bl	82d94 <__locale_charset>
   83b72:	9600      	str	r6, [sp, #0]
   83b74:	4603      	mov	r3, r0
   83b76:	4622      	mov	r2, r4
   83b78:	4628      	mov	r0, r5
   83b7a:	a903      	add	r1, sp, #12
   83b7c:	47b8      	blx	r7
   83b7e:	e7ec      	b.n	83b5a <_wcrtomb_r+0x26>
   83b80:	200709a0 	.word	0x200709a0

00083b84 <__ascii_wctomb>:
   83b84:	b121      	cbz	r1, 83b90 <__ascii_wctomb+0xc>
   83b86:	2aff      	cmp	r2, #255	; 0xff
   83b88:	d804      	bhi.n	83b94 <__ascii_wctomb+0x10>
   83b8a:	700a      	strb	r2, [r1, #0]
   83b8c:	2001      	movs	r0, #1
   83b8e:	4770      	bx	lr
   83b90:	4608      	mov	r0, r1
   83b92:	4770      	bx	lr
   83b94:	238a      	movs	r3, #138	; 0x8a
   83b96:	6003      	str	r3, [r0, #0]
   83b98:	f04f 30ff 	mov.w	r0, #4294967295
   83b9c:	4770      	bx	lr
   83b9e:	bf00      	nop

00083ba0 <_write_r>:
   83ba0:	b570      	push	{r4, r5, r6, lr}
   83ba2:	4c08      	ldr	r4, [pc, #32]	; (83bc4 <_write_r+0x24>)
   83ba4:	4606      	mov	r6, r0
   83ba6:	2500      	movs	r5, #0
   83ba8:	4608      	mov	r0, r1
   83baa:	4611      	mov	r1, r2
   83bac:	461a      	mov	r2, r3
   83bae:	6025      	str	r5, [r4, #0]
   83bb0:	f7fc fbf0 	bl	80394 <_write>
   83bb4:	1c43      	adds	r3, r0, #1
   83bb6:	d000      	beq.n	83bba <_write_r+0x1a>
   83bb8:	bd70      	pop	{r4, r5, r6, pc}
   83bba:	6823      	ldr	r3, [r4, #0]
   83bbc:	2b00      	cmp	r3, #0
   83bbe:	d0fb      	beq.n	83bb8 <_write_r+0x18>
   83bc0:	6033      	str	r3, [r6, #0]
   83bc2:	bd70      	pop	{r4, r5, r6, pc}
   83bc4:	20070b6c 	.word	0x20070b6c

00083bc8 <__register_exitproc>:
   83bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   83bca:	4c27      	ldr	r4, [pc, #156]	; (83c68 <__register_exitproc+0xa0>)
   83bcc:	b085      	sub	sp, #20
   83bce:	6826      	ldr	r6, [r4, #0]
   83bd0:	4607      	mov	r7, r0
   83bd2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83bd6:	2c00      	cmp	r4, #0
   83bd8:	d040      	beq.n	83c5c <__register_exitproc+0x94>
   83bda:	6865      	ldr	r5, [r4, #4]
   83bdc:	2d1f      	cmp	r5, #31
   83bde:	dd1e      	ble.n	83c1e <__register_exitproc+0x56>
   83be0:	4822      	ldr	r0, [pc, #136]	; (83c6c <__register_exitproc+0xa4>)
   83be2:	b918      	cbnz	r0, 83bec <__register_exitproc+0x24>
   83be4:	f04f 30ff 	mov.w	r0, #4294967295
   83be8:	b005      	add	sp, #20
   83bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83bec:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83bf0:	9103      	str	r1, [sp, #12]
   83bf2:	9202      	str	r2, [sp, #8]
   83bf4:	9301      	str	r3, [sp, #4]
   83bf6:	f7ff f947 	bl	82e88 <malloc>
   83bfa:	9903      	ldr	r1, [sp, #12]
   83bfc:	4604      	mov	r4, r0
   83bfe:	9a02      	ldr	r2, [sp, #8]
   83c00:	9b01      	ldr	r3, [sp, #4]
   83c02:	2800      	cmp	r0, #0
   83c04:	d0ee      	beq.n	83be4 <__register_exitproc+0x1c>
   83c06:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83c0a:	2000      	movs	r0, #0
   83c0c:	6025      	str	r5, [r4, #0]
   83c0e:	6060      	str	r0, [r4, #4]
   83c10:	4605      	mov	r5, r0
   83c12:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83c16:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83c1a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83c1e:	b93f      	cbnz	r7, 83c30 <__register_exitproc+0x68>
   83c20:	1c6b      	adds	r3, r5, #1
   83c22:	2000      	movs	r0, #0
   83c24:	3502      	adds	r5, #2
   83c26:	6063      	str	r3, [r4, #4]
   83c28:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83c2c:	b005      	add	sp, #20
   83c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c30:	2601      	movs	r6, #1
   83c32:	40ae      	lsls	r6, r5
   83c34:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83c38:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83c3c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83c40:	2f02      	cmp	r7, #2
   83c42:	ea42 0206 	orr.w	r2, r2, r6
   83c46:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83c4a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83c4e:	d1e7      	bne.n	83c20 <__register_exitproc+0x58>
   83c50:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83c54:	431e      	orrs	r6, r3
   83c56:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83c5a:	e7e1      	b.n	83c20 <__register_exitproc+0x58>
   83c5c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83c60:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83c64:	e7b9      	b.n	83bda <__register_exitproc+0x12>
   83c66:	bf00      	nop
   83c68:	00084400 	.word	0x00084400
   83c6c:	00082e89 	.word	0x00082e89

00083c70 <_close_r>:
   83c70:	b538      	push	{r3, r4, r5, lr}
   83c72:	4c07      	ldr	r4, [pc, #28]	; (83c90 <_close_r+0x20>)
   83c74:	2300      	movs	r3, #0
   83c76:	4605      	mov	r5, r0
   83c78:	4608      	mov	r0, r1
   83c7a:	6023      	str	r3, [r4, #0]
   83c7c:	f7fd f96e 	bl	80f5c <_close>
   83c80:	1c43      	adds	r3, r0, #1
   83c82:	d000      	beq.n	83c86 <_close_r+0x16>
   83c84:	bd38      	pop	{r3, r4, r5, pc}
   83c86:	6823      	ldr	r3, [r4, #0]
   83c88:	2b00      	cmp	r3, #0
   83c8a:	d0fb      	beq.n	83c84 <_close_r+0x14>
   83c8c:	602b      	str	r3, [r5, #0]
   83c8e:	bd38      	pop	{r3, r4, r5, pc}
   83c90:	20070b6c 	.word	0x20070b6c

00083c94 <_fclose_r>:
   83c94:	b570      	push	{r4, r5, r6, lr}
   83c96:	460c      	mov	r4, r1
   83c98:	4605      	mov	r5, r0
   83c9a:	b131      	cbz	r1, 83caa <_fclose_r+0x16>
   83c9c:	b110      	cbz	r0, 83ca4 <_fclose_r+0x10>
   83c9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83ca0:	2b00      	cmp	r3, #0
   83ca2:	d02f      	beq.n	83d04 <_fclose_r+0x70>
   83ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ca8:	b90b      	cbnz	r3, 83cae <_fclose_r+0x1a>
   83caa:	2000      	movs	r0, #0
   83cac:	bd70      	pop	{r4, r5, r6, pc}
   83cae:	4628      	mov	r0, r5
   83cb0:	4621      	mov	r1, r4
   83cb2:	f7fe fc93 	bl	825dc <_fflush_r>
   83cb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83cb8:	4606      	mov	r6, r0
   83cba:	b133      	cbz	r3, 83cca <_fclose_r+0x36>
   83cbc:	4628      	mov	r0, r5
   83cbe:	69e1      	ldr	r1, [r4, #28]
   83cc0:	4798      	blx	r3
   83cc2:	2800      	cmp	r0, #0
   83cc4:	bfb8      	it	lt
   83cc6:	f04f 36ff 	movlt.w	r6, #4294967295
   83cca:	89a3      	ldrh	r3, [r4, #12]
   83ccc:	061b      	lsls	r3, r3, #24
   83cce:	d41c      	bmi.n	83d0a <_fclose_r+0x76>
   83cd0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83cd2:	b141      	cbz	r1, 83ce6 <_fclose_r+0x52>
   83cd4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83cd8:	4299      	cmp	r1, r3
   83cda:	d002      	beq.n	83ce2 <_fclose_r+0x4e>
   83cdc:	4628      	mov	r0, r5
   83cde:	f7fe fddd 	bl	8289c <_free_r>
   83ce2:	2300      	movs	r3, #0
   83ce4:	6323      	str	r3, [r4, #48]	; 0x30
   83ce6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83ce8:	b121      	cbz	r1, 83cf4 <_fclose_r+0x60>
   83cea:	4628      	mov	r0, r5
   83cec:	f7fe fdd6 	bl	8289c <_free_r>
   83cf0:	2300      	movs	r3, #0
   83cf2:	6463      	str	r3, [r4, #68]	; 0x44
   83cf4:	f7fe fd08 	bl	82708 <__sfp_lock_acquire>
   83cf8:	2300      	movs	r3, #0
   83cfa:	81a3      	strh	r3, [r4, #12]
   83cfc:	f7fe fd06 	bl	8270c <__sfp_lock_release>
   83d00:	4630      	mov	r0, r6
   83d02:	bd70      	pop	{r4, r5, r6, pc}
   83d04:	f7fe fc86 	bl	82614 <__sinit>
   83d08:	e7cc      	b.n	83ca4 <_fclose_r+0x10>
   83d0a:	4628      	mov	r0, r5
   83d0c:	6921      	ldr	r1, [r4, #16]
   83d0e:	f7fe fdc5 	bl	8289c <_free_r>
   83d12:	e7dd      	b.n	83cd0 <_fclose_r+0x3c>

00083d14 <fclose>:
   83d14:	4b02      	ldr	r3, [pc, #8]	; (83d20 <fclose+0xc>)
   83d16:	4601      	mov	r1, r0
   83d18:	6818      	ldr	r0, [r3, #0]
   83d1a:	f7ff bfbb 	b.w	83c94 <_fclose_r>
   83d1e:	bf00      	nop
   83d20:	20070568 	.word	0x20070568

00083d24 <_fstat_r>:
   83d24:	b538      	push	{r3, r4, r5, lr}
   83d26:	4c08      	ldr	r4, [pc, #32]	; (83d48 <_fstat_r+0x24>)
   83d28:	2300      	movs	r3, #0
   83d2a:	4605      	mov	r5, r0
   83d2c:	4608      	mov	r0, r1
   83d2e:	4611      	mov	r1, r2
   83d30:	6023      	str	r3, [r4, #0]
   83d32:	f7fd f917 	bl	80f64 <_fstat>
   83d36:	1c43      	adds	r3, r0, #1
   83d38:	d000      	beq.n	83d3c <_fstat_r+0x18>
   83d3a:	bd38      	pop	{r3, r4, r5, pc}
   83d3c:	6823      	ldr	r3, [r4, #0]
   83d3e:	2b00      	cmp	r3, #0
   83d40:	d0fb      	beq.n	83d3a <_fstat_r+0x16>
   83d42:	602b      	str	r3, [r5, #0]
   83d44:	bd38      	pop	{r3, r4, r5, pc}
   83d46:	bf00      	nop
   83d48:	20070b6c 	.word	0x20070b6c

00083d4c <_isatty_r>:
   83d4c:	b538      	push	{r3, r4, r5, lr}
   83d4e:	4c07      	ldr	r4, [pc, #28]	; (83d6c <_isatty_r+0x20>)
   83d50:	2300      	movs	r3, #0
   83d52:	4605      	mov	r5, r0
   83d54:	4608      	mov	r0, r1
   83d56:	6023      	str	r3, [r4, #0]
   83d58:	f7fd f90a 	bl	80f70 <_isatty>
   83d5c:	1c43      	adds	r3, r0, #1
   83d5e:	d000      	beq.n	83d62 <_isatty_r+0x16>
   83d60:	bd38      	pop	{r3, r4, r5, pc}
   83d62:	6823      	ldr	r3, [r4, #0]
   83d64:	2b00      	cmp	r3, #0
   83d66:	d0fb      	beq.n	83d60 <_isatty_r+0x14>
   83d68:	602b      	str	r3, [r5, #0]
   83d6a:	bd38      	pop	{r3, r4, r5, pc}
   83d6c:	20070b6c 	.word	0x20070b6c

00083d70 <_lseek_r>:
   83d70:	b570      	push	{r4, r5, r6, lr}
   83d72:	4c08      	ldr	r4, [pc, #32]	; (83d94 <_lseek_r+0x24>)
   83d74:	4606      	mov	r6, r0
   83d76:	2500      	movs	r5, #0
   83d78:	4608      	mov	r0, r1
   83d7a:	4611      	mov	r1, r2
   83d7c:	461a      	mov	r2, r3
   83d7e:	6025      	str	r5, [r4, #0]
   83d80:	f7fd f8f8 	bl	80f74 <_lseek>
   83d84:	1c43      	adds	r3, r0, #1
   83d86:	d000      	beq.n	83d8a <_lseek_r+0x1a>
   83d88:	bd70      	pop	{r4, r5, r6, pc}
   83d8a:	6823      	ldr	r3, [r4, #0]
   83d8c:	2b00      	cmp	r3, #0
   83d8e:	d0fb      	beq.n	83d88 <_lseek_r+0x18>
   83d90:	6033      	str	r3, [r6, #0]
   83d92:	bd70      	pop	{r4, r5, r6, pc}
   83d94:	20070b6c 	.word	0x20070b6c

00083d98 <_read_r>:
   83d98:	b570      	push	{r4, r5, r6, lr}
   83d9a:	4c08      	ldr	r4, [pc, #32]	; (83dbc <_read_r+0x24>)
   83d9c:	4606      	mov	r6, r0
   83d9e:	2500      	movs	r5, #0
   83da0:	4608      	mov	r0, r1
   83da2:	4611      	mov	r1, r2
   83da4:	461a      	mov	r2, r3
   83da6:	6025      	str	r5, [r4, #0]
   83da8:	f7fc fad4 	bl	80354 <_read>
   83dac:	1c43      	adds	r3, r0, #1
   83dae:	d000      	beq.n	83db2 <_read_r+0x1a>
   83db0:	bd70      	pop	{r4, r5, r6, pc}
   83db2:	6823      	ldr	r3, [r4, #0]
   83db4:	2b00      	cmp	r3, #0
   83db6:	d0fb      	beq.n	83db0 <_read_r+0x18>
   83db8:	6033      	str	r3, [r6, #0]
   83dba:	bd70      	pop	{r4, r5, r6, pc}
   83dbc:	20070b6c 	.word	0x20070b6c

00083dc0 <__aeabi_uldivmod>:
   83dc0:	b94b      	cbnz	r3, 83dd6 <__aeabi_uldivmod+0x16>
   83dc2:	b942      	cbnz	r2, 83dd6 <__aeabi_uldivmod+0x16>
   83dc4:	2900      	cmp	r1, #0
   83dc6:	bf08      	it	eq
   83dc8:	2800      	cmpeq	r0, #0
   83dca:	d002      	beq.n	83dd2 <__aeabi_uldivmod+0x12>
   83dcc:	f04f 31ff 	mov.w	r1, #4294967295
   83dd0:	4608      	mov	r0, r1
   83dd2:	f000 b83b 	b.w	83e4c <__aeabi_idiv0>
   83dd6:	b082      	sub	sp, #8
   83dd8:	46ec      	mov	ip, sp
   83dda:	e92d 5000 	stmdb	sp!, {ip, lr}
   83dde:	f000 f81d 	bl	83e1c <__gnu_uldivmod_helper>
   83de2:	f8dd e004 	ldr.w	lr, [sp, #4]
   83de6:	b002      	add	sp, #8
   83de8:	bc0c      	pop	{r2, r3}
   83dea:	4770      	bx	lr

00083dec <__gnu_ldivmod_helper>:
   83dec:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83df0:	9e08      	ldr	r6, [sp, #32]
   83df2:	4614      	mov	r4, r2
   83df4:	461d      	mov	r5, r3
   83df6:	4680      	mov	r8, r0
   83df8:	4689      	mov	r9, r1
   83dfa:	f000 f829 	bl	83e50 <__divdi3>
   83dfe:	fb04 f301 	mul.w	r3, r4, r1
   83e02:	fba4 ab00 	umull	sl, fp, r4, r0
   83e06:	fb00 3205 	mla	r2, r0, r5, r3
   83e0a:	4493      	add	fp, r2
   83e0c:	ebb8 080a 	subs.w	r8, r8, sl
   83e10:	eb69 090b 	sbc.w	r9, r9, fp
   83e14:	e9c6 8900 	strd	r8, r9, [r6]
   83e18:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083e1c <__gnu_uldivmod_helper>:
   83e1c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83e20:	9e08      	ldr	r6, [sp, #32]
   83e22:	4614      	mov	r4, r2
   83e24:	461d      	mov	r5, r3
   83e26:	4680      	mov	r8, r0
   83e28:	4689      	mov	r9, r1
   83e2a:	f000 f961 	bl	840f0 <__udivdi3>
   83e2e:	fb00 f505 	mul.w	r5, r0, r5
   83e32:	fba0 ab04 	umull	sl, fp, r0, r4
   83e36:	fb04 5401 	mla	r4, r4, r1, r5
   83e3a:	44a3      	add	fp, r4
   83e3c:	ebb8 080a 	subs.w	r8, r8, sl
   83e40:	eb69 090b 	sbc.w	r9, r9, fp
   83e44:	e9c6 8900 	strd	r8, r9, [r6]
   83e48:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083e4c <__aeabi_idiv0>:
   83e4c:	4770      	bx	lr
   83e4e:	bf00      	nop

00083e50 <__divdi3>:
   83e50:	2900      	cmp	r1, #0
   83e52:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83e56:	f2c0 80a1 	blt.w	83f9c <__divdi3+0x14c>
   83e5a:	2400      	movs	r4, #0
   83e5c:	2b00      	cmp	r3, #0
   83e5e:	f2c0 8098 	blt.w	83f92 <__divdi3+0x142>
   83e62:	4615      	mov	r5, r2
   83e64:	4606      	mov	r6, r0
   83e66:	460f      	mov	r7, r1
   83e68:	2b00      	cmp	r3, #0
   83e6a:	d13f      	bne.n	83eec <__divdi3+0x9c>
   83e6c:	428a      	cmp	r2, r1
   83e6e:	d958      	bls.n	83f22 <__divdi3+0xd2>
   83e70:	fab2 f382 	clz	r3, r2
   83e74:	b14b      	cbz	r3, 83e8a <__divdi3+0x3a>
   83e76:	f1c3 0220 	rsb	r2, r3, #32
   83e7a:	fa01 f703 	lsl.w	r7, r1, r3
   83e7e:	fa20 f202 	lsr.w	r2, r0, r2
   83e82:	409d      	lsls	r5, r3
   83e84:	fa00 f603 	lsl.w	r6, r0, r3
   83e88:	4317      	orrs	r7, r2
   83e8a:	0c29      	lsrs	r1, r5, #16
   83e8c:	fbb7 f2f1 	udiv	r2, r7, r1
   83e90:	fb01 7712 	mls	r7, r1, r2, r7
   83e94:	b2a8      	uxth	r0, r5
   83e96:	fb00 f302 	mul.w	r3, r0, r2
   83e9a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83e9e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83ea2:	42bb      	cmp	r3, r7
   83ea4:	d909      	bls.n	83eba <__divdi3+0x6a>
   83ea6:	197f      	adds	r7, r7, r5
   83ea8:	f102 3cff 	add.w	ip, r2, #4294967295
   83eac:	f080 8105 	bcs.w	840ba <__divdi3+0x26a>
   83eb0:	42bb      	cmp	r3, r7
   83eb2:	f240 8102 	bls.w	840ba <__divdi3+0x26a>
   83eb6:	3a02      	subs	r2, #2
   83eb8:	442f      	add	r7, r5
   83eba:	1aff      	subs	r7, r7, r3
   83ebc:	fbb7 f3f1 	udiv	r3, r7, r1
   83ec0:	fb01 7113 	mls	r1, r1, r3, r7
   83ec4:	fb00 f003 	mul.w	r0, r0, r3
   83ec8:	b2b6      	uxth	r6, r6
   83eca:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83ece:	4288      	cmp	r0, r1
   83ed0:	d908      	bls.n	83ee4 <__divdi3+0x94>
   83ed2:	1949      	adds	r1, r1, r5
   83ed4:	f103 37ff 	add.w	r7, r3, #4294967295
   83ed8:	f080 80f1 	bcs.w	840be <__divdi3+0x26e>
   83edc:	4288      	cmp	r0, r1
   83ede:	f240 80ee 	bls.w	840be <__divdi3+0x26e>
   83ee2:	3b02      	subs	r3, #2
   83ee4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83ee8:	2300      	movs	r3, #0
   83eea:	e003      	b.n	83ef4 <__divdi3+0xa4>
   83eec:	428b      	cmp	r3, r1
   83eee:	d90a      	bls.n	83f06 <__divdi3+0xb6>
   83ef0:	2300      	movs	r3, #0
   83ef2:	461a      	mov	r2, r3
   83ef4:	4610      	mov	r0, r2
   83ef6:	4619      	mov	r1, r3
   83ef8:	b114      	cbz	r4, 83f00 <__divdi3+0xb0>
   83efa:	4240      	negs	r0, r0
   83efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83f00:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83f04:	4770      	bx	lr
   83f06:	fab3 f883 	clz	r8, r3
   83f0a:	f1b8 0f00 	cmp.w	r8, #0
   83f0e:	f040 8088 	bne.w	84022 <__divdi3+0x1d2>
   83f12:	428b      	cmp	r3, r1
   83f14:	d302      	bcc.n	83f1c <__divdi3+0xcc>
   83f16:	4282      	cmp	r2, r0
   83f18:	f200 80e2 	bhi.w	840e0 <__divdi3+0x290>
   83f1c:	2300      	movs	r3, #0
   83f1e:	2201      	movs	r2, #1
   83f20:	e7e8      	b.n	83ef4 <__divdi3+0xa4>
   83f22:	b912      	cbnz	r2, 83f2a <__divdi3+0xda>
   83f24:	2301      	movs	r3, #1
   83f26:	fbb3 f5f2 	udiv	r5, r3, r2
   83f2a:	fab5 f285 	clz	r2, r5
   83f2e:	2a00      	cmp	r2, #0
   83f30:	d13a      	bne.n	83fa8 <__divdi3+0x158>
   83f32:	1b7f      	subs	r7, r7, r5
   83f34:	0c28      	lsrs	r0, r5, #16
   83f36:	fa1f fc85 	uxth.w	ip, r5
   83f3a:	2301      	movs	r3, #1
   83f3c:	fbb7 f1f0 	udiv	r1, r7, r0
   83f40:	fb00 7711 	mls	r7, r0, r1, r7
   83f44:	fb0c f201 	mul.w	r2, ip, r1
   83f48:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83f4c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83f50:	42ba      	cmp	r2, r7
   83f52:	d907      	bls.n	83f64 <__divdi3+0x114>
   83f54:	197f      	adds	r7, r7, r5
   83f56:	f101 38ff 	add.w	r8, r1, #4294967295
   83f5a:	d202      	bcs.n	83f62 <__divdi3+0x112>
   83f5c:	42ba      	cmp	r2, r7
   83f5e:	f200 80c4 	bhi.w	840ea <__divdi3+0x29a>
   83f62:	4641      	mov	r1, r8
   83f64:	1abf      	subs	r7, r7, r2
   83f66:	fbb7 f2f0 	udiv	r2, r7, r0
   83f6a:	fb00 7012 	mls	r0, r0, r2, r7
   83f6e:	fb0c fc02 	mul.w	ip, ip, r2
   83f72:	b2b6      	uxth	r6, r6
   83f74:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83f78:	4584      	cmp	ip, r0
   83f7a:	d907      	bls.n	83f8c <__divdi3+0x13c>
   83f7c:	1940      	adds	r0, r0, r5
   83f7e:	f102 37ff 	add.w	r7, r2, #4294967295
   83f82:	d202      	bcs.n	83f8a <__divdi3+0x13a>
   83f84:	4584      	cmp	ip, r0
   83f86:	f200 80ae 	bhi.w	840e6 <__divdi3+0x296>
   83f8a:	463a      	mov	r2, r7
   83f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83f90:	e7b0      	b.n	83ef4 <__divdi3+0xa4>
   83f92:	43e4      	mvns	r4, r4
   83f94:	4252      	negs	r2, r2
   83f96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83f9a:	e762      	b.n	83e62 <__divdi3+0x12>
   83f9c:	4240      	negs	r0, r0
   83f9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83fa2:	f04f 34ff 	mov.w	r4, #4294967295
   83fa6:	e759      	b.n	83e5c <__divdi3+0xc>
   83fa8:	4095      	lsls	r5, r2
   83faa:	f1c2 0920 	rsb	r9, r2, #32
   83fae:	fa27 f109 	lsr.w	r1, r7, r9
   83fb2:	fa26 f909 	lsr.w	r9, r6, r9
   83fb6:	4097      	lsls	r7, r2
   83fb8:	0c28      	lsrs	r0, r5, #16
   83fba:	fbb1 f8f0 	udiv	r8, r1, r0
   83fbe:	fb00 1118 	mls	r1, r0, r8, r1
   83fc2:	fa1f fc85 	uxth.w	ip, r5
   83fc6:	fb0c f308 	mul.w	r3, ip, r8
   83fca:	ea49 0907 	orr.w	r9, r9, r7
   83fce:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83fd2:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83fd6:	428b      	cmp	r3, r1
   83fd8:	fa06 f602 	lsl.w	r6, r6, r2
   83fdc:	d908      	bls.n	83ff0 <__divdi3+0x1a0>
   83fde:	1949      	adds	r1, r1, r5
   83fe0:	f108 32ff 	add.w	r2, r8, #4294967295
   83fe4:	d27a      	bcs.n	840dc <__divdi3+0x28c>
   83fe6:	428b      	cmp	r3, r1
   83fe8:	d978      	bls.n	840dc <__divdi3+0x28c>
   83fea:	f1a8 0802 	sub.w	r8, r8, #2
   83fee:	4429      	add	r1, r5
   83ff0:	1ac9      	subs	r1, r1, r3
   83ff2:	fbb1 f3f0 	udiv	r3, r1, r0
   83ff6:	fb00 1713 	mls	r7, r0, r3, r1
   83ffa:	fb0c f203 	mul.w	r2, ip, r3
   83ffe:	fa1f f989 	uxth.w	r9, r9
   84002:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   84006:	42ba      	cmp	r2, r7
   84008:	d907      	bls.n	8401a <__divdi3+0x1ca>
   8400a:	197f      	adds	r7, r7, r5
   8400c:	f103 31ff 	add.w	r1, r3, #4294967295
   84010:	d260      	bcs.n	840d4 <__divdi3+0x284>
   84012:	42ba      	cmp	r2, r7
   84014:	d95e      	bls.n	840d4 <__divdi3+0x284>
   84016:	3b02      	subs	r3, #2
   84018:	442f      	add	r7, r5
   8401a:	1abf      	subs	r7, r7, r2
   8401c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84020:	e78c      	b.n	83f3c <__divdi3+0xec>
   84022:	f1c8 0220 	rsb	r2, r8, #32
   84026:	fa25 f102 	lsr.w	r1, r5, r2
   8402a:	fa03 fc08 	lsl.w	ip, r3, r8
   8402e:	fa27 f302 	lsr.w	r3, r7, r2
   84032:	fa20 f202 	lsr.w	r2, r0, r2
   84036:	fa07 f708 	lsl.w	r7, r7, r8
   8403a:	ea41 0c0c 	orr.w	ip, r1, ip
   8403e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   84042:	fbb3 f1f9 	udiv	r1, r3, r9
   84046:	fb09 3311 	mls	r3, r9, r1, r3
   8404a:	fa1f fa8c 	uxth.w	sl, ip
   8404e:	fb0a fb01 	mul.w	fp, sl, r1
   84052:	4317      	orrs	r7, r2
   84054:	0c3a      	lsrs	r2, r7, #16
   84056:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   8405a:	459b      	cmp	fp, r3
   8405c:	fa05 f008 	lsl.w	r0, r5, r8
   84060:	d908      	bls.n	84074 <__divdi3+0x224>
   84062:	eb13 030c 	adds.w	r3, r3, ip
   84066:	f101 32ff 	add.w	r2, r1, #4294967295
   8406a:	d235      	bcs.n	840d8 <__divdi3+0x288>
   8406c:	459b      	cmp	fp, r3
   8406e:	d933      	bls.n	840d8 <__divdi3+0x288>
   84070:	3902      	subs	r1, #2
   84072:	4463      	add	r3, ip
   84074:	ebcb 0303 	rsb	r3, fp, r3
   84078:	fbb3 f2f9 	udiv	r2, r3, r9
   8407c:	fb09 3312 	mls	r3, r9, r2, r3
   84080:	fb0a fa02 	mul.w	sl, sl, r2
   84084:	b2bf      	uxth	r7, r7
   84086:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   8408a:	45ba      	cmp	sl, r7
   8408c:	d908      	bls.n	840a0 <__divdi3+0x250>
   8408e:	eb17 070c 	adds.w	r7, r7, ip
   84092:	f102 33ff 	add.w	r3, r2, #4294967295
   84096:	d21b      	bcs.n	840d0 <__divdi3+0x280>
   84098:	45ba      	cmp	sl, r7
   8409a:	d919      	bls.n	840d0 <__divdi3+0x280>
   8409c:	3a02      	subs	r2, #2
   8409e:	4467      	add	r7, ip
   840a0:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   840a4:	fba5 0100 	umull	r0, r1, r5, r0
   840a8:	ebca 0707 	rsb	r7, sl, r7
   840ac:	428f      	cmp	r7, r1
   840ae:	f04f 0300 	mov.w	r3, #0
   840b2:	d30a      	bcc.n	840ca <__divdi3+0x27a>
   840b4:	d005      	beq.n	840c2 <__divdi3+0x272>
   840b6:	462a      	mov	r2, r5
   840b8:	e71c      	b.n	83ef4 <__divdi3+0xa4>
   840ba:	4662      	mov	r2, ip
   840bc:	e6fd      	b.n	83eba <__divdi3+0x6a>
   840be:	463b      	mov	r3, r7
   840c0:	e710      	b.n	83ee4 <__divdi3+0x94>
   840c2:	fa06 f608 	lsl.w	r6, r6, r8
   840c6:	4286      	cmp	r6, r0
   840c8:	d2f5      	bcs.n	840b6 <__divdi3+0x266>
   840ca:	1e6a      	subs	r2, r5, #1
   840cc:	2300      	movs	r3, #0
   840ce:	e711      	b.n	83ef4 <__divdi3+0xa4>
   840d0:	461a      	mov	r2, r3
   840d2:	e7e5      	b.n	840a0 <__divdi3+0x250>
   840d4:	460b      	mov	r3, r1
   840d6:	e7a0      	b.n	8401a <__divdi3+0x1ca>
   840d8:	4611      	mov	r1, r2
   840da:	e7cb      	b.n	84074 <__divdi3+0x224>
   840dc:	4690      	mov	r8, r2
   840de:	e787      	b.n	83ff0 <__divdi3+0x1a0>
   840e0:	4643      	mov	r3, r8
   840e2:	4642      	mov	r2, r8
   840e4:	e706      	b.n	83ef4 <__divdi3+0xa4>
   840e6:	3a02      	subs	r2, #2
   840e8:	e750      	b.n	83f8c <__divdi3+0x13c>
   840ea:	3902      	subs	r1, #2
   840ec:	442f      	add	r7, r5
   840ee:	e739      	b.n	83f64 <__divdi3+0x114>

000840f0 <__udivdi3>:
   840f0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   840f4:	4614      	mov	r4, r2
   840f6:	4605      	mov	r5, r0
   840f8:	460e      	mov	r6, r1
   840fa:	2b00      	cmp	r3, #0
   840fc:	d143      	bne.n	84186 <__udivdi3+0x96>
   840fe:	428a      	cmp	r2, r1
   84100:	d953      	bls.n	841aa <__udivdi3+0xba>
   84102:	fab2 f782 	clz	r7, r2
   84106:	b157      	cbz	r7, 8411e <__udivdi3+0x2e>
   84108:	f1c7 0620 	rsb	r6, r7, #32
   8410c:	fa20 f606 	lsr.w	r6, r0, r6
   84110:	fa01 f307 	lsl.w	r3, r1, r7
   84114:	fa02 f407 	lsl.w	r4, r2, r7
   84118:	fa00 f507 	lsl.w	r5, r0, r7
   8411c:	431e      	orrs	r6, r3
   8411e:	0c21      	lsrs	r1, r4, #16
   84120:	fbb6 f2f1 	udiv	r2, r6, r1
   84124:	fb01 6612 	mls	r6, r1, r2, r6
   84128:	b2a0      	uxth	r0, r4
   8412a:	fb00 f302 	mul.w	r3, r0, r2
   8412e:	0c2f      	lsrs	r7, r5, #16
   84130:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   84134:	42b3      	cmp	r3, r6
   84136:	d909      	bls.n	8414c <__udivdi3+0x5c>
   84138:	1936      	adds	r6, r6, r4
   8413a:	f102 37ff 	add.w	r7, r2, #4294967295
   8413e:	f080 80fd 	bcs.w	8433c <__udivdi3+0x24c>
   84142:	42b3      	cmp	r3, r6
   84144:	f240 80fa 	bls.w	8433c <__udivdi3+0x24c>
   84148:	3a02      	subs	r2, #2
   8414a:	4426      	add	r6, r4
   8414c:	1af6      	subs	r6, r6, r3
   8414e:	fbb6 f3f1 	udiv	r3, r6, r1
   84152:	fb01 6113 	mls	r1, r1, r3, r6
   84156:	fb00 f003 	mul.w	r0, r0, r3
   8415a:	b2ad      	uxth	r5, r5
   8415c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   84160:	4288      	cmp	r0, r1
   84162:	d908      	bls.n	84176 <__udivdi3+0x86>
   84164:	1909      	adds	r1, r1, r4
   84166:	f103 36ff 	add.w	r6, r3, #4294967295
   8416a:	f080 80e9 	bcs.w	84340 <__udivdi3+0x250>
   8416e:	4288      	cmp	r0, r1
   84170:	f240 80e6 	bls.w	84340 <__udivdi3+0x250>
   84174:	3b02      	subs	r3, #2
   84176:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8417a:	2300      	movs	r3, #0
   8417c:	4610      	mov	r0, r2
   8417e:	4619      	mov	r1, r3
   84180:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84184:	4770      	bx	lr
   84186:	428b      	cmp	r3, r1
   84188:	d84c      	bhi.n	84224 <__udivdi3+0x134>
   8418a:	fab3 f683 	clz	r6, r3
   8418e:	2e00      	cmp	r6, #0
   84190:	d14f      	bne.n	84232 <__udivdi3+0x142>
   84192:	428b      	cmp	r3, r1
   84194:	d302      	bcc.n	8419c <__udivdi3+0xac>
   84196:	4282      	cmp	r2, r0
   84198:	f200 80dd 	bhi.w	84356 <__udivdi3+0x266>
   8419c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   841a0:	2300      	movs	r3, #0
   841a2:	2201      	movs	r2, #1
   841a4:	4610      	mov	r0, r2
   841a6:	4619      	mov	r1, r3
   841a8:	4770      	bx	lr
   841aa:	b912      	cbnz	r2, 841b2 <__udivdi3+0xc2>
   841ac:	2401      	movs	r4, #1
   841ae:	fbb4 f4f2 	udiv	r4, r4, r2
   841b2:	fab4 f284 	clz	r2, r4
   841b6:	2a00      	cmp	r2, #0
   841b8:	f040 8082 	bne.w	842c0 <__udivdi3+0x1d0>
   841bc:	1b09      	subs	r1, r1, r4
   841be:	0c26      	lsrs	r6, r4, #16
   841c0:	b2a7      	uxth	r7, r4
   841c2:	2301      	movs	r3, #1
   841c4:	fbb1 f0f6 	udiv	r0, r1, r6
   841c8:	fb06 1110 	mls	r1, r6, r0, r1
   841cc:	fb07 f200 	mul.w	r2, r7, r0
   841d0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   841d4:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   841d8:	428a      	cmp	r2, r1
   841da:	d907      	bls.n	841ec <__udivdi3+0xfc>
   841dc:	1909      	adds	r1, r1, r4
   841de:	f100 3cff 	add.w	ip, r0, #4294967295
   841e2:	d202      	bcs.n	841ea <__udivdi3+0xfa>
   841e4:	428a      	cmp	r2, r1
   841e6:	f200 80c8 	bhi.w	8437a <__udivdi3+0x28a>
   841ea:	4660      	mov	r0, ip
   841ec:	1a89      	subs	r1, r1, r2
   841ee:	fbb1 f2f6 	udiv	r2, r1, r6
   841f2:	fb06 1112 	mls	r1, r6, r2, r1
   841f6:	fb07 f702 	mul.w	r7, r7, r2
   841fa:	b2ad      	uxth	r5, r5
   841fc:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   84200:	42af      	cmp	r7, r5
   84202:	d908      	bls.n	84216 <__udivdi3+0x126>
   84204:	192c      	adds	r4, r5, r4
   84206:	f102 31ff 	add.w	r1, r2, #4294967295
   8420a:	f080 809b 	bcs.w	84344 <__udivdi3+0x254>
   8420e:	42a7      	cmp	r7, r4
   84210:	f240 8098 	bls.w	84344 <__udivdi3+0x254>
   84214:	3a02      	subs	r2, #2
   84216:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   8421a:	4610      	mov	r0, r2
   8421c:	4619      	mov	r1, r3
   8421e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84222:	4770      	bx	lr
   84224:	2300      	movs	r3, #0
   84226:	461a      	mov	r2, r3
   84228:	4610      	mov	r0, r2
   8422a:	4619      	mov	r1, r3
   8422c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84230:	4770      	bx	lr
   84232:	f1c6 0520 	rsb	r5, r6, #32
   84236:	fa22 f705 	lsr.w	r7, r2, r5
   8423a:	fa03 f406 	lsl.w	r4, r3, r6
   8423e:	fa21 f305 	lsr.w	r3, r1, r5
   84242:	fa01 fb06 	lsl.w	fp, r1, r6
   84246:	fa20 f505 	lsr.w	r5, r0, r5
   8424a:	433c      	orrs	r4, r7
   8424c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   84250:	fbb3 fcf8 	udiv	ip, r3, r8
   84254:	fb08 331c 	mls	r3, r8, ip, r3
   84258:	fa1f f984 	uxth.w	r9, r4
   8425c:	fb09 fa0c 	mul.w	sl, r9, ip
   84260:	ea45 0b0b 	orr.w	fp, r5, fp
   84264:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84268:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8426c:	459a      	cmp	sl, r3
   8426e:	fa02 f206 	lsl.w	r2, r2, r6
   84272:	d904      	bls.n	8427e <__udivdi3+0x18e>
   84274:	191b      	adds	r3, r3, r4
   84276:	f10c 35ff 	add.w	r5, ip, #4294967295
   8427a:	d36f      	bcc.n	8435c <__udivdi3+0x26c>
   8427c:	46ac      	mov	ip, r5
   8427e:	ebca 0303 	rsb	r3, sl, r3
   84282:	fbb3 f5f8 	udiv	r5, r3, r8
   84286:	fb08 3315 	mls	r3, r8, r5, r3
   8428a:	fb09 f905 	mul.w	r9, r9, r5
   8428e:	fa1f fb8b 	uxth.w	fp, fp
   84292:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   84296:	45b9      	cmp	r9, r7
   84298:	d904      	bls.n	842a4 <__udivdi3+0x1b4>
   8429a:	193f      	adds	r7, r7, r4
   8429c:	f105 33ff 	add.w	r3, r5, #4294967295
   842a0:	d362      	bcc.n	84368 <__udivdi3+0x278>
   842a2:	461d      	mov	r5, r3
   842a4:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   842a8:	fbac 2302 	umull	r2, r3, ip, r2
   842ac:	ebc9 0707 	rsb	r7, r9, r7
   842b0:	429f      	cmp	r7, r3
   842b2:	f04f 0500 	mov.w	r5, #0
   842b6:	d34a      	bcc.n	8434e <__udivdi3+0x25e>
   842b8:	d046      	beq.n	84348 <__udivdi3+0x258>
   842ba:	4662      	mov	r2, ip
   842bc:	462b      	mov	r3, r5
   842be:	e75d      	b.n	8417c <__udivdi3+0x8c>
   842c0:	4094      	lsls	r4, r2
   842c2:	f1c2 0920 	rsb	r9, r2, #32
   842c6:	fa21 fc09 	lsr.w	ip, r1, r9
   842ca:	4091      	lsls	r1, r2
   842cc:	fa20 f909 	lsr.w	r9, r0, r9
   842d0:	0c26      	lsrs	r6, r4, #16
   842d2:	fbbc f8f6 	udiv	r8, ip, r6
   842d6:	fb06 cc18 	mls	ip, r6, r8, ip
   842da:	b2a7      	uxth	r7, r4
   842dc:	fb07 f308 	mul.w	r3, r7, r8
   842e0:	ea49 0901 	orr.w	r9, r9, r1
   842e4:	ea4f 4119 	mov.w	r1, r9, lsr #16
   842e8:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   842ec:	4563      	cmp	r3, ip
   842ee:	fa00 f502 	lsl.w	r5, r0, r2
   842f2:	d909      	bls.n	84308 <__udivdi3+0x218>
   842f4:	eb1c 0c04 	adds.w	ip, ip, r4
   842f8:	f108 32ff 	add.w	r2, r8, #4294967295
   842fc:	d23b      	bcs.n	84376 <__udivdi3+0x286>
   842fe:	4563      	cmp	r3, ip
   84300:	d939      	bls.n	84376 <__udivdi3+0x286>
   84302:	f1a8 0802 	sub.w	r8, r8, #2
   84306:	44a4      	add	ip, r4
   84308:	ebc3 0c0c 	rsb	ip, r3, ip
   8430c:	fbbc f3f6 	udiv	r3, ip, r6
   84310:	fb06 c113 	mls	r1, r6, r3, ip
   84314:	fb07 f203 	mul.w	r2, r7, r3
   84318:	fa1f f989 	uxth.w	r9, r9
   8431c:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   84320:	428a      	cmp	r2, r1
   84322:	d907      	bls.n	84334 <__udivdi3+0x244>
   84324:	1909      	adds	r1, r1, r4
   84326:	f103 30ff 	add.w	r0, r3, #4294967295
   8432a:	d222      	bcs.n	84372 <__udivdi3+0x282>
   8432c:	428a      	cmp	r2, r1
   8432e:	d920      	bls.n	84372 <__udivdi3+0x282>
   84330:	3b02      	subs	r3, #2
   84332:	4421      	add	r1, r4
   84334:	1a89      	subs	r1, r1, r2
   84336:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8433a:	e743      	b.n	841c4 <__udivdi3+0xd4>
   8433c:	463a      	mov	r2, r7
   8433e:	e705      	b.n	8414c <__udivdi3+0x5c>
   84340:	4633      	mov	r3, r6
   84342:	e718      	b.n	84176 <__udivdi3+0x86>
   84344:	460a      	mov	r2, r1
   84346:	e766      	b.n	84216 <__udivdi3+0x126>
   84348:	40b0      	lsls	r0, r6
   8434a:	4290      	cmp	r0, r2
   8434c:	d2b5      	bcs.n	842ba <__udivdi3+0x1ca>
   8434e:	f10c 32ff 	add.w	r2, ip, #4294967295
   84352:	2300      	movs	r3, #0
   84354:	e712      	b.n	8417c <__udivdi3+0x8c>
   84356:	4633      	mov	r3, r6
   84358:	4632      	mov	r2, r6
   8435a:	e70f      	b.n	8417c <__udivdi3+0x8c>
   8435c:	459a      	cmp	sl, r3
   8435e:	d98d      	bls.n	8427c <__udivdi3+0x18c>
   84360:	f1ac 0c02 	sub.w	ip, ip, #2
   84364:	4423      	add	r3, r4
   84366:	e78a      	b.n	8427e <__udivdi3+0x18e>
   84368:	45b9      	cmp	r9, r7
   8436a:	d99a      	bls.n	842a2 <__udivdi3+0x1b2>
   8436c:	3d02      	subs	r5, #2
   8436e:	4427      	add	r7, r4
   84370:	e798      	b.n	842a4 <__udivdi3+0x1b4>
   84372:	4603      	mov	r3, r0
   84374:	e7de      	b.n	84334 <__udivdi3+0x244>
   84376:	4690      	mov	r8, r2
   84378:	e7c6      	b.n	84308 <__udivdi3+0x218>
   8437a:	3802      	subs	r0, #2
   8437c:	4421      	add	r1, r4
   8437e:	e735      	b.n	841ec <__udivdi3+0xfc>
   84380:	72617453 	.word	0x72617453
   84384:	00726174 	.word	0x00726174
   84388:	64252030 	.word	0x64252030
   8438c:	0000000a 	.word	0x0000000a
   84390:	25203033 	.word	0x25203033
   84394:	00000a64 	.word	0x00000a64
   84398:	25203534 	.word	0x25203534
   8439c:	00000a64 	.word	0x00000a64
   843a0:	25203036 	.word	0x25203036
   843a4:	00000a64 	.word	0x00000a64
   843a8:	25203039 	.word	0x25203039
   843ac:	00000a64 	.word	0x00000a64
   843b0:	20303331 	.word	0x20303331
   843b4:	000a6425 	.word	0x000a6425
   843b8:	20303831 	.word	0x20303831
   843bc:	000a6425 	.word	0x000a6425
   843c0:	20303732 	.word	0x20303732
   843c4:	000a6425 	.word	0x000a6425
   843c8:	20303633 	.word	0x20303633
   843cc:	000a6425 	.word	0x000a6425
   843d0:	00000001 	.word	0x00000001
   843d4:	00000002 	.word	0x00000002
   843d8:	00000004 	.word	0x00000004
   843dc:	00000008 	.word	0x00000008
   843e0:	00000010 	.word	0x00000010
   843e4:	00000020 	.word	0x00000020
   843e8:	00000040 	.word	0x00000040
   843ec:	00000080 	.word	0x00000080
   843f0:	00000100 	.word	0x00000100
   843f4:	00000200 	.word	0x00000200
   843f8:	00000400 	.word	0x00000400
   843fc:	00000043 	.word	0x00000043

00084400 <_global_impure_ptr>:
   84400:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   84410:	46454443 00000000 33323130 37363534     CDEF....01234567
   84420:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84430:	0000296c                                l)..

00084434 <zeroes.6721>:
   84434:	30303030 30303030 30303030 30303030     0000000000000000

00084444 <blanks.6720>:
   84444:	20202020 20202020 20202020 20202020                     

00084454 <_init>:
   84454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84456:	bf00      	nop
   84458:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8445a:	bc08      	pop	{r3}
   8445c:	469e      	mov	lr, r3
   8445e:	4770      	bx	lr

00084460 <__init_array_start>:
   84460:	00082475 	.word	0x00082475

00084464 <__frame_dummy_init_array_entry>:
   84464:	00080119                                ....

00084468 <_fini>:
   84468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8446a:	bf00      	nop
   8446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8446e:	bc08      	pop	{r3}
   84470:	469e      	mov	lr, r3
   84472:	4770      	bx	lr

00084474 <__fini_array_start>:
   84474:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <g_interrupt_enabled>:
20070138:	00000001                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	000843fc 00000000 00000000 00000000     .C..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00083b85                                .;..
