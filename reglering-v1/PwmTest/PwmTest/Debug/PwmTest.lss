
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f3c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083f3c  00083f3c  0000bf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00083f44  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001cc  200709a4  000848e8  000109a4  2**2
                  ALLOC
  4 .stack        00002000  20070b70  00084ab4  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001052e  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002add  00000000  00000000  00020f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005428  00000000  00000000  00023a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c40  00000000  00000000  00028e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ae8  00000000  00000000  00029a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019668  00000000  00000000  0002a583  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012a76  00000000  00000000  00043beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000618f8  00000000  00000000  00056661  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002418  00000000  00000000  000b7f5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b70 	.word	0x20072b70
   80004:	00080df5 	.word	0x00080df5
   80008:	00080df1 	.word	0x00080df1
   8000c:	00080df1 	.word	0x00080df1
   80010:	00080df1 	.word	0x00080df1
   80014:	00080df1 	.word	0x00080df1
   80018:	00080df1 	.word	0x00080df1
	...
   8002c:	00080df1 	.word	0x00080df1
   80030:	00080df1 	.word	0x00080df1
   80034:	00000000 	.word	0x00000000
   80038:	00080df1 	.word	0x00080df1
   8003c:	00080df1 	.word	0x00080df1
   80040:	00080df1 	.word	0x00080df1
   80044:	00080df1 	.word	0x00080df1
   80048:	00080df1 	.word	0x00080df1
   8004c:	00080df1 	.word	0x00080df1
   80050:	00080df1 	.word	0x00080df1
   80054:	00080df1 	.word	0x00080df1
   80058:	00080df1 	.word	0x00080df1
   8005c:	00080df1 	.word	0x00080df1
   80060:	00080df1 	.word	0x00080df1
   80064:	00080df1 	.word	0x00080df1
   80068:	00000000 	.word	0x00000000
   8006c:	00080b95 	.word	0x00080b95
   80070:	00080ba9 	.word	0x00080ba9
   80074:	00080bbd 	.word	0x00080bbd
   80078:	00080bd1 	.word	0x00080bd1
	...
   80084:	000803cd 	.word	0x000803cd
   80088:	00080df1 	.word	0x00080df1
   8008c:	00080df1 	.word	0x00080df1
   80090:	00080df1 	.word	0x00080df1
   80094:	00080df1 	.word	0x00080df1
   80098:	00080df1 	.word	0x00080df1
   8009c:	00080df1 	.word	0x00080df1
   800a0:	00080df1 	.word	0x00080df1
   800a4:	00000000 	.word	0x00000000
   800a8:	00080df1 	.word	0x00080df1
   800ac:	00080df1 	.word	0x00080df1
   800b0:	00080df1 	.word	0x00080df1
   800b4:	00080df1 	.word	0x00080df1
   800b8:	00080df1 	.word	0x00080df1
   800bc:	00080df1 	.word	0x00080df1
   800c0:	00080df1 	.word	0x00080df1
   800c4:	00080df1 	.word	0x00080df1
   800c8:	00080df1 	.word	0x00080df1
   800cc:	00080df1 	.word	0x00080df1
   800d0:	00080df1 	.word	0x00080df1
   800d4:	00080df1 	.word	0x00080df1
   800d8:	00080df1 	.word	0x00080df1
   800dc:	00080df1 	.word	0x00080df1
   800e0:	00080df1 	.word	0x00080df1
   800e4:	00080df1 	.word	0x00080df1
   800e8:	00080df1 	.word	0x00080df1
   800ec:	00080df1 	.word	0x00080df1
   800f0:	00080df1 	.word	0x00080df1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	00083f44 	.word	0x00083f44

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083f44 	.word	0x00083f44
   8013c:	200709a8 	.word	0x200709a8
   80140:	00083f44 	.word	0x00083f44
   80144:	00000000 	.word	0x00000000

00080148 <main>:
#include "PID_move.h"
#include "MathFunctions.h"
#include "confTimer.h"

int main(void)
{
   80148:	b508      	push	{r3, lr}
	/* Initialize the SAM system */
	SystemInit();
   8014a:	4b10      	ldr	r3, [pc, #64]	; (8018c <main+0x44>)
   8014c:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   8014e:	4b10      	ldr	r3, [pc, #64]	; (80190 <main+0x48>)
   80150:	4798      	blx	r3
	configureConsole();
   80152:	4b10      	ldr	r3, [pc, #64]	; (80194 <main+0x4c>)
   80154:	4798      	blx	r3
	configInterrupts();
   80156:	4b10      	ldr	r3, [pc, #64]	; (80198 <main+0x50>)
   80158:	4798      	blx	r3
	PWM_init();
   8015a:	4b10      	ldr	r3, [pc, #64]	; (8019c <main+0x54>)
   8015c:	4798      	blx	r3
	printf("Startar");
   8015e:	4810      	ldr	r0, [pc, #64]	; (801a0 <main+0x58>)
   80160:	4b10      	ldr	r3, [pc, #64]	; (801a4 <main+0x5c>)
   80162:	4798      	blx	r3
	configureTC();
   80164:	4b10      	ldr	r3, [pc, #64]	; (801a8 <main+0x60>)
   80166:	4798      	blx	r3
    delay_s(2);
   80168:	4810      	ldr	r0, [pc, #64]	; (801ac <main+0x64>)
   8016a:	4b11      	ldr	r3, [pc, #68]	; (801b0 <main+0x68>)
   8016c:	4798      	blx	r3

	
	while (1)
	{

        printf("%d\n", tc_read_rc(TC0,0));
   8016e:	4e11      	ldr	r6, [pc, #68]	; (801b4 <main+0x6c>)
   80170:	4d11      	ldr	r5, [pc, #68]	; (801b8 <main+0x70>)
   80172:	4c12      	ldr	r4, [pc, #72]	; (801bc <main+0x74>)
   80174:	4630      	mov	r0, r6
   80176:	2100      	movs	r1, #0
   80178:	47a8      	blx	r5
   8017a:	4601      	mov	r1, r0
   8017c:	4620      	mov	r0, r4
   8017e:	4b09      	ldr	r3, [pc, #36]	; (801a4 <main+0x5c>)
   80180:	4798      	blx	r3
		delay_us(300);
   80182:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   80186:	4b0a      	ldr	r3, [pc, #40]	; (801b0 <main+0x68>)
   80188:	4798      	blx	r3
   8018a:	e7f3      	b.n	80174 <main+0x2c>
   8018c:	2007000d 	.word	0x2007000d
   80190:	00080829 	.word	0x00080829
   80194:	000805b9 	.word	0x000805b9
   80198:	000806a1 	.word	0x000806a1
   8019c:	000807cd 	.word	0x000807cd
   801a0:	00083e88 	.word	0x00083e88
   801a4:	00080f45 	.word	0x00080f45
   801a8:	00080439 	.word	0x00080439
   801ac:	00b71b00 	.word	0x00b71b00
   801b0:	20070001 	.word	0x20070001
   801b4:	40080000 	.word	0x40080000
   801b8:	0008033d 	.word	0x0008033d
   801bc:	00083e90 	.word	0x00083e90

000801c0 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   801c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801c4:	b083      	sub	sp, #12
   801c6:	4605      	mov	r5, r0
	while (len) {
   801c8:	4690      	mov	r8, r2
   801ca:	2a00      	cmp	r2, #0
   801cc:	d047      	beq.n	8025e <usart_serial_read_packet+0x9e>
   801ce:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801d0:	4f25      	ldr	r7, [pc, #148]	; (80268 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   801d2:	4c26      	ldr	r4, [pc, #152]	; (8026c <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801d4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80280 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   801d8:	f8df b094 	ldr.w	fp, [pc, #148]	; 80270 <usart_serial_read_packet+0xb0>
   801dc:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   801e0:	2300      	movs	r3, #0
   801e2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801e4:	4b22      	ldr	r3, [pc, #136]	; (80270 <usart_serial_read_packet+0xb0>)
   801e6:	429d      	cmp	r5, r3
   801e8:	d106      	bne.n	801f8 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   801ea:	4658      	mov	r0, fp
   801ec:	4649      	mov	r1, r9
   801ee:	4b21      	ldr	r3, [pc, #132]	; (80274 <usart_serial_read_packet+0xb4>)
   801f0:	4798      	blx	r3
   801f2:	2800      	cmp	r0, #0
   801f4:	d1f9      	bne.n	801ea <usart_serial_read_packet+0x2a>
   801f6:	e019      	b.n	8022c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801f8:	4b1f      	ldr	r3, [pc, #124]	; (80278 <usart_serial_read_packet+0xb8>)
   801fa:	429d      	cmp	r5, r3
   801fc:	d109      	bne.n	80212 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   801fe:	4699      	mov	r9, r3
   80200:	4648      	mov	r0, r9
   80202:	a901      	add	r1, sp, #4
   80204:	47a0      	blx	r4
   80206:	2800      	cmp	r0, #0
   80208:	d1fa      	bne.n	80200 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   8020a:	9b01      	ldr	r3, [sp, #4]
   8020c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80210:	e017      	b.n	80242 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80212:	4b1a      	ldr	r3, [pc, #104]	; (8027c <usart_serial_read_packet+0xbc>)
   80214:	429d      	cmp	r5, r3
   80216:	d109      	bne.n	8022c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80218:	4699      	mov	r9, r3
   8021a:	4648      	mov	r0, r9
   8021c:	a901      	add	r1, sp, #4
   8021e:	47a0      	blx	r4
   80220:	2800      	cmp	r0, #0
   80222:	d1fa      	bne.n	8021a <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80224:	9b01      	ldr	r3, [sp, #4]
   80226:	f806 3c01 	strb.w	r3, [r6, #-1]
   8022a:	e014      	b.n	80256 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8022c:	4555      	cmp	r5, sl
   8022e:	d108      	bne.n	80242 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80230:	4650      	mov	r0, sl
   80232:	a901      	add	r1, sp, #4
   80234:	47a0      	blx	r4
   80236:	2800      	cmp	r0, #0
   80238:	d1fa      	bne.n	80230 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   8023a:	9b01      	ldr	r3, [sp, #4]
   8023c:	f806 3c01 	strb.w	r3, [r6, #-1]
   80240:	e009      	b.n	80256 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80242:	42bd      	cmp	r5, r7
   80244:	d107      	bne.n	80256 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80246:	4638      	mov	r0, r7
   80248:	a901      	add	r1, sp, #4
   8024a:	47a0      	blx	r4
   8024c:	2800      	cmp	r0, #0
   8024e:	d1fa      	bne.n	80246 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80250:	9b01      	ldr	r3, [sp, #4]
   80252:	f806 3c01 	strb.w	r3, [r6, #-1]
   80256:	3601      	adds	r6, #1
   80258:	f1b8 0801 	subs.w	r8, r8, #1
   8025c:	d1be      	bne.n	801dc <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8025e:	2000      	movs	r0, #0
   80260:	b003      	add	sp, #12
   80262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80266:	bf00      	nop
   80268:	400a4000 	.word	0x400a4000
   8026c:	000803b5 	.word	0x000803b5
   80270:	400e0800 	.word	0x400e0800
   80274:	0008038d 	.word	0x0008038d
   80278:	40098000 	.word	0x40098000
   8027c:	4009c000 	.word	0x4009c000
   80280:	400a0000 	.word	0x400a0000

00080284 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80288:	460c      	mov	r4, r1
   8028a:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   8028c:	b960      	cbnz	r0, 802a8 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8028e:	2a00      	cmp	r2, #0
   80290:	dd0e      	ble.n	802b0 <_read+0x2c>
   80292:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80294:	4e09      	ldr	r6, [pc, #36]	; (802bc <_read+0x38>)
   80296:	4d0a      	ldr	r5, [pc, #40]	; (802c0 <_read+0x3c>)
   80298:	6830      	ldr	r0, [r6, #0]
   8029a:	4621      	mov	r1, r4
   8029c:	682b      	ldr	r3, [r5, #0]
   8029e:	4798      	blx	r3
		ptr++;
   802a0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   802a2:	42bc      	cmp	r4, r7
   802a4:	d1f8      	bne.n	80298 <_read+0x14>
   802a6:	e006      	b.n	802b6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   802a8:	f04f 30ff 	mov.w	r0, #4294967295
   802ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   802b0:	2000      	movs	r0, #0
   802b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   802b6:	4640      	mov	r0, r8
	}
	return nChars;
}
   802b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802bc:	20070b18 	.word	0x20070b18
   802c0:	20070b10 	.word	0x20070b10

000802c4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   802c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802c8:	460e      	mov	r6, r1
   802ca:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   802cc:	3801      	subs	r0, #1
   802ce:	2802      	cmp	r0, #2
   802d0:	d80f      	bhi.n	802f2 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   802d2:	b192      	cbz	r2, 802fa <_write+0x36>
   802d4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802d6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80314 <_write+0x50>
   802da:	4f0d      	ldr	r7, [pc, #52]	; (80310 <_write+0x4c>)
   802dc:	f8d8 0000 	ldr.w	r0, [r8]
   802e0:	5d31      	ldrb	r1, [r6, r4]
   802e2:	683b      	ldr	r3, [r7, #0]
   802e4:	4798      	blx	r3
   802e6:	2800      	cmp	r0, #0
   802e8:	db0a      	blt.n	80300 <_write+0x3c>
			return -1;
		}
		++nChars;
   802ea:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802ec:	42a5      	cmp	r5, r4
   802ee:	d1f5      	bne.n	802dc <_write+0x18>
   802f0:	e00a      	b.n	80308 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   802f2:	f04f 30ff 	mov.w	r0, #4294967295
   802f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   802fa:	2000      	movs	r0, #0
   802fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80300:	f04f 30ff 	mov.w	r0, #4294967295
   80304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80308:	4620      	mov	r0, r4
	}
	return nChars;
}
   8030a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8030e:	bf00      	nop
   80310:	20070b14 	.word	0x20070b14
   80314:	20070b18 	.word	0x20070b18

00080318 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80318:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8031a:	0189      	lsls	r1, r1, #6
   8031c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8031e:	2402      	movs	r4, #2
   80320:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80322:	f04f 31ff 	mov.w	r1, #4294967295
   80326:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80328:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8032a:	605a      	str	r2, [r3, #4]
}
   8032c:	f85d 4b04 	ldr.w	r4, [sp], #4
   80330:	4770      	bx	lr
   80332:	bf00      	nop

00080334 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80334:	0189      	lsls	r1, r1, #6
   80336:	2305      	movs	r3, #5
   80338:	5043      	str	r3, [r0, r1]
   8033a:	4770      	bx	lr

0008033c <tc_read_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RC;
   8033c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80340:	69c8      	ldr	r0, [r1, #28]
}
   80342:	4770      	bx	lr

00080344 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80344:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80346:	23ac      	movs	r3, #172	; 0xac
   80348:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8034a:	680a      	ldr	r2, [r1, #0]
   8034c:	684b      	ldr	r3, [r1, #4]
   8034e:	fbb2 f3f3 	udiv	r3, r2, r3
   80352:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80354:	1e5c      	subs	r4, r3, #1
   80356:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8035a:	4294      	cmp	r4, r2
   8035c:	d80a      	bhi.n	80374 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8035e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80360:	688b      	ldr	r3, [r1, #8]
   80362:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80364:	f240 2302 	movw	r3, #514	; 0x202
   80368:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8036c:	2350      	movs	r3, #80	; 0x50
   8036e:	6003      	str	r3, [r0, #0]

	return 0;
   80370:	2000      	movs	r0, #0
   80372:	e000      	b.n	80376 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80374:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80376:	f85d 4b04 	ldr.w	r4, [sp], #4
   8037a:	4770      	bx	lr

0008037c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8037c:	6943      	ldr	r3, [r0, #20]
   8037e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80382:	bf1a      	itte	ne
   80384:	61c1      	strne	r1, [r0, #28]
	return 0;
   80386:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80388:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8038a:	4770      	bx	lr

0008038c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8038c:	6943      	ldr	r3, [r0, #20]
   8038e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80392:	bf1d      	ittte	ne
   80394:	6983      	ldrne	r3, [r0, #24]
   80396:	700b      	strbne	r3, [r1, #0]
	return 0;
   80398:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8039a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8039c:	4770      	bx	lr
   8039e:	bf00      	nop

000803a0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   803a0:	6943      	ldr	r3, [r0, #20]
   803a2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   803a6:	bf1d      	ittte	ne
   803a8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   803ac:	61c1      	strne	r1, [r0, #28]
	return 0;
   803ae:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   803b0:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   803b2:	4770      	bx	lr

000803b4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   803b4:	6943      	ldr	r3, [r0, #20]
   803b6:	f013 0f01 	tst.w	r3, #1
   803ba:	d005      	beq.n	803c8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   803bc:	6983      	ldr	r3, [r0, #24]
   803be:	f3c3 0308 	ubfx	r3, r3, #0, #9
   803c2:	600b      	str	r3, [r1, #0]

	return 0;
   803c4:	2000      	movs	r0, #0
   803c6:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   803c8:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   803ca:	4770      	bx	lr

000803cc <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   803cc:	b500      	push	{lr}
   803ce:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   803d0:	4813      	ldr	r0, [pc, #76]	; (80420 <USART0_Handler+0x54>)
   803d2:	f10d 0107 	add.w	r1, sp, #7
   803d6:	2201      	movs	r2, #1
   803d8:	4b12      	ldr	r3, [pc, #72]	; (80424 <USART0_Handler+0x58>)
   803da:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   803dc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   803de:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   803e2:	2200      	movs	r2, #0
   803e4:	4b10      	ldr	r3, [pc, #64]	; (80428 <USART0_Handler+0x5c>)
   803e6:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   803e8:	4b10      	ldr	r3, [pc, #64]	; (8042c <USART0_Handler+0x60>)
   803ea:	781a      	ldrb	r2, [r3, #0]
   803ec:	3201      	adds	r2, #1
   803ee:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   803f0:	4b0f      	ldr	r3, [pc, #60]	; (80430 <USART0_Handler+0x64>)
   803f2:	781b      	ldrb	r3, [r3, #0]
   803f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803f8:	4a0e      	ldr	r2, [pc, #56]	; (80434 <USART0_Handler+0x68>)
   803fa:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   803fc:	2b9b      	cmp	r3, #155	; 0x9b
   803fe:	d103      	bne.n	80408 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80400:	2200      	movs	r2, #0
   80402:	4b0b      	ldr	r3, [pc, #44]	; (80430 <USART0_Handler+0x64>)
   80404:	701a      	strb	r2, [r3, #0]
   80406:	e002      	b.n	8040e <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   80408:	3301      	adds	r3, #1
   8040a:	4a09      	ldr	r2, [pc, #36]	; (80430 <USART0_Handler+0x64>)
   8040c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8040e:	2201      	movs	r2, #1
   80410:	4b05      	ldr	r3, [pc, #20]	; (80428 <USART0_Handler+0x5c>)
   80412:	701a      	strb	r2, [r3, #0]
   80414:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80418:	b662      	cpsie	i
}
   8041a:	b003      	add	sp, #12
   8041c:	f85d fb04 	ldr.w	pc, [sp], #4
   80420:	40098000 	.word	0x40098000
   80424:	000801c1 	.word	0x000801c1
   80428:	2007013a 	.word	0x2007013a
   8042c:	20070a5d 	.word	0x20070a5d
   80430:	20070a5c 	.word	0x20070a5c
   80434:	200709c0 	.word	0x200709c0

00080438 <configureTC>:

#include <asf.h>
#include "confTimer.h"

void configureTC(void)
{
   80438:	b510      	push	{r4, lr}
	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   8043a:	201b      	movs	r0, #27
   8043c:	4b06      	ldr	r3, [pc, #24]	; (80458 <configureTC+0x20>)
   8043e:	4798      	blx	r3
	/** Configure TC for a 10 kHz frequency and trigger on RC compare. */
	tc_init(TC0, 0, 0 | TC_CMR_BURST_XC0);	//Timer_clock_1 - MCK/2 - 42 MHz
   80440:	4c06      	ldr	r4, [pc, #24]	; (8045c <configureTC+0x24>)
   80442:	4620      	mov	r0, r4
   80444:	2100      	movs	r1, #0
   80446:	2210      	movs	r2, #16
   80448:	4b05      	ldr	r3, [pc, #20]	; (80460 <configureTC+0x28>)
   8044a:	4798      	blx	r3
//	tc_write_rc(TC0, 0, 4200);					//4200 corresponds to fs = 10 kHz
	tc_start(TC0, 0);
   8044c:	4620      	mov	r0, r4
   8044e:	2100      	movs	r1, #0
   80450:	4b04      	ldr	r3, [pc, #16]	; (80464 <configureTC+0x2c>)
   80452:	4798      	blx	r3
   80454:	bd10      	pop	{r4, pc}
   80456:	bf00      	nop
   80458:	00080be5 	.word	0x00080be5
   8045c:	40080000 	.word	0x40080000
   80460:	00080319 	.word	0x00080319
   80464:	00080335 	.word	0x00080335

00080468 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80468:	b5f0      	push	{r4, r5, r6, r7, lr}
   8046a:	b083      	sub	sp, #12
   8046c:	4604      	mov	r4, r0
   8046e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80470:	2300      	movs	r3, #0
   80472:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80474:	4b1f      	ldr	r3, [pc, #124]	; (804f4 <usart_serial_getchar+0x8c>)
   80476:	4298      	cmp	r0, r3
   80478:	d107      	bne.n	8048a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8047a:	461f      	mov	r7, r3
   8047c:	4e1e      	ldr	r6, [pc, #120]	; (804f8 <usart_serial_getchar+0x90>)
   8047e:	4638      	mov	r0, r7
   80480:	4629      	mov	r1, r5
   80482:	47b0      	blx	r6
   80484:	2800      	cmp	r0, #0
   80486:	d1fa      	bne.n	8047e <usart_serial_getchar+0x16>
   80488:	e019      	b.n	804be <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8048a:	4b1c      	ldr	r3, [pc, #112]	; (804fc <usart_serial_getchar+0x94>)
   8048c:	4298      	cmp	r0, r3
   8048e:	d109      	bne.n	804a4 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80490:	461f      	mov	r7, r3
   80492:	4e1b      	ldr	r6, [pc, #108]	; (80500 <usart_serial_getchar+0x98>)
   80494:	4638      	mov	r0, r7
   80496:	a901      	add	r1, sp, #4
   80498:	47b0      	blx	r6
   8049a:	2800      	cmp	r0, #0
   8049c:	d1fa      	bne.n	80494 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8049e:	9b01      	ldr	r3, [sp, #4]
   804a0:	702b      	strb	r3, [r5, #0]
   804a2:	e019      	b.n	804d8 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   804a4:	4b17      	ldr	r3, [pc, #92]	; (80504 <usart_serial_getchar+0x9c>)
   804a6:	4298      	cmp	r0, r3
   804a8:	d109      	bne.n	804be <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   804aa:	461e      	mov	r6, r3
   804ac:	4c14      	ldr	r4, [pc, #80]	; (80500 <usart_serial_getchar+0x98>)
   804ae:	4630      	mov	r0, r6
   804b0:	a901      	add	r1, sp, #4
   804b2:	47a0      	blx	r4
   804b4:	2800      	cmp	r0, #0
   804b6:	d1fa      	bne.n	804ae <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   804b8:	9b01      	ldr	r3, [sp, #4]
   804ba:	702b      	strb	r3, [r5, #0]
   804bc:	e018      	b.n	804f0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   804be:	4b12      	ldr	r3, [pc, #72]	; (80508 <usart_serial_getchar+0xa0>)
   804c0:	429c      	cmp	r4, r3
   804c2:	d109      	bne.n	804d8 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   804c4:	461e      	mov	r6, r3
   804c6:	4c0e      	ldr	r4, [pc, #56]	; (80500 <usart_serial_getchar+0x98>)
   804c8:	4630      	mov	r0, r6
   804ca:	a901      	add	r1, sp, #4
   804cc:	47a0      	blx	r4
   804ce:	2800      	cmp	r0, #0
   804d0:	d1fa      	bne.n	804c8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   804d2:	9b01      	ldr	r3, [sp, #4]
   804d4:	702b      	strb	r3, [r5, #0]
   804d6:	e00b      	b.n	804f0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   804d8:	4b0c      	ldr	r3, [pc, #48]	; (8050c <usart_serial_getchar+0xa4>)
   804da:	429c      	cmp	r4, r3
   804dc:	d108      	bne.n	804f0 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   804de:	461e      	mov	r6, r3
   804e0:	4c07      	ldr	r4, [pc, #28]	; (80500 <usart_serial_getchar+0x98>)
   804e2:	4630      	mov	r0, r6
   804e4:	a901      	add	r1, sp, #4
   804e6:	47a0      	blx	r4
   804e8:	2800      	cmp	r0, #0
   804ea:	d1fa      	bne.n	804e2 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   804ec:	9b01      	ldr	r3, [sp, #4]
   804ee:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   804f0:	b003      	add	sp, #12
   804f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   804f4:	400e0800 	.word	0x400e0800
   804f8:	0008038d 	.word	0x0008038d
   804fc:	40098000 	.word	0x40098000
   80500:	000803b5 	.word	0x000803b5
   80504:	4009c000 	.word	0x4009c000
   80508:	400a0000 	.word	0x400a0000
   8050c:	400a4000 	.word	0x400a4000

00080510 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80510:	b570      	push	{r4, r5, r6, lr}
   80512:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80514:	4b21      	ldr	r3, [pc, #132]	; (8059c <usart_serial_putchar+0x8c>)
   80516:	4298      	cmp	r0, r3
   80518:	d107      	bne.n	8052a <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8051a:	461e      	mov	r6, r3
   8051c:	4d20      	ldr	r5, [pc, #128]	; (805a0 <usart_serial_putchar+0x90>)
   8051e:	4630      	mov	r0, r6
   80520:	4621      	mov	r1, r4
   80522:	47a8      	blx	r5
   80524:	2800      	cmp	r0, #0
   80526:	d1fa      	bne.n	8051e <usart_serial_putchar+0xe>
   80528:	e02b      	b.n	80582 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8052a:	4b1e      	ldr	r3, [pc, #120]	; (805a4 <usart_serial_putchar+0x94>)
   8052c:	4298      	cmp	r0, r3
   8052e:	d107      	bne.n	80540 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80530:	461e      	mov	r6, r3
   80532:	4d1d      	ldr	r5, [pc, #116]	; (805a8 <usart_serial_putchar+0x98>)
   80534:	4630      	mov	r0, r6
   80536:	4621      	mov	r1, r4
   80538:	47a8      	blx	r5
   8053a:	2800      	cmp	r0, #0
   8053c:	d1fa      	bne.n	80534 <usart_serial_putchar+0x24>
   8053e:	e022      	b.n	80586 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80540:	4b1a      	ldr	r3, [pc, #104]	; (805ac <usart_serial_putchar+0x9c>)
   80542:	4298      	cmp	r0, r3
   80544:	d107      	bne.n	80556 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80546:	461e      	mov	r6, r3
   80548:	4d17      	ldr	r5, [pc, #92]	; (805a8 <usart_serial_putchar+0x98>)
   8054a:	4630      	mov	r0, r6
   8054c:	4621      	mov	r1, r4
   8054e:	47a8      	blx	r5
   80550:	2800      	cmp	r0, #0
   80552:	d1fa      	bne.n	8054a <usart_serial_putchar+0x3a>
   80554:	e019      	b.n	8058a <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80556:	4b16      	ldr	r3, [pc, #88]	; (805b0 <usart_serial_putchar+0xa0>)
   80558:	4298      	cmp	r0, r3
   8055a:	d107      	bne.n	8056c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   8055c:	461e      	mov	r6, r3
   8055e:	4d12      	ldr	r5, [pc, #72]	; (805a8 <usart_serial_putchar+0x98>)
   80560:	4630      	mov	r0, r6
   80562:	4621      	mov	r1, r4
   80564:	47a8      	blx	r5
   80566:	2800      	cmp	r0, #0
   80568:	d1fa      	bne.n	80560 <usart_serial_putchar+0x50>
   8056a:	e010      	b.n	8058e <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8056c:	4b11      	ldr	r3, [pc, #68]	; (805b4 <usart_serial_putchar+0xa4>)
   8056e:	4298      	cmp	r0, r3
   80570:	d10f      	bne.n	80592 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80572:	461e      	mov	r6, r3
   80574:	4d0c      	ldr	r5, [pc, #48]	; (805a8 <usart_serial_putchar+0x98>)
   80576:	4630      	mov	r0, r6
   80578:	4621      	mov	r1, r4
   8057a:	47a8      	blx	r5
   8057c:	2800      	cmp	r0, #0
   8057e:	d1fa      	bne.n	80576 <usart_serial_putchar+0x66>
   80580:	e009      	b.n	80596 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80582:	2001      	movs	r0, #1
   80584:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80586:	2001      	movs	r0, #1
   80588:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8058a:	2001      	movs	r0, #1
   8058c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8058e:	2001      	movs	r0, #1
   80590:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80592:	2000      	movs	r0, #0
   80594:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80596:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80598:	bd70      	pop	{r4, r5, r6, pc}
   8059a:	bf00      	nop
   8059c:	400e0800 	.word	0x400e0800
   805a0:	0008037d 	.word	0x0008037d
   805a4:	40098000 	.word	0x40098000
   805a8:	000803a1 	.word	0x000803a1
   805ac:	4009c000 	.word	0x4009c000
   805b0:	400a0000 	.word	0x400a0000
   805b4:	400a4000 	.word	0x400a4000

000805b8 <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   805b8:	b530      	push	{r4, r5, lr}
   805ba:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805bc:	2008      	movs	r0, #8
   805be:	4d13      	ldr	r5, [pc, #76]	; (8060c <configureConsole+0x54>)
   805c0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   805c2:	4c13      	ldr	r4, [pc, #76]	; (80610 <configureConsole+0x58>)
   805c4:	4b13      	ldr	r3, [pc, #76]	; (80614 <configureConsole+0x5c>)
   805c6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   805c8:	4a13      	ldr	r2, [pc, #76]	; (80618 <configureConsole+0x60>)
   805ca:	4b14      	ldr	r3, [pc, #80]	; (8061c <configureConsole+0x64>)
   805cc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   805ce:	4a14      	ldr	r2, [pc, #80]	; (80620 <configureConsole+0x68>)
   805d0:	4b14      	ldr	r3, [pc, #80]	; (80624 <configureConsole+0x6c>)
   805d2:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   805d4:	4b14      	ldr	r3, [pc, #80]	; (80628 <configureConsole+0x70>)
   805d6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   805d8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   805dc:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   805de:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805e2:	9303      	str	r3, [sp, #12]
   805e4:	2008      	movs	r0, #8
   805e6:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   805e8:	4620      	mov	r0, r4
   805ea:	a901      	add	r1, sp, #4
   805ec:	4b0f      	ldr	r3, [pc, #60]	; (8062c <configureConsole+0x74>)
   805ee:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   805f0:	4d0f      	ldr	r5, [pc, #60]	; (80630 <configureConsole+0x78>)
   805f2:	682b      	ldr	r3, [r5, #0]
   805f4:	6898      	ldr	r0, [r3, #8]
   805f6:	2100      	movs	r1, #0
   805f8:	4c0e      	ldr	r4, [pc, #56]	; (80634 <configureConsole+0x7c>)
   805fa:	47a0      	blx	r4
	setbuf(stdin, NULL);
   805fc:	682b      	ldr	r3, [r5, #0]
   805fe:	6858      	ldr	r0, [r3, #4]
   80600:	2100      	movs	r1, #0
   80602:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   80604:	2000      	movs	r0, #0
   80606:	b005      	add	sp, #20
   80608:	bd30      	pop	{r4, r5, pc}
   8060a:	bf00      	nop
   8060c:	00080be5 	.word	0x00080be5
   80610:	400e0800 	.word	0x400e0800
   80614:	20070b18 	.word	0x20070b18
   80618:	00080511 	.word	0x00080511
   8061c:	20070b14 	.word	0x20070b14
   80620:	00080469 	.word	0x00080469
   80624:	20070b10 	.word	0x20070b10
   80628:	0501bd00 	.word	0x0501bd00
   8062c:	00080345 	.word	0x00080345
   80630:	20070568 	.word	0x20070568
   80634:	00081001 	.word	0x00081001

00080638 <pin12_edge_handler>:


}

// Handler which calls when pin 53 is toggle.
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   80638:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   8063a:	4808      	ldr	r0, [pc, #32]	; (8065c <pin12_edge_handler+0x24>)
   8063c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80644:	4b06      	ldr	r3, [pc, #24]	; (80660 <pin12_edge_handler+0x28>)
   80646:	4798      	blx	r3
   80648:	b130      	cbz	r0, 80658 <pin12_edge_handler+0x20>
		//increase the counter value
		counter_2++;
   8064a:	4b06      	ldr	r3, [pc, #24]	; (80664 <pin12_edge_handler+0x2c>)
   8064c:	881a      	ldrh	r2, [r3, #0]
   8064e:	3201      	adds	r2, #1
   80650:	801a      	strh	r2, [r3, #0]
		c2Loop = true;
   80652:	2201      	movs	r2, #1
   80654:	4b04      	ldr	r3, [pc, #16]	; (80668 <pin12_edge_handler+0x30>)
   80656:	701a      	strb	r2, [r3, #0]
   80658:	bd08      	pop	{r3, pc}
   8065a:	bf00      	nop
   8065c:	400e1200 	.word	0x400e1200
   80660:	00080899 	.word	0x00080899
   80664:	20070a60 	.word	0x20070a60
   80668:	20070139 	.word	0x20070139

0008066c <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}
}

// Handler which calls when pin 51 is toggle.
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   8066c:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   8066e:	4808      	ldr	r0, [pc, #32]	; (80690 <pin14_edge_handler+0x24>)
   80670:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80674:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80678:	4b06      	ldr	r3, [pc, #24]	; (80694 <pin14_edge_handler+0x28>)
   8067a:	4798      	blx	r3
   8067c:	b130      	cbz	r0, 8068c <pin14_edge_handler+0x20>
	//Increase the counter value
			counter_1++;
   8067e:	4b06      	ldr	r3, [pc, #24]	; (80698 <pin14_edge_handler+0x2c>)
   80680:	881a      	ldrh	r2, [r3, #0]
   80682:	3201      	adds	r2, #1
   80684:	801a      	strh	r2, [r3, #0]
			c1Loop = true;
   80686:	2201      	movs	r2, #1
   80688:	4b04      	ldr	r3, [pc, #16]	; (8069c <pin14_edge_handler+0x30>)
   8068a:	701a      	strb	r2, [r3, #0]
   8068c:	bd08      	pop	{r3, pc}
   8068e:	bf00      	nop
   80690:	400e1000 	.word	0x400e1000
   80694:	00080899 	.word	0x00080899
   80698:	20070a5e 	.word	0x20070a5e
   8069c:	20070138 	.word	0x20070138

000806a0 <configInterrupts>:
 uint16_t counter_2 = 0;
 bool c1Loop = true;
 bool c2Loop = true;


void configInterrupts(void){
   806a0:	b570      	push	{r4, r5, r6, lr}
   806a2:	b082      	sub	sp, #8

	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   806a4:	200c      	movs	r0, #12
   806a6:	4c1a      	ldr	r4, [pc, #104]	; (80710 <configInterrupts+0x70>)
   806a8:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);
   806aa:	200d      	movs	r0, #13
   806ac:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   806ae:	4d19      	ldr	r5, [pc, #100]	; (80714 <configInterrupts+0x74>)
   806b0:	4628      	mov	r0, r5
   806b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   806b6:	2201      	movs	r2, #1
   806b8:	4e17      	ldr	r6, [pc, #92]	; (80718 <configInterrupts+0x78>)
   806ba:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   806bc:	4c17      	ldr	r4, [pc, #92]	; (8071c <configInterrupts+0x7c>)
   806be:	4620      	mov	r0, r4
   806c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   806c4:	2201      	movs	r2, #1
   806c6:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   806c8:	4b15      	ldr	r3, [pc, #84]	; (80720 <configInterrupts+0x80>)
   806ca:	9300      	str	r3, [sp, #0]
   806cc:	4628      	mov	r0, r5
   806ce:	210d      	movs	r1, #13
   806d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   806d4:	2340      	movs	r3, #64	; 0x40
   806d6:	4e13      	ldr	r6, [pc, #76]	; (80724 <configInterrupts+0x84>)
   806d8:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   806da:	4b13      	ldr	r3, [pc, #76]	; (80728 <configInterrupts+0x88>)
   806dc:	9300      	str	r3, [sp, #0]
   806de:	4620      	mov	r0, r4
   806e0:	210c      	movs	r1, #12
   806e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   806e6:	2340      	movs	r3, #64	; 0x40
   806e8:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   806ea:	4628      	mov	r0, r5
   806ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   806f0:	4d0e      	ldr	r5, [pc, #56]	; (8072c <configInterrupts+0x8c>)
   806f2:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   806f4:	4620      	mov	r0, r4
   806f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   806fa:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   806fc:	4b0c      	ldr	r3, [pc, #48]	; (80730 <configInterrupts+0x90>)
   806fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80702:	601a      	str	r2, [r3, #0]
   80704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80708:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);


}
   8070a:	b002      	add	sp, #8
   8070c:	bd70      	pop	{r4, r5, r6, pc}
   8070e:	bf00      	nop
   80710:	00080be5 	.word	0x00080be5
   80714:	400e1200 	.word	0x400e1200
   80718:	000808f1 	.word	0x000808f1
   8071c:	400e1000 	.word	0x400e1000
   80720:	00080639 	.word	0x00080639
   80724:	00080b59 	.word	0x00080b59
   80728:	0008066d 	.word	0x0008066d
   8072c:	0008097d 	.word	0x0008097d
   80730:	e000e100 	.word	0xe000e100

00080734 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   80734:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   80736:	2055      	movs	r0, #85	; 0x55
   80738:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8073c:	4b0b      	ldr	r3, [pc, #44]	; (8076c <initPin21+0x38>)
   8073e:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   80740:	4b0b      	ldr	r3, [pc, #44]	; (80770 <initPin21+0x3c>)
   80742:	2404      	movs	r4, #4
   80744:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80746:	220b      	movs	r2, #11
   80748:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   8074a:	2200      	movs	r2, #0
   8074c:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   8074e:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 7500;
   80750:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80754:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   80756:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   80758:	4d06      	ldr	r5, [pc, #24]	; (80774 <initPin21+0x40>)
   8075a:	4628      	mov	r0, r5
   8075c:	4619      	mov	r1, r3
   8075e:	4b06      	ldr	r3, [pc, #24]	; (80778 <initPin21+0x44>)
   80760:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80762:	4628      	mov	r0, r5
   80764:	4621      	mov	r1, r4
   80766:	4b05      	ldr	r3, [pc, #20]	; (8077c <initPin21+0x48>)
   80768:	4798      	blx	r3
   8076a:	bd38      	pop	{r3, r4, r5, pc}
   8076c:	0008098d 	.word	0x0008098d
   80770:	20070b44 	.word	0x20070b44
   80774:	40094000 	.word	0x40094000
   80778:	00080cd5 	.word	0x00080cd5
   8077c:	00080dd9 	.word	0x00080dd9

00080780 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   80780:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   80782:	2056      	movs	r0, #86	; 0x56
   80784:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80788:	4b0b      	ldr	r3, [pc, #44]	; (807b8 <initPin22+0x38>)
   8078a:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   8078c:	4b0b      	ldr	r3, [pc, #44]	; (807bc <initPin22+0x3c>)
   8078e:	2405      	movs	r4, #5
   80790:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80792:	220b      	movs	r2, #11
   80794:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   80796:	2200      	movs	r2, #0
   80798:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   8079a:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 7500;
   8079c:	f641 514c 	movw	r1, #7500	; 0x1d4c
   807a0:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   807a2:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   807a4:	4d06      	ldr	r5, [pc, #24]	; (807c0 <initPin22+0x40>)
   807a6:	4628      	mov	r0, r5
   807a8:	4619      	mov	r1, r3
   807aa:	4b06      	ldr	r3, [pc, #24]	; (807c4 <initPin22+0x44>)
   807ac:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   807ae:	4628      	mov	r0, r5
   807b0:	4621      	mov	r1, r4
   807b2:	4b05      	ldr	r3, [pc, #20]	; (807c8 <initPin22+0x48>)
   807b4:	4798      	blx	r3
   807b6:	bd38      	pop	{r3, r4, r5, pc}
   807b8:	0008098d 	.word	0x0008098d
   807bc:	20070b1c 	.word	0x20070b1c
   807c0:	40094000 	.word	0x40094000
   807c4:	00080cd5 	.word	0x00080cd5
   807c8:	00080dd9 	.word	0x00080dd9

000807cc <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   807cc:	b530      	push	{r4, r5, lr}
   807ce:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   807d0:	2024      	movs	r0, #36	; 0x24
   807d2:	4b0d      	ldr	r3, [pc, #52]	; (80808 <PWM_init+0x3c>)
   807d4:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   807d6:	4c0d      	ldr	r4, [pc, #52]	; (8080c <PWM_init+0x40>)
   807d8:	4620      	mov	r0, r4
   807da:	2104      	movs	r1, #4
   807dc:	4d0c      	ldr	r5, [pc, #48]	; (80810 <PWM_init+0x44>)
   807de:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   807e0:	4620      	mov	r0, r4
   807e2:	2105      	movs	r1, #5
   807e4:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   807e6:	4b0b      	ldr	r3, [pc, #44]	; (80814 <PWM_init+0x48>)
   807e8:	9301      	str	r3, [sp, #4]
   807ea:	2300      	movs	r3, #0
   807ec:	9302      	str	r3, [sp, #8]
   807ee:	4b0a      	ldr	r3, [pc, #40]	; (80818 <PWM_init+0x4c>)
   807f0:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   807f2:	4620      	mov	r0, r4
   807f4:	a901      	add	r1, sp, #4
   807f6:	4b09      	ldr	r3, [pc, #36]	; (8081c <PWM_init+0x50>)
   807f8:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   807fa:	4b09      	ldr	r3, [pc, #36]	; (80820 <PWM_init+0x54>)
   807fc:	4798      	blx	r3
	initPin22();
   807fe:	4b09      	ldr	r3, [pc, #36]	; (80824 <PWM_init+0x58>)
   80800:	4798      	blx	r3
	
}
   80802:	b005      	add	sp, #20
   80804:	bd30      	pop	{r4, r5, pc}
   80806:	bf00      	nop
   80808:	00080be5 	.word	0x00080be5
   8080c:	40094000 	.word	0x40094000
   80810:	00080de5 	.word	0x00080de5
   80814:	000f4240 	.word	0x000f4240
   80818:	0501bd00 	.word	0x0501bd00
   8081c:	00080c95 	.word	0x00080c95
   80820:	00080735 	.word	0x00080735
   80824:	00080781 	.word	0x00080781

00080828 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80828:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8082a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8082e:	4b13      	ldr	r3, [pc, #76]	; (8087c <board_init+0x54>)
   80830:	605a      	str	r2, [r3, #4]
   80832:	200b      	movs	r0, #11
   80834:	4c12      	ldr	r4, [pc, #72]	; (80880 <board_init+0x58>)
   80836:	47a0      	blx	r4
   80838:	200c      	movs	r0, #12
   8083a:	47a0      	blx	r4
   8083c:	200d      	movs	r0, #13
   8083e:	47a0      	blx	r4
   80840:	200e      	movs	r0, #14
   80842:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80844:	203b      	movs	r0, #59	; 0x3b
   80846:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8084a:	4c0e      	ldr	r4, [pc, #56]	; (80884 <board_init+0x5c>)
   8084c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8084e:	2055      	movs	r0, #85	; 0x55
   80850:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80854:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80856:	2056      	movs	r0, #86	; 0x56
   80858:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8085c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8085e:	2068      	movs	r0, #104	; 0x68
   80860:	4909      	ldr	r1, [pc, #36]	; (80888 <board_init+0x60>)
   80862:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80864:	205c      	movs	r0, #92	; 0x5c
   80866:	4909      	ldr	r1, [pc, #36]	; (8088c <board_init+0x64>)
   80868:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8086a:	4809      	ldr	r0, [pc, #36]	; (80890 <board_init+0x68>)
   8086c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80870:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80874:	4b07      	ldr	r3, [pc, #28]	; (80894 <board_init+0x6c>)
   80876:	4798      	blx	r3
   80878:	bd10      	pop	{r4, pc}
   8087a:	bf00      	nop
   8087c:	400e1a50 	.word	0x400e1a50
   80880:	00080be5 	.word	0x00080be5
   80884:	0008098d 	.word	0x0008098d
   80888:	28000079 	.word	0x28000079
   8088c:	28000001 	.word	0x28000001
   80890:	400e0e00 	.word	0x400e0e00
   80894:	00080a61 	.word	0x00080a61

00080898 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80898:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   8089c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   808a0:	bf0c      	ite	eq
   808a2:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   808a4:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   808a6:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   808a8:	bf0c      	ite	eq
   808aa:	2000      	moveq	r0, #0
   808ac:	2001      	movne	r0, #1
   808ae:	4770      	bx	lr

000808b0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   808b0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   808b2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   808b6:	d016      	beq.n	808e6 <pio_set_peripheral+0x36>
   808b8:	d804      	bhi.n	808c4 <pio_set_peripheral+0x14>
   808ba:	b1c1      	cbz	r1, 808ee <pio_set_peripheral+0x3e>
   808bc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   808c0:	d00a      	beq.n	808d8 <pio_set_peripheral+0x28>
   808c2:	e013      	b.n	808ec <pio_set_peripheral+0x3c>
   808c4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   808c8:	d011      	beq.n	808ee <pio_set_peripheral+0x3e>
   808ca:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   808ce:	d00e      	beq.n	808ee <pio_set_peripheral+0x3e>
   808d0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   808d4:	d10a      	bne.n	808ec <pio_set_peripheral+0x3c>
   808d6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   808d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   808da:	6f01      	ldr	r1, [r0, #112]	; 0x70
   808dc:	400b      	ands	r3, r1
   808de:	ea23 0302 	bic.w	r3, r3, r2
   808e2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   808e4:	e002      	b.n	808ec <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   808e6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   808e8:	4313      	orrs	r3, r2
   808ea:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   808ec:	6042      	str	r2, [r0, #4]
   808ee:	4770      	bx	lr

000808f0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   808f0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808f2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   808f6:	bf14      	ite	ne
   808f8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808fa:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   808fc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80900:	bf14      	ite	ne
   80902:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80904:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80906:	f012 0f02 	tst.w	r2, #2
   8090a:	d002      	beq.n	80912 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8090c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80910:	e004      	b.n	8091c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80912:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80916:	bf18      	it	ne
   80918:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8091c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8091e:	6001      	str	r1, [r0, #0]
   80920:	4770      	bx	lr
   80922:	bf00      	nop

00080924 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80924:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80926:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80928:	9c01      	ldr	r4, [sp, #4]
   8092a:	b10c      	cbz	r4, 80930 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8092c:	6641      	str	r1, [r0, #100]	; 0x64
   8092e:	e000      	b.n	80932 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80930:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80932:	b10b      	cbz	r3, 80938 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80934:	6501      	str	r1, [r0, #80]	; 0x50
   80936:	e000      	b.n	8093a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80938:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8093a:	b10a      	cbz	r2, 80940 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8093c:	6301      	str	r1, [r0, #48]	; 0x30
   8093e:	e000      	b.n	80942 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80940:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80942:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80944:	6001      	str	r1, [r0, #0]
}
   80946:	f85d 4b04 	ldr.w	r4, [sp], #4
   8094a:	4770      	bx	lr

0008094c <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   8094c:	f012 0f10 	tst.w	r2, #16
   80950:	d010      	beq.n	80974 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   80952:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80956:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   8095a:	bf14      	ite	ne
   8095c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80960:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   80964:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   80968:	bf14      	ite	ne
   8096a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   8096e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80972:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   80974:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80978:	4770      	bx	lr
   8097a:	bf00      	nop

0008097c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   8097c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   8097e:	6401      	str	r1, [r0, #64]	; 0x40
   80980:	4770      	bx	lr
   80982:	bf00      	nop

00080984 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80984:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80986:	4770      	bx	lr

00080988 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80988:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8098a:	4770      	bx	lr

0008098c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8098c:	b570      	push	{r4, r5, r6, lr}
   8098e:	b082      	sub	sp, #8
   80990:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80992:	0944      	lsrs	r4, r0, #5
   80994:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80998:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8099c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8099e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   809a2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   809a6:	d030      	beq.n	80a0a <pio_configure_pin+0x7e>
   809a8:	d806      	bhi.n	809b8 <pio_configure_pin+0x2c>
   809aa:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   809ae:	d00a      	beq.n	809c6 <pio_configure_pin+0x3a>
   809b0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   809b4:	d018      	beq.n	809e8 <pio_configure_pin+0x5c>
   809b6:	e049      	b.n	80a4c <pio_configure_pin+0xc0>
   809b8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   809bc:	d030      	beq.n	80a20 <pio_configure_pin+0x94>
   809be:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   809c2:	d02d      	beq.n	80a20 <pio_configure_pin+0x94>
   809c4:	e042      	b.n	80a4c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   809c6:	f000 001f 	and.w	r0, r0, #31
   809ca:	2401      	movs	r4, #1
   809cc:	4084      	lsls	r4, r0
   809ce:	4630      	mov	r0, r6
   809d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809d4:	4622      	mov	r2, r4
   809d6:	4b1f      	ldr	r3, [pc, #124]	; (80a54 <pio_configure_pin+0xc8>)
   809d8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809da:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809de:	bf14      	ite	ne
   809e0:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809e2:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809e4:	2001      	movs	r0, #1
   809e6:	e032      	b.n	80a4e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   809e8:	f000 001f 	and.w	r0, r0, #31
   809ec:	2401      	movs	r4, #1
   809ee:	4084      	lsls	r4, r0
   809f0:	4630      	mov	r0, r6
   809f2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809f6:	4622      	mov	r2, r4
   809f8:	4b16      	ldr	r3, [pc, #88]	; (80a54 <pio_configure_pin+0xc8>)
   809fa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809fc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a00:	bf14      	ite	ne
   80a02:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a04:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a06:	2001      	movs	r0, #1
   80a08:	e021      	b.n	80a4e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80a0a:	f000 011f 	and.w	r1, r0, #31
   80a0e:	2401      	movs	r4, #1
   80a10:	4630      	mov	r0, r6
   80a12:	fa04 f101 	lsl.w	r1, r4, r1
   80a16:	462a      	mov	r2, r5
   80a18:	4b0f      	ldr	r3, [pc, #60]	; (80a58 <pio_configure_pin+0xcc>)
   80a1a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80a1c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80a1e:	e016      	b.n	80a4e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80a20:	f000 011f 	and.w	r1, r0, #31
   80a24:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a26:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80a2a:	ea05 0304 	and.w	r3, r5, r4
   80a2e:	9300      	str	r3, [sp, #0]
   80a30:	4630      	mov	r0, r6
   80a32:	fa04 f101 	lsl.w	r1, r4, r1
   80a36:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a3a:	bf14      	ite	ne
   80a3c:	2200      	movne	r2, #0
   80a3e:	2201      	moveq	r2, #1
   80a40:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a44:	4d05      	ldr	r5, [pc, #20]	; (80a5c <pio_configure_pin+0xd0>)
   80a46:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80a48:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a4a:	e000      	b.n	80a4e <pio_configure_pin+0xc2>

	default:
		return 0;
   80a4c:	2000      	movs	r0, #0
	}

	return 1;
}
   80a4e:	b002      	add	sp, #8
   80a50:	bd70      	pop	{r4, r5, r6, pc}
   80a52:	bf00      	nop
   80a54:	000808b1 	.word	0x000808b1
   80a58:	000808f1 	.word	0x000808f1
   80a5c:	00080925 	.word	0x00080925

00080a60 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80a60:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a62:	b083      	sub	sp, #12
   80a64:	4607      	mov	r7, r0
   80a66:	460e      	mov	r6, r1
   80a68:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80a6a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80a6e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80a72:	d026      	beq.n	80ac2 <pio_configure_pin_group+0x62>
   80a74:	d806      	bhi.n	80a84 <pio_configure_pin_group+0x24>
   80a76:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80a7a:	d00a      	beq.n	80a92 <pio_configure_pin_group+0x32>
   80a7c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80a80:	d013      	beq.n	80aaa <pio_configure_pin_group+0x4a>
   80a82:	e034      	b.n	80aee <pio_configure_pin_group+0x8e>
   80a84:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a88:	d01f      	beq.n	80aca <pio_configure_pin_group+0x6a>
   80a8a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a8e:	d01c      	beq.n	80aca <pio_configure_pin_group+0x6a>
   80a90:	e02d      	b.n	80aee <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80a92:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a96:	4632      	mov	r2, r6
   80a98:	4b16      	ldr	r3, [pc, #88]	; (80af4 <pio_configure_pin_group+0x94>)
   80a9a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a9c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80aa0:	bf14      	ite	ne
   80aa2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80aa4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80aa6:	2001      	movs	r0, #1
   80aa8:	e022      	b.n	80af0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80aaa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80aae:	4632      	mov	r2, r6
   80ab0:	4b10      	ldr	r3, [pc, #64]	; (80af4 <pio_configure_pin_group+0x94>)
   80ab2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ab4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80ab8:	bf14      	ite	ne
   80aba:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80abc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80abe:	2001      	movs	r0, #1
   80ac0:	e016      	b.n	80af0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80ac2:	4b0d      	ldr	r3, [pc, #52]	; (80af8 <pio_configure_pin_group+0x98>)
   80ac4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80ac6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80ac8:	e012      	b.n	80af0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80aca:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80ace:	f005 0301 	and.w	r3, r5, #1
   80ad2:	9300      	str	r3, [sp, #0]
   80ad4:	4638      	mov	r0, r7
   80ad6:	4631      	mov	r1, r6
   80ad8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80adc:	bf14      	ite	ne
   80ade:	2200      	movne	r2, #0
   80ae0:	2201      	moveq	r2, #1
   80ae2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80ae6:	4c05      	ldr	r4, [pc, #20]	; (80afc <pio_configure_pin_group+0x9c>)
   80ae8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80aea:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80aec:	e000      	b.n	80af0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80aee:	2000      	movs	r0, #0
	}

	return 1;
}
   80af0:	b003      	add	sp, #12
   80af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80af4:	000808b1 	.word	0x000808b1
   80af8:	000808f1 	.word	0x000808f1
   80afc:	00080925 	.word	0x00080925

00080b00 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80b04:	4604      	mov	r4, r0
   80b06:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80b08:	4b10      	ldr	r3, [pc, #64]	; (80b4c <pio_handler_process+0x4c>)
   80b0a:	4798      	blx	r3
   80b0c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80b0e:	4620      	mov	r0, r4
   80b10:	4b0f      	ldr	r3, [pc, #60]	; (80b50 <pio_handler_process+0x50>)
   80b12:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80b14:	4005      	ands	r5, r0
   80b16:	d017      	beq.n	80b48 <pio_handler_process+0x48>
   80b18:	4f0e      	ldr	r7, [pc, #56]	; (80b54 <pio_handler_process+0x54>)
   80b1a:	f107 040c 	add.w	r4, r7, #12
   80b1e:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80b20:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80b24:	42b3      	cmp	r3, r6
   80b26:	d10a      	bne.n	80b3e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80b28:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80b2c:	4229      	tst	r1, r5
   80b2e:	d006      	beq.n	80b3e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80b30:	6823      	ldr	r3, [r4, #0]
   80b32:	4630      	mov	r0, r6
   80b34:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80b36:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80b3a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80b3e:	42bc      	cmp	r4, r7
   80b40:	d002      	beq.n	80b48 <pio_handler_process+0x48>
   80b42:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80b44:	2d00      	cmp	r5, #0
   80b46:	d1eb      	bne.n	80b20 <pio_handler_process+0x20>
   80b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b4c:	00080985 	.word	0x00080985
   80b50:	00080989 	.word	0x00080989
   80b54:	20070a68 	.word	0x20070a68

00080b58 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80b5a:	4c0b      	ldr	r4, [pc, #44]	; (80b88 <pio_handler_set+0x30>)
   80b5c:	6824      	ldr	r4, [r4, #0]
   80b5e:	2c06      	cmp	r4, #6
   80b60:	d810      	bhi.n	80b84 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   80b62:	4f0a      	ldr	r7, [pc, #40]	; (80b8c <pio_handler_set+0x34>)
   80b64:	0126      	lsls	r6, r4, #4
   80b66:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   80b68:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   80b6a:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   80b6c:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   80b6e:	9906      	ldr	r1, [sp, #24]
   80b70:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   80b72:	3401      	adds	r4, #1
   80b74:	4904      	ldr	r1, [pc, #16]	; (80b88 <pio_handler_set+0x30>)
   80b76:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80b78:	4611      	mov	r1, r2
   80b7a:	461a      	mov	r2, r3
   80b7c:	4b04      	ldr	r3, [pc, #16]	; (80b90 <pio_handler_set+0x38>)
   80b7e:	4798      	blx	r3

	return 0;
   80b80:	2000      	movs	r0, #0
   80b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80b84:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b88:	20070a64 	.word	0x20070a64
   80b8c:	20070a68 	.word	0x20070a68
   80b90:	0008094d 	.word	0x0008094d

00080b94 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80b94:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80b96:	4802      	ldr	r0, [pc, #8]	; (80ba0 <PIOA_Handler+0xc>)
   80b98:	210b      	movs	r1, #11
   80b9a:	4b02      	ldr	r3, [pc, #8]	; (80ba4 <PIOA_Handler+0x10>)
   80b9c:	4798      	blx	r3
   80b9e:	bd08      	pop	{r3, pc}
   80ba0:	400e0e00 	.word	0x400e0e00
   80ba4:	00080b01 	.word	0x00080b01

00080ba8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80ba8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80baa:	4802      	ldr	r0, [pc, #8]	; (80bb4 <PIOB_Handler+0xc>)
   80bac:	210c      	movs	r1, #12
   80bae:	4b02      	ldr	r3, [pc, #8]	; (80bb8 <PIOB_Handler+0x10>)
   80bb0:	4798      	blx	r3
   80bb2:	bd08      	pop	{r3, pc}
   80bb4:	400e1000 	.word	0x400e1000
   80bb8:	00080b01 	.word	0x00080b01

00080bbc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80bbc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80bbe:	4802      	ldr	r0, [pc, #8]	; (80bc8 <PIOC_Handler+0xc>)
   80bc0:	210d      	movs	r1, #13
   80bc2:	4b02      	ldr	r3, [pc, #8]	; (80bcc <PIOC_Handler+0x10>)
   80bc4:	4798      	blx	r3
   80bc6:	bd08      	pop	{r3, pc}
   80bc8:	400e1200 	.word	0x400e1200
   80bcc:	00080b01 	.word	0x00080b01

00080bd0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80bd0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80bd2:	4802      	ldr	r0, [pc, #8]	; (80bdc <PIOD_Handler+0xc>)
   80bd4:	210e      	movs	r1, #14
   80bd6:	4b02      	ldr	r3, [pc, #8]	; (80be0 <PIOD_Handler+0x10>)
   80bd8:	4798      	blx	r3
   80bda:	bd08      	pop	{r3, pc}
   80bdc:	400e1400 	.word	0x400e1400
   80be0:	00080b01 	.word	0x00080b01

00080be4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80be4:	282c      	cmp	r0, #44	; 0x2c
   80be6:	d820      	bhi.n	80c2a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80be8:	281f      	cmp	r0, #31
   80bea:	d80d      	bhi.n	80c08 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80bec:	4b12      	ldr	r3, [pc, #72]	; (80c38 <pmc_enable_periph_clk+0x54>)
   80bee:	699a      	ldr	r2, [r3, #24]
   80bf0:	2301      	movs	r3, #1
   80bf2:	4083      	lsls	r3, r0
   80bf4:	401a      	ands	r2, r3
   80bf6:	4293      	cmp	r3, r2
   80bf8:	d019      	beq.n	80c2e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80bfa:	2301      	movs	r3, #1
   80bfc:	fa03 f000 	lsl.w	r0, r3, r0
   80c00:	4b0d      	ldr	r3, [pc, #52]	; (80c38 <pmc_enable_periph_clk+0x54>)
   80c02:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c04:	2000      	movs	r0, #0
   80c06:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c08:	4b0b      	ldr	r3, [pc, #44]	; (80c38 <pmc_enable_periph_clk+0x54>)
   80c0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80c0e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c10:	2301      	movs	r3, #1
   80c12:	4083      	lsls	r3, r0
   80c14:	401a      	ands	r2, r3
   80c16:	4293      	cmp	r3, r2
   80c18:	d00b      	beq.n	80c32 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80c1a:	2301      	movs	r3, #1
   80c1c:	fa03 f000 	lsl.w	r0, r3, r0
   80c20:	4b05      	ldr	r3, [pc, #20]	; (80c38 <pmc_enable_periph_clk+0x54>)
   80c22:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80c26:	2000      	movs	r0, #0
   80c28:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80c2a:	2001      	movs	r0, #1
   80c2c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c2e:	2000      	movs	r0, #0
   80c30:	4770      	bx	lr
   80c32:	2000      	movs	r0, #0
}
   80c34:	4770      	bx	lr
   80c36:	bf00      	nop
   80c38:	400e0600 	.word	0x400e0600

00080c3c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80c3c:	b4f0      	push	{r4, r5, r6, r7}
   80c3e:	b08c      	sub	sp, #48	; 0x30
   80c40:	4607      	mov	r7, r0
   80c42:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80c44:	ac01      	add	r4, sp, #4
   80c46:	4d12      	ldr	r5, [pc, #72]	; (80c90 <pwm_clocks_generate+0x54>)
   80c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80c50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80c54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80c58:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80c5a:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80c5c:	f852 4f04 	ldr.w	r4, [r2, #4]!
   80c60:	fbb6 f4f4 	udiv	r4, r6, r4
   80c64:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80c68:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   80c6c:	d903      	bls.n	80c76 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   80c6e:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80c70:	2b0b      	cmp	r3, #11
   80c72:	d1f3      	bne.n	80c5c <pwm_clocks_generate+0x20>
   80c74:	e004      	b.n	80c80 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80c76:	2b0a      	cmp	r3, #10
   80c78:	d805      	bhi.n	80c86 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   80c7a:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   80c7e:	e004      	b.n	80c8a <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80c80:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80c84:	e001      	b.n	80c8a <pwm_clocks_generate+0x4e>
   80c86:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   80c8a:	b00c      	add	sp, #48	; 0x30
   80c8c:	bcf0      	pop	{r4, r5, r6, r7}
   80c8e:	4770      	bx	lr
   80c90:	00083e94 	.word	0x00083e94

00080c94 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80c94:	b570      	push	{r4, r5, r6, lr}
   80c96:	4606      	mov	r6, r0
   80c98:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80c9a:	6808      	ldr	r0, [r1, #0]
   80c9c:	b140      	cbz	r0, 80cb0 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80c9e:	6889      	ldr	r1, [r1, #8]
   80ca0:	4b0b      	ldr	r3, [pc, #44]	; (80cd0 <pwm_init+0x3c>)
   80ca2:	4798      	blx	r3
   80ca4:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80caa:	4298      	cmp	r0, r3
   80cac:	d101      	bne.n	80cb2 <pwm_init+0x1e>
   80cae:	e00e      	b.n	80cce <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80cb0:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80cb2:	6860      	ldr	r0, [r4, #4]
   80cb4:	b140      	cbz	r0, 80cc8 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80cb6:	68a1      	ldr	r1, [r4, #8]
   80cb8:	4b05      	ldr	r3, [pc, #20]	; (80cd0 <pwm_init+0x3c>)
   80cba:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80cc0:	4298      	cmp	r0, r3
   80cc2:	d004      	beq.n	80cce <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80cc4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80cc8:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80cca:	2000      	movs	r0, #0
   80ccc:	bd70      	pop	{r4, r5, r6, pc}
}
   80cce:	bd70      	pop	{r4, r5, r6, pc}
   80cd0:	00080c3d 	.word	0x00080c3d

00080cd4 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80cd4:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80cd6:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80cd8:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80cda:	684a      	ldr	r2, [r1, #4]
   80cdc:	f002 020f 	and.w	r2, r2, #15
   80ce0:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80ce2:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80ce4:	432c      	orrs	r4, r5
   80ce6:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80ce8:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80cec:	7d8a      	ldrb	r2, [r1, #22]
   80cee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80cf2:	7dca      	ldrb	r2, [r1, #23]
   80cf4:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80cf8:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80cfa:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   80cfe:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80d02:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80d06:	68cc      	ldr	r4, [r1, #12]
   80d08:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80d0c:	690c      	ldr	r4, [r1, #16]
   80d0e:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80d12:	7d8a      	ldrb	r2, [r1, #22]
   80d14:	b13a      	cbz	r2, 80d26 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80d16:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80d18:	8b4a      	ldrh	r2, [r1, #26]
   80d1a:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80d1e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   80d22:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80d26:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80d28:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80d2c:	409a      	lsls	r2, r3
   80d2e:	43d2      	mvns	r2, r2
   80d30:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80d32:	7fce      	ldrb	r6, [r1, #31]
   80d34:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80d36:	7f8c      	ldrb	r4, [r1, #30]
   80d38:	409c      	lsls	r4, r3
   80d3a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80d3e:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80d40:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80d42:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80d44:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80d46:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80d4a:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80d4c:	f891 4020 	ldrb.w	r4, [r1, #32]
   80d50:	409c      	lsls	r4, r3
   80d52:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80d56:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80d58:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80d5a:	2201      	movs	r2, #1
   80d5c:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80d5e:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80d62:	b11c      	cbz	r4, 80d6c <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80d64:	6a04      	ldr	r4, [r0, #32]
   80d66:	4314      	orrs	r4, r2
   80d68:	6204      	str	r4, [r0, #32]
   80d6a:	e003      	b.n	80d74 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80d6c:	6a04      	ldr	r4, [r0, #32]
   80d6e:	ea24 0402 	bic.w	r4, r4, r2
   80d72:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80d74:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80d78:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80d7a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80d7c:	bf0c      	ite	eq
   80d7e:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80d80:	4394      	bicne	r4, r2
   80d82:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80d84:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80d88:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80d8a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80d8c:	bf0c      	ite	eq
   80d8e:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80d92:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80d96:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80d98:	2b03      	cmp	r3, #3
   80d9a:	d80c      	bhi.n	80db6 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80d9c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80d9e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80da0:	22ff      	movs	r2, #255	; 0xff
   80da2:	409a      	lsls	r2, r3
   80da4:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80da8:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80dac:	fa01 f303 	lsl.w	r3, r1, r3
   80db0:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80db2:	66c3      	str	r3, [r0, #108]	; 0x6c
   80db4:	e00c      	b.n	80dd0 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80db6:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80db8:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80dba:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80dbc:	22ff      	movs	r2, #255	; 0xff
   80dbe:	409a      	lsls	r2, r3
   80dc0:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80dc4:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80dc8:	fa01 f303 	lsl.w	r3, r1, r3
   80dcc:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80dce:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80dd0:	2000      	movs	r0, #0
   80dd2:	bc70      	pop	{r4, r5, r6}
   80dd4:	4770      	bx	lr
   80dd6:	bf00      	nop

00080dd8 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80dd8:	2301      	movs	r3, #1
   80dda:	fa03 f101 	lsl.w	r1, r3, r1
   80dde:	6041      	str	r1, [r0, #4]
   80de0:	4770      	bx	lr
   80de2:	bf00      	nop

00080de4 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80de4:	2301      	movs	r3, #1
   80de6:	fa03 f101 	lsl.w	r1, r3, r1
   80dea:	6081      	str	r1, [r0, #8]
   80dec:	4770      	bx	lr
   80dee:	bf00      	nop

00080df0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80df0:	e7fe      	b.n	80df0 <Dummy_Handler>
   80df2:	bf00      	nop

00080df4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80df4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80df6:	4b1e      	ldr	r3, [pc, #120]	; (80e70 <Reset_Handler+0x7c>)
   80df8:	4a1e      	ldr	r2, [pc, #120]	; (80e74 <Reset_Handler+0x80>)
   80dfa:	429a      	cmp	r2, r3
   80dfc:	d003      	beq.n	80e06 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80dfe:	4b1e      	ldr	r3, [pc, #120]	; (80e78 <Reset_Handler+0x84>)
   80e00:	4a1b      	ldr	r2, [pc, #108]	; (80e70 <Reset_Handler+0x7c>)
   80e02:	429a      	cmp	r2, r3
   80e04:	d304      	bcc.n	80e10 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e06:	4b1d      	ldr	r3, [pc, #116]	; (80e7c <Reset_Handler+0x88>)
   80e08:	4a1d      	ldr	r2, [pc, #116]	; (80e80 <Reset_Handler+0x8c>)
   80e0a:	429a      	cmp	r2, r3
   80e0c:	d30f      	bcc.n	80e2e <Reset_Handler+0x3a>
   80e0e:	e01a      	b.n	80e46 <Reset_Handler+0x52>
   80e10:	4b1c      	ldr	r3, [pc, #112]	; (80e84 <Reset_Handler+0x90>)
   80e12:	4c1d      	ldr	r4, [pc, #116]	; (80e88 <Reset_Handler+0x94>)
   80e14:	1ae4      	subs	r4, r4, r3
   80e16:	f024 0403 	bic.w	r4, r4, #3
   80e1a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80e1c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80e1e:	4814      	ldr	r0, [pc, #80]	; (80e70 <Reset_Handler+0x7c>)
   80e20:	4914      	ldr	r1, [pc, #80]	; (80e74 <Reset_Handler+0x80>)
   80e22:	585a      	ldr	r2, [r3, r1]
   80e24:	501a      	str	r2, [r3, r0]
   80e26:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80e28:	42a3      	cmp	r3, r4
   80e2a:	d1fa      	bne.n	80e22 <Reset_Handler+0x2e>
   80e2c:	e7eb      	b.n	80e06 <Reset_Handler+0x12>
   80e2e:	4b17      	ldr	r3, [pc, #92]	; (80e8c <Reset_Handler+0x98>)
   80e30:	4917      	ldr	r1, [pc, #92]	; (80e90 <Reset_Handler+0x9c>)
   80e32:	1ac9      	subs	r1, r1, r3
   80e34:	f021 0103 	bic.w	r1, r1, #3
   80e38:	1d1a      	adds	r2, r3, #4
   80e3a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80e3c:	2200      	movs	r2, #0
   80e3e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e42:	428b      	cmp	r3, r1
   80e44:	d1fb      	bne.n	80e3e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e46:	4a13      	ldr	r2, [pc, #76]	; (80e94 <Reset_Handler+0xa0>)
   80e48:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80e4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80e50:	4911      	ldr	r1, [pc, #68]	; (80e98 <Reset_Handler+0xa4>)
   80e52:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80e54:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80e58:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80e5c:	d203      	bcs.n	80e66 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e5e:	688a      	ldr	r2, [r1, #8]
   80e60:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80e64:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80e66:	4b0d      	ldr	r3, [pc, #52]	; (80e9c <Reset_Handler+0xa8>)
   80e68:	4798      	blx	r3

	/* Branch to main function */
	main();
   80e6a:	4b0d      	ldr	r3, [pc, #52]	; (80ea0 <Reset_Handler+0xac>)
   80e6c:	4798      	blx	r3
   80e6e:	e7fe      	b.n	80e6e <Reset_Handler+0x7a>
   80e70:	20070000 	.word	0x20070000
   80e74:	00083f44 	.word	0x00083f44
   80e78:	200709a4 	.word	0x200709a4
   80e7c:	20070b70 	.word	0x20070b70
   80e80:	200709a4 	.word	0x200709a4
   80e84:	20070004 	.word	0x20070004
   80e88:	200709a7 	.word	0x200709a7
   80e8c:	200709a0 	.word	0x200709a0
   80e90:	20070b6b 	.word	0x20070b6b
   80e94:	00080000 	.word	0x00080000
   80e98:	e000ed00 	.word	0xe000ed00
   80e9c:	00080ef5 	.word	0x00080ef5
   80ea0:	00080149 	.word	0x00080149

00080ea4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80ea4:	4b09      	ldr	r3, [pc, #36]	; (80ecc <_sbrk+0x28>)
   80ea6:	681b      	ldr	r3, [r3, #0]
   80ea8:	b913      	cbnz	r3, 80eb0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80eaa:	4a09      	ldr	r2, [pc, #36]	; (80ed0 <_sbrk+0x2c>)
   80eac:	4b07      	ldr	r3, [pc, #28]	; (80ecc <_sbrk+0x28>)
   80eae:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80eb0:	4b06      	ldr	r3, [pc, #24]	; (80ecc <_sbrk+0x28>)
   80eb2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80eb4:	181a      	adds	r2, r3, r0
   80eb6:	4907      	ldr	r1, [pc, #28]	; (80ed4 <_sbrk+0x30>)
   80eb8:	4291      	cmp	r1, r2
   80eba:	db04      	blt.n	80ec6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80ebc:	4610      	mov	r0, r2
   80ebe:	4a03      	ldr	r2, [pc, #12]	; (80ecc <_sbrk+0x28>)
   80ec0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80ec2:	4618      	mov	r0, r3
   80ec4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80ec6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80eca:	4770      	bx	lr
   80ecc:	20070ad8 	.word	0x20070ad8
   80ed0:	20072b70 	.word	0x20072b70
   80ed4:	20087ffc 	.word	0x20087ffc

00080ed8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80ed8:	f04f 30ff 	mov.w	r0, #4294967295
   80edc:	4770      	bx	lr
   80ede:	bf00      	nop

00080ee0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80ee4:	604b      	str	r3, [r1, #4]

	return 0;
}
   80ee6:	2000      	movs	r0, #0
   80ee8:	4770      	bx	lr
   80eea:	bf00      	nop

00080eec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80eec:	2001      	movs	r0, #1
   80eee:	4770      	bx	lr

00080ef0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80ef0:	2000      	movs	r0, #0
   80ef2:	4770      	bx	lr

00080ef4 <__libc_init_array>:
   80ef4:	b570      	push	{r4, r5, r6, lr}
   80ef6:	4e0f      	ldr	r6, [pc, #60]	; (80f34 <__libc_init_array+0x40>)
   80ef8:	4d0f      	ldr	r5, [pc, #60]	; (80f38 <__libc_init_array+0x44>)
   80efa:	1b76      	subs	r6, r6, r5
   80efc:	10b6      	asrs	r6, r6, #2
   80efe:	d007      	beq.n	80f10 <__libc_init_array+0x1c>
   80f00:	3d04      	subs	r5, #4
   80f02:	2400      	movs	r4, #0
   80f04:	3401      	adds	r4, #1
   80f06:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80f0a:	4798      	blx	r3
   80f0c:	42a6      	cmp	r6, r4
   80f0e:	d1f9      	bne.n	80f04 <__libc_init_array+0x10>
   80f10:	4e0a      	ldr	r6, [pc, #40]	; (80f3c <__libc_init_array+0x48>)
   80f12:	4d0b      	ldr	r5, [pc, #44]	; (80f40 <__libc_init_array+0x4c>)
   80f14:	f003 f800 	bl	83f18 <_init>
   80f18:	1b76      	subs	r6, r6, r5
   80f1a:	10b6      	asrs	r6, r6, #2
   80f1c:	d008      	beq.n	80f30 <__libc_init_array+0x3c>
   80f1e:	3d04      	subs	r5, #4
   80f20:	2400      	movs	r4, #0
   80f22:	3401      	adds	r4, #1
   80f24:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80f28:	4798      	blx	r3
   80f2a:	42a6      	cmp	r6, r4
   80f2c:	d1f9      	bne.n	80f22 <__libc_init_array+0x2e>
   80f2e:	bd70      	pop	{r4, r5, r6, pc}
   80f30:	bd70      	pop	{r4, r5, r6, pc}
   80f32:	bf00      	nop
   80f34:	00083f24 	.word	0x00083f24
   80f38:	00083f24 	.word	0x00083f24
   80f3c:	00083f2c 	.word	0x00083f2c
   80f40:	00083f24 	.word	0x00083f24

00080f44 <iprintf>:
   80f44:	b40f      	push	{r0, r1, r2, r3}
   80f46:	b510      	push	{r4, lr}
   80f48:	4b07      	ldr	r3, [pc, #28]	; (80f68 <iprintf+0x24>)
   80f4a:	b082      	sub	sp, #8
   80f4c:	ac04      	add	r4, sp, #16
   80f4e:	f854 2b04 	ldr.w	r2, [r4], #4
   80f52:	6818      	ldr	r0, [r3, #0]
   80f54:	4623      	mov	r3, r4
   80f56:	6881      	ldr	r1, [r0, #8]
   80f58:	9401      	str	r4, [sp, #4]
   80f5a:	f000 f945 	bl	811e8 <_vfiprintf_r>
   80f5e:	b002      	add	sp, #8
   80f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80f64:	b004      	add	sp, #16
   80f66:	4770      	bx	lr
   80f68:	20070568 	.word	0x20070568

00080f6c <memset>:
   80f6c:	b4f0      	push	{r4, r5, r6, r7}
   80f6e:	0784      	lsls	r4, r0, #30
   80f70:	d043      	beq.n	80ffa <memset+0x8e>
   80f72:	1e54      	subs	r4, r2, #1
   80f74:	2a00      	cmp	r2, #0
   80f76:	d03e      	beq.n	80ff6 <memset+0x8a>
   80f78:	b2cd      	uxtb	r5, r1
   80f7a:	4603      	mov	r3, r0
   80f7c:	e003      	b.n	80f86 <memset+0x1a>
   80f7e:	1e62      	subs	r2, r4, #1
   80f80:	2c00      	cmp	r4, #0
   80f82:	d038      	beq.n	80ff6 <memset+0x8a>
   80f84:	4614      	mov	r4, r2
   80f86:	f803 5b01 	strb.w	r5, [r3], #1
   80f8a:	079a      	lsls	r2, r3, #30
   80f8c:	d1f7      	bne.n	80f7e <memset+0x12>
   80f8e:	2c03      	cmp	r4, #3
   80f90:	d92a      	bls.n	80fe8 <memset+0x7c>
   80f92:	b2cd      	uxtb	r5, r1
   80f94:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80f98:	2c0f      	cmp	r4, #15
   80f9a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80f9e:	d915      	bls.n	80fcc <memset+0x60>
   80fa0:	f1a4 0710 	sub.w	r7, r4, #16
   80fa4:	093f      	lsrs	r7, r7, #4
   80fa6:	f103 0610 	add.w	r6, r3, #16
   80faa:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   80fae:	461a      	mov	r2, r3
   80fb0:	6015      	str	r5, [r2, #0]
   80fb2:	6055      	str	r5, [r2, #4]
   80fb4:	6095      	str	r5, [r2, #8]
   80fb6:	60d5      	str	r5, [r2, #12]
   80fb8:	3210      	adds	r2, #16
   80fba:	42b2      	cmp	r2, r6
   80fbc:	d1f8      	bne.n	80fb0 <memset+0x44>
   80fbe:	f004 040f 	and.w	r4, r4, #15
   80fc2:	3701      	adds	r7, #1
   80fc4:	2c03      	cmp	r4, #3
   80fc6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   80fca:	d90d      	bls.n	80fe8 <memset+0x7c>
   80fcc:	461e      	mov	r6, r3
   80fce:	4622      	mov	r2, r4
   80fd0:	3a04      	subs	r2, #4
   80fd2:	2a03      	cmp	r2, #3
   80fd4:	f846 5b04 	str.w	r5, [r6], #4
   80fd8:	d8fa      	bhi.n	80fd0 <memset+0x64>
   80fda:	1f22      	subs	r2, r4, #4
   80fdc:	f022 0203 	bic.w	r2, r2, #3
   80fe0:	3204      	adds	r2, #4
   80fe2:	4413      	add	r3, r2
   80fe4:	f004 0403 	and.w	r4, r4, #3
   80fe8:	b12c      	cbz	r4, 80ff6 <memset+0x8a>
   80fea:	b2c9      	uxtb	r1, r1
   80fec:	441c      	add	r4, r3
   80fee:	f803 1b01 	strb.w	r1, [r3], #1
   80ff2:	42a3      	cmp	r3, r4
   80ff4:	d1fb      	bne.n	80fee <memset+0x82>
   80ff6:	bcf0      	pop	{r4, r5, r6, r7}
   80ff8:	4770      	bx	lr
   80ffa:	4614      	mov	r4, r2
   80ffc:	4603      	mov	r3, r0
   80ffe:	e7c6      	b.n	80f8e <memset+0x22>

00081000 <setbuf>:
   81000:	2900      	cmp	r1, #0
   81002:	bf0c      	ite	eq
   81004:	2202      	moveq	r2, #2
   81006:	2200      	movne	r2, #0
   81008:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8100c:	f000 b800 	b.w	81010 <setvbuf>

00081010 <setvbuf>:
   81010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81014:	4d3c      	ldr	r5, [pc, #240]	; (81108 <setvbuf+0xf8>)
   81016:	4604      	mov	r4, r0
   81018:	682d      	ldr	r5, [r5, #0]
   8101a:	4688      	mov	r8, r1
   8101c:	4616      	mov	r6, r2
   8101e:	461f      	mov	r7, r3
   81020:	b115      	cbz	r5, 81028 <setvbuf+0x18>
   81022:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81024:	2b00      	cmp	r3, #0
   81026:	d04f      	beq.n	810c8 <setvbuf+0xb8>
   81028:	2e02      	cmp	r6, #2
   8102a:	d830      	bhi.n	8108e <setvbuf+0x7e>
   8102c:	2f00      	cmp	r7, #0
   8102e:	db2e      	blt.n	8108e <setvbuf+0x7e>
   81030:	4628      	mov	r0, r5
   81032:	4621      	mov	r1, r4
   81034:	f001 f856 	bl	820e4 <_fflush_r>
   81038:	89a3      	ldrh	r3, [r4, #12]
   8103a:	2200      	movs	r2, #0
   8103c:	6062      	str	r2, [r4, #4]
   8103e:	61a2      	str	r2, [r4, #24]
   81040:	061a      	lsls	r2, r3, #24
   81042:	d428      	bmi.n	81096 <setvbuf+0x86>
   81044:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81048:	b29b      	uxth	r3, r3
   8104a:	2e02      	cmp	r6, #2
   8104c:	81a3      	strh	r3, [r4, #12]
   8104e:	d02d      	beq.n	810ac <setvbuf+0x9c>
   81050:	f1b8 0f00 	cmp.w	r8, #0
   81054:	d03c      	beq.n	810d0 <setvbuf+0xc0>
   81056:	2e01      	cmp	r6, #1
   81058:	d013      	beq.n	81082 <setvbuf+0x72>
   8105a:	b29b      	uxth	r3, r3
   8105c:	f003 0008 	and.w	r0, r3, #8
   81060:	4a2a      	ldr	r2, [pc, #168]	; (8110c <setvbuf+0xfc>)
   81062:	b280      	uxth	r0, r0
   81064:	63ea      	str	r2, [r5, #60]	; 0x3c
   81066:	f8c4 8000 	str.w	r8, [r4]
   8106a:	f8c4 8010 	str.w	r8, [r4, #16]
   8106e:	6167      	str	r7, [r4, #20]
   81070:	b178      	cbz	r0, 81092 <setvbuf+0x82>
   81072:	f013 0f03 	tst.w	r3, #3
   81076:	bf18      	it	ne
   81078:	2700      	movne	r7, #0
   8107a:	60a7      	str	r7, [r4, #8]
   8107c:	2000      	movs	r0, #0
   8107e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81082:	f043 0301 	orr.w	r3, r3, #1
   81086:	427a      	negs	r2, r7
   81088:	81a3      	strh	r3, [r4, #12]
   8108a:	61a2      	str	r2, [r4, #24]
   8108c:	e7e5      	b.n	8105a <setvbuf+0x4a>
   8108e:	f04f 30ff 	mov.w	r0, #4294967295
   81092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81096:	4628      	mov	r0, r5
   81098:	6921      	ldr	r1, [r4, #16]
   8109a:	f001 f983 	bl	823a4 <_free_r>
   8109e:	89a3      	ldrh	r3, [r4, #12]
   810a0:	2e02      	cmp	r6, #2
   810a2:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   810a6:	b29b      	uxth	r3, r3
   810a8:	81a3      	strh	r3, [r4, #12]
   810aa:	d1d1      	bne.n	81050 <setvbuf+0x40>
   810ac:	2000      	movs	r0, #0
   810ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
   810b2:	f043 0302 	orr.w	r3, r3, #2
   810b6:	2500      	movs	r5, #0
   810b8:	2101      	movs	r1, #1
   810ba:	81a3      	strh	r3, [r4, #12]
   810bc:	60a5      	str	r5, [r4, #8]
   810be:	6022      	str	r2, [r4, #0]
   810c0:	6122      	str	r2, [r4, #16]
   810c2:	6161      	str	r1, [r4, #20]
   810c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810c8:	4628      	mov	r0, r5
   810ca:	f001 f827 	bl	8211c <__sinit>
   810ce:	e7ab      	b.n	81028 <setvbuf+0x18>
   810d0:	2f00      	cmp	r7, #0
   810d2:	bf08      	it	eq
   810d4:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   810d8:	4638      	mov	r0, r7
   810da:	f001 fc59 	bl	82990 <malloc>
   810de:	4680      	mov	r8, r0
   810e0:	b128      	cbz	r0, 810ee <setvbuf+0xde>
   810e2:	89a3      	ldrh	r3, [r4, #12]
   810e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   810e8:	b29b      	uxth	r3, r3
   810ea:	81a3      	strh	r3, [r4, #12]
   810ec:	e7b3      	b.n	81056 <setvbuf+0x46>
   810ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
   810f2:	f001 fc4d 	bl	82990 <malloc>
   810f6:	4680      	mov	r8, r0
   810f8:	b918      	cbnz	r0, 81102 <setvbuf+0xf2>
   810fa:	89a3      	ldrh	r3, [r4, #12]
   810fc:	f04f 30ff 	mov.w	r0, #4294967295
   81100:	e7d5      	b.n	810ae <setvbuf+0x9e>
   81102:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81106:	e7ec      	b.n	810e2 <setvbuf+0xd2>
   81108:	20070568 	.word	0x20070568
   8110c:	00082111 	.word	0x00082111

00081110 <strlen>:
   81110:	f020 0103 	bic.w	r1, r0, #3
   81114:	f010 0003 	ands.w	r0, r0, #3
   81118:	f1c0 0000 	rsb	r0, r0, #0
   8111c:	f851 3b04 	ldr.w	r3, [r1], #4
   81120:	f100 0c04 	add.w	ip, r0, #4
   81124:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81128:	f06f 0200 	mvn.w	r2, #0
   8112c:	bf1c      	itt	ne
   8112e:	fa22 f20c 	lsrne.w	r2, r2, ip
   81132:	4313      	orrne	r3, r2
   81134:	f04f 0c01 	mov.w	ip, #1
   81138:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8113c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81140:	eba3 020c 	sub.w	r2, r3, ip
   81144:	ea22 0203 	bic.w	r2, r2, r3
   81148:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8114c:	bf04      	itt	eq
   8114e:	f851 3b04 	ldreq.w	r3, [r1], #4
   81152:	3004      	addeq	r0, #4
   81154:	d0f4      	beq.n	81140 <strlen+0x30>
   81156:	f013 0fff 	tst.w	r3, #255	; 0xff
   8115a:	bf1f      	itttt	ne
   8115c:	3001      	addne	r0, #1
   8115e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   81162:	3001      	addne	r0, #1
   81164:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   81168:	bf18      	it	ne
   8116a:	3001      	addne	r0, #1
   8116c:	4770      	bx	lr
   8116e:	bf00      	nop

00081170 <__sprint_r.part.0>:
   81170:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81176:	049c      	lsls	r4, r3, #18
   81178:	460e      	mov	r6, r1
   8117a:	4680      	mov	r8, r0
   8117c:	4691      	mov	r9, r2
   8117e:	d52a      	bpl.n	811d6 <__sprint_r.part.0+0x66>
   81180:	6893      	ldr	r3, [r2, #8]
   81182:	6812      	ldr	r2, [r2, #0]
   81184:	f102 0a08 	add.w	sl, r2, #8
   81188:	b31b      	cbz	r3, 811d2 <__sprint_r.part.0+0x62>
   8118a:	e91a 00a0 	ldmdb	sl, {r5, r7}
   8118e:	08bf      	lsrs	r7, r7, #2
   81190:	d017      	beq.n	811c2 <__sprint_r.part.0+0x52>
   81192:	3d04      	subs	r5, #4
   81194:	2400      	movs	r4, #0
   81196:	e001      	b.n	8119c <__sprint_r.part.0+0x2c>
   81198:	42a7      	cmp	r7, r4
   8119a:	d010      	beq.n	811be <__sprint_r.part.0+0x4e>
   8119c:	4640      	mov	r0, r8
   8119e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   811a2:	4632      	mov	r2, r6
   811a4:	f001 f850 	bl	82248 <_fputwc_r>
   811a8:	1c43      	adds	r3, r0, #1
   811aa:	f104 0401 	add.w	r4, r4, #1
   811ae:	d1f3      	bne.n	81198 <__sprint_r.part.0+0x28>
   811b0:	2300      	movs	r3, #0
   811b2:	f8c9 3008 	str.w	r3, [r9, #8]
   811b6:	f8c9 3004 	str.w	r3, [r9, #4]
   811ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   811be:	f8d9 3008 	ldr.w	r3, [r9, #8]
   811c2:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   811c6:	f8c9 3008 	str.w	r3, [r9, #8]
   811ca:	f10a 0a08 	add.w	sl, sl, #8
   811ce:	2b00      	cmp	r3, #0
   811d0:	d1db      	bne.n	8118a <__sprint_r.part.0+0x1a>
   811d2:	2000      	movs	r0, #0
   811d4:	e7ec      	b.n	811b0 <__sprint_r.part.0+0x40>
   811d6:	f001 f9b1 	bl	8253c <__sfvwrite_r>
   811da:	2300      	movs	r3, #0
   811dc:	f8c9 3008 	str.w	r3, [r9, #8]
   811e0:	f8c9 3004 	str.w	r3, [r9, #4]
   811e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000811e8 <_vfiprintf_r>:
   811e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   811ec:	b0b1      	sub	sp, #196	; 0xc4
   811ee:	461c      	mov	r4, r3
   811f0:	9102      	str	r1, [sp, #8]
   811f2:	4690      	mov	r8, r2
   811f4:	9308      	str	r3, [sp, #32]
   811f6:	9006      	str	r0, [sp, #24]
   811f8:	b118      	cbz	r0, 81202 <_vfiprintf_r+0x1a>
   811fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   811fc:	2b00      	cmp	r3, #0
   811fe:	f000 80e8 	beq.w	813d2 <_vfiprintf_r+0x1ea>
   81202:	9d02      	ldr	r5, [sp, #8]
   81204:	89ab      	ldrh	r3, [r5, #12]
   81206:	b29a      	uxth	r2, r3
   81208:	0490      	lsls	r0, r2, #18
   8120a:	d407      	bmi.n	8121c <_vfiprintf_r+0x34>
   8120c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   8120e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81212:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81216:	81ab      	strh	r3, [r5, #12]
   81218:	b29a      	uxth	r2, r3
   8121a:	6669      	str	r1, [r5, #100]	; 0x64
   8121c:	0711      	lsls	r1, r2, #28
   8121e:	f140 80b7 	bpl.w	81390 <_vfiprintf_r+0x1a8>
   81222:	f8dd b008 	ldr.w	fp, [sp, #8]
   81226:	f8db 3010 	ldr.w	r3, [fp, #16]
   8122a:	2b00      	cmp	r3, #0
   8122c:	f000 80b0 	beq.w	81390 <_vfiprintf_r+0x1a8>
   81230:	f002 021a 	and.w	r2, r2, #26
   81234:	2a0a      	cmp	r2, #10
   81236:	f000 80b7 	beq.w	813a8 <_vfiprintf_r+0x1c0>
   8123a:	2300      	movs	r3, #0
   8123c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81240:	930a      	str	r3, [sp, #40]	; 0x28
   81242:	9315      	str	r3, [sp, #84]	; 0x54
   81244:	9314      	str	r3, [sp, #80]	; 0x50
   81246:	9309      	str	r3, [sp, #36]	; 0x24
   81248:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   8124c:	464e      	mov	r6, r9
   8124e:	f898 3000 	ldrb.w	r3, [r8]
   81252:	2b00      	cmp	r3, #0
   81254:	f000 84c8 	beq.w	81be8 <_vfiprintf_r+0xa00>
   81258:	2b25      	cmp	r3, #37	; 0x25
   8125a:	f000 84c5 	beq.w	81be8 <_vfiprintf_r+0xa00>
   8125e:	f108 0201 	add.w	r2, r8, #1
   81262:	e001      	b.n	81268 <_vfiprintf_r+0x80>
   81264:	2b25      	cmp	r3, #37	; 0x25
   81266:	d004      	beq.n	81272 <_vfiprintf_r+0x8a>
   81268:	7813      	ldrb	r3, [r2, #0]
   8126a:	4614      	mov	r4, r2
   8126c:	3201      	adds	r2, #1
   8126e:	2b00      	cmp	r3, #0
   81270:	d1f8      	bne.n	81264 <_vfiprintf_r+0x7c>
   81272:	ebc8 0504 	rsb	r5, r8, r4
   81276:	b195      	cbz	r5, 8129e <_vfiprintf_r+0xb6>
   81278:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8127a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8127c:	3301      	adds	r3, #1
   8127e:	442a      	add	r2, r5
   81280:	2b07      	cmp	r3, #7
   81282:	f8c6 8000 	str.w	r8, [r6]
   81286:	6075      	str	r5, [r6, #4]
   81288:	9215      	str	r2, [sp, #84]	; 0x54
   8128a:	9314      	str	r3, [sp, #80]	; 0x50
   8128c:	dd7b      	ble.n	81386 <_vfiprintf_r+0x19e>
   8128e:	2a00      	cmp	r2, #0
   81290:	f040 84d5 	bne.w	81c3e <_vfiprintf_r+0xa56>
   81294:	9809      	ldr	r0, [sp, #36]	; 0x24
   81296:	9214      	str	r2, [sp, #80]	; 0x50
   81298:	4428      	add	r0, r5
   8129a:	464e      	mov	r6, r9
   8129c:	9009      	str	r0, [sp, #36]	; 0x24
   8129e:	7823      	ldrb	r3, [r4, #0]
   812a0:	2b00      	cmp	r3, #0
   812a2:	f000 83ed 	beq.w	81a80 <_vfiprintf_r+0x898>
   812a6:	2100      	movs	r1, #0
   812a8:	f04f 0200 	mov.w	r2, #0
   812ac:	f04f 3cff 	mov.w	ip, #4294967295
   812b0:	7863      	ldrb	r3, [r4, #1]
   812b2:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   812b6:	9104      	str	r1, [sp, #16]
   812b8:	468a      	mov	sl, r1
   812ba:	f104 0801 	add.w	r8, r4, #1
   812be:	4608      	mov	r0, r1
   812c0:	4665      	mov	r5, ip
   812c2:	f108 0801 	add.w	r8, r8, #1
   812c6:	f1a3 0220 	sub.w	r2, r3, #32
   812ca:	2a58      	cmp	r2, #88	; 0x58
   812cc:	f200 82d9 	bhi.w	81882 <_vfiprintf_r+0x69a>
   812d0:	e8df f012 	tbh	[pc, r2, lsl #1]
   812d4:	02d702cb 	.word	0x02d702cb
   812d8:	02d202d7 	.word	0x02d202d7
   812dc:	02d702d7 	.word	0x02d702d7
   812e0:	02d702d7 	.word	0x02d702d7
   812e4:	02d702d7 	.word	0x02d702d7
   812e8:	028f0282 	.word	0x028f0282
   812ec:	008402d7 	.word	0x008402d7
   812f0:	02d70293 	.word	0x02d70293
   812f4:	0196012b 	.word	0x0196012b
   812f8:	01960196 	.word	0x01960196
   812fc:	01960196 	.word	0x01960196
   81300:	01960196 	.word	0x01960196
   81304:	01960196 	.word	0x01960196
   81308:	02d702d7 	.word	0x02d702d7
   8130c:	02d702d7 	.word	0x02d702d7
   81310:	02d702d7 	.word	0x02d702d7
   81314:	02d702d7 	.word	0x02d702d7
   81318:	02d702d7 	.word	0x02d702d7
   8131c:	02d70130 	.word	0x02d70130
   81320:	02d702d7 	.word	0x02d702d7
   81324:	02d702d7 	.word	0x02d702d7
   81328:	02d702d7 	.word	0x02d702d7
   8132c:	02d702d7 	.word	0x02d702d7
   81330:	017b02d7 	.word	0x017b02d7
   81334:	02d702d7 	.word	0x02d702d7
   81338:	02d702d7 	.word	0x02d702d7
   8133c:	01a402d7 	.word	0x01a402d7
   81340:	02d702d7 	.word	0x02d702d7
   81344:	02d701bf 	.word	0x02d701bf
   81348:	02d702d7 	.word	0x02d702d7
   8134c:	02d702d7 	.word	0x02d702d7
   81350:	02d702d7 	.word	0x02d702d7
   81354:	02d702d7 	.word	0x02d702d7
   81358:	01e402d7 	.word	0x01e402d7
   8135c:	02d701fa 	.word	0x02d701fa
   81360:	02d702d7 	.word	0x02d702d7
   81364:	01fa0216 	.word	0x01fa0216
   81368:	02d702d7 	.word	0x02d702d7
   8136c:	02d7021b 	.word	0x02d7021b
   81370:	00890228 	.word	0x00890228
   81374:	027d0266 	.word	0x027d0266
   81378:	023a02d7 	.word	0x023a02d7
   8137c:	011902d7 	.word	0x011902d7
   81380:	02d702d7 	.word	0x02d702d7
   81384:	02af      	.short	0x02af
   81386:	3608      	adds	r6, #8
   81388:	9809      	ldr	r0, [sp, #36]	; 0x24
   8138a:	4428      	add	r0, r5
   8138c:	9009      	str	r0, [sp, #36]	; 0x24
   8138e:	e786      	b.n	8129e <_vfiprintf_r+0xb6>
   81390:	9806      	ldr	r0, [sp, #24]
   81392:	9902      	ldr	r1, [sp, #8]
   81394:	f000 fd90 	bl	81eb8 <__swsetup_r>
   81398:	b9b0      	cbnz	r0, 813c8 <_vfiprintf_r+0x1e0>
   8139a:	9d02      	ldr	r5, [sp, #8]
   8139c:	89aa      	ldrh	r2, [r5, #12]
   8139e:	f002 021a 	and.w	r2, r2, #26
   813a2:	2a0a      	cmp	r2, #10
   813a4:	f47f af49 	bne.w	8123a <_vfiprintf_r+0x52>
   813a8:	f8dd b008 	ldr.w	fp, [sp, #8]
   813ac:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   813b0:	2b00      	cmp	r3, #0
   813b2:	f6ff af42 	blt.w	8123a <_vfiprintf_r+0x52>
   813b6:	9806      	ldr	r0, [sp, #24]
   813b8:	4659      	mov	r1, fp
   813ba:	4642      	mov	r2, r8
   813bc:	4623      	mov	r3, r4
   813be:	f000 fd3d 	bl	81e3c <__sbprintf>
   813c2:	b031      	add	sp, #196	; 0xc4
   813c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813c8:	f04f 30ff 	mov.w	r0, #4294967295
   813cc:	b031      	add	sp, #196	; 0xc4
   813ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813d2:	f000 fea3 	bl	8211c <__sinit>
   813d6:	e714      	b.n	81202 <_vfiprintf_r+0x1a>
   813d8:	4240      	negs	r0, r0
   813da:	9308      	str	r3, [sp, #32]
   813dc:	f04a 0a04 	orr.w	sl, sl, #4
   813e0:	f898 3000 	ldrb.w	r3, [r8]
   813e4:	e76d      	b.n	812c2 <_vfiprintf_r+0xda>
   813e6:	f01a 0320 	ands.w	r3, sl, #32
   813ea:	9004      	str	r0, [sp, #16]
   813ec:	46ac      	mov	ip, r5
   813ee:	f000 80f4 	beq.w	815da <_vfiprintf_r+0x3f2>
   813f2:	f8dd b020 	ldr.w	fp, [sp, #32]
   813f6:	f10b 0307 	add.w	r3, fp, #7
   813fa:	f023 0307 	bic.w	r3, r3, #7
   813fe:	f103 0408 	add.w	r4, r3, #8
   81402:	9408      	str	r4, [sp, #32]
   81404:	e9d3 4500 	ldrd	r4, r5, [r3]
   81408:	2300      	movs	r3, #0
   8140a:	f04f 0000 	mov.w	r0, #0
   8140e:	2100      	movs	r1, #0
   81410:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   81414:	f8cd c014 	str.w	ip, [sp, #20]
   81418:	9107      	str	r1, [sp, #28]
   8141a:	f1bc 0f00 	cmp.w	ip, #0
   8141e:	bfa8      	it	ge
   81420:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81424:	ea54 0205 	orrs.w	r2, r4, r5
   81428:	f040 80ad 	bne.w	81586 <_vfiprintf_r+0x39e>
   8142c:	f1bc 0f00 	cmp.w	ip, #0
   81430:	f040 80a9 	bne.w	81586 <_vfiprintf_r+0x39e>
   81434:	2b00      	cmp	r3, #0
   81436:	f040 83c0 	bne.w	81bba <_vfiprintf_r+0x9d2>
   8143a:	f01a 0f01 	tst.w	sl, #1
   8143e:	f000 83bc 	beq.w	81bba <_vfiprintf_r+0x9d2>
   81442:	2330      	movs	r3, #48	; 0x30
   81444:	af30      	add	r7, sp, #192	; 0xc0
   81446:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8144a:	ebc7 0409 	rsb	r4, r7, r9
   8144e:	9405      	str	r4, [sp, #20]
   81450:	f8dd b014 	ldr.w	fp, [sp, #20]
   81454:	9c07      	ldr	r4, [sp, #28]
   81456:	45e3      	cmp	fp, ip
   81458:	bfb8      	it	lt
   8145a:	46e3      	movlt	fp, ip
   8145c:	f8cd b00c 	str.w	fp, [sp, #12]
   81460:	b11c      	cbz	r4, 8146a <_vfiprintf_r+0x282>
   81462:	f10b 0b01 	add.w	fp, fp, #1
   81466:	f8cd b00c 	str.w	fp, [sp, #12]
   8146a:	f01a 0502 	ands.w	r5, sl, #2
   8146e:	9507      	str	r5, [sp, #28]
   81470:	d005      	beq.n	8147e <_vfiprintf_r+0x296>
   81472:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81476:	f10b 0b02 	add.w	fp, fp, #2
   8147a:	f8cd b00c 	str.w	fp, [sp, #12]
   8147e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81482:	930b      	str	r3, [sp, #44]	; 0x2c
   81484:	f040 821b 	bne.w	818be <_vfiprintf_r+0x6d6>
   81488:	9d04      	ldr	r5, [sp, #16]
   8148a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8148e:	ebcb 0405 	rsb	r4, fp, r5
   81492:	2c00      	cmp	r4, #0
   81494:	f340 8213 	ble.w	818be <_vfiprintf_r+0x6d6>
   81498:	2c10      	cmp	r4, #16
   8149a:	f340 8489 	ble.w	81db0 <_vfiprintf_r+0xbc8>
   8149e:	4dbe      	ldr	r5, [pc, #760]	; (81798 <_vfiprintf_r+0x5b0>)
   814a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   814a2:	462b      	mov	r3, r5
   814a4:	9814      	ldr	r0, [sp, #80]	; 0x50
   814a6:	4625      	mov	r5, r4
   814a8:	f04f 0b10 	mov.w	fp, #16
   814ac:	4664      	mov	r4, ip
   814ae:	46b4      	mov	ip, r6
   814b0:	461e      	mov	r6, r3
   814b2:	e006      	b.n	814c2 <_vfiprintf_r+0x2da>
   814b4:	1c83      	adds	r3, r0, #2
   814b6:	f10c 0c08 	add.w	ip, ip, #8
   814ba:	4608      	mov	r0, r1
   814bc:	3d10      	subs	r5, #16
   814be:	2d10      	cmp	r5, #16
   814c0:	dd11      	ble.n	814e6 <_vfiprintf_r+0x2fe>
   814c2:	1c41      	adds	r1, r0, #1
   814c4:	3210      	adds	r2, #16
   814c6:	2907      	cmp	r1, #7
   814c8:	9215      	str	r2, [sp, #84]	; 0x54
   814ca:	e88c 0840 	stmia.w	ip, {r6, fp}
   814ce:	9114      	str	r1, [sp, #80]	; 0x50
   814d0:	ddf0      	ble.n	814b4 <_vfiprintf_r+0x2cc>
   814d2:	2a00      	cmp	r2, #0
   814d4:	f040 81e6 	bne.w	818a4 <_vfiprintf_r+0x6bc>
   814d8:	3d10      	subs	r5, #16
   814da:	2d10      	cmp	r5, #16
   814dc:	f04f 0301 	mov.w	r3, #1
   814e0:	4610      	mov	r0, r2
   814e2:	46cc      	mov	ip, r9
   814e4:	dced      	bgt.n	814c2 <_vfiprintf_r+0x2da>
   814e6:	4631      	mov	r1, r6
   814e8:	4666      	mov	r6, ip
   814ea:	46a4      	mov	ip, r4
   814ec:	462c      	mov	r4, r5
   814ee:	460d      	mov	r5, r1
   814f0:	4422      	add	r2, r4
   814f2:	2b07      	cmp	r3, #7
   814f4:	9215      	str	r2, [sp, #84]	; 0x54
   814f6:	6035      	str	r5, [r6, #0]
   814f8:	6074      	str	r4, [r6, #4]
   814fa:	9314      	str	r3, [sp, #80]	; 0x50
   814fc:	f300 836d 	bgt.w	81bda <_vfiprintf_r+0x9f2>
   81500:	3608      	adds	r6, #8
   81502:	1c59      	adds	r1, r3, #1
   81504:	e1de      	b.n	818c4 <_vfiprintf_r+0x6dc>
   81506:	f01a 0f20 	tst.w	sl, #32
   8150a:	9004      	str	r0, [sp, #16]
   8150c:	46ac      	mov	ip, r5
   8150e:	f000 808d 	beq.w	8162c <_vfiprintf_r+0x444>
   81512:	9d08      	ldr	r5, [sp, #32]
   81514:	1deb      	adds	r3, r5, #7
   81516:	f023 0307 	bic.w	r3, r3, #7
   8151a:	f103 0b08 	add.w	fp, r3, #8
   8151e:	e9d3 4500 	ldrd	r4, r5, [r3]
   81522:	f8cd b020 	str.w	fp, [sp, #32]
   81526:	2301      	movs	r3, #1
   81528:	e76f      	b.n	8140a <_vfiprintf_r+0x222>
   8152a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   8152e:	f898 3000 	ldrb.w	r3, [r8]
   81532:	e6c6      	b.n	812c2 <_vfiprintf_r+0xda>
   81534:	f04a 0a10 	orr.w	sl, sl, #16
   81538:	f01a 0f20 	tst.w	sl, #32
   8153c:	9004      	str	r0, [sp, #16]
   8153e:	46ac      	mov	ip, r5
   81540:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81544:	f000 80c8 	beq.w	816d8 <_vfiprintf_r+0x4f0>
   81548:	9c08      	ldr	r4, [sp, #32]
   8154a:	1de1      	adds	r1, r4, #7
   8154c:	f021 0107 	bic.w	r1, r1, #7
   81550:	e9d1 2300 	ldrd	r2, r3, [r1]
   81554:	3108      	adds	r1, #8
   81556:	9108      	str	r1, [sp, #32]
   81558:	4614      	mov	r4, r2
   8155a:	461d      	mov	r5, r3
   8155c:	2a00      	cmp	r2, #0
   8155e:	f173 0b00 	sbcs.w	fp, r3, #0
   81562:	f2c0 83ce 	blt.w	81d02 <_vfiprintf_r+0xb1a>
   81566:	f1bc 0f00 	cmp.w	ip, #0
   8156a:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8156e:	bfa8      	it	ge
   81570:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81574:	ea54 0205 	orrs.w	r2, r4, r5
   81578:	9007      	str	r0, [sp, #28]
   8157a:	f8cd c014 	str.w	ip, [sp, #20]
   8157e:	f04f 0301 	mov.w	r3, #1
   81582:	f43f af53 	beq.w	8142c <_vfiprintf_r+0x244>
   81586:	2b01      	cmp	r3, #1
   81588:	f000 8319 	beq.w	81bbe <_vfiprintf_r+0x9d6>
   8158c:	2b02      	cmp	r3, #2
   8158e:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81592:	f040 824c 	bne.w	81a2e <_vfiprintf_r+0x846>
   81596:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8159a:	4619      	mov	r1, r3
   8159c:	f004 000f 	and.w	r0, r4, #15
   815a0:	0922      	lsrs	r2, r4, #4
   815a2:	f81b 0000 	ldrb.w	r0, [fp, r0]
   815a6:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   815aa:	092b      	lsrs	r3, r5, #4
   815ac:	7008      	strb	r0, [r1, #0]
   815ae:	ea52 0003 	orrs.w	r0, r2, r3
   815b2:	460f      	mov	r7, r1
   815b4:	4614      	mov	r4, r2
   815b6:	461d      	mov	r5, r3
   815b8:	f101 31ff 	add.w	r1, r1, #4294967295
   815bc:	d1ee      	bne.n	8159c <_vfiprintf_r+0x3b4>
   815be:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   815c2:	ebc7 0309 	rsb	r3, r7, r9
   815c6:	9305      	str	r3, [sp, #20]
   815c8:	e742      	b.n	81450 <_vfiprintf_r+0x268>
   815ca:	f04a 0a10 	orr.w	sl, sl, #16
   815ce:	f01a 0320 	ands.w	r3, sl, #32
   815d2:	9004      	str	r0, [sp, #16]
   815d4:	46ac      	mov	ip, r5
   815d6:	f47f af0c 	bne.w	813f2 <_vfiprintf_r+0x20a>
   815da:	f01a 0210 	ands.w	r2, sl, #16
   815de:	f040 8311 	bne.w	81c04 <_vfiprintf_r+0xa1c>
   815e2:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   815e6:	f000 830d 	beq.w	81c04 <_vfiprintf_r+0xa1c>
   815ea:	f8dd b020 	ldr.w	fp, [sp, #32]
   815ee:	4613      	mov	r3, r2
   815f0:	f8bb 4000 	ldrh.w	r4, [fp]
   815f4:	f10b 0b04 	add.w	fp, fp, #4
   815f8:	2500      	movs	r5, #0
   815fa:	f8cd b020 	str.w	fp, [sp, #32]
   815fe:	e704      	b.n	8140a <_vfiprintf_r+0x222>
   81600:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81604:	2000      	movs	r0, #0
   81606:	f818 3b01 	ldrb.w	r3, [r8], #1
   8160a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8160e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   81612:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81616:	2a09      	cmp	r2, #9
   81618:	d9f5      	bls.n	81606 <_vfiprintf_r+0x41e>
   8161a:	e654      	b.n	812c6 <_vfiprintf_r+0xde>
   8161c:	f04a 0a10 	orr.w	sl, sl, #16
   81620:	f01a 0f20 	tst.w	sl, #32
   81624:	9004      	str	r0, [sp, #16]
   81626:	46ac      	mov	ip, r5
   81628:	f47f af73 	bne.w	81512 <_vfiprintf_r+0x32a>
   8162c:	f01a 0f10 	tst.w	sl, #16
   81630:	f040 82ef 	bne.w	81c12 <_vfiprintf_r+0xa2a>
   81634:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81638:	f000 82eb 	beq.w	81c12 <_vfiprintf_r+0xa2a>
   8163c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81640:	2500      	movs	r5, #0
   81642:	f8bb 4000 	ldrh.w	r4, [fp]
   81646:	f10b 0b04 	add.w	fp, fp, #4
   8164a:	2301      	movs	r3, #1
   8164c:	f8cd b020 	str.w	fp, [sp, #32]
   81650:	e6db      	b.n	8140a <_vfiprintf_r+0x222>
   81652:	46ac      	mov	ip, r5
   81654:	4d51      	ldr	r5, [pc, #324]	; (8179c <_vfiprintf_r+0x5b4>)
   81656:	f01a 0f20 	tst.w	sl, #32
   8165a:	9004      	str	r0, [sp, #16]
   8165c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81660:	950a      	str	r5, [sp, #40]	; 0x28
   81662:	f000 80f0 	beq.w	81846 <_vfiprintf_r+0x65e>
   81666:	9d08      	ldr	r5, [sp, #32]
   81668:	1dea      	adds	r2, r5, #7
   8166a:	f022 0207 	bic.w	r2, r2, #7
   8166e:	f102 0b08 	add.w	fp, r2, #8
   81672:	f8cd b020 	str.w	fp, [sp, #32]
   81676:	e9d2 4500 	ldrd	r4, r5, [r2]
   8167a:	f01a 0f01 	tst.w	sl, #1
   8167e:	f000 82aa 	beq.w	81bd6 <_vfiprintf_r+0x9ee>
   81682:	ea54 0b05 	orrs.w	fp, r4, r5
   81686:	f000 82a6 	beq.w	81bd6 <_vfiprintf_r+0x9ee>
   8168a:	2230      	movs	r2, #48	; 0x30
   8168c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81690:	f04a 0a02 	orr.w	sl, sl, #2
   81694:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81698:	2302      	movs	r3, #2
   8169a:	e6b6      	b.n	8140a <_vfiprintf_r+0x222>
   8169c:	9b08      	ldr	r3, [sp, #32]
   8169e:	f8dd b020 	ldr.w	fp, [sp, #32]
   816a2:	681b      	ldr	r3, [r3, #0]
   816a4:	2401      	movs	r4, #1
   816a6:	f04f 0500 	mov.w	r5, #0
   816aa:	f10b 0b04 	add.w	fp, fp, #4
   816ae:	9004      	str	r0, [sp, #16]
   816b0:	9403      	str	r4, [sp, #12]
   816b2:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   816b6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   816ba:	f8cd b020 	str.w	fp, [sp, #32]
   816be:	9405      	str	r4, [sp, #20]
   816c0:	af16      	add	r7, sp, #88	; 0x58
   816c2:	f04f 0c00 	mov.w	ip, #0
   816c6:	e6d0      	b.n	8146a <_vfiprintf_r+0x282>
   816c8:	f01a 0f20 	tst.w	sl, #32
   816cc:	9004      	str	r0, [sp, #16]
   816ce:	46ac      	mov	ip, r5
   816d0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   816d4:	f47f af38 	bne.w	81548 <_vfiprintf_r+0x360>
   816d8:	f01a 0f10 	tst.w	sl, #16
   816dc:	f040 82a7 	bne.w	81c2e <_vfiprintf_r+0xa46>
   816e0:	f01a 0f40 	tst.w	sl, #64	; 0x40
   816e4:	f000 82a3 	beq.w	81c2e <_vfiprintf_r+0xa46>
   816e8:	f8dd b020 	ldr.w	fp, [sp, #32]
   816ec:	f9bb 4000 	ldrsh.w	r4, [fp]
   816f0:	f10b 0b04 	add.w	fp, fp, #4
   816f4:	17e5      	asrs	r5, r4, #31
   816f6:	4622      	mov	r2, r4
   816f8:	462b      	mov	r3, r5
   816fa:	f8cd b020 	str.w	fp, [sp, #32]
   816fe:	e72d      	b.n	8155c <_vfiprintf_r+0x374>
   81700:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81704:	f898 3000 	ldrb.w	r3, [r8]
   81708:	e5db      	b.n	812c2 <_vfiprintf_r+0xda>
   8170a:	f898 3000 	ldrb.w	r3, [r8]
   8170e:	4642      	mov	r2, r8
   81710:	2b6c      	cmp	r3, #108	; 0x6c
   81712:	bf03      	ittte	eq
   81714:	f108 0801 	addeq.w	r8, r8, #1
   81718:	f04a 0a20 	orreq.w	sl, sl, #32
   8171c:	7853      	ldrbeq	r3, [r2, #1]
   8171e:	f04a 0a10 	orrne.w	sl, sl, #16
   81722:	e5ce      	b.n	812c2 <_vfiprintf_r+0xda>
   81724:	f01a 0f20 	tst.w	sl, #32
   81728:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8172c:	f000 82f7 	beq.w	81d1e <_vfiprintf_r+0xb36>
   81730:	9c08      	ldr	r4, [sp, #32]
   81732:	6821      	ldr	r1, [r4, #0]
   81734:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81736:	17e5      	asrs	r5, r4, #31
   81738:	462b      	mov	r3, r5
   8173a:	9d08      	ldr	r5, [sp, #32]
   8173c:	4622      	mov	r2, r4
   8173e:	3504      	adds	r5, #4
   81740:	9508      	str	r5, [sp, #32]
   81742:	e9c1 2300 	strd	r2, r3, [r1]
   81746:	e582      	b.n	8124e <_vfiprintf_r+0x66>
   81748:	9c08      	ldr	r4, [sp, #32]
   8174a:	46ac      	mov	ip, r5
   8174c:	6827      	ldr	r7, [r4, #0]
   8174e:	f04f 0500 	mov.w	r5, #0
   81752:	9004      	str	r0, [sp, #16]
   81754:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81758:	3404      	adds	r4, #4
   8175a:	2f00      	cmp	r7, #0
   8175c:	f000 8332 	beq.w	81dc4 <_vfiprintf_r+0xbdc>
   81760:	f1bc 0f00 	cmp.w	ip, #0
   81764:	4638      	mov	r0, r7
   81766:	f2c0 8307 	blt.w	81d78 <_vfiprintf_r+0xb90>
   8176a:	4662      	mov	r2, ip
   8176c:	2100      	movs	r1, #0
   8176e:	f8cd c004 	str.w	ip, [sp, #4]
   81772:	f001 fbb1 	bl	82ed8 <memchr>
   81776:	f8dd c004 	ldr.w	ip, [sp, #4]
   8177a:	2800      	cmp	r0, #0
   8177c:	f000 833a 	beq.w	81df4 <_vfiprintf_r+0xc0c>
   81780:	1bc0      	subs	r0, r0, r7
   81782:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81786:	4560      	cmp	r0, ip
   81788:	bfa8      	it	ge
   8178a:	4660      	movge	r0, ip
   8178c:	9005      	str	r0, [sp, #20]
   8178e:	9408      	str	r4, [sp, #32]
   81790:	9507      	str	r5, [sp, #28]
   81792:	f04f 0c00 	mov.w	ip, #0
   81796:	e65b      	b.n	81450 <_vfiprintf_r+0x268>
   81798:	00083f08 	.word	0x00083f08
   8179c:	00083ec8 	.word	0x00083ec8
   817a0:	9b08      	ldr	r3, [sp, #32]
   817a2:	f8dd b020 	ldr.w	fp, [sp, #32]
   817a6:	9004      	str	r0, [sp, #16]
   817a8:	48b2      	ldr	r0, [pc, #712]	; (81a74 <_vfiprintf_r+0x88c>)
   817aa:	681c      	ldr	r4, [r3, #0]
   817ac:	2230      	movs	r2, #48	; 0x30
   817ae:	2378      	movs	r3, #120	; 0x78
   817b0:	f10b 0b04 	add.w	fp, fp, #4
   817b4:	46ac      	mov	ip, r5
   817b6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   817ba:	f04a 0a02 	orr.w	sl, sl, #2
   817be:	f8cd b020 	str.w	fp, [sp, #32]
   817c2:	2500      	movs	r5, #0
   817c4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   817c8:	900a      	str	r0, [sp, #40]	; 0x28
   817ca:	2302      	movs	r3, #2
   817cc:	e61d      	b.n	8140a <_vfiprintf_r+0x222>
   817ce:	f04a 0a20 	orr.w	sl, sl, #32
   817d2:	f898 3000 	ldrb.w	r3, [r8]
   817d6:	e574      	b.n	812c2 <_vfiprintf_r+0xda>
   817d8:	f8dd b020 	ldr.w	fp, [sp, #32]
   817dc:	f8db 0000 	ldr.w	r0, [fp]
   817e0:	f10b 0304 	add.w	r3, fp, #4
   817e4:	2800      	cmp	r0, #0
   817e6:	f6ff adf7 	blt.w	813d8 <_vfiprintf_r+0x1f0>
   817ea:	9308      	str	r3, [sp, #32]
   817ec:	f898 3000 	ldrb.w	r3, [r8]
   817f0:	e567      	b.n	812c2 <_vfiprintf_r+0xda>
   817f2:	f898 3000 	ldrb.w	r3, [r8]
   817f6:	212b      	movs	r1, #43	; 0x2b
   817f8:	e563      	b.n	812c2 <_vfiprintf_r+0xda>
   817fa:	f898 3000 	ldrb.w	r3, [r8]
   817fe:	f108 0401 	add.w	r4, r8, #1
   81802:	2b2a      	cmp	r3, #42	; 0x2a
   81804:	f000 8305 	beq.w	81e12 <_vfiprintf_r+0xc2a>
   81808:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8180c:	2a09      	cmp	r2, #9
   8180e:	bf98      	it	ls
   81810:	2500      	movls	r5, #0
   81812:	f200 82fa 	bhi.w	81e0a <_vfiprintf_r+0xc22>
   81816:	f814 3b01 	ldrb.w	r3, [r4], #1
   8181a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8181e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81822:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81826:	2a09      	cmp	r2, #9
   81828:	d9f5      	bls.n	81816 <_vfiprintf_r+0x62e>
   8182a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   8182e:	46a0      	mov	r8, r4
   81830:	e549      	b.n	812c6 <_vfiprintf_r+0xde>
   81832:	4c90      	ldr	r4, [pc, #576]	; (81a74 <_vfiprintf_r+0x88c>)
   81834:	f01a 0f20 	tst.w	sl, #32
   81838:	9004      	str	r0, [sp, #16]
   8183a:	46ac      	mov	ip, r5
   8183c:	940a      	str	r4, [sp, #40]	; 0x28
   8183e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81842:	f47f af10 	bne.w	81666 <_vfiprintf_r+0x47e>
   81846:	f01a 0f10 	tst.w	sl, #16
   8184a:	f040 81ea 	bne.w	81c22 <_vfiprintf_r+0xa3a>
   8184e:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81852:	f000 81e6 	beq.w	81c22 <_vfiprintf_r+0xa3a>
   81856:	f8dd b020 	ldr.w	fp, [sp, #32]
   8185a:	2500      	movs	r5, #0
   8185c:	f8bb 4000 	ldrh.w	r4, [fp]
   81860:	f10b 0b04 	add.w	fp, fp, #4
   81864:	f8cd b020 	str.w	fp, [sp, #32]
   81868:	e707      	b.n	8167a <_vfiprintf_r+0x492>
   8186a:	f898 3000 	ldrb.w	r3, [r8]
   8186e:	2900      	cmp	r1, #0
   81870:	f47f ad27 	bne.w	812c2 <_vfiprintf_r+0xda>
   81874:	2120      	movs	r1, #32
   81876:	e524      	b.n	812c2 <_vfiprintf_r+0xda>
   81878:	f04a 0a01 	orr.w	sl, sl, #1
   8187c:	f898 3000 	ldrb.w	r3, [r8]
   81880:	e51f      	b.n	812c2 <_vfiprintf_r+0xda>
   81882:	9004      	str	r0, [sp, #16]
   81884:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81888:	2b00      	cmp	r3, #0
   8188a:	f000 80f9 	beq.w	81a80 <_vfiprintf_r+0x898>
   8188e:	2501      	movs	r5, #1
   81890:	f04f 0b00 	mov.w	fp, #0
   81894:	9503      	str	r5, [sp, #12]
   81896:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8189a:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   8189e:	9505      	str	r5, [sp, #20]
   818a0:	af16      	add	r7, sp, #88	; 0x58
   818a2:	e70e      	b.n	816c2 <_vfiprintf_r+0x4da>
   818a4:	9806      	ldr	r0, [sp, #24]
   818a6:	9902      	ldr	r1, [sp, #8]
   818a8:	aa13      	add	r2, sp, #76	; 0x4c
   818aa:	f7ff fc61 	bl	81170 <__sprint_r.part.0>
   818ae:	2800      	cmp	r0, #0
   818b0:	f040 80ed 	bne.w	81a8e <_vfiprintf_r+0x8a6>
   818b4:	9814      	ldr	r0, [sp, #80]	; 0x50
   818b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   818b8:	1c43      	adds	r3, r0, #1
   818ba:	46cc      	mov	ip, r9
   818bc:	e5fe      	b.n	814bc <_vfiprintf_r+0x2d4>
   818be:	9b14      	ldr	r3, [sp, #80]	; 0x50
   818c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   818c2:	1c59      	adds	r1, r3, #1
   818c4:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   818c8:	b168      	cbz	r0, 818e6 <_vfiprintf_r+0x6fe>
   818ca:	3201      	adds	r2, #1
   818cc:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   818d0:	2301      	movs	r3, #1
   818d2:	2907      	cmp	r1, #7
   818d4:	9215      	str	r2, [sp, #84]	; 0x54
   818d6:	9114      	str	r1, [sp, #80]	; 0x50
   818d8:	e886 0009 	stmia.w	r6, {r0, r3}
   818dc:	f300 8160 	bgt.w	81ba0 <_vfiprintf_r+0x9b8>
   818e0:	460b      	mov	r3, r1
   818e2:	3608      	adds	r6, #8
   818e4:	3101      	adds	r1, #1
   818e6:	9c07      	ldr	r4, [sp, #28]
   818e8:	b164      	cbz	r4, 81904 <_vfiprintf_r+0x71c>
   818ea:	3202      	adds	r2, #2
   818ec:	a812      	add	r0, sp, #72	; 0x48
   818ee:	2302      	movs	r3, #2
   818f0:	2907      	cmp	r1, #7
   818f2:	9215      	str	r2, [sp, #84]	; 0x54
   818f4:	9114      	str	r1, [sp, #80]	; 0x50
   818f6:	e886 0009 	stmia.w	r6, {r0, r3}
   818fa:	f300 8157 	bgt.w	81bac <_vfiprintf_r+0x9c4>
   818fe:	460b      	mov	r3, r1
   81900:	3608      	adds	r6, #8
   81902:	3101      	adds	r1, #1
   81904:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81906:	2d80      	cmp	r5, #128	; 0x80
   81908:	f000 8101 	beq.w	81b0e <_vfiprintf_r+0x926>
   8190c:	9d05      	ldr	r5, [sp, #20]
   8190e:	ebc5 040c 	rsb	r4, r5, ip
   81912:	2c00      	cmp	r4, #0
   81914:	dd2f      	ble.n	81976 <_vfiprintf_r+0x78e>
   81916:	2c10      	cmp	r4, #16
   81918:	4d57      	ldr	r5, [pc, #348]	; (81a78 <_vfiprintf_r+0x890>)
   8191a:	dd22      	ble.n	81962 <_vfiprintf_r+0x77a>
   8191c:	4630      	mov	r0, r6
   8191e:	f04f 0b10 	mov.w	fp, #16
   81922:	462e      	mov	r6, r5
   81924:	4625      	mov	r5, r4
   81926:	9c06      	ldr	r4, [sp, #24]
   81928:	e006      	b.n	81938 <_vfiprintf_r+0x750>
   8192a:	f103 0c02 	add.w	ip, r3, #2
   8192e:	3008      	adds	r0, #8
   81930:	460b      	mov	r3, r1
   81932:	3d10      	subs	r5, #16
   81934:	2d10      	cmp	r5, #16
   81936:	dd10      	ble.n	8195a <_vfiprintf_r+0x772>
   81938:	1c59      	adds	r1, r3, #1
   8193a:	3210      	adds	r2, #16
   8193c:	2907      	cmp	r1, #7
   8193e:	9215      	str	r2, [sp, #84]	; 0x54
   81940:	e880 0840 	stmia.w	r0, {r6, fp}
   81944:	9114      	str	r1, [sp, #80]	; 0x50
   81946:	ddf0      	ble.n	8192a <_vfiprintf_r+0x742>
   81948:	2a00      	cmp	r2, #0
   8194a:	d163      	bne.n	81a14 <_vfiprintf_r+0x82c>
   8194c:	3d10      	subs	r5, #16
   8194e:	2d10      	cmp	r5, #16
   81950:	f04f 0c01 	mov.w	ip, #1
   81954:	4613      	mov	r3, r2
   81956:	4648      	mov	r0, r9
   81958:	dcee      	bgt.n	81938 <_vfiprintf_r+0x750>
   8195a:	462c      	mov	r4, r5
   8195c:	4661      	mov	r1, ip
   8195e:	4635      	mov	r5, r6
   81960:	4606      	mov	r6, r0
   81962:	4422      	add	r2, r4
   81964:	2907      	cmp	r1, #7
   81966:	9215      	str	r2, [sp, #84]	; 0x54
   81968:	6035      	str	r5, [r6, #0]
   8196a:	6074      	str	r4, [r6, #4]
   8196c:	9114      	str	r1, [sp, #80]	; 0x50
   8196e:	f300 80c1 	bgt.w	81af4 <_vfiprintf_r+0x90c>
   81972:	3608      	adds	r6, #8
   81974:	3101      	adds	r1, #1
   81976:	9d05      	ldr	r5, [sp, #20]
   81978:	2907      	cmp	r1, #7
   8197a:	442a      	add	r2, r5
   8197c:	9215      	str	r2, [sp, #84]	; 0x54
   8197e:	6037      	str	r7, [r6, #0]
   81980:	6075      	str	r5, [r6, #4]
   81982:	9114      	str	r1, [sp, #80]	; 0x50
   81984:	f340 80c1 	ble.w	81b0a <_vfiprintf_r+0x922>
   81988:	2a00      	cmp	r2, #0
   8198a:	f040 8130 	bne.w	81bee <_vfiprintf_r+0xa06>
   8198e:	9214      	str	r2, [sp, #80]	; 0x50
   81990:	464e      	mov	r6, r9
   81992:	f01a 0f04 	tst.w	sl, #4
   81996:	f000 808b 	beq.w	81ab0 <_vfiprintf_r+0x8c8>
   8199a:	9d04      	ldr	r5, [sp, #16]
   8199c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   819a0:	ebcb 0405 	rsb	r4, fp, r5
   819a4:	2c00      	cmp	r4, #0
   819a6:	f340 8083 	ble.w	81ab0 <_vfiprintf_r+0x8c8>
   819aa:	2c10      	cmp	r4, #16
   819ac:	f340 821e 	ble.w	81dec <_vfiprintf_r+0xc04>
   819b0:	9914      	ldr	r1, [sp, #80]	; 0x50
   819b2:	4d32      	ldr	r5, [pc, #200]	; (81a7c <_vfiprintf_r+0x894>)
   819b4:	2710      	movs	r7, #16
   819b6:	f8dd a018 	ldr.w	sl, [sp, #24]
   819ba:	f8dd b008 	ldr.w	fp, [sp, #8]
   819be:	e005      	b.n	819cc <_vfiprintf_r+0x7e4>
   819c0:	1c88      	adds	r0, r1, #2
   819c2:	3608      	adds	r6, #8
   819c4:	4619      	mov	r1, r3
   819c6:	3c10      	subs	r4, #16
   819c8:	2c10      	cmp	r4, #16
   819ca:	dd10      	ble.n	819ee <_vfiprintf_r+0x806>
   819cc:	1c4b      	adds	r3, r1, #1
   819ce:	3210      	adds	r2, #16
   819d0:	2b07      	cmp	r3, #7
   819d2:	9215      	str	r2, [sp, #84]	; 0x54
   819d4:	e886 00a0 	stmia.w	r6, {r5, r7}
   819d8:	9314      	str	r3, [sp, #80]	; 0x50
   819da:	ddf1      	ble.n	819c0 <_vfiprintf_r+0x7d8>
   819dc:	2a00      	cmp	r2, #0
   819de:	d17d      	bne.n	81adc <_vfiprintf_r+0x8f4>
   819e0:	3c10      	subs	r4, #16
   819e2:	2c10      	cmp	r4, #16
   819e4:	f04f 0001 	mov.w	r0, #1
   819e8:	4611      	mov	r1, r2
   819ea:	464e      	mov	r6, r9
   819ec:	dcee      	bgt.n	819cc <_vfiprintf_r+0x7e4>
   819ee:	4422      	add	r2, r4
   819f0:	2807      	cmp	r0, #7
   819f2:	9215      	str	r2, [sp, #84]	; 0x54
   819f4:	6035      	str	r5, [r6, #0]
   819f6:	6074      	str	r4, [r6, #4]
   819f8:	9014      	str	r0, [sp, #80]	; 0x50
   819fa:	dd59      	ble.n	81ab0 <_vfiprintf_r+0x8c8>
   819fc:	2a00      	cmp	r2, #0
   819fe:	d14f      	bne.n	81aa0 <_vfiprintf_r+0x8b8>
   81a00:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81a02:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a06:	9d04      	ldr	r5, [sp, #16]
   81a08:	45ab      	cmp	fp, r5
   81a0a:	bfac      	ite	ge
   81a0c:	445c      	addge	r4, fp
   81a0e:	1964      	addlt	r4, r4, r5
   81a10:	9409      	str	r4, [sp, #36]	; 0x24
   81a12:	e05e      	b.n	81ad2 <_vfiprintf_r+0x8ea>
   81a14:	4620      	mov	r0, r4
   81a16:	9902      	ldr	r1, [sp, #8]
   81a18:	aa13      	add	r2, sp, #76	; 0x4c
   81a1a:	f7ff fba9 	bl	81170 <__sprint_r.part.0>
   81a1e:	2800      	cmp	r0, #0
   81a20:	d135      	bne.n	81a8e <_vfiprintf_r+0x8a6>
   81a22:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81a24:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a26:	f103 0c01 	add.w	ip, r3, #1
   81a2a:	4648      	mov	r0, r9
   81a2c:	e781      	b.n	81932 <_vfiprintf_r+0x74a>
   81a2e:	08e0      	lsrs	r0, r4, #3
   81a30:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81a34:	f004 0207 	and.w	r2, r4, #7
   81a38:	08e9      	lsrs	r1, r5, #3
   81a3a:	3230      	adds	r2, #48	; 0x30
   81a3c:	ea50 0b01 	orrs.w	fp, r0, r1
   81a40:	461f      	mov	r7, r3
   81a42:	701a      	strb	r2, [r3, #0]
   81a44:	4604      	mov	r4, r0
   81a46:	460d      	mov	r5, r1
   81a48:	f103 33ff 	add.w	r3, r3, #4294967295
   81a4c:	d1ef      	bne.n	81a2e <_vfiprintf_r+0x846>
   81a4e:	f01a 0f01 	tst.w	sl, #1
   81a52:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81a56:	4639      	mov	r1, r7
   81a58:	f000 80b9 	beq.w	81bce <_vfiprintf_r+0x9e6>
   81a5c:	2a30      	cmp	r2, #48	; 0x30
   81a5e:	f43f acf4 	beq.w	8144a <_vfiprintf_r+0x262>
   81a62:	461f      	mov	r7, r3
   81a64:	ebc7 0509 	rsb	r5, r7, r9
   81a68:	2330      	movs	r3, #48	; 0x30
   81a6a:	9505      	str	r5, [sp, #20]
   81a6c:	f801 3c01 	strb.w	r3, [r1, #-1]
   81a70:	e4ee      	b.n	81450 <_vfiprintf_r+0x268>
   81a72:	bf00      	nop
   81a74:	00083edc 	.word	0x00083edc
   81a78:	00083ef8 	.word	0x00083ef8
   81a7c:	00083f08 	.word	0x00083f08
   81a80:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81a82:	b123      	cbz	r3, 81a8e <_vfiprintf_r+0x8a6>
   81a84:	9806      	ldr	r0, [sp, #24]
   81a86:	9902      	ldr	r1, [sp, #8]
   81a88:	aa13      	add	r2, sp, #76	; 0x4c
   81a8a:	f7ff fb71 	bl	81170 <__sprint_r.part.0>
   81a8e:	9c02      	ldr	r4, [sp, #8]
   81a90:	89a3      	ldrh	r3, [r4, #12]
   81a92:	065b      	lsls	r3, r3, #25
   81a94:	f53f ac98 	bmi.w	813c8 <_vfiprintf_r+0x1e0>
   81a98:	9809      	ldr	r0, [sp, #36]	; 0x24
   81a9a:	b031      	add	sp, #196	; 0xc4
   81a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81aa0:	9806      	ldr	r0, [sp, #24]
   81aa2:	9902      	ldr	r1, [sp, #8]
   81aa4:	aa13      	add	r2, sp, #76	; 0x4c
   81aa6:	f7ff fb63 	bl	81170 <__sprint_r.part.0>
   81aaa:	2800      	cmp	r0, #0
   81aac:	d1ef      	bne.n	81a8e <_vfiprintf_r+0x8a6>
   81aae:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ab0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81ab2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81ab6:	9d04      	ldr	r5, [sp, #16]
   81ab8:	45ab      	cmp	fp, r5
   81aba:	bfac      	ite	ge
   81abc:	445c      	addge	r4, fp
   81abe:	1964      	addlt	r4, r4, r5
   81ac0:	9409      	str	r4, [sp, #36]	; 0x24
   81ac2:	b132      	cbz	r2, 81ad2 <_vfiprintf_r+0x8ea>
   81ac4:	9806      	ldr	r0, [sp, #24]
   81ac6:	9902      	ldr	r1, [sp, #8]
   81ac8:	aa13      	add	r2, sp, #76	; 0x4c
   81aca:	f7ff fb51 	bl	81170 <__sprint_r.part.0>
   81ace:	2800      	cmp	r0, #0
   81ad0:	d1dd      	bne.n	81a8e <_vfiprintf_r+0x8a6>
   81ad2:	2000      	movs	r0, #0
   81ad4:	9014      	str	r0, [sp, #80]	; 0x50
   81ad6:	464e      	mov	r6, r9
   81ad8:	f7ff bbb9 	b.w	8124e <_vfiprintf_r+0x66>
   81adc:	4650      	mov	r0, sl
   81ade:	4659      	mov	r1, fp
   81ae0:	aa13      	add	r2, sp, #76	; 0x4c
   81ae2:	f7ff fb45 	bl	81170 <__sprint_r.part.0>
   81ae6:	2800      	cmp	r0, #0
   81ae8:	d1d1      	bne.n	81a8e <_vfiprintf_r+0x8a6>
   81aea:	9914      	ldr	r1, [sp, #80]	; 0x50
   81aec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81aee:	1c48      	adds	r0, r1, #1
   81af0:	464e      	mov	r6, r9
   81af2:	e768      	b.n	819c6 <_vfiprintf_r+0x7de>
   81af4:	2a00      	cmp	r2, #0
   81af6:	f040 80f7 	bne.w	81ce8 <_vfiprintf_r+0xb00>
   81afa:	9c05      	ldr	r4, [sp, #20]
   81afc:	2301      	movs	r3, #1
   81afe:	9720      	str	r7, [sp, #128]	; 0x80
   81b00:	9421      	str	r4, [sp, #132]	; 0x84
   81b02:	9415      	str	r4, [sp, #84]	; 0x54
   81b04:	4622      	mov	r2, r4
   81b06:	9314      	str	r3, [sp, #80]	; 0x50
   81b08:	464e      	mov	r6, r9
   81b0a:	3608      	adds	r6, #8
   81b0c:	e741      	b.n	81992 <_vfiprintf_r+0x7aa>
   81b0e:	9d04      	ldr	r5, [sp, #16]
   81b10:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81b14:	ebcb 0405 	rsb	r4, fp, r5
   81b18:	2c00      	cmp	r4, #0
   81b1a:	f77f aef7 	ble.w	8190c <_vfiprintf_r+0x724>
   81b1e:	2c10      	cmp	r4, #16
   81b20:	4da6      	ldr	r5, [pc, #664]	; (81dbc <_vfiprintf_r+0xbd4>)
   81b22:	f340 8170 	ble.w	81e06 <_vfiprintf_r+0xc1e>
   81b26:	4629      	mov	r1, r5
   81b28:	f04f 0b10 	mov.w	fp, #16
   81b2c:	4625      	mov	r5, r4
   81b2e:	4664      	mov	r4, ip
   81b30:	46b4      	mov	ip, r6
   81b32:	460e      	mov	r6, r1
   81b34:	e006      	b.n	81b44 <_vfiprintf_r+0x95c>
   81b36:	1c98      	adds	r0, r3, #2
   81b38:	f10c 0c08 	add.w	ip, ip, #8
   81b3c:	460b      	mov	r3, r1
   81b3e:	3d10      	subs	r5, #16
   81b40:	2d10      	cmp	r5, #16
   81b42:	dd0f      	ble.n	81b64 <_vfiprintf_r+0x97c>
   81b44:	1c59      	adds	r1, r3, #1
   81b46:	3210      	adds	r2, #16
   81b48:	2907      	cmp	r1, #7
   81b4a:	9215      	str	r2, [sp, #84]	; 0x54
   81b4c:	e88c 0840 	stmia.w	ip, {r6, fp}
   81b50:	9114      	str	r1, [sp, #80]	; 0x50
   81b52:	ddf0      	ble.n	81b36 <_vfiprintf_r+0x94e>
   81b54:	b9ba      	cbnz	r2, 81b86 <_vfiprintf_r+0x99e>
   81b56:	3d10      	subs	r5, #16
   81b58:	2d10      	cmp	r5, #16
   81b5a:	f04f 0001 	mov.w	r0, #1
   81b5e:	4613      	mov	r3, r2
   81b60:	46cc      	mov	ip, r9
   81b62:	dcef      	bgt.n	81b44 <_vfiprintf_r+0x95c>
   81b64:	4633      	mov	r3, r6
   81b66:	4666      	mov	r6, ip
   81b68:	46a4      	mov	ip, r4
   81b6a:	462c      	mov	r4, r5
   81b6c:	461d      	mov	r5, r3
   81b6e:	4422      	add	r2, r4
   81b70:	2807      	cmp	r0, #7
   81b72:	9215      	str	r2, [sp, #84]	; 0x54
   81b74:	6035      	str	r5, [r6, #0]
   81b76:	6074      	str	r4, [r6, #4]
   81b78:	9014      	str	r0, [sp, #80]	; 0x50
   81b7a:	f300 80af 	bgt.w	81cdc <_vfiprintf_r+0xaf4>
   81b7e:	3608      	adds	r6, #8
   81b80:	1c41      	adds	r1, r0, #1
   81b82:	4603      	mov	r3, r0
   81b84:	e6c2      	b.n	8190c <_vfiprintf_r+0x724>
   81b86:	9806      	ldr	r0, [sp, #24]
   81b88:	9902      	ldr	r1, [sp, #8]
   81b8a:	aa13      	add	r2, sp, #76	; 0x4c
   81b8c:	f7ff faf0 	bl	81170 <__sprint_r.part.0>
   81b90:	2800      	cmp	r0, #0
   81b92:	f47f af7c 	bne.w	81a8e <_vfiprintf_r+0x8a6>
   81b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b98:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b9a:	1c58      	adds	r0, r3, #1
   81b9c:	46cc      	mov	ip, r9
   81b9e:	e7ce      	b.n	81b3e <_vfiprintf_r+0x956>
   81ba0:	2a00      	cmp	r2, #0
   81ba2:	d179      	bne.n	81c98 <_vfiprintf_r+0xab0>
   81ba4:	4619      	mov	r1, r3
   81ba6:	464e      	mov	r6, r9
   81ba8:	4613      	mov	r3, r2
   81baa:	e69c      	b.n	818e6 <_vfiprintf_r+0x6fe>
   81bac:	2a00      	cmp	r2, #0
   81bae:	f040 8084 	bne.w	81cba <_vfiprintf_r+0xad2>
   81bb2:	2101      	movs	r1, #1
   81bb4:	4613      	mov	r3, r2
   81bb6:	464e      	mov	r6, r9
   81bb8:	e6a4      	b.n	81904 <_vfiprintf_r+0x71c>
   81bba:	464f      	mov	r7, r9
   81bbc:	e448      	b.n	81450 <_vfiprintf_r+0x268>
   81bbe:	2d00      	cmp	r5, #0
   81bc0:	bf08      	it	eq
   81bc2:	2c0a      	cmpeq	r4, #10
   81bc4:	d246      	bcs.n	81c54 <_vfiprintf_r+0xa6c>
   81bc6:	3430      	adds	r4, #48	; 0x30
   81bc8:	af30      	add	r7, sp, #192	; 0xc0
   81bca:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81bce:	ebc7 0309 	rsb	r3, r7, r9
   81bd2:	9305      	str	r3, [sp, #20]
   81bd4:	e43c      	b.n	81450 <_vfiprintf_r+0x268>
   81bd6:	2302      	movs	r3, #2
   81bd8:	e417      	b.n	8140a <_vfiprintf_r+0x222>
   81bda:	2a00      	cmp	r2, #0
   81bdc:	f040 80af 	bne.w	81d3e <_vfiprintf_r+0xb56>
   81be0:	4613      	mov	r3, r2
   81be2:	2101      	movs	r1, #1
   81be4:	464e      	mov	r6, r9
   81be6:	e66d      	b.n	818c4 <_vfiprintf_r+0x6dc>
   81be8:	4644      	mov	r4, r8
   81bea:	f7ff bb58 	b.w	8129e <_vfiprintf_r+0xb6>
   81bee:	9806      	ldr	r0, [sp, #24]
   81bf0:	9902      	ldr	r1, [sp, #8]
   81bf2:	aa13      	add	r2, sp, #76	; 0x4c
   81bf4:	f7ff fabc 	bl	81170 <__sprint_r.part.0>
   81bf8:	2800      	cmp	r0, #0
   81bfa:	f47f af48 	bne.w	81a8e <_vfiprintf_r+0x8a6>
   81bfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c00:	464e      	mov	r6, r9
   81c02:	e6c6      	b.n	81992 <_vfiprintf_r+0x7aa>
   81c04:	9d08      	ldr	r5, [sp, #32]
   81c06:	682c      	ldr	r4, [r5, #0]
   81c08:	3504      	adds	r5, #4
   81c0a:	9508      	str	r5, [sp, #32]
   81c0c:	2500      	movs	r5, #0
   81c0e:	f7ff bbfc 	b.w	8140a <_vfiprintf_r+0x222>
   81c12:	9d08      	ldr	r5, [sp, #32]
   81c14:	2301      	movs	r3, #1
   81c16:	682c      	ldr	r4, [r5, #0]
   81c18:	3504      	adds	r5, #4
   81c1a:	9508      	str	r5, [sp, #32]
   81c1c:	2500      	movs	r5, #0
   81c1e:	f7ff bbf4 	b.w	8140a <_vfiprintf_r+0x222>
   81c22:	9d08      	ldr	r5, [sp, #32]
   81c24:	682c      	ldr	r4, [r5, #0]
   81c26:	3504      	adds	r5, #4
   81c28:	9508      	str	r5, [sp, #32]
   81c2a:	2500      	movs	r5, #0
   81c2c:	e525      	b.n	8167a <_vfiprintf_r+0x492>
   81c2e:	9d08      	ldr	r5, [sp, #32]
   81c30:	682c      	ldr	r4, [r5, #0]
   81c32:	3504      	adds	r5, #4
   81c34:	9508      	str	r5, [sp, #32]
   81c36:	17e5      	asrs	r5, r4, #31
   81c38:	4622      	mov	r2, r4
   81c3a:	462b      	mov	r3, r5
   81c3c:	e48e      	b.n	8155c <_vfiprintf_r+0x374>
   81c3e:	9806      	ldr	r0, [sp, #24]
   81c40:	9902      	ldr	r1, [sp, #8]
   81c42:	aa13      	add	r2, sp, #76	; 0x4c
   81c44:	f7ff fa94 	bl	81170 <__sprint_r.part.0>
   81c48:	2800      	cmp	r0, #0
   81c4a:	f47f af20 	bne.w	81a8e <_vfiprintf_r+0x8a6>
   81c4e:	464e      	mov	r6, r9
   81c50:	f7ff bb9a 	b.w	81388 <_vfiprintf_r+0x1a0>
   81c54:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81c58:	9603      	str	r6, [sp, #12]
   81c5a:	465e      	mov	r6, fp
   81c5c:	46e3      	mov	fp, ip
   81c5e:	4620      	mov	r0, r4
   81c60:	4629      	mov	r1, r5
   81c62:	220a      	movs	r2, #10
   81c64:	2300      	movs	r3, #0
   81c66:	f001 fe2f 	bl	838c8 <__aeabi_uldivmod>
   81c6a:	3230      	adds	r2, #48	; 0x30
   81c6c:	7032      	strb	r2, [r6, #0]
   81c6e:	4620      	mov	r0, r4
   81c70:	4629      	mov	r1, r5
   81c72:	220a      	movs	r2, #10
   81c74:	2300      	movs	r3, #0
   81c76:	f001 fe27 	bl	838c8 <__aeabi_uldivmod>
   81c7a:	4604      	mov	r4, r0
   81c7c:	460d      	mov	r5, r1
   81c7e:	ea54 0005 	orrs.w	r0, r4, r5
   81c82:	4637      	mov	r7, r6
   81c84:	f106 36ff 	add.w	r6, r6, #4294967295
   81c88:	d1e9      	bne.n	81c5e <_vfiprintf_r+0xa76>
   81c8a:	ebc7 0309 	rsb	r3, r7, r9
   81c8e:	46dc      	mov	ip, fp
   81c90:	9e03      	ldr	r6, [sp, #12]
   81c92:	9305      	str	r3, [sp, #20]
   81c94:	f7ff bbdc 	b.w	81450 <_vfiprintf_r+0x268>
   81c98:	9806      	ldr	r0, [sp, #24]
   81c9a:	9902      	ldr	r1, [sp, #8]
   81c9c:	aa13      	add	r2, sp, #76	; 0x4c
   81c9e:	f8cd c004 	str.w	ip, [sp, #4]
   81ca2:	f7ff fa65 	bl	81170 <__sprint_r.part.0>
   81ca6:	f8dd c004 	ldr.w	ip, [sp, #4]
   81caa:	2800      	cmp	r0, #0
   81cac:	f47f aeef 	bne.w	81a8e <_vfiprintf_r+0x8a6>
   81cb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81cb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cb4:	1c59      	adds	r1, r3, #1
   81cb6:	464e      	mov	r6, r9
   81cb8:	e615      	b.n	818e6 <_vfiprintf_r+0x6fe>
   81cba:	9806      	ldr	r0, [sp, #24]
   81cbc:	9902      	ldr	r1, [sp, #8]
   81cbe:	aa13      	add	r2, sp, #76	; 0x4c
   81cc0:	f8cd c004 	str.w	ip, [sp, #4]
   81cc4:	f7ff fa54 	bl	81170 <__sprint_r.part.0>
   81cc8:	f8dd c004 	ldr.w	ip, [sp, #4]
   81ccc:	2800      	cmp	r0, #0
   81cce:	f47f aede 	bne.w	81a8e <_vfiprintf_r+0x8a6>
   81cd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81cd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cd6:	1c59      	adds	r1, r3, #1
   81cd8:	464e      	mov	r6, r9
   81cda:	e613      	b.n	81904 <_vfiprintf_r+0x71c>
   81cdc:	2a00      	cmp	r2, #0
   81cde:	d156      	bne.n	81d8e <_vfiprintf_r+0xba6>
   81ce0:	2101      	movs	r1, #1
   81ce2:	4613      	mov	r3, r2
   81ce4:	464e      	mov	r6, r9
   81ce6:	e611      	b.n	8190c <_vfiprintf_r+0x724>
   81ce8:	9806      	ldr	r0, [sp, #24]
   81cea:	9902      	ldr	r1, [sp, #8]
   81cec:	aa13      	add	r2, sp, #76	; 0x4c
   81cee:	f7ff fa3f 	bl	81170 <__sprint_r.part.0>
   81cf2:	2800      	cmp	r0, #0
   81cf4:	f47f aecb 	bne.w	81a8e <_vfiprintf_r+0x8a6>
   81cf8:	9914      	ldr	r1, [sp, #80]	; 0x50
   81cfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cfc:	3101      	adds	r1, #1
   81cfe:	464e      	mov	r6, r9
   81d00:	e639      	b.n	81976 <_vfiprintf_r+0x78e>
   81d02:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81d06:	4264      	negs	r4, r4
   81d08:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81d0c:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81d10:	f8cd b01c 	str.w	fp, [sp, #28]
   81d14:	f8cd c014 	str.w	ip, [sp, #20]
   81d18:	2301      	movs	r3, #1
   81d1a:	f7ff bb7e 	b.w	8141a <_vfiprintf_r+0x232>
   81d1e:	f01a 0f10 	tst.w	sl, #16
   81d22:	d11d      	bne.n	81d60 <_vfiprintf_r+0xb78>
   81d24:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81d28:	d058      	beq.n	81ddc <_vfiprintf_r+0xbf4>
   81d2a:	9d08      	ldr	r5, [sp, #32]
   81d2c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81d30:	682b      	ldr	r3, [r5, #0]
   81d32:	3504      	adds	r5, #4
   81d34:	9508      	str	r5, [sp, #32]
   81d36:	f8a3 b000 	strh.w	fp, [r3]
   81d3a:	f7ff ba88 	b.w	8124e <_vfiprintf_r+0x66>
   81d3e:	9806      	ldr	r0, [sp, #24]
   81d40:	9902      	ldr	r1, [sp, #8]
   81d42:	aa13      	add	r2, sp, #76	; 0x4c
   81d44:	f8cd c004 	str.w	ip, [sp, #4]
   81d48:	f7ff fa12 	bl	81170 <__sprint_r.part.0>
   81d4c:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d50:	2800      	cmp	r0, #0
   81d52:	f47f ae9c 	bne.w	81a8e <_vfiprintf_r+0x8a6>
   81d56:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d58:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d5a:	1c59      	adds	r1, r3, #1
   81d5c:	464e      	mov	r6, r9
   81d5e:	e5b1      	b.n	818c4 <_vfiprintf_r+0x6dc>
   81d60:	f8dd b020 	ldr.w	fp, [sp, #32]
   81d64:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81d66:	f8db 3000 	ldr.w	r3, [fp]
   81d6a:	f10b 0b04 	add.w	fp, fp, #4
   81d6e:	f8cd b020 	str.w	fp, [sp, #32]
   81d72:	601c      	str	r4, [r3, #0]
   81d74:	f7ff ba6b 	b.w	8124e <_vfiprintf_r+0x66>
   81d78:	9408      	str	r4, [sp, #32]
   81d7a:	f7ff f9c9 	bl	81110 <strlen>
   81d7e:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81d82:	9005      	str	r0, [sp, #20]
   81d84:	9407      	str	r4, [sp, #28]
   81d86:	f04f 0c00 	mov.w	ip, #0
   81d8a:	f7ff bb61 	b.w	81450 <_vfiprintf_r+0x268>
   81d8e:	9806      	ldr	r0, [sp, #24]
   81d90:	9902      	ldr	r1, [sp, #8]
   81d92:	aa13      	add	r2, sp, #76	; 0x4c
   81d94:	f8cd c004 	str.w	ip, [sp, #4]
   81d98:	f7ff f9ea 	bl	81170 <__sprint_r.part.0>
   81d9c:	f8dd c004 	ldr.w	ip, [sp, #4]
   81da0:	2800      	cmp	r0, #0
   81da2:	f47f ae74 	bne.w	81a8e <_vfiprintf_r+0x8a6>
   81da6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81da8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81daa:	1c59      	adds	r1, r3, #1
   81dac:	464e      	mov	r6, r9
   81dae:	e5ad      	b.n	8190c <_vfiprintf_r+0x724>
   81db0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81db2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81db4:	3301      	adds	r3, #1
   81db6:	4d02      	ldr	r5, [pc, #8]	; (81dc0 <_vfiprintf_r+0xbd8>)
   81db8:	f7ff bb9a 	b.w	814f0 <_vfiprintf_r+0x308>
   81dbc:	00083ef8 	.word	0x00083ef8
   81dc0:	00083f08 	.word	0x00083f08
   81dc4:	f1bc 0f06 	cmp.w	ip, #6
   81dc8:	bf34      	ite	cc
   81dca:	4663      	movcc	r3, ip
   81dcc:	2306      	movcs	r3, #6
   81dce:	9408      	str	r4, [sp, #32]
   81dd0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81dd4:	9305      	str	r3, [sp, #20]
   81dd6:	9403      	str	r4, [sp, #12]
   81dd8:	4f16      	ldr	r7, [pc, #88]	; (81e34 <_vfiprintf_r+0xc4c>)
   81dda:	e472      	b.n	816c2 <_vfiprintf_r+0x4da>
   81ddc:	9c08      	ldr	r4, [sp, #32]
   81dde:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81de0:	6823      	ldr	r3, [r4, #0]
   81de2:	3404      	adds	r4, #4
   81de4:	9408      	str	r4, [sp, #32]
   81de6:	601d      	str	r5, [r3, #0]
   81de8:	f7ff ba31 	b.w	8124e <_vfiprintf_r+0x66>
   81dec:	9814      	ldr	r0, [sp, #80]	; 0x50
   81dee:	4d12      	ldr	r5, [pc, #72]	; (81e38 <_vfiprintf_r+0xc50>)
   81df0:	3001      	adds	r0, #1
   81df2:	e5fc      	b.n	819ee <_vfiprintf_r+0x806>
   81df4:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81df8:	f8cd c014 	str.w	ip, [sp, #20]
   81dfc:	9507      	str	r5, [sp, #28]
   81dfe:	9408      	str	r4, [sp, #32]
   81e00:	4684      	mov	ip, r0
   81e02:	f7ff bb25 	b.w	81450 <_vfiprintf_r+0x268>
   81e06:	4608      	mov	r0, r1
   81e08:	e6b1      	b.n	81b6e <_vfiprintf_r+0x986>
   81e0a:	46a0      	mov	r8, r4
   81e0c:	2500      	movs	r5, #0
   81e0e:	f7ff ba5a 	b.w	812c6 <_vfiprintf_r+0xde>
   81e12:	f8dd b020 	ldr.w	fp, [sp, #32]
   81e16:	f898 3001 	ldrb.w	r3, [r8, #1]
   81e1a:	f8db 5000 	ldr.w	r5, [fp]
   81e1e:	f10b 0204 	add.w	r2, fp, #4
   81e22:	2d00      	cmp	r5, #0
   81e24:	9208      	str	r2, [sp, #32]
   81e26:	46a0      	mov	r8, r4
   81e28:	f6bf aa4b 	bge.w	812c2 <_vfiprintf_r+0xda>
   81e2c:	f04f 35ff 	mov.w	r5, #4294967295
   81e30:	f7ff ba47 	b.w	812c2 <_vfiprintf_r+0xda>
   81e34:	00083ef0 	.word	0x00083ef0
   81e38:	00083f08 	.word	0x00083f08

00081e3c <__sbprintf>:
   81e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81e40:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81e42:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81e46:	4688      	mov	r8, r1
   81e48:	9719      	str	r7, [sp, #100]	; 0x64
   81e4a:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81e4e:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81e52:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81e56:	9707      	str	r7, [sp, #28]
   81e58:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81e5c:	ac1a      	add	r4, sp, #104	; 0x68
   81e5e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81e62:	f02a 0a02 	bic.w	sl, sl, #2
   81e66:	2600      	movs	r6, #0
   81e68:	4669      	mov	r1, sp
   81e6a:	9400      	str	r4, [sp, #0]
   81e6c:	9404      	str	r4, [sp, #16]
   81e6e:	9502      	str	r5, [sp, #8]
   81e70:	9505      	str	r5, [sp, #20]
   81e72:	f8ad a00c 	strh.w	sl, [sp, #12]
   81e76:	f8ad 900e 	strh.w	r9, [sp, #14]
   81e7a:	9709      	str	r7, [sp, #36]	; 0x24
   81e7c:	9606      	str	r6, [sp, #24]
   81e7e:	4605      	mov	r5, r0
   81e80:	f7ff f9b2 	bl	811e8 <_vfiprintf_r>
   81e84:	1e04      	subs	r4, r0, #0
   81e86:	db07      	blt.n	81e98 <__sbprintf+0x5c>
   81e88:	4628      	mov	r0, r5
   81e8a:	4669      	mov	r1, sp
   81e8c:	f000 f92a 	bl	820e4 <_fflush_r>
   81e90:	42b0      	cmp	r0, r6
   81e92:	bf18      	it	ne
   81e94:	f04f 34ff 	movne.w	r4, #4294967295
   81e98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81e9c:	065b      	lsls	r3, r3, #25
   81e9e:	d505      	bpl.n	81eac <__sbprintf+0x70>
   81ea0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81ea8:	f8a8 300c 	strh.w	r3, [r8, #12]
   81eac:	4620      	mov	r0, r4
   81eae:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81eb6:	bf00      	nop

00081eb8 <__swsetup_r>:
   81eb8:	4b2f      	ldr	r3, [pc, #188]	; (81f78 <__swsetup_r+0xc0>)
   81eba:	b570      	push	{r4, r5, r6, lr}
   81ebc:	4606      	mov	r6, r0
   81ebe:	6818      	ldr	r0, [r3, #0]
   81ec0:	460c      	mov	r4, r1
   81ec2:	b110      	cbz	r0, 81eca <__swsetup_r+0x12>
   81ec4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81ec6:	2a00      	cmp	r2, #0
   81ec8:	d036      	beq.n	81f38 <__swsetup_r+0x80>
   81eca:	89a5      	ldrh	r5, [r4, #12]
   81ecc:	b2ab      	uxth	r3, r5
   81ece:	0719      	lsls	r1, r3, #28
   81ed0:	d50c      	bpl.n	81eec <__swsetup_r+0x34>
   81ed2:	6922      	ldr	r2, [r4, #16]
   81ed4:	b1aa      	cbz	r2, 81f02 <__swsetup_r+0x4a>
   81ed6:	f013 0101 	ands.w	r1, r3, #1
   81eda:	d01e      	beq.n	81f1a <__swsetup_r+0x62>
   81edc:	6963      	ldr	r3, [r4, #20]
   81ede:	2100      	movs	r1, #0
   81ee0:	425b      	negs	r3, r3
   81ee2:	61a3      	str	r3, [r4, #24]
   81ee4:	60a1      	str	r1, [r4, #8]
   81ee6:	b1f2      	cbz	r2, 81f26 <__swsetup_r+0x6e>
   81ee8:	2000      	movs	r0, #0
   81eea:	bd70      	pop	{r4, r5, r6, pc}
   81eec:	06da      	lsls	r2, r3, #27
   81eee:	d53a      	bpl.n	81f66 <__swsetup_r+0xae>
   81ef0:	075b      	lsls	r3, r3, #29
   81ef2:	d424      	bmi.n	81f3e <__swsetup_r+0x86>
   81ef4:	6922      	ldr	r2, [r4, #16]
   81ef6:	f045 0308 	orr.w	r3, r5, #8
   81efa:	81a3      	strh	r3, [r4, #12]
   81efc:	b29b      	uxth	r3, r3
   81efe:	2a00      	cmp	r2, #0
   81f00:	d1e9      	bne.n	81ed6 <__swsetup_r+0x1e>
   81f02:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81f06:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81f0a:	d0e4      	beq.n	81ed6 <__swsetup_r+0x1e>
   81f0c:	4630      	mov	r0, r6
   81f0e:	4621      	mov	r1, r4
   81f10:	f000 fcce 	bl	828b0 <__smakebuf_r>
   81f14:	89a3      	ldrh	r3, [r4, #12]
   81f16:	6922      	ldr	r2, [r4, #16]
   81f18:	e7dd      	b.n	81ed6 <__swsetup_r+0x1e>
   81f1a:	0798      	lsls	r0, r3, #30
   81f1c:	bf58      	it	pl
   81f1e:	6961      	ldrpl	r1, [r4, #20]
   81f20:	60a1      	str	r1, [r4, #8]
   81f22:	2a00      	cmp	r2, #0
   81f24:	d1e0      	bne.n	81ee8 <__swsetup_r+0x30>
   81f26:	89a3      	ldrh	r3, [r4, #12]
   81f28:	061a      	lsls	r2, r3, #24
   81f2a:	d5dd      	bpl.n	81ee8 <__swsetup_r+0x30>
   81f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f30:	81a3      	strh	r3, [r4, #12]
   81f32:	f04f 30ff 	mov.w	r0, #4294967295
   81f36:	bd70      	pop	{r4, r5, r6, pc}
   81f38:	f000 f8f0 	bl	8211c <__sinit>
   81f3c:	e7c5      	b.n	81eca <__swsetup_r+0x12>
   81f3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81f40:	b149      	cbz	r1, 81f56 <__swsetup_r+0x9e>
   81f42:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81f46:	4299      	cmp	r1, r3
   81f48:	d003      	beq.n	81f52 <__swsetup_r+0x9a>
   81f4a:	4630      	mov	r0, r6
   81f4c:	f000 fa2a 	bl	823a4 <_free_r>
   81f50:	89a5      	ldrh	r5, [r4, #12]
   81f52:	2300      	movs	r3, #0
   81f54:	6323      	str	r3, [r4, #48]	; 0x30
   81f56:	6922      	ldr	r2, [r4, #16]
   81f58:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81f5c:	2100      	movs	r1, #0
   81f5e:	b2ad      	uxth	r5, r5
   81f60:	6022      	str	r2, [r4, #0]
   81f62:	6061      	str	r1, [r4, #4]
   81f64:	e7c7      	b.n	81ef6 <__swsetup_r+0x3e>
   81f66:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81f6a:	2309      	movs	r3, #9
   81f6c:	6033      	str	r3, [r6, #0]
   81f6e:	f04f 30ff 	mov.w	r0, #4294967295
   81f72:	81a5      	strh	r5, [r4, #12]
   81f74:	bd70      	pop	{r4, r5, r6, pc}
   81f76:	bf00      	nop
   81f78:	20070568 	.word	0x20070568

00081f7c <register_fini>:
   81f7c:	4b02      	ldr	r3, [pc, #8]	; (81f88 <register_fini+0xc>)
   81f7e:	b113      	cbz	r3, 81f86 <register_fini+0xa>
   81f80:	4802      	ldr	r0, [pc, #8]	; (81f8c <register_fini+0x10>)
   81f82:	f000 b805 	b.w	81f90 <atexit>
   81f86:	4770      	bx	lr
   81f88:	00000000 	.word	0x00000000
   81f8c:	00082219 	.word	0x00082219

00081f90 <atexit>:
   81f90:	4601      	mov	r1, r0
   81f92:	2000      	movs	r0, #0
   81f94:	4602      	mov	r2, r0
   81f96:	4603      	mov	r3, r0
   81f98:	f001 bb9a 	b.w	836d0 <__register_exitproc>

00081f9c <__sflush_r>:
   81f9c:	898b      	ldrh	r3, [r1, #12]
   81f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81fa2:	b29a      	uxth	r2, r3
   81fa4:	460d      	mov	r5, r1
   81fa6:	0711      	lsls	r1, r2, #28
   81fa8:	4680      	mov	r8, r0
   81faa:	d43c      	bmi.n	82026 <__sflush_r+0x8a>
   81fac:	686a      	ldr	r2, [r5, #4]
   81fae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81fb2:	2a00      	cmp	r2, #0
   81fb4:	81ab      	strh	r3, [r5, #12]
   81fb6:	dd59      	ble.n	8206c <__sflush_r+0xd0>
   81fb8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81fba:	2c00      	cmp	r4, #0
   81fbc:	d04b      	beq.n	82056 <__sflush_r+0xba>
   81fbe:	b29b      	uxth	r3, r3
   81fc0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81fc4:	2100      	movs	r1, #0
   81fc6:	b292      	uxth	r2, r2
   81fc8:	f8d8 6000 	ldr.w	r6, [r8]
   81fcc:	f8c8 1000 	str.w	r1, [r8]
   81fd0:	2a00      	cmp	r2, #0
   81fd2:	d04f      	beq.n	82074 <__sflush_r+0xd8>
   81fd4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81fd6:	075f      	lsls	r7, r3, #29
   81fd8:	d505      	bpl.n	81fe6 <__sflush_r+0x4a>
   81fda:	6869      	ldr	r1, [r5, #4]
   81fdc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81fde:	1a52      	subs	r2, r2, r1
   81fe0:	b10b      	cbz	r3, 81fe6 <__sflush_r+0x4a>
   81fe2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81fe4:	1ad2      	subs	r2, r2, r3
   81fe6:	4640      	mov	r0, r8
   81fe8:	69e9      	ldr	r1, [r5, #28]
   81fea:	2300      	movs	r3, #0
   81fec:	47a0      	blx	r4
   81fee:	1c44      	adds	r4, r0, #1
   81ff0:	d04a      	beq.n	82088 <__sflush_r+0xec>
   81ff2:	89ab      	ldrh	r3, [r5, #12]
   81ff4:	692a      	ldr	r2, [r5, #16]
   81ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81ffa:	b29b      	uxth	r3, r3
   81ffc:	2100      	movs	r1, #0
   81ffe:	602a      	str	r2, [r5, #0]
   82000:	04da      	lsls	r2, r3, #19
   82002:	81ab      	strh	r3, [r5, #12]
   82004:	6069      	str	r1, [r5, #4]
   82006:	d44c      	bmi.n	820a2 <__sflush_r+0x106>
   82008:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8200a:	f8c8 6000 	str.w	r6, [r8]
   8200e:	b311      	cbz	r1, 82056 <__sflush_r+0xba>
   82010:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82014:	4299      	cmp	r1, r3
   82016:	d002      	beq.n	8201e <__sflush_r+0x82>
   82018:	4640      	mov	r0, r8
   8201a:	f000 f9c3 	bl	823a4 <_free_r>
   8201e:	2000      	movs	r0, #0
   82020:	6328      	str	r0, [r5, #48]	; 0x30
   82022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82026:	692e      	ldr	r6, [r5, #16]
   82028:	b1ae      	cbz	r6, 82056 <__sflush_r+0xba>
   8202a:	0791      	lsls	r1, r2, #30
   8202c:	682c      	ldr	r4, [r5, #0]
   8202e:	bf0c      	ite	eq
   82030:	696b      	ldreq	r3, [r5, #20]
   82032:	2300      	movne	r3, #0
   82034:	602e      	str	r6, [r5, #0]
   82036:	1ba4      	subs	r4, r4, r6
   82038:	60ab      	str	r3, [r5, #8]
   8203a:	e00a      	b.n	82052 <__sflush_r+0xb6>
   8203c:	4632      	mov	r2, r6
   8203e:	4623      	mov	r3, r4
   82040:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82042:	4640      	mov	r0, r8
   82044:	69e9      	ldr	r1, [r5, #28]
   82046:	47b8      	blx	r7
   82048:	2800      	cmp	r0, #0
   8204a:	ebc0 0404 	rsb	r4, r0, r4
   8204e:	4406      	add	r6, r0
   82050:	dd04      	ble.n	8205c <__sflush_r+0xc0>
   82052:	2c00      	cmp	r4, #0
   82054:	dcf2      	bgt.n	8203c <__sflush_r+0xa0>
   82056:	2000      	movs	r0, #0
   82058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8205c:	89ab      	ldrh	r3, [r5, #12]
   8205e:	f04f 30ff 	mov.w	r0, #4294967295
   82062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82066:	81ab      	strh	r3, [r5, #12]
   82068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8206c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8206e:	2a00      	cmp	r2, #0
   82070:	dca2      	bgt.n	81fb8 <__sflush_r+0x1c>
   82072:	e7f0      	b.n	82056 <__sflush_r+0xba>
   82074:	2301      	movs	r3, #1
   82076:	4640      	mov	r0, r8
   82078:	69e9      	ldr	r1, [r5, #28]
   8207a:	47a0      	blx	r4
   8207c:	1c43      	adds	r3, r0, #1
   8207e:	4602      	mov	r2, r0
   82080:	d01e      	beq.n	820c0 <__sflush_r+0x124>
   82082:	89ab      	ldrh	r3, [r5, #12]
   82084:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82086:	e7a6      	b.n	81fd6 <__sflush_r+0x3a>
   82088:	f8d8 3000 	ldr.w	r3, [r8]
   8208c:	b95b      	cbnz	r3, 820a6 <__sflush_r+0x10a>
   8208e:	89aa      	ldrh	r2, [r5, #12]
   82090:	6929      	ldr	r1, [r5, #16]
   82092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82096:	b292      	uxth	r2, r2
   82098:	606b      	str	r3, [r5, #4]
   8209a:	04d3      	lsls	r3, r2, #19
   8209c:	81aa      	strh	r2, [r5, #12]
   8209e:	6029      	str	r1, [r5, #0]
   820a0:	d5b2      	bpl.n	82008 <__sflush_r+0x6c>
   820a2:	6528      	str	r0, [r5, #80]	; 0x50
   820a4:	e7b0      	b.n	82008 <__sflush_r+0x6c>
   820a6:	2b1d      	cmp	r3, #29
   820a8:	d001      	beq.n	820ae <__sflush_r+0x112>
   820aa:	2b16      	cmp	r3, #22
   820ac:	d113      	bne.n	820d6 <__sflush_r+0x13a>
   820ae:	89a9      	ldrh	r1, [r5, #12]
   820b0:	692b      	ldr	r3, [r5, #16]
   820b2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   820b6:	2200      	movs	r2, #0
   820b8:	81a9      	strh	r1, [r5, #12]
   820ba:	602b      	str	r3, [r5, #0]
   820bc:	606a      	str	r2, [r5, #4]
   820be:	e7a3      	b.n	82008 <__sflush_r+0x6c>
   820c0:	f8d8 3000 	ldr.w	r3, [r8]
   820c4:	2b00      	cmp	r3, #0
   820c6:	d0dc      	beq.n	82082 <__sflush_r+0xe6>
   820c8:	2b1d      	cmp	r3, #29
   820ca:	d001      	beq.n	820d0 <__sflush_r+0x134>
   820cc:	2b16      	cmp	r3, #22
   820ce:	d1c5      	bne.n	8205c <__sflush_r+0xc0>
   820d0:	f8c8 6000 	str.w	r6, [r8]
   820d4:	e7bf      	b.n	82056 <__sflush_r+0xba>
   820d6:	89ab      	ldrh	r3, [r5, #12]
   820d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   820dc:	81ab      	strh	r3, [r5, #12]
   820de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820e2:	bf00      	nop

000820e4 <_fflush_r>:
   820e4:	b510      	push	{r4, lr}
   820e6:	4604      	mov	r4, r0
   820e8:	b082      	sub	sp, #8
   820ea:	b108      	cbz	r0, 820f0 <_fflush_r+0xc>
   820ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
   820ee:	b153      	cbz	r3, 82106 <_fflush_r+0x22>
   820f0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   820f4:	b908      	cbnz	r0, 820fa <_fflush_r+0x16>
   820f6:	b002      	add	sp, #8
   820f8:	bd10      	pop	{r4, pc}
   820fa:	4620      	mov	r0, r4
   820fc:	b002      	add	sp, #8
   820fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82102:	f7ff bf4b 	b.w	81f9c <__sflush_r>
   82106:	9101      	str	r1, [sp, #4]
   82108:	f000 f808 	bl	8211c <__sinit>
   8210c:	9901      	ldr	r1, [sp, #4]
   8210e:	e7ef      	b.n	820f0 <_fflush_r+0xc>

00082110 <_cleanup_r>:
   82110:	4901      	ldr	r1, [pc, #4]	; (82118 <_cleanup_r+0x8>)
   82112:	f000 bb9f 	b.w	82854 <_fwalk>
   82116:	bf00      	nop
   82118:	0008381d 	.word	0x0008381d

0008211c <__sinit>:
   8211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82120:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82122:	b083      	sub	sp, #12
   82124:	4607      	mov	r7, r0
   82126:	2c00      	cmp	r4, #0
   82128:	d165      	bne.n	821f6 <__sinit+0xda>
   8212a:	687d      	ldr	r5, [r7, #4]
   8212c:	4833      	ldr	r0, [pc, #204]	; (821fc <__sinit+0xe0>)
   8212e:	2304      	movs	r3, #4
   82130:	2103      	movs	r1, #3
   82132:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82136:	63f8      	str	r0, [r7, #60]	; 0x3c
   82138:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8213c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82140:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82144:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82148:	81ab      	strh	r3, [r5, #12]
   8214a:	602c      	str	r4, [r5, #0]
   8214c:	606c      	str	r4, [r5, #4]
   8214e:	60ac      	str	r4, [r5, #8]
   82150:	666c      	str	r4, [r5, #100]	; 0x64
   82152:	81ec      	strh	r4, [r5, #14]
   82154:	612c      	str	r4, [r5, #16]
   82156:	616c      	str	r4, [r5, #20]
   82158:	61ac      	str	r4, [r5, #24]
   8215a:	4621      	mov	r1, r4
   8215c:	2208      	movs	r2, #8
   8215e:	f7fe ff05 	bl	80f6c <memset>
   82162:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82200 <__sinit+0xe4>
   82166:	68be      	ldr	r6, [r7, #8]
   82168:	f8df a098 	ldr.w	sl, [pc, #152]	; 82204 <__sinit+0xe8>
   8216c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82208 <__sinit+0xec>
   82170:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8220c <__sinit+0xf0>
   82174:	2301      	movs	r3, #1
   82176:	2209      	movs	r2, #9
   82178:	61ed      	str	r5, [r5, #28]
   8217a:	f8c5 b020 	str.w	fp, [r5, #32]
   8217e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82182:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82186:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8218a:	4621      	mov	r1, r4
   8218c:	81f3      	strh	r3, [r6, #14]
   8218e:	81b2      	strh	r2, [r6, #12]
   82190:	6034      	str	r4, [r6, #0]
   82192:	6074      	str	r4, [r6, #4]
   82194:	60b4      	str	r4, [r6, #8]
   82196:	6674      	str	r4, [r6, #100]	; 0x64
   82198:	6134      	str	r4, [r6, #16]
   8219a:	6174      	str	r4, [r6, #20]
   8219c:	61b4      	str	r4, [r6, #24]
   8219e:	2208      	movs	r2, #8
   821a0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   821a4:	9301      	str	r3, [sp, #4]
   821a6:	f7fe fee1 	bl	80f6c <memset>
   821aa:	68fd      	ldr	r5, [r7, #12]
   821ac:	2012      	movs	r0, #18
   821ae:	2202      	movs	r2, #2
   821b0:	61f6      	str	r6, [r6, #28]
   821b2:	f8c6 b020 	str.w	fp, [r6, #32]
   821b6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   821ba:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   821be:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   821c2:	4621      	mov	r1, r4
   821c4:	81a8      	strh	r0, [r5, #12]
   821c6:	81ea      	strh	r2, [r5, #14]
   821c8:	602c      	str	r4, [r5, #0]
   821ca:	606c      	str	r4, [r5, #4]
   821cc:	60ac      	str	r4, [r5, #8]
   821ce:	666c      	str	r4, [r5, #100]	; 0x64
   821d0:	612c      	str	r4, [r5, #16]
   821d2:	616c      	str	r4, [r5, #20]
   821d4:	61ac      	str	r4, [r5, #24]
   821d6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   821da:	2208      	movs	r2, #8
   821dc:	f7fe fec6 	bl	80f6c <memset>
   821e0:	9b01      	ldr	r3, [sp, #4]
   821e2:	61ed      	str	r5, [r5, #28]
   821e4:	f8c5 b020 	str.w	fp, [r5, #32]
   821e8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   821ec:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   821f0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   821f4:	63bb      	str	r3, [r7, #56]	; 0x38
   821f6:	b003      	add	sp, #12
   821f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   821fc:	00082111 	.word	0x00082111
   82200:	00083511 	.word	0x00083511
   82204:	00083535 	.word	0x00083535
   82208:	0008356d 	.word	0x0008356d
   8220c:	0008358d 	.word	0x0008358d

00082210 <__sfp_lock_acquire>:
   82210:	4770      	bx	lr
   82212:	bf00      	nop

00082214 <__sfp_lock_release>:
   82214:	4770      	bx	lr
   82216:	bf00      	nop

00082218 <__libc_fini_array>:
   82218:	b538      	push	{r3, r4, r5, lr}
   8221a:	4d09      	ldr	r5, [pc, #36]	; (82240 <__libc_fini_array+0x28>)
   8221c:	4c09      	ldr	r4, [pc, #36]	; (82244 <__libc_fini_array+0x2c>)
   8221e:	1b64      	subs	r4, r4, r5
   82220:	10a4      	asrs	r4, r4, #2
   82222:	bf18      	it	ne
   82224:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82228:	d005      	beq.n	82236 <__libc_fini_array+0x1e>
   8222a:	3c01      	subs	r4, #1
   8222c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82230:	4798      	blx	r3
   82232:	2c00      	cmp	r4, #0
   82234:	d1f9      	bne.n	8222a <__libc_fini_array+0x12>
   82236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8223a:	f001 be77 	b.w	83f2c <_fini>
   8223e:	bf00      	nop
   82240:	00083f38 	.word	0x00083f38
   82244:	00083f3c 	.word	0x00083f3c

00082248 <_fputwc_r>:
   82248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8224c:	8993      	ldrh	r3, [r2, #12]
   8224e:	460f      	mov	r7, r1
   82250:	0499      	lsls	r1, r3, #18
   82252:	b082      	sub	sp, #8
   82254:	4614      	mov	r4, r2
   82256:	4680      	mov	r8, r0
   82258:	d406      	bmi.n	82268 <_fputwc_r+0x20>
   8225a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   8225c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82264:	81a3      	strh	r3, [r4, #12]
   82266:	6662      	str	r2, [r4, #100]	; 0x64
   82268:	f000 fb1c 	bl	828a4 <__locale_mb_cur_max>
   8226c:	2801      	cmp	r0, #1
   8226e:	d03e      	beq.n	822ee <_fputwc_r+0xa6>
   82270:	463a      	mov	r2, r7
   82272:	4640      	mov	r0, r8
   82274:	a901      	add	r1, sp, #4
   82276:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8227a:	f001 f9df 	bl	8363c <_wcrtomb_r>
   8227e:	1c42      	adds	r2, r0, #1
   82280:	4606      	mov	r6, r0
   82282:	d02d      	beq.n	822e0 <_fputwc_r+0x98>
   82284:	2800      	cmp	r0, #0
   82286:	d03a      	beq.n	822fe <_fputwc_r+0xb6>
   82288:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8228c:	2500      	movs	r5, #0
   8228e:	e009      	b.n	822a4 <_fputwc_r+0x5c>
   82290:	6823      	ldr	r3, [r4, #0]
   82292:	7019      	strb	r1, [r3, #0]
   82294:	6823      	ldr	r3, [r4, #0]
   82296:	3301      	adds	r3, #1
   82298:	6023      	str	r3, [r4, #0]
   8229a:	3501      	adds	r5, #1
   8229c:	42b5      	cmp	r5, r6
   8229e:	d22e      	bcs.n	822fe <_fputwc_r+0xb6>
   822a0:	ab01      	add	r3, sp, #4
   822a2:	5ce9      	ldrb	r1, [r5, r3]
   822a4:	68a3      	ldr	r3, [r4, #8]
   822a6:	3b01      	subs	r3, #1
   822a8:	2b00      	cmp	r3, #0
   822aa:	60a3      	str	r3, [r4, #8]
   822ac:	daf0      	bge.n	82290 <_fputwc_r+0x48>
   822ae:	69a2      	ldr	r2, [r4, #24]
   822b0:	4293      	cmp	r3, r2
   822b2:	db06      	blt.n	822c2 <_fputwc_r+0x7a>
   822b4:	6823      	ldr	r3, [r4, #0]
   822b6:	7019      	strb	r1, [r3, #0]
   822b8:	6823      	ldr	r3, [r4, #0]
   822ba:	7819      	ldrb	r1, [r3, #0]
   822bc:	3301      	adds	r3, #1
   822be:	290a      	cmp	r1, #10
   822c0:	d1ea      	bne.n	82298 <_fputwc_r+0x50>
   822c2:	4640      	mov	r0, r8
   822c4:	4622      	mov	r2, r4
   822c6:	f001 f965 	bl	83594 <__swbuf_r>
   822ca:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   822ce:	4258      	negs	r0, r3
   822d0:	4158      	adcs	r0, r3
   822d2:	2800      	cmp	r0, #0
   822d4:	d0e1      	beq.n	8229a <_fputwc_r+0x52>
   822d6:	f04f 30ff 	mov.w	r0, #4294967295
   822da:	b002      	add	sp, #8
   822dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822e0:	89a3      	ldrh	r3, [r4, #12]
   822e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   822e6:	81a3      	strh	r3, [r4, #12]
   822e8:	b002      	add	sp, #8
   822ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822ee:	1e7b      	subs	r3, r7, #1
   822f0:	2bfe      	cmp	r3, #254	; 0xfe
   822f2:	d8bd      	bhi.n	82270 <_fputwc_r+0x28>
   822f4:	b2f9      	uxtb	r1, r7
   822f6:	4606      	mov	r6, r0
   822f8:	f88d 1004 	strb.w	r1, [sp, #4]
   822fc:	e7c6      	b.n	8228c <_fputwc_r+0x44>
   822fe:	4638      	mov	r0, r7
   82300:	b002      	add	sp, #8
   82302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82306:	bf00      	nop

00082308 <_malloc_trim_r>:
   82308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8230a:	4d23      	ldr	r5, [pc, #140]	; (82398 <_malloc_trim_r+0x90>)
   8230c:	460f      	mov	r7, r1
   8230e:	4604      	mov	r4, r0
   82310:	f000 ff08 	bl	83124 <__malloc_lock>
   82314:	68ab      	ldr	r3, [r5, #8]
   82316:	685e      	ldr	r6, [r3, #4]
   82318:	f026 0603 	bic.w	r6, r6, #3
   8231c:	1bf1      	subs	r1, r6, r7
   8231e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82322:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82326:	f021 010f 	bic.w	r1, r1, #15
   8232a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8232e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82332:	db07      	blt.n	82344 <_malloc_trim_r+0x3c>
   82334:	4620      	mov	r0, r4
   82336:	2100      	movs	r1, #0
   82338:	f001 f8d8 	bl	834ec <_sbrk_r>
   8233c:	68ab      	ldr	r3, [r5, #8]
   8233e:	4433      	add	r3, r6
   82340:	4298      	cmp	r0, r3
   82342:	d004      	beq.n	8234e <_malloc_trim_r+0x46>
   82344:	4620      	mov	r0, r4
   82346:	f000 feef 	bl	83128 <__malloc_unlock>
   8234a:	2000      	movs	r0, #0
   8234c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8234e:	4620      	mov	r0, r4
   82350:	4279      	negs	r1, r7
   82352:	f001 f8cb 	bl	834ec <_sbrk_r>
   82356:	3001      	adds	r0, #1
   82358:	d00d      	beq.n	82376 <_malloc_trim_r+0x6e>
   8235a:	4b10      	ldr	r3, [pc, #64]	; (8239c <_malloc_trim_r+0x94>)
   8235c:	68aa      	ldr	r2, [r5, #8]
   8235e:	6819      	ldr	r1, [r3, #0]
   82360:	1bf6      	subs	r6, r6, r7
   82362:	f046 0601 	orr.w	r6, r6, #1
   82366:	4620      	mov	r0, r4
   82368:	1bc9      	subs	r1, r1, r7
   8236a:	6056      	str	r6, [r2, #4]
   8236c:	6019      	str	r1, [r3, #0]
   8236e:	f000 fedb 	bl	83128 <__malloc_unlock>
   82372:	2001      	movs	r0, #1
   82374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82376:	4620      	mov	r0, r4
   82378:	2100      	movs	r1, #0
   8237a:	f001 f8b7 	bl	834ec <_sbrk_r>
   8237e:	68ab      	ldr	r3, [r5, #8]
   82380:	1ac2      	subs	r2, r0, r3
   82382:	2a0f      	cmp	r2, #15
   82384:	ddde      	ble.n	82344 <_malloc_trim_r+0x3c>
   82386:	4d06      	ldr	r5, [pc, #24]	; (823a0 <_malloc_trim_r+0x98>)
   82388:	4904      	ldr	r1, [pc, #16]	; (8239c <_malloc_trim_r+0x94>)
   8238a:	682d      	ldr	r5, [r5, #0]
   8238c:	f042 0201 	orr.w	r2, r2, #1
   82390:	1b40      	subs	r0, r0, r5
   82392:	605a      	str	r2, [r3, #4]
   82394:	6008      	str	r0, [r1, #0]
   82396:	e7d5      	b.n	82344 <_malloc_trim_r+0x3c>
   82398:	20070590 	.word	0x20070590
   8239c:	20070ae8 	.word	0x20070ae8
   823a0:	2007099c 	.word	0x2007099c

000823a4 <_free_r>:
   823a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823a8:	460d      	mov	r5, r1
   823aa:	4606      	mov	r6, r0
   823ac:	2900      	cmp	r1, #0
   823ae:	d055      	beq.n	8245c <_free_r+0xb8>
   823b0:	f000 feb8 	bl	83124 <__malloc_lock>
   823b4:	f855 1c04 	ldr.w	r1, [r5, #-4]
   823b8:	f8df c170 	ldr.w	ip, [pc, #368]	; 8252c <_free_r+0x188>
   823bc:	f1a5 0408 	sub.w	r4, r5, #8
   823c0:	f021 0301 	bic.w	r3, r1, #1
   823c4:	18e2      	adds	r2, r4, r3
   823c6:	f8dc 0008 	ldr.w	r0, [ip, #8]
   823ca:	6857      	ldr	r7, [r2, #4]
   823cc:	4290      	cmp	r0, r2
   823ce:	f027 0703 	bic.w	r7, r7, #3
   823d2:	d068      	beq.n	824a6 <_free_r+0x102>
   823d4:	f011 0101 	ands.w	r1, r1, #1
   823d8:	6057      	str	r7, [r2, #4]
   823da:	d032      	beq.n	82442 <_free_r+0x9e>
   823dc:	2100      	movs	r1, #0
   823de:	19d0      	adds	r0, r2, r7
   823e0:	6840      	ldr	r0, [r0, #4]
   823e2:	07c0      	lsls	r0, r0, #31
   823e4:	d406      	bmi.n	823f4 <_free_r+0x50>
   823e6:	443b      	add	r3, r7
   823e8:	6890      	ldr	r0, [r2, #8]
   823ea:	2900      	cmp	r1, #0
   823ec:	d04d      	beq.n	8248a <_free_r+0xe6>
   823ee:	68d2      	ldr	r2, [r2, #12]
   823f0:	60c2      	str	r2, [r0, #12]
   823f2:	6090      	str	r0, [r2, #8]
   823f4:	f043 0201 	orr.w	r2, r3, #1
   823f8:	6062      	str	r2, [r4, #4]
   823fa:	50e3      	str	r3, [r4, r3]
   823fc:	b9e1      	cbnz	r1, 82438 <_free_r+0x94>
   823fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82402:	d32d      	bcc.n	82460 <_free_r+0xbc>
   82404:	0a5a      	lsrs	r2, r3, #9
   82406:	2a04      	cmp	r2, #4
   82408:	d869      	bhi.n	824de <_free_r+0x13a>
   8240a:	0998      	lsrs	r0, r3, #6
   8240c:	3038      	adds	r0, #56	; 0x38
   8240e:	0041      	lsls	r1, r0, #1
   82410:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82414:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82418:	4944      	ldr	r1, [pc, #272]	; (8252c <_free_r+0x188>)
   8241a:	4562      	cmp	r2, ip
   8241c:	d065      	beq.n	824ea <_free_r+0x146>
   8241e:	6851      	ldr	r1, [r2, #4]
   82420:	f021 0103 	bic.w	r1, r1, #3
   82424:	428b      	cmp	r3, r1
   82426:	d202      	bcs.n	8242e <_free_r+0x8a>
   82428:	6892      	ldr	r2, [r2, #8]
   8242a:	4594      	cmp	ip, r2
   8242c:	d1f7      	bne.n	8241e <_free_r+0x7a>
   8242e:	68d3      	ldr	r3, [r2, #12]
   82430:	60e3      	str	r3, [r4, #12]
   82432:	60a2      	str	r2, [r4, #8]
   82434:	609c      	str	r4, [r3, #8]
   82436:	60d4      	str	r4, [r2, #12]
   82438:	4630      	mov	r0, r6
   8243a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8243e:	f000 be73 	b.w	83128 <__malloc_unlock>
   82442:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82446:	f10c 0808 	add.w	r8, ip, #8
   8244a:	1b64      	subs	r4, r4, r5
   8244c:	68a0      	ldr	r0, [r4, #8]
   8244e:	442b      	add	r3, r5
   82450:	4540      	cmp	r0, r8
   82452:	d042      	beq.n	824da <_free_r+0x136>
   82454:	68e5      	ldr	r5, [r4, #12]
   82456:	60c5      	str	r5, [r0, #12]
   82458:	60a8      	str	r0, [r5, #8]
   8245a:	e7c0      	b.n	823de <_free_r+0x3a>
   8245c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82460:	08db      	lsrs	r3, r3, #3
   82462:	109a      	asrs	r2, r3, #2
   82464:	2001      	movs	r0, #1
   82466:	4090      	lsls	r0, r2
   82468:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8246c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82470:	689a      	ldr	r2, [r3, #8]
   82472:	4301      	orrs	r1, r0
   82474:	60a2      	str	r2, [r4, #8]
   82476:	60e3      	str	r3, [r4, #12]
   82478:	f8cc 1004 	str.w	r1, [ip, #4]
   8247c:	4630      	mov	r0, r6
   8247e:	609c      	str	r4, [r3, #8]
   82480:	60d4      	str	r4, [r2, #12]
   82482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82486:	f000 be4f 	b.w	83128 <__malloc_unlock>
   8248a:	4d29      	ldr	r5, [pc, #164]	; (82530 <_free_r+0x18c>)
   8248c:	42a8      	cmp	r0, r5
   8248e:	d1ae      	bne.n	823ee <_free_r+0x4a>
   82490:	f043 0201 	orr.w	r2, r3, #1
   82494:	f8cc 4014 	str.w	r4, [ip, #20]
   82498:	f8cc 4010 	str.w	r4, [ip, #16]
   8249c:	60e0      	str	r0, [r4, #12]
   8249e:	60a0      	str	r0, [r4, #8]
   824a0:	6062      	str	r2, [r4, #4]
   824a2:	50e3      	str	r3, [r4, r3]
   824a4:	e7c8      	b.n	82438 <_free_r+0x94>
   824a6:	441f      	add	r7, r3
   824a8:	07cb      	lsls	r3, r1, #31
   824aa:	d407      	bmi.n	824bc <_free_r+0x118>
   824ac:	f855 1c08 	ldr.w	r1, [r5, #-8]
   824b0:	1a64      	subs	r4, r4, r1
   824b2:	68e3      	ldr	r3, [r4, #12]
   824b4:	68a2      	ldr	r2, [r4, #8]
   824b6:	440f      	add	r7, r1
   824b8:	60d3      	str	r3, [r2, #12]
   824ba:	609a      	str	r2, [r3, #8]
   824bc:	4b1d      	ldr	r3, [pc, #116]	; (82534 <_free_r+0x190>)
   824be:	f047 0201 	orr.w	r2, r7, #1
   824c2:	681b      	ldr	r3, [r3, #0]
   824c4:	6062      	str	r2, [r4, #4]
   824c6:	429f      	cmp	r7, r3
   824c8:	f8cc 4008 	str.w	r4, [ip, #8]
   824cc:	d3b4      	bcc.n	82438 <_free_r+0x94>
   824ce:	4b1a      	ldr	r3, [pc, #104]	; (82538 <_free_r+0x194>)
   824d0:	4630      	mov	r0, r6
   824d2:	6819      	ldr	r1, [r3, #0]
   824d4:	f7ff ff18 	bl	82308 <_malloc_trim_r>
   824d8:	e7ae      	b.n	82438 <_free_r+0x94>
   824da:	2101      	movs	r1, #1
   824dc:	e77f      	b.n	823de <_free_r+0x3a>
   824de:	2a14      	cmp	r2, #20
   824e0:	d80b      	bhi.n	824fa <_free_r+0x156>
   824e2:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   824e6:	0041      	lsls	r1, r0, #1
   824e8:	e792      	b.n	82410 <_free_r+0x6c>
   824ea:	1080      	asrs	r0, r0, #2
   824ec:	2501      	movs	r5, #1
   824ee:	4085      	lsls	r5, r0
   824f0:	6848      	ldr	r0, [r1, #4]
   824f2:	4613      	mov	r3, r2
   824f4:	4328      	orrs	r0, r5
   824f6:	6048      	str	r0, [r1, #4]
   824f8:	e79a      	b.n	82430 <_free_r+0x8c>
   824fa:	2a54      	cmp	r2, #84	; 0x54
   824fc:	d803      	bhi.n	82506 <_free_r+0x162>
   824fe:	0b18      	lsrs	r0, r3, #12
   82500:	306e      	adds	r0, #110	; 0x6e
   82502:	0041      	lsls	r1, r0, #1
   82504:	e784      	b.n	82410 <_free_r+0x6c>
   82506:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8250a:	d803      	bhi.n	82514 <_free_r+0x170>
   8250c:	0bd8      	lsrs	r0, r3, #15
   8250e:	3077      	adds	r0, #119	; 0x77
   82510:	0041      	lsls	r1, r0, #1
   82512:	e77d      	b.n	82410 <_free_r+0x6c>
   82514:	f240 5154 	movw	r1, #1364	; 0x554
   82518:	428a      	cmp	r2, r1
   8251a:	d803      	bhi.n	82524 <_free_r+0x180>
   8251c:	0c98      	lsrs	r0, r3, #18
   8251e:	307c      	adds	r0, #124	; 0x7c
   82520:	0041      	lsls	r1, r0, #1
   82522:	e775      	b.n	82410 <_free_r+0x6c>
   82524:	21fc      	movs	r1, #252	; 0xfc
   82526:	207e      	movs	r0, #126	; 0x7e
   82528:	e772      	b.n	82410 <_free_r+0x6c>
   8252a:	bf00      	nop
   8252c:	20070590 	.word	0x20070590
   82530:	20070598 	.word	0x20070598
   82534:	20070998 	.word	0x20070998
   82538:	20070ae4 	.word	0x20070ae4

0008253c <__sfvwrite_r>:
   8253c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82540:	6893      	ldr	r3, [r2, #8]
   82542:	b083      	sub	sp, #12
   82544:	4616      	mov	r6, r2
   82546:	4681      	mov	r9, r0
   82548:	460c      	mov	r4, r1
   8254a:	b32b      	cbz	r3, 82598 <__sfvwrite_r+0x5c>
   8254c:	898b      	ldrh	r3, [r1, #12]
   8254e:	0719      	lsls	r1, r3, #28
   82550:	d526      	bpl.n	825a0 <__sfvwrite_r+0x64>
   82552:	6922      	ldr	r2, [r4, #16]
   82554:	b322      	cbz	r2, 825a0 <__sfvwrite_r+0x64>
   82556:	f003 0202 	and.w	r2, r3, #2
   8255a:	b292      	uxth	r2, r2
   8255c:	6835      	ldr	r5, [r6, #0]
   8255e:	2a00      	cmp	r2, #0
   82560:	d02c      	beq.n	825bc <__sfvwrite_r+0x80>
   82562:	f04f 0a00 	mov.w	sl, #0
   82566:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82850 <__sfvwrite_r+0x314>
   8256a:	46d0      	mov	r8, sl
   8256c:	45d8      	cmp	r8, fp
   8256e:	bf34      	ite	cc
   82570:	4643      	movcc	r3, r8
   82572:	465b      	movcs	r3, fp
   82574:	4652      	mov	r2, sl
   82576:	4648      	mov	r0, r9
   82578:	f1b8 0f00 	cmp.w	r8, #0
   8257c:	d04f      	beq.n	8261e <__sfvwrite_r+0xe2>
   8257e:	69e1      	ldr	r1, [r4, #28]
   82580:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82582:	47b8      	blx	r7
   82584:	2800      	cmp	r0, #0
   82586:	dd56      	ble.n	82636 <__sfvwrite_r+0xfa>
   82588:	68b3      	ldr	r3, [r6, #8]
   8258a:	4482      	add	sl, r0
   8258c:	1a1b      	subs	r3, r3, r0
   8258e:	ebc0 0808 	rsb	r8, r0, r8
   82592:	60b3      	str	r3, [r6, #8]
   82594:	2b00      	cmp	r3, #0
   82596:	d1e9      	bne.n	8256c <__sfvwrite_r+0x30>
   82598:	2000      	movs	r0, #0
   8259a:	b003      	add	sp, #12
   8259c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825a0:	4648      	mov	r0, r9
   825a2:	4621      	mov	r1, r4
   825a4:	f7ff fc88 	bl	81eb8 <__swsetup_r>
   825a8:	2800      	cmp	r0, #0
   825aa:	f040 8148 	bne.w	8283e <__sfvwrite_r+0x302>
   825ae:	89a3      	ldrh	r3, [r4, #12]
   825b0:	6835      	ldr	r5, [r6, #0]
   825b2:	f003 0202 	and.w	r2, r3, #2
   825b6:	b292      	uxth	r2, r2
   825b8:	2a00      	cmp	r2, #0
   825ba:	d1d2      	bne.n	82562 <__sfvwrite_r+0x26>
   825bc:	f013 0a01 	ands.w	sl, r3, #1
   825c0:	d142      	bne.n	82648 <__sfvwrite_r+0x10c>
   825c2:	46d0      	mov	r8, sl
   825c4:	f1b8 0f00 	cmp.w	r8, #0
   825c8:	d023      	beq.n	82612 <__sfvwrite_r+0xd6>
   825ca:	059a      	lsls	r2, r3, #22
   825cc:	68a7      	ldr	r7, [r4, #8]
   825ce:	d576      	bpl.n	826be <__sfvwrite_r+0x182>
   825d0:	45b8      	cmp	r8, r7
   825d2:	f0c0 80a4 	bcc.w	8271e <__sfvwrite_r+0x1e2>
   825d6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   825da:	f040 80b2 	bne.w	82742 <__sfvwrite_r+0x206>
   825de:	6820      	ldr	r0, [r4, #0]
   825e0:	46bb      	mov	fp, r7
   825e2:	4651      	mov	r1, sl
   825e4:	465a      	mov	r2, fp
   825e6:	f000 fd37 	bl	83058 <memmove>
   825ea:	68a2      	ldr	r2, [r4, #8]
   825ec:	6821      	ldr	r1, [r4, #0]
   825ee:	1bd2      	subs	r2, r2, r7
   825f0:	eb01 030b 	add.w	r3, r1, fp
   825f4:	60a2      	str	r2, [r4, #8]
   825f6:	6023      	str	r3, [r4, #0]
   825f8:	4642      	mov	r2, r8
   825fa:	68b3      	ldr	r3, [r6, #8]
   825fc:	4492      	add	sl, r2
   825fe:	1a9b      	subs	r3, r3, r2
   82600:	ebc2 0808 	rsb	r8, r2, r8
   82604:	60b3      	str	r3, [r6, #8]
   82606:	2b00      	cmp	r3, #0
   82608:	d0c6      	beq.n	82598 <__sfvwrite_r+0x5c>
   8260a:	89a3      	ldrh	r3, [r4, #12]
   8260c:	f1b8 0f00 	cmp.w	r8, #0
   82610:	d1db      	bne.n	825ca <__sfvwrite_r+0x8e>
   82612:	f8d5 a000 	ldr.w	sl, [r5]
   82616:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8261a:	3508      	adds	r5, #8
   8261c:	e7d2      	b.n	825c4 <__sfvwrite_r+0x88>
   8261e:	f8d5 a000 	ldr.w	sl, [r5]
   82622:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82626:	3508      	adds	r5, #8
   82628:	e7a0      	b.n	8256c <__sfvwrite_r+0x30>
   8262a:	4648      	mov	r0, r9
   8262c:	4621      	mov	r1, r4
   8262e:	f7ff fd59 	bl	820e4 <_fflush_r>
   82632:	2800      	cmp	r0, #0
   82634:	d059      	beq.n	826ea <__sfvwrite_r+0x1ae>
   82636:	89a3      	ldrh	r3, [r4, #12]
   82638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8263c:	f04f 30ff 	mov.w	r0, #4294967295
   82640:	81a3      	strh	r3, [r4, #12]
   82642:	b003      	add	sp, #12
   82644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82648:	4692      	mov	sl, r2
   8264a:	9201      	str	r2, [sp, #4]
   8264c:	4693      	mov	fp, r2
   8264e:	4690      	mov	r8, r2
   82650:	f1b8 0f00 	cmp.w	r8, #0
   82654:	d02b      	beq.n	826ae <__sfvwrite_r+0x172>
   82656:	9f01      	ldr	r7, [sp, #4]
   82658:	2f00      	cmp	r7, #0
   8265a:	d064      	beq.n	82726 <__sfvwrite_r+0x1ea>
   8265c:	6820      	ldr	r0, [r4, #0]
   8265e:	6921      	ldr	r1, [r4, #16]
   82660:	45c2      	cmp	sl, r8
   82662:	bf34      	ite	cc
   82664:	4653      	movcc	r3, sl
   82666:	4643      	movcs	r3, r8
   82668:	4288      	cmp	r0, r1
   8266a:	461f      	mov	r7, r3
   8266c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82670:	6962      	ldr	r2, [r4, #20]
   82672:	d903      	bls.n	8267c <__sfvwrite_r+0x140>
   82674:	4494      	add	ip, r2
   82676:	4563      	cmp	r3, ip
   82678:	f300 80ae 	bgt.w	827d8 <__sfvwrite_r+0x29c>
   8267c:	4293      	cmp	r3, r2
   8267e:	db36      	blt.n	826ee <__sfvwrite_r+0x1b2>
   82680:	4613      	mov	r3, r2
   82682:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82684:	4648      	mov	r0, r9
   82686:	69e1      	ldr	r1, [r4, #28]
   82688:	465a      	mov	r2, fp
   8268a:	47b8      	blx	r7
   8268c:	1e07      	subs	r7, r0, #0
   8268e:	ddd2      	ble.n	82636 <__sfvwrite_r+0xfa>
   82690:	ebba 0a07 	subs.w	sl, sl, r7
   82694:	d03a      	beq.n	8270c <__sfvwrite_r+0x1d0>
   82696:	68b3      	ldr	r3, [r6, #8]
   82698:	44bb      	add	fp, r7
   8269a:	1bdb      	subs	r3, r3, r7
   8269c:	ebc7 0808 	rsb	r8, r7, r8
   826a0:	60b3      	str	r3, [r6, #8]
   826a2:	2b00      	cmp	r3, #0
   826a4:	f43f af78 	beq.w	82598 <__sfvwrite_r+0x5c>
   826a8:	f1b8 0f00 	cmp.w	r8, #0
   826ac:	d1d3      	bne.n	82656 <__sfvwrite_r+0x11a>
   826ae:	2700      	movs	r7, #0
   826b0:	f8d5 b000 	ldr.w	fp, [r5]
   826b4:	f8d5 8004 	ldr.w	r8, [r5, #4]
   826b8:	9701      	str	r7, [sp, #4]
   826ba:	3508      	adds	r5, #8
   826bc:	e7c8      	b.n	82650 <__sfvwrite_r+0x114>
   826be:	6820      	ldr	r0, [r4, #0]
   826c0:	6923      	ldr	r3, [r4, #16]
   826c2:	4298      	cmp	r0, r3
   826c4:	d802      	bhi.n	826cc <__sfvwrite_r+0x190>
   826c6:	6963      	ldr	r3, [r4, #20]
   826c8:	4598      	cmp	r8, r3
   826ca:	d272      	bcs.n	827b2 <__sfvwrite_r+0x276>
   826cc:	45b8      	cmp	r8, r7
   826ce:	bf38      	it	cc
   826d0:	4647      	movcc	r7, r8
   826d2:	463a      	mov	r2, r7
   826d4:	4651      	mov	r1, sl
   826d6:	f000 fcbf 	bl	83058 <memmove>
   826da:	68a3      	ldr	r3, [r4, #8]
   826dc:	6822      	ldr	r2, [r4, #0]
   826de:	1bdb      	subs	r3, r3, r7
   826e0:	443a      	add	r2, r7
   826e2:	60a3      	str	r3, [r4, #8]
   826e4:	6022      	str	r2, [r4, #0]
   826e6:	2b00      	cmp	r3, #0
   826e8:	d09f      	beq.n	8262a <__sfvwrite_r+0xee>
   826ea:	463a      	mov	r2, r7
   826ec:	e785      	b.n	825fa <__sfvwrite_r+0xbe>
   826ee:	461a      	mov	r2, r3
   826f0:	4659      	mov	r1, fp
   826f2:	9300      	str	r3, [sp, #0]
   826f4:	f000 fcb0 	bl	83058 <memmove>
   826f8:	9b00      	ldr	r3, [sp, #0]
   826fa:	68a1      	ldr	r1, [r4, #8]
   826fc:	6822      	ldr	r2, [r4, #0]
   826fe:	1ac9      	subs	r1, r1, r3
   82700:	ebba 0a07 	subs.w	sl, sl, r7
   82704:	4413      	add	r3, r2
   82706:	60a1      	str	r1, [r4, #8]
   82708:	6023      	str	r3, [r4, #0]
   8270a:	d1c4      	bne.n	82696 <__sfvwrite_r+0x15a>
   8270c:	4648      	mov	r0, r9
   8270e:	4621      	mov	r1, r4
   82710:	f7ff fce8 	bl	820e4 <_fflush_r>
   82714:	2800      	cmp	r0, #0
   82716:	d18e      	bne.n	82636 <__sfvwrite_r+0xfa>
   82718:	f8cd a004 	str.w	sl, [sp, #4]
   8271c:	e7bb      	b.n	82696 <__sfvwrite_r+0x15a>
   8271e:	6820      	ldr	r0, [r4, #0]
   82720:	4647      	mov	r7, r8
   82722:	46c3      	mov	fp, r8
   82724:	e75d      	b.n	825e2 <__sfvwrite_r+0xa6>
   82726:	4658      	mov	r0, fp
   82728:	210a      	movs	r1, #10
   8272a:	4642      	mov	r2, r8
   8272c:	f000 fbd4 	bl	82ed8 <memchr>
   82730:	2800      	cmp	r0, #0
   82732:	d07f      	beq.n	82834 <__sfvwrite_r+0x2f8>
   82734:	f100 0a01 	add.w	sl, r0, #1
   82738:	2701      	movs	r7, #1
   8273a:	ebcb 0a0a 	rsb	sl, fp, sl
   8273e:	9701      	str	r7, [sp, #4]
   82740:	e78c      	b.n	8265c <__sfvwrite_r+0x120>
   82742:	6822      	ldr	r2, [r4, #0]
   82744:	6921      	ldr	r1, [r4, #16]
   82746:	6967      	ldr	r7, [r4, #20]
   82748:	ebc1 0c02 	rsb	ip, r1, r2
   8274c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82750:	f10c 0201 	add.w	r2, ip, #1
   82754:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82758:	4442      	add	r2, r8
   8275a:	107f      	asrs	r7, r7, #1
   8275c:	4297      	cmp	r7, r2
   8275e:	bf34      	ite	cc
   82760:	4617      	movcc	r7, r2
   82762:	463a      	movcs	r2, r7
   82764:	055b      	lsls	r3, r3, #21
   82766:	d54f      	bpl.n	82808 <__sfvwrite_r+0x2cc>
   82768:	4611      	mov	r1, r2
   8276a:	4648      	mov	r0, r9
   8276c:	f8cd c000 	str.w	ip, [sp]
   82770:	f000 f916 	bl	829a0 <_malloc_r>
   82774:	f8dd c000 	ldr.w	ip, [sp]
   82778:	4683      	mov	fp, r0
   8277a:	2800      	cmp	r0, #0
   8277c:	d062      	beq.n	82844 <__sfvwrite_r+0x308>
   8277e:	4662      	mov	r2, ip
   82780:	6921      	ldr	r1, [r4, #16]
   82782:	f8cd c000 	str.w	ip, [sp]
   82786:	f000 fbf1 	bl	82f6c <memcpy>
   8278a:	89a2      	ldrh	r2, [r4, #12]
   8278c:	f8dd c000 	ldr.w	ip, [sp]
   82790:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82794:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82798:	81a2      	strh	r2, [r4, #12]
   8279a:	eb0b 000c 	add.w	r0, fp, ip
   8279e:	ebcc 0207 	rsb	r2, ip, r7
   827a2:	f8c4 b010 	str.w	fp, [r4, #16]
   827a6:	6167      	str	r7, [r4, #20]
   827a8:	6020      	str	r0, [r4, #0]
   827aa:	60a2      	str	r2, [r4, #8]
   827ac:	4647      	mov	r7, r8
   827ae:	46c3      	mov	fp, r8
   827b0:	e717      	b.n	825e2 <__sfvwrite_r+0xa6>
   827b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   827b6:	4590      	cmp	r8, r2
   827b8:	bf38      	it	cc
   827ba:	4642      	movcc	r2, r8
   827bc:	fb92 f2f3 	sdiv	r2, r2, r3
   827c0:	fb02 f303 	mul.w	r3, r2, r3
   827c4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   827c6:	4648      	mov	r0, r9
   827c8:	69e1      	ldr	r1, [r4, #28]
   827ca:	4652      	mov	r2, sl
   827cc:	47b8      	blx	r7
   827ce:	2800      	cmp	r0, #0
   827d0:	f77f af31 	ble.w	82636 <__sfvwrite_r+0xfa>
   827d4:	4602      	mov	r2, r0
   827d6:	e710      	b.n	825fa <__sfvwrite_r+0xbe>
   827d8:	4662      	mov	r2, ip
   827da:	4659      	mov	r1, fp
   827dc:	f8cd c000 	str.w	ip, [sp]
   827e0:	f000 fc3a 	bl	83058 <memmove>
   827e4:	f8dd c000 	ldr.w	ip, [sp]
   827e8:	6823      	ldr	r3, [r4, #0]
   827ea:	4648      	mov	r0, r9
   827ec:	4463      	add	r3, ip
   827ee:	6023      	str	r3, [r4, #0]
   827f0:	4621      	mov	r1, r4
   827f2:	f8cd c000 	str.w	ip, [sp]
   827f6:	f7ff fc75 	bl	820e4 <_fflush_r>
   827fa:	f8dd c000 	ldr.w	ip, [sp]
   827fe:	2800      	cmp	r0, #0
   82800:	f47f af19 	bne.w	82636 <__sfvwrite_r+0xfa>
   82804:	4667      	mov	r7, ip
   82806:	e743      	b.n	82690 <__sfvwrite_r+0x154>
   82808:	4648      	mov	r0, r9
   8280a:	f8cd c000 	str.w	ip, [sp]
   8280e:	f000 fc8d 	bl	8312c <_realloc_r>
   82812:	f8dd c000 	ldr.w	ip, [sp]
   82816:	4683      	mov	fp, r0
   82818:	2800      	cmp	r0, #0
   8281a:	d1be      	bne.n	8279a <__sfvwrite_r+0x25e>
   8281c:	4648      	mov	r0, r9
   8281e:	6921      	ldr	r1, [r4, #16]
   82820:	f7ff fdc0 	bl	823a4 <_free_r>
   82824:	89a3      	ldrh	r3, [r4, #12]
   82826:	220c      	movs	r2, #12
   82828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8282c:	b29b      	uxth	r3, r3
   8282e:	f8c9 2000 	str.w	r2, [r9]
   82832:	e701      	b.n	82638 <__sfvwrite_r+0xfc>
   82834:	2701      	movs	r7, #1
   82836:	f108 0a01 	add.w	sl, r8, #1
   8283a:	9701      	str	r7, [sp, #4]
   8283c:	e70e      	b.n	8265c <__sfvwrite_r+0x120>
   8283e:	f04f 30ff 	mov.w	r0, #4294967295
   82842:	e6aa      	b.n	8259a <__sfvwrite_r+0x5e>
   82844:	230c      	movs	r3, #12
   82846:	f8c9 3000 	str.w	r3, [r9]
   8284a:	89a3      	ldrh	r3, [r4, #12]
   8284c:	e6f4      	b.n	82638 <__sfvwrite_r+0xfc>
   8284e:	bf00      	nop
   82850:	7ffffc00 	.word	0x7ffffc00

00082854 <_fwalk>:
   82854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82858:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   8285c:	4688      	mov	r8, r1
   8285e:	d019      	beq.n	82894 <_fwalk+0x40>
   82860:	2600      	movs	r6, #0
   82862:	687d      	ldr	r5, [r7, #4]
   82864:	68bc      	ldr	r4, [r7, #8]
   82866:	3d01      	subs	r5, #1
   82868:	d40e      	bmi.n	82888 <_fwalk+0x34>
   8286a:	89a3      	ldrh	r3, [r4, #12]
   8286c:	3d01      	subs	r5, #1
   8286e:	2b01      	cmp	r3, #1
   82870:	d906      	bls.n	82880 <_fwalk+0x2c>
   82872:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82876:	4620      	mov	r0, r4
   82878:	3301      	adds	r3, #1
   8287a:	d001      	beq.n	82880 <_fwalk+0x2c>
   8287c:	47c0      	blx	r8
   8287e:	4306      	orrs	r6, r0
   82880:	1c6b      	adds	r3, r5, #1
   82882:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82886:	d1f0      	bne.n	8286a <_fwalk+0x16>
   82888:	683f      	ldr	r7, [r7, #0]
   8288a:	2f00      	cmp	r7, #0
   8288c:	d1e9      	bne.n	82862 <_fwalk+0xe>
   8288e:	4630      	mov	r0, r6
   82890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82894:	463e      	mov	r6, r7
   82896:	4630      	mov	r0, r6
   82898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008289c <__locale_charset>:
   8289c:	4800      	ldr	r0, [pc, #0]	; (828a0 <__locale_charset+0x4>)
   8289e:	4770      	bx	lr
   828a0:	2007056c 	.word	0x2007056c

000828a4 <__locale_mb_cur_max>:
   828a4:	4b01      	ldr	r3, [pc, #4]	; (828ac <__locale_mb_cur_max+0x8>)
   828a6:	6818      	ldr	r0, [r3, #0]
   828a8:	4770      	bx	lr
   828aa:	bf00      	nop
   828ac:	2007058c 	.word	0x2007058c

000828b0 <__smakebuf_r>:
   828b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   828b2:	898b      	ldrh	r3, [r1, #12]
   828b4:	b091      	sub	sp, #68	; 0x44
   828b6:	b29a      	uxth	r2, r3
   828b8:	0796      	lsls	r6, r2, #30
   828ba:	460c      	mov	r4, r1
   828bc:	4605      	mov	r5, r0
   828be:	d437      	bmi.n	82930 <__smakebuf_r+0x80>
   828c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   828c4:	2900      	cmp	r1, #0
   828c6:	db17      	blt.n	828f8 <__smakebuf_r+0x48>
   828c8:	aa01      	add	r2, sp, #4
   828ca:	f000 ffaf 	bl	8382c <_fstat_r>
   828ce:	2800      	cmp	r0, #0
   828d0:	db10      	blt.n	828f4 <__smakebuf_r+0x44>
   828d2:	9b02      	ldr	r3, [sp, #8]
   828d4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   828d8:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   828dc:	424f      	negs	r7, r1
   828de:	414f      	adcs	r7, r1
   828e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   828e4:	d02c      	beq.n	82940 <__smakebuf_r+0x90>
   828e6:	89a3      	ldrh	r3, [r4, #12]
   828e8:	f44f 6680 	mov.w	r6, #1024	; 0x400
   828ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   828f0:	81a3      	strh	r3, [r4, #12]
   828f2:	e00b      	b.n	8290c <__smakebuf_r+0x5c>
   828f4:	89a3      	ldrh	r3, [r4, #12]
   828f6:	b29a      	uxth	r2, r3
   828f8:	f012 0f80 	tst.w	r2, #128	; 0x80
   828fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82900:	81a3      	strh	r3, [r4, #12]
   82902:	bf14      	ite	ne
   82904:	2640      	movne	r6, #64	; 0x40
   82906:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8290a:	2700      	movs	r7, #0
   8290c:	4628      	mov	r0, r5
   8290e:	4631      	mov	r1, r6
   82910:	f000 f846 	bl	829a0 <_malloc_r>
   82914:	89a3      	ldrh	r3, [r4, #12]
   82916:	2800      	cmp	r0, #0
   82918:	d029      	beq.n	8296e <__smakebuf_r+0xbe>
   8291a:	4a1b      	ldr	r2, [pc, #108]	; (82988 <__smakebuf_r+0xd8>)
   8291c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82920:	63ea      	str	r2, [r5, #60]	; 0x3c
   82922:	81a3      	strh	r3, [r4, #12]
   82924:	6020      	str	r0, [r4, #0]
   82926:	6120      	str	r0, [r4, #16]
   82928:	6166      	str	r6, [r4, #20]
   8292a:	b9a7      	cbnz	r7, 82956 <__smakebuf_r+0xa6>
   8292c:	b011      	add	sp, #68	; 0x44
   8292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82930:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82934:	2201      	movs	r2, #1
   82936:	600b      	str	r3, [r1, #0]
   82938:	610b      	str	r3, [r1, #16]
   8293a:	614a      	str	r2, [r1, #20]
   8293c:	b011      	add	sp, #68	; 0x44
   8293e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82940:	4a12      	ldr	r2, [pc, #72]	; (8298c <__smakebuf_r+0xdc>)
   82942:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82944:	4293      	cmp	r3, r2
   82946:	d1ce      	bne.n	828e6 <__smakebuf_r+0x36>
   82948:	89a3      	ldrh	r3, [r4, #12]
   8294a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8294e:	4333      	orrs	r3, r6
   82950:	81a3      	strh	r3, [r4, #12]
   82952:	64e6      	str	r6, [r4, #76]	; 0x4c
   82954:	e7da      	b.n	8290c <__smakebuf_r+0x5c>
   82956:	4628      	mov	r0, r5
   82958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8295c:	f000 ff7a 	bl	83854 <_isatty_r>
   82960:	2800      	cmp	r0, #0
   82962:	d0e3      	beq.n	8292c <__smakebuf_r+0x7c>
   82964:	89a3      	ldrh	r3, [r4, #12]
   82966:	f043 0301 	orr.w	r3, r3, #1
   8296a:	81a3      	strh	r3, [r4, #12]
   8296c:	e7de      	b.n	8292c <__smakebuf_r+0x7c>
   8296e:	059a      	lsls	r2, r3, #22
   82970:	d4dc      	bmi.n	8292c <__smakebuf_r+0x7c>
   82972:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82976:	f043 0302 	orr.w	r3, r3, #2
   8297a:	2101      	movs	r1, #1
   8297c:	81a3      	strh	r3, [r4, #12]
   8297e:	6022      	str	r2, [r4, #0]
   82980:	6122      	str	r2, [r4, #16]
   82982:	6161      	str	r1, [r4, #20]
   82984:	e7d2      	b.n	8292c <__smakebuf_r+0x7c>
   82986:	bf00      	nop
   82988:	00082111 	.word	0x00082111
   8298c:	0008356d 	.word	0x0008356d

00082990 <malloc>:
   82990:	4b02      	ldr	r3, [pc, #8]	; (8299c <malloc+0xc>)
   82992:	4601      	mov	r1, r0
   82994:	6818      	ldr	r0, [r3, #0]
   82996:	f000 b803 	b.w	829a0 <_malloc_r>
   8299a:	bf00      	nop
   8299c:	20070568 	.word	0x20070568

000829a0 <_malloc_r>:
   829a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   829a4:	f101 050b 	add.w	r5, r1, #11
   829a8:	2d16      	cmp	r5, #22
   829aa:	b083      	sub	sp, #12
   829ac:	4606      	mov	r6, r0
   829ae:	d927      	bls.n	82a00 <_malloc_r+0x60>
   829b0:	f035 0507 	bics.w	r5, r5, #7
   829b4:	d427      	bmi.n	82a06 <_malloc_r+0x66>
   829b6:	42a9      	cmp	r1, r5
   829b8:	d825      	bhi.n	82a06 <_malloc_r+0x66>
   829ba:	4630      	mov	r0, r6
   829bc:	f000 fbb2 	bl	83124 <__malloc_lock>
   829c0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   829c4:	d226      	bcs.n	82a14 <_malloc_r+0x74>
   829c6:	4fc1      	ldr	r7, [pc, #772]	; (82ccc <_malloc_r+0x32c>)
   829c8:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   829cc:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   829d0:	68dc      	ldr	r4, [r3, #12]
   829d2:	429c      	cmp	r4, r3
   829d4:	f000 81d2 	beq.w	82d7c <_malloc_r+0x3dc>
   829d8:	6863      	ldr	r3, [r4, #4]
   829da:	68e2      	ldr	r2, [r4, #12]
   829dc:	f023 0303 	bic.w	r3, r3, #3
   829e0:	4423      	add	r3, r4
   829e2:	6858      	ldr	r0, [r3, #4]
   829e4:	68a1      	ldr	r1, [r4, #8]
   829e6:	f040 0501 	orr.w	r5, r0, #1
   829ea:	60ca      	str	r2, [r1, #12]
   829ec:	4630      	mov	r0, r6
   829ee:	6091      	str	r1, [r2, #8]
   829f0:	605d      	str	r5, [r3, #4]
   829f2:	f000 fb99 	bl	83128 <__malloc_unlock>
   829f6:	3408      	adds	r4, #8
   829f8:	4620      	mov	r0, r4
   829fa:	b003      	add	sp, #12
   829fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a00:	2510      	movs	r5, #16
   82a02:	42a9      	cmp	r1, r5
   82a04:	d9d9      	bls.n	829ba <_malloc_r+0x1a>
   82a06:	2400      	movs	r4, #0
   82a08:	230c      	movs	r3, #12
   82a0a:	4620      	mov	r0, r4
   82a0c:	6033      	str	r3, [r6, #0]
   82a0e:	b003      	add	sp, #12
   82a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a14:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82a18:	f000 8089 	beq.w	82b2e <_malloc_r+0x18e>
   82a1c:	f1bc 0f04 	cmp.w	ip, #4
   82a20:	f200 8160 	bhi.w	82ce4 <_malloc_r+0x344>
   82a24:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82a28:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82a2c:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82a30:	4fa6      	ldr	r7, [pc, #664]	; (82ccc <_malloc_r+0x32c>)
   82a32:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82a36:	68cc      	ldr	r4, [r1, #12]
   82a38:	42a1      	cmp	r1, r4
   82a3a:	d105      	bne.n	82a48 <_malloc_r+0xa8>
   82a3c:	e00c      	b.n	82a58 <_malloc_r+0xb8>
   82a3e:	2b00      	cmp	r3, #0
   82a40:	da79      	bge.n	82b36 <_malloc_r+0x196>
   82a42:	68e4      	ldr	r4, [r4, #12]
   82a44:	42a1      	cmp	r1, r4
   82a46:	d007      	beq.n	82a58 <_malloc_r+0xb8>
   82a48:	6862      	ldr	r2, [r4, #4]
   82a4a:	f022 0203 	bic.w	r2, r2, #3
   82a4e:	1b53      	subs	r3, r2, r5
   82a50:	2b0f      	cmp	r3, #15
   82a52:	ddf4      	ble.n	82a3e <_malloc_r+0x9e>
   82a54:	f10c 3cff 	add.w	ip, ip, #4294967295
   82a58:	f10c 0c01 	add.w	ip, ip, #1
   82a5c:	4b9b      	ldr	r3, [pc, #620]	; (82ccc <_malloc_r+0x32c>)
   82a5e:	693c      	ldr	r4, [r7, #16]
   82a60:	f103 0e08 	add.w	lr, r3, #8
   82a64:	4574      	cmp	r4, lr
   82a66:	f000 817e 	beq.w	82d66 <_malloc_r+0x3c6>
   82a6a:	6861      	ldr	r1, [r4, #4]
   82a6c:	f021 0103 	bic.w	r1, r1, #3
   82a70:	1b4a      	subs	r2, r1, r5
   82a72:	2a0f      	cmp	r2, #15
   82a74:	f300 8164 	bgt.w	82d40 <_malloc_r+0x3a0>
   82a78:	2a00      	cmp	r2, #0
   82a7a:	f8c3 e014 	str.w	lr, [r3, #20]
   82a7e:	f8c3 e010 	str.w	lr, [r3, #16]
   82a82:	da69      	bge.n	82b58 <_malloc_r+0x1b8>
   82a84:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82a88:	f080 813a 	bcs.w	82d00 <_malloc_r+0x360>
   82a8c:	08c9      	lsrs	r1, r1, #3
   82a8e:	108a      	asrs	r2, r1, #2
   82a90:	f04f 0801 	mov.w	r8, #1
   82a94:	fa08 f802 	lsl.w	r8, r8, r2
   82a98:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82a9c:	685a      	ldr	r2, [r3, #4]
   82a9e:	6888      	ldr	r0, [r1, #8]
   82aa0:	ea48 0202 	orr.w	r2, r8, r2
   82aa4:	60a0      	str	r0, [r4, #8]
   82aa6:	60e1      	str	r1, [r4, #12]
   82aa8:	605a      	str	r2, [r3, #4]
   82aaa:	608c      	str	r4, [r1, #8]
   82aac:	60c4      	str	r4, [r0, #12]
   82aae:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82ab2:	2001      	movs	r0, #1
   82ab4:	4098      	lsls	r0, r3
   82ab6:	4290      	cmp	r0, r2
   82ab8:	d85b      	bhi.n	82b72 <_malloc_r+0x1d2>
   82aba:	4202      	tst	r2, r0
   82abc:	d106      	bne.n	82acc <_malloc_r+0x12c>
   82abe:	f02c 0c03 	bic.w	ip, ip, #3
   82ac2:	0040      	lsls	r0, r0, #1
   82ac4:	4202      	tst	r2, r0
   82ac6:	f10c 0c04 	add.w	ip, ip, #4
   82aca:	d0fa      	beq.n	82ac2 <_malloc_r+0x122>
   82acc:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82ad0:	4644      	mov	r4, r8
   82ad2:	46e1      	mov	r9, ip
   82ad4:	68e3      	ldr	r3, [r4, #12]
   82ad6:	429c      	cmp	r4, r3
   82ad8:	d107      	bne.n	82aea <_malloc_r+0x14a>
   82ada:	e146      	b.n	82d6a <_malloc_r+0x3ca>
   82adc:	2a00      	cmp	r2, #0
   82ade:	f280 8157 	bge.w	82d90 <_malloc_r+0x3f0>
   82ae2:	68db      	ldr	r3, [r3, #12]
   82ae4:	429c      	cmp	r4, r3
   82ae6:	f000 8140 	beq.w	82d6a <_malloc_r+0x3ca>
   82aea:	6859      	ldr	r1, [r3, #4]
   82aec:	f021 0103 	bic.w	r1, r1, #3
   82af0:	1b4a      	subs	r2, r1, r5
   82af2:	2a0f      	cmp	r2, #15
   82af4:	ddf2      	ble.n	82adc <_malloc_r+0x13c>
   82af6:	461c      	mov	r4, r3
   82af8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82afc:	68d9      	ldr	r1, [r3, #12]
   82afe:	f045 0901 	orr.w	r9, r5, #1
   82b02:	f042 0801 	orr.w	r8, r2, #1
   82b06:	441d      	add	r5, r3
   82b08:	f8c3 9004 	str.w	r9, [r3, #4]
   82b0c:	4630      	mov	r0, r6
   82b0e:	f8cc 100c 	str.w	r1, [ip, #12]
   82b12:	f8c1 c008 	str.w	ip, [r1, #8]
   82b16:	617d      	str	r5, [r7, #20]
   82b18:	613d      	str	r5, [r7, #16]
   82b1a:	f8c5 e00c 	str.w	lr, [r5, #12]
   82b1e:	f8c5 e008 	str.w	lr, [r5, #8]
   82b22:	f8c5 8004 	str.w	r8, [r5, #4]
   82b26:	50aa      	str	r2, [r5, r2]
   82b28:	f000 fafe 	bl	83128 <__malloc_unlock>
   82b2c:	e764      	b.n	829f8 <_malloc_r+0x58>
   82b2e:	217e      	movs	r1, #126	; 0x7e
   82b30:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82b34:	e77c      	b.n	82a30 <_malloc_r+0x90>
   82b36:	4422      	add	r2, r4
   82b38:	6850      	ldr	r0, [r2, #4]
   82b3a:	68e3      	ldr	r3, [r4, #12]
   82b3c:	68a1      	ldr	r1, [r4, #8]
   82b3e:	f040 0501 	orr.w	r5, r0, #1
   82b42:	60cb      	str	r3, [r1, #12]
   82b44:	4630      	mov	r0, r6
   82b46:	6099      	str	r1, [r3, #8]
   82b48:	6055      	str	r5, [r2, #4]
   82b4a:	f000 faed 	bl	83128 <__malloc_unlock>
   82b4e:	3408      	adds	r4, #8
   82b50:	4620      	mov	r0, r4
   82b52:	b003      	add	sp, #12
   82b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b58:	4421      	add	r1, r4
   82b5a:	684b      	ldr	r3, [r1, #4]
   82b5c:	4630      	mov	r0, r6
   82b5e:	f043 0301 	orr.w	r3, r3, #1
   82b62:	604b      	str	r3, [r1, #4]
   82b64:	f000 fae0 	bl	83128 <__malloc_unlock>
   82b68:	3408      	adds	r4, #8
   82b6a:	4620      	mov	r0, r4
   82b6c:	b003      	add	sp, #12
   82b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b72:	68bc      	ldr	r4, [r7, #8]
   82b74:	6863      	ldr	r3, [r4, #4]
   82b76:	f023 0903 	bic.w	r9, r3, #3
   82b7a:	45a9      	cmp	r9, r5
   82b7c:	d304      	bcc.n	82b88 <_malloc_r+0x1e8>
   82b7e:	ebc5 0309 	rsb	r3, r5, r9
   82b82:	2b0f      	cmp	r3, #15
   82b84:	f300 8091 	bgt.w	82caa <_malloc_r+0x30a>
   82b88:	4b51      	ldr	r3, [pc, #324]	; (82cd0 <_malloc_r+0x330>)
   82b8a:	4a52      	ldr	r2, [pc, #328]	; (82cd4 <_malloc_r+0x334>)
   82b8c:	6819      	ldr	r1, [r3, #0]
   82b8e:	6813      	ldr	r3, [r2, #0]
   82b90:	eb05 0a01 	add.w	sl, r5, r1
   82b94:	3301      	adds	r3, #1
   82b96:	eb04 0b09 	add.w	fp, r4, r9
   82b9a:	f000 8161 	beq.w	82e60 <_malloc_r+0x4c0>
   82b9e:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82ba2:	f10a 0a0f 	add.w	sl, sl, #15
   82ba6:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82baa:	f02a 0a0f 	bic.w	sl, sl, #15
   82bae:	4630      	mov	r0, r6
   82bb0:	4651      	mov	r1, sl
   82bb2:	9201      	str	r2, [sp, #4]
   82bb4:	f000 fc9a 	bl	834ec <_sbrk_r>
   82bb8:	f1b0 3fff 	cmp.w	r0, #4294967295
   82bbc:	4680      	mov	r8, r0
   82bbe:	9a01      	ldr	r2, [sp, #4]
   82bc0:	f000 8101 	beq.w	82dc6 <_malloc_r+0x426>
   82bc4:	4583      	cmp	fp, r0
   82bc6:	f200 80fb 	bhi.w	82dc0 <_malloc_r+0x420>
   82bca:	f8df c114 	ldr.w	ip, [pc, #276]	; 82ce0 <_malloc_r+0x340>
   82bce:	45c3      	cmp	fp, r8
   82bd0:	f8dc 3000 	ldr.w	r3, [ip]
   82bd4:	4453      	add	r3, sl
   82bd6:	f8cc 3000 	str.w	r3, [ip]
   82bda:	f000 814a 	beq.w	82e72 <_malloc_r+0x4d2>
   82bde:	6812      	ldr	r2, [r2, #0]
   82be0:	493c      	ldr	r1, [pc, #240]	; (82cd4 <_malloc_r+0x334>)
   82be2:	3201      	adds	r2, #1
   82be4:	bf1b      	ittet	ne
   82be6:	ebcb 0b08 	rsbne	fp, fp, r8
   82bea:	445b      	addne	r3, fp
   82bec:	f8c1 8000 	streq.w	r8, [r1]
   82bf0:	f8cc 3000 	strne.w	r3, [ip]
   82bf4:	f018 0307 	ands.w	r3, r8, #7
   82bf8:	f000 8114 	beq.w	82e24 <_malloc_r+0x484>
   82bfc:	f1c3 0208 	rsb	r2, r3, #8
   82c00:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82c04:	4490      	add	r8, r2
   82c06:	3308      	adds	r3, #8
   82c08:	44c2      	add	sl, r8
   82c0a:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82c0e:	ebca 0a03 	rsb	sl, sl, r3
   82c12:	4651      	mov	r1, sl
   82c14:	4630      	mov	r0, r6
   82c16:	f8cd c004 	str.w	ip, [sp, #4]
   82c1a:	f000 fc67 	bl	834ec <_sbrk_r>
   82c1e:	1c43      	adds	r3, r0, #1
   82c20:	f8dd c004 	ldr.w	ip, [sp, #4]
   82c24:	f000 8135 	beq.w	82e92 <_malloc_r+0x4f2>
   82c28:	ebc8 0200 	rsb	r2, r8, r0
   82c2c:	4452      	add	r2, sl
   82c2e:	f042 0201 	orr.w	r2, r2, #1
   82c32:	f8dc 3000 	ldr.w	r3, [ip]
   82c36:	42bc      	cmp	r4, r7
   82c38:	4453      	add	r3, sl
   82c3a:	f8c7 8008 	str.w	r8, [r7, #8]
   82c3e:	f8cc 3000 	str.w	r3, [ip]
   82c42:	f8c8 2004 	str.w	r2, [r8, #4]
   82c46:	f8df a098 	ldr.w	sl, [pc, #152]	; 82ce0 <_malloc_r+0x340>
   82c4a:	d015      	beq.n	82c78 <_malloc_r+0x2d8>
   82c4c:	f1b9 0f0f 	cmp.w	r9, #15
   82c50:	f240 80eb 	bls.w	82e2a <_malloc_r+0x48a>
   82c54:	6861      	ldr	r1, [r4, #4]
   82c56:	f1a9 020c 	sub.w	r2, r9, #12
   82c5a:	f022 0207 	bic.w	r2, r2, #7
   82c5e:	f001 0101 	and.w	r1, r1, #1
   82c62:	ea42 0e01 	orr.w	lr, r2, r1
   82c66:	2005      	movs	r0, #5
   82c68:	18a1      	adds	r1, r4, r2
   82c6a:	2a0f      	cmp	r2, #15
   82c6c:	f8c4 e004 	str.w	lr, [r4, #4]
   82c70:	6048      	str	r0, [r1, #4]
   82c72:	6088      	str	r0, [r1, #8]
   82c74:	f200 8111 	bhi.w	82e9a <_malloc_r+0x4fa>
   82c78:	4a17      	ldr	r2, [pc, #92]	; (82cd8 <_malloc_r+0x338>)
   82c7a:	68bc      	ldr	r4, [r7, #8]
   82c7c:	6811      	ldr	r1, [r2, #0]
   82c7e:	428b      	cmp	r3, r1
   82c80:	bf88      	it	hi
   82c82:	6013      	strhi	r3, [r2, #0]
   82c84:	4a15      	ldr	r2, [pc, #84]	; (82cdc <_malloc_r+0x33c>)
   82c86:	6811      	ldr	r1, [r2, #0]
   82c88:	428b      	cmp	r3, r1
   82c8a:	bf88      	it	hi
   82c8c:	6013      	strhi	r3, [r2, #0]
   82c8e:	6862      	ldr	r2, [r4, #4]
   82c90:	f022 0203 	bic.w	r2, r2, #3
   82c94:	4295      	cmp	r5, r2
   82c96:	ebc5 0302 	rsb	r3, r5, r2
   82c9a:	d801      	bhi.n	82ca0 <_malloc_r+0x300>
   82c9c:	2b0f      	cmp	r3, #15
   82c9e:	dc04      	bgt.n	82caa <_malloc_r+0x30a>
   82ca0:	4630      	mov	r0, r6
   82ca2:	f000 fa41 	bl	83128 <__malloc_unlock>
   82ca6:	2400      	movs	r4, #0
   82ca8:	e6a6      	b.n	829f8 <_malloc_r+0x58>
   82caa:	f045 0201 	orr.w	r2, r5, #1
   82cae:	f043 0301 	orr.w	r3, r3, #1
   82cb2:	4425      	add	r5, r4
   82cb4:	6062      	str	r2, [r4, #4]
   82cb6:	4630      	mov	r0, r6
   82cb8:	60bd      	str	r5, [r7, #8]
   82cba:	606b      	str	r3, [r5, #4]
   82cbc:	f000 fa34 	bl	83128 <__malloc_unlock>
   82cc0:	3408      	adds	r4, #8
   82cc2:	4620      	mov	r0, r4
   82cc4:	b003      	add	sp, #12
   82cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cca:	bf00      	nop
   82ccc:	20070590 	.word	0x20070590
   82cd0:	20070ae4 	.word	0x20070ae4
   82cd4:	2007099c 	.word	0x2007099c
   82cd8:	20070ae0 	.word	0x20070ae0
   82cdc:	20070adc 	.word	0x20070adc
   82ce0:	20070ae8 	.word	0x20070ae8
   82ce4:	f1bc 0f14 	cmp.w	ip, #20
   82ce8:	d961      	bls.n	82dae <_malloc_r+0x40e>
   82cea:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82cee:	f200 808f 	bhi.w	82e10 <_malloc_r+0x470>
   82cf2:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82cf6:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82cfa:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82cfe:	e697      	b.n	82a30 <_malloc_r+0x90>
   82d00:	0a4b      	lsrs	r3, r1, #9
   82d02:	2b04      	cmp	r3, #4
   82d04:	d958      	bls.n	82db8 <_malloc_r+0x418>
   82d06:	2b14      	cmp	r3, #20
   82d08:	f200 80ad 	bhi.w	82e66 <_malloc_r+0x4c6>
   82d0c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82d10:	0050      	lsls	r0, r2, #1
   82d12:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82d16:	6883      	ldr	r3, [r0, #8]
   82d18:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82ed4 <_malloc_r+0x534>
   82d1c:	4283      	cmp	r3, r0
   82d1e:	f000 808a 	beq.w	82e36 <_malloc_r+0x496>
   82d22:	685a      	ldr	r2, [r3, #4]
   82d24:	f022 0203 	bic.w	r2, r2, #3
   82d28:	4291      	cmp	r1, r2
   82d2a:	d202      	bcs.n	82d32 <_malloc_r+0x392>
   82d2c:	689b      	ldr	r3, [r3, #8]
   82d2e:	4298      	cmp	r0, r3
   82d30:	d1f7      	bne.n	82d22 <_malloc_r+0x382>
   82d32:	68d9      	ldr	r1, [r3, #12]
   82d34:	687a      	ldr	r2, [r7, #4]
   82d36:	60e1      	str	r1, [r4, #12]
   82d38:	60a3      	str	r3, [r4, #8]
   82d3a:	608c      	str	r4, [r1, #8]
   82d3c:	60dc      	str	r4, [r3, #12]
   82d3e:	e6b6      	b.n	82aae <_malloc_r+0x10e>
   82d40:	f045 0701 	orr.w	r7, r5, #1
   82d44:	f042 0101 	orr.w	r1, r2, #1
   82d48:	4425      	add	r5, r4
   82d4a:	6067      	str	r7, [r4, #4]
   82d4c:	4630      	mov	r0, r6
   82d4e:	615d      	str	r5, [r3, #20]
   82d50:	611d      	str	r5, [r3, #16]
   82d52:	f8c5 e00c 	str.w	lr, [r5, #12]
   82d56:	f8c5 e008 	str.w	lr, [r5, #8]
   82d5a:	6069      	str	r1, [r5, #4]
   82d5c:	50aa      	str	r2, [r5, r2]
   82d5e:	3408      	adds	r4, #8
   82d60:	f000 f9e2 	bl	83128 <__malloc_unlock>
   82d64:	e648      	b.n	829f8 <_malloc_r+0x58>
   82d66:	685a      	ldr	r2, [r3, #4]
   82d68:	e6a1      	b.n	82aae <_malloc_r+0x10e>
   82d6a:	f109 0901 	add.w	r9, r9, #1
   82d6e:	f019 0f03 	tst.w	r9, #3
   82d72:	f104 0408 	add.w	r4, r4, #8
   82d76:	f47f aead 	bne.w	82ad4 <_malloc_r+0x134>
   82d7a:	e02d      	b.n	82dd8 <_malloc_r+0x438>
   82d7c:	f104 0308 	add.w	r3, r4, #8
   82d80:	6964      	ldr	r4, [r4, #20]
   82d82:	42a3      	cmp	r3, r4
   82d84:	bf08      	it	eq
   82d86:	f10c 0c02 	addeq.w	ip, ip, #2
   82d8a:	f43f ae67 	beq.w	82a5c <_malloc_r+0xbc>
   82d8e:	e623      	b.n	829d8 <_malloc_r+0x38>
   82d90:	4419      	add	r1, r3
   82d92:	6848      	ldr	r0, [r1, #4]
   82d94:	461c      	mov	r4, r3
   82d96:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82d9a:	68db      	ldr	r3, [r3, #12]
   82d9c:	f040 0501 	orr.w	r5, r0, #1
   82da0:	604d      	str	r5, [r1, #4]
   82da2:	4630      	mov	r0, r6
   82da4:	60d3      	str	r3, [r2, #12]
   82da6:	609a      	str	r2, [r3, #8]
   82da8:	f000 f9be 	bl	83128 <__malloc_unlock>
   82dac:	e624      	b.n	829f8 <_malloc_r+0x58>
   82dae:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82db2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82db6:	e63b      	b.n	82a30 <_malloc_r+0x90>
   82db8:	098a      	lsrs	r2, r1, #6
   82dba:	3238      	adds	r2, #56	; 0x38
   82dbc:	0050      	lsls	r0, r2, #1
   82dbe:	e7a8      	b.n	82d12 <_malloc_r+0x372>
   82dc0:	42bc      	cmp	r4, r7
   82dc2:	f43f af02 	beq.w	82bca <_malloc_r+0x22a>
   82dc6:	68bc      	ldr	r4, [r7, #8]
   82dc8:	6862      	ldr	r2, [r4, #4]
   82dca:	f022 0203 	bic.w	r2, r2, #3
   82dce:	e761      	b.n	82c94 <_malloc_r+0x2f4>
   82dd0:	f8d8 8000 	ldr.w	r8, [r8]
   82dd4:	4598      	cmp	r8, r3
   82dd6:	d17a      	bne.n	82ece <_malloc_r+0x52e>
   82dd8:	f01c 0f03 	tst.w	ip, #3
   82ddc:	f1a8 0308 	sub.w	r3, r8, #8
   82de0:	f10c 3cff 	add.w	ip, ip, #4294967295
   82de4:	d1f4      	bne.n	82dd0 <_malloc_r+0x430>
   82de6:	687b      	ldr	r3, [r7, #4]
   82de8:	ea23 0300 	bic.w	r3, r3, r0
   82dec:	607b      	str	r3, [r7, #4]
   82dee:	0040      	lsls	r0, r0, #1
   82df0:	4298      	cmp	r0, r3
   82df2:	f63f aebe 	bhi.w	82b72 <_malloc_r+0x1d2>
   82df6:	2800      	cmp	r0, #0
   82df8:	f43f aebb 	beq.w	82b72 <_malloc_r+0x1d2>
   82dfc:	4203      	tst	r3, r0
   82dfe:	46cc      	mov	ip, r9
   82e00:	f47f ae64 	bne.w	82acc <_malloc_r+0x12c>
   82e04:	0040      	lsls	r0, r0, #1
   82e06:	4203      	tst	r3, r0
   82e08:	f10c 0c04 	add.w	ip, ip, #4
   82e0c:	d0fa      	beq.n	82e04 <_malloc_r+0x464>
   82e0e:	e65d      	b.n	82acc <_malloc_r+0x12c>
   82e10:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82e14:	d819      	bhi.n	82e4a <_malloc_r+0x4aa>
   82e16:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82e1a:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82e1e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e22:	e605      	b.n	82a30 <_malloc_r+0x90>
   82e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82e28:	e6ee      	b.n	82c08 <_malloc_r+0x268>
   82e2a:	2301      	movs	r3, #1
   82e2c:	f8c8 3004 	str.w	r3, [r8, #4]
   82e30:	4644      	mov	r4, r8
   82e32:	2200      	movs	r2, #0
   82e34:	e72e      	b.n	82c94 <_malloc_r+0x2f4>
   82e36:	1092      	asrs	r2, r2, #2
   82e38:	2001      	movs	r0, #1
   82e3a:	4090      	lsls	r0, r2
   82e3c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82e40:	4619      	mov	r1, r3
   82e42:	4302      	orrs	r2, r0
   82e44:	f8c8 2004 	str.w	r2, [r8, #4]
   82e48:	e775      	b.n	82d36 <_malloc_r+0x396>
   82e4a:	f240 5354 	movw	r3, #1364	; 0x554
   82e4e:	459c      	cmp	ip, r3
   82e50:	d81b      	bhi.n	82e8a <_malloc_r+0x4ea>
   82e52:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82e56:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82e5a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e5e:	e5e7      	b.n	82a30 <_malloc_r+0x90>
   82e60:	f10a 0a10 	add.w	sl, sl, #16
   82e64:	e6a3      	b.n	82bae <_malloc_r+0x20e>
   82e66:	2b54      	cmp	r3, #84	; 0x54
   82e68:	d81f      	bhi.n	82eaa <_malloc_r+0x50a>
   82e6a:	0b0a      	lsrs	r2, r1, #12
   82e6c:	326e      	adds	r2, #110	; 0x6e
   82e6e:	0050      	lsls	r0, r2, #1
   82e70:	e74f      	b.n	82d12 <_malloc_r+0x372>
   82e72:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82e76:	2900      	cmp	r1, #0
   82e78:	f47f aeb1 	bne.w	82bde <_malloc_r+0x23e>
   82e7c:	eb0a 0109 	add.w	r1, sl, r9
   82e80:	68ba      	ldr	r2, [r7, #8]
   82e82:	f041 0101 	orr.w	r1, r1, #1
   82e86:	6051      	str	r1, [r2, #4]
   82e88:	e6f6      	b.n	82c78 <_malloc_r+0x2d8>
   82e8a:	21fc      	movs	r1, #252	; 0xfc
   82e8c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82e90:	e5ce      	b.n	82a30 <_malloc_r+0x90>
   82e92:	2201      	movs	r2, #1
   82e94:	f04f 0a00 	mov.w	sl, #0
   82e98:	e6cb      	b.n	82c32 <_malloc_r+0x292>
   82e9a:	f104 0108 	add.w	r1, r4, #8
   82e9e:	4630      	mov	r0, r6
   82ea0:	f7ff fa80 	bl	823a4 <_free_r>
   82ea4:	f8da 3000 	ldr.w	r3, [sl]
   82ea8:	e6e6      	b.n	82c78 <_malloc_r+0x2d8>
   82eaa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82eae:	d803      	bhi.n	82eb8 <_malloc_r+0x518>
   82eb0:	0bca      	lsrs	r2, r1, #15
   82eb2:	3277      	adds	r2, #119	; 0x77
   82eb4:	0050      	lsls	r0, r2, #1
   82eb6:	e72c      	b.n	82d12 <_malloc_r+0x372>
   82eb8:	f240 5254 	movw	r2, #1364	; 0x554
   82ebc:	4293      	cmp	r3, r2
   82ebe:	d803      	bhi.n	82ec8 <_malloc_r+0x528>
   82ec0:	0c8a      	lsrs	r2, r1, #18
   82ec2:	327c      	adds	r2, #124	; 0x7c
   82ec4:	0050      	lsls	r0, r2, #1
   82ec6:	e724      	b.n	82d12 <_malloc_r+0x372>
   82ec8:	20fc      	movs	r0, #252	; 0xfc
   82eca:	227e      	movs	r2, #126	; 0x7e
   82ecc:	e721      	b.n	82d12 <_malloc_r+0x372>
   82ece:	687b      	ldr	r3, [r7, #4]
   82ed0:	e78d      	b.n	82dee <_malloc_r+0x44e>
   82ed2:	bf00      	nop
   82ed4:	20070590 	.word	0x20070590

00082ed8 <memchr>:
   82ed8:	0783      	lsls	r3, r0, #30
   82eda:	b470      	push	{r4, r5, r6}
   82edc:	b2c9      	uxtb	r1, r1
   82ede:	d040      	beq.n	82f62 <memchr+0x8a>
   82ee0:	1e54      	subs	r4, r2, #1
   82ee2:	b32a      	cbz	r2, 82f30 <memchr+0x58>
   82ee4:	7803      	ldrb	r3, [r0, #0]
   82ee6:	428b      	cmp	r3, r1
   82ee8:	d023      	beq.n	82f32 <memchr+0x5a>
   82eea:	1c43      	adds	r3, r0, #1
   82eec:	e004      	b.n	82ef8 <memchr+0x20>
   82eee:	b1fc      	cbz	r4, 82f30 <memchr+0x58>
   82ef0:	7805      	ldrb	r5, [r0, #0]
   82ef2:	4614      	mov	r4, r2
   82ef4:	428d      	cmp	r5, r1
   82ef6:	d01c      	beq.n	82f32 <memchr+0x5a>
   82ef8:	f013 0f03 	tst.w	r3, #3
   82efc:	4618      	mov	r0, r3
   82efe:	f104 32ff 	add.w	r2, r4, #4294967295
   82f02:	f103 0301 	add.w	r3, r3, #1
   82f06:	d1f2      	bne.n	82eee <memchr+0x16>
   82f08:	2c03      	cmp	r4, #3
   82f0a:	d814      	bhi.n	82f36 <memchr+0x5e>
   82f0c:	1e65      	subs	r5, r4, #1
   82f0e:	b354      	cbz	r4, 82f66 <memchr+0x8e>
   82f10:	7803      	ldrb	r3, [r0, #0]
   82f12:	428b      	cmp	r3, r1
   82f14:	d00d      	beq.n	82f32 <memchr+0x5a>
   82f16:	1c42      	adds	r2, r0, #1
   82f18:	2300      	movs	r3, #0
   82f1a:	e002      	b.n	82f22 <memchr+0x4a>
   82f1c:	7804      	ldrb	r4, [r0, #0]
   82f1e:	428c      	cmp	r4, r1
   82f20:	d007      	beq.n	82f32 <memchr+0x5a>
   82f22:	42ab      	cmp	r3, r5
   82f24:	4610      	mov	r0, r2
   82f26:	f103 0301 	add.w	r3, r3, #1
   82f2a:	f102 0201 	add.w	r2, r2, #1
   82f2e:	d1f5      	bne.n	82f1c <memchr+0x44>
   82f30:	2000      	movs	r0, #0
   82f32:	bc70      	pop	{r4, r5, r6}
   82f34:	4770      	bx	lr
   82f36:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82f3a:	4603      	mov	r3, r0
   82f3c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82f40:	681a      	ldr	r2, [r3, #0]
   82f42:	4618      	mov	r0, r3
   82f44:	4072      	eors	r2, r6
   82f46:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   82f4a:	ea25 0202 	bic.w	r2, r5, r2
   82f4e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   82f52:	f103 0304 	add.w	r3, r3, #4
   82f56:	d1d9      	bne.n	82f0c <memchr+0x34>
   82f58:	3c04      	subs	r4, #4
   82f5a:	2c03      	cmp	r4, #3
   82f5c:	4618      	mov	r0, r3
   82f5e:	d8ef      	bhi.n	82f40 <memchr+0x68>
   82f60:	e7d4      	b.n	82f0c <memchr+0x34>
   82f62:	4614      	mov	r4, r2
   82f64:	e7d0      	b.n	82f08 <memchr+0x30>
   82f66:	4620      	mov	r0, r4
   82f68:	e7e3      	b.n	82f32 <memchr+0x5a>
   82f6a:	bf00      	nop

00082f6c <memcpy>:
   82f6c:	4684      	mov	ip, r0
   82f6e:	ea41 0300 	orr.w	r3, r1, r0
   82f72:	f013 0303 	ands.w	r3, r3, #3
   82f76:	d149      	bne.n	8300c <memcpy+0xa0>
   82f78:	3a40      	subs	r2, #64	; 0x40
   82f7a:	d323      	bcc.n	82fc4 <memcpy+0x58>
   82f7c:	680b      	ldr	r3, [r1, #0]
   82f7e:	6003      	str	r3, [r0, #0]
   82f80:	684b      	ldr	r3, [r1, #4]
   82f82:	6043      	str	r3, [r0, #4]
   82f84:	688b      	ldr	r3, [r1, #8]
   82f86:	6083      	str	r3, [r0, #8]
   82f88:	68cb      	ldr	r3, [r1, #12]
   82f8a:	60c3      	str	r3, [r0, #12]
   82f8c:	690b      	ldr	r3, [r1, #16]
   82f8e:	6103      	str	r3, [r0, #16]
   82f90:	694b      	ldr	r3, [r1, #20]
   82f92:	6143      	str	r3, [r0, #20]
   82f94:	698b      	ldr	r3, [r1, #24]
   82f96:	6183      	str	r3, [r0, #24]
   82f98:	69cb      	ldr	r3, [r1, #28]
   82f9a:	61c3      	str	r3, [r0, #28]
   82f9c:	6a0b      	ldr	r3, [r1, #32]
   82f9e:	6203      	str	r3, [r0, #32]
   82fa0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82fa2:	6243      	str	r3, [r0, #36]	; 0x24
   82fa4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82fa6:	6283      	str	r3, [r0, #40]	; 0x28
   82fa8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82faa:	62c3      	str	r3, [r0, #44]	; 0x2c
   82fac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82fae:	6303      	str	r3, [r0, #48]	; 0x30
   82fb0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82fb2:	6343      	str	r3, [r0, #52]	; 0x34
   82fb4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82fb6:	6383      	str	r3, [r0, #56]	; 0x38
   82fb8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82fba:	63c3      	str	r3, [r0, #60]	; 0x3c
   82fbc:	3040      	adds	r0, #64	; 0x40
   82fbe:	3140      	adds	r1, #64	; 0x40
   82fc0:	3a40      	subs	r2, #64	; 0x40
   82fc2:	d2db      	bcs.n	82f7c <memcpy+0x10>
   82fc4:	3230      	adds	r2, #48	; 0x30
   82fc6:	d30b      	bcc.n	82fe0 <memcpy+0x74>
   82fc8:	680b      	ldr	r3, [r1, #0]
   82fca:	6003      	str	r3, [r0, #0]
   82fcc:	684b      	ldr	r3, [r1, #4]
   82fce:	6043      	str	r3, [r0, #4]
   82fd0:	688b      	ldr	r3, [r1, #8]
   82fd2:	6083      	str	r3, [r0, #8]
   82fd4:	68cb      	ldr	r3, [r1, #12]
   82fd6:	60c3      	str	r3, [r0, #12]
   82fd8:	3010      	adds	r0, #16
   82fda:	3110      	adds	r1, #16
   82fdc:	3a10      	subs	r2, #16
   82fde:	d2f3      	bcs.n	82fc8 <memcpy+0x5c>
   82fe0:	320c      	adds	r2, #12
   82fe2:	d305      	bcc.n	82ff0 <memcpy+0x84>
   82fe4:	f851 3b04 	ldr.w	r3, [r1], #4
   82fe8:	f840 3b04 	str.w	r3, [r0], #4
   82fec:	3a04      	subs	r2, #4
   82fee:	d2f9      	bcs.n	82fe4 <memcpy+0x78>
   82ff0:	3204      	adds	r2, #4
   82ff2:	d008      	beq.n	83006 <memcpy+0x9a>
   82ff4:	07d2      	lsls	r2, r2, #31
   82ff6:	bf1c      	itt	ne
   82ff8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82ffc:	f800 3b01 	strbne.w	r3, [r0], #1
   83000:	d301      	bcc.n	83006 <memcpy+0x9a>
   83002:	880b      	ldrh	r3, [r1, #0]
   83004:	8003      	strh	r3, [r0, #0]
   83006:	4660      	mov	r0, ip
   83008:	4770      	bx	lr
   8300a:	bf00      	nop
   8300c:	2a08      	cmp	r2, #8
   8300e:	d313      	bcc.n	83038 <memcpy+0xcc>
   83010:	078b      	lsls	r3, r1, #30
   83012:	d0b1      	beq.n	82f78 <memcpy+0xc>
   83014:	f010 0303 	ands.w	r3, r0, #3
   83018:	d0ae      	beq.n	82f78 <memcpy+0xc>
   8301a:	f1c3 0304 	rsb	r3, r3, #4
   8301e:	1ad2      	subs	r2, r2, r3
   83020:	07db      	lsls	r3, r3, #31
   83022:	bf1c      	itt	ne
   83024:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83028:	f800 3b01 	strbne.w	r3, [r0], #1
   8302c:	d3a4      	bcc.n	82f78 <memcpy+0xc>
   8302e:	f831 3b02 	ldrh.w	r3, [r1], #2
   83032:	f820 3b02 	strh.w	r3, [r0], #2
   83036:	e79f      	b.n	82f78 <memcpy+0xc>
   83038:	3a04      	subs	r2, #4
   8303a:	d3d9      	bcc.n	82ff0 <memcpy+0x84>
   8303c:	3a01      	subs	r2, #1
   8303e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83042:	f800 3b01 	strb.w	r3, [r0], #1
   83046:	d2f9      	bcs.n	8303c <memcpy+0xd0>
   83048:	780b      	ldrb	r3, [r1, #0]
   8304a:	7003      	strb	r3, [r0, #0]
   8304c:	784b      	ldrb	r3, [r1, #1]
   8304e:	7043      	strb	r3, [r0, #1]
   83050:	788b      	ldrb	r3, [r1, #2]
   83052:	7083      	strb	r3, [r0, #2]
   83054:	4660      	mov	r0, ip
   83056:	4770      	bx	lr

00083058 <memmove>:
   83058:	4288      	cmp	r0, r1
   8305a:	b4f0      	push	{r4, r5, r6, r7}
   8305c:	d910      	bls.n	83080 <memmove+0x28>
   8305e:	188c      	adds	r4, r1, r2
   83060:	42a0      	cmp	r0, r4
   83062:	d20d      	bcs.n	83080 <memmove+0x28>
   83064:	1885      	adds	r5, r0, r2
   83066:	1e53      	subs	r3, r2, #1
   83068:	b142      	cbz	r2, 8307c <memmove+0x24>
   8306a:	4621      	mov	r1, r4
   8306c:	462a      	mov	r2, r5
   8306e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83072:	3b01      	subs	r3, #1
   83074:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83078:	1c5c      	adds	r4, r3, #1
   8307a:	d1f8      	bne.n	8306e <memmove+0x16>
   8307c:	bcf0      	pop	{r4, r5, r6, r7}
   8307e:	4770      	bx	lr
   83080:	2a0f      	cmp	r2, #15
   83082:	d944      	bls.n	8310e <memmove+0xb6>
   83084:	ea40 0301 	orr.w	r3, r0, r1
   83088:	079b      	lsls	r3, r3, #30
   8308a:	d144      	bne.n	83116 <memmove+0xbe>
   8308c:	f1a2 0710 	sub.w	r7, r2, #16
   83090:	093f      	lsrs	r7, r7, #4
   83092:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   83096:	3610      	adds	r6, #16
   83098:	460c      	mov	r4, r1
   8309a:	4603      	mov	r3, r0
   8309c:	6825      	ldr	r5, [r4, #0]
   8309e:	3310      	adds	r3, #16
   830a0:	f843 5c10 	str.w	r5, [r3, #-16]
   830a4:	6865      	ldr	r5, [r4, #4]
   830a6:	3410      	adds	r4, #16
   830a8:	f843 5c0c 	str.w	r5, [r3, #-12]
   830ac:	f854 5c08 	ldr.w	r5, [r4, #-8]
   830b0:	f843 5c08 	str.w	r5, [r3, #-8]
   830b4:	f854 5c04 	ldr.w	r5, [r4, #-4]
   830b8:	f843 5c04 	str.w	r5, [r3, #-4]
   830bc:	42b3      	cmp	r3, r6
   830be:	d1ed      	bne.n	8309c <memmove+0x44>
   830c0:	1c7b      	adds	r3, r7, #1
   830c2:	f002 0c0f 	and.w	ip, r2, #15
   830c6:	011b      	lsls	r3, r3, #4
   830c8:	f1bc 0f03 	cmp.w	ip, #3
   830cc:	4419      	add	r1, r3
   830ce:	4403      	add	r3, r0
   830d0:	d923      	bls.n	8311a <memmove+0xc2>
   830d2:	460e      	mov	r6, r1
   830d4:	461d      	mov	r5, r3
   830d6:	4664      	mov	r4, ip
   830d8:	f856 7b04 	ldr.w	r7, [r6], #4
   830dc:	3c04      	subs	r4, #4
   830de:	2c03      	cmp	r4, #3
   830e0:	f845 7b04 	str.w	r7, [r5], #4
   830e4:	d8f8      	bhi.n	830d8 <memmove+0x80>
   830e6:	f1ac 0404 	sub.w	r4, ip, #4
   830ea:	f024 0403 	bic.w	r4, r4, #3
   830ee:	3404      	adds	r4, #4
   830f0:	f002 0203 	and.w	r2, r2, #3
   830f4:	4423      	add	r3, r4
   830f6:	4421      	add	r1, r4
   830f8:	2a00      	cmp	r2, #0
   830fa:	d0bf      	beq.n	8307c <memmove+0x24>
   830fc:	441a      	add	r2, r3
   830fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   83102:	f803 4b01 	strb.w	r4, [r3], #1
   83106:	4293      	cmp	r3, r2
   83108:	d1f9      	bne.n	830fe <memmove+0xa6>
   8310a:	bcf0      	pop	{r4, r5, r6, r7}
   8310c:	4770      	bx	lr
   8310e:	4603      	mov	r3, r0
   83110:	2a00      	cmp	r2, #0
   83112:	d1f3      	bne.n	830fc <memmove+0xa4>
   83114:	e7b2      	b.n	8307c <memmove+0x24>
   83116:	4603      	mov	r3, r0
   83118:	e7f0      	b.n	830fc <memmove+0xa4>
   8311a:	4662      	mov	r2, ip
   8311c:	2a00      	cmp	r2, #0
   8311e:	d1ed      	bne.n	830fc <memmove+0xa4>
   83120:	e7ac      	b.n	8307c <memmove+0x24>
   83122:	bf00      	nop

00083124 <__malloc_lock>:
   83124:	4770      	bx	lr
   83126:	bf00      	nop

00083128 <__malloc_unlock>:
   83128:	4770      	bx	lr
   8312a:	bf00      	nop

0008312c <_realloc_r>:
   8312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83130:	460c      	mov	r4, r1
   83132:	b083      	sub	sp, #12
   83134:	4690      	mov	r8, r2
   83136:	4681      	mov	r9, r0
   83138:	2900      	cmp	r1, #0
   8313a:	f000 80ba 	beq.w	832b2 <_realloc_r+0x186>
   8313e:	f7ff fff1 	bl	83124 <__malloc_lock>
   83142:	f108 060b 	add.w	r6, r8, #11
   83146:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8314a:	2e16      	cmp	r6, #22
   8314c:	f023 0503 	bic.w	r5, r3, #3
   83150:	f1a4 0708 	sub.w	r7, r4, #8
   83154:	d84b      	bhi.n	831ee <_realloc_r+0xc2>
   83156:	2110      	movs	r1, #16
   83158:	460e      	mov	r6, r1
   8315a:	45b0      	cmp	r8, r6
   8315c:	d84c      	bhi.n	831f8 <_realloc_r+0xcc>
   8315e:	428d      	cmp	r5, r1
   83160:	da51      	bge.n	83206 <_realloc_r+0xda>
   83162:	f8df b384 	ldr.w	fp, [pc, #900]	; 834e8 <_realloc_r+0x3bc>
   83166:	1978      	adds	r0, r7, r5
   83168:	f8db e008 	ldr.w	lr, [fp, #8]
   8316c:	4586      	cmp	lr, r0
   8316e:	f000 80a6 	beq.w	832be <_realloc_r+0x192>
   83172:	6842      	ldr	r2, [r0, #4]
   83174:	f022 0c01 	bic.w	ip, r2, #1
   83178:	4484      	add	ip, r0
   8317a:	f8dc c004 	ldr.w	ip, [ip, #4]
   8317e:	f01c 0f01 	tst.w	ip, #1
   83182:	d054      	beq.n	8322e <_realloc_r+0x102>
   83184:	2200      	movs	r2, #0
   83186:	4610      	mov	r0, r2
   83188:	07db      	lsls	r3, r3, #31
   8318a:	d46f      	bmi.n	8326c <_realloc_r+0x140>
   8318c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83190:	ebc3 0a07 	rsb	sl, r3, r7
   83194:	f8da 3004 	ldr.w	r3, [sl, #4]
   83198:	f023 0303 	bic.w	r3, r3, #3
   8319c:	442b      	add	r3, r5
   8319e:	2800      	cmp	r0, #0
   831a0:	d062      	beq.n	83268 <_realloc_r+0x13c>
   831a2:	4570      	cmp	r0, lr
   831a4:	f000 80e9 	beq.w	8337a <_realloc_r+0x24e>
   831a8:	eb02 0e03 	add.w	lr, r2, r3
   831ac:	458e      	cmp	lr, r1
   831ae:	db5b      	blt.n	83268 <_realloc_r+0x13c>
   831b0:	68c3      	ldr	r3, [r0, #12]
   831b2:	6882      	ldr	r2, [r0, #8]
   831b4:	46d0      	mov	r8, sl
   831b6:	60d3      	str	r3, [r2, #12]
   831b8:	609a      	str	r2, [r3, #8]
   831ba:	f858 1f08 	ldr.w	r1, [r8, #8]!
   831be:	f8da 300c 	ldr.w	r3, [sl, #12]
   831c2:	1f2a      	subs	r2, r5, #4
   831c4:	2a24      	cmp	r2, #36	; 0x24
   831c6:	60cb      	str	r3, [r1, #12]
   831c8:	6099      	str	r1, [r3, #8]
   831ca:	f200 8123 	bhi.w	83414 <_realloc_r+0x2e8>
   831ce:	2a13      	cmp	r2, #19
   831d0:	f240 80b0 	bls.w	83334 <_realloc_r+0x208>
   831d4:	6823      	ldr	r3, [r4, #0]
   831d6:	2a1b      	cmp	r2, #27
   831d8:	f8ca 3008 	str.w	r3, [sl, #8]
   831dc:	6863      	ldr	r3, [r4, #4]
   831de:	f8ca 300c 	str.w	r3, [sl, #12]
   831e2:	f200 812b 	bhi.w	8343c <_realloc_r+0x310>
   831e6:	3408      	adds	r4, #8
   831e8:	f10a 0310 	add.w	r3, sl, #16
   831ec:	e0a3      	b.n	83336 <_realloc_r+0x20a>
   831ee:	f026 0607 	bic.w	r6, r6, #7
   831f2:	2e00      	cmp	r6, #0
   831f4:	4631      	mov	r1, r6
   831f6:	dab0      	bge.n	8315a <_realloc_r+0x2e>
   831f8:	230c      	movs	r3, #12
   831fa:	2000      	movs	r0, #0
   831fc:	f8c9 3000 	str.w	r3, [r9]
   83200:	b003      	add	sp, #12
   83202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83206:	46a0      	mov	r8, r4
   83208:	1baa      	subs	r2, r5, r6
   8320a:	2a0f      	cmp	r2, #15
   8320c:	f003 0301 	and.w	r3, r3, #1
   83210:	d81a      	bhi.n	83248 <_realloc_r+0x11c>
   83212:	432b      	orrs	r3, r5
   83214:	607b      	str	r3, [r7, #4]
   83216:	443d      	add	r5, r7
   83218:	686b      	ldr	r3, [r5, #4]
   8321a:	f043 0301 	orr.w	r3, r3, #1
   8321e:	606b      	str	r3, [r5, #4]
   83220:	4648      	mov	r0, r9
   83222:	f7ff ff81 	bl	83128 <__malloc_unlock>
   83226:	4640      	mov	r0, r8
   83228:	b003      	add	sp, #12
   8322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8322e:	f022 0203 	bic.w	r2, r2, #3
   83232:	eb02 0c05 	add.w	ip, r2, r5
   83236:	458c      	cmp	ip, r1
   83238:	dba6      	blt.n	83188 <_realloc_r+0x5c>
   8323a:	68c2      	ldr	r2, [r0, #12]
   8323c:	6881      	ldr	r1, [r0, #8]
   8323e:	46a0      	mov	r8, r4
   83240:	60ca      	str	r2, [r1, #12]
   83242:	4665      	mov	r5, ip
   83244:	6091      	str	r1, [r2, #8]
   83246:	e7df      	b.n	83208 <_realloc_r+0xdc>
   83248:	19b9      	adds	r1, r7, r6
   8324a:	4333      	orrs	r3, r6
   8324c:	f042 0001 	orr.w	r0, r2, #1
   83250:	607b      	str	r3, [r7, #4]
   83252:	440a      	add	r2, r1
   83254:	6048      	str	r0, [r1, #4]
   83256:	6853      	ldr	r3, [r2, #4]
   83258:	3108      	adds	r1, #8
   8325a:	f043 0301 	orr.w	r3, r3, #1
   8325e:	6053      	str	r3, [r2, #4]
   83260:	4648      	mov	r0, r9
   83262:	f7ff f89f 	bl	823a4 <_free_r>
   83266:	e7db      	b.n	83220 <_realloc_r+0xf4>
   83268:	428b      	cmp	r3, r1
   8326a:	da33      	bge.n	832d4 <_realloc_r+0x1a8>
   8326c:	4641      	mov	r1, r8
   8326e:	4648      	mov	r0, r9
   83270:	f7ff fb96 	bl	829a0 <_malloc_r>
   83274:	4680      	mov	r8, r0
   83276:	2800      	cmp	r0, #0
   83278:	d0d2      	beq.n	83220 <_realloc_r+0xf4>
   8327a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8327e:	f1a0 0108 	sub.w	r1, r0, #8
   83282:	f023 0201 	bic.w	r2, r3, #1
   83286:	443a      	add	r2, r7
   83288:	4291      	cmp	r1, r2
   8328a:	f000 80bc 	beq.w	83406 <_realloc_r+0x2da>
   8328e:	1f2a      	subs	r2, r5, #4
   83290:	2a24      	cmp	r2, #36	; 0x24
   83292:	d86e      	bhi.n	83372 <_realloc_r+0x246>
   83294:	2a13      	cmp	r2, #19
   83296:	d842      	bhi.n	8331e <_realloc_r+0x1f2>
   83298:	4603      	mov	r3, r0
   8329a:	4622      	mov	r2, r4
   8329c:	6811      	ldr	r1, [r2, #0]
   8329e:	6019      	str	r1, [r3, #0]
   832a0:	6851      	ldr	r1, [r2, #4]
   832a2:	6059      	str	r1, [r3, #4]
   832a4:	6892      	ldr	r2, [r2, #8]
   832a6:	609a      	str	r2, [r3, #8]
   832a8:	4621      	mov	r1, r4
   832aa:	4648      	mov	r0, r9
   832ac:	f7ff f87a 	bl	823a4 <_free_r>
   832b0:	e7b6      	b.n	83220 <_realloc_r+0xf4>
   832b2:	4611      	mov	r1, r2
   832b4:	b003      	add	sp, #12
   832b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   832ba:	f7ff bb71 	b.w	829a0 <_malloc_r>
   832be:	f8de 2004 	ldr.w	r2, [lr, #4]
   832c2:	f106 0c10 	add.w	ip, r6, #16
   832c6:	f022 0203 	bic.w	r2, r2, #3
   832ca:	1950      	adds	r0, r2, r5
   832cc:	4560      	cmp	r0, ip
   832ce:	da3d      	bge.n	8334c <_realloc_r+0x220>
   832d0:	4670      	mov	r0, lr
   832d2:	e759      	b.n	83188 <_realloc_r+0x5c>
   832d4:	46d0      	mov	r8, sl
   832d6:	f858 0f08 	ldr.w	r0, [r8, #8]!
   832da:	f8da 100c 	ldr.w	r1, [sl, #12]
   832de:	1f2a      	subs	r2, r5, #4
   832e0:	2a24      	cmp	r2, #36	; 0x24
   832e2:	60c1      	str	r1, [r0, #12]
   832e4:	6088      	str	r0, [r1, #8]
   832e6:	f200 80a0 	bhi.w	8342a <_realloc_r+0x2fe>
   832ea:	2a13      	cmp	r2, #19
   832ec:	f240 809b 	bls.w	83426 <_realloc_r+0x2fa>
   832f0:	6821      	ldr	r1, [r4, #0]
   832f2:	2a1b      	cmp	r2, #27
   832f4:	f8ca 1008 	str.w	r1, [sl, #8]
   832f8:	6861      	ldr	r1, [r4, #4]
   832fa:	f8ca 100c 	str.w	r1, [sl, #12]
   832fe:	f200 80b2 	bhi.w	83466 <_realloc_r+0x33a>
   83302:	3408      	adds	r4, #8
   83304:	f10a 0210 	add.w	r2, sl, #16
   83308:	6821      	ldr	r1, [r4, #0]
   8330a:	461d      	mov	r5, r3
   8330c:	6011      	str	r1, [r2, #0]
   8330e:	6861      	ldr	r1, [r4, #4]
   83310:	4657      	mov	r7, sl
   83312:	6051      	str	r1, [r2, #4]
   83314:	68a3      	ldr	r3, [r4, #8]
   83316:	6093      	str	r3, [r2, #8]
   83318:	f8da 3004 	ldr.w	r3, [sl, #4]
   8331c:	e774      	b.n	83208 <_realloc_r+0xdc>
   8331e:	6823      	ldr	r3, [r4, #0]
   83320:	2a1b      	cmp	r2, #27
   83322:	6003      	str	r3, [r0, #0]
   83324:	6863      	ldr	r3, [r4, #4]
   83326:	6043      	str	r3, [r0, #4]
   83328:	d862      	bhi.n	833f0 <_realloc_r+0x2c4>
   8332a:	f100 0308 	add.w	r3, r0, #8
   8332e:	f104 0208 	add.w	r2, r4, #8
   83332:	e7b3      	b.n	8329c <_realloc_r+0x170>
   83334:	4643      	mov	r3, r8
   83336:	6822      	ldr	r2, [r4, #0]
   83338:	4675      	mov	r5, lr
   8333a:	601a      	str	r2, [r3, #0]
   8333c:	6862      	ldr	r2, [r4, #4]
   8333e:	4657      	mov	r7, sl
   83340:	605a      	str	r2, [r3, #4]
   83342:	68a2      	ldr	r2, [r4, #8]
   83344:	609a      	str	r2, [r3, #8]
   83346:	f8da 3004 	ldr.w	r3, [sl, #4]
   8334a:	e75d      	b.n	83208 <_realloc_r+0xdc>
   8334c:	1b83      	subs	r3, r0, r6
   8334e:	4437      	add	r7, r6
   83350:	f043 0301 	orr.w	r3, r3, #1
   83354:	f8cb 7008 	str.w	r7, [fp, #8]
   83358:	607b      	str	r3, [r7, #4]
   8335a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8335e:	4648      	mov	r0, r9
   83360:	f003 0301 	and.w	r3, r3, #1
   83364:	431e      	orrs	r6, r3
   83366:	f844 6c04 	str.w	r6, [r4, #-4]
   8336a:	f7ff fedd 	bl	83128 <__malloc_unlock>
   8336e:	4620      	mov	r0, r4
   83370:	e75a      	b.n	83228 <_realloc_r+0xfc>
   83372:	4621      	mov	r1, r4
   83374:	f7ff fe70 	bl	83058 <memmove>
   83378:	e796      	b.n	832a8 <_realloc_r+0x17c>
   8337a:	eb02 0c03 	add.w	ip, r2, r3
   8337e:	f106 0210 	add.w	r2, r6, #16
   83382:	4594      	cmp	ip, r2
   83384:	f6ff af70 	blt.w	83268 <_realloc_r+0x13c>
   83388:	4657      	mov	r7, sl
   8338a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8338e:	f8da 300c 	ldr.w	r3, [sl, #12]
   83392:	1f2a      	subs	r2, r5, #4
   83394:	2a24      	cmp	r2, #36	; 0x24
   83396:	60cb      	str	r3, [r1, #12]
   83398:	6099      	str	r1, [r3, #8]
   8339a:	f200 8086 	bhi.w	834aa <_realloc_r+0x37e>
   8339e:	2a13      	cmp	r2, #19
   833a0:	d977      	bls.n	83492 <_realloc_r+0x366>
   833a2:	6823      	ldr	r3, [r4, #0]
   833a4:	2a1b      	cmp	r2, #27
   833a6:	f8ca 3008 	str.w	r3, [sl, #8]
   833aa:	6863      	ldr	r3, [r4, #4]
   833ac:	f8ca 300c 	str.w	r3, [sl, #12]
   833b0:	f200 8084 	bhi.w	834bc <_realloc_r+0x390>
   833b4:	3408      	adds	r4, #8
   833b6:	f10a 0310 	add.w	r3, sl, #16
   833ba:	6822      	ldr	r2, [r4, #0]
   833bc:	601a      	str	r2, [r3, #0]
   833be:	6862      	ldr	r2, [r4, #4]
   833c0:	605a      	str	r2, [r3, #4]
   833c2:	68a2      	ldr	r2, [r4, #8]
   833c4:	609a      	str	r2, [r3, #8]
   833c6:	ebc6 020c 	rsb	r2, r6, ip
   833ca:	eb0a 0306 	add.w	r3, sl, r6
   833ce:	f042 0201 	orr.w	r2, r2, #1
   833d2:	f8cb 3008 	str.w	r3, [fp, #8]
   833d6:	605a      	str	r2, [r3, #4]
   833d8:	f8da 3004 	ldr.w	r3, [sl, #4]
   833dc:	4648      	mov	r0, r9
   833de:	f003 0301 	and.w	r3, r3, #1
   833e2:	431e      	orrs	r6, r3
   833e4:	f8ca 6004 	str.w	r6, [sl, #4]
   833e8:	f7ff fe9e 	bl	83128 <__malloc_unlock>
   833ec:	4638      	mov	r0, r7
   833ee:	e71b      	b.n	83228 <_realloc_r+0xfc>
   833f0:	68a3      	ldr	r3, [r4, #8]
   833f2:	2a24      	cmp	r2, #36	; 0x24
   833f4:	6083      	str	r3, [r0, #8]
   833f6:	68e3      	ldr	r3, [r4, #12]
   833f8:	60c3      	str	r3, [r0, #12]
   833fa:	d02b      	beq.n	83454 <_realloc_r+0x328>
   833fc:	f100 0310 	add.w	r3, r0, #16
   83400:	f104 0210 	add.w	r2, r4, #16
   83404:	e74a      	b.n	8329c <_realloc_r+0x170>
   83406:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8340a:	46a0      	mov	r8, r4
   8340c:	f022 0203 	bic.w	r2, r2, #3
   83410:	4415      	add	r5, r2
   83412:	e6f9      	b.n	83208 <_realloc_r+0xdc>
   83414:	4621      	mov	r1, r4
   83416:	4640      	mov	r0, r8
   83418:	4675      	mov	r5, lr
   8341a:	4657      	mov	r7, sl
   8341c:	f7ff fe1c 	bl	83058 <memmove>
   83420:	f8da 3004 	ldr.w	r3, [sl, #4]
   83424:	e6f0      	b.n	83208 <_realloc_r+0xdc>
   83426:	4642      	mov	r2, r8
   83428:	e76e      	b.n	83308 <_realloc_r+0x1dc>
   8342a:	4621      	mov	r1, r4
   8342c:	4640      	mov	r0, r8
   8342e:	461d      	mov	r5, r3
   83430:	4657      	mov	r7, sl
   83432:	f7ff fe11 	bl	83058 <memmove>
   83436:	f8da 3004 	ldr.w	r3, [sl, #4]
   8343a:	e6e5      	b.n	83208 <_realloc_r+0xdc>
   8343c:	68a3      	ldr	r3, [r4, #8]
   8343e:	2a24      	cmp	r2, #36	; 0x24
   83440:	f8ca 3010 	str.w	r3, [sl, #16]
   83444:	68e3      	ldr	r3, [r4, #12]
   83446:	f8ca 3014 	str.w	r3, [sl, #20]
   8344a:	d018      	beq.n	8347e <_realloc_r+0x352>
   8344c:	3410      	adds	r4, #16
   8344e:	f10a 0318 	add.w	r3, sl, #24
   83452:	e770      	b.n	83336 <_realloc_r+0x20a>
   83454:	6922      	ldr	r2, [r4, #16]
   83456:	f100 0318 	add.w	r3, r0, #24
   8345a:	6102      	str	r2, [r0, #16]
   8345c:	6961      	ldr	r1, [r4, #20]
   8345e:	f104 0218 	add.w	r2, r4, #24
   83462:	6141      	str	r1, [r0, #20]
   83464:	e71a      	b.n	8329c <_realloc_r+0x170>
   83466:	68a1      	ldr	r1, [r4, #8]
   83468:	2a24      	cmp	r2, #36	; 0x24
   8346a:	f8ca 1010 	str.w	r1, [sl, #16]
   8346e:	68e1      	ldr	r1, [r4, #12]
   83470:	f8ca 1014 	str.w	r1, [sl, #20]
   83474:	d00f      	beq.n	83496 <_realloc_r+0x36a>
   83476:	3410      	adds	r4, #16
   83478:	f10a 0218 	add.w	r2, sl, #24
   8347c:	e744      	b.n	83308 <_realloc_r+0x1dc>
   8347e:	6922      	ldr	r2, [r4, #16]
   83480:	f10a 0320 	add.w	r3, sl, #32
   83484:	f8ca 2018 	str.w	r2, [sl, #24]
   83488:	6962      	ldr	r2, [r4, #20]
   8348a:	3418      	adds	r4, #24
   8348c:	f8ca 201c 	str.w	r2, [sl, #28]
   83490:	e751      	b.n	83336 <_realloc_r+0x20a>
   83492:	463b      	mov	r3, r7
   83494:	e791      	b.n	833ba <_realloc_r+0x28e>
   83496:	6921      	ldr	r1, [r4, #16]
   83498:	f10a 0220 	add.w	r2, sl, #32
   8349c:	f8ca 1018 	str.w	r1, [sl, #24]
   834a0:	6961      	ldr	r1, [r4, #20]
   834a2:	3418      	adds	r4, #24
   834a4:	f8ca 101c 	str.w	r1, [sl, #28]
   834a8:	e72e      	b.n	83308 <_realloc_r+0x1dc>
   834aa:	4621      	mov	r1, r4
   834ac:	4638      	mov	r0, r7
   834ae:	f8cd c004 	str.w	ip, [sp, #4]
   834b2:	f7ff fdd1 	bl	83058 <memmove>
   834b6:	f8dd c004 	ldr.w	ip, [sp, #4]
   834ba:	e784      	b.n	833c6 <_realloc_r+0x29a>
   834bc:	68a3      	ldr	r3, [r4, #8]
   834be:	2a24      	cmp	r2, #36	; 0x24
   834c0:	f8ca 3010 	str.w	r3, [sl, #16]
   834c4:	68e3      	ldr	r3, [r4, #12]
   834c6:	f8ca 3014 	str.w	r3, [sl, #20]
   834ca:	d003      	beq.n	834d4 <_realloc_r+0x3a8>
   834cc:	3410      	adds	r4, #16
   834ce:	f10a 0318 	add.w	r3, sl, #24
   834d2:	e772      	b.n	833ba <_realloc_r+0x28e>
   834d4:	6922      	ldr	r2, [r4, #16]
   834d6:	f10a 0320 	add.w	r3, sl, #32
   834da:	f8ca 2018 	str.w	r2, [sl, #24]
   834de:	6962      	ldr	r2, [r4, #20]
   834e0:	3418      	adds	r4, #24
   834e2:	f8ca 201c 	str.w	r2, [sl, #28]
   834e6:	e768      	b.n	833ba <_realloc_r+0x28e>
   834e8:	20070590 	.word	0x20070590

000834ec <_sbrk_r>:
   834ec:	b538      	push	{r3, r4, r5, lr}
   834ee:	4c07      	ldr	r4, [pc, #28]	; (8350c <_sbrk_r+0x20>)
   834f0:	2300      	movs	r3, #0
   834f2:	4605      	mov	r5, r0
   834f4:	4608      	mov	r0, r1
   834f6:	6023      	str	r3, [r4, #0]
   834f8:	f7fd fcd4 	bl	80ea4 <_sbrk>
   834fc:	1c43      	adds	r3, r0, #1
   834fe:	d000      	beq.n	83502 <_sbrk_r+0x16>
   83500:	bd38      	pop	{r3, r4, r5, pc}
   83502:	6823      	ldr	r3, [r4, #0]
   83504:	2b00      	cmp	r3, #0
   83506:	d0fb      	beq.n	83500 <_sbrk_r+0x14>
   83508:	602b      	str	r3, [r5, #0]
   8350a:	bd38      	pop	{r3, r4, r5, pc}
   8350c:	20070b6c 	.word	0x20070b6c

00083510 <__sread>:
   83510:	b510      	push	{r4, lr}
   83512:	460c      	mov	r4, r1
   83514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83518:	f000 f9c2 	bl	838a0 <_read_r>
   8351c:	2800      	cmp	r0, #0
   8351e:	db03      	blt.n	83528 <__sread+0x18>
   83520:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83522:	4403      	add	r3, r0
   83524:	6523      	str	r3, [r4, #80]	; 0x50
   83526:	bd10      	pop	{r4, pc}
   83528:	89a3      	ldrh	r3, [r4, #12]
   8352a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8352e:	81a3      	strh	r3, [r4, #12]
   83530:	bd10      	pop	{r4, pc}
   83532:	bf00      	nop

00083534 <__swrite>:
   83534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83538:	460c      	mov	r4, r1
   8353a:	8989      	ldrh	r1, [r1, #12]
   8353c:	461d      	mov	r5, r3
   8353e:	05cb      	lsls	r3, r1, #23
   83540:	4616      	mov	r6, r2
   83542:	4607      	mov	r7, r0
   83544:	d506      	bpl.n	83554 <__swrite+0x20>
   83546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8354a:	2200      	movs	r2, #0
   8354c:	2302      	movs	r3, #2
   8354e:	f000 f993 	bl	83878 <_lseek_r>
   83552:	89a1      	ldrh	r1, [r4, #12]
   83554:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83558:	81a1      	strh	r1, [r4, #12]
   8355a:	4638      	mov	r0, r7
   8355c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83560:	4632      	mov	r2, r6
   83562:	462b      	mov	r3, r5
   83564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83568:	f000 b89e 	b.w	836a8 <_write_r>

0008356c <__sseek>:
   8356c:	b510      	push	{r4, lr}
   8356e:	460c      	mov	r4, r1
   83570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83574:	f000 f980 	bl	83878 <_lseek_r>
   83578:	89a3      	ldrh	r3, [r4, #12]
   8357a:	1c42      	adds	r2, r0, #1
   8357c:	bf0e      	itee	eq
   8357e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83586:	6520      	strne	r0, [r4, #80]	; 0x50
   83588:	81a3      	strh	r3, [r4, #12]
   8358a:	bd10      	pop	{r4, pc}

0008358c <__sclose>:
   8358c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83590:	f000 b8f2 	b.w	83778 <_close_r>

00083594 <__swbuf_r>:
   83594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83596:	460d      	mov	r5, r1
   83598:	4614      	mov	r4, r2
   8359a:	4607      	mov	r7, r0
   8359c:	b110      	cbz	r0, 835a4 <__swbuf_r+0x10>
   8359e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   835a0:	2b00      	cmp	r3, #0
   835a2:	d048      	beq.n	83636 <__swbuf_r+0xa2>
   835a4:	89a2      	ldrh	r2, [r4, #12]
   835a6:	69a0      	ldr	r0, [r4, #24]
   835a8:	b293      	uxth	r3, r2
   835aa:	60a0      	str	r0, [r4, #8]
   835ac:	0718      	lsls	r0, r3, #28
   835ae:	d538      	bpl.n	83622 <__swbuf_r+0x8e>
   835b0:	6926      	ldr	r6, [r4, #16]
   835b2:	2e00      	cmp	r6, #0
   835b4:	d035      	beq.n	83622 <__swbuf_r+0x8e>
   835b6:	0499      	lsls	r1, r3, #18
   835b8:	b2ed      	uxtb	r5, r5
   835ba:	d515      	bpl.n	835e8 <__swbuf_r+0x54>
   835bc:	6823      	ldr	r3, [r4, #0]
   835be:	6962      	ldr	r2, [r4, #20]
   835c0:	1b9e      	subs	r6, r3, r6
   835c2:	4296      	cmp	r6, r2
   835c4:	da1c      	bge.n	83600 <__swbuf_r+0x6c>
   835c6:	3601      	adds	r6, #1
   835c8:	68a2      	ldr	r2, [r4, #8]
   835ca:	1c59      	adds	r1, r3, #1
   835cc:	3a01      	subs	r2, #1
   835ce:	60a2      	str	r2, [r4, #8]
   835d0:	6021      	str	r1, [r4, #0]
   835d2:	701d      	strb	r5, [r3, #0]
   835d4:	6963      	ldr	r3, [r4, #20]
   835d6:	42b3      	cmp	r3, r6
   835d8:	d01a      	beq.n	83610 <__swbuf_r+0x7c>
   835da:	89a3      	ldrh	r3, [r4, #12]
   835dc:	07db      	lsls	r3, r3, #31
   835de:	d501      	bpl.n	835e4 <__swbuf_r+0x50>
   835e0:	2d0a      	cmp	r5, #10
   835e2:	d015      	beq.n	83610 <__swbuf_r+0x7c>
   835e4:	4628      	mov	r0, r5
   835e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   835e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   835ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   835ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   835f2:	6663      	str	r3, [r4, #100]	; 0x64
   835f4:	6823      	ldr	r3, [r4, #0]
   835f6:	81a2      	strh	r2, [r4, #12]
   835f8:	6962      	ldr	r2, [r4, #20]
   835fa:	1b9e      	subs	r6, r3, r6
   835fc:	4296      	cmp	r6, r2
   835fe:	dbe2      	blt.n	835c6 <__swbuf_r+0x32>
   83600:	4638      	mov	r0, r7
   83602:	4621      	mov	r1, r4
   83604:	f7fe fd6e 	bl	820e4 <_fflush_r>
   83608:	b940      	cbnz	r0, 8361c <__swbuf_r+0x88>
   8360a:	6823      	ldr	r3, [r4, #0]
   8360c:	2601      	movs	r6, #1
   8360e:	e7db      	b.n	835c8 <__swbuf_r+0x34>
   83610:	4638      	mov	r0, r7
   83612:	4621      	mov	r1, r4
   83614:	f7fe fd66 	bl	820e4 <_fflush_r>
   83618:	2800      	cmp	r0, #0
   8361a:	d0e3      	beq.n	835e4 <__swbuf_r+0x50>
   8361c:	f04f 30ff 	mov.w	r0, #4294967295
   83620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83622:	4638      	mov	r0, r7
   83624:	4621      	mov	r1, r4
   83626:	f7fe fc47 	bl	81eb8 <__swsetup_r>
   8362a:	2800      	cmp	r0, #0
   8362c:	d1f6      	bne.n	8361c <__swbuf_r+0x88>
   8362e:	89a2      	ldrh	r2, [r4, #12]
   83630:	6926      	ldr	r6, [r4, #16]
   83632:	b293      	uxth	r3, r2
   83634:	e7bf      	b.n	835b6 <__swbuf_r+0x22>
   83636:	f7fe fd71 	bl	8211c <__sinit>
   8363a:	e7b3      	b.n	835a4 <__swbuf_r+0x10>

0008363c <_wcrtomb_r>:
   8363c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83640:	461e      	mov	r6, r3
   83642:	b086      	sub	sp, #24
   83644:	460c      	mov	r4, r1
   83646:	4605      	mov	r5, r0
   83648:	4617      	mov	r7, r2
   8364a:	4b0f      	ldr	r3, [pc, #60]	; (83688 <_wcrtomb_r+0x4c>)
   8364c:	b191      	cbz	r1, 83674 <_wcrtomb_r+0x38>
   8364e:	f8d3 8000 	ldr.w	r8, [r3]
   83652:	f7ff f923 	bl	8289c <__locale_charset>
   83656:	9600      	str	r6, [sp, #0]
   83658:	4603      	mov	r3, r0
   8365a:	4621      	mov	r1, r4
   8365c:	463a      	mov	r2, r7
   8365e:	4628      	mov	r0, r5
   83660:	47c0      	blx	r8
   83662:	1c43      	adds	r3, r0, #1
   83664:	d103      	bne.n	8366e <_wcrtomb_r+0x32>
   83666:	2200      	movs	r2, #0
   83668:	238a      	movs	r3, #138	; 0x8a
   8366a:	6032      	str	r2, [r6, #0]
   8366c:	602b      	str	r3, [r5, #0]
   8366e:	b006      	add	sp, #24
   83670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83674:	681f      	ldr	r7, [r3, #0]
   83676:	f7ff f911 	bl	8289c <__locale_charset>
   8367a:	9600      	str	r6, [sp, #0]
   8367c:	4603      	mov	r3, r0
   8367e:	4622      	mov	r2, r4
   83680:	4628      	mov	r0, r5
   83682:	a903      	add	r1, sp, #12
   83684:	47b8      	blx	r7
   83686:	e7ec      	b.n	83662 <_wcrtomb_r+0x26>
   83688:	200709a0 	.word	0x200709a0

0008368c <__ascii_wctomb>:
   8368c:	b121      	cbz	r1, 83698 <__ascii_wctomb+0xc>
   8368e:	2aff      	cmp	r2, #255	; 0xff
   83690:	d804      	bhi.n	8369c <__ascii_wctomb+0x10>
   83692:	700a      	strb	r2, [r1, #0]
   83694:	2001      	movs	r0, #1
   83696:	4770      	bx	lr
   83698:	4608      	mov	r0, r1
   8369a:	4770      	bx	lr
   8369c:	238a      	movs	r3, #138	; 0x8a
   8369e:	6003      	str	r3, [r0, #0]
   836a0:	f04f 30ff 	mov.w	r0, #4294967295
   836a4:	4770      	bx	lr
   836a6:	bf00      	nop

000836a8 <_write_r>:
   836a8:	b570      	push	{r4, r5, r6, lr}
   836aa:	4c08      	ldr	r4, [pc, #32]	; (836cc <_write_r+0x24>)
   836ac:	4606      	mov	r6, r0
   836ae:	2500      	movs	r5, #0
   836b0:	4608      	mov	r0, r1
   836b2:	4611      	mov	r1, r2
   836b4:	461a      	mov	r2, r3
   836b6:	6025      	str	r5, [r4, #0]
   836b8:	f7fc fe04 	bl	802c4 <_write>
   836bc:	1c43      	adds	r3, r0, #1
   836be:	d000      	beq.n	836c2 <_write_r+0x1a>
   836c0:	bd70      	pop	{r4, r5, r6, pc}
   836c2:	6823      	ldr	r3, [r4, #0]
   836c4:	2b00      	cmp	r3, #0
   836c6:	d0fb      	beq.n	836c0 <_write_r+0x18>
   836c8:	6033      	str	r3, [r6, #0]
   836ca:	bd70      	pop	{r4, r5, r6, pc}
   836cc:	20070b6c 	.word	0x20070b6c

000836d0 <__register_exitproc>:
   836d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   836d2:	4c27      	ldr	r4, [pc, #156]	; (83770 <__register_exitproc+0xa0>)
   836d4:	b085      	sub	sp, #20
   836d6:	6826      	ldr	r6, [r4, #0]
   836d8:	4607      	mov	r7, r0
   836da:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   836de:	2c00      	cmp	r4, #0
   836e0:	d040      	beq.n	83764 <__register_exitproc+0x94>
   836e2:	6865      	ldr	r5, [r4, #4]
   836e4:	2d1f      	cmp	r5, #31
   836e6:	dd1e      	ble.n	83726 <__register_exitproc+0x56>
   836e8:	4822      	ldr	r0, [pc, #136]	; (83774 <__register_exitproc+0xa4>)
   836ea:	b918      	cbnz	r0, 836f4 <__register_exitproc+0x24>
   836ec:	f04f 30ff 	mov.w	r0, #4294967295
   836f0:	b005      	add	sp, #20
   836f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   836f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   836f8:	9103      	str	r1, [sp, #12]
   836fa:	9202      	str	r2, [sp, #8]
   836fc:	9301      	str	r3, [sp, #4]
   836fe:	f7ff f947 	bl	82990 <malloc>
   83702:	9903      	ldr	r1, [sp, #12]
   83704:	4604      	mov	r4, r0
   83706:	9a02      	ldr	r2, [sp, #8]
   83708:	9b01      	ldr	r3, [sp, #4]
   8370a:	2800      	cmp	r0, #0
   8370c:	d0ee      	beq.n	836ec <__register_exitproc+0x1c>
   8370e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83712:	2000      	movs	r0, #0
   83714:	6025      	str	r5, [r4, #0]
   83716:	6060      	str	r0, [r4, #4]
   83718:	4605      	mov	r5, r0
   8371a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8371e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83722:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83726:	b93f      	cbnz	r7, 83738 <__register_exitproc+0x68>
   83728:	1c6b      	adds	r3, r5, #1
   8372a:	2000      	movs	r0, #0
   8372c:	3502      	adds	r5, #2
   8372e:	6063      	str	r3, [r4, #4]
   83730:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83734:	b005      	add	sp, #20
   83736:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83738:	2601      	movs	r6, #1
   8373a:	40ae      	lsls	r6, r5
   8373c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83740:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83744:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83748:	2f02      	cmp	r7, #2
   8374a:	ea42 0206 	orr.w	r2, r2, r6
   8374e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83752:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83756:	d1e7      	bne.n	83728 <__register_exitproc+0x58>
   83758:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8375c:	431e      	orrs	r6, r3
   8375e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83762:	e7e1      	b.n	83728 <__register_exitproc+0x58>
   83764:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83768:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8376c:	e7b9      	b.n	836e2 <__register_exitproc+0x12>
   8376e:	bf00      	nop
   83770:	00083ec4 	.word	0x00083ec4
   83774:	00082991 	.word	0x00082991

00083778 <_close_r>:
   83778:	b538      	push	{r3, r4, r5, lr}
   8377a:	4c07      	ldr	r4, [pc, #28]	; (83798 <_close_r+0x20>)
   8377c:	2300      	movs	r3, #0
   8377e:	4605      	mov	r5, r0
   83780:	4608      	mov	r0, r1
   83782:	6023      	str	r3, [r4, #0]
   83784:	f7fd fba8 	bl	80ed8 <_close>
   83788:	1c43      	adds	r3, r0, #1
   8378a:	d000      	beq.n	8378e <_close_r+0x16>
   8378c:	bd38      	pop	{r3, r4, r5, pc}
   8378e:	6823      	ldr	r3, [r4, #0]
   83790:	2b00      	cmp	r3, #0
   83792:	d0fb      	beq.n	8378c <_close_r+0x14>
   83794:	602b      	str	r3, [r5, #0]
   83796:	bd38      	pop	{r3, r4, r5, pc}
   83798:	20070b6c 	.word	0x20070b6c

0008379c <_fclose_r>:
   8379c:	b570      	push	{r4, r5, r6, lr}
   8379e:	460c      	mov	r4, r1
   837a0:	4605      	mov	r5, r0
   837a2:	b131      	cbz	r1, 837b2 <_fclose_r+0x16>
   837a4:	b110      	cbz	r0, 837ac <_fclose_r+0x10>
   837a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   837a8:	2b00      	cmp	r3, #0
   837aa:	d02f      	beq.n	8380c <_fclose_r+0x70>
   837ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   837b0:	b90b      	cbnz	r3, 837b6 <_fclose_r+0x1a>
   837b2:	2000      	movs	r0, #0
   837b4:	bd70      	pop	{r4, r5, r6, pc}
   837b6:	4628      	mov	r0, r5
   837b8:	4621      	mov	r1, r4
   837ba:	f7fe fc93 	bl	820e4 <_fflush_r>
   837be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   837c0:	4606      	mov	r6, r0
   837c2:	b133      	cbz	r3, 837d2 <_fclose_r+0x36>
   837c4:	4628      	mov	r0, r5
   837c6:	69e1      	ldr	r1, [r4, #28]
   837c8:	4798      	blx	r3
   837ca:	2800      	cmp	r0, #0
   837cc:	bfb8      	it	lt
   837ce:	f04f 36ff 	movlt.w	r6, #4294967295
   837d2:	89a3      	ldrh	r3, [r4, #12]
   837d4:	061b      	lsls	r3, r3, #24
   837d6:	d41c      	bmi.n	83812 <_fclose_r+0x76>
   837d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   837da:	b141      	cbz	r1, 837ee <_fclose_r+0x52>
   837dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   837e0:	4299      	cmp	r1, r3
   837e2:	d002      	beq.n	837ea <_fclose_r+0x4e>
   837e4:	4628      	mov	r0, r5
   837e6:	f7fe fddd 	bl	823a4 <_free_r>
   837ea:	2300      	movs	r3, #0
   837ec:	6323      	str	r3, [r4, #48]	; 0x30
   837ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
   837f0:	b121      	cbz	r1, 837fc <_fclose_r+0x60>
   837f2:	4628      	mov	r0, r5
   837f4:	f7fe fdd6 	bl	823a4 <_free_r>
   837f8:	2300      	movs	r3, #0
   837fa:	6463      	str	r3, [r4, #68]	; 0x44
   837fc:	f7fe fd08 	bl	82210 <__sfp_lock_acquire>
   83800:	2300      	movs	r3, #0
   83802:	81a3      	strh	r3, [r4, #12]
   83804:	f7fe fd06 	bl	82214 <__sfp_lock_release>
   83808:	4630      	mov	r0, r6
   8380a:	bd70      	pop	{r4, r5, r6, pc}
   8380c:	f7fe fc86 	bl	8211c <__sinit>
   83810:	e7cc      	b.n	837ac <_fclose_r+0x10>
   83812:	4628      	mov	r0, r5
   83814:	6921      	ldr	r1, [r4, #16]
   83816:	f7fe fdc5 	bl	823a4 <_free_r>
   8381a:	e7dd      	b.n	837d8 <_fclose_r+0x3c>

0008381c <fclose>:
   8381c:	4b02      	ldr	r3, [pc, #8]	; (83828 <fclose+0xc>)
   8381e:	4601      	mov	r1, r0
   83820:	6818      	ldr	r0, [r3, #0]
   83822:	f7ff bfbb 	b.w	8379c <_fclose_r>
   83826:	bf00      	nop
   83828:	20070568 	.word	0x20070568

0008382c <_fstat_r>:
   8382c:	b538      	push	{r3, r4, r5, lr}
   8382e:	4c08      	ldr	r4, [pc, #32]	; (83850 <_fstat_r+0x24>)
   83830:	2300      	movs	r3, #0
   83832:	4605      	mov	r5, r0
   83834:	4608      	mov	r0, r1
   83836:	4611      	mov	r1, r2
   83838:	6023      	str	r3, [r4, #0]
   8383a:	f7fd fb51 	bl	80ee0 <_fstat>
   8383e:	1c43      	adds	r3, r0, #1
   83840:	d000      	beq.n	83844 <_fstat_r+0x18>
   83842:	bd38      	pop	{r3, r4, r5, pc}
   83844:	6823      	ldr	r3, [r4, #0]
   83846:	2b00      	cmp	r3, #0
   83848:	d0fb      	beq.n	83842 <_fstat_r+0x16>
   8384a:	602b      	str	r3, [r5, #0]
   8384c:	bd38      	pop	{r3, r4, r5, pc}
   8384e:	bf00      	nop
   83850:	20070b6c 	.word	0x20070b6c

00083854 <_isatty_r>:
   83854:	b538      	push	{r3, r4, r5, lr}
   83856:	4c07      	ldr	r4, [pc, #28]	; (83874 <_isatty_r+0x20>)
   83858:	2300      	movs	r3, #0
   8385a:	4605      	mov	r5, r0
   8385c:	4608      	mov	r0, r1
   8385e:	6023      	str	r3, [r4, #0]
   83860:	f7fd fb44 	bl	80eec <_isatty>
   83864:	1c43      	adds	r3, r0, #1
   83866:	d000      	beq.n	8386a <_isatty_r+0x16>
   83868:	bd38      	pop	{r3, r4, r5, pc}
   8386a:	6823      	ldr	r3, [r4, #0]
   8386c:	2b00      	cmp	r3, #0
   8386e:	d0fb      	beq.n	83868 <_isatty_r+0x14>
   83870:	602b      	str	r3, [r5, #0]
   83872:	bd38      	pop	{r3, r4, r5, pc}
   83874:	20070b6c 	.word	0x20070b6c

00083878 <_lseek_r>:
   83878:	b570      	push	{r4, r5, r6, lr}
   8387a:	4c08      	ldr	r4, [pc, #32]	; (8389c <_lseek_r+0x24>)
   8387c:	4606      	mov	r6, r0
   8387e:	2500      	movs	r5, #0
   83880:	4608      	mov	r0, r1
   83882:	4611      	mov	r1, r2
   83884:	461a      	mov	r2, r3
   83886:	6025      	str	r5, [r4, #0]
   83888:	f7fd fb32 	bl	80ef0 <_lseek>
   8388c:	1c43      	adds	r3, r0, #1
   8388e:	d000      	beq.n	83892 <_lseek_r+0x1a>
   83890:	bd70      	pop	{r4, r5, r6, pc}
   83892:	6823      	ldr	r3, [r4, #0]
   83894:	2b00      	cmp	r3, #0
   83896:	d0fb      	beq.n	83890 <_lseek_r+0x18>
   83898:	6033      	str	r3, [r6, #0]
   8389a:	bd70      	pop	{r4, r5, r6, pc}
   8389c:	20070b6c 	.word	0x20070b6c

000838a0 <_read_r>:
   838a0:	b570      	push	{r4, r5, r6, lr}
   838a2:	4c08      	ldr	r4, [pc, #32]	; (838c4 <_read_r+0x24>)
   838a4:	4606      	mov	r6, r0
   838a6:	2500      	movs	r5, #0
   838a8:	4608      	mov	r0, r1
   838aa:	4611      	mov	r1, r2
   838ac:	461a      	mov	r2, r3
   838ae:	6025      	str	r5, [r4, #0]
   838b0:	f7fc fce8 	bl	80284 <_read>
   838b4:	1c43      	adds	r3, r0, #1
   838b6:	d000      	beq.n	838ba <_read_r+0x1a>
   838b8:	bd70      	pop	{r4, r5, r6, pc}
   838ba:	6823      	ldr	r3, [r4, #0]
   838bc:	2b00      	cmp	r3, #0
   838be:	d0fb      	beq.n	838b8 <_read_r+0x18>
   838c0:	6033      	str	r3, [r6, #0]
   838c2:	bd70      	pop	{r4, r5, r6, pc}
   838c4:	20070b6c 	.word	0x20070b6c

000838c8 <__aeabi_uldivmod>:
   838c8:	b94b      	cbnz	r3, 838de <__aeabi_uldivmod+0x16>
   838ca:	b942      	cbnz	r2, 838de <__aeabi_uldivmod+0x16>
   838cc:	2900      	cmp	r1, #0
   838ce:	bf08      	it	eq
   838d0:	2800      	cmpeq	r0, #0
   838d2:	d002      	beq.n	838da <__aeabi_uldivmod+0x12>
   838d4:	f04f 31ff 	mov.w	r1, #4294967295
   838d8:	4608      	mov	r0, r1
   838da:	f000 b83b 	b.w	83954 <__aeabi_idiv0>
   838de:	b082      	sub	sp, #8
   838e0:	46ec      	mov	ip, sp
   838e2:	e92d 5000 	stmdb	sp!, {ip, lr}
   838e6:	f000 f81d 	bl	83924 <__gnu_uldivmod_helper>
   838ea:	f8dd e004 	ldr.w	lr, [sp, #4]
   838ee:	b002      	add	sp, #8
   838f0:	bc0c      	pop	{r2, r3}
   838f2:	4770      	bx	lr

000838f4 <__gnu_ldivmod_helper>:
   838f4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   838f8:	9e08      	ldr	r6, [sp, #32]
   838fa:	4614      	mov	r4, r2
   838fc:	461d      	mov	r5, r3
   838fe:	4680      	mov	r8, r0
   83900:	4689      	mov	r9, r1
   83902:	f000 f829 	bl	83958 <__divdi3>
   83906:	fb04 f301 	mul.w	r3, r4, r1
   8390a:	fba4 ab00 	umull	sl, fp, r4, r0
   8390e:	fb00 3205 	mla	r2, r0, r5, r3
   83912:	4493      	add	fp, r2
   83914:	ebb8 080a 	subs.w	r8, r8, sl
   83918:	eb69 090b 	sbc.w	r9, r9, fp
   8391c:	e9c6 8900 	strd	r8, r9, [r6]
   83920:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083924 <__gnu_uldivmod_helper>:
   83924:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83928:	9e08      	ldr	r6, [sp, #32]
   8392a:	4614      	mov	r4, r2
   8392c:	461d      	mov	r5, r3
   8392e:	4680      	mov	r8, r0
   83930:	4689      	mov	r9, r1
   83932:	f000 f961 	bl	83bf8 <__udivdi3>
   83936:	fb00 f505 	mul.w	r5, r0, r5
   8393a:	fba0 ab04 	umull	sl, fp, r0, r4
   8393e:	fb04 5401 	mla	r4, r4, r1, r5
   83942:	44a3      	add	fp, r4
   83944:	ebb8 080a 	subs.w	r8, r8, sl
   83948:	eb69 090b 	sbc.w	r9, r9, fp
   8394c:	e9c6 8900 	strd	r8, r9, [r6]
   83950:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083954 <__aeabi_idiv0>:
   83954:	4770      	bx	lr
   83956:	bf00      	nop

00083958 <__divdi3>:
   83958:	2900      	cmp	r1, #0
   8395a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8395e:	f2c0 80a1 	blt.w	83aa4 <__divdi3+0x14c>
   83962:	2400      	movs	r4, #0
   83964:	2b00      	cmp	r3, #0
   83966:	f2c0 8098 	blt.w	83a9a <__divdi3+0x142>
   8396a:	4615      	mov	r5, r2
   8396c:	4606      	mov	r6, r0
   8396e:	460f      	mov	r7, r1
   83970:	2b00      	cmp	r3, #0
   83972:	d13f      	bne.n	839f4 <__divdi3+0x9c>
   83974:	428a      	cmp	r2, r1
   83976:	d958      	bls.n	83a2a <__divdi3+0xd2>
   83978:	fab2 f382 	clz	r3, r2
   8397c:	b14b      	cbz	r3, 83992 <__divdi3+0x3a>
   8397e:	f1c3 0220 	rsb	r2, r3, #32
   83982:	fa01 f703 	lsl.w	r7, r1, r3
   83986:	fa20 f202 	lsr.w	r2, r0, r2
   8398a:	409d      	lsls	r5, r3
   8398c:	fa00 f603 	lsl.w	r6, r0, r3
   83990:	4317      	orrs	r7, r2
   83992:	0c29      	lsrs	r1, r5, #16
   83994:	fbb7 f2f1 	udiv	r2, r7, r1
   83998:	fb01 7712 	mls	r7, r1, r2, r7
   8399c:	b2a8      	uxth	r0, r5
   8399e:	fb00 f302 	mul.w	r3, r0, r2
   839a2:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   839a6:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   839aa:	42bb      	cmp	r3, r7
   839ac:	d909      	bls.n	839c2 <__divdi3+0x6a>
   839ae:	197f      	adds	r7, r7, r5
   839b0:	f102 3cff 	add.w	ip, r2, #4294967295
   839b4:	f080 8105 	bcs.w	83bc2 <__divdi3+0x26a>
   839b8:	42bb      	cmp	r3, r7
   839ba:	f240 8102 	bls.w	83bc2 <__divdi3+0x26a>
   839be:	3a02      	subs	r2, #2
   839c0:	442f      	add	r7, r5
   839c2:	1aff      	subs	r7, r7, r3
   839c4:	fbb7 f3f1 	udiv	r3, r7, r1
   839c8:	fb01 7113 	mls	r1, r1, r3, r7
   839cc:	fb00 f003 	mul.w	r0, r0, r3
   839d0:	b2b6      	uxth	r6, r6
   839d2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   839d6:	4288      	cmp	r0, r1
   839d8:	d908      	bls.n	839ec <__divdi3+0x94>
   839da:	1949      	adds	r1, r1, r5
   839dc:	f103 37ff 	add.w	r7, r3, #4294967295
   839e0:	f080 80f1 	bcs.w	83bc6 <__divdi3+0x26e>
   839e4:	4288      	cmp	r0, r1
   839e6:	f240 80ee 	bls.w	83bc6 <__divdi3+0x26e>
   839ea:	3b02      	subs	r3, #2
   839ec:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   839f0:	2300      	movs	r3, #0
   839f2:	e003      	b.n	839fc <__divdi3+0xa4>
   839f4:	428b      	cmp	r3, r1
   839f6:	d90a      	bls.n	83a0e <__divdi3+0xb6>
   839f8:	2300      	movs	r3, #0
   839fa:	461a      	mov	r2, r3
   839fc:	4610      	mov	r0, r2
   839fe:	4619      	mov	r1, r3
   83a00:	b114      	cbz	r4, 83a08 <__divdi3+0xb0>
   83a02:	4240      	negs	r0, r0
   83a04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83a08:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83a0c:	4770      	bx	lr
   83a0e:	fab3 f883 	clz	r8, r3
   83a12:	f1b8 0f00 	cmp.w	r8, #0
   83a16:	f040 8088 	bne.w	83b2a <__divdi3+0x1d2>
   83a1a:	428b      	cmp	r3, r1
   83a1c:	d302      	bcc.n	83a24 <__divdi3+0xcc>
   83a1e:	4282      	cmp	r2, r0
   83a20:	f200 80e2 	bhi.w	83be8 <__divdi3+0x290>
   83a24:	2300      	movs	r3, #0
   83a26:	2201      	movs	r2, #1
   83a28:	e7e8      	b.n	839fc <__divdi3+0xa4>
   83a2a:	b912      	cbnz	r2, 83a32 <__divdi3+0xda>
   83a2c:	2301      	movs	r3, #1
   83a2e:	fbb3 f5f2 	udiv	r5, r3, r2
   83a32:	fab5 f285 	clz	r2, r5
   83a36:	2a00      	cmp	r2, #0
   83a38:	d13a      	bne.n	83ab0 <__divdi3+0x158>
   83a3a:	1b7f      	subs	r7, r7, r5
   83a3c:	0c28      	lsrs	r0, r5, #16
   83a3e:	fa1f fc85 	uxth.w	ip, r5
   83a42:	2301      	movs	r3, #1
   83a44:	fbb7 f1f0 	udiv	r1, r7, r0
   83a48:	fb00 7711 	mls	r7, r0, r1, r7
   83a4c:	fb0c f201 	mul.w	r2, ip, r1
   83a50:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83a54:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83a58:	42ba      	cmp	r2, r7
   83a5a:	d907      	bls.n	83a6c <__divdi3+0x114>
   83a5c:	197f      	adds	r7, r7, r5
   83a5e:	f101 38ff 	add.w	r8, r1, #4294967295
   83a62:	d202      	bcs.n	83a6a <__divdi3+0x112>
   83a64:	42ba      	cmp	r2, r7
   83a66:	f200 80c4 	bhi.w	83bf2 <__divdi3+0x29a>
   83a6a:	4641      	mov	r1, r8
   83a6c:	1abf      	subs	r7, r7, r2
   83a6e:	fbb7 f2f0 	udiv	r2, r7, r0
   83a72:	fb00 7012 	mls	r0, r0, r2, r7
   83a76:	fb0c fc02 	mul.w	ip, ip, r2
   83a7a:	b2b6      	uxth	r6, r6
   83a7c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83a80:	4584      	cmp	ip, r0
   83a82:	d907      	bls.n	83a94 <__divdi3+0x13c>
   83a84:	1940      	adds	r0, r0, r5
   83a86:	f102 37ff 	add.w	r7, r2, #4294967295
   83a8a:	d202      	bcs.n	83a92 <__divdi3+0x13a>
   83a8c:	4584      	cmp	ip, r0
   83a8e:	f200 80ae 	bhi.w	83bee <__divdi3+0x296>
   83a92:	463a      	mov	r2, r7
   83a94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83a98:	e7b0      	b.n	839fc <__divdi3+0xa4>
   83a9a:	43e4      	mvns	r4, r4
   83a9c:	4252      	negs	r2, r2
   83a9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83aa2:	e762      	b.n	8396a <__divdi3+0x12>
   83aa4:	4240      	negs	r0, r0
   83aa6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83aaa:	f04f 34ff 	mov.w	r4, #4294967295
   83aae:	e759      	b.n	83964 <__divdi3+0xc>
   83ab0:	4095      	lsls	r5, r2
   83ab2:	f1c2 0920 	rsb	r9, r2, #32
   83ab6:	fa27 f109 	lsr.w	r1, r7, r9
   83aba:	fa26 f909 	lsr.w	r9, r6, r9
   83abe:	4097      	lsls	r7, r2
   83ac0:	0c28      	lsrs	r0, r5, #16
   83ac2:	fbb1 f8f0 	udiv	r8, r1, r0
   83ac6:	fb00 1118 	mls	r1, r0, r8, r1
   83aca:	fa1f fc85 	uxth.w	ip, r5
   83ace:	fb0c f308 	mul.w	r3, ip, r8
   83ad2:	ea49 0907 	orr.w	r9, r9, r7
   83ad6:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83ada:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83ade:	428b      	cmp	r3, r1
   83ae0:	fa06 f602 	lsl.w	r6, r6, r2
   83ae4:	d908      	bls.n	83af8 <__divdi3+0x1a0>
   83ae6:	1949      	adds	r1, r1, r5
   83ae8:	f108 32ff 	add.w	r2, r8, #4294967295
   83aec:	d27a      	bcs.n	83be4 <__divdi3+0x28c>
   83aee:	428b      	cmp	r3, r1
   83af0:	d978      	bls.n	83be4 <__divdi3+0x28c>
   83af2:	f1a8 0802 	sub.w	r8, r8, #2
   83af6:	4429      	add	r1, r5
   83af8:	1ac9      	subs	r1, r1, r3
   83afa:	fbb1 f3f0 	udiv	r3, r1, r0
   83afe:	fb00 1713 	mls	r7, r0, r3, r1
   83b02:	fb0c f203 	mul.w	r2, ip, r3
   83b06:	fa1f f989 	uxth.w	r9, r9
   83b0a:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83b0e:	42ba      	cmp	r2, r7
   83b10:	d907      	bls.n	83b22 <__divdi3+0x1ca>
   83b12:	197f      	adds	r7, r7, r5
   83b14:	f103 31ff 	add.w	r1, r3, #4294967295
   83b18:	d260      	bcs.n	83bdc <__divdi3+0x284>
   83b1a:	42ba      	cmp	r2, r7
   83b1c:	d95e      	bls.n	83bdc <__divdi3+0x284>
   83b1e:	3b02      	subs	r3, #2
   83b20:	442f      	add	r7, r5
   83b22:	1abf      	subs	r7, r7, r2
   83b24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83b28:	e78c      	b.n	83a44 <__divdi3+0xec>
   83b2a:	f1c8 0220 	rsb	r2, r8, #32
   83b2e:	fa25 f102 	lsr.w	r1, r5, r2
   83b32:	fa03 fc08 	lsl.w	ip, r3, r8
   83b36:	fa27 f302 	lsr.w	r3, r7, r2
   83b3a:	fa20 f202 	lsr.w	r2, r0, r2
   83b3e:	fa07 f708 	lsl.w	r7, r7, r8
   83b42:	ea41 0c0c 	orr.w	ip, r1, ip
   83b46:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83b4a:	fbb3 f1f9 	udiv	r1, r3, r9
   83b4e:	fb09 3311 	mls	r3, r9, r1, r3
   83b52:	fa1f fa8c 	uxth.w	sl, ip
   83b56:	fb0a fb01 	mul.w	fp, sl, r1
   83b5a:	4317      	orrs	r7, r2
   83b5c:	0c3a      	lsrs	r2, r7, #16
   83b5e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83b62:	459b      	cmp	fp, r3
   83b64:	fa05 f008 	lsl.w	r0, r5, r8
   83b68:	d908      	bls.n	83b7c <__divdi3+0x224>
   83b6a:	eb13 030c 	adds.w	r3, r3, ip
   83b6e:	f101 32ff 	add.w	r2, r1, #4294967295
   83b72:	d235      	bcs.n	83be0 <__divdi3+0x288>
   83b74:	459b      	cmp	fp, r3
   83b76:	d933      	bls.n	83be0 <__divdi3+0x288>
   83b78:	3902      	subs	r1, #2
   83b7a:	4463      	add	r3, ip
   83b7c:	ebcb 0303 	rsb	r3, fp, r3
   83b80:	fbb3 f2f9 	udiv	r2, r3, r9
   83b84:	fb09 3312 	mls	r3, r9, r2, r3
   83b88:	fb0a fa02 	mul.w	sl, sl, r2
   83b8c:	b2bf      	uxth	r7, r7
   83b8e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83b92:	45ba      	cmp	sl, r7
   83b94:	d908      	bls.n	83ba8 <__divdi3+0x250>
   83b96:	eb17 070c 	adds.w	r7, r7, ip
   83b9a:	f102 33ff 	add.w	r3, r2, #4294967295
   83b9e:	d21b      	bcs.n	83bd8 <__divdi3+0x280>
   83ba0:	45ba      	cmp	sl, r7
   83ba2:	d919      	bls.n	83bd8 <__divdi3+0x280>
   83ba4:	3a02      	subs	r2, #2
   83ba6:	4467      	add	r7, ip
   83ba8:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83bac:	fba5 0100 	umull	r0, r1, r5, r0
   83bb0:	ebca 0707 	rsb	r7, sl, r7
   83bb4:	428f      	cmp	r7, r1
   83bb6:	f04f 0300 	mov.w	r3, #0
   83bba:	d30a      	bcc.n	83bd2 <__divdi3+0x27a>
   83bbc:	d005      	beq.n	83bca <__divdi3+0x272>
   83bbe:	462a      	mov	r2, r5
   83bc0:	e71c      	b.n	839fc <__divdi3+0xa4>
   83bc2:	4662      	mov	r2, ip
   83bc4:	e6fd      	b.n	839c2 <__divdi3+0x6a>
   83bc6:	463b      	mov	r3, r7
   83bc8:	e710      	b.n	839ec <__divdi3+0x94>
   83bca:	fa06 f608 	lsl.w	r6, r6, r8
   83bce:	4286      	cmp	r6, r0
   83bd0:	d2f5      	bcs.n	83bbe <__divdi3+0x266>
   83bd2:	1e6a      	subs	r2, r5, #1
   83bd4:	2300      	movs	r3, #0
   83bd6:	e711      	b.n	839fc <__divdi3+0xa4>
   83bd8:	461a      	mov	r2, r3
   83bda:	e7e5      	b.n	83ba8 <__divdi3+0x250>
   83bdc:	460b      	mov	r3, r1
   83bde:	e7a0      	b.n	83b22 <__divdi3+0x1ca>
   83be0:	4611      	mov	r1, r2
   83be2:	e7cb      	b.n	83b7c <__divdi3+0x224>
   83be4:	4690      	mov	r8, r2
   83be6:	e787      	b.n	83af8 <__divdi3+0x1a0>
   83be8:	4643      	mov	r3, r8
   83bea:	4642      	mov	r2, r8
   83bec:	e706      	b.n	839fc <__divdi3+0xa4>
   83bee:	3a02      	subs	r2, #2
   83bf0:	e750      	b.n	83a94 <__divdi3+0x13c>
   83bf2:	3902      	subs	r1, #2
   83bf4:	442f      	add	r7, r5
   83bf6:	e739      	b.n	83a6c <__divdi3+0x114>

00083bf8 <__udivdi3>:
   83bf8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83bfc:	4614      	mov	r4, r2
   83bfe:	4605      	mov	r5, r0
   83c00:	460e      	mov	r6, r1
   83c02:	2b00      	cmp	r3, #0
   83c04:	d143      	bne.n	83c8e <__udivdi3+0x96>
   83c06:	428a      	cmp	r2, r1
   83c08:	d953      	bls.n	83cb2 <__udivdi3+0xba>
   83c0a:	fab2 f782 	clz	r7, r2
   83c0e:	b157      	cbz	r7, 83c26 <__udivdi3+0x2e>
   83c10:	f1c7 0620 	rsb	r6, r7, #32
   83c14:	fa20 f606 	lsr.w	r6, r0, r6
   83c18:	fa01 f307 	lsl.w	r3, r1, r7
   83c1c:	fa02 f407 	lsl.w	r4, r2, r7
   83c20:	fa00 f507 	lsl.w	r5, r0, r7
   83c24:	431e      	orrs	r6, r3
   83c26:	0c21      	lsrs	r1, r4, #16
   83c28:	fbb6 f2f1 	udiv	r2, r6, r1
   83c2c:	fb01 6612 	mls	r6, r1, r2, r6
   83c30:	b2a0      	uxth	r0, r4
   83c32:	fb00 f302 	mul.w	r3, r0, r2
   83c36:	0c2f      	lsrs	r7, r5, #16
   83c38:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83c3c:	42b3      	cmp	r3, r6
   83c3e:	d909      	bls.n	83c54 <__udivdi3+0x5c>
   83c40:	1936      	adds	r6, r6, r4
   83c42:	f102 37ff 	add.w	r7, r2, #4294967295
   83c46:	f080 80fd 	bcs.w	83e44 <__udivdi3+0x24c>
   83c4a:	42b3      	cmp	r3, r6
   83c4c:	f240 80fa 	bls.w	83e44 <__udivdi3+0x24c>
   83c50:	3a02      	subs	r2, #2
   83c52:	4426      	add	r6, r4
   83c54:	1af6      	subs	r6, r6, r3
   83c56:	fbb6 f3f1 	udiv	r3, r6, r1
   83c5a:	fb01 6113 	mls	r1, r1, r3, r6
   83c5e:	fb00 f003 	mul.w	r0, r0, r3
   83c62:	b2ad      	uxth	r5, r5
   83c64:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83c68:	4288      	cmp	r0, r1
   83c6a:	d908      	bls.n	83c7e <__udivdi3+0x86>
   83c6c:	1909      	adds	r1, r1, r4
   83c6e:	f103 36ff 	add.w	r6, r3, #4294967295
   83c72:	f080 80e9 	bcs.w	83e48 <__udivdi3+0x250>
   83c76:	4288      	cmp	r0, r1
   83c78:	f240 80e6 	bls.w	83e48 <__udivdi3+0x250>
   83c7c:	3b02      	subs	r3, #2
   83c7e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83c82:	2300      	movs	r3, #0
   83c84:	4610      	mov	r0, r2
   83c86:	4619      	mov	r1, r3
   83c88:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83c8c:	4770      	bx	lr
   83c8e:	428b      	cmp	r3, r1
   83c90:	d84c      	bhi.n	83d2c <__udivdi3+0x134>
   83c92:	fab3 f683 	clz	r6, r3
   83c96:	2e00      	cmp	r6, #0
   83c98:	d14f      	bne.n	83d3a <__udivdi3+0x142>
   83c9a:	428b      	cmp	r3, r1
   83c9c:	d302      	bcc.n	83ca4 <__udivdi3+0xac>
   83c9e:	4282      	cmp	r2, r0
   83ca0:	f200 80dd 	bhi.w	83e5e <__udivdi3+0x266>
   83ca4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ca8:	2300      	movs	r3, #0
   83caa:	2201      	movs	r2, #1
   83cac:	4610      	mov	r0, r2
   83cae:	4619      	mov	r1, r3
   83cb0:	4770      	bx	lr
   83cb2:	b912      	cbnz	r2, 83cba <__udivdi3+0xc2>
   83cb4:	2401      	movs	r4, #1
   83cb6:	fbb4 f4f2 	udiv	r4, r4, r2
   83cba:	fab4 f284 	clz	r2, r4
   83cbe:	2a00      	cmp	r2, #0
   83cc0:	f040 8082 	bne.w	83dc8 <__udivdi3+0x1d0>
   83cc4:	1b09      	subs	r1, r1, r4
   83cc6:	0c26      	lsrs	r6, r4, #16
   83cc8:	b2a7      	uxth	r7, r4
   83cca:	2301      	movs	r3, #1
   83ccc:	fbb1 f0f6 	udiv	r0, r1, r6
   83cd0:	fb06 1110 	mls	r1, r6, r0, r1
   83cd4:	fb07 f200 	mul.w	r2, r7, r0
   83cd8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83cdc:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83ce0:	428a      	cmp	r2, r1
   83ce2:	d907      	bls.n	83cf4 <__udivdi3+0xfc>
   83ce4:	1909      	adds	r1, r1, r4
   83ce6:	f100 3cff 	add.w	ip, r0, #4294967295
   83cea:	d202      	bcs.n	83cf2 <__udivdi3+0xfa>
   83cec:	428a      	cmp	r2, r1
   83cee:	f200 80c8 	bhi.w	83e82 <__udivdi3+0x28a>
   83cf2:	4660      	mov	r0, ip
   83cf4:	1a89      	subs	r1, r1, r2
   83cf6:	fbb1 f2f6 	udiv	r2, r1, r6
   83cfa:	fb06 1112 	mls	r1, r6, r2, r1
   83cfe:	fb07 f702 	mul.w	r7, r7, r2
   83d02:	b2ad      	uxth	r5, r5
   83d04:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83d08:	42af      	cmp	r7, r5
   83d0a:	d908      	bls.n	83d1e <__udivdi3+0x126>
   83d0c:	192c      	adds	r4, r5, r4
   83d0e:	f102 31ff 	add.w	r1, r2, #4294967295
   83d12:	f080 809b 	bcs.w	83e4c <__udivdi3+0x254>
   83d16:	42a7      	cmp	r7, r4
   83d18:	f240 8098 	bls.w	83e4c <__udivdi3+0x254>
   83d1c:	3a02      	subs	r2, #2
   83d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83d22:	4610      	mov	r0, r2
   83d24:	4619      	mov	r1, r3
   83d26:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d2a:	4770      	bx	lr
   83d2c:	2300      	movs	r3, #0
   83d2e:	461a      	mov	r2, r3
   83d30:	4610      	mov	r0, r2
   83d32:	4619      	mov	r1, r3
   83d34:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d38:	4770      	bx	lr
   83d3a:	f1c6 0520 	rsb	r5, r6, #32
   83d3e:	fa22 f705 	lsr.w	r7, r2, r5
   83d42:	fa03 f406 	lsl.w	r4, r3, r6
   83d46:	fa21 f305 	lsr.w	r3, r1, r5
   83d4a:	fa01 fb06 	lsl.w	fp, r1, r6
   83d4e:	fa20 f505 	lsr.w	r5, r0, r5
   83d52:	433c      	orrs	r4, r7
   83d54:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83d58:	fbb3 fcf8 	udiv	ip, r3, r8
   83d5c:	fb08 331c 	mls	r3, r8, ip, r3
   83d60:	fa1f f984 	uxth.w	r9, r4
   83d64:	fb09 fa0c 	mul.w	sl, r9, ip
   83d68:	ea45 0b0b 	orr.w	fp, r5, fp
   83d6c:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83d70:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83d74:	459a      	cmp	sl, r3
   83d76:	fa02 f206 	lsl.w	r2, r2, r6
   83d7a:	d904      	bls.n	83d86 <__udivdi3+0x18e>
   83d7c:	191b      	adds	r3, r3, r4
   83d7e:	f10c 35ff 	add.w	r5, ip, #4294967295
   83d82:	d36f      	bcc.n	83e64 <__udivdi3+0x26c>
   83d84:	46ac      	mov	ip, r5
   83d86:	ebca 0303 	rsb	r3, sl, r3
   83d8a:	fbb3 f5f8 	udiv	r5, r3, r8
   83d8e:	fb08 3315 	mls	r3, r8, r5, r3
   83d92:	fb09 f905 	mul.w	r9, r9, r5
   83d96:	fa1f fb8b 	uxth.w	fp, fp
   83d9a:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83d9e:	45b9      	cmp	r9, r7
   83da0:	d904      	bls.n	83dac <__udivdi3+0x1b4>
   83da2:	193f      	adds	r7, r7, r4
   83da4:	f105 33ff 	add.w	r3, r5, #4294967295
   83da8:	d362      	bcc.n	83e70 <__udivdi3+0x278>
   83daa:	461d      	mov	r5, r3
   83dac:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83db0:	fbac 2302 	umull	r2, r3, ip, r2
   83db4:	ebc9 0707 	rsb	r7, r9, r7
   83db8:	429f      	cmp	r7, r3
   83dba:	f04f 0500 	mov.w	r5, #0
   83dbe:	d34a      	bcc.n	83e56 <__udivdi3+0x25e>
   83dc0:	d046      	beq.n	83e50 <__udivdi3+0x258>
   83dc2:	4662      	mov	r2, ip
   83dc4:	462b      	mov	r3, r5
   83dc6:	e75d      	b.n	83c84 <__udivdi3+0x8c>
   83dc8:	4094      	lsls	r4, r2
   83dca:	f1c2 0920 	rsb	r9, r2, #32
   83dce:	fa21 fc09 	lsr.w	ip, r1, r9
   83dd2:	4091      	lsls	r1, r2
   83dd4:	fa20 f909 	lsr.w	r9, r0, r9
   83dd8:	0c26      	lsrs	r6, r4, #16
   83dda:	fbbc f8f6 	udiv	r8, ip, r6
   83dde:	fb06 cc18 	mls	ip, r6, r8, ip
   83de2:	b2a7      	uxth	r7, r4
   83de4:	fb07 f308 	mul.w	r3, r7, r8
   83de8:	ea49 0901 	orr.w	r9, r9, r1
   83dec:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83df0:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83df4:	4563      	cmp	r3, ip
   83df6:	fa00 f502 	lsl.w	r5, r0, r2
   83dfa:	d909      	bls.n	83e10 <__udivdi3+0x218>
   83dfc:	eb1c 0c04 	adds.w	ip, ip, r4
   83e00:	f108 32ff 	add.w	r2, r8, #4294967295
   83e04:	d23b      	bcs.n	83e7e <__udivdi3+0x286>
   83e06:	4563      	cmp	r3, ip
   83e08:	d939      	bls.n	83e7e <__udivdi3+0x286>
   83e0a:	f1a8 0802 	sub.w	r8, r8, #2
   83e0e:	44a4      	add	ip, r4
   83e10:	ebc3 0c0c 	rsb	ip, r3, ip
   83e14:	fbbc f3f6 	udiv	r3, ip, r6
   83e18:	fb06 c113 	mls	r1, r6, r3, ip
   83e1c:	fb07 f203 	mul.w	r2, r7, r3
   83e20:	fa1f f989 	uxth.w	r9, r9
   83e24:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83e28:	428a      	cmp	r2, r1
   83e2a:	d907      	bls.n	83e3c <__udivdi3+0x244>
   83e2c:	1909      	adds	r1, r1, r4
   83e2e:	f103 30ff 	add.w	r0, r3, #4294967295
   83e32:	d222      	bcs.n	83e7a <__udivdi3+0x282>
   83e34:	428a      	cmp	r2, r1
   83e36:	d920      	bls.n	83e7a <__udivdi3+0x282>
   83e38:	3b02      	subs	r3, #2
   83e3a:	4421      	add	r1, r4
   83e3c:	1a89      	subs	r1, r1, r2
   83e3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83e42:	e743      	b.n	83ccc <__udivdi3+0xd4>
   83e44:	463a      	mov	r2, r7
   83e46:	e705      	b.n	83c54 <__udivdi3+0x5c>
   83e48:	4633      	mov	r3, r6
   83e4a:	e718      	b.n	83c7e <__udivdi3+0x86>
   83e4c:	460a      	mov	r2, r1
   83e4e:	e766      	b.n	83d1e <__udivdi3+0x126>
   83e50:	40b0      	lsls	r0, r6
   83e52:	4290      	cmp	r0, r2
   83e54:	d2b5      	bcs.n	83dc2 <__udivdi3+0x1ca>
   83e56:	f10c 32ff 	add.w	r2, ip, #4294967295
   83e5a:	2300      	movs	r3, #0
   83e5c:	e712      	b.n	83c84 <__udivdi3+0x8c>
   83e5e:	4633      	mov	r3, r6
   83e60:	4632      	mov	r2, r6
   83e62:	e70f      	b.n	83c84 <__udivdi3+0x8c>
   83e64:	459a      	cmp	sl, r3
   83e66:	d98d      	bls.n	83d84 <__udivdi3+0x18c>
   83e68:	f1ac 0c02 	sub.w	ip, ip, #2
   83e6c:	4423      	add	r3, r4
   83e6e:	e78a      	b.n	83d86 <__udivdi3+0x18e>
   83e70:	45b9      	cmp	r9, r7
   83e72:	d99a      	bls.n	83daa <__udivdi3+0x1b2>
   83e74:	3d02      	subs	r5, #2
   83e76:	4427      	add	r7, r4
   83e78:	e798      	b.n	83dac <__udivdi3+0x1b4>
   83e7a:	4603      	mov	r3, r0
   83e7c:	e7de      	b.n	83e3c <__udivdi3+0x244>
   83e7e:	4690      	mov	r8, r2
   83e80:	e7c6      	b.n	83e10 <__udivdi3+0x218>
   83e82:	3802      	subs	r0, #2
   83e84:	4421      	add	r1, r4
   83e86:	e735      	b.n	83cf4 <__udivdi3+0xfc>
   83e88:	72617453 	.word	0x72617453
   83e8c:	00726174 	.word	0x00726174
   83e90:	000a6425 	.word	0x000a6425
   83e94:	00000001 	.word	0x00000001
   83e98:	00000002 	.word	0x00000002
   83e9c:	00000004 	.word	0x00000004
   83ea0:	00000008 	.word	0x00000008
   83ea4:	00000010 	.word	0x00000010
   83ea8:	00000020 	.word	0x00000020
   83eac:	00000040 	.word	0x00000040
   83eb0:	00000080 	.word	0x00000080
   83eb4:	00000100 	.word	0x00000100
   83eb8:	00000200 	.word	0x00000200
   83ebc:	00000400 	.word	0x00000400
   83ec0:	00000043 	.word	0x00000043

00083ec4 <_global_impure_ptr>:
   83ec4:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   83ed4:	46454443 00000000 33323130 37363534     CDEF....01234567
   83ee4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83ef4:	0000296c                                l)..

00083ef8 <zeroes.6721>:
   83ef8:	30303030 30303030 30303030 30303030     0000000000000000

00083f08 <blanks.6720>:
   83f08:	20202020 20202020 20202020 20202020                     

00083f18 <_init>:
   83f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f1a:	bf00      	nop
   83f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83f1e:	bc08      	pop	{r3}
   83f20:	469e      	mov	lr, r3
   83f22:	4770      	bx	lr

00083f24 <__init_array_start>:
   83f24:	00081f7d 	.word	0x00081f7d

00083f28 <__frame_dummy_init_array_entry>:
   83f28:	00080119                                ....

00083f2c <_fini>:
   83f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f2e:	bf00      	nop
   83f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83f32:	bc08      	pop	{r3}
   83f34:	469e      	mov	lr, r3
   83f36:	4770      	bx	lr

00083f38 <__fini_array_start>:
   83f38:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <c1Loop>:
20070138:	00010101                                         .

20070139 <c2Loop>:
20070139:	00000101                                         .

2007013a <g_interrupt_enabled>:
2007013a:	09000001                                         ..

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00083ec0 00000000 00000000 00000000     .>..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	0008368d                                .6..
