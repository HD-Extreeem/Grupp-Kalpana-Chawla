
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004008  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084008  00084008  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00084010  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001cc  200709a4  000849b4  000109a4  2**2
                  ALLOC
  4 .stack        00002000  20070b70  00084b80  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000f9d2  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002985  00000000  00000000  000203fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000511f  00000000  00000000  00022d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b78  00000000  00000000  00027e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a30  00000000  00000000  00028a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000190f0  00000000  00000000  00029446  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011d85  00000000  00000000  00042536  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000614ec  00000000  00000000  000542bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000022ac  00000000  00000000  000b57a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b70 	.word	0x20072b70
   80004:	00080ec5 	.word	0x00080ec5
   80008:	00080ec1 	.word	0x00080ec1
   8000c:	00080ec1 	.word	0x00080ec1
   80010:	00080ec1 	.word	0x00080ec1
   80014:	00080ec1 	.word	0x00080ec1
   80018:	00080ec1 	.word	0x00080ec1
	...
   8002c:	00080ec1 	.word	0x00080ec1
   80030:	00080ec1 	.word	0x00080ec1
   80034:	00000000 	.word	0x00000000
   80038:	00080ec1 	.word	0x00080ec1
   8003c:	00080ec1 	.word	0x00080ec1
   80040:	00080ec1 	.word	0x00080ec1
   80044:	00080ec1 	.word	0x00080ec1
   80048:	00080ec1 	.word	0x00080ec1
   8004c:	00080ec1 	.word	0x00080ec1
   80050:	00080ec1 	.word	0x00080ec1
   80054:	00080ec1 	.word	0x00080ec1
   80058:	00080ec1 	.word	0x00080ec1
   8005c:	00080ec1 	.word	0x00080ec1
   80060:	00080ec1 	.word	0x00080ec1
   80064:	00080ec1 	.word	0x00080ec1
   80068:	00000000 	.word	0x00000000
   8006c:	00080c41 	.word	0x00080c41
   80070:	00080c55 	.word	0x00080c55
   80074:	00080c69 	.word	0x00080c69
   80078:	00080c7d 	.word	0x00080c7d
	...
   80084:	00080395 	.word	0x00080395
   80088:	00080ec1 	.word	0x00080ec1
   8008c:	00080ec1 	.word	0x00080ec1
   80090:	00080ec1 	.word	0x00080ec1
   80094:	00080ec1 	.word	0x00080ec1
   80098:	00080ec1 	.word	0x00080ec1
   8009c:	00080ec1 	.word	0x00080ec1
   800a0:	00080ec1 	.word	0x00080ec1
   800a4:	00000000 	.word	0x00000000
   800a8:	00080ec1 	.word	0x00080ec1
   800ac:	00080ec1 	.word	0x00080ec1
   800b0:	00080ec1 	.word	0x00080ec1
   800b4:	00080ec1 	.word	0x00080ec1
   800b8:	00080ec1 	.word	0x00080ec1
   800bc:	00080ec1 	.word	0x00080ec1
   800c0:	00080ec1 	.word	0x00080ec1
   800c4:	00080ec1 	.word	0x00080ec1
   800c8:	00080ec1 	.word	0x00080ec1
   800cc:	00080ec1 	.word	0x00080ec1
   800d0:	00080ec1 	.word	0x00080ec1
   800d4:	00080ec1 	.word	0x00080ec1
   800d8:	00080ec1 	.word	0x00080ec1
   800dc:	00080ec1 	.word	0x00080ec1
   800e0:	00080ec1 	.word	0x00080ec1
   800e4:	00080ec1 	.word	0x00080ec1
   800e8:	00080ec1 	.word	0x00080ec1
   800ec:	00080ec1 	.word	0x00080ec1
   800f0:	00080ec1 	.word	0x00080ec1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	00084010 	.word	0x00084010

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084010 	.word	0x00084010
   8013c:	200709a8 	.word	0x200709a8
   80140:	00084010 	.word	0x00084010
   80144:	00000000 	.word	0x00000000

00080148 <main>:
// int e=0;
// double kp = 2;
// uint16_t speed = 1700;

int main(void)
{
   80148:	b508      	push	{r3, lr}
	/* Initialize the SAM system */
	SystemInit();
   8014a:	4b0f      	ldr	r3, [pc, #60]	; (80188 <main+0x40>)
   8014c:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   8014e:	4b0f      	ldr	r3, [pc, #60]	; (8018c <main+0x44>)
   80150:	4798      	blx	r3
	configureConsole();
   80152:	4b0f      	ldr	r3, [pc, #60]	; (80190 <main+0x48>)
   80154:	4798      	blx	r3
	configInterrupts();
   80156:	4b0f      	ldr	r3, [pc, #60]	; (80194 <main+0x4c>)
   80158:	4798      	blx	r3
	PWM_init();
   8015a:	4b0f      	ldr	r3, [pc, #60]	; (80198 <main+0x50>)
   8015c:	4798      	blx	r3
	printf("Startar");
   8015e:	480f      	ldr	r0, [pc, #60]	; (8019c <main+0x54>)
   80160:	4b0f      	ldr	r3, [pc, #60]	; (801a0 <main+0x58>)
   80162:	4798      	blx	r3
    delay_s(2);
   80164:	480f      	ldr	r0, [pc, #60]	; (801a4 <main+0x5c>)
   80166:	4b10      	ldr	r3, [pc, #64]	; (801a8 <main+0x60>)
   80168:	4798      	blx	r3
//     leftWheel(1500);

	while (1)
	{
		
		  rotation(30,100);
   8016a:	4e10      	ldr	r6, [pc, #64]	; (801ac <main+0x64>)
		  delay_s(3);
   8016c:	4d10      	ldr	r5, [pc, #64]	; (801b0 <main+0x68>)
   8016e:	4c0e      	ldr	r4, [pc, #56]	; (801a8 <main+0x60>)
//     leftWheel(1500);

	while (1)
	{
		
		  rotation(30,100);
   80170:	201e      	movs	r0, #30
   80172:	2164      	movs	r1, #100	; 0x64
   80174:	47b0      	blx	r6
		  delay_s(3);
   80176:	4628      	mov	r0, r5
   80178:	47a0      	blx	r4
		  rotation(30,100);
   8017a:	201e      	movs	r0, #30
   8017c:	2164      	movs	r1, #100	; 0x64
   8017e:	47b0      	blx	r6
		  delay_s(3);
   80180:	4628      	mov	r0, r5
   80182:	47a0      	blx	r4
   80184:	e7f4      	b.n	80170 <main+0x28>
   80186:	bf00      	nop
   80188:	2007000d 	.word	0x2007000d
   8018c:	000808c5 	.word	0x000808c5
   80190:	00080551 	.word	0x00080551
   80194:	00080621 	.word	0x00080621
   80198:	00080809 	.word	0x00080809
   8019c:	00083f58 	.word	0x00083f58
   801a0:	00081015 	.word	0x00081015
   801a4:	00b71b00 	.word	0x00b71b00
   801a8:	20070001 	.word	0x20070001
   801ac:	000806c9 	.word	0x000806c9
   801b0:	0112a880 	.word	0x0112a880

000801b4 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   801b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801b8:	b083      	sub	sp, #12
   801ba:	4605      	mov	r5, r0
	while (len) {
   801bc:	4690      	mov	r8, r2
   801be:	2a00      	cmp	r2, #0
   801c0:	d047      	beq.n	80252 <usart_serial_read_packet+0x9e>
   801c2:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801c4:	4f25      	ldr	r7, [pc, #148]	; (8025c <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   801c6:	4c26      	ldr	r4, [pc, #152]	; (80260 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801c8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80274 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   801cc:	f8df b094 	ldr.w	fp, [pc, #148]	; 80264 <usart_serial_read_packet+0xb0>
   801d0:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   801d4:	2300      	movs	r3, #0
   801d6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801d8:	4b22      	ldr	r3, [pc, #136]	; (80264 <usart_serial_read_packet+0xb0>)
   801da:	429d      	cmp	r5, r3
   801dc:	d106      	bne.n	801ec <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   801de:	4658      	mov	r0, fp
   801e0:	4649      	mov	r1, r9
   801e2:	4b21      	ldr	r3, [pc, #132]	; (80268 <usart_serial_read_packet+0xb4>)
   801e4:	4798      	blx	r3
   801e6:	2800      	cmp	r0, #0
   801e8:	d1f9      	bne.n	801de <usart_serial_read_packet+0x2a>
   801ea:	e019      	b.n	80220 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801ec:	4b1f      	ldr	r3, [pc, #124]	; (8026c <usart_serial_read_packet+0xb8>)
   801ee:	429d      	cmp	r5, r3
   801f0:	d109      	bne.n	80206 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   801f2:	4699      	mov	r9, r3
   801f4:	4648      	mov	r0, r9
   801f6:	a901      	add	r1, sp, #4
   801f8:	47a0      	blx	r4
   801fa:	2800      	cmp	r0, #0
   801fc:	d1fa      	bne.n	801f4 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   801fe:	9b01      	ldr	r3, [sp, #4]
   80200:	f806 3c01 	strb.w	r3, [r6, #-1]
   80204:	e017      	b.n	80236 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80206:	4b1a      	ldr	r3, [pc, #104]	; (80270 <usart_serial_read_packet+0xbc>)
   80208:	429d      	cmp	r5, r3
   8020a:	d109      	bne.n	80220 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   8020c:	4699      	mov	r9, r3
   8020e:	4648      	mov	r0, r9
   80210:	a901      	add	r1, sp, #4
   80212:	47a0      	blx	r4
   80214:	2800      	cmp	r0, #0
   80216:	d1fa      	bne.n	8020e <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80218:	9b01      	ldr	r3, [sp, #4]
   8021a:	f806 3c01 	strb.w	r3, [r6, #-1]
   8021e:	e014      	b.n	8024a <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80220:	4555      	cmp	r5, sl
   80222:	d108      	bne.n	80236 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80224:	4650      	mov	r0, sl
   80226:	a901      	add	r1, sp, #4
   80228:	47a0      	blx	r4
   8022a:	2800      	cmp	r0, #0
   8022c:	d1fa      	bne.n	80224 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   8022e:	9b01      	ldr	r3, [sp, #4]
   80230:	f806 3c01 	strb.w	r3, [r6, #-1]
   80234:	e009      	b.n	8024a <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80236:	42bd      	cmp	r5, r7
   80238:	d107      	bne.n	8024a <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   8023a:	4638      	mov	r0, r7
   8023c:	a901      	add	r1, sp, #4
   8023e:	47a0      	blx	r4
   80240:	2800      	cmp	r0, #0
   80242:	d1fa      	bne.n	8023a <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80244:	9b01      	ldr	r3, [sp, #4]
   80246:	f806 3c01 	strb.w	r3, [r6, #-1]
   8024a:	3601      	adds	r6, #1
   8024c:	f1b8 0801 	subs.w	r8, r8, #1
   80250:	d1be      	bne.n	801d0 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80252:	2000      	movs	r0, #0
   80254:	b003      	add	sp, #12
   80256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8025a:	bf00      	nop
   8025c:	400a4000 	.word	0x400a4000
   80260:	0008037d 	.word	0x0008037d
   80264:	400e0800 	.word	0x400e0800
   80268:	00080355 	.word	0x00080355
   8026c:	40098000 	.word	0x40098000
   80270:	4009c000 	.word	0x4009c000
   80274:	400a0000 	.word	0x400a0000

00080278 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8027c:	460c      	mov	r4, r1
   8027e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80280:	b960      	cbnz	r0, 8029c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80282:	2a00      	cmp	r2, #0
   80284:	dd0e      	ble.n	802a4 <_read+0x2c>
   80286:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80288:	4e09      	ldr	r6, [pc, #36]	; (802b0 <_read+0x38>)
   8028a:	4d0a      	ldr	r5, [pc, #40]	; (802b4 <_read+0x3c>)
   8028c:	6830      	ldr	r0, [r6, #0]
   8028e:	4621      	mov	r1, r4
   80290:	682b      	ldr	r3, [r5, #0]
   80292:	4798      	blx	r3
		ptr++;
   80294:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80296:	42bc      	cmp	r4, r7
   80298:	d1f8      	bne.n	8028c <_read+0x14>
   8029a:	e006      	b.n	802aa <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8029c:	f04f 30ff 	mov.w	r0, #4294967295
   802a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   802a4:	2000      	movs	r0, #0
   802a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   802aa:	4640      	mov	r0, r8
	}
	return nChars;
}
   802ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802b0:	20070b18 	.word	0x20070b18
   802b4:	20070b10 	.word	0x20070b10

000802b8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   802b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802bc:	460e      	mov	r6, r1
   802be:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   802c0:	3801      	subs	r0, #1
   802c2:	2802      	cmp	r0, #2
   802c4:	d80f      	bhi.n	802e6 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   802c6:	b192      	cbz	r2, 802ee <_write+0x36>
   802c8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802ca:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80308 <_write+0x50>
   802ce:	4f0d      	ldr	r7, [pc, #52]	; (80304 <_write+0x4c>)
   802d0:	f8d8 0000 	ldr.w	r0, [r8]
   802d4:	5d31      	ldrb	r1, [r6, r4]
   802d6:	683b      	ldr	r3, [r7, #0]
   802d8:	4798      	blx	r3
   802da:	2800      	cmp	r0, #0
   802dc:	db0a      	blt.n	802f4 <_write+0x3c>
			return -1;
		}
		++nChars;
   802de:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802e0:	42a5      	cmp	r5, r4
   802e2:	d1f5      	bne.n	802d0 <_write+0x18>
   802e4:	e00a      	b.n	802fc <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   802e6:	f04f 30ff 	mov.w	r0, #4294967295
   802ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   802ee:	2000      	movs	r0, #0
   802f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   802f4:	f04f 30ff 	mov.w	r0, #4294967295
   802f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   802fc:	4620      	mov	r0, r4
	}
	return nChars;
}
   802fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80302:	bf00      	nop
   80304:	20070b14 	.word	0x20070b14
   80308:	20070b18 	.word	0x20070b18

0008030c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8030c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8030e:	23ac      	movs	r3, #172	; 0xac
   80310:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80312:	680a      	ldr	r2, [r1, #0]
   80314:	684b      	ldr	r3, [r1, #4]
   80316:	fbb2 f3f3 	udiv	r3, r2, r3
   8031a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8031c:	1e5c      	subs	r4, r3, #1
   8031e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80322:	4294      	cmp	r4, r2
   80324:	d80a      	bhi.n	8033c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80326:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80328:	688b      	ldr	r3, [r1, #8]
   8032a:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8032c:	f240 2302 	movw	r3, #514	; 0x202
   80330:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80334:	2350      	movs	r3, #80	; 0x50
   80336:	6003      	str	r3, [r0, #0]

	return 0;
   80338:	2000      	movs	r0, #0
   8033a:	e000      	b.n	8033e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   8033c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8033e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80342:	4770      	bx	lr

00080344 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80344:	6943      	ldr	r3, [r0, #20]
   80346:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8034a:	bf1a      	itte	ne
   8034c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8034e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80350:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80352:	4770      	bx	lr

00080354 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80354:	6943      	ldr	r3, [r0, #20]
   80356:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8035a:	bf1d      	ittte	ne
   8035c:	6983      	ldrne	r3, [r0, #24]
   8035e:	700b      	strbne	r3, [r1, #0]
	return 0;
   80360:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80362:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80364:	4770      	bx	lr
   80366:	bf00      	nop

00080368 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80368:	6943      	ldr	r3, [r0, #20]
   8036a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8036e:	bf1d      	ittte	ne
   80370:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80374:	61c1      	strne	r1, [r0, #28]
	return 0;
   80376:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80378:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8037a:	4770      	bx	lr

0008037c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8037c:	6943      	ldr	r3, [r0, #20]
   8037e:	f013 0f01 	tst.w	r3, #1
   80382:	d005      	beq.n	80390 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80384:	6983      	ldr	r3, [r0, #24]
   80386:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8038a:	600b      	str	r3, [r1, #0]

	return 0;
   8038c:	2000      	movs	r0, #0
   8038e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80390:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80392:	4770      	bx	lr

00080394 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80394:	b500      	push	{lr}
   80396:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80398:	4813      	ldr	r0, [pc, #76]	; (803e8 <USART0_Handler+0x54>)
   8039a:	f10d 0107 	add.w	r1, sp, #7
   8039e:	2201      	movs	r2, #1
   803a0:	4b12      	ldr	r3, [pc, #72]	; (803ec <USART0_Handler+0x58>)
   803a2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   803a4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   803a6:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   803aa:	2200      	movs	r2, #0
   803ac:	4b10      	ldr	r3, [pc, #64]	; (803f0 <USART0_Handler+0x5c>)
   803ae:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   803b0:	4b10      	ldr	r3, [pc, #64]	; (803f4 <USART0_Handler+0x60>)
   803b2:	781a      	ldrb	r2, [r3, #0]
   803b4:	3201      	adds	r2, #1
   803b6:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   803b8:	4b0f      	ldr	r3, [pc, #60]	; (803f8 <USART0_Handler+0x64>)
   803ba:	781b      	ldrb	r3, [r3, #0]
   803bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803c0:	4a0e      	ldr	r2, [pc, #56]	; (803fc <USART0_Handler+0x68>)
   803c2:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   803c4:	2b9b      	cmp	r3, #155	; 0x9b
   803c6:	d103      	bne.n	803d0 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   803c8:	2200      	movs	r2, #0
   803ca:	4b0b      	ldr	r3, [pc, #44]	; (803f8 <USART0_Handler+0x64>)
   803cc:	701a      	strb	r2, [r3, #0]
   803ce:	e002      	b.n	803d6 <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   803d0:	3301      	adds	r3, #1
   803d2:	4a09      	ldr	r2, [pc, #36]	; (803f8 <USART0_Handler+0x64>)
   803d4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   803d6:	2201      	movs	r2, #1
   803d8:	4b05      	ldr	r3, [pc, #20]	; (803f0 <USART0_Handler+0x5c>)
   803da:	701a      	strb	r2, [r3, #0]
   803dc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   803e0:	b662      	cpsie	i
}
   803e2:	b003      	add	sp, #12
   803e4:	f85d fb04 	ldr.w	pc, [sp], #4
   803e8:	40098000 	.word	0x40098000
   803ec:	000801b5 	.word	0x000801b5
   803f0:	20070138 	.word	0x20070138
   803f4:	20070a5d 	.word	0x20070a5d
   803f8:	20070a5c 	.word	0x20070a5c
   803fc:	200709c0 	.word	0x200709c0

00080400 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80400:	b5f0      	push	{r4, r5, r6, r7, lr}
   80402:	b083      	sub	sp, #12
   80404:	4604      	mov	r4, r0
   80406:	460d      	mov	r5, r1
	uint32_t val = 0;
   80408:	2300      	movs	r3, #0
   8040a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8040c:	4b1f      	ldr	r3, [pc, #124]	; (8048c <usart_serial_getchar+0x8c>)
   8040e:	4298      	cmp	r0, r3
   80410:	d107      	bne.n	80422 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80412:	461f      	mov	r7, r3
   80414:	4e1e      	ldr	r6, [pc, #120]	; (80490 <usart_serial_getchar+0x90>)
   80416:	4638      	mov	r0, r7
   80418:	4629      	mov	r1, r5
   8041a:	47b0      	blx	r6
   8041c:	2800      	cmp	r0, #0
   8041e:	d1fa      	bne.n	80416 <usart_serial_getchar+0x16>
   80420:	e019      	b.n	80456 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80422:	4b1c      	ldr	r3, [pc, #112]	; (80494 <usart_serial_getchar+0x94>)
   80424:	4298      	cmp	r0, r3
   80426:	d109      	bne.n	8043c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80428:	461f      	mov	r7, r3
   8042a:	4e1b      	ldr	r6, [pc, #108]	; (80498 <usart_serial_getchar+0x98>)
   8042c:	4638      	mov	r0, r7
   8042e:	a901      	add	r1, sp, #4
   80430:	47b0      	blx	r6
   80432:	2800      	cmp	r0, #0
   80434:	d1fa      	bne.n	8042c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80436:	9b01      	ldr	r3, [sp, #4]
   80438:	702b      	strb	r3, [r5, #0]
   8043a:	e019      	b.n	80470 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8043c:	4b17      	ldr	r3, [pc, #92]	; (8049c <usart_serial_getchar+0x9c>)
   8043e:	4298      	cmp	r0, r3
   80440:	d109      	bne.n	80456 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80442:	461e      	mov	r6, r3
   80444:	4c14      	ldr	r4, [pc, #80]	; (80498 <usart_serial_getchar+0x98>)
   80446:	4630      	mov	r0, r6
   80448:	a901      	add	r1, sp, #4
   8044a:	47a0      	blx	r4
   8044c:	2800      	cmp	r0, #0
   8044e:	d1fa      	bne.n	80446 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80450:	9b01      	ldr	r3, [sp, #4]
   80452:	702b      	strb	r3, [r5, #0]
   80454:	e018      	b.n	80488 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80456:	4b12      	ldr	r3, [pc, #72]	; (804a0 <usart_serial_getchar+0xa0>)
   80458:	429c      	cmp	r4, r3
   8045a:	d109      	bne.n	80470 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8045c:	461e      	mov	r6, r3
   8045e:	4c0e      	ldr	r4, [pc, #56]	; (80498 <usart_serial_getchar+0x98>)
   80460:	4630      	mov	r0, r6
   80462:	a901      	add	r1, sp, #4
   80464:	47a0      	blx	r4
   80466:	2800      	cmp	r0, #0
   80468:	d1fa      	bne.n	80460 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8046a:	9b01      	ldr	r3, [sp, #4]
   8046c:	702b      	strb	r3, [r5, #0]
   8046e:	e00b      	b.n	80488 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80470:	4b0c      	ldr	r3, [pc, #48]	; (804a4 <usart_serial_getchar+0xa4>)
   80472:	429c      	cmp	r4, r3
   80474:	d108      	bne.n	80488 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80476:	461e      	mov	r6, r3
   80478:	4c07      	ldr	r4, [pc, #28]	; (80498 <usart_serial_getchar+0x98>)
   8047a:	4630      	mov	r0, r6
   8047c:	a901      	add	r1, sp, #4
   8047e:	47a0      	blx	r4
   80480:	2800      	cmp	r0, #0
   80482:	d1fa      	bne.n	8047a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80484:	9b01      	ldr	r3, [sp, #4]
   80486:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80488:	b003      	add	sp, #12
   8048a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8048c:	400e0800 	.word	0x400e0800
   80490:	00080355 	.word	0x00080355
   80494:	40098000 	.word	0x40098000
   80498:	0008037d 	.word	0x0008037d
   8049c:	4009c000 	.word	0x4009c000
   804a0:	400a0000 	.word	0x400a0000
   804a4:	400a4000 	.word	0x400a4000

000804a8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   804a8:	b570      	push	{r4, r5, r6, lr}
   804aa:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   804ac:	4b21      	ldr	r3, [pc, #132]	; (80534 <usart_serial_putchar+0x8c>)
   804ae:	4298      	cmp	r0, r3
   804b0:	d107      	bne.n	804c2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   804b2:	461e      	mov	r6, r3
   804b4:	4d20      	ldr	r5, [pc, #128]	; (80538 <usart_serial_putchar+0x90>)
   804b6:	4630      	mov	r0, r6
   804b8:	4621      	mov	r1, r4
   804ba:	47a8      	blx	r5
   804bc:	2800      	cmp	r0, #0
   804be:	d1fa      	bne.n	804b6 <usart_serial_putchar+0xe>
   804c0:	e02b      	b.n	8051a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   804c2:	4b1e      	ldr	r3, [pc, #120]	; (8053c <usart_serial_putchar+0x94>)
   804c4:	4298      	cmp	r0, r3
   804c6:	d107      	bne.n	804d8 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   804c8:	461e      	mov	r6, r3
   804ca:	4d1d      	ldr	r5, [pc, #116]	; (80540 <usart_serial_putchar+0x98>)
   804cc:	4630      	mov	r0, r6
   804ce:	4621      	mov	r1, r4
   804d0:	47a8      	blx	r5
   804d2:	2800      	cmp	r0, #0
   804d4:	d1fa      	bne.n	804cc <usart_serial_putchar+0x24>
   804d6:	e022      	b.n	8051e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   804d8:	4b1a      	ldr	r3, [pc, #104]	; (80544 <usart_serial_putchar+0x9c>)
   804da:	4298      	cmp	r0, r3
   804dc:	d107      	bne.n	804ee <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   804de:	461e      	mov	r6, r3
   804e0:	4d17      	ldr	r5, [pc, #92]	; (80540 <usart_serial_putchar+0x98>)
   804e2:	4630      	mov	r0, r6
   804e4:	4621      	mov	r1, r4
   804e6:	47a8      	blx	r5
   804e8:	2800      	cmp	r0, #0
   804ea:	d1fa      	bne.n	804e2 <usart_serial_putchar+0x3a>
   804ec:	e019      	b.n	80522 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   804ee:	4b16      	ldr	r3, [pc, #88]	; (80548 <usart_serial_putchar+0xa0>)
   804f0:	4298      	cmp	r0, r3
   804f2:	d107      	bne.n	80504 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   804f4:	461e      	mov	r6, r3
   804f6:	4d12      	ldr	r5, [pc, #72]	; (80540 <usart_serial_putchar+0x98>)
   804f8:	4630      	mov	r0, r6
   804fa:	4621      	mov	r1, r4
   804fc:	47a8      	blx	r5
   804fe:	2800      	cmp	r0, #0
   80500:	d1fa      	bne.n	804f8 <usart_serial_putchar+0x50>
   80502:	e010      	b.n	80526 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80504:	4b11      	ldr	r3, [pc, #68]	; (8054c <usart_serial_putchar+0xa4>)
   80506:	4298      	cmp	r0, r3
   80508:	d10f      	bne.n	8052a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8050a:	461e      	mov	r6, r3
   8050c:	4d0c      	ldr	r5, [pc, #48]	; (80540 <usart_serial_putchar+0x98>)
   8050e:	4630      	mov	r0, r6
   80510:	4621      	mov	r1, r4
   80512:	47a8      	blx	r5
   80514:	2800      	cmp	r0, #0
   80516:	d1fa      	bne.n	8050e <usart_serial_putchar+0x66>
   80518:	e009      	b.n	8052e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8051a:	2001      	movs	r0, #1
   8051c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8051e:	2001      	movs	r0, #1
   80520:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80522:	2001      	movs	r0, #1
   80524:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80526:	2001      	movs	r0, #1
   80528:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8052a:	2000      	movs	r0, #0
   8052c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8052e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80530:	bd70      	pop	{r4, r5, r6, pc}
   80532:	bf00      	nop
   80534:	400e0800 	.word	0x400e0800
   80538:	00080345 	.word	0x00080345
   8053c:	40098000 	.word	0x40098000
   80540:	00080369 	.word	0x00080369
   80544:	4009c000 	.word	0x4009c000
   80548:	400a0000 	.word	0x400a0000
   8054c:	400a4000 	.word	0x400a4000

00080550 <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   80550:	b530      	push	{r4, r5, lr}
   80552:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80554:	2008      	movs	r0, #8
   80556:	4d13      	ldr	r5, [pc, #76]	; (805a4 <configureConsole+0x54>)
   80558:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8055a:	4c13      	ldr	r4, [pc, #76]	; (805a8 <configureConsole+0x58>)
   8055c:	4b13      	ldr	r3, [pc, #76]	; (805ac <configureConsole+0x5c>)
   8055e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80560:	4a13      	ldr	r2, [pc, #76]	; (805b0 <configureConsole+0x60>)
   80562:	4b14      	ldr	r3, [pc, #80]	; (805b4 <configureConsole+0x64>)
   80564:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80566:	4a14      	ldr	r2, [pc, #80]	; (805b8 <configureConsole+0x68>)
   80568:	4b14      	ldr	r3, [pc, #80]	; (805bc <configureConsole+0x6c>)
   8056a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8056c:	4b14      	ldr	r3, [pc, #80]	; (805c0 <configureConsole+0x70>)
   8056e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80570:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80574:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80576:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8057a:	9303      	str	r3, [sp, #12]
   8057c:	2008      	movs	r0, #8
   8057e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80580:	4620      	mov	r0, r4
   80582:	a901      	add	r1, sp, #4
   80584:	4b0f      	ldr	r3, [pc, #60]	; (805c4 <configureConsole+0x74>)
   80586:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80588:	4d0f      	ldr	r5, [pc, #60]	; (805c8 <configureConsole+0x78>)
   8058a:	682b      	ldr	r3, [r5, #0]
   8058c:	6898      	ldr	r0, [r3, #8]
   8058e:	2100      	movs	r1, #0
   80590:	4c0e      	ldr	r4, [pc, #56]	; (805cc <configureConsole+0x7c>)
   80592:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80594:	682b      	ldr	r3, [r5, #0]
   80596:	6858      	ldr	r0, [r3, #4]
   80598:	2100      	movs	r1, #0
   8059a:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   8059c:	2000      	movs	r0, #0
   8059e:	b005      	add	sp, #20
   805a0:	bd30      	pop	{r4, r5, pc}
   805a2:	bf00      	nop
   805a4:	00080c91 	.word	0x00080c91
   805a8:	400e0800 	.word	0x400e0800
   805ac:	20070b18 	.word	0x20070b18
   805b0:	000804a9 	.word	0x000804a9
   805b4:	20070b14 	.word	0x20070b14
   805b8:	00080401 	.word	0x00080401
   805bc:	20070b10 	.word	0x20070b10
   805c0:	0501bd00 	.word	0x0501bd00
   805c4:	0008030d 	.word	0x0008030d
   805c8:	20070568 	.word	0x20070568
   805cc:	000810d1 	.word	0x000810d1

000805d0 <pin12_edge_handler>:
	

}

// Handler which calls when pin 53 is toggle.  
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   805d0:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   805d2:	4806      	ldr	r0, [pc, #24]	; (805ec <pin12_edge_handler+0x1c>)
   805d4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   805dc:	4b04      	ldr	r3, [pc, #16]	; (805f0 <pin12_edge_handler+0x20>)
   805de:	4798      	blx	r3
   805e0:	b118      	cbz	r0, 805ea <pin12_edge_handler+0x1a>
		//increase the counter value
		counter_2++;
   805e2:	4b04      	ldr	r3, [pc, #16]	; (805f4 <pin12_edge_handler+0x24>)
   805e4:	881a      	ldrh	r2, [r3, #0]
   805e6:	3201      	adds	r2, #1
   805e8:	801a      	strh	r2, [r3, #0]
   805ea:	bd08      	pop	{r3, pc}
   805ec:	400e1200 	.word	0x400e1200
   805f0:	00080945 	.word	0x00080945
   805f4:	20070a60 	.word	0x20070a60

000805f8 <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}	
}

// Handler which calls when pin 51 is toggle. 
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   805f8:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   805fa:	4806      	ldr	r0, [pc, #24]	; (80614 <pin14_edge_handler+0x1c>)
   805fc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80600:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80604:	4b04      	ldr	r3, [pc, #16]	; (80618 <pin14_edge_handler+0x20>)
   80606:	4798      	blx	r3
   80608:	b118      	cbz	r0, 80612 <pin14_edge_handler+0x1a>
	//Increase the counter value
			counter_1++;
   8060a:	4b04      	ldr	r3, [pc, #16]	; (8061c <pin14_edge_handler+0x24>)
   8060c:	881a      	ldrh	r2, [r3, #0]
   8060e:	3201      	adds	r2, #1
   80610:	801a      	strh	r2, [r3, #0]
   80612:	bd08      	pop	{r3, pc}
   80614:	400e1000 	.word	0x400e1000
   80618:	00080945 	.word	0x00080945
   8061c:	20070a5e 	.word	0x20070a5e

00080620 <configInterrupts>:
// Counter for Arlo Robot encoders for right and left wheel
 uint16_t counter_1 = 0;
 uint16_t counter_2 = 0;


void configInterrupts(void){
   80620:	b570      	push	{r4, r5, r6, lr}
   80622:	b082      	sub	sp, #8
	
	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   80624:	200c      	movs	r0, #12
   80626:	4c1a      	ldr	r4, [pc, #104]	; (80690 <configInterrupts+0x70>)
   80628:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);	
   8062a:	200d      	movs	r0, #13
   8062c:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   8062e:	4d19      	ldr	r5, [pc, #100]	; (80694 <configInterrupts+0x74>)
   80630:	4628      	mov	r0, r5
   80632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80636:	2201      	movs	r2, #1
   80638:	4e17      	ldr	r6, [pc, #92]	; (80698 <configInterrupts+0x78>)
   8063a:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   8063c:	4c17      	ldr	r4, [pc, #92]	; (8069c <configInterrupts+0x7c>)
   8063e:	4620      	mov	r0, r4
   80640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80644:	2201      	movs	r2, #1
   80646:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   80648:	4b15      	ldr	r3, [pc, #84]	; (806a0 <configInterrupts+0x80>)
   8064a:	9300      	str	r3, [sp, #0]
   8064c:	4628      	mov	r0, r5
   8064e:	210d      	movs	r1, #13
   80650:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80654:	2340      	movs	r3, #64	; 0x40
   80656:	4e13      	ldr	r6, [pc, #76]	; (806a4 <configInterrupts+0x84>)
   80658:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   8065a:	4b13      	ldr	r3, [pc, #76]	; (806a8 <configInterrupts+0x88>)
   8065c:	9300      	str	r3, [sp, #0]
   8065e:	4620      	mov	r0, r4
   80660:	210c      	movs	r1, #12
   80662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80666:	2340      	movs	r3, #64	; 0x40
   80668:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   8066a:	4628      	mov	r0, r5
   8066c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80670:	4d0e      	ldr	r5, [pc, #56]	; (806ac <configInterrupts+0x8c>)
   80672:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   80674:	4620      	mov	r0, r4
   80676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8067a:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8067c:	4b0c      	ldr	r3, [pc, #48]	; (806b0 <configInterrupts+0x90>)
   8067e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80682:	601a      	str	r2, [r3, #0]
   80684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80688:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);
	

}
   8068a:	b002      	add	sp, #8
   8068c:	bd70      	pop	{r4, r5, r6, pc}
   8068e:	bf00      	nop
   80690:	00080c91 	.word	0x00080c91
   80694:	400e1200 	.word	0x400e1200
   80698:	0008099d 	.word	0x0008099d
   8069c:	400e1000 	.word	0x400e1000
   806a0:	000805d1 	.word	0x000805d1
   806a4:	00080c05 	.word	0x00080c05
   806a8:	000805f9 	.word	0x000805f9
   806ac:	00080a29 	.word	0x00080a29
   806b0:	e000e100 	.word	0xe000e100

000806b4 <reset_Counter>:
			//printf("\n c2 = %d",counter_2);
	}
}

void reset_Counter(void){
	counter_1=0;
   806b4:	2300      	movs	r3, #0
   806b6:	4a02      	ldr	r2, [pc, #8]	; (806c0 <reset_Counter+0xc>)
   806b8:	8013      	strh	r3, [r2, #0]
	counter_2=0;
   806ba:	4a02      	ldr	r2, [pc, #8]	; (806c4 <reset_Counter+0x10>)
   806bc:	8013      	strh	r3, [r2, #0]
   806be:	4770      	bx	lr
   806c0:	20070a5e 	.word	0x20070a5e
   806c4:	20070a60 	.word	0x20070a60

000806c8 <rotation>:

/* This method rotates the robot around its own axis at the desired degree and speed 
   @param degree rotation degree
   @param ratationSpeed rotation speed
*/
void rotation (int degree, int rotationSpeed){
   806c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   806cc:	4604      	mov	r4, r0
   806ce:	460f      	mov	r7, r1
	int gain = 5;
	int checkValue=-2;
	int totalPulses;
	
	int course=1;     // rotation course, 1 to right -1 to left  
	rightWheel(1500);
   806d0:	f240 50dc 	movw	r0, #1500	; 0x5dc
   806d4:	4b21      	ldr	r3, [pc, #132]	; (8075c <rotation+0x94>)
   806d6:	4798      	blx	r3
	leftWheel(1500);
   806d8:	f240 50dc 	movw	r0, #1500	; 0x5dc
   806dc:	4b20      	ldr	r3, [pc, #128]	; (80760 <rotation+0x98>)
   806de:	4798      	blx	r3
	// if its more then 180 turn to the left
 	if(degree>180){    
   806e0:	2cb4      	cmp	r4, #180	; 0xb4
 	    degree=360-degree;
   806e2:	bfc6      	itte	gt
   806e4:	f5c4 74b4 	rsbgt	r4, r4, #360	; 0x168
 		course=-1;
   806e8:	f04f 38ff 	movgt.w	r8, #4294967295
	int measurementValue=0;
	int gain = 5;
	int checkValue=-2;
	int totalPulses;
	
	int course=1;     // rotation course, 1 to right -1 to left  
   806ec:	f04f 0801 	movle.w	r8, #1
 	if(degree>180){    
 	    degree=360-degree;
 		course=-1;
 	}
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
   806f0:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   806f4:	1064      	asrs	r4, r4, #1
	reset_Counter();
   806f6:	4b1b      	ldr	r3, [pc, #108]	; (80764 <rotation+0x9c>)
   806f8:	4798      	blx	r3
*/
void rotation (int degree, int rotationSpeed){
	int controlValue=0;
	int measurementValue=0;
	int gain = 5;
	int checkValue=-2;
   806fa:	f06f 0201 	mvn.w	r2, #1
 		course=-1;
 	}
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)  
   806fe:	4e1a      	ldr	r6, [pc, #104]	; (80768 <rotation+0xa0>)
   80700:	4d1a      	ldr	r5, [pc, #104]	; (8076c <rotation+0xa4>)
	{
		if ((counter_1+counter_2) >= checkValue)
		{
 		measurementValue = (counter_2-counter_1);
 		controlValue = (gain*measurementValue);
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80702:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80760 <rotation+0x98>
 		course=-1;
 	}
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)  
   80706:	e017      	b.n	80738 <rotation+0x70>
	{
		if ((counter_1+counter_2) >= checkValue)
   80708:	4293      	cmp	r3, r2
   8070a:	db18      	blt.n	8073e <rotation+0x76>
		{
 		measurementValue = (counter_2-counter_1);
   8070c:	ebc0 0a01 	rsb	sl, r0, r1
 		controlValue = (gain*measurementValue);
   80710:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80714:	eb07 000a 	add.w	r0, r7, sl
   80718:	fb08 f000 	mul.w	r0, r8, r0
   8071c:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   80720:	47c8      	blx	r9
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
   80722:	ebc7 000a 	rsb	r0, r7, sl
   80726:	fb08 f000 	mul.w	r0, r8, r0
   8072a:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   8072e:	4b0b      	ldr	r3, [pc, #44]	; (8075c <rotation+0x94>)
   80730:	4798      	blx	r3
		checkValue=counter_1+counter_2;
   80732:	8832      	ldrh	r2, [r6, #0]
   80734:	882b      	ldrh	r3, [r5, #0]
   80736:	441a      	add	r2, r3
 		course=-1;
 	}
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)  
   80738:	8830      	ldrh	r0, [r6, #0]
   8073a:	8829      	ldrh	r1, [r5, #0]
   8073c:	1843      	adds	r3, r0, r1
   8073e:	429c      	cmp	r4, r3
   80740:	dce2      	bgt.n	80708 <rotation+0x40>
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
		checkValue=counter_1+counter_2;
		}
	}
	rightWheel(1500);
   80742:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80746:	4b05      	ldr	r3, [pc, #20]	; (8075c <rotation+0x94>)
   80748:	4798      	blx	r3
	leftWheel(1500);	
   8074a:	f240 50dc 	movw	r0, #1500	; 0x5dc
   8074e:	4b04      	ldr	r3, [pc, #16]	; (80760 <rotation+0x98>)
   80750:	4798      	blx	r3
	reset_Counter();
   80752:	4b04      	ldr	r3, [pc, #16]	; (80764 <rotation+0x9c>)
   80754:	4798      	blx	r3
   80756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8075a:	bf00      	nop
   8075c:	00080895 	.word	0x00080895
   80760:	00080865 	.word	0x00080865
   80764:	000806b5 	.word	0x000806b5
   80768:	20070a5e 	.word	0x20070a5e
   8076c:	20070a60 	.word	0x20070a60

00080770 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   80770:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   80772:	2055      	movs	r0, #85	; 0x55
   80774:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80778:	4b0b      	ldr	r3, [pc, #44]	; (807a8 <initPin21+0x38>)
   8077a:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   8077c:	4b0b      	ldr	r3, [pc, #44]	; (807ac <initPin21+0x3c>)
   8077e:	2404      	movs	r4, #4
   80780:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80782:	220b      	movs	r2, #11
   80784:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   80786:	2200      	movs	r2, #0
   80788:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   8078a:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 7500;
   8078c:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80790:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   80792:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   80794:	4d06      	ldr	r5, [pc, #24]	; (807b0 <initPin21+0x40>)
   80796:	4628      	mov	r0, r5
   80798:	4619      	mov	r1, r3
   8079a:	4b06      	ldr	r3, [pc, #24]	; (807b4 <initPin21+0x44>)
   8079c:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   8079e:	4628      	mov	r0, r5
   807a0:	4621      	mov	r1, r4
   807a2:	4b05      	ldr	r3, [pc, #20]	; (807b8 <initPin21+0x48>)
   807a4:	4798      	blx	r3
   807a6:	bd38      	pop	{r3, r4, r5, pc}
   807a8:	00080a39 	.word	0x00080a39
   807ac:	20070b44 	.word	0x20070b44
   807b0:	40094000 	.word	0x40094000
   807b4:	00080d81 	.word	0x00080d81
   807b8:	00080ea9 	.word	0x00080ea9

000807bc <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   807bc:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   807be:	2056      	movs	r0, #86	; 0x56
   807c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807c4:	4b0b      	ldr	r3, [pc, #44]	; (807f4 <initPin22+0x38>)
   807c6:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   807c8:	4b0b      	ldr	r3, [pc, #44]	; (807f8 <initPin22+0x3c>)
   807ca:	2405      	movs	r4, #5
   807cc:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   807ce:	220b      	movs	r2, #11
   807d0:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   807d2:	2200      	movs	r2, #0
   807d4:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   807d6:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 7500;
   807d8:	f641 514c 	movw	r1, #7500	; 0x1d4c
   807dc:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   807de:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   807e0:	4d06      	ldr	r5, [pc, #24]	; (807fc <initPin22+0x40>)
   807e2:	4628      	mov	r0, r5
   807e4:	4619      	mov	r1, r3
   807e6:	4b06      	ldr	r3, [pc, #24]	; (80800 <initPin22+0x44>)
   807e8:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   807ea:	4628      	mov	r0, r5
   807ec:	4621      	mov	r1, r4
   807ee:	4b05      	ldr	r3, [pc, #20]	; (80804 <initPin22+0x48>)
   807f0:	4798      	blx	r3
   807f2:	bd38      	pop	{r3, r4, r5, pc}
   807f4:	00080a39 	.word	0x00080a39
   807f8:	20070b1c 	.word	0x20070b1c
   807fc:	40094000 	.word	0x40094000
   80800:	00080d81 	.word	0x00080d81
   80804:	00080ea9 	.word	0x00080ea9

00080808 <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   80808:	b530      	push	{r4, r5, lr}
   8080a:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   8080c:	2024      	movs	r0, #36	; 0x24
   8080e:	4b0d      	ldr	r3, [pc, #52]	; (80844 <PWM_init+0x3c>)
   80810:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   80812:	4c0d      	ldr	r4, [pc, #52]	; (80848 <PWM_init+0x40>)
   80814:	4620      	mov	r0, r4
   80816:	2104      	movs	r1, #4
   80818:	4d0c      	ldr	r5, [pc, #48]	; (8084c <PWM_init+0x44>)
   8081a:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   8081c:	4620      	mov	r0, r4
   8081e:	2105      	movs	r1, #5
   80820:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   80822:	4b0b      	ldr	r3, [pc, #44]	; (80850 <PWM_init+0x48>)
   80824:	9301      	str	r3, [sp, #4]
   80826:	2300      	movs	r3, #0
   80828:	9302      	str	r3, [sp, #8]
   8082a:	4b0a      	ldr	r3, [pc, #40]	; (80854 <PWM_init+0x4c>)
   8082c:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   8082e:	4620      	mov	r0, r4
   80830:	a901      	add	r1, sp, #4
   80832:	4b09      	ldr	r3, [pc, #36]	; (80858 <PWM_init+0x50>)
   80834:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   80836:	4b09      	ldr	r3, [pc, #36]	; (8085c <PWM_init+0x54>)
   80838:	4798      	blx	r3
	initPin22();
   8083a:	4b09      	ldr	r3, [pc, #36]	; (80860 <PWM_init+0x58>)
   8083c:	4798      	blx	r3
	
}
   8083e:	b005      	add	sp, #20
   80840:	bd30      	pop	{r4, r5, pc}
   80842:	bf00      	nop
   80844:	00080c91 	.word	0x00080c91
   80848:	40094000 	.word	0x40094000
   8084c:	00080eb5 	.word	0x00080eb5
   80850:	000f4240 	.word	0x000f4240
   80854:	0501bd00 	.word	0x0501bd00
   80858:	00080d41 	.word	0x00080d41
   8085c:	00080771 	.word	0x00080771
   80860:	000807bd 	.word	0x000807bd

00080864 <leftWheel>:
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
}
 /* This method changes the duty cycle of PWM signal on pin 9. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void leftWheel(uint32_t duty){
   80864:	b508      	push	{r3, lr}
	if(duty<800){
   80866:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   8086a:	d305      	bcc.n	80878 <leftWheel+0x14>
   8086c:	f640 0298 	movw	r2, #2200	; 0x898
   80870:	4290      	cmp	r0, r2
   80872:	bf38      	it	cc
   80874:	4602      	movcc	r2, r0
   80876:	e001      	b.n	8087c <leftWheel+0x18>
		duty=800;
   80878:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_21, duty );
   8087c:	4802      	ldr	r0, [pc, #8]	; (80888 <leftWheel+0x24>)
   8087e:	4903      	ldr	r1, [pc, #12]	; (8088c <leftWheel+0x28>)
   80880:	4b03      	ldr	r3, [pc, #12]	; (80890 <leftWheel+0x2c>)
   80882:	4798      	blx	r3
   80884:	bd08      	pop	{r3, pc}
   80886:	bf00      	nop
   80888:	40094000 	.word	0x40094000
   8088c:	20070b44 	.word	0x20070b44
   80890:	00080e85 	.word	0x00080e85

00080894 <rightWheel>:
}

 /* This method changes the duty cycle of PWM signal on pin 8. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void rightWheel(uint32_t duty){
   80894:	b508      	push	{r3, lr}
	
	if(duty<800){
   80896:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   8089a:	d305      	bcc.n	808a8 <rightWheel+0x14>
   8089c:	f640 0298 	movw	r2, #2200	; 0x898
   808a0:	4290      	cmp	r0, r2
   808a2:	bf38      	it	cc
   808a4:	4602      	movcc	r2, r0
   808a6:	e001      	b.n	808ac <rightWheel+0x18>
		duty=800;
   808a8:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   808ac:	4802      	ldr	r0, [pc, #8]	; (808b8 <rightWheel+0x24>)
   808ae:	4903      	ldr	r1, [pc, #12]	; (808bc <rightWheel+0x28>)
   808b0:	4b03      	ldr	r3, [pc, #12]	; (808c0 <rightWheel+0x2c>)
   808b2:	4798      	blx	r3
   808b4:	bd08      	pop	{r3, pc}
   808b6:	bf00      	nop
   808b8:	40094000 	.word	0x40094000
   808bc:	20070b1c 	.word	0x20070b1c
   808c0:	00080e85 	.word	0x00080e85

000808c4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   808c4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   808c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   808ca:	4b17      	ldr	r3, [pc, #92]	; (80928 <board_init+0x64>)
   808cc:	605a      	str	r2, [r3, #4]
   808ce:	200b      	movs	r0, #11
   808d0:	4c16      	ldr	r4, [pc, #88]	; (8092c <board_init+0x68>)
   808d2:	47a0      	blx	r4
   808d4:	200c      	movs	r0, #12
   808d6:	47a0      	blx	r4
   808d8:	200d      	movs	r0, #13
   808da:	47a0      	blx	r4
   808dc:	200e      	movs	r0, #14
   808de:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   808e0:	203b      	movs	r0, #59	; 0x3b
   808e2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808e6:	4c12      	ldr	r4, [pc, #72]	; (80930 <board_init+0x6c>)
   808e8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   808ea:	2055      	movs	r0, #85	; 0x55
   808ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808f0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   808f2:	2056      	movs	r0, #86	; 0x56
   808f4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808f8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   808fa:	2068      	movs	r0, #104	; 0x68
   808fc:	490d      	ldr	r1, [pc, #52]	; (80934 <board_init+0x70>)
   808fe:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80900:	205c      	movs	r0, #92	; 0x5c
   80902:	490d      	ldr	r1, [pc, #52]	; (80938 <board_init+0x74>)
   80904:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80906:	480d      	ldr	r0, [pc, #52]	; (8093c <board_init+0x78>)
   80908:	f44f 7140 	mov.w	r1, #768	; 0x300
   8090c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80910:	4b0b      	ldr	r3, [pc, #44]	; (80940 <board_init+0x7c>)
   80912:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80914:	202b      	movs	r0, #43	; 0x2b
   80916:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8091a:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8091c:	202a      	movs	r0, #42	; 0x2a
   8091e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80922:	47a0      	blx	r4
   80924:	bd10      	pop	{r4, pc}
   80926:	bf00      	nop
   80928:	400e1a50 	.word	0x400e1a50
   8092c:	00080c91 	.word	0x00080c91
   80930:	00080a39 	.word	0x00080a39
   80934:	28000079 	.word	0x28000079
   80938:	28000001 	.word	0x28000001
   8093c:	400e0e00 	.word	0x400e0e00
   80940:	00080b0d 	.word	0x00080b0d

00080944 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80944:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80948:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   8094c:	bf0c      	ite	eq
   8094e:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   80950:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   80952:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   80954:	bf0c      	ite	eq
   80956:	2000      	moveq	r0, #0
   80958:	2001      	movne	r0, #1
   8095a:	4770      	bx	lr

0008095c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8095c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8095e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80962:	d016      	beq.n	80992 <pio_set_peripheral+0x36>
   80964:	d804      	bhi.n	80970 <pio_set_peripheral+0x14>
   80966:	b1c1      	cbz	r1, 8099a <pio_set_peripheral+0x3e>
   80968:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8096c:	d00a      	beq.n	80984 <pio_set_peripheral+0x28>
   8096e:	e013      	b.n	80998 <pio_set_peripheral+0x3c>
   80970:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80974:	d011      	beq.n	8099a <pio_set_peripheral+0x3e>
   80976:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8097a:	d00e      	beq.n	8099a <pio_set_peripheral+0x3e>
   8097c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80980:	d10a      	bne.n	80998 <pio_set_peripheral+0x3c>
   80982:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80984:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80986:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80988:	400b      	ands	r3, r1
   8098a:	ea23 0302 	bic.w	r3, r3, r2
   8098e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80990:	e002      	b.n	80998 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80992:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80994:	4313      	orrs	r3, r2
   80996:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80998:	6042      	str	r2, [r0, #4]
   8099a:	4770      	bx	lr

0008099c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8099c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8099e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   809a2:	bf14      	ite	ne
   809a4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809a6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   809a8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   809ac:	bf14      	ite	ne
   809ae:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   809b0:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   809b2:	f012 0f02 	tst.w	r2, #2
   809b6:	d002      	beq.n	809be <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   809b8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   809bc:	e004      	b.n	809c8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   809be:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   809c2:	bf18      	it	ne
   809c4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   809c8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   809ca:	6001      	str	r1, [r0, #0]
   809cc:	4770      	bx	lr
   809ce:	bf00      	nop

000809d0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   809d0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   809d2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809d4:	9c01      	ldr	r4, [sp, #4]
   809d6:	b10c      	cbz	r4, 809dc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   809d8:	6641      	str	r1, [r0, #100]	; 0x64
   809da:	e000      	b.n	809de <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809dc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   809de:	b10b      	cbz	r3, 809e4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   809e0:	6501      	str	r1, [r0, #80]	; 0x50
   809e2:	e000      	b.n	809e6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   809e4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   809e6:	b10a      	cbz	r2, 809ec <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   809e8:	6301      	str	r1, [r0, #48]	; 0x30
   809ea:	e000      	b.n	809ee <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   809ec:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   809ee:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   809f0:	6001      	str	r1, [r0, #0]
}
   809f2:	f85d 4b04 	ldr.w	r4, [sp], #4
   809f6:	4770      	bx	lr

000809f8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   809f8:	f012 0f10 	tst.w	r2, #16
   809fc:	d010      	beq.n	80a20 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   809fe:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80a02:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   80a06:	bf14      	ite	ne
   80a08:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   80a0c:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   80a10:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   80a14:	bf14      	ite	ne
   80a16:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   80a1a:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80a1e:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   80a20:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80a24:	4770      	bx	lr
   80a26:	bf00      	nop

00080a28 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   80a28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   80a2a:	6401      	str	r1, [r0, #64]	; 0x40
   80a2c:	4770      	bx	lr
   80a2e:	bf00      	nop

00080a30 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80a30:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80a32:	4770      	bx	lr

00080a34 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80a34:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80a36:	4770      	bx	lr

00080a38 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80a38:	b570      	push	{r4, r5, r6, lr}
   80a3a:	b082      	sub	sp, #8
   80a3c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80a3e:	0944      	lsrs	r4, r0, #5
   80a40:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80a44:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80a48:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80a4a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80a4e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80a52:	d030      	beq.n	80ab6 <pio_configure_pin+0x7e>
   80a54:	d806      	bhi.n	80a64 <pio_configure_pin+0x2c>
   80a56:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80a5a:	d00a      	beq.n	80a72 <pio_configure_pin+0x3a>
   80a5c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80a60:	d018      	beq.n	80a94 <pio_configure_pin+0x5c>
   80a62:	e049      	b.n	80af8 <pio_configure_pin+0xc0>
   80a64:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80a68:	d030      	beq.n	80acc <pio_configure_pin+0x94>
   80a6a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80a6e:	d02d      	beq.n	80acc <pio_configure_pin+0x94>
   80a70:	e042      	b.n	80af8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80a72:	f000 001f 	and.w	r0, r0, #31
   80a76:	2401      	movs	r4, #1
   80a78:	4084      	lsls	r4, r0
   80a7a:	4630      	mov	r0, r6
   80a7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a80:	4622      	mov	r2, r4
   80a82:	4b1f      	ldr	r3, [pc, #124]	; (80b00 <pio_configure_pin+0xc8>)
   80a84:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a86:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a8a:	bf14      	ite	ne
   80a8c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a8e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a90:	2001      	movs	r0, #1
   80a92:	e032      	b.n	80afa <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80a94:	f000 001f 	and.w	r0, r0, #31
   80a98:	2401      	movs	r4, #1
   80a9a:	4084      	lsls	r4, r0
   80a9c:	4630      	mov	r0, r6
   80a9e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80aa2:	4622      	mov	r2, r4
   80aa4:	4b16      	ldr	r3, [pc, #88]	; (80b00 <pio_configure_pin+0xc8>)
   80aa6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80aa8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80aac:	bf14      	ite	ne
   80aae:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80ab0:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80ab2:	2001      	movs	r0, #1
   80ab4:	e021      	b.n	80afa <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80ab6:	f000 011f 	and.w	r1, r0, #31
   80aba:	2401      	movs	r4, #1
   80abc:	4630      	mov	r0, r6
   80abe:	fa04 f101 	lsl.w	r1, r4, r1
   80ac2:	462a      	mov	r2, r5
   80ac4:	4b0f      	ldr	r3, [pc, #60]	; (80b04 <pio_configure_pin+0xcc>)
   80ac6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80ac8:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80aca:	e016      	b.n	80afa <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80acc:	f000 011f 	and.w	r1, r0, #31
   80ad0:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80ad2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80ad6:	ea05 0304 	and.w	r3, r5, r4
   80ada:	9300      	str	r3, [sp, #0]
   80adc:	4630      	mov	r0, r6
   80ade:	fa04 f101 	lsl.w	r1, r4, r1
   80ae2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80ae6:	bf14      	ite	ne
   80ae8:	2200      	movne	r2, #0
   80aea:	2201      	moveq	r2, #1
   80aec:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80af0:	4d05      	ldr	r5, [pc, #20]	; (80b08 <pio_configure_pin+0xd0>)
   80af2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80af4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80af6:	e000      	b.n	80afa <pio_configure_pin+0xc2>

	default:
		return 0;
   80af8:	2000      	movs	r0, #0
	}

	return 1;
}
   80afa:	b002      	add	sp, #8
   80afc:	bd70      	pop	{r4, r5, r6, pc}
   80afe:	bf00      	nop
   80b00:	0008095d 	.word	0x0008095d
   80b04:	0008099d 	.word	0x0008099d
   80b08:	000809d1 	.word	0x000809d1

00080b0c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b0e:	b083      	sub	sp, #12
   80b10:	4607      	mov	r7, r0
   80b12:	460e      	mov	r6, r1
   80b14:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80b16:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80b1a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80b1e:	d026      	beq.n	80b6e <pio_configure_pin_group+0x62>
   80b20:	d806      	bhi.n	80b30 <pio_configure_pin_group+0x24>
   80b22:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80b26:	d00a      	beq.n	80b3e <pio_configure_pin_group+0x32>
   80b28:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80b2c:	d013      	beq.n	80b56 <pio_configure_pin_group+0x4a>
   80b2e:	e034      	b.n	80b9a <pio_configure_pin_group+0x8e>
   80b30:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80b34:	d01f      	beq.n	80b76 <pio_configure_pin_group+0x6a>
   80b36:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80b3a:	d01c      	beq.n	80b76 <pio_configure_pin_group+0x6a>
   80b3c:	e02d      	b.n	80b9a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80b3e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b42:	4632      	mov	r2, r6
   80b44:	4b16      	ldr	r3, [pc, #88]	; (80ba0 <pio_configure_pin_group+0x94>)
   80b46:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b48:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b4c:	bf14      	ite	ne
   80b4e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b50:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b52:	2001      	movs	r0, #1
   80b54:	e022      	b.n	80b9c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80b56:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b5a:	4632      	mov	r2, r6
   80b5c:	4b10      	ldr	r3, [pc, #64]	; (80ba0 <pio_configure_pin_group+0x94>)
   80b5e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b60:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b64:	bf14      	ite	ne
   80b66:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b68:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b6a:	2001      	movs	r0, #1
   80b6c:	e016      	b.n	80b9c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80b6e:	4b0d      	ldr	r3, [pc, #52]	; (80ba4 <pio_configure_pin_group+0x98>)
   80b70:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b72:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80b74:	e012      	b.n	80b9c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b76:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80b7a:	f005 0301 	and.w	r3, r5, #1
   80b7e:	9300      	str	r3, [sp, #0]
   80b80:	4638      	mov	r0, r7
   80b82:	4631      	mov	r1, r6
   80b84:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b88:	bf14      	ite	ne
   80b8a:	2200      	movne	r2, #0
   80b8c:	2201      	moveq	r2, #1
   80b8e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b92:	4c05      	ldr	r4, [pc, #20]	; (80ba8 <pio_configure_pin_group+0x9c>)
   80b94:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80b96:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80b98:	e000      	b.n	80b9c <pio_configure_pin_group+0x90>

	default:
		return 0;
   80b9a:	2000      	movs	r0, #0
	}

	return 1;
}
   80b9c:	b003      	add	sp, #12
   80b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80ba0:	0008095d 	.word	0x0008095d
   80ba4:	0008099d 	.word	0x0008099d
   80ba8:	000809d1 	.word	0x000809d1

00080bac <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80bb0:	4604      	mov	r4, r0
   80bb2:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80bb4:	4b10      	ldr	r3, [pc, #64]	; (80bf8 <pio_handler_process+0x4c>)
   80bb6:	4798      	blx	r3
   80bb8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80bba:	4620      	mov	r0, r4
   80bbc:	4b0f      	ldr	r3, [pc, #60]	; (80bfc <pio_handler_process+0x50>)
   80bbe:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80bc0:	4005      	ands	r5, r0
   80bc2:	d017      	beq.n	80bf4 <pio_handler_process+0x48>
   80bc4:	4f0e      	ldr	r7, [pc, #56]	; (80c00 <pio_handler_process+0x54>)
   80bc6:	f107 040c 	add.w	r4, r7, #12
   80bca:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80bcc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80bd0:	42b3      	cmp	r3, r6
   80bd2:	d10a      	bne.n	80bea <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80bd4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80bd8:	4229      	tst	r1, r5
   80bda:	d006      	beq.n	80bea <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80bdc:	6823      	ldr	r3, [r4, #0]
   80bde:	4630      	mov	r0, r6
   80be0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80be2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80be6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80bea:	42bc      	cmp	r4, r7
   80bec:	d002      	beq.n	80bf4 <pio_handler_process+0x48>
   80bee:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80bf0:	2d00      	cmp	r5, #0
   80bf2:	d1eb      	bne.n	80bcc <pio_handler_process+0x20>
   80bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80bf8:	00080a31 	.word	0x00080a31
   80bfc:	00080a35 	.word	0x00080a35
   80c00:	20070a68 	.word	0x20070a68

00080c04 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80c06:	4c0b      	ldr	r4, [pc, #44]	; (80c34 <pio_handler_set+0x30>)
   80c08:	6824      	ldr	r4, [r4, #0]
   80c0a:	2c06      	cmp	r4, #6
   80c0c:	d810      	bhi.n	80c30 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   80c0e:	4f0a      	ldr	r7, [pc, #40]	; (80c38 <pio_handler_set+0x34>)
   80c10:	0126      	lsls	r6, r4, #4
   80c12:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   80c14:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   80c16:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   80c18:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   80c1a:	9906      	ldr	r1, [sp, #24]
   80c1c:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   80c1e:	3401      	adds	r4, #1
   80c20:	4904      	ldr	r1, [pc, #16]	; (80c34 <pio_handler_set+0x30>)
   80c22:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80c24:	4611      	mov	r1, r2
   80c26:	461a      	mov	r2, r3
   80c28:	4b04      	ldr	r3, [pc, #16]	; (80c3c <pio_handler_set+0x38>)
   80c2a:	4798      	blx	r3

	return 0;
   80c2c:	2000      	movs	r0, #0
   80c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80c30:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c34:	20070a64 	.word	0x20070a64
   80c38:	20070a68 	.word	0x20070a68
   80c3c:	000809f9 	.word	0x000809f9

00080c40 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80c40:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80c42:	4802      	ldr	r0, [pc, #8]	; (80c4c <PIOA_Handler+0xc>)
   80c44:	210b      	movs	r1, #11
   80c46:	4b02      	ldr	r3, [pc, #8]	; (80c50 <PIOA_Handler+0x10>)
   80c48:	4798      	blx	r3
   80c4a:	bd08      	pop	{r3, pc}
   80c4c:	400e0e00 	.word	0x400e0e00
   80c50:	00080bad 	.word	0x00080bad

00080c54 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80c54:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80c56:	4802      	ldr	r0, [pc, #8]	; (80c60 <PIOB_Handler+0xc>)
   80c58:	210c      	movs	r1, #12
   80c5a:	4b02      	ldr	r3, [pc, #8]	; (80c64 <PIOB_Handler+0x10>)
   80c5c:	4798      	blx	r3
   80c5e:	bd08      	pop	{r3, pc}
   80c60:	400e1000 	.word	0x400e1000
   80c64:	00080bad 	.word	0x00080bad

00080c68 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80c68:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80c6a:	4802      	ldr	r0, [pc, #8]	; (80c74 <PIOC_Handler+0xc>)
   80c6c:	210d      	movs	r1, #13
   80c6e:	4b02      	ldr	r3, [pc, #8]	; (80c78 <PIOC_Handler+0x10>)
   80c70:	4798      	blx	r3
   80c72:	bd08      	pop	{r3, pc}
   80c74:	400e1200 	.word	0x400e1200
   80c78:	00080bad 	.word	0x00080bad

00080c7c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80c7c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80c7e:	4802      	ldr	r0, [pc, #8]	; (80c88 <PIOD_Handler+0xc>)
   80c80:	210e      	movs	r1, #14
   80c82:	4b02      	ldr	r3, [pc, #8]	; (80c8c <PIOD_Handler+0x10>)
   80c84:	4798      	blx	r3
   80c86:	bd08      	pop	{r3, pc}
   80c88:	400e1400 	.word	0x400e1400
   80c8c:	00080bad 	.word	0x00080bad

00080c90 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c90:	282c      	cmp	r0, #44	; 0x2c
   80c92:	d820      	bhi.n	80cd6 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80c94:	281f      	cmp	r0, #31
   80c96:	d80d      	bhi.n	80cb4 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c98:	4b12      	ldr	r3, [pc, #72]	; (80ce4 <pmc_enable_periph_clk+0x54>)
   80c9a:	699a      	ldr	r2, [r3, #24]
   80c9c:	2301      	movs	r3, #1
   80c9e:	4083      	lsls	r3, r0
   80ca0:	401a      	ands	r2, r3
   80ca2:	4293      	cmp	r3, r2
   80ca4:	d019      	beq.n	80cda <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80ca6:	2301      	movs	r3, #1
   80ca8:	fa03 f000 	lsl.w	r0, r3, r0
   80cac:	4b0d      	ldr	r3, [pc, #52]	; (80ce4 <pmc_enable_periph_clk+0x54>)
   80cae:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80cb0:	2000      	movs	r0, #0
   80cb2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80cb4:	4b0b      	ldr	r3, [pc, #44]	; (80ce4 <pmc_enable_periph_clk+0x54>)
   80cb6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80cba:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80cbc:	2301      	movs	r3, #1
   80cbe:	4083      	lsls	r3, r0
   80cc0:	401a      	ands	r2, r3
   80cc2:	4293      	cmp	r3, r2
   80cc4:	d00b      	beq.n	80cde <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80cc6:	2301      	movs	r3, #1
   80cc8:	fa03 f000 	lsl.w	r0, r3, r0
   80ccc:	4b05      	ldr	r3, [pc, #20]	; (80ce4 <pmc_enable_periph_clk+0x54>)
   80cce:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80cd2:	2000      	movs	r0, #0
   80cd4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80cd6:	2001      	movs	r0, #1
   80cd8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80cda:	2000      	movs	r0, #0
   80cdc:	4770      	bx	lr
   80cde:	2000      	movs	r0, #0
}
   80ce0:	4770      	bx	lr
   80ce2:	bf00      	nop
   80ce4:	400e0600 	.word	0x400e0600

00080ce8 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80ce8:	b4f0      	push	{r4, r5, r6, r7}
   80cea:	b08c      	sub	sp, #48	; 0x30
   80cec:	4607      	mov	r7, r0
   80cee:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80cf0:	ac01      	add	r4, sp, #4
   80cf2:	4d12      	ldr	r5, [pc, #72]	; (80d3c <pwm_clocks_generate+0x54>)
   80cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80cfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80d00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80d04:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80d06:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80d08:	f852 4f04 	ldr.w	r4, [r2, #4]!
   80d0c:	fbb6 f4f4 	udiv	r4, r6, r4
   80d10:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80d14:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   80d18:	d903      	bls.n	80d22 <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   80d1a:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80d1c:	2b0b      	cmp	r3, #11
   80d1e:	d1f3      	bne.n	80d08 <pwm_clocks_generate+0x20>
   80d20:	e004      	b.n	80d2c <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80d22:	2b0a      	cmp	r3, #10
   80d24:	d805      	bhi.n	80d32 <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   80d26:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   80d2a:	e004      	b.n	80d36 <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80d2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80d30:	e001      	b.n	80d36 <pwm_clocks_generate+0x4e>
   80d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   80d36:	b00c      	add	sp, #48	; 0x30
   80d38:	bcf0      	pop	{r4, r5, r6, r7}
   80d3a:	4770      	bx	lr
   80d3c:	00083f60 	.word	0x00083f60

00080d40 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80d40:	b570      	push	{r4, r5, r6, lr}
   80d42:	4606      	mov	r6, r0
   80d44:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80d46:	6808      	ldr	r0, [r1, #0]
   80d48:	b140      	cbz	r0, 80d5c <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80d4a:	6889      	ldr	r1, [r1, #8]
   80d4c:	4b0b      	ldr	r3, [pc, #44]	; (80d7c <pwm_init+0x3c>)
   80d4e:	4798      	blx	r3
   80d50:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80d56:	4298      	cmp	r0, r3
   80d58:	d101      	bne.n	80d5e <pwm_init+0x1e>
   80d5a:	e00e      	b.n	80d7a <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80d5c:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80d5e:	6860      	ldr	r0, [r4, #4]
   80d60:	b140      	cbz	r0, 80d74 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80d62:	68a1      	ldr	r1, [r4, #8]
   80d64:	4b05      	ldr	r3, [pc, #20]	; (80d7c <pwm_init+0x3c>)
   80d66:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80d6c:	4298      	cmp	r0, r3
   80d6e:	d004      	beq.n	80d7a <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80d70:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80d74:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80d76:	2000      	movs	r0, #0
   80d78:	bd70      	pop	{r4, r5, r6, pc}
}
   80d7a:	bd70      	pop	{r4, r5, r6, pc}
   80d7c:	00080ce9 	.word	0x00080ce9

00080d80 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80d80:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80d82:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80d84:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80d86:	684a      	ldr	r2, [r1, #4]
   80d88:	f002 020f 	and.w	r2, r2, #15
   80d8c:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80d8e:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80d90:	432c      	orrs	r4, r5
   80d92:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   80d94:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80d98:	7d8a      	ldrb	r2, [r1, #22]
   80d9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80d9e:	7dca      	ldrb	r2, [r1, #23]
   80da0:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80da4:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80da6:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   80daa:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80dae:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80db2:	68cc      	ldr	r4, [r1, #12]
   80db4:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80db8:	690c      	ldr	r4, [r1, #16]
   80dba:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80dbe:	7d8a      	ldrb	r2, [r1, #22]
   80dc0:	b13a      	cbz	r2, 80dd2 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80dc2:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80dc4:	8b4a      	ldrh	r2, [r1, #26]
   80dc6:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80dca:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   80dce:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80dd2:	6c85      	ldr	r5, [r0, #72]	; 0x48
   80dd4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80dd8:	409a      	lsls	r2, r3
   80dda:	43d2      	mvns	r2, r2
   80ddc:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80dde:	7fce      	ldrb	r6, [r1, #31]
   80de0:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80de2:	7f8c      	ldrb	r4, [r1, #30]
   80de4:	409c      	lsls	r4, r3
   80de6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80dea:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80dec:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80dee:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80df0:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80df2:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   80df6:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80df8:	f891 4020 	ldrb.w	r4, [r1, #32]
   80dfc:	409c      	lsls	r4, r3
   80dfe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80e02:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80e04:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80e06:	2201      	movs	r2, #1
   80e08:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80e0a:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80e0e:	b11c      	cbz	r4, 80e18 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80e10:	6a04      	ldr	r4, [r0, #32]
   80e12:	4314      	orrs	r4, r2
   80e14:	6204      	str	r4, [r0, #32]
   80e16:	e003      	b.n	80e20 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80e18:	6a04      	ldr	r4, [r0, #32]
   80e1a:	ea24 0402 	bic.w	r4, r4, r2
   80e1e:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80e20:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80e24:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80e26:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80e28:	bf0c      	ite	eq
   80e2a:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80e2c:	4394      	bicne	r4, r2
   80e2e:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80e30:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80e34:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80e36:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80e38:	bf0c      	ite	eq
   80e3a:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80e3e:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80e42:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80e44:	2b03      	cmp	r3, #3
   80e46:	d80c      	bhi.n	80e62 <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80e48:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80e4a:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80e4c:	22ff      	movs	r2, #255	; 0xff
   80e4e:	409a      	lsls	r2, r3
   80e50:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80e54:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80e58:	fa01 f303 	lsl.w	r3, r1, r3
   80e5c:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80e5e:	66c3      	str	r3, [r0, #108]	; 0x6c
   80e60:	e00c      	b.n	80e7c <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   80e62:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80e64:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80e66:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80e68:	22ff      	movs	r2, #255	; 0xff
   80e6a:	409a      	lsls	r2, r3
   80e6c:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80e70:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80e74:	fa01 f303 	lsl.w	r3, r1, r3
   80e78:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80e7a:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   80e7c:	2000      	movs	r0, #0
   80e7e:	bc70      	pop	{r4, r5, r6}
   80e80:	4770      	bx	lr
   80e82:	bf00      	nop

00080e84 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80e84:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   80e86:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80e88:	690b      	ldr	r3, [r1, #16]
   80e8a:	4293      	cmp	r3, r2
   80e8c:	d306      	bcc.n	80e9c <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80e8e:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80e90:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80e94:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   80e98:	2000      	movs	r0, #0
   80e9a:	e001      	b.n	80ea0 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80e9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
   80ea4:	4770      	bx	lr
   80ea6:	bf00      	nop

00080ea8 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80ea8:	2301      	movs	r3, #1
   80eaa:	fa03 f101 	lsl.w	r1, r3, r1
   80eae:	6041      	str	r1, [r0, #4]
   80eb0:	4770      	bx	lr
   80eb2:	bf00      	nop

00080eb4 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80eb4:	2301      	movs	r3, #1
   80eb6:	fa03 f101 	lsl.w	r1, r3, r1
   80eba:	6081      	str	r1, [r0, #8]
   80ebc:	4770      	bx	lr
   80ebe:	bf00      	nop

00080ec0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80ec0:	e7fe      	b.n	80ec0 <Dummy_Handler>
   80ec2:	bf00      	nop

00080ec4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80ec4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80ec6:	4b1e      	ldr	r3, [pc, #120]	; (80f40 <Reset_Handler+0x7c>)
   80ec8:	4a1e      	ldr	r2, [pc, #120]	; (80f44 <Reset_Handler+0x80>)
   80eca:	429a      	cmp	r2, r3
   80ecc:	d003      	beq.n	80ed6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80ece:	4b1e      	ldr	r3, [pc, #120]	; (80f48 <Reset_Handler+0x84>)
   80ed0:	4a1b      	ldr	r2, [pc, #108]	; (80f40 <Reset_Handler+0x7c>)
   80ed2:	429a      	cmp	r2, r3
   80ed4:	d304      	bcc.n	80ee0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ed6:	4b1d      	ldr	r3, [pc, #116]	; (80f4c <Reset_Handler+0x88>)
   80ed8:	4a1d      	ldr	r2, [pc, #116]	; (80f50 <Reset_Handler+0x8c>)
   80eda:	429a      	cmp	r2, r3
   80edc:	d30f      	bcc.n	80efe <Reset_Handler+0x3a>
   80ede:	e01a      	b.n	80f16 <Reset_Handler+0x52>
   80ee0:	4b1c      	ldr	r3, [pc, #112]	; (80f54 <Reset_Handler+0x90>)
   80ee2:	4c1d      	ldr	r4, [pc, #116]	; (80f58 <Reset_Handler+0x94>)
   80ee4:	1ae4      	subs	r4, r4, r3
   80ee6:	f024 0403 	bic.w	r4, r4, #3
   80eea:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80eec:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80eee:	4814      	ldr	r0, [pc, #80]	; (80f40 <Reset_Handler+0x7c>)
   80ef0:	4914      	ldr	r1, [pc, #80]	; (80f44 <Reset_Handler+0x80>)
   80ef2:	585a      	ldr	r2, [r3, r1]
   80ef4:	501a      	str	r2, [r3, r0]
   80ef6:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80ef8:	42a3      	cmp	r3, r4
   80efa:	d1fa      	bne.n	80ef2 <Reset_Handler+0x2e>
   80efc:	e7eb      	b.n	80ed6 <Reset_Handler+0x12>
   80efe:	4b17      	ldr	r3, [pc, #92]	; (80f5c <Reset_Handler+0x98>)
   80f00:	4917      	ldr	r1, [pc, #92]	; (80f60 <Reset_Handler+0x9c>)
   80f02:	1ac9      	subs	r1, r1, r3
   80f04:	f021 0103 	bic.w	r1, r1, #3
   80f08:	1d1a      	adds	r2, r3, #4
   80f0a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80f0c:	2200      	movs	r2, #0
   80f0e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80f12:	428b      	cmp	r3, r1
   80f14:	d1fb      	bne.n	80f0e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80f16:	4a13      	ldr	r2, [pc, #76]	; (80f64 <Reset_Handler+0xa0>)
   80f18:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80f20:	4911      	ldr	r1, [pc, #68]	; (80f68 <Reset_Handler+0xa4>)
   80f22:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80f24:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80f28:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80f2c:	d203      	bcs.n	80f36 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80f2e:	688a      	ldr	r2, [r1, #8]
   80f30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80f34:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80f36:	4b0d      	ldr	r3, [pc, #52]	; (80f6c <Reset_Handler+0xa8>)
   80f38:	4798      	blx	r3

	/* Branch to main function */
	main();
   80f3a:	4b0d      	ldr	r3, [pc, #52]	; (80f70 <Reset_Handler+0xac>)
   80f3c:	4798      	blx	r3
   80f3e:	e7fe      	b.n	80f3e <Reset_Handler+0x7a>
   80f40:	20070000 	.word	0x20070000
   80f44:	00084010 	.word	0x00084010
   80f48:	200709a4 	.word	0x200709a4
   80f4c:	20070b70 	.word	0x20070b70
   80f50:	200709a4 	.word	0x200709a4
   80f54:	20070004 	.word	0x20070004
   80f58:	200709a7 	.word	0x200709a7
   80f5c:	200709a0 	.word	0x200709a0
   80f60:	20070b6b 	.word	0x20070b6b
   80f64:	00080000 	.word	0x00080000
   80f68:	e000ed00 	.word	0xe000ed00
   80f6c:	00080fc5 	.word	0x00080fc5
   80f70:	00080149 	.word	0x00080149

00080f74 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80f74:	4b09      	ldr	r3, [pc, #36]	; (80f9c <_sbrk+0x28>)
   80f76:	681b      	ldr	r3, [r3, #0]
   80f78:	b913      	cbnz	r3, 80f80 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80f7a:	4a09      	ldr	r2, [pc, #36]	; (80fa0 <_sbrk+0x2c>)
   80f7c:	4b07      	ldr	r3, [pc, #28]	; (80f9c <_sbrk+0x28>)
   80f7e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80f80:	4b06      	ldr	r3, [pc, #24]	; (80f9c <_sbrk+0x28>)
   80f82:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80f84:	181a      	adds	r2, r3, r0
   80f86:	4907      	ldr	r1, [pc, #28]	; (80fa4 <_sbrk+0x30>)
   80f88:	4291      	cmp	r1, r2
   80f8a:	db04      	blt.n	80f96 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80f8c:	4610      	mov	r0, r2
   80f8e:	4a03      	ldr	r2, [pc, #12]	; (80f9c <_sbrk+0x28>)
   80f90:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80f92:	4618      	mov	r0, r3
   80f94:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80f96:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80f9a:	4770      	bx	lr
   80f9c:	20070ad8 	.word	0x20070ad8
   80fa0:	20072b70 	.word	0x20072b70
   80fa4:	20087ffc 	.word	0x20087ffc

00080fa8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80fa8:	f04f 30ff 	mov.w	r0, #4294967295
   80fac:	4770      	bx	lr
   80fae:	bf00      	nop

00080fb0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80fb4:	604b      	str	r3, [r1, #4]

	return 0;
}
   80fb6:	2000      	movs	r0, #0
   80fb8:	4770      	bx	lr
   80fba:	bf00      	nop

00080fbc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80fbc:	2001      	movs	r0, #1
   80fbe:	4770      	bx	lr

00080fc0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80fc0:	2000      	movs	r0, #0
   80fc2:	4770      	bx	lr

00080fc4 <__libc_init_array>:
   80fc4:	b570      	push	{r4, r5, r6, lr}
   80fc6:	4e0f      	ldr	r6, [pc, #60]	; (81004 <__libc_init_array+0x40>)
   80fc8:	4d0f      	ldr	r5, [pc, #60]	; (81008 <__libc_init_array+0x44>)
   80fca:	1b76      	subs	r6, r6, r5
   80fcc:	10b6      	asrs	r6, r6, #2
   80fce:	d007      	beq.n	80fe0 <__libc_init_array+0x1c>
   80fd0:	3d04      	subs	r5, #4
   80fd2:	2400      	movs	r4, #0
   80fd4:	3401      	adds	r4, #1
   80fd6:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80fda:	4798      	blx	r3
   80fdc:	42a6      	cmp	r6, r4
   80fde:	d1f9      	bne.n	80fd4 <__libc_init_array+0x10>
   80fe0:	4e0a      	ldr	r6, [pc, #40]	; (8100c <__libc_init_array+0x48>)
   80fe2:	4d0b      	ldr	r5, [pc, #44]	; (81010 <__libc_init_array+0x4c>)
   80fe4:	f002 fffe 	bl	83fe4 <_init>
   80fe8:	1b76      	subs	r6, r6, r5
   80fea:	10b6      	asrs	r6, r6, #2
   80fec:	d008      	beq.n	81000 <__libc_init_array+0x3c>
   80fee:	3d04      	subs	r5, #4
   80ff0:	2400      	movs	r4, #0
   80ff2:	3401      	adds	r4, #1
   80ff4:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80ff8:	4798      	blx	r3
   80ffa:	42a6      	cmp	r6, r4
   80ffc:	d1f9      	bne.n	80ff2 <__libc_init_array+0x2e>
   80ffe:	bd70      	pop	{r4, r5, r6, pc}
   81000:	bd70      	pop	{r4, r5, r6, pc}
   81002:	bf00      	nop
   81004:	00083ff0 	.word	0x00083ff0
   81008:	00083ff0 	.word	0x00083ff0
   8100c:	00083ff8 	.word	0x00083ff8
   81010:	00083ff0 	.word	0x00083ff0

00081014 <iprintf>:
   81014:	b40f      	push	{r0, r1, r2, r3}
   81016:	b510      	push	{r4, lr}
   81018:	4b07      	ldr	r3, [pc, #28]	; (81038 <iprintf+0x24>)
   8101a:	b082      	sub	sp, #8
   8101c:	ac04      	add	r4, sp, #16
   8101e:	f854 2b04 	ldr.w	r2, [r4], #4
   81022:	6818      	ldr	r0, [r3, #0]
   81024:	4623      	mov	r3, r4
   81026:	6881      	ldr	r1, [r0, #8]
   81028:	9401      	str	r4, [sp, #4]
   8102a:	f000 f945 	bl	812b8 <_vfiprintf_r>
   8102e:	b002      	add	sp, #8
   81030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81034:	b004      	add	sp, #16
   81036:	4770      	bx	lr
   81038:	20070568 	.word	0x20070568

0008103c <memset>:
   8103c:	b4f0      	push	{r4, r5, r6, r7}
   8103e:	0784      	lsls	r4, r0, #30
   81040:	d043      	beq.n	810ca <memset+0x8e>
   81042:	1e54      	subs	r4, r2, #1
   81044:	2a00      	cmp	r2, #0
   81046:	d03e      	beq.n	810c6 <memset+0x8a>
   81048:	b2cd      	uxtb	r5, r1
   8104a:	4603      	mov	r3, r0
   8104c:	e003      	b.n	81056 <memset+0x1a>
   8104e:	1e62      	subs	r2, r4, #1
   81050:	2c00      	cmp	r4, #0
   81052:	d038      	beq.n	810c6 <memset+0x8a>
   81054:	4614      	mov	r4, r2
   81056:	f803 5b01 	strb.w	r5, [r3], #1
   8105a:	079a      	lsls	r2, r3, #30
   8105c:	d1f7      	bne.n	8104e <memset+0x12>
   8105e:	2c03      	cmp	r4, #3
   81060:	d92a      	bls.n	810b8 <memset+0x7c>
   81062:	b2cd      	uxtb	r5, r1
   81064:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81068:	2c0f      	cmp	r4, #15
   8106a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8106e:	d915      	bls.n	8109c <memset+0x60>
   81070:	f1a4 0710 	sub.w	r7, r4, #16
   81074:	093f      	lsrs	r7, r7, #4
   81076:	f103 0610 	add.w	r6, r3, #16
   8107a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8107e:	461a      	mov	r2, r3
   81080:	6015      	str	r5, [r2, #0]
   81082:	6055      	str	r5, [r2, #4]
   81084:	6095      	str	r5, [r2, #8]
   81086:	60d5      	str	r5, [r2, #12]
   81088:	3210      	adds	r2, #16
   8108a:	42b2      	cmp	r2, r6
   8108c:	d1f8      	bne.n	81080 <memset+0x44>
   8108e:	f004 040f 	and.w	r4, r4, #15
   81092:	3701      	adds	r7, #1
   81094:	2c03      	cmp	r4, #3
   81096:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8109a:	d90d      	bls.n	810b8 <memset+0x7c>
   8109c:	461e      	mov	r6, r3
   8109e:	4622      	mov	r2, r4
   810a0:	3a04      	subs	r2, #4
   810a2:	2a03      	cmp	r2, #3
   810a4:	f846 5b04 	str.w	r5, [r6], #4
   810a8:	d8fa      	bhi.n	810a0 <memset+0x64>
   810aa:	1f22      	subs	r2, r4, #4
   810ac:	f022 0203 	bic.w	r2, r2, #3
   810b0:	3204      	adds	r2, #4
   810b2:	4413      	add	r3, r2
   810b4:	f004 0403 	and.w	r4, r4, #3
   810b8:	b12c      	cbz	r4, 810c6 <memset+0x8a>
   810ba:	b2c9      	uxtb	r1, r1
   810bc:	441c      	add	r4, r3
   810be:	f803 1b01 	strb.w	r1, [r3], #1
   810c2:	42a3      	cmp	r3, r4
   810c4:	d1fb      	bne.n	810be <memset+0x82>
   810c6:	bcf0      	pop	{r4, r5, r6, r7}
   810c8:	4770      	bx	lr
   810ca:	4614      	mov	r4, r2
   810cc:	4603      	mov	r3, r0
   810ce:	e7c6      	b.n	8105e <memset+0x22>

000810d0 <setbuf>:
   810d0:	2900      	cmp	r1, #0
   810d2:	bf0c      	ite	eq
   810d4:	2202      	moveq	r2, #2
   810d6:	2200      	movne	r2, #0
   810d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   810dc:	f000 b800 	b.w	810e0 <setvbuf>

000810e0 <setvbuf>:
   810e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810e4:	4d3c      	ldr	r5, [pc, #240]	; (811d8 <setvbuf+0xf8>)
   810e6:	4604      	mov	r4, r0
   810e8:	682d      	ldr	r5, [r5, #0]
   810ea:	4688      	mov	r8, r1
   810ec:	4616      	mov	r6, r2
   810ee:	461f      	mov	r7, r3
   810f0:	b115      	cbz	r5, 810f8 <setvbuf+0x18>
   810f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   810f4:	2b00      	cmp	r3, #0
   810f6:	d04f      	beq.n	81198 <setvbuf+0xb8>
   810f8:	2e02      	cmp	r6, #2
   810fa:	d830      	bhi.n	8115e <setvbuf+0x7e>
   810fc:	2f00      	cmp	r7, #0
   810fe:	db2e      	blt.n	8115e <setvbuf+0x7e>
   81100:	4628      	mov	r0, r5
   81102:	4621      	mov	r1, r4
   81104:	f001 f856 	bl	821b4 <_fflush_r>
   81108:	89a3      	ldrh	r3, [r4, #12]
   8110a:	2200      	movs	r2, #0
   8110c:	6062      	str	r2, [r4, #4]
   8110e:	61a2      	str	r2, [r4, #24]
   81110:	061a      	lsls	r2, r3, #24
   81112:	d428      	bmi.n	81166 <setvbuf+0x86>
   81114:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81118:	b29b      	uxth	r3, r3
   8111a:	2e02      	cmp	r6, #2
   8111c:	81a3      	strh	r3, [r4, #12]
   8111e:	d02d      	beq.n	8117c <setvbuf+0x9c>
   81120:	f1b8 0f00 	cmp.w	r8, #0
   81124:	d03c      	beq.n	811a0 <setvbuf+0xc0>
   81126:	2e01      	cmp	r6, #1
   81128:	d013      	beq.n	81152 <setvbuf+0x72>
   8112a:	b29b      	uxth	r3, r3
   8112c:	f003 0008 	and.w	r0, r3, #8
   81130:	4a2a      	ldr	r2, [pc, #168]	; (811dc <setvbuf+0xfc>)
   81132:	b280      	uxth	r0, r0
   81134:	63ea      	str	r2, [r5, #60]	; 0x3c
   81136:	f8c4 8000 	str.w	r8, [r4]
   8113a:	f8c4 8010 	str.w	r8, [r4, #16]
   8113e:	6167      	str	r7, [r4, #20]
   81140:	b178      	cbz	r0, 81162 <setvbuf+0x82>
   81142:	f013 0f03 	tst.w	r3, #3
   81146:	bf18      	it	ne
   81148:	2700      	movne	r7, #0
   8114a:	60a7      	str	r7, [r4, #8]
   8114c:	2000      	movs	r0, #0
   8114e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81152:	f043 0301 	orr.w	r3, r3, #1
   81156:	427a      	negs	r2, r7
   81158:	81a3      	strh	r3, [r4, #12]
   8115a:	61a2      	str	r2, [r4, #24]
   8115c:	e7e5      	b.n	8112a <setvbuf+0x4a>
   8115e:	f04f 30ff 	mov.w	r0, #4294967295
   81162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81166:	4628      	mov	r0, r5
   81168:	6921      	ldr	r1, [r4, #16]
   8116a:	f001 f983 	bl	82474 <_free_r>
   8116e:	89a3      	ldrh	r3, [r4, #12]
   81170:	2e02      	cmp	r6, #2
   81172:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81176:	b29b      	uxth	r3, r3
   81178:	81a3      	strh	r3, [r4, #12]
   8117a:	d1d1      	bne.n	81120 <setvbuf+0x40>
   8117c:	2000      	movs	r0, #0
   8117e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81182:	f043 0302 	orr.w	r3, r3, #2
   81186:	2500      	movs	r5, #0
   81188:	2101      	movs	r1, #1
   8118a:	81a3      	strh	r3, [r4, #12]
   8118c:	60a5      	str	r5, [r4, #8]
   8118e:	6022      	str	r2, [r4, #0]
   81190:	6122      	str	r2, [r4, #16]
   81192:	6161      	str	r1, [r4, #20]
   81194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81198:	4628      	mov	r0, r5
   8119a:	f001 f827 	bl	821ec <__sinit>
   8119e:	e7ab      	b.n	810f8 <setvbuf+0x18>
   811a0:	2f00      	cmp	r7, #0
   811a2:	bf08      	it	eq
   811a4:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   811a8:	4638      	mov	r0, r7
   811aa:	f001 fc59 	bl	82a60 <malloc>
   811ae:	4680      	mov	r8, r0
   811b0:	b128      	cbz	r0, 811be <setvbuf+0xde>
   811b2:	89a3      	ldrh	r3, [r4, #12]
   811b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   811b8:	b29b      	uxth	r3, r3
   811ba:	81a3      	strh	r3, [r4, #12]
   811bc:	e7b3      	b.n	81126 <setvbuf+0x46>
   811be:	f44f 6080 	mov.w	r0, #1024	; 0x400
   811c2:	f001 fc4d 	bl	82a60 <malloc>
   811c6:	4680      	mov	r8, r0
   811c8:	b918      	cbnz	r0, 811d2 <setvbuf+0xf2>
   811ca:	89a3      	ldrh	r3, [r4, #12]
   811cc:	f04f 30ff 	mov.w	r0, #4294967295
   811d0:	e7d5      	b.n	8117e <setvbuf+0x9e>
   811d2:	f44f 6780 	mov.w	r7, #1024	; 0x400
   811d6:	e7ec      	b.n	811b2 <setvbuf+0xd2>
   811d8:	20070568 	.word	0x20070568
   811dc:	000821e1 	.word	0x000821e1

000811e0 <strlen>:
   811e0:	f020 0103 	bic.w	r1, r0, #3
   811e4:	f010 0003 	ands.w	r0, r0, #3
   811e8:	f1c0 0000 	rsb	r0, r0, #0
   811ec:	f851 3b04 	ldr.w	r3, [r1], #4
   811f0:	f100 0c04 	add.w	ip, r0, #4
   811f4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   811f8:	f06f 0200 	mvn.w	r2, #0
   811fc:	bf1c      	itt	ne
   811fe:	fa22 f20c 	lsrne.w	r2, r2, ip
   81202:	4313      	orrne	r3, r2
   81204:	f04f 0c01 	mov.w	ip, #1
   81208:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8120c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81210:	eba3 020c 	sub.w	r2, r3, ip
   81214:	ea22 0203 	bic.w	r2, r2, r3
   81218:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8121c:	bf04      	itt	eq
   8121e:	f851 3b04 	ldreq.w	r3, [r1], #4
   81222:	3004      	addeq	r0, #4
   81224:	d0f4      	beq.n	81210 <strlen+0x30>
   81226:	f013 0fff 	tst.w	r3, #255	; 0xff
   8122a:	bf1f      	itttt	ne
   8122c:	3001      	addne	r0, #1
   8122e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   81232:	3001      	addne	r0, #1
   81234:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   81238:	bf18      	it	ne
   8123a:	3001      	addne	r0, #1
   8123c:	4770      	bx	lr
   8123e:	bf00      	nop

00081240 <__sprint_r.part.0>:
   81240:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81246:	049c      	lsls	r4, r3, #18
   81248:	460e      	mov	r6, r1
   8124a:	4680      	mov	r8, r0
   8124c:	4691      	mov	r9, r2
   8124e:	d52a      	bpl.n	812a6 <__sprint_r.part.0+0x66>
   81250:	6893      	ldr	r3, [r2, #8]
   81252:	6812      	ldr	r2, [r2, #0]
   81254:	f102 0a08 	add.w	sl, r2, #8
   81258:	b31b      	cbz	r3, 812a2 <__sprint_r.part.0+0x62>
   8125a:	e91a 00a0 	ldmdb	sl, {r5, r7}
   8125e:	08bf      	lsrs	r7, r7, #2
   81260:	d017      	beq.n	81292 <__sprint_r.part.0+0x52>
   81262:	3d04      	subs	r5, #4
   81264:	2400      	movs	r4, #0
   81266:	e001      	b.n	8126c <__sprint_r.part.0+0x2c>
   81268:	42a7      	cmp	r7, r4
   8126a:	d010      	beq.n	8128e <__sprint_r.part.0+0x4e>
   8126c:	4640      	mov	r0, r8
   8126e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81272:	4632      	mov	r2, r6
   81274:	f001 f850 	bl	82318 <_fputwc_r>
   81278:	1c43      	adds	r3, r0, #1
   8127a:	f104 0401 	add.w	r4, r4, #1
   8127e:	d1f3      	bne.n	81268 <__sprint_r.part.0+0x28>
   81280:	2300      	movs	r3, #0
   81282:	f8c9 3008 	str.w	r3, [r9, #8]
   81286:	f8c9 3004 	str.w	r3, [r9, #4]
   8128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8128e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81292:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81296:	f8c9 3008 	str.w	r3, [r9, #8]
   8129a:	f10a 0a08 	add.w	sl, sl, #8
   8129e:	2b00      	cmp	r3, #0
   812a0:	d1db      	bne.n	8125a <__sprint_r.part.0+0x1a>
   812a2:	2000      	movs	r0, #0
   812a4:	e7ec      	b.n	81280 <__sprint_r.part.0+0x40>
   812a6:	f001 f9b1 	bl	8260c <__sfvwrite_r>
   812aa:	2300      	movs	r3, #0
   812ac:	f8c9 3008 	str.w	r3, [r9, #8]
   812b0:	f8c9 3004 	str.w	r3, [r9, #4]
   812b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000812b8 <_vfiprintf_r>:
   812b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   812bc:	b0b1      	sub	sp, #196	; 0xc4
   812be:	461c      	mov	r4, r3
   812c0:	9102      	str	r1, [sp, #8]
   812c2:	4690      	mov	r8, r2
   812c4:	9308      	str	r3, [sp, #32]
   812c6:	9006      	str	r0, [sp, #24]
   812c8:	b118      	cbz	r0, 812d2 <_vfiprintf_r+0x1a>
   812ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   812cc:	2b00      	cmp	r3, #0
   812ce:	f000 80e8 	beq.w	814a2 <_vfiprintf_r+0x1ea>
   812d2:	9d02      	ldr	r5, [sp, #8]
   812d4:	89ab      	ldrh	r3, [r5, #12]
   812d6:	b29a      	uxth	r2, r3
   812d8:	0490      	lsls	r0, r2, #18
   812da:	d407      	bmi.n	812ec <_vfiprintf_r+0x34>
   812dc:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   812de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   812e2:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   812e6:	81ab      	strh	r3, [r5, #12]
   812e8:	b29a      	uxth	r2, r3
   812ea:	6669      	str	r1, [r5, #100]	; 0x64
   812ec:	0711      	lsls	r1, r2, #28
   812ee:	f140 80b7 	bpl.w	81460 <_vfiprintf_r+0x1a8>
   812f2:	f8dd b008 	ldr.w	fp, [sp, #8]
   812f6:	f8db 3010 	ldr.w	r3, [fp, #16]
   812fa:	2b00      	cmp	r3, #0
   812fc:	f000 80b0 	beq.w	81460 <_vfiprintf_r+0x1a8>
   81300:	f002 021a 	and.w	r2, r2, #26
   81304:	2a0a      	cmp	r2, #10
   81306:	f000 80b7 	beq.w	81478 <_vfiprintf_r+0x1c0>
   8130a:	2300      	movs	r3, #0
   8130c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81310:	930a      	str	r3, [sp, #40]	; 0x28
   81312:	9315      	str	r3, [sp, #84]	; 0x54
   81314:	9314      	str	r3, [sp, #80]	; 0x50
   81316:	9309      	str	r3, [sp, #36]	; 0x24
   81318:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   8131c:	464e      	mov	r6, r9
   8131e:	f898 3000 	ldrb.w	r3, [r8]
   81322:	2b00      	cmp	r3, #0
   81324:	f000 84c8 	beq.w	81cb8 <_vfiprintf_r+0xa00>
   81328:	2b25      	cmp	r3, #37	; 0x25
   8132a:	f000 84c5 	beq.w	81cb8 <_vfiprintf_r+0xa00>
   8132e:	f108 0201 	add.w	r2, r8, #1
   81332:	e001      	b.n	81338 <_vfiprintf_r+0x80>
   81334:	2b25      	cmp	r3, #37	; 0x25
   81336:	d004      	beq.n	81342 <_vfiprintf_r+0x8a>
   81338:	7813      	ldrb	r3, [r2, #0]
   8133a:	4614      	mov	r4, r2
   8133c:	3201      	adds	r2, #1
   8133e:	2b00      	cmp	r3, #0
   81340:	d1f8      	bne.n	81334 <_vfiprintf_r+0x7c>
   81342:	ebc8 0504 	rsb	r5, r8, r4
   81346:	b195      	cbz	r5, 8136e <_vfiprintf_r+0xb6>
   81348:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8134a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8134c:	3301      	adds	r3, #1
   8134e:	442a      	add	r2, r5
   81350:	2b07      	cmp	r3, #7
   81352:	f8c6 8000 	str.w	r8, [r6]
   81356:	6075      	str	r5, [r6, #4]
   81358:	9215      	str	r2, [sp, #84]	; 0x54
   8135a:	9314      	str	r3, [sp, #80]	; 0x50
   8135c:	dd7b      	ble.n	81456 <_vfiprintf_r+0x19e>
   8135e:	2a00      	cmp	r2, #0
   81360:	f040 84d5 	bne.w	81d0e <_vfiprintf_r+0xa56>
   81364:	9809      	ldr	r0, [sp, #36]	; 0x24
   81366:	9214      	str	r2, [sp, #80]	; 0x50
   81368:	4428      	add	r0, r5
   8136a:	464e      	mov	r6, r9
   8136c:	9009      	str	r0, [sp, #36]	; 0x24
   8136e:	7823      	ldrb	r3, [r4, #0]
   81370:	2b00      	cmp	r3, #0
   81372:	f000 83ed 	beq.w	81b50 <_vfiprintf_r+0x898>
   81376:	2100      	movs	r1, #0
   81378:	f04f 0200 	mov.w	r2, #0
   8137c:	f04f 3cff 	mov.w	ip, #4294967295
   81380:	7863      	ldrb	r3, [r4, #1]
   81382:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   81386:	9104      	str	r1, [sp, #16]
   81388:	468a      	mov	sl, r1
   8138a:	f104 0801 	add.w	r8, r4, #1
   8138e:	4608      	mov	r0, r1
   81390:	4665      	mov	r5, ip
   81392:	f108 0801 	add.w	r8, r8, #1
   81396:	f1a3 0220 	sub.w	r2, r3, #32
   8139a:	2a58      	cmp	r2, #88	; 0x58
   8139c:	f200 82d9 	bhi.w	81952 <_vfiprintf_r+0x69a>
   813a0:	e8df f012 	tbh	[pc, r2, lsl #1]
   813a4:	02d702cb 	.word	0x02d702cb
   813a8:	02d202d7 	.word	0x02d202d7
   813ac:	02d702d7 	.word	0x02d702d7
   813b0:	02d702d7 	.word	0x02d702d7
   813b4:	02d702d7 	.word	0x02d702d7
   813b8:	028f0282 	.word	0x028f0282
   813bc:	008402d7 	.word	0x008402d7
   813c0:	02d70293 	.word	0x02d70293
   813c4:	0196012b 	.word	0x0196012b
   813c8:	01960196 	.word	0x01960196
   813cc:	01960196 	.word	0x01960196
   813d0:	01960196 	.word	0x01960196
   813d4:	01960196 	.word	0x01960196
   813d8:	02d702d7 	.word	0x02d702d7
   813dc:	02d702d7 	.word	0x02d702d7
   813e0:	02d702d7 	.word	0x02d702d7
   813e4:	02d702d7 	.word	0x02d702d7
   813e8:	02d702d7 	.word	0x02d702d7
   813ec:	02d70130 	.word	0x02d70130
   813f0:	02d702d7 	.word	0x02d702d7
   813f4:	02d702d7 	.word	0x02d702d7
   813f8:	02d702d7 	.word	0x02d702d7
   813fc:	02d702d7 	.word	0x02d702d7
   81400:	017b02d7 	.word	0x017b02d7
   81404:	02d702d7 	.word	0x02d702d7
   81408:	02d702d7 	.word	0x02d702d7
   8140c:	01a402d7 	.word	0x01a402d7
   81410:	02d702d7 	.word	0x02d702d7
   81414:	02d701bf 	.word	0x02d701bf
   81418:	02d702d7 	.word	0x02d702d7
   8141c:	02d702d7 	.word	0x02d702d7
   81420:	02d702d7 	.word	0x02d702d7
   81424:	02d702d7 	.word	0x02d702d7
   81428:	01e402d7 	.word	0x01e402d7
   8142c:	02d701fa 	.word	0x02d701fa
   81430:	02d702d7 	.word	0x02d702d7
   81434:	01fa0216 	.word	0x01fa0216
   81438:	02d702d7 	.word	0x02d702d7
   8143c:	02d7021b 	.word	0x02d7021b
   81440:	00890228 	.word	0x00890228
   81444:	027d0266 	.word	0x027d0266
   81448:	023a02d7 	.word	0x023a02d7
   8144c:	011902d7 	.word	0x011902d7
   81450:	02d702d7 	.word	0x02d702d7
   81454:	02af      	.short	0x02af
   81456:	3608      	adds	r6, #8
   81458:	9809      	ldr	r0, [sp, #36]	; 0x24
   8145a:	4428      	add	r0, r5
   8145c:	9009      	str	r0, [sp, #36]	; 0x24
   8145e:	e786      	b.n	8136e <_vfiprintf_r+0xb6>
   81460:	9806      	ldr	r0, [sp, #24]
   81462:	9902      	ldr	r1, [sp, #8]
   81464:	f000 fd90 	bl	81f88 <__swsetup_r>
   81468:	b9b0      	cbnz	r0, 81498 <_vfiprintf_r+0x1e0>
   8146a:	9d02      	ldr	r5, [sp, #8]
   8146c:	89aa      	ldrh	r2, [r5, #12]
   8146e:	f002 021a 	and.w	r2, r2, #26
   81472:	2a0a      	cmp	r2, #10
   81474:	f47f af49 	bne.w	8130a <_vfiprintf_r+0x52>
   81478:	f8dd b008 	ldr.w	fp, [sp, #8]
   8147c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81480:	2b00      	cmp	r3, #0
   81482:	f6ff af42 	blt.w	8130a <_vfiprintf_r+0x52>
   81486:	9806      	ldr	r0, [sp, #24]
   81488:	4659      	mov	r1, fp
   8148a:	4642      	mov	r2, r8
   8148c:	4623      	mov	r3, r4
   8148e:	f000 fd3d 	bl	81f0c <__sbprintf>
   81492:	b031      	add	sp, #196	; 0xc4
   81494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81498:	f04f 30ff 	mov.w	r0, #4294967295
   8149c:	b031      	add	sp, #196	; 0xc4
   8149e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814a2:	f000 fea3 	bl	821ec <__sinit>
   814a6:	e714      	b.n	812d2 <_vfiprintf_r+0x1a>
   814a8:	4240      	negs	r0, r0
   814aa:	9308      	str	r3, [sp, #32]
   814ac:	f04a 0a04 	orr.w	sl, sl, #4
   814b0:	f898 3000 	ldrb.w	r3, [r8]
   814b4:	e76d      	b.n	81392 <_vfiprintf_r+0xda>
   814b6:	f01a 0320 	ands.w	r3, sl, #32
   814ba:	9004      	str	r0, [sp, #16]
   814bc:	46ac      	mov	ip, r5
   814be:	f000 80f4 	beq.w	816aa <_vfiprintf_r+0x3f2>
   814c2:	f8dd b020 	ldr.w	fp, [sp, #32]
   814c6:	f10b 0307 	add.w	r3, fp, #7
   814ca:	f023 0307 	bic.w	r3, r3, #7
   814ce:	f103 0408 	add.w	r4, r3, #8
   814d2:	9408      	str	r4, [sp, #32]
   814d4:	e9d3 4500 	ldrd	r4, r5, [r3]
   814d8:	2300      	movs	r3, #0
   814da:	f04f 0000 	mov.w	r0, #0
   814de:	2100      	movs	r1, #0
   814e0:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   814e4:	f8cd c014 	str.w	ip, [sp, #20]
   814e8:	9107      	str	r1, [sp, #28]
   814ea:	f1bc 0f00 	cmp.w	ip, #0
   814ee:	bfa8      	it	ge
   814f0:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   814f4:	ea54 0205 	orrs.w	r2, r4, r5
   814f8:	f040 80ad 	bne.w	81656 <_vfiprintf_r+0x39e>
   814fc:	f1bc 0f00 	cmp.w	ip, #0
   81500:	f040 80a9 	bne.w	81656 <_vfiprintf_r+0x39e>
   81504:	2b00      	cmp	r3, #0
   81506:	f040 83c0 	bne.w	81c8a <_vfiprintf_r+0x9d2>
   8150a:	f01a 0f01 	tst.w	sl, #1
   8150e:	f000 83bc 	beq.w	81c8a <_vfiprintf_r+0x9d2>
   81512:	2330      	movs	r3, #48	; 0x30
   81514:	af30      	add	r7, sp, #192	; 0xc0
   81516:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8151a:	ebc7 0409 	rsb	r4, r7, r9
   8151e:	9405      	str	r4, [sp, #20]
   81520:	f8dd b014 	ldr.w	fp, [sp, #20]
   81524:	9c07      	ldr	r4, [sp, #28]
   81526:	45e3      	cmp	fp, ip
   81528:	bfb8      	it	lt
   8152a:	46e3      	movlt	fp, ip
   8152c:	f8cd b00c 	str.w	fp, [sp, #12]
   81530:	b11c      	cbz	r4, 8153a <_vfiprintf_r+0x282>
   81532:	f10b 0b01 	add.w	fp, fp, #1
   81536:	f8cd b00c 	str.w	fp, [sp, #12]
   8153a:	f01a 0502 	ands.w	r5, sl, #2
   8153e:	9507      	str	r5, [sp, #28]
   81540:	d005      	beq.n	8154e <_vfiprintf_r+0x296>
   81542:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81546:	f10b 0b02 	add.w	fp, fp, #2
   8154a:	f8cd b00c 	str.w	fp, [sp, #12]
   8154e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81552:	930b      	str	r3, [sp, #44]	; 0x2c
   81554:	f040 821b 	bne.w	8198e <_vfiprintf_r+0x6d6>
   81558:	9d04      	ldr	r5, [sp, #16]
   8155a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8155e:	ebcb 0405 	rsb	r4, fp, r5
   81562:	2c00      	cmp	r4, #0
   81564:	f340 8213 	ble.w	8198e <_vfiprintf_r+0x6d6>
   81568:	2c10      	cmp	r4, #16
   8156a:	f340 8489 	ble.w	81e80 <_vfiprintf_r+0xbc8>
   8156e:	4dbe      	ldr	r5, [pc, #760]	; (81868 <_vfiprintf_r+0x5b0>)
   81570:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81572:	462b      	mov	r3, r5
   81574:	9814      	ldr	r0, [sp, #80]	; 0x50
   81576:	4625      	mov	r5, r4
   81578:	f04f 0b10 	mov.w	fp, #16
   8157c:	4664      	mov	r4, ip
   8157e:	46b4      	mov	ip, r6
   81580:	461e      	mov	r6, r3
   81582:	e006      	b.n	81592 <_vfiprintf_r+0x2da>
   81584:	1c83      	adds	r3, r0, #2
   81586:	f10c 0c08 	add.w	ip, ip, #8
   8158a:	4608      	mov	r0, r1
   8158c:	3d10      	subs	r5, #16
   8158e:	2d10      	cmp	r5, #16
   81590:	dd11      	ble.n	815b6 <_vfiprintf_r+0x2fe>
   81592:	1c41      	adds	r1, r0, #1
   81594:	3210      	adds	r2, #16
   81596:	2907      	cmp	r1, #7
   81598:	9215      	str	r2, [sp, #84]	; 0x54
   8159a:	e88c 0840 	stmia.w	ip, {r6, fp}
   8159e:	9114      	str	r1, [sp, #80]	; 0x50
   815a0:	ddf0      	ble.n	81584 <_vfiprintf_r+0x2cc>
   815a2:	2a00      	cmp	r2, #0
   815a4:	f040 81e6 	bne.w	81974 <_vfiprintf_r+0x6bc>
   815a8:	3d10      	subs	r5, #16
   815aa:	2d10      	cmp	r5, #16
   815ac:	f04f 0301 	mov.w	r3, #1
   815b0:	4610      	mov	r0, r2
   815b2:	46cc      	mov	ip, r9
   815b4:	dced      	bgt.n	81592 <_vfiprintf_r+0x2da>
   815b6:	4631      	mov	r1, r6
   815b8:	4666      	mov	r6, ip
   815ba:	46a4      	mov	ip, r4
   815bc:	462c      	mov	r4, r5
   815be:	460d      	mov	r5, r1
   815c0:	4422      	add	r2, r4
   815c2:	2b07      	cmp	r3, #7
   815c4:	9215      	str	r2, [sp, #84]	; 0x54
   815c6:	6035      	str	r5, [r6, #0]
   815c8:	6074      	str	r4, [r6, #4]
   815ca:	9314      	str	r3, [sp, #80]	; 0x50
   815cc:	f300 836d 	bgt.w	81caa <_vfiprintf_r+0x9f2>
   815d0:	3608      	adds	r6, #8
   815d2:	1c59      	adds	r1, r3, #1
   815d4:	e1de      	b.n	81994 <_vfiprintf_r+0x6dc>
   815d6:	f01a 0f20 	tst.w	sl, #32
   815da:	9004      	str	r0, [sp, #16]
   815dc:	46ac      	mov	ip, r5
   815de:	f000 808d 	beq.w	816fc <_vfiprintf_r+0x444>
   815e2:	9d08      	ldr	r5, [sp, #32]
   815e4:	1deb      	adds	r3, r5, #7
   815e6:	f023 0307 	bic.w	r3, r3, #7
   815ea:	f103 0b08 	add.w	fp, r3, #8
   815ee:	e9d3 4500 	ldrd	r4, r5, [r3]
   815f2:	f8cd b020 	str.w	fp, [sp, #32]
   815f6:	2301      	movs	r3, #1
   815f8:	e76f      	b.n	814da <_vfiprintf_r+0x222>
   815fa:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   815fe:	f898 3000 	ldrb.w	r3, [r8]
   81602:	e6c6      	b.n	81392 <_vfiprintf_r+0xda>
   81604:	f04a 0a10 	orr.w	sl, sl, #16
   81608:	f01a 0f20 	tst.w	sl, #32
   8160c:	9004      	str	r0, [sp, #16]
   8160e:	46ac      	mov	ip, r5
   81610:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81614:	f000 80c8 	beq.w	817a8 <_vfiprintf_r+0x4f0>
   81618:	9c08      	ldr	r4, [sp, #32]
   8161a:	1de1      	adds	r1, r4, #7
   8161c:	f021 0107 	bic.w	r1, r1, #7
   81620:	e9d1 2300 	ldrd	r2, r3, [r1]
   81624:	3108      	adds	r1, #8
   81626:	9108      	str	r1, [sp, #32]
   81628:	4614      	mov	r4, r2
   8162a:	461d      	mov	r5, r3
   8162c:	2a00      	cmp	r2, #0
   8162e:	f173 0b00 	sbcs.w	fp, r3, #0
   81632:	f2c0 83ce 	blt.w	81dd2 <_vfiprintf_r+0xb1a>
   81636:	f1bc 0f00 	cmp.w	ip, #0
   8163a:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8163e:	bfa8      	it	ge
   81640:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81644:	ea54 0205 	orrs.w	r2, r4, r5
   81648:	9007      	str	r0, [sp, #28]
   8164a:	f8cd c014 	str.w	ip, [sp, #20]
   8164e:	f04f 0301 	mov.w	r3, #1
   81652:	f43f af53 	beq.w	814fc <_vfiprintf_r+0x244>
   81656:	2b01      	cmp	r3, #1
   81658:	f000 8319 	beq.w	81c8e <_vfiprintf_r+0x9d6>
   8165c:	2b02      	cmp	r3, #2
   8165e:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81662:	f040 824c 	bne.w	81afe <_vfiprintf_r+0x846>
   81666:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8166a:	4619      	mov	r1, r3
   8166c:	f004 000f 	and.w	r0, r4, #15
   81670:	0922      	lsrs	r2, r4, #4
   81672:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81676:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   8167a:	092b      	lsrs	r3, r5, #4
   8167c:	7008      	strb	r0, [r1, #0]
   8167e:	ea52 0003 	orrs.w	r0, r2, r3
   81682:	460f      	mov	r7, r1
   81684:	4614      	mov	r4, r2
   81686:	461d      	mov	r5, r3
   81688:	f101 31ff 	add.w	r1, r1, #4294967295
   8168c:	d1ee      	bne.n	8166c <_vfiprintf_r+0x3b4>
   8168e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81692:	ebc7 0309 	rsb	r3, r7, r9
   81696:	9305      	str	r3, [sp, #20]
   81698:	e742      	b.n	81520 <_vfiprintf_r+0x268>
   8169a:	f04a 0a10 	orr.w	sl, sl, #16
   8169e:	f01a 0320 	ands.w	r3, sl, #32
   816a2:	9004      	str	r0, [sp, #16]
   816a4:	46ac      	mov	ip, r5
   816a6:	f47f af0c 	bne.w	814c2 <_vfiprintf_r+0x20a>
   816aa:	f01a 0210 	ands.w	r2, sl, #16
   816ae:	f040 8311 	bne.w	81cd4 <_vfiprintf_r+0xa1c>
   816b2:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   816b6:	f000 830d 	beq.w	81cd4 <_vfiprintf_r+0xa1c>
   816ba:	f8dd b020 	ldr.w	fp, [sp, #32]
   816be:	4613      	mov	r3, r2
   816c0:	f8bb 4000 	ldrh.w	r4, [fp]
   816c4:	f10b 0b04 	add.w	fp, fp, #4
   816c8:	2500      	movs	r5, #0
   816ca:	f8cd b020 	str.w	fp, [sp, #32]
   816ce:	e704      	b.n	814da <_vfiprintf_r+0x222>
   816d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   816d4:	2000      	movs	r0, #0
   816d6:	f818 3b01 	ldrb.w	r3, [r8], #1
   816da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   816de:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   816e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   816e6:	2a09      	cmp	r2, #9
   816e8:	d9f5      	bls.n	816d6 <_vfiprintf_r+0x41e>
   816ea:	e654      	b.n	81396 <_vfiprintf_r+0xde>
   816ec:	f04a 0a10 	orr.w	sl, sl, #16
   816f0:	f01a 0f20 	tst.w	sl, #32
   816f4:	9004      	str	r0, [sp, #16]
   816f6:	46ac      	mov	ip, r5
   816f8:	f47f af73 	bne.w	815e2 <_vfiprintf_r+0x32a>
   816fc:	f01a 0f10 	tst.w	sl, #16
   81700:	f040 82ef 	bne.w	81ce2 <_vfiprintf_r+0xa2a>
   81704:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81708:	f000 82eb 	beq.w	81ce2 <_vfiprintf_r+0xa2a>
   8170c:	f8dd b020 	ldr.w	fp, [sp, #32]
   81710:	2500      	movs	r5, #0
   81712:	f8bb 4000 	ldrh.w	r4, [fp]
   81716:	f10b 0b04 	add.w	fp, fp, #4
   8171a:	2301      	movs	r3, #1
   8171c:	f8cd b020 	str.w	fp, [sp, #32]
   81720:	e6db      	b.n	814da <_vfiprintf_r+0x222>
   81722:	46ac      	mov	ip, r5
   81724:	4d51      	ldr	r5, [pc, #324]	; (8186c <_vfiprintf_r+0x5b4>)
   81726:	f01a 0f20 	tst.w	sl, #32
   8172a:	9004      	str	r0, [sp, #16]
   8172c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81730:	950a      	str	r5, [sp, #40]	; 0x28
   81732:	f000 80f0 	beq.w	81916 <_vfiprintf_r+0x65e>
   81736:	9d08      	ldr	r5, [sp, #32]
   81738:	1dea      	adds	r2, r5, #7
   8173a:	f022 0207 	bic.w	r2, r2, #7
   8173e:	f102 0b08 	add.w	fp, r2, #8
   81742:	f8cd b020 	str.w	fp, [sp, #32]
   81746:	e9d2 4500 	ldrd	r4, r5, [r2]
   8174a:	f01a 0f01 	tst.w	sl, #1
   8174e:	f000 82aa 	beq.w	81ca6 <_vfiprintf_r+0x9ee>
   81752:	ea54 0b05 	orrs.w	fp, r4, r5
   81756:	f000 82a6 	beq.w	81ca6 <_vfiprintf_r+0x9ee>
   8175a:	2230      	movs	r2, #48	; 0x30
   8175c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81760:	f04a 0a02 	orr.w	sl, sl, #2
   81764:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81768:	2302      	movs	r3, #2
   8176a:	e6b6      	b.n	814da <_vfiprintf_r+0x222>
   8176c:	9b08      	ldr	r3, [sp, #32]
   8176e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81772:	681b      	ldr	r3, [r3, #0]
   81774:	2401      	movs	r4, #1
   81776:	f04f 0500 	mov.w	r5, #0
   8177a:	f10b 0b04 	add.w	fp, fp, #4
   8177e:	9004      	str	r0, [sp, #16]
   81780:	9403      	str	r4, [sp, #12]
   81782:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81786:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8178a:	f8cd b020 	str.w	fp, [sp, #32]
   8178e:	9405      	str	r4, [sp, #20]
   81790:	af16      	add	r7, sp, #88	; 0x58
   81792:	f04f 0c00 	mov.w	ip, #0
   81796:	e6d0      	b.n	8153a <_vfiprintf_r+0x282>
   81798:	f01a 0f20 	tst.w	sl, #32
   8179c:	9004      	str	r0, [sp, #16]
   8179e:	46ac      	mov	ip, r5
   817a0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   817a4:	f47f af38 	bne.w	81618 <_vfiprintf_r+0x360>
   817a8:	f01a 0f10 	tst.w	sl, #16
   817ac:	f040 82a7 	bne.w	81cfe <_vfiprintf_r+0xa46>
   817b0:	f01a 0f40 	tst.w	sl, #64	; 0x40
   817b4:	f000 82a3 	beq.w	81cfe <_vfiprintf_r+0xa46>
   817b8:	f8dd b020 	ldr.w	fp, [sp, #32]
   817bc:	f9bb 4000 	ldrsh.w	r4, [fp]
   817c0:	f10b 0b04 	add.w	fp, fp, #4
   817c4:	17e5      	asrs	r5, r4, #31
   817c6:	4622      	mov	r2, r4
   817c8:	462b      	mov	r3, r5
   817ca:	f8cd b020 	str.w	fp, [sp, #32]
   817ce:	e72d      	b.n	8162c <_vfiprintf_r+0x374>
   817d0:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   817d4:	f898 3000 	ldrb.w	r3, [r8]
   817d8:	e5db      	b.n	81392 <_vfiprintf_r+0xda>
   817da:	f898 3000 	ldrb.w	r3, [r8]
   817de:	4642      	mov	r2, r8
   817e0:	2b6c      	cmp	r3, #108	; 0x6c
   817e2:	bf03      	ittte	eq
   817e4:	f108 0801 	addeq.w	r8, r8, #1
   817e8:	f04a 0a20 	orreq.w	sl, sl, #32
   817ec:	7853      	ldrbeq	r3, [r2, #1]
   817ee:	f04a 0a10 	orrne.w	sl, sl, #16
   817f2:	e5ce      	b.n	81392 <_vfiprintf_r+0xda>
   817f4:	f01a 0f20 	tst.w	sl, #32
   817f8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   817fc:	f000 82f7 	beq.w	81dee <_vfiprintf_r+0xb36>
   81800:	9c08      	ldr	r4, [sp, #32]
   81802:	6821      	ldr	r1, [r4, #0]
   81804:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81806:	17e5      	asrs	r5, r4, #31
   81808:	462b      	mov	r3, r5
   8180a:	9d08      	ldr	r5, [sp, #32]
   8180c:	4622      	mov	r2, r4
   8180e:	3504      	adds	r5, #4
   81810:	9508      	str	r5, [sp, #32]
   81812:	e9c1 2300 	strd	r2, r3, [r1]
   81816:	e582      	b.n	8131e <_vfiprintf_r+0x66>
   81818:	9c08      	ldr	r4, [sp, #32]
   8181a:	46ac      	mov	ip, r5
   8181c:	6827      	ldr	r7, [r4, #0]
   8181e:	f04f 0500 	mov.w	r5, #0
   81822:	9004      	str	r0, [sp, #16]
   81824:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81828:	3404      	adds	r4, #4
   8182a:	2f00      	cmp	r7, #0
   8182c:	f000 8332 	beq.w	81e94 <_vfiprintf_r+0xbdc>
   81830:	f1bc 0f00 	cmp.w	ip, #0
   81834:	4638      	mov	r0, r7
   81836:	f2c0 8307 	blt.w	81e48 <_vfiprintf_r+0xb90>
   8183a:	4662      	mov	r2, ip
   8183c:	2100      	movs	r1, #0
   8183e:	f8cd c004 	str.w	ip, [sp, #4]
   81842:	f001 fbb1 	bl	82fa8 <memchr>
   81846:	f8dd c004 	ldr.w	ip, [sp, #4]
   8184a:	2800      	cmp	r0, #0
   8184c:	f000 833a 	beq.w	81ec4 <_vfiprintf_r+0xc0c>
   81850:	1bc0      	subs	r0, r0, r7
   81852:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81856:	4560      	cmp	r0, ip
   81858:	bfa8      	it	ge
   8185a:	4660      	movge	r0, ip
   8185c:	9005      	str	r0, [sp, #20]
   8185e:	9408      	str	r4, [sp, #32]
   81860:	9507      	str	r5, [sp, #28]
   81862:	f04f 0c00 	mov.w	ip, #0
   81866:	e65b      	b.n	81520 <_vfiprintf_r+0x268>
   81868:	00083fd4 	.word	0x00083fd4
   8186c:	00083f94 	.word	0x00083f94
   81870:	9b08      	ldr	r3, [sp, #32]
   81872:	f8dd b020 	ldr.w	fp, [sp, #32]
   81876:	9004      	str	r0, [sp, #16]
   81878:	48b2      	ldr	r0, [pc, #712]	; (81b44 <_vfiprintf_r+0x88c>)
   8187a:	681c      	ldr	r4, [r3, #0]
   8187c:	2230      	movs	r2, #48	; 0x30
   8187e:	2378      	movs	r3, #120	; 0x78
   81880:	f10b 0b04 	add.w	fp, fp, #4
   81884:	46ac      	mov	ip, r5
   81886:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8188a:	f04a 0a02 	orr.w	sl, sl, #2
   8188e:	f8cd b020 	str.w	fp, [sp, #32]
   81892:	2500      	movs	r5, #0
   81894:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81898:	900a      	str	r0, [sp, #40]	; 0x28
   8189a:	2302      	movs	r3, #2
   8189c:	e61d      	b.n	814da <_vfiprintf_r+0x222>
   8189e:	f04a 0a20 	orr.w	sl, sl, #32
   818a2:	f898 3000 	ldrb.w	r3, [r8]
   818a6:	e574      	b.n	81392 <_vfiprintf_r+0xda>
   818a8:	f8dd b020 	ldr.w	fp, [sp, #32]
   818ac:	f8db 0000 	ldr.w	r0, [fp]
   818b0:	f10b 0304 	add.w	r3, fp, #4
   818b4:	2800      	cmp	r0, #0
   818b6:	f6ff adf7 	blt.w	814a8 <_vfiprintf_r+0x1f0>
   818ba:	9308      	str	r3, [sp, #32]
   818bc:	f898 3000 	ldrb.w	r3, [r8]
   818c0:	e567      	b.n	81392 <_vfiprintf_r+0xda>
   818c2:	f898 3000 	ldrb.w	r3, [r8]
   818c6:	212b      	movs	r1, #43	; 0x2b
   818c8:	e563      	b.n	81392 <_vfiprintf_r+0xda>
   818ca:	f898 3000 	ldrb.w	r3, [r8]
   818ce:	f108 0401 	add.w	r4, r8, #1
   818d2:	2b2a      	cmp	r3, #42	; 0x2a
   818d4:	f000 8305 	beq.w	81ee2 <_vfiprintf_r+0xc2a>
   818d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   818dc:	2a09      	cmp	r2, #9
   818de:	bf98      	it	ls
   818e0:	2500      	movls	r5, #0
   818e2:	f200 82fa 	bhi.w	81eda <_vfiprintf_r+0xc22>
   818e6:	f814 3b01 	ldrb.w	r3, [r4], #1
   818ea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   818ee:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   818f2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   818f6:	2a09      	cmp	r2, #9
   818f8:	d9f5      	bls.n	818e6 <_vfiprintf_r+0x62e>
   818fa:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   818fe:	46a0      	mov	r8, r4
   81900:	e549      	b.n	81396 <_vfiprintf_r+0xde>
   81902:	4c90      	ldr	r4, [pc, #576]	; (81b44 <_vfiprintf_r+0x88c>)
   81904:	f01a 0f20 	tst.w	sl, #32
   81908:	9004      	str	r0, [sp, #16]
   8190a:	46ac      	mov	ip, r5
   8190c:	940a      	str	r4, [sp, #40]	; 0x28
   8190e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81912:	f47f af10 	bne.w	81736 <_vfiprintf_r+0x47e>
   81916:	f01a 0f10 	tst.w	sl, #16
   8191a:	f040 81ea 	bne.w	81cf2 <_vfiprintf_r+0xa3a>
   8191e:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81922:	f000 81e6 	beq.w	81cf2 <_vfiprintf_r+0xa3a>
   81926:	f8dd b020 	ldr.w	fp, [sp, #32]
   8192a:	2500      	movs	r5, #0
   8192c:	f8bb 4000 	ldrh.w	r4, [fp]
   81930:	f10b 0b04 	add.w	fp, fp, #4
   81934:	f8cd b020 	str.w	fp, [sp, #32]
   81938:	e707      	b.n	8174a <_vfiprintf_r+0x492>
   8193a:	f898 3000 	ldrb.w	r3, [r8]
   8193e:	2900      	cmp	r1, #0
   81940:	f47f ad27 	bne.w	81392 <_vfiprintf_r+0xda>
   81944:	2120      	movs	r1, #32
   81946:	e524      	b.n	81392 <_vfiprintf_r+0xda>
   81948:	f04a 0a01 	orr.w	sl, sl, #1
   8194c:	f898 3000 	ldrb.w	r3, [r8]
   81950:	e51f      	b.n	81392 <_vfiprintf_r+0xda>
   81952:	9004      	str	r0, [sp, #16]
   81954:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81958:	2b00      	cmp	r3, #0
   8195a:	f000 80f9 	beq.w	81b50 <_vfiprintf_r+0x898>
   8195e:	2501      	movs	r5, #1
   81960:	f04f 0b00 	mov.w	fp, #0
   81964:	9503      	str	r5, [sp, #12]
   81966:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8196a:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   8196e:	9505      	str	r5, [sp, #20]
   81970:	af16      	add	r7, sp, #88	; 0x58
   81972:	e70e      	b.n	81792 <_vfiprintf_r+0x4da>
   81974:	9806      	ldr	r0, [sp, #24]
   81976:	9902      	ldr	r1, [sp, #8]
   81978:	aa13      	add	r2, sp, #76	; 0x4c
   8197a:	f7ff fc61 	bl	81240 <__sprint_r.part.0>
   8197e:	2800      	cmp	r0, #0
   81980:	f040 80ed 	bne.w	81b5e <_vfiprintf_r+0x8a6>
   81984:	9814      	ldr	r0, [sp, #80]	; 0x50
   81986:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81988:	1c43      	adds	r3, r0, #1
   8198a:	46cc      	mov	ip, r9
   8198c:	e5fe      	b.n	8158c <_vfiprintf_r+0x2d4>
   8198e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81990:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81992:	1c59      	adds	r1, r3, #1
   81994:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81998:	b168      	cbz	r0, 819b6 <_vfiprintf_r+0x6fe>
   8199a:	3201      	adds	r2, #1
   8199c:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   819a0:	2301      	movs	r3, #1
   819a2:	2907      	cmp	r1, #7
   819a4:	9215      	str	r2, [sp, #84]	; 0x54
   819a6:	9114      	str	r1, [sp, #80]	; 0x50
   819a8:	e886 0009 	stmia.w	r6, {r0, r3}
   819ac:	f300 8160 	bgt.w	81c70 <_vfiprintf_r+0x9b8>
   819b0:	460b      	mov	r3, r1
   819b2:	3608      	adds	r6, #8
   819b4:	3101      	adds	r1, #1
   819b6:	9c07      	ldr	r4, [sp, #28]
   819b8:	b164      	cbz	r4, 819d4 <_vfiprintf_r+0x71c>
   819ba:	3202      	adds	r2, #2
   819bc:	a812      	add	r0, sp, #72	; 0x48
   819be:	2302      	movs	r3, #2
   819c0:	2907      	cmp	r1, #7
   819c2:	9215      	str	r2, [sp, #84]	; 0x54
   819c4:	9114      	str	r1, [sp, #80]	; 0x50
   819c6:	e886 0009 	stmia.w	r6, {r0, r3}
   819ca:	f300 8157 	bgt.w	81c7c <_vfiprintf_r+0x9c4>
   819ce:	460b      	mov	r3, r1
   819d0:	3608      	adds	r6, #8
   819d2:	3101      	adds	r1, #1
   819d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   819d6:	2d80      	cmp	r5, #128	; 0x80
   819d8:	f000 8101 	beq.w	81bde <_vfiprintf_r+0x926>
   819dc:	9d05      	ldr	r5, [sp, #20]
   819de:	ebc5 040c 	rsb	r4, r5, ip
   819e2:	2c00      	cmp	r4, #0
   819e4:	dd2f      	ble.n	81a46 <_vfiprintf_r+0x78e>
   819e6:	2c10      	cmp	r4, #16
   819e8:	4d57      	ldr	r5, [pc, #348]	; (81b48 <_vfiprintf_r+0x890>)
   819ea:	dd22      	ble.n	81a32 <_vfiprintf_r+0x77a>
   819ec:	4630      	mov	r0, r6
   819ee:	f04f 0b10 	mov.w	fp, #16
   819f2:	462e      	mov	r6, r5
   819f4:	4625      	mov	r5, r4
   819f6:	9c06      	ldr	r4, [sp, #24]
   819f8:	e006      	b.n	81a08 <_vfiprintf_r+0x750>
   819fa:	f103 0c02 	add.w	ip, r3, #2
   819fe:	3008      	adds	r0, #8
   81a00:	460b      	mov	r3, r1
   81a02:	3d10      	subs	r5, #16
   81a04:	2d10      	cmp	r5, #16
   81a06:	dd10      	ble.n	81a2a <_vfiprintf_r+0x772>
   81a08:	1c59      	adds	r1, r3, #1
   81a0a:	3210      	adds	r2, #16
   81a0c:	2907      	cmp	r1, #7
   81a0e:	9215      	str	r2, [sp, #84]	; 0x54
   81a10:	e880 0840 	stmia.w	r0, {r6, fp}
   81a14:	9114      	str	r1, [sp, #80]	; 0x50
   81a16:	ddf0      	ble.n	819fa <_vfiprintf_r+0x742>
   81a18:	2a00      	cmp	r2, #0
   81a1a:	d163      	bne.n	81ae4 <_vfiprintf_r+0x82c>
   81a1c:	3d10      	subs	r5, #16
   81a1e:	2d10      	cmp	r5, #16
   81a20:	f04f 0c01 	mov.w	ip, #1
   81a24:	4613      	mov	r3, r2
   81a26:	4648      	mov	r0, r9
   81a28:	dcee      	bgt.n	81a08 <_vfiprintf_r+0x750>
   81a2a:	462c      	mov	r4, r5
   81a2c:	4661      	mov	r1, ip
   81a2e:	4635      	mov	r5, r6
   81a30:	4606      	mov	r6, r0
   81a32:	4422      	add	r2, r4
   81a34:	2907      	cmp	r1, #7
   81a36:	9215      	str	r2, [sp, #84]	; 0x54
   81a38:	6035      	str	r5, [r6, #0]
   81a3a:	6074      	str	r4, [r6, #4]
   81a3c:	9114      	str	r1, [sp, #80]	; 0x50
   81a3e:	f300 80c1 	bgt.w	81bc4 <_vfiprintf_r+0x90c>
   81a42:	3608      	adds	r6, #8
   81a44:	3101      	adds	r1, #1
   81a46:	9d05      	ldr	r5, [sp, #20]
   81a48:	2907      	cmp	r1, #7
   81a4a:	442a      	add	r2, r5
   81a4c:	9215      	str	r2, [sp, #84]	; 0x54
   81a4e:	6037      	str	r7, [r6, #0]
   81a50:	6075      	str	r5, [r6, #4]
   81a52:	9114      	str	r1, [sp, #80]	; 0x50
   81a54:	f340 80c1 	ble.w	81bda <_vfiprintf_r+0x922>
   81a58:	2a00      	cmp	r2, #0
   81a5a:	f040 8130 	bne.w	81cbe <_vfiprintf_r+0xa06>
   81a5e:	9214      	str	r2, [sp, #80]	; 0x50
   81a60:	464e      	mov	r6, r9
   81a62:	f01a 0f04 	tst.w	sl, #4
   81a66:	f000 808b 	beq.w	81b80 <_vfiprintf_r+0x8c8>
   81a6a:	9d04      	ldr	r5, [sp, #16]
   81a6c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a70:	ebcb 0405 	rsb	r4, fp, r5
   81a74:	2c00      	cmp	r4, #0
   81a76:	f340 8083 	ble.w	81b80 <_vfiprintf_r+0x8c8>
   81a7a:	2c10      	cmp	r4, #16
   81a7c:	f340 821e 	ble.w	81ebc <_vfiprintf_r+0xc04>
   81a80:	9914      	ldr	r1, [sp, #80]	; 0x50
   81a82:	4d32      	ldr	r5, [pc, #200]	; (81b4c <_vfiprintf_r+0x894>)
   81a84:	2710      	movs	r7, #16
   81a86:	f8dd a018 	ldr.w	sl, [sp, #24]
   81a8a:	f8dd b008 	ldr.w	fp, [sp, #8]
   81a8e:	e005      	b.n	81a9c <_vfiprintf_r+0x7e4>
   81a90:	1c88      	adds	r0, r1, #2
   81a92:	3608      	adds	r6, #8
   81a94:	4619      	mov	r1, r3
   81a96:	3c10      	subs	r4, #16
   81a98:	2c10      	cmp	r4, #16
   81a9a:	dd10      	ble.n	81abe <_vfiprintf_r+0x806>
   81a9c:	1c4b      	adds	r3, r1, #1
   81a9e:	3210      	adds	r2, #16
   81aa0:	2b07      	cmp	r3, #7
   81aa2:	9215      	str	r2, [sp, #84]	; 0x54
   81aa4:	e886 00a0 	stmia.w	r6, {r5, r7}
   81aa8:	9314      	str	r3, [sp, #80]	; 0x50
   81aaa:	ddf1      	ble.n	81a90 <_vfiprintf_r+0x7d8>
   81aac:	2a00      	cmp	r2, #0
   81aae:	d17d      	bne.n	81bac <_vfiprintf_r+0x8f4>
   81ab0:	3c10      	subs	r4, #16
   81ab2:	2c10      	cmp	r4, #16
   81ab4:	f04f 0001 	mov.w	r0, #1
   81ab8:	4611      	mov	r1, r2
   81aba:	464e      	mov	r6, r9
   81abc:	dcee      	bgt.n	81a9c <_vfiprintf_r+0x7e4>
   81abe:	4422      	add	r2, r4
   81ac0:	2807      	cmp	r0, #7
   81ac2:	9215      	str	r2, [sp, #84]	; 0x54
   81ac4:	6035      	str	r5, [r6, #0]
   81ac6:	6074      	str	r4, [r6, #4]
   81ac8:	9014      	str	r0, [sp, #80]	; 0x50
   81aca:	dd59      	ble.n	81b80 <_vfiprintf_r+0x8c8>
   81acc:	2a00      	cmp	r2, #0
   81ace:	d14f      	bne.n	81b70 <_vfiprintf_r+0x8b8>
   81ad0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81ad2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81ad6:	9d04      	ldr	r5, [sp, #16]
   81ad8:	45ab      	cmp	fp, r5
   81ada:	bfac      	ite	ge
   81adc:	445c      	addge	r4, fp
   81ade:	1964      	addlt	r4, r4, r5
   81ae0:	9409      	str	r4, [sp, #36]	; 0x24
   81ae2:	e05e      	b.n	81ba2 <_vfiprintf_r+0x8ea>
   81ae4:	4620      	mov	r0, r4
   81ae6:	9902      	ldr	r1, [sp, #8]
   81ae8:	aa13      	add	r2, sp, #76	; 0x4c
   81aea:	f7ff fba9 	bl	81240 <__sprint_r.part.0>
   81aee:	2800      	cmp	r0, #0
   81af0:	d135      	bne.n	81b5e <_vfiprintf_r+0x8a6>
   81af2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81af4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81af6:	f103 0c01 	add.w	ip, r3, #1
   81afa:	4648      	mov	r0, r9
   81afc:	e781      	b.n	81a02 <_vfiprintf_r+0x74a>
   81afe:	08e0      	lsrs	r0, r4, #3
   81b00:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81b04:	f004 0207 	and.w	r2, r4, #7
   81b08:	08e9      	lsrs	r1, r5, #3
   81b0a:	3230      	adds	r2, #48	; 0x30
   81b0c:	ea50 0b01 	orrs.w	fp, r0, r1
   81b10:	461f      	mov	r7, r3
   81b12:	701a      	strb	r2, [r3, #0]
   81b14:	4604      	mov	r4, r0
   81b16:	460d      	mov	r5, r1
   81b18:	f103 33ff 	add.w	r3, r3, #4294967295
   81b1c:	d1ef      	bne.n	81afe <_vfiprintf_r+0x846>
   81b1e:	f01a 0f01 	tst.w	sl, #1
   81b22:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81b26:	4639      	mov	r1, r7
   81b28:	f000 80b9 	beq.w	81c9e <_vfiprintf_r+0x9e6>
   81b2c:	2a30      	cmp	r2, #48	; 0x30
   81b2e:	f43f acf4 	beq.w	8151a <_vfiprintf_r+0x262>
   81b32:	461f      	mov	r7, r3
   81b34:	ebc7 0509 	rsb	r5, r7, r9
   81b38:	2330      	movs	r3, #48	; 0x30
   81b3a:	9505      	str	r5, [sp, #20]
   81b3c:	f801 3c01 	strb.w	r3, [r1, #-1]
   81b40:	e4ee      	b.n	81520 <_vfiprintf_r+0x268>
   81b42:	bf00      	nop
   81b44:	00083fa8 	.word	0x00083fa8
   81b48:	00083fc4 	.word	0x00083fc4
   81b4c:	00083fd4 	.word	0x00083fd4
   81b50:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81b52:	b123      	cbz	r3, 81b5e <_vfiprintf_r+0x8a6>
   81b54:	9806      	ldr	r0, [sp, #24]
   81b56:	9902      	ldr	r1, [sp, #8]
   81b58:	aa13      	add	r2, sp, #76	; 0x4c
   81b5a:	f7ff fb71 	bl	81240 <__sprint_r.part.0>
   81b5e:	9c02      	ldr	r4, [sp, #8]
   81b60:	89a3      	ldrh	r3, [r4, #12]
   81b62:	065b      	lsls	r3, r3, #25
   81b64:	f53f ac98 	bmi.w	81498 <_vfiprintf_r+0x1e0>
   81b68:	9809      	ldr	r0, [sp, #36]	; 0x24
   81b6a:	b031      	add	sp, #196	; 0xc4
   81b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b70:	9806      	ldr	r0, [sp, #24]
   81b72:	9902      	ldr	r1, [sp, #8]
   81b74:	aa13      	add	r2, sp, #76	; 0x4c
   81b76:	f7ff fb63 	bl	81240 <__sprint_r.part.0>
   81b7a:	2800      	cmp	r0, #0
   81b7c:	d1ef      	bne.n	81b5e <_vfiprintf_r+0x8a6>
   81b7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b80:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81b82:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81b86:	9d04      	ldr	r5, [sp, #16]
   81b88:	45ab      	cmp	fp, r5
   81b8a:	bfac      	ite	ge
   81b8c:	445c      	addge	r4, fp
   81b8e:	1964      	addlt	r4, r4, r5
   81b90:	9409      	str	r4, [sp, #36]	; 0x24
   81b92:	b132      	cbz	r2, 81ba2 <_vfiprintf_r+0x8ea>
   81b94:	9806      	ldr	r0, [sp, #24]
   81b96:	9902      	ldr	r1, [sp, #8]
   81b98:	aa13      	add	r2, sp, #76	; 0x4c
   81b9a:	f7ff fb51 	bl	81240 <__sprint_r.part.0>
   81b9e:	2800      	cmp	r0, #0
   81ba0:	d1dd      	bne.n	81b5e <_vfiprintf_r+0x8a6>
   81ba2:	2000      	movs	r0, #0
   81ba4:	9014      	str	r0, [sp, #80]	; 0x50
   81ba6:	464e      	mov	r6, r9
   81ba8:	f7ff bbb9 	b.w	8131e <_vfiprintf_r+0x66>
   81bac:	4650      	mov	r0, sl
   81bae:	4659      	mov	r1, fp
   81bb0:	aa13      	add	r2, sp, #76	; 0x4c
   81bb2:	f7ff fb45 	bl	81240 <__sprint_r.part.0>
   81bb6:	2800      	cmp	r0, #0
   81bb8:	d1d1      	bne.n	81b5e <_vfiprintf_r+0x8a6>
   81bba:	9914      	ldr	r1, [sp, #80]	; 0x50
   81bbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bbe:	1c48      	adds	r0, r1, #1
   81bc0:	464e      	mov	r6, r9
   81bc2:	e768      	b.n	81a96 <_vfiprintf_r+0x7de>
   81bc4:	2a00      	cmp	r2, #0
   81bc6:	f040 80f7 	bne.w	81db8 <_vfiprintf_r+0xb00>
   81bca:	9c05      	ldr	r4, [sp, #20]
   81bcc:	2301      	movs	r3, #1
   81bce:	9720      	str	r7, [sp, #128]	; 0x80
   81bd0:	9421      	str	r4, [sp, #132]	; 0x84
   81bd2:	9415      	str	r4, [sp, #84]	; 0x54
   81bd4:	4622      	mov	r2, r4
   81bd6:	9314      	str	r3, [sp, #80]	; 0x50
   81bd8:	464e      	mov	r6, r9
   81bda:	3608      	adds	r6, #8
   81bdc:	e741      	b.n	81a62 <_vfiprintf_r+0x7aa>
   81bde:	9d04      	ldr	r5, [sp, #16]
   81be0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81be4:	ebcb 0405 	rsb	r4, fp, r5
   81be8:	2c00      	cmp	r4, #0
   81bea:	f77f aef7 	ble.w	819dc <_vfiprintf_r+0x724>
   81bee:	2c10      	cmp	r4, #16
   81bf0:	4da6      	ldr	r5, [pc, #664]	; (81e8c <_vfiprintf_r+0xbd4>)
   81bf2:	f340 8170 	ble.w	81ed6 <_vfiprintf_r+0xc1e>
   81bf6:	4629      	mov	r1, r5
   81bf8:	f04f 0b10 	mov.w	fp, #16
   81bfc:	4625      	mov	r5, r4
   81bfe:	4664      	mov	r4, ip
   81c00:	46b4      	mov	ip, r6
   81c02:	460e      	mov	r6, r1
   81c04:	e006      	b.n	81c14 <_vfiprintf_r+0x95c>
   81c06:	1c98      	adds	r0, r3, #2
   81c08:	f10c 0c08 	add.w	ip, ip, #8
   81c0c:	460b      	mov	r3, r1
   81c0e:	3d10      	subs	r5, #16
   81c10:	2d10      	cmp	r5, #16
   81c12:	dd0f      	ble.n	81c34 <_vfiprintf_r+0x97c>
   81c14:	1c59      	adds	r1, r3, #1
   81c16:	3210      	adds	r2, #16
   81c18:	2907      	cmp	r1, #7
   81c1a:	9215      	str	r2, [sp, #84]	; 0x54
   81c1c:	e88c 0840 	stmia.w	ip, {r6, fp}
   81c20:	9114      	str	r1, [sp, #80]	; 0x50
   81c22:	ddf0      	ble.n	81c06 <_vfiprintf_r+0x94e>
   81c24:	b9ba      	cbnz	r2, 81c56 <_vfiprintf_r+0x99e>
   81c26:	3d10      	subs	r5, #16
   81c28:	2d10      	cmp	r5, #16
   81c2a:	f04f 0001 	mov.w	r0, #1
   81c2e:	4613      	mov	r3, r2
   81c30:	46cc      	mov	ip, r9
   81c32:	dcef      	bgt.n	81c14 <_vfiprintf_r+0x95c>
   81c34:	4633      	mov	r3, r6
   81c36:	4666      	mov	r6, ip
   81c38:	46a4      	mov	ip, r4
   81c3a:	462c      	mov	r4, r5
   81c3c:	461d      	mov	r5, r3
   81c3e:	4422      	add	r2, r4
   81c40:	2807      	cmp	r0, #7
   81c42:	9215      	str	r2, [sp, #84]	; 0x54
   81c44:	6035      	str	r5, [r6, #0]
   81c46:	6074      	str	r4, [r6, #4]
   81c48:	9014      	str	r0, [sp, #80]	; 0x50
   81c4a:	f300 80af 	bgt.w	81dac <_vfiprintf_r+0xaf4>
   81c4e:	3608      	adds	r6, #8
   81c50:	1c41      	adds	r1, r0, #1
   81c52:	4603      	mov	r3, r0
   81c54:	e6c2      	b.n	819dc <_vfiprintf_r+0x724>
   81c56:	9806      	ldr	r0, [sp, #24]
   81c58:	9902      	ldr	r1, [sp, #8]
   81c5a:	aa13      	add	r2, sp, #76	; 0x4c
   81c5c:	f7ff faf0 	bl	81240 <__sprint_r.part.0>
   81c60:	2800      	cmp	r0, #0
   81c62:	f47f af7c 	bne.w	81b5e <_vfiprintf_r+0x8a6>
   81c66:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c68:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c6a:	1c58      	adds	r0, r3, #1
   81c6c:	46cc      	mov	ip, r9
   81c6e:	e7ce      	b.n	81c0e <_vfiprintf_r+0x956>
   81c70:	2a00      	cmp	r2, #0
   81c72:	d179      	bne.n	81d68 <_vfiprintf_r+0xab0>
   81c74:	4619      	mov	r1, r3
   81c76:	464e      	mov	r6, r9
   81c78:	4613      	mov	r3, r2
   81c7a:	e69c      	b.n	819b6 <_vfiprintf_r+0x6fe>
   81c7c:	2a00      	cmp	r2, #0
   81c7e:	f040 8084 	bne.w	81d8a <_vfiprintf_r+0xad2>
   81c82:	2101      	movs	r1, #1
   81c84:	4613      	mov	r3, r2
   81c86:	464e      	mov	r6, r9
   81c88:	e6a4      	b.n	819d4 <_vfiprintf_r+0x71c>
   81c8a:	464f      	mov	r7, r9
   81c8c:	e448      	b.n	81520 <_vfiprintf_r+0x268>
   81c8e:	2d00      	cmp	r5, #0
   81c90:	bf08      	it	eq
   81c92:	2c0a      	cmpeq	r4, #10
   81c94:	d246      	bcs.n	81d24 <_vfiprintf_r+0xa6c>
   81c96:	3430      	adds	r4, #48	; 0x30
   81c98:	af30      	add	r7, sp, #192	; 0xc0
   81c9a:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81c9e:	ebc7 0309 	rsb	r3, r7, r9
   81ca2:	9305      	str	r3, [sp, #20]
   81ca4:	e43c      	b.n	81520 <_vfiprintf_r+0x268>
   81ca6:	2302      	movs	r3, #2
   81ca8:	e417      	b.n	814da <_vfiprintf_r+0x222>
   81caa:	2a00      	cmp	r2, #0
   81cac:	f040 80af 	bne.w	81e0e <_vfiprintf_r+0xb56>
   81cb0:	4613      	mov	r3, r2
   81cb2:	2101      	movs	r1, #1
   81cb4:	464e      	mov	r6, r9
   81cb6:	e66d      	b.n	81994 <_vfiprintf_r+0x6dc>
   81cb8:	4644      	mov	r4, r8
   81cba:	f7ff bb58 	b.w	8136e <_vfiprintf_r+0xb6>
   81cbe:	9806      	ldr	r0, [sp, #24]
   81cc0:	9902      	ldr	r1, [sp, #8]
   81cc2:	aa13      	add	r2, sp, #76	; 0x4c
   81cc4:	f7ff fabc 	bl	81240 <__sprint_r.part.0>
   81cc8:	2800      	cmp	r0, #0
   81cca:	f47f af48 	bne.w	81b5e <_vfiprintf_r+0x8a6>
   81cce:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cd0:	464e      	mov	r6, r9
   81cd2:	e6c6      	b.n	81a62 <_vfiprintf_r+0x7aa>
   81cd4:	9d08      	ldr	r5, [sp, #32]
   81cd6:	682c      	ldr	r4, [r5, #0]
   81cd8:	3504      	adds	r5, #4
   81cda:	9508      	str	r5, [sp, #32]
   81cdc:	2500      	movs	r5, #0
   81cde:	f7ff bbfc 	b.w	814da <_vfiprintf_r+0x222>
   81ce2:	9d08      	ldr	r5, [sp, #32]
   81ce4:	2301      	movs	r3, #1
   81ce6:	682c      	ldr	r4, [r5, #0]
   81ce8:	3504      	adds	r5, #4
   81cea:	9508      	str	r5, [sp, #32]
   81cec:	2500      	movs	r5, #0
   81cee:	f7ff bbf4 	b.w	814da <_vfiprintf_r+0x222>
   81cf2:	9d08      	ldr	r5, [sp, #32]
   81cf4:	682c      	ldr	r4, [r5, #0]
   81cf6:	3504      	adds	r5, #4
   81cf8:	9508      	str	r5, [sp, #32]
   81cfa:	2500      	movs	r5, #0
   81cfc:	e525      	b.n	8174a <_vfiprintf_r+0x492>
   81cfe:	9d08      	ldr	r5, [sp, #32]
   81d00:	682c      	ldr	r4, [r5, #0]
   81d02:	3504      	adds	r5, #4
   81d04:	9508      	str	r5, [sp, #32]
   81d06:	17e5      	asrs	r5, r4, #31
   81d08:	4622      	mov	r2, r4
   81d0a:	462b      	mov	r3, r5
   81d0c:	e48e      	b.n	8162c <_vfiprintf_r+0x374>
   81d0e:	9806      	ldr	r0, [sp, #24]
   81d10:	9902      	ldr	r1, [sp, #8]
   81d12:	aa13      	add	r2, sp, #76	; 0x4c
   81d14:	f7ff fa94 	bl	81240 <__sprint_r.part.0>
   81d18:	2800      	cmp	r0, #0
   81d1a:	f47f af20 	bne.w	81b5e <_vfiprintf_r+0x8a6>
   81d1e:	464e      	mov	r6, r9
   81d20:	f7ff bb9a 	b.w	81458 <_vfiprintf_r+0x1a0>
   81d24:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81d28:	9603      	str	r6, [sp, #12]
   81d2a:	465e      	mov	r6, fp
   81d2c:	46e3      	mov	fp, ip
   81d2e:	4620      	mov	r0, r4
   81d30:	4629      	mov	r1, r5
   81d32:	220a      	movs	r2, #10
   81d34:	2300      	movs	r3, #0
   81d36:	f001 fe2f 	bl	83998 <__aeabi_uldivmod>
   81d3a:	3230      	adds	r2, #48	; 0x30
   81d3c:	7032      	strb	r2, [r6, #0]
   81d3e:	4620      	mov	r0, r4
   81d40:	4629      	mov	r1, r5
   81d42:	220a      	movs	r2, #10
   81d44:	2300      	movs	r3, #0
   81d46:	f001 fe27 	bl	83998 <__aeabi_uldivmod>
   81d4a:	4604      	mov	r4, r0
   81d4c:	460d      	mov	r5, r1
   81d4e:	ea54 0005 	orrs.w	r0, r4, r5
   81d52:	4637      	mov	r7, r6
   81d54:	f106 36ff 	add.w	r6, r6, #4294967295
   81d58:	d1e9      	bne.n	81d2e <_vfiprintf_r+0xa76>
   81d5a:	ebc7 0309 	rsb	r3, r7, r9
   81d5e:	46dc      	mov	ip, fp
   81d60:	9e03      	ldr	r6, [sp, #12]
   81d62:	9305      	str	r3, [sp, #20]
   81d64:	f7ff bbdc 	b.w	81520 <_vfiprintf_r+0x268>
   81d68:	9806      	ldr	r0, [sp, #24]
   81d6a:	9902      	ldr	r1, [sp, #8]
   81d6c:	aa13      	add	r2, sp, #76	; 0x4c
   81d6e:	f8cd c004 	str.w	ip, [sp, #4]
   81d72:	f7ff fa65 	bl	81240 <__sprint_r.part.0>
   81d76:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d7a:	2800      	cmp	r0, #0
   81d7c:	f47f aeef 	bne.w	81b5e <_vfiprintf_r+0x8a6>
   81d80:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d82:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d84:	1c59      	adds	r1, r3, #1
   81d86:	464e      	mov	r6, r9
   81d88:	e615      	b.n	819b6 <_vfiprintf_r+0x6fe>
   81d8a:	9806      	ldr	r0, [sp, #24]
   81d8c:	9902      	ldr	r1, [sp, #8]
   81d8e:	aa13      	add	r2, sp, #76	; 0x4c
   81d90:	f8cd c004 	str.w	ip, [sp, #4]
   81d94:	f7ff fa54 	bl	81240 <__sprint_r.part.0>
   81d98:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d9c:	2800      	cmp	r0, #0
   81d9e:	f47f aede 	bne.w	81b5e <_vfiprintf_r+0x8a6>
   81da2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81da4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81da6:	1c59      	adds	r1, r3, #1
   81da8:	464e      	mov	r6, r9
   81daa:	e613      	b.n	819d4 <_vfiprintf_r+0x71c>
   81dac:	2a00      	cmp	r2, #0
   81dae:	d156      	bne.n	81e5e <_vfiprintf_r+0xba6>
   81db0:	2101      	movs	r1, #1
   81db2:	4613      	mov	r3, r2
   81db4:	464e      	mov	r6, r9
   81db6:	e611      	b.n	819dc <_vfiprintf_r+0x724>
   81db8:	9806      	ldr	r0, [sp, #24]
   81dba:	9902      	ldr	r1, [sp, #8]
   81dbc:	aa13      	add	r2, sp, #76	; 0x4c
   81dbe:	f7ff fa3f 	bl	81240 <__sprint_r.part.0>
   81dc2:	2800      	cmp	r0, #0
   81dc4:	f47f aecb 	bne.w	81b5e <_vfiprintf_r+0x8a6>
   81dc8:	9914      	ldr	r1, [sp, #80]	; 0x50
   81dca:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81dcc:	3101      	adds	r1, #1
   81dce:	464e      	mov	r6, r9
   81dd0:	e639      	b.n	81a46 <_vfiprintf_r+0x78e>
   81dd2:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81dd6:	4264      	negs	r4, r4
   81dd8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81ddc:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81de0:	f8cd b01c 	str.w	fp, [sp, #28]
   81de4:	f8cd c014 	str.w	ip, [sp, #20]
   81de8:	2301      	movs	r3, #1
   81dea:	f7ff bb7e 	b.w	814ea <_vfiprintf_r+0x232>
   81dee:	f01a 0f10 	tst.w	sl, #16
   81df2:	d11d      	bne.n	81e30 <_vfiprintf_r+0xb78>
   81df4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81df8:	d058      	beq.n	81eac <_vfiprintf_r+0xbf4>
   81dfa:	9d08      	ldr	r5, [sp, #32]
   81dfc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81e00:	682b      	ldr	r3, [r5, #0]
   81e02:	3504      	adds	r5, #4
   81e04:	9508      	str	r5, [sp, #32]
   81e06:	f8a3 b000 	strh.w	fp, [r3]
   81e0a:	f7ff ba88 	b.w	8131e <_vfiprintf_r+0x66>
   81e0e:	9806      	ldr	r0, [sp, #24]
   81e10:	9902      	ldr	r1, [sp, #8]
   81e12:	aa13      	add	r2, sp, #76	; 0x4c
   81e14:	f8cd c004 	str.w	ip, [sp, #4]
   81e18:	f7ff fa12 	bl	81240 <__sprint_r.part.0>
   81e1c:	f8dd c004 	ldr.w	ip, [sp, #4]
   81e20:	2800      	cmp	r0, #0
   81e22:	f47f ae9c 	bne.w	81b5e <_vfiprintf_r+0x8a6>
   81e26:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e28:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e2a:	1c59      	adds	r1, r3, #1
   81e2c:	464e      	mov	r6, r9
   81e2e:	e5b1      	b.n	81994 <_vfiprintf_r+0x6dc>
   81e30:	f8dd b020 	ldr.w	fp, [sp, #32]
   81e34:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81e36:	f8db 3000 	ldr.w	r3, [fp]
   81e3a:	f10b 0b04 	add.w	fp, fp, #4
   81e3e:	f8cd b020 	str.w	fp, [sp, #32]
   81e42:	601c      	str	r4, [r3, #0]
   81e44:	f7ff ba6b 	b.w	8131e <_vfiprintf_r+0x66>
   81e48:	9408      	str	r4, [sp, #32]
   81e4a:	f7ff f9c9 	bl	811e0 <strlen>
   81e4e:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81e52:	9005      	str	r0, [sp, #20]
   81e54:	9407      	str	r4, [sp, #28]
   81e56:	f04f 0c00 	mov.w	ip, #0
   81e5a:	f7ff bb61 	b.w	81520 <_vfiprintf_r+0x268>
   81e5e:	9806      	ldr	r0, [sp, #24]
   81e60:	9902      	ldr	r1, [sp, #8]
   81e62:	aa13      	add	r2, sp, #76	; 0x4c
   81e64:	f8cd c004 	str.w	ip, [sp, #4]
   81e68:	f7ff f9ea 	bl	81240 <__sprint_r.part.0>
   81e6c:	f8dd c004 	ldr.w	ip, [sp, #4]
   81e70:	2800      	cmp	r0, #0
   81e72:	f47f ae74 	bne.w	81b5e <_vfiprintf_r+0x8a6>
   81e76:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e78:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e7a:	1c59      	adds	r1, r3, #1
   81e7c:	464e      	mov	r6, r9
   81e7e:	e5ad      	b.n	819dc <_vfiprintf_r+0x724>
   81e80:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e82:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e84:	3301      	adds	r3, #1
   81e86:	4d02      	ldr	r5, [pc, #8]	; (81e90 <_vfiprintf_r+0xbd8>)
   81e88:	f7ff bb9a 	b.w	815c0 <_vfiprintf_r+0x308>
   81e8c:	00083fc4 	.word	0x00083fc4
   81e90:	00083fd4 	.word	0x00083fd4
   81e94:	f1bc 0f06 	cmp.w	ip, #6
   81e98:	bf34      	ite	cc
   81e9a:	4663      	movcc	r3, ip
   81e9c:	2306      	movcs	r3, #6
   81e9e:	9408      	str	r4, [sp, #32]
   81ea0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81ea4:	9305      	str	r3, [sp, #20]
   81ea6:	9403      	str	r4, [sp, #12]
   81ea8:	4f16      	ldr	r7, [pc, #88]	; (81f04 <_vfiprintf_r+0xc4c>)
   81eaa:	e472      	b.n	81792 <_vfiprintf_r+0x4da>
   81eac:	9c08      	ldr	r4, [sp, #32]
   81eae:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81eb0:	6823      	ldr	r3, [r4, #0]
   81eb2:	3404      	adds	r4, #4
   81eb4:	9408      	str	r4, [sp, #32]
   81eb6:	601d      	str	r5, [r3, #0]
   81eb8:	f7ff ba31 	b.w	8131e <_vfiprintf_r+0x66>
   81ebc:	9814      	ldr	r0, [sp, #80]	; 0x50
   81ebe:	4d12      	ldr	r5, [pc, #72]	; (81f08 <_vfiprintf_r+0xc50>)
   81ec0:	3001      	adds	r0, #1
   81ec2:	e5fc      	b.n	81abe <_vfiprintf_r+0x806>
   81ec4:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81ec8:	f8cd c014 	str.w	ip, [sp, #20]
   81ecc:	9507      	str	r5, [sp, #28]
   81ece:	9408      	str	r4, [sp, #32]
   81ed0:	4684      	mov	ip, r0
   81ed2:	f7ff bb25 	b.w	81520 <_vfiprintf_r+0x268>
   81ed6:	4608      	mov	r0, r1
   81ed8:	e6b1      	b.n	81c3e <_vfiprintf_r+0x986>
   81eda:	46a0      	mov	r8, r4
   81edc:	2500      	movs	r5, #0
   81ede:	f7ff ba5a 	b.w	81396 <_vfiprintf_r+0xde>
   81ee2:	f8dd b020 	ldr.w	fp, [sp, #32]
   81ee6:	f898 3001 	ldrb.w	r3, [r8, #1]
   81eea:	f8db 5000 	ldr.w	r5, [fp]
   81eee:	f10b 0204 	add.w	r2, fp, #4
   81ef2:	2d00      	cmp	r5, #0
   81ef4:	9208      	str	r2, [sp, #32]
   81ef6:	46a0      	mov	r8, r4
   81ef8:	f6bf aa4b 	bge.w	81392 <_vfiprintf_r+0xda>
   81efc:	f04f 35ff 	mov.w	r5, #4294967295
   81f00:	f7ff ba47 	b.w	81392 <_vfiprintf_r+0xda>
   81f04:	00083fbc 	.word	0x00083fbc
   81f08:	00083fd4 	.word	0x00083fd4

00081f0c <__sbprintf>:
   81f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81f10:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81f12:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81f16:	4688      	mov	r8, r1
   81f18:	9719      	str	r7, [sp, #100]	; 0x64
   81f1a:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81f1e:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81f22:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81f26:	9707      	str	r7, [sp, #28]
   81f28:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81f2c:	ac1a      	add	r4, sp, #104	; 0x68
   81f2e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81f32:	f02a 0a02 	bic.w	sl, sl, #2
   81f36:	2600      	movs	r6, #0
   81f38:	4669      	mov	r1, sp
   81f3a:	9400      	str	r4, [sp, #0]
   81f3c:	9404      	str	r4, [sp, #16]
   81f3e:	9502      	str	r5, [sp, #8]
   81f40:	9505      	str	r5, [sp, #20]
   81f42:	f8ad a00c 	strh.w	sl, [sp, #12]
   81f46:	f8ad 900e 	strh.w	r9, [sp, #14]
   81f4a:	9709      	str	r7, [sp, #36]	; 0x24
   81f4c:	9606      	str	r6, [sp, #24]
   81f4e:	4605      	mov	r5, r0
   81f50:	f7ff f9b2 	bl	812b8 <_vfiprintf_r>
   81f54:	1e04      	subs	r4, r0, #0
   81f56:	db07      	blt.n	81f68 <__sbprintf+0x5c>
   81f58:	4628      	mov	r0, r5
   81f5a:	4669      	mov	r1, sp
   81f5c:	f000 f92a 	bl	821b4 <_fflush_r>
   81f60:	42b0      	cmp	r0, r6
   81f62:	bf18      	it	ne
   81f64:	f04f 34ff 	movne.w	r4, #4294967295
   81f68:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81f6c:	065b      	lsls	r3, r3, #25
   81f6e:	d505      	bpl.n	81f7c <__sbprintf+0x70>
   81f70:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f78:	f8a8 300c 	strh.w	r3, [r8, #12]
   81f7c:	4620      	mov	r0, r4
   81f7e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81f86:	bf00      	nop

00081f88 <__swsetup_r>:
   81f88:	4b2f      	ldr	r3, [pc, #188]	; (82048 <__swsetup_r+0xc0>)
   81f8a:	b570      	push	{r4, r5, r6, lr}
   81f8c:	4606      	mov	r6, r0
   81f8e:	6818      	ldr	r0, [r3, #0]
   81f90:	460c      	mov	r4, r1
   81f92:	b110      	cbz	r0, 81f9a <__swsetup_r+0x12>
   81f94:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81f96:	2a00      	cmp	r2, #0
   81f98:	d036      	beq.n	82008 <__swsetup_r+0x80>
   81f9a:	89a5      	ldrh	r5, [r4, #12]
   81f9c:	b2ab      	uxth	r3, r5
   81f9e:	0719      	lsls	r1, r3, #28
   81fa0:	d50c      	bpl.n	81fbc <__swsetup_r+0x34>
   81fa2:	6922      	ldr	r2, [r4, #16]
   81fa4:	b1aa      	cbz	r2, 81fd2 <__swsetup_r+0x4a>
   81fa6:	f013 0101 	ands.w	r1, r3, #1
   81faa:	d01e      	beq.n	81fea <__swsetup_r+0x62>
   81fac:	6963      	ldr	r3, [r4, #20]
   81fae:	2100      	movs	r1, #0
   81fb0:	425b      	negs	r3, r3
   81fb2:	61a3      	str	r3, [r4, #24]
   81fb4:	60a1      	str	r1, [r4, #8]
   81fb6:	b1f2      	cbz	r2, 81ff6 <__swsetup_r+0x6e>
   81fb8:	2000      	movs	r0, #0
   81fba:	bd70      	pop	{r4, r5, r6, pc}
   81fbc:	06da      	lsls	r2, r3, #27
   81fbe:	d53a      	bpl.n	82036 <__swsetup_r+0xae>
   81fc0:	075b      	lsls	r3, r3, #29
   81fc2:	d424      	bmi.n	8200e <__swsetup_r+0x86>
   81fc4:	6922      	ldr	r2, [r4, #16]
   81fc6:	f045 0308 	orr.w	r3, r5, #8
   81fca:	81a3      	strh	r3, [r4, #12]
   81fcc:	b29b      	uxth	r3, r3
   81fce:	2a00      	cmp	r2, #0
   81fd0:	d1e9      	bne.n	81fa6 <__swsetup_r+0x1e>
   81fd2:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81fd6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81fda:	d0e4      	beq.n	81fa6 <__swsetup_r+0x1e>
   81fdc:	4630      	mov	r0, r6
   81fde:	4621      	mov	r1, r4
   81fe0:	f000 fcce 	bl	82980 <__smakebuf_r>
   81fe4:	89a3      	ldrh	r3, [r4, #12]
   81fe6:	6922      	ldr	r2, [r4, #16]
   81fe8:	e7dd      	b.n	81fa6 <__swsetup_r+0x1e>
   81fea:	0798      	lsls	r0, r3, #30
   81fec:	bf58      	it	pl
   81fee:	6961      	ldrpl	r1, [r4, #20]
   81ff0:	60a1      	str	r1, [r4, #8]
   81ff2:	2a00      	cmp	r2, #0
   81ff4:	d1e0      	bne.n	81fb8 <__swsetup_r+0x30>
   81ff6:	89a3      	ldrh	r3, [r4, #12]
   81ff8:	061a      	lsls	r2, r3, #24
   81ffa:	d5dd      	bpl.n	81fb8 <__swsetup_r+0x30>
   81ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82000:	81a3      	strh	r3, [r4, #12]
   82002:	f04f 30ff 	mov.w	r0, #4294967295
   82006:	bd70      	pop	{r4, r5, r6, pc}
   82008:	f000 f8f0 	bl	821ec <__sinit>
   8200c:	e7c5      	b.n	81f9a <__swsetup_r+0x12>
   8200e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82010:	b149      	cbz	r1, 82026 <__swsetup_r+0x9e>
   82012:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82016:	4299      	cmp	r1, r3
   82018:	d003      	beq.n	82022 <__swsetup_r+0x9a>
   8201a:	4630      	mov	r0, r6
   8201c:	f000 fa2a 	bl	82474 <_free_r>
   82020:	89a5      	ldrh	r5, [r4, #12]
   82022:	2300      	movs	r3, #0
   82024:	6323      	str	r3, [r4, #48]	; 0x30
   82026:	6922      	ldr	r2, [r4, #16]
   82028:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   8202c:	2100      	movs	r1, #0
   8202e:	b2ad      	uxth	r5, r5
   82030:	6022      	str	r2, [r4, #0]
   82032:	6061      	str	r1, [r4, #4]
   82034:	e7c7      	b.n	81fc6 <__swsetup_r+0x3e>
   82036:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8203a:	2309      	movs	r3, #9
   8203c:	6033      	str	r3, [r6, #0]
   8203e:	f04f 30ff 	mov.w	r0, #4294967295
   82042:	81a5      	strh	r5, [r4, #12]
   82044:	bd70      	pop	{r4, r5, r6, pc}
   82046:	bf00      	nop
   82048:	20070568 	.word	0x20070568

0008204c <register_fini>:
   8204c:	4b02      	ldr	r3, [pc, #8]	; (82058 <register_fini+0xc>)
   8204e:	b113      	cbz	r3, 82056 <register_fini+0xa>
   82050:	4802      	ldr	r0, [pc, #8]	; (8205c <register_fini+0x10>)
   82052:	f000 b805 	b.w	82060 <atexit>
   82056:	4770      	bx	lr
   82058:	00000000 	.word	0x00000000
   8205c:	000822e9 	.word	0x000822e9

00082060 <atexit>:
   82060:	4601      	mov	r1, r0
   82062:	2000      	movs	r0, #0
   82064:	4602      	mov	r2, r0
   82066:	4603      	mov	r3, r0
   82068:	f001 bb9a 	b.w	837a0 <__register_exitproc>

0008206c <__sflush_r>:
   8206c:	898b      	ldrh	r3, [r1, #12]
   8206e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82072:	b29a      	uxth	r2, r3
   82074:	460d      	mov	r5, r1
   82076:	0711      	lsls	r1, r2, #28
   82078:	4680      	mov	r8, r0
   8207a:	d43c      	bmi.n	820f6 <__sflush_r+0x8a>
   8207c:	686a      	ldr	r2, [r5, #4]
   8207e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82082:	2a00      	cmp	r2, #0
   82084:	81ab      	strh	r3, [r5, #12]
   82086:	dd59      	ble.n	8213c <__sflush_r+0xd0>
   82088:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8208a:	2c00      	cmp	r4, #0
   8208c:	d04b      	beq.n	82126 <__sflush_r+0xba>
   8208e:	b29b      	uxth	r3, r3
   82090:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82094:	2100      	movs	r1, #0
   82096:	b292      	uxth	r2, r2
   82098:	f8d8 6000 	ldr.w	r6, [r8]
   8209c:	f8c8 1000 	str.w	r1, [r8]
   820a0:	2a00      	cmp	r2, #0
   820a2:	d04f      	beq.n	82144 <__sflush_r+0xd8>
   820a4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   820a6:	075f      	lsls	r7, r3, #29
   820a8:	d505      	bpl.n	820b6 <__sflush_r+0x4a>
   820aa:	6869      	ldr	r1, [r5, #4]
   820ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   820ae:	1a52      	subs	r2, r2, r1
   820b0:	b10b      	cbz	r3, 820b6 <__sflush_r+0x4a>
   820b2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   820b4:	1ad2      	subs	r2, r2, r3
   820b6:	4640      	mov	r0, r8
   820b8:	69e9      	ldr	r1, [r5, #28]
   820ba:	2300      	movs	r3, #0
   820bc:	47a0      	blx	r4
   820be:	1c44      	adds	r4, r0, #1
   820c0:	d04a      	beq.n	82158 <__sflush_r+0xec>
   820c2:	89ab      	ldrh	r3, [r5, #12]
   820c4:	692a      	ldr	r2, [r5, #16]
   820c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   820ca:	b29b      	uxth	r3, r3
   820cc:	2100      	movs	r1, #0
   820ce:	602a      	str	r2, [r5, #0]
   820d0:	04da      	lsls	r2, r3, #19
   820d2:	81ab      	strh	r3, [r5, #12]
   820d4:	6069      	str	r1, [r5, #4]
   820d6:	d44c      	bmi.n	82172 <__sflush_r+0x106>
   820d8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   820da:	f8c8 6000 	str.w	r6, [r8]
   820de:	b311      	cbz	r1, 82126 <__sflush_r+0xba>
   820e0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   820e4:	4299      	cmp	r1, r3
   820e6:	d002      	beq.n	820ee <__sflush_r+0x82>
   820e8:	4640      	mov	r0, r8
   820ea:	f000 f9c3 	bl	82474 <_free_r>
   820ee:	2000      	movs	r0, #0
   820f0:	6328      	str	r0, [r5, #48]	; 0x30
   820f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820f6:	692e      	ldr	r6, [r5, #16]
   820f8:	b1ae      	cbz	r6, 82126 <__sflush_r+0xba>
   820fa:	0791      	lsls	r1, r2, #30
   820fc:	682c      	ldr	r4, [r5, #0]
   820fe:	bf0c      	ite	eq
   82100:	696b      	ldreq	r3, [r5, #20]
   82102:	2300      	movne	r3, #0
   82104:	602e      	str	r6, [r5, #0]
   82106:	1ba4      	subs	r4, r4, r6
   82108:	60ab      	str	r3, [r5, #8]
   8210a:	e00a      	b.n	82122 <__sflush_r+0xb6>
   8210c:	4632      	mov	r2, r6
   8210e:	4623      	mov	r3, r4
   82110:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82112:	4640      	mov	r0, r8
   82114:	69e9      	ldr	r1, [r5, #28]
   82116:	47b8      	blx	r7
   82118:	2800      	cmp	r0, #0
   8211a:	ebc0 0404 	rsb	r4, r0, r4
   8211e:	4406      	add	r6, r0
   82120:	dd04      	ble.n	8212c <__sflush_r+0xc0>
   82122:	2c00      	cmp	r4, #0
   82124:	dcf2      	bgt.n	8210c <__sflush_r+0xa0>
   82126:	2000      	movs	r0, #0
   82128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8212c:	89ab      	ldrh	r3, [r5, #12]
   8212e:	f04f 30ff 	mov.w	r0, #4294967295
   82132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82136:	81ab      	strh	r3, [r5, #12]
   82138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8213c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8213e:	2a00      	cmp	r2, #0
   82140:	dca2      	bgt.n	82088 <__sflush_r+0x1c>
   82142:	e7f0      	b.n	82126 <__sflush_r+0xba>
   82144:	2301      	movs	r3, #1
   82146:	4640      	mov	r0, r8
   82148:	69e9      	ldr	r1, [r5, #28]
   8214a:	47a0      	blx	r4
   8214c:	1c43      	adds	r3, r0, #1
   8214e:	4602      	mov	r2, r0
   82150:	d01e      	beq.n	82190 <__sflush_r+0x124>
   82152:	89ab      	ldrh	r3, [r5, #12]
   82154:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82156:	e7a6      	b.n	820a6 <__sflush_r+0x3a>
   82158:	f8d8 3000 	ldr.w	r3, [r8]
   8215c:	b95b      	cbnz	r3, 82176 <__sflush_r+0x10a>
   8215e:	89aa      	ldrh	r2, [r5, #12]
   82160:	6929      	ldr	r1, [r5, #16]
   82162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82166:	b292      	uxth	r2, r2
   82168:	606b      	str	r3, [r5, #4]
   8216a:	04d3      	lsls	r3, r2, #19
   8216c:	81aa      	strh	r2, [r5, #12]
   8216e:	6029      	str	r1, [r5, #0]
   82170:	d5b2      	bpl.n	820d8 <__sflush_r+0x6c>
   82172:	6528      	str	r0, [r5, #80]	; 0x50
   82174:	e7b0      	b.n	820d8 <__sflush_r+0x6c>
   82176:	2b1d      	cmp	r3, #29
   82178:	d001      	beq.n	8217e <__sflush_r+0x112>
   8217a:	2b16      	cmp	r3, #22
   8217c:	d113      	bne.n	821a6 <__sflush_r+0x13a>
   8217e:	89a9      	ldrh	r1, [r5, #12]
   82180:	692b      	ldr	r3, [r5, #16]
   82182:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82186:	2200      	movs	r2, #0
   82188:	81a9      	strh	r1, [r5, #12]
   8218a:	602b      	str	r3, [r5, #0]
   8218c:	606a      	str	r2, [r5, #4]
   8218e:	e7a3      	b.n	820d8 <__sflush_r+0x6c>
   82190:	f8d8 3000 	ldr.w	r3, [r8]
   82194:	2b00      	cmp	r3, #0
   82196:	d0dc      	beq.n	82152 <__sflush_r+0xe6>
   82198:	2b1d      	cmp	r3, #29
   8219a:	d001      	beq.n	821a0 <__sflush_r+0x134>
   8219c:	2b16      	cmp	r3, #22
   8219e:	d1c5      	bne.n	8212c <__sflush_r+0xc0>
   821a0:	f8c8 6000 	str.w	r6, [r8]
   821a4:	e7bf      	b.n	82126 <__sflush_r+0xba>
   821a6:	89ab      	ldrh	r3, [r5, #12]
   821a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821ac:	81ab      	strh	r3, [r5, #12]
   821ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821b2:	bf00      	nop

000821b4 <_fflush_r>:
   821b4:	b510      	push	{r4, lr}
   821b6:	4604      	mov	r4, r0
   821b8:	b082      	sub	sp, #8
   821ba:	b108      	cbz	r0, 821c0 <_fflush_r+0xc>
   821bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   821be:	b153      	cbz	r3, 821d6 <_fflush_r+0x22>
   821c0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   821c4:	b908      	cbnz	r0, 821ca <_fflush_r+0x16>
   821c6:	b002      	add	sp, #8
   821c8:	bd10      	pop	{r4, pc}
   821ca:	4620      	mov	r0, r4
   821cc:	b002      	add	sp, #8
   821ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   821d2:	f7ff bf4b 	b.w	8206c <__sflush_r>
   821d6:	9101      	str	r1, [sp, #4]
   821d8:	f000 f808 	bl	821ec <__sinit>
   821dc:	9901      	ldr	r1, [sp, #4]
   821de:	e7ef      	b.n	821c0 <_fflush_r+0xc>

000821e0 <_cleanup_r>:
   821e0:	4901      	ldr	r1, [pc, #4]	; (821e8 <_cleanup_r+0x8>)
   821e2:	f000 bb9f 	b.w	82924 <_fwalk>
   821e6:	bf00      	nop
   821e8:	000838ed 	.word	0x000838ed

000821ec <__sinit>:
   821ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   821f0:	6b84      	ldr	r4, [r0, #56]	; 0x38
   821f2:	b083      	sub	sp, #12
   821f4:	4607      	mov	r7, r0
   821f6:	2c00      	cmp	r4, #0
   821f8:	d165      	bne.n	822c6 <__sinit+0xda>
   821fa:	687d      	ldr	r5, [r7, #4]
   821fc:	4833      	ldr	r0, [pc, #204]	; (822cc <__sinit+0xe0>)
   821fe:	2304      	movs	r3, #4
   82200:	2103      	movs	r1, #3
   82202:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82206:	63f8      	str	r0, [r7, #60]	; 0x3c
   82208:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8220c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82210:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82214:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82218:	81ab      	strh	r3, [r5, #12]
   8221a:	602c      	str	r4, [r5, #0]
   8221c:	606c      	str	r4, [r5, #4]
   8221e:	60ac      	str	r4, [r5, #8]
   82220:	666c      	str	r4, [r5, #100]	; 0x64
   82222:	81ec      	strh	r4, [r5, #14]
   82224:	612c      	str	r4, [r5, #16]
   82226:	616c      	str	r4, [r5, #20]
   82228:	61ac      	str	r4, [r5, #24]
   8222a:	4621      	mov	r1, r4
   8222c:	2208      	movs	r2, #8
   8222e:	f7fe ff05 	bl	8103c <memset>
   82232:	f8df b09c 	ldr.w	fp, [pc, #156]	; 822d0 <__sinit+0xe4>
   82236:	68be      	ldr	r6, [r7, #8]
   82238:	f8df a098 	ldr.w	sl, [pc, #152]	; 822d4 <__sinit+0xe8>
   8223c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 822d8 <__sinit+0xec>
   82240:	f8df 8098 	ldr.w	r8, [pc, #152]	; 822dc <__sinit+0xf0>
   82244:	2301      	movs	r3, #1
   82246:	2209      	movs	r2, #9
   82248:	61ed      	str	r5, [r5, #28]
   8224a:	f8c5 b020 	str.w	fp, [r5, #32]
   8224e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82252:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82256:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8225a:	4621      	mov	r1, r4
   8225c:	81f3      	strh	r3, [r6, #14]
   8225e:	81b2      	strh	r2, [r6, #12]
   82260:	6034      	str	r4, [r6, #0]
   82262:	6074      	str	r4, [r6, #4]
   82264:	60b4      	str	r4, [r6, #8]
   82266:	6674      	str	r4, [r6, #100]	; 0x64
   82268:	6134      	str	r4, [r6, #16]
   8226a:	6174      	str	r4, [r6, #20]
   8226c:	61b4      	str	r4, [r6, #24]
   8226e:	2208      	movs	r2, #8
   82270:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82274:	9301      	str	r3, [sp, #4]
   82276:	f7fe fee1 	bl	8103c <memset>
   8227a:	68fd      	ldr	r5, [r7, #12]
   8227c:	2012      	movs	r0, #18
   8227e:	2202      	movs	r2, #2
   82280:	61f6      	str	r6, [r6, #28]
   82282:	f8c6 b020 	str.w	fp, [r6, #32]
   82286:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8228a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8228e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82292:	4621      	mov	r1, r4
   82294:	81a8      	strh	r0, [r5, #12]
   82296:	81ea      	strh	r2, [r5, #14]
   82298:	602c      	str	r4, [r5, #0]
   8229a:	606c      	str	r4, [r5, #4]
   8229c:	60ac      	str	r4, [r5, #8]
   8229e:	666c      	str	r4, [r5, #100]	; 0x64
   822a0:	612c      	str	r4, [r5, #16]
   822a2:	616c      	str	r4, [r5, #20]
   822a4:	61ac      	str	r4, [r5, #24]
   822a6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   822aa:	2208      	movs	r2, #8
   822ac:	f7fe fec6 	bl	8103c <memset>
   822b0:	9b01      	ldr	r3, [sp, #4]
   822b2:	61ed      	str	r5, [r5, #28]
   822b4:	f8c5 b020 	str.w	fp, [r5, #32]
   822b8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   822bc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   822c0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   822c4:	63bb      	str	r3, [r7, #56]	; 0x38
   822c6:	b003      	add	sp, #12
   822c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   822cc:	000821e1 	.word	0x000821e1
   822d0:	000835e1 	.word	0x000835e1
   822d4:	00083605 	.word	0x00083605
   822d8:	0008363d 	.word	0x0008363d
   822dc:	0008365d 	.word	0x0008365d

000822e0 <__sfp_lock_acquire>:
   822e0:	4770      	bx	lr
   822e2:	bf00      	nop

000822e4 <__sfp_lock_release>:
   822e4:	4770      	bx	lr
   822e6:	bf00      	nop

000822e8 <__libc_fini_array>:
   822e8:	b538      	push	{r3, r4, r5, lr}
   822ea:	4d09      	ldr	r5, [pc, #36]	; (82310 <__libc_fini_array+0x28>)
   822ec:	4c09      	ldr	r4, [pc, #36]	; (82314 <__libc_fini_array+0x2c>)
   822ee:	1b64      	subs	r4, r4, r5
   822f0:	10a4      	asrs	r4, r4, #2
   822f2:	bf18      	it	ne
   822f4:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   822f8:	d005      	beq.n	82306 <__libc_fini_array+0x1e>
   822fa:	3c01      	subs	r4, #1
   822fc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82300:	4798      	blx	r3
   82302:	2c00      	cmp	r4, #0
   82304:	d1f9      	bne.n	822fa <__libc_fini_array+0x12>
   82306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8230a:	f001 be75 	b.w	83ff8 <_fini>
   8230e:	bf00      	nop
   82310:	00084004 	.word	0x00084004
   82314:	00084008 	.word	0x00084008

00082318 <_fputwc_r>:
   82318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8231c:	8993      	ldrh	r3, [r2, #12]
   8231e:	460f      	mov	r7, r1
   82320:	0499      	lsls	r1, r3, #18
   82322:	b082      	sub	sp, #8
   82324:	4614      	mov	r4, r2
   82326:	4680      	mov	r8, r0
   82328:	d406      	bmi.n	82338 <_fputwc_r+0x20>
   8232a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   8232c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82334:	81a3      	strh	r3, [r4, #12]
   82336:	6662      	str	r2, [r4, #100]	; 0x64
   82338:	f000 fb1c 	bl	82974 <__locale_mb_cur_max>
   8233c:	2801      	cmp	r0, #1
   8233e:	d03e      	beq.n	823be <_fputwc_r+0xa6>
   82340:	463a      	mov	r2, r7
   82342:	4640      	mov	r0, r8
   82344:	a901      	add	r1, sp, #4
   82346:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8234a:	f001 f9df 	bl	8370c <_wcrtomb_r>
   8234e:	1c42      	adds	r2, r0, #1
   82350:	4606      	mov	r6, r0
   82352:	d02d      	beq.n	823b0 <_fputwc_r+0x98>
   82354:	2800      	cmp	r0, #0
   82356:	d03a      	beq.n	823ce <_fputwc_r+0xb6>
   82358:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8235c:	2500      	movs	r5, #0
   8235e:	e009      	b.n	82374 <_fputwc_r+0x5c>
   82360:	6823      	ldr	r3, [r4, #0]
   82362:	7019      	strb	r1, [r3, #0]
   82364:	6823      	ldr	r3, [r4, #0]
   82366:	3301      	adds	r3, #1
   82368:	6023      	str	r3, [r4, #0]
   8236a:	3501      	adds	r5, #1
   8236c:	42b5      	cmp	r5, r6
   8236e:	d22e      	bcs.n	823ce <_fputwc_r+0xb6>
   82370:	ab01      	add	r3, sp, #4
   82372:	5ce9      	ldrb	r1, [r5, r3]
   82374:	68a3      	ldr	r3, [r4, #8]
   82376:	3b01      	subs	r3, #1
   82378:	2b00      	cmp	r3, #0
   8237a:	60a3      	str	r3, [r4, #8]
   8237c:	daf0      	bge.n	82360 <_fputwc_r+0x48>
   8237e:	69a2      	ldr	r2, [r4, #24]
   82380:	4293      	cmp	r3, r2
   82382:	db06      	blt.n	82392 <_fputwc_r+0x7a>
   82384:	6823      	ldr	r3, [r4, #0]
   82386:	7019      	strb	r1, [r3, #0]
   82388:	6823      	ldr	r3, [r4, #0]
   8238a:	7819      	ldrb	r1, [r3, #0]
   8238c:	3301      	adds	r3, #1
   8238e:	290a      	cmp	r1, #10
   82390:	d1ea      	bne.n	82368 <_fputwc_r+0x50>
   82392:	4640      	mov	r0, r8
   82394:	4622      	mov	r2, r4
   82396:	f001 f965 	bl	83664 <__swbuf_r>
   8239a:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8239e:	4258      	negs	r0, r3
   823a0:	4158      	adcs	r0, r3
   823a2:	2800      	cmp	r0, #0
   823a4:	d0e1      	beq.n	8236a <_fputwc_r+0x52>
   823a6:	f04f 30ff 	mov.w	r0, #4294967295
   823aa:	b002      	add	sp, #8
   823ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823b0:	89a3      	ldrh	r3, [r4, #12]
   823b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823b6:	81a3      	strh	r3, [r4, #12]
   823b8:	b002      	add	sp, #8
   823ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823be:	1e7b      	subs	r3, r7, #1
   823c0:	2bfe      	cmp	r3, #254	; 0xfe
   823c2:	d8bd      	bhi.n	82340 <_fputwc_r+0x28>
   823c4:	b2f9      	uxtb	r1, r7
   823c6:	4606      	mov	r6, r0
   823c8:	f88d 1004 	strb.w	r1, [sp, #4]
   823cc:	e7c6      	b.n	8235c <_fputwc_r+0x44>
   823ce:	4638      	mov	r0, r7
   823d0:	b002      	add	sp, #8
   823d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823d6:	bf00      	nop

000823d8 <_malloc_trim_r>:
   823d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   823da:	4d23      	ldr	r5, [pc, #140]	; (82468 <_malloc_trim_r+0x90>)
   823dc:	460f      	mov	r7, r1
   823de:	4604      	mov	r4, r0
   823e0:	f000 ff08 	bl	831f4 <__malloc_lock>
   823e4:	68ab      	ldr	r3, [r5, #8]
   823e6:	685e      	ldr	r6, [r3, #4]
   823e8:	f026 0603 	bic.w	r6, r6, #3
   823ec:	1bf1      	subs	r1, r6, r7
   823ee:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   823f2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   823f6:	f021 010f 	bic.w	r1, r1, #15
   823fa:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   823fe:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82402:	db07      	blt.n	82414 <_malloc_trim_r+0x3c>
   82404:	4620      	mov	r0, r4
   82406:	2100      	movs	r1, #0
   82408:	f001 f8d8 	bl	835bc <_sbrk_r>
   8240c:	68ab      	ldr	r3, [r5, #8]
   8240e:	4433      	add	r3, r6
   82410:	4298      	cmp	r0, r3
   82412:	d004      	beq.n	8241e <_malloc_trim_r+0x46>
   82414:	4620      	mov	r0, r4
   82416:	f000 feef 	bl	831f8 <__malloc_unlock>
   8241a:	2000      	movs	r0, #0
   8241c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8241e:	4620      	mov	r0, r4
   82420:	4279      	negs	r1, r7
   82422:	f001 f8cb 	bl	835bc <_sbrk_r>
   82426:	3001      	adds	r0, #1
   82428:	d00d      	beq.n	82446 <_malloc_trim_r+0x6e>
   8242a:	4b10      	ldr	r3, [pc, #64]	; (8246c <_malloc_trim_r+0x94>)
   8242c:	68aa      	ldr	r2, [r5, #8]
   8242e:	6819      	ldr	r1, [r3, #0]
   82430:	1bf6      	subs	r6, r6, r7
   82432:	f046 0601 	orr.w	r6, r6, #1
   82436:	4620      	mov	r0, r4
   82438:	1bc9      	subs	r1, r1, r7
   8243a:	6056      	str	r6, [r2, #4]
   8243c:	6019      	str	r1, [r3, #0]
   8243e:	f000 fedb 	bl	831f8 <__malloc_unlock>
   82442:	2001      	movs	r0, #1
   82444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82446:	4620      	mov	r0, r4
   82448:	2100      	movs	r1, #0
   8244a:	f001 f8b7 	bl	835bc <_sbrk_r>
   8244e:	68ab      	ldr	r3, [r5, #8]
   82450:	1ac2      	subs	r2, r0, r3
   82452:	2a0f      	cmp	r2, #15
   82454:	ddde      	ble.n	82414 <_malloc_trim_r+0x3c>
   82456:	4d06      	ldr	r5, [pc, #24]	; (82470 <_malloc_trim_r+0x98>)
   82458:	4904      	ldr	r1, [pc, #16]	; (8246c <_malloc_trim_r+0x94>)
   8245a:	682d      	ldr	r5, [r5, #0]
   8245c:	f042 0201 	orr.w	r2, r2, #1
   82460:	1b40      	subs	r0, r0, r5
   82462:	605a      	str	r2, [r3, #4]
   82464:	6008      	str	r0, [r1, #0]
   82466:	e7d5      	b.n	82414 <_malloc_trim_r+0x3c>
   82468:	20070590 	.word	0x20070590
   8246c:	20070ae8 	.word	0x20070ae8
   82470:	2007099c 	.word	0x2007099c

00082474 <_free_r>:
   82474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82478:	460d      	mov	r5, r1
   8247a:	4606      	mov	r6, r0
   8247c:	2900      	cmp	r1, #0
   8247e:	d055      	beq.n	8252c <_free_r+0xb8>
   82480:	f000 feb8 	bl	831f4 <__malloc_lock>
   82484:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82488:	f8df c170 	ldr.w	ip, [pc, #368]	; 825fc <_free_r+0x188>
   8248c:	f1a5 0408 	sub.w	r4, r5, #8
   82490:	f021 0301 	bic.w	r3, r1, #1
   82494:	18e2      	adds	r2, r4, r3
   82496:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8249a:	6857      	ldr	r7, [r2, #4]
   8249c:	4290      	cmp	r0, r2
   8249e:	f027 0703 	bic.w	r7, r7, #3
   824a2:	d068      	beq.n	82576 <_free_r+0x102>
   824a4:	f011 0101 	ands.w	r1, r1, #1
   824a8:	6057      	str	r7, [r2, #4]
   824aa:	d032      	beq.n	82512 <_free_r+0x9e>
   824ac:	2100      	movs	r1, #0
   824ae:	19d0      	adds	r0, r2, r7
   824b0:	6840      	ldr	r0, [r0, #4]
   824b2:	07c0      	lsls	r0, r0, #31
   824b4:	d406      	bmi.n	824c4 <_free_r+0x50>
   824b6:	443b      	add	r3, r7
   824b8:	6890      	ldr	r0, [r2, #8]
   824ba:	2900      	cmp	r1, #0
   824bc:	d04d      	beq.n	8255a <_free_r+0xe6>
   824be:	68d2      	ldr	r2, [r2, #12]
   824c0:	60c2      	str	r2, [r0, #12]
   824c2:	6090      	str	r0, [r2, #8]
   824c4:	f043 0201 	orr.w	r2, r3, #1
   824c8:	6062      	str	r2, [r4, #4]
   824ca:	50e3      	str	r3, [r4, r3]
   824cc:	b9e1      	cbnz	r1, 82508 <_free_r+0x94>
   824ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   824d2:	d32d      	bcc.n	82530 <_free_r+0xbc>
   824d4:	0a5a      	lsrs	r2, r3, #9
   824d6:	2a04      	cmp	r2, #4
   824d8:	d869      	bhi.n	825ae <_free_r+0x13a>
   824da:	0998      	lsrs	r0, r3, #6
   824dc:	3038      	adds	r0, #56	; 0x38
   824de:	0041      	lsls	r1, r0, #1
   824e0:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   824e4:	f8dc 2008 	ldr.w	r2, [ip, #8]
   824e8:	4944      	ldr	r1, [pc, #272]	; (825fc <_free_r+0x188>)
   824ea:	4562      	cmp	r2, ip
   824ec:	d065      	beq.n	825ba <_free_r+0x146>
   824ee:	6851      	ldr	r1, [r2, #4]
   824f0:	f021 0103 	bic.w	r1, r1, #3
   824f4:	428b      	cmp	r3, r1
   824f6:	d202      	bcs.n	824fe <_free_r+0x8a>
   824f8:	6892      	ldr	r2, [r2, #8]
   824fa:	4594      	cmp	ip, r2
   824fc:	d1f7      	bne.n	824ee <_free_r+0x7a>
   824fe:	68d3      	ldr	r3, [r2, #12]
   82500:	60e3      	str	r3, [r4, #12]
   82502:	60a2      	str	r2, [r4, #8]
   82504:	609c      	str	r4, [r3, #8]
   82506:	60d4      	str	r4, [r2, #12]
   82508:	4630      	mov	r0, r6
   8250a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8250e:	f000 be73 	b.w	831f8 <__malloc_unlock>
   82512:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82516:	f10c 0808 	add.w	r8, ip, #8
   8251a:	1b64      	subs	r4, r4, r5
   8251c:	68a0      	ldr	r0, [r4, #8]
   8251e:	442b      	add	r3, r5
   82520:	4540      	cmp	r0, r8
   82522:	d042      	beq.n	825aa <_free_r+0x136>
   82524:	68e5      	ldr	r5, [r4, #12]
   82526:	60c5      	str	r5, [r0, #12]
   82528:	60a8      	str	r0, [r5, #8]
   8252a:	e7c0      	b.n	824ae <_free_r+0x3a>
   8252c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82530:	08db      	lsrs	r3, r3, #3
   82532:	109a      	asrs	r2, r3, #2
   82534:	2001      	movs	r0, #1
   82536:	4090      	lsls	r0, r2
   82538:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8253c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82540:	689a      	ldr	r2, [r3, #8]
   82542:	4301      	orrs	r1, r0
   82544:	60a2      	str	r2, [r4, #8]
   82546:	60e3      	str	r3, [r4, #12]
   82548:	f8cc 1004 	str.w	r1, [ip, #4]
   8254c:	4630      	mov	r0, r6
   8254e:	609c      	str	r4, [r3, #8]
   82550:	60d4      	str	r4, [r2, #12]
   82552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82556:	f000 be4f 	b.w	831f8 <__malloc_unlock>
   8255a:	4d29      	ldr	r5, [pc, #164]	; (82600 <_free_r+0x18c>)
   8255c:	42a8      	cmp	r0, r5
   8255e:	d1ae      	bne.n	824be <_free_r+0x4a>
   82560:	f043 0201 	orr.w	r2, r3, #1
   82564:	f8cc 4014 	str.w	r4, [ip, #20]
   82568:	f8cc 4010 	str.w	r4, [ip, #16]
   8256c:	60e0      	str	r0, [r4, #12]
   8256e:	60a0      	str	r0, [r4, #8]
   82570:	6062      	str	r2, [r4, #4]
   82572:	50e3      	str	r3, [r4, r3]
   82574:	e7c8      	b.n	82508 <_free_r+0x94>
   82576:	441f      	add	r7, r3
   82578:	07cb      	lsls	r3, r1, #31
   8257a:	d407      	bmi.n	8258c <_free_r+0x118>
   8257c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82580:	1a64      	subs	r4, r4, r1
   82582:	68e3      	ldr	r3, [r4, #12]
   82584:	68a2      	ldr	r2, [r4, #8]
   82586:	440f      	add	r7, r1
   82588:	60d3      	str	r3, [r2, #12]
   8258a:	609a      	str	r2, [r3, #8]
   8258c:	4b1d      	ldr	r3, [pc, #116]	; (82604 <_free_r+0x190>)
   8258e:	f047 0201 	orr.w	r2, r7, #1
   82592:	681b      	ldr	r3, [r3, #0]
   82594:	6062      	str	r2, [r4, #4]
   82596:	429f      	cmp	r7, r3
   82598:	f8cc 4008 	str.w	r4, [ip, #8]
   8259c:	d3b4      	bcc.n	82508 <_free_r+0x94>
   8259e:	4b1a      	ldr	r3, [pc, #104]	; (82608 <_free_r+0x194>)
   825a0:	4630      	mov	r0, r6
   825a2:	6819      	ldr	r1, [r3, #0]
   825a4:	f7ff ff18 	bl	823d8 <_malloc_trim_r>
   825a8:	e7ae      	b.n	82508 <_free_r+0x94>
   825aa:	2101      	movs	r1, #1
   825ac:	e77f      	b.n	824ae <_free_r+0x3a>
   825ae:	2a14      	cmp	r2, #20
   825b0:	d80b      	bhi.n	825ca <_free_r+0x156>
   825b2:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   825b6:	0041      	lsls	r1, r0, #1
   825b8:	e792      	b.n	824e0 <_free_r+0x6c>
   825ba:	1080      	asrs	r0, r0, #2
   825bc:	2501      	movs	r5, #1
   825be:	4085      	lsls	r5, r0
   825c0:	6848      	ldr	r0, [r1, #4]
   825c2:	4613      	mov	r3, r2
   825c4:	4328      	orrs	r0, r5
   825c6:	6048      	str	r0, [r1, #4]
   825c8:	e79a      	b.n	82500 <_free_r+0x8c>
   825ca:	2a54      	cmp	r2, #84	; 0x54
   825cc:	d803      	bhi.n	825d6 <_free_r+0x162>
   825ce:	0b18      	lsrs	r0, r3, #12
   825d0:	306e      	adds	r0, #110	; 0x6e
   825d2:	0041      	lsls	r1, r0, #1
   825d4:	e784      	b.n	824e0 <_free_r+0x6c>
   825d6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   825da:	d803      	bhi.n	825e4 <_free_r+0x170>
   825dc:	0bd8      	lsrs	r0, r3, #15
   825de:	3077      	adds	r0, #119	; 0x77
   825e0:	0041      	lsls	r1, r0, #1
   825e2:	e77d      	b.n	824e0 <_free_r+0x6c>
   825e4:	f240 5154 	movw	r1, #1364	; 0x554
   825e8:	428a      	cmp	r2, r1
   825ea:	d803      	bhi.n	825f4 <_free_r+0x180>
   825ec:	0c98      	lsrs	r0, r3, #18
   825ee:	307c      	adds	r0, #124	; 0x7c
   825f0:	0041      	lsls	r1, r0, #1
   825f2:	e775      	b.n	824e0 <_free_r+0x6c>
   825f4:	21fc      	movs	r1, #252	; 0xfc
   825f6:	207e      	movs	r0, #126	; 0x7e
   825f8:	e772      	b.n	824e0 <_free_r+0x6c>
   825fa:	bf00      	nop
   825fc:	20070590 	.word	0x20070590
   82600:	20070598 	.word	0x20070598
   82604:	20070998 	.word	0x20070998
   82608:	20070ae4 	.word	0x20070ae4

0008260c <__sfvwrite_r>:
   8260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82610:	6893      	ldr	r3, [r2, #8]
   82612:	b083      	sub	sp, #12
   82614:	4616      	mov	r6, r2
   82616:	4681      	mov	r9, r0
   82618:	460c      	mov	r4, r1
   8261a:	b32b      	cbz	r3, 82668 <__sfvwrite_r+0x5c>
   8261c:	898b      	ldrh	r3, [r1, #12]
   8261e:	0719      	lsls	r1, r3, #28
   82620:	d526      	bpl.n	82670 <__sfvwrite_r+0x64>
   82622:	6922      	ldr	r2, [r4, #16]
   82624:	b322      	cbz	r2, 82670 <__sfvwrite_r+0x64>
   82626:	f003 0202 	and.w	r2, r3, #2
   8262a:	b292      	uxth	r2, r2
   8262c:	6835      	ldr	r5, [r6, #0]
   8262e:	2a00      	cmp	r2, #0
   82630:	d02c      	beq.n	8268c <__sfvwrite_r+0x80>
   82632:	f04f 0a00 	mov.w	sl, #0
   82636:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82920 <__sfvwrite_r+0x314>
   8263a:	46d0      	mov	r8, sl
   8263c:	45d8      	cmp	r8, fp
   8263e:	bf34      	ite	cc
   82640:	4643      	movcc	r3, r8
   82642:	465b      	movcs	r3, fp
   82644:	4652      	mov	r2, sl
   82646:	4648      	mov	r0, r9
   82648:	f1b8 0f00 	cmp.w	r8, #0
   8264c:	d04f      	beq.n	826ee <__sfvwrite_r+0xe2>
   8264e:	69e1      	ldr	r1, [r4, #28]
   82650:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82652:	47b8      	blx	r7
   82654:	2800      	cmp	r0, #0
   82656:	dd56      	ble.n	82706 <__sfvwrite_r+0xfa>
   82658:	68b3      	ldr	r3, [r6, #8]
   8265a:	4482      	add	sl, r0
   8265c:	1a1b      	subs	r3, r3, r0
   8265e:	ebc0 0808 	rsb	r8, r0, r8
   82662:	60b3      	str	r3, [r6, #8]
   82664:	2b00      	cmp	r3, #0
   82666:	d1e9      	bne.n	8263c <__sfvwrite_r+0x30>
   82668:	2000      	movs	r0, #0
   8266a:	b003      	add	sp, #12
   8266c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82670:	4648      	mov	r0, r9
   82672:	4621      	mov	r1, r4
   82674:	f7ff fc88 	bl	81f88 <__swsetup_r>
   82678:	2800      	cmp	r0, #0
   8267a:	f040 8148 	bne.w	8290e <__sfvwrite_r+0x302>
   8267e:	89a3      	ldrh	r3, [r4, #12]
   82680:	6835      	ldr	r5, [r6, #0]
   82682:	f003 0202 	and.w	r2, r3, #2
   82686:	b292      	uxth	r2, r2
   82688:	2a00      	cmp	r2, #0
   8268a:	d1d2      	bne.n	82632 <__sfvwrite_r+0x26>
   8268c:	f013 0a01 	ands.w	sl, r3, #1
   82690:	d142      	bne.n	82718 <__sfvwrite_r+0x10c>
   82692:	46d0      	mov	r8, sl
   82694:	f1b8 0f00 	cmp.w	r8, #0
   82698:	d023      	beq.n	826e2 <__sfvwrite_r+0xd6>
   8269a:	059a      	lsls	r2, r3, #22
   8269c:	68a7      	ldr	r7, [r4, #8]
   8269e:	d576      	bpl.n	8278e <__sfvwrite_r+0x182>
   826a0:	45b8      	cmp	r8, r7
   826a2:	f0c0 80a4 	bcc.w	827ee <__sfvwrite_r+0x1e2>
   826a6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   826aa:	f040 80b2 	bne.w	82812 <__sfvwrite_r+0x206>
   826ae:	6820      	ldr	r0, [r4, #0]
   826b0:	46bb      	mov	fp, r7
   826b2:	4651      	mov	r1, sl
   826b4:	465a      	mov	r2, fp
   826b6:	f000 fd37 	bl	83128 <memmove>
   826ba:	68a2      	ldr	r2, [r4, #8]
   826bc:	6821      	ldr	r1, [r4, #0]
   826be:	1bd2      	subs	r2, r2, r7
   826c0:	eb01 030b 	add.w	r3, r1, fp
   826c4:	60a2      	str	r2, [r4, #8]
   826c6:	6023      	str	r3, [r4, #0]
   826c8:	4642      	mov	r2, r8
   826ca:	68b3      	ldr	r3, [r6, #8]
   826cc:	4492      	add	sl, r2
   826ce:	1a9b      	subs	r3, r3, r2
   826d0:	ebc2 0808 	rsb	r8, r2, r8
   826d4:	60b3      	str	r3, [r6, #8]
   826d6:	2b00      	cmp	r3, #0
   826d8:	d0c6      	beq.n	82668 <__sfvwrite_r+0x5c>
   826da:	89a3      	ldrh	r3, [r4, #12]
   826dc:	f1b8 0f00 	cmp.w	r8, #0
   826e0:	d1db      	bne.n	8269a <__sfvwrite_r+0x8e>
   826e2:	f8d5 a000 	ldr.w	sl, [r5]
   826e6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   826ea:	3508      	adds	r5, #8
   826ec:	e7d2      	b.n	82694 <__sfvwrite_r+0x88>
   826ee:	f8d5 a000 	ldr.w	sl, [r5]
   826f2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   826f6:	3508      	adds	r5, #8
   826f8:	e7a0      	b.n	8263c <__sfvwrite_r+0x30>
   826fa:	4648      	mov	r0, r9
   826fc:	4621      	mov	r1, r4
   826fe:	f7ff fd59 	bl	821b4 <_fflush_r>
   82702:	2800      	cmp	r0, #0
   82704:	d059      	beq.n	827ba <__sfvwrite_r+0x1ae>
   82706:	89a3      	ldrh	r3, [r4, #12]
   82708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8270c:	f04f 30ff 	mov.w	r0, #4294967295
   82710:	81a3      	strh	r3, [r4, #12]
   82712:	b003      	add	sp, #12
   82714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82718:	4692      	mov	sl, r2
   8271a:	9201      	str	r2, [sp, #4]
   8271c:	4693      	mov	fp, r2
   8271e:	4690      	mov	r8, r2
   82720:	f1b8 0f00 	cmp.w	r8, #0
   82724:	d02b      	beq.n	8277e <__sfvwrite_r+0x172>
   82726:	9f01      	ldr	r7, [sp, #4]
   82728:	2f00      	cmp	r7, #0
   8272a:	d064      	beq.n	827f6 <__sfvwrite_r+0x1ea>
   8272c:	6820      	ldr	r0, [r4, #0]
   8272e:	6921      	ldr	r1, [r4, #16]
   82730:	45c2      	cmp	sl, r8
   82732:	bf34      	ite	cc
   82734:	4653      	movcc	r3, sl
   82736:	4643      	movcs	r3, r8
   82738:	4288      	cmp	r0, r1
   8273a:	461f      	mov	r7, r3
   8273c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82740:	6962      	ldr	r2, [r4, #20]
   82742:	d903      	bls.n	8274c <__sfvwrite_r+0x140>
   82744:	4494      	add	ip, r2
   82746:	4563      	cmp	r3, ip
   82748:	f300 80ae 	bgt.w	828a8 <__sfvwrite_r+0x29c>
   8274c:	4293      	cmp	r3, r2
   8274e:	db36      	blt.n	827be <__sfvwrite_r+0x1b2>
   82750:	4613      	mov	r3, r2
   82752:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82754:	4648      	mov	r0, r9
   82756:	69e1      	ldr	r1, [r4, #28]
   82758:	465a      	mov	r2, fp
   8275a:	47b8      	blx	r7
   8275c:	1e07      	subs	r7, r0, #0
   8275e:	ddd2      	ble.n	82706 <__sfvwrite_r+0xfa>
   82760:	ebba 0a07 	subs.w	sl, sl, r7
   82764:	d03a      	beq.n	827dc <__sfvwrite_r+0x1d0>
   82766:	68b3      	ldr	r3, [r6, #8]
   82768:	44bb      	add	fp, r7
   8276a:	1bdb      	subs	r3, r3, r7
   8276c:	ebc7 0808 	rsb	r8, r7, r8
   82770:	60b3      	str	r3, [r6, #8]
   82772:	2b00      	cmp	r3, #0
   82774:	f43f af78 	beq.w	82668 <__sfvwrite_r+0x5c>
   82778:	f1b8 0f00 	cmp.w	r8, #0
   8277c:	d1d3      	bne.n	82726 <__sfvwrite_r+0x11a>
   8277e:	2700      	movs	r7, #0
   82780:	f8d5 b000 	ldr.w	fp, [r5]
   82784:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82788:	9701      	str	r7, [sp, #4]
   8278a:	3508      	adds	r5, #8
   8278c:	e7c8      	b.n	82720 <__sfvwrite_r+0x114>
   8278e:	6820      	ldr	r0, [r4, #0]
   82790:	6923      	ldr	r3, [r4, #16]
   82792:	4298      	cmp	r0, r3
   82794:	d802      	bhi.n	8279c <__sfvwrite_r+0x190>
   82796:	6963      	ldr	r3, [r4, #20]
   82798:	4598      	cmp	r8, r3
   8279a:	d272      	bcs.n	82882 <__sfvwrite_r+0x276>
   8279c:	45b8      	cmp	r8, r7
   8279e:	bf38      	it	cc
   827a0:	4647      	movcc	r7, r8
   827a2:	463a      	mov	r2, r7
   827a4:	4651      	mov	r1, sl
   827a6:	f000 fcbf 	bl	83128 <memmove>
   827aa:	68a3      	ldr	r3, [r4, #8]
   827ac:	6822      	ldr	r2, [r4, #0]
   827ae:	1bdb      	subs	r3, r3, r7
   827b0:	443a      	add	r2, r7
   827b2:	60a3      	str	r3, [r4, #8]
   827b4:	6022      	str	r2, [r4, #0]
   827b6:	2b00      	cmp	r3, #0
   827b8:	d09f      	beq.n	826fa <__sfvwrite_r+0xee>
   827ba:	463a      	mov	r2, r7
   827bc:	e785      	b.n	826ca <__sfvwrite_r+0xbe>
   827be:	461a      	mov	r2, r3
   827c0:	4659      	mov	r1, fp
   827c2:	9300      	str	r3, [sp, #0]
   827c4:	f000 fcb0 	bl	83128 <memmove>
   827c8:	9b00      	ldr	r3, [sp, #0]
   827ca:	68a1      	ldr	r1, [r4, #8]
   827cc:	6822      	ldr	r2, [r4, #0]
   827ce:	1ac9      	subs	r1, r1, r3
   827d0:	ebba 0a07 	subs.w	sl, sl, r7
   827d4:	4413      	add	r3, r2
   827d6:	60a1      	str	r1, [r4, #8]
   827d8:	6023      	str	r3, [r4, #0]
   827da:	d1c4      	bne.n	82766 <__sfvwrite_r+0x15a>
   827dc:	4648      	mov	r0, r9
   827de:	4621      	mov	r1, r4
   827e0:	f7ff fce8 	bl	821b4 <_fflush_r>
   827e4:	2800      	cmp	r0, #0
   827e6:	d18e      	bne.n	82706 <__sfvwrite_r+0xfa>
   827e8:	f8cd a004 	str.w	sl, [sp, #4]
   827ec:	e7bb      	b.n	82766 <__sfvwrite_r+0x15a>
   827ee:	6820      	ldr	r0, [r4, #0]
   827f0:	4647      	mov	r7, r8
   827f2:	46c3      	mov	fp, r8
   827f4:	e75d      	b.n	826b2 <__sfvwrite_r+0xa6>
   827f6:	4658      	mov	r0, fp
   827f8:	210a      	movs	r1, #10
   827fa:	4642      	mov	r2, r8
   827fc:	f000 fbd4 	bl	82fa8 <memchr>
   82800:	2800      	cmp	r0, #0
   82802:	d07f      	beq.n	82904 <__sfvwrite_r+0x2f8>
   82804:	f100 0a01 	add.w	sl, r0, #1
   82808:	2701      	movs	r7, #1
   8280a:	ebcb 0a0a 	rsb	sl, fp, sl
   8280e:	9701      	str	r7, [sp, #4]
   82810:	e78c      	b.n	8272c <__sfvwrite_r+0x120>
   82812:	6822      	ldr	r2, [r4, #0]
   82814:	6921      	ldr	r1, [r4, #16]
   82816:	6967      	ldr	r7, [r4, #20]
   82818:	ebc1 0c02 	rsb	ip, r1, r2
   8281c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82820:	f10c 0201 	add.w	r2, ip, #1
   82824:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82828:	4442      	add	r2, r8
   8282a:	107f      	asrs	r7, r7, #1
   8282c:	4297      	cmp	r7, r2
   8282e:	bf34      	ite	cc
   82830:	4617      	movcc	r7, r2
   82832:	463a      	movcs	r2, r7
   82834:	055b      	lsls	r3, r3, #21
   82836:	d54f      	bpl.n	828d8 <__sfvwrite_r+0x2cc>
   82838:	4611      	mov	r1, r2
   8283a:	4648      	mov	r0, r9
   8283c:	f8cd c000 	str.w	ip, [sp]
   82840:	f000 f916 	bl	82a70 <_malloc_r>
   82844:	f8dd c000 	ldr.w	ip, [sp]
   82848:	4683      	mov	fp, r0
   8284a:	2800      	cmp	r0, #0
   8284c:	d062      	beq.n	82914 <__sfvwrite_r+0x308>
   8284e:	4662      	mov	r2, ip
   82850:	6921      	ldr	r1, [r4, #16]
   82852:	f8cd c000 	str.w	ip, [sp]
   82856:	f000 fbf1 	bl	8303c <memcpy>
   8285a:	89a2      	ldrh	r2, [r4, #12]
   8285c:	f8dd c000 	ldr.w	ip, [sp]
   82860:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82864:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82868:	81a2      	strh	r2, [r4, #12]
   8286a:	eb0b 000c 	add.w	r0, fp, ip
   8286e:	ebcc 0207 	rsb	r2, ip, r7
   82872:	f8c4 b010 	str.w	fp, [r4, #16]
   82876:	6167      	str	r7, [r4, #20]
   82878:	6020      	str	r0, [r4, #0]
   8287a:	60a2      	str	r2, [r4, #8]
   8287c:	4647      	mov	r7, r8
   8287e:	46c3      	mov	fp, r8
   82880:	e717      	b.n	826b2 <__sfvwrite_r+0xa6>
   82882:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82886:	4590      	cmp	r8, r2
   82888:	bf38      	it	cc
   8288a:	4642      	movcc	r2, r8
   8288c:	fb92 f2f3 	sdiv	r2, r2, r3
   82890:	fb02 f303 	mul.w	r3, r2, r3
   82894:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82896:	4648      	mov	r0, r9
   82898:	69e1      	ldr	r1, [r4, #28]
   8289a:	4652      	mov	r2, sl
   8289c:	47b8      	blx	r7
   8289e:	2800      	cmp	r0, #0
   828a0:	f77f af31 	ble.w	82706 <__sfvwrite_r+0xfa>
   828a4:	4602      	mov	r2, r0
   828a6:	e710      	b.n	826ca <__sfvwrite_r+0xbe>
   828a8:	4662      	mov	r2, ip
   828aa:	4659      	mov	r1, fp
   828ac:	f8cd c000 	str.w	ip, [sp]
   828b0:	f000 fc3a 	bl	83128 <memmove>
   828b4:	f8dd c000 	ldr.w	ip, [sp]
   828b8:	6823      	ldr	r3, [r4, #0]
   828ba:	4648      	mov	r0, r9
   828bc:	4463      	add	r3, ip
   828be:	6023      	str	r3, [r4, #0]
   828c0:	4621      	mov	r1, r4
   828c2:	f8cd c000 	str.w	ip, [sp]
   828c6:	f7ff fc75 	bl	821b4 <_fflush_r>
   828ca:	f8dd c000 	ldr.w	ip, [sp]
   828ce:	2800      	cmp	r0, #0
   828d0:	f47f af19 	bne.w	82706 <__sfvwrite_r+0xfa>
   828d4:	4667      	mov	r7, ip
   828d6:	e743      	b.n	82760 <__sfvwrite_r+0x154>
   828d8:	4648      	mov	r0, r9
   828da:	f8cd c000 	str.w	ip, [sp]
   828de:	f000 fc8d 	bl	831fc <_realloc_r>
   828e2:	f8dd c000 	ldr.w	ip, [sp]
   828e6:	4683      	mov	fp, r0
   828e8:	2800      	cmp	r0, #0
   828ea:	d1be      	bne.n	8286a <__sfvwrite_r+0x25e>
   828ec:	4648      	mov	r0, r9
   828ee:	6921      	ldr	r1, [r4, #16]
   828f0:	f7ff fdc0 	bl	82474 <_free_r>
   828f4:	89a3      	ldrh	r3, [r4, #12]
   828f6:	220c      	movs	r2, #12
   828f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   828fc:	b29b      	uxth	r3, r3
   828fe:	f8c9 2000 	str.w	r2, [r9]
   82902:	e701      	b.n	82708 <__sfvwrite_r+0xfc>
   82904:	2701      	movs	r7, #1
   82906:	f108 0a01 	add.w	sl, r8, #1
   8290a:	9701      	str	r7, [sp, #4]
   8290c:	e70e      	b.n	8272c <__sfvwrite_r+0x120>
   8290e:	f04f 30ff 	mov.w	r0, #4294967295
   82912:	e6aa      	b.n	8266a <__sfvwrite_r+0x5e>
   82914:	230c      	movs	r3, #12
   82916:	f8c9 3000 	str.w	r3, [r9]
   8291a:	89a3      	ldrh	r3, [r4, #12]
   8291c:	e6f4      	b.n	82708 <__sfvwrite_r+0xfc>
   8291e:	bf00      	nop
   82920:	7ffffc00 	.word	0x7ffffc00

00082924 <_fwalk>:
   82924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82928:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   8292c:	4688      	mov	r8, r1
   8292e:	d019      	beq.n	82964 <_fwalk+0x40>
   82930:	2600      	movs	r6, #0
   82932:	687d      	ldr	r5, [r7, #4]
   82934:	68bc      	ldr	r4, [r7, #8]
   82936:	3d01      	subs	r5, #1
   82938:	d40e      	bmi.n	82958 <_fwalk+0x34>
   8293a:	89a3      	ldrh	r3, [r4, #12]
   8293c:	3d01      	subs	r5, #1
   8293e:	2b01      	cmp	r3, #1
   82940:	d906      	bls.n	82950 <_fwalk+0x2c>
   82942:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82946:	4620      	mov	r0, r4
   82948:	3301      	adds	r3, #1
   8294a:	d001      	beq.n	82950 <_fwalk+0x2c>
   8294c:	47c0      	blx	r8
   8294e:	4306      	orrs	r6, r0
   82950:	1c6b      	adds	r3, r5, #1
   82952:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82956:	d1f0      	bne.n	8293a <_fwalk+0x16>
   82958:	683f      	ldr	r7, [r7, #0]
   8295a:	2f00      	cmp	r7, #0
   8295c:	d1e9      	bne.n	82932 <_fwalk+0xe>
   8295e:	4630      	mov	r0, r6
   82960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82964:	463e      	mov	r6, r7
   82966:	4630      	mov	r0, r6
   82968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008296c <__locale_charset>:
   8296c:	4800      	ldr	r0, [pc, #0]	; (82970 <__locale_charset+0x4>)
   8296e:	4770      	bx	lr
   82970:	2007056c 	.word	0x2007056c

00082974 <__locale_mb_cur_max>:
   82974:	4b01      	ldr	r3, [pc, #4]	; (8297c <__locale_mb_cur_max+0x8>)
   82976:	6818      	ldr	r0, [r3, #0]
   82978:	4770      	bx	lr
   8297a:	bf00      	nop
   8297c:	2007058c 	.word	0x2007058c

00082980 <__smakebuf_r>:
   82980:	b5f0      	push	{r4, r5, r6, r7, lr}
   82982:	898b      	ldrh	r3, [r1, #12]
   82984:	b091      	sub	sp, #68	; 0x44
   82986:	b29a      	uxth	r2, r3
   82988:	0796      	lsls	r6, r2, #30
   8298a:	460c      	mov	r4, r1
   8298c:	4605      	mov	r5, r0
   8298e:	d437      	bmi.n	82a00 <__smakebuf_r+0x80>
   82990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82994:	2900      	cmp	r1, #0
   82996:	db17      	blt.n	829c8 <__smakebuf_r+0x48>
   82998:	aa01      	add	r2, sp, #4
   8299a:	f000 ffaf 	bl	838fc <_fstat_r>
   8299e:	2800      	cmp	r0, #0
   829a0:	db10      	blt.n	829c4 <__smakebuf_r+0x44>
   829a2:	9b02      	ldr	r3, [sp, #8]
   829a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   829a8:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   829ac:	424f      	negs	r7, r1
   829ae:	414f      	adcs	r7, r1
   829b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   829b4:	d02c      	beq.n	82a10 <__smakebuf_r+0x90>
   829b6:	89a3      	ldrh	r3, [r4, #12]
   829b8:	f44f 6680 	mov.w	r6, #1024	; 0x400
   829bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   829c0:	81a3      	strh	r3, [r4, #12]
   829c2:	e00b      	b.n	829dc <__smakebuf_r+0x5c>
   829c4:	89a3      	ldrh	r3, [r4, #12]
   829c6:	b29a      	uxth	r2, r3
   829c8:	f012 0f80 	tst.w	r2, #128	; 0x80
   829cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   829d0:	81a3      	strh	r3, [r4, #12]
   829d2:	bf14      	ite	ne
   829d4:	2640      	movne	r6, #64	; 0x40
   829d6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   829da:	2700      	movs	r7, #0
   829dc:	4628      	mov	r0, r5
   829de:	4631      	mov	r1, r6
   829e0:	f000 f846 	bl	82a70 <_malloc_r>
   829e4:	89a3      	ldrh	r3, [r4, #12]
   829e6:	2800      	cmp	r0, #0
   829e8:	d029      	beq.n	82a3e <__smakebuf_r+0xbe>
   829ea:	4a1b      	ldr	r2, [pc, #108]	; (82a58 <__smakebuf_r+0xd8>)
   829ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   829f0:	63ea      	str	r2, [r5, #60]	; 0x3c
   829f2:	81a3      	strh	r3, [r4, #12]
   829f4:	6020      	str	r0, [r4, #0]
   829f6:	6120      	str	r0, [r4, #16]
   829f8:	6166      	str	r6, [r4, #20]
   829fa:	b9a7      	cbnz	r7, 82a26 <__smakebuf_r+0xa6>
   829fc:	b011      	add	sp, #68	; 0x44
   829fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82a00:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82a04:	2201      	movs	r2, #1
   82a06:	600b      	str	r3, [r1, #0]
   82a08:	610b      	str	r3, [r1, #16]
   82a0a:	614a      	str	r2, [r1, #20]
   82a0c:	b011      	add	sp, #68	; 0x44
   82a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82a10:	4a12      	ldr	r2, [pc, #72]	; (82a5c <__smakebuf_r+0xdc>)
   82a12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82a14:	4293      	cmp	r3, r2
   82a16:	d1ce      	bne.n	829b6 <__smakebuf_r+0x36>
   82a18:	89a3      	ldrh	r3, [r4, #12]
   82a1a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82a1e:	4333      	orrs	r3, r6
   82a20:	81a3      	strh	r3, [r4, #12]
   82a22:	64e6      	str	r6, [r4, #76]	; 0x4c
   82a24:	e7da      	b.n	829dc <__smakebuf_r+0x5c>
   82a26:	4628      	mov	r0, r5
   82a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82a2c:	f000 ff7a 	bl	83924 <_isatty_r>
   82a30:	2800      	cmp	r0, #0
   82a32:	d0e3      	beq.n	829fc <__smakebuf_r+0x7c>
   82a34:	89a3      	ldrh	r3, [r4, #12]
   82a36:	f043 0301 	orr.w	r3, r3, #1
   82a3a:	81a3      	strh	r3, [r4, #12]
   82a3c:	e7de      	b.n	829fc <__smakebuf_r+0x7c>
   82a3e:	059a      	lsls	r2, r3, #22
   82a40:	d4dc      	bmi.n	829fc <__smakebuf_r+0x7c>
   82a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82a46:	f043 0302 	orr.w	r3, r3, #2
   82a4a:	2101      	movs	r1, #1
   82a4c:	81a3      	strh	r3, [r4, #12]
   82a4e:	6022      	str	r2, [r4, #0]
   82a50:	6122      	str	r2, [r4, #16]
   82a52:	6161      	str	r1, [r4, #20]
   82a54:	e7d2      	b.n	829fc <__smakebuf_r+0x7c>
   82a56:	bf00      	nop
   82a58:	000821e1 	.word	0x000821e1
   82a5c:	0008363d 	.word	0x0008363d

00082a60 <malloc>:
   82a60:	4b02      	ldr	r3, [pc, #8]	; (82a6c <malloc+0xc>)
   82a62:	4601      	mov	r1, r0
   82a64:	6818      	ldr	r0, [r3, #0]
   82a66:	f000 b803 	b.w	82a70 <_malloc_r>
   82a6a:	bf00      	nop
   82a6c:	20070568 	.word	0x20070568

00082a70 <_malloc_r>:
   82a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a74:	f101 050b 	add.w	r5, r1, #11
   82a78:	2d16      	cmp	r5, #22
   82a7a:	b083      	sub	sp, #12
   82a7c:	4606      	mov	r6, r0
   82a7e:	d927      	bls.n	82ad0 <_malloc_r+0x60>
   82a80:	f035 0507 	bics.w	r5, r5, #7
   82a84:	d427      	bmi.n	82ad6 <_malloc_r+0x66>
   82a86:	42a9      	cmp	r1, r5
   82a88:	d825      	bhi.n	82ad6 <_malloc_r+0x66>
   82a8a:	4630      	mov	r0, r6
   82a8c:	f000 fbb2 	bl	831f4 <__malloc_lock>
   82a90:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82a94:	d226      	bcs.n	82ae4 <_malloc_r+0x74>
   82a96:	4fc1      	ldr	r7, [pc, #772]	; (82d9c <_malloc_r+0x32c>)
   82a98:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82a9c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82aa0:	68dc      	ldr	r4, [r3, #12]
   82aa2:	429c      	cmp	r4, r3
   82aa4:	f000 81d2 	beq.w	82e4c <_malloc_r+0x3dc>
   82aa8:	6863      	ldr	r3, [r4, #4]
   82aaa:	68e2      	ldr	r2, [r4, #12]
   82aac:	f023 0303 	bic.w	r3, r3, #3
   82ab0:	4423      	add	r3, r4
   82ab2:	6858      	ldr	r0, [r3, #4]
   82ab4:	68a1      	ldr	r1, [r4, #8]
   82ab6:	f040 0501 	orr.w	r5, r0, #1
   82aba:	60ca      	str	r2, [r1, #12]
   82abc:	4630      	mov	r0, r6
   82abe:	6091      	str	r1, [r2, #8]
   82ac0:	605d      	str	r5, [r3, #4]
   82ac2:	f000 fb99 	bl	831f8 <__malloc_unlock>
   82ac6:	3408      	adds	r4, #8
   82ac8:	4620      	mov	r0, r4
   82aca:	b003      	add	sp, #12
   82acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ad0:	2510      	movs	r5, #16
   82ad2:	42a9      	cmp	r1, r5
   82ad4:	d9d9      	bls.n	82a8a <_malloc_r+0x1a>
   82ad6:	2400      	movs	r4, #0
   82ad8:	230c      	movs	r3, #12
   82ada:	4620      	mov	r0, r4
   82adc:	6033      	str	r3, [r6, #0]
   82ade:	b003      	add	sp, #12
   82ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ae4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82ae8:	f000 8089 	beq.w	82bfe <_malloc_r+0x18e>
   82aec:	f1bc 0f04 	cmp.w	ip, #4
   82af0:	f200 8160 	bhi.w	82db4 <_malloc_r+0x344>
   82af4:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82af8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82afc:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82b00:	4fa6      	ldr	r7, [pc, #664]	; (82d9c <_malloc_r+0x32c>)
   82b02:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82b06:	68cc      	ldr	r4, [r1, #12]
   82b08:	42a1      	cmp	r1, r4
   82b0a:	d105      	bne.n	82b18 <_malloc_r+0xa8>
   82b0c:	e00c      	b.n	82b28 <_malloc_r+0xb8>
   82b0e:	2b00      	cmp	r3, #0
   82b10:	da79      	bge.n	82c06 <_malloc_r+0x196>
   82b12:	68e4      	ldr	r4, [r4, #12]
   82b14:	42a1      	cmp	r1, r4
   82b16:	d007      	beq.n	82b28 <_malloc_r+0xb8>
   82b18:	6862      	ldr	r2, [r4, #4]
   82b1a:	f022 0203 	bic.w	r2, r2, #3
   82b1e:	1b53      	subs	r3, r2, r5
   82b20:	2b0f      	cmp	r3, #15
   82b22:	ddf4      	ble.n	82b0e <_malloc_r+0x9e>
   82b24:	f10c 3cff 	add.w	ip, ip, #4294967295
   82b28:	f10c 0c01 	add.w	ip, ip, #1
   82b2c:	4b9b      	ldr	r3, [pc, #620]	; (82d9c <_malloc_r+0x32c>)
   82b2e:	693c      	ldr	r4, [r7, #16]
   82b30:	f103 0e08 	add.w	lr, r3, #8
   82b34:	4574      	cmp	r4, lr
   82b36:	f000 817e 	beq.w	82e36 <_malloc_r+0x3c6>
   82b3a:	6861      	ldr	r1, [r4, #4]
   82b3c:	f021 0103 	bic.w	r1, r1, #3
   82b40:	1b4a      	subs	r2, r1, r5
   82b42:	2a0f      	cmp	r2, #15
   82b44:	f300 8164 	bgt.w	82e10 <_malloc_r+0x3a0>
   82b48:	2a00      	cmp	r2, #0
   82b4a:	f8c3 e014 	str.w	lr, [r3, #20]
   82b4e:	f8c3 e010 	str.w	lr, [r3, #16]
   82b52:	da69      	bge.n	82c28 <_malloc_r+0x1b8>
   82b54:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82b58:	f080 813a 	bcs.w	82dd0 <_malloc_r+0x360>
   82b5c:	08c9      	lsrs	r1, r1, #3
   82b5e:	108a      	asrs	r2, r1, #2
   82b60:	f04f 0801 	mov.w	r8, #1
   82b64:	fa08 f802 	lsl.w	r8, r8, r2
   82b68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82b6c:	685a      	ldr	r2, [r3, #4]
   82b6e:	6888      	ldr	r0, [r1, #8]
   82b70:	ea48 0202 	orr.w	r2, r8, r2
   82b74:	60a0      	str	r0, [r4, #8]
   82b76:	60e1      	str	r1, [r4, #12]
   82b78:	605a      	str	r2, [r3, #4]
   82b7a:	608c      	str	r4, [r1, #8]
   82b7c:	60c4      	str	r4, [r0, #12]
   82b7e:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82b82:	2001      	movs	r0, #1
   82b84:	4098      	lsls	r0, r3
   82b86:	4290      	cmp	r0, r2
   82b88:	d85b      	bhi.n	82c42 <_malloc_r+0x1d2>
   82b8a:	4202      	tst	r2, r0
   82b8c:	d106      	bne.n	82b9c <_malloc_r+0x12c>
   82b8e:	f02c 0c03 	bic.w	ip, ip, #3
   82b92:	0040      	lsls	r0, r0, #1
   82b94:	4202      	tst	r2, r0
   82b96:	f10c 0c04 	add.w	ip, ip, #4
   82b9a:	d0fa      	beq.n	82b92 <_malloc_r+0x122>
   82b9c:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82ba0:	4644      	mov	r4, r8
   82ba2:	46e1      	mov	r9, ip
   82ba4:	68e3      	ldr	r3, [r4, #12]
   82ba6:	429c      	cmp	r4, r3
   82ba8:	d107      	bne.n	82bba <_malloc_r+0x14a>
   82baa:	e146      	b.n	82e3a <_malloc_r+0x3ca>
   82bac:	2a00      	cmp	r2, #0
   82bae:	f280 8157 	bge.w	82e60 <_malloc_r+0x3f0>
   82bb2:	68db      	ldr	r3, [r3, #12]
   82bb4:	429c      	cmp	r4, r3
   82bb6:	f000 8140 	beq.w	82e3a <_malloc_r+0x3ca>
   82bba:	6859      	ldr	r1, [r3, #4]
   82bbc:	f021 0103 	bic.w	r1, r1, #3
   82bc0:	1b4a      	subs	r2, r1, r5
   82bc2:	2a0f      	cmp	r2, #15
   82bc4:	ddf2      	ble.n	82bac <_malloc_r+0x13c>
   82bc6:	461c      	mov	r4, r3
   82bc8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82bcc:	68d9      	ldr	r1, [r3, #12]
   82bce:	f045 0901 	orr.w	r9, r5, #1
   82bd2:	f042 0801 	orr.w	r8, r2, #1
   82bd6:	441d      	add	r5, r3
   82bd8:	f8c3 9004 	str.w	r9, [r3, #4]
   82bdc:	4630      	mov	r0, r6
   82bde:	f8cc 100c 	str.w	r1, [ip, #12]
   82be2:	f8c1 c008 	str.w	ip, [r1, #8]
   82be6:	617d      	str	r5, [r7, #20]
   82be8:	613d      	str	r5, [r7, #16]
   82bea:	f8c5 e00c 	str.w	lr, [r5, #12]
   82bee:	f8c5 e008 	str.w	lr, [r5, #8]
   82bf2:	f8c5 8004 	str.w	r8, [r5, #4]
   82bf6:	50aa      	str	r2, [r5, r2]
   82bf8:	f000 fafe 	bl	831f8 <__malloc_unlock>
   82bfc:	e764      	b.n	82ac8 <_malloc_r+0x58>
   82bfe:	217e      	movs	r1, #126	; 0x7e
   82c00:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82c04:	e77c      	b.n	82b00 <_malloc_r+0x90>
   82c06:	4422      	add	r2, r4
   82c08:	6850      	ldr	r0, [r2, #4]
   82c0a:	68e3      	ldr	r3, [r4, #12]
   82c0c:	68a1      	ldr	r1, [r4, #8]
   82c0e:	f040 0501 	orr.w	r5, r0, #1
   82c12:	60cb      	str	r3, [r1, #12]
   82c14:	4630      	mov	r0, r6
   82c16:	6099      	str	r1, [r3, #8]
   82c18:	6055      	str	r5, [r2, #4]
   82c1a:	f000 faed 	bl	831f8 <__malloc_unlock>
   82c1e:	3408      	adds	r4, #8
   82c20:	4620      	mov	r0, r4
   82c22:	b003      	add	sp, #12
   82c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c28:	4421      	add	r1, r4
   82c2a:	684b      	ldr	r3, [r1, #4]
   82c2c:	4630      	mov	r0, r6
   82c2e:	f043 0301 	orr.w	r3, r3, #1
   82c32:	604b      	str	r3, [r1, #4]
   82c34:	f000 fae0 	bl	831f8 <__malloc_unlock>
   82c38:	3408      	adds	r4, #8
   82c3a:	4620      	mov	r0, r4
   82c3c:	b003      	add	sp, #12
   82c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c42:	68bc      	ldr	r4, [r7, #8]
   82c44:	6863      	ldr	r3, [r4, #4]
   82c46:	f023 0903 	bic.w	r9, r3, #3
   82c4a:	45a9      	cmp	r9, r5
   82c4c:	d304      	bcc.n	82c58 <_malloc_r+0x1e8>
   82c4e:	ebc5 0309 	rsb	r3, r5, r9
   82c52:	2b0f      	cmp	r3, #15
   82c54:	f300 8091 	bgt.w	82d7a <_malloc_r+0x30a>
   82c58:	4b51      	ldr	r3, [pc, #324]	; (82da0 <_malloc_r+0x330>)
   82c5a:	4a52      	ldr	r2, [pc, #328]	; (82da4 <_malloc_r+0x334>)
   82c5c:	6819      	ldr	r1, [r3, #0]
   82c5e:	6813      	ldr	r3, [r2, #0]
   82c60:	eb05 0a01 	add.w	sl, r5, r1
   82c64:	3301      	adds	r3, #1
   82c66:	eb04 0b09 	add.w	fp, r4, r9
   82c6a:	f000 8161 	beq.w	82f30 <_malloc_r+0x4c0>
   82c6e:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82c72:	f10a 0a0f 	add.w	sl, sl, #15
   82c76:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82c7a:	f02a 0a0f 	bic.w	sl, sl, #15
   82c7e:	4630      	mov	r0, r6
   82c80:	4651      	mov	r1, sl
   82c82:	9201      	str	r2, [sp, #4]
   82c84:	f000 fc9a 	bl	835bc <_sbrk_r>
   82c88:	f1b0 3fff 	cmp.w	r0, #4294967295
   82c8c:	4680      	mov	r8, r0
   82c8e:	9a01      	ldr	r2, [sp, #4]
   82c90:	f000 8101 	beq.w	82e96 <_malloc_r+0x426>
   82c94:	4583      	cmp	fp, r0
   82c96:	f200 80fb 	bhi.w	82e90 <_malloc_r+0x420>
   82c9a:	f8df c114 	ldr.w	ip, [pc, #276]	; 82db0 <_malloc_r+0x340>
   82c9e:	45c3      	cmp	fp, r8
   82ca0:	f8dc 3000 	ldr.w	r3, [ip]
   82ca4:	4453      	add	r3, sl
   82ca6:	f8cc 3000 	str.w	r3, [ip]
   82caa:	f000 814a 	beq.w	82f42 <_malloc_r+0x4d2>
   82cae:	6812      	ldr	r2, [r2, #0]
   82cb0:	493c      	ldr	r1, [pc, #240]	; (82da4 <_malloc_r+0x334>)
   82cb2:	3201      	adds	r2, #1
   82cb4:	bf1b      	ittet	ne
   82cb6:	ebcb 0b08 	rsbne	fp, fp, r8
   82cba:	445b      	addne	r3, fp
   82cbc:	f8c1 8000 	streq.w	r8, [r1]
   82cc0:	f8cc 3000 	strne.w	r3, [ip]
   82cc4:	f018 0307 	ands.w	r3, r8, #7
   82cc8:	f000 8114 	beq.w	82ef4 <_malloc_r+0x484>
   82ccc:	f1c3 0208 	rsb	r2, r3, #8
   82cd0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82cd4:	4490      	add	r8, r2
   82cd6:	3308      	adds	r3, #8
   82cd8:	44c2      	add	sl, r8
   82cda:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82cde:	ebca 0a03 	rsb	sl, sl, r3
   82ce2:	4651      	mov	r1, sl
   82ce4:	4630      	mov	r0, r6
   82ce6:	f8cd c004 	str.w	ip, [sp, #4]
   82cea:	f000 fc67 	bl	835bc <_sbrk_r>
   82cee:	1c43      	adds	r3, r0, #1
   82cf0:	f8dd c004 	ldr.w	ip, [sp, #4]
   82cf4:	f000 8135 	beq.w	82f62 <_malloc_r+0x4f2>
   82cf8:	ebc8 0200 	rsb	r2, r8, r0
   82cfc:	4452      	add	r2, sl
   82cfe:	f042 0201 	orr.w	r2, r2, #1
   82d02:	f8dc 3000 	ldr.w	r3, [ip]
   82d06:	42bc      	cmp	r4, r7
   82d08:	4453      	add	r3, sl
   82d0a:	f8c7 8008 	str.w	r8, [r7, #8]
   82d0e:	f8cc 3000 	str.w	r3, [ip]
   82d12:	f8c8 2004 	str.w	r2, [r8, #4]
   82d16:	f8df a098 	ldr.w	sl, [pc, #152]	; 82db0 <_malloc_r+0x340>
   82d1a:	d015      	beq.n	82d48 <_malloc_r+0x2d8>
   82d1c:	f1b9 0f0f 	cmp.w	r9, #15
   82d20:	f240 80eb 	bls.w	82efa <_malloc_r+0x48a>
   82d24:	6861      	ldr	r1, [r4, #4]
   82d26:	f1a9 020c 	sub.w	r2, r9, #12
   82d2a:	f022 0207 	bic.w	r2, r2, #7
   82d2e:	f001 0101 	and.w	r1, r1, #1
   82d32:	ea42 0e01 	orr.w	lr, r2, r1
   82d36:	2005      	movs	r0, #5
   82d38:	18a1      	adds	r1, r4, r2
   82d3a:	2a0f      	cmp	r2, #15
   82d3c:	f8c4 e004 	str.w	lr, [r4, #4]
   82d40:	6048      	str	r0, [r1, #4]
   82d42:	6088      	str	r0, [r1, #8]
   82d44:	f200 8111 	bhi.w	82f6a <_malloc_r+0x4fa>
   82d48:	4a17      	ldr	r2, [pc, #92]	; (82da8 <_malloc_r+0x338>)
   82d4a:	68bc      	ldr	r4, [r7, #8]
   82d4c:	6811      	ldr	r1, [r2, #0]
   82d4e:	428b      	cmp	r3, r1
   82d50:	bf88      	it	hi
   82d52:	6013      	strhi	r3, [r2, #0]
   82d54:	4a15      	ldr	r2, [pc, #84]	; (82dac <_malloc_r+0x33c>)
   82d56:	6811      	ldr	r1, [r2, #0]
   82d58:	428b      	cmp	r3, r1
   82d5a:	bf88      	it	hi
   82d5c:	6013      	strhi	r3, [r2, #0]
   82d5e:	6862      	ldr	r2, [r4, #4]
   82d60:	f022 0203 	bic.w	r2, r2, #3
   82d64:	4295      	cmp	r5, r2
   82d66:	ebc5 0302 	rsb	r3, r5, r2
   82d6a:	d801      	bhi.n	82d70 <_malloc_r+0x300>
   82d6c:	2b0f      	cmp	r3, #15
   82d6e:	dc04      	bgt.n	82d7a <_malloc_r+0x30a>
   82d70:	4630      	mov	r0, r6
   82d72:	f000 fa41 	bl	831f8 <__malloc_unlock>
   82d76:	2400      	movs	r4, #0
   82d78:	e6a6      	b.n	82ac8 <_malloc_r+0x58>
   82d7a:	f045 0201 	orr.w	r2, r5, #1
   82d7e:	f043 0301 	orr.w	r3, r3, #1
   82d82:	4425      	add	r5, r4
   82d84:	6062      	str	r2, [r4, #4]
   82d86:	4630      	mov	r0, r6
   82d88:	60bd      	str	r5, [r7, #8]
   82d8a:	606b      	str	r3, [r5, #4]
   82d8c:	f000 fa34 	bl	831f8 <__malloc_unlock>
   82d90:	3408      	adds	r4, #8
   82d92:	4620      	mov	r0, r4
   82d94:	b003      	add	sp, #12
   82d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d9a:	bf00      	nop
   82d9c:	20070590 	.word	0x20070590
   82da0:	20070ae4 	.word	0x20070ae4
   82da4:	2007099c 	.word	0x2007099c
   82da8:	20070ae0 	.word	0x20070ae0
   82dac:	20070adc 	.word	0x20070adc
   82db0:	20070ae8 	.word	0x20070ae8
   82db4:	f1bc 0f14 	cmp.w	ip, #20
   82db8:	d961      	bls.n	82e7e <_malloc_r+0x40e>
   82dba:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82dbe:	f200 808f 	bhi.w	82ee0 <_malloc_r+0x470>
   82dc2:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82dc6:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82dca:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82dce:	e697      	b.n	82b00 <_malloc_r+0x90>
   82dd0:	0a4b      	lsrs	r3, r1, #9
   82dd2:	2b04      	cmp	r3, #4
   82dd4:	d958      	bls.n	82e88 <_malloc_r+0x418>
   82dd6:	2b14      	cmp	r3, #20
   82dd8:	f200 80ad 	bhi.w	82f36 <_malloc_r+0x4c6>
   82ddc:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82de0:	0050      	lsls	r0, r2, #1
   82de2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82de6:	6883      	ldr	r3, [r0, #8]
   82de8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82fa4 <_malloc_r+0x534>
   82dec:	4283      	cmp	r3, r0
   82dee:	f000 808a 	beq.w	82f06 <_malloc_r+0x496>
   82df2:	685a      	ldr	r2, [r3, #4]
   82df4:	f022 0203 	bic.w	r2, r2, #3
   82df8:	4291      	cmp	r1, r2
   82dfa:	d202      	bcs.n	82e02 <_malloc_r+0x392>
   82dfc:	689b      	ldr	r3, [r3, #8]
   82dfe:	4298      	cmp	r0, r3
   82e00:	d1f7      	bne.n	82df2 <_malloc_r+0x382>
   82e02:	68d9      	ldr	r1, [r3, #12]
   82e04:	687a      	ldr	r2, [r7, #4]
   82e06:	60e1      	str	r1, [r4, #12]
   82e08:	60a3      	str	r3, [r4, #8]
   82e0a:	608c      	str	r4, [r1, #8]
   82e0c:	60dc      	str	r4, [r3, #12]
   82e0e:	e6b6      	b.n	82b7e <_malloc_r+0x10e>
   82e10:	f045 0701 	orr.w	r7, r5, #1
   82e14:	f042 0101 	orr.w	r1, r2, #1
   82e18:	4425      	add	r5, r4
   82e1a:	6067      	str	r7, [r4, #4]
   82e1c:	4630      	mov	r0, r6
   82e1e:	615d      	str	r5, [r3, #20]
   82e20:	611d      	str	r5, [r3, #16]
   82e22:	f8c5 e00c 	str.w	lr, [r5, #12]
   82e26:	f8c5 e008 	str.w	lr, [r5, #8]
   82e2a:	6069      	str	r1, [r5, #4]
   82e2c:	50aa      	str	r2, [r5, r2]
   82e2e:	3408      	adds	r4, #8
   82e30:	f000 f9e2 	bl	831f8 <__malloc_unlock>
   82e34:	e648      	b.n	82ac8 <_malloc_r+0x58>
   82e36:	685a      	ldr	r2, [r3, #4]
   82e38:	e6a1      	b.n	82b7e <_malloc_r+0x10e>
   82e3a:	f109 0901 	add.w	r9, r9, #1
   82e3e:	f019 0f03 	tst.w	r9, #3
   82e42:	f104 0408 	add.w	r4, r4, #8
   82e46:	f47f aead 	bne.w	82ba4 <_malloc_r+0x134>
   82e4a:	e02d      	b.n	82ea8 <_malloc_r+0x438>
   82e4c:	f104 0308 	add.w	r3, r4, #8
   82e50:	6964      	ldr	r4, [r4, #20]
   82e52:	42a3      	cmp	r3, r4
   82e54:	bf08      	it	eq
   82e56:	f10c 0c02 	addeq.w	ip, ip, #2
   82e5a:	f43f ae67 	beq.w	82b2c <_malloc_r+0xbc>
   82e5e:	e623      	b.n	82aa8 <_malloc_r+0x38>
   82e60:	4419      	add	r1, r3
   82e62:	6848      	ldr	r0, [r1, #4]
   82e64:	461c      	mov	r4, r3
   82e66:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82e6a:	68db      	ldr	r3, [r3, #12]
   82e6c:	f040 0501 	orr.w	r5, r0, #1
   82e70:	604d      	str	r5, [r1, #4]
   82e72:	4630      	mov	r0, r6
   82e74:	60d3      	str	r3, [r2, #12]
   82e76:	609a      	str	r2, [r3, #8]
   82e78:	f000 f9be 	bl	831f8 <__malloc_unlock>
   82e7c:	e624      	b.n	82ac8 <_malloc_r+0x58>
   82e7e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82e82:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e86:	e63b      	b.n	82b00 <_malloc_r+0x90>
   82e88:	098a      	lsrs	r2, r1, #6
   82e8a:	3238      	adds	r2, #56	; 0x38
   82e8c:	0050      	lsls	r0, r2, #1
   82e8e:	e7a8      	b.n	82de2 <_malloc_r+0x372>
   82e90:	42bc      	cmp	r4, r7
   82e92:	f43f af02 	beq.w	82c9a <_malloc_r+0x22a>
   82e96:	68bc      	ldr	r4, [r7, #8]
   82e98:	6862      	ldr	r2, [r4, #4]
   82e9a:	f022 0203 	bic.w	r2, r2, #3
   82e9e:	e761      	b.n	82d64 <_malloc_r+0x2f4>
   82ea0:	f8d8 8000 	ldr.w	r8, [r8]
   82ea4:	4598      	cmp	r8, r3
   82ea6:	d17a      	bne.n	82f9e <_malloc_r+0x52e>
   82ea8:	f01c 0f03 	tst.w	ip, #3
   82eac:	f1a8 0308 	sub.w	r3, r8, #8
   82eb0:	f10c 3cff 	add.w	ip, ip, #4294967295
   82eb4:	d1f4      	bne.n	82ea0 <_malloc_r+0x430>
   82eb6:	687b      	ldr	r3, [r7, #4]
   82eb8:	ea23 0300 	bic.w	r3, r3, r0
   82ebc:	607b      	str	r3, [r7, #4]
   82ebe:	0040      	lsls	r0, r0, #1
   82ec0:	4298      	cmp	r0, r3
   82ec2:	f63f aebe 	bhi.w	82c42 <_malloc_r+0x1d2>
   82ec6:	2800      	cmp	r0, #0
   82ec8:	f43f aebb 	beq.w	82c42 <_malloc_r+0x1d2>
   82ecc:	4203      	tst	r3, r0
   82ece:	46cc      	mov	ip, r9
   82ed0:	f47f ae64 	bne.w	82b9c <_malloc_r+0x12c>
   82ed4:	0040      	lsls	r0, r0, #1
   82ed6:	4203      	tst	r3, r0
   82ed8:	f10c 0c04 	add.w	ip, ip, #4
   82edc:	d0fa      	beq.n	82ed4 <_malloc_r+0x464>
   82ede:	e65d      	b.n	82b9c <_malloc_r+0x12c>
   82ee0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82ee4:	d819      	bhi.n	82f1a <_malloc_r+0x4aa>
   82ee6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82eea:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82eee:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82ef2:	e605      	b.n	82b00 <_malloc_r+0x90>
   82ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82ef8:	e6ee      	b.n	82cd8 <_malloc_r+0x268>
   82efa:	2301      	movs	r3, #1
   82efc:	f8c8 3004 	str.w	r3, [r8, #4]
   82f00:	4644      	mov	r4, r8
   82f02:	2200      	movs	r2, #0
   82f04:	e72e      	b.n	82d64 <_malloc_r+0x2f4>
   82f06:	1092      	asrs	r2, r2, #2
   82f08:	2001      	movs	r0, #1
   82f0a:	4090      	lsls	r0, r2
   82f0c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82f10:	4619      	mov	r1, r3
   82f12:	4302      	orrs	r2, r0
   82f14:	f8c8 2004 	str.w	r2, [r8, #4]
   82f18:	e775      	b.n	82e06 <_malloc_r+0x396>
   82f1a:	f240 5354 	movw	r3, #1364	; 0x554
   82f1e:	459c      	cmp	ip, r3
   82f20:	d81b      	bhi.n	82f5a <_malloc_r+0x4ea>
   82f22:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82f26:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82f2a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82f2e:	e5e7      	b.n	82b00 <_malloc_r+0x90>
   82f30:	f10a 0a10 	add.w	sl, sl, #16
   82f34:	e6a3      	b.n	82c7e <_malloc_r+0x20e>
   82f36:	2b54      	cmp	r3, #84	; 0x54
   82f38:	d81f      	bhi.n	82f7a <_malloc_r+0x50a>
   82f3a:	0b0a      	lsrs	r2, r1, #12
   82f3c:	326e      	adds	r2, #110	; 0x6e
   82f3e:	0050      	lsls	r0, r2, #1
   82f40:	e74f      	b.n	82de2 <_malloc_r+0x372>
   82f42:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82f46:	2900      	cmp	r1, #0
   82f48:	f47f aeb1 	bne.w	82cae <_malloc_r+0x23e>
   82f4c:	eb0a 0109 	add.w	r1, sl, r9
   82f50:	68ba      	ldr	r2, [r7, #8]
   82f52:	f041 0101 	orr.w	r1, r1, #1
   82f56:	6051      	str	r1, [r2, #4]
   82f58:	e6f6      	b.n	82d48 <_malloc_r+0x2d8>
   82f5a:	21fc      	movs	r1, #252	; 0xfc
   82f5c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82f60:	e5ce      	b.n	82b00 <_malloc_r+0x90>
   82f62:	2201      	movs	r2, #1
   82f64:	f04f 0a00 	mov.w	sl, #0
   82f68:	e6cb      	b.n	82d02 <_malloc_r+0x292>
   82f6a:	f104 0108 	add.w	r1, r4, #8
   82f6e:	4630      	mov	r0, r6
   82f70:	f7ff fa80 	bl	82474 <_free_r>
   82f74:	f8da 3000 	ldr.w	r3, [sl]
   82f78:	e6e6      	b.n	82d48 <_malloc_r+0x2d8>
   82f7a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82f7e:	d803      	bhi.n	82f88 <_malloc_r+0x518>
   82f80:	0bca      	lsrs	r2, r1, #15
   82f82:	3277      	adds	r2, #119	; 0x77
   82f84:	0050      	lsls	r0, r2, #1
   82f86:	e72c      	b.n	82de2 <_malloc_r+0x372>
   82f88:	f240 5254 	movw	r2, #1364	; 0x554
   82f8c:	4293      	cmp	r3, r2
   82f8e:	d803      	bhi.n	82f98 <_malloc_r+0x528>
   82f90:	0c8a      	lsrs	r2, r1, #18
   82f92:	327c      	adds	r2, #124	; 0x7c
   82f94:	0050      	lsls	r0, r2, #1
   82f96:	e724      	b.n	82de2 <_malloc_r+0x372>
   82f98:	20fc      	movs	r0, #252	; 0xfc
   82f9a:	227e      	movs	r2, #126	; 0x7e
   82f9c:	e721      	b.n	82de2 <_malloc_r+0x372>
   82f9e:	687b      	ldr	r3, [r7, #4]
   82fa0:	e78d      	b.n	82ebe <_malloc_r+0x44e>
   82fa2:	bf00      	nop
   82fa4:	20070590 	.word	0x20070590

00082fa8 <memchr>:
   82fa8:	0783      	lsls	r3, r0, #30
   82faa:	b470      	push	{r4, r5, r6}
   82fac:	b2c9      	uxtb	r1, r1
   82fae:	d040      	beq.n	83032 <memchr+0x8a>
   82fb0:	1e54      	subs	r4, r2, #1
   82fb2:	b32a      	cbz	r2, 83000 <memchr+0x58>
   82fb4:	7803      	ldrb	r3, [r0, #0]
   82fb6:	428b      	cmp	r3, r1
   82fb8:	d023      	beq.n	83002 <memchr+0x5a>
   82fba:	1c43      	adds	r3, r0, #1
   82fbc:	e004      	b.n	82fc8 <memchr+0x20>
   82fbe:	b1fc      	cbz	r4, 83000 <memchr+0x58>
   82fc0:	7805      	ldrb	r5, [r0, #0]
   82fc2:	4614      	mov	r4, r2
   82fc4:	428d      	cmp	r5, r1
   82fc6:	d01c      	beq.n	83002 <memchr+0x5a>
   82fc8:	f013 0f03 	tst.w	r3, #3
   82fcc:	4618      	mov	r0, r3
   82fce:	f104 32ff 	add.w	r2, r4, #4294967295
   82fd2:	f103 0301 	add.w	r3, r3, #1
   82fd6:	d1f2      	bne.n	82fbe <memchr+0x16>
   82fd8:	2c03      	cmp	r4, #3
   82fda:	d814      	bhi.n	83006 <memchr+0x5e>
   82fdc:	1e65      	subs	r5, r4, #1
   82fde:	b354      	cbz	r4, 83036 <memchr+0x8e>
   82fe0:	7803      	ldrb	r3, [r0, #0]
   82fe2:	428b      	cmp	r3, r1
   82fe4:	d00d      	beq.n	83002 <memchr+0x5a>
   82fe6:	1c42      	adds	r2, r0, #1
   82fe8:	2300      	movs	r3, #0
   82fea:	e002      	b.n	82ff2 <memchr+0x4a>
   82fec:	7804      	ldrb	r4, [r0, #0]
   82fee:	428c      	cmp	r4, r1
   82ff0:	d007      	beq.n	83002 <memchr+0x5a>
   82ff2:	42ab      	cmp	r3, r5
   82ff4:	4610      	mov	r0, r2
   82ff6:	f103 0301 	add.w	r3, r3, #1
   82ffa:	f102 0201 	add.w	r2, r2, #1
   82ffe:	d1f5      	bne.n	82fec <memchr+0x44>
   83000:	2000      	movs	r0, #0
   83002:	bc70      	pop	{r4, r5, r6}
   83004:	4770      	bx	lr
   83006:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   8300a:	4603      	mov	r3, r0
   8300c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83010:	681a      	ldr	r2, [r3, #0]
   83012:	4618      	mov	r0, r3
   83014:	4072      	eors	r2, r6
   83016:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   8301a:	ea25 0202 	bic.w	r2, r5, r2
   8301e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   83022:	f103 0304 	add.w	r3, r3, #4
   83026:	d1d9      	bne.n	82fdc <memchr+0x34>
   83028:	3c04      	subs	r4, #4
   8302a:	2c03      	cmp	r4, #3
   8302c:	4618      	mov	r0, r3
   8302e:	d8ef      	bhi.n	83010 <memchr+0x68>
   83030:	e7d4      	b.n	82fdc <memchr+0x34>
   83032:	4614      	mov	r4, r2
   83034:	e7d0      	b.n	82fd8 <memchr+0x30>
   83036:	4620      	mov	r0, r4
   83038:	e7e3      	b.n	83002 <memchr+0x5a>
   8303a:	bf00      	nop

0008303c <memcpy>:
   8303c:	4684      	mov	ip, r0
   8303e:	ea41 0300 	orr.w	r3, r1, r0
   83042:	f013 0303 	ands.w	r3, r3, #3
   83046:	d149      	bne.n	830dc <memcpy+0xa0>
   83048:	3a40      	subs	r2, #64	; 0x40
   8304a:	d323      	bcc.n	83094 <memcpy+0x58>
   8304c:	680b      	ldr	r3, [r1, #0]
   8304e:	6003      	str	r3, [r0, #0]
   83050:	684b      	ldr	r3, [r1, #4]
   83052:	6043      	str	r3, [r0, #4]
   83054:	688b      	ldr	r3, [r1, #8]
   83056:	6083      	str	r3, [r0, #8]
   83058:	68cb      	ldr	r3, [r1, #12]
   8305a:	60c3      	str	r3, [r0, #12]
   8305c:	690b      	ldr	r3, [r1, #16]
   8305e:	6103      	str	r3, [r0, #16]
   83060:	694b      	ldr	r3, [r1, #20]
   83062:	6143      	str	r3, [r0, #20]
   83064:	698b      	ldr	r3, [r1, #24]
   83066:	6183      	str	r3, [r0, #24]
   83068:	69cb      	ldr	r3, [r1, #28]
   8306a:	61c3      	str	r3, [r0, #28]
   8306c:	6a0b      	ldr	r3, [r1, #32]
   8306e:	6203      	str	r3, [r0, #32]
   83070:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83072:	6243      	str	r3, [r0, #36]	; 0x24
   83074:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83076:	6283      	str	r3, [r0, #40]	; 0x28
   83078:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8307a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8307c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8307e:	6303      	str	r3, [r0, #48]	; 0x30
   83080:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83082:	6343      	str	r3, [r0, #52]	; 0x34
   83084:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83086:	6383      	str	r3, [r0, #56]	; 0x38
   83088:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8308a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8308c:	3040      	adds	r0, #64	; 0x40
   8308e:	3140      	adds	r1, #64	; 0x40
   83090:	3a40      	subs	r2, #64	; 0x40
   83092:	d2db      	bcs.n	8304c <memcpy+0x10>
   83094:	3230      	adds	r2, #48	; 0x30
   83096:	d30b      	bcc.n	830b0 <memcpy+0x74>
   83098:	680b      	ldr	r3, [r1, #0]
   8309a:	6003      	str	r3, [r0, #0]
   8309c:	684b      	ldr	r3, [r1, #4]
   8309e:	6043      	str	r3, [r0, #4]
   830a0:	688b      	ldr	r3, [r1, #8]
   830a2:	6083      	str	r3, [r0, #8]
   830a4:	68cb      	ldr	r3, [r1, #12]
   830a6:	60c3      	str	r3, [r0, #12]
   830a8:	3010      	adds	r0, #16
   830aa:	3110      	adds	r1, #16
   830ac:	3a10      	subs	r2, #16
   830ae:	d2f3      	bcs.n	83098 <memcpy+0x5c>
   830b0:	320c      	adds	r2, #12
   830b2:	d305      	bcc.n	830c0 <memcpy+0x84>
   830b4:	f851 3b04 	ldr.w	r3, [r1], #4
   830b8:	f840 3b04 	str.w	r3, [r0], #4
   830bc:	3a04      	subs	r2, #4
   830be:	d2f9      	bcs.n	830b4 <memcpy+0x78>
   830c0:	3204      	adds	r2, #4
   830c2:	d008      	beq.n	830d6 <memcpy+0x9a>
   830c4:	07d2      	lsls	r2, r2, #31
   830c6:	bf1c      	itt	ne
   830c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   830cc:	f800 3b01 	strbne.w	r3, [r0], #1
   830d0:	d301      	bcc.n	830d6 <memcpy+0x9a>
   830d2:	880b      	ldrh	r3, [r1, #0]
   830d4:	8003      	strh	r3, [r0, #0]
   830d6:	4660      	mov	r0, ip
   830d8:	4770      	bx	lr
   830da:	bf00      	nop
   830dc:	2a08      	cmp	r2, #8
   830de:	d313      	bcc.n	83108 <memcpy+0xcc>
   830e0:	078b      	lsls	r3, r1, #30
   830e2:	d0b1      	beq.n	83048 <memcpy+0xc>
   830e4:	f010 0303 	ands.w	r3, r0, #3
   830e8:	d0ae      	beq.n	83048 <memcpy+0xc>
   830ea:	f1c3 0304 	rsb	r3, r3, #4
   830ee:	1ad2      	subs	r2, r2, r3
   830f0:	07db      	lsls	r3, r3, #31
   830f2:	bf1c      	itt	ne
   830f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   830f8:	f800 3b01 	strbne.w	r3, [r0], #1
   830fc:	d3a4      	bcc.n	83048 <memcpy+0xc>
   830fe:	f831 3b02 	ldrh.w	r3, [r1], #2
   83102:	f820 3b02 	strh.w	r3, [r0], #2
   83106:	e79f      	b.n	83048 <memcpy+0xc>
   83108:	3a04      	subs	r2, #4
   8310a:	d3d9      	bcc.n	830c0 <memcpy+0x84>
   8310c:	3a01      	subs	r2, #1
   8310e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83112:	f800 3b01 	strb.w	r3, [r0], #1
   83116:	d2f9      	bcs.n	8310c <memcpy+0xd0>
   83118:	780b      	ldrb	r3, [r1, #0]
   8311a:	7003      	strb	r3, [r0, #0]
   8311c:	784b      	ldrb	r3, [r1, #1]
   8311e:	7043      	strb	r3, [r0, #1]
   83120:	788b      	ldrb	r3, [r1, #2]
   83122:	7083      	strb	r3, [r0, #2]
   83124:	4660      	mov	r0, ip
   83126:	4770      	bx	lr

00083128 <memmove>:
   83128:	4288      	cmp	r0, r1
   8312a:	b4f0      	push	{r4, r5, r6, r7}
   8312c:	d910      	bls.n	83150 <memmove+0x28>
   8312e:	188c      	adds	r4, r1, r2
   83130:	42a0      	cmp	r0, r4
   83132:	d20d      	bcs.n	83150 <memmove+0x28>
   83134:	1885      	adds	r5, r0, r2
   83136:	1e53      	subs	r3, r2, #1
   83138:	b142      	cbz	r2, 8314c <memmove+0x24>
   8313a:	4621      	mov	r1, r4
   8313c:	462a      	mov	r2, r5
   8313e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83142:	3b01      	subs	r3, #1
   83144:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83148:	1c5c      	adds	r4, r3, #1
   8314a:	d1f8      	bne.n	8313e <memmove+0x16>
   8314c:	bcf0      	pop	{r4, r5, r6, r7}
   8314e:	4770      	bx	lr
   83150:	2a0f      	cmp	r2, #15
   83152:	d944      	bls.n	831de <memmove+0xb6>
   83154:	ea40 0301 	orr.w	r3, r0, r1
   83158:	079b      	lsls	r3, r3, #30
   8315a:	d144      	bne.n	831e6 <memmove+0xbe>
   8315c:	f1a2 0710 	sub.w	r7, r2, #16
   83160:	093f      	lsrs	r7, r7, #4
   83162:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   83166:	3610      	adds	r6, #16
   83168:	460c      	mov	r4, r1
   8316a:	4603      	mov	r3, r0
   8316c:	6825      	ldr	r5, [r4, #0]
   8316e:	3310      	adds	r3, #16
   83170:	f843 5c10 	str.w	r5, [r3, #-16]
   83174:	6865      	ldr	r5, [r4, #4]
   83176:	3410      	adds	r4, #16
   83178:	f843 5c0c 	str.w	r5, [r3, #-12]
   8317c:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83180:	f843 5c08 	str.w	r5, [r3, #-8]
   83184:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83188:	f843 5c04 	str.w	r5, [r3, #-4]
   8318c:	42b3      	cmp	r3, r6
   8318e:	d1ed      	bne.n	8316c <memmove+0x44>
   83190:	1c7b      	adds	r3, r7, #1
   83192:	f002 0c0f 	and.w	ip, r2, #15
   83196:	011b      	lsls	r3, r3, #4
   83198:	f1bc 0f03 	cmp.w	ip, #3
   8319c:	4419      	add	r1, r3
   8319e:	4403      	add	r3, r0
   831a0:	d923      	bls.n	831ea <memmove+0xc2>
   831a2:	460e      	mov	r6, r1
   831a4:	461d      	mov	r5, r3
   831a6:	4664      	mov	r4, ip
   831a8:	f856 7b04 	ldr.w	r7, [r6], #4
   831ac:	3c04      	subs	r4, #4
   831ae:	2c03      	cmp	r4, #3
   831b0:	f845 7b04 	str.w	r7, [r5], #4
   831b4:	d8f8      	bhi.n	831a8 <memmove+0x80>
   831b6:	f1ac 0404 	sub.w	r4, ip, #4
   831ba:	f024 0403 	bic.w	r4, r4, #3
   831be:	3404      	adds	r4, #4
   831c0:	f002 0203 	and.w	r2, r2, #3
   831c4:	4423      	add	r3, r4
   831c6:	4421      	add	r1, r4
   831c8:	2a00      	cmp	r2, #0
   831ca:	d0bf      	beq.n	8314c <memmove+0x24>
   831cc:	441a      	add	r2, r3
   831ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   831d2:	f803 4b01 	strb.w	r4, [r3], #1
   831d6:	4293      	cmp	r3, r2
   831d8:	d1f9      	bne.n	831ce <memmove+0xa6>
   831da:	bcf0      	pop	{r4, r5, r6, r7}
   831dc:	4770      	bx	lr
   831de:	4603      	mov	r3, r0
   831e0:	2a00      	cmp	r2, #0
   831e2:	d1f3      	bne.n	831cc <memmove+0xa4>
   831e4:	e7b2      	b.n	8314c <memmove+0x24>
   831e6:	4603      	mov	r3, r0
   831e8:	e7f0      	b.n	831cc <memmove+0xa4>
   831ea:	4662      	mov	r2, ip
   831ec:	2a00      	cmp	r2, #0
   831ee:	d1ed      	bne.n	831cc <memmove+0xa4>
   831f0:	e7ac      	b.n	8314c <memmove+0x24>
   831f2:	bf00      	nop

000831f4 <__malloc_lock>:
   831f4:	4770      	bx	lr
   831f6:	bf00      	nop

000831f8 <__malloc_unlock>:
   831f8:	4770      	bx	lr
   831fa:	bf00      	nop

000831fc <_realloc_r>:
   831fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83200:	460c      	mov	r4, r1
   83202:	b083      	sub	sp, #12
   83204:	4690      	mov	r8, r2
   83206:	4681      	mov	r9, r0
   83208:	2900      	cmp	r1, #0
   8320a:	f000 80ba 	beq.w	83382 <_realloc_r+0x186>
   8320e:	f7ff fff1 	bl	831f4 <__malloc_lock>
   83212:	f108 060b 	add.w	r6, r8, #11
   83216:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8321a:	2e16      	cmp	r6, #22
   8321c:	f023 0503 	bic.w	r5, r3, #3
   83220:	f1a4 0708 	sub.w	r7, r4, #8
   83224:	d84b      	bhi.n	832be <_realloc_r+0xc2>
   83226:	2110      	movs	r1, #16
   83228:	460e      	mov	r6, r1
   8322a:	45b0      	cmp	r8, r6
   8322c:	d84c      	bhi.n	832c8 <_realloc_r+0xcc>
   8322e:	428d      	cmp	r5, r1
   83230:	da51      	bge.n	832d6 <_realloc_r+0xda>
   83232:	f8df b384 	ldr.w	fp, [pc, #900]	; 835b8 <_realloc_r+0x3bc>
   83236:	1978      	adds	r0, r7, r5
   83238:	f8db e008 	ldr.w	lr, [fp, #8]
   8323c:	4586      	cmp	lr, r0
   8323e:	f000 80a6 	beq.w	8338e <_realloc_r+0x192>
   83242:	6842      	ldr	r2, [r0, #4]
   83244:	f022 0c01 	bic.w	ip, r2, #1
   83248:	4484      	add	ip, r0
   8324a:	f8dc c004 	ldr.w	ip, [ip, #4]
   8324e:	f01c 0f01 	tst.w	ip, #1
   83252:	d054      	beq.n	832fe <_realloc_r+0x102>
   83254:	2200      	movs	r2, #0
   83256:	4610      	mov	r0, r2
   83258:	07db      	lsls	r3, r3, #31
   8325a:	d46f      	bmi.n	8333c <_realloc_r+0x140>
   8325c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83260:	ebc3 0a07 	rsb	sl, r3, r7
   83264:	f8da 3004 	ldr.w	r3, [sl, #4]
   83268:	f023 0303 	bic.w	r3, r3, #3
   8326c:	442b      	add	r3, r5
   8326e:	2800      	cmp	r0, #0
   83270:	d062      	beq.n	83338 <_realloc_r+0x13c>
   83272:	4570      	cmp	r0, lr
   83274:	f000 80e9 	beq.w	8344a <_realloc_r+0x24e>
   83278:	eb02 0e03 	add.w	lr, r2, r3
   8327c:	458e      	cmp	lr, r1
   8327e:	db5b      	blt.n	83338 <_realloc_r+0x13c>
   83280:	68c3      	ldr	r3, [r0, #12]
   83282:	6882      	ldr	r2, [r0, #8]
   83284:	46d0      	mov	r8, sl
   83286:	60d3      	str	r3, [r2, #12]
   83288:	609a      	str	r2, [r3, #8]
   8328a:	f858 1f08 	ldr.w	r1, [r8, #8]!
   8328e:	f8da 300c 	ldr.w	r3, [sl, #12]
   83292:	1f2a      	subs	r2, r5, #4
   83294:	2a24      	cmp	r2, #36	; 0x24
   83296:	60cb      	str	r3, [r1, #12]
   83298:	6099      	str	r1, [r3, #8]
   8329a:	f200 8123 	bhi.w	834e4 <_realloc_r+0x2e8>
   8329e:	2a13      	cmp	r2, #19
   832a0:	f240 80b0 	bls.w	83404 <_realloc_r+0x208>
   832a4:	6823      	ldr	r3, [r4, #0]
   832a6:	2a1b      	cmp	r2, #27
   832a8:	f8ca 3008 	str.w	r3, [sl, #8]
   832ac:	6863      	ldr	r3, [r4, #4]
   832ae:	f8ca 300c 	str.w	r3, [sl, #12]
   832b2:	f200 812b 	bhi.w	8350c <_realloc_r+0x310>
   832b6:	3408      	adds	r4, #8
   832b8:	f10a 0310 	add.w	r3, sl, #16
   832bc:	e0a3      	b.n	83406 <_realloc_r+0x20a>
   832be:	f026 0607 	bic.w	r6, r6, #7
   832c2:	2e00      	cmp	r6, #0
   832c4:	4631      	mov	r1, r6
   832c6:	dab0      	bge.n	8322a <_realloc_r+0x2e>
   832c8:	230c      	movs	r3, #12
   832ca:	2000      	movs	r0, #0
   832cc:	f8c9 3000 	str.w	r3, [r9]
   832d0:	b003      	add	sp, #12
   832d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832d6:	46a0      	mov	r8, r4
   832d8:	1baa      	subs	r2, r5, r6
   832da:	2a0f      	cmp	r2, #15
   832dc:	f003 0301 	and.w	r3, r3, #1
   832e0:	d81a      	bhi.n	83318 <_realloc_r+0x11c>
   832e2:	432b      	orrs	r3, r5
   832e4:	607b      	str	r3, [r7, #4]
   832e6:	443d      	add	r5, r7
   832e8:	686b      	ldr	r3, [r5, #4]
   832ea:	f043 0301 	orr.w	r3, r3, #1
   832ee:	606b      	str	r3, [r5, #4]
   832f0:	4648      	mov	r0, r9
   832f2:	f7ff ff81 	bl	831f8 <__malloc_unlock>
   832f6:	4640      	mov	r0, r8
   832f8:	b003      	add	sp, #12
   832fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832fe:	f022 0203 	bic.w	r2, r2, #3
   83302:	eb02 0c05 	add.w	ip, r2, r5
   83306:	458c      	cmp	ip, r1
   83308:	dba6      	blt.n	83258 <_realloc_r+0x5c>
   8330a:	68c2      	ldr	r2, [r0, #12]
   8330c:	6881      	ldr	r1, [r0, #8]
   8330e:	46a0      	mov	r8, r4
   83310:	60ca      	str	r2, [r1, #12]
   83312:	4665      	mov	r5, ip
   83314:	6091      	str	r1, [r2, #8]
   83316:	e7df      	b.n	832d8 <_realloc_r+0xdc>
   83318:	19b9      	adds	r1, r7, r6
   8331a:	4333      	orrs	r3, r6
   8331c:	f042 0001 	orr.w	r0, r2, #1
   83320:	607b      	str	r3, [r7, #4]
   83322:	440a      	add	r2, r1
   83324:	6048      	str	r0, [r1, #4]
   83326:	6853      	ldr	r3, [r2, #4]
   83328:	3108      	adds	r1, #8
   8332a:	f043 0301 	orr.w	r3, r3, #1
   8332e:	6053      	str	r3, [r2, #4]
   83330:	4648      	mov	r0, r9
   83332:	f7ff f89f 	bl	82474 <_free_r>
   83336:	e7db      	b.n	832f0 <_realloc_r+0xf4>
   83338:	428b      	cmp	r3, r1
   8333a:	da33      	bge.n	833a4 <_realloc_r+0x1a8>
   8333c:	4641      	mov	r1, r8
   8333e:	4648      	mov	r0, r9
   83340:	f7ff fb96 	bl	82a70 <_malloc_r>
   83344:	4680      	mov	r8, r0
   83346:	2800      	cmp	r0, #0
   83348:	d0d2      	beq.n	832f0 <_realloc_r+0xf4>
   8334a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8334e:	f1a0 0108 	sub.w	r1, r0, #8
   83352:	f023 0201 	bic.w	r2, r3, #1
   83356:	443a      	add	r2, r7
   83358:	4291      	cmp	r1, r2
   8335a:	f000 80bc 	beq.w	834d6 <_realloc_r+0x2da>
   8335e:	1f2a      	subs	r2, r5, #4
   83360:	2a24      	cmp	r2, #36	; 0x24
   83362:	d86e      	bhi.n	83442 <_realloc_r+0x246>
   83364:	2a13      	cmp	r2, #19
   83366:	d842      	bhi.n	833ee <_realloc_r+0x1f2>
   83368:	4603      	mov	r3, r0
   8336a:	4622      	mov	r2, r4
   8336c:	6811      	ldr	r1, [r2, #0]
   8336e:	6019      	str	r1, [r3, #0]
   83370:	6851      	ldr	r1, [r2, #4]
   83372:	6059      	str	r1, [r3, #4]
   83374:	6892      	ldr	r2, [r2, #8]
   83376:	609a      	str	r2, [r3, #8]
   83378:	4621      	mov	r1, r4
   8337a:	4648      	mov	r0, r9
   8337c:	f7ff f87a 	bl	82474 <_free_r>
   83380:	e7b6      	b.n	832f0 <_realloc_r+0xf4>
   83382:	4611      	mov	r1, r2
   83384:	b003      	add	sp, #12
   83386:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8338a:	f7ff bb71 	b.w	82a70 <_malloc_r>
   8338e:	f8de 2004 	ldr.w	r2, [lr, #4]
   83392:	f106 0c10 	add.w	ip, r6, #16
   83396:	f022 0203 	bic.w	r2, r2, #3
   8339a:	1950      	adds	r0, r2, r5
   8339c:	4560      	cmp	r0, ip
   8339e:	da3d      	bge.n	8341c <_realloc_r+0x220>
   833a0:	4670      	mov	r0, lr
   833a2:	e759      	b.n	83258 <_realloc_r+0x5c>
   833a4:	46d0      	mov	r8, sl
   833a6:	f858 0f08 	ldr.w	r0, [r8, #8]!
   833aa:	f8da 100c 	ldr.w	r1, [sl, #12]
   833ae:	1f2a      	subs	r2, r5, #4
   833b0:	2a24      	cmp	r2, #36	; 0x24
   833b2:	60c1      	str	r1, [r0, #12]
   833b4:	6088      	str	r0, [r1, #8]
   833b6:	f200 80a0 	bhi.w	834fa <_realloc_r+0x2fe>
   833ba:	2a13      	cmp	r2, #19
   833bc:	f240 809b 	bls.w	834f6 <_realloc_r+0x2fa>
   833c0:	6821      	ldr	r1, [r4, #0]
   833c2:	2a1b      	cmp	r2, #27
   833c4:	f8ca 1008 	str.w	r1, [sl, #8]
   833c8:	6861      	ldr	r1, [r4, #4]
   833ca:	f8ca 100c 	str.w	r1, [sl, #12]
   833ce:	f200 80b2 	bhi.w	83536 <_realloc_r+0x33a>
   833d2:	3408      	adds	r4, #8
   833d4:	f10a 0210 	add.w	r2, sl, #16
   833d8:	6821      	ldr	r1, [r4, #0]
   833da:	461d      	mov	r5, r3
   833dc:	6011      	str	r1, [r2, #0]
   833de:	6861      	ldr	r1, [r4, #4]
   833e0:	4657      	mov	r7, sl
   833e2:	6051      	str	r1, [r2, #4]
   833e4:	68a3      	ldr	r3, [r4, #8]
   833e6:	6093      	str	r3, [r2, #8]
   833e8:	f8da 3004 	ldr.w	r3, [sl, #4]
   833ec:	e774      	b.n	832d8 <_realloc_r+0xdc>
   833ee:	6823      	ldr	r3, [r4, #0]
   833f0:	2a1b      	cmp	r2, #27
   833f2:	6003      	str	r3, [r0, #0]
   833f4:	6863      	ldr	r3, [r4, #4]
   833f6:	6043      	str	r3, [r0, #4]
   833f8:	d862      	bhi.n	834c0 <_realloc_r+0x2c4>
   833fa:	f100 0308 	add.w	r3, r0, #8
   833fe:	f104 0208 	add.w	r2, r4, #8
   83402:	e7b3      	b.n	8336c <_realloc_r+0x170>
   83404:	4643      	mov	r3, r8
   83406:	6822      	ldr	r2, [r4, #0]
   83408:	4675      	mov	r5, lr
   8340a:	601a      	str	r2, [r3, #0]
   8340c:	6862      	ldr	r2, [r4, #4]
   8340e:	4657      	mov	r7, sl
   83410:	605a      	str	r2, [r3, #4]
   83412:	68a2      	ldr	r2, [r4, #8]
   83414:	609a      	str	r2, [r3, #8]
   83416:	f8da 3004 	ldr.w	r3, [sl, #4]
   8341a:	e75d      	b.n	832d8 <_realloc_r+0xdc>
   8341c:	1b83      	subs	r3, r0, r6
   8341e:	4437      	add	r7, r6
   83420:	f043 0301 	orr.w	r3, r3, #1
   83424:	f8cb 7008 	str.w	r7, [fp, #8]
   83428:	607b      	str	r3, [r7, #4]
   8342a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8342e:	4648      	mov	r0, r9
   83430:	f003 0301 	and.w	r3, r3, #1
   83434:	431e      	orrs	r6, r3
   83436:	f844 6c04 	str.w	r6, [r4, #-4]
   8343a:	f7ff fedd 	bl	831f8 <__malloc_unlock>
   8343e:	4620      	mov	r0, r4
   83440:	e75a      	b.n	832f8 <_realloc_r+0xfc>
   83442:	4621      	mov	r1, r4
   83444:	f7ff fe70 	bl	83128 <memmove>
   83448:	e796      	b.n	83378 <_realloc_r+0x17c>
   8344a:	eb02 0c03 	add.w	ip, r2, r3
   8344e:	f106 0210 	add.w	r2, r6, #16
   83452:	4594      	cmp	ip, r2
   83454:	f6ff af70 	blt.w	83338 <_realloc_r+0x13c>
   83458:	4657      	mov	r7, sl
   8345a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8345e:	f8da 300c 	ldr.w	r3, [sl, #12]
   83462:	1f2a      	subs	r2, r5, #4
   83464:	2a24      	cmp	r2, #36	; 0x24
   83466:	60cb      	str	r3, [r1, #12]
   83468:	6099      	str	r1, [r3, #8]
   8346a:	f200 8086 	bhi.w	8357a <_realloc_r+0x37e>
   8346e:	2a13      	cmp	r2, #19
   83470:	d977      	bls.n	83562 <_realloc_r+0x366>
   83472:	6823      	ldr	r3, [r4, #0]
   83474:	2a1b      	cmp	r2, #27
   83476:	f8ca 3008 	str.w	r3, [sl, #8]
   8347a:	6863      	ldr	r3, [r4, #4]
   8347c:	f8ca 300c 	str.w	r3, [sl, #12]
   83480:	f200 8084 	bhi.w	8358c <_realloc_r+0x390>
   83484:	3408      	adds	r4, #8
   83486:	f10a 0310 	add.w	r3, sl, #16
   8348a:	6822      	ldr	r2, [r4, #0]
   8348c:	601a      	str	r2, [r3, #0]
   8348e:	6862      	ldr	r2, [r4, #4]
   83490:	605a      	str	r2, [r3, #4]
   83492:	68a2      	ldr	r2, [r4, #8]
   83494:	609a      	str	r2, [r3, #8]
   83496:	ebc6 020c 	rsb	r2, r6, ip
   8349a:	eb0a 0306 	add.w	r3, sl, r6
   8349e:	f042 0201 	orr.w	r2, r2, #1
   834a2:	f8cb 3008 	str.w	r3, [fp, #8]
   834a6:	605a      	str	r2, [r3, #4]
   834a8:	f8da 3004 	ldr.w	r3, [sl, #4]
   834ac:	4648      	mov	r0, r9
   834ae:	f003 0301 	and.w	r3, r3, #1
   834b2:	431e      	orrs	r6, r3
   834b4:	f8ca 6004 	str.w	r6, [sl, #4]
   834b8:	f7ff fe9e 	bl	831f8 <__malloc_unlock>
   834bc:	4638      	mov	r0, r7
   834be:	e71b      	b.n	832f8 <_realloc_r+0xfc>
   834c0:	68a3      	ldr	r3, [r4, #8]
   834c2:	2a24      	cmp	r2, #36	; 0x24
   834c4:	6083      	str	r3, [r0, #8]
   834c6:	68e3      	ldr	r3, [r4, #12]
   834c8:	60c3      	str	r3, [r0, #12]
   834ca:	d02b      	beq.n	83524 <_realloc_r+0x328>
   834cc:	f100 0310 	add.w	r3, r0, #16
   834d0:	f104 0210 	add.w	r2, r4, #16
   834d4:	e74a      	b.n	8336c <_realloc_r+0x170>
   834d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   834da:	46a0      	mov	r8, r4
   834dc:	f022 0203 	bic.w	r2, r2, #3
   834e0:	4415      	add	r5, r2
   834e2:	e6f9      	b.n	832d8 <_realloc_r+0xdc>
   834e4:	4621      	mov	r1, r4
   834e6:	4640      	mov	r0, r8
   834e8:	4675      	mov	r5, lr
   834ea:	4657      	mov	r7, sl
   834ec:	f7ff fe1c 	bl	83128 <memmove>
   834f0:	f8da 3004 	ldr.w	r3, [sl, #4]
   834f4:	e6f0      	b.n	832d8 <_realloc_r+0xdc>
   834f6:	4642      	mov	r2, r8
   834f8:	e76e      	b.n	833d8 <_realloc_r+0x1dc>
   834fa:	4621      	mov	r1, r4
   834fc:	4640      	mov	r0, r8
   834fe:	461d      	mov	r5, r3
   83500:	4657      	mov	r7, sl
   83502:	f7ff fe11 	bl	83128 <memmove>
   83506:	f8da 3004 	ldr.w	r3, [sl, #4]
   8350a:	e6e5      	b.n	832d8 <_realloc_r+0xdc>
   8350c:	68a3      	ldr	r3, [r4, #8]
   8350e:	2a24      	cmp	r2, #36	; 0x24
   83510:	f8ca 3010 	str.w	r3, [sl, #16]
   83514:	68e3      	ldr	r3, [r4, #12]
   83516:	f8ca 3014 	str.w	r3, [sl, #20]
   8351a:	d018      	beq.n	8354e <_realloc_r+0x352>
   8351c:	3410      	adds	r4, #16
   8351e:	f10a 0318 	add.w	r3, sl, #24
   83522:	e770      	b.n	83406 <_realloc_r+0x20a>
   83524:	6922      	ldr	r2, [r4, #16]
   83526:	f100 0318 	add.w	r3, r0, #24
   8352a:	6102      	str	r2, [r0, #16]
   8352c:	6961      	ldr	r1, [r4, #20]
   8352e:	f104 0218 	add.w	r2, r4, #24
   83532:	6141      	str	r1, [r0, #20]
   83534:	e71a      	b.n	8336c <_realloc_r+0x170>
   83536:	68a1      	ldr	r1, [r4, #8]
   83538:	2a24      	cmp	r2, #36	; 0x24
   8353a:	f8ca 1010 	str.w	r1, [sl, #16]
   8353e:	68e1      	ldr	r1, [r4, #12]
   83540:	f8ca 1014 	str.w	r1, [sl, #20]
   83544:	d00f      	beq.n	83566 <_realloc_r+0x36a>
   83546:	3410      	adds	r4, #16
   83548:	f10a 0218 	add.w	r2, sl, #24
   8354c:	e744      	b.n	833d8 <_realloc_r+0x1dc>
   8354e:	6922      	ldr	r2, [r4, #16]
   83550:	f10a 0320 	add.w	r3, sl, #32
   83554:	f8ca 2018 	str.w	r2, [sl, #24]
   83558:	6962      	ldr	r2, [r4, #20]
   8355a:	3418      	adds	r4, #24
   8355c:	f8ca 201c 	str.w	r2, [sl, #28]
   83560:	e751      	b.n	83406 <_realloc_r+0x20a>
   83562:	463b      	mov	r3, r7
   83564:	e791      	b.n	8348a <_realloc_r+0x28e>
   83566:	6921      	ldr	r1, [r4, #16]
   83568:	f10a 0220 	add.w	r2, sl, #32
   8356c:	f8ca 1018 	str.w	r1, [sl, #24]
   83570:	6961      	ldr	r1, [r4, #20]
   83572:	3418      	adds	r4, #24
   83574:	f8ca 101c 	str.w	r1, [sl, #28]
   83578:	e72e      	b.n	833d8 <_realloc_r+0x1dc>
   8357a:	4621      	mov	r1, r4
   8357c:	4638      	mov	r0, r7
   8357e:	f8cd c004 	str.w	ip, [sp, #4]
   83582:	f7ff fdd1 	bl	83128 <memmove>
   83586:	f8dd c004 	ldr.w	ip, [sp, #4]
   8358a:	e784      	b.n	83496 <_realloc_r+0x29a>
   8358c:	68a3      	ldr	r3, [r4, #8]
   8358e:	2a24      	cmp	r2, #36	; 0x24
   83590:	f8ca 3010 	str.w	r3, [sl, #16]
   83594:	68e3      	ldr	r3, [r4, #12]
   83596:	f8ca 3014 	str.w	r3, [sl, #20]
   8359a:	d003      	beq.n	835a4 <_realloc_r+0x3a8>
   8359c:	3410      	adds	r4, #16
   8359e:	f10a 0318 	add.w	r3, sl, #24
   835a2:	e772      	b.n	8348a <_realloc_r+0x28e>
   835a4:	6922      	ldr	r2, [r4, #16]
   835a6:	f10a 0320 	add.w	r3, sl, #32
   835aa:	f8ca 2018 	str.w	r2, [sl, #24]
   835ae:	6962      	ldr	r2, [r4, #20]
   835b0:	3418      	adds	r4, #24
   835b2:	f8ca 201c 	str.w	r2, [sl, #28]
   835b6:	e768      	b.n	8348a <_realloc_r+0x28e>
   835b8:	20070590 	.word	0x20070590

000835bc <_sbrk_r>:
   835bc:	b538      	push	{r3, r4, r5, lr}
   835be:	4c07      	ldr	r4, [pc, #28]	; (835dc <_sbrk_r+0x20>)
   835c0:	2300      	movs	r3, #0
   835c2:	4605      	mov	r5, r0
   835c4:	4608      	mov	r0, r1
   835c6:	6023      	str	r3, [r4, #0]
   835c8:	f7fd fcd4 	bl	80f74 <_sbrk>
   835cc:	1c43      	adds	r3, r0, #1
   835ce:	d000      	beq.n	835d2 <_sbrk_r+0x16>
   835d0:	bd38      	pop	{r3, r4, r5, pc}
   835d2:	6823      	ldr	r3, [r4, #0]
   835d4:	2b00      	cmp	r3, #0
   835d6:	d0fb      	beq.n	835d0 <_sbrk_r+0x14>
   835d8:	602b      	str	r3, [r5, #0]
   835da:	bd38      	pop	{r3, r4, r5, pc}
   835dc:	20070b6c 	.word	0x20070b6c

000835e0 <__sread>:
   835e0:	b510      	push	{r4, lr}
   835e2:	460c      	mov	r4, r1
   835e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835e8:	f000 f9c2 	bl	83970 <_read_r>
   835ec:	2800      	cmp	r0, #0
   835ee:	db03      	blt.n	835f8 <__sread+0x18>
   835f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   835f2:	4403      	add	r3, r0
   835f4:	6523      	str	r3, [r4, #80]	; 0x50
   835f6:	bd10      	pop	{r4, pc}
   835f8:	89a3      	ldrh	r3, [r4, #12]
   835fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   835fe:	81a3      	strh	r3, [r4, #12]
   83600:	bd10      	pop	{r4, pc}
   83602:	bf00      	nop

00083604 <__swrite>:
   83604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83608:	460c      	mov	r4, r1
   8360a:	8989      	ldrh	r1, [r1, #12]
   8360c:	461d      	mov	r5, r3
   8360e:	05cb      	lsls	r3, r1, #23
   83610:	4616      	mov	r6, r2
   83612:	4607      	mov	r7, r0
   83614:	d506      	bpl.n	83624 <__swrite+0x20>
   83616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8361a:	2200      	movs	r2, #0
   8361c:	2302      	movs	r3, #2
   8361e:	f000 f993 	bl	83948 <_lseek_r>
   83622:	89a1      	ldrh	r1, [r4, #12]
   83624:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83628:	81a1      	strh	r1, [r4, #12]
   8362a:	4638      	mov	r0, r7
   8362c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83630:	4632      	mov	r2, r6
   83632:	462b      	mov	r3, r5
   83634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83638:	f000 b89e 	b.w	83778 <_write_r>

0008363c <__sseek>:
   8363c:	b510      	push	{r4, lr}
   8363e:	460c      	mov	r4, r1
   83640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83644:	f000 f980 	bl	83948 <_lseek_r>
   83648:	89a3      	ldrh	r3, [r4, #12]
   8364a:	1c42      	adds	r2, r0, #1
   8364c:	bf0e      	itee	eq
   8364e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83656:	6520      	strne	r0, [r4, #80]	; 0x50
   83658:	81a3      	strh	r3, [r4, #12]
   8365a:	bd10      	pop	{r4, pc}

0008365c <__sclose>:
   8365c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83660:	f000 b8f2 	b.w	83848 <_close_r>

00083664 <__swbuf_r>:
   83664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83666:	460d      	mov	r5, r1
   83668:	4614      	mov	r4, r2
   8366a:	4607      	mov	r7, r0
   8366c:	b110      	cbz	r0, 83674 <__swbuf_r+0x10>
   8366e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83670:	2b00      	cmp	r3, #0
   83672:	d048      	beq.n	83706 <__swbuf_r+0xa2>
   83674:	89a2      	ldrh	r2, [r4, #12]
   83676:	69a0      	ldr	r0, [r4, #24]
   83678:	b293      	uxth	r3, r2
   8367a:	60a0      	str	r0, [r4, #8]
   8367c:	0718      	lsls	r0, r3, #28
   8367e:	d538      	bpl.n	836f2 <__swbuf_r+0x8e>
   83680:	6926      	ldr	r6, [r4, #16]
   83682:	2e00      	cmp	r6, #0
   83684:	d035      	beq.n	836f2 <__swbuf_r+0x8e>
   83686:	0499      	lsls	r1, r3, #18
   83688:	b2ed      	uxtb	r5, r5
   8368a:	d515      	bpl.n	836b8 <__swbuf_r+0x54>
   8368c:	6823      	ldr	r3, [r4, #0]
   8368e:	6962      	ldr	r2, [r4, #20]
   83690:	1b9e      	subs	r6, r3, r6
   83692:	4296      	cmp	r6, r2
   83694:	da1c      	bge.n	836d0 <__swbuf_r+0x6c>
   83696:	3601      	adds	r6, #1
   83698:	68a2      	ldr	r2, [r4, #8]
   8369a:	1c59      	adds	r1, r3, #1
   8369c:	3a01      	subs	r2, #1
   8369e:	60a2      	str	r2, [r4, #8]
   836a0:	6021      	str	r1, [r4, #0]
   836a2:	701d      	strb	r5, [r3, #0]
   836a4:	6963      	ldr	r3, [r4, #20]
   836a6:	42b3      	cmp	r3, r6
   836a8:	d01a      	beq.n	836e0 <__swbuf_r+0x7c>
   836aa:	89a3      	ldrh	r3, [r4, #12]
   836ac:	07db      	lsls	r3, r3, #31
   836ae:	d501      	bpl.n	836b4 <__swbuf_r+0x50>
   836b0:	2d0a      	cmp	r5, #10
   836b2:	d015      	beq.n	836e0 <__swbuf_r+0x7c>
   836b4:	4628      	mov	r0, r5
   836b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   836ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   836be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   836c2:	6663      	str	r3, [r4, #100]	; 0x64
   836c4:	6823      	ldr	r3, [r4, #0]
   836c6:	81a2      	strh	r2, [r4, #12]
   836c8:	6962      	ldr	r2, [r4, #20]
   836ca:	1b9e      	subs	r6, r3, r6
   836cc:	4296      	cmp	r6, r2
   836ce:	dbe2      	blt.n	83696 <__swbuf_r+0x32>
   836d0:	4638      	mov	r0, r7
   836d2:	4621      	mov	r1, r4
   836d4:	f7fe fd6e 	bl	821b4 <_fflush_r>
   836d8:	b940      	cbnz	r0, 836ec <__swbuf_r+0x88>
   836da:	6823      	ldr	r3, [r4, #0]
   836dc:	2601      	movs	r6, #1
   836de:	e7db      	b.n	83698 <__swbuf_r+0x34>
   836e0:	4638      	mov	r0, r7
   836e2:	4621      	mov	r1, r4
   836e4:	f7fe fd66 	bl	821b4 <_fflush_r>
   836e8:	2800      	cmp	r0, #0
   836ea:	d0e3      	beq.n	836b4 <__swbuf_r+0x50>
   836ec:	f04f 30ff 	mov.w	r0, #4294967295
   836f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836f2:	4638      	mov	r0, r7
   836f4:	4621      	mov	r1, r4
   836f6:	f7fe fc47 	bl	81f88 <__swsetup_r>
   836fa:	2800      	cmp	r0, #0
   836fc:	d1f6      	bne.n	836ec <__swbuf_r+0x88>
   836fe:	89a2      	ldrh	r2, [r4, #12]
   83700:	6926      	ldr	r6, [r4, #16]
   83702:	b293      	uxth	r3, r2
   83704:	e7bf      	b.n	83686 <__swbuf_r+0x22>
   83706:	f7fe fd71 	bl	821ec <__sinit>
   8370a:	e7b3      	b.n	83674 <__swbuf_r+0x10>

0008370c <_wcrtomb_r>:
   8370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83710:	461e      	mov	r6, r3
   83712:	b086      	sub	sp, #24
   83714:	460c      	mov	r4, r1
   83716:	4605      	mov	r5, r0
   83718:	4617      	mov	r7, r2
   8371a:	4b0f      	ldr	r3, [pc, #60]	; (83758 <_wcrtomb_r+0x4c>)
   8371c:	b191      	cbz	r1, 83744 <_wcrtomb_r+0x38>
   8371e:	f8d3 8000 	ldr.w	r8, [r3]
   83722:	f7ff f923 	bl	8296c <__locale_charset>
   83726:	9600      	str	r6, [sp, #0]
   83728:	4603      	mov	r3, r0
   8372a:	4621      	mov	r1, r4
   8372c:	463a      	mov	r2, r7
   8372e:	4628      	mov	r0, r5
   83730:	47c0      	blx	r8
   83732:	1c43      	adds	r3, r0, #1
   83734:	d103      	bne.n	8373e <_wcrtomb_r+0x32>
   83736:	2200      	movs	r2, #0
   83738:	238a      	movs	r3, #138	; 0x8a
   8373a:	6032      	str	r2, [r6, #0]
   8373c:	602b      	str	r3, [r5, #0]
   8373e:	b006      	add	sp, #24
   83740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83744:	681f      	ldr	r7, [r3, #0]
   83746:	f7ff f911 	bl	8296c <__locale_charset>
   8374a:	9600      	str	r6, [sp, #0]
   8374c:	4603      	mov	r3, r0
   8374e:	4622      	mov	r2, r4
   83750:	4628      	mov	r0, r5
   83752:	a903      	add	r1, sp, #12
   83754:	47b8      	blx	r7
   83756:	e7ec      	b.n	83732 <_wcrtomb_r+0x26>
   83758:	200709a0 	.word	0x200709a0

0008375c <__ascii_wctomb>:
   8375c:	b121      	cbz	r1, 83768 <__ascii_wctomb+0xc>
   8375e:	2aff      	cmp	r2, #255	; 0xff
   83760:	d804      	bhi.n	8376c <__ascii_wctomb+0x10>
   83762:	700a      	strb	r2, [r1, #0]
   83764:	2001      	movs	r0, #1
   83766:	4770      	bx	lr
   83768:	4608      	mov	r0, r1
   8376a:	4770      	bx	lr
   8376c:	238a      	movs	r3, #138	; 0x8a
   8376e:	6003      	str	r3, [r0, #0]
   83770:	f04f 30ff 	mov.w	r0, #4294967295
   83774:	4770      	bx	lr
   83776:	bf00      	nop

00083778 <_write_r>:
   83778:	b570      	push	{r4, r5, r6, lr}
   8377a:	4c08      	ldr	r4, [pc, #32]	; (8379c <_write_r+0x24>)
   8377c:	4606      	mov	r6, r0
   8377e:	2500      	movs	r5, #0
   83780:	4608      	mov	r0, r1
   83782:	4611      	mov	r1, r2
   83784:	461a      	mov	r2, r3
   83786:	6025      	str	r5, [r4, #0]
   83788:	f7fc fd96 	bl	802b8 <_write>
   8378c:	1c43      	adds	r3, r0, #1
   8378e:	d000      	beq.n	83792 <_write_r+0x1a>
   83790:	bd70      	pop	{r4, r5, r6, pc}
   83792:	6823      	ldr	r3, [r4, #0]
   83794:	2b00      	cmp	r3, #0
   83796:	d0fb      	beq.n	83790 <_write_r+0x18>
   83798:	6033      	str	r3, [r6, #0]
   8379a:	bd70      	pop	{r4, r5, r6, pc}
   8379c:	20070b6c 	.word	0x20070b6c

000837a0 <__register_exitproc>:
   837a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   837a2:	4c27      	ldr	r4, [pc, #156]	; (83840 <__register_exitproc+0xa0>)
   837a4:	b085      	sub	sp, #20
   837a6:	6826      	ldr	r6, [r4, #0]
   837a8:	4607      	mov	r7, r0
   837aa:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   837ae:	2c00      	cmp	r4, #0
   837b0:	d040      	beq.n	83834 <__register_exitproc+0x94>
   837b2:	6865      	ldr	r5, [r4, #4]
   837b4:	2d1f      	cmp	r5, #31
   837b6:	dd1e      	ble.n	837f6 <__register_exitproc+0x56>
   837b8:	4822      	ldr	r0, [pc, #136]	; (83844 <__register_exitproc+0xa4>)
   837ba:	b918      	cbnz	r0, 837c4 <__register_exitproc+0x24>
   837bc:	f04f 30ff 	mov.w	r0, #4294967295
   837c0:	b005      	add	sp, #20
   837c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   837c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   837c8:	9103      	str	r1, [sp, #12]
   837ca:	9202      	str	r2, [sp, #8]
   837cc:	9301      	str	r3, [sp, #4]
   837ce:	f7ff f947 	bl	82a60 <malloc>
   837d2:	9903      	ldr	r1, [sp, #12]
   837d4:	4604      	mov	r4, r0
   837d6:	9a02      	ldr	r2, [sp, #8]
   837d8:	9b01      	ldr	r3, [sp, #4]
   837da:	2800      	cmp	r0, #0
   837dc:	d0ee      	beq.n	837bc <__register_exitproc+0x1c>
   837de:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   837e2:	2000      	movs	r0, #0
   837e4:	6025      	str	r5, [r4, #0]
   837e6:	6060      	str	r0, [r4, #4]
   837e8:	4605      	mov	r5, r0
   837ea:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   837ee:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   837f2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   837f6:	b93f      	cbnz	r7, 83808 <__register_exitproc+0x68>
   837f8:	1c6b      	adds	r3, r5, #1
   837fa:	2000      	movs	r0, #0
   837fc:	3502      	adds	r5, #2
   837fe:	6063      	str	r3, [r4, #4]
   83800:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83804:	b005      	add	sp, #20
   83806:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83808:	2601      	movs	r6, #1
   8380a:	40ae      	lsls	r6, r5
   8380c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83810:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83814:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83818:	2f02      	cmp	r7, #2
   8381a:	ea42 0206 	orr.w	r2, r2, r6
   8381e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83822:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83826:	d1e7      	bne.n	837f8 <__register_exitproc+0x58>
   83828:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8382c:	431e      	orrs	r6, r3
   8382e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83832:	e7e1      	b.n	837f8 <__register_exitproc+0x58>
   83834:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83838:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8383c:	e7b9      	b.n	837b2 <__register_exitproc+0x12>
   8383e:	bf00      	nop
   83840:	00083f90 	.word	0x00083f90
   83844:	00082a61 	.word	0x00082a61

00083848 <_close_r>:
   83848:	b538      	push	{r3, r4, r5, lr}
   8384a:	4c07      	ldr	r4, [pc, #28]	; (83868 <_close_r+0x20>)
   8384c:	2300      	movs	r3, #0
   8384e:	4605      	mov	r5, r0
   83850:	4608      	mov	r0, r1
   83852:	6023      	str	r3, [r4, #0]
   83854:	f7fd fba8 	bl	80fa8 <_close>
   83858:	1c43      	adds	r3, r0, #1
   8385a:	d000      	beq.n	8385e <_close_r+0x16>
   8385c:	bd38      	pop	{r3, r4, r5, pc}
   8385e:	6823      	ldr	r3, [r4, #0]
   83860:	2b00      	cmp	r3, #0
   83862:	d0fb      	beq.n	8385c <_close_r+0x14>
   83864:	602b      	str	r3, [r5, #0]
   83866:	bd38      	pop	{r3, r4, r5, pc}
   83868:	20070b6c 	.word	0x20070b6c

0008386c <_fclose_r>:
   8386c:	b570      	push	{r4, r5, r6, lr}
   8386e:	460c      	mov	r4, r1
   83870:	4605      	mov	r5, r0
   83872:	b131      	cbz	r1, 83882 <_fclose_r+0x16>
   83874:	b110      	cbz	r0, 8387c <_fclose_r+0x10>
   83876:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83878:	2b00      	cmp	r3, #0
   8387a:	d02f      	beq.n	838dc <_fclose_r+0x70>
   8387c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83880:	b90b      	cbnz	r3, 83886 <_fclose_r+0x1a>
   83882:	2000      	movs	r0, #0
   83884:	bd70      	pop	{r4, r5, r6, pc}
   83886:	4628      	mov	r0, r5
   83888:	4621      	mov	r1, r4
   8388a:	f7fe fc93 	bl	821b4 <_fflush_r>
   8388e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83890:	4606      	mov	r6, r0
   83892:	b133      	cbz	r3, 838a2 <_fclose_r+0x36>
   83894:	4628      	mov	r0, r5
   83896:	69e1      	ldr	r1, [r4, #28]
   83898:	4798      	blx	r3
   8389a:	2800      	cmp	r0, #0
   8389c:	bfb8      	it	lt
   8389e:	f04f 36ff 	movlt.w	r6, #4294967295
   838a2:	89a3      	ldrh	r3, [r4, #12]
   838a4:	061b      	lsls	r3, r3, #24
   838a6:	d41c      	bmi.n	838e2 <_fclose_r+0x76>
   838a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   838aa:	b141      	cbz	r1, 838be <_fclose_r+0x52>
   838ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
   838b0:	4299      	cmp	r1, r3
   838b2:	d002      	beq.n	838ba <_fclose_r+0x4e>
   838b4:	4628      	mov	r0, r5
   838b6:	f7fe fddd 	bl	82474 <_free_r>
   838ba:	2300      	movs	r3, #0
   838bc:	6323      	str	r3, [r4, #48]	; 0x30
   838be:	6c61      	ldr	r1, [r4, #68]	; 0x44
   838c0:	b121      	cbz	r1, 838cc <_fclose_r+0x60>
   838c2:	4628      	mov	r0, r5
   838c4:	f7fe fdd6 	bl	82474 <_free_r>
   838c8:	2300      	movs	r3, #0
   838ca:	6463      	str	r3, [r4, #68]	; 0x44
   838cc:	f7fe fd08 	bl	822e0 <__sfp_lock_acquire>
   838d0:	2300      	movs	r3, #0
   838d2:	81a3      	strh	r3, [r4, #12]
   838d4:	f7fe fd06 	bl	822e4 <__sfp_lock_release>
   838d8:	4630      	mov	r0, r6
   838da:	bd70      	pop	{r4, r5, r6, pc}
   838dc:	f7fe fc86 	bl	821ec <__sinit>
   838e0:	e7cc      	b.n	8387c <_fclose_r+0x10>
   838e2:	4628      	mov	r0, r5
   838e4:	6921      	ldr	r1, [r4, #16]
   838e6:	f7fe fdc5 	bl	82474 <_free_r>
   838ea:	e7dd      	b.n	838a8 <_fclose_r+0x3c>

000838ec <fclose>:
   838ec:	4b02      	ldr	r3, [pc, #8]	; (838f8 <fclose+0xc>)
   838ee:	4601      	mov	r1, r0
   838f0:	6818      	ldr	r0, [r3, #0]
   838f2:	f7ff bfbb 	b.w	8386c <_fclose_r>
   838f6:	bf00      	nop
   838f8:	20070568 	.word	0x20070568

000838fc <_fstat_r>:
   838fc:	b538      	push	{r3, r4, r5, lr}
   838fe:	4c08      	ldr	r4, [pc, #32]	; (83920 <_fstat_r+0x24>)
   83900:	2300      	movs	r3, #0
   83902:	4605      	mov	r5, r0
   83904:	4608      	mov	r0, r1
   83906:	4611      	mov	r1, r2
   83908:	6023      	str	r3, [r4, #0]
   8390a:	f7fd fb51 	bl	80fb0 <_fstat>
   8390e:	1c43      	adds	r3, r0, #1
   83910:	d000      	beq.n	83914 <_fstat_r+0x18>
   83912:	bd38      	pop	{r3, r4, r5, pc}
   83914:	6823      	ldr	r3, [r4, #0]
   83916:	2b00      	cmp	r3, #0
   83918:	d0fb      	beq.n	83912 <_fstat_r+0x16>
   8391a:	602b      	str	r3, [r5, #0]
   8391c:	bd38      	pop	{r3, r4, r5, pc}
   8391e:	bf00      	nop
   83920:	20070b6c 	.word	0x20070b6c

00083924 <_isatty_r>:
   83924:	b538      	push	{r3, r4, r5, lr}
   83926:	4c07      	ldr	r4, [pc, #28]	; (83944 <_isatty_r+0x20>)
   83928:	2300      	movs	r3, #0
   8392a:	4605      	mov	r5, r0
   8392c:	4608      	mov	r0, r1
   8392e:	6023      	str	r3, [r4, #0]
   83930:	f7fd fb44 	bl	80fbc <_isatty>
   83934:	1c43      	adds	r3, r0, #1
   83936:	d000      	beq.n	8393a <_isatty_r+0x16>
   83938:	bd38      	pop	{r3, r4, r5, pc}
   8393a:	6823      	ldr	r3, [r4, #0]
   8393c:	2b00      	cmp	r3, #0
   8393e:	d0fb      	beq.n	83938 <_isatty_r+0x14>
   83940:	602b      	str	r3, [r5, #0]
   83942:	bd38      	pop	{r3, r4, r5, pc}
   83944:	20070b6c 	.word	0x20070b6c

00083948 <_lseek_r>:
   83948:	b570      	push	{r4, r5, r6, lr}
   8394a:	4c08      	ldr	r4, [pc, #32]	; (8396c <_lseek_r+0x24>)
   8394c:	4606      	mov	r6, r0
   8394e:	2500      	movs	r5, #0
   83950:	4608      	mov	r0, r1
   83952:	4611      	mov	r1, r2
   83954:	461a      	mov	r2, r3
   83956:	6025      	str	r5, [r4, #0]
   83958:	f7fd fb32 	bl	80fc0 <_lseek>
   8395c:	1c43      	adds	r3, r0, #1
   8395e:	d000      	beq.n	83962 <_lseek_r+0x1a>
   83960:	bd70      	pop	{r4, r5, r6, pc}
   83962:	6823      	ldr	r3, [r4, #0]
   83964:	2b00      	cmp	r3, #0
   83966:	d0fb      	beq.n	83960 <_lseek_r+0x18>
   83968:	6033      	str	r3, [r6, #0]
   8396a:	bd70      	pop	{r4, r5, r6, pc}
   8396c:	20070b6c 	.word	0x20070b6c

00083970 <_read_r>:
   83970:	b570      	push	{r4, r5, r6, lr}
   83972:	4c08      	ldr	r4, [pc, #32]	; (83994 <_read_r+0x24>)
   83974:	4606      	mov	r6, r0
   83976:	2500      	movs	r5, #0
   83978:	4608      	mov	r0, r1
   8397a:	4611      	mov	r1, r2
   8397c:	461a      	mov	r2, r3
   8397e:	6025      	str	r5, [r4, #0]
   83980:	f7fc fc7a 	bl	80278 <_read>
   83984:	1c43      	adds	r3, r0, #1
   83986:	d000      	beq.n	8398a <_read_r+0x1a>
   83988:	bd70      	pop	{r4, r5, r6, pc}
   8398a:	6823      	ldr	r3, [r4, #0]
   8398c:	2b00      	cmp	r3, #0
   8398e:	d0fb      	beq.n	83988 <_read_r+0x18>
   83990:	6033      	str	r3, [r6, #0]
   83992:	bd70      	pop	{r4, r5, r6, pc}
   83994:	20070b6c 	.word	0x20070b6c

00083998 <__aeabi_uldivmod>:
   83998:	b94b      	cbnz	r3, 839ae <__aeabi_uldivmod+0x16>
   8399a:	b942      	cbnz	r2, 839ae <__aeabi_uldivmod+0x16>
   8399c:	2900      	cmp	r1, #0
   8399e:	bf08      	it	eq
   839a0:	2800      	cmpeq	r0, #0
   839a2:	d002      	beq.n	839aa <__aeabi_uldivmod+0x12>
   839a4:	f04f 31ff 	mov.w	r1, #4294967295
   839a8:	4608      	mov	r0, r1
   839aa:	f000 b83b 	b.w	83a24 <__aeabi_idiv0>
   839ae:	b082      	sub	sp, #8
   839b0:	46ec      	mov	ip, sp
   839b2:	e92d 5000 	stmdb	sp!, {ip, lr}
   839b6:	f000 f81d 	bl	839f4 <__gnu_uldivmod_helper>
   839ba:	f8dd e004 	ldr.w	lr, [sp, #4]
   839be:	b002      	add	sp, #8
   839c0:	bc0c      	pop	{r2, r3}
   839c2:	4770      	bx	lr

000839c4 <__gnu_ldivmod_helper>:
   839c4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   839c8:	9e08      	ldr	r6, [sp, #32]
   839ca:	4614      	mov	r4, r2
   839cc:	461d      	mov	r5, r3
   839ce:	4680      	mov	r8, r0
   839d0:	4689      	mov	r9, r1
   839d2:	f000 f829 	bl	83a28 <__divdi3>
   839d6:	fb04 f301 	mul.w	r3, r4, r1
   839da:	fba4 ab00 	umull	sl, fp, r4, r0
   839de:	fb00 3205 	mla	r2, r0, r5, r3
   839e2:	4493      	add	fp, r2
   839e4:	ebb8 080a 	subs.w	r8, r8, sl
   839e8:	eb69 090b 	sbc.w	r9, r9, fp
   839ec:	e9c6 8900 	strd	r8, r9, [r6]
   839f0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000839f4 <__gnu_uldivmod_helper>:
   839f4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   839f8:	9e08      	ldr	r6, [sp, #32]
   839fa:	4614      	mov	r4, r2
   839fc:	461d      	mov	r5, r3
   839fe:	4680      	mov	r8, r0
   83a00:	4689      	mov	r9, r1
   83a02:	f000 f961 	bl	83cc8 <__udivdi3>
   83a06:	fb00 f505 	mul.w	r5, r0, r5
   83a0a:	fba0 ab04 	umull	sl, fp, r0, r4
   83a0e:	fb04 5401 	mla	r4, r4, r1, r5
   83a12:	44a3      	add	fp, r4
   83a14:	ebb8 080a 	subs.w	r8, r8, sl
   83a18:	eb69 090b 	sbc.w	r9, r9, fp
   83a1c:	e9c6 8900 	strd	r8, r9, [r6]
   83a20:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083a24 <__aeabi_idiv0>:
   83a24:	4770      	bx	lr
   83a26:	bf00      	nop

00083a28 <__divdi3>:
   83a28:	2900      	cmp	r1, #0
   83a2a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83a2e:	f2c0 80a1 	blt.w	83b74 <__divdi3+0x14c>
   83a32:	2400      	movs	r4, #0
   83a34:	2b00      	cmp	r3, #0
   83a36:	f2c0 8098 	blt.w	83b6a <__divdi3+0x142>
   83a3a:	4615      	mov	r5, r2
   83a3c:	4606      	mov	r6, r0
   83a3e:	460f      	mov	r7, r1
   83a40:	2b00      	cmp	r3, #0
   83a42:	d13f      	bne.n	83ac4 <__divdi3+0x9c>
   83a44:	428a      	cmp	r2, r1
   83a46:	d958      	bls.n	83afa <__divdi3+0xd2>
   83a48:	fab2 f382 	clz	r3, r2
   83a4c:	b14b      	cbz	r3, 83a62 <__divdi3+0x3a>
   83a4e:	f1c3 0220 	rsb	r2, r3, #32
   83a52:	fa01 f703 	lsl.w	r7, r1, r3
   83a56:	fa20 f202 	lsr.w	r2, r0, r2
   83a5a:	409d      	lsls	r5, r3
   83a5c:	fa00 f603 	lsl.w	r6, r0, r3
   83a60:	4317      	orrs	r7, r2
   83a62:	0c29      	lsrs	r1, r5, #16
   83a64:	fbb7 f2f1 	udiv	r2, r7, r1
   83a68:	fb01 7712 	mls	r7, r1, r2, r7
   83a6c:	b2a8      	uxth	r0, r5
   83a6e:	fb00 f302 	mul.w	r3, r0, r2
   83a72:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83a76:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83a7a:	42bb      	cmp	r3, r7
   83a7c:	d909      	bls.n	83a92 <__divdi3+0x6a>
   83a7e:	197f      	adds	r7, r7, r5
   83a80:	f102 3cff 	add.w	ip, r2, #4294967295
   83a84:	f080 8105 	bcs.w	83c92 <__divdi3+0x26a>
   83a88:	42bb      	cmp	r3, r7
   83a8a:	f240 8102 	bls.w	83c92 <__divdi3+0x26a>
   83a8e:	3a02      	subs	r2, #2
   83a90:	442f      	add	r7, r5
   83a92:	1aff      	subs	r7, r7, r3
   83a94:	fbb7 f3f1 	udiv	r3, r7, r1
   83a98:	fb01 7113 	mls	r1, r1, r3, r7
   83a9c:	fb00 f003 	mul.w	r0, r0, r3
   83aa0:	b2b6      	uxth	r6, r6
   83aa2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83aa6:	4288      	cmp	r0, r1
   83aa8:	d908      	bls.n	83abc <__divdi3+0x94>
   83aaa:	1949      	adds	r1, r1, r5
   83aac:	f103 37ff 	add.w	r7, r3, #4294967295
   83ab0:	f080 80f1 	bcs.w	83c96 <__divdi3+0x26e>
   83ab4:	4288      	cmp	r0, r1
   83ab6:	f240 80ee 	bls.w	83c96 <__divdi3+0x26e>
   83aba:	3b02      	subs	r3, #2
   83abc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83ac0:	2300      	movs	r3, #0
   83ac2:	e003      	b.n	83acc <__divdi3+0xa4>
   83ac4:	428b      	cmp	r3, r1
   83ac6:	d90a      	bls.n	83ade <__divdi3+0xb6>
   83ac8:	2300      	movs	r3, #0
   83aca:	461a      	mov	r2, r3
   83acc:	4610      	mov	r0, r2
   83ace:	4619      	mov	r1, r3
   83ad0:	b114      	cbz	r4, 83ad8 <__divdi3+0xb0>
   83ad2:	4240      	negs	r0, r0
   83ad4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83ad8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83adc:	4770      	bx	lr
   83ade:	fab3 f883 	clz	r8, r3
   83ae2:	f1b8 0f00 	cmp.w	r8, #0
   83ae6:	f040 8088 	bne.w	83bfa <__divdi3+0x1d2>
   83aea:	428b      	cmp	r3, r1
   83aec:	d302      	bcc.n	83af4 <__divdi3+0xcc>
   83aee:	4282      	cmp	r2, r0
   83af0:	f200 80e2 	bhi.w	83cb8 <__divdi3+0x290>
   83af4:	2300      	movs	r3, #0
   83af6:	2201      	movs	r2, #1
   83af8:	e7e8      	b.n	83acc <__divdi3+0xa4>
   83afa:	b912      	cbnz	r2, 83b02 <__divdi3+0xda>
   83afc:	2301      	movs	r3, #1
   83afe:	fbb3 f5f2 	udiv	r5, r3, r2
   83b02:	fab5 f285 	clz	r2, r5
   83b06:	2a00      	cmp	r2, #0
   83b08:	d13a      	bne.n	83b80 <__divdi3+0x158>
   83b0a:	1b7f      	subs	r7, r7, r5
   83b0c:	0c28      	lsrs	r0, r5, #16
   83b0e:	fa1f fc85 	uxth.w	ip, r5
   83b12:	2301      	movs	r3, #1
   83b14:	fbb7 f1f0 	udiv	r1, r7, r0
   83b18:	fb00 7711 	mls	r7, r0, r1, r7
   83b1c:	fb0c f201 	mul.w	r2, ip, r1
   83b20:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83b24:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83b28:	42ba      	cmp	r2, r7
   83b2a:	d907      	bls.n	83b3c <__divdi3+0x114>
   83b2c:	197f      	adds	r7, r7, r5
   83b2e:	f101 38ff 	add.w	r8, r1, #4294967295
   83b32:	d202      	bcs.n	83b3a <__divdi3+0x112>
   83b34:	42ba      	cmp	r2, r7
   83b36:	f200 80c4 	bhi.w	83cc2 <__divdi3+0x29a>
   83b3a:	4641      	mov	r1, r8
   83b3c:	1abf      	subs	r7, r7, r2
   83b3e:	fbb7 f2f0 	udiv	r2, r7, r0
   83b42:	fb00 7012 	mls	r0, r0, r2, r7
   83b46:	fb0c fc02 	mul.w	ip, ip, r2
   83b4a:	b2b6      	uxth	r6, r6
   83b4c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83b50:	4584      	cmp	ip, r0
   83b52:	d907      	bls.n	83b64 <__divdi3+0x13c>
   83b54:	1940      	adds	r0, r0, r5
   83b56:	f102 37ff 	add.w	r7, r2, #4294967295
   83b5a:	d202      	bcs.n	83b62 <__divdi3+0x13a>
   83b5c:	4584      	cmp	ip, r0
   83b5e:	f200 80ae 	bhi.w	83cbe <__divdi3+0x296>
   83b62:	463a      	mov	r2, r7
   83b64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83b68:	e7b0      	b.n	83acc <__divdi3+0xa4>
   83b6a:	43e4      	mvns	r4, r4
   83b6c:	4252      	negs	r2, r2
   83b6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83b72:	e762      	b.n	83a3a <__divdi3+0x12>
   83b74:	4240      	negs	r0, r0
   83b76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83b7a:	f04f 34ff 	mov.w	r4, #4294967295
   83b7e:	e759      	b.n	83a34 <__divdi3+0xc>
   83b80:	4095      	lsls	r5, r2
   83b82:	f1c2 0920 	rsb	r9, r2, #32
   83b86:	fa27 f109 	lsr.w	r1, r7, r9
   83b8a:	fa26 f909 	lsr.w	r9, r6, r9
   83b8e:	4097      	lsls	r7, r2
   83b90:	0c28      	lsrs	r0, r5, #16
   83b92:	fbb1 f8f0 	udiv	r8, r1, r0
   83b96:	fb00 1118 	mls	r1, r0, r8, r1
   83b9a:	fa1f fc85 	uxth.w	ip, r5
   83b9e:	fb0c f308 	mul.w	r3, ip, r8
   83ba2:	ea49 0907 	orr.w	r9, r9, r7
   83ba6:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83baa:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83bae:	428b      	cmp	r3, r1
   83bb0:	fa06 f602 	lsl.w	r6, r6, r2
   83bb4:	d908      	bls.n	83bc8 <__divdi3+0x1a0>
   83bb6:	1949      	adds	r1, r1, r5
   83bb8:	f108 32ff 	add.w	r2, r8, #4294967295
   83bbc:	d27a      	bcs.n	83cb4 <__divdi3+0x28c>
   83bbe:	428b      	cmp	r3, r1
   83bc0:	d978      	bls.n	83cb4 <__divdi3+0x28c>
   83bc2:	f1a8 0802 	sub.w	r8, r8, #2
   83bc6:	4429      	add	r1, r5
   83bc8:	1ac9      	subs	r1, r1, r3
   83bca:	fbb1 f3f0 	udiv	r3, r1, r0
   83bce:	fb00 1713 	mls	r7, r0, r3, r1
   83bd2:	fb0c f203 	mul.w	r2, ip, r3
   83bd6:	fa1f f989 	uxth.w	r9, r9
   83bda:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83bde:	42ba      	cmp	r2, r7
   83be0:	d907      	bls.n	83bf2 <__divdi3+0x1ca>
   83be2:	197f      	adds	r7, r7, r5
   83be4:	f103 31ff 	add.w	r1, r3, #4294967295
   83be8:	d260      	bcs.n	83cac <__divdi3+0x284>
   83bea:	42ba      	cmp	r2, r7
   83bec:	d95e      	bls.n	83cac <__divdi3+0x284>
   83bee:	3b02      	subs	r3, #2
   83bf0:	442f      	add	r7, r5
   83bf2:	1abf      	subs	r7, r7, r2
   83bf4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83bf8:	e78c      	b.n	83b14 <__divdi3+0xec>
   83bfa:	f1c8 0220 	rsb	r2, r8, #32
   83bfe:	fa25 f102 	lsr.w	r1, r5, r2
   83c02:	fa03 fc08 	lsl.w	ip, r3, r8
   83c06:	fa27 f302 	lsr.w	r3, r7, r2
   83c0a:	fa20 f202 	lsr.w	r2, r0, r2
   83c0e:	fa07 f708 	lsl.w	r7, r7, r8
   83c12:	ea41 0c0c 	orr.w	ip, r1, ip
   83c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83c1a:	fbb3 f1f9 	udiv	r1, r3, r9
   83c1e:	fb09 3311 	mls	r3, r9, r1, r3
   83c22:	fa1f fa8c 	uxth.w	sl, ip
   83c26:	fb0a fb01 	mul.w	fp, sl, r1
   83c2a:	4317      	orrs	r7, r2
   83c2c:	0c3a      	lsrs	r2, r7, #16
   83c2e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83c32:	459b      	cmp	fp, r3
   83c34:	fa05 f008 	lsl.w	r0, r5, r8
   83c38:	d908      	bls.n	83c4c <__divdi3+0x224>
   83c3a:	eb13 030c 	adds.w	r3, r3, ip
   83c3e:	f101 32ff 	add.w	r2, r1, #4294967295
   83c42:	d235      	bcs.n	83cb0 <__divdi3+0x288>
   83c44:	459b      	cmp	fp, r3
   83c46:	d933      	bls.n	83cb0 <__divdi3+0x288>
   83c48:	3902      	subs	r1, #2
   83c4a:	4463      	add	r3, ip
   83c4c:	ebcb 0303 	rsb	r3, fp, r3
   83c50:	fbb3 f2f9 	udiv	r2, r3, r9
   83c54:	fb09 3312 	mls	r3, r9, r2, r3
   83c58:	fb0a fa02 	mul.w	sl, sl, r2
   83c5c:	b2bf      	uxth	r7, r7
   83c5e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83c62:	45ba      	cmp	sl, r7
   83c64:	d908      	bls.n	83c78 <__divdi3+0x250>
   83c66:	eb17 070c 	adds.w	r7, r7, ip
   83c6a:	f102 33ff 	add.w	r3, r2, #4294967295
   83c6e:	d21b      	bcs.n	83ca8 <__divdi3+0x280>
   83c70:	45ba      	cmp	sl, r7
   83c72:	d919      	bls.n	83ca8 <__divdi3+0x280>
   83c74:	3a02      	subs	r2, #2
   83c76:	4467      	add	r7, ip
   83c78:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83c7c:	fba5 0100 	umull	r0, r1, r5, r0
   83c80:	ebca 0707 	rsb	r7, sl, r7
   83c84:	428f      	cmp	r7, r1
   83c86:	f04f 0300 	mov.w	r3, #0
   83c8a:	d30a      	bcc.n	83ca2 <__divdi3+0x27a>
   83c8c:	d005      	beq.n	83c9a <__divdi3+0x272>
   83c8e:	462a      	mov	r2, r5
   83c90:	e71c      	b.n	83acc <__divdi3+0xa4>
   83c92:	4662      	mov	r2, ip
   83c94:	e6fd      	b.n	83a92 <__divdi3+0x6a>
   83c96:	463b      	mov	r3, r7
   83c98:	e710      	b.n	83abc <__divdi3+0x94>
   83c9a:	fa06 f608 	lsl.w	r6, r6, r8
   83c9e:	4286      	cmp	r6, r0
   83ca0:	d2f5      	bcs.n	83c8e <__divdi3+0x266>
   83ca2:	1e6a      	subs	r2, r5, #1
   83ca4:	2300      	movs	r3, #0
   83ca6:	e711      	b.n	83acc <__divdi3+0xa4>
   83ca8:	461a      	mov	r2, r3
   83caa:	e7e5      	b.n	83c78 <__divdi3+0x250>
   83cac:	460b      	mov	r3, r1
   83cae:	e7a0      	b.n	83bf2 <__divdi3+0x1ca>
   83cb0:	4611      	mov	r1, r2
   83cb2:	e7cb      	b.n	83c4c <__divdi3+0x224>
   83cb4:	4690      	mov	r8, r2
   83cb6:	e787      	b.n	83bc8 <__divdi3+0x1a0>
   83cb8:	4643      	mov	r3, r8
   83cba:	4642      	mov	r2, r8
   83cbc:	e706      	b.n	83acc <__divdi3+0xa4>
   83cbe:	3a02      	subs	r2, #2
   83cc0:	e750      	b.n	83b64 <__divdi3+0x13c>
   83cc2:	3902      	subs	r1, #2
   83cc4:	442f      	add	r7, r5
   83cc6:	e739      	b.n	83b3c <__divdi3+0x114>

00083cc8 <__udivdi3>:
   83cc8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ccc:	4614      	mov	r4, r2
   83cce:	4605      	mov	r5, r0
   83cd0:	460e      	mov	r6, r1
   83cd2:	2b00      	cmp	r3, #0
   83cd4:	d143      	bne.n	83d5e <__udivdi3+0x96>
   83cd6:	428a      	cmp	r2, r1
   83cd8:	d953      	bls.n	83d82 <__udivdi3+0xba>
   83cda:	fab2 f782 	clz	r7, r2
   83cde:	b157      	cbz	r7, 83cf6 <__udivdi3+0x2e>
   83ce0:	f1c7 0620 	rsb	r6, r7, #32
   83ce4:	fa20 f606 	lsr.w	r6, r0, r6
   83ce8:	fa01 f307 	lsl.w	r3, r1, r7
   83cec:	fa02 f407 	lsl.w	r4, r2, r7
   83cf0:	fa00 f507 	lsl.w	r5, r0, r7
   83cf4:	431e      	orrs	r6, r3
   83cf6:	0c21      	lsrs	r1, r4, #16
   83cf8:	fbb6 f2f1 	udiv	r2, r6, r1
   83cfc:	fb01 6612 	mls	r6, r1, r2, r6
   83d00:	b2a0      	uxth	r0, r4
   83d02:	fb00 f302 	mul.w	r3, r0, r2
   83d06:	0c2f      	lsrs	r7, r5, #16
   83d08:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83d0c:	42b3      	cmp	r3, r6
   83d0e:	d909      	bls.n	83d24 <__udivdi3+0x5c>
   83d10:	1936      	adds	r6, r6, r4
   83d12:	f102 37ff 	add.w	r7, r2, #4294967295
   83d16:	f080 80fd 	bcs.w	83f14 <__udivdi3+0x24c>
   83d1a:	42b3      	cmp	r3, r6
   83d1c:	f240 80fa 	bls.w	83f14 <__udivdi3+0x24c>
   83d20:	3a02      	subs	r2, #2
   83d22:	4426      	add	r6, r4
   83d24:	1af6      	subs	r6, r6, r3
   83d26:	fbb6 f3f1 	udiv	r3, r6, r1
   83d2a:	fb01 6113 	mls	r1, r1, r3, r6
   83d2e:	fb00 f003 	mul.w	r0, r0, r3
   83d32:	b2ad      	uxth	r5, r5
   83d34:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83d38:	4288      	cmp	r0, r1
   83d3a:	d908      	bls.n	83d4e <__udivdi3+0x86>
   83d3c:	1909      	adds	r1, r1, r4
   83d3e:	f103 36ff 	add.w	r6, r3, #4294967295
   83d42:	f080 80e9 	bcs.w	83f18 <__udivdi3+0x250>
   83d46:	4288      	cmp	r0, r1
   83d48:	f240 80e6 	bls.w	83f18 <__udivdi3+0x250>
   83d4c:	3b02      	subs	r3, #2
   83d4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83d52:	2300      	movs	r3, #0
   83d54:	4610      	mov	r0, r2
   83d56:	4619      	mov	r1, r3
   83d58:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d5c:	4770      	bx	lr
   83d5e:	428b      	cmp	r3, r1
   83d60:	d84c      	bhi.n	83dfc <__udivdi3+0x134>
   83d62:	fab3 f683 	clz	r6, r3
   83d66:	2e00      	cmp	r6, #0
   83d68:	d14f      	bne.n	83e0a <__udivdi3+0x142>
   83d6a:	428b      	cmp	r3, r1
   83d6c:	d302      	bcc.n	83d74 <__udivdi3+0xac>
   83d6e:	4282      	cmp	r2, r0
   83d70:	f200 80dd 	bhi.w	83f2e <__udivdi3+0x266>
   83d74:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d78:	2300      	movs	r3, #0
   83d7a:	2201      	movs	r2, #1
   83d7c:	4610      	mov	r0, r2
   83d7e:	4619      	mov	r1, r3
   83d80:	4770      	bx	lr
   83d82:	b912      	cbnz	r2, 83d8a <__udivdi3+0xc2>
   83d84:	2401      	movs	r4, #1
   83d86:	fbb4 f4f2 	udiv	r4, r4, r2
   83d8a:	fab4 f284 	clz	r2, r4
   83d8e:	2a00      	cmp	r2, #0
   83d90:	f040 8082 	bne.w	83e98 <__udivdi3+0x1d0>
   83d94:	1b09      	subs	r1, r1, r4
   83d96:	0c26      	lsrs	r6, r4, #16
   83d98:	b2a7      	uxth	r7, r4
   83d9a:	2301      	movs	r3, #1
   83d9c:	fbb1 f0f6 	udiv	r0, r1, r6
   83da0:	fb06 1110 	mls	r1, r6, r0, r1
   83da4:	fb07 f200 	mul.w	r2, r7, r0
   83da8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83dac:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83db0:	428a      	cmp	r2, r1
   83db2:	d907      	bls.n	83dc4 <__udivdi3+0xfc>
   83db4:	1909      	adds	r1, r1, r4
   83db6:	f100 3cff 	add.w	ip, r0, #4294967295
   83dba:	d202      	bcs.n	83dc2 <__udivdi3+0xfa>
   83dbc:	428a      	cmp	r2, r1
   83dbe:	f200 80c8 	bhi.w	83f52 <__udivdi3+0x28a>
   83dc2:	4660      	mov	r0, ip
   83dc4:	1a89      	subs	r1, r1, r2
   83dc6:	fbb1 f2f6 	udiv	r2, r1, r6
   83dca:	fb06 1112 	mls	r1, r6, r2, r1
   83dce:	fb07 f702 	mul.w	r7, r7, r2
   83dd2:	b2ad      	uxth	r5, r5
   83dd4:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83dd8:	42af      	cmp	r7, r5
   83dda:	d908      	bls.n	83dee <__udivdi3+0x126>
   83ddc:	192c      	adds	r4, r5, r4
   83dde:	f102 31ff 	add.w	r1, r2, #4294967295
   83de2:	f080 809b 	bcs.w	83f1c <__udivdi3+0x254>
   83de6:	42a7      	cmp	r7, r4
   83de8:	f240 8098 	bls.w	83f1c <__udivdi3+0x254>
   83dec:	3a02      	subs	r2, #2
   83dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83df2:	4610      	mov	r0, r2
   83df4:	4619      	mov	r1, r3
   83df6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83dfa:	4770      	bx	lr
   83dfc:	2300      	movs	r3, #0
   83dfe:	461a      	mov	r2, r3
   83e00:	4610      	mov	r0, r2
   83e02:	4619      	mov	r1, r3
   83e04:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83e08:	4770      	bx	lr
   83e0a:	f1c6 0520 	rsb	r5, r6, #32
   83e0e:	fa22 f705 	lsr.w	r7, r2, r5
   83e12:	fa03 f406 	lsl.w	r4, r3, r6
   83e16:	fa21 f305 	lsr.w	r3, r1, r5
   83e1a:	fa01 fb06 	lsl.w	fp, r1, r6
   83e1e:	fa20 f505 	lsr.w	r5, r0, r5
   83e22:	433c      	orrs	r4, r7
   83e24:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83e28:	fbb3 fcf8 	udiv	ip, r3, r8
   83e2c:	fb08 331c 	mls	r3, r8, ip, r3
   83e30:	fa1f f984 	uxth.w	r9, r4
   83e34:	fb09 fa0c 	mul.w	sl, r9, ip
   83e38:	ea45 0b0b 	orr.w	fp, r5, fp
   83e3c:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83e40:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83e44:	459a      	cmp	sl, r3
   83e46:	fa02 f206 	lsl.w	r2, r2, r6
   83e4a:	d904      	bls.n	83e56 <__udivdi3+0x18e>
   83e4c:	191b      	adds	r3, r3, r4
   83e4e:	f10c 35ff 	add.w	r5, ip, #4294967295
   83e52:	d36f      	bcc.n	83f34 <__udivdi3+0x26c>
   83e54:	46ac      	mov	ip, r5
   83e56:	ebca 0303 	rsb	r3, sl, r3
   83e5a:	fbb3 f5f8 	udiv	r5, r3, r8
   83e5e:	fb08 3315 	mls	r3, r8, r5, r3
   83e62:	fb09 f905 	mul.w	r9, r9, r5
   83e66:	fa1f fb8b 	uxth.w	fp, fp
   83e6a:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83e6e:	45b9      	cmp	r9, r7
   83e70:	d904      	bls.n	83e7c <__udivdi3+0x1b4>
   83e72:	193f      	adds	r7, r7, r4
   83e74:	f105 33ff 	add.w	r3, r5, #4294967295
   83e78:	d362      	bcc.n	83f40 <__udivdi3+0x278>
   83e7a:	461d      	mov	r5, r3
   83e7c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83e80:	fbac 2302 	umull	r2, r3, ip, r2
   83e84:	ebc9 0707 	rsb	r7, r9, r7
   83e88:	429f      	cmp	r7, r3
   83e8a:	f04f 0500 	mov.w	r5, #0
   83e8e:	d34a      	bcc.n	83f26 <__udivdi3+0x25e>
   83e90:	d046      	beq.n	83f20 <__udivdi3+0x258>
   83e92:	4662      	mov	r2, ip
   83e94:	462b      	mov	r3, r5
   83e96:	e75d      	b.n	83d54 <__udivdi3+0x8c>
   83e98:	4094      	lsls	r4, r2
   83e9a:	f1c2 0920 	rsb	r9, r2, #32
   83e9e:	fa21 fc09 	lsr.w	ip, r1, r9
   83ea2:	4091      	lsls	r1, r2
   83ea4:	fa20 f909 	lsr.w	r9, r0, r9
   83ea8:	0c26      	lsrs	r6, r4, #16
   83eaa:	fbbc f8f6 	udiv	r8, ip, r6
   83eae:	fb06 cc18 	mls	ip, r6, r8, ip
   83eb2:	b2a7      	uxth	r7, r4
   83eb4:	fb07 f308 	mul.w	r3, r7, r8
   83eb8:	ea49 0901 	orr.w	r9, r9, r1
   83ebc:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83ec0:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83ec4:	4563      	cmp	r3, ip
   83ec6:	fa00 f502 	lsl.w	r5, r0, r2
   83eca:	d909      	bls.n	83ee0 <__udivdi3+0x218>
   83ecc:	eb1c 0c04 	adds.w	ip, ip, r4
   83ed0:	f108 32ff 	add.w	r2, r8, #4294967295
   83ed4:	d23b      	bcs.n	83f4e <__udivdi3+0x286>
   83ed6:	4563      	cmp	r3, ip
   83ed8:	d939      	bls.n	83f4e <__udivdi3+0x286>
   83eda:	f1a8 0802 	sub.w	r8, r8, #2
   83ede:	44a4      	add	ip, r4
   83ee0:	ebc3 0c0c 	rsb	ip, r3, ip
   83ee4:	fbbc f3f6 	udiv	r3, ip, r6
   83ee8:	fb06 c113 	mls	r1, r6, r3, ip
   83eec:	fb07 f203 	mul.w	r2, r7, r3
   83ef0:	fa1f f989 	uxth.w	r9, r9
   83ef4:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83ef8:	428a      	cmp	r2, r1
   83efa:	d907      	bls.n	83f0c <__udivdi3+0x244>
   83efc:	1909      	adds	r1, r1, r4
   83efe:	f103 30ff 	add.w	r0, r3, #4294967295
   83f02:	d222      	bcs.n	83f4a <__udivdi3+0x282>
   83f04:	428a      	cmp	r2, r1
   83f06:	d920      	bls.n	83f4a <__udivdi3+0x282>
   83f08:	3b02      	subs	r3, #2
   83f0a:	4421      	add	r1, r4
   83f0c:	1a89      	subs	r1, r1, r2
   83f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83f12:	e743      	b.n	83d9c <__udivdi3+0xd4>
   83f14:	463a      	mov	r2, r7
   83f16:	e705      	b.n	83d24 <__udivdi3+0x5c>
   83f18:	4633      	mov	r3, r6
   83f1a:	e718      	b.n	83d4e <__udivdi3+0x86>
   83f1c:	460a      	mov	r2, r1
   83f1e:	e766      	b.n	83dee <__udivdi3+0x126>
   83f20:	40b0      	lsls	r0, r6
   83f22:	4290      	cmp	r0, r2
   83f24:	d2b5      	bcs.n	83e92 <__udivdi3+0x1ca>
   83f26:	f10c 32ff 	add.w	r2, ip, #4294967295
   83f2a:	2300      	movs	r3, #0
   83f2c:	e712      	b.n	83d54 <__udivdi3+0x8c>
   83f2e:	4633      	mov	r3, r6
   83f30:	4632      	mov	r2, r6
   83f32:	e70f      	b.n	83d54 <__udivdi3+0x8c>
   83f34:	459a      	cmp	sl, r3
   83f36:	d98d      	bls.n	83e54 <__udivdi3+0x18c>
   83f38:	f1ac 0c02 	sub.w	ip, ip, #2
   83f3c:	4423      	add	r3, r4
   83f3e:	e78a      	b.n	83e56 <__udivdi3+0x18e>
   83f40:	45b9      	cmp	r9, r7
   83f42:	d99a      	bls.n	83e7a <__udivdi3+0x1b2>
   83f44:	3d02      	subs	r5, #2
   83f46:	4427      	add	r7, r4
   83f48:	e798      	b.n	83e7c <__udivdi3+0x1b4>
   83f4a:	4603      	mov	r3, r0
   83f4c:	e7de      	b.n	83f0c <__udivdi3+0x244>
   83f4e:	4690      	mov	r8, r2
   83f50:	e7c6      	b.n	83ee0 <__udivdi3+0x218>
   83f52:	3802      	subs	r0, #2
   83f54:	4421      	add	r1, r4
   83f56:	e735      	b.n	83dc4 <__udivdi3+0xfc>
   83f58:	72617453 	.word	0x72617453
   83f5c:	00726174 	.word	0x00726174
   83f60:	00000001 	.word	0x00000001
   83f64:	00000002 	.word	0x00000002
   83f68:	00000004 	.word	0x00000004
   83f6c:	00000008 	.word	0x00000008
   83f70:	00000010 	.word	0x00000010
   83f74:	00000020 	.word	0x00000020
   83f78:	00000040 	.word	0x00000040
   83f7c:	00000080 	.word	0x00000080
   83f80:	00000100 	.word	0x00000100
   83f84:	00000200 	.word	0x00000200
   83f88:	00000400 	.word	0x00000400
   83f8c:	00000043 	.word	0x00000043

00083f90 <_global_impure_ptr>:
   83f90:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   83fa0:	46454443 00000000 33323130 37363534     CDEF....01234567
   83fb0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83fc0:	0000296c                                l)..

00083fc4 <zeroes.6721>:
   83fc4:	30303030 30303030 30303030 30303030     0000000000000000

00083fd4 <blanks.6720>:
   83fd4:	20202020 20202020 20202020 20202020                     

00083fe4 <_init>:
   83fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83fe6:	bf00      	nop
   83fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83fea:	bc08      	pop	{r3}
   83fec:	469e      	mov	lr, r3
   83fee:	4770      	bx	lr

00083ff0 <__init_array_start>:
   83ff0:	0008204d 	.word	0x0008204d

00083ff4 <__frame_dummy_init_array_entry>:
   83ff4:	00080119                                ....

00083ff8 <_fini>:
   83ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83ffa:	bf00      	nop
   83ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83ffe:	bc08      	pop	{r3}
   84000:	469e      	mov	lr, r3
   84002:	4770      	bx	lr

00084004 <__fini_array_start>:
   84004:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <g_interrupt_enabled>:
20070138:	00000001                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00083f8c 00000000 00000000 00000000     .?..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	0008375d                                ]7..
