
PwmTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000345c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000984  20070000  0008345c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000001e4  20070984  00083de0  00010984  2**2
                  ALLOC
  3 .stack        00002000  20070b68  00083fc4  00010984  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010984  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000109ad  2**0
                  CONTENTS, READONLY
  6 .debug_info   00010f4f  00000000  00000000  00010a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b6b  00000000  00000000  00021957  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005570  00000000  00000000  000244c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b98  00000000  00000000  00029a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a50  00000000  00000000  0002a5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000190a7  00000000  00000000  0002b01a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011b15  00000000  00000000  000440c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062248  00000000  00000000  00055bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b80  00000000  00000000  000b7e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b68 	.word	0x20072b68
   80004:	00081481 	.word	0x00081481
   80008:	0008147d 	.word	0x0008147d
   8000c:	0008147d 	.word	0x0008147d
   80010:	0008147d 	.word	0x0008147d
   80014:	0008147d 	.word	0x0008147d
   80018:	0008147d 	.word	0x0008147d
	...
   8002c:	0008147d 	.word	0x0008147d
   80030:	0008147d 	.word	0x0008147d
   80034:	00000000 	.word	0x00000000
   80038:	0008147d 	.word	0x0008147d
   8003c:	0008147d 	.word	0x0008147d
   80040:	0008147d 	.word	0x0008147d
   80044:	0008147d 	.word	0x0008147d
   80048:	0008147d 	.word	0x0008147d
   8004c:	0008147d 	.word	0x0008147d
   80050:	0008147d 	.word	0x0008147d
   80054:	0008147d 	.word	0x0008147d
   80058:	0008147d 	.word	0x0008147d
   8005c:	0008147d 	.word	0x0008147d
   80060:	0008147d 	.word	0x0008147d
   80064:	0008147d 	.word	0x0008147d
   80068:	00000000 	.word	0x00000000
   8006c:	000811fd 	.word	0x000811fd
   80070:	00081211 	.word	0x00081211
   80074:	00081225 	.word	0x00081225
   80078:	00081239 	.word	0x00081239
	...
   80084:	00080545 	.word	0x00080545
   80088:	00080719 	.word	0x00080719
   8008c:	0008147d 	.word	0x0008147d
   80090:	0008147d 	.word	0x0008147d
   80094:	0008147d 	.word	0x0008147d
   80098:	0008147d 	.word	0x0008147d
   8009c:	0008147d 	.word	0x0008147d
   800a0:	0008147d 	.word	0x0008147d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008147d 	.word	0x0008147d
   800ac:	0008147d 	.word	0x0008147d
   800b0:	0008147d 	.word	0x0008147d
   800b4:	0008147d 	.word	0x0008147d
   800b8:	0008147d 	.word	0x0008147d
   800bc:	0008147d 	.word	0x0008147d
   800c0:	0008147d 	.word	0x0008147d
   800c4:	0008147d 	.word	0x0008147d
   800c8:	0008147d 	.word	0x0008147d
   800cc:	0008147d 	.word	0x0008147d
   800d0:	0008147d 	.word	0x0008147d
   800d4:	0008147d 	.word	0x0008147d
   800d8:	0008147d 	.word	0x0008147d
   800dc:	0008147d 	.word	0x0008147d
   800e0:	0008147d 	.word	0x0008147d
   800e4:	0008147d 	.word	0x0008147d
   800e8:	0008147d 	.word	0x0008147d
   800ec:	0008147d 	.word	0x0008147d
   800f0:	0008147d 	.word	0x0008147d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070984 	.word	0x20070984
   80110:	00000000 	.word	0x00000000
   80114:	0008345c 	.word	0x0008345c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008345c 	.word	0x0008345c
   8013c:	20070988 	.word	0x20070988
   80140:	0008345c 	.word	0x0008345c
   80144:	00000000 	.word	0x00000000

00080148 <main>:
	double objectD[2];
};


int main()
{
   80148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8014c:	b089      	sub	sp, #36	; 0x24
	coord.objectC[1] = 350;	
	
	coord.objectD[0] = 434;
	coord.objectD[1] = 36;
	/* Initialize the SAM system */
	SystemInit();
   8014e:	4b70      	ldr	r3, [pc, #448]	; (80310 <main+0x1c8>)
   80150:	4798      	blx	r3
	/*Initialize the board configurations*/
	board_init();
   80152:	4b70      	ldr	r3, [pc, #448]	; (80314 <main+0x1cc>)
   80154:	4798      	blx	r3
	configureConsole();
   80156:	4b70      	ldr	r3, [pc, #448]	; (80318 <main+0x1d0>)
   80158:	4798      	blx	r3
	configInterrupts();
   8015a:	4b70      	ldr	r3, [pc, #448]	; (8031c <main+0x1d4>)
   8015c:	4798      	blx	r3
	PWM_init();
   8015e:	4b70      	ldr	r3, [pc, #448]	; (80320 <main+0x1d8>)
   80160:	4798      	blx	r3
	delay_s(3);
   80162:	4870      	ldr	r0, [pc, #448]	; (80324 <main+0x1dc>)
   80164:	4e70      	ldr	r6, [pc, #448]	; (80328 <main+0x1e0>)
   80166:	47b0      	blx	r6
	rotation(calcluteRotationAngle(coord.lastX,coord.lastY,coord.presentX,coord.presentY,coord.objectA[0],coord.objectA[1]),130);
   80168:	2400      	movs	r4, #0
   8016a:	2500      	movs	r5, #0
   8016c:	e9cd 4500 	strd	r4, r5, [sp]
   80170:	e9cd 4502 	strd	r4, r5, [sp, #8]
   80174:	a35e      	add	r3, pc, #376	; (adr r3, 802f0 <main+0x1a8>)
   80176:	e9d3 2300 	ldrd	r2, r3, [r3]
   8017a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   8017e:	2200      	movs	r2, #0
   80180:	4b6a      	ldr	r3, [pc, #424]	; (8032c <main+0x1e4>)
   80182:	e9cd 2306 	strd	r2, r3, [sp, #24]
   80186:	4620      	mov	r0, r4
   80188:	4629      	mov	r1, r5
   8018a:	2200      	movs	r2, #0
   8018c:	4b68      	ldr	r3, [pc, #416]	; (80330 <main+0x1e8>)
   8018e:	4f69      	ldr	r7, [pc, #420]	; (80334 <main+0x1ec>)
   80190:	47b8      	blx	r7
   80192:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8034c <main+0x204>
   80196:	47c0      	blx	r8
   80198:	2182      	movs	r1, #130	; 0x82
   8019a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 80350 <main+0x208>
   8019e:	47d0      	blx	sl
	moveTo(calculateDistance(coord.presentX,coord.presentY,coord.objectA[0],coord.objectA[1]),1);
   801a0:	a353      	add	r3, pc, #332	; (adr r3, 802f0 <main+0x1a8>)
   801a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   801a6:	e9cd 2300 	strd	r2, r3, [sp]
   801aa:	2200      	movs	r2, #0
   801ac:	4b5f      	ldr	r3, [pc, #380]	; (8032c <main+0x1e4>)
   801ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
   801b2:	4620      	mov	r0, r4
   801b4:	4629      	mov	r1, r5
   801b6:	4622      	mov	r2, r4
   801b8:	462b      	mov	r3, r5
   801ba:	f8df b198 	ldr.w	fp, [pc, #408]	; 80354 <main+0x20c>
   801be:	47d8      	blx	fp
   801c0:	47c0      	blx	r8
   801c2:	2101      	movs	r1, #1
   801c4:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80358 <main+0x210>
   801c8:	47c8      	blx	r9
	delay_s(5);
   801ca:	4f5b      	ldr	r7, [pc, #364]	; (80338 <main+0x1f0>)
   801cc:	4638      	mov	r0, r7
   801ce:	47b0      	blx	r6
	coord.lastX = coord.presentX;
	coord.lastY = coord.presentY;
	coord.presentX = coord.objectA[0];
	coord.presentY = coord.objectA[1];
	delay_s(1);
   801d0:	485a      	ldr	r0, [pc, #360]	; (8033c <main+0x1f4>)
   801d2:	47b0      	blx	r6
	rotation(calcluteRotationAngle(coord.lastX,coord.lastY,coord.presentX,coord.presentY,coord.objectB[0],coord.objectB[1]),130);
   801d4:	a346      	add	r3, pc, #280	; (adr r3, 802f0 <main+0x1a8>)
   801d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   801da:	e9cd 2300 	strd	r2, r3, [sp]
   801de:	2200      	movs	r2, #0
   801e0:	4b52      	ldr	r3, [pc, #328]	; (8032c <main+0x1e4>)
   801e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   801e6:	2200      	movs	r2, #0
   801e8:	4b55      	ldr	r3, [pc, #340]	; (80340 <main+0x1f8>)
   801ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
   801ee:	a342      	add	r3, pc, #264	; (adr r3, 802f8 <main+0x1b0>)
   801f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   801f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   801f8:	4620      	mov	r0, r4
   801fa:	4629      	mov	r1, r5
   801fc:	4622      	mov	r2, r4
   801fe:	462b      	mov	r3, r5
   80200:	4c4c      	ldr	r4, [pc, #304]	; (80334 <main+0x1ec>)
   80202:	47a0      	blx	r4
   80204:	47c0      	blx	r8
   80206:	2182      	movs	r1, #130	; 0x82
   80208:	47d0      	blx	sl
	moveTo(calculateDistance(coord.presentX,coord.presentY,coord.objectB[0],coord.objectB[1]),1);
   8020a:	2200      	movs	r2, #0
   8020c:	4b4c      	ldr	r3, [pc, #304]	; (80340 <main+0x1f8>)
   8020e:	e9cd 2300 	strd	r2, r3, [sp]
   80212:	a339      	add	r3, pc, #228	; (adr r3, 802f8 <main+0x1b0>)
   80214:	e9d3 2300 	ldrd	r2, r3, [r3]
   80218:	e9cd 2302 	strd	r2, r3, [sp, #8]
   8021c:	a134      	add	r1, pc, #208	; (adr r1, 802f0 <main+0x1a8>)
   8021e:	e9d1 0100 	ldrd	r0, r1, [r1]
   80222:	2200      	movs	r2, #0
   80224:	4b41      	ldr	r3, [pc, #260]	; (8032c <main+0x1e4>)
   80226:	47d8      	blx	fp
   80228:	47c0      	blx	r8
   8022a:	2101      	movs	r1, #1
   8022c:	47c8      	blx	r9
	delay_s(5);
   8022e:	4638      	mov	r0, r7
   80230:	47b0      	blx	r6
	coord.lastX = coord.presentX;
	coord.lastY = coord.presentY;
	coord.presentX = coord.objectB[0];
	coord.presentY = coord.objectB[1];
	delay_s(1);
   80232:	4842      	ldr	r0, [pc, #264]	; (8033c <main+0x1f4>)
   80234:	47b0      	blx	r6
	rotation(calcluteRotationAngle(coord.lastX,coord.lastY,coord.presentX,coord.presentY,coord.objectC[0],coord.objectC[1]),130);
   80236:	2200      	movs	r2, #0
   80238:	4b41      	ldr	r3, [pc, #260]	; (80340 <main+0x1f8>)
   8023a:	e9cd 2300 	strd	r2, r3, [sp]
   8023e:	a32e      	add	r3, pc, #184	; (adr r3, 802f8 <main+0x1b0>)
   80240:	e9d3 2300 	ldrd	r2, r3, [r3]
   80244:	e9cd 2302 	strd	r2, r3, [sp, #8]
   80248:	2200      	movs	r2, #0
   8024a:	4b3e      	ldr	r3, [pc, #248]	; (80344 <main+0x1fc>)
   8024c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   80250:	a52b      	add	r5, pc, #172	; (adr r5, 80300 <main+0x1b8>)
   80252:	e9d5 4500 	ldrd	r4, r5, [r5]
   80256:	e9cd 4506 	strd	r4, r5, [sp, #24]
   8025a:	a125      	add	r1, pc, #148	; (adr r1, 802f0 <main+0x1a8>)
   8025c:	e9d1 0100 	ldrd	r0, r1, [r1]
   80260:	2200      	movs	r2, #0
   80262:	4b32      	ldr	r3, [pc, #200]	; (8032c <main+0x1e4>)
   80264:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 80334 <main+0x1ec>
   80268:	47e0      	blx	ip
   8026a:	47c0      	blx	r8
   8026c:	2182      	movs	r1, #130	; 0x82
   8026e:	47d0      	blx	sl
	moveTo(calculateDistance(coord.presentX,coord.presentY,coord.objectC[0],coord.objectC[1]),1);
   80270:	2200      	movs	r2, #0
   80272:	4b34      	ldr	r3, [pc, #208]	; (80344 <main+0x1fc>)
   80274:	e9cd 2300 	strd	r2, r3, [sp]
   80278:	e9cd 4502 	strd	r4, r5, [sp, #8]
   8027c:	2000      	movs	r0, #0
   8027e:	4930      	ldr	r1, [pc, #192]	; (80340 <main+0x1f8>)
   80280:	a31d      	add	r3, pc, #116	; (adr r3, 802f8 <main+0x1b0>)
   80282:	e9d3 2300 	ldrd	r2, r3, [r3]
   80286:	47d8      	blx	fp
   80288:	47c0      	blx	r8
   8028a:	2101      	movs	r1, #1
   8028c:	47c8      	blx	r9
	delay_s(5);
   8028e:	4638      	mov	r0, r7
   80290:	47b0      	blx	r6
	coord.lastX = coord.presentX;
	coord.lastY = coord.presentY;
coord.presentX = coord.objectC[0];
coord.presentY = coord.objectC[1];
	rotation(calcluteRotationAngle(coord.lastX,coord.lastY,coord.presentX,coord.presentY,coord.objectD[0],coord.objectD[1]),130);
   80292:	2200      	movs	r2, #0
   80294:	4b2b      	ldr	r3, [pc, #172]	; (80344 <main+0x1fc>)
   80296:	e9cd 2300 	strd	r2, r3, [sp]
   8029a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   8029e:	a71a      	add	r7, pc, #104	; (adr r7, 80308 <main+0x1c0>)
   802a0:	e9d7 6700 	ldrd	r6, r7, [r7]
   802a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   802a8:	2200      	movs	r2, #0
   802aa:	4b27      	ldr	r3, [pc, #156]	; (80348 <main+0x200>)
   802ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
   802b0:	2000      	movs	r0, #0
   802b2:	4923      	ldr	r1, [pc, #140]	; (80340 <main+0x1f8>)
   802b4:	a310      	add	r3, pc, #64	; (adr r3, 802f8 <main+0x1b0>)
   802b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   802ba:	f8df c078 	ldr.w	ip, [pc, #120]	; 80334 <main+0x1ec>
   802be:	47e0      	blx	ip
   802c0:	47c0      	blx	r8
   802c2:	2182      	movs	r1, #130	; 0x82
   802c4:	47d0      	blx	sl
	moveTo(calculateDistance(coord.presentX,coord.presentY,coord.objectD[0],coord.objectD[1]),1);
   802c6:	e9cd 6700 	strd	r6, r7, [sp]
   802ca:	2200      	movs	r2, #0
   802cc:	4b1e      	ldr	r3, [pc, #120]	; (80348 <main+0x200>)
   802ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
   802d2:	2000      	movs	r0, #0
   802d4:	491b      	ldr	r1, [pc, #108]	; (80344 <main+0x1fc>)
   802d6:	4622      	mov	r2, r4
   802d8:	462b      	mov	r3, r5
   802da:	47d8      	blx	fp
   802dc:	47c0      	blx	r8
   802de:	2101      	movs	r1, #1
   802e0:	47c8      	blx	r9
	


}
   802e2:	2000      	movs	r0, #0
   802e4:	b009      	add	sp, #36	; 0x24
   802e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   802ea:	bf00      	nop
   802ec:	f3af 8000 	nop.w
   802f0:	00000000 	.word	0x00000000
   802f4:	40612000 	.word	0x40612000
   802f8:	00000000 	.word	0x00000000
   802fc:	4076b000 	.word	0x4076b000
   80300:	00000000 	.word	0x00000000
   80304:	4075e000 	.word	0x4075e000
   80308:	00000000 	.word	0x00000000
   8030c:	407b2000 	.word	0x407b2000
   80310:	2007000d 	.word	0x2007000d
   80314:	00080f29 	.word	0x00080f29
   80318:	000805b1 	.word	0x000805b1
   8031c:	00080671 	.word	0x00080671
   80320:	00080e6d 	.word	0x00080e6d
   80324:	0112a880 	.word	0x0112a880
   80328:	20070001 	.word	0x20070001
   8032c:	40690000 	.word	0x40690000
   80330:	c0590000 	.word	0xc0590000
   80334:	000809e1 	.word	0x000809e1
   80338:	01c9c380 	.word	0x01c9c380
   8033c:	005b8d80 	.word	0x005b8d80
   80340:	404c0000 	.word	0x404c0000
   80344:	407c4000 	.word	0x407c4000
   80348:	40420000 	.word	0x40420000
   8034c:	000823e5 	.word	0x000823e5
   80350:	00080d31 	.word	0x00080d31
   80354:	00080761 	.word	0x00080761
   80358:	00080a89 	.word	0x00080a89
   8035c:	f3af 8000 	nop.w

00080360 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80364:	b083      	sub	sp, #12
   80366:	4605      	mov	r5, r0
	while (len) {
   80368:	4690      	mov	r8, r2
   8036a:	2a00      	cmp	r2, #0
   8036c:	d047      	beq.n	803fe <usart_serial_read_packet+0x9e>
   8036e:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80370:	4f25      	ldr	r7, [pc, #148]	; (80408 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80372:	4c26      	ldr	r4, [pc, #152]	; (8040c <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80374:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80420 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80378:	f8df b094 	ldr.w	fp, [pc, #148]	; 80410 <usart_serial_read_packet+0xb0>
   8037c:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80380:	2300      	movs	r3, #0
   80382:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80384:	4b22      	ldr	r3, [pc, #136]	; (80410 <usart_serial_read_packet+0xb0>)
   80386:	429d      	cmp	r5, r3
   80388:	d106      	bne.n	80398 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   8038a:	4658      	mov	r0, fp
   8038c:	4649      	mov	r1, r9
   8038e:	4b21      	ldr	r3, [pc, #132]	; (80414 <usart_serial_read_packet+0xb4>)
   80390:	4798      	blx	r3
   80392:	2800      	cmp	r0, #0
   80394:	d1f9      	bne.n	8038a <usart_serial_read_packet+0x2a>
   80396:	e019      	b.n	803cc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80398:	4b1f      	ldr	r3, [pc, #124]	; (80418 <usart_serial_read_packet+0xb8>)
   8039a:	429d      	cmp	r5, r3
   8039c:	d109      	bne.n	803b2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8039e:	4699      	mov	r9, r3
   803a0:	4648      	mov	r0, r9
   803a2:	a901      	add	r1, sp, #4
   803a4:	47a0      	blx	r4
   803a6:	2800      	cmp	r0, #0
   803a8:	d1fa      	bne.n	803a0 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   803aa:	9b01      	ldr	r3, [sp, #4]
   803ac:	f806 3c01 	strb.w	r3, [r6, #-1]
   803b0:	e017      	b.n	803e2 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   803b2:	4b1a      	ldr	r3, [pc, #104]	; (8041c <usart_serial_read_packet+0xbc>)
   803b4:	429d      	cmp	r5, r3
   803b6:	d109      	bne.n	803cc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   803b8:	4699      	mov	r9, r3
   803ba:	4648      	mov	r0, r9
   803bc:	a901      	add	r1, sp, #4
   803be:	47a0      	blx	r4
   803c0:	2800      	cmp	r0, #0
   803c2:	d1fa      	bne.n	803ba <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   803c4:	9b01      	ldr	r3, [sp, #4]
   803c6:	f806 3c01 	strb.w	r3, [r6, #-1]
   803ca:	e014      	b.n	803f6 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   803cc:	4555      	cmp	r5, sl
   803ce:	d108      	bne.n	803e2 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   803d0:	4650      	mov	r0, sl
   803d2:	a901      	add	r1, sp, #4
   803d4:	47a0      	blx	r4
   803d6:	2800      	cmp	r0, #0
   803d8:	d1fa      	bne.n	803d0 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   803da:	9b01      	ldr	r3, [sp, #4]
   803dc:	f806 3c01 	strb.w	r3, [r6, #-1]
   803e0:	e009      	b.n	803f6 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   803e2:	42bd      	cmp	r5, r7
   803e4:	d107      	bne.n	803f6 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   803e6:	4638      	mov	r0, r7
   803e8:	a901      	add	r1, sp, #4
   803ea:	47a0      	blx	r4
   803ec:	2800      	cmp	r0, #0
   803ee:	d1fa      	bne.n	803e6 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   803f0:	9b01      	ldr	r3, [sp, #4]
   803f2:	f806 3c01 	strb.w	r3, [r6, #-1]
   803f6:	3601      	adds	r6, #1
   803f8:	f1b8 0801 	subs.w	r8, r8, #1
   803fc:	d1be      	bne.n	8037c <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   803fe:	2000      	movs	r0, #0
   80400:	b003      	add	sp, #12
   80402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80406:	bf00      	nop
   80408:	400a4000 	.word	0x400a4000
   8040c:	0008052d 	.word	0x0008052d
   80410:	400e0800 	.word	0x400e0800
   80414:	00080425 	.word	0x00080425
   80418:	40098000 	.word	0x40098000
   8041c:	4009c000 	.word	0x4009c000
   80420:	400a0000 	.word	0x400a0000

00080424 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80424:	6943      	ldr	r3, [r0, #20]
   80426:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8042a:	bf1d      	ittte	ne
   8042c:	6983      	ldrne	r3, [r0, #24]
   8042e:	700b      	strbne	r3, [r1, #0]
	return 0;
   80430:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80432:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80434:	4770      	bx	lr
   80436:	bf00      	nop

00080438 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   80438:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8043a:	010b      	lsls	r3, r1, #4
   8043c:	4293      	cmp	r3, r2
   8043e:	d90d      	bls.n	8045c <usart_set_async_baudrate+0x24>
   80440:	e01a      	b.n	80478 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   80442:	6841      	ldr	r1, [r0, #4]
   80444:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   80448:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   8044a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   8044e:	6203      	str	r3, [r0, #32]

	return 0;
   80450:	2000      	movs	r0, #0
   80452:	e020      	b.n	80496 <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   80454:	2001      	movs	r0, #1
   80456:	e01e      	b.n	80496 <usart_set_async_baudrate+0x5e>
   80458:	2001      	movs	r0, #1
   8045a:	e01c      	b.n	80496 <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8045c:	00d2      	lsls	r2, r2, #3
   8045e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   80462:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
   80466:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   80468:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8046c:	1e54      	subs	r4, r2, #1
   8046e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   80472:	428c      	cmp	r4, r1
   80474:	d9e9      	bls.n	8044a <usart_set_async_baudrate+0x12>
   80476:	e7ed      	b.n	80454 <usart_set_async_baudrate+0x1c>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80478:	00c9      	lsls	r1, r1, #3
   8047a:	00d3      	lsls	r3, r2, #3
   8047c:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   80480:	fbb3 f3f1 	udiv	r3, r3, r1
	cd = cd_fp >> 3;
   80484:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   80486:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8048a:	1e54      	subs	r4, r2, #1
   8048c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   80490:	428c      	cmp	r4, r1
   80492:	d9d6      	bls.n	80442 <usart_set_async_baudrate+0xa>
   80494:	e7e0      	b.n	80458 <usart_set_async_baudrate+0x20>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   80496:	f85d 4b04 	ldr.w	r4, [sp], #4
   8049a:	4770      	bx	lr

0008049c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   8049c:	4b08      	ldr	r3, [pc, #32]	; (804c0 <usart_reset+0x24>)
   8049e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   804a2:	2300      	movs	r3, #0
   804a4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   804a6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   804a8:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   804aa:	2388      	movs	r3, #136	; 0x88
   804ac:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   804ae:	2324      	movs	r3, #36	; 0x24
   804b0:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   804b2:	f44f 7380 	mov.w	r3, #256	; 0x100
   804b6:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   804b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   804bc:	6003      	str	r3, [r0, #0]
   804be:	4770      	bx	lr
   804c0:	55534100 	.word	0x55534100

000804c4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   804c4:	b570      	push	{r4, r5, r6, lr}
   804c6:	4605      	mov	r5, r0
   804c8:	460c      	mov	r4, r1
   804ca:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   804cc:	4b0f      	ldr	r3, [pc, #60]	; (8050c <usart_init_rs232+0x48>)
   804ce:	4798      	blx	r3

	ul_reg_val = 0;
   804d0:	2100      	movs	r1, #0
   804d2:	4b0f      	ldr	r3, [pc, #60]	; (80510 <usart_init_rs232+0x4c>)
   804d4:	6019      	str	r1, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   804d6:	b19c      	cbz	r4, 80500 <usart_init_rs232+0x3c>
   804d8:	4628      	mov	r0, r5
   804da:	6821      	ldr	r1, [r4, #0]
   804dc:	4632      	mov	r2, r6
   804de:	4b0d      	ldr	r3, [pc, #52]	; (80514 <usart_init_rs232+0x50>)
   804e0:	4798      	blx	r3
   804e2:	4603      	mov	r3, r0
   804e4:	b970      	cbnz	r0, 80504 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   804e6:	68a1      	ldr	r1, [r4, #8]
   804e8:	6862      	ldr	r2, [r4, #4]
   804ea:	430a      	orrs	r2, r1
   804ec:	6921      	ldr	r1, [r4, #16]
   804ee:	430a      	orrs	r2, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   804f0:	68e0      	ldr	r0, [r4, #12]
   804f2:	4302      	orrs	r2, r0
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   804f4:	4906      	ldr	r1, [pc, #24]	; (80510 <usart_init_rs232+0x4c>)
   804f6:	600a      	str	r2, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   804f8:	6869      	ldr	r1, [r5, #4]
   804fa:	430a      	orrs	r2, r1
   804fc:	606a      	str	r2, [r5, #4]

	return 0;
   804fe:	e002      	b.n	80506 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   80500:	2301      	movs	r3, #1
   80502:	e000      	b.n	80506 <usart_init_rs232+0x42>
   80504:	2301      	movs	r3, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   80506:	4618      	mov	r0, r3
   80508:	bd70      	pop	{r4, r5, r6, pc}
   8050a:	bf00      	nop
   8050c:	0008049d 	.word	0x0008049d
   80510:	200709a0 	.word	0x200709a0
   80514:	00080439 	.word	0x00080439

00080518 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   80518:	2340      	movs	r3, #64	; 0x40
   8051a:	6003      	str	r3, [r0, #0]
   8051c:	4770      	bx	lr
   8051e:	bf00      	nop

00080520 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
   80520:	2310      	movs	r3, #16
   80522:	6003      	str	r3, [r0, #0]
   80524:	4770      	bx	lr
   80526:	bf00      	nop

00080528 <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
   80528:	6081      	str	r1, [r0, #8]
   8052a:	4770      	bx	lr

0008052c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8052c:	6943      	ldr	r3, [r0, #20]
   8052e:	f013 0f01 	tst.w	r3, #1
   80532:	d005      	beq.n	80540 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80534:	6983      	ldr	r3, [r0, #24]
   80536:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8053a:	600b      	str	r3, [r1, #0]

	return 0;
   8053c:	2000      	movs	r0, #0
   8053e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80540:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80542:	4770      	bx	lr

00080544 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80544:	b500      	push	{lr}
   80546:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80548:	4813      	ldr	r0, [pc, #76]	; (80598 <USART0_Handler+0x54>)
   8054a:	f10d 0107 	add.w	r1, sp, #7
   8054e:	2201      	movs	r2, #1
   80550:	4b12      	ldr	r3, [pc, #72]	; (8059c <USART0_Handler+0x58>)
   80552:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80554:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80556:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8055a:	2200      	movs	r2, #0
   8055c:	4b10      	ldr	r3, [pc, #64]	; (805a0 <USART0_Handler+0x5c>)
   8055e:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   80560:	4b10      	ldr	r3, [pc, #64]	; (805a4 <USART0_Handler+0x60>)
   80562:	781a      	ldrb	r2, [r3, #0]
   80564:	3201      	adds	r2, #1
   80566:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80568:	4b0f      	ldr	r3, [pc, #60]	; (805a8 <USART0_Handler+0x64>)
   8056a:	781b      	ldrb	r3, [r3, #0]
   8056c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80570:	4a0e      	ldr	r2, [pc, #56]	; (805ac <USART0_Handler+0x68>)
   80572:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80574:	2b9b      	cmp	r3, #155	; 0x9b
   80576:	d103      	bne.n	80580 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80578:	2200      	movs	r2, #0
   8057a:	4b0b      	ldr	r3, [pc, #44]	; (805a8 <USART0_Handler+0x64>)
   8057c:	701a      	strb	r2, [r3, #0]
   8057e:	e002      	b.n	80586 <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   80580:	3301      	adds	r3, #1
   80582:	4a09      	ldr	r2, [pc, #36]	; (805a8 <USART0_Handler+0x64>)
   80584:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80586:	2201      	movs	r2, #1
   80588:	4b05      	ldr	r3, [pc, #20]	; (805a0 <USART0_Handler+0x5c>)
   8058a:	701a      	strb	r2, [r3, #0]
   8058c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80590:	b662      	cpsie	i
}
   80592:	b003      	add	sp, #12
   80594:	f85d fb04 	ldr.w	pc, [sp], #4
   80598:	40098000 	.word	0x40098000
   8059c:	00080361 	.word	0x00080361
   805a0:	2007013a 	.word	0x2007013a
   805a4:	20070a41 	.word	0x20070a41
   805a8:	20070a40 	.word	0x20070a40
   805ac:	200709a4 	.word	0x200709a4

000805b0 <configureConsole>:
// }

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   805b0:	b530      	push	{r4, r5, lr}
   805b2:	b087      	sub	sp, #28
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805b4:	4c0e      	ldr	r4, [pc, #56]	; (805f0 <configureConsole+0x40>)
   805b6:	4620      	mov	r0, r4
   805b8:	4d0e      	ldr	r5, [pc, #56]	; (805f4 <configureConsole+0x44>)
   805ba:	47a8      	blx	r5
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   805bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   805c0:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
   805c2:	23c0      	movs	r3, #192	; 0xc0
   805c4:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
   805c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805ca:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
   805cc:	2300      	movs	r3, #0
   805ce:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   805d0:	9304      	str	r3, [sp, #16]
   805d2:	2012      	movs	r0, #18
   805d4:	47a8      	blx	r5
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   805d6:	4620      	mov	r0, r4
   805d8:	4669      	mov	r1, sp
   805da:	4a07      	ldr	r2, [pc, #28]	; (805f8 <configureConsole+0x48>)
   805dc:	4b07      	ldr	r3, [pc, #28]	; (805fc <configureConsole+0x4c>)
   805de:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   805e0:	4620      	mov	r0, r4
   805e2:	4b07      	ldr	r3, [pc, #28]	; (80600 <configureConsole+0x50>)
   805e4:	4798      	blx	r3
		usart_enable_rx(p_usart);
   805e6:	4620      	mov	r0, r4
   805e8:	4b06      	ldr	r3, [pc, #24]	; (80604 <configureConsole+0x54>)
   805ea:	4798      	blx	r3
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(BOARD_USART1_BASE);
	usart_serial_init(CONF_UART, &uart_serial_options);
   805ec:	b007      	add	sp, #28
   805ee:	bd30      	pop	{r4, r5, pc}
   805f0:	4009c000 	.word	0x4009c000
   805f4:	0008124d 	.word	0x0008124d
   805f8:	0501bd00 	.word	0x0501bd00
   805fc:	000804c5 	.word	0x000804c5
   80600:	00080519 	.word	0x00080519
   80604:	00080521 	.word	0x00080521

00080608 <pin12_edge_handler>:
 	usart_enable_interrupt(CONF_UART, UART_IER_RXRDY);

}

// Handler which calls when pin 53 is toggle.
void pin12_edge_handler(const uint32_t id, const uint32_t index){
   80608:	b508      	push	{r3, lr}
	// Check if pin 53 is high
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, PIO_PC12)){
   8060a:	4808      	ldr	r0, [pc, #32]	; (8062c <pin12_edge_handler+0x24>)
   8060c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80610:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80614:	4b06      	ldr	r3, [pc, #24]	; (80630 <pin12_edge_handler+0x28>)
   80616:	4798      	blx	r3
   80618:	b130      	cbz	r0, 80628 <pin12_edge_handler+0x20>
		//increase the counter value
		counter_2++;
   8061a:	4b06      	ldr	r3, [pc, #24]	; (80634 <pin12_edge_handler+0x2c>)
   8061c:	881a      	ldrh	r2, [r3, #0]
   8061e:	3201      	adds	r2, #1
   80620:	801a      	strh	r2, [r3, #0]
		c2Loop = true;
   80622:	2201      	movs	r2, #1
   80624:	4b04      	ldr	r3, [pc, #16]	; (80638 <pin12_edge_handler+0x30>)
   80626:	701a      	strb	r2, [r3, #0]
   80628:	bd08      	pop	{r3, pc}
   8062a:	bf00      	nop
   8062c:	400e1200 	.word	0x400e1200
   80630:	00080fa1 	.word	0x00080fa1
   80634:	20070a46 	.word	0x20070a46
   80638:	20070139 	.word	0x20070139

0008063c <pin14_edge_handler>:
		//printf("\n c1= %d",counter_1);
	}
}

// Handler which calls when pin 51 is toggle.
void pin14_edge_handler(const uint32_t id, const uint32_t index){
   8063c:	b508      	push	{r3, lr}
	// Checks if pin 51 is high
	if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB14)){
   8063e:	4808      	ldr	r0, [pc, #32]	; (80660 <pin14_edge_handler+0x24>)
   80640:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80644:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80648:	4b06      	ldr	r3, [pc, #24]	; (80664 <pin14_edge_handler+0x28>)
   8064a:	4798      	blx	r3
   8064c:	b130      	cbz	r0, 8065c <pin14_edge_handler+0x20>
	//Increase the counter value
			counter_1++;
   8064e:	4b06      	ldr	r3, [pc, #24]	; (80668 <pin14_edge_handler+0x2c>)
   80650:	881a      	ldrh	r2, [r3, #0]
   80652:	3201      	adds	r2, #1
   80654:	801a      	strh	r2, [r3, #0]
			c1Loop = true;
   80656:	2201      	movs	r2, #1
   80658:	4b04      	ldr	r3, [pc, #16]	; (8066c <pin14_edge_handler+0x30>)
   8065a:	701a      	strb	r2, [r3, #0]
   8065c:	bd08      	pop	{r3, pc}
   8065e:	bf00      	nop
   80660:	400e1000 	.word	0x400e1000
   80664:	00080fa1 	.word	0x00080fa1
   80668:	20070a44 	.word	0x20070a44
   8066c:	20070138 	.word	0x20070138

00080670 <configInterrupts>:
 char rx[16];
 bool c1Loop = true;
 bool c2Loop = true;


void configInterrupts(void){
   80670:	b570      	push	{r4, r5, r6, lr}
   80672:	b082      	sub	sp, #8

	//Enable the module clock to the PIOB peripheral
	pmc_enable_periph_clk(ID_PIOB);
   80674:	200c      	movs	r0, #12
   80676:	4c1d      	ldr	r4, [pc, #116]	; (806ec <configInterrupts+0x7c>)
   80678:	47a0      	blx	r4
	//Enable the module clock to the PIOC peripheral
	pmc_enable_periph_clk(ID_PIOC);
   8067a:	200d      	movs	r0, #13
   8067c:	47a0      	blx	r4
	//Set pin 12 direction on PIOC as input, with pullup
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   8067e:	4d1c      	ldr	r5, [pc, #112]	; (806f0 <configInterrupts+0x80>)
   80680:	4628      	mov	r0, r5
   80682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80686:	2201      	movs	r2, #1
   80688:	4e1a      	ldr	r6, [pc, #104]	; (806f4 <configInterrupts+0x84>)
   8068a:	47b0      	blx	r6
	//Set pin 14 direction on PIOB as input, with pullup
	pio_set_input(PIOB,PIO_PB14,PIO_PULLUP);
   8068c:	4c1a      	ldr	r4, [pc, #104]	; (806f8 <configInterrupts+0x88>)
   8068e:	4620      	mov	r0, r4
   80690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80694:	2201      	movs	r2, #1
   80696:	47b0      	blx	r6
	//Configure the input pin 12 interrupt mode and handler
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, pin12_edge_handler);
   80698:	4b18      	ldr	r3, [pc, #96]	; (806fc <configInterrupts+0x8c>)
   8069a:	9300      	str	r3, [sp, #0]
   8069c:	4628      	mov	r0, r5
   8069e:	210d      	movs	r1, #13
   806a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   806a4:	2340      	movs	r3, #64	; 0x40
   806a6:	4e16      	ldr	r6, [pc, #88]	; (80700 <configInterrupts+0x90>)
   806a8:	47b0      	blx	r6
	//Configure the input pin 14 interrupt mode and handler
	pio_handler_set(PIOB, ID_PIOB, PIO_PB14, PIO_IT_EDGE, pin14_edge_handler);
   806aa:	4b16      	ldr	r3, [pc, #88]	; (80704 <configInterrupts+0x94>)
   806ac:	9300      	str	r3, [sp, #0]
   806ae:	4620      	mov	r0, r4
   806b0:	210c      	movs	r1, #12
   806b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   806b6:	2340      	movs	r3, #64	; 0x40
   806b8:	47b0      	blx	r6
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOC,PIO_PC12);
   806ba:	4628      	mov	r0, r5
   806bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   806c0:	4d11      	ldr	r5, [pc, #68]	; (80708 <configInterrupts+0x98>)
   806c2:	47a8      	blx	r5
	//Enable the interrupt for the configured input pin 12
	pio_enable_interrupt(PIOB,PIO_PB14);
   806c4:	4620      	mov	r0, r4
   806c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   806ca:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   806cc:	4b0f      	ldr	r3, [pc, #60]	; (8070c <configInterrupts+0x9c>)
   806ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   806d2:	601a      	str	r2, [r3, #0]
   806d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   806d8:	601a      	str	r2, [r3, #0]
   806da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   806de:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
	//Enable interrupt handling from the PIOB module:
	NVIC_EnableIRQ(PIOB_IRQn);

 	NVIC_EnableIRQ((IRQn_Type) ID_USART1);
 	usart_enable_interrupt(CONF_UART, UART_IER_RXRDY);
   806e0:	480b      	ldr	r0, [pc, #44]	; (80710 <configInterrupts+0xa0>)
   806e2:	2101      	movs	r1, #1
   806e4:	4b0b      	ldr	r3, [pc, #44]	; (80714 <configInterrupts+0xa4>)
   806e6:	4798      	blx	r3

}
   806e8:	b002      	add	sp, #8
   806ea:	bd70      	pop	{r4, r5, r6, pc}
   806ec:	0008124d 	.word	0x0008124d
   806f0:	400e1200 	.word	0x400e1200
   806f4:	00080ff9 	.word	0x00080ff9
   806f8:	400e1000 	.word	0x400e1000
   806fc:	00080609 	.word	0x00080609
   80700:	000811c1 	.word	0x000811c1
   80704:	0008063d 	.word	0x0008063d
   80708:	00081085 	.word	0x00081085
   8070c:	e000e100 	.word	0xe000e100
   80710:	4009c000 	.word	0x4009c000
   80714:	00080529 	.word	0x00080529

00080718 <USART1_Handler>:
			//printf("\n c2 = %d",counter_2);
	}
}

 void USART1_Handler() {
	 CONF_UART->US_CR |= (1 << US_CR_RSTRX);
   80718:	4b09      	ldr	r3, [pc, #36]	; (80740 <USART1_Handler+0x28>)
   8071a:	681a      	ldr	r2, [r3, #0]
   8071c:	f042 0210 	orr.w	r2, r2, #16
   80720:	601a      	str	r2, [r3, #0]
	 rx[c_counter++] = CONF_UART->US_RHR & US_RHR_RXCHR_Msk;
   80722:	4808      	ldr	r0, [pc, #32]	; (80744 <USART1_Handler+0x2c>)
   80724:	7801      	ldrb	r1, [r0, #0]
   80726:	1c4a      	adds	r2, r1, #1
   80728:	b2d2      	uxtb	r2, r2
   8072a:	7002      	strb	r2, [r0, #0]
   8072c:	6998      	ldr	r0, [r3, #24]
   8072e:	4b06      	ldr	r3, [pc, #24]	; (80748 <USART1_Handler+0x30>)
   80730:	5458      	strb	r0, [r3, r1]
	 if (c_counter > 15)
   80732:	2a0f      	cmp	r2, #15
   80734:	d902      	bls.n	8073c <USART1_Handler+0x24>
	 {
		 c_counter = 0;
   80736:	2200      	movs	r2, #0
   80738:	4b02      	ldr	r3, [pc, #8]	; (80744 <USART1_Handler+0x2c>)
   8073a:	701a      	strb	r2, [r3, #0]
   8073c:	4770      	bx	lr
   8073e:	bf00      	nop
   80740:	4009c000 	.word	0x4009c000
   80744:	20070a42 	.word	0x20070a42
   80748:	20070afc 	.word	0x20070afc

0008074c <reset_Counter>:
	 }
 }

void reset_Counter(void){
	counter_1=0;
   8074c:	2300      	movs	r3, #0
   8074e:	4a02      	ldr	r2, [pc, #8]	; (80758 <reset_Counter+0xc>)
   80750:	8013      	strh	r3, [r2, #0]
	counter_2=0;
   80752:	4a02      	ldr	r2, [pc, #8]	; (8075c <reset_Counter+0x10>)
   80754:	8013      	strh	r3, [r2, #0]
   80756:	4770      	bx	lr
   80758:	20070a44 	.word	0x20070a44
   8075c:	20070a46 	.word	0x20070a46

00080760 <calculateDistance>:
   @param Xb the x coordinate for B
   @param Ya the y coordinate for A
   @param Yb the y coordinate for B
   return distance the distance between A and B
**/
double calculateDistance (double Xa, double Ya, double Xb, double Yb){
   80760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80764:	4606      	mov	r6, r0
   80766:	460f      	mov	r7, r1
   80768:	4614      	mov	r4, r2
   8076a:	461d      	mov	r5, r3
	double distance;
	double deltaX = Xb - Xa;
   8076c:	f8df a054 	ldr.w	sl, [pc, #84]	; 807c4 <calculateDistance+0x64>
   80770:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   80774:	4632      	mov	r2, r6
   80776:	463b      	mov	r3, r7
   80778:	47d0      	blx	sl
   8077a:	4680      	mov	r8, r0
   8077c:	4689      	mov	r9, r1
	double deltaY = Yb - Ya;
   8077e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   80782:	4622      	mov	r2, r4
   80784:	462b      	mov	r3, r5
   80786:	47d0      	blx	sl
   80788:	4604      	mov	r4, r0
   8078a:	460d      	mov	r5, r1
	distance = sqrt((deltaX*deltaX) + (deltaY*deltaY));
   8078c:	f8df a038 	ldr.w	sl, [pc, #56]	; 807c8 <calculateDistance+0x68>
   80790:	f8df b038 	ldr.w	fp, [pc, #56]	; 807cc <calculateDistance+0x6c>
   80794:	4640      	mov	r0, r8
   80796:	4649      	mov	r1, r9
   80798:	4642      	mov	r2, r8
   8079a:	464b      	mov	r3, r9
   8079c:	47d0      	blx	sl
   8079e:	4606      	mov	r6, r0
   807a0:	460f      	mov	r7, r1
   807a2:	4620      	mov	r0, r4
   807a4:	4629      	mov	r1, r5
   807a6:	4622      	mov	r2, r4
   807a8:	462b      	mov	r3, r5
   807aa:	47d0      	blx	sl
   807ac:	4602      	mov	r2, r0
   807ae:	460b      	mov	r3, r1
   807b0:	4630      	mov	r0, r6
   807b2:	4639      	mov	r1, r7
   807b4:	47d8      	blx	fp
   807b6:	4b02      	ldr	r3, [pc, #8]	; (807c0 <calculateDistance+0x60>)
   807b8:	4798      	blx	r3
	return distance;
}
   807ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807be:	bf00      	nop
   807c0:	000818c1 	.word	0x000818c1
   807c4:	00081b49 	.word	0x00081b49
   807c8:	00081eb1 	.word	0x00081eb1
   807cc:	00081b4d 	.word	0x00081b4d

000807d0 <calculateAzimuthAngle>:
   @param Xb the x coordinate for B
   @param Ya the y coordinate for A
   @param Yb the y coordinate for B
   return azimutAngle the azimuth angle from A to B
**/
double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
   807d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807d4:	4604      	mov	r4, r0
   807d6:	460d      	mov	r5, r1
   807d8:	4616      	mov	r6, r2
   807da:	461f      	mov	r7, r3
	double azimutAngle = 0;
	double deltaX = Xb-Xa;
   807dc:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 809d4 <calculateAzimuthAngle+0x204>
   807e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   807e4:	4622      	mov	r2, r4
   807e6:	462b      	mov	r3, r5
   807e8:	47c0      	blx	r8
   807ea:	4604      	mov	r4, r0
   807ec:	460d      	mov	r5, r1
	double deltaY = Yb-Ya;
   807ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   807f2:	4632      	mov	r2, r6
   807f4:	463b      	mov	r3, r7
   807f6:	47c0      	blx	r8
   807f8:	4606      	mov	r6, r0
   807fa:	460f      	mov	r7, r1
	
	// if A and B has same coordinates
	if ( (deltaX == 0) && (deltaY == 0) )
   807fc:	4620      	mov	r0, r4
   807fe:	4629      	mov	r1, r5
   80800:	2200      	movs	r2, #0
   80802:	2300      	movs	r3, #0
   80804:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 809b0 <calculateAzimuthAngle+0x1e0>
   80808:	47e0      	blx	ip
   8080a:	b1a8      	cbz	r0, 80838 <calculateAzimuthAngle+0x68>
   8080c:	4630      	mov	r0, r6
   8080e:	4639      	mov	r1, r7
   80810:	2200      	movs	r2, #0
   80812:	2300      	movs	r3, #0
   80814:	4c66      	ldr	r4, [pc, #408]	; (809b0 <calculateAzimuthAngle+0x1e0>)
   80816:	47a0      	blx	r4
   80818:	2800      	cmp	r0, #0
   8081a:	f040 80aa 	bne.w	80972 <calculateAzimuthAngle+0x1a2>
		azimutAngle = 0;
	} 
	// if A and B has same x coordinate
	else if (deltaX == 0)
	{
		if (deltaY>0)
   8081e:	4630      	mov	r0, r6
   80820:	4639      	mov	r1, r7
   80822:	2200      	movs	r2, #0
   80824:	2300      	movs	r3, #0
   80826:	4c63      	ldr	r4, [pc, #396]	; (809b4 <calculateAzimuthAngle+0x1e4>)
   80828:	47a0      	blx	r4
   8082a:	2800      	cmp	r0, #0
   8082c:	f000 80a5 	beq.w	8097a <calculateAzimuthAngle+0x1aa>
		{
			azimutAngle = 0;
   80830:	2000      	movs	r0, #0
   80832:	2100      	movs	r1, #0
   80834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			azimutAngle = 180;
		}
		
	}
	// if A and B has same y coordinate
	else if (deltaY == 0)
   80838:	4630      	mov	r0, r6
   8083a:	4639      	mov	r1, r7
   8083c:	2200      	movs	r2, #0
   8083e:	2300      	movs	r3, #0
   80840:	f8df c16c 	ldr.w	ip, [pc, #364]	; 809b0 <calculateAzimuthAngle+0x1e0>
   80844:	47e0      	blx	ip
   80846:	b160      	cbz	r0, 80862 <calculateAzimuthAngle+0x92>
	{
		if (deltaX>0)
   80848:	4620      	mov	r0, r4
   8084a:	4629      	mov	r1, r5
   8084c:	2200      	movs	r2, #0
   8084e:	2300      	movs	r3, #0
   80850:	4c58      	ldr	r4, [pc, #352]	; (809b4 <calculateAzimuthAngle+0x1e4>)
   80852:	47a0      	blx	r4
   80854:	2800      	cmp	r0, #0
   80856:	f000 8094 	beq.w	80982 <calculateAzimuthAngle+0x1b2>
		{
			azimutAngle = 90;
   8085a:	2000      	movs	r0, #0
   8085c:	4956      	ldr	r1, [pc, #344]	; (809b8 <calculateAzimuthAngle+0x1e8>)
   8085e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		
	}
	else
	{   // angle is between 0 to 90 degree
		if ( (deltaX > 0) && (deltaY > 0 ) )
   80862:	4620      	mov	r0, r4
   80864:	4629      	mov	r1, r5
   80866:	2200      	movs	r2, #0
   80868:	2300      	movs	r3, #0
   8086a:	f8df c148 	ldr.w	ip, [pc, #328]	; 809b4 <calculateAzimuthAngle+0x1e4>
   8086e:	47e0      	blx	ip
   80870:	b1b0      	cbz	r0, 808a0 <calculateAzimuthAngle+0xd0>
   80872:	4630      	mov	r0, r6
   80874:	4639      	mov	r1, r7
   80876:	2200      	movs	r2, #0
   80878:	2300      	movs	r3, #0
   8087a:	f8df c138 	ldr.w	ip, [pc, #312]	; 809b4 <calculateAzimuthAngle+0x1e4>
   8087e:	47e0      	blx	ip
   80880:	b1b0      	cbz	r0, 808b0 <calculateAzimuthAngle+0xe0>
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   80882:	4620      	mov	r0, r4
   80884:	4629      	mov	r1, r5
   80886:	4632      	mov	r2, r6
   80888:	463b      	mov	r3, r7
   8088a:	4c4c      	ldr	r4, [pc, #304]	; (809bc <calculateAzimuthAngle+0x1ec>)
   8088c:	47a0      	blx	r4
   8088e:	4b4c      	ldr	r3, [pc, #304]	; (809c0 <calculateAzimuthAngle+0x1f0>)
   80890:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   80892:	a343      	add	r3, pc, #268	; (adr r3, 809a0 <calculateAzimuthAngle+0x1d0>)
   80894:	e9d3 2300 	ldrd	r2, r3, [r3]
   80898:	4c4a      	ldr	r4, [pc, #296]	; (809c4 <calculateAzimuthAngle+0x1f4>)
   8089a:	47a0      	blx	r4
	}
	else
	{   // angle is between 0 to 90 degree
		if ( (deltaX > 0) && (deltaY > 0 ) )
		{
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
   8089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} 
		// the angle is between 90 to 180 degree
		else if ( (deltaX > 0) && (deltaY < 0 ) )
   808a0:	4620      	mov	r0, r4
   808a2:	4629      	mov	r1, r5
   808a4:	2200      	movs	r2, #0
   808a6:	2300      	movs	r3, #0
   808a8:	f8df c108 	ldr.w	ip, [pc, #264]	; 809b4 <calculateAzimuthAngle+0x1e4>
   808ac:	47e0      	blx	ip
   808ae:	b1d0      	cbz	r0, 808e6 <calculateAzimuthAngle+0x116>
   808b0:	4630      	mov	r0, r6
   808b2:	4639      	mov	r1, r7
   808b4:	2200      	movs	r2, #0
   808b6:	2300      	movs	r3, #0
   808b8:	f8df c11c 	ldr.w	ip, [pc, #284]	; 809d8 <calculateAzimuthAngle+0x208>
   808bc:	47e0      	blx	ip
   808be:	b190      	cbz	r0, 808e6 <calculateAzimuthAngle+0x116>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   808c0:	4620      	mov	r0, r4
   808c2:	4629      	mov	r1, r5
   808c4:	4632      	mov	r2, r6
   808c6:	463b      	mov	r3, r7
   808c8:	4c3c      	ldr	r4, [pc, #240]	; (809bc <calculateAzimuthAngle+0x1ec>)
   808ca:	47a0      	blx	r4
   808cc:	4b3c      	ldr	r3, [pc, #240]	; (809c0 <calculateAzimuthAngle+0x1f0>)
   808ce:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   808d0:	a333      	add	r3, pc, #204	; (adr r3, 809a0 <calculateAzimuthAngle+0x1d0>)
   808d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   808d6:	4c3b      	ldr	r4, [pc, #236]	; (809c4 <calculateAzimuthAngle+0x1f4>)
   808d8:	47a0      	blx	r4
			azimutAngle =  radianToDegree (atan (deltaX/deltaY));
		} 
		// the angle is between 90 to 180 degree
		else if ( (deltaX > 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
   808da:	2200      	movs	r2, #0
   808dc:	4b3a      	ldr	r3, [pc, #232]	; (809c8 <calculateAzimuthAngle+0x1f8>)
   808de:	4c3b      	ldr	r4, [pc, #236]	; (809cc <calculateAzimuthAngle+0x1fc>)
   808e0:	47a0      	blx	r4
   808e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		// the angle is between 180 to 270 degree
		else if ( (deltaX < 0) && (deltaY < 0 ) )
   808e6:	4620      	mov	r0, r4
   808e8:	4629      	mov	r1, r5
   808ea:	2200      	movs	r2, #0
   808ec:	2300      	movs	r3, #0
   808ee:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 809d8 <calculateAzimuthAngle+0x208>
   808f2:	47e0      	blx	ip
   808f4:	b1d0      	cbz	r0, 8092c <calculateAzimuthAngle+0x15c>
   808f6:	4630      	mov	r0, r6
   808f8:	4639      	mov	r1, r7
   808fa:	2200      	movs	r2, #0
   808fc:	2300      	movs	r3, #0
   808fe:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 809d8 <calculateAzimuthAngle+0x208>
   80902:	47e0      	blx	ip
   80904:	b1d0      	cbz	r0, 8093c <calculateAzimuthAngle+0x16c>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   80906:	4620      	mov	r0, r4
   80908:	4629      	mov	r1, r5
   8090a:	4632      	mov	r2, r6
   8090c:	463b      	mov	r3, r7
   8090e:	4c2b      	ldr	r4, [pc, #172]	; (809bc <calculateAzimuthAngle+0x1ec>)
   80910:	47a0      	blx	r4
   80912:	4b2b      	ldr	r3, [pc, #172]	; (809c0 <calculateAzimuthAngle+0x1f0>)
   80914:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   80916:	a322      	add	r3, pc, #136	; (adr r3, 809a0 <calculateAzimuthAngle+0x1d0>)
   80918:	e9d3 2300 	ldrd	r2, r3, [r3]
   8091c:	4c29      	ldr	r4, [pc, #164]	; (809c4 <calculateAzimuthAngle+0x1f4>)
   8091e:	47a0      	blx	r4
			azimutAngle = (radianToDegree (atan (deltaX/deltaY))  + 180);
		}
		// the angle is between 180 to 270 degree
		else if ( (deltaX < 0) && (deltaY < 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
   80920:	2200      	movs	r2, #0
   80922:	4b29      	ldr	r3, [pc, #164]	; (809c8 <calculateAzimuthAngle+0x1f8>)
   80924:	4c29      	ldr	r4, [pc, #164]	; (809cc <calculateAzimuthAngle+0x1fc>)
   80926:	47a0      	blx	r4
   80928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		// the angle is between 270 to 360 degree
		else if ( (deltaX < 0) && (deltaY > 0 ) )
   8092c:	4620      	mov	r0, r4
   8092e:	4629      	mov	r1, r5
   80930:	2200      	movs	r2, #0
   80932:	2300      	movs	r3, #0
   80934:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 809d8 <calculateAzimuthAngle+0x208>
   80938:	47e0      	blx	ip
   8093a:	b338      	cbz	r0, 8098c <calculateAzimuthAngle+0x1bc>
   8093c:	4630      	mov	r0, r6
   8093e:	4639      	mov	r1, r7
   80940:	2200      	movs	r2, #0
   80942:	2300      	movs	r3, #0
   80944:	f8df c06c 	ldr.w	ip, [pc, #108]	; 809b4 <calculateAzimuthAngle+0x1e4>
   80948:	47e0      	blx	ip
   8094a:	b318      	cbz	r0, 80994 <calculateAzimuthAngle+0x1c4>
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   8094c:	4620      	mov	r0, r4
   8094e:	4629      	mov	r1, r5
   80950:	4632      	mov	r2, r6
   80952:	463b      	mov	r3, r7
   80954:	4c19      	ldr	r4, [pc, #100]	; (809bc <calculateAzimuthAngle+0x1ec>)
   80956:	47a0      	blx	r4
   80958:	4b19      	ldr	r3, [pc, #100]	; (809c0 <calculateAzimuthAngle+0x1f0>)
   8095a:	4798      	blx	r3
   @param radian the angle value in radian
   return degree the angle value in degree
**/
double radianToDegree (double radian){
	double degree;
	degree =  radian*(180/M_PI);
   8095c:	a310      	add	r3, pc, #64	; (adr r3, 809a0 <calculateAzimuthAngle+0x1d0>)
   8095e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80962:	4c18      	ldr	r4, [pc, #96]	; (809c4 <calculateAzimuthAngle+0x1f4>)
   80964:	47a0      	blx	r4
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 180);
		}
		// the angle is between 270 to 360 degree
		else if ( (deltaX < 0) && (deltaY > 0 ) )
		{
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
   80966:	2200      	movs	r2, #0
   80968:	4b19      	ldr	r3, [pc, #100]	; (809d0 <calculateAzimuthAngle+0x200>)
   8096a:	4c18      	ldr	r4, [pc, #96]	; (809cc <calculateAzimuthAngle+0x1fc>)
   8096c:	47a0      	blx	r4
   8096e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	double deltaY = Yb-Ya;
	
	// if A and B has same coordinates
	if ( (deltaX == 0) && (deltaY == 0) )
	{
		azimutAngle = 0;
   80972:	2000      	movs	r0, #0
   80974:	2100      	movs	r1, #0
   80976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 0;
		} 
		else
		{
			azimutAngle = 180;
   8097a:	2000      	movs	r0, #0
   8097c:	4912      	ldr	r1, [pc, #72]	; (809c8 <calculateAzimuthAngle+0x1f8>)
   8097e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			azimutAngle = 90;
		} 
		else
		{
			azimutAngle = 270;
   80982:	a109      	add	r1, pc, #36	; (adr r1, 809a8 <calculateAzimuthAngle+0x1d8>)
   80984:	e9d1 0100 	ldrd	r0, r1, [r1]
   80988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   @param Ya the y coordinate for A
   @param Yb the y coordinate for B
   return azimutAngle the azimuth angle from A to B
**/
double calculateAzimuthAngle (double Xa, double Ya, double Xb, double Yb){
	double azimutAngle = 0;
   8098c:	2000      	movs	r0, #0
   8098e:	2100      	movs	r1, #0
   80990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80994:	2000      	movs	r0, #0
   80996:	2100      	movs	r1, #0
			azimutAngle = (radianToDegree (atan (deltaX/deltaY) ) + 360);
		}
	}
	
	return azimutAngle;
}
   80998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8099c:	f3af 8000 	nop.w
   809a0:	1a63c1f8 	.word	0x1a63c1f8
   809a4:	404ca5dc 	.word	0x404ca5dc
   809a8:	00000000 	.word	0x00000000
   809ac:	4070e000 	.word	0x4070e000
   809b0:	00082381 	.word	0x00082381
   809b4:	000823d1 	.word	0x000823d1
   809b8:	40568000 	.word	0x40568000
   809bc:	00082105 	.word	0x00082105
   809c0:	00081569 	.word	0x00081569
   809c4:	00081eb1 	.word	0x00081eb1
   809c8:	40668000 	.word	0x40668000
   809cc:	00081b4d 	.word	0x00081b4d
   809d0:	40768000 	.word	0x40768000
   809d4:	00081b49 	.word	0x00081b49
   809d8:	00082395 	.word	0x00082395
   809dc:	f3af 8000 	nop.w

000809e0 <calcluteRotationAngle>:
   @param Ya the y coordinate for A
   @param Yb the x coordinate for B
   @param Yc the y coordinate for C
   return rotationAngle the rotation angle from A to target C
   **/
double calcluteRotationAngle (double Xa, double Ya, double Xb, double Yb, double Xc, double Yc){
   809e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   809e4:	b084      	sub	sp, #16
   809e6:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
   809ea:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
	
	double AoB = calculateAzimuthAngle(Xa, Ya, Xb, Yb);
   809ee:	e9cd 4500 	strd	r4, r5, [sp]
   809f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
   809f6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80a84 <calcluteRotationAngle+0xa4>
   809fa:	47d0      	blx	sl
   809fc:	4606      	mov	r6, r0
   809fe:	460f      	mov	r7, r1
	double BoC = calculateAzimuthAngle(Xb, Yb, Xc, Yc);
   80a00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   80a04:	e9cd 2300 	strd	r2, r3, [sp]
   80a08:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   80a0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   80a10:	4620      	mov	r0, r4
   80a12:	4629      	mov	r1, r5
   80a14:	4642      	mov	r2, r8
   80a16:	464b      	mov	r3, r9
   80a18:	47d0      	blx	sl
	double rotationAngle = BoC-AoB;
   80a1a:	4632      	mov	r2, r6
   80a1c:	463b      	mov	r3, r7
   80a1e:	4c12      	ldr	r4, [pc, #72]	; (80a68 <calcluteRotationAngle+0x88>)
   80a20:	47a0      	blx	r4
   80a22:	4604      	mov	r4, r0
   80a24:	460d      	mov	r5, r1
	if (rotationAngle > 180)
   80a26:	2200      	movs	r2, #0
   80a28:	4b10      	ldr	r3, [pc, #64]	; (80a6c <calcluteRotationAngle+0x8c>)
   80a2a:	4e11      	ldr	r6, [pc, #68]	; (80a70 <calcluteRotationAngle+0x90>)
   80a2c:	47b0      	blx	r6
   80a2e:	b138      	cbz	r0, 80a40 <calcluteRotationAngle+0x60>
	{
		rotationAngle =  rotationAngle - 360;
   80a30:	4620      	mov	r0, r4
   80a32:	4629      	mov	r1, r5
   80a34:	2200      	movs	r2, #0
   80a36:	4b0f      	ldr	r3, [pc, #60]	; (80a74 <calcluteRotationAngle+0x94>)
   80a38:	4c0b      	ldr	r4, [pc, #44]	; (80a68 <calcluteRotationAngle+0x88>)
   80a3a:	47a0      	blx	r4
   80a3c:	4604      	mov	r4, r0
   80a3e:	460d      	mov	r5, r1
	}
	if (rotationAngle < -180)
   80a40:	4620      	mov	r0, r4
   80a42:	4629      	mov	r1, r5
   80a44:	2200      	movs	r2, #0
   80a46:	4b0c      	ldr	r3, [pc, #48]	; (80a78 <calcluteRotationAngle+0x98>)
   80a48:	4e0c      	ldr	r6, [pc, #48]	; (80a7c <calcluteRotationAngle+0x9c>)
   80a4a:	47b0      	blx	r6
   80a4c:	b138      	cbz	r0, 80a5e <calcluteRotationAngle+0x7e>
	{
		rotationAngle =  rotationAngle + 360;
   80a4e:	4620      	mov	r0, r4
   80a50:	4629      	mov	r1, r5
   80a52:	2200      	movs	r2, #0
   80a54:	4b07      	ldr	r3, [pc, #28]	; (80a74 <calcluteRotationAngle+0x94>)
   80a56:	4c0a      	ldr	r4, [pc, #40]	; (80a80 <calcluteRotationAngle+0xa0>)
   80a58:	47a0      	blx	r4
   80a5a:	4604      	mov	r4, r0
   80a5c:	460d      	mov	r5, r1
	}
	return rotationAngle;
   80a5e:	4620      	mov	r0, r4
   80a60:	4629      	mov	r1, r5
   80a62:	b004      	add	sp, #16
   80a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a68:	00081b49 	.word	0x00081b49
   80a6c:	40668000 	.word	0x40668000
   80a70:	000823d1 	.word	0x000823d1
   80a74:	40768000 	.word	0x40768000
   80a78:	c0668000 	.word	0xc0668000
   80a7c:	00082395 	.word	0x00082395
   80a80:	00081b4d 	.word	0x00081b4d
   80a84:	000807d1 	.word	0x000807d1

00080a88 <moveTo>:
This method moveTo handle position moving for a certain distance and direction
Method uses a PID controller for smoother movment of the robot
	@param distance the distance which the robot need to move in centimeters
	@param direction the direction robot need to move forward or backwards
**/
void moveTo (int distance, int direction){
   80a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a8c:	b089      	sub	sp, #36	; 0x24
   80a8e:	468b      	mov	fp, r1
	float totalPulses = (distance/1.38); //Calculate the total pulses needed to move to destination
   80a90:	4b8f      	ldr	r3, [pc, #572]	; (80cd0 <moveTo+0x248>)
   80a92:	4798      	blx	r3
   80a94:	a382      	add	r3, pc, #520	; (adr r3, 80ca0 <moveTo+0x218>)
   80a96:	e9d3 2300 	ldrd	r2, r3, [r3]
   80a9a:	4c8e      	ldr	r4, [pc, #568]	; (80cd4 <moveTo+0x24c>)
   80a9c:	47a0      	blx	r4
   80a9e:	4b8e      	ldr	r3, [pc, #568]	; (80cd8 <moveTo+0x250>)
   80aa0:	4798      	blx	r3
   80aa2:	4682      	mov	sl, r0
	double dT=0.5;
	double Td=0.265;//0.53;
	double Ti=1.075;//2.15;
	int32_t sum=0;
	//--------------------------------------Updated D�sir�e och Ansam 170503
	delay_us(300);
   80aa4:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   80aa8:	4c8c      	ldr	r4, [pc, #560]	; (80cdc <moveTo+0x254>)
   80aaa:	47a0      	blx	r4
	reset_Counter(); //Reset counter for encoders for wheel to ensure counter reseted for next movement
   80aac:	4b8c      	ldr	r3, [pc, #560]	; (80ce0 <moveTo+0x258>)
   80aae:	4798      	blx	r3
	delay_us(300);
   80ab0:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   80ab4:	47a0      	blx	r4

	// Controlls if moving forward or backwards
	if ( direction!=1 && direction!=-1 )
   80ab6:	f1bb 0f01 	cmp.w	fp, #1
   80aba:	d004      	beq.n	80ac6 <moveTo+0x3e>
	{
		direction=1;
   80abc:	f1bb 3fff 	cmp.w	fp, #4294967295
   80ac0:	bf18      	it	ne
   80ac2:	f04f 0b01 	movne.w	fp, #1

		/**
		This while loop runs until robot reaches its destination
		checks if totalmovemnt pulses is the same or more than the total pulses needed
		**/
    while (totMovement <= totalPulses) {
   80ac6:	4650      	mov	r0, sl
   80ac8:	2100      	movs	r1, #0
   80aca:	4b86      	ldr	r3, [pc, #536]	; (80ce4 <moveTo+0x25c>)
   80acc:	4798      	blx	r3
   80ace:	2800      	cmp	r0, #0
   80ad0:	f000 80d8 	beq.w	80c84 <moveTo+0x1fc>
   80ad4:	2200      	movs	r2, #0
   80ad6:	9206      	str	r2, [sp, #24]
   80ad8:	2200      	movs	r2, #0
   80ada:	2300      	movs	r3, #0
   80adc:	e9cd 2300 	strd	r2, r3, [sp]
   80ae0:	f04f 0900 	mov.w	r9, #0
 		{
 			speed = 180;
 		}


		rightWheel(1500 + ((speed+controlValue)*direction));//New speed for rightWheel
   80ae4:	f8cd b01c 	str.w	fp, [sp, #28]
		/**
		This while loop runs until robot reaches its destination
		checks if totalmovemnt pulses is the same or more than the total pulses needed
		**/
    while (totMovement <= totalPulses) {
		delay_ms(1);
   80ae8:	f241 7070 	movw	r0, #6000	; 0x1770
   80aec:	4b7b      	ldr	r3, [pc, #492]	; (80cdc <moveTo+0x254>)
   80aee:	4798      	blx	r3
			/**
			Checks if both encoder have counted up since last time
			if counted, then regulates the need values from encoder
			**/
      if (c1Loop == true && c2Loop == true) {
   80af0:	4b7d      	ldr	r3, [pc, #500]	; (80ce8 <moveTo+0x260>)
   80af2:	781b      	ldrb	r3, [r3, #0]
   80af4:	2b00      	cmp	r3, #0
   80af6:	f000 80be 	beq.w	80c76 <moveTo+0x1ee>
   80afa:	4b7c      	ldr	r3, [pc, #496]	; (80cec <moveTo+0x264>)
   80afc:	781b      	ldrb	r3, [r3, #0]
   80afe:	2b00      	cmp	r3, #0
   80b00:	f000 80b9 	beq.w	80c76 <moveTo+0x1ee>
		totMovement = totMovement + ((counter_1+counter_2)/2);
   80b04:	4c7a      	ldr	r4, [pc, #488]	; (80cf0 <moveTo+0x268>)
   80b06:	8820      	ldrh	r0, [r4, #0]
   80b08:	4d7a      	ldr	r5, [pc, #488]	; (80cf4 <moveTo+0x26c>)
   80b0a:	882b      	ldrh	r3, [r5, #0]
   80b0c:	4418      	add	r0, r3
   80b0e:	1040      	asrs	r0, r0, #1
   80b10:	4b79      	ldr	r3, [pc, #484]	; (80cf8 <moveTo+0x270>)
   80b12:	4798      	blx	r3
   80b14:	4601      	mov	r1, r0
   80b16:	4648      	mov	r0, r9
   80b18:	4b78      	ldr	r3, [pc, #480]	; (80cfc <moveTo+0x274>)
   80b1a:	4798      	blx	r3
   80b1c:	4681      	mov	r9, r0
		delay_ms(1);
   80b1e:	f241 7070 	movw	r0, #6000	; 0x1770
   80b22:	4e6e      	ldr	r6, [pc, #440]	; (80cdc <moveTo+0x254>)
   80b24:	47b0      	blx	r6
        measurementValue = (counter_2-counter_1);// Calculates the error diffferce
   80b26:	8828      	ldrh	r0, [r5, #0]
   80b28:	8823      	ldrh	r3, [r4, #0]
   80b2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80cd0 <moveTo+0x248>
   80b2e:	1ac0      	subs	r0, r0, r3
   80b30:	47c0      	blx	r8
   80b32:	4604      	mov	r4, r0
   80b34:	460d      	mov	r5, r1
		delay_us(500);
   80b36:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b3a:	47b0      	blx	r6
        reset_Counter();//Reset counter for next regulation later
   80b3c:	4b68      	ldr	r3, [pc, #416]	; (80ce0 <moveTo+0x258>)
   80b3e:	4798      	blx	r3
		delay_us(500);
   80b40:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b44:	47b0      	blx	r6
	    proportionalError = (referenceValue - measurementValue); // Calculates p-controller gain
   80b46:	4f6e      	ldr	r7, [pc, #440]	; (80d00 <moveTo+0x278>)
   80b48:	2000      	movs	r0, #0
   80b4a:	2100      	movs	r1, #0
   80b4c:	4622      	mov	r2, r4
   80b4e:	462b      	mov	r3, r5
   80b50:	47b8      	blx	r7
   80b52:	e9cd 0102 	strd	r0, r1, [sp, #8]

		//--------------------------------------Updated D�sir�e och Ansam 170503
		sum = (sum + prevD);
   80b56:	9806      	ldr	r0, [sp, #24]
   80b58:	47c0      	blx	r8
   80b5a:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 80d1c <moveTo+0x294>
   80b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
   80b62:	47d8      	blx	fp
   80b64:	4b67      	ldr	r3, [pc, #412]	; (80d04 <moveTo+0x27c>)
   80b66:	4798      	blx	r3
   80b68:	9006      	str	r0, [sp, #24]
		delay_us(500);
   80b6a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b6e:	47b0      	blx	r6
		integral= (sum * (dT/Ti));
		delay_us(500);
   80b70:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b74:	47b0      	blx	r6
		derivate = ((Td/dT) * (proportionalError-prevD));
		delay_us(500);
   80b76:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b7a:	47b0      	blx	r6
	    proportionalError = (referenceValue - measurementValue); // Calculates p-controller gain

		//--------------------------------------Updated D�sir�e och Ansam 170503
		sum = (sum + prevD);
		delay_us(500);
		integral= (sum * (dT/Ti));
   80b7c:	9806      	ldr	r0, [sp, #24]
   80b7e:	47c0      	blx	r8
   80b80:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80d2c <moveTo+0x2a4>
   80b84:	a348      	add	r3, pc, #288	; (adr r3, 80ca8 <moveTo+0x220>)
   80b86:	e9d3 2300 	ldrd	r2, r3, [r3]
   80b8a:	47c0      	blx	r8
   80b8c:	4602      	mov	r2, r0
   80b8e:	460b      	mov	r3, r1
		delay_us(500);
		derivate = ((Td/dT) * (proportionalError-prevD));
		delay_us(500);
	   controlValue =(kp*(proportionalError+integral+ derivate)); //PID
   80b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   80b94:	47d8      	blx	fp
   80b96:	4604      	mov	r4, r0
   80b98:	460d      	mov	r5, r1
		//--------------------------------------Updated D�sir�e och Ansam 170503
		sum = (sum + prevD);
		delay_us(500);
		integral= (sum * (dT/Ti));
		delay_us(500);
		derivate = ((Td/dT) * (proportionalError-prevD));
   80b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   80b9e:	e9dd 2300 	ldrd	r2, r3, [sp]
   80ba2:	47b8      	blx	r7
   80ba4:	a342      	add	r3, pc, #264	; (adr r3, 80cb0 <moveTo+0x228>)
   80ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
   80baa:	47c0      	blx	r8
   80bac:	4602      	mov	r2, r0
   80bae:	460b      	mov	r3, r1
		delay_us(500);
	   controlValue =(kp*(proportionalError+integral+ derivate)); //PID
   80bb0:	4620      	mov	r0, r4
   80bb2:	4629      	mov	r1, r5
   80bb4:	47d8      	blx	fp
   80bb6:	2200      	movs	r2, #0
   80bb8:	4b53      	ldr	r3, [pc, #332]	; (80d08 <moveTo+0x280>)
   80bba:	47c0      	blx	r8
   80bbc:	e9cd 0100 	strd	r0, r1, [sp]
	   //--------------------------------------Updated D�sir�e och Ansam 170503

	   //iPart = (Ti*integralError); //Calculates i-controller gain
	   // dPart = //(kd*(proportionalError-derivativeError)); //Calculates d-controller gain
	   //controlValue = (kp*(proportionalError+iPart+dPart)); //Total regulation for PID calculate new value for correcting the error
		delay_us(500);
   80bc0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80bc4:	47b0      	blx	r6

		 //	Check if almost reached the destination to slow down and make a smoother brake
		 if (((totMovement/totalPulses)>= 0.85) || ((totMovement/totalPulses)<= 0.1))
   80bc6:	4648      	mov	r0, r9
   80bc8:	4651      	mov	r1, sl
   80bca:	4b50      	ldr	r3, [pc, #320]	; (80d0c <moveTo+0x284>)
   80bcc:	4798      	blx	r3
   80bce:	4b50      	ldr	r3, [pc, #320]	; (80d10 <moveTo+0x288>)
   80bd0:	4798      	blx	r3
   80bd2:	4604      	mov	r4, r0
   80bd4:	460d      	mov	r5, r1
   80bd6:	a338      	add	r3, pc, #224	; (adr r3, 80cb8 <moveTo+0x230>)
   80bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   80bdc:	4e4d      	ldr	r6, [pc, #308]	; (80d14 <moveTo+0x28c>)
   80bde:	47b0      	blx	r6
   80be0:	b958      	cbnz	r0, 80bfa <moveTo+0x172>
   80be2:	4620      	mov	r0, r4
   80be4:	4629      	mov	r1, r5
   80be6:	a336      	add	r3, pc, #216	; (adr r3, 80cc0 <moveTo+0x238>)
   80be8:	e9d3 2300 	ldrd	r2, r3, [r3]
   80bec:	4c4a      	ldr	r4, [pc, #296]	; (80d18 <moveTo+0x290>)
   80bee:	47a0      	blx	r4
   80bf0:	2800      	cmp	r0, #0
			 speed = 110;
 		}
		//Else same speed set
 		else
 		{
 			speed = 180;
   80bf2:	bf14      	ite	ne
   80bf4:	206e      	movne	r0, #110	; 0x6e
   80bf6:	20b4      	moveq	r0, #180	; 0xb4
   80bf8:	e000      	b.n	80bfc <moveTo+0x174>

		 //	Check if almost reached the destination to slow down and make a smoother brake
		 if (((totMovement/totalPulses)>= 0.85) || ((totMovement/totalPulses)<= 0.1))
 		{
 			//speed = speed - ((totMovement/totalPulses)*150) ;
			 speed = 110;
   80bfa:	206e      	movs	r0, #110	; 0x6e
 		{
 			speed = 180;
 		}


		rightWheel(1500 + ((speed+controlValue)*direction));//New speed for rightWheel
   80bfc:	4e34      	ldr	r6, [pc, #208]	; (80cd0 <moveTo+0x248>)
   80bfe:	47b0      	blx	r6
   80c00:	4604      	mov	r4, r0
   80c02:	460d      	mov	r5, r1
   80c04:	9807      	ldr	r0, [sp, #28]
   80c06:	47b0      	blx	r6
   80c08:	e9cd 0104 	strd	r0, r1, [sp, #16]
   80c0c:	4e43      	ldr	r6, [pc, #268]	; (80d1c <moveTo+0x294>)
   80c0e:	4620      	mov	r0, r4
   80c10:	4629      	mov	r1, r5
   80c12:	e9dd 2300 	ldrd	r2, r3, [sp]
   80c16:	47b0      	blx	r6
   80c18:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80d2c <moveTo+0x2a4>
   80c1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   80c20:	47c0      	blx	r8
   80c22:	a329      	add	r3, pc, #164	; (adr r3, 80cc8 <moveTo+0x240>)
   80c24:	e9d3 2300 	ldrd	r2, r3, [r3]
   80c28:	47b0      	blx	r6
   80c2a:	4f3d      	ldr	r7, [pc, #244]	; (80d20 <moveTo+0x298>)
   80c2c:	47b8      	blx	r7
   80c2e:	4b3d      	ldr	r3, [pc, #244]	; (80d24 <moveTo+0x29c>)
   80c30:	4798      	blx	r3
		leftWheel( 1500 + ((speed-controlValue)*direction));//New speed for leftWheel
   80c32:	4620      	mov	r0, r4
   80c34:	4629      	mov	r1, r5
   80c36:	e9dd 2300 	ldrd	r2, r3, [sp]
   80c3a:	4c31      	ldr	r4, [pc, #196]	; (80d00 <moveTo+0x278>)
   80c3c:	47a0      	blx	r4
   80c3e:	4602      	mov	r2, r0
   80c40:	460b      	mov	r3, r1
   80c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   80c46:	47c0      	blx	r8
   80c48:	a31f      	add	r3, pc, #124	; (adr r3, 80cc8 <moveTo+0x240>)
   80c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   80c4e:	47b0      	blx	r6
   80c50:	47b8      	blx	r7
   80c52:	4b35      	ldr	r3, [pc, #212]	; (80d28 <moveTo+0x2a0>)
   80c54:	4798      	blx	r3
		delay_us(500);
   80c56:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80c5a:	4c20      	ldr	r4, [pc, #128]	; (80cdc <moveTo+0x254>)
   80c5c:	47a0      	blx	r4
        c1Loop = false; //Loop finished to prevent from running loop again
   80c5e:	2300      	movs	r3, #0
   80c60:	4a21      	ldr	r2, [pc, #132]	; (80ce8 <moveTo+0x260>)
   80c62:	7013      	strb	r3, [r2, #0]
        c2Loop = false;//Loop finished to prevent from running loop again
   80c64:	4a21      	ldr	r2, [pc, #132]	; (80cec <moveTo+0x264>)
   80c66:	7013      	strb	r3, [r2, #0]
		delay_us(500);
   80c68:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80c6c:	47a0      	blx	r4
		integral= (sum * (dT/Ti));
		delay_us(500);
		derivate = ((Td/dT) * (proportionalError-prevD));
		delay_us(500);
	   controlValue =(kp*(proportionalError+integral+ derivate)); //PID
	   prevD=proportionalError;
   80c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   80c72:	e9cd 2300 	strd	r2, r3, [sp]

		/**
		This while loop runs until robot reaches its destination
		checks if totalmovemnt pulses is the same or more than the total pulses needed
		**/
    while (totMovement <= totalPulses) {
   80c76:	4650      	mov	r0, sl
   80c78:	4649      	mov	r1, r9
   80c7a:	4b1a      	ldr	r3, [pc, #104]	; (80ce4 <moveTo+0x25c>)
   80c7c:	4798      	blx	r3
   80c7e:	2800      	cmp	r0, #0
   80c80:	f47f af32 	bne.w	80ae8 <moveTo+0x60>
        c2Loop = false;//Loop finished to prevent from running loop again
		delay_us(500);
      }
}

	rightWheel(1500);//Stop rightWheel
   80c84:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c88:	4b26      	ldr	r3, [pc, #152]	; (80d24 <moveTo+0x29c>)
   80c8a:	4798      	blx	r3
	leftWheel(1500);//Stop leftWheel
   80c8c:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c90:	4b25      	ldr	r3, [pc, #148]	; (80d28 <moveTo+0x2a0>)
   80c92:	4798      	blx	r3
}
   80c94:	b009      	add	sp, #36	; 0x24
   80c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c9a:	bf00      	nop
   80c9c:	f3af 8000 	nop.w
   80ca0:	e147ae14 	.word	0xe147ae14
   80ca4:	3ff6147a 	.word	0x3ff6147a
   80ca8:	11dc4771 	.word	0x11dc4771
   80cac:	3fddc477 	.word	0x3fddc477
   80cb0:	8f5c28f6 	.word	0x8f5c28f6
   80cb4:	3fe0f5c2 	.word	0x3fe0f5c2
   80cb8:	33333333 	.word	0x33333333
   80cbc:	3feb3333 	.word	0x3feb3333
   80cc0:	9999999a 	.word	0x9999999a
   80cc4:	3fb99999 	.word	0x3fb99999
   80cc8:	00000000 	.word	0x00000000
   80ccc:	40977000 	.word	0x40977000
   80cd0:	00081de5 	.word	0x00081de5
   80cd4:	00082105 	.word	0x00082105
   80cd8:	00082475 	.word	0x00082475
   80cdc:	20070001 	.word	0x20070001
   80ce0:	0008074d 	.word	0x0008074d
   80ce4:	00082a95 	.word	0x00082a95
   80ce8:	20070138 	.word	0x20070138
   80cec:	20070139 	.word	0x20070139
   80cf0:	20070a44 	.word	0x20070a44
   80cf4:	20070a46 	.word	0x20070a46
   80cf8:	00082689 	.word	0x00082689
   80cfc:	00082521 	.word	0x00082521
   80d00:	00081b49 	.word	0x00081b49
   80d04:	000823e5 	.word	0x000823e5
   80d08:	401a0000 	.word	0x401a0000
   80d0c:	00082899 	.word	0x00082899
   80d10:	00081e09 	.word	0x00081e09
   80d14:	000823bd 	.word	0x000823bd
   80d18:	000823a9 	.word	0x000823a9
   80d1c:	00081b4d 	.word	0x00081b4d
   80d20:	00082435 	.word	0x00082435
   80d24:	00080ef9 	.word	0x00080ef9
   80d28:	00080ec9 	.word	0x00080ec9
   80d2c:	00081eb1 	.word	0x00081eb1

00080d30 <rotation>:

/* This method rotates the robot around its own axis at the desired degree and speed
   @param degree rotation degree
   @param ratationSpeed rotation speed
*/
void rotation (int degree, int rotationSpeed){
   80d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80d34:	4604      	mov	r4, r0
   80d36:	460f      	mov	r7, r1
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
	int totalPulses;
	int course=1;     // rotation course, 1 to right -1 to left
	rightWheel(1500);
   80d38:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80d3c:	4b20      	ldr	r3, [pc, #128]	; (80dc0 <rotation+0x90>)
   80d3e:	4798      	blx	r3
	leftWheel(1500);
   80d40:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80d44:	4b1f      	ldr	r3, [pc, #124]	; (80dc4 <rotation+0x94>)
   80d46:	4798      	blx	r3
     if (degree<0)
   80d48:	2c00      	cmp	r4, #0
     {
		 course=-1;
		 degree=degree*course;
   80d4a:	bfba      	itte	lt
   80d4c:	4264      	neglt	r4, r4
	int course=1;     // rotation course, 1 to right -1 to left
	rightWheel(1500);
	leftWheel(1500);
     if (degree<0)
     {
		 course=-1;
   80d4e:	f04f 38ff 	movlt.w	r8, #4294967295
	int controlValue=0;
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
	int totalPulses;
	int course=1;     // rotation course, 1 to right -1 to left
   80d52:	f04f 0801 	movge.w	r8, #1
     {
		 course=-1;
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
   80d56:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   80d5a:	1064      	asrs	r4, r4, #1
	reset_Counter();
   80d5c:	4b1a      	ldr	r3, [pc, #104]	; (80dc8 <rotation+0x98>)
   80d5e:	4798      	blx	r3
*/
void rotation (int degree, int rotationSpeed){
	int controlValue=0;
	int measurementValue=0;
	int gain = 5;
	int checkValue=0;
   80d60:	2200      	movs	r2, #0
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80d62:	4e1a      	ldr	r6, [pc, #104]	; (80dcc <rotation+0x9c>)
   80d64:	4d1a      	ldr	r5, [pc, #104]	; (80dd0 <rotation+0xa0>)
		if ((counter_1+counter_2) >= checkValue)
		{
 		measurementValue = (counter_2-counter_1);
 		controlValue = (gain*measurementValue);
		// update wheels speed
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80d66:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80dc4 <rotation+0x94>
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80d6a:	e017      	b.n	80d9c <rotation+0x6c>
	{
		if ((counter_1+counter_2) >= checkValue)
   80d6c:	4293      	cmp	r3, r2
   80d6e:	db18      	blt.n	80da2 <rotation+0x72>
		{
 		measurementValue = (counter_2-counter_1);
   80d70:	ebc0 0a01 	rsb	sl, r0, r1
 		controlValue = (gain*measurementValue);
   80d74:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
		// update wheels speed
 		leftWheel(1500 + ( (rotationSpeed*course) + (controlValue*course)) );
   80d78:	eb07 000a 	add.w	r0, r7, sl
   80d7c:	fb08 f000 	mul.w	r0, r8, r0
   80d80:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   80d84:	47c8      	blx	r9
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
   80d86:	ebc7 000a 	rsb	r0, r7, sl
   80d8a:	fb08 f000 	mul.w	r0, r8, r0
   80d8e:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
   80d92:	4b0b      	ldr	r3, [pc, #44]	; (80dc0 <rotation+0x90>)
   80d94:	4798      	blx	r3
		checkValue=counter_1+counter_2;
   80d96:	8832      	ldrh	r2, [r6, #0]
   80d98:	882b      	ldrh	r3, [r5, #0]
   80d9a:	441a      	add	r2, r3
		 degree=degree*course;
     }
	// total number of pulses required for rotation
    totalPulses=((degree)/2);
	reset_Counter();
	while ((counter_1+counter_2) < totalPulses)
   80d9c:	8830      	ldrh	r0, [r6, #0]
   80d9e:	8829      	ldrh	r1, [r5, #0]
   80da0:	1843      	adds	r3, r0, r1
   80da2:	429c      	cmp	r4, r3
   80da4:	dce2      	bgt.n	80d6c <rotation+0x3c>
		rightWheel(1500 - ( (rotationSpeed*course) - (controlValue*course)) );
		checkValue=counter_1+counter_2;
		}
	}
	//  stop wheels
	rightWheel(1500);
   80da6:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80daa:	4b05      	ldr	r3, [pc, #20]	; (80dc0 <rotation+0x90>)
   80dac:	4798      	blx	r3
	leftWheel(1500);
   80dae:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80db2:	4b04      	ldr	r3, [pc, #16]	; (80dc4 <rotation+0x94>)
   80db4:	4798      	blx	r3
	reset_Counter();
   80db6:	4b04      	ldr	r3, [pc, #16]	; (80dc8 <rotation+0x98>)
   80db8:	4798      	blx	r3
   80dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80dbe:	bf00      	nop
   80dc0:	00080ef9 	.word	0x00080ef9
   80dc4:	00080ec9 	.word	0x00080ec9
   80dc8:	0008074d 	.word	0x0008074d
   80dcc:	20070a44 	.word	0x20070a44
   80dd0:	20070a46 	.word	0x20070a46

00080dd4 <initPin21>:
	
}

/* This method initialize channel instance and configure PWM channel 4 for pin 9,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin21(void){
   80dd4:	b538      	push	{r3, r4, r5, lr}
	
	    pio_configure_pin(PIN_21, PIO_TYPE_PIO_PERIPH_B);
   80dd6:	2055      	movs	r0, #85	; 0x55
   80dd8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80ddc:	4b0b      	ldr	r3, [pc, #44]	; (80e0c <initPin21+0x38>)
   80dde:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_21.channel = PWM_CHANNEL_4;
   80de0:	4b0b      	ldr	r3, [pc, #44]	; (80e10 <initPin21+0x3c>)
   80de2:	2404      	movs	r4, #4
   80de4:	601c      	str	r4, [r3, #0]
		PWM_pin_21.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80de6:	220b      	movs	r2, #11
   80de8:	605a      	str	r2, [r3, #4]
		PWM_pin_21.polarity = PWM_LOW;
   80dea:	2200      	movs	r2, #0
   80dec:	729a      	strb	r2, [r3, #10]
		PWM_pin_21.alignment = PWM_ALIGN_LEFT;
   80dee:	811a      	strh	r2, [r3, #8]
		PWM_pin_21.ul_period = 7500;
   80df0:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80df4:	6119      	str	r1, [r3, #16]
		PWM_pin_21.ul_duty = 0;
   80df6:	60da      	str	r2, [r3, #12]
		
	/*Initializing channel after setting things up*/
	pwm_channel_init(PWM, &PWM_pin_21);
   80df8:	4d06      	ldr	r5, [pc, #24]	; (80e14 <initPin21+0x40>)
   80dfa:	4628      	mov	r0, r5
   80dfc:	4619      	mov	r1, r3
   80dfe:	4b06      	ldr	r3, [pc, #24]	; (80e18 <initPin21+0x44>)
   80e00:	4798      	blx	r3
	
	/*Enabling pwm channel after initializing everything correct*/
	pwm_channel_enable(PWM, PWM_CHANNEL_4);
   80e02:	4628      	mov	r0, r5
   80e04:	4621      	mov	r1, r4
   80e06:	4b05      	ldr	r3, [pc, #20]	; (80e1c <initPin21+0x48>)
   80e08:	4798      	blx	r3
   80e0a:	bd38      	pop	{r3, r4, r5, pc}
   80e0c:	00081095 	.word	0x00081095
   80e10:	20070b3c 	.word	0x20070b3c
   80e14:	40094000 	.word	0x40094000
   80e18:	0008133d 	.word	0x0008133d
   80e1c:	00081465 	.word	0x00081465

00080e20 <initPin22>:
}

/* This method initialize channel instance and configure PWM channel 5 for pin 8,
 selecting clock A as its source clock, setting the period at 8 ms and setting the duty cycle at 0% */
void initPin22(void){
   80e20:	b538      	push	{r3, r4, r5, lr}
	   
	    pio_configure_pin(PIN_22, PIO_TYPE_PIO_PERIPH_B);
   80e22:	2056      	movs	r0, #86	; 0x56
   80e24:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80e28:	4b0b      	ldr	r3, [pc, #44]	; (80e58 <initPin22+0x38>)
   80e2a:	4798      	blx	r3
		/*Pwm channel configuration such as channel, alignments, period, duty etc...*/
		PWM_pin_22.channel = PWM_CHANNEL_5;
   80e2c:	4b0b      	ldr	r3, [pc, #44]	; (80e5c <initPin22+0x3c>)
   80e2e:	2405      	movs	r4, #5
   80e30:	601c      	str	r4, [r3, #0]
		PWM_pin_22.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80e32:	220b      	movs	r2, #11
   80e34:	605a      	str	r2, [r3, #4]
		PWM_pin_22.polarity = PWM_LOW;
   80e36:	2200      	movs	r2, #0
   80e38:	729a      	strb	r2, [r3, #10]
		PWM_pin_22.alignment = PWM_ALIGN_LEFT;
   80e3a:	811a      	strh	r2, [r3, #8]
		PWM_pin_22.ul_period = 7500;
   80e3c:	f641 514c 	movw	r1, #7500	; 0x1d4c
   80e40:	6119      	str	r1, [r3, #16]
		PWM_pin_22.ul_duty = 0;
   80e42:	60da      	str	r2, [r3, #12]
		
		/*Initializing channel after setting things up*/
		pwm_channel_init(PWM, &PWM_pin_22);
   80e44:	4d06      	ldr	r5, [pc, #24]	; (80e60 <initPin22+0x40>)
   80e46:	4628      	mov	r0, r5
   80e48:	4619      	mov	r1, r3
   80e4a:	4b06      	ldr	r3, [pc, #24]	; (80e64 <initPin22+0x44>)
   80e4c:	4798      	blx	r3
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
   80e4e:	4628      	mov	r0, r5
   80e50:	4621      	mov	r1, r4
   80e52:	4b05      	ldr	r3, [pc, #20]	; (80e68 <initPin22+0x48>)
   80e54:	4798      	blx	r3
   80e56:	bd38      	pop	{r3, r4, r5, pc}
   80e58:	00081095 	.word	0x00081095
   80e5c:	20070b14 	.word	0x20070b14
   80e60:	40094000 	.word	0x40094000
   80e64:	0008133d 	.word	0x0008133d
   80e68:	00081465 	.word	0x00081465

00080e6c <PWM_init>:
pwm_channel_t PWM_pin_21;
pwm_channel_t PWM_pin_22;


/* This method configure PWM clock   */
void PWM_init(void){
   80e6c:	b530      	push	{r4, r5, lr}
   80e6e:	b085      	sub	sp, #20
	
	//Enable the module clock for the PWM peripheral
	pmc_enable_periph_clk(ID_PWM);
   80e70:	2024      	movs	r0, #36	; 0x24
   80e72:	4b0d      	ldr	r3, [pc, #52]	; (80ea8 <PWM_init+0x3c>)
   80e74:	4798      	blx	r3
	
	/*Disable PWM channels for appropriate configuration*/
	pwm_channel_disable(PWM,PWM_CHANNEL_4);
   80e76:	4c0d      	ldr	r4, [pc, #52]	; (80eac <PWM_init+0x40>)
   80e78:	4620      	mov	r0, r4
   80e7a:	2104      	movs	r1, #4
   80e7c:	4d0c      	ldr	r5, [pc, #48]	; (80eb0 <PWM_init+0x44>)
   80e7e:	47a8      	blx	r5
	pwm_channel_disable(PWM,PWM_CHANNEL_5);
   80e80:	4620      	mov	r0, r4
   80e82:	2105      	movs	r1, #5
   80e84:	47a8      	blx	r5
	
	/*Setup clock for PWM module*/
	pwm_clock_t PWMDAC_clock_config = {
   80e86:	4b0b      	ldr	r3, [pc, #44]	; (80eb4 <PWM_init+0x48>)
   80e88:	9301      	str	r3, [sp, #4]
   80e8a:	2300      	movs	r3, #0
   80e8c:	9302      	str	r3, [sp, #8]
   80e8e:	4b0a      	ldr	r3, [pc, #40]	; (80eb8 <PWM_init+0x4c>)
   80e90:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &PWMDAC_clock_config);
   80e92:	4620      	mov	r0, r4
   80e94:	a901      	add	r1, sp, #4
   80e96:	4b09      	ldr	r3, [pc, #36]	; (80ebc <PWM_init+0x50>)
   80e98:	4798      	blx	r3
	
	//Methods for initializing PWM for pin 8 and 9
	initPin21();
   80e9a:	4b09      	ldr	r3, [pc, #36]	; (80ec0 <PWM_init+0x54>)
   80e9c:	4798      	blx	r3
	initPin22();
   80e9e:	4b09      	ldr	r3, [pc, #36]	; (80ec4 <PWM_init+0x58>)
   80ea0:	4798      	blx	r3
	
}
   80ea2:	b005      	add	sp, #20
   80ea4:	bd30      	pop	{r4, r5, pc}
   80ea6:	bf00      	nop
   80ea8:	0008124d 	.word	0x0008124d
   80eac:	40094000 	.word	0x40094000
   80eb0:	00081471 	.word	0x00081471
   80eb4:	000f4240 	.word	0x000f4240
   80eb8:	0501bd00 	.word	0x0501bd00
   80ebc:	000812fd 	.word	0x000812fd
   80ec0:	00080dd5 	.word	0x00080dd5
   80ec4:	00080e21 	.word	0x00080e21

00080ec8 <leftWheel>:
		
		/*Enabling pwm channel after initializing everything correct*/
		pwm_channel_enable(PWM, PWM_CHANNEL_5);
}
 /* This method changes the duty cycle of PWM signal on pin 9. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void leftWheel(uint32_t duty){
   80ec8:	b508      	push	{r3, lr}
	if(duty<800){
   80eca:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80ece:	d305      	bcc.n	80edc <leftWheel+0x14>
   80ed0:	f640 0298 	movw	r2, #2200	; 0x898
   80ed4:	4290      	cmp	r0, r2
   80ed6:	bf38      	it	cc
   80ed8:	4602      	movcc	r2, r0
   80eda:	e001      	b.n	80ee0 <leftWheel+0x18>
		duty=800;
   80edc:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_21, duty );
   80ee0:	4802      	ldr	r0, [pc, #8]	; (80eec <leftWheel+0x24>)
   80ee2:	4903      	ldr	r1, [pc, #12]	; (80ef0 <leftWheel+0x28>)
   80ee4:	4b03      	ldr	r3, [pc, #12]	; (80ef4 <leftWheel+0x2c>)
   80ee6:	4798      	blx	r3
   80ee8:	bd08      	pop	{r3, pc}
   80eea:	bf00      	nop
   80eec:	40094000 	.word	0x40094000
   80ef0:	20070b3c 	.word	0x20070b3c
   80ef4:	00081441 	.word	0x00081441

00080ef8 <rightWheel>:
}

 /* This method changes the duty cycle of PWM signal on pin 8. The duty cycle is limited between 0.8 ms and 2.2 ms  */
void rightWheel(uint32_t duty){
   80ef8:	b508      	push	{r3, lr}
	
	if(duty<800){
   80efa:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   80efe:	d305      	bcc.n	80f0c <rightWheel+0x14>
   80f00:	f640 0298 	movw	r2, #2200	; 0x898
   80f04:	4290      	cmp	r0, r2
   80f06:	bf38      	it	cc
   80f08:	4602      	movcc	r2, r0
   80f0a:	e001      	b.n	80f10 <rightWheel+0x18>
		duty=800;
   80f0c:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(duty>2200){
		duty=2200;
	}
	// Change the duty cycle of the PWM channel
	pwm_channel_update_duty(PWM, &PWM_pin_22, duty );
   80f10:	4802      	ldr	r0, [pc, #8]	; (80f1c <rightWheel+0x24>)
   80f12:	4903      	ldr	r1, [pc, #12]	; (80f20 <rightWheel+0x28>)
   80f14:	4b03      	ldr	r3, [pc, #12]	; (80f24 <rightWheel+0x2c>)
   80f16:	4798      	blx	r3
   80f18:	bd08      	pop	{r3, pc}
   80f1a:	bf00      	nop
   80f1c:	40094000 	.word	0x40094000
   80f20:	20070b14 	.word	0x20070b14
   80f24:	00081441 	.word	0x00081441

00080f28 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80f28:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80f2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80f2e:	4b16      	ldr	r3, [pc, #88]	; (80f88 <board_init+0x60>)
   80f30:	605a      	str	r2, [r3, #4]
   80f32:	200b      	movs	r0, #11
   80f34:	4c15      	ldr	r4, [pc, #84]	; (80f8c <board_init+0x64>)
   80f36:	47a0      	blx	r4
   80f38:	200c      	movs	r0, #12
   80f3a:	47a0      	blx	r4
   80f3c:	200d      	movs	r0, #13
   80f3e:	47a0      	blx	r4
   80f40:	200e      	movs	r0, #14
   80f42:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80f44:	203b      	movs	r0, #59	; 0x3b
   80f46:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f4a:	4c11      	ldr	r4, [pc, #68]	; (80f90 <board_init+0x68>)
   80f4c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80f4e:	2055      	movs	r0, #85	; 0x55
   80f50:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f54:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80f56:	2056      	movs	r0, #86	; 0x56
   80f58:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f5c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80f5e:	2068      	movs	r0, #104	; 0x68
   80f60:	490c      	ldr	r1, [pc, #48]	; (80f94 <board_init+0x6c>)
   80f62:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80f64:	205c      	movs	r0, #92	; 0x5c
   80f66:	490c      	ldr	r1, [pc, #48]	; (80f98 <board_init+0x70>)
   80f68:	47a0      	blx	r4
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   80f6a:	4b0c      	ldr	r3, [pc, #48]	; (80f9c <board_init+0x74>)
   80f6c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
   80f70:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80f72:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80f74:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80f7a:	6f19      	ldr	r1, [r3, #112]	; 0x70
   80f7c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
   80f80:	6719      	str	r1, [r3, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   80f82:	605a      	str	r2, [r3, #4]
   80f84:	bd10      	pop	{r4, pc}
   80f86:	bf00      	nop
   80f88:	400e1a50 	.word	0x400e1a50
   80f8c:	0008124d 	.word	0x0008124d
   80f90:	00081095 	.word	0x00081095
   80f94:	28000079 	.word	0x28000079
   80f98:	28000001 	.word	0x28000001
   80f9c:	400e0e00 	.word	0x400e0e00

00080fa0 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80fa0:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80fa4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   80fa8:	bf0c      	ite	eq
   80faa:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   80fac:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   80fae:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   80fb0:	bf0c      	ite	eq
   80fb2:	2000      	moveq	r0, #0
   80fb4:	2001      	movne	r0, #1
   80fb6:	4770      	bx	lr

00080fb8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80fb8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80fba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80fbe:	d016      	beq.n	80fee <pio_set_peripheral+0x36>
   80fc0:	d804      	bhi.n	80fcc <pio_set_peripheral+0x14>
   80fc2:	b1c1      	cbz	r1, 80ff6 <pio_set_peripheral+0x3e>
   80fc4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80fc8:	d00a      	beq.n	80fe0 <pio_set_peripheral+0x28>
   80fca:	e013      	b.n	80ff4 <pio_set_peripheral+0x3c>
   80fcc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80fd0:	d011      	beq.n	80ff6 <pio_set_peripheral+0x3e>
   80fd2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80fd6:	d00e      	beq.n	80ff6 <pio_set_peripheral+0x3e>
   80fd8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80fdc:	d10a      	bne.n	80ff4 <pio_set_peripheral+0x3c>
   80fde:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80fe0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80fe2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80fe4:	400b      	ands	r3, r1
   80fe6:	ea23 0302 	bic.w	r3, r3, r2
   80fea:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80fec:	e002      	b.n	80ff4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80fee:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80ff0:	4313      	orrs	r3, r2
   80ff2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80ff4:	6042      	str	r2, [r0, #4]
   80ff6:	4770      	bx	lr

00080ff8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80ff8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ffa:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80ffe:	bf14      	ite	ne
   81000:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81002:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81004:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81008:	bf14      	ite	ne
   8100a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8100c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8100e:	f012 0f02 	tst.w	r2, #2
   81012:	d002      	beq.n	8101a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81014:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81018:	e004      	b.n	81024 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8101a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8101e:	bf18      	it	ne
   81020:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81024:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81026:	6001      	str	r1, [r0, #0]
   81028:	4770      	bx	lr
   8102a:	bf00      	nop

0008102c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8102c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8102e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81030:	9c01      	ldr	r4, [sp, #4]
   81032:	b10c      	cbz	r4, 81038 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81034:	6641      	str	r1, [r0, #100]	; 0x64
   81036:	e000      	b.n	8103a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81038:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8103a:	b10b      	cbz	r3, 81040 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8103c:	6501      	str	r1, [r0, #80]	; 0x50
   8103e:	e000      	b.n	81042 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81040:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81042:	b10a      	cbz	r2, 81048 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81044:	6301      	str	r1, [r0, #48]	; 0x30
   81046:	e000      	b.n	8104a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81048:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8104a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8104c:	6001      	str	r1, [r0, #0]
}
   8104e:	f85d 4b04 	ldr.w	r4, [sp], #4
   81052:	4770      	bx	lr

00081054 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   81054:	f012 0f10 	tst.w	r2, #16
   81058:	d010      	beq.n	8107c <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   8105a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8105e:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   81062:	bf14      	ite	ne
   81064:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   81068:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   8106c:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   81070:	bf14      	ite	ne
   81072:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   81076:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   8107a:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   8107c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   81080:	4770      	bx	lr
   81082:	bf00      	nop

00081084 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   81084:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   81086:	6401      	str	r1, [r0, #64]	; 0x40
   81088:	4770      	bx	lr
   8108a:	bf00      	nop

0008108c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8108c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8108e:	4770      	bx	lr

00081090 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81090:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81092:	4770      	bx	lr

00081094 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81094:	b570      	push	{r4, r5, r6, lr}
   81096:	b082      	sub	sp, #8
   81098:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8109a:	0944      	lsrs	r4, r0, #5
   8109c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   810a0:	f204 7407 	addw	r4, r4, #1799	; 0x707
   810a4:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   810a6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   810aa:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   810ae:	d030      	beq.n	81112 <pio_configure_pin+0x7e>
   810b0:	d806      	bhi.n	810c0 <pio_configure_pin+0x2c>
   810b2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   810b6:	d00a      	beq.n	810ce <pio_configure_pin+0x3a>
   810b8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   810bc:	d018      	beq.n	810f0 <pio_configure_pin+0x5c>
   810be:	e049      	b.n	81154 <pio_configure_pin+0xc0>
   810c0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   810c4:	d030      	beq.n	81128 <pio_configure_pin+0x94>
   810c6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   810ca:	d02d      	beq.n	81128 <pio_configure_pin+0x94>
   810cc:	e042      	b.n	81154 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   810ce:	f000 001f 	and.w	r0, r0, #31
   810d2:	2401      	movs	r4, #1
   810d4:	4084      	lsls	r4, r0
   810d6:	4630      	mov	r0, r6
   810d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810dc:	4622      	mov	r2, r4
   810de:	4b1f      	ldr	r3, [pc, #124]	; (8115c <pio_configure_pin+0xc8>)
   810e0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   810e2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   810e6:	bf14      	ite	ne
   810e8:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   810ea:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   810ec:	2001      	movs	r0, #1
   810ee:	e032      	b.n	81156 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   810f0:	f000 001f 	and.w	r0, r0, #31
   810f4:	2401      	movs	r4, #1
   810f6:	4084      	lsls	r4, r0
   810f8:	4630      	mov	r0, r6
   810fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   810fe:	4622      	mov	r2, r4
   81100:	4b16      	ldr	r3, [pc, #88]	; (8115c <pio_configure_pin+0xc8>)
   81102:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81104:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81108:	bf14      	ite	ne
   8110a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8110c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8110e:	2001      	movs	r0, #1
   81110:	e021      	b.n	81156 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81112:	f000 011f 	and.w	r1, r0, #31
   81116:	2401      	movs	r4, #1
   81118:	4630      	mov	r0, r6
   8111a:	fa04 f101 	lsl.w	r1, r4, r1
   8111e:	462a      	mov	r2, r5
   81120:	4b0f      	ldr	r3, [pc, #60]	; (81160 <pio_configure_pin+0xcc>)
   81122:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81124:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   81126:	e016      	b.n	81156 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81128:	f000 011f 	and.w	r1, r0, #31
   8112c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8112e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81132:	ea05 0304 	and.w	r3, r5, r4
   81136:	9300      	str	r3, [sp, #0]
   81138:	4630      	mov	r0, r6
   8113a:	fa04 f101 	lsl.w	r1, r4, r1
   8113e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81142:	bf14      	ite	ne
   81144:	2200      	movne	r2, #0
   81146:	2201      	moveq	r2, #1
   81148:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8114c:	4d05      	ldr	r5, [pc, #20]	; (81164 <pio_configure_pin+0xd0>)
   8114e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   81150:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81152:	e000      	b.n	81156 <pio_configure_pin+0xc2>

	default:
		return 0;
   81154:	2000      	movs	r0, #0
	}

	return 1;
}
   81156:	b002      	add	sp, #8
   81158:	bd70      	pop	{r4, r5, r6, pc}
   8115a:	bf00      	nop
   8115c:	00080fb9 	.word	0x00080fb9
   81160:	00080ff9 	.word	0x00080ff9
   81164:	0008102d 	.word	0x0008102d

00081168 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8116c:	4604      	mov	r4, r0
   8116e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81170:	4b10      	ldr	r3, [pc, #64]	; (811b4 <pio_handler_process+0x4c>)
   81172:	4798      	blx	r3
   81174:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81176:	4620      	mov	r0, r4
   81178:	4b0f      	ldr	r3, [pc, #60]	; (811b8 <pio_handler_process+0x50>)
   8117a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8117c:	4005      	ands	r5, r0
   8117e:	d017      	beq.n	811b0 <pio_handler_process+0x48>
   81180:	4f0e      	ldr	r7, [pc, #56]	; (811bc <pio_handler_process+0x54>)
   81182:	f107 040c 	add.w	r4, r7, #12
   81186:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81188:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   8118c:	42b3      	cmp	r3, r6
   8118e:	d10a      	bne.n	811a6 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81190:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81194:	4229      	tst	r1, r5
   81196:	d006      	beq.n	811a6 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81198:	6823      	ldr	r3, [r4, #0]
   8119a:	4630      	mov	r0, r6
   8119c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8119e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   811a2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   811a6:	42bc      	cmp	r4, r7
   811a8:	d002      	beq.n	811b0 <pio_handler_process+0x48>
   811aa:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   811ac:	2d00      	cmp	r5, #0
   811ae:	d1eb      	bne.n	81188 <pio_handler_process+0x20>
   811b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   811b4:	0008108d 	.word	0x0008108d
   811b8:	00081091 	.word	0x00081091
   811bc:	20070a4c 	.word	0x20070a4c

000811c0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   811c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   811c2:	4c0b      	ldr	r4, [pc, #44]	; (811f0 <pio_handler_set+0x30>)
   811c4:	6824      	ldr	r4, [r4, #0]
   811c6:	2c06      	cmp	r4, #6
   811c8:	d810      	bhi.n	811ec <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   811ca:	4f0a      	ldr	r7, [pc, #40]	; (811f4 <pio_handler_set+0x34>)
   811cc:	0126      	lsls	r6, r4, #4
   811ce:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   811d0:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   811d2:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   811d4:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   811d6:	9906      	ldr	r1, [sp, #24]
   811d8:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   811da:	3401      	adds	r4, #1
   811dc:	4904      	ldr	r1, [pc, #16]	; (811f0 <pio_handler_set+0x30>)
   811de:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   811e0:	4611      	mov	r1, r2
   811e2:	461a      	mov	r2, r3
   811e4:	4b04      	ldr	r3, [pc, #16]	; (811f8 <pio_handler_set+0x38>)
   811e6:	4798      	blx	r3

	return 0;
   811e8:	2000      	movs	r0, #0
   811ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   811ec:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   811ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   811f0:	20070a48 	.word	0x20070a48
   811f4:	20070a4c 	.word	0x20070a4c
   811f8:	00081055 	.word	0x00081055

000811fc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   811fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   811fe:	4802      	ldr	r0, [pc, #8]	; (81208 <PIOA_Handler+0xc>)
   81200:	210b      	movs	r1, #11
   81202:	4b02      	ldr	r3, [pc, #8]	; (8120c <PIOA_Handler+0x10>)
   81204:	4798      	blx	r3
   81206:	bd08      	pop	{r3, pc}
   81208:	400e0e00 	.word	0x400e0e00
   8120c:	00081169 	.word	0x00081169

00081210 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81210:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81212:	4802      	ldr	r0, [pc, #8]	; (8121c <PIOB_Handler+0xc>)
   81214:	210c      	movs	r1, #12
   81216:	4b02      	ldr	r3, [pc, #8]	; (81220 <PIOB_Handler+0x10>)
   81218:	4798      	blx	r3
   8121a:	bd08      	pop	{r3, pc}
   8121c:	400e1000 	.word	0x400e1000
   81220:	00081169 	.word	0x00081169

00081224 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81224:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81226:	4802      	ldr	r0, [pc, #8]	; (81230 <PIOC_Handler+0xc>)
   81228:	210d      	movs	r1, #13
   8122a:	4b02      	ldr	r3, [pc, #8]	; (81234 <PIOC_Handler+0x10>)
   8122c:	4798      	blx	r3
   8122e:	bd08      	pop	{r3, pc}
   81230:	400e1200 	.word	0x400e1200
   81234:	00081169 	.word	0x00081169

00081238 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81238:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8123a:	4802      	ldr	r0, [pc, #8]	; (81244 <PIOD_Handler+0xc>)
   8123c:	210e      	movs	r1, #14
   8123e:	4b02      	ldr	r3, [pc, #8]	; (81248 <PIOD_Handler+0x10>)
   81240:	4798      	blx	r3
   81242:	bd08      	pop	{r3, pc}
   81244:	400e1400 	.word	0x400e1400
   81248:	00081169 	.word	0x00081169

0008124c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8124c:	282c      	cmp	r0, #44	; 0x2c
   8124e:	d820      	bhi.n	81292 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81250:	281f      	cmp	r0, #31
   81252:	d80d      	bhi.n	81270 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81254:	4b12      	ldr	r3, [pc, #72]	; (812a0 <pmc_enable_periph_clk+0x54>)
   81256:	699a      	ldr	r2, [r3, #24]
   81258:	2301      	movs	r3, #1
   8125a:	4083      	lsls	r3, r0
   8125c:	401a      	ands	r2, r3
   8125e:	4293      	cmp	r3, r2
   81260:	d019      	beq.n	81296 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81262:	2301      	movs	r3, #1
   81264:	fa03 f000 	lsl.w	r0, r3, r0
   81268:	4b0d      	ldr	r3, [pc, #52]	; (812a0 <pmc_enable_periph_clk+0x54>)
   8126a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8126c:	2000      	movs	r0, #0
   8126e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81270:	4b0b      	ldr	r3, [pc, #44]	; (812a0 <pmc_enable_periph_clk+0x54>)
   81272:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   81276:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81278:	2301      	movs	r3, #1
   8127a:	4083      	lsls	r3, r0
   8127c:	401a      	ands	r2, r3
   8127e:	4293      	cmp	r3, r2
   81280:	d00b      	beq.n	8129a <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   81282:	2301      	movs	r3, #1
   81284:	fa03 f000 	lsl.w	r0, r3, r0
   81288:	4b05      	ldr	r3, [pc, #20]	; (812a0 <pmc_enable_periph_clk+0x54>)
   8128a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8128e:	2000      	movs	r0, #0
   81290:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   81292:	2001      	movs	r0, #1
   81294:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81296:	2000      	movs	r0, #0
   81298:	4770      	bx	lr
   8129a:	2000      	movs	r0, #0
}
   8129c:	4770      	bx	lr
   8129e:	bf00      	nop
   812a0:	400e0600 	.word	0x400e0600

000812a4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   812a4:	b4f0      	push	{r4, r5, r6, r7}
   812a6:	b08c      	sub	sp, #48	; 0x30
   812a8:	4607      	mov	r7, r0
   812aa:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   812ac:	ac01      	add	r4, sp, #4
   812ae:	4d12      	ldr	r5, [pc, #72]	; (812f8 <pwm_clocks_generate+0x54>)
   812b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   812b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   812b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   812b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   812b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   812bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   812c0:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   812c2:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   812c4:	f852 4f04 	ldr.w	r4, [r2, #4]!
   812c8:	fbb6 f4f4 	udiv	r4, r6, r4
   812cc:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   812d0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   812d4:	d903      	bls.n	812de <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   812d6:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   812d8:	2b0b      	cmp	r3, #11
   812da:	d1f3      	bne.n	812c4 <pwm_clocks_generate+0x20>
   812dc:	e004      	b.n	812e8 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   812de:	2b0a      	cmp	r3, #10
   812e0:	d805      	bhi.n	812ee <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   812e2:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   812e6:	e004      	b.n	812f2 <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   812e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   812ec:	e001      	b.n	812f2 <pwm_clocks_generate+0x4e>
   812ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   812f2:	b00c      	add	sp, #48	; 0x30
   812f4:	bcf0      	pop	{r4, r5, r6, r7}
   812f6:	4770      	bx	lr
   812f8:	000833b8 	.word	0x000833b8

000812fc <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   812fc:	b570      	push	{r4, r5, r6, lr}
   812fe:	4606      	mov	r6, r0
   81300:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81302:	6808      	ldr	r0, [r1, #0]
   81304:	b140      	cbz	r0, 81318 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   81306:	6889      	ldr	r1, [r1, #8]
   81308:	4b0b      	ldr	r3, [pc, #44]	; (81338 <pwm_init+0x3c>)
   8130a:	4798      	blx	r3
   8130c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8130e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81312:	4298      	cmp	r0, r3
   81314:	d101      	bne.n	8131a <pwm_init+0x1e>
   81316:	e00e      	b.n	81336 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81318:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   8131a:	6860      	ldr	r0, [r4, #4]
   8131c:	b140      	cbz	r0, 81330 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8131e:	68a1      	ldr	r1, [r4, #8]
   81320:	4b05      	ldr	r3, [pc, #20]	; (81338 <pwm_init+0x3c>)
   81322:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   81324:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81328:	4298      	cmp	r0, r3
   8132a:	d004      	beq.n	81336 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   8132c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81330:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81332:	2000      	movs	r0, #0
   81334:	bd70      	pop	{r4, r5, r6, pc}
}
   81336:	bd70      	pop	{r4, r5, r6, pc}
   81338:	000812a5 	.word	0x000812a5

0008133c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   8133c:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8133e:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81340:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81342:	684a      	ldr	r2, [r1, #4]
   81344:	f002 020f 	and.w	r2, r2, #15
   81348:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   8134a:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   8134c:	432c      	orrs	r4, r5
   8134e:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   81350:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   81354:	7d8a      	ldrb	r2, [r1, #22]
   81356:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   8135a:	7dca      	ldrb	r2, [r1, #23]
   8135c:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   81360:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81362:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   81366:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   8136a:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8136e:	68cc      	ldr	r4, [r1, #12]
   81370:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   81374:	690c      	ldr	r4, [r1, #16]
   81376:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   8137a:	7d8a      	ldrb	r2, [r1, #22]
   8137c:	b13a      	cbz	r2, 8138e <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8137e:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   81380:	8b4a      	ldrh	r2, [r1, #26]
   81382:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   81386:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   8138a:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   8138e:	6c85      	ldr	r5, [r0, #72]	; 0x48
   81390:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   81394:	409a      	lsls	r2, r3
   81396:	43d2      	mvns	r2, r2
   81398:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   8139a:	7fce      	ldrb	r6, [r1, #31]
   8139c:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8139e:	7f8c      	ldrb	r4, [r1, #30]
   813a0:	409c      	lsls	r4, r3
   813a2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   813a6:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   813a8:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   813aa:	6c44      	ldr	r4, [r0, #68]	; 0x44
   813ac:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   813ae:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   813b2:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   813b4:	f891 4020 	ldrb.w	r4, [r1, #32]
   813b8:	409c      	lsls	r4, r3
   813ba:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   813be:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   813c0:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   813c2:	2201      	movs	r2, #1
   813c4:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   813c6:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   813ca:	b11c      	cbz	r4, 813d4 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   813cc:	6a04      	ldr	r4, [r0, #32]
   813ce:	4314      	orrs	r4, r2
   813d0:	6204      	str	r4, [r0, #32]
   813d2:	e003      	b.n	813dc <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   813d4:	6a04      	ldr	r4, [r0, #32]
   813d6:	ea24 0402 	bic.w	r4, r4, r2
   813da:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   813dc:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   813e0:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   813e2:	6e84      	ldr	r4, [r0, #104]	; 0x68
   813e4:	bf0c      	ite	eq
   813e6:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   813e8:	4394      	bicne	r4, r2
   813ea:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   813ec:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   813f0:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   813f2:	6e84      	ldr	r4, [r0, #104]	; 0x68
   813f4:	bf0c      	ite	eq
   813f6:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   813fa:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   813fe:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81400:	2b03      	cmp	r3, #3
   81402:	d80c      	bhi.n	8141e <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   81404:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   81406:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81408:	22ff      	movs	r2, #255	; 0xff
   8140a:	409a      	lsls	r2, r3
   8140c:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81410:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81414:	fa01 f303 	lsl.w	r3, r1, r3
   81418:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8141a:	66c3      	str	r3, [r0, #108]	; 0x6c
   8141c:	e00c      	b.n	81438 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   8141e:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81420:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   81422:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81424:	22ff      	movs	r2, #255	; 0xff
   81426:	409a      	lsls	r2, r3
   81428:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8142c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81430:	fa01 f303 	lsl.w	r3, r1, r3
   81434:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   81436:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   81438:	2000      	movs	r0, #0
   8143a:	bc70      	pop	{r4, r5, r6}
   8143c:	4770      	bx	lr
   8143e:	bf00      	nop

00081440 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   81440:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   81442:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   81444:	690b      	ldr	r3, [r1, #16]
   81446:	4293      	cmp	r3, r2
   81448:	d306      	bcc.n	81458 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   8144a:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   8144c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   81450:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   81454:	2000      	movs	r0, #0
   81456:	e001      	b.n	8145c <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   81458:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   8145c:	f85d 4b04 	ldr.w	r4, [sp], #4
   81460:	4770      	bx	lr
   81462:	bf00      	nop

00081464 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   81464:	2301      	movs	r3, #1
   81466:	fa03 f101 	lsl.w	r1, r3, r1
   8146a:	6041      	str	r1, [r0, #4]
   8146c:	4770      	bx	lr
   8146e:	bf00      	nop

00081470 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   81470:	2301      	movs	r3, #1
   81472:	fa03 f101 	lsl.w	r1, r3, r1
   81476:	6081      	str	r1, [r0, #8]
   81478:	4770      	bx	lr
   8147a:	bf00      	nop

0008147c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8147c:	e7fe      	b.n	8147c <Dummy_Handler>
   8147e:	bf00      	nop

00081480 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81480:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81482:	4b1e      	ldr	r3, [pc, #120]	; (814fc <Reset_Handler+0x7c>)
   81484:	4a1e      	ldr	r2, [pc, #120]	; (81500 <Reset_Handler+0x80>)
   81486:	429a      	cmp	r2, r3
   81488:	d003      	beq.n	81492 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8148a:	4b1e      	ldr	r3, [pc, #120]	; (81504 <Reset_Handler+0x84>)
   8148c:	4a1b      	ldr	r2, [pc, #108]	; (814fc <Reset_Handler+0x7c>)
   8148e:	429a      	cmp	r2, r3
   81490:	d304      	bcc.n	8149c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81492:	4b1d      	ldr	r3, [pc, #116]	; (81508 <Reset_Handler+0x88>)
   81494:	4a1d      	ldr	r2, [pc, #116]	; (8150c <Reset_Handler+0x8c>)
   81496:	429a      	cmp	r2, r3
   81498:	d30f      	bcc.n	814ba <Reset_Handler+0x3a>
   8149a:	e01a      	b.n	814d2 <Reset_Handler+0x52>
   8149c:	4b1c      	ldr	r3, [pc, #112]	; (81510 <Reset_Handler+0x90>)
   8149e:	4c1d      	ldr	r4, [pc, #116]	; (81514 <Reset_Handler+0x94>)
   814a0:	1ae4      	subs	r4, r4, r3
   814a2:	f024 0403 	bic.w	r4, r4, #3
   814a6:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   814a8:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   814aa:	4814      	ldr	r0, [pc, #80]	; (814fc <Reset_Handler+0x7c>)
   814ac:	4914      	ldr	r1, [pc, #80]	; (81500 <Reset_Handler+0x80>)
   814ae:	585a      	ldr	r2, [r3, r1]
   814b0:	501a      	str	r2, [r3, r0]
   814b2:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   814b4:	42a3      	cmp	r3, r4
   814b6:	d1fa      	bne.n	814ae <Reset_Handler+0x2e>
   814b8:	e7eb      	b.n	81492 <Reset_Handler+0x12>
   814ba:	4b17      	ldr	r3, [pc, #92]	; (81518 <Reset_Handler+0x98>)
   814bc:	4917      	ldr	r1, [pc, #92]	; (8151c <Reset_Handler+0x9c>)
   814be:	1ac9      	subs	r1, r1, r3
   814c0:	f021 0103 	bic.w	r1, r1, #3
   814c4:	1d1a      	adds	r2, r3, #4
   814c6:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   814c8:	2200      	movs	r2, #0
   814ca:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   814ce:	428b      	cmp	r3, r1
   814d0:	d1fb      	bne.n	814ca <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   814d2:	4a13      	ldr	r2, [pc, #76]	; (81520 <Reset_Handler+0xa0>)
   814d4:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   814d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   814dc:	4911      	ldr	r1, [pc, #68]	; (81524 <Reset_Handler+0xa4>)
   814de:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   814e0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   814e4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   814e8:	d203      	bcs.n	814f2 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   814ea:	688a      	ldr	r2, [r1, #8]
   814ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   814f0:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   814f2:	4b0d      	ldr	r3, [pc, #52]	; (81528 <Reset_Handler+0xa8>)
   814f4:	4798      	blx	r3

	/* Branch to main function */
	main();
   814f6:	4b0d      	ldr	r3, [pc, #52]	; (8152c <Reset_Handler+0xac>)
   814f8:	4798      	blx	r3
   814fa:	e7fe      	b.n	814fa <Reset_Handler+0x7a>
   814fc:	20070000 	.word	0x20070000
   81500:	0008345c 	.word	0x0008345c
   81504:	20070984 	.word	0x20070984
   81508:	20070b68 	.word	0x20070b68
   8150c:	20070984 	.word	0x20070984
   81510:	20070004 	.word	0x20070004
   81514:	20070987 	.word	0x20070987
   81518:	20070980 	.word	0x20070980
   8151c:	20070b63 	.word	0x20070b63
   81520:	00080000 	.word	0x00080000
   81524:	e000ed00 	.word	0xe000ed00
   81528:	00082ac9 	.word	0x00082ac9
   8152c:	00080149 	.word	0x00080149

00081530 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81530:	4b09      	ldr	r3, [pc, #36]	; (81558 <_sbrk+0x28>)
   81532:	681b      	ldr	r3, [r3, #0]
   81534:	b913      	cbnz	r3, 8153c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81536:	4a09      	ldr	r2, [pc, #36]	; (8155c <_sbrk+0x2c>)
   81538:	4b07      	ldr	r3, [pc, #28]	; (81558 <_sbrk+0x28>)
   8153a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8153c:	4b06      	ldr	r3, [pc, #24]	; (81558 <_sbrk+0x28>)
   8153e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81540:	181a      	adds	r2, r3, r0
   81542:	4907      	ldr	r1, [pc, #28]	; (81560 <_sbrk+0x30>)
   81544:	4291      	cmp	r1, r2
   81546:	db04      	blt.n	81552 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81548:	4610      	mov	r0, r2
   8154a:	4a03      	ldr	r2, [pc, #12]	; (81558 <_sbrk+0x28>)
   8154c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8154e:	4618      	mov	r0, r3
   81550:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81552:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81556:	4770      	bx	lr
   81558:	20070abc 	.word	0x20070abc
   8155c:	20072b68 	.word	0x20072b68
   81560:	20087ffc 	.word	0x20087ffc
   81564:	00000000 	.word	0x00000000

00081568 <atan>:
   81568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8156c:	4bb6      	ldr	r3, [pc, #728]	; (81848 <atan+0x2e0>)
   8156e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   81572:	429e      	cmp	r6, r3
   81574:	b083      	sub	sp, #12
   81576:	4604      	mov	r4, r0
   81578:	460d      	mov	r5, r1
   8157a:	4689      	mov	r9, r1
   8157c:	dd0f      	ble.n	8159e <atan+0x36>
   8157e:	49b3      	ldr	r1, [pc, #716]	; (8184c <atan+0x2e4>)
   81580:	428e      	cmp	r6, r1
   81582:	f300 80b3 	bgt.w	816ec <atan+0x184>
   81586:	f000 80ae 	beq.w	816e6 <atan+0x17e>
   8158a:	f1b9 0f00 	cmp.w	r9, #0
   8158e:	f340 80ef 	ble.w	81770 <atan+0x208>
   81592:	a191      	add	r1, pc, #580	; (adr r1, 817d8 <atan+0x270>)
   81594:	e9d1 0100 	ldrd	r0, r1, [r1]
   81598:	b003      	add	sp, #12
   8159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8159e:	4bac      	ldr	r3, [pc, #688]	; (81850 <atan+0x2e8>)
   815a0:	429e      	cmp	r6, r3
   815a2:	f300 80bd 	bgt.w	81720 <atan+0x1b8>
   815a6:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   815aa:	429e      	cmp	r6, r3
   815ac:	f340 80a7 	ble.w	816fe <atan+0x196>
   815b0:	f04f 3cff 	mov.w	ip, #4294967295
   815b4:	4622      	mov	r2, r4
   815b6:	462b      	mov	r3, r5
   815b8:	4620      	mov	r0, r4
   815ba:	4629      	mov	r1, r5
   815bc:	f8cd c004 	str.w	ip, [sp, #4]
   815c0:	f000 fc76 	bl	81eb0 <__aeabi_dmul>
   815c4:	4602      	mov	r2, r0
   815c6:	460b      	mov	r3, r1
   815c8:	4682      	mov	sl, r0
   815ca:	468b      	mov	fp, r1
   815cc:	f000 fc70 	bl	81eb0 <__aeabi_dmul>
   815d0:	a383      	add	r3, pc, #524	; (adr r3, 817e0 <atan+0x278>)
   815d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   815d6:	4606      	mov	r6, r0
   815d8:	460f      	mov	r7, r1
   815da:	f000 fc69 	bl	81eb0 <__aeabi_dmul>
   815de:	a382      	add	r3, pc, #520	; (adr r3, 817e8 <atan+0x280>)
   815e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   815e4:	f000 fab2 	bl	81b4c <__adddf3>
   815e8:	4632      	mov	r2, r6
   815ea:	463b      	mov	r3, r7
   815ec:	f000 fc60 	bl	81eb0 <__aeabi_dmul>
   815f0:	a37f      	add	r3, pc, #508	; (adr r3, 817f0 <atan+0x288>)
   815f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   815f6:	f000 faa9 	bl	81b4c <__adddf3>
   815fa:	4632      	mov	r2, r6
   815fc:	463b      	mov	r3, r7
   815fe:	f000 fc57 	bl	81eb0 <__aeabi_dmul>
   81602:	a37d      	add	r3, pc, #500	; (adr r3, 817f8 <atan+0x290>)
   81604:	e9d3 2300 	ldrd	r2, r3, [r3]
   81608:	f000 faa0 	bl	81b4c <__adddf3>
   8160c:	4632      	mov	r2, r6
   8160e:	463b      	mov	r3, r7
   81610:	f000 fc4e 	bl	81eb0 <__aeabi_dmul>
   81614:	a37a      	add	r3, pc, #488	; (adr r3, 81800 <atan+0x298>)
   81616:	e9d3 2300 	ldrd	r2, r3, [r3]
   8161a:	f000 fa97 	bl	81b4c <__adddf3>
   8161e:	4632      	mov	r2, r6
   81620:	463b      	mov	r3, r7
   81622:	f000 fc45 	bl	81eb0 <__aeabi_dmul>
   81626:	a378      	add	r3, pc, #480	; (adr r3, 81808 <atan+0x2a0>)
   81628:	e9d3 2300 	ldrd	r2, r3, [r3]
   8162c:	f000 fa8e 	bl	81b4c <__adddf3>
   81630:	4652      	mov	r2, sl
   81632:	465b      	mov	r3, fp
   81634:	f000 fc3c 	bl	81eb0 <__aeabi_dmul>
   81638:	a375      	add	r3, pc, #468	; (adr r3, 81810 <atan+0x2a8>)
   8163a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8163e:	4682      	mov	sl, r0
   81640:	468b      	mov	fp, r1
   81642:	4630      	mov	r0, r6
   81644:	4639      	mov	r1, r7
   81646:	f000 fc33 	bl	81eb0 <__aeabi_dmul>
   8164a:	a373      	add	r3, pc, #460	; (adr r3, 81818 <atan+0x2b0>)
   8164c:	e9d3 2300 	ldrd	r2, r3, [r3]
   81650:	f000 fa7a 	bl	81b48 <__aeabi_dsub>
   81654:	4632      	mov	r2, r6
   81656:	463b      	mov	r3, r7
   81658:	f000 fc2a 	bl	81eb0 <__aeabi_dmul>
   8165c:	a370      	add	r3, pc, #448	; (adr r3, 81820 <atan+0x2b8>)
   8165e:	e9d3 2300 	ldrd	r2, r3, [r3]
   81662:	f000 fa71 	bl	81b48 <__aeabi_dsub>
   81666:	4632      	mov	r2, r6
   81668:	463b      	mov	r3, r7
   8166a:	f000 fc21 	bl	81eb0 <__aeabi_dmul>
   8166e:	a36e      	add	r3, pc, #440	; (adr r3, 81828 <atan+0x2c0>)
   81670:	e9d3 2300 	ldrd	r2, r3, [r3]
   81674:	f000 fa68 	bl	81b48 <__aeabi_dsub>
   81678:	4632      	mov	r2, r6
   8167a:	463b      	mov	r3, r7
   8167c:	f000 fc18 	bl	81eb0 <__aeabi_dmul>
   81680:	a36b      	add	r3, pc, #428	; (adr r3, 81830 <atan+0x2c8>)
   81682:	e9d3 2300 	ldrd	r2, r3, [r3]
   81686:	f000 fa5f 	bl	81b48 <__aeabi_dsub>
   8168a:	4632      	mov	r2, r6
   8168c:	463b      	mov	r3, r7
   8168e:	f000 fc0f 	bl	81eb0 <__aeabi_dmul>
   81692:	f8dd c004 	ldr.w	ip, [sp, #4]
   81696:	4602      	mov	r2, r0
   81698:	f1bc 3fff 	cmp.w	ip, #4294967295
   8169c:	460b      	mov	r3, r1
   8169e:	d06b      	beq.n	81778 <atan+0x210>
   816a0:	4650      	mov	r0, sl
   816a2:	4659      	mov	r1, fp
   816a4:	ea4f 06cc 	mov.w	r6, ip, lsl #3
   816a8:	f000 fa50 	bl	81b4c <__adddf3>
   816ac:	4622      	mov	r2, r4
   816ae:	462b      	mov	r3, r5
   816b0:	f000 fbfe 	bl	81eb0 <__aeabi_dmul>
   816b4:	4f67      	ldr	r7, [pc, #412]	; (81854 <atan+0x2ec>)
   816b6:	4b68      	ldr	r3, [pc, #416]	; (81858 <atan+0x2f0>)
   816b8:	4437      	add	r7, r6
   816ba:	441e      	add	r6, r3
   816bc:	e9d6 2300 	ldrd	r2, r3, [r6]
   816c0:	f000 fa42 	bl	81b48 <__aeabi_dsub>
   816c4:	4622      	mov	r2, r4
   816c6:	462b      	mov	r3, r5
   816c8:	f000 fa3e 	bl	81b48 <__aeabi_dsub>
   816cc:	4602      	mov	r2, r0
   816ce:	460b      	mov	r3, r1
   816d0:	e9d7 0100 	ldrd	r0, r1, [r7]
   816d4:	f000 fa38 	bl	81b48 <__aeabi_dsub>
   816d8:	f1b9 0f00 	cmp.w	r9, #0
   816dc:	da0c      	bge.n	816f8 <atan+0x190>
   816de:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   816e2:	4629      	mov	r1, r5
   816e4:	e008      	b.n	816f8 <atan+0x190>
   816e6:	2800      	cmp	r0, #0
   816e8:	f43f af4f 	beq.w	8158a <atan+0x22>
   816ec:	4620      	mov	r0, r4
   816ee:	4629      	mov	r1, r5
   816f0:	4622      	mov	r2, r4
   816f2:	462b      	mov	r3, r5
   816f4:	f000 fa2a 	bl	81b4c <__adddf3>
   816f8:	b003      	add	sp, #12
   816fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816fe:	a34e      	add	r3, pc, #312	; (adr r3, 81838 <atan+0x2d0>)
   81700:	e9d3 2300 	ldrd	r2, r3, [r3]
   81704:	f000 fa22 	bl	81b4c <__adddf3>
   81708:	2200      	movs	r2, #0
   8170a:	4b54      	ldr	r3, [pc, #336]	; (8185c <atan+0x2f4>)
   8170c:	f000 fe60 	bl	823d0 <__aeabi_dcmpgt>
   81710:	2800      	cmp	r0, #0
   81712:	f43f af4d 	beq.w	815b0 <atan+0x48>
   81716:	4620      	mov	r0, r4
   81718:	4629      	mov	r1, r5
   8171a:	b003      	add	sp, #12
   8171c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81720:	f000 f8ca 	bl	818b8 <fabs>
   81724:	4b4e      	ldr	r3, [pc, #312]	; (81860 <atan+0x2f8>)
   81726:	4604      	mov	r4, r0
   81728:	429e      	cmp	r6, r3
   8172a:	460d      	mov	r5, r1
   8172c:	dc33      	bgt.n	81796 <atan+0x22e>
   8172e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   81732:	429e      	cmp	r6, r3
   81734:	f300 80a5 	bgt.w	81882 <atan+0x31a>
   81738:	4602      	mov	r2, r0
   8173a:	460b      	mov	r3, r1
   8173c:	f000 fa06 	bl	81b4c <__adddf3>
   81740:	2200      	movs	r2, #0
   81742:	4b46      	ldr	r3, [pc, #280]	; (8185c <atan+0x2f4>)
   81744:	f000 fa00 	bl	81b48 <__aeabi_dsub>
   81748:	2200      	movs	r2, #0
   8174a:	4606      	mov	r6, r0
   8174c:	460f      	mov	r7, r1
   8174e:	4620      	mov	r0, r4
   81750:	4629      	mov	r1, r5
   81752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81756:	f000 f9f9 	bl	81b4c <__adddf3>
   8175a:	4602      	mov	r2, r0
   8175c:	460b      	mov	r3, r1
   8175e:	4630      	mov	r0, r6
   81760:	4639      	mov	r1, r7
   81762:	f000 fccf 	bl	82104 <__aeabi_ddiv>
   81766:	f04f 0c00 	mov.w	ip, #0
   8176a:	4604      	mov	r4, r0
   8176c:	460d      	mov	r5, r1
   8176e:	e721      	b.n	815b4 <atan+0x4c>
   81770:	a133      	add	r1, pc, #204	; (adr r1, 81840 <atan+0x2d8>)
   81772:	e9d1 0100 	ldrd	r0, r1, [r1]
   81776:	e7bf      	b.n	816f8 <atan+0x190>
   81778:	4650      	mov	r0, sl
   8177a:	4659      	mov	r1, fp
   8177c:	f000 f9e6 	bl	81b4c <__adddf3>
   81780:	4622      	mov	r2, r4
   81782:	462b      	mov	r3, r5
   81784:	f000 fb94 	bl	81eb0 <__aeabi_dmul>
   81788:	4602      	mov	r2, r0
   8178a:	460b      	mov	r3, r1
   8178c:	4620      	mov	r0, r4
   8178e:	4629      	mov	r1, r5
   81790:	f000 f9da 	bl	81b48 <__aeabi_dsub>
   81794:	e7b0      	b.n	816f8 <atan+0x190>
   81796:	4b33      	ldr	r3, [pc, #204]	; (81864 <atan+0x2fc>)
   81798:	429e      	cmp	r6, r3
   8179a:	dc67      	bgt.n	8186c <atan+0x304>
   8179c:	2200      	movs	r2, #0
   8179e:	4b32      	ldr	r3, [pc, #200]	; (81868 <atan+0x300>)
   817a0:	f000 f9d2 	bl	81b48 <__aeabi_dsub>
   817a4:	2200      	movs	r2, #0
   817a6:	4606      	mov	r6, r0
   817a8:	460f      	mov	r7, r1
   817aa:	4620      	mov	r0, r4
   817ac:	4629      	mov	r1, r5
   817ae:	4b2e      	ldr	r3, [pc, #184]	; (81868 <atan+0x300>)
   817b0:	f000 fb7e 	bl	81eb0 <__aeabi_dmul>
   817b4:	2200      	movs	r2, #0
   817b6:	4b29      	ldr	r3, [pc, #164]	; (8185c <atan+0x2f4>)
   817b8:	f000 f9c8 	bl	81b4c <__adddf3>
   817bc:	4602      	mov	r2, r0
   817be:	460b      	mov	r3, r1
   817c0:	4630      	mov	r0, r6
   817c2:	4639      	mov	r1, r7
   817c4:	f000 fc9e 	bl	82104 <__aeabi_ddiv>
   817c8:	f04f 0c02 	mov.w	ip, #2
   817cc:	4604      	mov	r4, r0
   817ce:	460d      	mov	r5, r1
   817d0:	e6f0      	b.n	815b4 <atan+0x4c>
   817d2:	bf00      	nop
   817d4:	f3af 8000 	nop.w
   817d8:	54442d18 	.word	0x54442d18
   817dc:	3ff921fb 	.word	0x3ff921fb
   817e0:	e322da11 	.word	0xe322da11
   817e4:	3f90ad3a 	.word	0x3f90ad3a
   817e8:	24760deb 	.word	0x24760deb
   817ec:	3fa97b4b 	.word	0x3fa97b4b
   817f0:	a0d03d51 	.word	0xa0d03d51
   817f4:	3fb10d66 	.word	0x3fb10d66
   817f8:	c54c206e 	.word	0xc54c206e
   817fc:	3fb745cd 	.word	0x3fb745cd
   81800:	920083ff 	.word	0x920083ff
   81804:	3fc24924 	.word	0x3fc24924
   81808:	5555550d 	.word	0x5555550d
   8180c:	3fd55555 	.word	0x3fd55555
   81810:	2c6a6c2f 	.word	0x2c6a6c2f
   81814:	bfa2b444 	.word	0xbfa2b444
   81818:	52defd9a 	.word	0x52defd9a
   8181c:	3fadde2d 	.word	0x3fadde2d
   81820:	af749a6d 	.word	0xaf749a6d
   81824:	3fb3b0f2 	.word	0x3fb3b0f2
   81828:	fe231671 	.word	0xfe231671
   8182c:	3fbc71c6 	.word	0x3fbc71c6
   81830:	9998ebc4 	.word	0x9998ebc4
   81834:	3fc99999 	.word	0x3fc99999
   81838:	8800759c 	.word	0x8800759c
   8183c:	7e37e43c 	.word	0x7e37e43c
   81840:	54442d18 	.word	0x54442d18
   81844:	bff921fb 	.word	0xbff921fb
   81848:	440fffff 	.word	0x440fffff
   8184c:	7ff00000 	.word	0x7ff00000
   81850:	3fdbffff 	.word	0x3fdbffff
   81854:	00083408 	.word	0x00083408
   81858:	000833e8 	.word	0x000833e8
   8185c:	3ff00000 	.word	0x3ff00000
   81860:	3ff2ffff 	.word	0x3ff2ffff
   81864:	40037fff 	.word	0x40037fff
   81868:	3ff80000 	.word	0x3ff80000
   8186c:	4602      	mov	r2, r0
   8186e:	460b      	mov	r3, r1
   81870:	2000      	movs	r0, #0
   81872:	490f      	ldr	r1, [pc, #60]	; (818b0 <atan+0x348>)
   81874:	f000 fc46 	bl	82104 <__aeabi_ddiv>
   81878:	f04f 0c03 	mov.w	ip, #3
   8187c:	4604      	mov	r4, r0
   8187e:	460d      	mov	r5, r1
   81880:	e698      	b.n	815b4 <atan+0x4c>
   81882:	2200      	movs	r2, #0
   81884:	4b0b      	ldr	r3, [pc, #44]	; (818b4 <atan+0x34c>)
   81886:	f000 f95f 	bl	81b48 <__aeabi_dsub>
   8188a:	2200      	movs	r2, #0
   8188c:	4606      	mov	r6, r0
   8188e:	460f      	mov	r7, r1
   81890:	4620      	mov	r0, r4
   81892:	4629      	mov	r1, r5
   81894:	4b07      	ldr	r3, [pc, #28]	; (818b4 <atan+0x34c>)
   81896:	f000 f959 	bl	81b4c <__adddf3>
   8189a:	4602      	mov	r2, r0
   8189c:	460b      	mov	r3, r1
   8189e:	4630      	mov	r0, r6
   818a0:	4639      	mov	r1, r7
   818a2:	f000 fc2f 	bl	82104 <__aeabi_ddiv>
   818a6:	f04f 0c01 	mov.w	ip, #1
   818aa:	4604      	mov	r4, r0
   818ac:	460d      	mov	r5, r1
   818ae:	e681      	b.n	815b4 <atan+0x4c>
   818b0:	bff00000 	.word	0xbff00000
   818b4:	3ff00000 	.word	0x3ff00000

000818b8 <fabs>:
   818b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   818bc:	4770      	bx	lr
   818be:	bf00      	nop

000818c0 <sqrt>:
   818c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   818c4:	b08a      	sub	sp, #40	; 0x28
   818c6:	4604      	mov	r4, r0
   818c8:	460d      	mov	r5, r1
   818ca:	f000 f84f 	bl	8196c <__ieee754_sqrt>
   818ce:	f8df a098 	ldr.w	sl, [pc, #152]	; 81968 <sqrt+0xa8>
   818d2:	4606      	mov	r6, r0
   818d4:	f99a 3000 	ldrsb.w	r3, [sl]
   818d8:	460f      	mov	r7, r1
   818da:	3301      	adds	r3, #1
   818dc:	d00f      	beq.n	818fe <sqrt+0x3e>
   818de:	4620      	mov	r0, r4
   818e0:	4629      	mov	r1, r5
   818e2:	f000 f903 	bl	81aec <__fpclassifyd>
   818e6:	b150      	cbz	r0, 818fe <sqrt+0x3e>
   818e8:	f04f 0800 	mov.w	r8, #0
   818ec:	f04f 0900 	mov.w	r9, #0
   818f0:	4642      	mov	r2, r8
   818f2:	464b      	mov	r3, r9
   818f4:	4620      	mov	r0, r4
   818f6:	4629      	mov	r1, r5
   818f8:	f000 fd4c 	bl	82394 <__aeabi_dcmplt>
   818fc:	b920      	cbnz	r0, 81908 <sqrt+0x48>
   818fe:	4630      	mov	r0, r6
   81900:	4639      	mov	r1, r7
   81902:	b00a      	add	sp, #40	; 0x28
   81904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81908:	4916      	ldr	r1, [pc, #88]	; (81964 <sqrt+0xa4>)
   8190a:	f89a 6000 	ldrb.w	r6, [sl]
   8190e:	2201      	movs	r2, #1
   81910:	2300      	movs	r3, #0
   81912:	e9cd 4504 	strd	r4, r5, [sp, #16]
   81916:	e9cd 4502 	strd	r4, r5, [sp, #8]
   8191a:	9101      	str	r1, [sp, #4]
   8191c:	9200      	str	r2, [sp, #0]
   8191e:	9308      	str	r3, [sp, #32]
   81920:	b966      	cbnz	r6, 8193c <sqrt+0x7c>
   81922:	e9cd 8906 	strd	r8, r9, [sp, #24]
   81926:	4668      	mov	r0, sp
   81928:	f000 f908 	bl	81b3c <matherr>
   8192c:	b180      	cbz	r0, 81950 <sqrt+0x90>
   8192e:	9b08      	ldr	r3, [sp, #32]
   81930:	b99b      	cbnz	r3, 8195a <sqrt+0x9a>
   81932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   81936:	b00a      	add	sp, #40	; 0x28
   81938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8193c:	4640      	mov	r0, r8
   8193e:	4649      	mov	r1, r9
   81940:	4642      	mov	r2, r8
   81942:	464b      	mov	r3, r9
   81944:	f000 fbde 	bl	82104 <__aeabi_ddiv>
   81948:	2e02      	cmp	r6, #2
   8194a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   8194e:	d1ea      	bne.n	81926 <sqrt+0x66>
   81950:	f001 f8b4 	bl	82abc <__errno>
   81954:	2321      	movs	r3, #33	; 0x21
   81956:	6003      	str	r3, [r0, #0]
   81958:	e7e9      	b.n	8192e <sqrt+0x6e>
   8195a:	f001 f8af 	bl	82abc <__errno>
   8195e:	9b08      	ldr	r3, [sp, #32]
   81960:	6003      	str	r3, [r0, #0]
   81962:	e7e6      	b.n	81932 <sqrt+0x72>
   81964:	00083428 	.word	0x00083428
   81968:	20070140 	.word	0x20070140

0008196c <__ieee754_sqrt>:
   8196c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   81970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81974:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
   81978:	f8df 816c 	ldr.w	r8, [pc, #364]	; 81ae8 <__ieee754_sqrt+0x17c>
   8197c:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   81980:	45c4      	cmp	ip, r8
   81982:	4606      	mov	r6, r0
   81984:	460f      	mov	r7, r1
   81986:	460b      	mov	r3, r1
   81988:	4602      	mov	r2, r0
   8198a:	f000 808f 	beq.w	81aac <__ieee754_sqrt+0x140>
   8198e:	2900      	cmp	r1, #0
   81990:	dd6f      	ble.n	81a72 <__ieee754_sqrt+0x106>
   81992:	150f      	asrs	r7, r1, #20
   81994:	d078      	beq.n	81a88 <__ieee754_sqrt+0x11c>
   81996:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   8199a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8199e:	07f9      	lsls	r1, r7, #31
   819a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   819a4:	d460      	bmi.n	81a68 <__ieee754_sqrt+0xfc>
   819a6:	0fd1      	lsrs	r1, r2, #31
   819a8:	f04f 0c00 	mov.w	ip, #0
   819ac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   819b0:	107f      	asrs	r7, r7, #1
   819b2:	0052      	lsls	r2, r2, #1
   819b4:	4665      	mov	r5, ip
   819b6:	2016      	movs	r0, #22
   819b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   819bc:	186c      	adds	r4, r5, r1
   819be:	429c      	cmp	r4, r3
   819c0:	ea4f 76d2 	mov.w	r6, r2, lsr #31
   819c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
   819c8:	dc02      	bgt.n	819d0 <__ieee754_sqrt+0x64>
   819ca:	1b1b      	subs	r3, r3, r4
   819cc:	1865      	adds	r5, r4, r1
   819ce:	448c      	add	ip, r1
   819d0:	3801      	subs	r0, #1
   819d2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   819d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
   819da:	d1ef      	bne.n	819bc <__ieee754_sqrt+0x50>
   819dc:	4680      	mov	r8, r0
   819de:	2620      	movs	r6, #32
   819e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   819e4:	e009      	b.n	819fa <__ieee754_sqrt+0x8e>
   819e6:	d023      	beq.n	81a30 <__ieee754_sqrt+0xc4>
   819e8:	0fd4      	lsrs	r4, r2, #31
   819ea:	3e01      	subs	r6, #1
   819ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
   819f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   819f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
   819f8:	d01e      	beq.n	81a38 <__ieee754_sqrt+0xcc>
   819fa:	42ab      	cmp	r3, r5
   819fc:	eb01 0408 	add.w	r4, r1, r8
   81a00:	ddf1      	ble.n	819e6 <__ieee754_sqrt+0x7a>
   81a02:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
   81a06:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
   81a0a:	eb04 0801 	add.w	r8, r4, r1
   81a0e:	d009      	beq.n	81a24 <__ieee754_sqrt+0xb8>
   81a10:	46a9      	mov	r9, r5
   81a12:	1b5b      	subs	r3, r3, r5
   81a14:	4294      	cmp	r4, r2
   81a16:	bf88      	it	hi
   81a18:	f103 33ff 	addhi.w	r3, r3, #4294967295
   81a1c:	1b12      	subs	r2, r2, r4
   81a1e:	4408      	add	r0, r1
   81a20:	464d      	mov	r5, r9
   81a22:	e7e1      	b.n	819e8 <__ieee754_sqrt+0x7c>
   81a24:	f1b8 0f00 	cmp.w	r8, #0
   81a28:	dbf2      	blt.n	81a10 <__ieee754_sqrt+0xa4>
   81a2a:	f105 0901 	add.w	r9, r5, #1
   81a2e:	e7f0      	b.n	81a12 <__ieee754_sqrt+0xa6>
   81a30:	4294      	cmp	r4, r2
   81a32:	d9e6      	bls.n	81a02 <__ieee754_sqrt+0x96>
   81a34:	461d      	mov	r5, r3
   81a36:	e7d7      	b.n	819e8 <__ieee754_sqrt+0x7c>
   81a38:	431a      	orrs	r2, r3
   81a3a:	d004      	beq.n	81a46 <__ieee754_sqrt+0xda>
   81a3c:	1c43      	adds	r3, r0, #1
   81a3e:	d041      	beq.n	81ac4 <__ieee754_sqrt+0x158>
   81a40:	f000 0301 	and.w	r3, r0, #1
   81a44:	4418      	add	r0, r3
   81a46:	0846      	lsrs	r6, r0, #1
   81a48:	ea4f 036c 	mov.w	r3, ip, asr #1
   81a4c:	f01c 0f01 	tst.w	ip, #1
   81a50:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   81a54:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81a58:	bf18      	it	ne
   81a5a:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
   81a5e:	eb03 5107 	add.w	r1, r3, r7, lsl #20
   81a62:	4630      	mov	r0, r6
   81a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a68:	0fd1      	lsrs	r1, r2, #31
   81a6a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   81a6e:	0052      	lsls	r2, r2, #1
   81a70:	e799      	b.n	819a6 <__ieee754_sqrt+0x3a>
   81a72:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   81a76:	4303      	orrs	r3, r0
   81a78:	d022      	beq.n	81ac0 <__ieee754_sqrt+0x154>
   81a7a:	bb51      	cbnz	r1, 81ad2 <__ieee754_sqrt+0x166>
   81a7c:	460f      	mov	r7, r1
   81a7e:	0ad3      	lsrs	r3, r2, #11
   81a80:	3f15      	subs	r7, #21
   81a82:	0552      	lsls	r2, r2, #21
   81a84:	2b00      	cmp	r3, #0
   81a86:	d0fa      	beq.n	81a7e <__ieee754_sqrt+0x112>
   81a88:	f413 1180 	ands.w	r1, r3, #1048576	; 0x100000
   81a8c:	d11d      	bne.n	81aca <__ieee754_sqrt+0x15e>
   81a8e:	005b      	lsls	r3, r3, #1
   81a90:	02d8      	lsls	r0, r3, #11
   81a92:	f101 0101 	add.w	r1, r1, #1
   81a96:	d5fa      	bpl.n	81a8e <__ieee754_sqrt+0x122>
   81a98:	f1c1 0001 	rsb	r0, r1, #1
   81a9c:	f1c1 0420 	rsb	r4, r1, #32
   81aa0:	fa22 f404 	lsr.w	r4, r2, r4
   81aa4:	4407      	add	r7, r0
   81aa6:	408a      	lsls	r2, r1
   81aa8:	4323      	orrs	r3, r4
   81aaa:	e774      	b.n	81996 <__ieee754_sqrt+0x2a>
   81aac:	4602      	mov	r2, r0
   81aae:	460b      	mov	r3, r1
   81ab0:	f000 f9fe 	bl	81eb0 <__aeabi_dmul>
   81ab4:	4632      	mov	r2, r6
   81ab6:	463b      	mov	r3, r7
   81ab8:	f000 f848 	bl	81b4c <__adddf3>
   81abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81ac4:	f10c 0c01 	add.w	ip, ip, #1
   81ac8:	e7be      	b.n	81a48 <__ieee754_sqrt+0xdc>
   81aca:	2420      	movs	r4, #32
   81acc:	2001      	movs	r0, #1
   81ace:	2100      	movs	r1, #0
   81ad0:	e7e6      	b.n	81aa0 <__ieee754_sqrt+0x134>
   81ad2:	4602      	mov	r2, r0
   81ad4:	460b      	mov	r3, r1
   81ad6:	f000 f837 	bl	81b48 <__aeabi_dsub>
   81ada:	4602      	mov	r2, r0
   81adc:	460b      	mov	r3, r1
   81ade:	f000 fb11 	bl	82104 <__aeabi_ddiv>
   81ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81ae6:	bf00      	nop
   81ae8:	7ff00000 	.word	0x7ff00000

00081aec <__fpclassifyd>:
   81aec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81af0:	b410      	push	{r4}
   81af2:	d008      	beq.n	81b06 <__fpclassifyd+0x1a>
   81af4:	4a0f      	ldr	r2, [pc, #60]	; (81b34 <__fpclassifyd+0x48>)
   81af6:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   81afa:	4294      	cmp	r4, r2
   81afc:	d80a      	bhi.n	81b14 <__fpclassifyd+0x28>
   81afe:	2004      	movs	r0, #4
   81b00:	f85d 4b04 	ldr.w	r4, [sp], #4
   81b04:	4770      	bx	lr
   81b06:	2800      	cmp	r0, #0
   81b08:	bf0c      	ite	eq
   81b0a:	2002      	moveq	r0, #2
   81b0c:	2003      	movne	r0, #3
   81b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
   81b12:	4770      	bx	lr
   81b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81b18:	d201      	bcs.n	81b1e <__fpclassifyd+0x32>
   81b1a:	2003      	movs	r0, #3
   81b1c:	e7f7      	b.n	81b0e <__fpclassifyd+0x22>
   81b1e:	4a06      	ldr	r2, [pc, #24]	; (81b38 <__fpclassifyd+0x4c>)
   81b20:	4293      	cmp	r3, r2
   81b22:	d001      	beq.n	81b28 <__fpclassifyd+0x3c>
   81b24:	2000      	movs	r0, #0
   81b26:	e7f2      	b.n	81b0e <__fpclassifyd+0x22>
   81b28:	f1d0 0001 	rsbs	r0, r0, #1
   81b2c:	bf38      	it	cc
   81b2e:	2000      	movcc	r0, #0
   81b30:	e7ed      	b.n	81b0e <__fpclassifyd+0x22>
   81b32:	bf00      	nop
   81b34:	7fdfffff 	.word	0x7fdfffff
   81b38:	7ff00000 	.word	0x7ff00000

00081b3c <matherr>:
   81b3c:	2000      	movs	r0, #0
   81b3e:	4770      	bx	lr

00081b40 <__aeabi_drsub>:
   81b40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81b44:	e002      	b.n	81b4c <__adddf3>
   81b46:	bf00      	nop

00081b48 <__aeabi_dsub>:
   81b48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081b4c <__adddf3>:
   81b4c:	b530      	push	{r4, r5, lr}
   81b4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81b52:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81b56:	ea94 0f05 	teq	r4, r5
   81b5a:	bf08      	it	eq
   81b5c:	ea90 0f02 	teqeq	r0, r2
   81b60:	bf1f      	itttt	ne
   81b62:	ea54 0c00 	orrsne.w	ip, r4, r0
   81b66:	ea55 0c02 	orrsne.w	ip, r5, r2
   81b6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81b6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81b72:	f000 80e2 	beq.w	81d3a <__adddf3+0x1ee>
   81b76:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81b7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81b7e:	bfb8      	it	lt
   81b80:	426d      	neglt	r5, r5
   81b82:	dd0c      	ble.n	81b9e <__adddf3+0x52>
   81b84:	442c      	add	r4, r5
   81b86:	ea80 0202 	eor.w	r2, r0, r2
   81b8a:	ea81 0303 	eor.w	r3, r1, r3
   81b8e:	ea82 0000 	eor.w	r0, r2, r0
   81b92:	ea83 0101 	eor.w	r1, r3, r1
   81b96:	ea80 0202 	eor.w	r2, r0, r2
   81b9a:	ea81 0303 	eor.w	r3, r1, r3
   81b9e:	2d36      	cmp	r5, #54	; 0x36
   81ba0:	bf88      	it	hi
   81ba2:	bd30      	pophi	{r4, r5, pc}
   81ba4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81ba8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81bac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81bb0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81bb4:	d002      	beq.n	81bbc <__adddf3+0x70>
   81bb6:	4240      	negs	r0, r0
   81bb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81bbc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81bc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81bc4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81bc8:	d002      	beq.n	81bd0 <__adddf3+0x84>
   81bca:	4252      	negs	r2, r2
   81bcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81bd0:	ea94 0f05 	teq	r4, r5
   81bd4:	f000 80a7 	beq.w	81d26 <__adddf3+0x1da>
   81bd8:	f1a4 0401 	sub.w	r4, r4, #1
   81bdc:	f1d5 0e20 	rsbs	lr, r5, #32
   81be0:	db0d      	blt.n	81bfe <__adddf3+0xb2>
   81be2:	fa02 fc0e 	lsl.w	ip, r2, lr
   81be6:	fa22 f205 	lsr.w	r2, r2, r5
   81bea:	1880      	adds	r0, r0, r2
   81bec:	f141 0100 	adc.w	r1, r1, #0
   81bf0:	fa03 f20e 	lsl.w	r2, r3, lr
   81bf4:	1880      	adds	r0, r0, r2
   81bf6:	fa43 f305 	asr.w	r3, r3, r5
   81bfa:	4159      	adcs	r1, r3
   81bfc:	e00e      	b.n	81c1c <__adddf3+0xd0>
   81bfe:	f1a5 0520 	sub.w	r5, r5, #32
   81c02:	f10e 0e20 	add.w	lr, lr, #32
   81c06:	2a01      	cmp	r2, #1
   81c08:	fa03 fc0e 	lsl.w	ip, r3, lr
   81c0c:	bf28      	it	cs
   81c0e:	f04c 0c02 	orrcs.w	ip, ip, #2
   81c12:	fa43 f305 	asr.w	r3, r3, r5
   81c16:	18c0      	adds	r0, r0, r3
   81c18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81c1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81c20:	d507      	bpl.n	81c32 <__adddf3+0xe6>
   81c22:	f04f 0e00 	mov.w	lr, #0
   81c26:	f1dc 0c00 	rsbs	ip, ip, #0
   81c2a:	eb7e 0000 	sbcs.w	r0, lr, r0
   81c2e:	eb6e 0101 	sbc.w	r1, lr, r1
   81c32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81c36:	d31b      	bcc.n	81c70 <__adddf3+0x124>
   81c38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81c3c:	d30c      	bcc.n	81c58 <__adddf3+0x10c>
   81c3e:	0849      	lsrs	r1, r1, #1
   81c40:	ea5f 0030 	movs.w	r0, r0, rrx
   81c44:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81c48:	f104 0401 	add.w	r4, r4, #1
   81c4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81c50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81c54:	f080 809a 	bcs.w	81d8c <__adddf3+0x240>
   81c58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81c5c:	bf08      	it	eq
   81c5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81c62:	f150 0000 	adcs.w	r0, r0, #0
   81c66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81c6a:	ea41 0105 	orr.w	r1, r1, r5
   81c6e:	bd30      	pop	{r4, r5, pc}
   81c70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81c74:	4140      	adcs	r0, r0
   81c76:	eb41 0101 	adc.w	r1, r1, r1
   81c7a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81c7e:	f1a4 0401 	sub.w	r4, r4, #1
   81c82:	d1e9      	bne.n	81c58 <__adddf3+0x10c>
   81c84:	f091 0f00 	teq	r1, #0
   81c88:	bf04      	itt	eq
   81c8a:	4601      	moveq	r1, r0
   81c8c:	2000      	moveq	r0, #0
   81c8e:	fab1 f381 	clz	r3, r1
   81c92:	bf08      	it	eq
   81c94:	3320      	addeq	r3, #32
   81c96:	f1a3 030b 	sub.w	r3, r3, #11
   81c9a:	f1b3 0220 	subs.w	r2, r3, #32
   81c9e:	da0c      	bge.n	81cba <__adddf3+0x16e>
   81ca0:	320c      	adds	r2, #12
   81ca2:	dd08      	ble.n	81cb6 <__adddf3+0x16a>
   81ca4:	f102 0c14 	add.w	ip, r2, #20
   81ca8:	f1c2 020c 	rsb	r2, r2, #12
   81cac:	fa01 f00c 	lsl.w	r0, r1, ip
   81cb0:	fa21 f102 	lsr.w	r1, r1, r2
   81cb4:	e00c      	b.n	81cd0 <__adddf3+0x184>
   81cb6:	f102 0214 	add.w	r2, r2, #20
   81cba:	bfd8      	it	le
   81cbc:	f1c2 0c20 	rsble	ip, r2, #32
   81cc0:	fa01 f102 	lsl.w	r1, r1, r2
   81cc4:	fa20 fc0c 	lsr.w	ip, r0, ip
   81cc8:	bfdc      	itt	le
   81cca:	ea41 010c 	orrle.w	r1, r1, ip
   81cce:	4090      	lslle	r0, r2
   81cd0:	1ae4      	subs	r4, r4, r3
   81cd2:	bfa2      	ittt	ge
   81cd4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81cd8:	4329      	orrge	r1, r5
   81cda:	bd30      	popge	{r4, r5, pc}
   81cdc:	ea6f 0404 	mvn.w	r4, r4
   81ce0:	3c1f      	subs	r4, #31
   81ce2:	da1c      	bge.n	81d1e <__adddf3+0x1d2>
   81ce4:	340c      	adds	r4, #12
   81ce6:	dc0e      	bgt.n	81d06 <__adddf3+0x1ba>
   81ce8:	f104 0414 	add.w	r4, r4, #20
   81cec:	f1c4 0220 	rsb	r2, r4, #32
   81cf0:	fa20 f004 	lsr.w	r0, r0, r4
   81cf4:	fa01 f302 	lsl.w	r3, r1, r2
   81cf8:	ea40 0003 	orr.w	r0, r0, r3
   81cfc:	fa21 f304 	lsr.w	r3, r1, r4
   81d00:	ea45 0103 	orr.w	r1, r5, r3
   81d04:	bd30      	pop	{r4, r5, pc}
   81d06:	f1c4 040c 	rsb	r4, r4, #12
   81d0a:	f1c4 0220 	rsb	r2, r4, #32
   81d0e:	fa20 f002 	lsr.w	r0, r0, r2
   81d12:	fa01 f304 	lsl.w	r3, r1, r4
   81d16:	ea40 0003 	orr.w	r0, r0, r3
   81d1a:	4629      	mov	r1, r5
   81d1c:	bd30      	pop	{r4, r5, pc}
   81d1e:	fa21 f004 	lsr.w	r0, r1, r4
   81d22:	4629      	mov	r1, r5
   81d24:	bd30      	pop	{r4, r5, pc}
   81d26:	f094 0f00 	teq	r4, #0
   81d2a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81d2e:	bf06      	itte	eq
   81d30:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81d34:	3401      	addeq	r4, #1
   81d36:	3d01      	subne	r5, #1
   81d38:	e74e      	b.n	81bd8 <__adddf3+0x8c>
   81d3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81d3e:	bf18      	it	ne
   81d40:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81d44:	d029      	beq.n	81d9a <__adddf3+0x24e>
   81d46:	ea94 0f05 	teq	r4, r5
   81d4a:	bf08      	it	eq
   81d4c:	ea90 0f02 	teqeq	r0, r2
   81d50:	d005      	beq.n	81d5e <__adddf3+0x212>
   81d52:	ea54 0c00 	orrs.w	ip, r4, r0
   81d56:	bf04      	itt	eq
   81d58:	4619      	moveq	r1, r3
   81d5a:	4610      	moveq	r0, r2
   81d5c:	bd30      	pop	{r4, r5, pc}
   81d5e:	ea91 0f03 	teq	r1, r3
   81d62:	bf1e      	ittt	ne
   81d64:	2100      	movne	r1, #0
   81d66:	2000      	movne	r0, #0
   81d68:	bd30      	popne	{r4, r5, pc}
   81d6a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81d6e:	d105      	bne.n	81d7c <__adddf3+0x230>
   81d70:	0040      	lsls	r0, r0, #1
   81d72:	4149      	adcs	r1, r1
   81d74:	bf28      	it	cs
   81d76:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81d7a:	bd30      	pop	{r4, r5, pc}
   81d7c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81d80:	bf3c      	itt	cc
   81d82:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81d86:	bd30      	popcc	{r4, r5, pc}
   81d88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81d8c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81d90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81d94:	f04f 0000 	mov.w	r0, #0
   81d98:	bd30      	pop	{r4, r5, pc}
   81d9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81d9e:	bf1a      	itte	ne
   81da0:	4619      	movne	r1, r3
   81da2:	4610      	movne	r0, r2
   81da4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81da8:	bf1c      	itt	ne
   81daa:	460b      	movne	r3, r1
   81dac:	4602      	movne	r2, r0
   81dae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81db2:	bf06      	itte	eq
   81db4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81db8:	ea91 0f03 	teqeq	r1, r3
   81dbc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81dc0:	bd30      	pop	{r4, r5, pc}
   81dc2:	bf00      	nop

00081dc4 <__aeabi_ui2d>:
   81dc4:	f090 0f00 	teq	r0, #0
   81dc8:	bf04      	itt	eq
   81dca:	2100      	moveq	r1, #0
   81dcc:	4770      	bxeq	lr
   81dce:	b530      	push	{r4, r5, lr}
   81dd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81dd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81dd8:	f04f 0500 	mov.w	r5, #0
   81ddc:	f04f 0100 	mov.w	r1, #0
   81de0:	e750      	b.n	81c84 <__adddf3+0x138>
   81de2:	bf00      	nop

00081de4 <__aeabi_i2d>:
   81de4:	f090 0f00 	teq	r0, #0
   81de8:	bf04      	itt	eq
   81dea:	2100      	moveq	r1, #0
   81dec:	4770      	bxeq	lr
   81dee:	b530      	push	{r4, r5, lr}
   81df0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81df4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81df8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81dfc:	bf48      	it	mi
   81dfe:	4240      	negmi	r0, r0
   81e00:	f04f 0100 	mov.w	r1, #0
   81e04:	e73e      	b.n	81c84 <__adddf3+0x138>
   81e06:	bf00      	nop

00081e08 <__aeabi_f2d>:
   81e08:	0042      	lsls	r2, r0, #1
   81e0a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81e0e:	ea4f 0131 	mov.w	r1, r1, rrx
   81e12:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81e16:	bf1f      	itttt	ne
   81e18:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81e1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81e20:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81e24:	4770      	bxne	lr
   81e26:	f092 0f00 	teq	r2, #0
   81e2a:	bf14      	ite	ne
   81e2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81e30:	4770      	bxeq	lr
   81e32:	b530      	push	{r4, r5, lr}
   81e34:	f44f 7460 	mov.w	r4, #896	; 0x380
   81e38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81e3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81e40:	e720      	b.n	81c84 <__adddf3+0x138>
   81e42:	bf00      	nop

00081e44 <__aeabi_ul2d>:
   81e44:	ea50 0201 	orrs.w	r2, r0, r1
   81e48:	bf08      	it	eq
   81e4a:	4770      	bxeq	lr
   81e4c:	b530      	push	{r4, r5, lr}
   81e4e:	f04f 0500 	mov.w	r5, #0
   81e52:	e00a      	b.n	81e6a <__aeabi_l2d+0x16>

00081e54 <__aeabi_l2d>:
   81e54:	ea50 0201 	orrs.w	r2, r0, r1
   81e58:	bf08      	it	eq
   81e5a:	4770      	bxeq	lr
   81e5c:	b530      	push	{r4, r5, lr}
   81e5e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81e62:	d502      	bpl.n	81e6a <__aeabi_l2d+0x16>
   81e64:	4240      	negs	r0, r0
   81e66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81e6a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81e6e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81e72:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81e76:	f43f aedc 	beq.w	81c32 <__adddf3+0xe6>
   81e7a:	f04f 0203 	mov.w	r2, #3
   81e7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81e82:	bf18      	it	ne
   81e84:	3203      	addne	r2, #3
   81e86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81e8a:	bf18      	it	ne
   81e8c:	3203      	addne	r2, #3
   81e8e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81e92:	f1c2 0320 	rsb	r3, r2, #32
   81e96:	fa00 fc03 	lsl.w	ip, r0, r3
   81e9a:	fa20 f002 	lsr.w	r0, r0, r2
   81e9e:	fa01 fe03 	lsl.w	lr, r1, r3
   81ea2:	ea40 000e 	orr.w	r0, r0, lr
   81ea6:	fa21 f102 	lsr.w	r1, r1, r2
   81eaa:	4414      	add	r4, r2
   81eac:	e6c1      	b.n	81c32 <__adddf3+0xe6>
   81eae:	bf00      	nop

00081eb0 <__aeabi_dmul>:
   81eb0:	b570      	push	{r4, r5, r6, lr}
   81eb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81eb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81eba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81ebe:	bf1d      	ittte	ne
   81ec0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81ec4:	ea94 0f0c 	teqne	r4, ip
   81ec8:	ea95 0f0c 	teqne	r5, ip
   81ecc:	f000 f8de 	bleq	8208c <__aeabi_dmul+0x1dc>
   81ed0:	442c      	add	r4, r5
   81ed2:	ea81 0603 	eor.w	r6, r1, r3
   81ed6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81eda:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81ede:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81ee2:	bf18      	it	ne
   81ee4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81ee8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81ef0:	d038      	beq.n	81f64 <__aeabi_dmul+0xb4>
   81ef2:	fba0 ce02 	umull	ip, lr, r0, r2
   81ef6:	f04f 0500 	mov.w	r5, #0
   81efa:	fbe1 e502 	umlal	lr, r5, r1, r2
   81efe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81f02:	fbe0 e503 	umlal	lr, r5, r0, r3
   81f06:	f04f 0600 	mov.w	r6, #0
   81f0a:	fbe1 5603 	umlal	r5, r6, r1, r3
   81f0e:	f09c 0f00 	teq	ip, #0
   81f12:	bf18      	it	ne
   81f14:	f04e 0e01 	orrne.w	lr, lr, #1
   81f18:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81f1c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81f20:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81f24:	d204      	bcs.n	81f30 <__aeabi_dmul+0x80>
   81f26:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81f2a:	416d      	adcs	r5, r5
   81f2c:	eb46 0606 	adc.w	r6, r6, r6
   81f30:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81f34:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81f38:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81f3c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81f40:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81f44:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81f48:	bf88      	it	hi
   81f4a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81f4e:	d81e      	bhi.n	81f8e <__aeabi_dmul+0xde>
   81f50:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81f54:	bf08      	it	eq
   81f56:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81f5a:	f150 0000 	adcs.w	r0, r0, #0
   81f5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81f62:	bd70      	pop	{r4, r5, r6, pc}
   81f64:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81f68:	ea46 0101 	orr.w	r1, r6, r1
   81f6c:	ea40 0002 	orr.w	r0, r0, r2
   81f70:	ea81 0103 	eor.w	r1, r1, r3
   81f74:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81f78:	bfc2      	ittt	gt
   81f7a:	ebd4 050c 	rsbsgt	r5, r4, ip
   81f7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81f82:	bd70      	popgt	{r4, r5, r6, pc}
   81f84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81f88:	f04f 0e00 	mov.w	lr, #0
   81f8c:	3c01      	subs	r4, #1
   81f8e:	f300 80ab 	bgt.w	820e8 <__aeabi_dmul+0x238>
   81f92:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81f96:	bfde      	ittt	le
   81f98:	2000      	movle	r0, #0
   81f9a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81f9e:	bd70      	pople	{r4, r5, r6, pc}
   81fa0:	f1c4 0400 	rsb	r4, r4, #0
   81fa4:	3c20      	subs	r4, #32
   81fa6:	da35      	bge.n	82014 <__aeabi_dmul+0x164>
   81fa8:	340c      	adds	r4, #12
   81faa:	dc1b      	bgt.n	81fe4 <__aeabi_dmul+0x134>
   81fac:	f104 0414 	add.w	r4, r4, #20
   81fb0:	f1c4 0520 	rsb	r5, r4, #32
   81fb4:	fa00 f305 	lsl.w	r3, r0, r5
   81fb8:	fa20 f004 	lsr.w	r0, r0, r4
   81fbc:	fa01 f205 	lsl.w	r2, r1, r5
   81fc0:	ea40 0002 	orr.w	r0, r0, r2
   81fc4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81fc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81fcc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81fd0:	fa21 f604 	lsr.w	r6, r1, r4
   81fd4:	eb42 0106 	adc.w	r1, r2, r6
   81fd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81fdc:	bf08      	it	eq
   81fde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81fe2:	bd70      	pop	{r4, r5, r6, pc}
   81fe4:	f1c4 040c 	rsb	r4, r4, #12
   81fe8:	f1c4 0520 	rsb	r5, r4, #32
   81fec:	fa00 f304 	lsl.w	r3, r0, r4
   81ff0:	fa20 f005 	lsr.w	r0, r0, r5
   81ff4:	fa01 f204 	lsl.w	r2, r1, r4
   81ff8:	ea40 0002 	orr.w	r0, r0, r2
   81ffc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82000:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82004:	f141 0100 	adc.w	r1, r1, #0
   82008:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8200c:	bf08      	it	eq
   8200e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82012:	bd70      	pop	{r4, r5, r6, pc}
   82014:	f1c4 0520 	rsb	r5, r4, #32
   82018:	fa00 f205 	lsl.w	r2, r0, r5
   8201c:	ea4e 0e02 	orr.w	lr, lr, r2
   82020:	fa20 f304 	lsr.w	r3, r0, r4
   82024:	fa01 f205 	lsl.w	r2, r1, r5
   82028:	ea43 0302 	orr.w	r3, r3, r2
   8202c:	fa21 f004 	lsr.w	r0, r1, r4
   82030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82034:	fa21 f204 	lsr.w	r2, r1, r4
   82038:	ea20 0002 	bic.w	r0, r0, r2
   8203c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   82040:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82044:	bf08      	it	eq
   82046:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8204a:	bd70      	pop	{r4, r5, r6, pc}
   8204c:	f094 0f00 	teq	r4, #0
   82050:	d10f      	bne.n	82072 <__aeabi_dmul+0x1c2>
   82052:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   82056:	0040      	lsls	r0, r0, #1
   82058:	eb41 0101 	adc.w	r1, r1, r1
   8205c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82060:	bf08      	it	eq
   82062:	3c01      	subeq	r4, #1
   82064:	d0f7      	beq.n	82056 <__aeabi_dmul+0x1a6>
   82066:	ea41 0106 	orr.w	r1, r1, r6
   8206a:	f095 0f00 	teq	r5, #0
   8206e:	bf18      	it	ne
   82070:	4770      	bxne	lr
   82072:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   82076:	0052      	lsls	r2, r2, #1
   82078:	eb43 0303 	adc.w	r3, r3, r3
   8207c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82080:	bf08      	it	eq
   82082:	3d01      	subeq	r5, #1
   82084:	d0f7      	beq.n	82076 <__aeabi_dmul+0x1c6>
   82086:	ea43 0306 	orr.w	r3, r3, r6
   8208a:	4770      	bx	lr
   8208c:	ea94 0f0c 	teq	r4, ip
   82090:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82094:	bf18      	it	ne
   82096:	ea95 0f0c 	teqne	r5, ip
   8209a:	d00c      	beq.n	820b6 <__aeabi_dmul+0x206>
   8209c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   820a0:	bf18      	it	ne
   820a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   820a6:	d1d1      	bne.n	8204c <__aeabi_dmul+0x19c>
   820a8:	ea81 0103 	eor.w	r1, r1, r3
   820ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   820b0:	f04f 0000 	mov.w	r0, #0
   820b4:	bd70      	pop	{r4, r5, r6, pc}
   820b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   820ba:	bf06      	itte	eq
   820bc:	4610      	moveq	r0, r2
   820be:	4619      	moveq	r1, r3
   820c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   820c4:	d019      	beq.n	820fa <__aeabi_dmul+0x24a>
   820c6:	ea94 0f0c 	teq	r4, ip
   820ca:	d102      	bne.n	820d2 <__aeabi_dmul+0x222>
   820cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   820d0:	d113      	bne.n	820fa <__aeabi_dmul+0x24a>
   820d2:	ea95 0f0c 	teq	r5, ip
   820d6:	d105      	bne.n	820e4 <__aeabi_dmul+0x234>
   820d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   820dc:	bf1c      	itt	ne
   820de:	4610      	movne	r0, r2
   820e0:	4619      	movne	r1, r3
   820e2:	d10a      	bne.n	820fa <__aeabi_dmul+0x24a>
   820e4:	ea81 0103 	eor.w	r1, r1, r3
   820e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   820ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   820f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   820f4:	f04f 0000 	mov.w	r0, #0
   820f8:	bd70      	pop	{r4, r5, r6, pc}
   820fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   820fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   82102:	bd70      	pop	{r4, r5, r6, pc}

00082104 <__aeabi_ddiv>:
   82104:	b570      	push	{r4, r5, r6, lr}
   82106:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8210a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8210e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82112:	bf1d      	ittte	ne
   82114:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82118:	ea94 0f0c 	teqne	r4, ip
   8211c:	ea95 0f0c 	teqne	r5, ip
   82120:	f000 f8a7 	bleq	82272 <__aeabi_ddiv+0x16e>
   82124:	eba4 0405 	sub.w	r4, r4, r5
   82128:	ea81 0e03 	eor.w	lr, r1, r3
   8212c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82130:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82134:	f000 8088 	beq.w	82248 <__aeabi_ddiv+0x144>
   82138:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8213c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   82140:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   82144:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   82148:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8214c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   82150:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   82154:	ea4f 2600 	mov.w	r6, r0, lsl #8
   82158:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8215c:	429d      	cmp	r5, r3
   8215e:	bf08      	it	eq
   82160:	4296      	cmpeq	r6, r2
   82162:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   82166:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8216a:	d202      	bcs.n	82172 <__aeabi_ddiv+0x6e>
   8216c:	085b      	lsrs	r3, r3, #1
   8216e:	ea4f 0232 	mov.w	r2, r2, rrx
   82172:	1ab6      	subs	r6, r6, r2
   82174:	eb65 0503 	sbc.w	r5, r5, r3
   82178:	085b      	lsrs	r3, r3, #1
   8217a:	ea4f 0232 	mov.w	r2, r2, rrx
   8217e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   82182:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   82186:	ebb6 0e02 	subs.w	lr, r6, r2
   8218a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8218e:	bf22      	ittt	cs
   82190:	1ab6      	subcs	r6, r6, r2
   82192:	4675      	movcs	r5, lr
   82194:	ea40 000c 	orrcs.w	r0, r0, ip
   82198:	085b      	lsrs	r3, r3, #1
   8219a:	ea4f 0232 	mov.w	r2, r2, rrx
   8219e:	ebb6 0e02 	subs.w	lr, r6, r2
   821a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   821a6:	bf22      	ittt	cs
   821a8:	1ab6      	subcs	r6, r6, r2
   821aa:	4675      	movcs	r5, lr
   821ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   821b0:	085b      	lsrs	r3, r3, #1
   821b2:	ea4f 0232 	mov.w	r2, r2, rrx
   821b6:	ebb6 0e02 	subs.w	lr, r6, r2
   821ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   821be:	bf22      	ittt	cs
   821c0:	1ab6      	subcs	r6, r6, r2
   821c2:	4675      	movcs	r5, lr
   821c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   821c8:	085b      	lsrs	r3, r3, #1
   821ca:	ea4f 0232 	mov.w	r2, r2, rrx
   821ce:	ebb6 0e02 	subs.w	lr, r6, r2
   821d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   821d6:	bf22      	ittt	cs
   821d8:	1ab6      	subcs	r6, r6, r2
   821da:	4675      	movcs	r5, lr
   821dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   821e0:	ea55 0e06 	orrs.w	lr, r5, r6
   821e4:	d018      	beq.n	82218 <__aeabi_ddiv+0x114>
   821e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   821ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   821ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
   821f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   821f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   821fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   821fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   82202:	d1c0      	bne.n	82186 <__aeabi_ddiv+0x82>
   82204:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82208:	d10b      	bne.n	82222 <__aeabi_ddiv+0x11e>
   8220a:	ea41 0100 	orr.w	r1, r1, r0
   8220e:	f04f 0000 	mov.w	r0, #0
   82212:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   82216:	e7b6      	b.n	82186 <__aeabi_ddiv+0x82>
   82218:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8221c:	bf04      	itt	eq
   8221e:	4301      	orreq	r1, r0
   82220:	2000      	moveq	r0, #0
   82222:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82226:	bf88      	it	hi
   82228:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8222c:	f63f aeaf 	bhi.w	81f8e <__aeabi_dmul+0xde>
   82230:	ebb5 0c03 	subs.w	ip, r5, r3
   82234:	bf04      	itt	eq
   82236:	ebb6 0c02 	subseq.w	ip, r6, r2
   8223a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8223e:	f150 0000 	adcs.w	r0, r0, #0
   82242:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82246:	bd70      	pop	{r4, r5, r6, pc}
   82248:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8224c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   82250:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   82254:	bfc2      	ittt	gt
   82256:	ebd4 050c 	rsbsgt	r5, r4, ip
   8225a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8225e:	bd70      	popgt	{r4, r5, r6, pc}
   82260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82264:	f04f 0e00 	mov.w	lr, #0
   82268:	3c01      	subs	r4, #1
   8226a:	e690      	b.n	81f8e <__aeabi_dmul+0xde>
   8226c:	ea45 0e06 	orr.w	lr, r5, r6
   82270:	e68d      	b.n	81f8e <__aeabi_dmul+0xde>
   82272:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82276:	ea94 0f0c 	teq	r4, ip
   8227a:	bf08      	it	eq
   8227c:	ea95 0f0c 	teqeq	r5, ip
   82280:	f43f af3b 	beq.w	820fa <__aeabi_dmul+0x24a>
   82284:	ea94 0f0c 	teq	r4, ip
   82288:	d10a      	bne.n	822a0 <__aeabi_ddiv+0x19c>
   8228a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8228e:	f47f af34 	bne.w	820fa <__aeabi_dmul+0x24a>
   82292:	ea95 0f0c 	teq	r5, ip
   82296:	f47f af25 	bne.w	820e4 <__aeabi_dmul+0x234>
   8229a:	4610      	mov	r0, r2
   8229c:	4619      	mov	r1, r3
   8229e:	e72c      	b.n	820fa <__aeabi_dmul+0x24a>
   822a0:	ea95 0f0c 	teq	r5, ip
   822a4:	d106      	bne.n	822b4 <__aeabi_ddiv+0x1b0>
   822a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   822aa:	f43f aefd 	beq.w	820a8 <__aeabi_dmul+0x1f8>
   822ae:	4610      	mov	r0, r2
   822b0:	4619      	mov	r1, r3
   822b2:	e722      	b.n	820fa <__aeabi_dmul+0x24a>
   822b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   822b8:	bf18      	it	ne
   822ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   822be:	f47f aec5 	bne.w	8204c <__aeabi_dmul+0x19c>
   822c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   822c6:	f47f af0d 	bne.w	820e4 <__aeabi_dmul+0x234>
   822ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   822ce:	f47f aeeb 	bne.w	820a8 <__aeabi_dmul+0x1f8>
   822d2:	e712      	b.n	820fa <__aeabi_dmul+0x24a>

000822d4 <__gedf2>:
   822d4:	f04f 3cff 	mov.w	ip, #4294967295
   822d8:	e006      	b.n	822e8 <__cmpdf2+0x4>
   822da:	bf00      	nop

000822dc <__ledf2>:
   822dc:	f04f 0c01 	mov.w	ip, #1
   822e0:	e002      	b.n	822e8 <__cmpdf2+0x4>
   822e2:	bf00      	nop

000822e4 <__cmpdf2>:
   822e4:	f04f 0c01 	mov.w	ip, #1
   822e8:	f84d cd04 	str.w	ip, [sp, #-4]!
   822ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   822f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   822f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   822f8:	bf18      	it	ne
   822fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   822fe:	d01b      	beq.n	82338 <__cmpdf2+0x54>
   82300:	b001      	add	sp, #4
   82302:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   82306:	bf0c      	ite	eq
   82308:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8230c:	ea91 0f03 	teqne	r1, r3
   82310:	bf02      	ittt	eq
   82312:	ea90 0f02 	teqeq	r0, r2
   82316:	2000      	moveq	r0, #0
   82318:	4770      	bxeq	lr
   8231a:	f110 0f00 	cmn.w	r0, #0
   8231e:	ea91 0f03 	teq	r1, r3
   82322:	bf58      	it	pl
   82324:	4299      	cmppl	r1, r3
   82326:	bf08      	it	eq
   82328:	4290      	cmpeq	r0, r2
   8232a:	bf2c      	ite	cs
   8232c:	17d8      	asrcs	r0, r3, #31
   8232e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   82332:	f040 0001 	orr.w	r0, r0, #1
   82336:	4770      	bx	lr
   82338:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8233c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   82340:	d102      	bne.n	82348 <__cmpdf2+0x64>
   82342:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   82346:	d107      	bne.n	82358 <__cmpdf2+0x74>
   82348:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8234c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   82350:	d1d6      	bne.n	82300 <__cmpdf2+0x1c>
   82352:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   82356:	d0d3      	beq.n	82300 <__cmpdf2+0x1c>
   82358:	f85d 0b04 	ldr.w	r0, [sp], #4
   8235c:	4770      	bx	lr
   8235e:	bf00      	nop

00082360 <__aeabi_cdrcmple>:
   82360:	4684      	mov	ip, r0
   82362:	4610      	mov	r0, r2
   82364:	4662      	mov	r2, ip
   82366:	468c      	mov	ip, r1
   82368:	4619      	mov	r1, r3
   8236a:	4663      	mov	r3, ip
   8236c:	e000      	b.n	82370 <__aeabi_cdcmpeq>
   8236e:	bf00      	nop

00082370 <__aeabi_cdcmpeq>:
   82370:	b501      	push	{r0, lr}
   82372:	f7ff ffb7 	bl	822e4 <__cmpdf2>
   82376:	2800      	cmp	r0, #0
   82378:	bf48      	it	mi
   8237a:	f110 0f00 	cmnmi.w	r0, #0
   8237e:	bd01      	pop	{r0, pc}

00082380 <__aeabi_dcmpeq>:
   82380:	f84d ed08 	str.w	lr, [sp, #-8]!
   82384:	f7ff fff4 	bl	82370 <__aeabi_cdcmpeq>
   82388:	bf0c      	ite	eq
   8238a:	2001      	moveq	r0, #1
   8238c:	2000      	movne	r0, #0
   8238e:	f85d fb08 	ldr.w	pc, [sp], #8
   82392:	bf00      	nop

00082394 <__aeabi_dcmplt>:
   82394:	f84d ed08 	str.w	lr, [sp, #-8]!
   82398:	f7ff ffea 	bl	82370 <__aeabi_cdcmpeq>
   8239c:	bf34      	ite	cc
   8239e:	2001      	movcc	r0, #1
   823a0:	2000      	movcs	r0, #0
   823a2:	f85d fb08 	ldr.w	pc, [sp], #8
   823a6:	bf00      	nop

000823a8 <__aeabi_dcmple>:
   823a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   823ac:	f7ff ffe0 	bl	82370 <__aeabi_cdcmpeq>
   823b0:	bf94      	ite	ls
   823b2:	2001      	movls	r0, #1
   823b4:	2000      	movhi	r0, #0
   823b6:	f85d fb08 	ldr.w	pc, [sp], #8
   823ba:	bf00      	nop

000823bc <__aeabi_dcmpge>:
   823bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   823c0:	f7ff ffce 	bl	82360 <__aeabi_cdrcmple>
   823c4:	bf94      	ite	ls
   823c6:	2001      	movls	r0, #1
   823c8:	2000      	movhi	r0, #0
   823ca:	f85d fb08 	ldr.w	pc, [sp], #8
   823ce:	bf00      	nop

000823d0 <__aeabi_dcmpgt>:
   823d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   823d4:	f7ff ffc4 	bl	82360 <__aeabi_cdrcmple>
   823d8:	bf34      	ite	cc
   823da:	2001      	movcc	r0, #1
   823dc:	2000      	movcs	r0, #0
   823de:	f85d fb08 	ldr.w	pc, [sp], #8
   823e2:	bf00      	nop

000823e4 <__aeabi_d2iz>:
   823e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   823e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   823ec:	d215      	bcs.n	8241a <__aeabi_d2iz+0x36>
   823ee:	d511      	bpl.n	82414 <__aeabi_d2iz+0x30>
   823f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   823f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   823f8:	d912      	bls.n	82420 <__aeabi_d2iz+0x3c>
   823fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   823fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   82402:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   82406:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8240a:	fa23 f002 	lsr.w	r0, r3, r2
   8240e:	bf18      	it	ne
   82410:	4240      	negne	r0, r0
   82412:	4770      	bx	lr
   82414:	f04f 0000 	mov.w	r0, #0
   82418:	4770      	bx	lr
   8241a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8241e:	d105      	bne.n	8242c <__aeabi_d2iz+0x48>
   82420:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   82424:	bf08      	it	eq
   82426:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8242a:	4770      	bx	lr
   8242c:	f04f 0000 	mov.w	r0, #0
   82430:	4770      	bx	lr
   82432:	bf00      	nop

00082434 <__aeabi_d2uiz>:
   82434:	004a      	lsls	r2, r1, #1
   82436:	d211      	bcs.n	8245c <__aeabi_d2uiz+0x28>
   82438:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8243c:	d211      	bcs.n	82462 <__aeabi_d2uiz+0x2e>
   8243e:	d50d      	bpl.n	8245c <__aeabi_d2uiz+0x28>
   82440:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   82444:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   82448:	d40e      	bmi.n	82468 <__aeabi_d2uiz+0x34>
   8244a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8244e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   82452:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   82456:	fa23 f002 	lsr.w	r0, r3, r2
   8245a:	4770      	bx	lr
   8245c:	f04f 0000 	mov.w	r0, #0
   82460:	4770      	bx	lr
   82462:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   82466:	d102      	bne.n	8246e <__aeabi_d2uiz+0x3a>
   82468:	f04f 30ff 	mov.w	r0, #4294967295
   8246c:	4770      	bx	lr
   8246e:	f04f 0000 	mov.w	r0, #0
   82472:	4770      	bx	lr

00082474 <__aeabi_d2f>:
   82474:	ea4f 0241 	mov.w	r2, r1, lsl #1
   82478:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   8247c:	bf24      	itt	cs
   8247e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   82482:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   82486:	d90d      	bls.n	824a4 <__aeabi_d2f+0x30>
   82488:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8248c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   82490:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   82494:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   82498:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   8249c:	bf08      	it	eq
   8249e:	f020 0001 	biceq.w	r0, r0, #1
   824a2:	4770      	bx	lr
   824a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   824a8:	d121      	bne.n	824ee <__aeabi_d2f+0x7a>
   824aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   824ae:	bfbc      	itt	lt
   824b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   824b4:	4770      	bxlt	lr
   824b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   824ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
   824be:	f1c2 0218 	rsb	r2, r2, #24
   824c2:	f1c2 0c20 	rsb	ip, r2, #32
   824c6:	fa10 f30c 	lsls.w	r3, r0, ip
   824ca:	fa20 f002 	lsr.w	r0, r0, r2
   824ce:	bf18      	it	ne
   824d0:	f040 0001 	orrne.w	r0, r0, #1
   824d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   824d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   824dc:	fa03 fc0c 	lsl.w	ip, r3, ip
   824e0:	ea40 000c 	orr.w	r0, r0, ip
   824e4:	fa23 f302 	lsr.w	r3, r3, r2
   824e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   824ec:	e7cc      	b.n	82488 <__aeabi_d2f+0x14>
   824ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
   824f2:	d107      	bne.n	82504 <__aeabi_d2f+0x90>
   824f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   824f8:	bf1e      	ittt	ne
   824fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   824fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   82502:	4770      	bxne	lr
   82504:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   82508:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8250c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82510:	4770      	bx	lr
   82512:	bf00      	nop

00082514 <__aeabi_frsub>:
   82514:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   82518:	e002      	b.n	82520 <__addsf3>
   8251a:	bf00      	nop

0008251c <__aeabi_fsub>:
   8251c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00082520 <__addsf3>:
   82520:	0042      	lsls	r2, r0, #1
   82522:	bf1f      	itttt	ne
   82524:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   82528:	ea92 0f03 	teqne	r2, r3
   8252c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   82530:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82534:	d06a      	beq.n	8260c <__addsf3+0xec>
   82536:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8253a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8253e:	bfc1      	itttt	gt
   82540:	18d2      	addgt	r2, r2, r3
   82542:	4041      	eorgt	r1, r0
   82544:	4048      	eorgt	r0, r1
   82546:	4041      	eorgt	r1, r0
   82548:	bfb8      	it	lt
   8254a:	425b      	neglt	r3, r3
   8254c:	2b19      	cmp	r3, #25
   8254e:	bf88      	it	hi
   82550:	4770      	bxhi	lr
   82552:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   82556:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8255a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8255e:	bf18      	it	ne
   82560:	4240      	negne	r0, r0
   82562:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82566:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8256a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8256e:	bf18      	it	ne
   82570:	4249      	negne	r1, r1
   82572:	ea92 0f03 	teq	r2, r3
   82576:	d03f      	beq.n	825f8 <__addsf3+0xd8>
   82578:	f1a2 0201 	sub.w	r2, r2, #1
   8257c:	fa41 fc03 	asr.w	ip, r1, r3
   82580:	eb10 000c 	adds.w	r0, r0, ip
   82584:	f1c3 0320 	rsb	r3, r3, #32
   82588:	fa01 f103 	lsl.w	r1, r1, r3
   8258c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82590:	d502      	bpl.n	82598 <__addsf3+0x78>
   82592:	4249      	negs	r1, r1
   82594:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   82598:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   8259c:	d313      	bcc.n	825c6 <__addsf3+0xa6>
   8259e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   825a2:	d306      	bcc.n	825b2 <__addsf3+0x92>
   825a4:	0840      	lsrs	r0, r0, #1
   825a6:	ea4f 0131 	mov.w	r1, r1, rrx
   825aa:	f102 0201 	add.w	r2, r2, #1
   825ae:	2afe      	cmp	r2, #254	; 0xfe
   825b0:	d251      	bcs.n	82656 <__addsf3+0x136>
   825b2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   825b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   825ba:	bf08      	it	eq
   825bc:	f020 0001 	biceq.w	r0, r0, #1
   825c0:	ea40 0003 	orr.w	r0, r0, r3
   825c4:	4770      	bx	lr
   825c6:	0049      	lsls	r1, r1, #1
   825c8:	eb40 0000 	adc.w	r0, r0, r0
   825cc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   825d0:	f1a2 0201 	sub.w	r2, r2, #1
   825d4:	d1ed      	bne.n	825b2 <__addsf3+0x92>
   825d6:	fab0 fc80 	clz	ip, r0
   825da:	f1ac 0c08 	sub.w	ip, ip, #8
   825de:	ebb2 020c 	subs.w	r2, r2, ip
   825e2:	fa00 f00c 	lsl.w	r0, r0, ip
   825e6:	bfaa      	itet	ge
   825e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   825ec:	4252      	neglt	r2, r2
   825ee:	4318      	orrge	r0, r3
   825f0:	bfbc      	itt	lt
   825f2:	40d0      	lsrlt	r0, r2
   825f4:	4318      	orrlt	r0, r3
   825f6:	4770      	bx	lr
   825f8:	f092 0f00 	teq	r2, #0
   825fc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   82600:	bf06      	itte	eq
   82602:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   82606:	3201      	addeq	r2, #1
   82608:	3b01      	subne	r3, #1
   8260a:	e7b5      	b.n	82578 <__addsf3+0x58>
   8260c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82610:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82614:	bf18      	it	ne
   82616:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8261a:	d021      	beq.n	82660 <__addsf3+0x140>
   8261c:	ea92 0f03 	teq	r2, r3
   82620:	d004      	beq.n	8262c <__addsf3+0x10c>
   82622:	f092 0f00 	teq	r2, #0
   82626:	bf08      	it	eq
   82628:	4608      	moveq	r0, r1
   8262a:	4770      	bx	lr
   8262c:	ea90 0f01 	teq	r0, r1
   82630:	bf1c      	itt	ne
   82632:	2000      	movne	r0, #0
   82634:	4770      	bxne	lr
   82636:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8263a:	d104      	bne.n	82646 <__addsf3+0x126>
   8263c:	0040      	lsls	r0, r0, #1
   8263e:	bf28      	it	cs
   82640:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   82644:	4770      	bx	lr
   82646:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8264a:	bf3c      	itt	cc
   8264c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   82650:	4770      	bxcc	lr
   82652:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   82656:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8265a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8265e:	4770      	bx	lr
   82660:	ea7f 6222 	mvns.w	r2, r2, asr #24
   82664:	bf16      	itet	ne
   82666:	4608      	movne	r0, r1
   82668:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   8266c:	4601      	movne	r1, r0
   8266e:	0242      	lsls	r2, r0, #9
   82670:	bf06      	itte	eq
   82672:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   82676:	ea90 0f01 	teqeq	r0, r1
   8267a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8267e:	4770      	bx	lr

00082680 <__aeabi_ui2f>:
   82680:	f04f 0300 	mov.w	r3, #0
   82684:	e004      	b.n	82690 <__aeabi_i2f+0x8>
   82686:	bf00      	nop

00082688 <__aeabi_i2f>:
   82688:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   8268c:	bf48      	it	mi
   8268e:	4240      	negmi	r0, r0
   82690:	ea5f 0c00 	movs.w	ip, r0
   82694:	bf08      	it	eq
   82696:	4770      	bxeq	lr
   82698:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   8269c:	4601      	mov	r1, r0
   8269e:	f04f 0000 	mov.w	r0, #0
   826a2:	e01c      	b.n	826de <__aeabi_l2f+0x2a>

000826a4 <__aeabi_ul2f>:
   826a4:	ea50 0201 	orrs.w	r2, r0, r1
   826a8:	bf08      	it	eq
   826aa:	4770      	bxeq	lr
   826ac:	f04f 0300 	mov.w	r3, #0
   826b0:	e00a      	b.n	826c8 <__aeabi_l2f+0x14>
   826b2:	bf00      	nop

000826b4 <__aeabi_l2f>:
   826b4:	ea50 0201 	orrs.w	r2, r0, r1
   826b8:	bf08      	it	eq
   826ba:	4770      	bxeq	lr
   826bc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   826c0:	d502      	bpl.n	826c8 <__aeabi_l2f+0x14>
   826c2:	4240      	negs	r0, r0
   826c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   826c8:	ea5f 0c01 	movs.w	ip, r1
   826cc:	bf02      	ittt	eq
   826ce:	4684      	moveq	ip, r0
   826d0:	4601      	moveq	r1, r0
   826d2:	2000      	moveq	r0, #0
   826d4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   826d8:	bf08      	it	eq
   826da:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   826de:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   826e2:	fabc f28c 	clz	r2, ip
   826e6:	3a08      	subs	r2, #8
   826e8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   826ec:	db10      	blt.n	82710 <__aeabi_l2f+0x5c>
   826ee:	fa01 fc02 	lsl.w	ip, r1, r2
   826f2:	4463      	add	r3, ip
   826f4:	fa00 fc02 	lsl.w	ip, r0, r2
   826f8:	f1c2 0220 	rsb	r2, r2, #32
   826fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82700:	fa20 f202 	lsr.w	r2, r0, r2
   82704:	eb43 0002 	adc.w	r0, r3, r2
   82708:	bf08      	it	eq
   8270a:	f020 0001 	biceq.w	r0, r0, #1
   8270e:	4770      	bx	lr
   82710:	f102 0220 	add.w	r2, r2, #32
   82714:	fa01 fc02 	lsl.w	ip, r1, r2
   82718:	f1c2 0220 	rsb	r2, r2, #32
   8271c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   82720:	fa21 f202 	lsr.w	r2, r1, r2
   82724:	eb43 0002 	adc.w	r0, r3, r2
   82728:	bf08      	it	eq
   8272a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8272e:	4770      	bx	lr

00082730 <__aeabi_fmul>:
   82730:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82734:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   82738:	bf1e      	ittt	ne
   8273a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8273e:	ea92 0f0c 	teqne	r2, ip
   82742:	ea93 0f0c 	teqne	r3, ip
   82746:	d06f      	beq.n	82828 <__aeabi_fmul+0xf8>
   82748:	441a      	add	r2, r3
   8274a:	ea80 0c01 	eor.w	ip, r0, r1
   8274e:	0240      	lsls	r0, r0, #9
   82750:	bf18      	it	ne
   82752:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   82756:	d01e      	beq.n	82796 <__aeabi_fmul+0x66>
   82758:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   8275c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   82760:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   82764:	fba0 3101 	umull	r3, r1, r0, r1
   82768:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8276c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   82770:	bf3e      	ittt	cc
   82772:	0049      	lslcc	r1, r1, #1
   82774:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   82778:	005b      	lslcc	r3, r3, #1
   8277a:	ea40 0001 	orr.w	r0, r0, r1
   8277e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   82782:	2afd      	cmp	r2, #253	; 0xfd
   82784:	d81d      	bhi.n	827c2 <__aeabi_fmul+0x92>
   82786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   8278a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8278e:	bf08      	it	eq
   82790:	f020 0001 	biceq.w	r0, r0, #1
   82794:	4770      	bx	lr
   82796:	f090 0f00 	teq	r0, #0
   8279a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8279e:	bf08      	it	eq
   827a0:	0249      	lsleq	r1, r1, #9
   827a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   827a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   827aa:	3a7f      	subs	r2, #127	; 0x7f
   827ac:	bfc2      	ittt	gt
   827ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   827b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   827b6:	4770      	bxgt	lr
   827b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   827bc:	f04f 0300 	mov.w	r3, #0
   827c0:	3a01      	subs	r2, #1
   827c2:	dc5d      	bgt.n	82880 <__aeabi_fmul+0x150>
   827c4:	f112 0f19 	cmn.w	r2, #25
   827c8:	bfdc      	itt	le
   827ca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   827ce:	4770      	bxle	lr
   827d0:	f1c2 0200 	rsb	r2, r2, #0
   827d4:	0041      	lsls	r1, r0, #1
   827d6:	fa21 f102 	lsr.w	r1, r1, r2
   827da:	f1c2 0220 	rsb	r2, r2, #32
   827de:	fa00 fc02 	lsl.w	ip, r0, r2
   827e2:	ea5f 0031 	movs.w	r0, r1, rrx
   827e6:	f140 0000 	adc.w	r0, r0, #0
   827ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   827ee:	bf08      	it	eq
   827f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   827f4:	4770      	bx	lr
   827f6:	f092 0f00 	teq	r2, #0
   827fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   827fe:	bf02      	ittt	eq
   82800:	0040      	lsleq	r0, r0, #1
   82802:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   82806:	3a01      	subeq	r2, #1
   82808:	d0f9      	beq.n	827fe <__aeabi_fmul+0xce>
   8280a:	ea40 000c 	orr.w	r0, r0, ip
   8280e:	f093 0f00 	teq	r3, #0
   82812:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82816:	bf02      	ittt	eq
   82818:	0049      	lsleq	r1, r1, #1
   8281a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8281e:	3b01      	subeq	r3, #1
   82820:	d0f9      	beq.n	82816 <__aeabi_fmul+0xe6>
   82822:	ea41 010c 	orr.w	r1, r1, ip
   82826:	e78f      	b.n	82748 <__aeabi_fmul+0x18>
   82828:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8282c:	ea92 0f0c 	teq	r2, ip
   82830:	bf18      	it	ne
   82832:	ea93 0f0c 	teqne	r3, ip
   82836:	d00a      	beq.n	8284e <__aeabi_fmul+0x11e>
   82838:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8283c:	bf18      	it	ne
   8283e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   82842:	d1d8      	bne.n	827f6 <__aeabi_fmul+0xc6>
   82844:	ea80 0001 	eor.w	r0, r0, r1
   82848:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8284c:	4770      	bx	lr
   8284e:	f090 0f00 	teq	r0, #0
   82852:	bf17      	itett	ne
   82854:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   82858:	4608      	moveq	r0, r1
   8285a:	f091 0f00 	teqne	r1, #0
   8285e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   82862:	d014      	beq.n	8288e <__aeabi_fmul+0x15e>
   82864:	ea92 0f0c 	teq	r2, ip
   82868:	d101      	bne.n	8286e <__aeabi_fmul+0x13e>
   8286a:	0242      	lsls	r2, r0, #9
   8286c:	d10f      	bne.n	8288e <__aeabi_fmul+0x15e>
   8286e:	ea93 0f0c 	teq	r3, ip
   82872:	d103      	bne.n	8287c <__aeabi_fmul+0x14c>
   82874:	024b      	lsls	r3, r1, #9
   82876:	bf18      	it	ne
   82878:	4608      	movne	r0, r1
   8287a:	d108      	bne.n	8288e <__aeabi_fmul+0x15e>
   8287c:	ea80 0001 	eor.w	r0, r0, r1
   82880:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   82884:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82888:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8288c:	4770      	bx	lr
   8288e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82892:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   82896:	4770      	bx	lr

00082898 <__aeabi_fdiv>:
   82898:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8289c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   828a0:	bf1e      	ittt	ne
   828a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   828a6:	ea92 0f0c 	teqne	r2, ip
   828aa:	ea93 0f0c 	teqne	r3, ip
   828ae:	d069      	beq.n	82984 <__aeabi_fdiv+0xec>
   828b0:	eba2 0203 	sub.w	r2, r2, r3
   828b4:	ea80 0c01 	eor.w	ip, r0, r1
   828b8:	0249      	lsls	r1, r1, #9
   828ba:	ea4f 2040 	mov.w	r0, r0, lsl #9
   828be:	d037      	beq.n	82930 <__aeabi_fdiv+0x98>
   828c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   828c4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   828c8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   828cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   828d0:	428b      	cmp	r3, r1
   828d2:	bf38      	it	cc
   828d4:	005b      	lslcc	r3, r3, #1
   828d6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   828da:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   828de:	428b      	cmp	r3, r1
   828e0:	bf24      	itt	cs
   828e2:	1a5b      	subcs	r3, r3, r1
   828e4:	ea40 000c 	orrcs.w	r0, r0, ip
   828e8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   828ec:	bf24      	itt	cs
   828ee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   828f2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   828f6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   828fa:	bf24      	itt	cs
   828fc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   82900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82904:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   82908:	bf24      	itt	cs
   8290a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8290e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82912:	011b      	lsls	r3, r3, #4
   82914:	bf18      	it	ne
   82916:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8291a:	d1e0      	bne.n	828de <__aeabi_fdiv+0x46>
   8291c:	2afd      	cmp	r2, #253	; 0xfd
   8291e:	f63f af50 	bhi.w	827c2 <__aeabi_fmul+0x92>
   82922:	428b      	cmp	r3, r1
   82924:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82928:	bf08      	it	eq
   8292a:	f020 0001 	biceq.w	r0, r0, #1
   8292e:	4770      	bx	lr
   82930:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   82934:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   82938:	327f      	adds	r2, #127	; 0x7f
   8293a:	bfc2      	ittt	gt
   8293c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   82940:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   82944:	4770      	bxgt	lr
   82946:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8294a:	f04f 0300 	mov.w	r3, #0
   8294e:	3a01      	subs	r2, #1
   82950:	e737      	b.n	827c2 <__aeabi_fmul+0x92>
   82952:	f092 0f00 	teq	r2, #0
   82956:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8295a:	bf02      	ittt	eq
   8295c:	0040      	lsleq	r0, r0, #1
   8295e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   82962:	3a01      	subeq	r2, #1
   82964:	d0f9      	beq.n	8295a <__aeabi_fdiv+0xc2>
   82966:	ea40 000c 	orr.w	r0, r0, ip
   8296a:	f093 0f00 	teq	r3, #0
   8296e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82972:	bf02      	ittt	eq
   82974:	0049      	lsleq	r1, r1, #1
   82976:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8297a:	3b01      	subeq	r3, #1
   8297c:	d0f9      	beq.n	82972 <__aeabi_fdiv+0xda>
   8297e:	ea41 010c 	orr.w	r1, r1, ip
   82982:	e795      	b.n	828b0 <__aeabi_fdiv+0x18>
   82984:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   82988:	ea92 0f0c 	teq	r2, ip
   8298c:	d108      	bne.n	829a0 <__aeabi_fdiv+0x108>
   8298e:	0242      	lsls	r2, r0, #9
   82990:	f47f af7d 	bne.w	8288e <__aeabi_fmul+0x15e>
   82994:	ea93 0f0c 	teq	r3, ip
   82998:	f47f af70 	bne.w	8287c <__aeabi_fmul+0x14c>
   8299c:	4608      	mov	r0, r1
   8299e:	e776      	b.n	8288e <__aeabi_fmul+0x15e>
   829a0:	ea93 0f0c 	teq	r3, ip
   829a4:	d104      	bne.n	829b0 <__aeabi_fdiv+0x118>
   829a6:	024b      	lsls	r3, r1, #9
   829a8:	f43f af4c 	beq.w	82844 <__aeabi_fmul+0x114>
   829ac:	4608      	mov	r0, r1
   829ae:	e76e      	b.n	8288e <__aeabi_fmul+0x15e>
   829b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   829b4:	bf18      	it	ne
   829b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   829ba:	d1ca      	bne.n	82952 <__aeabi_fdiv+0xba>
   829bc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   829c0:	f47f af5c 	bne.w	8287c <__aeabi_fmul+0x14c>
   829c4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   829c8:	f47f af3c 	bne.w	82844 <__aeabi_fmul+0x114>
   829cc:	e75f      	b.n	8288e <__aeabi_fmul+0x15e>
   829ce:	bf00      	nop

000829d0 <__gesf2>:
   829d0:	f04f 3cff 	mov.w	ip, #4294967295
   829d4:	e006      	b.n	829e4 <__cmpsf2+0x4>
   829d6:	bf00      	nop

000829d8 <__lesf2>:
   829d8:	f04f 0c01 	mov.w	ip, #1
   829dc:	e002      	b.n	829e4 <__cmpsf2+0x4>
   829de:	bf00      	nop

000829e0 <__cmpsf2>:
   829e0:	f04f 0c01 	mov.w	ip, #1
   829e4:	f84d cd04 	str.w	ip, [sp, #-4]!
   829e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   829ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
   829f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   829f4:	bf18      	it	ne
   829f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   829fa:	d011      	beq.n	82a20 <__cmpsf2+0x40>
   829fc:	b001      	add	sp, #4
   829fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   82a02:	bf18      	it	ne
   82a04:	ea90 0f01 	teqne	r0, r1
   82a08:	bf58      	it	pl
   82a0a:	ebb2 0003 	subspl.w	r0, r2, r3
   82a0e:	bf88      	it	hi
   82a10:	17c8      	asrhi	r0, r1, #31
   82a12:	bf38      	it	cc
   82a14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   82a18:	bf18      	it	ne
   82a1a:	f040 0001 	orrne.w	r0, r0, #1
   82a1e:	4770      	bx	lr
   82a20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82a24:	d102      	bne.n	82a2c <__cmpsf2+0x4c>
   82a26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   82a2a:	d105      	bne.n	82a38 <__cmpsf2+0x58>
   82a2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   82a30:	d1e4      	bne.n	829fc <__cmpsf2+0x1c>
   82a32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   82a36:	d0e1      	beq.n	829fc <__cmpsf2+0x1c>
   82a38:	f85d 0b04 	ldr.w	r0, [sp], #4
   82a3c:	4770      	bx	lr
   82a3e:	bf00      	nop

00082a40 <__aeabi_cfrcmple>:
   82a40:	4684      	mov	ip, r0
   82a42:	4608      	mov	r0, r1
   82a44:	4661      	mov	r1, ip
   82a46:	e7ff      	b.n	82a48 <__aeabi_cfcmpeq>

00082a48 <__aeabi_cfcmpeq>:
   82a48:	b50f      	push	{r0, r1, r2, r3, lr}
   82a4a:	f7ff ffc9 	bl	829e0 <__cmpsf2>
   82a4e:	2800      	cmp	r0, #0
   82a50:	bf48      	it	mi
   82a52:	f110 0f00 	cmnmi.w	r0, #0
   82a56:	bd0f      	pop	{r0, r1, r2, r3, pc}

00082a58 <__aeabi_fcmpeq>:
   82a58:	f84d ed08 	str.w	lr, [sp, #-8]!
   82a5c:	f7ff fff4 	bl	82a48 <__aeabi_cfcmpeq>
   82a60:	bf0c      	ite	eq
   82a62:	2001      	moveq	r0, #1
   82a64:	2000      	movne	r0, #0
   82a66:	f85d fb08 	ldr.w	pc, [sp], #8
   82a6a:	bf00      	nop

00082a6c <__aeabi_fcmplt>:
   82a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   82a70:	f7ff ffea 	bl	82a48 <__aeabi_cfcmpeq>
   82a74:	bf34      	ite	cc
   82a76:	2001      	movcc	r0, #1
   82a78:	2000      	movcs	r0, #0
   82a7a:	f85d fb08 	ldr.w	pc, [sp], #8
   82a7e:	bf00      	nop

00082a80 <__aeabi_fcmple>:
   82a80:	f84d ed08 	str.w	lr, [sp, #-8]!
   82a84:	f7ff ffe0 	bl	82a48 <__aeabi_cfcmpeq>
   82a88:	bf94      	ite	ls
   82a8a:	2001      	movls	r0, #1
   82a8c:	2000      	movhi	r0, #0
   82a8e:	f85d fb08 	ldr.w	pc, [sp], #8
   82a92:	bf00      	nop

00082a94 <__aeabi_fcmpge>:
   82a94:	f84d ed08 	str.w	lr, [sp, #-8]!
   82a98:	f7ff ffd2 	bl	82a40 <__aeabi_cfrcmple>
   82a9c:	bf94      	ite	ls
   82a9e:	2001      	movls	r0, #1
   82aa0:	2000      	movhi	r0, #0
   82aa2:	f85d fb08 	ldr.w	pc, [sp], #8
   82aa6:	bf00      	nop

00082aa8 <__aeabi_fcmpgt>:
   82aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   82aac:	f7ff ffc8 	bl	82a40 <__aeabi_cfrcmple>
   82ab0:	bf34      	ite	cc
   82ab2:	2001      	movcc	r0, #1
   82ab4:	2000      	movcs	r0, #0
   82ab6:	f85d fb08 	ldr.w	pc, [sp], #8
   82aba:	bf00      	nop

00082abc <__errno>:
   82abc:	4b01      	ldr	r3, [pc, #4]	; (82ac4 <__errno+0x8>)
   82abe:	6818      	ldr	r0, [r3, #0]
   82ac0:	4770      	bx	lr
   82ac2:	bf00      	nop
   82ac4:	20070570 	.word	0x20070570

00082ac8 <__libc_init_array>:
   82ac8:	b570      	push	{r4, r5, r6, lr}
   82aca:	4e0f      	ldr	r6, [pc, #60]	; (82b08 <__libc_init_array+0x40>)
   82acc:	4d0f      	ldr	r5, [pc, #60]	; (82b0c <__libc_init_array+0x44>)
   82ace:	1b76      	subs	r6, r6, r5
   82ad0:	10b6      	asrs	r6, r6, #2
   82ad2:	d007      	beq.n	82ae4 <__libc_init_array+0x1c>
   82ad4:	3d04      	subs	r5, #4
   82ad6:	2400      	movs	r4, #0
   82ad8:	3401      	adds	r4, #1
   82ada:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82ade:	4798      	blx	r3
   82ae0:	42a6      	cmp	r6, r4
   82ae2:	d1f9      	bne.n	82ad8 <__libc_init_array+0x10>
   82ae4:	4e0a      	ldr	r6, [pc, #40]	; (82b10 <__libc_init_array+0x48>)
   82ae6:	4d0b      	ldr	r5, [pc, #44]	; (82b14 <__libc_init_array+0x4c>)
   82ae8:	f000 fca6 	bl	83438 <_init>
   82aec:	1b76      	subs	r6, r6, r5
   82aee:	10b6      	asrs	r6, r6, #2
   82af0:	d008      	beq.n	82b04 <__libc_init_array+0x3c>
   82af2:	3d04      	subs	r5, #4
   82af4:	2400      	movs	r4, #0
   82af6:	3401      	adds	r4, #1
   82af8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82afc:	4798      	blx	r3
   82afe:	42a6      	cmp	r6, r4
   82b00:	d1f9      	bne.n	82af6 <__libc_init_array+0x2e>
   82b02:	bd70      	pop	{r4, r5, r6, pc}
   82b04:	bd70      	pop	{r4, r5, r6, pc}
   82b06:	bf00      	nop
   82b08:	00083444 	.word	0x00083444
   82b0c:	00083444 	.word	0x00083444
   82b10:	0008344c 	.word	0x0008344c
   82b14:	00083444 	.word	0x00083444

00082b18 <register_fini>:
   82b18:	4b02      	ldr	r3, [pc, #8]	; (82b24 <register_fini+0xc>)
   82b1a:	b113      	cbz	r3, 82b22 <register_fini+0xa>
   82b1c:	4802      	ldr	r0, [pc, #8]	; (82b28 <register_fini+0x10>)
   82b1e:	f000 b805 	b.w	82b2c <atexit>
   82b22:	4770      	bx	lr
   82b24:	00000000 	.word	0x00000000
   82b28:	00082b39 	.word	0x00082b39

00082b2c <atexit>:
   82b2c:	4601      	mov	r1, r0
   82b2e:	2000      	movs	r0, #0
   82b30:	4602      	mov	r2, r0
   82b32:	4603      	mov	r3, r0
   82b34:	f000 bbec 	b.w	83310 <__register_exitproc>

00082b38 <__libc_fini_array>:
   82b38:	b538      	push	{r3, r4, r5, lr}
   82b3a:	4d09      	ldr	r5, [pc, #36]	; (82b60 <__libc_fini_array+0x28>)
   82b3c:	4c09      	ldr	r4, [pc, #36]	; (82b64 <__libc_fini_array+0x2c>)
   82b3e:	1b64      	subs	r4, r4, r5
   82b40:	10a4      	asrs	r4, r4, #2
   82b42:	bf18      	it	ne
   82b44:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82b48:	d005      	beq.n	82b56 <__libc_fini_array+0x1e>
   82b4a:	3c01      	subs	r4, #1
   82b4c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82b50:	4798      	blx	r3
   82b52:	2c00      	cmp	r4, #0
   82b54:	d1f9      	bne.n	82b4a <__libc_fini_array+0x12>
   82b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82b5a:	f000 bc77 	b.w	8344c <_fini>
   82b5e:	bf00      	nop
   82b60:	00083458 	.word	0x00083458
   82b64:	0008345c 	.word	0x0008345c

00082b68 <_malloc_trim_r>:
   82b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82b6a:	4d23      	ldr	r5, [pc, #140]	; (82bf8 <_malloc_trim_r+0x90>)
   82b6c:	460f      	mov	r7, r1
   82b6e:	4604      	mov	r4, r0
   82b70:	f000 fbb8 	bl	832e4 <__malloc_lock>
   82b74:	68ab      	ldr	r3, [r5, #8]
   82b76:	685e      	ldr	r6, [r3, #4]
   82b78:	f026 0603 	bic.w	r6, r6, #3
   82b7c:	1bf1      	subs	r1, r6, r7
   82b7e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82b82:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82b86:	f021 010f 	bic.w	r1, r1, #15
   82b8a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82b8e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82b92:	db07      	blt.n	82ba4 <_malloc_trim_r+0x3c>
   82b94:	4620      	mov	r0, r4
   82b96:	2100      	movs	r1, #0
   82b98:	f000 fba8 	bl	832ec <_sbrk_r>
   82b9c:	68ab      	ldr	r3, [r5, #8]
   82b9e:	4433      	add	r3, r6
   82ba0:	4298      	cmp	r0, r3
   82ba2:	d004      	beq.n	82bae <_malloc_trim_r+0x46>
   82ba4:	4620      	mov	r0, r4
   82ba6:	f000 fb9f 	bl	832e8 <__malloc_unlock>
   82baa:	2000      	movs	r0, #0
   82bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bae:	4620      	mov	r0, r4
   82bb0:	4279      	negs	r1, r7
   82bb2:	f000 fb9b 	bl	832ec <_sbrk_r>
   82bb6:	3001      	adds	r0, #1
   82bb8:	d00d      	beq.n	82bd6 <_malloc_trim_r+0x6e>
   82bba:	4b10      	ldr	r3, [pc, #64]	; (82bfc <_malloc_trim_r+0x94>)
   82bbc:	68aa      	ldr	r2, [r5, #8]
   82bbe:	6819      	ldr	r1, [r3, #0]
   82bc0:	1bf6      	subs	r6, r6, r7
   82bc2:	f046 0601 	orr.w	r6, r6, #1
   82bc6:	4620      	mov	r0, r4
   82bc8:	1bc9      	subs	r1, r1, r7
   82bca:	6056      	str	r6, [r2, #4]
   82bcc:	6019      	str	r1, [r3, #0]
   82bce:	f000 fb8b 	bl	832e8 <__malloc_unlock>
   82bd2:	2001      	movs	r0, #1
   82bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bd6:	4620      	mov	r0, r4
   82bd8:	2100      	movs	r1, #0
   82bda:	f000 fb87 	bl	832ec <_sbrk_r>
   82bde:	68ab      	ldr	r3, [r5, #8]
   82be0:	1ac2      	subs	r2, r0, r3
   82be2:	2a0f      	cmp	r2, #15
   82be4:	ddde      	ble.n	82ba4 <_malloc_trim_r+0x3c>
   82be6:	4d06      	ldr	r5, [pc, #24]	; (82c00 <_malloc_trim_r+0x98>)
   82be8:	4904      	ldr	r1, [pc, #16]	; (82bfc <_malloc_trim_r+0x94>)
   82bea:	682d      	ldr	r5, [r5, #0]
   82bec:	f042 0201 	orr.w	r2, r2, #1
   82bf0:	1b40      	subs	r0, r0, r5
   82bf2:	605a      	str	r2, [r3, #4]
   82bf4:	6008      	str	r0, [r1, #0]
   82bf6:	e7d5      	b.n	82ba4 <_malloc_trim_r+0x3c>
   82bf8:	20070574 	.word	0x20070574
   82bfc:	20070acc 	.word	0x20070acc
   82c00:	20070980 	.word	0x20070980

00082c04 <_free_r>:
   82c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82c08:	460d      	mov	r5, r1
   82c0a:	4606      	mov	r6, r0
   82c0c:	2900      	cmp	r1, #0
   82c0e:	d055      	beq.n	82cbc <_free_r+0xb8>
   82c10:	f000 fb68 	bl	832e4 <__malloc_lock>
   82c14:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82c18:	f8df c170 	ldr.w	ip, [pc, #368]	; 82d8c <_free_r+0x188>
   82c1c:	f1a5 0408 	sub.w	r4, r5, #8
   82c20:	f021 0301 	bic.w	r3, r1, #1
   82c24:	18e2      	adds	r2, r4, r3
   82c26:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82c2a:	6857      	ldr	r7, [r2, #4]
   82c2c:	4290      	cmp	r0, r2
   82c2e:	f027 0703 	bic.w	r7, r7, #3
   82c32:	d068      	beq.n	82d06 <_free_r+0x102>
   82c34:	f011 0101 	ands.w	r1, r1, #1
   82c38:	6057      	str	r7, [r2, #4]
   82c3a:	d032      	beq.n	82ca2 <_free_r+0x9e>
   82c3c:	2100      	movs	r1, #0
   82c3e:	19d0      	adds	r0, r2, r7
   82c40:	6840      	ldr	r0, [r0, #4]
   82c42:	07c0      	lsls	r0, r0, #31
   82c44:	d406      	bmi.n	82c54 <_free_r+0x50>
   82c46:	443b      	add	r3, r7
   82c48:	6890      	ldr	r0, [r2, #8]
   82c4a:	2900      	cmp	r1, #0
   82c4c:	d04d      	beq.n	82cea <_free_r+0xe6>
   82c4e:	68d2      	ldr	r2, [r2, #12]
   82c50:	60c2      	str	r2, [r0, #12]
   82c52:	6090      	str	r0, [r2, #8]
   82c54:	f043 0201 	orr.w	r2, r3, #1
   82c58:	6062      	str	r2, [r4, #4]
   82c5a:	50e3      	str	r3, [r4, r3]
   82c5c:	b9e1      	cbnz	r1, 82c98 <_free_r+0x94>
   82c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82c62:	d32d      	bcc.n	82cc0 <_free_r+0xbc>
   82c64:	0a5a      	lsrs	r2, r3, #9
   82c66:	2a04      	cmp	r2, #4
   82c68:	d869      	bhi.n	82d3e <_free_r+0x13a>
   82c6a:	0998      	lsrs	r0, r3, #6
   82c6c:	3038      	adds	r0, #56	; 0x38
   82c6e:	0041      	lsls	r1, r0, #1
   82c70:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82c74:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82c78:	4944      	ldr	r1, [pc, #272]	; (82d8c <_free_r+0x188>)
   82c7a:	4562      	cmp	r2, ip
   82c7c:	d065      	beq.n	82d4a <_free_r+0x146>
   82c7e:	6851      	ldr	r1, [r2, #4]
   82c80:	f021 0103 	bic.w	r1, r1, #3
   82c84:	428b      	cmp	r3, r1
   82c86:	d202      	bcs.n	82c8e <_free_r+0x8a>
   82c88:	6892      	ldr	r2, [r2, #8]
   82c8a:	4594      	cmp	ip, r2
   82c8c:	d1f7      	bne.n	82c7e <_free_r+0x7a>
   82c8e:	68d3      	ldr	r3, [r2, #12]
   82c90:	60e3      	str	r3, [r4, #12]
   82c92:	60a2      	str	r2, [r4, #8]
   82c94:	609c      	str	r4, [r3, #8]
   82c96:	60d4      	str	r4, [r2, #12]
   82c98:	4630      	mov	r0, r6
   82c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82c9e:	f000 bb23 	b.w	832e8 <__malloc_unlock>
   82ca2:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82ca6:	f10c 0808 	add.w	r8, ip, #8
   82caa:	1b64      	subs	r4, r4, r5
   82cac:	68a0      	ldr	r0, [r4, #8]
   82cae:	442b      	add	r3, r5
   82cb0:	4540      	cmp	r0, r8
   82cb2:	d042      	beq.n	82d3a <_free_r+0x136>
   82cb4:	68e5      	ldr	r5, [r4, #12]
   82cb6:	60c5      	str	r5, [r0, #12]
   82cb8:	60a8      	str	r0, [r5, #8]
   82cba:	e7c0      	b.n	82c3e <_free_r+0x3a>
   82cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82cc0:	08db      	lsrs	r3, r3, #3
   82cc2:	109a      	asrs	r2, r3, #2
   82cc4:	2001      	movs	r0, #1
   82cc6:	4090      	lsls	r0, r2
   82cc8:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82ccc:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82cd0:	689a      	ldr	r2, [r3, #8]
   82cd2:	4301      	orrs	r1, r0
   82cd4:	60a2      	str	r2, [r4, #8]
   82cd6:	60e3      	str	r3, [r4, #12]
   82cd8:	f8cc 1004 	str.w	r1, [ip, #4]
   82cdc:	4630      	mov	r0, r6
   82cde:	609c      	str	r4, [r3, #8]
   82ce0:	60d4      	str	r4, [r2, #12]
   82ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82ce6:	f000 baff 	b.w	832e8 <__malloc_unlock>
   82cea:	4d29      	ldr	r5, [pc, #164]	; (82d90 <_free_r+0x18c>)
   82cec:	42a8      	cmp	r0, r5
   82cee:	d1ae      	bne.n	82c4e <_free_r+0x4a>
   82cf0:	f043 0201 	orr.w	r2, r3, #1
   82cf4:	f8cc 4014 	str.w	r4, [ip, #20]
   82cf8:	f8cc 4010 	str.w	r4, [ip, #16]
   82cfc:	60e0      	str	r0, [r4, #12]
   82cfe:	60a0      	str	r0, [r4, #8]
   82d00:	6062      	str	r2, [r4, #4]
   82d02:	50e3      	str	r3, [r4, r3]
   82d04:	e7c8      	b.n	82c98 <_free_r+0x94>
   82d06:	441f      	add	r7, r3
   82d08:	07cb      	lsls	r3, r1, #31
   82d0a:	d407      	bmi.n	82d1c <_free_r+0x118>
   82d0c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82d10:	1a64      	subs	r4, r4, r1
   82d12:	68e3      	ldr	r3, [r4, #12]
   82d14:	68a2      	ldr	r2, [r4, #8]
   82d16:	440f      	add	r7, r1
   82d18:	60d3      	str	r3, [r2, #12]
   82d1a:	609a      	str	r2, [r3, #8]
   82d1c:	4b1d      	ldr	r3, [pc, #116]	; (82d94 <_free_r+0x190>)
   82d1e:	f047 0201 	orr.w	r2, r7, #1
   82d22:	681b      	ldr	r3, [r3, #0]
   82d24:	6062      	str	r2, [r4, #4]
   82d26:	429f      	cmp	r7, r3
   82d28:	f8cc 4008 	str.w	r4, [ip, #8]
   82d2c:	d3b4      	bcc.n	82c98 <_free_r+0x94>
   82d2e:	4b1a      	ldr	r3, [pc, #104]	; (82d98 <_free_r+0x194>)
   82d30:	4630      	mov	r0, r6
   82d32:	6819      	ldr	r1, [r3, #0]
   82d34:	f7ff ff18 	bl	82b68 <_malloc_trim_r>
   82d38:	e7ae      	b.n	82c98 <_free_r+0x94>
   82d3a:	2101      	movs	r1, #1
   82d3c:	e77f      	b.n	82c3e <_free_r+0x3a>
   82d3e:	2a14      	cmp	r2, #20
   82d40:	d80b      	bhi.n	82d5a <_free_r+0x156>
   82d42:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82d46:	0041      	lsls	r1, r0, #1
   82d48:	e792      	b.n	82c70 <_free_r+0x6c>
   82d4a:	1080      	asrs	r0, r0, #2
   82d4c:	2501      	movs	r5, #1
   82d4e:	4085      	lsls	r5, r0
   82d50:	6848      	ldr	r0, [r1, #4]
   82d52:	4613      	mov	r3, r2
   82d54:	4328      	orrs	r0, r5
   82d56:	6048      	str	r0, [r1, #4]
   82d58:	e79a      	b.n	82c90 <_free_r+0x8c>
   82d5a:	2a54      	cmp	r2, #84	; 0x54
   82d5c:	d803      	bhi.n	82d66 <_free_r+0x162>
   82d5e:	0b18      	lsrs	r0, r3, #12
   82d60:	306e      	adds	r0, #110	; 0x6e
   82d62:	0041      	lsls	r1, r0, #1
   82d64:	e784      	b.n	82c70 <_free_r+0x6c>
   82d66:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82d6a:	d803      	bhi.n	82d74 <_free_r+0x170>
   82d6c:	0bd8      	lsrs	r0, r3, #15
   82d6e:	3077      	adds	r0, #119	; 0x77
   82d70:	0041      	lsls	r1, r0, #1
   82d72:	e77d      	b.n	82c70 <_free_r+0x6c>
   82d74:	f240 5154 	movw	r1, #1364	; 0x554
   82d78:	428a      	cmp	r2, r1
   82d7a:	d803      	bhi.n	82d84 <_free_r+0x180>
   82d7c:	0c98      	lsrs	r0, r3, #18
   82d7e:	307c      	adds	r0, #124	; 0x7c
   82d80:	0041      	lsls	r1, r0, #1
   82d82:	e775      	b.n	82c70 <_free_r+0x6c>
   82d84:	21fc      	movs	r1, #252	; 0xfc
   82d86:	207e      	movs	r0, #126	; 0x7e
   82d88:	e772      	b.n	82c70 <_free_r+0x6c>
   82d8a:	bf00      	nop
   82d8c:	20070574 	.word	0x20070574
   82d90:	2007057c 	.word	0x2007057c
   82d94:	2007097c 	.word	0x2007097c
   82d98:	20070ac8 	.word	0x20070ac8

00082d9c <malloc>:
   82d9c:	4b02      	ldr	r3, [pc, #8]	; (82da8 <malloc+0xc>)
   82d9e:	4601      	mov	r1, r0
   82da0:	6818      	ldr	r0, [r3, #0]
   82da2:	f000 b803 	b.w	82dac <_malloc_r>
   82da6:	bf00      	nop
   82da8:	20070570 	.word	0x20070570

00082dac <_malloc_r>:
   82dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82db0:	f101 050b 	add.w	r5, r1, #11
   82db4:	2d16      	cmp	r5, #22
   82db6:	b083      	sub	sp, #12
   82db8:	4606      	mov	r6, r0
   82dba:	d927      	bls.n	82e0c <_malloc_r+0x60>
   82dbc:	f035 0507 	bics.w	r5, r5, #7
   82dc0:	d427      	bmi.n	82e12 <_malloc_r+0x66>
   82dc2:	42a9      	cmp	r1, r5
   82dc4:	d825      	bhi.n	82e12 <_malloc_r+0x66>
   82dc6:	4630      	mov	r0, r6
   82dc8:	f000 fa8c 	bl	832e4 <__malloc_lock>
   82dcc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82dd0:	d226      	bcs.n	82e20 <_malloc_r+0x74>
   82dd2:	4fc1      	ldr	r7, [pc, #772]	; (830d8 <_malloc_r+0x32c>)
   82dd4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82dd8:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82ddc:	68dc      	ldr	r4, [r3, #12]
   82dde:	429c      	cmp	r4, r3
   82de0:	f000 81d2 	beq.w	83188 <_malloc_r+0x3dc>
   82de4:	6863      	ldr	r3, [r4, #4]
   82de6:	68e2      	ldr	r2, [r4, #12]
   82de8:	f023 0303 	bic.w	r3, r3, #3
   82dec:	4423      	add	r3, r4
   82dee:	6858      	ldr	r0, [r3, #4]
   82df0:	68a1      	ldr	r1, [r4, #8]
   82df2:	f040 0501 	orr.w	r5, r0, #1
   82df6:	60ca      	str	r2, [r1, #12]
   82df8:	4630      	mov	r0, r6
   82dfa:	6091      	str	r1, [r2, #8]
   82dfc:	605d      	str	r5, [r3, #4]
   82dfe:	f000 fa73 	bl	832e8 <__malloc_unlock>
   82e02:	3408      	adds	r4, #8
   82e04:	4620      	mov	r0, r4
   82e06:	b003      	add	sp, #12
   82e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e0c:	2510      	movs	r5, #16
   82e0e:	42a9      	cmp	r1, r5
   82e10:	d9d9      	bls.n	82dc6 <_malloc_r+0x1a>
   82e12:	2400      	movs	r4, #0
   82e14:	230c      	movs	r3, #12
   82e16:	4620      	mov	r0, r4
   82e18:	6033      	str	r3, [r6, #0]
   82e1a:	b003      	add	sp, #12
   82e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e20:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82e24:	f000 8089 	beq.w	82f3a <_malloc_r+0x18e>
   82e28:	f1bc 0f04 	cmp.w	ip, #4
   82e2c:	f200 8160 	bhi.w	830f0 <_malloc_r+0x344>
   82e30:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82e34:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82e38:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e3c:	4fa6      	ldr	r7, [pc, #664]	; (830d8 <_malloc_r+0x32c>)
   82e3e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82e42:	68cc      	ldr	r4, [r1, #12]
   82e44:	42a1      	cmp	r1, r4
   82e46:	d105      	bne.n	82e54 <_malloc_r+0xa8>
   82e48:	e00c      	b.n	82e64 <_malloc_r+0xb8>
   82e4a:	2b00      	cmp	r3, #0
   82e4c:	da79      	bge.n	82f42 <_malloc_r+0x196>
   82e4e:	68e4      	ldr	r4, [r4, #12]
   82e50:	42a1      	cmp	r1, r4
   82e52:	d007      	beq.n	82e64 <_malloc_r+0xb8>
   82e54:	6862      	ldr	r2, [r4, #4]
   82e56:	f022 0203 	bic.w	r2, r2, #3
   82e5a:	1b53      	subs	r3, r2, r5
   82e5c:	2b0f      	cmp	r3, #15
   82e5e:	ddf4      	ble.n	82e4a <_malloc_r+0x9e>
   82e60:	f10c 3cff 	add.w	ip, ip, #4294967295
   82e64:	f10c 0c01 	add.w	ip, ip, #1
   82e68:	4b9b      	ldr	r3, [pc, #620]	; (830d8 <_malloc_r+0x32c>)
   82e6a:	693c      	ldr	r4, [r7, #16]
   82e6c:	f103 0e08 	add.w	lr, r3, #8
   82e70:	4574      	cmp	r4, lr
   82e72:	f000 817e 	beq.w	83172 <_malloc_r+0x3c6>
   82e76:	6861      	ldr	r1, [r4, #4]
   82e78:	f021 0103 	bic.w	r1, r1, #3
   82e7c:	1b4a      	subs	r2, r1, r5
   82e7e:	2a0f      	cmp	r2, #15
   82e80:	f300 8164 	bgt.w	8314c <_malloc_r+0x3a0>
   82e84:	2a00      	cmp	r2, #0
   82e86:	f8c3 e014 	str.w	lr, [r3, #20]
   82e8a:	f8c3 e010 	str.w	lr, [r3, #16]
   82e8e:	da69      	bge.n	82f64 <_malloc_r+0x1b8>
   82e90:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82e94:	f080 813a 	bcs.w	8310c <_malloc_r+0x360>
   82e98:	08c9      	lsrs	r1, r1, #3
   82e9a:	108a      	asrs	r2, r1, #2
   82e9c:	f04f 0801 	mov.w	r8, #1
   82ea0:	fa08 f802 	lsl.w	r8, r8, r2
   82ea4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82ea8:	685a      	ldr	r2, [r3, #4]
   82eaa:	6888      	ldr	r0, [r1, #8]
   82eac:	ea48 0202 	orr.w	r2, r8, r2
   82eb0:	60a0      	str	r0, [r4, #8]
   82eb2:	60e1      	str	r1, [r4, #12]
   82eb4:	605a      	str	r2, [r3, #4]
   82eb6:	608c      	str	r4, [r1, #8]
   82eb8:	60c4      	str	r4, [r0, #12]
   82eba:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82ebe:	2001      	movs	r0, #1
   82ec0:	4098      	lsls	r0, r3
   82ec2:	4290      	cmp	r0, r2
   82ec4:	d85b      	bhi.n	82f7e <_malloc_r+0x1d2>
   82ec6:	4202      	tst	r2, r0
   82ec8:	d106      	bne.n	82ed8 <_malloc_r+0x12c>
   82eca:	f02c 0c03 	bic.w	ip, ip, #3
   82ece:	0040      	lsls	r0, r0, #1
   82ed0:	4202      	tst	r2, r0
   82ed2:	f10c 0c04 	add.w	ip, ip, #4
   82ed6:	d0fa      	beq.n	82ece <_malloc_r+0x122>
   82ed8:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82edc:	4644      	mov	r4, r8
   82ede:	46e1      	mov	r9, ip
   82ee0:	68e3      	ldr	r3, [r4, #12]
   82ee2:	429c      	cmp	r4, r3
   82ee4:	d107      	bne.n	82ef6 <_malloc_r+0x14a>
   82ee6:	e146      	b.n	83176 <_malloc_r+0x3ca>
   82ee8:	2a00      	cmp	r2, #0
   82eea:	f280 8157 	bge.w	8319c <_malloc_r+0x3f0>
   82eee:	68db      	ldr	r3, [r3, #12]
   82ef0:	429c      	cmp	r4, r3
   82ef2:	f000 8140 	beq.w	83176 <_malloc_r+0x3ca>
   82ef6:	6859      	ldr	r1, [r3, #4]
   82ef8:	f021 0103 	bic.w	r1, r1, #3
   82efc:	1b4a      	subs	r2, r1, r5
   82efe:	2a0f      	cmp	r2, #15
   82f00:	ddf2      	ble.n	82ee8 <_malloc_r+0x13c>
   82f02:	461c      	mov	r4, r3
   82f04:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82f08:	68d9      	ldr	r1, [r3, #12]
   82f0a:	f045 0901 	orr.w	r9, r5, #1
   82f0e:	f042 0801 	orr.w	r8, r2, #1
   82f12:	441d      	add	r5, r3
   82f14:	f8c3 9004 	str.w	r9, [r3, #4]
   82f18:	4630      	mov	r0, r6
   82f1a:	f8cc 100c 	str.w	r1, [ip, #12]
   82f1e:	f8c1 c008 	str.w	ip, [r1, #8]
   82f22:	617d      	str	r5, [r7, #20]
   82f24:	613d      	str	r5, [r7, #16]
   82f26:	f8c5 e00c 	str.w	lr, [r5, #12]
   82f2a:	f8c5 e008 	str.w	lr, [r5, #8]
   82f2e:	f8c5 8004 	str.w	r8, [r5, #4]
   82f32:	50aa      	str	r2, [r5, r2]
   82f34:	f000 f9d8 	bl	832e8 <__malloc_unlock>
   82f38:	e764      	b.n	82e04 <_malloc_r+0x58>
   82f3a:	217e      	movs	r1, #126	; 0x7e
   82f3c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82f40:	e77c      	b.n	82e3c <_malloc_r+0x90>
   82f42:	4422      	add	r2, r4
   82f44:	6850      	ldr	r0, [r2, #4]
   82f46:	68e3      	ldr	r3, [r4, #12]
   82f48:	68a1      	ldr	r1, [r4, #8]
   82f4a:	f040 0501 	orr.w	r5, r0, #1
   82f4e:	60cb      	str	r3, [r1, #12]
   82f50:	4630      	mov	r0, r6
   82f52:	6099      	str	r1, [r3, #8]
   82f54:	6055      	str	r5, [r2, #4]
   82f56:	f000 f9c7 	bl	832e8 <__malloc_unlock>
   82f5a:	3408      	adds	r4, #8
   82f5c:	4620      	mov	r0, r4
   82f5e:	b003      	add	sp, #12
   82f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f64:	4421      	add	r1, r4
   82f66:	684b      	ldr	r3, [r1, #4]
   82f68:	4630      	mov	r0, r6
   82f6a:	f043 0301 	orr.w	r3, r3, #1
   82f6e:	604b      	str	r3, [r1, #4]
   82f70:	f000 f9ba 	bl	832e8 <__malloc_unlock>
   82f74:	3408      	adds	r4, #8
   82f76:	4620      	mov	r0, r4
   82f78:	b003      	add	sp, #12
   82f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f7e:	68bc      	ldr	r4, [r7, #8]
   82f80:	6863      	ldr	r3, [r4, #4]
   82f82:	f023 0903 	bic.w	r9, r3, #3
   82f86:	45a9      	cmp	r9, r5
   82f88:	d304      	bcc.n	82f94 <_malloc_r+0x1e8>
   82f8a:	ebc5 0309 	rsb	r3, r5, r9
   82f8e:	2b0f      	cmp	r3, #15
   82f90:	f300 8091 	bgt.w	830b6 <_malloc_r+0x30a>
   82f94:	4b51      	ldr	r3, [pc, #324]	; (830dc <_malloc_r+0x330>)
   82f96:	4a52      	ldr	r2, [pc, #328]	; (830e0 <_malloc_r+0x334>)
   82f98:	6819      	ldr	r1, [r3, #0]
   82f9a:	6813      	ldr	r3, [r2, #0]
   82f9c:	eb05 0a01 	add.w	sl, r5, r1
   82fa0:	3301      	adds	r3, #1
   82fa2:	eb04 0b09 	add.w	fp, r4, r9
   82fa6:	f000 8161 	beq.w	8326c <_malloc_r+0x4c0>
   82faa:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82fae:	f10a 0a0f 	add.w	sl, sl, #15
   82fb2:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82fb6:	f02a 0a0f 	bic.w	sl, sl, #15
   82fba:	4630      	mov	r0, r6
   82fbc:	4651      	mov	r1, sl
   82fbe:	9201      	str	r2, [sp, #4]
   82fc0:	f000 f994 	bl	832ec <_sbrk_r>
   82fc4:	f1b0 3fff 	cmp.w	r0, #4294967295
   82fc8:	4680      	mov	r8, r0
   82fca:	9a01      	ldr	r2, [sp, #4]
   82fcc:	f000 8101 	beq.w	831d2 <_malloc_r+0x426>
   82fd0:	4583      	cmp	fp, r0
   82fd2:	f200 80fb 	bhi.w	831cc <_malloc_r+0x420>
   82fd6:	f8df c114 	ldr.w	ip, [pc, #276]	; 830ec <_malloc_r+0x340>
   82fda:	45c3      	cmp	fp, r8
   82fdc:	f8dc 3000 	ldr.w	r3, [ip]
   82fe0:	4453      	add	r3, sl
   82fe2:	f8cc 3000 	str.w	r3, [ip]
   82fe6:	f000 814a 	beq.w	8327e <_malloc_r+0x4d2>
   82fea:	6812      	ldr	r2, [r2, #0]
   82fec:	493c      	ldr	r1, [pc, #240]	; (830e0 <_malloc_r+0x334>)
   82fee:	3201      	adds	r2, #1
   82ff0:	bf1b      	ittet	ne
   82ff2:	ebcb 0b08 	rsbne	fp, fp, r8
   82ff6:	445b      	addne	r3, fp
   82ff8:	f8c1 8000 	streq.w	r8, [r1]
   82ffc:	f8cc 3000 	strne.w	r3, [ip]
   83000:	f018 0307 	ands.w	r3, r8, #7
   83004:	f000 8114 	beq.w	83230 <_malloc_r+0x484>
   83008:	f1c3 0208 	rsb	r2, r3, #8
   8300c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   83010:	4490      	add	r8, r2
   83012:	3308      	adds	r3, #8
   83014:	44c2      	add	sl, r8
   83016:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   8301a:	ebca 0a03 	rsb	sl, sl, r3
   8301e:	4651      	mov	r1, sl
   83020:	4630      	mov	r0, r6
   83022:	f8cd c004 	str.w	ip, [sp, #4]
   83026:	f000 f961 	bl	832ec <_sbrk_r>
   8302a:	1c43      	adds	r3, r0, #1
   8302c:	f8dd c004 	ldr.w	ip, [sp, #4]
   83030:	f000 8135 	beq.w	8329e <_malloc_r+0x4f2>
   83034:	ebc8 0200 	rsb	r2, r8, r0
   83038:	4452      	add	r2, sl
   8303a:	f042 0201 	orr.w	r2, r2, #1
   8303e:	f8dc 3000 	ldr.w	r3, [ip]
   83042:	42bc      	cmp	r4, r7
   83044:	4453      	add	r3, sl
   83046:	f8c7 8008 	str.w	r8, [r7, #8]
   8304a:	f8cc 3000 	str.w	r3, [ip]
   8304e:	f8c8 2004 	str.w	r2, [r8, #4]
   83052:	f8df a098 	ldr.w	sl, [pc, #152]	; 830ec <_malloc_r+0x340>
   83056:	d015      	beq.n	83084 <_malloc_r+0x2d8>
   83058:	f1b9 0f0f 	cmp.w	r9, #15
   8305c:	f240 80eb 	bls.w	83236 <_malloc_r+0x48a>
   83060:	6861      	ldr	r1, [r4, #4]
   83062:	f1a9 020c 	sub.w	r2, r9, #12
   83066:	f022 0207 	bic.w	r2, r2, #7
   8306a:	f001 0101 	and.w	r1, r1, #1
   8306e:	ea42 0e01 	orr.w	lr, r2, r1
   83072:	2005      	movs	r0, #5
   83074:	18a1      	adds	r1, r4, r2
   83076:	2a0f      	cmp	r2, #15
   83078:	f8c4 e004 	str.w	lr, [r4, #4]
   8307c:	6048      	str	r0, [r1, #4]
   8307e:	6088      	str	r0, [r1, #8]
   83080:	f200 8111 	bhi.w	832a6 <_malloc_r+0x4fa>
   83084:	4a17      	ldr	r2, [pc, #92]	; (830e4 <_malloc_r+0x338>)
   83086:	68bc      	ldr	r4, [r7, #8]
   83088:	6811      	ldr	r1, [r2, #0]
   8308a:	428b      	cmp	r3, r1
   8308c:	bf88      	it	hi
   8308e:	6013      	strhi	r3, [r2, #0]
   83090:	4a15      	ldr	r2, [pc, #84]	; (830e8 <_malloc_r+0x33c>)
   83092:	6811      	ldr	r1, [r2, #0]
   83094:	428b      	cmp	r3, r1
   83096:	bf88      	it	hi
   83098:	6013      	strhi	r3, [r2, #0]
   8309a:	6862      	ldr	r2, [r4, #4]
   8309c:	f022 0203 	bic.w	r2, r2, #3
   830a0:	4295      	cmp	r5, r2
   830a2:	ebc5 0302 	rsb	r3, r5, r2
   830a6:	d801      	bhi.n	830ac <_malloc_r+0x300>
   830a8:	2b0f      	cmp	r3, #15
   830aa:	dc04      	bgt.n	830b6 <_malloc_r+0x30a>
   830ac:	4630      	mov	r0, r6
   830ae:	f000 f91b 	bl	832e8 <__malloc_unlock>
   830b2:	2400      	movs	r4, #0
   830b4:	e6a6      	b.n	82e04 <_malloc_r+0x58>
   830b6:	f045 0201 	orr.w	r2, r5, #1
   830ba:	f043 0301 	orr.w	r3, r3, #1
   830be:	4425      	add	r5, r4
   830c0:	6062      	str	r2, [r4, #4]
   830c2:	4630      	mov	r0, r6
   830c4:	60bd      	str	r5, [r7, #8]
   830c6:	606b      	str	r3, [r5, #4]
   830c8:	f000 f90e 	bl	832e8 <__malloc_unlock>
   830cc:	3408      	adds	r4, #8
   830ce:	4620      	mov	r0, r4
   830d0:	b003      	add	sp, #12
   830d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830d6:	bf00      	nop
   830d8:	20070574 	.word	0x20070574
   830dc:	20070ac8 	.word	0x20070ac8
   830e0:	20070980 	.word	0x20070980
   830e4:	20070ac4 	.word	0x20070ac4
   830e8:	20070ac0 	.word	0x20070ac0
   830ec:	20070acc 	.word	0x20070acc
   830f0:	f1bc 0f14 	cmp.w	ip, #20
   830f4:	d961      	bls.n	831ba <_malloc_r+0x40e>
   830f6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   830fa:	f200 808f 	bhi.w	8321c <_malloc_r+0x470>
   830fe:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   83102:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   83106:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8310a:	e697      	b.n	82e3c <_malloc_r+0x90>
   8310c:	0a4b      	lsrs	r3, r1, #9
   8310e:	2b04      	cmp	r3, #4
   83110:	d958      	bls.n	831c4 <_malloc_r+0x418>
   83112:	2b14      	cmp	r3, #20
   83114:	f200 80ad 	bhi.w	83272 <_malloc_r+0x4c6>
   83118:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8311c:	0050      	lsls	r0, r2, #1
   8311e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   83122:	6883      	ldr	r3, [r0, #8]
   83124:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 832e0 <_malloc_r+0x534>
   83128:	4283      	cmp	r3, r0
   8312a:	f000 808a 	beq.w	83242 <_malloc_r+0x496>
   8312e:	685a      	ldr	r2, [r3, #4]
   83130:	f022 0203 	bic.w	r2, r2, #3
   83134:	4291      	cmp	r1, r2
   83136:	d202      	bcs.n	8313e <_malloc_r+0x392>
   83138:	689b      	ldr	r3, [r3, #8]
   8313a:	4298      	cmp	r0, r3
   8313c:	d1f7      	bne.n	8312e <_malloc_r+0x382>
   8313e:	68d9      	ldr	r1, [r3, #12]
   83140:	687a      	ldr	r2, [r7, #4]
   83142:	60e1      	str	r1, [r4, #12]
   83144:	60a3      	str	r3, [r4, #8]
   83146:	608c      	str	r4, [r1, #8]
   83148:	60dc      	str	r4, [r3, #12]
   8314a:	e6b6      	b.n	82eba <_malloc_r+0x10e>
   8314c:	f045 0701 	orr.w	r7, r5, #1
   83150:	f042 0101 	orr.w	r1, r2, #1
   83154:	4425      	add	r5, r4
   83156:	6067      	str	r7, [r4, #4]
   83158:	4630      	mov	r0, r6
   8315a:	615d      	str	r5, [r3, #20]
   8315c:	611d      	str	r5, [r3, #16]
   8315e:	f8c5 e00c 	str.w	lr, [r5, #12]
   83162:	f8c5 e008 	str.w	lr, [r5, #8]
   83166:	6069      	str	r1, [r5, #4]
   83168:	50aa      	str	r2, [r5, r2]
   8316a:	3408      	adds	r4, #8
   8316c:	f000 f8bc 	bl	832e8 <__malloc_unlock>
   83170:	e648      	b.n	82e04 <_malloc_r+0x58>
   83172:	685a      	ldr	r2, [r3, #4]
   83174:	e6a1      	b.n	82eba <_malloc_r+0x10e>
   83176:	f109 0901 	add.w	r9, r9, #1
   8317a:	f019 0f03 	tst.w	r9, #3
   8317e:	f104 0408 	add.w	r4, r4, #8
   83182:	f47f aead 	bne.w	82ee0 <_malloc_r+0x134>
   83186:	e02d      	b.n	831e4 <_malloc_r+0x438>
   83188:	f104 0308 	add.w	r3, r4, #8
   8318c:	6964      	ldr	r4, [r4, #20]
   8318e:	42a3      	cmp	r3, r4
   83190:	bf08      	it	eq
   83192:	f10c 0c02 	addeq.w	ip, ip, #2
   83196:	f43f ae67 	beq.w	82e68 <_malloc_r+0xbc>
   8319a:	e623      	b.n	82de4 <_malloc_r+0x38>
   8319c:	4419      	add	r1, r3
   8319e:	6848      	ldr	r0, [r1, #4]
   831a0:	461c      	mov	r4, r3
   831a2:	f854 2f08 	ldr.w	r2, [r4, #8]!
   831a6:	68db      	ldr	r3, [r3, #12]
   831a8:	f040 0501 	orr.w	r5, r0, #1
   831ac:	604d      	str	r5, [r1, #4]
   831ae:	4630      	mov	r0, r6
   831b0:	60d3      	str	r3, [r2, #12]
   831b2:	609a      	str	r2, [r3, #8]
   831b4:	f000 f898 	bl	832e8 <__malloc_unlock>
   831b8:	e624      	b.n	82e04 <_malloc_r+0x58>
   831ba:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   831be:	ea4f 014c 	mov.w	r1, ip, lsl #1
   831c2:	e63b      	b.n	82e3c <_malloc_r+0x90>
   831c4:	098a      	lsrs	r2, r1, #6
   831c6:	3238      	adds	r2, #56	; 0x38
   831c8:	0050      	lsls	r0, r2, #1
   831ca:	e7a8      	b.n	8311e <_malloc_r+0x372>
   831cc:	42bc      	cmp	r4, r7
   831ce:	f43f af02 	beq.w	82fd6 <_malloc_r+0x22a>
   831d2:	68bc      	ldr	r4, [r7, #8]
   831d4:	6862      	ldr	r2, [r4, #4]
   831d6:	f022 0203 	bic.w	r2, r2, #3
   831da:	e761      	b.n	830a0 <_malloc_r+0x2f4>
   831dc:	f8d8 8000 	ldr.w	r8, [r8]
   831e0:	4598      	cmp	r8, r3
   831e2:	d17a      	bne.n	832da <_malloc_r+0x52e>
   831e4:	f01c 0f03 	tst.w	ip, #3
   831e8:	f1a8 0308 	sub.w	r3, r8, #8
   831ec:	f10c 3cff 	add.w	ip, ip, #4294967295
   831f0:	d1f4      	bne.n	831dc <_malloc_r+0x430>
   831f2:	687b      	ldr	r3, [r7, #4]
   831f4:	ea23 0300 	bic.w	r3, r3, r0
   831f8:	607b      	str	r3, [r7, #4]
   831fa:	0040      	lsls	r0, r0, #1
   831fc:	4298      	cmp	r0, r3
   831fe:	f63f aebe 	bhi.w	82f7e <_malloc_r+0x1d2>
   83202:	2800      	cmp	r0, #0
   83204:	f43f aebb 	beq.w	82f7e <_malloc_r+0x1d2>
   83208:	4203      	tst	r3, r0
   8320a:	46cc      	mov	ip, r9
   8320c:	f47f ae64 	bne.w	82ed8 <_malloc_r+0x12c>
   83210:	0040      	lsls	r0, r0, #1
   83212:	4203      	tst	r3, r0
   83214:	f10c 0c04 	add.w	ip, ip, #4
   83218:	d0fa      	beq.n	83210 <_malloc_r+0x464>
   8321a:	e65d      	b.n	82ed8 <_malloc_r+0x12c>
   8321c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83220:	d819      	bhi.n	83256 <_malloc_r+0x4aa>
   83222:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   83226:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   8322a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8322e:	e605      	b.n	82e3c <_malloc_r+0x90>
   83230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83234:	e6ee      	b.n	83014 <_malloc_r+0x268>
   83236:	2301      	movs	r3, #1
   83238:	f8c8 3004 	str.w	r3, [r8, #4]
   8323c:	4644      	mov	r4, r8
   8323e:	2200      	movs	r2, #0
   83240:	e72e      	b.n	830a0 <_malloc_r+0x2f4>
   83242:	1092      	asrs	r2, r2, #2
   83244:	2001      	movs	r0, #1
   83246:	4090      	lsls	r0, r2
   83248:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8324c:	4619      	mov	r1, r3
   8324e:	4302      	orrs	r2, r0
   83250:	f8c8 2004 	str.w	r2, [r8, #4]
   83254:	e775      	b.n	83142 <_malloc_r+0x396>
   83256:	f240 5354 	movw	r3, #1364	; 0x554
   8325a:	459c      	cmp	ip, r3
   8325c:	d81b      	bhi.n	83296 <_malloc_r+0x4ea>
   8325e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   83262:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   83266:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8326a:	e5e7      	b.n	82e3c <_malloc_r+0x90>
   8326c:	f10a 0a10 	add.w	sl, sl, #16
   83270:	e6a3      	b.n	82fba <_malloc_r+0x20e>
   83272:	2b54      	cmp	r3, #84	; 0x54
   83274:	d81f      	bhi.n	832b6 <_malloc_r+0x50a>
   83276:	0b0a      	lsrs	r2, r1, #12
   83278:	326e      	adds	r2, #110	; 0x6e
   8327a:	0050      	lsls	r0, r2, #1
   8327c:	e74f      	b.n	8311e <_malloc_r+0x372>
   8327e:	f3cb 010b 	ubfx	r1, fp, #0, #12
   83282:	2900      	cmp	r1, #0
   83284:	f47f aeb1 	bne.w	82fea <_malloc_r+0x23e>
   83288:	eb0a 0109 	add.w	r1, sl, r9
   8328c:	68ba      	ldr	r2, [r7, #8]
   8328e:	f041 0101 	orr.w	r1, r1, #1
   83292:	6051      	str	r1, [r2, #4]
   83294:	e6f6      	b.n	83084 <_malloc_r+0x2d8>
   83296:	21fc      	movs	r1, #252	; 0xfc
   83298:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   8329c:	e5ce      	b.n	82e3c <_malloc_r+0x90>
   8329e:	2201      	movs	r2, #1
   832a0:	f04f 0a00 	mov.w	sl, #0
   832a4:	e6cb      	b.n	8303e <_malloc_r+0x292>
   832a6:	f104 0108 	add.w	r1, r4, #8
   832aa:	4630      	mov	r0, r6
   832ac:	f7ff fcaa 	bl	82c04 <_free_r>
   832b0:	f8da 3000 	ldr.w	r3, [sl]
   832b4:	e6e6      	b.n	83084 <_malloc_r+0x2d8>
   832b6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   832ba:	d803      	bhi.n	832c4 <_malloc_r+0x518>
   832bc:	0bca      	lsrs	r2, r1, #15
   832be:	3277      	adds	r2, #119	; 0x77
   832c0:	0050      	lsls	r0, r2, #1
   832c2:	e72c      	b.n	8311e <_malloc_r+0x372>
   832c4:	f240 5254 	movw	r2, #1364	; 0x554
   832c8:	4293      	cmp	r3, r2
   832ca:	d803      	bhi.n	832d4 <_malloc_r+0x528>
   832cc:	0c8a      	lsrs	r2, r1, #18
   832ce:	327c      	adds	r2, #124	; 0x7c
   832d0:	0050      	lsls	r0, r2, #1
   832d2:	e724      	b.n	8311e <_malloc_r+0x372>
   832d4:	20fc      	movs	r0, #252	; 0xfc
   832d6:	227e      	movs	r2, #126	; 0x7e
   832d8:	e721      	b.n	8311e <_malloc_r+0x372>
   832da:	687b      	ldr	r3, [r7, #4]
   832dc:	e78d      	b.n	831fa <_malloc_r+0x44e>
   832de:	bf00      	nop
   832e0:	20070574 	.word	0x20070574

000832e4 <__malloc_lock>:
   832e4:	4770      	bx	lr
   832e6:	bf00      	nop

000832e8 <__malloc_unlock>:
   832e8:	4770      	bx	lr
   832ea:	bf00      	nop

000832ec <_sbrk_r>:
   832ec:	b538      	push	{r3, r4, r5, lr}
   832ee:	4c07      	ldr	r4, [pc, #28]	; (8330c <_sbrk_r+0x20>)
   832f0:	2300      	movs	r3, #0
   832f2:	4605      	mov	r5, r0
   832f4:	4608      	mov	r0, r1
   832f6:	6023      	str	r3, [r4, #0]
   832f8:	f7fe f91a 	bl	81530 <_sbrk>
   832fc:	1c43      	adds	r3, r0, #1
   832fe:	d000      	beq.n	83302 <_sbrk_r+0x16>
   83300:	bd38      	pop	{r3, r4, r5, pc}
   83302:	6823      	ldr	r3, [r4, #0]
   83304:	2b00      	cmp	r3, #0
   83306:	d0fb      	beq.n	83300 <_sbrk_r+0x14>
   83308:	602b      	str	r3, [r5, #0]
   8330a:	bd38      	pop	{r3, r4, r5, pc}
   8330c:	20070b64 	.word	0x20070b64

00083310 <__register_exitproc>:
   83310:	b5f0      	push	{r4, r5, r6, r7, lr}
   83312:	4c27      	ldr	r4, [pc, #156]	; (833b0 <__register_exitproc+0xa0>)
   83314:	b085      	sub	sp, #20
   83316:	6826      	ldr	r6, [r4, #0]
   83318:	4607      	mov	r7, r0
   8331a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8331e:	2c00      	cmp	r4, #0
   83320:	d040      	beq.n	833a4 <__register_exitproc+0x94>
   83322:	6865      	ldr	r5, [r4, #4]
   83324:	2d1f      	cmp	r5, #31
   83326:	dd1e      	ble.n	83366 <__register_exitproc+0x56>
   83328:	4822      	ldr	r0, [pc, #136]	; (833b4 <__register_exitproc+0xa4>)
   8332a:	b918      	cbnz	r0, 83334 <__register_exitproc+0x24>
   8332c:	f04f 30ff 	mov.w	r0, #4294967295
   83330:	b005      	add	sp, #20
   83332:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83334:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83338:	9103      	str	r1, [sp, #12]
   8333a:	9202      	str	r2, [sp, #8]
   8333c:	9301      	str	r3, [sp, #4]
   8333e:	f7ff fd2d 	bl	82d9c <malloc>
   83342:	9903      	ldr	r1, [sp, #12]
   83344:	4604      	mov	r4, r0
   83346:	9a02      	ldr	r2, [sp, #8]
   83348:	9b01      	ldr	r3, [sp, #4]
   8334a:	2800      	cmp	r0, #0
   8334c:	d0ee      	beq.n	8332c <__register_exitproc+0x1c>
   8334e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83352:	2000      	movs	r0, #0
   83354:	6025      	str	r5, [r4, #0]
   83356:	6060      	str	r0, [r4, #4]
   83358:	4605      	mov	r5, r0
   8335a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8335e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83362:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83366:	b93f      	cbnz	r7, 83378 <__register_exitproc+0x68>
   83368:	1c6b      	adds	r3, r5, #1
   8336a:	2000      	movs	r0, #0
   8336c:	3502      	adds	r5, #2
   8336e:	6063      	str	r3, [r4, #4]
   83370:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83374:	b005      	add	sp, #20
   83376:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83378:	2601      	movs	r6, #1
   8337a:	40ae      	lsls	r6, r5
   8337c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83380:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83384:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83388:	2f02      	cmp	r7, #2
   8338a:	ea42 0206 	orr.w	r2, r2, r6
   8338e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83392:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83396:	d1e7      	bne.n	83368 <__register_exitproc+0x58>
   83398:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8339c:	431e      	orrs	r6, r3
   8339e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   833a2:	e7e1      	b.n	83368 <__register_exitproc+0x58>
   833a4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   833a8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   833ac:	e7b9      	b.n	83322 <__register_exitproc+0x12>
   833ae:	bf00      	nop
   833b0:	00083434 	.word	0x00083434
   833b4:	00082d9d 	.word	0x00082d9d
   833b8:	00000001 	.word	0x00000001
   833bc:	00000002 	.word	0x00000002
   833c0:	00000004 	.word	0x00000004
   833c4:	00000008 	.word	0x00000008
   833c8:	00000010 	.word	0x00000010
   833cc:	00000020 	.word	0x00000020
   833d0:	00000040 	.word	0x00000040
   833d4:	00000080 	.word	0x00000080
   833d8:	00000100 	.word	0x00000100
   833dc:	00000200 	.word	0x00000200
   833e0:	00000400 	.word	0x00000400
   833e4:	00000000 	.word	0x00000000

000833e8 <atanlo>:
   833e8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   833f8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00083408 <atanhi>:
   83408:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   83418:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
   83428:	74727173 00000000 00000043              sqrt....C...

00083434 <_global_impure_ptr>:
   83434:	20070148                                H.. 

00083438 <_init>:
   83438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8343a:	bf00      	nop
   8343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8343e:	bc08      	pop	{r3}
   83440:	469e      	mov	lr, r3
   83442:	4770      	bx	lr

00083444 <__init_array_start>:
   83444:	00082b19 	.word	0x00082b19

00083448 <__frame_dummy_init_array_entry>:
   83448:	00080119                                ....

0008344c <_fini>:
   8344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8344e:	bf00      	nop
   83450:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83452:	bc08      	pop	{r3}
   83454:	469e      	mov	lr, r3
   83456:	4770      	bx	lr

00083458 <__fini_array_start>:
   83458:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <c1Loop>:
20070138:	00010101                                         .

20070139 <c2Loop>:
20070139:	00000101                                         .

2007013a <g_interrupt_enabled>:
2007013a:	09000001                                         ..

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <__fdlib_version>:
20070140:	00000001 00000000                       ........

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	00083430 00000000 00000000 00000000     04..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <__malloc_av_>:
	...
2007057c:	20070574 20070574 2007057c 2007057c     t.. t.. |.. |.. 
2007058c:	20070584 20070584 2007058c 2007058c     ... ... ... ... 
2007059c:	20070594 20070594 2007059c 2007059c     ... ... ... ... 
200705ac:	200705a4 200705a4 200705ac 200705ac     ... ... ... ... 
200705bc:	200705b4 200705b4 200705bc 200705bc     ... ... ... ... 
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 

2007097c <__malloc_trim_threshold>:
2007097c:	00020000                                ....

20070980 <__malloc_sbrk_base>:
20070980:	ffffffff                                ....
