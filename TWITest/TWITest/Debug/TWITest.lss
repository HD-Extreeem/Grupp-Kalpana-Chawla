
TWITest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c58  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000974  20070000  00081c58  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000174  20070974  000825cc  00010974  2**2
                  ALLOC
  3 .stack        00002000  20070ae8  00082740  00010974  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010974  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001099d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000c45f  00000000  00000000  000109f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024e2  00000000  00000000  0001ce57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000049e6  00000000  00000000  0001f339  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a60  00000000  00000000  00023d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000948  00000000  00000000  0002477f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000188fd  00000000  00000000  000250c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ef63  00000000  00000000  0003d9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00063560  00000000  00000000  0004c927  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b34  00000000  00000000  000afe88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072ae8 	.word	0x20072ae8
   80004:	00080895 	.word	0x00080895
   80008:	00080891 	.word	0x00080891
   8000c:	00080891 	.word	0x00080891
   80010:	00080891 	.word	0x00080891
   80014:	00080891 	.word	0x00080891
   80018:	00080891 	.word	0x00080891
	...
   8002c:	00080891 	.word	0x00080891
   80030:	00080891 	.word	0x00080891
   80034:	00000000 	.word	0x00000000
   80038:	00080891 	.word	0x00080891
   8003c:	00080891 	.word	0x00080891
   80040:	00080891 	.word	0x00080891
   80044:	00080891 	.word	0x00080891
   80048:	00080891 	.word	0x00080891
   8004c:	00080891 	.word	0x00080891
   80050:	00080891 	.word	0x00080891
   80054:	00080891 	.word	0x00080891
   80058:	00080891 	.word	0x00080891
   8005c:	00080891 	.word	0x00080891
   80060:	00080891 	.word	0x00080891
   80064:	00080891 	.word	0x00080891
   80068:	00000000 	.word	0x00000000
   8006c:	000805e5 	.word	0x000805e5
   80070:	000805f9 	.word	0x000805f9
   80074:	0008060d 	.word	0x0008060d
   80078:	00080621 	.word	0x00080621
	...
   80084:	00080aa1 	.word	0x00080aa1
   80088:	00080891 	.word	0x00080891
   8008c:	00080891 	.word	0x00080891
   80090:	00080891 	.word	0x00080891
   80094:	00080891 	.word	0x00080891
   80098:	00080891 	.word	0x00080891
   8009c:	00080891 	.word	0x00080891
   800a0:	00080891 	.word	0x00080891
   800a4:	00000000 	.word	0x00000000
   800a8:	00080891 	.word	0x00080891
   800ac:	00080891 	.word	0x00080891
   800b0:	00080891 	.word	0x00080891
   800b4:	00080891 	.word	0x00080891
   800b8:	00080891 	.word	0x00080891
   800bc:	00080891 	.word	0x00080891
   800c0:	00080891 	.word	0x00080891
   800c4:	00080891 	.word	0x00080891
   800c8:	00080891 	.word	0x00080891
   800cc:	00080891 	.word	0x00080891
   800d0:	00080891 	.word	0x00080891
   800d4:	00080891 	.word	0x00080891
   800d8:	00080891 	.word	0x00080891
   800dc:	00080891 	.word	0x00080891
   800e0:	00080891 	.word	0x00080891
   800e4:	00080891 	.word	0x00080891
   800e8:	00080891 	.word	0x00080891
   800ec:	00080891 	.word	0x00080891
   800f0:	00080891 	.word	0x00080891

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070974 	.word	0x20070974
   80110:	00000000 	.word	0x00000000
   80114:	00081c58 	.word	0x00081c58

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00081c58 	.word	0x00081c58
   8013c:	20070978 	.word	0x20070978
   80140:	00081c58 	.word	0x00081c58
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80150:	2000      	movs	r0, #0
   80152:	213e      	movs	r1, #62	; 0x3e
   80154:	4b0d      	ldr	r3, [pc, #52]	; (8018c <sysclk_init+0x44>)
   80156:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80158:	4c0d      	ldr	r4, [pc, #52]	; (80190 <sysclk_init+0x48>)
   8015a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015c:	2800      	cmp	r0, #0
   8015e:	d0fc      	beq.n	8015a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80160:	4b0c      	ldr	r3, [pc, #48]	; (80194 <sysclk_init+0x4c>)
   80162:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80164:	4a0c      	ldr	r2, [pc, #48]	; (80198 <sysclk_init+0x50>)
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80168:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8016a:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016e:	2800      	cmp	r0, #0
   80170:	d0fc      	beq.n	8016c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80172:	2010      	movs	r0, #16
   80174:	4b0b      	ldr	r3, [pc, #44]	; (801a4 <sysclk_init+0x5c>)
   80176:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80178:	4b0b      	ldr	r3, [pc, #44]	; (801a8 <sysclk_init+0x60>)
   8017a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017c:	4801      	ldr	r0, [pc, #4]	; (80184 <sysclk_init+0x3c>)
   8017e:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   80180:	4798      	blx	r3
   80182:	bd10      	pop	{r4, pc}
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700a5 	.word	0x200700a5
   8018c:	00080699 	.word	0x00080699
   80190:	000806ed 	.word	0x000806ed
   80194:	000806fd 	.word	0x000806fd
   80198:	200d3f01 	.word	0x200d3f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	0008070d 	.word	0x0008070d
   801a4:	00080635 	.word	0x00080635
   801a8:	00080945 	.word	0x00080945

000801ac <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   801ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801b0:	b083      	sub	sp, #12
   801b2:	4605      	mov	r5, r0
	while (len) {
   801b4:	4690      	mov	r8, r2
   801b6:	2a00      	cmp	r2, #0
   801b8:	d047      	beq.n	8024a <usart_serial_read_packet+0x9e>
   801ba:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801bc:	4f25      	ldr	r7, [pc, #148]	; (80254 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   801be:	4c26      	ldr	r4, [pc, #152]	; (80258 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801c0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8026c <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   801c4:	f8df b094 	ldr.w	fp, [pc, #148]	; 8025c <usart_serial_read_packet+0xb0>
   801c8:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   801cc:	2300      	movs	r3, #0
   801ce:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801d0:	4b22      	ldr	r3, [pc, #136]	; (8025c <usart_serial_read_packet+0xb0>)
   801d2:	429d      	cmp	r5, r3
   801d4:	d106      	bne.n	801e4 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   801d6:	4658      	mov	r0, fp
   801d8:	4649      	mov	r1, r9
   801da:	4b21      	ldr	r3, [pc, #132]	; (80260 <usart_serial_read_packet+0xb4>)
   801dc:	4798      	blx	r3
   801de:	2800      	cmp	r0, #0
   801e0:	d1f9      	bne.n	801d6 <usart_serial_read_packet+0x2a>
   801e2:	e019      	b.n	80218 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801e4:	4b1f      	ldr	r3, [pc, #124]	; (80264 <usart_serial_read_packet+0xb8>)
   801e6:	429d      	cmp	r5, r3
   801e8:	d109      	bne.n	801fe <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   801ea:	4699      	mov	r9, r3
   801ec:	4648      	mov	r0, r9
   801ee:	a901      	add	r1, sp, #4
   801f0:	47a0      	blx	r4
   801f2:	2800      	cmp	r0, #0
   801f4:	d1fa      	bne.n	801ec <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   801f6:	9b01      	ldr	r3, [sp, #4]
   801f8:	f806 3c01 	strb.w	r3, [r6, #-1]
   801fc:	e017      	b.n	8022e <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   801fe:	4b1a      	ldr	r3, [pc, #104]	; (80268 <usart_serial_read_packet+0xbc>)
   80200:	429d      	cmp	r5, r3
   80202:	d109      	bne.n	80218 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80204:	4699      	mov	r9, r3
   80206:	4648      	mov	r0, r9
   80208:	a901      	add	r1, sp, #4
   8020a:	47a0      	blx	r4
   8020c:	2800      	cmp	r0, #0
   8020e:	d1fa      	bne.n	80206 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80210:	9b01      	ldr	r3, [sp, #4]
   80212:	f806 3c01 	strb.w	r3, [r6, #-1]
   80216:	e014      	b.n	80242 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80218:	4555      	cmp	r5, sl
   8021a:	d108      	bne.n	8022e <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   8021c:	4650      	mov	r0, sl
   8021e:	a901      	add	r1, sp, #4
   80220:	47a0      	blx	r4
   80222:	2800      	cmp	r0, #0
   80224:	d1fa      	bne.n	8021c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80226:	9b01      	ldr	r3, [sp, #4]
   80228:	f806 3c01 	strb.w	r3, [r6, #-1]
   8022c:	e009      	b.n	80242 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8022e:	42bd      	cmp	r5, r7
   80230:	d107      	bne.n	80242 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80232:	4638      	mov	r0, r7
   80234:	a901      	add	r1, sp, #4
   80236:	47a0      	blx	r4
   80238:	2800      	cmp	r0, #0
   8023a:	d1fa      	bne.n	80232 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   8023c:	9b01      	ldr	r3, [sp, #4]
   8023e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80242:	3601      	adds	r6, #1
   80244:	f1b8 0801 	subs.w	r8, r8, #1
   80248:	d1be      	bne.n	801c8 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8024a:	2000      	movs	r0, #0
   8024c:	b003      	add	sp, #12
   8024e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80252:	bf00      	nop
   80254:	400a4000 	.word	0x400a4000
   80258:	00080879 	.word	0x00080879
   8025c:	400e0800 	.word	0x400e0800
   80260:	00080851 	.word	0x00080851
   80264:	40098000 	.word	0x40098000
   80268:	4009c000 	.word	0x4009c000
   8026c:	400a0000 	.word	0x400a0000

00080270 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80274:	460c      	mov	r4, r1
   80276:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80278:	b960      	cbnz	r0, 80294 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8027a:	2a00      	cmp	r2, #0
   8027c:	dd0e      	ble.n	8029c <_read+0x2c>
   8027e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80280:	4e09      	ldr	r6, [pc, #36]	; (802a8 <_read+0x38>)
   80282:	4d0a      	ldr	r5, [pc, #40]	; (802ac <_read+0x3c>)
   80284:	6830      	ldr	r0, [r6, #0]
   80286:	4621      	mov	r1, r4
   80288:	682b      	ldr	r3, [r5, #0]
   8028a:	4798      	blx	r3
		ptr++;
   8028c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8028e:	42bc      	cmp	r4, r7
   80290:	d1f8      	bne.n	80284 <_read+0x14>
   80292:	e006      	b.n	802a2 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80294:	f04f 30ff 	mov.w	r0, #4294967295
   80298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   8029c:	2000      	movs	r0, #0
   8029e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   802a2:	4640      	mov	r0, r8
	}
	return nChars;
}
   802a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802a8:	20070ae0 	.word	0x20070ae0
   802ac:	20070ad8 	.word	0x20070ad8

000802b0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   802b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802b4:	460e      	mov	r6, r1
   802b6:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   802b8:	3801      	subs	r0, #1
   802ba:	2802      	cmp	r0, #2
   802bc:	d80f      	bhi.n	802de <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   802be:	b192      	cbz	r2, 802e6 <_write+0x36>
   802c0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802c2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80300 <_write+0x50>
   802c6:	4f0d      	ldr	r7, [pc, #52]	; (802fc <_write+0x4c>)
   802c8:	f8d8 0000 	ldr.w	r0, [r8]
   802cc:	5d31      	ldrb	r1, [r6, r4]
   802ce:	683b      	ldr	r3, [r7, #0]
   802d0:	4798      	blx	r3
   802d2:	2800      	cmp	r0, #0
   802d4:	db0a      	blt.n	802ec <_write+0x3c>
			return -1;
		}
		++nChars;
   802d6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   802d8:	42a5      	cmp	r5, r4
   802da:	d1f5      	bne.n	802c8 <_write+0x18>
   802dc:	e00a      	b.n	802f4 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   802de:	f04f 30ff 	mov.w	r0, #4294967295
   802e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   802e6:	2000      	movs	r0, #0
   802e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   802ec:	f04f 30ff 	mov.w	r0, #4294967295
   802f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   802f4:	4620      	mov	r0, r4
	}
	return nChars;
}
   802f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802fa:	bf00      	nop
   802fc:	20070adc 	.word	0x20070adc
   80300:	20070ae0 	.word	0x20070ae0

00080304 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80304:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80306:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8030a:	4b12      	ldr	r3, [pc, #72]	; (80354 <board_init+0x50>)
   8030c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8030e:	200b      	movs	r0, #11
   80310:	4c11      	ldr	r4, [pc, #68]	; (80358 <board_init+0x54>)
   80312:	47a0      	blx	r4
   80314:	200c      	movs	r0, #12
   80316:	47a0      	blx	r4
   80318:	200d      	movs	r0, #13
   8031a:	47a0      	blx	r4
   8031c:	200e      	movs	r0, #14
   8031e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80320:	203b      	movs	r0, #59	; 0x3b
   80322:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80326:	4c0d      	ldr	r4, [pc, #52]	; (8035c <board_init+0x58>)
   80328:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8032a:	2055      	movs	r0, #85	; 0x55
   8032c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80330:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80332:	2056      	movs	r0, #86	; 0x56
   80334:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80338:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8033a:	2068      	movs	r0, #104	; 0x68
   8033c:	4908      	ldr	r1, [pc, #32]	; (80360 <board_init+0x5c>)
   8033e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80340:	205c      	movs	r0, #92	; 0x5c
   80342:	4908      	ldr	r1, [pc, #32]	; (80364 <board_init+0x60>)
   80344:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80346:	4808      	ldr	r0, [pc, #32]	; (80368 <board_init+0x64>)
   80348:	f44f 7140 	mov.w	r1, #768	; 0x300
   8034c:	4a07      	ldr	r2, [pc, #28]	; (8036c <board_init+0x68>)
   8034e:	4b08      	ldr	r3, [pc, #32]	; (80370 <board_init+0x6c>)
   80350:	4798      	blx	r3
   80352:	bd10      	pop	{r4, pc}
   80354:	400e1a50 	.word	0x400e1a50
   80358:	0008071d 	.word	0x0008071d
   8035c:	00080419 	.word	0x00080419
   80360:	28000079 	.word	0x28000079
   80364:	28000001 	.word	0x28000001
   80368:	400e0e00 	.word	0x400e0e00
   8036c:	08000001 	.word	0x08000001
   80370:	000804ed 	.word	0x000804ed

00080374 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80374:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80376:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8037a:	d016      	beq.n	803aa <pio_set_peripheral+0x36>
   8037c:	d804      	bhi.n	80388 <pio_set_peripheral+0x14>
   8037e:	b1c1      	cbz	r1, 803b2 <pio_set_peripheral+0x3e>
   80380:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80384:	d00a      	beq.n	8039c <pio_set_peripheral+0x28>
   80386:	e013      	b.n	803b0 <pio_set_peripheral+0x3c>
   80388:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8038c:	d011      	beq.n	803b2 <pio_set_peripheral+0x3e>
   8038e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80392:	d00e      	beq.n	803b2 <pio_set_peripheral+0x3e>
   80394:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80398:	d10a      	bne.n	803b0 <pio_set_peripheral+0x3c>
   8039a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8039c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8039e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   803a0:	400b      	ands	r3, r1
   803a2:	ea23 0302 	bic.w	r3, r3, r2
   803a6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   803a8:	e002      	b.n	803b0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   803aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   803ac:	4313      	orrs	r3, r2
   803ae:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   803b0:	6042      	str	r2, [r0, #4]
   803b2:	4770      	bx	lr

000803b4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803b4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803b6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   803ba:	bf14      	ite	ne
   803bc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803be:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   803c0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   803c4:	bf14      	ite	ne
   803c6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   803c8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   803ca:	f012 0f02 	tst.w	r2, #2
   803ce:	d002      	beq.n	803d6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   803d0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   803d4:	e004      	b.n	803e0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   803d6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   803da:	bf18      	it	ne
   803dc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   803e0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   803e2:	6001      	str	r1, [r0, #0]
   803e4:	4770      	bx	lr
   803e6:	bf00      	nop

000803e8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   803e8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803ea:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803ec:	9c01      	ldr	r4, [sp, #4]
   803ee:	b10c      	cbz	r4, 803f4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   803f0:	6641      	str	r1, [r0, #100]	; 0x64
   803f2:	e000      	b.n	803f6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803f4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   803f6:	b10b      	cbz	r3, 803fc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   803f8:	6501      	str	r1, [r0, #80]	; 0x50
   803fa:	e000      	b.n	803fe <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   803fc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   803fe:	b10a      	cbz	r2, 80404 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80400:	6301      	str	r1, [r0, #48]	; 0x30
   80402:	e000      	b.n	80406 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80404:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80406:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80408:	6001      	str	r1, [r0, #0]
}
   8040a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8040e:	4770      	bx	lr

00080410 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80410:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80412:	4770      	bx	lr

00080414 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80414:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80416:	4770      	bx	lr

00080418 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80418:	b570      	push	{r4, r5, r6, lr}
   8041a:	b082      	sub	sp, #8
   8041c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8041e:	0944      	lsrs	r4, r0, #5
   80420:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80424:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80428:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8042a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8042e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80432:	d030      	beq.n	80496 <pio_configure_pin+0x7e>
   80434:	d806      	bhi.n	80444 <pio_configure_pin+0x2c>
   80436:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8043a:	d00a      	beq.n	80452 <pio_configure_pin+0x3a>
   8043c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80440:	d018      	beq.n	80474 <pio_configure_pin+0x5c>
   80442:	e049      	b.n	804d8 <pio_configure_pin+0xc0>
   80444:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80448:	d030      	beq.n	804ac <pio_configure_pin+0x94>
   8044a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8044e:	d02d      	beq.n	804ac <pio_configure_pin+0x94>
   80450:	e042      	b.n	804d8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80452:	f000 001f 	and.w	r0, r0, #31
   80456:	2401      	movs	r4, #1
   80458:	4084      	lsls	r4, r0
   8045a:	4630      	mov	r0, r6
   8045c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80460:	4622      	mov	r2, r4
   80462:	4b1f      	ldr	r3, [pc, #124]	; (804e0 <pio_configure_pin+0xc8>)
   80464:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80466:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8046a:	bf14      	ite	ne
   8046c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8046e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80470:	2001      	movs	r0, #1
   80472:	e032      	b.n	804da <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80474:	f000 001f 	and.w	r0, r0, #31
   80478:	2401      	movs	r4, #1
   8047a:	4084      	lsls	r4, r0
   8047c:	4630      	mov	r0, r6
   8047e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80482:	4622      	mov	r2, r4
   80484:	4b16      	ldr	r3, [pc, #88]	; (804e0 <pio_configure_pin+0xc8>)
   80486:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80488:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8048c:	bf14      	ite	ne
   8048e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80490:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80492:	2001      	movs	r0, #1
   80494:	e021      	b.n	804da <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80496:	f000 011f 	and.w	r1, r0, #31
   8049a:	2401      	movs	r4, #1
   8049c:	4630      	mov	r0, r6
   8049e:	fa04 f101 	lsl.w	r1, r4, r1
   804a2:	462a      	mov	r2, r5
   804a4:	4b0f      	ldr	r3, [pc, #60]	; (804e4 <pio_configure_pin+0xcc>)
   804a6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   804a8:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   804aa:	e016      	b.n	804da <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804ac:	f000 011f 	and.w	r1, r0, #31
   804b0:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   804b2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   804b6:	ea05 0304 	and.w	r3, r5, r4
   804ba:	9300      	str	r3, [sp, #0]
   804bc:	4630      	mov	r0, r6
   804be:	fa04 f101 	lsl.w	r1, r4, r1
   804c2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804c6:	bf14      	ite	ne
   804c8:	2200      	movne	r2, #0
   804ca:	2201      	moveq	r2, #1
   804cc:	f3c5 0380 	ubfx	r3, r5, #2, #1
   804d0:	4d05      	ldr	r5, [pc, #20]	; (804e8 <pio_configure_pin+0xd0>)
   804d2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   804d4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804d6:	e000      	b.n	804da <pio_configure_pin+0xc2>

	default:
		return 0;
   804d8:	2000      	movs	r0, #0
	}

	return 1;
}
   804da:	b002      	add	sp, #8
   804dc:	bd70      	pop	{r4, r5, r6, pc}
   804de:	bf00      	nop
   804e0:	00080375 	.word	0x00080375
   804e4:	000803b5 	.word	0x000803b5
   804e8:	000803e9 	.word	0x000803e9

000804ec <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   804ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   804ee:	b083      	sub	sp, #12
   804f0:	4607      	mov	r7, r0
   804f2:	460e      	mov	r6, r1
   804f4:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   804f6:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   804fa:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   804fe:	d026      	beq.n	8054e <pio_configure_pin_group+0x62>
   80500:	d806      	bhi.n	80510 <pio_configure_pin_group+0x24>
   80502:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80506:	d00a      	beq.n	8051e <pio_configure_pin_group+0x32>
   80508:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8050c:	d013      	beq.n	80536 <pio_configure_pin_group+0x4a>
   8050e:	e034      	b.n	8057a <pio_configure_pin_group+0x8e>
   80510:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80514:	d01f      	beq.n	80556 <pio_configure_pin_group+0x6a>
   80516:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8051a:	d01c      	beq.n	80556 <pio_configure_pin_group+0x6a>
   8051c:	e02d      	b.n	8057a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8051e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80522:	4632      	mov	r2, r6
   80524:	4b16      	ldr	r3, [pc, #88]	; (80580 <pio_configure_pin_group+0x94>)
   80526:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80528:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8052c:	bf14      	ite	ne
   8052e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80530:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80532:	2001      	movs	r0, #1
   80534:	e022      	b.n	8057c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80536:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8053a:	4632      	mov	r2, r6
   8053c:	4b10      	ldr	r3, [pc, #64]	; (80580 <pio_configure_pin_group+0x94>)
   8053e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80540:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80544:	bf14      	ite	ne
   80546:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80548:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8054a:	2001      	movs	r0, #1
   8054c:	e016      	b.n	8057c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8054e:	4b0d      	ldr	r3, [pc, #52]	; (80584 <pio_configure_pin_group+0x98>)
   80550:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80552:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80554:	e012      	b.n	8057c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80556:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8055a:	f005 0301 	and.w	r3, r5, #1
   8055e:	9300      	str	r3, [sp, #0]
   80560:	4638      	mov	r0, r7
   80562:	4631      	mov	r1, r6
   80564:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80568:	bf14      	ite	ne
   8056a:	2200      	movne	r2, #0
   8056c:	2201      	moveq	r2, #1
   8056e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80572:	4c05      	ldr	r4, [pc, #20]	; (80588 <pio_configure_pin_group+0x9c>)
   80574:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80576:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80578:	e000      	b.n	8057c <pio_configure_pin_group+0x90>

	default:
		return 0;
   8057a:	2000      	movs	r0, #0
	}

	return 1;
}
   8057c:	b003      	add	sp, #12
   8057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80580:	00080375 	.word	0x00080375
   80584:	000803b5 	.word	0x000803b5
   80588:	000803e9 	.word	0x000803e9

0008058c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8058c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80590:	4604      	mov	r4, r0
   80592:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80594:	4b10      	ldr	r3, [pc, #64]	; (805d8 <pio_handler_process+0x4c>)
   80596:	4798      	blx	r3
   80598:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8059a:	4620      	mov	r0, r4
   8059c:	4b0f      	ldr	r3, [pc, #60]	; (805dc <pio_handler_process+0x50>)
   8059e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   805a0:	4005      	ands	r5, r0
   805a2:	d017      	beq.n	805d4 <pio_handler_process+0x48>
   805a4:	4f0e      	ldr	r7, [pc, #56]	; (805e0 <pio_handler_process+0x54>)
   805a6:	f107 040c 	add.w	r4, r7, #12
   805aa:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   805ac:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   805b0:	42b3      	cmp	r3, r6
   805b2:	d10a      	bne.n	805ca <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   805b4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   805b8:	4229      	tst	r1, r5
   805ba:	d006      	beq.n	805ca <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   805bc:	6823      	ldr	r3, [r4, #0]
   805be:	4630      	mov	r0, r6
   805c0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   805c2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   805c6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   805ca:	42bc      	cmp	r4, r7
   805cc:	d002      	beq.n	805d4 <pio_handler_process+0x48>
   805ce:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   805d0:	2d00      	cmp	r5, #0
   805d2:	d1eb      	bne.n	805ac <pio_handler_process+0x20>
   805d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805d8:	00080411 	.word	0x00080411
   805dc:	00080415 	.word	0x00080415
   805e0:	20070990 	.word	0x20070990

000805e4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   805e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   805e6:	4802      	ldr	r0, [pc, #8]	; (805f0 <PIOA_Handler+0xc>)
   805e8:	210b      	movs	r1, #11
   805ea:	4b02      	ldr	r3, [pc, #8]	; (805f4 <PIOA_Handler+0x10>)
   805ec:	4798      	blx	r3
   805ee:	bd08      	pop	{r3, pc}
   805f0:	400e0e00 	.word	0x400e0e00
   805f4:	0008058d 	.word	0x0008058d

000805f8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   805f8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   805fa:	4802      	ldr	r0, [pc, #8]	; (80604 <PIOB_Handler+0xc>)
   805fc:	210c      	movs	r1, #12
   805fe:	4b02      	ldr	r3, [pc, #8]	; (80608 <PIOB_Handler+0x10>)
   80600:	4798      	blx	r3
   80602:	bd08      	pop	{r3, pc}
   80604:	400e1000 	.word	0x400e1000
   80608:	0008058d 	.word	0x0008058d

0008060c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8060c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8060e:	4802      	ldr	r0, [pc, #8]	; (80618 <PIOC_Handler+0xc>)
   80610:	210d      	movs	r1, #13
   80612:	4b02      	ldr	r3, [pc, #8]	; (8061c <PIOC_Handler+0x10>)
   80614:	4798      	blx	r3
   80616:	bd08      	pop	{r3, pc}
   80618:	400e1200 	.word	0x400e1200
   8061c:	0008058d 	.word	0x0008058d

00080620 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80620:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80622:	4802      	ldr	r0, [pc, #8]	; (8062c <PIOD_Handler+0xc>)
   80624:	210e      	movs	r1, #14
   80626:	4b02      	ldr	r3, [pc, #8]	; (80630 <PIOD_Handler+0x10>)
   80628:	4798      	blx	r3
   8062a:	bd08      	pop	{r3, pc}
   8062c:	400e1400 	.word	0x400e1400
   80630:	0008058d 	.word	0x0008058d

00080634 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80634:	4b17      	ldr	r3, [pc, #92]	; (80694 <pmc_switch_mck_to_pllack+0x60>)
   80636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80638:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   8063c:	4310      	orrs	r0, r2
   8063e:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80642:	f013 0f08 	tst.w	r3, #8
   80646:	d109      	bne.n	8065c <pmc_switch_mck_to_pllack+0x28>
   80648:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8064c:	4911      	ldr	r1, [pc, #68]	; (80694 <pmc_switch_mck_to_pllack+0x60>)
   8064e:	e001      	b.n	80654 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80650:	3b01      	subs	r3, #1
   80652:	d019      	beq.n	80688 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80654:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80656:	f012 0f08 	tst.w	r2, #8
   8065a:	d0f9      	beq.n	80650 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8065c:	4b0d      	ldr	r3, [pc, #52]	; (80694 <pmc_switch_mck_to_pllack+0x60>)
   8065e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80660:	f022 0203 	bic.w	r2, r2, #3
   80664:	f042 0202 	orr.w	r2, r2, #2
   80668:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8066a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   8066c:	f010 0008 	ands.w	r0, r0, #8
   80670:	d10c      	bne.n	8068c <pmc_switch_mck_to_pllack+0x58>
   80672:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80676:	4907      	ldr	r1, [pc, #28]	; (80694 <pmc_switch_mck_to_pllack+0x60>)
   80678:	e001      	b.n	8067e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8067a:	3b01      	subs	r3, #1
   8067c:	d008      	beq.n	80690 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8067e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80680:	f012 0f08 	tst.w	r2, #8
   80684:	d0f9      	beq.n	8067a <pmc_switch_mck_to_pllack+0x46>
   80686:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80688:	2001      	movs	r0, #1
   8068a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8068c:	2000      	movs	r0, #0
   8068e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80690:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80692:	4770      	bx	lr
   80694:	400e0600 	.word	0x400e0600

00080698 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80698:	b138      	cbz	r0, 806aa <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8069a:	4911      	ldr	r1, [pc, #68]	; (806e0 <pmc_switch_mainck_to_xtal+0x48>)
   8069c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8069e:	4a11      	ldr	r2, [pc, #68]	; (806e4 <pmc_switch_mainck_to_xtal+0x4c>)
   806a0:	401a      	ands	r2, r3
   806a2:	4b11      	ldr	r3, [pc, #68]	; (806e8 <pmc_switch_mainck_to_xtal+0x50>)
   806a4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   806a6:	620b      	str	r3, [r1, #32]
   806a8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   806aa:	4a0d      	ldr	r2, [pc, #52]	; (806e0 <pmc_switch_mainck_to_xtal+0x48>)
   806ac:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   806ae:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   806b2:	f023 0303 	bic.w	r3, r3, #3
   806b6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   806ba:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   806be:	0209      	lsls	r1, r1, #8
   806c0:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   806c2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   806c4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   806c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806c8:	f013 0f01 	tst.w	r3, #1
   806cc:	d0fb      	beq.n	806c6 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   806ce:	4a04      	ldr	r2, [pc, #16]	; (806e0 <pmc_switch_mainck_to_xtal+0x48>)
   806d0:	6a13      	ldr	r3, [r2, #32]
   806d2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   806d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   806da:	6213      	str	r3, [r2, #32]
   806dc:	4770      	bx	lr
   806de:	bf00      	nop
   806e0:	400e0600 	.word	0x400e0600
   806e4:	fec8fffc 	.word	0xfec8fffc
   806e8:	01370002 	.word	0x01370002

000806ec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   806ec:	4b02      	ldr	r3, [pc, #8]	; (806f8 <pmc_osc_is_ready_mainck+0xc>)
   806ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   806f0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   806f4:	4770      	bx	lr
   806f6:	bf00      	nop
   806f8:	400e0600 	.word	0x400e0600

000806fc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   806fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80700:	4b01      	ldr	r3, [pc, #4]	; (80708 <pmc_disable_pllack+0xc>)
   80702:	629a      	str	r2, [r3, #40]	; 0x28
   80704:	4770      	bx	lr
   80706:	bf00      	nop
   80708:	400e0600 	.word	0x400e0600

0008070c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8070c:	4b02      	ldr	r3, [pc, #8]	; (80718 <pmc_is_locked_pllack+0xc>)
   8070e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80710:	f000 0002 	and.w	r0, r0, #2
   80714:	4770      	bx	lr
   80716:	bf00      	nop
   80718:	400e0600 	.word	0x400e0600

0008071c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8071c:	282c      	cmp	r0, #44	; 0x2c
   8071e:	d820      	bhi.n	80762 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80720:	281f      	cmp	r0, #31
   80722:	d80d      	bhi.n	80740 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80724:	4b12      	ldr	r3, [pc, #72]	; (80770 <pmc_enable_periph_clk+0x54>)
   80726:	699a      	ldr	r2, [r3, #24]
   80728:	2301      	movs	r3, #1
   8072a:	4083      	lsls	r3, r0
   8072c:	401a      	ands	r2, r3
   8072e:	4293      	cmp	r3, r2
   80730:	d019      	beq.n	80766 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80732:	2301      	movs	r3, #1
   80734:	fa03 f000 	lsl.w	r0, r3, r0
   80738:	4b0d      	ldr	r3, [pc, #52]	; (80770 <pmc_enable_periph_clk+0x54>)
   8073a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8073c:	2000      	movs	r0, #0
   8073e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80740:	4b0b      	ldr	r3, [pc, #44]	; (80770 <pmc_enable_periph_clk+0x54>)
   80742:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80746:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80748:	2301      	movs	r3, #1
   8074a:	4083      	lsls	r3, r0
   8074c:	401a      	ands	r2, r3
   8074e:	4293      	cmp	r3, r2
   80750:	d00b      	beq.n	8076a <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80752:	2301      	movs	r3, #1
   80754:	fa03 f000 	lsl.w	r0, r3, r0
   80758:	4b05      	ldr	r3, [pc, #20]	; (80770 <pmc_enable_periph_clk+0x54>)
   8075a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8075e:	2000      	movs	r0, #0
   80760:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80762:	2001      	movs	r0, #1
   80764:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80766:	2000      	movs	r0, #0
   80768:	4770      	bx	lr
   8076a:	2000      	movs	r0, #0
}
   8076c:	4770      	bx	lr
   8076e:	bf00      	nop
   80770:	400e0600 	.word	0x400e0600

00080774 <twi_enable_master_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80774:	2308      	movs	r3, #8
   80776:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80778:	2320      	movs	r3, #32
   8077a:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   8077c:	2304      	movs	r3, #4
   8077e:	6003      	str	r3, [r0, #0]
   80780:	4770      	bx	lr
   80782:	bf00      	nop

00080784 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80784:	4b0f      	ldr	r3, [pc, #60]	; (807c4 <twi_set_speed+0x40>)
   80786:	4299      	cmp	r1, r3
   80788:	d819      	bhi.n	807be <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8078a:	0049      	lsls	r1, r1, #1
   8078c:	fbb2 f2f1 	udiv	r2, r2, r1
   80790:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80792:	2aff      	cmp	r2, #255	; 0xff
   80794:	d907      	bls.n	807a6 <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   80796:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   80798:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8079a:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8079c:	2aff      	cmp	r2, #255	; 0xff
   8079e:	d903      	bls.n	807a8 <twi_set_speed+0x24>
   807a0:	2b07      	cmp	r3, #7
   807a2:	d1f9      	bne.n	80798 <twi_set_speed+0x14>
   807a4:	e000      	b.n	807a8 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   807a6:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   807a8:	0211      	lsls	r1, r2, #8
   807aa:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   807ac:	041b      	lsls	r3, r3, #16
   807ae:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   807b2:	430b      	orrs	r3, r1
   807b4:	b2d2      	uxtb	r2, r2
   807b6:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   807b8:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   807ba:	2000      	movs	r0, #0
   807bc:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   807be:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   807c0:	4770      	bx	lr
   807c2:	bf00      	nop
   807c4:	00061a80 	.word	0x00061a80

000807c8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   807c8:	b538      	push	{r3, r4, r5, lr}
   807ca:	4604      	mov	r4, r0
   807cc:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   807ce:	f04f 33ff 	mov.w	r3, #4294967295
   807d2:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   807d4:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   807d6:	2380      	movs	r3, #128	; 0x80
   807d8:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   807da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   807dc:	2308      	movs	r3, #8
   807de:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   807e0:	2320      	movs	r3, #32
   807e2:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   807e4:	2304      	movs	r3, #4
   807e6:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   807e8:	6849      	ldr	r1, [r1, #4]
   807ea:	682a      	ldr	r2, [r5, #0]
   807ec:	4b05      	ldr	r3, [pc, #20]	; (80804 <twi_master_init+0x3c>)
   807ee:	4798      	blx	r3
   807f0:	2801      	cmp	r0, #1
   807f2:	bf14      	ite	ne
   807f4:	2000      	movne	r0, #0
   807f6:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   807f8:	7a6b      	ldrb	r3, [r5, #9]
   807fa:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   807fc:	bf04      	itt	eq
   807fe:	2340      	moveq	r3, #64	; 0x40
   80800:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   80802:	bd38      	pop	{r3, r4, r5, pc}
   80804:	00080785 	.word	0x00080785

00080808 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80808:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8080a:	23ac      	movs	r3, #172	; 0xac
   8080c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8080e:	680a      	ldr	r2, [r1, #0]
   80810:	684b      	ldr	r3, [r1, #4]
   80812:	fbb2 f3f3 	udiv	r3, r2, r3
   80816:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80818:	1e5c      	subs	r4, r3, #1
   8081a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8081e:	4294      	cmp	r4, r2
   80820:	d80a      	bhi.n	80838 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80822:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80824:	688b      	ldr	r3, [r1, #8]
   80826:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80828:	f240 2302 	movw	r3, #514	; 0x202
   8082c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80830:	2350      	movs	r3, #80	; 0x50
   80832:	6003      	str	r3, [r0, #0]

	return 0;
   80834:	2000      	movs	r0, #0
   80836:	e000      	b.n	8083a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80838:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8083a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8083e:	4770      	bx	lr

00080840 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80840:	6943      	ldr	r3, [r0, #20]
   80842:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80846:	bf1a      	itte	ne
   80848:	61c1      	strne	r1, [r0, #28]
	return 0;
   8084a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8084c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8084e:	4770      	bx	lr

00080850 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80850:	6943      	ldr	r3, [r0, #20]
   80852:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80856:	bf1d      	ittte	ne
   80858:	6983      	ldrne	r3, [r0, #24]
   8085a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8085c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8085e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80860:	4770      	bx	lr
   80862:	bf00      	nop

00080864 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80864:	6943      	ldr	r3, [r0, #20]
   80866:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8086a:	bf1d      	ittte	ne
   8086c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80870:	61c1      	strne	r1, [r0, #28]
	return 0;
   80872:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80874:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80876:	4770      	bx	lr

00080878 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80878:	6943      	ldr	r3, [r0, #20]
   8087a:	f013 0f01 	tst.w	r3, #1
   8087e:	d005      	beq.n	8088c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80880:	6983      	ldr	r3, [r0, #24]
   80882:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80886:	600b      	str	r3, [r1, #0]

	return 0;
   80888:	2000      	movs	r0, #0
   8088a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8088c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8088e:	4770      	bx	lr

00080890 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80890:	e7fe      	b.n	80890 <Dummy_Handler>
   80892:	bf00      	nop

00080894 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80894:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80896:	4b1e      	ldr	r3, [pc, #120]	; (80910 <Reset_Handler+0x7c>)
   80898:	4a1e      	ldr	r2, [pc, #120]	; (80914 <Reset_Handler+0x80>)
   8089a:	429a      	cmp	r2, r3
   8089c:	d003      	beq.n	808a6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8089e:	4b1e      	ldr	r3, [pc, #120]	; (80918 <Reset_Handler+0x84>)
   808a0:	4a1b      	ldr	r2, [pc, #108]	; (80910 <Reset_Handler+0x7c>)
   808a2:	429a      	cmp	r2, r3
   808a4:	d304      	bcc.n	808b0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   808a6:	4b1d      	ldr	r3, [pc, #116]	; (8091c <Reset_Handler+0x88>)
   808a8:	4a1d      	ldr	r2, [pc, #116]	; (80920 <Reset_Handler+0x8c>)
   808aa:	429a      	cmp	r2, r3
   808ac:	d30f      	bcc.n	808ce <Reset_Handler+0x3a>
   808ae:	e01a      	b.n	808e6 <Reset_Handler+0x52>
   808b0:	4b1c      	ldr	r3, [pc, #112]	; (80924 <Reset_Handler+0x90>)
   808b2:	4c1d      	ldr	r4, [pc, #116]	; (80928 <Reset_Handler+0x94>)
   808b4:	1ae4      	subs	r4, r4, r3
   808b6:	f024 0403 	bic.w	r4, r4, #3
   808ba:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   808bc:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   808be:	4814      	ldr	r0, [pc, #80]	; (80910 <Reset_Handler+0x7c>)
   808c0:	4914      	ldr	r1, [pc, #80]	; (80914 <Reset_Handler+0x80>)
   808c2:	585a      	ldr	r2, [r3, r1]
   808c4:	501a      	str	r2, [r3, r0]
   808c6:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   808c8:	42a3      	cmp	r3, r4
   808ca:	d1fa      	bne.n	808c2 <Reset_Handler+0x2e>
   808cc:	e7eb      	b.n	808a6 <Reset_Handler+0x12>
   808ce:	4b17      	ldr	r3, [pc, #92]	; (8092c <Reset_Handler+0x98>)
   808d0:	4917      	ldr	r1, [pc, #92]	; (80930 <Reset_Handler+0x9c>)
   808d2:	1ac9      	subs	r1, r1, r3
   808d4:	f021 0103 	bic.w	r1, r1, #3
   808d8:	1d1a      	adds	r2, r3, #4
   808da:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   808dc:	2200      	movs	r2, #0
   808de:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   808e2:	428b      	cmp	r3, r1
   808e4:	d1fb      	bne.n	808de <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   808e6:	4a13      	ldr	r2, [pc, #76]	; (80934 <Reset_Handler+0xa0>)
   808e8:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   808ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   808f0:	4911      	ldr	r1, [pc, #68]	; (80938 <Reset_Handler+0xa4>)
   808f2:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   808f4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   808f8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   808fc:	d203      	bcs.n	80906 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   808fe:	688a      	ldr	r2, [r1, #8]
   80900:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80904:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80906:	4b0d      	ldr	r3, [pc, #52]	; (8093c <Reset_Handler+0xa8>)
   80908:	4798      	blx	r3

	/* Branch to main function */
	main();
   8090a:	4b0d      	ldr	r3, [pc, #52]	; (80940 <Reset_Handler+0xac>)
   8090c:	4798      	blx	r3
   8090e:	e7fe      	b.n	8090e <Reset_Handler+0x7a>
   80910:	20070000 	.word	0x20070000
   80914:	00081c58 	.word	0x00081c58
   80918:	20070974 	.word	0x20070974
   8091c:	20070ae8 	.word	0x20070ae8
   80920:	20070974 	.word	0x20070974
   80924:	20070004 	.word	0x20070004
   80928:	20070977 	.word	0x20070977
   8092c:	20070970 	.word	0x20070970
   80930:	20070ae3 	.word	0x20070ae3
   80934:	00080000 	.word	0x00080000
   80938:	e000ed00 	.word	0xe000ed00
   8093c:	00080d25 	.word	0x00080d25
   80940:	00080cd1 	.word	0x00080cd1

00080944 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80944:	4b3e      	ldr	r3, [pc, #248]	; (80a40 <SystemCoreClockUpdate+0xfc>)
   80946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80948:	f003 0303 	and.w	r3, r3, #3
   8094c:	2b03      	cmp	r3, #3
   8094e:	d85f      	bhi.n	80a10 <SystemCoreClockUpdate+0xcc>
   80950:	e8df f003 	tbb	[pc, r3]
   80954:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80958:	4b3a      	ldr	r3, [pc, #232]	; (80a44 <SystemCoreClockUpdate+0x100>)
   8095a:	695b      	ldr	r3, [r3, #20]
   8095c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80960:	bf14      	ite	ne
   80962:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80966:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8096a:	4b37      	ldr	r3, [pc, #220]	; (80a48 <SystemCoreClockUpdate+0x104>)
   8096c:	601a      	str	r2, [r3, #0]
   8096e:	e04f      	b.n	80a10 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80970:	4b33      	ldr	r3, [pc, #204]	; (80a40 <SystemCoreClockUpdate+0xfc>)
   80972:	6a1b      	ldr	r3, [r3, #32]
   80974:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80978:	d003      	beq.n	80982 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8097a:	4a34      	ldr	r2, [pc, #208]	; (80a4c <SystemCoreClockUpdate+0x108>)
   8097c:	4b32      	ldr	r3, [pc, #200]	; (80a48 <SystemCoreClockUpdate+0x104>)
   8097e:	601a      	str	r2, [r3, #0]
   80980:	e046      	b.n	80a10 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80982:	4a33      	ldr	r2, [pc, #204]	; (80a50 <SystemCoreClockUpdate+0x10c>)
   80984:	4b30      	ldr	r3, [pc, #192]	; (80a48 <SystemCoreClockUpdate+0x104>)
   80986:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80988:	4b2d      	ldr	r3, [pc, #180]	; (80a40 <SystemCoreClockUpdate+0xfc>)
   8098a:	6a1b      	ldr	r3, [r3, #32]
   8098c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80990:	2b10      	cmp	r3, #16
   80992:	d002      	beq.n	8099a <SystemCoreClockUpdate+0x56>
   80994:	2b20      	cmp	r3, #32
   80996:	d004      	beq.n	809a2 <SystemCoreClockUpdate+0x5e>
   80998:	e03a      	b.n	80a10 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8099a:	4a2e      	ldr	r2, [pc, #184]	; (80a54 <SystemCoreClockUpdate+0x110>)
   8099c:	4b2a      	ldr	r3, [pc, #168]	; (80a48 <SystemCoreClockUpdate+0x104>)
   8099e:	601a      	str	r2, [r3, #0]
				break;
   809a0:	e036      	b.n	80a10 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   809a2:	4a2a      	ldr	r2, [pc, #168]	; (80a4c <SystemCoreClockUpdate+0x108>)
   809a4:	4b28      	ldr	r3, [pc, #160]	; (80a48 <SystemCoreClockUpdate+0x104>)
   809a6:	601a      	str	r2, [r3, #0]
				break;
   809a8:	e032      	b.n	80a10 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   809aa:	4b25      	ldr	r3, [pc, #148]	; (80a40 <SystemCoreClockUpdate+0xfc>)
   809ac:	6a1b      	ldr	r3, [r3, #32]
   809ae:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   809b2:	d003      	beq.n	809bc <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   809b4:	4a25      	ldr	r2, [pc, #148]	; (80a4c <SystemCoreClockUpdate+0x108>)
   809b6:	4b24      	ldr	r3, [pc, #144]	; (80a48 <SystemCoreClockUpdate+0x104>)
   809b8:	601a      	str	r2, [r3, #0]
   809ba:	e012      	b.n	809e2 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   809bc:	4a24      	ldr	r2, [pc, #144]	; (80a50 <SystemCoreClockUpdate+0x10c>)
   809be:	4b22      	ldr	r3, [pc, #136]	; (80a48 <SystemCoreClockUpdate+0x104>)
   809c0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   809c2:	4b1f      	ldr	r3, [pc, #124]	; (80a40 <SystemCoreClockUpdate+0xfc>)
   809c4:	6a1b      	ldr	r3, [r3, #32]
   809c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   809ca:	2b10      	cmp	r3, #16
   809cc:	d002      	beq.n	809d4 <SystemCoreClockUpdate+0x90>
   809ce:	2b20      	cmp	r3, #32
   809d0:	d004      	beq.n	809dc <SystemCoreClockUpdate+0x98>
   809d2:	e006      	b.n	809e2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   809d4:	4a1f      	ldr	r2, [pc, #124]	; (80a54 <SystemCoreClockUpdate+0x110>)
   809d6:	4b1c      	ldr	r3, [pc, #112]	; (80a48 <SystemCoreClockUpdate+0x104>)
   809d8:	601a      	str	r2, [r3, #0]
				break;
   809da:	e002      	b.n	809e2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   809dc:	4a1b      	ldr	r2, [pc, #108]	; (80a4c <SystemCoreClockUpdate+0x108>)
   809de:	4b1a      	ldr	r3, [pc, #104]	; (80a48 <SystemCoreClockUpdate+0x104>)
   809e0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   809e2:	4b17      	ldr	r3, [pc, #92]	; (80a40 <SystemCoreClockUpdate+0xfc>)
   809e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809e6:	f003 0303 	and.w	r3, r3, #3
   809ea:	2b02      	cmp	r3, #2
   809ec:	d10d      	bne.n	80a0a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   809ee:	4b14      	ldr	r3, [pc, #80]	; (80a40 <SystemCoreClockUpdate+0xfc>)
   809f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   809f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   809f4:	4b14      	ldr	r3, [pc, #80]	; (80a48 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   809f6:	f3c0 400a 	ubfx	r0, r0, #16, #11
   809fa:	681a      	ldr	r2, [r3, #0]
   809fc:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80a00:	b2c9      	uxtb	r1, r1
   80a02:	fbb2 f2f1 	udiv	r2, r2, r1
   80a06:	601a      	str	r2, [r3, #0]
   80a08:	e002      	b.n	80a10 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80a0a:	4a13      	ldr	r2, [pc, #76]	; (80a58 <SystemCoreClockUpdate+0x114>)
   80a0c:	4b0e      	ldr	r3, [pc, #56]	; (80a48 <SystemCoreClockUpdate+0x104>)
   80a0e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80a10:	4b0b      	ldr	r3, [pc, #44]	; (80a40 <SystemCoreClockUpdate+0xfc>)
   80a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a14:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a18:	2b70      	cmp	r3, #112	; 0x70
   80a1a:	d107      	bne.n	80a2c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80a1c:	4b0a      	ldr	r3, [pc, #40]	; (80a48 <SystemCoreClockUpdate+0x104>)
   80a1e:	681a      	ldr	r2, [r3, #0]
   80a20:	490e      	ldr	r1, [pc, #56]	; (80a5c <SystemCoreClockUpdate+0x118>)
   80a22:	fba1 0202 	umull	r0, r2, r1, r2
   80a26:	0852      	lsrs	r2, r2, #1
   80a28:	601a      	str	r2, [r3, #0]
   80a2a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80a2c:	4b04      	ldr	r3, [pc, #16]	; (80a40 <SystemCoreClockUpdate+0xfc>)
   80a2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80a30:	4b05      	ldr	r3, [pc, #20]	; (80a48 <SystemCoreClockUpdate+0x104>)
   80a32:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80a36:	681a      	ldr	r2, [r3, #0]
   80a38:	40ca      	lsrs	r2, r1
   80a3a:	601a      	str	r2, [r3, #0]
   80a3c:	4770      	bx	lr
   80a3e:	bf00      	nop
   80a40:	400e0600 	.word	0x400e0600
   80a44:	400e1a10 	.word	0x400e1a10
   80a48:	20070130 	.word	0x20070130
   80a4c:	00b71b00 	.word	0x00b71b00
   80a50:	003d0900 	.word	0x003d0900
   80a54:	007a1200 	.word	0x007a1200
   80a58:	0e4e1c00 	.word	0x0e4e1c00
   80a5c:	aaaaaaab 	.word	0xaaaaaaab

00080a60 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80a60:	4b09      	ldr	r3, [pc, #36]	; (80a88 <_sbrk+0x28>)
   80a62:	681b      	ldr	r3, [r3, #0]
   80a64:	b913      	cbnz	r3, 80a6c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80a66:	4a09      	ldr	r2, [pc, #36]	; (80a8c <_sbrk+0x2c>)
   80a68:	4b07      	ldr	r3, [pc, #28]	; (80a88 <_sbrk+0x28>)
   80a6a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80a6c:	4b06      	ldr	r3, [pc, #24]	; (80a88 <_sbrk+0x28>)
   80a6e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80a70:	181a      	adds	r2, r3, r0
   80a72:	4907      	ldr	r1, [pc, #28]	; (80a90 <_sbrk+0x30>)
   80a74:	4291      	cmp	r1, r2
   80a76:	db04      	blt.n	80a82 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80a78:	4610      	mov	r0, r2
   80a7a:	4a03      	ldr	r2, [pc, #12]	; (80a88 <_sbrk+0x28>)
   80a7c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80a7e:	4618      	mov	r0, r3
   80a80:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80a82:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80a86:	4770      	bx	lr
   80a88:	20070a00 	.word	0x20070a00
   80a8c:	20072ae8 	.word	0x20072ae8
   80a90:	20087ffc 	.word	0x20087ffc

00080a94 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80a94:	f04f 30ff 	mov.w	r0, #4294967295
   80a98:	4770      	bx	lr
   80a9a:	bf00      	nop

00080a9c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80a9c:	2000      	movs	r0, #0
   80a9e:	4770      	bx	lr

00080aa0 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80aa0:	b500      	push	{lr}
   80aa2:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80aa4:	4811      	ldr	r0, [pc, #68]	; (80aec <USART0_Handler+0x4c>)
   80aa6:	f10d 0107 	add.w	r1, sp, #7
   80aaa:	2201      	movs	r2, #1
   80aac:	4b10      	ldr	r3, [pc, #64]	; (80af0 <USART0_Handler+0x50>)
   80aae:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80ab0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80ab2:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80ab6:	2200      	movs	r2, #0
   80ab8:	4b0e      	ldr	r3, [pc, #56]	; (80af4 <USART0_Handler+0x54>)
   80aba:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80abc:	4b0e      	ldr	r3, [pc, #56]	; (80af8 <USART0_Handler+0x58>)
   80abe:	781b      	ldrb	r3, [r3, #0]
   80ac0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80ac4:	4a0d      	ldr	r2, [pc, #52]	; (80afc <USART0_Handler+0x5c>)
   80ac6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80ac8:	2b9b      	cmp	r3, #155	; 0x9b
   80aca:	d103      	bne.n	80ad4 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80acc:	2200      	movs	r2, #0
   80ace:	4b0a      	ldr	r3, [pc, #40]	; (80af8 <USART0_Handler+0x58>)
   80ad0:	701a      	strb	r2, [r3, #0]
   80ad2:	e002      	b.n	80ada <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   80ad4:	3301      	adds	r3, #1
   80ad6:	4a08      	ldr	r2, [pc, #32]	; (80af8 <USART0_Handler+0x58>)
   80ad8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80ada:	2201      	movs	r2, #1
   80adc:	4b05      	ldr	r3, [pc, #20]	; (80af4 <USART0_Handler+0x54>)
   80ade:	701a      	strb	r2, [r3, #0]
   80ae0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80ae4:	b662      	cpsie	i
}
   80ae6:	b003      	add	sp, #12
   80ae8:	f85d fb04 	ldr.w	pc, [sp], #4
   80aec:	40098000 	.word	0x40098000
   80af0:	000801ad 	.word	0x000801ad
   80af4:	2007012c 	.word	0x2007012c
   80af8:	20070aa0 	.word	0x20070aa0
   80afc:	20070a04 	.word	0x20070a04

00080b00 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b02:	b083      	sub	sp, #12
   80b04:	4604      	mov	r4, r0
   80b06:	460d      	mov	r5, r1
	uint32_t val = 0;
   80b08:	2300      	movs	r3, #0
   80b0a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80b0c:	4b1f      	ldr	r3, [pc, #124]	; (80b8c <usart_serial_getchar+0x8c>)
   80b0e:	4298      	cmp	r0, r3
   80b10:	d107      	bne.n	80b22 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80b12:	461f      	mov	r7, r3
   80b14:	4e1e      	ldr	r6, [pc, #120]	; (80b90 <usart_serial_getchar+0x90>)
   80b16:	4638      	mov	r0, r7
   80b18:	4629      	mov	r1, r5
   80b1a:	47b0      	blx	r6
   80b1c:	2800      	cmp	r0, #0
   80b1e:	d1fa      	bne.n	80b16 <usart_serial_getchar+0x16>
   80b20:	e019      	b.n	80b56 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80b22:	4b1c      	ldr	r3, [pc, #112]	; (80b94 <usart_serial_getchar+0x94>)
   80b24:	4298      	cmp	r0, r3
   80b26:	d109      	bne.n	80b3c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80b28:	461f      	mov	r7, r3
   80b2a:	4e1b      	ldr	r6, [pc, #108]	; (80b98 <usart_serial_getchar+0x98>)
   80b2c:	4638      	mov	r0, r7
   80b2e:	a901      	add	r1, sp, #4
   80b30:	47b0      	blx	r6
   80b32:	2800      	cmp	r0, #0
   80b34:	d1fa      	bne.n	80b2c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80b36:	9b01      	ldr	r3, [sp, #4]
   80b38:	702b      	strb	r3, [r5, #0]
   80b3a:	e019      	b.n	80b70 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80b3c:	4b17      	ldr	r3, [pc, #92]	; (80b9c <usart_serial_getchar+0x9c>)
   80b3e:	4298      	cmp	r0, r3
   80b40:	d109      	bne.n	80b56 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80b42:	461e      	mov	r6, r3
   80b44:	4c14      	ldr	r4, [pc, #80]	; (80b98 <usart_serial_getchar+0x98>)
   80b46:	4630      	mov	r0, r6
   80b48:	a901      	add	r1, sp, #4
   80b4a:	47a0      	blx	r4
   80b4c:	2800      	cmp	r0, #0
   80b4e:	d1fa      	bne.n	80b46 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80b50:	9b01      	ldr	r3, [sp, #4]
   80b52:	702b      	strb	r3, [r5, #0]
   80b54:	e018      	b.n	80b88 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80b56:	4b12      	ldr	r3, [pc, #72]	; (80ba0 <usart_serial_getchar+0xa0>)
   80b58:	429c      	cmp	r4, r3
   80b5a:	d109      	bne.n	80b70 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80b5c:	461e      	mov	r6, r3
   80b5e:	4c0e      	ldr	r4, [pc, #56]	; (80b98 <usart_serial_getchar+0x98>)
   80b60:	4630      	mov	r0, r6
   80b62:	a901      	add	r1, sp, #4
   80b64:	47a0      	blx	r4
   80b66:	2800      	cmp	r0, #0
   80b68:	d1fa      	bne.n	80b60 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80b6a:	9b01      	ldr	r3, [sp, #4]
   80b6c:	702b      	strb	r3, [r5, #0]
   80b6e:	e00b      	b.n	80b88 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80b70:	4b0c      	ldr	r3, [pc, #48]	; (80ba4 <usart_serial_getchar+0xa4>)
   80b72:	429c      	cmp	r4, r3
   80b74:	d108      	bne.n	80b88 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80b76:	461e      	mov	r6, r3
   80b78:	4c07      	ldr	r4, [pc, #28]	; (80b98 <usart_serial_getchar+0x98>)
   80b7a:	4630      	mov	r0, r6
   80b7c:	a901      	add	r1, sp, #4
   80b7e:	47a0      	blx	r4
   80b80:	2800      	cmp	r0, #0
   80b82:	d1fa      	bne.n	80b7a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80b84:	9b01      	ldr	r3, [sp, #4]
   80b86:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80b88:	b003      	add	sp, #12
   80b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b8c:	400e0800 	.word	0x400e0800
   80b90:	00080851 	.word	0x00080851
   80b94:	40098000 	.word	0x40098000
   80b98:	00080879 	.word	0x00080879
   80b9c:	4009c000 	.word	0x4009c000
   80ba0:	400a0000 	.word	0x400a0000
   80ba4:	400a4000 	.word	0x400a4000

00080ba8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80ba8:	b570      	push	{r4, r5, r6, lr}
   80baa:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80bac:	4b21      	ldr	r3, [pc, #132]	; (80c34 <usart_serial_putchar+0x8c>)
   80bae:	4298      	cmp	r0, r3
   80bb0:	d107      	bne.n	80bc2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80bb2:	461e      	mov	r6, r3
   80bb4:	4d20      	ldr	r5, [pc, #128]	; (80c38 <usart_serial_putchar+0x90>)
   80bb6:	4630      	mov	r0, r6
   80bb8:	4621      	mov	r1, r4
   80bba:	47a8      	blx	r5
   80bbc:	2800      	cmp	r0, #0
   80bbe:	d1fa      	bne.n	80bb6 <usart_serial_putchar+0xe>
   80bc0:	e02b      	b.n	80c1a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80bc2:	4b1e      	ldr	r3, [pc, #120]	; (80c3c <usart_serial_putchar+0x94>)
   80bc4:	4298      	cmp	r0, r3
   80bc6:	d107      	bne.n	80bd8 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80bc8:	461e      	mov	r6, r3
   80bca:	4d1d      	ldr	r5, [pc, #116]	; (80c40 <usart_serial_putchar+0x98>)
   80bcc:	4630      	mov	r0, r6
   80bce:	4621      	mov	r1, r4
   80bd0:	47a8      	blx	r5
   80bd2:	2800      	cmp	r0, #0
   80bd4:	d1fa      	bne.n	80bcc <usart_serial_putchar+0x24>
   80bd6:	e022      	b.n	80c1e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80bd8:	4b1a      	ldr	r3, [pc, #104]	; (80c44 <usart_serial_putchar+0x9c>)
   80bda:	4298      	cmp	r0, r3
   80bdc:	d107      	bne.n	80bee <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80bde:	461e      	mov	r6, r3
   80be0:	4d17      	ldr	r5, [pc, #92]	; (80c40 <usart_serial_putchar+0x98>)
   80be2:	4630      	mov	r0, r6
   80be4:	4621      	mov	r1, r4
   80be6:	47a8      	blx	r5
   80be8:	2800      	cmp	r0, #0
   80bea:	d1fa      	bne.n	80be2 <usart_serial_putchar+0x3a>
   80bec:	e019      	b.n	80c22 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80bee:	4b16      	ldr	r3, [pc, #88]	; (80c48 <usart_serial_putchar+0xa0>)
   80bf0:	4298      	cmp	r0, r3
   80bf2:	d107      	bne.n	80c04 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80bf4:	461e      	mov	r6, r3
   80bf6:	4d12      	ldr	r5, [pc, #72]	; (80c40 <usart_serial_putchar+0x98>)
   80bf8:	4630      	mov	r0, r6
   80bfa:	4621      	mov	r1, r4
   80bfc:	47a8      	blx	r5
   80bfe:	2800      	cmp	r0, #0
   80c00:	d1fa      	bne.n	80bf8 <usart_serial_putchar+0x50>
   80c02:	e010      	b.n	80c26 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80c04:	4b11      	ldr	r3, [pc, #68]	; (80c4c <usart_serial_putchar+0xa4>)
   80c06:	4298      	cmp	r0, r3
   80c08:	d10f      	bne.n	80c2a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80c0a:	461e      	mov	r6, r3
   80c0c:	4d0c      	ldr	r5, [pc, #48]	; (80c40 <usart_serial_putchar+0x98>)
   80c0e:	4630      	mov	r0, r6
   80c10:	4621      	mov	r1, r4
   80c12:	47a8      	blx	r5
   80c14:	2800      	cmp	r0, #0
   80c16:	d1fa      	bne.n	80c0e <usart_serial_putchar+0x66>
   80c18:	e009      	b.n	80c2e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80c1a:	2001      	movs	r0, #1
   80c1c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c1e:	2001      	movs	r0, #1
   80c20:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c22:	2001      	movs	r0, #1
   80c24:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c26:	2001      	movs	r0, #1
   80c28:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80c2a:	2000      	movs	r0, #0
   80c2c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c2e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80c30:	bd70      	pop	{r4, r5, r6, pc}
   80c32:	bf00      	nop
   80c34:	400e0800 	.word	0x400e0800
   80c38:	00080841 	.word	0x00080841
   80c3c:	40098000 	.word	0x40098000
   80c40:	00080865 	.word	0x00080865
   80c44:	4009c000 	.word	0x4009c000
   80c48:	400a0000 	.word	0x400a0000
   80c4c:	400a4000 	.word	0x400a4000

00080c50 <configure_console>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   80c50:	b530      	push	{r4, r5, lr}
   80c52:	b085      	sub	sp, #20
   80c54:	2008      	movs	r0, #8
   80c56:	4d13      	ldr	r5, [pc, #76]	; (80ca4 <configure_console+0x54>)
   80c58:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80c5a:	4c13      	ldr	r4, [pc, #76]	; (80ca8 <configure_console+0x58>)
   80c5c:	4b13      	ldr	r3, [pc, #76]	; (80cac <configure_console+0x5c>)
   80c5e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80c60:	4a13      	ldr	r2, [pc, #76]	; (80cb0 <configure_console+0x60>)
   80c62:	4b14      	ldr	r3, [pc, #80]	; (80cb4 <configure_console+0x64>)
   80c64:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80c66:	4a14      	ldr	r2, [pc, #80]	; (80cb8 <configure_console+0x68>)
   80c68:	4b14      	ldr	r3, [pc, #80]	; (80cbc <configure_console+0x6c>)
   80c6a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80c6c:	4b14      	ldr	r3, [pc, #80]	; (80cc0 <configure_console+0x70>)
   80c6e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80c70:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80c74:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80c7a:	9303      	str	r3, [sp, #12]
   80c7c:	2008      	movs	r0, #8
   80c7e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80c80:	4620      	mov	r0, r4
   80c82:	a901      	add	r1, sp, #4
   80c84:	4b0f      	ldr	r3, [pc, #60]	; (80cc4 <configure_console+0x74>)
   80c86:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80c88:	4d0f      	ldr	r5, [pc, #60]	; (80cc8 <configure_console+0x78>)
   80c8a:	682b      	ldr	r3, [r5, #0]
   80c8c:	6898      	ldr	r0, [r3, #8]
   80c8e:	2100      	movs	r1, #0
   80c90:	4c0e      	ldr	r4, [pc, #56]	; (80ccc <configure_console+0x7c>)
   80c92:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80c94:	682b      	ldr	r3, [r5, #0]
   80c96:	6858      	ldr	r0, [r3, #4]
   80c98:	2100      	movs	r1, #0
   80c9a:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   80c9c:	2000      	movs	r0, #0
   80c9e:	b005      	add	sp, #20
   80ca0:	bd30      	pop	{r4, r5, pc}
   80ca2:	bf00      	nop
   80ca4:	0008071d 	.word	0x0008071d
   80ca8:	400e0800 	.word	0x400e0800
   80cac:	20070ae0 	.word	0x20070ae0
   80cb0:	00080ba9 	.word	0x00080ba9
   80cb4:	20070adc 	.word	0x20070adc
   80cb8:	00080b01 	.word	0x00080b01
   80cbc:	20070ad8 	.word	0x20070ad8
   80cc0:	0501bd00 	.word	0x0501bd00
   80cc4:	00080809 	.word	0x00080809
   80cc8:	20070560 	.word	0x20070560
   80ccc:	00080e09 	.word	0x00080e09

00080cd0 <main>:
#include "consoleFunctions.h"

#define TWI_CLK 40000

int main (void)
{
   80cd0:	b510      	push	{r4, lr}
   80cd2:	b084      	sub	sp, #16
	/* System clock and board initialization */
	sysclk_init();
   80cd4:	4b0b      	ldr	r3, [pc, #44]	; (80d04 <main+0x34>)
   80cd6:	4798      	blx	r3
	board_init();
   80cd8:	4b0b      	ldr	r3, [pc, #44]	; (80d08 <main+0x38>)
   80cda:	4798      	blx	r3
	
	configure_console();
   80cdc:	4b0b      	ldr	r3, [pc, #44]	; (80d0c <main+0x3c>)
   80cde:	4798      	blx	r3
	
	/* Enable TWI peripheral clock */
	pmc_enable_periph_clk(TWI0);
   80ce0:	4c0b      	ldr	r4, [pc, #44]	; (80d10 <main+0x40>)
   80ce2:	4620      	mov	r0, r4
   80ce4:	4b0b      	ldr	r3, [pc, #44]	; (80d14 <main+0x44>)
   80ce6:	4798      	blx	r3
	
	/* Enable required TWI PIOs */
	
	/* Enable TWI master mode */
	twi_enable_master_mode(TWI0);
   80ce8:	4620      	mov	r0, r4
   80cea:	4b0b      	ldr	r3, [pc, #44]	; (80d18 <main+0x48>)
   80cec:	4798      	blx	r3
	
	/* Configure TWI options */
	twi_options_t p_opt;
	p_opt.master_clk = sysclk_get_peripheral_hz();
   80cee:	4b0b      	ldr	r3, [pc, #44]	; (80d1c <main+0x4c>)
   80cf0:	9301      	str	r3, [sp, #4]
	p_opt.speed = TWI_CLK;
   80cf2:	f649 4340 	movw	r3, #40000	; 0x9c40
   80cf6:	9302      	str	r3, [sp, #8]
	
	/* Configure TWI as master*/
	uint32_t status = twi_master_init(TWI0, &p_opt);
   80cf8:	4620      	mov	r0, r4
   80cfa:	a901      	add	r1, sp, #4
   80cfc:	4b08      	ldr	r3, [pc, #32]	; (80d20 <main+0x50>)
   80cfe:	4798      	blx	r3
   80d00:	e7fe      	b.n	80d00 <main+0x30>
   80d02:	bf00      	nop
   80d04:	00080149 	.word	0x00080149
   80d08:	00080305 	.word	0x00080305
   80d0c:	00080c51 	.word	0x00080c51
   80d10:	4008c000 	.word	0x4008c000
   80d14:	0008071d 	.word	0x0008071d
   80d18:	00080775 	.word	0x00080775
   80d1c:	0501bd00 	.word	0x0501bd00
   80d20:	000807c9 	.word	0x000807c9

00080d24 <__libc_init_array>:
   80d24:	b570      	push	{r4, r5, r6, lr}
   80d26:	4e0f      	ldr	r6, [pc, #60]	; (80d64 <__libc_init_array+0x40>)
   80d28:	4d0f      	ldr	r5, [pc, #60]	; (80d68 <__libc_init_array+0x44>)
   80d2a:	1b76      	subs	r6, r6, r5
   80d2c:	10b6      	asrs	r6, r6, #2
   80d2e:	d007      	beq.n	80d40 <__libc_init_array+0x1c>
   80d30:	3d04      	subs	r5, #4
   80d32:	2400      	movs	r4, #0
   80d34:	3401      	adds	r4, #1
   80d36:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80d3a:	4798      	blx	r3
   80d3c:	42a6      	cmp	r6, r4
   80d3e:	d1f9      	bne.n	80d34 <__libc_init_array+0x10>
   80d40:	4e0a      	ldr	r6, [pc, #40]	; (80d6c <__libc_init_array+0x48>)
   80d42:	4d0b      	ldr	r5, [pc, #44]	; (80d70 <__libc_init_array+0x4c>)
   80d44:	f000 ff76 	bl	81c34 <_init>
   80d48:	1b76      	subs	r6, r6, r5
   80d4a:	10b6      	asrs	r6, r6, #2
   80d4c:	d008      	beq.n	80d60 <__libc_init_array+0x3c>
   80d4e:	3d04      	subs	r5, #4
   80d50:	2400      	movs	r4, #0
   80d52:	3401      	adds	r4, #1
   80d54:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80d58:	4798      	blx	r3
   80d5a:	42a6      	cmp	r6, r4
   80d5c:	d1f9      	bne.n	80d52 <__libc_init_array+0x2e>
   80d5e:	bd70      	pop	{r4, r5, r6, pc}
   80d60:	bd70      	pop	{r4, r5, r6, pc}
   80d62:	bf00      	nop
   80d64:	00081c40 	.word	0x00081c40
   80d68:	00081c40 	.word	0x00081c40
   80d6c:	00081c48 	.word	0x00081c48
   80d70:	00081c40 	.word	0x00081c40

00080d74 <memset>:
   80d74:	b4f0      	push	{r4, r5, r6, r7}
   80d76:	0784      	lsls	r4, r0, #30
   80d78:	d043      	beq.n	80e02 <memset+0x8e>
   80d7a:	1e54      	subs	r4, r2, #1
   80d7c:	2a00      	cmp	r2, #0
   80d7e:	d03e      	beq.n	80dfe <memset+0x8a>
   80d80:	b2cd      	uxtb	r5, r1
   80d82:	4603      	mov	r3, r0
   80d84:	e003      	b.n	80d8e <memset+0x1a>
   80d86:	1e62      	subs	r2, r4, #1
   80d88:	2c00      	cmp	r4, #0
   80d8a:	d038      	beq.n	80dfe <memset+0x8a>
   80d8c:	4614      	mov	r4, r2
   80d8e:	f803 5b01 	strb.w	r5, [r3], #1
   80d92:	079a      	lsls	r2, r3, #30
   80d94:	d1f7      	bne.n	80d86 <memset+0x12>
   80d96:	2c03      	cmp	r4, #3
   80d98:	d92a      	bls.n	80df0 <memset+0x7c>
   80d9a:	b2cd      	uxtb	r5, r1
   80d9c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80da0:	2c0f      	cmp	r4, #15
   80da2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80da6:	d915      	bls.n	80dd4 <memset+0x60>
   80da8:	f1a4 0710 	sub.w	r7, r4, #16
   80dac:	093f      	lsrs	r7, r7, #4
   80dae:	f103 0610 	add.w	r6, r3, #16
   80db2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   80db6:	461a      	mov	r2, r3
   80db8:	6015      	str	r5, [r2, #0]
   80dba:	6055      	str	r5, [r2, #4]
   80dbc:	6095      	str	r5, [r2, #8]
   80dbe:	60d5      	str	r5, [r2, #12]
   80dc0:	3210      	adds	r2, #16
   80dc2:	42b2      	cmp	r2, r6
   80dc4:	d1f8      	bne.n	80db8 <memset+0x44>
   80dc6:	f004 040f 	and.w	r4, r4, #15
   80dca:	3701      	adds	r7, #1
   80dcc:	2c03      	cmp	r4, #3
   80dce:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   80dd2:	d90d      	bls.n	80df0 <memset+0x7c>
   80dd4:	461e      	mov	r6, r3
   80dd6:	4622      	mov	r2, r4
   80dd8:	3a04      	subs	r2, #4
   80dda:	2a03      	cmp	r2, #3
   80ddc:	f846 5b04 	str.w	r5, [r6], #4
   80de0:	d8fa      	bhi.n	80dd8 <memset+0x64>
   80de2:	1f22      	subs	r2, r4, #4
   80de4:	f022 0203 	bic.w	r2, r2, #3
   80de8:	3204      	adds	r2, #4
   80dea:	4413      	add	r3, r2
   80dec:	f004 0403 	and.w	r4, r4, #3
   80df0:	b12c      	cbz	r4, 80dfe <memset+0x8a>
   80df2:	b2c9      	uxtb	r1, r1
   80df4:	441c      	add	r4, r3
   80df6:	f803 1b01 	strb.w	r1, [r3], #1
   80dfa:	42a3      	cmp	r3, r4
   80dfc:	d1fb      	bne.n	80df6 <memset+0x82>
   80dfe:	bcf0      	pop	{r4, r5, r6, r7}
   80e00:	4770      	bx	lr
   80e02:	4614      	mov	r4, r2
   80e04:	4603      	mov	r3, r0
   80e06:	e7c6      	b.n	80d96 <memset+0x22>

00080e08 <setbuf>:
   80e08:	2900      	cmp	r1, #0
   80e0a:	bf0c      	ite	eq
   80e0c:	2202      	moveq	r2, #2
   80e0e:	2200      	movne	r2, #0
   80e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80e14:	f000 b800 	b.w	80e18 <setvbuf>

00080e18 <setvbuf>:
   80e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80e1c:	4d3c      	ldr	r5, [pc, #240]	; (80f10 <setvbuf+0xf8>)
   80e1e:	4604      	mov	r4, r0
   80e20:	682d      	ldr	r5, [r5, #0]
   80e22:	4688      	mov	r8, r1
   80e24:	4616      	mov	r6, r2
   80e26:	461f      	mov	r7, r3
   80e28:	b115      	cbz	r5, 80e30 <setvbuf+0x18>
   80e2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80e2c:	2b00      	cmp	r3, #0
   80e2e:	d04f      	beq.n	80ed0 <setvbuf+0xb8>
   80e30:	2e02      	cmp	r6, #2
   80e32:	d830      	bhi.n	80e96 <setvbuf+0x7e>
   80e34:	2f00      	cmp	r7, #0
   80e36:	db2e      	blt.n	80e96 <setvbuf+0x7e>
   80e38:	4628      	mov	r0, r5
   80e3a:	4621      	mov	r1, r4
   80e3c:	f000 f920 	bl	81080 <_fflush_r>
   80e40:	89a3      	ldrh	r3, [r4, #12]
   80e42:	2200      	movs	r2, #0
   80e44:	6062      	str	r2, [r4, #4]
   80e46:	61a2      	str	r2, [r4, #24]
   80e48:	061a      	lsls	r2, r3, #24
   80e4a:	d428      	bmi.n	80e9e <setvbuf+0x86>
   80e4c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80e50:	b29b      	uxth	r3, r3
   80e52:	2e02      	cmp	r6, #2
   80e54:	81a3      	strh	r3, [r4, #12]
   80e56:	d02d      	beq.n	80eb4 <setvbuf+0x9c>
   80e58:	f1b8 0f00 	cmp.w	r8, #0
   80e5c:	d03c      	beq.n	80ed8 <setvbuf+0xc0>
   80e5e:	2e01      	cmp	r6, #1
   80e60:	d013      	beq.n	80e8a <setvbuf+0x72>
   80e62:	b29b      	uxth	r3, r3
   80e64:	f003 0008 	and.w	r0, r3, #8
   80e68:	4a2a      	ldr	r2, [pc, #168]	; (80f14 <setvbuf+0xfc>)
   80e6a:	b280      	uxth	r0, r0
   80e6c:	63ea      	str	r2, [r5, #60]	; 0x3c
   80e6e:	f8c4 8000 	str.w	r8, [r4]
   80e72:	f8c4 8010 	str.w	r8, [r4, #16]
   80e76:	6167      	str	r7, [r4, #20]
   80e78:	b178      	cbz	r0, 80e9a <setvbuf+0x82>
   80e7a:	f013 0f03 	tst.w	r3, #3
   80e7e:	bf18      	it	ne
   80e80:	2700      	movne	r7, #0
   80e82:	60a7      	str	r7, [r4, #8]
   80e84:	2000      	movs	r0, #0
   80e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e8a:	f043 0301 	orr.w	r3, r3, #1
   80e8e:	427a      	negs	r2, r7
   80e90:	81a3      	strh	r3, [r4, #12]
   80e92:	61a2      	str	r2, [r4, #24]
   80e94:	e7e5      	b.n	80e62 <setvbuf+0x4a>
   80e96:	f04f 30ff 	mov.w	r0, #4294967295
   80e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e9e:	4628      	mov	r0, r5
   80ea0:	6921      	ldr	r1, [r4, #16]
   80ea2:	f000 f9ed 	bl	81280 <_free_r>
   80ea6:	89a3      	ldrh	r3, [r4, #12]
   80ea8:	2e02      	cmp	r6, #2
   80eaa:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80eae:	b29b      	uxth	r3, r3
   80eb0:	81a3      	strh	r3, [r4, #12]
   80eb2:	d1d1      	bne.n	80e58 <setvbuf+0x40>
   80eb4:	2000      	movs	r0, #0
   80eb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   80eba:	f043 0302 	orr.w	r3, r3, #2
   80ebe:	2500      	movs	r5, #0
   80ec0:	2101      	movs	r1, #1
   80ec2:	81a3      	strh	r3, [r4, #12]
   80ec4:	60a5      	str	r5, [r4, #8]
   80ec6:	6022      	str	r2, [r4, #0]
   80ec8:	6122      	str	r2, [r4, #16]
   80eca:	6161      	str	r1, [r4, #20]
   80ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ed0:	4628      	mov	r0, r5
   80ed2:	f000 f8f1 	bl	810b8 <__sinit>
   80ed6:	e7ab      	b.n	80e30 <setvbuf+0x18>
   80ed8:	2f00      	cmp	r7, #0
   80eda:	bf08      	it	eq
   80edc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   80ee0:	4638      	mov	r0, r7
   80ee2:	f000 fabd 	bl	81460 <malloc>
   80ee6:	4680      	mov	r8, r0
   80ee8:	b128      	cbz	r0, 80ef6 <setvbuf+0xde>
   80eea:	89a3      	ldrh	r3, [r4, #12]
   80eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80ef0:	b29b      	uxth	r3, r3
   80ef2:	81a3      	strh	r3, [r4, #12]
   80ef4:	e7b3      	b.n	80e5e <setvbuf+0x46>
   80ef6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80efa:	f000 fab1 	bl	81460 <malloc>
   80efe:	4680      	mov	r8, r0
   80f00:	b918      	cbnz	r0, 80f0a <setvbuf+0xf2>
   80f02:	89a3      	ldrh	r3, [r4, #12]
   80f04:	f04f 30ff 	mov.w	r0, #4294967295
   80f08:	e7d5      	b.n	80eb6 <setvbuf+0x9e>
   80f0a:	f44f 6780 	mov.w	r7, #1024	; 0x400
   80f0e:	e7ec      	b.n	80eea <setvbuf+0xd2>
   80f10:	20070560 	.word	0x20070560
   80f14:	000810ad 	.word	0x000810ad

00080f18 <register_fini>:
   80f18:	4b02      	ldr	r3, [pc, #8]	; (80f24 <register_fini+0xc>)
   80f1a:	b113      	cbz	r3, 80f22 <register_fini+0xa>
   80f1c:	4802      	ldr	r0, [pc, #8]	; (80f28 <register_fini+0x10>)
   80f1e:	f000 b805 	b.w	80f2c <atexit>
   80f22:	4770      	bx	lr
   80f24:	00000000 	.word	0x00000000
   80f28:	000811b5 	.word	0x000811b5

00080f2c <atexit>:
   80f2c:	4601      	mov	r1, r0
   80f2e:	2000      	movs	r0, #0
   80f30:	4602      	mov	r2, r0
   80f32:	4603      	mov	r3, r0
   80f34:	f000 bda4 	b.w	81a80 <__register_exitproc>

00080f38 <__sflush_r>:
   80f38:	898b      	ldrh	r3, [r1, #12]
   80f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80f3e:	b29a      	uxth	r2, r3
   80f40:	460d      	mov	r5, r1
   80f42:	0711      	lsls	r1, r2, #28
   80f44:	4680      	mov	r8, r0
   80f46:	d43c      	bmi.n	80fc2 <__sflush_r+0x8a>
   80f48:	686a      	ldr	r2, [r5, #4]
   80f4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   80f4e:	2a00      	cmp	r2, #0
   80f50:	81ab      	strh	r3, [r5, #12]
   80f52:	dd59      	ble.n	81008 <__sflush_r+0xd0>
   80f54:	6aac      	ldr	r4, [r5, #40]	; 0x28
   80f56:	2c00      	cmp	r4, #0
   80f58:	d04b      	beq.n	80ff2 <__sflush_r+0xba>
   80f5a:	b29b      	uxth	r3, r3
   80f5c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   80f60:	2100      	movs	r1, #0
   80f62:	b292      	uxth	r2, r2
   80f64:	f8d8 6000 	ldr.w	r6, [r8]
   80f68:	f8c8 1000 	str.w	r1, [r8]
   80f6c:	2a00      	cmp	r2, #0
   80f6e:	d04f      	beq.n	81010 <__sflush_r+0xd8>
   80f70:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   80f72:	075f      	lsls	r7, r3, #29
   80f74:	d505      	bpl.n	80f82 <__sflush_r+0x4a>
   80f76:	6869      	ldr	r1, [r5, #4]
   80f78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   80f7a:	1a52      	subs	r2, r2, r1
   80f7c:	b10b      	cbz	r3, 80f82 <__sflush_r+0x4a>
   80f7e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   80f80:	1ad2      	subs	r2, r2, r3
   80f82:	4640      	mov	r0, r8
   80f84:	69e9      	ldr	r1, [r5, #28]
   80f86:	2300      	movs	r3, #0
   80f88:	47a0      	blx	r4
   80f8a:	1c44      	adds	r4, r0, #1
   80f8c:	d04a      	beq.n	81024 <__sflush_r+0xec>
   80f8e:	89ab      	ldrh	r3, [r5, #12]
   80f90:	692a      	ldr	r2, [r5, #16]
   80f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   80f96:	b29b      	uxth	r3, r3
   80f98:	2100      	movs	r1, #0
   80f9a:	602a      	str	r2, [r5, #0]
   80f9c:	04da      	lsls	r2, r3, #19
   80f9e:	81ab      	strh	r3, [r5, #12]
   80fa0:	6069      	str	r1, [r5, #4]
   80fa2:	d44c      	bmi.n	8103e <__sflush_r+0x106>
   80fa4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   80fa6:	f8c8 6000 	str.w	r6, [r8]
   80faa:	b311      	cbz	r1, 80ff2 <__sflush_r+0xba>
   80fac:	f105 0340 	add.w	r3, r5, #64	; 0x40
   80fb0:	4299      	cmp	r1, r3
   80fb2:	d002      	beq.n	80fba <__sflush_r+0x82>
   80fb4:	4640      	mov	r0, r8
   80fb6:	f000 f963 	bl	81280 <_free_r>
   80fba:	2000      	movs	r0, #0
   80fbc:	6328      	str	r0, [r5, #48]	; 0x30
   80fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80fc2:	692e      	ldr	r6, [r5, #16]
   80fc4:	b1ae      	cbz	r6, 80ff2 <__sflush_r+0xba>
   80fc6:	0791      	lsls	r1, r2, #30
   80fc8:	682c      	ldr	r4, [r5, #0]
   80fca:	bf0c      	ite	eq
   80fcc:	696b      	ldreq	r3, [r5, #20]
   80fce:	2300      	movne	r3, #0
   80fd0:	602e      	str	r6, [r5, #0]
   80fd2:	1ba4      	subs	r4, r4, r6
   80fd4:	60ab      	str	r3, [r5, #8]
   80fd6:	e00a      	b.n	80fee <__sflush_r+0xb6>
   80fd8:	4632      	mov	r2, r6
   80fda:	4623      	mov	r3, r4
   80fdc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   80fde:	4640      	mov	r0, r8
   80fe0:	69e9      	ldr	r1, [r5, #28]
   80fe2:	47b8      	blx	r7
   80fe4:	2800      	cmp	r0, #0
   80fe6:	ebc0 0404 	rsb	r4, r0, r4
   80fea:	4406      	add	r6, r0
   80fec:	dd04      	ble.n	80ff8 <__sflush_r+0xc0>
   80fee:	2c00      	cmp	r4, #0
   80ff0:	dcf2      	bgt.n	80fd8 <__sflush_r+0xa0>
   80ff2:	2000      	movs	r0, #0
   80ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ff8:	89ab      	ldrh	r3, [r5, #12]
   80ffa:	f04f 30ff 	mov.w	r0, #4294967295
   80ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81002:	81ab      	strh	r3, [r5, #12]
   81004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81008:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8100a:	2a00      	cmp	r2, #0
   8100c:	dca2      	bgt.n	80f54 <__sflush_r+0x1c>
   8100e:	e7f0      	b.n	80ff2 <__sflush_r+0xba>
   81010:	2301      	movs	r3, #1
   81012:	4640      	mov	r0, r8
   81014:	69e9      	ldr	r1, [r5, #28]
   81016:	47a0      	blx	r4
   81018:	1c43      	adds	r3, r0, #1
   8101a:	4602      	mov	r2, r0
   8101c:	d01e      	beq.n	8105c <__sflush_r+0x124>
   8101e:	89ab      	ldrh	r3, [r5, #12]
   81020:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81022:	e7a6      	b.n	80f72 <__sflush_r+0x3a>
   81024:	f8d8 3000 	ldr.w	r3, [r8]
   81028:	b95b      	cbnz	r3, 81042 <__sflush_r+0x10a>
   8102a:	89aa      	ldrh	r2, [r5, #12]
   8102c:	6929      	ldr	r1, [r5, #16]
   8102e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   81032:	b292      	uxth	r2, r2
   81034:	606b      	str	r3, [r5, #4]
   81036:	04d3      	lsls	r3, r2, #19
   81038:	81aa      	strh	r2, [r5, #12]
   8103a:	6029      	str	r1, [r5, #0]
   8103c:	d5b2      	bpl.n	80fa4 <__sflush_r+0x6c>
   8103e:	6528      	str	r0, [r5, #80]	; 0x50
   81040:	e7b0      	b.n	80fa4 <__sflush_r+0x6c>
   81042:	2b1d      	cmp	r3, #29
   81044:	d001      	beq.n	8104a <__sflush_r+0x112>
   81046:	2b16      	cmp	r3, #22
   81048:	d113      	bne.n	81072 <__sflush_r+0x13a>
   8104a:	89a9      	ldrh	r1, [r5, #12]
   8104c:	692b      	ldr	r3, [r5, #16]
   8104e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   81052:	2200      	movs	r2, #0
   81054:	81a9      	strh	r1, [r5, #12]
   81056:	602b      	str	r3, [r5, #0]
   81058:	606a      	str	r2, [r5, #4]
   8105a:	e7a3      	b.n	80fa4 <__sflush_r+0x6c>
   8105c:	f8d8 3000 	ldr.w	r3, [r8]
   81060:	2b00      	cmp	r3, #0
   81062:	d0dc      	beq.n	8101e <__sflush_r+0xe6>
   81064:	2b1d      	cmp	r3, #29
   81066:	d001      	beq.n	8106c <__sflush_r+0x134>
   81068:	2b16      	cmp	r3, #22
   8106a:	d1c5      	bne.n	80ff8 <__sflush_r+0xc0>
   8106c:	f8c8 6000 	str.w	r6, [r8]
   81070:	e7bf      	b.n	80ff2 <__sflush_r+0xba>
   81072:	89ab      	ldrh	r3, [r5, #12]
   81074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81078:	81ab      	strh	r3, [r5, #12]
   8107a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8107e:	bf00      	nop

00081080 <_fflush_r>:
   81080:	b510      	push	{r4, lr}
   81082:	4604      	mov	r4, r0
   81084:	b082      	sub	sp, #8
   81086:	b108      	cbz	r0, 8108c <_fflush_r+0xc>
   81088:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8108a:	b153      	cbz	r3, 810a2 <_fflush_r+0x22>
   8108c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81090:	b908      	cbnz	r0, 81096 <_fflush_r+0x16>
   81092:	b002      	add	sp, #8
   81094:	bd10      	pop	{r4, pc}
   81096:	4620      	mov	r0, r4
   81098:	b002      	add	sp, #8
   8109a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8109e:	f7ff bf4b 	b.w	80f38 <__sflush_r>
   810a2:	9101      	str	r1, [sp, #4]
   810a4:	f000 f808 	bl	810b8 <__sinit>
   810a8:	9901      	ldr	r1, [sp, #4]
   810aa:	e7ef      	b.n	8108c <_fflush_r+0xc>

000810ac <_cleanup_r>:
   810ac:	4901      	ldr	r1, [pc, #4]	; (810b4 <_cleanup_r+0x8>)
   810ae:	f000 b9b3 	b.w	81418 <_fwalk>
   810b2:	bf00      	nop
   810b4:	00081bcd 	.word	0x00081bcd

000810b8 <__sinit>:
   810b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   810bc:	6b84      	ldr	r4, [r0, #56]	; 0x38
   810be:	b083      	sub	sp, #12
   810c0:	4607      	mov	r7, r0
   810c2:	2c00      	cmp	r4, #0
   810c4:	d165      	bne.n	81192 <__sinit+0xda>
   810c6:	687d      	ldr	r5, [r7, #4]
   810c8:	4833      	ldr	r0, [pc, #204]	; (81198 <__sinit+0xe0>)
   810ca:	2304      	movs	r3, #4
   810cc:	2103      	movs	r1, #3
   810ce:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   810d2:	63f8      	str	r0, [r7, #60]	; 0x3c
   810d4:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   810d8:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   810dc:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   810e0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   810e4:	81ab      	strh	r3, [r5, #12]
   810e6:	602c      	str	r4, [r5, #0]
   810e8:	606c      	str	r4, [r5, #4]
   810ea:	60ac      	str	r4, [r5, #8]
   810ec:	666c      	str	r4, [r5, #100]	; 0x64
   810ee:	81ec      	strh	r4, [r5, #14]
   810f0:	612c      	str	r4, [r5, #16]
   810f2:	616c      	str	r4, [r5, #20]
   810f4:	61ac      	str	r4, [r5, #24]
   810f6:	4621      	mov	r1, r4
   810f8:	2208      	movs	r2, #8
   810fa:	f7ff fe3b 	bl	80d74 <memset>
   810fe:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8119c <__sinit+0xe4>
   81102:	68be      	ldr	r6, [r7, #8]
   81104:	f8df a098 	ldr.w	sl, [pc, #152]	; 811a0 <__sinit+0xe8>
   81108:	f8df 9098 	ldr.w	r9, [pc, #152]	; 811a4 <__sinit+0xec>
   8110c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 811a8 <__sinit+0xf0>
   81110:	2301      	movs	r3, #1
   81112:	2209      	movs	r2, #9
   81114:	61ed      	str	r5, [r5, #28]
   81116:	f8c5 b020 	str.w	fp, [r5, #32]
   8111a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8111e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81122:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81126:	4621      	mov	r1, r4
   81128:	81f3      	strh	r3, [r6, #14]
   8112a:	81b2      	strh	r2, [r6, #12]
   8112c:	6034      	str	r4, [r6, #0]
   8112e:	6074      	str	r4, [r6, #4]
   81130:	60b4      	str	r4, [r6, #8]
   81132:	6674      	str	r4, [r6, #100]	; 0x64
   81134:	6134      	str	r4, [r6, #16]
   81136:	6174      	str	r4, [r6, #20]
   81138:	61b4      	str	r4, [r6, #24]
   8113a:	2208      	movs	r2, #8
   8113c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   81140:	9301      	str	r3, [sp, #4]
   81142:	f7ff fe17 	bl	80d74 <memset>
   81146:	68fd      	ldr	r5, [r7, #12]
   81148:	2012      	movs	r0, #18
   8114a:	2202      	movs	r2, #2
   8114c:	61f6      	str	r6, [r6, #28]
   8114e:	f8c6 b020 	str.w	fp, [r6, #32]
   81152:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   81156:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8115a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8115e:	4621      	mov	r1, r4
   81160:	81a8      	strh	r0, [r5, #12]
   81162:	81ea      	strh	r2, [r5, #14]
   81164:	602c      	str	r4, [r5, #0]
   81166:	606c      	str	r4, [r5, #4]
   81168:	60ac      	str	r4, [r5, #8]
   8116a:	666c      	str	r4, [r5, #100]	; 0x64
   8116c:	612c      	str	r4, [r5, #16]
   8116e:	616c      	str	r4, [r5, #20]
   81170:	61ac      	str	r4, [r5, #24]
   81172:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81176:	2208      	movs	r2, #8
   81178:	f7ff fdfc 	bl	80d74 <memset>
   8117c:	9b01      	ldr	r3, [sp, #4]
   8117e:	61ed      	str	r5, [r5, #28]
   81180:	f8c5 b020 	str.w	fp, [r5, #32]
   81184:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81188:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8118c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81190:	63bb      	str	r3, [r7, #56]	; 0x38
   81192:	b003      	add	sp, #12
   81194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81198:	000810ad 	.word	0x000810ad
   8119c:	000819d5 	.word	0x000819d5
   811a0:	000819f9 	.word	0x000819f9
   811a4:	00081a31 	.word	0x00081a31
   811a8:	00081a51 	.word	0x00081a51

000811ac <__sfp_lock_acquire>:
   811ac:	4770      	bx	lr
   811ae:	bf00      	nop

000811b0 <__sfp_lock_release>:
   811b0:	4770      	bx	lr
   811b2:	bf00      	nop

000811b4 <__libc_fini_array>:
   811b4:	b538      	push	{r3, r4, r5, lr}
   811b6:	4d09      	ldr	r5, [pc, #36]	; (811dc <__libc_fini_array+0x28>)
   811b8:	4c09      	ldr	r4, [pc, #36]	; (811e0 <__libc_fini_array+0x2c>)
   811ba:	1b64      	subs	r4, r4, r5
   811bc:	10a4      	asrs	r4, r4, #2
   811be:	bf18      	it	ne
   811c0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   811c4:	d005      	beq.n	811d2 <__libc_fini_array+0x1e>
   811c6:	3c01      	subs	r4, #1
   811c8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   811cc:	4798      	blx	r3
   811ce:	2c00      	cmp	r4, #0
   811d0:	d1f9      	bne.n	811c6 <__libc_fini_array+0x12>
   811d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   811d6:	f000 bd37 	b.w	81c48 <_fini>
   811da:	bf00      	nop
   811dc:	00081c54 	.word	0x00081c54
   811e0:	00081c58 	.word	0x00081c58

000811e4 <_malloc_trim_r>:
   811e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   811e6:	4d23      	ldr	r5, [pc, #140]	; (81274 <_malloc_trim_r+0x90>)
   811e8:	460f      	mov	r7, r1
   811ea:	4604      	mov	r4, r0
   811ec:	f000 fbdc 	bl	819a8 <__malloc_lock>
   811f0:	68ab      	ldr	r3, [r5, #8]
   811f2:	685e      	ldr	r6, [r3, #4]
   811f4:	f026 0603 	bic.w	r6, r6, #3
   811f8:	1bf1      	subs	r1, r6, r7
   811fa:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   811fe:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   81202:	f021 010f 	bic.w	r1, r1, #15
   81206:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8120a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8120e:	db07      	blt.n	81220 <_malloc_trim_r+0x3c>
   81210:	4620      	mov	r0, r4
   81212:	2100      	movs	r1, #0
   81214:	f000 fbcc 	bl	819b0 <_sbrk_r>
   81218:	68ab      	ldr	r3, [r5, #8]
   8121a:	4433      	add	r3, r6
   8121c:	4298      	cmp	r0, r3
   8121e:	d004      	beq.n	8122a <_malloc_trim_r+0x46>
   81220:	4620      	mov	r0, r4
   81222:	f000 fbc3 	bl	819ac <__malloc_unlock>
   81226:	2000      	movs	r0, #0
   81228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8122a:	4620      	mov	r0, r4
   8122c:	4279      	negs	r1, r7
   8122e:	f000 fbbf 	bl	819b0 <_sbrk_r>
   81232:	3001      	adds	r0, #1
   81234:	d00d      	beq.n	81252 <_malloc_trim_r+0x6e>
   81236:	4b10      	ldr	r3, [pc, #64]	; (81278 <_malloc_trim_r+0x94>)
   81238:	68aa      	ldr	r2, [r5, #8]
   8123a:	6819      	ldr	r1, [r3, #0]
   8123c:	1bf6      	subs	r6, r6, r7
   8123e:	f046 0601 	orr.w	r6, r6, #1
   81242:	4620      	mov	r0, r4
   81244:	1bc9      	subs	r1, r1, r7
   81246:	6056      	str	r6, [r2, #4]
   81248:	6019      	str	r1, [r3, #0]
   8124a:	f000 fbaf 	bl	819ac <__malloc_unlock>
   8124e:	2001      	movs	r0, #1
   81250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81252:	4620      	mov	r0, r4
   81254:	2100      	movs	r1, #0
   81256:	f000 fbab 	bl	819b0 <_sbrk_r>
   8125a:	68ab      	ldr	r3, [r5, #8]
   8125c:	1ac2      	subs	r2, r0, r3
   8125e:	2a0f      	cmp	r2, #15
   81260:	ddde      	ble.n	81220 <_malloc_trim_r+0x3c>
   81262:	4d06      	ldr	r5, [pc, #24]	; (8127c <_malloc_trim_r+0x98>)
   81264:	4904      	ldr	r1, [pc, #16]	; (81278 <_malloc_trim_r+0x94>)
   81266:	682d      	ldr	r5, [r5, #0]
   81268:	f042 0201 	orr.w	r2, r2, #1
   8126c:	1b40      	subs	r0, r0, r5
   8126e:	605a      	str	r2, [r3, #4]
   81270:	6008      	str	r0, [r1, #0]
   81272:	e7d5      	b.n	81220 <_malloc_trim_r+0x3c>
   81274:	20070564 	.word	0x20070564
   81278:	20070ab0 	.word	0x20070ab0
   8127c:	20070970 	.word	0x20070970

00081280 <_free_r>:
   81280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81284:	460d      	mov	r5, r1
   81286:	4606      	mov	r6, r0
   81288:	2900      	cmp	r1, #0
   8128a:	d055      	beq.n	81338 <_free_r+0xb8>
   8128c:	f000 fb8c 	bl	819a8 <__malloc_lock>
   81290:	f855 1c04 	ldr.w	r1, [r5, #-4]
   81294:	f8df c170 	ldr.w	ip, [pc, #368]	; 81408 <_free_r+0x188>
   81298:	f1a5 0408 	sub.w	r4, r5, #8
   8129c:	f021 0301 	bic.w	r3, r1, #1
   812a0:	18e2      	adds	r2, r4, r3
   812a2:	f8dc 0008 	ldr.w	r0, [ip, #8]
   812a6:	6857      	ldr	r7, [r2, #4]
   812a8:	4290      	cmp	r0, r2
   812aa:	f027 0703 	bic.w	r7, r7, #3
   812ae:	d068      	beq.n	81382 <_free_r+0x102>
   812b0:	f011 0101 	ands.w	r1, r1, #1
   812b4:	6057      	str	r7, [r2, #4]
   812b6:	d032      	beq.n	8131e <_free_r+0x9e>
   812b8:	2100      	movs	r1, #0
   812ba:	19d0      	adds	r0, r2, r7
   812bc:	6840      	ldr	r0, [r0, #4]
   812be:	07c0      	lsls	r0, r0, #31
   812c0:	d406      	bmi.n	812d0 <_free_r+0x50>
   812c2:	443b      	add	r3, r7
   812c4:	6890      	ldr	r0, [r2, #8]
   812c6:	2900      	cmp	r1, #0
   812c8:	d04d      	beq.n	81366 <_free_r+0xe6>
   812ca:	68d2      	ldr	r2, [r2, #12]
   812cc:	60c2      	str	r2, [r0, #12]
   812ce:	6090      	str	r0, [r2, #8]
   812d0:	f043 0201 	orr.w	r2, r3, #1
   812d4:	6062      	str	r2, [r4, #4]
   812d6:	50e3      	str	r3, [r4, r3]
   812d8:	b9e1      	cbnz	r1, 81314 <_free_r+0x94>
   812da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   812de:	d32d      	bcc.n	8133c <_free_r+0xbc>
   812e0:	0a5a      	lsrs	r2, r3, #9
   812e2:	2a04      	cmp	r2, #4
   812e4:	d869      	bhi.n	813ba <_free_r+0x13a>
   812e6:	0998      	lsrs	r0, r3, #6
   812e8:	3038      	adds	r0, #56	; 0x38
   812ea:	0041      	lsls	r1, r0, #1
   812ec:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   812f0:	f8dc 2008 	ldr.w	r2, [ip, #8]
   812f4:	4944      	ldr	r1, [pc, #272]	; (81408 <_free_r+0x188>)
   812f6:	4562      	cmp	r2, ip
   812f8:	d065      	beq.n	813c6 <_free_r+0x146>
   812fa:	6851      	ldr	r1, [r2, #4]
   812fc:	f021 0103 	bic.w	r1, r1, #3
   81300:	428b      	cmp	r3, r1
   81302:	d202      	bcs.n	8130a <_free_r+0x8a>
   81304:	6892      	ldr	r2, [r2, #8]
   81306:	4594      	cmp	ip, r2
   81308:	d1f7      	bne.n	812fa <_free_r+0x7a>
   8130a:	68d3      	ldr	r3, [r2, #12]
   8130c:	60e3      	str	r3, [r4, #12]
   8130e:	60a2      	str	r2, [r4, #8]
   81310:	609c      	str	r4, [r3, #8]
   81312:	60d4      	str	r4, [r2, #12]
   81314:	4630      	mov	r0, r6
   81316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8131a:	f000 bb47 	b.w	819ac <__malloc_unlock>
   8131e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   81322:	f10c 0808 	add.w	r8, ip, #8
   81326:	1b64      	subs	r4, r4, r5
   81328:	68a0      	ldr	r0, [r4, #8]
   8132a:	442b      	add	r3, r5
   8132c:	4540      	cmp	r0, r8
   8132e:	d042      	beq.n	813b6 <_free_r+0x136>
   81330:	68e5      	ldr	r5, [r4, #12]
   81332:	60c5      	str	r5, [r0, #12]
   81334:	60a8      	str	r0, [r5, #8]
   81336:	e7c0      	b.n	812ba <_free_r+0x3a>
   81338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8133c:	08db      	lsrs	r3, r3, #3
   8133e:	109a      	asrs	r2, r3, #2
   81340:	2001      	movs	r0, #1
   81342:	4090      	lsls	r0, r2
   81344:	f8dc 1004 	ldr.w	r1, [ip, #4]
   81348:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   8134c:	689a      	ldr	r2, [r3, #8]
   8134e:	4301      	orrs	r1, r0
   81350:	60a2      	str	r2, [r4, #8]
   81352:	60e3      	str	r3, [r4, #12]
   81354:	f8cc 1004 	str.w	r1, [ip, #4]
   81358:	4630      	mov	r0, r6
   8135a:	609c      	str	r4, [r3, #8]
   8135c:	60d4      	str	r4, [r2, #12]
   8135e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81362:	f000 bb23 	b.w	819ac <__malloc_unlock>
   81366:	4d29      	ldr	r5, [pc, #164]	; (8140c <_free_r+0x18c>)
   81368:	42a8      	cmp	r0, r5
   8136a:	d1ae      	bne.n	812ca <_free_r+0x4a>
   8136c:	f043 0201 	orr.w	r2, r3, #1
   81370:	f8cc 4014 	str.w	r4, [ip, #20]
   81374:	f8cc 4010 	str.w	r4, [ip, #16]
   81378:	60e0      	str	r0, [r4, #12]
   8137a:	60a0      	str	r0, [r4, #8]
   8137c:	6062      	str	r2, [r4, #4]
   8137e:	50e3      	str	r3, [r4, r3]
   81380:	e7c8      	b.n	81314 <_free_r+0x94>
   81382:	441f      	add	r7, r3
   81384:	07cb      	lsls	r3, r1, #31
   81386:	d407      	bmi.n	81398 <_free_r+0x118>
   81388:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8138c:	1a64      	subs	r4, r4, r1
   8138e:	68e3      	ldr	r3, [r4, #12]
   81390:	68a2      	ldr	r2, [r4, #8]
   81392:	440f      	add	r7, r1
   81394:	60d3      	str	r3, [r2, #12]
   81396:	609a      	str	r2, [r3, #8]
   81398:	4b1d      	ldr	r3, [pc, #116]	; (81410 <_free_r+0x190>)
   8139a:	f047 0201 	orr.w	r2, r7, #1
   8139e:	681b      	ldr	r3, [r3, #0]
   813a0:	6062      	str	r2, [r4, #4]
   813a2:	429f      	cmp	r7, r3
   813a4:	f8cc 4008 	str.w	r4, [ip, #8]
   813a8:	d3b4      	bcc.n	81314 <_free_r+0x94>
   813aa:	4b1a      	ldr	r3, [pc, #104]	; (81414 <_free_r+0x194>)
   813ac:	4630      	mov	r0, r6
   813ae:	6819      	ldr	r1, [r3, #0]
   813b0:	f7ff ff18 	bl	811e4 <_malloc_trim_r>
   813b4:	e7ae      	b.n	81314 <_free_r+0x94>
   813b6:	2101      	movs	r1, #1
   813b8:	e77f      	b.n	812ba <_free_r+0x3a>
   813ba:	2a14      	cmp	r2, #20
   813bc:	d80b      	bhi.n	813d6 <_free_r+0x156>
   813be:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   813c2:	0041      	lsls	r1, r0, #1
   813c4:	e792      	b.n	812ec <_free_r+0x6c>
   813c6:	1080      	asrs	r0, r0, #2
   813c8:	2501      	movs	r5, #1
   813ca:	4085      	lsls	r5, r0
   813cc:	6848      	ldr	r0, [r1, #4]
   813ce:	4613      	mov	r3, r2
   813d0:	4328      	orrs	r0, r5
   813d2:	6048      	str	r0, [r1, #4]
   813d4:	e79a      	b.n	8130c <_free_r+0x8c>
   813d6:	2a54      	cmp	r2, #84	; 0x54
   813d8:	d803      	bhi.n	813e2 <_free_r+0x162>
   813da:	0b18      	lsrs	r0, r3, #12
   813dc:	306e      	adds	r0, #110	; 0x6e
   813de:	0041      	lsls	r1, r0, #1
   813e0:	e784      	b.n	812ec <_free_r+0x6c>
   813e2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   813e6:	d803      	bhi.n	813f0 <_free_r+0x170>
   813e8:	0bd8      	lsrs	r0, r3, #15
   813ea:	3077      	adds	r0, #119	; 0x77
   813ec:	0041      	lsls	r1, r0, #1
   813ee:	e77d      	b.n	812ec <_free_r+0x6c>
   813f0:	f240 5154 	movw	r1, #1364	; 0x554
   813f4:	428a      	cmp	r2, r1
   813f6:	d803      	bhi.n	81400 <_free_r+0x180>
   813f8:	0c98      	lsrs	r0, r3, #18
   813fa:	307c      	adds	r0, #124	; 0x7c
   813fc:	0041      	lsls	r1, r0, #1
   813fe:	e775      	b.n	812ec <_free_r+0x6c>
   81400:	21fc      	movs	r1, #252	; 0xfc
   81402:	207e      	movs	r0, #126	; 0x7e
   81404:	e772      	b.n	812ec <_free_r+0x6c>
   81406:	bf00      	nop
   81408:	20070564 	.word	0x20070564
   8140c:	2007056c 	.word	0x2007056c
   81410:	2007096c 	.word	0x2007096c
   81414:	20070aac 	.word	0x20070aac

00081418 <_fwalk>:
   81418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8141c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   81420:	4688      	mov	r8, r1
   81422:	d019      	beq.n	81458 <_fwalk+0x40>
   81424:	2600      	movs	r6, #0
   81426:	687d      	ldr	r5, [r7, #4]
   81428:	68bc      	ldr	r4, [r7, #8]
   8142a:	3d01      	subs	r5, #1
   8142c:	d40e      	bmi.n	8144c <_fwalk+0x34>
   8142e:	89a3      	ldrh	r3, [r4, #12]
   81430:	3d01      	subs	r5, #1
   81432:	2b01      	cmp	r3, #1
   81434:	d906      	bls.n	81444 <_fwalk+0x2c>
   81436:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8143a:	4620      	mov	r0, r4
   8143c:	3301      	adds	r3, #1
   8143e:	d001      	beq.n	81444 <_fwalk+0x2c>
   81440:	47c0      	blx	r8
   81442:	4306      	orrs	r6, r0
   81444:	1c6b      	adds	r3, r5, #1
   81446:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8144a:	d1f0      	bne.n	8142e <_fwalk+0x16>
   8144c:	683f      	ldr	r7, [r7, #0]
   8144e:	2f00      	cmp	r7, #0
   81450:	d1e9      	bne.n	81426 <_fwalk+0xe>
   81452:	4630      	mov	r0, r6
   81454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81458:	463e      	mov	r6, r7
   8145a:	4630      	mov	r0, r6
   8145c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00081460 <malloc>:
   81460:	4b02      	ldr	r3, [pc, #8]	; (8146c <malloc+0xc>)
   81462:	4601      	mov	r1, r0
   81464:	6818      	ldr	r0, [r3, #0]
   81466:	f000 b803 	b.w	81470 <_malloc_r>
   8146a:	bf00      	nop
   8146c:	20070560 	.word	0x20070560

00081470 <_malloc_r>:
   81470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81474:	f101 050b 	add.w	r5, r1, #11
   81478:	2d16      	cmp	r5, #22
   8147a:	b083      	sub	sp, #12
   8147c:	4606      	mov	r6, r0
   8147e:	d927      	bls.n	814d0 <_malloc_r+0x60>
   81480:	f035 0507 	bics.w	r5, r5, #7
   81484:	d427      	bmi.n	814d6 <_malloc_r+0x66>
   81486:	42a9      	cmp	r1, r5
   81488:	d825      	bhi.n	814d6 <_malloc_r+0x66>
   8148a:	4630      	mov	r0, r6
   8148c:	f000 fa8c 	bl	819a8 <__malloc_lock>
   81490:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   81494:	d226      	bcs.n	814e4 <_malloc_r+0x74>
   81496:	4fc1      	ldr	r7, [pc, #772]	; (8179c <_malloc_r+0x32c>)
   81498:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   8149c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   814a0:	68dc      	ldr	r4, [r3, #12]
   814a2:	429c      	cmp	r4, r3
   814a4:	f000 81d2 	beq.w	8184c <_malloc_r+0x3dc>
   814a8:	6863      	ldr	r3, [r4, #4]
   814aa:	68e2      	ldr	r2, [r4, #12]
   814ac:	f023 0303 	bic.w	r3, r3, #3
   814b0:	4423      	add	r3, r4
   814b2:	6858      	ldr	r0, [r3, #4]
   814b4:	68a1      	ldr	r1, [r4, #8]
   814b6:	f040 0501 	orr.w	r5, r0, #1
   814ba:	60ca      	str	r2, [r1, #12]
   814bc:	4630      	mov	r0, r6
   814be:	6091      	str	r1, [r2, #8]
   814c0:	605d      	str	r5, [r3, #4]
   814c2:	f000 fa73 	bl	819ac <__malloc_unlock>
   814c6:	3408      	adds	r4, #8
   814c8:	4620      	mov	r0, r4
   814ca:	b003      	add	sp, #12
   814cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814d0:	2510      	movs	r5, #16
   814d2:	42a9      	cmp	r1, r5
   814d4:	d9d9      	bls.n	8148a <_malloc_r+0x1a>
   814d6:	2400      	movs	r4, #0
   814d8:	230c      	movs	r3, #12
   814da:	4620      	mov	r0, r4
   814dc:	6033      	str	r3, [r6, #0]
   814de:	b003      	add	sp, #12
   814e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814e4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   814e8:	f000 8089 	beq.w	815fe <_malloc_r+0x18e>
   814ec:	f1bc 0f04 	cmp.w	ip, #4
   814f0:	f200 8160 	bhi.w	817b4 <_malloc_r+0x344>
   814f4:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   814f8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   814fc:	ea4f 014c 	mov.w	r1, ip, lsl #1
   81500:	4fa6      	ldr	r7, [pc, #664]	; (8179c <_malloc_r+0x32c>)
   81502:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   81506:	68cc      	ldr	r4, [r1, #12]
   81508:	42a1      	cmp	r1, r4
   8150a:	d105      	bne.n	81518 <_malloc_r+0xa8>
   8150c:	e00c      	b.n	81528 <_malloc_r+0xb8>
   8150e:	2b00      	cmp	r3, #0
   81510:	da79      	bge.n	81606 <_malloc_r+0x196>
   81512:	68e4      	ldr	r4, [r4, #12]
   81514:	42a1      	cmp	r1, r4
   81516:	d007      	beq.n	81528 <_malloc_r+0xb8>
   81518:	6862      	ldr	r2, [r4, #4]
   8151a:	f022 0203 	bic.w	r2, r2, #3
   8151e:	1b53      	subs	r3, r2, r5
   81520:	2b0f      	cmp	r3, #15
   81522:	ddf4      	ble.n	8150e <_malloc_r+0x9e>
   81524:	f10c 3cff 	add.w	ip, ip, #4294967295
   81528:	f10c 0c01 	add.w	ip, ip, #1
   8152c:	4b9b      	ldr	r3, [pc, #620]	; (8179c <_malloc_r+0x32c>)
   8152e:	693c      	ldr	r4, [r7, #16]
   81530:	f103 0e08 	add.w	lr, r3, #8
   81534:	4574      	cmp	r4, lr
   81536:	f000 817e 	beq.w	81836 <_malloc_r+0x3c6>
   8153a:	6861      	ldr	r1, [r4, #4]
   8153c:	f021 0103 	bic.w	r1, r1, #3
   81540:	1b4a      	subs	r2, r1, r5
   81542:	2a0f      	cmp	r2, #15
   81544:	f300 8164 	bgt.w	81810 <_malloc_r+0x3a0>
   81548:	2a00      	cmp	r2, #0
   8154a:	f8c3 e014 	str.w	lr, [r3, #20]
   8154e:	f8c3 e010 	str.w	lr, [r3, #16]
   81552:	da69      	bge.n	81628 <_malloc_r+0x1b8>
   81554:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81558:	f080 813a 	bcs.w	817d0 <_malloc_r+0x360>
   8155c:	08c9      	lsrs	r1, r1, #3
   8155e:	108a      	asrs	r2, r1, #2
   81560:	f04f 0801 	mov.w	r8, #1
   81564:	fa08 f802 	lsl.w	r8, r8, r2
   81568:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   8156c:	685a      	ldr	r2, [r3, #4]
   8156e:	6888      	ldr	r0, [r1, #8]
   81570:	ea48 0202 	orr.w	r2, r8, r2
   81574:	60a0      	str	r0, [r4, #8]
   81576:	60e1      	str	r1, [r4, #12]
   81578:	605a      	str	r2, [r3, #4]
   8157a:	608c      	str	r4, [r1, #8]
   8157c:	60c4      	str	r4, [r0, #12]
   8157e:	ea4f 03ac 	mov.w	r3, ip, asr #2
   81582:	2001      	movs	r0, #1
   81584:	4098      	lsls	r0, r3
   81586:	4290      	cmp	r0, r2
   81588:	d85b      	bhi.n	81642 <_malloc_r+0x1d2>
   8158a:	4202      	tst	r2, r0
   8158c:	d106      	bne.n	8159c <_malloc_r+0x12c>
   8158e:	f02c 0c03 	bic.w	ip, ip, #3
   81592:	0040      	lsls	r0, r0, #1
   81594:	4202      	tst	r2, r0
   81596:	f10c 0c04 	add.w	ip, ip, #4
   8159a:	d0fa      	beq.n	81592 <_malloc_r+0x122>
   8159c:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   815a0:	4644      	mov	r4, r8
   815a2:	46e1      	mov	r9, ip
   815a4:	68e3      	ldr	r3, [r4, #12]
   815a6:	429c      	cmp	r4, r3
   815a8:	d107      	bne.n	815ba <_malloc_r+0x14a>
   815aa:	e146      	b.n	8183a <_malloc_r+0x3ca>
   815ac:	2a00      	cmp	r2, #0
   815ae:	f280 8157 	bge.w	81860 <_malloc_r+0x3f0>
   815b2:	68db      	ldr	r3, [r3, #12]
   815b4:	429c      	cmp	r4, r3
   815b6:	f000 8140 	beq.w	8183a <_malloc_r+0x3ca>
   815ba:	6859      	ldr	r1, [r3, #4]
   815bc:	f021 0103 	bic.w	r1, r1, #3
   815c0:	1b4a      	subs	r2, r1, r5
   815c2:	2a0f      	cmp	r2, #15
   815c4:	ddf2      	ble.n	815ac <_malloc_r+0x13c>
   815c6:	461c      	mov	r4, r3
   815c8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   815cc:	68d9      	ldr	r1, [r3, #12]
   815ce:	f045 0901 	orr.w	r9, r5, #1
   815d2:	f042 0801 	orr.w	r8, r2, #1
   815d6:	441d      	add	r5, r3
   815d8:	f8c3 9004 	str.w	r9, [r3, #4]
   815dc:	4630      	mov	r0, r6
   815de:	f8cc 100c 	str.w	r1, [ip, #12]
   815e2:	f8c1 c008 	str.w	ip, [r1, #8]
   815e6:	617d      	str	r5, [r7, #20]
   815e8:	613d      	str	r5, [r7, #16]
   815ea:	f8c5 e00c 	str.w	lr, [r5, #12]
   815ee:	f8c5 e008 	str.w	lr, [r5, #8]
   815f2:	f8c5 8004 	str.w	r8, [r5, #4]
   815f6:	50aa      	str	r2, [r5, r2]
   815f8:	f000 f9d8 	bl	819ac <__malloc_unlock>
   815fc:	e764      	b.n	814c8 <_malloc_r+0x58>
   815fe:	217e      	movs	r1, #126	; 0x7e
   81600:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   81604:	e77c      	b.n	81500 <_malloc_r+0x90>
   81606:	4422      	add	r2, r4
   81608:	6850      	ldr	r0, [r2, #4]
   8160a:	68e3      	ldr	r3, [r4, #12]
   8160c:	68a1      	ldr	r1, [r4, #8]
   8160e:	f040 0501 	orr.w	r5, r0, #1
   81612:	60cb      	str	r3, [r1, #12]
   81614:	4630      	mov	r0, r6
   81616:	6099      	str	r1, [r3, #8]
   81618:	6055      	str	r5, [r2, #4]
   8161a:	f000 f9c7 	bl	819ac <__malloc_unlock>
   8161e:	3408      	adds	r4, #8
   81620:	4620      	mov	r0, r4
   81622:	b003      	add	sp, #12
   81624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81628:	4421      	add	r1, r4
   8162a:	684b      	ldr	r3, [r1, #4]
   8162c:	4630      	mov	r0, r6
   8162e:	f043 0301 	orr.w	r3, r3, #1
   81632:	604b      	str	r3, [r1, #4]
   81634:	f000 f9ba 	bl	819ac <__malloc_unlock>
   81638:	3408      	adds	r4, #8
   8163a:	4620      	mov	r0, r4
   8163c:	b003      	add	sp, #12
   8163e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81642:	68bc      	ldr	r4, [r7, #8]
   81644:	6863      	ldr	r3, [r4, #4]
   81646:	f023 0903 	bic.w	r9, r3, #3
   8164a:	45a9      	cmp	r9, r5
   8164c:	d304      	bcc.n	81658 <_malloc_r+0x1e8>
   8164e:	ebc5 0309 	rsb	r3, r5, r9
   81652:	2b0f      	cmp	r3, #15
   81654:	f300 8091 	bgt.w	8177a <_malloc_r+0x30a>
   81658:	4b51      	ldr	r3, [pc, #324]	; (817a0 <_malloc_r+0x330>)
   8165a:	4a52      	ldr	r2, [pc, #328]	; (817a4 <_malloc_r+0x334>)
   8165c:	6819      	ldr	r1, [r3, #0]
   8165e:	6813      	ldr	r3, [r2, #0]
   81660:	eb05 0a01 	add.w	sl, r5, r1
   81664:	3301      	adds	r3, #1
   81666:	eb04 0b09 	add.w	fp, r4, r9
   8166a:	f000 8161 	beq.w	81930 <_malloc_r+0x4c0>
   8166e:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   81672:	f10a 0a0f 	add.w	sl, sl, #15
   81676:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8167a:	f02a 0a0f 	bic.w	sl, sl, #15
   8167e:	4630      	mov	r0, r6
   81680:	4651      	mov	r1, sl
   81682:	9201      	str	r2, [sp, #4]
   81684:	f000 f994 	bl	819b0 <_sbrk_r>
   81688:	f1b0 3fff 	cmp.w	r0, #4294967295
   8168c:	4680      	mov	r8, r0
   8168e:	9a01      	ldr	r2, [sp, #4]
   81690:	f000 8101 	beq.w	81896 <_malloc_r+0x426>
   81694:	4583      	cmp	fp, r0
   81696:	f200 80fb 	bhi.w	81890 <_malloc_r+0x420>
   8169a:	f8df c114 	ldr.w	ip, [pc, #276]	; 817b0 <_malloc_r+0x340>
   8169e:	45c3      	cmp	fp, r8
   816a0:	f8dc 3000 	ldr.w	r3, [ip]
   816a4:	4453      	add	r3, sl
   816a6:	f8cc 3000 	str.w	r3, [ip]
   816aa:	f000 814a 	beq.w	81942 <_malloc_r+0x4d2>
   816ae:	6812      	ldr	r2, [r2, #0]
   816b0:	493c      	ldr	r1, [pc, #240]	; (817a4 <_malloc_r+0x334>)
   816b2:	3201      	adds	r2, #1
   816b4:	bf1b      	ittet	ne
   816b6:	ebcb 0b08 	rsbne	fp, fp, r8
   816ba:	445b      	addne	r3, fp
   816bc:	f8c1 8000 	streq.w	r8, [r1]
   816c0:	f8cc 3000 	strne.w	r3, [ip]
   816c4:	f018 0307 	ands.w	r3, r8, #7
   816c8:	f000 8114 	beq.w	818f4 <_malloc_r+0x484>
   816cc:	f1c3 0208 	rsb	r2, r3, #8
   816d0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   816d4:	4490      	add	r8, r2
   816d6:	3308      	adds	r3, #8
   816d8:	44c2      	add	sl, r8
   816da:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   816de:	ebca 0a03 	rsb	sl, sl, r3
   816e2:	4651      	mov	r1, sl
   816e4:	4630      	mov	r0, r6
   816e6:	f8cd c004 	str.w	ip, [sp, #4]
   816ea:	f000 f961 	bl	819b0 <_sbrk_r>
   816ee:	1c43      	adds	r3, r0, #1
   816f0:	f8dd c004 	ldr.w	ip, [sp, #4]
   816f4:	f000 8135 	beq.w	81962 <_malloc_r+0x4f2>
   816f8:	ebc8 0200 	rsb	r2, r8, r0
   816fc:	4452      	add	r2, sl
   816fe:	f042 0201 	orr.w	r2, r2, #1
   81702:	f8dc 3000 	ldr.w	r3, [ip]
   81706:	42bc      	cmp	r4, r7
   81708:	4453      	add	r3, sl
   8170a:	f8c7 8008 	str.w	r8, [r7, #8]
   8170e:	f8cc 3000 	str.w	r3, [ip]
   81712:	f8c8 2004 	str.w	r2, [r8, #4]
   81716:	f8df a098 	ldr.w	sl, [pc, #152]	; 817b0 <_malloc_r+0x340>
   8171a:	d015      	beq.n	81748 <_malloc_r+0x2d8>
   8171c:	f1b9 0f0f 	cmp.w	r9, #15
   81720:	f240 80eb 	bls.w	818fa <_malloc_r+0x48a>
   81724:	6861      	ldr	r1, [r4, #4]
   81726:	f1a9 020c 	sub.w	r2, r9, #12
   8172a:	f022 0207 	bic.w	r2, r2, #7
   8172e:	f001 0101 	and.w	r1, r1, #1
   81732:	ea42 0e01 	orr.w	lr, r2, r1
   81736:	2005      	movs	r0, #5
   81738:	18a1      	adds	r1, r4, r2
   8173a:	2a0f      	cmp	r2, #15
   8173c:	f8c4 e004 	str.w	lr, [r4, #4]
   81740:	6048      	str	r0, [r1, #4]
   81742:	6088      	str	r0, [r1, #8]
   81744:	f200 8111 	bhi.w	8196a <_malloc_r+0x4fa>
   81748:	4a17      	ldr	r2, [pc, #92]	; (817a8 <_malloc_r+0x338>)
   8174a:	68bc      	ldr	r4, [r7, #8]
   8174c:	6811      	ldr	r1, [r2, #0]
   8174e:	428b      	cmp	r3, r1
   81750:	bf88      	it	hi
   81752:	6013      	strhi	r3, [r2, #0]
   81754:	4a15      	ldr	r2, [pc, #84]	; (817ac <_malloc_r+0x33c>)
   81756:	6811      	ldr	r1, [r2, #0]
   81758:	428b      	cmp	r3, r1
   8175a:	bf88      	it	hi
   8175c:	6013      	strhi	r3, [r2, #0]
   8175e:	6862      	ldr	r2, [r4, #4]
   81760:	f022 0203 	bic.w	r2, r2, #3
   81764:	4295      	cmp	r5, r2
   81766:	ebc5 0302 	rsb	r3, r5, r2
   8176a:	d801      	bhi.n	81770 <_malloc_r+0x300>
   8176c:	2b0f      	cmp	r3, #15
   8176e:	dc04      	bgt.n	8177a <_malloc_r+0x30a>
   81770:	4630      	mov	r0, r6
   81772:	f000 f91b 	bl	819ac <__malloc_unlock>
   81776:	2400      	movs	r4, #0
   81778:	e6a6      	b.n	814c8 <_malloc_r+0x58>
   8177a:	f045 0201 	orr.w	r2, r5, #1
   8177e:	f043 0301 	orr.w	r3, r3, #1
   81782:	4425      	add	r5, r4
   81784:	6062      	str	r2, [r4, #4]
   81786:	4630      	mov	r0, r6
   81788:	60bd      	str	r5, [r7, #8]
   8178a:	606b      	str	r3, [r5, #4]
   8178c:	f000 f90e 	bl	819ac <__malloc_unlock>
   81790:	3408      	adds	r4, #8
   81792:	4620      	mov	r0, r4
   81794:	b003      	add	sp, #12
   81796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8179a:	bf00      	nop
   8179c:	20070564 	.word	0x20070564
   817a0:	20070aac 	.word	0x20070aac
   817a4:	20070970 	.word	0x20070970
   817a8:	20070aa8 	.word	0x20070aa8
   817ac:	20070aa4 	.word	0x20070aa4
   817b0:	20070ab0 	.word	0x20070ab0
   817b4:	f1bc 0f14 	cmp.w	ip, #20
   817b8:	d961      	bls.n	8187e <_malloc_r+0x40e>
   817ba:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   817be:	f200 808f 	bhi.w	818e0 <_malloc_r+0x470>
   817c2:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   817c6:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   817ca:	ea4f 014c 	mov.w	r1, ip, lsl #1
   817ce:	e697      	b.n	81500 <_malloc_r+0x90>
   817d0:	0a4b      	lsrs	r3, r1, #9
   817d2:	2b04      	cmp	r3, #4
   817d4:	d958      	bls.n	81888 <_malloc_r+0x418>
   817d6:	2b14      	cmp	r3, #20
   817d8:	f200 80ad 	bhi.w	81936 <_malloc_r+0x4c6>
   817dc:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   817e0:	0050      	lsls	r0, r2, #1
   817e2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   817e6:	6883      	ldr	r3, [r0, #8]
   817e8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 819a4 <_malloc_r+0x534>
   817ec:	4283      	cmp	r3, r0
   817ee:	f000 808a 	beq.w	81906 <_malloc_r+0x496>
   817f2:	685a      	ldr	r2, [r3, #4]
   817f4:	f022 0203 	bic.w	r2, r2, #3
   817f8:	4291      	cmp	r1, r2
   817fa:	d202      	bcs.n	81802 <_malloc_r+0x392>
   817fc:	689b      	ldr	r3, [r3, #8]
   817fe:	4298      	cmp	r0, r3
   81800:	d1f7      	bne.n	817f2 <_malloc_r+0x382>
   81802:	68d9      	ldr	r1, [r3, #12]
   81804:	687a      	ldr	r2, [r7, #4]
   81806:	60e1      	str	r1, [r4, #12]
   81808:	60a3      	str	r3, [r4, #8]
   8180a:	608c      	str	r4, [r1, #8]
   8180c:	60dc      	str	r4, [r3, #12]
   8180e:	e6b6      	b.n	8157e <_malloc_r+0x10e>
   81810:	f045 0701 	orr.w	r7, r5, #1
   81814:	f042 0101 	orr.w	r1, r2, #1
   81818:	4425      	add	r5, r4
   8181a:	6067      	str	r7, [r4, #4]
   8181c:	4630      	mov	r0, r6
   8181e:	615d      	str	r5, [r3, #20]
   81820:	611d      	str	r5, [r3, #16]
   81822:	f8c5 e00c 	str.w	lr, [r5, #12]
   81826:	f8c5 e008 	str.w	lr, [r5, #8]
   8182a:	6069      	str	r1, [r5, #4]
   8182c:	50aa      	str	r2, [r5, r2]
   8182e:	3408      	adds	r4, #8
   81830:	f000 f8bc 	bl	819ac <__malloc_unlock>
   81834:	e648      	b.n	814c8 <_malloc_r+0x58>
   81836:	685a      	ldr	r2, [r3, #4]
   81838:	e6a1      	b.n	8157e <_malloc_r+0x10e>
   8183a:	f109 0901 	add.w	r9, r9, #1
   8183e:	f019 0f03 	tst.w	r9, #3
   81842:	f104 0408 	add.w	r4, r4, #8
   81846:	f47f aead 	bne.w	815a4 <_malloc_r+0x134>
   8184a:	e02d      	b.n	818a8 <_malloc_r+0x438>
   8184c:	f104 0308 	add.w	r3, r4, #8
   81850:	6964      	ldr	r4, [r4, #20]
   81852:	42a3      	cmp	r3, r4
   81854:	bf08      	it	eq
   81856:	f10c 0c02 	addeq.w	ip, ip, #2
   8185a:	f43f ae67 	beq.w	8152c <_malloc_r+0xbc>
   8185e:	e623      	b.n	814a8 <_malloc_r+0x38>
   81860:	4419      	add	r1, r3
   81862:	6848      	ldr	r0, [r1, #4]
   81864:	461c      	mov	r4, r3
   81866:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8186a:	68db      	ldr	r3, [r3, #12]
   8186c:	f040 0501 	orr.w	r5, r0, #1
   81870:	604d      	str	r5, [r1, #4]
   81872:	4630      	mov	r0, r6
   81874:	60d3      	str	r3, [r2, #12]
   81876:	609a      	str	r2, [r3, #8]
   81878:	f000 f898 	bl	819ac <__malloc_unlock>
   8187c:	e624      	b.n	814c8 <_malloc_r+0x58>
   8187e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   81882:	ea4f 014c 	mov.w	r1, ip, lsl #1
   81886:	e63b      	b.n	81500 <_malloc_r+0x90>
   81888:	098a      	lsrs	r2, r1, #6
   8188a:	3238      	adds	r2, #56	; 0x38
   8188c:	0050      	lsls	r0, r2, #1
   8188e:	e7a8      	b.n	817e2 <_malloc_r+0x372>
   81890:	42bc      	cmp	r4, r7
   81892:	f43f af02 	beq.w	8169a <_malloc_r+0x22a>
   81896:	68bc      	ldr	r4, [r7, #8]
   81898:	6862      	ldr	r2, [r4, #4]
   8189a:	f022 0203 	bic.w	r2, r2, #3
   8189e:	e761      	b.n	81764 <_malloc_r+0x2f4>
   818a0:	f8d8 8000 	ldr.w	r8, [r8]
   818a4:	4598      	cmp	r8, r3
   818a6:	d17a      	bne.n	8199e <_malloc_r+0x52e>
   818a8:	f01c 0f03 	tst.w	ip, #3
   818ac:	f1a8 0308 	sub.w	r3, r8, #8
   818b0:	f10c 3cff 	add.w	ip, ip, #4294967295
   818b4:	d1f4      	bne.n	818a0 <_malloc_r+0x430>
   818b6:	687b      	ldr	r3, [r7, #4]
   818b8:	ea23 0300 	bic.w	r3, r3, r0
   818bc:	607b      	str	r3, [r7, #4]
   818be:	0040      	lsls	r0, r0, #1
   818c0:	4298      	cmp	r0, r3
   818c2:	f63f aebe 	bhi.w	81642 <_malloc_r+0x1d2>
   818c6:	2800      	cmp	r0, #0
   818c8:	f43f aebb 	beq.w	81642 <_malloc_r+0x1d2>
   818cc:	4203      	tst	r3, r0
   818ce:	46cc      	mov	ip, r9
   818d0:	f47f ae64 	bne.w	8159c <_malloc_r+0x12c>
   818d4:	0040      	lsls	r0, r0, #1
   818d6:	4203      	tst	r3, r0
   818d8:	f10c 0c04 	add.w	ip, ip, #4
   818dc:	d0fa      	beq.n	818d4 <_malloc_r+0x464>
   818de:	e65d      	b.n	8159c <_malloc_r+0x12c>
   818e0:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   818e4:	d819      	bhi.n	8191a <_malloc_r+0x4aa>
   818e6:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   818ea:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   818ee:	ea4f 014c 	mov.w	r1, ip, lsl #1
   818f2:	e605      	b.n	81500 <_malloc_r+0x90>
   818f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   818f8:	e6ee      	b.n	816d8 <_malloc_r+0x268>
   818fa:	2301      	movs	r3, #1
   818fc:	f8c8 3004 	str.w	r3, [r8, #4]
   81900:	4644      	mov	r4, r8
   81902:	2200      	movs	r2, #0
   81904:	e72e      	b.n	81764 <_malloc_r+0x2f4>
   81906:	1092      	asrs	r2, r2, #2
   81908:	2001      	movs	r0, #1
   8190a:	4090      	lsls	r0, r2
   8190c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   81910:	4619      	mov	r1, r3
   81912:	4302      	orrs	r2, r0
   81914:	f8c8 2004 	str.w	r2, [r8, #4]
   81918:	e775      	b.n	81806 <_malloc_r+0x396>
   8191a:	f240 5354 	movw	r3, #1364	; 0x554
   8191e:	459c      	cmp	ip, r3
   81920:	d81b      	bhi.n	8195a <_malloc_r+0x4ea>
   81922:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   81926:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8192a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8192e:	e5e7      	b.n	81500 <_malloc_r+0x90>
   81930:	f10a 0a10 	add.w	sl, sl, #16
   81934:	e6a3      	b.n	8167e <_malloc_r+0x20e>
   81936:	2b54      	cmp	r3, #84	; 0x54
   81938:	d81f      	bhi.n	8197a <_malloc_r+0x50a>
   8193a:	0b0a      	lsrs	r2, r1, #12
   8193c:	326e      	adds	r2, #110	; 0x6e
   8193e:	0050      	lsls	r0, r2, #1
   81940:	e74f      	b.n	817e2 <_malloc_r+0x372>
   81942:	f3cb 010b 	ubfx	r1, fp, #0, #12
   81946:	2900      	cmp	r1, #0
   81948:	f47f aeb1 	bne.w	816ae <_malloc_r+0x23e>
   8194c:	eb0a 0109 	add.w	r1, sl, r9
   81950:	68ba      	ldr	r2, [r7, #8]
   81952:	f041 0101 	orr.w	r1, r1, #1
   81956:	6051      	str	r1, [r2, #4]
   81958:	e6f6      	b.n	81748 <_malloc_r+0x2d8>
   8195a:	21fc      	movs	r1, #252	; 0xfc
   8195c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   81960:	e5ce      	b.n	81500 <_malloc_r+0x90>
   81962:	2201      	movs	r2, #1
   81964:	f04f 0a00 	mov.w	sl, #0
   81968:	e6cb      	b.n	81702 <_malloc_r+0x292>
   8196a:	f104 0108 	add.w	r1, r4, #8
   8196e:	4630      	mov	r0, r6
   81970:	f7ff fc86 	bl	81280 <_free_r>
   81974:	f8da 3000 	ldr.w	r3, [sl]
   81978:	e6e6      	b.n	81748 <_malloc_r+0x2d8>
   8197a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8197e:	d803      	bhi.n	81988 <_malloc_r+0x518>
   81980:	0bca      	lsrs	r2, r1, #15
   81982:	3277      	adds	r2, #119	; 0x77
   81984:	0050      	lsls	r0, r2, #1
   81986:	e72c      	b.n	817e2 <_malloc_r+0x372>
   81988:	f240 5254 	movw	r2, #1364	; 0x554
   8198c:	4293      	cmp	r3, r2
   8198e:	d803      	bhi.n	81998 <_malloc_r+0x528>
   81990:	0c8a      	lsrs	r2, r1, #18
   81992:	327c      	adds	r2, #124	; 0x7c
   81994:	0050      	lsls	r0, r2, #1
   81996:	e724      	b.n	817e2 <_malloc_r+0x372>
   81998:	20fc      	movs	r0, #252	; 0xfc
   8199a:	227e      	movs	r2, #126	; 0x7e
   8199c:	e721      	b.n	817e2 <_malloc_r+0x372>
   8199e:	687b      	ldr	r3, [r7, #4]
   819a0:	e78d      	b.n	818be <_malloc_r+0x44e>
   819a2:	bf00      	nop
   819a4:	20070564 	.word	0x20070564

000819a8 <__malloc_lock>:
   819a8:	4770      	bx	lr
   819aa:	bf00      	nop

000819ac <__malloc_unlock>:
   819ac:	4770      	bx	lr
   819ae:	bf00      	nop

000819b0 <_sbrk_r>:
   819b0:	b538      	push	{r3, r4, r5, lr}
   819b2:	4c07      	ldr	r4, [pc, #28]	; (819d0 <_sbrk_r+0x20>)
   819b4:	2300      	movs	r3, #0
   819b6:	4605      	mov	r5, r0
   819b8:	4608      	mov	r0, r1
   819ba:	6023      	str	r3, [r4, #0]
   819bc:	f7ff f850 	bl	80a60 <_sbrk>
   819c0:	1c43      	adds	r3, r0, #1
   819c2:	d000      	beq.n	819c6 <_sbrk_r+0x16>
   819c4:	bd38      	pop	{r3, r4, r5, pc}
   819c6:	6823      	ldr	r3, [r4, #0]
   819c8:	2b00      	cmp	r3, #0
   819ca:	d0fb      	beq.n	819c4 <_sbrk_r+0x14>
   819cc:	602b      	str	r3, [r5, #0]
   819ce:	bd38      	pop	{r3, r4, r5, pc}
   819d0:	20070ae4 	.word	0x20070ae4

000819d4 <__sread>:
   819d4:	b510      	push	{r4, lr}
   819d6:	460c      	mov	r4, r1
   819d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   819dc:	f000 f912 	bl	81c04 <_read_r>
   819e0:	2800      	cmp	r0, #0
   819e2:	db03      	blt.n	819ec <__sread+0x18>
   819e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   819e6:	4403      	add	r3, r0
   819e8:	6523      	str	r3, [r4, #80]	; 0x50
   819ea:	bd10      	pop	{r4, pc}
   819ec:	89a3      	ldrh	r3, [r4, #12]
   819ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   819f2:	81a3      	strh	r3, [r4, #12]
   819f4:	bd10      	pop	{r4, pc}
   819f6:	bf00      	nop

000819f8 <__swrite>:
   819f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   819fc:	460c      	mov	r4, r1
   819fe:	8989      	ldrh	r1, [r1, #12]
   81a00:	461d      	mov	r5, r3
   81a02:	05cb      	lsls	r3, r1, #23
   81a04:	4616      	mov	r6, r2
   81a06:	4607      	mov	r7, r0
   81a08:	d506      	bpl.n	81a18 <__swrite+0x20>
   81a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81a0e:	2200      	movs	r2, #0
   81a10:	2302      	movs	r3, #2
   81a12:	f000 f8e3 	bl	81bdc <_lseek_r>
   81a16:	89a1      	ldrh	r1, [r4, #12]
   81a18:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   81a1c:	81a1      	strh	r1, [r4, #12]
   81a1e:	4638      	mov	r0, r7
   81a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81a24:	4632      	mov	r2, r6
   81a26:	462b      	mov	r3, r5
   81a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81a2c:	f000 b814 	b.w	81a58 <_write_r>

00081a30 <__sseek>:
   81a30:	b510      	push	{r4, lr}
   81a32:	460c      	mov	r4, r1
   81a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81a38:	f000 f8d0 	bl	81bdc <_lseek_r>
   81a3c:	89a3      	ldrh	r3, [r4, #12]
   81a3e:	1c42      	adds	r2, r0, #1
   81a40:	bf0e      	itee	eq
   81a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   81a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   81a4a:	6520      	strne	r0, [r4, #80]	; 0x50
   81a4c:	81a3      	strh	r3, [r4, #12]
   81a4e:	bd10      	pop	{r4, pc}

00081a50 <__sclose>:
   81a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81a54:	f000 b868 	b.w	81b28 <_close_r>

00081a58 <_write_r>:
   81a58:	b570      	push	{r4, r5, r6, lr}
   81a5a:	4c08      	ldr	r4, [pc, #32]	; (81a7c <_write_r+0x24>)
   81a5c:	4606      	mov	r6, r0
   81a5e:	2500      	movs	r5, #0
   81a60:	4608      	mov	r0, r1
   81a62:	4611      	mov	r1, r2
   81a64:	461a      	mov	r2, r3
   81a66:	6025      	str	r5, [r4, #0]
   81a68:	f7fe fc22 	bl	802b0 <_write>
   81a6c:	1c43      	adds	r3, r0, #1
   81a6e:	d000      	beq.n	81a72 <_write_r+0x1a>
   81a70:	bd70      	pop	{r4, r5, r6, pc}
   81a72:	6823      	ldr	r3, [r4, #0]
   81a74:	2b00      	cmp	r3, #0
   81a76:	d0fb      	beq.n	81a70 <_write_r+0x18>
   81a78:	6033      	str	r3, [r6, #0]
   81a7a:	bd70      	pop	{r4, r5, r6, pc}
   81a7c:	20070ae4 	.word	0x20070ae4

00081a80 <__register_exitproc>:
   81a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   81a82:	4c27      	ldr	r4, [pc, #156]	; (81b20 <__register_exitproc+0xa0>)
   81a84:	b085      	sub	sp, #20
   81a86:	6826      	ldr	r6, [r4, #0]
   81a88:	4607      	mov	r7, r0
   81a8a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   81a8e:	2c00      	cmp	r4, #0
   81a90:	d040      	beq.n	81b14 <__register_exitproc+0x94>
   81a92:	6865      	ldr	r5, [r4, #4]
   81a94:	2d1f      	cmp	r5, #31
   81a96:	dd1e      	ble.n	81ad6 <__register_exitproc+0x56>
   81a98:	4822      	ldr	r0, [pc, #136]	; (81b24 <__register_exitproc+0xa4>)
   81a9a:	b918      	cbnz	r0, 81aa4 <__register_exitproc+0x24>
   81a9c:	f04f 30ff 	mov.w	r0, #4294967295
   81aa0:	b005      	add	sp, #20
   81aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81aa4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81aa8:	9103      	str	r1, [sp, #12]
   81aaa:	9202      	str	r2, [sp, #8]
   81aac:	9301      	str	r3, [sp, #4]
   81aae:	f7ff fcd7 	bl	81460 <malloc>
   81ab2:	9903      	ldr	r1, [sp, #12]
   81ab4:	4604      	mov	r4, r0
   81ab6:	9a02      	ldr	r2, [sp, #8]
   81ab8:	9b01      	ldr	r3, [sp, #4]
   81aba:	2800      	cmp	r0, #0
   81abc:	d0ee      	beq.n	81a9c <__register_exitproc+0x1c>
   81abe:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   81ac2:	2000      	movs	r0, #0
   81ac4:	6025      	str	r5, [r4, #0]
   81ac6:	6060      	str	r0, [r4, #4]
   81ac8:	4605      	mov	r5, r0
   81aca:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81ace:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   81ad2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   81ad6:	b93f      	cbnz	r7, 81ae8 <__register_exitproc+0x68>
   81ad8:	1c6b      	adds	r3, r5, #1
   81ada:	2000      	movs	r0, #0
   81adc:	3502      	adds	r5, #2
   81ade:	6063      	str	r3, [r4, #4]
   81ae0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   81ae4:	b005      	add	sp, #20
   81ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81ae8:	2601      	movs	r6, #1
   81aea:	40ae      	lsls	r6, r5
   81aec:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   81af0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   81af4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   81af8:	2f02      	cmp	r7, #2
   81afa:	ea42 0206 	orr.w	r2, r2, r6
   81afe:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   81b02:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   81b06:	d1e7      	bne.n	81ad8 <__register_exitproc+0x58>
   81b08:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   81b0c:	431e      	orrs	r6, r3
   81b0e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   81b12:	e7e1      	b.n	81ad8 <__register_exitproc+0x58>
   81b14:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   81b18:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81b1c:	e7b9      	b.n	81a92 <__register_exitproc+0x12>
   81b1e:	bf00      	nop
   81b20:	00081c30 	.word	0x00081c30
   81b24:	00081461 	.word	0x00081461

00081b28 <_close_r>:
   81b28:	b538      	push	{r3, r4, r5, lr}
   81b2a:	4c07      	ldr	r4, [pc, #28]	; (81b48 <_close_r+0x20>)
   81b2c:	2300      	movs	r3, #0
   81b2e:	4605      	mov	r5, r0
   81b30:	4608      	mov	r0, r1
   81b32:	6023      	str	r3, [r4, #0]
   81b34:	f7fe ffae 	bl	80a94 <_close>
   81b38:	1c43      	adds	r3, r0, #1
   81b3a:	d000      	beq.n	81b3e <_close_r+0x16>
   81b3c:	bd38      	pop	{r3, r4, r5, pc}
   81b3e:	6823      	ldr	r3, [r4, #0]
   81b40:	2b00      	cmp	r3, #0
   81b42:	d0fb      	beq.n	81b3c <_close_r+0x14>
   81b44:	602b      	str	r3, [r5, #0]
   81b46:	bd38      	pop	{r3, r4, r5, pc}
   81b48:	20070ae4 	.word	0x20070ae4

00081b4c <_fclose_r>:
   81b4c:	b570      	push	{r4, r5, r6, lr}
   81b4e:	460c      	mov	r4, r1
   81b50:	4605      	mov	r5, r0
   81b52:	b131      	cbz	r1, 81b62 <_fclose_r+0x16>
   81b54:	b110      	cbz	r0, 81b5c <_fclose_r+0x10>
   81b56:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81b58:	2b00      	cmp	r3, #0
   81b5a:	d02f      	beq.n	81bbc <_fclose_r+0x70>
   81b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81b60:	b90b      	cbnz	r3, 81b66 <_fclose_r+0x1a>
   81b62:	2000      	movs	r0, #0
   81b64:	bd70      	pop	{r4, r5, r6, pc}
   81b66:	4628      	mov	r0, r5
   81b68:	4621      	mov	r1, r4
   81b6a:	f7ff fa89 	bl	81080 <_fflush_r>
   81b6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81b70:	4606      	mov	r6, r0
   81b72:	b133      	cbz	r3, 81b82 <_fclose_r+0x36>
   81b74:	4628      	mov	r0, r5
   81b76:	69e1      	ldr	r1, [r4, #28]
   81b78:	4798      	blx	r3
   81b7a:	2800      	cmp	r0, #0
   81b7c:	bfb8      	it	lt
   81b7e:	f04f 36ff 	movlt.w	r6, #4294967295
   81b82:	89a3      	ldrh	r3, [r4, #12]
   81b84:	061b      	lsls	r3, r3, #24
   81b86:	d41c      	bmi.n	81bc2 <_fclose_r+0x76>
   81b88:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81b8a:	b141      	cbz	r1, 81b9e <_fclose_r+0x52>
   81b8c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81b90:	4299      	cmp	r1, r3
   81b92:	d002      	beq.n	81b9a <_fclose_r+0x4e>
   81b94:	4628      	mov	r0, r5
   81b96:	f7ff fb73 	bl	81280 <_free_r>
   81b9a:	2300      	movs	r3, #0
   81b9c:	6323      	str	r3, [r4, #48]	; 0x30
   81b9e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81ba0:	b121      	cbz	r1, 81bac <_fclose_r+0x60>
   81ba2:	4628      	mov	r0, r5
   81ba4:	f7ff fb6c 	bl	81280 <_free_r>
   81ba8:	2300      	movs	r3, #0
   81baa:	6463      	str	r3, [r4, #68]	; 0x44
   81bac:	f7ff fafe 	bl	811ac <__sfp_lock_acquire>
   81bb0:	2300      	movs	r3, #0
   81bb2:	81a3      	strh	r3, [r4, #12]
   81bb4:	f7ff fafc 	bl	811b0 <__sfp_lock_release>
   81bb8:	4630      	mov	r0, r6
   81bba:	bd70      	pop	{r4, r5, r6, pc}
   81bbc:	f7ff fa7c 	bl	810b8 <__sinit>
   81bc0:	e7cc      	b.n	81b5c <_fclose_r+0x10>
   81bc2:	4628      	mov	r0, r5
   81bc4:	6921      	ldr	r1, [r4, #16]
   81bc6:	f7ff fb5b 	bl	81280 <_free_r>
   81bca:	e7dd      	b.n	81b88 <_fclose_r+0x3c>

00081bcc <fclose>:
   81bcc:	4b02      	ldr	r3, [pc, #8]	; (81bd8 <fclose+0xc>)
   81bce:	4601      	mov	r1, r0
   81bd0:	6818      	ldr	r0, [r3, #0]
   81bd2:	f7ff bfbb 	b.w	81b4c <_fclose_r>
   81bd6:	bf00      	nop
   81bd8:	20070560 	.word	0x20070560

00081bdc <_lseek_r>:
   81bdc:	b570      	push	{r4, r5, r6, lr}
   81bde:	4c08      	ldr	r4, [pc, #32]	; (81c00 <_lseek_r+0x24>)
   81be0:	4606      	mov	r6, r0
   81be2:	2500      	movs	r5, #0
   81be4:	4608      	mov	r0, r1
   81be6:	4611      	mov	r1, r2
   81be8:	461a      	mov	r2, r3
   81bea:	6025      	str	r5, [r4, #0]
   81bec:	f7fe ff56 	bl	80a9c <_lseek>
   81bf0:	1c43      	adds	r3, r0, #1
   81bf2:	d000      	beq.n	81bf6 <_lseek_r+0x1a>
   81bf4:	bd70      	pop	{r4, r5, r6, pc}
   81bf6:	6823      	ldr	r3, [r4, #0]
   81bf8:	2b00      	cmp	r3, #0
   81bfa:	d0fb      	beq.n	81bf4 <_lseek_r+0x18>
   81bfc:	6033      	str	r3, [r6, #0]
   81bfe:	bd70      	pop	{r4, r5, r6, pc}
   81c00:	20070ae4 	.word	0x20070ae4

00081c04 <_read_r>:
   81c04:	b570      	push	{r4, r5, r6, lr}
   81c06:	4c08      	ldr	r4, [pc, #32]	; (81c28 <_read_r+0x24>)
   81c08:	4606      	mov	r6, r0
   81c0a:	2500      	movs	r5, #0
   81c0c:	4608      	mov	r0, r1
   81c0e:	4611      	mov	r1, r2
   81c10:	461a      	mov	r2, r3
   81c12:	6025      	str	r5, [r4, #0]
   81c14:	f7fe fb2c 	bl	80270 <_read>
   81c18:	1c43      	adds	r3, r0, #1
   81c1a:	d000      	beq.n	81c1e <_read_r+0x1a>
   81c1c:	bd70      	pop	{r4, r5, r6, pc}
   81c1e:	6823      	ldr	r3, [r4, #0]
   81c20:	2b00      	cmp	r3, #0
   81c22:	d0fb      	beq.n	81c1c <_read_r+0x18>
   81c24:	6033      	str	r3, [r6, #0]
   81c26:	bd70      	pop	{r4, r5, r6, pc}
   81c28:	20070ae4 	.word	0x20070ae4
   81c2c:	00000043 	.word	0x00000043

00081c30 <_global_impure_ptr>:
   81c30:	20070138                                8.. 

00081c34 <_init>:
   81c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81c36:	bf00      	nop
   81c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81c3a:	bc08      	pop	{r3}
   81c3c:	469e      	mov	lr, r3
   81c3e:	4770      	bx	lr

00081c40 <__init_array_start>:
   81c40:	00080f19 	.word	0x00080f19

00081c44 <__frame_dummy_init_array_entry>:
   81c44:	00080119                                ....

00081c48 <_fini>:
   81c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81c4a:	bf00      	nop
   81c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81c4e:	bc08      	pop	{r3}
   81c50:	469e      	mov	lr, r3
   81c52:	4770      	bx	lr

00081c54 <__fini_array_start>:
   81c54:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00081c2c 00000000 00000000 00000000     ,...............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <__malloc_av_>:
	...
2007056c:	20070564 20070564 2007056c 2007056c     d.. d.. l.. l.. 
2007057c:	20070574 20070574 2007057c 2007057c     t.. t.. |.. |.. 
2007058c:	20070584 20070584 2007058c 2007058c     ... ... ... ... 
2007059c:	20070594 20070594 2007059c 2007059c     ... ... ... ... 
200705ac:	200705a4 200705a4 200705ac 200705ac     ... ... ... ... 
200705bc:	200705b4 200705b4 200705bc 200705bc     ... ... ... ... 
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 

2007096c <__malloc_trim_threshold>:
2007096c:	00020000                                ....

20070970 <__malloc_sbrk_base>:
20070970:	ffffffff                                ....
