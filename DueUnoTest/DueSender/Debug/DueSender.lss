
DueSender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001470  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000097c  20070000  00081470  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000f4  2007097c  00081dec  0001097c  2**2
                  ALLOC
  3 .stack        00002000  20070a70  00081ee0  0001097c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001097c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000109a5  2**0
                  CONTENTS, READONLY
  6 .debug_info   00006922  00000000  00000000  00010a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001674  00000000  00000000  00017322  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002a09  00000000  00000000  00018996  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005f8  00000000  00000000  0001b39f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000528  00000000  00000000  0001b997  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001631b  00000000  00000000  0001bebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009ada  00000000  00000000  000321da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000622bb  00000000  00000000  0003bcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e20  00000000  00000000  0009df70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a70 	.word	0x20072a70
   80004:	00080829 	.word	0x00080829
   80008:	00080825 	.word	0x00080825
   8000c:	00080825 	.word	0x00080825
   80010:	00080825 	.word	0x00080825
   80014:	00080825 	.word	0x00080825
   80018:	00080825 	.word	0x00080825
	...
   8002c:	00080825 	.word	0x00080825
   80030:	00080825 	.word	0x00080825
   80034:	00000000 	.word	0x00000000
   80038:	00080825 	.word	0x00080825
   8003c:	00080825 	.word	0x00080825
   80040:	00080825 	.word	0x00080825
   80044:	00080825 	.word	0x00080825
   80048:	00080825 	.word	0x00080825
   8004c:	00080825 	.word	0x00080825
   80050:	00080825 	.word	0x00080825
   80054:	00080825 	.word	0x00080825
   80058:	00080825 	.word	0x00080825
   8005c:	00080825 	.word	0x00080825
   80060:	00080825 	.word	0x00080825
   80064:	00080825 	.word	0x00080825
   80068:	00000000 	.word	0x00000000
   8006c:	0008049d 	.word	0x0008049d
   80070:	000804b1 	.word	0x000804b1
   80074:	000804c5 	.word	0x000804c5
   80078:	000804d9 	.word	0x000804d9
	...
   80084:	00080825 	.word	0x00080825
   80088:	00080825 	.word	0x00080825
   8008c:	00080825 	.word	0x00080825
   80090:	00080825 	.word	0x00080825
   80094:	00080825 	.word	0x00080825
   80098:	00080825 	.word	0x00080825
   8009c:	00080825 	.word	0x00080825
   800a0:	00080825 	.word	0x00080825
   800a4:	00000000 	.word	0x00000000
   800a8:	00080825 	.word	0x00080825
   800ac:	00080825 	.word	0x00080825
   800b0:	00080825 	.word	0x00080825
   800b4:	00080825 	.word	0x00080825
   800b8:	00080825 	.word	0x00080825
   800bc:	00080825 	.word	0x00080825
   800c0:	00080825 	.word	0x00080825
   800c4:	00080825 	.word	0x00080825
   800c8:	00080825 	.word	0x00080825
   800cc:	00080825 	.word	0x00080825
   800d0:	00080825 	.word	0x00080825
   800d4:	00080825 	.word	0x00080825
   800d8:	00080825 	.word	0x00080825
   800dc:	00080825 	.word	0x00080825
   800e0:	00080825 	.word	0x00080825
   800e4:	00080825 	.word	0x00080825
   800e8:	00080825 	.word	0x00080825
   800ec:	00080825 	.word	0x00080825
   800f0:	00080825 	.word	0x00080825

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007097c 	.word	0x2007097c
   80110:	00000000 	.word	0x00000000
   80114:	00081470 	.word	0x00081470

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00081470 	.word	0x00081470
   8013c:	20070980 	.word	0x20070980
   80140:	00081470 	.word	0x00081470
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80150:	2000      	movs	r0, #0
   80152:	213e      	movs	r1, #62	; 0x3e
   80154:	4b0d      	ldr	r3, [pc, #52]	; (8018c <sysclk_init+0x44>)
   80156:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80158:	4c0d      	ldr	r4, [pc, #52]	; (80190 <sysclk_init+0x48>)
   8015a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015c:	2800      	cmp	r0, #0
   8015e:	d0fc      	beq.n	8015a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80160:	4b0c      	ldr	r3, [pc, #48]	; (80194 <sysclk_init+0x4c>)
   80162:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80164:	4a0c      	ldr	r2, [pc, #48]	; (80198 <sysclk_init+0x50>)
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80168:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8016a:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016e:	2800      	cmp	r0, #0
   80170:	d0fc      	beq.n	8016c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80172:	2010      	movs	r0, #16
   80174:	4b0b      	ldr	r3, [pc, #44]	; (801a4 <sysclk_init+0x5c>)
   80176:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80178:	4b0b      	ldr	r3, [pc, #44]	; (801a8 <sysclk_init+0x60>)
   8017a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017c:	4801      	ldr	r0, [pc, #4]	; (80184 <sysclk_init+0x3c>)
   8017e:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   80180:	4798      	blx	r3
   80182:	bd10      	pop	{r4, pc}
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700b1 	.word	0x200700b1
   8018c:	00080551 	.word	0x00080551
   80190:	000805a5 	.word	0x000805a5
   80194:	000805b5 	.word	0x000805b5
   80198:	200d3f01 	.word	0x200d3f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	000805c5 	.word	0x000805c5
   801a4:	000804ed 	.word	0x000804ed
   801a8:	000808d9 	.word	0x000808d9

000801ac <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   801ac:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   801ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   801b2:	4b13      	ldr	r3, [pc, #76]	; (80200 <board_init+0x54>)
   801b4:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   801b6:	200b      	movs	r0, #11
   801b8:	4c12      	ldr	r4, [pc, #72]	; (80204 <board_init+0x58>)
   801ba:	47a0      	blx	r4
   801bc:	200c      	movs	r0, #12
   801be:	47a0      	blx	r4
   801c0:	200d      	movs	r0, #13
   801c2:	47a0      	blx	r4
   801c4:	200e      	movs	r0, #14
   801c6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   801c8:	203b      	movs	r0, #59	; 0x3b
   801ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   801ce:	4c0e      	ldr	r4, [pc, #56]	; (80208 <board_init+0x5c>)
   801d0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   801d2:	2055      	movs	r0, #85	; 0x55
   801d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   801d8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   801da:	2056      	movs	r0, #86	; 0x56
   801dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   801e0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   801e2:	2068      	movs	r0, #104	; 0x68
   801e4:	4909      	ldr	r1, [pc, #36]	; (8020c <board_init+0x60>)
   801e6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   801e8:	205c      	movs	r0, #92	; 0x5c
   801ea:	4909      	ldr	r1, [pc, #36]	; (80210 <board_init+0x64>)
   801ec:	47a0      	blx	r4
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   801ee:	2011      	movs	r0, #17
   801f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   801f4:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   801f6:	2012      	movs	r0, #18
   801f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   801fc:	47a0      	blx	r4
   801fe:	bd10      	pop	{r4, pc}
   80200:	400e1a50 	.word	0x400e1a50
   80204:	000805d5 	.word	0x000805d5
   80208:	00080371 	.word	0x00080371
   8020c:	28000079 	.word	0x28000079
   80210:	28000001 	.word	0x28000001

00080214 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   80214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80218:	4606      	mov	r6, r0
   8021a:	2400      	movs	r4, #0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   8021c:	4d0a      	ldr	r5, [pc, #40]	; (80248 <LED_Off+0x34>)
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   8021e:	4f0b      	ldr	r7, [pc, #44]	; (8024c <LED_Off+0x38>)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   80220:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80250 <LED_Off+0x3c>
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   80224:	5963      	ldr	r3, [r4, r5]
   80226:	42b3      	cmp	r3, r6
   80228:	d108      	bne.n	8023c <LED_Off+0x28>
   8022a:	192b      	adds	r3, r5, r4
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   8022c:	685b      	ldr	r3, [r3, #4]
   8022e:	2b01      	cmp	r3, #1
   80230:	d102      	bne.n	80238 <LED_Off+0x24>
				gpio_set_pin_low(led_gpio);
   80232:	4630      	mov	r0, r6
   80234:	47c0      	blx	r8
   80236:	e001      	b.n	8023c <LED_Off+0x28>
			} else {
				gpio_set_pin_high(led_gpio);
   80238:	4630      	mov	r0, r6
   8023a:	47b8      	blx	r7
   8023c:	3408      	adds	r4, #8
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8023e:	2c20      	cmp	r4, #32
   80240:	d1f0      	bne.n	80224 <LED_Off+0x10>
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   80242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80246:	bf00      	nop
   80248:	00081420 	.word	0x00081420
   8024c:	00080339 	.word	0x00080339
   80250:	00080355 	.word	0x00080355

00080254 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   80254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80258:	4606      	mov	r6, r0
   8025a:	2400      	movs	r4, #0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   8025c:	4d0a      	ldr	r5, [pc, #40]	; (80288 <LED_On+0x34>)
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   8025e:	4f0b      	ldr	r7, [pc, #44]	; (8028c <LED_On+0x38>)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   80260:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80290 <LED_On+0x3c>
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   80264:	5963      	ldr	r3, [r4, r5]
   80266:	42b3      	cmp	r3, r6
   80268:	d108      	bne.n	8027c <LED_On+0x28>
   8026a:	192b      	adds	r3, r5, r4
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   8026c:	685b      	ldr	r3, [r3, #4]
   8026e:	2b01      	cmp	r3, #1
   80270:	d102      	bne.n	80278 <LED_On+0x24>
				gpio_set_pin_high(led_gpio);
   80272:	4630      	mov	r0, r6
   80274:	47c0      	blx	r8
   80276:	e001      	b.n	8027c <LED_On+0x28>
			} else {
				gpio_set_pin_low(led_gpio);
   80278:	4630      	mov	r0, r6
   8027a:	47b8      	blx	r7
   8027c:	3408      	adds	r4, #8
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8027e:	2c20      	cmp	r4, #32
   80280:	d1f0      	bne.n	80264 <LED_On+0x10>
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   80282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80286:	bf00      	nop
   80288:	00081420 	.word	0x00081420
   8028c:	00080355 	.word	0x00080355
   80290:	00080339 	.word	0x00080339

00080294 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80294:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80296:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8029a:	d016      	beq.n	802ca <pio_set_peripheral+0x36>
   8029c:	d804      	bhi.n	802a8 <pio_set_peripheral+0x14>
   8029e:	b1c1      	cbz	r1, 802d2 <pio_set_peripheral+0x3e>
   802a0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   802a4:	d00a      	beq.n	802bc <pio_set_peripheral+0x28>
   802a6:	e013      	b.n	802d0 <pio_set_peripheral+0x3c>
   802a8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   802ac:	d011      	beq.n	802d2 <pio_set_peripheral+0x3e>
   802ae:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   802b2:	d00e      	beq.n	802d2 <pio_set_peripheral+0x3e>
   802b4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   802b8:	d10a      	bne.n	802d0 <pio_set_peripheral+0x3c>
   802ba:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   802bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   802be:	6f01      	ldr	r1, [r0, #112]	; 0x70
   802c0:	400b      	ands	r3, r1
   802c2:	ea23 0302 	bic.w	r3, r3, r2
   802c6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   802c8:	e002      	b.n	802d0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   802ca:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   802cc:	4313      	orrs	r3, r2
   802ce:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   802d0:	6042      	str	r2, [r0, #4]
   802d2:	4770      	bx	lr

000802d4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   802d4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802d6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   802da:	bf14      	ite	ne
   802dc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802de:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   802e0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   802e4:	bf14      	ite	ne
   802e6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   802e8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   802ea:	f012 0f02 	tst.w	r2, #2
   802ee:	d002      	beq.n	802f6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   802f0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   802f4:	e004      	b.n	80300 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   802f6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   802fa:	bf18      	it	ne
   802fc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80300:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80302:	6001      	str	r1, [r0, #0]
   80304:	4770      	bx	lr
   80306:	bf00      	nop

00080308 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80308:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8030a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8030c:	9c01      	ldr	r4, [sp, #4]
   8030e:	b10c      	cbz	r4, 80314 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80310:	6641      	str	r1, [r0, #100]	; 0x64
   80312:	e000      	b.n	80316 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80314:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80316:	b10b      	cbz	r3, 8031c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80318:	6501      	str	r1, [r0, #80]	; 0x50
   8031a:	e000      	b.n	8031e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8031c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8031e:	b10a      	cbz	r2, 80324 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80320:	6301      	str	r1, [r0, #48]	; 0x30
   80322:	e000      	b.n	80326 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80324:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80326:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80328:	6001      	str	r1, [r0, #0]
}
   8032a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8032e:	4770      	bx	lr

00080330 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80330:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80332:	4770      	bx	lr

00080334 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80334:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80336:	4770      	bx	lr

00080338 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80338:	0943      	lsrs	r3, r0, #5
   8033a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8033e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80342:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80344:	f000 001f 	and.w	r0, r0, #31
   80348:	2201      	movs	r2, #1
   8034a:	fa02 f000 	lsl.w	r0, r2, r0
   8034e:	6318      	str	r0, [r3, #48]	; 0x30
   80350:	4770      	bx	lr
   80352:	bf00      	nop

00080354 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80354:	0943      	lsrs	r3, r0, #5
   80356:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8035a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8035e:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80360:	f000 001f 	and.w	r0, r0, #31
   80364:	2201      	movs	r2, #1
   80366:	fa02 f000 	lsl.w	r0, r2, r0
   8036a:	6358      	str	r0, [r3, #52]	; 0x34
   8036c:	4770      	bx	lr
   8036e:	bf00      	nop

00080370 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80370:	b570      	push	{r4, r5, r6, lr}
   80372:	b082      	sub	sp, #8
   80374:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80376:	0944      	lsrs	r4, r0, #5
   80378:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   8037c:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80380:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80382:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80386:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8038a:	d030      	beq.n	803ee <pio_configure_pin+0x7e>
   8038c:	d806      	bhi.n	8039c <pio_configure_pin+0x2c>
   8038e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80392:	d00a      	beq.n	803aa <pio_configure_pin+0x3a>
   80394:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80398:	d018      	beq.n	803cc <pio_configure_pin+0x5c>
   8039a:	e049      	b.n	80430 <pio_configure_pin+0xc0>
   8039c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   803a0:	d030      	beq.n	80404 <pio_configure_pin+0x94>
   803a2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   803a6:	d02d      	beq.n	80404 <pio_configure_pin+0x94>
   803a8:	e042      	b.n	80430 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   803aa:	f000 001f 	and.w	r0, r0, #31
   803ae:	2401      	movs	r4, #1
   803b0:	4084      	lsls	r4, r0
   803b2:	4630      	mov	r0, r6
   803b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803b8:	4622      	mov	r2, r4
   803ba:	4b1f      	ldr	r3, [pc, #124]	; (80438 <pio_configure_pin+0xc8>)
   803bc:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803be:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803c2:	bf14      	ite	ne
   803c4:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803c6:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803c8:	2001      	movs	r0, #1
   803ca:	e032      	b.n	80432 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   803cc:	f000 001f 	and.w	r0, r0, #31
   803d0:	2401      	movs	r4, #1
   803d2:	4084      	lsls	r4, r0
   803d4:	4630      	mov	r0, r6
   803d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   803da:	4622      	mov	r2, r4
   803dc:	4b16      	ldr	r3, [pc, #88]	; (80438 <pio_configure_pin+0xc8>)
   803de:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803e0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803e4:	bf14      	ite	ne
   803e6:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803e8:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803ea:	2001      	movs	r0, #1
   803ec:	e021      	b.n	80432 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   803ee:	f000 011f 	and.w	r1, r0, #31
   803f2:	2401      	movs	r4, #1
   803f4:	4630      	mov	r0, r6
   803f6:	fa04 f101 	lsl.w	r1, r4, r1
   803fa:	462a      	mov	r2, r5
   803fc:	4b0f      	ldr	r3, [pc, #60]	; (8043c <pio_configure_pin+0xcc>)
   803fe:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80400:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80402:	e016      	b.n	80432 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80404:	f000 011f 	and.w	r1, r0, #31
   80408:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8040a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8040e:	ea05 0304 	and.w	r3, r5, r4
   80412:	9300      	str	r3, [sp, #0]
   80414:	4630      	mov	r0, r6
   80416:	fa04 f101 	lsl.w	r1, r4, r1
   8041a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8041e:	bf14      	ite	ne
   80420:	2200      	movne	r2, #0
   80422:	2201      	moveq	r2, #1
   80424:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80428:	4d05      	ldr	r5, [pc, #20]	; (80440 <pio_configure_pin+0xd0>)
   8042a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8042c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8042e:	e000      	b.n	80432 <pio_configure_pin+0xc2>

	default:
		return 0;
   80430:	2000      	movs	r0, #0
	}

	return 1;
}
   80432:	b002      	add	sp, #8
   80434:	bd70      	pop	{r4, r5, r6, pc}
   80436:	bf00      	nop
   80438:	00080295 	.word	0x00080295
   8043c:	000802d5 	.word	0x000802d5
   80440:	00080309 	.word	0x00080309

00080444 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80448:	4604      	mov	r4, r0
   8044a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8044c:	4b10      	ldr	r3, [pc, #64]	; (80490 <pio_handler_process+0x4c>)
   8044e:	4798      	blx	r3
   80450:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80452:	4620      	mov	r0, r4
   80454:	4b0f      	ldr	r3, [pc, #60]	; (80494 <pio_handler_process+0x50>)
   80456:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80458:	4005      	ands	r5, r0
   8045a:	d017      	beq.n	8048c <pio_handler_process+0x48>
   8045c:	4f0e      	ldr	r7, [pc, #56]	; (80498 <pio_handler_process+0x54>)
   8045e:	f107 040c 	add.w	r4, r7, #12
   80462:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80464:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80468:	42b3      	cmp	r3, r6
   8046a:	d10a      	bne.n	80482 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8046c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80470:	4229      	tst	r1, r5
   80472:	d006      	beq.n	80482 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80474:	6823      	ldr	r3, [r4, #0]
   80476:	4630      	mov	r0, r6
   80478:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8047a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8047e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80482:	42bc      	cmp	r4, r7
   80484:	d002      	beq.n	8048c <pio_handler_process+0x48>
   80486:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80488:	2d00      	cmp	r5, #0
   8048a:	d1eb      	bne.n	80464 <pio_handler_process+0x20>
   8048c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80490:	00080331 	.word	0x00080331
   80494:	00080335 	.word	0x00080335
   80498:	20070998 	.word	0x20070998

0008049c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8049c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8049e:	4802      	ldr	r0, [pc, #8]	; (804a8 <PIOA_Handler+0xc>)
   804a0:	210b      	movs	r1, #11
   804a2:	4b02      	ldr	r3, [pc, #8]	; (804ac <PIOA_Handler+0x10>)
   804a4:	4798      	blx	r3
   804a6:	bd08      	pop	{r3, pc}
   804a8:	400e0e00 	.word	0x400e0e00
   804ac:	00080445 	.word	0x00080445

000804b0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   804b0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   804b2:	4802      	ldr	r0, [pc, #8]	; (804bc <PIOB_Handler+0xc>)
   804b4:	210c      	movs	r1, #12
   804b6:	4b02      	ldr	r3, [pc, #8]	; (804c0 <PIOB_Handler+0x10>)
   804b8:	4798      	blx	r3
   804ba:	bd08      	pop	{r3, pc}
   804bc:	400e1000 	.word	0x400e1000
   804c0:	00080445 	.word	0x00080445

000804c4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   804c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   804c6:	4802      	ldr	r0, [pc, #8]	; (804d0 <PIOC_Handler+0xc>)
   804c8:	210d      	movs	r1, #13
   804ca:	4b02      	ldr	r3, [pc, #8]	; (804d4 <PIOC_Handler+0x10>)
   804cc:	4798      	blx	r3
   804ce:	bd08      	pop	{r3, pc}
   804d0:	400e1200 	.word	0x400e1200
   804d4:	00080445 	.word	0x00080445

000804d8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   804d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   804da:	4802      	ldr	r0, [pc, #8]	; (804e4 <PIOD_Handler+0xc>)
   804dc:	210e      	movs	r1, #14
   804de:	4b02      	ldr	r3, [pc, #8]	; (804e8 <PIOD_Handler+0x10>)
   804e0:	4798      	blx	r3
   804e2:	bd08      	pop	{r3, pc}
   804e4:	400e1400 	.word	0x400e1400
   804e8:	00080445 	.word	0x00080445

000804ec <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   804ec:	4b17      	ldr	r3, [pc, #92]	; (8054c <pmc_switch_mck_to_pllack+0x60>)
   804ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   804f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   804f4:	4310      	orrs	r0, r2
   804f6:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   804f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804fa:	f013 0f08 	tst.w	r3, #8
   804fe:	d109      	bne.n	80514 <pmc_switch_mck_to_pllack+0x28>
   80500:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80504:	4911      	ldr	r1, [pc, #68]	; (8054c <pmc_switch_mck_to_pllack+0x60>)
   80506:	e001      	b.n	8050c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80508:	3b01      	subs	r3, #1
   8050a:	d019      	beq.n	80540 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8050c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8050e:	f012 0f08 	tst.w	r2, #8
   80512:	d0f9      	beq.n	80508 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80514:	4b0d      	ldr	r3, [pc, #52]	; (8054c <pmc_switch_mck_to_pllack+0x60>)
   80516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80518:	f022 0203 	bic.w	r2, r2, #3
   8051c:	f042 0202 	orr.w	r2, r2, #2
   80520:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80522:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80524:	f010 0008 	ands.w	r0, r0, #8
   80528:	d10c      	bne.n	80544 <pmc_switch_mck_to_pllack+0x58>
   8052a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8052e:	4907      	ldr	r1, [pc, #28]	; (8054c <pmc_switch_mck_to_pllack+0x60>)
   80530:	e001      	b.n	80536 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80532:	3b01      	subs	r3, #1
   80534:	d008      	beq.n	80548 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80536:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80538:	f012 0f08 	tst.w	r2, #8
   8053c:	d0f9      	beq.n	80532 <pmc_switch_mck_to_pllack+0x46>
   8053e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80540:	2001      	movs	r0, #1
   80542:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80544:	2000      	movs	r0, #0
   80546:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80548:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8054a:	4770      	bx	lr
   8054c:	400e0600 	.word	0x400e0600

00080550 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80550:	b138      	cbz	r0, 80562 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80552:	4911      	ldr	r1, [pc, #68]	; (80598 <pmc_switch_mainck_to_xtal+0x48>)
   80554:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80556:	4a11      	ldr	r2, [pc, #68]	; (8059c <pmc_switch_mainck_to_xtal+0x4c>)
   80558:	401a      	ands	r2, r3
   8055a:	4b11      	ldr	r3, [pc, #68]	; (805a0 <pmc_switch_mainck_to_xtal+0x50>)
   8055c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8055e:	620b      	str	r3, [r1, #32]
   80560:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80562:	4a0d      	ldr	r2, [pc, #52]	; (80598 <pmc_switch_mainck_to_xtal+0x48>)
   80564:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80566:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8056a:	f023 0303 	bic.w	r3, r3, #3
   8056e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80572:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80576:	0209      	lsls	r1, r1, #8
   80578:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8057a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8057c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8057e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80580:	f013 0f01 	tst.w	r3, #1
   80584:	d0fb      	beq.n	8057e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80586:	4a04      	ldr	r2, [pc, #16]	; (80598 <pmc_switch_mainck_to_xtal+0x48>)
   80588:	6a13      	ldr	r3, [r2, #32]
   8058a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8058e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80592:	6213      	str	r3, [r2, #32]
   80594:	4770      	bx	lr
   80596:	bf00      	nop
   80598:	400e0600 	.word	0x400e0600
   8059c:	fec8fffc 	.word	0xfec8fffc
   805a0:	01370002 	.word	0x01370002

000805a4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   805a4:	4b02      	ldr	r3, [pc, #8]	; (805b0 <pmc_osc_is_ready_mainck+0xc>)
   805a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   805a8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   805ac:	4770      	bx	lr
   805ae:	bf00      	nop
   805b0:	400e0600 	.word	0x400e0600

000805b4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   805b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   805b8:	4b01      	ldr	r3, [pc, #4]	; (805c0 <pmc_disable_pllack+0xc>)
   805ba:	629a      	str	r2, [r3, #40]	; 0x28
   805bc:	4770      	bx	lr
   805be:	bf00      	nop
   805c0:	400e0600 	.word	0x400e0600

000805c4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   805c4:	4b02      	ldr	r3, [pc, #8]	; (805d0 <pmc_is_locked_pllack+0xc>)
   805c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   805c8:	f000 0002 	and.w	r0, r0, #2
   805cc:	4770      	bx	lr
   805ce:	bf00      	nop
   805d0:	400e0600 	.word	0x400e0600

000805d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   805d4:	282c      	cmp	r0, #44	; 0x2c
   805d6:	d820      	bhi.n	8061a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   805d8:	281f      	cmp	r0, #31
   805da:	d80d      	bhi.n	805f8 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   805dc:	4b12      	ldr	r3, [pc, #72]	; (80628 <pmc_enable_periph_clk+0x54>)
   805de:	699a      	ldr	r2, [r3, #24]
   805e0:	2301      	movs	r3, #1
   805e2:	4083      	lsls	r3, r0
   805e4:	401a      	ands	r2, r3
   805e6:	4293      	cmp	r3, r2
   805e8:	d019      	beq.n	8061e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   805ea:	2301      	movs	r3, #1
   805ec:	fa03 f000 	lsl.w	r0, r3, r0
   805f0:	4b0d      	ldr	r3, [pc, #52]	; (80628 <pmc_enable_periph_clk+0x54>)
   805f2:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   805f4:	2000      	movs	r0, #0
   805f6:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   805f8:	4b0b      	ldr	r3, [pc, #44]	; (80628 <pmc_enable_periph_clk+0x54>)
   805fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   805fe:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80600:	2301      	movs	r3, #1
   80602:	4083      	lsls	r3, r0
   80604:	401a      	ands	r2, r3
   80606:	4293      	cmp	r3, r2
   80608:	d00b      	beq.n	80622 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8060a:	2301      	movs	r3, #1
   8060c:	fa03 f000 	lsl.w	r0, r3, r0
   80610:	4b05      	ldr	r3, [pc, #20]	; (80628 <pmc_enable_periph_clk+0x54>)
   80612:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80616:	2000      	movs	r0, #0
   80618:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8061a:	2001      	movs	r0, #1
   8061c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8061e:	2000      	movs	r0, #0
   80620:	4770      	bx	lr
   80622:	2000      	movs	r0, #0
}
   80624:	4770      	bx	lr
   80626:	bf00      	nop
   80628:	400e0600 	.word	0x400e0600

0008062c <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8062c:	4b0f      	ldr	r3, [pc, #60]	; (8066c <twi_set_speed+0x40>)
   8062e:	4299      	cmp	r1, r3
   80630:	d819      	bhi.n	80666 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80632:	0049      	lsls	r1, r1, #1
   80634:	fbb2 f2f1 	udiv	r2, r2, r1
   80638:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8063a:	2aff      	cmp	r2, #255	; 0xff
   8063c:	d907      	bls.n	8064e <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8063e:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   80640:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   80642:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80644:	2aff      	cmp	r2, #255	; 0xff
   80646:	d903      	bls.n	80650 <twi_set_speed+0x24>
   80648:	2b07      	cmp	r3, #7
   8064a:	d1f9      	bne.n	80640 <twi_set_speed+0x14>
   8064c:	e000      	b.n	80650 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8064e:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80650:	0211      	lsls	r1, r2, #8
   80652:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   80654:	041b      	lsls	r3, r3, #16
   80656:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8065a:	430b      	orrs	r3, r1
   8065c:	b2d2      	uxtb	r2, r2
   8065e:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   80660:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   80662:	2000      	movs	r0, #0
   80664:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   80666:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   80668:	4770      	bx	lr
   8066a:	bf00      	nop
   8066c:	00061a80 	.word	0x00061a80

00080670 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80670:	b538      	push	{r3, r4, r5, lr}
   80672:	4604      	mov	r4, r0
   80674:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80676:	f04f 33ff 	mov.w	r3, #4294967295
   8067a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8067c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8067e:	2380      	movs	r3, #128	; 0x80
   80680:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   80682:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80684:	2308      	movs	r3, #8
   80686:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80688:	2320      	movs	r3, #32
   8068a:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   8068c:	2304      	movs	r3, #4
   8068e:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80690:	6849      	ldr	r1, [r1, #4]
   80692:	682a      	ldr	r2, [r5, #0]
   80694:	4b05      	ldr	r3, [pc, #20]	; (806ac <twi_master_init+0x3c>)
   80696:	4798      	blx	r3
   80698:	2801      	cmp	r0, #1
   8069a:	bf14      	ite	ne
   8069c:	2000      	movne	r0, #0
   8069e:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   806a0:	7a6b      	ldrb	r3, [r5, #9]
   806a2:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   806a4:	bf04      	itt	eq
   806a6:	2340      	moveq	r3, #64	; 0x40
   806a8:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   806aa:	bd38      	pop	{r3, r4, r5, pc}
   806ac:	0008062d 	.word	0x0008062d

000806b0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   806b0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   806b4:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   806b6:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   806b8:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   806ba:	2b00      	cmp	r3, #0
   806bc:	d049      	beq.n	80752 <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   806be:	2200      	movs	r2, #0
   806c0:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   806c2:	6848      	ldr	r0, [r1, #4]
   806c4:	0200      	lsls	r0, r0, #8
   806c6:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   806ca:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   806ce:	7c0d      	ldrb	r5, [r1, #16]
   806d0:	042d      	lsls	r5, r5, #16
   806d2:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   806d6:	4328      	orrs	r0, r5
   806d8:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   806da:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   806dc:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   806de:	b15a      	cbz	r2, 806f8 <twi_master_read+0x48>
		return 0;

	val = addr[0];
   806e0:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   806e2:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   806e4:	bfc4      	itt	gt
   806e6:	784d      	ldrbgt	r5, [r1, #1]
   806e8:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   806ec:	2a02      	cmp	r2, #2
   806ee:	dd04      	ble.n	806fa <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   806f0:	788a      	ldrb	r2, [r1, #2]
   806f2:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   806f6:	e000      	b.n	806fa <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   806f8:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   806fa:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   806fc:	2b01      	cmp	r3, #1
   806fe:	d104      	bne.n	8070a <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   80700:	2203      	movs	r2, #3
   80702:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   80704:	f04f 0c01 	mov.w	ip, #1
   80708:	e02b      	b.n	80762 <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   8070a:	2201      	movs	r2, #1
   8070c:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   8070e:	f04f 0c00 	mov.w	ip, #0
   80712:	e026      	b.n	80762 <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80714:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80716:	f411 7f80 	tst.w	r1, #256	; 0x100
   8071a:	d11c      	bne.n	80756 <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   8071c:	1e55      	subs	r5, r2, #1
   8071e:	b1e2      	cbz	r2, 8075a <twi_master_read+0xaa>
   80720:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   80722:	2b01      	cmp	r3, #1
   80724:	d105      	bne.n	80732 <twi_master_read+0x82>
   80726:	f1bc 0f00 	cmp.w	ip, #0
   8072a:	d102      	bne.n	80732 <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   8072c:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   80730:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   80732:	f011 0f02 	tst.w	r1, #2
   80736:	d004      	beq.n	80742 <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   80738:	6b22      	ldr	r2, [r4, #48]	; 0x30
   8073a:	7032      	strb	r2, [r6, #0]

		cnt--;
   8073c:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   8073e:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   80740:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   80742:	2b00      	cmp	r3, #0
   80744:	d1e6      	bne.n	80714 <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80746:	6a23      	ldr	r3, [r4, #32]
   80748:	f013 0f01 	tst.w	r3, #1
   8074c:	d0fb      	beq.n	80746 <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   8074e:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   80750:	e014      	b.n	8077c <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   80752:	2001      	movs	r0, #1
   80754:	e012      	b.n	8077c <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80756:	2005      	movs	r0, #5
   80758:	e010      	b.n	8077c <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   8075a:	2009      	movs	r0, #9
   8075c:	e00e      	b.n	8077c <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8075e:	2005      	movs	r0, #5
   80760:	e00c      	b.n	8077c <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80762:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80764:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   80768:	d1f9      	bne.n	8075e <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   8076a:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   8076e:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   80772:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   80776:	f643 2798 	movw	r7, #15000	; 0x3a98
   8077a:	e7d2      	b.n	80722 <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   8077c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   80780:	4770      	bx	lr
   80782:	bf00      	nop

00080784 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   80784:	b470      	push	{r4, r5, r6}
   80786:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   80788:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   8078a:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   8078c:	2a00      	cmp	r2, #0
   8078e:	d03f      	beq.n	80810 <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80790:	2400      	movs	r4, #0
   80792:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   80794:	7c0e      	ldrb	r6, [r1, #16]
   80796:	0436      	lsls	r6, r6, #16
   80798:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   8079c:	684d      	ldr	r5, [r1, #4]
   8079e:	022d      	lsls	r5, r5, #8
   807a0:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   807a4:	4335      	orrs	r5, r6
   807a6:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   807a8:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   807aa:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   807ac:	b15c      	cbz	r4, 807c6 <twi_master_write+0x42>
		return 0;

	val = addr[0];
   807ae:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   807b0:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   807b2:	bfc4      	itt	gt
   807b4:	784e      	ldrbgt	r6, [r1, #1]
   807b6:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   807ba:	2c02      	cmp	r4, #2
   807bc:	dd04      	ble.n	807c8 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   807be:	7889      	ldrb	r1, [r1, #2]
   807c0:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   807c4:	e000      	b.n	807c8 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   807c6:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   807c8:	60dd      	str	r5, [r3, #12]
   807ca:	e00b      	b.n	807e4 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   807cc:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   807ce:	f411 7f80 	tst.w	r1, #256	; 0x100
   807d2:	d11f      	bne.n	80814 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   807d4:	f011 0f04 	tst.w	r1, #4
   807d8:	d0f8      	beq.n	807cc <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   807da:	f810 1b01 	ldrb.w	r1, [r0], #1
   807de:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   807e0:	3a01      	subs	r2, #1
   807e2:	d007      	beq.n	807f4 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   807e4:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   807e6:	f411 7f80 	tst.w	r1, #256	; 0x100
   807ea:	d115      	bne.n	80818 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   807ec:	f011 0f04 	tst.w	r1, #4
   807f0:	d1f3      	bne.n	807da <twi_master_write+0x56>
   807f2:	e7eb      	b.n	807cc <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   807f4:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   807f6:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   807fa:	d10f      	bne.n	8081c <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   807fc:	f012 0f04 	tst.w	r2, #4
   80800:	d0f8      	beq.n	807f4 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   80802:	2202      	movs	r2, #2
   80804:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80806:	6a1a      	ldr	r2, [r3, #32]
   80808:	f012 0f01 	tst.w	r2, #1
   8080c:	d0fb      	beq.n	80806 <twi_master_write+0x82>
   8080e:	e006      	b.n	8081e <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   80810:	2001      	movs	r0, #1
   80812:	e004      	b.n	8081e <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80814:	2005      	movs	r0, #5
   80816:	e002      	b.n	8081e <twi_master_write+0x9a>
   80818:	2005      	movs	r0, #5
   8081a:	e000      	b.n	8081e <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8081c:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   8081e:	bc70      	pop	{r4, r5, r6}
   80820:	4770      	bx	lr
   80822:	bf00      	nop

00080824 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80824:	e7fe      	b.n	80824 <Dummy_Handler>
   80826:	bf00      	nop

00080828 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80828:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8082a:	4b1e      	ldr	r3, [pc, #120]	; (808a4 <Reset_Handler+0x7c>)
   8082c:	4a1e      	ldr	r2, [pc, #120]	; (808a8 <Reset_Handler+0x80>)
   8082e:	429a      	cmp	r2, r3
   80830:	d003      	beq.n	8083a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80832:	4b1e      	ldr	r3, [pc, #120]	; (808ac <Reset_Handler+0x84>)
   80834:	4a1b      	ldr	r2, [pc, #108]	; (808a4 <Reset_Handler+0x7c>)
   80836:	429a      	cmp	r2, r3
   80838:	d304      	bcc.n	80844 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8083a:	4b1d      	ldr	r3, [pc, #116]	; (808b0 <Reset_Handler+0x88>)
   8083c:	4a1d      	ldr	r2, [pc, #116]	; (808b4 <Reset_Handler+0x8c>)
   8083e:	429a      	cmp	r2, r3
   80840:	d30f      	bcc.n	80862 <Reset_Handler+0x3a>
   80842:	e01a      	b.n	8087a <Reset_Handler+0x52>
   80844:	4b1c      	ldr	r3, [pc, #112]	; (808b8 <Reset_Handler+0x90>)
   80846:	4c1d      	ldr	r4, [pc, #116]	; (808bc <Reset_Handler+0x94>)
   80848:	1ae4      	subs	r4, r4, r3
   8084a:	f024 0403 	bic.w	r4, r4, #3
   8084e:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80850:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80852:	4814      	ldr	r0, [pc, #80]	; (808a4 <Reset_Handler+0x7c>)
   80854:	4914      	ldr	r1, [pc, #80]	; (808a8 <Reset_Handler+0x80>)
   80856:	585a      	ldr	r2, [r3, r1]
   80858:	501a      	str	r2, [r3, r0]
   8085a:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8085c:	42a3      	cmp	r3, r4
   8085e:	d1fa      	bne.n	80856 <Reset_Handler+0x2e>
   80860:	e7eb      	b.n	8083a <Reset_Handler+0x12>
   80862:	4b17      	ldr	r3, [pc, #92]	; (808c0 <Reset_Handler+0x98>)
   80864:	4917      	ldr	r1, [pc, #92]	; (808c4 <Reset_Handler+0x9c>)
   80866:	1ac9      	subs	r1, r1, r3
   80868:	f021 0103 	bic.w	r1, r1, #3
   8086c:	1d1a      	adds	r2, r3, #4
   8086e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80870:	2200      	movs	r2, #0
   80872:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80876:	428b      	cmp	r3, r1
   80878:	d1fb      	bne.n	80872 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8087a:	4a13      	ldr	r2, [pc, #76]	; (808c8 <Reset_Handler+0xa0>)
   8087c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80880:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80884:	4911      	ldr	r1, [pc, #68]	; (808cc <Reset_Handler+0xa4>)
   80886:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80888:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   8088c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80890:	d203      	bcs.n	8089a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80892:	688a      	ldr	r2, [r1, #8]
   80894:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80898:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8089a:	4b0d      	ldr	r3, [pc, #52]	; (808d0 <Reset_Handler+0xa8>)
   8089c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8089e:	4b0d      	ldr	r3, [pc, #52]	; (808d4 <Reset_Handler+0xac>)
   808a0:	4798      	blx	r3
   808a2:	e7fe      	b.n	808a2 <Reset_Handler+0x7a>
   808a4:	20070000 	.word	0x20070000
   808a8:	00081470 	.word	0x00081470
   808ac:	2007097c 	.word	0x2007097c
   808b0:	20070a70 	.word	0x20070a70
   808b4:	2007097c 	.word	0x2007097c
   808b8:	20070004 	.word	0x20070004
   808bc:	2007097f 	.word	0x2007097f
   808c0:	20070978 	.word	0x20070978
   808c4:	20070a6b 	.word	0x20070a6b
   808c8:	00080000 	.word	0x00080000
   808cc:	e000ed00 	.word	0xe000ed00
   808d0:	00080b31 	.word	0x00080b31
   808d4:	00080ac9 	.word	0x00080ac9

000808d8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   808d8:	4b3e      	ldr	r3, [pc, #248]	; (809d4 <SystemCoreClockUpdate+0xfc>)
   808da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808dc:	f003 0303 	and.w	r3, r3, #3
   808e0:	2b03      	cmp	r3, #3
   808e2:	d85f      	bhi.n	809a4 <SystemCoreClockUpdate+0xcc>
   808e4:	e8df f003 	tbb	[pc, r3]
   808e8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   808ec:	4b3a      	ldr	r3, [pc, #232]	; (809d8 <SystemCoreClockUpdate+0x100>)
   808ee:	695b      	ldr	r3, [r3, #20]
   808f0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   808f4:	bf14      	ite	ne
   808f6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   808fa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   808fe:	4b37      	ldr	r3, [pc, #220]	; (809dc <SystemCoreClockUpdate+0x104>)
   80900:	601a      	str	r2, [r3, #0]
   80902:	e04f      	b.n	809a4 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80904:	4b33      	ldr	r3, [pc, #204]	; (809d4 <SystemCoreClockUpdate+0xfc>)
   80906:	6a1b      	ldr	r3, [r3, #32]
   80908:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8090c:	d003      	beq.n	80916 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8090e:	4a34      	ldr	r2, [pc, #208]	; (809e0 <SystemCoreClockUpdate+0x108>)
   80910:	4b32      	ldr	r3, [pc, #200]	; (809dc <SystemCoreClockUpdate+0x104>)
   80912:	601a      	str	r2, [r3, #0]
   80914:	e046      	b.n	809a4 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80916:	4a33      	ldr	r2, [pc, #204]	; (809e4 <SystemCoreClockUpdate+0x10c>)
   80918:	4b30      	ldr	r3, [pc, #192]	; (809dc <SystemCoreClockUpdate+0x104>)
   8091a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8091c:	4b2d      	ldr	r3, [pc, #180]	; (809d4 <SystemCoreClockUpdate+0xfc>)
   8091e:	6a1b      	ldr	r3, [r3, #32]
   80920:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80924:	2b10      	cmp	r3, #16
   80926:	d002      	beq.n	8092e <SystemCoreClockUpdate+0x56>
   80928:	2b20      	cmp	r3, #32
   8092a:	d004      	beq.n	80936 <SystemCoreClockUpdate+0x5e>
   8092c:	e03a      	b.n	809a4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8092e:	4a2e      	ldr	r2, [pc, #184]	; (809e8 <SystemCoreClockUpdate+0x110>)
   80930:	4b2a      	ldr	r3, [pc, #168]	; (809dc <SystemCoreClockUpdate+0x104>)
   80932:	601a      	str	r2, [r3, #0]
				break;
   80934:	e036      	b.n	809a4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80936:	4a2a      	ldr	r2, [pc, #168]	; (809e0 <SystemCoreClockUpdate+0x108>)
   80938:	4b28      	ldr	r3, [pc, #160]	; (809dc <SystemCoreClockUpdate+0x104>)
   8093a:	601a      	str	r2, [r3, #0]
				break;
   8093c:	e032      	b.n	809a4 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8093e:	4b25      	ldr	r3, [pc, #148]	; (809d4 <SystemCoreClockUpdate+0xfc>)
   80940:	6a1b      	ldr	r3, [r3, #32]
   80942:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80946:	d003      	beq.n	80950 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80948:	4a25      	ldr	r2, [pc, #148]	; (809e0 <SystemCoreClockUpdate+0x108>)
   8094a:	4b24      	ldr	r3, [pc, #144]	; (809dc <SystemCoreClockUpdate+0x104>)
   8094c:	601a      	str	r2, [r3, #0]
   8094e:	e012      	b.n	80976 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80950:	4a24      	ldr	r2, [pc, #144]	; (809e4 <SystemCoreClockUpdate+0x10c>)
   80952:	4b22      	ldr	r3, [pc, #136]	; (809dc <SystemCoreClockUpdate+0x104>)
   80954:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80956:	4b1f      	ldr	r3, [pc, #124]	; (809d4 <SystemCoreClockUpdate+0xfc>)
   80958:	6a1b      	ldr	r3, [r3, #32]
   8095a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8095e:	2b10      	cmp	r3, #16
   80960:	d002      	beq.n	80968 <SystemCoreClockUpdate+0x90>
   80962:	2b20      	cmp	r3, #32
   80964:	d004      	beq.n	80970 <SystemCoreClockUpdate+0x98>
   80966:	e006      	b.n	80976 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80968:	4a1f      	ldr	r2, [pc, #124]	; (809e8 <SystemCoreClockUpdate+0x110>)
   8096a:	4b1c      	ldr	r3, [pc, #112]	; (809dc <SystemCoreClockUpdate+0x104>)
   8096c:	601a      	str	r2, [r3, #0]
				break;
   8096e:	e002      	b.n	80976 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80970:	4a1b      	ldr	r2, [pc, #108]	; (809e0 <SystemCoreClockUpdate+0x108>)
   80972:	4b1a      	ldr	r3, [pc, #104]	; (809dc <SystemCoreClockUpdate+0x104>)
   80974:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80976:	4b17      	ldr	r3, [pc, #92]	; (809d4 <SystemCoreClockUpdate+0xfc>)
   80978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8097a:	f003 0303 	and.w	r3, r3, #3
   8097e:	2b02      	cmp	r3, #2
   80980:	d10d      	bne.n	8099e <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80982:	4b14      	ldr	r3, [pc, #80]	; (809d4 <SystemCoreClockUpdate+0xfc>)
   80984:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80986:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80988:	4b14      	ldr	r3, [pc, #80]	; (809dc <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8098a:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8098e:	681a      	ldr	r2, [r3, #0]
   80990:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80994:	b2c9      	uxtb	r1, r1
   80996:	fbb2 f2f1 	udiv	r2, r2, r1
   8099a:	601a      	str	r2, [r3, #0]
   8099c:	e002      	b.n	809a4 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8099e:	4a13      	ldr	r2, [pc, #76]	; (809ec <SystemCoreClockUpdate+0x114>)
   809a0:	4b0e      	ldr	r3, [pc, #56]	; (809dc <SystemCoreClockUpdate+0x104>)
   809a2:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   809a4:	4b0b      	ldr	r3, [pc, #44]	; (809d4 <SystemCoreClockUpdate+0xfc>)
   809a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   809ac:	2b70      	cmp	r3, #112	; 0x70
   809ae:	d107      	bne.n	809c0 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   809b0:	4b0a      	ldr	r3, [pc, #40]	; (809dc <SystemCoreClockUpdate+0x104>)
   809b2:	681a      	ldr	r2, [r3, #0]
   809b4:	490e      	ldr	r1, [pc, #56]	; (809f0 <SystemCoreClockUpdate+0x118>)
   809b6:	fba1 0202 	umull	r0, r2, r1, r2
   809ba:	0852      	lsrs	r2, r2, #1
   809bc:	601a      	str	r2, [r3, #0]
   809be:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   809c0:	4b04      	ldr	r3, [pc, #16]	; (809d4 <SystemCoreClockUpdate+0xfc>)
   809c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   809c4:	4b05      	ldr	r3, [pc, #20]	; (809dc <SystemCoreClockUpdate+0x104>)
   809c6:	f3c1 1102 	ubfx	r1, r1, #4, #3
   809ca:	681a      	ldr	r2, [r3, #0]
   809cc:	40ca      	lsrs	r2, r1
   809ce:	601a      	str	r2, [r3, #0]
   809d0:	4770      	bx	lr
   809d2:	bf00      	nop
   809d4:	400e0600 	.word	0x400e0600
   809d8:	400e1a10 	.word	0x400e1a10
   809dc:	20070138 	.word	0x20070138
   809e0:	00b71b00 	.word	0x00b71b00
   809e4:	003d0900 	.word	0x003d0900
   809e8:	007a1200 	.word	0x007a1200
   809ec:	0e4e1c00 	.word	0x0e4e1c00
   809f0:	aaaaaaab 	.word	0xaaaaaaab

000809f4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   809f4:	4b09      	ldr	r3, [pc, #36]	; (80a1c <_sbrk+0x28>)
   809f6:	681b      	ldr	r3, [r3, #0]
   809f8:	b913      	cbnz	r3, 80a00 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   809fa:	4a09      	ldr	r2, [pc, #36]	; (80a20 <_sbrk+0x2c>)
   809fc:	4b07      	ldr	r3, [pc, #28]	; (80a1c <_sbrk+0x28>)
   809fe:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80a00:	4b06      	ldr	r3, [pc, #24]	; (80a1c <_sbrk+0x28>)
   80a02:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80a04:	181a      	adds	r2, r3, r0
   80a06:	4907      	ldr	r1, [pc, #28]	; (80a24 <_sbrk+0x30>)
   80a08:	4291      	cmp	r1, r2
   80a0a:	db04      	blt.n	80a16 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80a0c:	4610      	mov	r0, r2
   80a0e:	4a03      	ldr	r2, [pc, #12]	; (80a1c <_sbrk+0x28>)
   80a10:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80a12:	4618      	mov	r0, r3
   80a14:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80a16:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80a1a:	4770      	bx	lr
   80a1c:	20070a08 	.word	0x20070a08
   80a20:	20072a70 	.word	0x20072a70
   80a24:	20087ffc 	.word	0x20087ffc

00080a28 <configure_twi>:
	
	while(1);
}

void configure_twi()
{
   80a28:	b510      	push	{r4, lr}
   80a2a:	b084      	sub	sp, #16
	/* Initializes TWI master options */
	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   80a2c:	f24c 3350 	movw	r3, #50000	; 0xc350
   80a30:	9302      	str	r3, [sp, #8]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   80a32:	4b10      	ldr	r3, [pc, #64]	; (80a74 <configure_twi+0x4c>)
   80a34:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   80a36:	2400      	movs	r4, #0
   80a38:	f88d 400d 	strb.w	r4, [sp, #13]
   80a3c:	2016      	movs	r0, #22
   80a3e:	4b0e      	ldr	r3, [pc, #56]	; (80a78 <configure_twi+0x50>)
   80a40:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80a42:	480e      	ldr	r0, [pc, #56]	; (80a7c <configure_twi+0x54>)
   80a44:	a901      	add	r1, sp, #4
   80a46:	4b0e      	ldr	r3, [pc, #56]	; (80a80 <configure_twi+0x58>)
   80a48:	4798      	blx	r3

	/* Initializes the TWI master driver */
	twi_master_setup(TWI0, &opt);
	
	/* Configures packet to be transmitted */
	tx_packet.addr[0] = 0;							// TWI slave memory address data MSB
   80a4a:	4b0e      	ldr	r3, [pc, #56]	; (80a84 <configure_twi+0x5c>)
   80a4c:	701c      	strb	r4, [r3, #0]
	tx_packet.addr[1] = 0;							// TWI slave memory address data LSB
   80a4e:	705c      	strb	r4, [r3, #1]
	tx_packet.addr_length = 0;						// TWI slave memory address data size
   80a50:	605c      	str	r4, [r3, #4]
	tx_packet.chip = UNO_BUS_ADDR;					// TWI slave bus address
   80a52:	2150      	movs	r1, #80	; 0x50
   80a54:	7419      	strb	r1, [r3, #16]
	tx_packet.buffer = (void*) tx_buffer;			// transfer data source buffer
   80a56:	4a0c      	ldr	r2, [pc, #48]	; (80a88 <configure_twi+0x60>)
   80a58:	609a      	str	r2, [r3, #8]
	tx_packet.length = DATA_LENGTH;					// transfer data size (bytes)
   80a5a:	2202      	movs	r2, #2
   80a5c:	60da      	str	r2, [r3, #12]

	/* Configures packet to be received */
	rx_packet.addr[0] = 0;							// TWI slave memory address data MSB
   80a5e:	4b0b      	ldr	r3, [pc, #44]	; (80a8c <configure_twi+0x64>)
   80a60:	701c      	strb	r4, [r3, #0]
	rx_packet.addr[1] = 0;							// TWI slave memory address data LSB
   80a62:	705c      	strb	r4, [r3, #1]
	rx_packet.addr_length = 0;						// TWI slave memory address data size
   80a64:	605c      	str	r4, [r3, #4]
	rx_packet.chip = UNO_BUS_ADDR;					// TWI slave bus address
   80a66:	7419      	strb	r1, [r3, #16]
	rx_packet.buffer = (void*) rx_buffer;		// transfer data destination buffer
   80a68:	4909      	ldr	r1, [pc, #36]	; (80a90 <configure_twi+0x68>)
   80a6a:	6099      	str	r1, [r3, #8]
	rx_packet.length = DATA_LENGTH;					// transfer data size (bytes)
   80a6c:	60da      	str	r2, [r3, #12]
}
   80a6e:	b004      	add	sp, #16
   80a70:	bd10      	pop	{r4, pc}
   80a72:	bf00      	nop
   80a74:	0501bd00 	.word	0x0501bd00
   80a78:	000805d5 	.word	0x000805d5
   80a7c:	4008c000 	.word	0x4008c000
   80a80:	00080671 	.word	0x00080671
   80a84:	20070a10 	.word	0x20070a10
   80a88:	00081440 	.word	0x00081440
   80a8c:	20070a24 	.word	0x20070a24
   80a90:	20070a0c 	.word	0x20070a0c

00080a94 <indicate>:

/* Signals the user via the on-board LED (marked L) */
void indicate()
{
   80a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80a96:	240a      	movs	r4, #10
	for (int i = 0; i < 10; i++)
	{
		LED_On(LED0_GPIO);
   80a98:	4f07      	ldr	r7, [pc, #28]	; (80ab8 <indicate+0x24>)
		delay_ms(100);
   80a9a:	4e08      	ldr	r6, [pc, #32]	; (80abc <indicate+0x28>)
   80a9c:	4d08      	ldr	r5, [pc, #32]	; (80ac0 <indicate+0x2c>)
/* Signals the user via the on-board LED (marked L) */
void indicate()
{
	for (int i = 0; i < 10; i++)
	{
		LED_On(LED0_GPIO);
   80a9e:	203b      	movs	r0, #59	; 0x3b
   80aa0:	47b8      	blx	r7
		delay_ms(100);
   80aa2:	4630      	mov	r0, r6
   80aa4:	47a8      	blx	r5
		LED_Off(LED0_GPIO);
   80aa6:	203b      	movs	r0, #59	; 0x3b
   80aa8:	4b06      	ldr	r3, [pc, #24]	; (80ac4 <indicate+0x30>)
   80aaa:	4798      	blx	r3
		delay_ms(100);
   80aac:	4630      	mov	r0, r6
   80aae:	47a8      	blx	r5
}

/* Signals the user via the on-board LED (marked L) */
void indicate()
{
	for (int i = 0; i < 10; i++)
   80ab0:	3c01      	subs	r4, #1
   80ab2:	d1f4      	bne.n	80a9e <indicate+0xa>
		LED_On(LED0_GPIO);
		delay_ms(100);
		LED_Off(LED0_GPIO);
		delay_ms(100);
	}
   80ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ab6:	bf00      	nop
   80ab8:	00080255 	.word	0x00080255
   80abc:	000927c0 	.word	0x000927c0
   80ac0:	20070001 	.word	0x20070001
   80ac4:	00080215 	.word	0x00080215

00080ac8 <main>:

static twi_package_t tx_packet;
static twi_package_t rx_packet;

int main(void)
{
   80ac8:	b508      	push	{r3, lr}
	sysclk_init();
   80aca:	4b10      	ldr	r3, [pc, #64]	; (80b0c <main+0x44>)
   80acc:	4798      	blx	r3
	board_init();
   80ace:	4b10      	ldr	r3, [pc, #64]	; (80b10 <main+0x48>)
   80ad0:	4798      	blx	r3

	configure_twi();
   80ad2:	4b10      	ldr	r3, [pc, #64]	; (80b14 <main+0x4c>)
   80ad4:	4798      	blx	r3
	// indicate();
	
	// Performs a multi-byte write access then check the result.
	while (twi_master_write(TWI0, &tx_packet) != TWI_SUCCESS);
   80ad6:	4e10      	ldr	r6, [pc, #64]	; (80b18 <main+0x50>)
   80ad8:	4d10      	ldr	r5, [pc, #64]	; (80b1c <main+0x54>)
   80ada:	4c11      	ldr	r4, [pc, #68]	; (80b20 <main+0x58>)
   80adc:	4630      	mov	r0, r6
   80ade:	4629      	mov	r1, r5
   80ae0:	47a0      	blx	r4
   80ae2:	2800      	cmp	r0, #0
   80ae4:	d1fa      	bne.n	80adc <main+0x14>
	// indicate();
	
	// Performs a multi-byte read access then check the result.
	while (twi_master_read(TWI0, &rx_packet) != TWI_SUCCESS);
   80ae6:	4e0c      	ldr	r6, [pc, #48]	; (80b18 <main+0x50>)
   80ae8:	4d0e      	ldr	r5, [pc, #56]	; (80b24 <main+0x5c>)
   80aea:	4c0f      	ldr	r4, [pc, #60]	; (80b28 <main+0x60>)
   80aec:	4630      	mov	r0, r6
   80aee:	4629      	mov	r1, r5
   80af0:	47a0      	blx	r4
   80af2:	2800      	cmp	r0, #0
   80af4:	d1fa      	bne.n	80aec <main+0x24>
	/*if (rx_buffer[0] == 0)
	{
	indicate();
	}*/
	
	while (twi_master_write(TWI0, &rx_packet) != TWI_SUCCESS);
   80af6:	4e08      	ldr	r6, [pc, #32]	; (80b18 <main+0x50>)
   80af8:	4d0a      	ldr	r5, [pc, #40]	; (80b24 <main+0x5c>)
   80afa:	4c09      	ldr	r4, [pc, #36]	; (80b20 <main+0x58>)
   80afc:	4630      	mov	r0, r6
   80afe:	4629      	mov	r1, r5
   80b00:	47a0      	blx	r4
   80b02:	2800      	cmp	r0, #0
   80b04:	d1fa      	bne.n	80afc <main+0x34>
	indicate();
   80b06:	4b09      	ldr	r3, [pc, #36]	; (80b2c <main+0x64>)
   80b08:	4798      	blx	r3
   80b0a:	e7fe      	b.n	80b0a <main+0x42>
   80b0c:	00080149 	.word	0x00080149
   80b10:	000801ad 	.word	0x000801ad
   80b14:	00080a29 	.word	0x00080a29
   80b18:	4008c000 	.word	0x4008c000
   80b1c:	20070a10 	.word	0x20070a10
   80b20:	00080785 	.word	0x00080785
   80b24:	20070a24 	.word	0x20070a24
   80b28:	000806b1 	.word	0x000806b1
   80b2c:	00080a95 	.word	0x00080a95

00080b30 <__libc_init_array>:
   80b30:	b570      	push	{r4, r5, r6, lr}
   80b32:	4e0f      	ldr	r6, [pc, #60]	; (80b70 <__libc_init_array+0x40>)
   80b34:	4d0f      	ldr	r5, [pc, #60]	; (80b74 <__libc_init_array+0x44>)
   80b36:	1b76      	subs	r6, r6, r5
   80b38:	10b6      	asrs	r6, r6, #2
   80b3a:	d007      	beq.n	80b4c <__libc_init_array+0x1c>
   80b3c:	3d04      	subs	r5, #4
   80b3e:	2400      	movs	r4, #0
   80b40:	3401      	adds	r4, #1
   80b42:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80b46:	4798      	blx	r3
   80b48:	42a6      	cmp	r6, r4
   80b4a:	d1f9      	bne.n	80b40 <__libc_init_array+0x10>
   80b4c:	4e0a      	ldr	r6, [pc, #40]	; (80b78 <__libc_init_array+0x48>)
   80b4e:	4d0b      	ldr	r5, [pc, #44]	; (80b7c <__libc_init_array+0x4c>)
   80b50:	f000 fc7c 	bl	8144c <_init>
   80b54:	1b76      	subs	r6, r6, r5
   80b56:	10b6      	asrs	r6, r6, #2
   80b58:	d008      	beq.n	80b6c <__libc_init_array+0x3c>
   80b5a:	3d04      	subs	r5, #4
   80b5c:	2400      	movs	r4, #0
   80b5e:	3401      	adds	r4, #1
   80b60:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80b64:	4798      	blx	r3
   80b66:	42a6      	cmp	r6, r4
   80b68:	d1f9      	bne.n	80b5e <__libc_init_array+0x2e>
   80b6a:	bd70      	pop	{r4, r5, r6, pc}
   80b6c:	bd70      	pop	{r4, r5, r6, pc}
   80b6e:	bf00      	nop
   80b70:	00081458 	.word	0x00081458
   80b74:	00081458 	.word	0x00081458
   80b78:	00081460 	.word	0x00081460
   80b7c:	00081458 	.word	0x00081458

00080b80 <register_fini>:
   80b80:	4b02      	ldr	r3, [pc, #8]	; (80b8c <register_fini+0xc>)
   80b82:	b113      	cbz	r3, 80b8a <register_fini+0xa>
   80b84:	4802      	ldr	r0, [pc, #8]	; (80b90 <register_fini+0x10>)
   80b86:	f000 b805 	b.w	80b94 <atexit>
   80b8a:	4770      	bx	lr
   80b8c:	00000000 	.word	0x00000000
   80b90:	00080ba1 	.word	0x00080ba1

00080b94 <atexit>:
   80b94:	4601      	mov	r1, r0
   80b96:	2000      	movs	r0, #0
   80b98:	4602      	mov	r2, r0
   80b9a:	4603      	mov	r3, r0
   80b9c:	f000 bbec 	b.w	81378 <__register_exitproc>

00080ba0 <__libc_fini_array>:
   80ba0:	b538      	push	{r3, r4, r5, lr}
   80ba2:	4d09      	ldr	r5, [pc, #36]	; (80bc8 <__libc_fini_array+0x28>)
   80ba4:	4c09      	ldr	r4, [pc, #36]	; (80bcc <__libc_fini_array+0x2c>)
   80ba6:	1b64      	subs	r4, r4, r5
   80ba8:	10a4      	asrs	r4, r4, #2
   80baa:	bf18      	it	ne
   80bac:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   80bb0:	d005      	beq.n	80bbe <__libc_fini_array+0x1e>
   80bb2:	3c01      	subs	r4, #1
   80bb4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80bb8:	4798      	blx	r3
   80bba:	2c00      	cmp	r4, #0
   80bbc:	d1f9      	bne.n	80bb2 <__libc_fini_array+0x12>
   80bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80bc2:	f000 bc4d 	b.w	81460 <_fini>
   80bc6:	bf00      	nop
   80bc8:	0008146c 	.word	0x0008146c
   80bcc:	00081470 	.word	0x00081470

00080bd0 <_malloc_trim_r>:
   80bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80bd2:	4d23      	ldr	r5, [pc, #140]	; (80c60 <_malloc_trim_r+0x90>)
   80bd4:	460f      	mov	r7, r1
   80bd6:	4604      	mov	r4, r0
   80bd8:	f000 fbb8 	bl	8134c <__malloc_lock>
   80bdc:	68ab      	ldr	r3, [r5, #8]
   80bde:	685e      	ldr	r6, [r3, #4]
   80be0:	f026 0603 	bic.w	r6, r6, #3
   80be4:	1bf1      	subs	r1, r6, r7
   80be6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   80bea:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   80bee:	f021 010f 	bic.w	r1, r1, #15
   80bf2:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   80bf6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   80bfa:	db07      	blt.n	80c0c <_malloc_trim_r+0x3c>
   80bfc:	4620      	mov	r0, r4
   80bfe:	2100      	movs	r1, #0
   80c00:	f000 fba8 	bl	81354 <_sbrk_r>
   80c04:	68ab      	ldr	r3, [r5, #8]
   80c06:	4433      	add	r3, r6
   80c08:	4298      	cmp	r0, r3
   80c0a:	d004      	beq.n	80c16 <_malloc_trim_r+0x46>
   80c0c:	4620      	mov	r0, r4
   80c0e:	f000 fb9f 	bl	81350 <__malloc_unlock>
   80c12:	2000      	movs	r0, #0
   80c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c16:	4620      	mov	r0, r4
   80c18:	4279      	negs	r1, r7
   80c1a:	f000 fb9b 	bl	81354 <_sbrk_r>
   80c1e:	3001      	adds	r0, #1
   80c20:	d00d      	beq.n	80c3e <_malloc_trim_r+0x6e>
   80c22:	4b10      	ldr	r3, [pc, #64]	; (80c64 <_malloc_trim_r+0x94>)
   80c24:	68aa      	ldr	r2, [r5, #8]
   80c26:	6819      	ldr	r1, [r3, #0]
   80c28:	1bf6      	subs	r6, r6, r7
   80c2a:	f046 0601 	orr.w	r6, r6, #1
   80c2e:	4620      	mov	r0, r4
   80c30:	1bc9      	subs	r1, r1, r7
   80c32:	6056      	str	r6, [r2, #4]
   80c34:	6019      	str	r1, [r3, #0]
   80c36:	f000 fb8b 	bl	81350 <__malloc_unlock>
   80c3a:	2001      	movs	r0, #1
   80c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c3e:	4620      	mov	r0, r4
   80c40:	2100      	movs	r1, #0
   80c42:	f000 fb87 	bl	81354 <_sbrk_r>
   80c46:	68ab      	ldr	r3, [r5, #8]
   80c48:	1ac2      	subs	r2, r0, r3
   80c4a:	2a0f      	cmp	r2, #15
   80c4c:	ddde      	ble.n	80c0c <_malloc_trim_r+0x3c>
   80c4e:	4d06      	ldr	r5, [pc, #24]	; (80c68 <_malloc_trim_r+0x98>)
   80c50:	4904      	ldr	r1, [pc, #16]	; (80c64 <_malloc_trim_r+0x94>)
   80c52:	682d      	ldr	r5, [r5, #0]
   80c54:	f042 0201 	orr.w	r2, r2, #1
   80c58:	1b40      	subs	r0, r0, r5
   80c5a:	605a      	str	r2, [r3, #4]
   80c5c:	6008      	str	r0, [r1, #0]
   80c5e:	e7d5      	b.n	80c0c <_malloc_trim_r+0x3c>
   80c60:	2007056c 	.word	0x2007056c
   80c64:	20070a44 	.word	0x20070a44
   80c68:	20070978 	.word	0x20070978

00080c6c <_free_r>:
   80c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80c70:	460d      	mov	r5, r1
   80c72:	4606      	mov	r6, r0
   80c74:	2900      	cmp	r1, #0
   80c76:	d055      	beq.n	80d24 <_free_r+0xb8>
   80c78:	f000 fb68 	bl	8134c <__malloc_lock>
   80c7c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   80c80:	f8df c170 	ldr.w	ip, [pc, #368]	; 80df4 <_free_r+0x188>
   80c84:	f1a5 0408 	sub.w	r4, r5, #8
   80c88:	f021 0301 	bic.w	r3, r1, #1
   80c8c:	18e2      	adds	r2, r4, r3
   80c8e:	f8dc 0008 	ldr.w	r0, [ip, #8]
   80c92:	6857      	ldr	r7, [r2, #4]
   80c94:	4290      	cmp	r0, r2
   80c96:	f027 0703 	bic.w	r7, r7, #3
   80c9a:	d068      	beq.n	80d6e <_free_r+0x102>
   80c9c:	f011 0101 	ands.w	r1, r1, #1
   80ca0:	6057      	str	r7, [r2, #4]
   80ca2:	d032      	beq.n	80d0a <_free_r+0x9e>
   80ca4:	2100      	movs	r1, #0
   80ca6:	19d0      	adds	r0, r2, r7
   80ca8:	6840      	ldr	r0, [r0, #4]
   80caa:	07c0      	lsls	r0, r0, #31
   80cac:	d406      	bmi.n	80cbc <_free_r+0x50>
   80cae:	443b      	add	r3, r7
   80cb0:	6890      	ldr	r0, [r2, #8]
   80cb2:	2900      	cmp	r1, #0
   80cb4:	d04d      	beq.n	80d52 <_free_r+0xe6>
   80cb6:	68d2      	ldr	r2, [r2, #12]
   80cb8:	60c2      	str	r2, [r0, #12]
   80cba:	6090      	str	r0, [r2, #8]
   80cbc:	f043 0201 	orr.w	r2, r3, #1
   80cc0:	6062      	str	r2, [r4, #4]
   80cc2:	50e3      	str	r3, [r4, r3]
   80cc4:	b9e1      	cbnz	r1, 80d00 <_free_r+0x94>
   80cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80cca:	d32d      	bcc.n	80d28 <_free_r+0xbc>
   80ccc:	0a5a      	lsrs	r2, r3, #9
   80cce:	2a04      	cmp	r2, #4
   80cd0:	d869      	bhi.n	80da6 <_free_r+0x13a>
   80cd2:	0998      	lsrs	r0, r3, #6
   80cd4:	3038      	adds	r0, #56	; 0x38
   80cd6:	0041      	lsls	r1, r0, #1
   80cd8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   80cdc:	f8dc 2008 	ldr.w	r2, [ip, #8]
   80ce0:	4944      	ldr	r1, [pc, #272]	; (80df4 <_free_r+0x188>)
   80ce2:	4562      	cmp	r2, ip
   80ce4:	d065      	beq.n	80db2 <_free_r+0x146>
   80ce6:	6851      	ldr	r1, [r2, #4]
   80ce8:	f021 0103 	bic.w	r1, r1, #3
   80cec:	428b      	cmp	r3, r1
   80cee:	d202      	bcs.n	80cf6 <_free_r+0x8a>
   80cf0:	6892      	ldr	r2, [r2, #8]
   80cf2:	4594      	cmp	ip, r2
   80cf4:	d1f7      	bne.n	80ce6 <_free_r+0x7a>
   80cf6:	68d3      	ldr	r3, [r2, #12]
   80cf8:	60e3      	str	r3, [r4, #12]
   80cfa:	60a2      	str	r2, [r4, #8]
   80cfc:	609c      	str	r4, [r3, #8]
   80cfe:	60d4      	str	r4, [r2, #12]
   80d00:	4630      	mov	r0, r6
   80d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   80d06:	f000 bb23 	b.w	81350 <__malloc_unlock>
   80d0a:	f855 5c08 	ldr.w	r5, [r5, #-8]
   80d0e:	f10c 0808 	add.w	r8, ip, #8
   80d12:	1b64      	subs	r4, r4, r5
   80d14:	68a0      	ldr	r0, [r4, #8]
   80d16:	442b      	add	r3, r5
   80d18:	4540      	cmp	r0, r8
   80d1a:	d042      	beq.n	80da2 <_free_r+0x136>
   80d1c:	68e5      	ldr	r5, [r4, #12]
   80d1e:	60c5      	str	r5, [r0, #12]
   80d20:	60a8      	str	r0, [r5, #8]
   80d22:	e7c0      	b.n	80ca6 <_free_r+0x3a>
   80d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d28:	08db      	lsrs	r3, r3, #3
   80d2a:	109a      	asrs	r2, r3, #2
   80d2c:	2001      	movs	r0, #1
   80d2e:	4090      	lsls	r0, r2
   80d30:	f8dc 1004 	ldr.w	r1, [ip, #4]
   80d34:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   80d38:	689a      	ldr	r2, [r3, #8]
   80d3a:	4301      	orrs	r1, r0
   80d3c:	60a2      	str	r2, [r4, #8]
   80d3e:	60e3      	str	r3, [r4, #12]
   80d40:	f8cc 1004 	str.w	r1, [ip, #4]
   80d44:	4630      	mov	r0, r6
   80d46:	609c      	str	r4, [r3, #8]
   80d48:	60d4      	str	r4, [r2, #12]
   80d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   80d4e:	f000 baff 	b.w	81350 <__malloc_unlock>
   80d52:	4d29      	ldr	r5, [pc, #164]	; (80df8 <_free_r+0x18c>)
   80d54:	42a8      	cmp	r0, r5
   80d56:	d1ae      	bne.n	80cb6 <_free_r+0x4a>
   80d58:	f043 0201 	orr.w	r2, r3, #1
   80d5c:	f8cc 4014 	str.w	r4, [ip, #20]
   80d60:	f8cc 4010 	str.w	r4, [ip, #16]
   80d64:	60e0      	str	r0, [r4, #12]
   80d66:	60a0      	str	r0, [r4, #8]
   80d68:	6062      	str	r2, [r4, #4]
   80d6a:	50e3      	str	r3, [r4, r3]
   80d6c:	e7c8      	b.n	80d00 <_free_r+0x94>
   80d6e:	441f      	add	r7, r3
   80d70:	07cb      	lsls	r3, r1, #31
   80d72:	d407      	bmi.n	80d84 <_free_r+0x118>
   80d74:	f855 1c08 	ldr.w	r1, [r5, #-8]
   80d78:	1a64      	subs	r4, r4, r1
   80d7a:	68e3      	ldr	r3, [r4, #12]
   80d7c:	68a2      	ldr	r2, [r4, #8]
   80d7e:	440f      	add	r7, r1
   80d80:	60d3      	str	r3, [r2, #12]
   80d82:	609a      	str	r2, [r3, #8]
   80d84:	4b1d      	ldr	r3, [pc, #116]	; (80dfc <_free_r+0x190>)
   80d86:	f047 0201 	orr.w	r2, r7, #1
   80d8a:	681b      	ldr	r3, [r3, #0]
   80d8c:	6062      	str	r2, [r4, #4]
   80d8e:	429f      	cmp	r7, r3
   80d90:	f8cc 4008 	str.w	r4, [ip, #8]
   80d94:	d3b4      	bcc.n	80d00 <_free_r+0x94>
   80d96:	4b1a      	ldr	r3, [pc, #104]	; (80e00 <_free_r+0x194>)
   80d98:	4630      	mov	r0, r6
   80d9a:	6819      	ldr	r1, [r3, #0]
   80d9c:	f7ff ff18 	bl	80bd0 <_malloc_trim_r>
   80da0:	e7ae      	b.n	80d00 <_free_r+0x94>
   80da2:	2101      	movs	r1, #1
   80da4:	e77f      	b.n	80ca6 <_free_r+0x3a>
   80da6:	2a14      	cmp	r2, #20
   80da8:	d80b      	bhi.n	80dc2 <_free_r+0x156>
   80daa:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   80dae:	0041      	lsls	r1, r0, #1
   80db0:	e792      	b.n	80cd8 <_free_r+0x6c>
   80db2:	1080      	asrs	r0, r0, #2
   80db4:	2501      	movs	r5, #1
   80db6:	4085      	lsls	r5, r0
   80db8:	6848      	ldr	r0, [r1, #4]
   80dba:	4613      	mov	r3, r2
   80dbc:	4328      	orrs	r0, r5
   80dbe:	6048      	str	r0, [r1, #4]
   80dc0:	e79a      	b.n	80cf8 <_free_r+0x8c>
   80dc2:	2a54      	cmp	r2, #84	; 0x54
   80dc4:	d803      	bhi.n	80dce <_free_r+0x162>
   80dc6:	0b18      	lsrs	r0, r3, #12
   80dc8:	306e      	adds	r0, #110	; 0x6e
   80dca:	0041      	lsls	r1, r0, #1
   80dcc:	e784      	b.n	80cd8 <_free_r+0x6c>
   80dce:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   80dd2:	d803      	bhi.n	80ddc <_free_r+0x170>
   80dd4:	0bd8      	lsrs	r0, r3, #15
   80dd6:	3077      	adds	r0, #119	; 0x77
   80dd8:	0041      	lsls	r1, r0, #1
   80dda:	e77d      	b.n	80cd8 <_free_r+0x6c>
   80ddc:	f240 5154 	movw	r1, #1364	; 0x554
   80de0:	428a      	cmp	r2, r1
   80de2:	d803      	bhi.n	80dec <_free_r+0x180>
   80de4:	0c98      	lsrs	r0, r3, #18
   80de6:	307c      	adds	r0, #124	; 0x7c
   80de8:	0041      	lsls	r1, r0, #1
   80dea:	e775      	b.n	80cd8 <_free_r+0x6c>
   80dec:	21fc      	movs	r1, #252	; 0xfc
   80dee:	207e      	movs	r0, #126	; 0x7e
   80df0:	e772      	b.n	80cd8 <_free_r+0x6c>
   80df2:	bf00      	nop
   80df4:	2007056c 	.word	0x2007056c
   80df8:	20070574 	.word	0x20070574
   80dfc:	20070974 	.word	0x20070974
   80e00:	20070a40 	.word	0x20070a40

00080e04 <malloc>:
   80e04:	4b02      	ldr	r3, [pc, #8]	; (80e10 <malloc+0xc>)
   80e06:	4601      	mov	r1, r0
   80e08:	6818      	ldr	r0, [r3, #0]
   80e0a:	f000 b803 	b.w	80e14 <_malloc_r>
   80e0e:	bf00      	nop
   80e10:	20070568 	.word	0x20070568

00080e14 <_malloc_r>:
   80e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e18:	f101 050b 	add.w	r5, r1, #11
   80e1c:	2d16      	cmp	r5, #22
   80e1e:	b083      	sub	sp, #12
   80e20:	4606      	mov	r6, r0
   80e22:	d927      	bls.n	80e74 <_malloc_r+0x60>
   80e24:	f035 0507 	bics.w	r5, r5, #7
   80e28:	d427      	bmi.n	80e7a <_malloc_r+0x66>
   80e2a:	42a9      	cmp	r1, r5
   80e2c:	d825      	bhi.n	80e7a <_malloc_r+0x66>
   80e2e:	4630      	mov	r0, r6
   80e30:	f000 fa8c 	bl	8134c <__malloc_lock>
   80e34:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   80e38:	d226      	bcs.n	80e88 <_malloc_r+0x74>
   80e3a:	4fc1      	ldr	r7, [pc, #772]	; (81140 <_malloc_r+0x32c>)
   80e3c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   80e40:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   80e44:	68dc      	ldr	r4, [r3, #12]
   80e46:	429c      	cmp	r4, r3
   80e48:	f000 81d2 	beq.w	811f0 <_malloc_r+0x3dc>
   80e4c:	6863      	ldr	r3, [r4, #4]
   80e4e:	68e2      	ldr	r2, [r4, #12]
   80e50:	f023 0303 	bic.w	r3, r3, #3
   80e54:	4423      	add	r3, r4
   80e56:	6858      	ldr	r0, [r3, #4]
   80e58:	68a1      	ldr	r1, [r4, #8]
   80e5a:	f040 0501 	orr.w	r5, r0, #1
   80e5e:	60ca      	str	r2, [r1, #12]
   80e60:	4630      	mov	r0, r6
   80e62:	6091      	str	r1, [r2, #8]
   80e64:	605d      	str	r5, [r3, #4]
   80e66:	f000 fa73 	bl	81350 <__malloc_unlock>
   80e6a:	3408      	adds	r4, #8
   80e6c:	4620      	mov	r0, r4
   80e6e:	b003      	add	sp, #12
   80e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e74:	2510      	movs	r5, #16
   80e76:	42a9      	cmp	r1, r5
   80e78:	d9d9      	bls.n	80e2e <_malloc_r+0x1a>
   80e7a:	2400      	movs	r4, #0
   80e7c:	230c      	movs	r3, #12
   80e7e:	4620      	mov	r0, r4
   80e80:	6033      	str	r3, [r6, #0]
   80e82:	b003      	add	sp, #12
   80e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e88:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   80e8c:	f000 8089 	beq.w	80fa2 <_malloc_r+0x18e>
   80e90:	f1bc 0f04 	cmp.w	ip, #4
   80e94:	f200 8160 	bhi.w	81158 <_malloc_r+0x344>
   80e98:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   80e9c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   80ea0:	ea4f 014c 	mov.w	r1, ip, lsl #1
   80ea4:	4fa6      	ldr	r7, [pc, #664]	; (81140 <_malloc_r+0x32c>)
   80ea6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   80eaa:	68cc      	ldr	r4, [r1, #12]
   80eac:	42a1      	cmp	r1, r4
   80eae:	d105      	bne.n	80ebc <_malloc_r+0xa8>
   80eb0:	e00c      	b.n	80ecc <_malloc_r+0xb8>
   80eb2:	2b00      	cmp	r3, #0
   80eb4:	da79      	bge.n	80faa <_malloc_r+0x196>
   80eb6:	68e4      	ldr	r4, [r4, #12]
   80eb8:	42a1      	cmp	r1, r4
   80eba:	d007      	beq.n	80ecc <_malloc_r+0xb8>
   80ebc:	6862      	ldr	r2, [r4, #4]
   80ebe:	f022 0203 	bic.w	r2, r2, #3
   80ec2:	1b53      	subs	r3, r2, r5
   80ec4:	2b0f      	cmp	r3, #15
   80ec6:	ddf4      	ble.n	80eb2 <_malloc_r+0x9e>
   80ec8:	f10c 3cff 	add.w	ip, ip, #4294967295
   80ecc:	f10c 0c01 	add.w	ip, ip, #1
   80ed0:	4b9b      	ldr	r3, [pc, #620]	; (81140 <_malloc_r+0x32c>)
   80ed2:	693c      	ldr	r4, [r7, #16]
   80ed4:	f103 0e08 	add.w	lr, r3, #8
   80ed8:	4574      	cmp	r4, lr
   80eda:	f000 817e 	beq.w	811da <_malloc_r+0x3c6>
   80ede:	6861      	ldr	r1, [r4, #4]
   80ee0:	f021 0103 	bic.w	r1, r1, #3
   80ee4:	1b4a      	subs	r2, r1, r5
   80ee6:	2a0f      	cmp	r2, #15
   80ee8:	f300 8164 	bgt.w	811b4 <_malloc_r+0x3a0>
   80eec:	2a00      	cmp	r2, #0
   80eee:	f8c3 e014 	str.w	lr, [r3, #20]
   80ef2:	f8c3 e010 	str.w	lr, [r3, #16]
   80ef6:	da69      	bge.n	80fcc <_malloc_r+0x1b8>
   80ef8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   80efc:	f080 813a 	bcs.w	81174 <_malloc_r+0x360>
   80f00:	08c9      	lsrs	r1, r1, #3
   80f02:	108a      	asrs	r2, r1, #2
   80f04:	f04f 0801 	mov.w	r8, #1
   80f08:	fa08 f802 	lsl.w	r8, r8, r2
   80f0c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   80f10:	685a      	ldr	r2, [r3, #4]
   80f12:	6888      	ldr	r0, [r1, #8]
   80f14:	ea48 0202 	orr.w	r2, r8, r2
   80f18:	60a0      	str	r0, [r4, #8]
   80f1a:	60e1      	str	r1, [r4, #12]
   80f1c:	605a      	str	r2, [r3, #4]
   80f1e:	608c      	str	r4, [r1, #8]
   80f20:	60c4      	str	r4, [r0, #12]
   80f22:	ea4f 03ac 	mov.w	r3, ip, asr #2
   80f26:	2001      	movs	r0, #1
   80f28:	4098      	lsls	r0, r3
   80f2a:	4290      	cmp	r0, r2
   80f2c:	d85b      	bhi.n	80fe6 <_malloc_r+0x1d2>
   80f2e:	4202      	tst	r2, r0
   80f30:	d106      	bne.n	80f40 <_malloc_r+0x12c>
   80f32:	f02c 0c03 	bic.w	ip, ip, #3
   80f36:	0040      	lsls	r0, r0, #1
   80f38:	4202      	tst	r2, r0
   80f3a:	f10c 0c04 	add.w	ip, ip, #4
   80f3e:	d0fa      	beq.n	80f36 <_malloc_r+0x122>
   80f40:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   80f44:	4644      	mov	r4, r8
   80f46:	46e1      	mov	r9, ip
   80f48:	68e3      	ldr	r3, [r4, #12]
   80f4a:	429c      	cmp	r4, r3
   80f4c:	d107      	bne.n	80f5e <_malloc_r+0x14a>
   80f4e:	e146      	b.n	811de <_malloc_r+0x3ca>
   80f50:	2a00      	cmp	r2, #0
   80f52:	f280 8157 	bge.w	81204 <_malloc_r+0x3f0>
   80f56:	68db      	ldr	r3, [r3, #12]
   80f58:	429c      	cmp	r4, r3
   80f5a:	f000 8140 	beq.w	811de <_malloc_r+0x3ca>
   80f5e:	6859      	ldr	r1, [r3, #4]
   80f60:	f021 0103 	bic.w	r1, r1, #3
   80f64:	1b4a      	subs	r2, r1, r5
   80f66:	2a0f      	cmp	r2, #15
   80f68:	ddf2      	ble.n	80f50 <_malloc_r+0x13c>
   80f6a:	461c      	mov	r4, r3
   80f6c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   80f70:	68d9      	ldr	r1, [r3, #12]
   80f72:	f045 0901 	orr.w	r9, r5, #1
   80f76:	f042 0801 	orr.w	r8, r2, #1
   80f7a:	441d      	add	r5, r3
   80f7c:	f8c3 9004 	str.w	r9, [r3, #4]
   80f80:	4630      	mov	r0, r6
   80f82:	f8cc 100c 	str.w	r1, [ip, #12]
   80f86:	f8c1 c008 	str.w	ip, [r1, #8]
   80f8a:	617d      	str	r5, [r7, #20]
   80f8c:	613d      	str	r5, [r7, #16]
   80f8e:	f8c5 e00c 	str.w	lr, [r5, #12]
   80f92:	f8c5 e008 	str.w	lr, [r5, #8]
   80f96:	f8c5 8004 	str.w	r8, [r5, #4]
   80f9a:	50aa      	str	r2, [r5, r2]
   80f9c:	f000 f9d8 	bl	81350 <__malloc_unlock>
   80fa0:	e764      	b.n	80e6c <_malloc_r+0x58>
   80fa2:	217e      	movs	r1, #126	; 0x7e
   80fa4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   80fa8:	e77c      	b.n	80ea4 <_malloc_r+0x90>
   80faa:	4422      	add	r2, r4
   80fac:	6850      	ldr	r0, [r2, #4]
   80fae:	68e3      	ldr	r3, [r4, #12]
   80fb0:	68a1      	ldr	r1, [r4, #8]
   80fb2:	f040 0501 	orr.w	r5, r0, #1
   80fb6:	60cb      	str	r3, [r1, #12]
   80fb8:	4630      	mov	r0, r6
   80fba:	6099      	str	r1, [r3, #8]
   80fbc:	6055      	str	r5, [r2, #4]
   80fbe:	f000 f9c7 	bl	81350 <__malloc_unlock>
   80fc2:	3408      	adds	r4, #8
   80fc4:	4620      	mov	r0, r4
   80fc6:	b003      	add	sp, #12
   80fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fcc:	4421      	add	r1, r4
   80fce:	684b      	ldr	r3, [r1, #4]
   80fd0:	4630      	mov	r0, r6
   80fd2:	f043 0301 	orr.w	r3, r3, #1
   80fd6:	604b      	str	r3, [r1, #4]
   80fd8:	f000 f9ba 	bl	81350 <__malloc_unlock>
   80fdc:	3408      	adds	r4, #8
   80fde:	4620      	mov	r0, r4
   80fe0:	b003      	add	sp, #12
   80fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fe6:	68bc      	ldr	r4, [r7, #8]
   80fe8:	6863      	ldr	r3, [r4, #4]
   80fea:	f023 0903 	bic.w	r9, r3, #3
   80fee:	45a9      	cmp	r9, r5
   80ff0:	d304      	bcc.n	80ffc <_malloc_r+0x1e8>
   80ff2:	ebc5 0309 	rsb	r3, r5, r9
   80ff6:	2b0f      	cmp	r3, #15
   80ff8:	f300 8091 	bgt.w	8111e <_malloc_r+0x30a>
   80ffc:	4b51      	ldr	r3, [pc, #324]	; (81144 <_malloc_r+0x330>)
   80ffe:	4a52      	ldr	r2, [pc, #328]	; (81148 <_malloc_r+0x334>)
   81000:	6819      	ldr	r1, [r3, #0]
   81002:	6813      	ldr	r3, [r2, #0]
   81004:	eb05 0a01 	add.w	sl, r5, r1
   81008:	3301      	adds	r3, #1
   8100a:	eb04 0b09 	add.w	fp, r4, r9
   8100e:	f000 8161 	beq.w	812d4 <_malloc_r+0x4c0>
   81012:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   81016:	f10a 0a0f 	add.w	sl, sl, #15
   8101a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8101e:	f02a 0a0f 	bic.w	sl, sl, #15
   81022:	4630      	mov	r0, r6
   81024:	4651      	mov	r1, sl
   81026:	9201      	str	r2, [sp, #4]
   81028:	f000 f994 	bl	81354 <_sbrk_r>
   8102c:	f1b0 3fff 	cmp.w	r0, #4294967295
   81030:	4680      	mov	r8, r0
   81032:	9a01      	ldr	r2, [sp, #4]
   81034:	f000 8101 	beq.w	8123a <_malloc_r+0x426>
   81038:	4583      	cmp	fp, r0
   8103a:	f200 80fb 	bhi.w	81234 <_malloc_r+0x420>
   8103e:	f8df c114 	ldr.w	ip, [pc, #276]	; 81154 <_malloc_r+0x340>
   81042:	45c3      	cmp	fp, r8
   81044:	f8dc 3000 	ldr.w	r3, [ip]
   81048:	4453      	add	r3, sl
   8104a:	f8cc 3000 	str.w	r3, [ip]
   8104e:	f000 814a 	beq.w	812e6 <_malloc_r+0x4d2>
   81052:	6812      	ldr	r2, [r2, #0]
   81054:	493c      	ldr	r1, [pc, #240]	; (81148 <_malloc_r+0x334>)
   81056:	3201      	adds	r2, #1
   81058:	bf1b      	ittet	ne
   8105a:	ebcb 0b08 	rsbne	fp, fp, r8
   8105e:	445b      	addne	r3, fp
   81060:	f8c1 8000 	streq.w	r8, [r1]
   81064:	f8cc 3000 	strne.w	r3, [ip]
   81068:	f018 0307 	ands.w	r3, r8, #7
   8106c:	f000 8114 	beq.w	81298 <_malloc_r+0x484>
   81070:	f1c3 0208 	rsb	r2, r3, #8
   81074:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   81078:	4490      	add	r8, r2
   8107a:	3308      	adds	r3, #8
   8107c:	44c2      	add	sl, r8
   8107e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   81082:	ebca 0a03 	rsb	sl, sl, r3
   81086:	4651      	mov	r1, sl
   81088:	4630      	mov	r0, r6
   8108a:	f8cd c004 	str.w	ip, [sp, #4]
   8108e:	f000 f961 	bl	81354 <_sbrk_r>
   81092:	1c43      	adds	r3, r0, #1
   81094:	f8dd c004 	ldr.w	ip, [sp, #4]
   81098:	f000 8135 	beq.w	81306 <_malloc_r+0x4f2>
   8109c:	ebc8 0200 	rsb	r2, r8, r0
   810a0:	4452      	add	r2, sl
   810a2:	f042 0201 	orr.w	r2, r2, #1
   810a6:	f8dc 3000 	ldr.w	r3, [ip]
   810aa:	42bc      	cmp	r4, r7
   810ac:	4453      	add	r3, sl
   810ae:	f8c7 8008 	str.w	r8, [r7, #8]
   810b2:	f8cc 3000 	str.w	r3, [ip]
   810b6:	f8c8 2004 	str.w	r2, [r8, #4]
   810ba:	f8df a098 	ldr.w	sl, [pc, #152]	; 81154 <_malloc_r+0x340>
   810be:	d015      	beq.n	810ec <_malloc_r+0x2d8>
   810c0:	f1b9 0f0f 	cmp.w	r9, #15
   810c4:	f240 80eb 	bls.w	8129e <_malloc_r+0x48a>
   810c8:	6861      	ldr	r1, [r4, #4]
   810ca:	f1a9 020c 	sub.w	r2, r9, #12
   810ce:	f022 0207 	bic.w	r2, r2, #7
   810d2:	f001 0101 	and.w	r1, r1, #1
   810d6:	ea42 0e01 	orr.w	lr, r2, r1
   810da:	2005      	movs	r0, #5
   810dc:	18a1      	adds	r1, r4, r2
   810de:	2a0f      	cmp	r2, #15
   810e0:	f8c4 e004 	str.w	lr, [r4, #4]
   810e4:	6048      	str	r0, [r1, #4]
   810e6:	6088      	str	r0, [r1, #8]
   810e8:	f200 8111 	bhi.w	8130e <_malloc_r+0x4fa>
   810ec:	4a17      	ldr	r2, [pc, #92]	; (8114c <_malloc_r+0x338>)
   810ee:	68bc      	ldr	r4, [r7, #8]
   810f0:	6811      	ldr	r1, [r2, #0]
   810f2:	428b      	cmp	r3, r1
   810f4:	bf88      	it	hi
   810f6:	6013      	strhi	r3, [r2, #0]
   810f8:	4a15      	ldr	r2, [pc, #84]	; (81150 <_malloc_r+0x33c>)
   810fa:	6811      	ldr	r1, [r2, #0]
   810fc:	428b      	cmp	r3, r1
   810fe:	bf88      	it	hi
   81100:	6013      	strhi	r3, [r2, #0]
   81102:	6862      	ldr	r2, [r4, #4]
   81104:	f022 0203 	bic.w	r2, r2, #3
   81108:	4295      	cmp	r5, r2
   8110a:	ebc5 0302 	rsb	r3, r5, r2
   8110e:	d801      	bhi.n	81114 <_malloc_r+0x300>
   81110:	2b0f      	cmp	r3, #15
   81112:	dc04      	bgt.n	8111e <_malloc_r+0x30a>
   81114:	4630      	mov	r0, r6
   81116:	f000 f91b 	bl	81350 <__malloc_unlock>
   8111a:	2400      	movs	r4, #0
   8111c:	e6a6      	b.n	80e6c <_malloc_r+0x58>
   8111e:	f045 0201 	orr.w	r2, r5, #1
   81122:	f043 0301 	orr.w	r3, r3, #1
   81126:	4425      	add	r5, r4
   81128:	6062      	str	r2, [r4, #4]
   8112a:	4630      	mov	r0, r6
   8112c:	60bd      	str	r5, [r7, #8]
   8112e:	606b      	str	r3, [r5, #4]
   81130:	f000 f90e 	bl	81350 <__malloc_unlock>
   81134:	3408      	adds	r4, #8
   81136:	4620      	mov	r0, r4
   81138:	b003      	add	sp, #12
   8113a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8113e:	bf00      	nop
   81140:	2007056c 	.word	0x2007056c
   81144:	20070a40 	.word	0x20070a40
   81148:	20070978 	.word	0x20070978
   8114c:	20070a3c 	.word	0x20070a3c
   81150:	20070a38 	.word	0x20070a38
   81154:	20070a44 	.word	0x20070a44
   81158:	f1bc 0f14 	cmp.w	ip, #20
   8115c:	d961      	bls.n	81222 <_malloc_r+0x40e>
   8115e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   81162:	f200 808f 	bhi.w	81284 <_malloc_r+0x470>
   81166:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8116a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8116e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   81172:	e697      	b.n	80ea4 <_malloc_r+0x90>
   81174:	0a4b      	lsrs	r3, r1, #9
   81176:	2b04      	cmp	r3, #4
   81178:	d958      	bls.n	8122c <_malloc_r+0x418>
   8117a:	2b14      	cmp	r3, #20
   8117c:	f200 80ad 	bhi.w	812da <_malloc_r+0x4c6>
   81180:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   81184:	0050      	lsls	r0, r2, #1
   81186:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8118a:	6883      	ldr	r3, [r0, #8]
   8118c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 81348 <_malloc_r+0x534>
   81190:	4283      	cmp	r3, r0
   81192:	f000 808a 	beq.w	812aa <_malloc_r+0x496>
   81196:	685a      	ldr	r2, [r3, #4]
   81198:	f022 0203 	bic.w	r2, r2, #3
   8119c:	4291      	cmp	r1, r2
   8119e:	d202      	bcs.n	811a6 <_malloc_r+0x392>
   811a0:	689b      	ldr	r3, [r3, #8]
   811a2:	4298      	cmp	r0, r3
   811a4:	d1f7      	bne.n	81196 <_malloc_r+0x382>
   811a6:	68d9      	ldr	r1, [r3, #12]
   811a8:	687a      	ldr	r2, [r7, #4]
   811aa:	60e1      	str	r1, [r4, #12]
   811ac:	60a3      	str	r3, [r4, #8]
   811ae:	608c      	str	r4, [r1, #8]
   811b0:	60dc      	str	r4, [r3, #12]
   811b2:	e6b6      	b.n	80f22 <_malloc_r+0x10e>
   811b4:	f045 0701 	orr.w	r7, r5, #1
   811b8:	f042 0101 	orr.w	r1, r2, #1
   811bc:	4425      	add	r5, r4
   811be:	6067      	str	r7, [r4, #4]
   811c0:	4630      	mov	r0, r6
   811c2:	615d      	str	r5, [r3, #20]
   811c4:	611d      	str	r5, [r3, #16]
   811c6:	f8c5 e00c 	str.w	lr, [r5, #12]
   811ca:	f8c5 e008 	str.w	lr, [r5, #8]
   811ce:	6069      	str	r1, [r5, #4]
   811d0:	50aa      	str	r2, [r5, r2]
   811d2:	3408      	adds	r4, #8
   811d4:	f000 f8bc 	bl	81350 <__malloc_unlock>
   811d8:	e648      	b.n	80e6c <_malloc_r+0x58>
   811da:	685a      	ldr	r2, [r3, #4]
   811dc:	e6a1      	b.n	80f22 <_malloc_r+0x10e>
   811de:	f109 0901 	add.w	r9, r9, #1
   811e2:	f019 0f03 	tst.w	r9, #3
   811e6:	f104 0408 	add.w	r4, r4, #8
   811ea:	f47f aead 	bne.w	80f48 <_malloc_r+0x134>
   811ee:	e02d      	b.n	8124c <_malloc_r+0x438>
   811f0:	f104 0308 	add.w	r3, r4, #8
   811f4:	6964      	ldr	r4, [r4, #20]
   811f6:	42a3      	cmp	r3, r4
   811f8:	bf08      	it	eq
   811fa:	f10c 0c02 	addeq.w	ip, ip, #2
   811fe:	f43f ae67 	beq.w	80ed0 <_malloc_r+0xbc>
   81202:	e623      	b.n	80e4c <_malloc_r+0x38>
   81204:	4419      	add	r1, r3
   81206:	6848      	ldr	r0, [r1, #4]
   81208:	461c      	mov	r4, r3
   8120a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8120e:	68db      	ldr	r3, [r3, #12]
   81210:	f040 0501 	orr.w	r5, r0, #1
   81214:	604d      	str	r5, [r1, #4]
   81216:	4630      	mov	r0, r6
   81218:	60d3      	str	r3, [r2, #12]
   8121a:	609a      	str	r2, [r3, #8]
   8121c:	f000 f898 	bl	81350 <__malloc_unlock>
   81220:	e624      	b.n	80e6c <_malloc_r+0x58>
   81222:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   81226:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8122a:	e63b      	b.n	80ea4 <_malloc_r+0x90>
   8122c:	098a      	lsrs	r2, r1, #6
   8122e:	3238      	adds	r2, #56	; 0x38
   81230:	0050      	lsls	r0, r2, #1
   81232:	e7a8      	b.n	81186 <_malloc_r+0x372>
   81234:	42bc      	cmp	r4, r7
   81236:	f43f af02 	beq.w	8103e <_malloc_r+0x22a>
   8123a:	68bc      	ldr	r4, [r7, #8]
   8123c:	6862      	ldr	r2, [r4, #4]
   8123e:	f022 0203 	bic.w	r2, r2, #3
   81242:	e761      	b.n	81108 <_malloc_r+0x2f4>
   81244:	f8d8 8000 	ldr.w	r8, [r8]
   81248:	4598      	cmp	r8, r3
   8124a:	d17a      	bne.n	81342 <_malloc_r+0x52e>
   8124c:	f01c 0f03 	tst.w	ip, #3
   81250:	f1a8 0308 	sub.w	r3, r8, #8
   81254:	f10c 3cff 	add.w	ip, ip, #4294967295
   81258:	d1f4      	bne.n	81244 <_malloc_r+0x430>
   8125a:	687b      	ldr	r3, [r7, #4]
   8125c:	ea23 0300 	bic.w	r3, r3, r0
   81260:	607b      	str	r3, [r7, #4]
   81262:	0040      	lsls	r0, r0, #1
   81264:	4298      	cmp	r0, r3
   81266:	f63f aebe 	bhi.w	80fe6 <_malloc_r+0x1d2>
   8126a:	2800      	cmp	r0, #0
   8126c:	f43f aebb 	beq.w	80fe6 <_malloc_r+0x1d2>
   81270:	4203      	tst	r3, r0
   81272:	46cc      	mov	ip, r9
   81274:	f47f ae64 	bne.w	80f40 <_malloc_r+0x12c>
   81278:	0040      	lsls	r0, r0, #1
   8127a:	4203      	tst	r3, r0
   8127c:	f10c 0c04 	add.w	ip, ip, #4
   81280:	d0fa      	beq.n	81278 <_malloc_r+0x464>
   81282:	e65d      	b.n	80f40 <_malloc_r+0x12c>
   81284:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   81288:	d819      	bhi.n	812be <_malloc_r+0x4aa>
   8128a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8128e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   81292:	ea4f 014c 	mov.w	r1, ip, lsl #1
   81296:	e605      	b.n	80ea4 <_malloc_r+0x90>
   81298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8129c:	e6ee      	b.n	8107c <_malloc_r+0x268>
   8129e:	2301      	movs	r3, #1
   812a0:	f8c8 3004 	str.w	r3, [r8, #4]
   812a4:	4644      	mov	r4, r8
   812a6:	2200      	movs	r2, #0
   812a8:	e72e      	b.n	81108 <_malloc_r+0x2f4>
   812aa:	1092      	asrs	r2, r2, #2
   812ac:	2001      	movs	r0, #1
   812ae:	4090      	lsls	r0, r2
   812b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   812b4:	4619      	mov	r1, r3
   812b6:	4302      	orrs	r2, r0
   812b8:	f8c8 2004 	str.w	r2, [r8, #4]
   812bc:	e775      	b.n	811aa <_malloc_r+0x396>
   812be:	f240 5354 	movw	r3, #1364	; 0x554
   812c2:	459c      	cmp	ip, r3
   812c4:	d81b      	bhi.n	812fe <_malloc_r+0x4ea>
   812c6:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   812ca:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   812ce:	ea4f 014c 	mov.w	r1, ip, lsl #1
   812d2:	e5e7      	b.n	80ea4 <_malloc_r+0x90>
   812d4:	f10a 0a10 	add.w	sl, sl, #16
   812d8:	e6a3      	b.n	81022 <_malloc_r+0x20e>
   812da:	2b54      	cmp	r3, #84	; 0x54
   812dc:	d81f      	bhi.n	8131e <_malloc_r+0x50a>
   812de:	0b0a      	lsrs	r2, r1, #12
   812e0:	326e      	adds	r2, #110	; 0x6e
   812e2:	0050      	lsls	r0, r2, #1
   812e4:	e74f      	b.n	81186 <_malloc_r+0x372>
   812e6:	f3cb 010b 	ubfx	r1, fp, #0, #12
   812ea:	2900      	cmp	r1, #0
   812ec:	f47f aeb1 	bne.w	81052 <_malloc_r+0x23e>
   812f0:	eb0a 0109 	add.w	r1, sl, r9
   812f4:	68ba      	ldr	r2, [r7, #8]
   812f6:	f041 0101 	orr.w	r1, r1, #1
   812fa:	6051      	str	r1, [r2, #4]
   812fc:	e6f6      	b.n	810ec <_malloc_r+0x2d8>
   812fe:	21fc      	movs	r1, #252	; 0xfc
   81300:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   81304:	e5ce      	b.n	80ea4 <_malloc_r+0x90>
   81306:	2201      	movs	r2, #1
   81308:	f04f 0a00 	mov.w	sl, #0
   8130c:	e6cb      	b.n	810a6 <_malloc_r+0x292>
   8130e:	f104 0108 	add.w	r1, r4, #8
   81312:	4630      	mov	r0, r6
   81314:	f7ff fcaa 	bl	80c6c <_free_r>
   81318:	f8da 3000 	ldr.w	r3, [sl]
   8131c:	e6e6      	b.n	810ec <_malloc_r+0x2d8>
   8131e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   81322:	d803      	bhi.n	8132c <_malloc_r+0x518>
   81324:	0bca      	lsrs	r2, r1, #15
   81326:	3277      	adds	r2, #119	; 0x77
   81328:	0050      	lsls	r0, r2, #1
   8132a:	e72c      	b.n	81186 <_malloc_r+0x372>
   8132c:	f240 5254 	movw	r2, #1364	; 0x554
   81330:	4293      	cmp	r3, r2
   81332:	d803      	bhi.n	8133c <_malloc_r+0x528>
   81334:	0c8a      	lsrs	r2, r1, #18
   81336:	327c      	adds	r2, #124	; 0x7c
   81338:	0050      	lsls	r0, r2, #1
   8133a:	e724      	b.n	81186 <_malloc_r+0x372>
   8133c:	20fc      	movs	r0, #252	; 0xfc
   8133e:	227e      	movs	r2, #126	; 0x7e
   81340:	e721      	b.n	81186 <_malloc_r+0x372>
   81342:	687b      	ldr	r3, [r7, #4]
   81344:	e78d      	b.n	81262 <_malloc_r+0x44e>
   81346:	bf00      	nop
   81348:	2007056c 	.word	0x2007056c

0008134c <__malloc_lock>:
   8134c:	4770      	bx	lr
   8134e:	bf00      	nop

00081350 <__malloc_unlock>:
   81350:	4770      	bx	lr
   81352:	bf00      	nop

00081354 <_sbrk_r>:
   81354:	b538      	push	{r3, r4, r5, lr}
   81356:	4c07      	ldr	r4, [pc, #28]	; (81374 <_sbrk_r+0x20>)
   81358:	2300      	movs	r3, #0
   8135a:	4605      	mov	r5, r0
   8135c:	4608      	mov	r0, r1
   8135e:	6023      	str	r3, [r4, #0]
   81360:	f7ff fb48 	bl	809f4 <_sbrk>
   81364:	1c43      	adds	r3, r0, #1
   81366:	d000      	beq.n	8136a <_sbrk_r+0x16>
   81368:	bd38      	pop	{r3, r4, r5, pc}
   8136a:	6823      	ldr	r3, [r4, #0]
   8136c:	2b00      	cmp	r3, #0
   8136e:	d0fb      	beq.n	81368 <_sbrk_r+0x14>
   81370:	602b      	str	r3, [r5, #0]
   81372:	bd38      	pop	{r3, r4, r5, pc}
   81374:	20070a6c 	.word	0x20070a6c

00081378 <__register_exitproc>:
   81378:	b5f0      	push	{r4, r5, r6, r7, lr}
   8137a:	4c27      	ldr	r4, [pc, #156]	; (81418 <__register_exitproc+0xa0>)
   8137c:	b085      	sub	sp, #20
   8137e:	6826      	ldr	r6, [r4, #0]
   81380:	4607      	mov	r7, r0
   81382:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   81386:	2c00      	cmp	r4, #0
   81388:	d040      	beq.n	8140c <__register_exitproc+0x94>
   8138a:	6865      	ldr	r5, [r4, #4]
   8138c:	2d1f      	cmp	r5, #31
   8138e:	dd1e      	ble.n	813ce <__register_exitproc+0x56>
   81390:	4822      	ldr	r0, [pc, #136]	; (8141c <__register_exitproc+0xa4>)
   81392:	b918      	cbnz	r0, 8139c <__register_exitproc+0x24>
   81394:	f04f 30ff 	mov.w	r0, #4294967295
   81398:	b005      	add	sp, #20
   8139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8139c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   813a0:	9103      	str	r1, [sp, #12]
   813a2:	9202      	str	r2, [sp, #8]
   813a4:	9301      	str	r3, [sp, #4]
   813a6:	f7ff fd2d 	bl	80e04 <malloc>
   813aa:	9903      	ldr	r1, [sp, #12]
   813ac:	4604      	mov	r4, r0
   813ae:	9a02      	ldr	r2, [sp, #8]
   813b0:	9b01      	ldr	r3, [sp, #4]
   813b2:	2800      	cmp	r0, #0
   813b4:	d0ee      	beq.n	81394 <__register_exitproc+0x1c>
   813b6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   813ba:	2000      	movs	r0, #0
   813bc:	6025      	str	r5, [r4, #0]
   813be:	6060      	str	r0, [r4, #4]
   813c0:	4605      	mov	r5, r0
   813c2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   813c6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   813ca:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   813ce:	b93f      	cbnz	r7, 813e0 <__register_exitproc+0x68>
   813d0:	1c6b      	adds	r3, r5, #1
   813d2:	2000      	movs	r0, #0
   813d4:	3502      	adds	r5, #2
   813d6:	6063      	str	r3, [r4, #4]
   813d8:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   813dc:	b005      	add	sp, #20
   813de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   813e0:	2601      	movs	r6, #1
   813e2:	40ae      	lsls	r6, r5
   813e4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   813e8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   813ec:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   813f0:	2f02      	cmp	r7, #2
   813f2:	ea42 0206 	orr.w	r2, r2, r6
   813f6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   813fa:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   813fe:	d1e7      	bne.n	813d0 <__register_exitproc+0x58>
   81400:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   81404:	431e      	orrs	r6, r3
   81406:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8140a:	e7e1      	b.n	813d0 <__register_exitproc+0x58>
   8140c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   81410:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81414:	e7b9      	b.n	8138a <__register_exitproc+0x12>
   81416:	bf00      	nop
   81418:	00081448 	.word	0x00081448
   8141c:	00080e05 	.word	0x00080e05

00081420 <LED_DESCRIPTOR>:
   81420:	0000003b 00000000 00000055 00000000     ;.......U.......
   81430:	00000056 00000000 00000057 00000001     V.......W.......

00081440 <tx_buffer>:
   81440:	00005555 00000043                       UU..C...

00081448 <_global_impure_ptr>:
   81448:	20070140                                @.. 

0008144c <_init>:
   8144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8144e:	bf00      	nop
   81450:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81452:	bc08      	pop	{r3}
   81454:	469e      	mov	lr, r3
   81456:	4770      	bx	lr

00081458 <__init_array_start>:
   81458:	00080b81 	.word	0x00080b81

0008145c <__frame_dummy_init_array_entry>:
   8145c:	00080119                                ....

00081460 <_fini>:
   81460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81462:	bf00      	nop
   81464:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81466:	bc08      	pop	{r3}
   81468:	469e      	mov	lr, r3
   8146a:	4770      	bx	lr

0008146c <__fini_array_start>:
   8146c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00081444 00000000 00000000 00000000     D...............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <__malloc_av_>:
	...
20070574:	2007056c 2007056c 20070574 20070574     l.. l.. t.. t.. 
20070584:	2007057c 2007057c 20070584 20070584     |.. |.. ... ... 
20070594:	2007058c 2007058c 20070594 20070594     ... ... ... ... 
200705a4:	2007059c 2007059c 200705a4 200705a4     ... ... ... ... 
200705b4:	200705ac 200705ac 200705b4 200705b4     ... ... ... ... 
200705c4:	200705bc 200705bc 200705c4 200705c4     ... ... ... ... 
200705d4:	200705cc 200705cc 200705d4 200705d4     ... ... ... ... 
200705e4:	200705dc 200705dc 200705e4 200705e4     ... ... ... ... 
200705f4:	200705ec 200705ec 200705f4 200705f4     ... ... ... ... 
20070604:	200705fc 200705fc 20070604 20070604     ... ... ... ... 
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 

20070974 <__malloc_trim_threshold>:
20070974:	00020000                                ....

20070978 <__malloc_sbrk_base>:
20070978:	ffffffff                                ....
